
Demo_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f8e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001124  0801fa78  0801fa78  0002fa78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020b9c  08020b9c  0004029c  2**0
                  CONTENTS
  4 .ARM          00000008  08020b9c  08020b9c  00030b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020ba4  08020ba4  0004029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020ba4  08020ba4  00030ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020ba8  08020ba8  00030ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000029c  20000000  08020bac  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a444  200002a0  08020e48  000402a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000a6e4  08020e48  0004a6e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004029c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000a69fe  00000000  00000000  000402cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a391  00000000  00000000  000e6cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002858  00000000  00000000  000f1060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000025b8  00000000  00000000  000f38b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003172d  00000000  00000000  000f5e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046ee7  00000000  00000000  0012759d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb2d5  00000000  00000000  0016e484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00259759  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bff8  00000000  00000000  002597ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002a0 	.word	0x200002a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801fa60 	.word	0x0801fa60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002a4 	.word	0x200002a4
 80001cc:	0801fa60 	.word	0x0801fa60

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <ABTInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void ABTInit(float samp_time, float a, float b, float g, float *ip, float *pos, float *vel, float *acc, ABT_t *filt)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	ed87 0a07 	vstr	s0, [r7, #28]
 8000ff6:	edc7 0a06 	vstr	s1, [r7, #24]
 8000ffa:	ed87 1a05 	vstr	s2, [r7, #20]
 8000ffe:	edc7 1a04 	vstr	s3, [r7, #16]
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	603b      	str	r3, [r7, #0]
	filt->sample_time = samp_time;
 800100a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100c:	69fa      	ldr	r2, [r7, #28]
 800100e:	601a      	str	r2, [r3, #0]
	filt->alpha = a;
 8001010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	605a      	str	r2, [r3, #4]
	filt->beta = b;
 8001016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	609a      	str	r2, [r3, #8]
	filt->gamma = g;
 800101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	60da      	str	r2, [r3, #12]
	filt->input = ip;
 8001022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	611a      	str	r2, [r3, #16]
	filt->pos_output = pos;
 8001028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	615a      	str	r2, [r3, #20]
	filt->vel_output = vel;
 800102e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
	filt->acc_output = acc;
 8001034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	61da      	str	r2, [r3, #28]
}
 800103a:	bf00      	nop
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <ABTEstimateInit>:

void ABTEstimateInit(ABT_t *filt)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
	*(filt->pos_output) = 0;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	*(filt->vel_output) = 0;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
	*(filt->acc_output) = 0;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <BDCInit>:
 * Function Return		: None
 * Function Example		: BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 * 						  BDCInit(&BDC2, &htim3, TIM_CHANNEL_1, GPIO, GPIOA, GPIO_Pin_9, GPIOA, GPIO_Pin_10);
 */

void BDCInit(BDC_t* bdc,TIM_HandleTypeDef* htimx,uint32_t Channel, BCDDIRPINType Dirpintype, ...){
 8001078:	b408      	push	{r3}
 800107a:	b580      	push	{r7, lr}
 800107c:	b089      	sub	sp, #36	; 0x24
 800107e:	af02      	add	r7, sp, #8
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]

	bdc->htim = htimx;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	68ba      	ldr	r2, [r7, #8]
 800108a:	61da      	str	r2, [r3, #28]
	bdc->Channel = Channel;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	621a      	str	r2, [r3, #32]
	bdc->Dirpintype =  Dirpintype;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001098:	701a      	strb	r2, [r3, #0]

	va_list pinconfig;
	va_start(pinconfig, Dirpintype);
 800109a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109e:	617b      	str	r3, [r7, #20]

	if( bdc->Dirpintype == GPIO){
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d12e      	bne.n	8001106 <BDCInit+0x8e>

		bdc->GPIOx_DIR1 = va_arg(pinconfig, GPIO_TypeDef*);
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	1d1a      	adds	r2, r3, #4
 80010ac:	617a      	str	r2, [r7, #20]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	605a      	str	r2, [r3, #4]
		bdc->GPIO_Pin_DIR1	= va_arg(pinconfig, int);
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	1d1a      	adds	r2, r3, #4
 80010b8:	617a      	str	r2, [r7, #20]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	b29a      	uxth	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	811a      	strh	r2, [r3, #8]
		bdc->GPIOx_DIR2 = va_arg(pinconfig, GPIO_TypeDef*);
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	1d1a      	adds	r2, r3, #4
 80010c6:	617a      	str	r2, [r7, #20]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	60da      	str	r2, [r3, #12]
		bdc->GPIO_Pin_DIR2	= va_arg(pinconfig, int);
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	1d1a      	adds	r2, r3, #4
 80010d2:	617a      	str	r2, [r7, #20]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	821a      	strh	r2, [r3, #16]



		GPIOPinsInit(bdc->GPIOx_DIR1, bdc->GPIO_Pin_DIR1,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6858      	ldr	r0, [r3, #4]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	8919      	ldrh	r1, [r3, #8]
 80010e4:	2301      	movs	r3, #1
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2302      	movs	r3, #2
 80010ea:	2201      	movs	r2, #1
 80010ec:	f000 f908 	bl	8001300 <GPIOPinsInit>
		GPIOPinsInit(bdc->GPIOx_DIR2, bdc->GPIO_Pin_DIR2,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	68d8      	ldr	r0, [r3, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8a19      	ldrh	r1, [r3, #16]
 80010f8:	2301      	movs	r3, #1
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2302      	movs	r3, #2
 80010fe:	2201      	movs	r2, #1
 8001100:	f000 f8fe 	bl	8001300 <GPIOPinsInit>
 8001104:	e017      	b.n	8001136 <BDCInit+0xbe>

	}else if(bdc->Dirpintype == SHIFTREG){
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d113      	bne.n	8001136 <BDCInit+0xbe>

		bdc->shiftreg = va_arg(pinconfig, byte_t *);
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	1d1a      	adds	r2, r3, #4
 8001112:	617a      	str	r2, [r7, #20]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	615a      	str	r2, [r3, #20]
		bdc->dir1 = va_arg(pinconfig, int);
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	1d1a      	adds	r2, r3, #4
 800111e:	617a      	str	r2, [r7, #20]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	761a      	strb	r2, [r3, #24]
		bdc->dir2 = va_arg(pinconfig, int);
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	1d1a      	adds	r2, r3, #4
 800112c:	617a      	str	r2, [r7, #20]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	765a      	strb	r2, [r3, #25]
	}

	va_end(pinconfig);
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6a1b      	ldr	r3, [r3, #32]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d105      	bne.n	800114a <BDCInit+0xd2>
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2200      	movs	r2, #0
 8001146:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001148:	e018      	b.n	800117c <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	2b04      	cmp	r3, #4
 8001150:	d105      	bne.n	800115e <BDCInit+0xe6>
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	2300      	movs	r3, #0
 800115a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800115c:	e00e      	b.n	800117c <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	2b08      	cmp	r3, #8
 8001164:	d105      	bne.n	8001172 <BDCInit+0xfa>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	2300      	movs	r3, #0
 800116e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001170:	e004      	b.n	800117c <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2300      	movs	r3, #0
 800117a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800117c:	bf00      	nop
 800117e:	371c      	adds	r7, #28
 8001180:	46bd      	mov	sp, r7
 8001182:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001186:	b001      	add	sp, #4
 8001188:	4770      	bx	lr

0800118a <WriteBDC>:
 * Function Return		: None
 * Function Example		: WriteBDC(&BDC1,20000);
 */

void WriteBDC(BDC_t* bdc, int32_t pwm)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	6039      	str	r1, [r7, #0]

	if(pwm >= 0){
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db52      	blt.n	8001240 <WriteBDC+0xb6>

		//*(bdc-> speed) = pwm;
		__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), pwm);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a1b      	ldr	r3, [r3, #32]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d105      	bne.n	80011ae <WriteBDC+0x24>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34
 80011ac:	e018      	b.n	80011e0 <WriteBDC+0x56>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d105      	bne.n	80011c2 <WriteBDC+0x38>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	6393      	str	r3, [r2, #56]	; 0x38
 80011c0:	e00e      	b.n	80011e0 <WriteBDC+0x56>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d105      	bne.n	80011d6 <WriteBDC+0x4c>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011d4:	e004      	b.n	80011e0 <WriteBDC+0x56>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	6413      	str	r3, [r2, #64]	; 0x40

		if( bdc->Dirpintype == GPIO){
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d110      	bne.n	800120a <WriteBDC+0x80>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_SET);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6858      	ldr	r0, [r3, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	891b      	ldrh	r3, [r3, #8]
 80011f0:	2201      	movs	r2, #1
 80011f2:	4619      	mov	r1, r3
 80011f4:	f011 f8c4 	bl	8012380 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_RESET);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68d8      	ldr	r0, [r3, #12]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	8a1b      	ldrh	r3, [r3, #16]
 8001200:	2200      	movs	r2, #0
 8001202:	4619      	mov	r1, r3
 8001204:	f011 f8bc 	bl	8012380 <HAL_GPIO_WritePin>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
			bdc->shiftreg->Byte |= bdc->dir2;

		}
	}
}
 8001208:	e076      	b.n	80012f8 <WriteBDC+0x16e>
		}else if(bdc->Dirpintype == SHIFTREG){
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d172      	bne.n	80012f8 <WriteBDC+0x16e>
			bdc->shiftreg->Byte |= bdc->dir1;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	7819      	ldrb	r1, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7e1a      	ldrb	r2, [r3, #24]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	430a      	orrs	r2, r1
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir2);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	7819      	ldrb	r1, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7e5b      	ldrb	r3, [r3, #25]
 8001230:	43db      	mvns	r3, r3
 8001232:	b2da      	uxtb	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	400a      	ands	r2, r1
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	701a      	strb	r2, [r3, #0]
}
 800123e:	e05b      	b.n	80012f8 <WriteBDC+0x16e>
	}else if (pwm < 0){
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	da58      	bge.n	80012f8 <WriteBDC+0x16e>
		__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), pwm*(-1));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d106      	bne.n	800125c <WriteBDC+0xd2>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	425a      	negs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
 800125a:	e01e      	b.n	800129a <WriteBDC+0x110>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	2b04      	cmp	r3, #4
 8001262:	d107      	bne.n	8001274 <WriteBDC+0xea>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	4259      	negs	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	460b      	mov	r3, r1
 8001270:	6393      	str	r3, [r2, #56]	; 0x38
 8001272:	e012      	b.n	800129a <WriteBDC+0x110>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	2b08      	cmp	r3, #8
 800127a:	d107      	bne.n	800128c <WriteBDC+0x102>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	4259      	negs	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	460b      	mov	r3, r1
 8001288:	63d3      	str	r3, [r2, #60]	; 0x3c
 800128a:	e006      	b.n	800129a <WriteBDC+0x110>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	4259      	negs	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	460b      	mov	r3, r1
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
		if( bdc->Dirpintype == GPIO){
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d110      	bne.n	80012c4 <WriteBDC+0x13a>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_RESET);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6858      	ldr	r0, [r3, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	891b      	ldrh	r3, [r3, #8]
 80012aa:	2200      	movs	r2, #0
 80012ac:	4619      	mov	r1, r3
 80012ae:	f011 f867 	bl	8012380 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_SET);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68d8      	ldr	r0, [r3, #12]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	8a1b      	ldrh	r3, [r3, #16]
 80012ba:	2201      	movs	r2, #1
 80012bc:	4619      	mov	r1, r3
 80012be:	f011 f85f 	bl	8012380 <HAL_GPIO_WritePin>
}
 80012c2:	e019      	b.n	80012f8 <WriteBDC+0x16e>
		}else if(bdc->Dirpintype == SHIFTREG){
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d115      	bne.n	80012f8 <WriteBDC+0x16e>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	7819      	ldrb	r1, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7e1b      	ldrb	r3, [r3, #24]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	400a      	ands	r2, r1
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte |= bdc->dir2;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	7819      	ldrb	r1, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	7e5a      	ldrb	r2, [r3, #25]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	701a      	strb	r2, [r3, #0]
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <GPIOPinsInit>:
 * Function Return		: None
 * Function Example		: GPIOPinsInit(GPIOA, GPIO_Pin_2, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 */

void GPIOPinsInit (GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin,uint32_t Mode, uint32_t GPIO_Speed,  uint32_t GPIO_PuPd)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b092      	sub	sp, #72	; 0x48
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	460b      	mov	r3, r1
 800130e:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]

	switch((uint32_t)GPIOx){
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4a6a      	ldr	r2, [pc, #424]	; (80014cc <GPIOPinsInit+0x1cc>)
 8001324:	4293      	cmp	r3, r2
 8001326:	f000 80af 	beq.w	8001488 <GPIOPinsInit+0x188>
 800132a:	4a68      	ldr	r2, [pc, #416]	; (80014cc <GPIOPinsInit+0x1cc>)
 800132c:	4293      	cmp	r3, r2
 800132e:	f200 80ba 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001332:	4a67      	ldr	r2, [pc, #412]	; (80014d0 <GPIOPinsInit+0x1d0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	f000 8098 	beq.w	800146a <GPIOPinsInit+0x16a>
 800133a:	4a65      	ldr	r2, [pc, #404]	; (80014d0 <GPIOPinsInit+0x1d0>)
 800133c:	4293      	cmp	r3, r2
 800133e:	f200 80b2 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001342:	4a64      	ldr	r2, [pc, #400]	; (80014d4 <GPIOPinsInit+0x1d4>)
 8001344:	4293      	cmp	r3, r2
 8001346:	f000 8081 	beq.w	800144c <GPIOPinsInit+0x14c>
 800134a:	4a62      	ldr	r2, [pc, #392]	; (80014d4 <GPIOPinsInit+0x1d4>)
 800134c:	4293      	cmp	r3, r2
 800134e:	f200 80aa 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001352:	4a61      	ldr	r2, [pc, #388]	; (80014d8 <GPIOPinsInit+0x1d8>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d06a      	beq.n	800142e <GPIOPinsInit+0x12e>
 8001358:	4a5f      	ldr	r2, [pc, #380]	; (80014d8 <GPIOPinsInit+0x1d8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	f200 80a3 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001360:	4a5e      	ldr	r2, [pc, #376]	; (80014dc <GPIOPinsInit+0x1dc>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d054      	beq.n	8001410 <GPIOPinsInit+0x110>
 8001366:	4a5d      	ldr	r2, [pc, #372]	; (80014dc <GPIOPinsInit+0x1dc>)
 8001368:	4293      	cmp	r3, r2
 800136a:	f200 809c 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 800136e:	4a5c      	ldr	r2, [pc, #368]	; (80014e0 <GPIOPinsInit+0x1e0>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d03e      	beq.n	80013f2 <GPIOPinsInit+0xf2>
 8001374:	4a5a      	ldr	r2, [pc, #360]	; (80014e0 <GPIOPinsInit+0x1e0>)
 8001376:	4293      	cmp	r3, r2
 8001378:	f200 8095 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 800137c:	4a59      	ldr	r2, [pc, #356]	; (80014e4 <GPIOPinsInit+0x1e4>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d028      	beq.n	80013d4 <GPIOPinsInit+0xd4>
 8001382:	4a58      	ldr	r2, [pc, #352]	; (80014e4 <GPIOPinsInit+0x1e4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	f200 808e 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 800138a:	4a57      	ldr	r2, [pc, #348]	; (80014e8 <GPIOPinsInit+0x1e8>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d003      	beq.n	8001398 <GPIOPinsInit+0x98>
 8001390:	4a56      	ldr	r2, [pc, #344]	; (80014ec <GPIOPinsInit+0x1ec>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00f      	beq.n	80013b6 <GPIOPinsInit+0xb6>
	break;

	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
	break;

	default: break;
 8001396:	e086      	b.n	80014a6 <GPIOPinsInit+0x1a6>
	case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	633b      	str	r3, [r7, #48]	; 0x30
 800139c:	4b54      	ldr	r3, [pc, #336]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	4a53      	ldr	r2, [pc, #332]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6313      	str	r3, [r2, #48]	; 0x30
 80013a8:	4b51      	ldr	r3, [pc, #324]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	633b      	str	r3, [r7, #48]	; 0x30
 80013b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	break;
 80013b4:	e078      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ba:	4b4d      	ldr	r3, [pc, #308]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a4c      	ldr	r2, [pc, #304]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b4a      	ldr	r3, [pc, #296]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	break;
 80013d2:	e069      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013d4:	2300      	movs	r3, #0
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80013d8:	4b45      	ldr	r3, [pc, #276]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	4a44      	ldr	r2, [pc, #272]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	6313      	str	r3, [r2, #48]	; 0x30
 80013e4:	4b42      	ldr	r3, [pc, #264]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
	break;
 80013f0:	e05a      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
 80013f6:	4b3e      	ldr	r3, [pc, #248]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a3d      	ldr	r2, [pc, #244]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b3b      	ldr	r3, [pc, #236]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	break;
 800140e:	e04b      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
 8001414:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	4a35      	ldr	r2, [pc, #212]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800141a:	f043 0310 	orr.w	r3, r3, #16
 800141e:	6313      	str	r3, [r2, #48]	; 0x30
 8001420:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	f003 0310 	and.w	r3, r3, #16
 8001428:	623b      	str	r3, [r7, #32]
 800142a:	6a3b      	ldr	r3, [r7, #32]
	break;
 800142c:	e03c      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	4b2f      	ldr	r3, [pc, #188]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a2e      	ldr	r2, [pc, #184]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001438:	f043 0320 	orr.w	r3, r3, #32
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0320 	and.w	r3, r3, #32
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	69fb      	ldr	r3, [r7, #28]
	break;
 800144a:	e02d      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 800144c:	2300      	movs	r3, #0
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	4a26      	ldr	r2, [pc, #152]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800145a:	6313      	str	r3, [r2, #48]	; 0x30
 800145c:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001464:	61bb      	str	r3, [r7, #24]
 8001466:	69bb      	ldr	r3, [r7, #24]
	break;
 8001468:	e01e      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a1f      	ldr	r2, [pc, #124]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697b      	ldr	r3, [r7, #20]
	break;
 8001486:	e00f      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001496:	6313      	str	r3, [r2, #48]	; 0x30
 8001498:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]
	break;
 80014a4:	e000      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	default: break;
 80014a6:	bf00      	nop
	}


	GPIO_InitStruct.Pin = GPIO_Pin;
 80014a8:	897b      	ldrh	r3, [r7, #10]
 80014aa:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Mode = Mode;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PuPd;
 80014b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_Speed;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80014b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014bc:	4619      	mov	r1, r3
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f010 fcae 	bl	8011e20 <HAL_GPIO_Init>

}
 80014c4:	bf00      	nop
 80014c6:	3748      	adds	r7, #72	; 0x48
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40022000 	.word	0x40022000
 80014d0:	40021c00 	.word	0x40021c00
 80014d4:	40021800 	.word	0x40021800
 80014d8:	40021400 	.word	0x40021400
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40020c00 	.word	0x40020c00
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020400 	.word	0x40020400
 80014f0:	40023800 	.word	0x40023800

080014f4 <PWMTimeBaseInit>:
 * 						  Prescaler 	Prescaler value to divide TIM clock (1 to 65535)
 * Function Return		: None
 * Function Example		: PWMTimeBaseInit(&htim3, 20000, 84);
 */
void PWMTimeBaseInit(TIM_HandleTypeDef* htimx, uint32_t Period, uint32_t Prescaler)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001500:	f107 0318 	add.w	r3, r7, #24
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150e:	f107 0310 	add.w	r3, r7, #16
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]


	if(htimx == &htim1){
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4a52      	ldr	r2, [pc, #328]	; (8001664 <PWMTimeBaseInit+0x170>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d103      	bne.n	8001528 <PWMTimeBaseInit+0x34>
		htimx->Instance = TIM1;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4a51      	ldr	r2, [pc, #324]	; (8001668 <PWMTimeBaseInit+0x174>)
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	e057      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim2)	{
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4a50      	ldr	r2, [pc, #320]	; (800166c <PWMTimeBaseInit+0x178>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d104      	bne.n	800153a <PWMTimeBaseInit+0x46>
		htimx->Instance = TIM2;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	e04e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim3)	{
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4a4c      	ldr	r2, [pc, #304]	; (8001670 <PWMTimeBaseInit+0x17c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d103      	bne.n	800154a <PWMTimeBaseInit+0x56>
		htimx->Instance = TIM3;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4a4b      	ldr	r2, [pc, #300]	; (8001674 <PWMTimeBaseInit+0x180>)
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	e046      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim4)	{
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4a4a      	ldr	r2, [pc, #296]	; (8001678 <PWMTimeBaseInit+0x184>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d103      	bne.n	800155a <PWMTimeBaseInit+0x66>
		htimx->Instance = TIM4;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4a49      	ldr	r2, [pc, #292]	; (800167c <PWMTimeBaseInit+0x188>)
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	e03e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim5)	{
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4a48      	ldr	r2, [pc, #288]	; (8001680 <PWMTimeBaseInit+0x18c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d103      	bne.n	800156a <PWMTimeBaseInit+0x76>
		htimx->Instance = TIM5;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4a47      	ldr	r2, [pc, #284]	; (8001684 <PWMTimeBaseInit+0x190>)
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	e036      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim8)	{
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4a46      	ldr	r2, [pc, #280]	; (8001688 <PWMTimeBaseInit+0x194>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d103      	bne.n	800157a <PWMTimeBaseInit+0x86>
		htimx->Instance = TIM8;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4a45      	ldr	r2, [pc, #276]	; (800168c <PWMTimeBaseInit+0x198>)
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	e02e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim9)	{
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4a44      	ldr	r2, [pc, #272]	; (8001690 <PWMTimeBaseInit+0x19c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d103      	bne.n	800158a <PWMTimeBaseInit+0x96>
		htimx->Instance = TIM9;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4a43      	ldr	r2, [pc, #268]	; (8001694 <PWMTimeBaseInit+0x1a0>)
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	e026      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim10)	{
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4a42      	ldr	r2, [pc, #264]	; (8001698 <PWMTimeBaseInit+0x1a4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d103      	bne.n	800159a <PWMTimeBaseInit+0xa6>
		htimx->Instance = TIM10;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4a41      	ldr	r2, [pc, #260]	; (800169c <PWMTimeBaseInit+0x1a8>)
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	e01e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim11)	{
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4a40      	ldr	r2, [pc, #256]	; (80016a0 <PWMTimeBaseInit+0x1ac>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d103      	bne.n	80015aa <PWMTimeBaseInit+0xb6>
		htimx->Instance = TIM11;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4a3f      	ldr	r2, [pc, #252]	; (80016a4 <PWMTimeBaseInit+0x1b0>)
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	e016      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim12)	{
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4a3e      	ldr	r2, [pc, #248]	; (80016a8 <PWMTimeBaseInit+0x1b4>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d103      	bne.n	80015ba <PWMTimeBaseInit+0xc6>
		htimx->Instance = TIM12;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4a3d      	ldr	r2, [pc, #244]	; (80016ac <PWMTimeBaseInit+0x1b8>)
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	e00e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim13)	{
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4a3c      	ldr	r2, [pc, #240]	; (80016b0 <PWMTimeBaseInit+0x1bc>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d103      	bne.n	80015ca <PWMTimeBaseInit+0xd6>
		htimx->Instance = TIM13;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4a3b      	ldr	r2, [pc, #236]	; (80016b4 <PWMTimeBaseInit+0x1c0>)
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	e006      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
		}
	else if(htimx == &htim14)	{
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4a3a      	ldr	r2, [pc, #232]	; (80016b8 <PWMTimeBaseInit+0x1c4>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d102      	bne.n	80015d8 <PWMTimeBaseInit+0xe4>
		htimx->Instance = TIM14;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4a39      	ldr	r2, [pc, #228]	; (80016bc <PWMTimeBaseInit+0x1c8>)
 80015d6:	601a      	str	r2, [r3, #0]
		}

	htimx->Init.Prescaler = Prescaler - 1;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	1e5a      	subs	r2, r3, #1
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = Period - 1;
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	1e5a      	subs	r2, r3, #1
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2280      	movs	r2, #128	; 0x80
 80015f8:	619a      	str	r2, [r3, #24]
	 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f013 fcea 	bl	8014fd4 <HAL_TIM_Base_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <PWMTimeBaseInit+0x116>
	  {
	    Error_Handler();
 8001606:	f002 ff9f 	bl	8004548 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160e:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 8001610:	f107 0318 	add.w	r3, r7, #24
 8001614:	4619      	mov	r1, r3
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f014 f850 	bl	80156bc <HAL_TIM_ConfigClockSource>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <PWMTimeBaseInit+0x132>
	  {
	    Error_Handler();
 8001622:	f002 ff91 	bl	8004548 <Error_Handler>
	  }
	if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f013 fd47 	bl	80150ba <HAL_TIM_PWM_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <PWMTimeBaseInit+0x142>
		{
			Error_Handler();
 8001632:	f002 ff89 	bl	8004548 <Error_Handler>
		}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	4619      	mov	r1, r3
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f014 fc35 	bl	8015eb4 <HAL_TIMEx_MasterConfigSynchronization>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <PWMTimeBaseInit+0x160>
	{
		Error_Handler();
 8001650:	f002 ff7a 	bl	8004548 <Error_Handler>
	}


    HAL_TIM_Base_Start(htimx);
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f013 fce8 	bl	801502a <HAL_TIM_Base_Start>

}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	; 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20005f34 	.word	0x20005f34
 8001668:	40010000 	.word	0x40010000
 800166c:	20006038 	.word	0x20006038
 8001670:	20005ce8 	.word	0x20005ce8
 8001674:	40000400 	.word	0x40000400
 8001678:	20005b24 	.word	0x20005b24
 800167c:	40000800 	.word	0x40000800
 8001680:	20005ca8 	.word	0x20005ca8
 8001684:	40000c00 	.word	0x40000c00
 8001688:	20005ae4 	.word	0x20005ae4
 800168c:	40010400 	.word	0x40010400
 8001690:	20005f74 	.word	0x20005f74
 8001694:	40014000 	.word	0x40014000
 8001698:	20005c04 	.word	0x20005c04
 800169c:	40014400 	.word	0x40014400
 80016a0:	20005e4c 	.word	0x20005e4c
 80016a4:	40014800 	.word	0x40014800
 80016a8:	20006158 	.word	0x20006158
 80016ac:	40001800 	.word	0x40001800
 80016b0:	20005dcc 	.word	0x20005dcc
 80016b4:	40001c00 	.word	0x40001c00
 80016b8:	20006118 	.word	0x20006118
 80016bc:	40002000 	.word	0x40002000

080016c0 <PWMChannelConfig>:
 * 						  GPIO_Pin_x	GPIO_Pin_x of PWM pin(x = 0,1,2,...or 15)
 * Function Return		: None
 * Function Example		: PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 */

void PWMChannelConfig(TIM_HandleTypeDef* htimx, uint32_t Channel , GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_x){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b09a      	sub	sp, #104	; 0x68
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	807b      	strh	r3, [r7, #2]

	TIM_OC_InitTypeDef sConfigOC = {0};
 80016ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
 80016dc:	611a      	str	r2, [r3, #16]
 80016de:	615a      	str	r2, [r3, #20]
 80016e0:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]

	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80016f2:	2370      	movs	r3, #112	; 0x70
 80016f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.Pulse = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80016fa:	2302      	movs	r3, #2
 80016fc:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80016fe:	2308      	movs	r3, #8
 8001700:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	65fb      	str	r3, [r7, #92]	; 0x5c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	667b      	str	r3, [r7, #100]	; 0x64

	if (HAL_TIM_PWM_ConfigChannel(htimx, &sConfigOC, Channel) != HAL_OK)
 800170e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	4619      	mov	r1, r3
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f013 ff0a 	bl	8015530 <HAL_TIM_PWM_ConfigChannel>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <PWMChannelConfig+0x66>
	{
		Error_Handler();
 8001722:	f002 ff11 	bl	8004548 <Error_Handler>
	}

	switch((uint32_t)GPIOx){
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a95      	ldr	r2, [pc, #596]	; (8001980 <PWMChannelConfig+0x2c0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	f000 80af 	beq.w	800188e <PWMChannelConfig+0x1ce>
 8001730:	4a93      	ldr	r2, [pc, #588]	; (8001980 <PWMChannelConfig+0x2c0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	f200 80ba 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001738:	4a92      	ldr	r2, [pc, #584]	; (8001984 <PWMChannelConfig+0x2c4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	f000 8098 	beq.w	8001870 <PWMChannelConfig+0x1b0>
 8001740:	4a90      	ldr	r2, [pc, #576]	; (8001984 <PWMChannelConfig+0x2c4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	f200 80b2 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001748:	4a8f      	ldr	r2, [pc, #572]	; (8001988 <PWMChannelConfig+0x2c8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	f000 8081 	beq.w	8001852 <PWMChannelConfig+0x192>
 8001750:	4a8d      	ldr	r2, [pc, #564]	; (8001988 <PWMChannelConfig+0x2c8>)
 8001752:	4293      	cmp	r3, r2
 8001754:	f200 80aa 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001758:	4a8c      	ldr	r2, [pc, #560]	; (800198c <PWMChannelConfig+0x2cc>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d06a      	beq.n	8001834 <PWMChannelConfig+0x174>
 800175e:	4a8b      	ldr	r2, [pc, #556]	; (800198c <PWMChannelConfig+0x2cc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	f200 80a3 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001766:	4a8a      	ldr	r2, [pc, #552]	; (8001990 <PWMChannelConfig+0x2d0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d054      	beq.n	8001816 <PWMChannelConfig+0x156>
 800176c:	4a88      	ldr	r2, [pc, #544]	; (8001990 <PWMChannelConfig+0x2d0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	f200 809c 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001774:	4a87      	ldr	r2, [pc, #540]	; (8001994 <PWMChannelConfig+0x2d4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d03e      	beq.n	80017f8 <PWMChannelConfig+0x138>
 800177a:	4a86      	ldr	r2, [pc, #536]	; (8001994 <PWMChannelConfig+0x2d4>)
 800177c:	4293      	cmp	r3, r2
 800177e:	f200 8095 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001782:	4a85      	ldr	r2, [pc, #532]	; (8001998 <PWMChannelConfig+0x2d8>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d028      	beq.n	80017da <PWMChannelConfig+0x11a>
 8001788:	4a83      	ldr	r2, [pc, #524]	; (8001998 <PWMChannelConfig+0x2d8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	f200 808e 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001790:	4a82      	ldr	r2, [pc, #520]	; (800199c <PWMChannelConfig+0x2dc>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d003      	beq.n	800179e <PWMChannelConfig+0xde>
 8001796:	4a82      	ldr	r2, [pc, #520]	; (80019a0 <PWMChannelConfig+0x2e0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d00f      	beq.n	80017bc <PWMChannelConfig+0xfc>
		break;

		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
		break;

		default: break;
 800179c:	e086      	b.n	80018ac <PWMChannelConfig+0x1ec>
		case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
 80017a2:	4b80      	ldr	r3, [pc, #512]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a7f      	ldr	r2, [pc, #508]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b7d      	ldr	r3, [pc, #500]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	637b      	str	r3, [r7, #52]	; 0x34
 80017b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		break;
 80017ba:	e078      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	633b      	str	r3, [r7, #48]	; 0x30
 80017c0:	4b78      	ldr	r3, [pc, #480]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	4a77      	ldr	r2, [pc, #476]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017c6:	f043 0302 	orr.w	r3, r3, #2
 80017ca:	6313      	str	r3, [r2, #48]	; 0x30
 80017cc:	4b75      	ldr	r3, [pc, #468]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
 80017d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		break;
 80017d8:	e069      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017de:	4b71      	ldr	r3, [pc, #452]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a70      	ldr	r2, [pc, #448]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b6e      	ldr	r3, [pc, #440]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		break;
 80017f6:	e05a      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80017f8:	2300      	movs	r3, #0
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80017fc:	4b69      	ldr	r3, [pc, #420]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001800:	4a68      	ldr	r2, [pc, #416]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001802:	f043 0308 	orr.w	r3, r3, #8
 8001806:	6313      	str	r3, [r2, #48]	; 0x30
 8001808:	4b66      	ldr	r3, [pc, #408]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
 8001812:	6abb      	ldr	r3, [r7, #40]	; 0x28
		break;
 8001814:	e04b      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
 800181a:	4b62      	ldr	r3, [pc, #392]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a61      	ldr	r2, [pc, #388]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001820:	f043 0310 	orr.w	r3, r3, #16
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b5f      	ldr	r3, [pc, #380]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		break;
 8001832:	e03c      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001834:	2300      	movs	r3, #0
 8001836:	623b      	str	r3, [r7, #32]
 8001838:	4b5a      	ldr	r3, [pc, #360]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183c:	4a59      	ldr	r2, [pc, #356]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800183e:	f043 0320 	orr.w	r3, r3, #32
 8001842:	6313      	str	r3, [r2, #48]	; 0x30
 8001844:	4b57      	ldr	r3, [pc, #348]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	f003 0320 	and.w	r3, r3, #32
 800184c:	623b      	str	r3, [r7, #32]
 800184e:	6a3b      	ldr	r3, [r7, #32]
		break;
 8001850:	e02d      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
 8001856:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a52      	ldr	r2, [pc, #328]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800185c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b50      	ldr	r3, [pc, #320]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	69fb      	ldr	r3, [r7, #28]
		break;
 800186e:	e01e      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	4b4b      	ldr	r3, [pc, #300]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	4a4a      	ldr	r2, [pc, #296]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800187a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800187e:	6313      	str	r3, [r2, #48]	; 0x30
 8001880:	4b48      	ldr	r3, [pc, #288]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	69bb      	ldr	r3, [r7, #24]
		break;
 800188c:	e00f      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	4b44      	ldr	r3, [pc, #272]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a43      	ldr	r2, [pc, #268]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	697b      	ldr	r3, [r7, #20]
		break;
 80018aa:	e000      	b.n	80018ae <PWMChannelConfig+0x1ee>
		default: break;
 80018ac:	bf00      	nop
		}

	    GPIO_InitStruct.Pin = GPIO_Pin_x;
 80018ae:	887b      	ldrh	r3, [r7, #2]
 80018b0:	63bb      	str	r3, [r7, #56]	; 0x38
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	643b      	str	r3, [r7, #64]	; 0x40
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ba:	2303      	movs	r3, #3
 80018bc:	647b      	str	r3, [r7, #68]	; 0x44
		if(htimx == &htim1){
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4a39      	ldr	r2, [pc, #228]	; (80019a8 <PWMChannelConfig+0x2e8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d102      	bne.n	80018cc <PWMChannelConfig+0x20c>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018c6:	2301      	movs	r3, #1
 80018c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80018ca:	e04b      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim2)	{
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4a37      	ldr	r2, [pc, #220]	; (80019ac <PWMChannelConfig+0x2ec>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d102      	bne.n	80018da <PWMChannelConfig+0x21a>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM2 ;
 80018d4:	2301      	movs	r3, #1
 80018d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80018d8:	e044      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim3)	{
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4a34      	ldr	r2, [pc, #208]	; (80019b0 <PWMChannelConfig+0x2f0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d102      	bne.n	80018e8 <PWMChannelConfig+0x228>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018e2:	2302      	movs	r3, #2
 80018e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80018e6:	e03d      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim4)	{
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4a32      	ldr	r2, [pc, #200]	; (80019b4 <PWMChannelConfig+0x2f4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d102      	bne.n	80018f6 <PWMChannelConfig+0x236>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018f0:	2302      	movs	r3, #2
 80018f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80018f4:	e036      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim5)	{
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4a2f      	ldr	r2, [pc, #188]	; (80019b8 <PWMChannelConfig+0x2f8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d102      	bne.n	8001904 <PWMChannelConfig+0x244>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80018fe:	2302      	movs	r3, #2
 8001900:	64bb      	str	r3, [r7, #72]	; 0x48
 8001902:	e02f      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim8)	{
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4a2d      	ldr	r2, [pc, #180]	; (80019bc <PWMChannelConfig+0x2fc>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d102      	bne.n	8001912 <PWMChannelConfig+0x252>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800190c:	2303      	movs	r3, #3
 800190e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001910:	e028      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim9)	{
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4a2a      	ldr	r2, [pc, #168]	; (80019c0 <PWMChannelConfig+0x300>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d102      	bne.n	8001920 <PWMChannelConfig+0x260>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800191a:	2303      	movs	r3, #3
 800191c:	64bb      	str	r3, [r7, #72]	; 0x48
 800191e:	e021      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim10)	{
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4a28      	ldr	r2, [pc, #160]	; (80019c4 <PWMChannelConfig+0x304>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d102      	bne.n	800192e <PWMChannelConfig+0x26e>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001928:	2303      	movs	r3, #3
 800192a:	64bb      	str	r3, [r7, #72]	; 0x48
 800192c:	e01a      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim11)	{
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4a25      	ldr	r2, [pc, #148]	; (80019c8 <PWMChannelConfig+0x308>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d102      	bne.n	800193c <PWMChannelConfig+0x27c>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001936:	2303      	movs	r3, #3
 8001938:	64bb      	str	r3, [r7, #72]	; 0x48
 800193a:	e013      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim12)	{
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4a23      	ldr	r2, [pc, #140]	; (80019cc <PWMChannelConfig+0x30c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d102      	bne.n	800194a <PWMChannelConfig+0x28a>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001944:	2309      	movs	r3, #9
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48
 8001948:	e00c      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim13)	{
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4a20      	ldr	r2, [pc, #128]	; (80019d0 <PWMChannelConfig+0x310>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d102      	bne.n	8001958 <PWMChannelConfig+0x298>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001952:	2309      	movs	r3, #9
 8001954:	64bb      	str	r3, [r7, #72]	; 0x48
 8001956:	e005      	b.n	8001964 <PWMChannelConfig+0x2a4>
			}
		else if(htimx == &htim14)	{
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4a1e      	ldr	r2, [pc, #120]	; (80019d4 <PWMChannelConfig+0x314>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d101      	bne.n	8001964 <PWMChannelConfig+0x2a4>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001960:	2309      	movs	r3, #9
 8001962:	64bb      	str	r3, [r7, #72]	; 0x48
			}

	    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001964:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001968:	4619      	mov	r1, r3
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f010 fa58 	bl	8011e20 <HAL_GPIO_Init>


	    HAL_TIM_PWM_Start(htimx,Channel);
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f013 fbcc 	bl	8015110 <HAL_TIM_PWM_Start>

}
 8001978:	bf00      	nop
 800197a:	3768      	adds	r7, #104	; 0x68
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40022000 	.word	0x40022000
 8001984:	40021c00 	.word	0x40021c00
 8001988:	40021800 	.word	0x40021800
 800198c:	40021400 	.word	0x40021400
 8001990:	40021000 	.word	0x40021000
 8001994:	40020c00 	.word	0x40020c00
 8001998:	40020800 	.word	0x40020800
 800199c:	40020000 	.word	0x40020000
 80019a0:	40020400 	.word	0x40020400
 80019a4:	40023800 	.word	0x40023800
 80019a8:	20005f34 	.word	0x20005f34
 80019ac:	20006038 	.word	0x20006038
 80019b0:	20005ce8 	.word	0x20005ce8
 80019b4:	20005b24 	.word	0x20005b24
 80019b8:	20005ca8 	.word	0x20005ca8
 80019bc:	20005ae4 	.word	0x20005ae4
 80019c0:	20005f74 	.word	0x20005f74
 80019c4:	20005c04 	.word	0x20005c04
 80019c8:	20005e4c 	.word	0x20005e4c
 80019cc:	20006158 	.word	0x20006158
 80019d0:	20005dcc 	.word	0x20005dcc
 80019d4:	20006118 	.word	0x20006118

080019d8 <QEIInit>:
 * Function Arguments	: htimx					Pointer to timer handle
 * Function Return		: None
 * Function Example		: QEIInit(&htim1,5,5);  	//Initialize QEI1
 */
void QEIInit(TIM_HandleTypeDef* htimx)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08e      	sub	sp, #56	; 0x38
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	TIM_Encoder_InitTypeDef sConfig = {0};
 80019e0:	f107 0310 	add.w	r3, r7, #16
 80019e4:	2224      	movs	r2, #36	; 0x24
 80019e6:	2100      	movs	r1, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f018 f927 	bl	8019c3c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]

	IRQn_Type nvic;

	if(htimx == &htim1){
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a6b      	ldr	r2, [pc, #428]	; (8001ba8 <QEIInit+0x1d0>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d106      	bne.n	8001a0e <QEIInit+0x36>
		htimx->Instance = TIM1;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a6a      	ldr	r2, [pc, #424]	; (8001bac <QEIInit+0x1d4>)
 8001a04:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8001a06:	2319      	movs	r3, #25
 8001a08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a0c:	e036      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim2)	{
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a67      	ldr	r2, [pc, #412]	; (8001bb0 <QEIInit+0x1d8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d107      	bne.n	8001a26 <QEIInit+0x4e>
		htimx->Instance = TIM2;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a1c:	601a      	str	r2, [r3, #0]
		nvic=TIM2_IRQn;
 8001a1e:	231c      	movs	r3, #28
 8001a20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a24:	e02a      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim3)	{
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a62      	ldr	r2, [pc, #392]	; (8001bb4 <QEIInit+0x1dc>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d106      	bne.n	8001a3c <QEIInit+0x64>
		htimx->Instance = TIM3;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a61      	ldr	r2, [pc, #388]	; (8001bb8 <QEIInit+0x1e0>)
 8001a32:	601a      	str	r2, [r3, #0]
		nvic=TIM3_IRQn;
 8001a34:	231d      	movs	r3, #29
 8001a36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a3a:	e01f      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim4)	{
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a5f      	ldr	r2, [pc, #380]	; (8001bbc <QEIInit+0x1e4>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d106      	bne.n	8001a52 <QEIInit+0x7a>
		htimx->Instance = TIM4;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a5e      	ldr	r2, [pc, #376]	; (8001bc0 <QEIInit+0x1e8>)
 8001a48:	601a      	str	r2, [r3, #0]
		nvic=TIM4_IRQn;
 8001a4a:	231e      	movs	r3, #30
 8001a4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a50:	e014      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim5)	{
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a5b      	ldr	r2, [pc, #364]	; (8001bc4 <QEIInit+0x1ec>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d106      	bne.n	8001a68 <QEIInit+0x90>
		htimx->Instance = TIM5;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a5a      	ldr	r2, [pc, #360]	; (8001bc8 <QEIInit+0x1f0>)
 8001a5e:	601a      	str	r2, [r3, #0]
		nvic=TIM5_IRQn;
 8001a60:	2332      	movs	r3, #50	; 0x32
 8001a62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a66:	e009      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim8)	{
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a58      	ldr	r2, [pc, #352]	; (8001bcc <QEIInit+0x1f4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d105      	bne.n	8001a7c <QEIInit+0xa4>
		htimx->Instance = TIM8;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a57      	ldr	r2, [pc, #348]	; (8001bd0 <QEIInit+0x1f8>)
 8001a74:	601a      	str	r2, [r3, #0]
		nvic=TIM8_UP_TIM13_IRQn;
 8001a76:	232c      	movs	r3, #44	; 0x2c
 8001a78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	htimx->Init.Prescaler = 0;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = 0xFFFF;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a8e:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
	htimx->Init.RepetitionCounter = 0;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	615a      	str	r2, [r3, #20]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	613b      	str	r3, [r7, #16]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
	sConfig.IC1Filter = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001aba:	2301      	movs	r3, #1
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.IC2Filter = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_Encoder_Init(htimx, &sConfig) != HAL_OK)
 8001ac6:	f107 0310 	add.w	r3, r7, #16
 8001aca:	4619      	mov	r1, r3
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f013 fb5d 	bl	801518c <HAL_TIM_Encoder_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <QEIInit+0x104>
	{
		Error_Handler();
 8001ad8:	f002 fd36 	bl	8004548 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8001ae4:	f107 0308 	add.w	r3, r7, #8
 8001ae8:	4619      	mov	r1, r3
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f014 f9e2 	bl	8015eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <QEIInit+0x122>
	{
		Error_Handler();
 8001af6:	f002 fd27 	bl	8004548 <Error_Handler>
	}

	__HAL_TIM_CLEAR_IT(htimx, TIM_IT_UPDATE);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f06f 0201 	mvn.w	r2, #1
 8001b02:	611a      	str	r2, [r3, #16]
	__HAL_TIM_ENABLE_IT(htimx, TIM_IT_UPDATE);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	60da      	str	r2, [r3, #12]

	if(htimx == &htim1){
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a24      	ldr	r2, [pc, #144]	; (8001ba8 <QEIInit+0x1d0>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d111      	bne.n	8001b40 <QEIInit+0x168>
		HAL_NVIC_SetPriority(nvic, QEI1_IRQ_PRIO, 0);
 8001b1c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b20:	2200      	movs	r2, #0
 8001b22:	210e      	movs	r1, #14
 8001b24:	4618      	mov	r0, r3
 8001b26:	f00f fd2b 	bl	8011580 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001b2a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f00f fd5e 	bl	80115f0 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001b34:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f00f fd3d 	bl	80115b8 <HAL_NVIC_EnableIRQ>
 8001b3e:	e02a      	b.n	8001b96 <QEIInit+0x1be>
	}else if(htimx == &htim4){
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a1e      	ldr	r2, [pc, #120]	; (8001bbc <QEIInit+0x1e4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d111      	bne.n	8001b6c <QEIInit+0x194>
		HAL_NVIC_SetPriority(nvic, QEI4_IRQ_PRIO, 0);
 8001b48:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	210e      	movs	r1, #14
 8001b50:	4618      	mov	r0, r3
 8001b52:	f00f fd15 	bl	8011580 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001b56:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f00f fd48 	bl	80115f0 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001b60:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b64:	4618      	mov	r0, r3
 8001b66:	f00f fd27 	bl	80115b8 <HAL_NVIC_EnableIRQ>
 8001b6a:	e014      	b.n	8001b96 <QEIInit+0x1be>
	}else if(htimx == &htim8){
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a17      	ldr	r2, [pc, #92]	; (8001bcc <QEIInit+0x1f4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d110      	bne.n	8001b96 <QEIInit+0x1be>
		HAL_NVIC_SetPriority(nvic, QEI6_IRQ_PRIO, 0);
 8001b74:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b78:	2200      	movs	r2, #0
 8001b7a:	210e      	movs	r1, #14
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f00f fcff 	bl	8011580 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001b82:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b86:	4618      	mov	r0, r3
 8001b88:	f00f fd32 	bl	80115f0 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001b8c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b90:	4618      	mov	r0, r3
 8001b92:	f00f fd11 	bl	80115b8 <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8001b96:	213c      	movs	r1, #60	; 0x3c
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f013 fb89 	bl	80152b0 <HAL_TIM_Encoder_Start>
}
 8001b9e:	bf00      	nop
 8001ba0:	3738      	adds	r7, #56	; 0x38
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20005f34 	.word	0x20005f34
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	20006038 	.word	0x20006038
 8001bb4:	20005ce8 	.word	0x20005ce8
 8001bb8:	40000400 	.word	0x40000400
 8001bbc:	20005b24 	.word	0x20005b24
 8001bc0:	40000800 	.word	0x40000800
 8001bc4:	20005ca8 	.word	0x20005ca8
 8001bc8:	40000c00 	.word	0x40000c00
 8001bcc:	20005ae4 	.word	0x20005ae4
 8001bd0:	40010400 	.word	0x40010400

08001bd4 <QEIReset>:
 * Function Return		: None
 * Function Example		: QEIReset(QEI1);
 */

void QEIReset(QEI_TypeDef QEIx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]

	switch (QEIx){
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	2b05      	cmp	r3, #5
 8001be4:	d839      	bhi.n	8001c5a <QEIReset+0x86>
 8001be6:	a201      	add	r2, pc, #4	; (adr r2, 8001bec <QEIReset+0x18>)
 8001be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bec:	08001c05 	.word	0x08001c05
 8001bf0:	08001c13 	.word	0x08001c13
 8001bf4:	08001c23 	.word	0x08001c23
 8001bf8:	08001c31 	.word	0x08001c31
 8001bfc:	08001c3f 	.word	0x08001c3f
 8001c00:	08001c4d 	.word	0x08001c4d

	case QEI1:	TIM1->CNT = 0;
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <QEIReset+0x94>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI1.count = 0;
 8001c0a:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <QEIReset+0x98>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
	break;
 8001c10:	e023      	b.n	8001c5a <QEIReset+0x86>

	case QEI2:	TIM2->CNT = 0;
 8001c12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c16:	2200      	movs	r2, #0
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI2.count = 0;
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <QEIReset+0x9c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
	break;
 8001c20:	e01b      	b.n	8001c5a <QEIReset+0x86>

	case QEI3:	TIM3->CNT = 0;
 8001c22:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <QEIReset+0xa0>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI3.count = 0;
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <QEIReset+0xa4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
	break;
 8001c2e:	e014      	b.n	8001c5a <QEIReset+0x86>

	case QEI4:	TIM4->CNT = 0;
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <QEIReset+0xa8>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI4.count = 0;
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <QEIReset+0xac>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
	break;
 8001c3c:	e00d      	b.n	8001c5a <QEIReset+0x86>

	case QEI5:	TIM5->CNT = 0;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <QEIReset+0xb0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI5.count = 0;
 8001c44:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <QEIReset+0xb4>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
	break;
 8001c4a:	e006      	b.n	8001c5a <QEIReset+0x86>

	case QEI6:	TIM8->CNT = 0;
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <QEIReset+0xb8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI6.count = 0;
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <QEIReset+0xbc>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
	break;
 8001c58:	bf00      	nop

	}
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40010000 	.word	0x40010000
 8001c6c:	20006494 	.word	0x20006494
 8001c70:	20006498 	.word	0x20006498
 8001c74:	40000400 	.word	0x40000400
 8001c78:	20006490 	.word	0x20006490
 8001c7c:	40000800 	.word	0x40000800
 8001c80:	200064b8 	.word	0x200064b8
 8001c84:	40000c00 	.word	0x40000c00
 8001c88:	200064b4 	.word	0x200064b4
 8001c8c:	40010400 	.word	0x40010400
 8001c90:	200064bc 	.word	0x200064bc

08001c94 <QEIDelay>:
 * Function Return		: None
 * Function Example		: QEIDelay(100);
 */

void QEIDelay(uint8_t value)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
	uint8_t currentvalues;
	value = value * 8400;
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	71fb      	strb	r3, [r7, #7]
	while(currentvalues < value)
 8001caa:	e002      	b.n	8001cb2 <QEIDelay+0x1e>
	{
		currentvalues++;
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	73fb      	strb	r3, [r7, #15]
	while(currentvalues < value)
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d3f8      	bcc.n	8001cac <QEIDelay+0x18>
	}
	currentvalues = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	73fb      	strb	r3, [r7, #15]
}
 8001cbe:	bf00      	nop
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <QEIRead>:
 * Function Arguments	: QEIx		where x can be 1 to 5.
 * Function Return		: QEI's count with 32 bits with sign.
 * Function Example		: QEIRead(QEI1);
 */

int32_t QEIRead(QEI_TypeDef QEIx){
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]

	int32_t value;
	switch(QEIx){
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	2b05      	cmp	r3, #5
 8001cdc:	d845      	bhi.n	8001d6a <QEIRead+0x9e>
 8001cde:	a201      	add	r2, pc, #4	; (adr r2, 8001ce4 <QEIRead+0x18>)
 8001ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce4:	08001cfd 	.word	0x08001cfd
 8001ce8:	08001d0f 	.word	0x08001d0f
 8001cec:	08001d23 	.word	0x08001d23
 8001cf0:	08001d35 	.word	0x08001d35
 8001cf4:	08001d47 	.word	0x08001d47
 8001cf8:	08001d59 	.word	0x08001d59

	case QEI1:	BIOS_QEI1.poscnt = TIM1-> CNT;
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <QEIRead+0xb0>)
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <QEIRead+0xb4>)
 8001d04:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI1.count;
 8001d06:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <QEIRead+0xb4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	60fb      	str	r3, [r7, #12]
	break;
 8001d0c:	e02e      	b.n	8001d6c <QEIRead+0xa0>

	case QEI2:	BIOS_QEI2.poscnt = TIM2-> CNT;
 8001d0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <QEIRead+0xb8>)
 8001d18:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI2.count;
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <QEIRead+0xb8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	60fb      	str	r3, [r7, #12]
	break;
 8001d20:	e024      	b.n	8001d6c <QEIRead+0xa0>

	case QEI3:	BIOS_QEI3.poscnt = TIM3-> CNT;
 8001d22:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <QEIRead+0xbc>)
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <QEIRead+0xc0>)
 8001d2a:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI3.count;
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <QEIRead+0xc0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
	break;
 8001d32:	e01b      	b.n	8001d6c <QEIRead+0xa0>

	case QEI4:	BIOS_QEI4.poscnt = TIM4-> CNT;
 8001d34:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <QEIRead+0xc4>)
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <QEIRead+0xc8>)
 8001d3c:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI4.count;
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <QEIRead+0xc8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	60fb      	str	r3, [r7, #12]
	break;
 8001d44:	e012      	b.n	8001d6c <QEIRead+0xa0>

	case QEI5:	BIOS_QEI5.poscnt = TIM5-> CNT;
 8001d46:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <QEIRead+0xcc>)
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <QEIRead+0xd0>)
 8001d4e:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI5.count;
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <QEIRead+0xd0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]
	break;
 8001d56:	e009      	b.n	8001d6c <QEIRead+0xa0>

	case QEI6:	BIOS_QEI6.poscnt = TIM8-> CNT;
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <QEIRead+0xd4>)
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <QEIRead+0xd8>)
 8001d60:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI6.count;
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <QEIRead+0xd8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	60fb      	str	r3, [r7, #12]
	break;
 8001d68:	e000      	b.n	8001d6c <QEIRead+0xa0>

	default: break;
 8001d6a:	bf00      	nop
	}

	return value;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40010000 	.word	0x40010000
 8001d80:	20006494 	.word	0x20006494
 8001d84:	20006498 	.word	0x20006498
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	20006490 	.word	0x20006490
 8001d90:	40000800 	.word	0x40000800
 8001d94:	200064b8 	.word	0x200064b8
 8001d98:	40000c00 	.word	0x40000c00
 8001d9c:	200064b4 	.word	0x200064b4
 8001da0:	40010400 	.word	0x40010400
 8001da4:	200064bc 	.word	0x200064bc

08001da8 <SHIFTREGInit>:
 * Function Return		: None
 * Function Example		: SHIFTREGInit(&shiftreg, CASCADE_1, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1, GPIOD, GPIO_Pin_2);
 */

void SHIFTREGInit (shiftreg_t* shiftreg, fSR cascade, GPIO_TypeDef *GPIOx_sck, uint16_t GPIO_Pin_sck,
		           GPIO_TypeDef *GPIOx_rck , uint16_t GPIO_Pin_rck,GPIO_TypeDef *GPIOx_si, uint16_t GPIO_Pin_si){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	461a      	mov	r2, r3
 8001db4:	460b      	mov	r3, r1
 8001db6:	72fb      	strb	r3, [r7, #11]
 8001db8:	4613      	mov	r3, r2
 8001dba:	813b      	strh	r3, [r7, #8]

	shiftreg->flag = cascade;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	7afa      	ldrb	r2, [r7, #11]
 8001dc0:	759a      	strb	r2, [r3, #22]

	shiftreg->GPIOx_sck = GPIOx_sck;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	601a      	str	r2, [r3, #0]
	shiftreg->GPIO_Pin_sck = GPIO_Pin_sck;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	893a      	ldrh	r2, [r7, #8]
 8001dcc:	809a      	strh	r2, [r3, #4]

	shiftreg->GPIOx_rck = GPIOx_rck;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	609a      	str	r2, [r3, #8]
	shiftreg->GPIO_Pin_rck = GPIO_Pin_rck;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8bba      	ldrh	r2, [r7, #28]
 8001dd8:	819a      	strh	r2, [r3, #12]

	shiftreg->GPIOx_si = GPIOx_si;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a3a      	ldr	r2, [r7, #32]
 8001dde:	611a      	str	r2, [r3, #16]
	shiftreg->GPIO_Pin_si = GPIO_Pin_si;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001de4:	829a      	strh	r2, [r3, #20]

	GPIOPinsInit(shiftreg->GPIOx_sck, shiftreg->GPIO_Pin_sck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8899      	ldrh	r1, [r3, #4]
 8001dee:	2301      	movs	r3, #1
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	2302      	movs	r3, #2
 8001df4:	2201      	movs	r2, #1
 8001df6:	f7ff fa83 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_rck, shiftreg->GPIO_Pin_rck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6898      	ldr	r0, [r3, #8]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8999      	ldrh	r1, [r3, #12]
 8001e02:	2301      	movs	r3, #1
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	2302      	movs	r3, #2
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f7ff fa79 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_si, shiftreg->GPIO_Pin_si , GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6918      	ldr	r0, [r3, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8a99      	ldrh	r1, [r3, #20]
 8001e16:	2301      	movs	r3, #1
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f7ff fa6f 	bl	8001300 <GPIOPinsInit>

}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <SHIFTREGShift>:
 * Function Arguments	: shiftreg			pointer to structure
 * Function Return		: None
 * Function Example		: SHIFTREGShift (&shiftreg);
 */

void SHIFTREGShift(shiftreg_t* shiftreg){
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b084      	sub	sp, #16
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]

	uint8_t out, i, j;

	i = shiftreg->flag;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	7d9b      	ldrb	r3, [r3, #22]
 8001e36:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	889b      	ldrh	r3, [r3, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	4619      	mov	r1, r3
 8001e44:	f010 fa9c 	bl	8012380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6898      	ldr	r0, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	899b      	ldrh	r3, [r3, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	4619      	mov	r1, r3
 8001e54:	f010 fa94 	bl	8012380 <HAL_GPIO_WritePin>

	do{
		out = shiftreg->cast[i].Byte;
 8001e58:	7bba      	ldrb	r2, [r7, #14]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3206      	adds	r2, #6
 8001e5e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8001e62:	73fb      	strb	r3, [r7, #15]
		for (j = 8; j; j--){
 8001e64:	2308      	movs	r3, #8
 8001e66:	737b      	strb	r3, [r7, #13]
 8001e68:	e02a      	b.n	8001ec0 <SHIFTREGShift+0x96>
			(out & 0x80) ? HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_SET) : HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_RESET);
 8001e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	da08      	bge.n	8001e84 <SHIFTREGShift+0x5a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6918      	ldr	r0, [r3, #16]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	8a9b      	ldrh	r3, [r3, #20]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f010 fa7f 	bl	8012380 <HAL_GPIO_WritePin>
 8001e82:	e007      	b.n	8001e94 <SHIFTREGShift+0x6a>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6918      	ldr	r0, [r3, #16]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	8a9b      	ldrh	r3, [r3, #20]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f010 fa76 	bl	8012380 <HAL_GPIO_WritePin>
			out <<= 1;
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_SET);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	889b      	ldrh	r3, [r3, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f010 fa6b 	bl	8012380 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	889b      	ldrh	r3, [r3, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f010 fa63 	bl	8012380 <HAL_GPIO_WritePin>
		for (j = 8; j; j--){
 8001eba:	7b7b      	ldrb	r3, [r7, #13]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	737b      	strb	r3, [r7, #13]
 8001ec0:	7b7b      	ldrb	r3, [r7, #13]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1d1      	bne.n	8001e6a <SHIFTREGShift+0x40>
		}
	}while(i--);
 8001ec6:	7bbb      	ldrb	r3, [r7, #14]
 8001ec8:	1e5a      	subs	r2, r3, #1
 8001eca:	73ba      	strb	r2, [r7, #14]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1c3      	bne.n	8001e58 <SHIFTREGShift+0x2e>

	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_SET);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6898      	ldr	r0, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	899b      	ldrh	r3, [r3, #12]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	4619      	mov	r1, r3
 8001edc:	f010 fa50 	bl	8012380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6898      	ldr	r0, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	899b      	ldrh	r3, [r3, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	4619      	mov	r1, r3
 8001eec:	f010 fa48 	bl	8012380 <HAL_GPIO_WritePin>

}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_MspInit+0x54>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4a11      	ldr	r2, [pc, #68]	; (8001f4c <HAL_MspInit+0x54>)
 8001f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <HAL_MspInit+0x54>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_MspInit+0x54>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <HAL_MspInit+0x54>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f28:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <HAL_MspInit+0x54>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	210f      	movs	r1, #15
 8001f3a:	f06f 0001 	mvn.w	r0, #1
 8001f3e:	f00f fb1f 	bl	8011580 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800

08001f50 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08c      	sub	sp, #48	; 0x30
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a42      	ldr	r2, [pc, #264]	; (8002078 <HAL_CAN_MspInit+0x128>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d135      	bne.n	8001fde <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001f72:	4b42      	ldr	r3, [pc, #264]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	3301      	adds	r3, #1
 8001f78:	4a40      	ldr	r2, [pc, #256]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8001f7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001f7c:	4b3f      	ldr	r3, [pc, #252]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d10d      	bne.n	8001fa0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001f84:	2300      	movs	r3, #0
 8001f86:	61bb      	str	r3, [r7, #24]
 8001f88:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	4a3c      	ldr	r2, [pc, #240]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001f8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f92:	6413      	str	r3, [r2, #64]	; 0x40
 8001f94:	4b3a      	ldr	r3, [pc, #232]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	61bb      	str	r3, [r7, #24]
 8001f9e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	4b36      	ldr	r3, [pc, #216]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	4a35      	ldr	r2, [pc, #212]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001faa:	f043 0308 	orr.w	r3, r3, #8
 8001fae:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb0:	4b33      	ldr	r3, [pc, #204]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	697b      	ldr	r3, [r7, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001fcc:	2309      	movs	r3, #9
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	482b      	ldr	r0, [pc, #172]	; (8002084 <HAL_CAN_MspInit+0x134>)
 8001fd8:	f00f ff22 	bl	8011e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001fdc:	e048      	b.n	8002070 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a29      	ldr	r2, [pc, #164]	; (8002088 <HAL_CAN_MspInit+0x138>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d143      	bne.n	8002070 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001fe8:	2300      	movs	r3, #0
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	4b24      	ldr	r3, [pc, #144]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	4a23      	ldr	r2, [pc, #140]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001ff2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff8:	4b21      	ldr	r3, [pc, #132]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002004:	4b1d      	ldr	r3, [pc, #116]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	4a1c      	ldr	r2, [pc, #112]	; (800207c <HAL_CAN_MspInit+0x12c>)
 800200c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d10d      	bne.n	8002032 <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_CAN_MspInit+0x130>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	4a18      	ldr	r2, [pc, #96]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002020:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a11      	ldr	r2, [pc, #68]	; (8002080 <HAL_CAN_MspInit+0x130>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800204e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002060:	2309      	movs	r3, #9
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	4619      	mov	r1, r3
 800206a:	4808      	ldr	r0, [pc, #32]	; (800208c <HAL_CAN_MspInit+0x13c>)
 800206c:	f00f fed8 	bl	8011e20 <HAL_GPIO_Init>
}
 8002070:	bf00      	nop
 8002072:	3730      	adds	r7, #48	; 0x30
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40006400 	.word	0x40006400
 800207c:	200002bc 	.word	0x200002bc
 8002080:	40023800 	.word	0x40023800
 8002084:	40020c00 	.word	0x40020c00
 8002088:	40006800 	.word	0x40006800
 800208c:	40020400 	.word	0x40020400

08002090 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08e      	sub	sp, #56	; 0x38
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a5c      	ldr	r2, [pc, #368]	; (8002220 <HAL_I2C_MspInit+0x190>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d12d      	bne.n	800210e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
 80020b6:	4b5b      	ldr	r3, [pc, #364]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a5a      	ldr	r2, [pc, #360]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b58      	ldr	r3, [pc, #352]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	623b      	str	r3, [r7, #32]
 80020cc:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d4:	2312      	movs	r3, #18
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020d8:	2301      	movs	r3, #1
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020dc:	2303      	movs	r3, #3
 80020de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020e0:	2304      	movs	r3, #4
 80020e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e8:	4619      	mov	r1, r3
 80020ea:	484f      	ldr	r0, [pc, #316]	; (8002228 <HAL_I2C_MspInit+0x198>)
 80020ec:	f00f fe98 	bl	8011e20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020f0:	2300      	movs	r3, #0
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	4b4b      	ldr	r3, [pc, #300]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	4a4a      	ldr	r2, [pc, #296]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002100:	4b48      	ldr	r3, [pc, #288]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800210c:	e083      	b.n	8002216 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a46      	ldr	r2, [pc, #280]	; (800222c <HAL_I2C_MspInit+0x19c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d12d      	bne.n	8002174 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002118:	2300      	movs	r3, #0
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	4b41      	ldr	r3, [pc, #260]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	4a40      	ldr	r2, [pc, #256]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002122:	f043 0302 	orr.w	r3, r3, #2
 8002126:	6313      	str	r3, [r2, #48]	; 0x30
 8002128:	4b3e      	ldr	r3, [pc, #248]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	61bb      	str	r3, [r7, #24]
 8002132:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002134:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800213a:	2312      	movs	r3, #18
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800213e:	2301      	movs	r3, #1
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002146:	2304      	movs	r3, #4
 8002148:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214e:	4619      	mov	r1, r3
 8002150:	4835      	ldr	r0, [pc, #212]	; (8002228 <HAL_I2C_MspInit+0x198>)
 8002152:	f00f fe65 	bl	8011e20 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	4b32      	ldr	r3, [pc, #200]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	4a31      	ldr	r2, [pc, #196]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002160:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
 8002166:	4b2f      	ldr	r3, [pc, #188]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	697b      	ldr	r3, [r7, #20]
}
 8002172:	e050      	b.n	8002216 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a2d      	ldr	r2, [pc, #180]	; (8002230 <HAL_I2C_MspInit+0x1a0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d14b      	bne.n	8002216 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	4b28      	ldr	r3, [pc, #160]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a27      	ldr	r2, [pc, #156]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b25      	ldr	r3, [pc, #148]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	4b21      	ldr	r3, [pc, #132]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a20      	ldr	r2, [pc, #128]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021bc:	2312      	movs	r3, #18
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021c0:	2301      	movs	r3, #1
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c4:	2303      	movs	r3, #3
 80021c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021c8:	2304      	movs	r3, #4
 80021ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d0:	4619      	mov	r1, r3
 80021d2:	4818      	ldr	r0, [pc, #96]	; (8002234 <HAL_I2C_MspInit+0x1a4>)
 80021d4:	f00f fe24 	bl	8011e20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021de:	2312      	movs	r3, #18
 80021e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021e2:	2301      	movs	r3, #1
 80021e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e6:	2303      	movs	r3, #3
 80021e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021ea:	2304      	movs	r3, #4
 80021ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f2:	4619      	mov	r1, r3
 80021f4:	4810      	ldr	r0, [pc, #64]	; (8002238 <HAL_I2C_MspInit+0x1a8>)
 80021f6:	f00f fe13 	bl	8011e20 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	4a08      	ldr	r2, [pc, #32]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002204:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002208:	6413      	str	r3, [r2, #64]	; 0x40
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
}
 8002216:	bf00      	nop
 8002218:	3738      	adds	r7, #56	; 0x38
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40005400 	.word	0x40005400
 8002224:	40023800 	.word	0x40023800
 8002228:	40020400 	.word	0x40020400
 800222c:	40005800 	.word	0x40005800
 8002230:	40005c00 	.word	0x40005c00
 8002234:	40020800 	.word	0x40020800
 8002238:	40020000 	.word	0x40020000

0800223c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a2a      	ldr	r2, [pc, #168]	; (80022f4 <HAL_I2C_MspDeInit+0xb8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d116      	bne.n	800227c <HAL_I2C_MspDeInit+0x40>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800224e:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a29      	ldr	r2, [pc, #164]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 8002254:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002258:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800225a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800225e:	4827      	ldr	r0, [pc, #156]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 8002260:	f00f ff7a 	bl	8012158 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002268:	4824      	ldr	r0, [pc, #144]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 800226a:	f00f ff75 	bl	8012158 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800226e:	201f      	movs	r0, #31
 8002270:	f00f f9b0 	bl	80115d4 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8002274:	2020      	movs	r0, #32
 8002276:	f00f f9ad 	bl	80115d4 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800227a:	e036      	b.n	80022ea <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1f      	ldr	r2, [pc, #124]	; (8002300 <HAL_I2C_MspDeInit+0xc4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d116      	bne.n	80022b4 <HAL_I2C_MspDeInit+0x78>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002286:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	4a1b      	ldr	r2, [pc, #108]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 800228c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002290:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002292:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002296:	4819      	ldr	r0, [pc, #100]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 8002298:	f00f ff5e 	bl	8012158 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800229c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022a0:	4816      	ldr	r0, [pc, #88]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 80022a2:	f00f ff59 	bl	8012158 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 80022a6:	2021      	movs	r0, #33	; 0x21
 80022a8:	f00f f994 	bl	80115d4 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 80022ac:	2022      	movs	r0, #34	; 0x22
 80022ae:	f00f f991 	bl	80115d4 <HAL_NVIC_DisableIRQ>
}
 80022b2:	e01a      	b.n	80022ea <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C3)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a12      	ldr	r2, [pc, #72]	; (8002304 <HAL_I2C_MspDeInit+0xc8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d115      	bne.n	80022ea <HAL_I2C_MspDeInit+0xae>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	4a0d      	ldr	r2, [pc, #52]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 80022c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022c8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 80022ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ce:	480e      	ldr	r0, [pc, #56]	; (8002308 <HAL_I2C_MspDeInit+0xcc>)
 80022d0:	f00f ff42 	bl	8012158 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80022d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022d8:	480c      	ldr	r0, [pc, #48]	; (800230c <HAL_I2C_MspDeInit+0xd0>)
 80022da:	f00f ff3d 	bl	8012158 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 80022de:	2048      	movs	r0, #72	; 0x48
 80022e0:	f00f f978 	bl	80115d4 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 80022e4:	2049      	movs	r0, #73	; 0x49
 80022e6:	f00f f975 	bl	80115d4 <HAL_NVIC_DisableIRQ>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40005400 	.word	0x40005400
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020400 	.word	0x40020400
 8002300:	40005800 	.word	0x40005800
 8002304:	40005c00 	.word	0x40005c00
 8002308:	40020800 	.word	0x40020800
 800230c:	40020000 	.word	0x40020000

08002310 <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002310:	b480      	push	{r7}
 8002312:	b091      	sub	sp, #68	; 0x44
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	if(htim_pwm->Instance==TIM1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a8d      	ldr	r2, [pc, #564]	; (8002554 <HAL_TIM_PWM_MspInit+0x244>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d10e      	bne.n	8002340 <HAL_TIM_PWM_MspInit+0x30>
		{
			/* Peripheral clock enable */
			__HAL_RCC_TIM1_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002326:	4b8c      	ldr	r3, [pc, #560]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a8b      	ldr	r2, [pc, #556]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
 8002332:	4b89      	ldr	r3, [pc, #548]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800233c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	  {
	    /* Peripheral clock enable */
	    __HAL_RCC_TIM14_CLK_ENABLE();
	  }

}
 800233e:	e102      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002348:	d10e      	bne.n	8002368 <HAL_TIM_PWM_MspInit+0x58>
			__HAL_RCC_TIM2_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	63bb      	str	r3, [r7, #56]	; 0x38
 800234e:	4b82      	ldr	r3, [pc, #520]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	4a81      	ldr	r2, [pc, #516]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6413      	str	r3, [r2, #64]	; 0x40
 800235a:	4b7f      	ldr	r3, [pc, #508]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	63bb      	str	r3, [r7, #56]	; 0x38
 8002364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002366:	e0ee      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM3)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a7b      	ldr	r2, [pc, #492]	; (800255c <HAL_TIM_PWM_MspInit+0x24c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d10e      	bne.n	8002390 <HAL_TIM_PWM_MspInit+0x80>
			__HAL_RCC_TIM3_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	637b      	str	r3, [r7, #52]	; 0x34
 8002376:	4b78      	ldr	r3, [pc, #480]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a77      	ldr	r2, [pc, #476]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
 8002382:	4b75      	ldr	r3, [pc, #468]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	637b      	str	r3, [r7, #52]	; 0x34
 800238c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800238e:	e0da      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM4)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a72      	ldr	r2, [pc, #456]	; (8002560 <HAL_TIM_PWM_MspInit+0x250>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10e      	bne.n	80023b8 <HAL_TIM_PWM_MspInit+0xa8>
			__HAL_RCC_TIM4_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	633b      	str	r3, [r7, #48]	; 0x30
 800239e:	4b6e      	ldr	r3, [pc, #440]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a6d      	ldr	r2, [pc, #436]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023a4:	f043 0304 	orr.w	r3, r3, #4
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40
 80023aa:	4b6b      	ldr	r3, [pc, #428]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
 80023b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80023b6:	e0c6      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM5)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a69      	ldr	r2, [pc, #420]	; (8002564 <HAL_TIM_PWM_MspInit+0x254>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d10e      	bne.n	80023e0 <HAL_TIM_PWM_MspInit+0xd0>
	    __HAL_RCC_TIM5_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c6:	4b64      	ldr	r3, [pc, #400]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	4a63      	ldr	r2, [pc, #396]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023cc:	f043 0308 	orr.w	r3, r3, #8
 80023d0:	6413      	str	r3, [r2, #64]	; 0x40
 80023d2:	4b61      	ldr	r3, [pc, #388]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80023de:	e0b2      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM6)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a60      	ldr	r2, [pc, #384]	; (8002568 <HAL_TIM_PWM_MspInit+0x258>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d10e      	bne.n	8002408 <HAL_TIM_PWM_MspInit+0xf8>
	    __HAL_RCC_TIM6_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ee:	4b5a      	ldr	r3, [pc, #360]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	4a59      	ldr	r2, [pc, #356]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023f4:	f043 0310 	orr.w	r3, r3, #16
 80023f8:	6413      	str	r3, [r2, #64]	; 0x40
 80023fa:	4b57      	ldr	r3, [pc, #348]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
 8002404:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002406:	e09e      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM7)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a57      	ldr	r2, [pc, #348]	; (800256c <HAL_TIM_PWM_MspInit+0x25c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d10e      	bne.n	8002430 <HAL_TIM_PWM_MspInit+0x120>
	     __HAL_RCC_TIM7_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
 8002416:	4b50      	ldr	r3, [pc, #320]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	4a4f      	ldr	r2, [pc, #316]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800241c:	f043 0320 	orr.w	r3, r3, #32
 8002420:	6413      	str	r3, [r2, #64]	; 0x40
 8002422:	4b4d      	ldr	r3, [pc, #308]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f003 0320 	and.w	r3, r3, #32
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800242e:	e08a      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM8)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a4e      	ldr	r2, [pc, #312]	; (8002570 <HAL_TIM_PWM_MspInit+0x260>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d10e      	bne.n	8002458 <HAL_TIM_PWM_MspInit+0x148>
	     __HAL_RCC_TIM8_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	623b      	str	r3, [r7, #32]
 800243e:	4b46      	ldr	r3, [pc, #280]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	4a45      	ldr	r2, [pc, #276]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	6453      	str	r3, [r2, #68]	; 0x44
 800244a:	4b43      	ldr	r3, [pc, #268]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	623b      	str	r3, [r7, #32]
 8002454:	6a3b      	ldr	r3, [r7, #32]
}
 8002456:	e076      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM9)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a45      	ldr	r2, [pc, #276]	; (8002574 <HAL_TIM_PWM_MspInit+0x264>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d10e      	bne.n	8002480 <HAL_TIM_PWM_MspInit+0x170>
	    __HAL_RCC_TIM9_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	4b3c      	ldr	r3, [pc, #240]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	4a3b      	ldr	r2, [pc, #236]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002470:	6453      	str	r3, [r2, #68]	; 0x44
 8002472:	4b39      	ldr	r3, [pc, #228]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247a:	61fb      	str	r3, [r7, #28]
 800247c:	69fb      	ldr	r3, [r7, #28]
}
 800247e:	e062      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM10)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a3c      	ldr	r2, [pc, #240]	; (8002578 <HAL_TIM_PWM_MspInit+0x268>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d10e      	bne.n	80024a8 <HAL_TIM_PWM_MspInit+0x198>
	    __HAL_RCC_TIM10_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	4b32      	ldr	r3, [pc, #200]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	4a31      	ldr	r2, [pc, #196]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002498:	6453      	str	r3, [r2, #68]	; 0x44
 800249a:	4b2f      	ldr	r3, [pc, #188]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	61bb      	str	r3, [r7, #24]
 80024a4:	69bb      	ldr	r3, [r7, #24]
}
 80024a6:	e04e      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM11)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a33      	ldr	r2, [pc, #204]	; (800257c <HAL_TIM_PWM_MspInit+0x26c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d10e      	bne.n	80024d0 <HAL_TIM_PWM_MspInit+0x1c0>
	    __HAL_RCC_TIM11_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	4b28      	ldr	r3, [pc, #160]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	4a27      	ldr	r2, [pc, #156]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c0:	6453      	str	r3, [r2, #68]	; 0x44
 80024c2:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	697b      	ldr	r3, [r7, #20]
}
 80024ce:	e03a      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM12)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a2a      	ldr	r2, [pc, #168]	; (8002580 <HAL_TIM_PWM_MspInit+0x270>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d10e      	bne.n	80024f8 <HAL_TIM_PWM_MspInit+0x1e8>
	    __HAL_RCC_TIM12_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	4a1d      	ldr	r2, [pc, #116]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ea:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	693b      	ldr	r3, [r7, #16]
}
 80024f6:	e026      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM13)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a21      	ldr	r2, [pc, #132]	; (8002584 <HAL_TIM_PWM_MspInit+0x274>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d10e      	bne.n	8002520 <HAL_TIM_PWM_MspInit+0x210>
	    __HAL_RCC_TIM13_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	4a13      	ldr	r2, [pc, #76]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800250c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002510:	6413      	str	r3, [r2, #64]	; 0x40
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
}
 800251e:	e012      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM14)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a18      	ldr	r2, [pc, #96]	; (8002588 <HAL_TIM_PWM_MspInit+0x278>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d10d      	bne.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	    __HAL_RCC_TIM14_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	4a09      	ldr	r2, [pc, #36]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002538:	6413      	str	r3, [r2, #64]	; 0x40
 800253a:	4b07      	ldr	r3, [pc, #28]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	68bb      	ldr	r3, [r7, #8]
}
 8002546:	bf00      	nop
 8002548:	3744      	adds	r7, #68	; 0x44
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40010000 	.word	0x40010000
 8002558:	40023800 	.word	0x40023800
 800255c:	40000400 	.word	0x40000400
 8002560:	40000800 	.word	0x40000800
 8002564:	40000c00 	.word	0x40000c00
 8002568:	40001000 	.word	0x40001000
 800256c:	40001400 	.word	0x40001400
 8002570:	40010400 	.word	0x40010400
 8002574:	40014000 	.word	0x40014000
 8002578:	40014400 	.word	0x40014400
 800257c:	40014800 	.word	0x40014800
 8002580:	40001800 	.word	0x40001800
 8002584:	40001c00 	.word	0x40001c00
 8002588:	40002000 	.word	0x40002000

0800258c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800258c:	b480      	push	{r7}
 800258e:	b091      	sub	sp, #68	; 0x44
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]

	if(htim_base->Instance==TIM1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a8d      	ldr	r2, [pc, #564]	; (80027d0 <HAL_TIM_Base_MspInit+0x244>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d10e      	bne.n	80025bc <HAL_TIM_Base_MspInit+0x30>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025a2:	4b8c      	ldr	r3, [pc, #560]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	4a8b      	ldr	r2, [pc, #556]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6453      	str	r3, [r2, #68]	; 0x44
 80025ae:	4b89      	ldr	r3, [pc, #548]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  else if(htim_base->Instance==TIM14)
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
  }
}
 80025ba:	e102      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c4:	d10e      	bne.n	80025e4 <HAL_TIM_Base_MspInit+0x58>
		__HAL_RCC_TIM2_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80025ca:	4b82      	ldr	r3, [pc, #520]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	4a81      	ldr	r2, [pc, #516]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6413      	str	r3, [r2, #64]	; 0x40
 80025d6:	4b7f      	ldr	r3, [pc, #508]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	63bb      	str	r3, [r7, #56]	; 0x38
 80025e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025e2:	e0ee      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM3)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a7b      	ldr	r2, [pc, #492]	; (80027d8 <HAL_TIM_Base_MspInit+0x24c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d10e      	bne.n	800260c <HAL_TIM_Base_MspInit+0x80>
		__HAL_RCC_TIM3_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	637b      	str	r3, [r7, #52]	; 0x34
 80025f2:	4b78      	ldr	r3, [pc, #480]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	4a77      	ldr	r2, [pc, #476]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025f8:	f043 0302 	orr.w	r3, r3, #2
 80025fc:	6413      	str	r3, [r2, #64]	; 0x40
 80025fe:	4b75      	ldr	r3, [pc, #468]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	637b      	str	r3, [r7, #52]	; 0x34
 8002608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800260a:	e0da      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM4)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a72      	ldr	r2, [pc, #456]	; (80027dc <HAL_TIM_Base_MspInit+0x250>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d10e      	bne.n	8002634 <HAL_TIM_Base_MspInit+0xa8>
		__HAL_RCC_TIM4_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	633b      	str	r3, [r7, #48]	; 0x30
 800261a:	4b6e      	ldr	r3, [pc, #440]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4a6d      	ldr	r2, [pc, #436]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	6413      	str	r3, [r2, #64]	; 0x40
 8002626:	4b6b      	ldr	r3, [pc, #428]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	633b      	str	r3, [r7, #48]	; 0x30
 8002630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002632:	e0c6      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM5)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a69      	ldr	r2, [pc, #420]	; (80027e0 <HAL_TIM_Base_MspInit+0x254>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d10e      	bne.n	800265c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002642:	4b64      	ldr	r3, [pc, #400]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	4a63      	ldr	r2, [pc, #396]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002648:	f043 0308 	orr.w	r3, r3, #8
 800264c:	6413      	str	r3, [r2, #64]	; 0x40
 800264e:	4b61      	ldr	r3, [pc, #388]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800265a:	e0b2      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM6)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a60      	ldr	r2, [pc, #384]	; (80027e4 <HAL_TIM_Base_MspInit+0x258>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d10e      	bne.n	8002684 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
 800266a:	4b5a      	ldr	r3, [pc, #360]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	4a59      	ldr	r2, [pc, #356]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002670:	f043 0310 	orr.w	r3, r3, #16
 8002674:	6413      	str	r3, [r2, #64]	; 0x40
 8002676:	4b57      	ldr	r3, [pc, #348]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002682:	e09e      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM7)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a57      	ldr	r2, [pc, #348]	; (80027e8 <HAL_TIM_Base_MspInit+0x25c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d10e      	bne.n	80026ac <HAL_TIM_Base_MspInit+0x120>
     __HAL_RCC_TIM7_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
 8002692:	4b50      	ldr	r3, [pc, #320]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	4a4f      	ldr	r2, [pc, #316]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002698:	f043 0320 	orr.w	r3, r3, #32
 800269c:	6413      	str	r3, [r2, #64]	; 0x40
 800269e:	4b4d      	ldr	r3, [pc, #308]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80026aa:	e08a      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM8)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a4e      	ldr	r2, [pc, #312]	; (80027ec <HAL_TIM_Base_MspInit+0x260>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d10e      	bne.n	80026d4 <HAL_TIM_Base_MspInit+0x148>
     __HAL_RCC_TIM8_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	623b      	str	r3, [r7, #32]
 80026ba:	4b46      	ldr	r3, [pc, #280]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	4a45      	ldr	r2, [pc, #276]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026c0:	f043 0302 	orr.w	r3, r3, #2
 80026c4:	6453      	str	r3, [r2, #68]	; 0x44
 80026c6:	4b43      	ldr	r3, [pc, #268]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	623b      	str	r3, [r7, #32]
 80026d0:	6a3b      	ldr	r3, [r7, #32]
}
 80026d2:	e076      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM9)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a45      	ldr	r2, [pc, #276]	; (80027f0 <HAL_TIM_Base_MspInit+0x264>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d10e      	bne.n	80026fc <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	4b3c      	ldr	r3, [pc, #240]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	4a3b      	ldr	r2, [pc, #236]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ec:	6453      	str	r3, [r2, #68]	; 0x44
 80026ee:	4b39      	ldr	r3, [pc, #228]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	69fb      	ldr	r3, [r7, #28]
}
 80026fa:	e062      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM10)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a3c      	ldr	r2, [pc, #240]	; (80027f4 <HAL_TIM_Base_MspInit+0x268>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d10e      	bne.n	8002724 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	4b32      	ldr	r3, [pc, #200]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	4a31      	ldr	r2, [pc, #196]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002714:	6453      	str	r3, [r2, #68]	; 0x44
 8002716:	4b2f      	ldr	r3, [pc, #188]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	61bb      	str	r3, [r7, #24]
 8002720:	69bb      	ldr	r3, [r7, #24]
}
 8002722:	e04e      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM11)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a33      	ldr	r2, [pc, #204]	; (80027f8 <HAL_TIM_Base_MspInit+0x26c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d10e      	bne.n	800274c <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	4b28      	ldr	r3, [pc, #160]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	4a27      	ldr	r2, [pc, #156]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800273c:	6453      	str	r3, [r2, #68]	; 0x44
 800273e:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	697b      	ldr	r3, [r7, #20]
}
 800274a:	e03a      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM12)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a2a      	ldr	r2, [pc, #168]	; (80027fc <HAL_TIM_Base_MspInit+0x270>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d10e      	bne.n	8002774 <HAL_TIM_Base_MspInit+0x1e8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	4b1e      	ldr	r3, [pc, #120]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002764:	6413      	str	r3, [r2, #64]	; 0x40
 8002766:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	693b      	ldr	r3, [r7, #16]
}
 8002772:	e026      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM13)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a21      	ldr	r2, [pc, #132]	; (8002800 <HAL_TIM_Base_MspInit+0x274>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d10e      	bne.n	800279c <HAL_TIM_Base_MspInit+0x210>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	4a13      	ldr	r2, [pc, #76]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800278c:	6413      	str	r3, [r2, #64]	; 0x40
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
}
 800279a:	e012      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM14)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a18      	ldr	r2, [pc, #96]	; (8002804 <HAL_TIM_Base_MspInit+0x278>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d10d      	bne.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80027b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b4:	6413      	str	r3, [r2, #64]	; 0x40
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
}
 80027c2:	bf00      	nop
 80027c4:	3744      	adds	r7, #68	; 0x44
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40010000 	.word	0x40010000
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40000800 	.word	0x40000800
 80027e0:	40000c00 	.word	0x40000c00
 80027e4:	40001000 	.word	0x40001000
 80027e8:	40001400 	.word	0x40001400
 80027ec:	40010400 	.word	0x40010400
 80027f0:	40014000 	.word	0x40014000
 80027f4:	40014400 	.word	0x40014400
 80027f8:	40014800 	.word	0x40014800
 80027fc:	40001800 	.word	0x40001800
 8002800:	40001c00 	.word	0x40001c00
 8002804:	40002000 	.word	0x40002000

08002808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b094      	sub	sp, #80	; 0x50
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]

  if(huart->Instance==USART1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a8c      	ldr	r2, [pc, #560]	; (8002a58 <HAL_UART_MspInit+0x250>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d12d      	bne.n	8002886 <HAL_UART_MspInit+0x7e>
    {
	  __HAL_RCC_USART1_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	63bb      	str	r3, [r7, #56]	; 0x38
 800282e:	4b8b      	ldr	r3, [pc, #556]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	4a8a      	ldr	r2, [pc, #552]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002834:	f043 0310 	orr.w	r3, r3, #16
 8002838:	6453      	str	r3, [r2, #68]	; 0x44
 800283a:	4b88      	ldr	r3, [pc, #544]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	63bb      	str	r3, [r7, #56]	; 0x38
 8002844:	6bbb      	ldr	r3, [r7, #56]	; 0x38

	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	637b      	str	r3, [r7, #52]	; 0x34
 800284a:	4b84      	ldr	r3, [pc, #528]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a83      	ldr	r2, [pc, #524]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b81      	ldr	r3, [pc, #516]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
 8002860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	  /**USART1 GPIO Configuration
	      PA9     ------> USART1_TX
	      PA10     ------> USART1_RX
	   */
	  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002862:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002866:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002868:	2302      	movs	r3, #2
 800286a:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002870:	2303      	movs	r3, #3
 8002872:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002874:	2307      	movs	r3, #7
 8002876:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002878:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800287c:	4619      	mov	r1, r3
 800287e:	4878      	ldr	r0, [pc, #480]	; (8002a60 <HAL_UART_MspInit+0x258>)
 8002880:	f00f face 	bl	8011e20 <HAL_GPIO_Init>
   /* USER CODE BEGIN USART6_MspInit 1 */

   /* USER CODE END USART6_MspInit 1 */
   }

}
 8002884:	e12b      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART2)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a76      	ldr	r2, [pc, #472]	; (8002a64 <HAL_UART_MspInit+0x25c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d12c      	bne.n	80028ea <HAL_UART_MspInit+0xe2>
      __HAL_RCC_USART2_CLK_ENABLE();
 8002890:	2300      	movs	r3, #0
 8002892:	633b      	str	r3, [r7, #48]	; 0x30
 8002894:	4b71      	ldr	r3, [pc, #452]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	4a70      	ldr	r2, [pc, #448]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800289a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289e:	6413      	str	r3, [r2, #64]	; 0x40
 80028a0:	4b6e      	ldr	r3, [pc, #440]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	633b      	str	r3, [r7, #48]	; 0x30
 80028aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ac:	2300      	movs	r3, #0
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b0:	4b6a      	ldr	r3, [pc, #424]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	4a69      	ldr	r2, [pc, #420]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028b6:	f043 0308 	orr.w	r3, r3, #8
 80028ba:	6313      	str	r3, [r2, #48]	; 0x30
 80028bc:	4b67      	ldr	r3, [pc, #412]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80028c8:	2360      	movs	r3, #96	; 0x60
 80028ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028cc:	2302      	movs	r3, #2
 80028ce:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d4:	2303      	movs	r3, #3
 80028d6:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028d8:	2307      	movs	r3, #7
 80028da:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028e0:	4619      	mov	r1, r3
 80028e2:	4861      	ldr	r0, [pc, #388]	; (8002a68 <HAL_UART_MspInit+0x260>)
 80028e4:	f00f fa9c 	bl	8011e20 <HAL_GPIO_Init>
}
 80028e8:	e0f9      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART3)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a5f      	ldr	r2, [pc, #380]	; (8002a6c <HAL_UART_MspInit+0x264>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d12d      	bne.n	8002950 <HAL_UART_MspInit+0x148>
      __HAL_RCC_USART3_CLK_ENABLE();
 80028f4:	2300      	movs	r3, #0
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028f8:	4b58      	ldr	r3, [pc, #352]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	4a57      	ldr	r2, [pc, #348]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002902:	6413      	str	r3, [r2, #64]	; 0x40
 8002904:	4b55      	ldr	r3, [pc, #340]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800290c:	62bb      	str	r3, [r7, #40]	; 0x28
 800290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8002910:	2300      	movs	r3, #0
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
 8002914:	4b51      	ldr	r3, [pc, #324]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	4a50      	ldr	r2, [pc, #320]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800291a:	f043 0308 	orr.w	r3, r3, #8
 800291e:	6313      	str	r3, [r2, #48]	; 0x30
 8002920:	4b4e      	ldr	r3, [pc, #312]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800292c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002930:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002932:	2302      	movs	r3, #2
 8002934:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293a:	2303      	movs	r3, #3
 800293c:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800293e:	2307      	movs	r3, #7
 8002940:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002942:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002946:	4619      	mov	r1, r3
 8002948:	4847      	ldr	r0, [pc, #284]	; (8002a68 <HAL_UART_MspInit+0x260>)
 800294a:	f00f fa69 	bl	8011e20 <HAL_GPIO_Init>
}
 800294e:	e0c6      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART4)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a46      	ldr	r2, [pc, #280]	; (8002a70 <HAL_UART_MspInit+0x268>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d12d      	bne.n	80029b6 <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_UART4_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	623b      	str	r3, [r7, #32]
 800295e:	4b3f      	ldr	r3, [pc, #252]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	4a3e      	ldr	r2, [pc, #248]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002968:	6413      	str	r3, [r2, #64]	; 0x40
 800296a:	4b3c      	ldr	r3, [pc, #240]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002972:	623b      	str	r3, [r7, #32]
 8002974:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	4b38      	ldr	r3, [pc, #224]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a37      	ldr	r2, [pc, #220]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002980:	f043 0304 	orr.w	r3, r3, #4
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b35      	ldr	r3, [pc, #212]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	61fb      	str	r3, [r7, #28]
 8002990:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002992:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002996:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002998:	2302      	movs	r3, #2
 800299a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800299c:	2301      	movs	r3, #1
 800299e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a0:	2303      	movs	r3, #3
 80029a2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80029a4:	2308      	movs	r3, #8
 80029a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029ac:	4619      	mov	r1, r3
 80029ae:	4831      	ldr	r0, [pc, #196]	; (8002a74 <HAL_UART_MspInit+0x26c>)
 80029b0:	f00f fa36 	bl	8011e20 <HAL_GPIO_Init>
}
 80029b4:	e093      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART5)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a2f      	ldr	r2, [pc, #188]	; (8002a78 <HAL_UART_MspInit+0x270>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d15d      	bne.n	8002a7c <HAL_UART_MspInit+0x274>
    __HAL_RCC_UART5_CLK_ENABLE();
 80029c0:	2300      	movs	r3, #0
 80029c2:	61bb      	str	r3, [r7, #24]
 80029c4:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	4a24      	ldr	r2, [pc, #144]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ce:	6413      	str	r3, [r2, #64]	; 0x40
 80029d0:	4b22      	ldr	r3, [pc, #136]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	4a1d      	ldr	r2, [pc, #116]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029e6:	f043 0304 	orr.w	r3, r3, #4
 80029ea:	6313      	str	r3, [r2, #48]	; 0x30
 80029ec:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029f8:	2300      	movs	r3, #0
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	4a16      	ldr	r2, [pc, #88]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002a02:	f043 0308 	orr.w	r3, r3, #8
 8002a06:	6313      	str	r3, [r2, #48]	; 0x30
 8002a08:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a18:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a22:	2303      	movs	r3, #3
 8002a24:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a26:	2308      	movs	r3, #8
 8002a28:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4810      	ldr	r0, [pc, #64]	; (8002a74 <HAL_UART_MspInit+0x26c>)
 8002a32:	f00f f9f5 	bl	8011e20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a36:	2304      	movs	r3, #4
 8002a38:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a42:	2303      	movs	r3, #3
 8002a44:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a46:	2308      	movs	r3, #8
 8002a48:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4805      	ldr	r0, [pc, #20]	; (8002a68 <HAL_UART_MspInit+0x260>)
 8002a52:	f00f f9e5 	bl	8011e20 <HAL_GPIO_Init>
}
 8002a56:	e042      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
 8002a58:	40011000 	.word	0x40011000
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40020000 	.word	0x40020000
 8002a64:	40004400 	.word	0x40004400
 8002a68:	40020c00 	.word	0x40020c00
 8002a6c:	40004800 	.word	0x40004800
 8002a70:	40004c00 	.word	0x40004c00
 8002a74:	40020800 	.word	0x40020800
 8002a78:	40005000 	.word	0x40005000
  else if(huart->Instance==USART6)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <HAL_UART_MspInit+0x2e0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d12b      	bne.n	8002ade <HAL_UART_MspInit+0x2d6>
     __HAL_RCC_USART6_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	4b18      	ldr	r3, [pc, #96]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	4a17      	ldr	r2, [pc, #92]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002a90:	f043 0320 	orr.w	r3, r3, #32
 8002a94:	6453      	str	r3, [r2, #68]	; 0x44
 8002a96:	4b15      	ldr	r3, [pc, #84]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f003 0320 	and.w	r3, r3, #32
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
     __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a10      	ldr	r2, [pc, #64]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002aac:	f043 0304 	orr.w	r3, r3, #4
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]
     GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002abe:	23c0      	movs	r3, #192	; 0xc0
 8002ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	643b      	str	r3, [r7, #64]	; 0x40
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	647b      	str	r3, [r7, #68]	; 0x44
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aca:	2303      	movs	r3, #3
 8002acc:	64bb      	str	r3, [r7, #72]	; 0x48
     GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ace:	2308      	movs	r3, #8
 8002ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ad2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4805      	ldr	r0, [pc, #20]	; (8002af0 <HAL_UART_MspInit+0x2e8>)
 8002ada:	f00f f9a1 	bl	8011e20 <HAL_GPIO_Init>
}
 8002ade:	bf00      	nop
 8002ae0:	3750      	adds	r7, #80	; 0x50
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40011400 	.word	0x40011400
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40020800 	.word	0x40020800

08002af4 <HAL_TIM_Encoder_MspInit>:
  }

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b094      	sub	sp, #80	; 0x50
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a8c      	ldr	r2, [pc, #560]	; (8002d44 <HAL_TIM_Encoder_MspInit+0x250>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d12d      	bne.n	8002b72 <HAL_TIM_Encoder_MspInit+0x7e>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b1a:	4b8b      	ldr	r3, [pc, #556]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	4a8a      	ldr	r2, [pc, #552]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	6453      	str	r3, [r2, #68]	; 0x44
 8002b26:	4b88      	ldr	r3, [pc, #544]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	637b      	str	r3, [r7, #52]	; 0x34
 8002b36:	4b84      	ldr	r3, [pc, #528]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	4a83      	ldr	r2, [pc, #524]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b3c:	f043 0310 	orr.w	r3, r3, #16
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30
 8002b42:	4b81      	ldr	r3, [pc, #516]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34


    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002b4e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002b52:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b60:	2301      	movs	r3, #1
 8002b62:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4878      	ldr	r0, [pc, #480]	; (8002d4c <HAL_TIM_Encoder_MspInit+0x258>)
 8002b6c:	f00f f958 	bl	8011e20 <HAL_GPIO_Init>
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  }

}
 8002b70:	e12b      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM2){
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7a:	d14b      	bne.n	8002c14 <HAL_TIM_Encoder_MspInit+0x120>
	  __HAL_RCC_TIM2_CLK_ENABLE();
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	633b      	str	r3, [r7, #48]	; 0x30
 8002b80:	4b71      	ldr	r3, [pc, #452]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	4a70      	ldr	r2, [pc, #448]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8c:	4b6e      	ldr	r3, [pc, #440]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	633b      	str	r3, [r7, #48]	; 0x30
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b98:	2300      	movs	r3, #0
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b9c:	4b6a      	ldr	r3, [pc, #424]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	4a69      	ldr	r2, [pc, #420]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba8:	4b67      	ldr	r3, [pc, #412]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bb8:	4b63      	ldr	r3, [pc, #396]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	4a62      	ldr	r2, [pc, #392]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002bbe:	f043 0302 	orr.w	r3, r3, #2
 8002bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc4:	4b60      	ldr	r3, [pc, #384]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002bd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002be2:	2301      	movs	r3, #1
 8002be4:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bea:	4619      	mov	r1, r3
 8002bec:	4858      	ldr	r0, [pc, #352]	; (8002d50 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002bee:	f00f f917 	bl	8011e20 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bf2:	2308      	movs	r3, #8
 8002bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c02:	2301      	movs	r3, #1
 8002c04:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4851      	ldr	r0, [pc, #324]	; (8002d54 <HAL_TIM_Encoder_MspInit+0x260>)
 8002c0e:	f00f f907 	bl	8011e20 <HAL_GPIO_Init>
}
 8002c12:	e0da      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM3){
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a4f      	ldr	r2, [pc, #316]	; (8002d58 <HAL_TIM_Encoder_MspInit+0x264>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d12c      	bne.n	8002c78 <HAL_TIM_Encoder_MspInit+0x184>
	  __HAL_RCC_TIM3_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
 8002c22:	4b49      	ldr	r3, [pc, #292]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	4a48      	ldr	r2, [pc, #288]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c28:	f043 0302 	orr.w	r3, r3, #2
 8002c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2e:	4b46      	ldr	r3, [pc, #280]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	623b      	str	r3, [r7, #32]
 8002c3e:	4b42      	ldr	r3, [pc, #264]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	4a41      	ldr	r2, [pc, #260]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4a:	4b3f      	ldr	r3, [pc, #252]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	623b      	str	r3, [r7, #32]
 8002c54:	6a3b      	ldr	r3, [r7, #32]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c56:	23c0      	movs	r3, #192	; 0xc0
 8002c58:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c62:	2300      	movs	r3, #0
 8002c64:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c66:	2302      	movs	r3, #2
 8002c68:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4837      	ldr	r0, [pc, #220]	; (8002d50 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002c72:	f00f f8d5 	bl	8011e20 <HAL_GPIO_Init>
}
 8002c76:	e0a8      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM4){
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a37      	ldr	r2, [pc, #220]	; (8002d5c <HAL_TIM_Encoder_MspInit+0x268>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d12d      	bne.n	8002cde <HAL_TIM_Encoder_MspInit+0x1ea>
	  __HAL_RCC_TIM4_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	4b30      	ldr	r3, [pc, #192]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	4a2f      	ldr	r2, [pc, #188]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c8c:	f043 0304 	orr.w	r3, r3, #4
 8002c90:	6413      	str	r3, [r2, #64]	; 0x40
 8002c92:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	61fb      	str	r3, [r7, #28]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	4a28      	ldr	r2, [pc, #160]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ca8:	f043 0308 	orr.w	r3, r3, #8
 8002cac:	6313      	str	r3, [r2, #48]	; 0x30
 8002cae:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	61bb      	str	r3, [r7, #24]
 8002cb8:	69bb      	ldr	r3, [r7, #24]
	  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002cba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4822      	ldr	r0, [pc, #136]	; (8002d60 <HAL_TIM_Encoder_MspInit+0x26c>)
 8002cd8:	f00f f8a2 	bl	8011e20 <HAL_GPIO_Init>
}
 8002cdc:	e075      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM5){
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a20      	ldr	r2, [pc, #128]	; (8002d64 <HAL_TIM_Encoder_MspInit+0x270>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d13f      	bne.n	8002d68 <HAL_TIM_Encoder_MspInit+0x274>
	  __HAL_RCC_TIM5_CLK_ENABLE();
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	4a15      	ldr	r2, [pc, #84]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cf2:	f043 0308 	orr.w	r3, r3, #8
 8002cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf8:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d04:	2300      	movs	r3, #0
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6313      	str	r3, [r2, #48]	; 0x30
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	693b      	ldr	r3, [r7, #16]
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d20:	2303      	movs	r3, #3
 8002d22:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d24:	2302      	movs	r3, #2
 8002d26:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002d30:	2302      	movs	r3, #2
 8002d32:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4805      	ldr	r0, [pc, #20]	; (8002d50 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002d3c:	f00f f870 	bl	8011e20 <HAL_GPIO_Init>
}
 8002d40:	e043      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
 8002d42:	bf00      	nop
 8002d44:	40010000 	.word	0x40010000
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40020000 	.word	0x40020000
 8002d54:	40020400 	.word	0x40020400
 8002d58:	40000400 	.word	0x40000400
 8002d5c:	40000800 	.word	0x40000800
 8002d60:	40020c00 	.word	0x40020c00
 8002d64:	40000c00 	.word	0x40000c00
  }else if(htim_encoder->Instance==TIM8){
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a19      	ldr	r2, [pc, #100]	; (8002dd4 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d12b      	bne.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
	  __HAL_RCC_TIM8_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d7c:	f043 0302 	orr.w	r3, r3, #2
 8002d80:	6453      	str	r3, [r2, #68]	; 0x44
 8002d82:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	4a10      	ldr	r2, [pc, #64]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002daa:	23c0      	movs	r3, #192	; 0xc0
 8002dac:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dae:	2302      	movs	r3, #2
 8002db0:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db6:	2300      	movs	r3, #0
 8002db8:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dbe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4805      	ldr	r0, [pc, #20]	; (8002ddc <HAL_TIM_Encoder_MspInit+0x2e8>)
 8002dc6:	f00f f82b 	bl	8011e20 <HAL_GPIO_Init>
}
 8002dca:	bf00      	nop
 8002dcc:	3750      	adds	r7, #80	; 0x50
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40010400 	.word	0x40010400
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40020800 	.word	0x40020800

08002de0 <SystemClock_Config>:

	}
}

void SystemClock_Config(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b094      	sub	sp, #80	; 0x50
 8002de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002de6:	f107 0320 	add.w	r3, r7, #32
 8002dea:	2230      	movs	r2, #48	; 0x30
 8002dec:	2100      	movs	r1, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	f016 ff24 	bl	8019c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002df4:	f107 030c 	add.w	r3, r7, #12
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e04:	2300      	movs	r3, #0
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	4b29      	ldr	r3, [pc, #164]	; (8002eb0 <SystemClock_Config+0xd0>)
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	4a28      	ldr	r2, [pc, #160]	; (8002eb0 <SystemClock_Config+0xd0>)
 8002e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e12:	6413      	str	r3, [r2, #64]	; 0x40
 8002e14:	4b26      	ldr	r3, [pc, #152]	; (8002eb0 <SystemClock_Config+0xd0>)
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e20:	2300      	movs	r3, #0
 8002e22:	607b      	str	r3, [r7, #4]
 8002e24:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <SystemClock_Config+0xd4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a22      	ldr	r2, [pc, #136]	; (8002eb4 <SystemClock_Config+0xd4>)
 8002e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e2e:	6013      	str	r3, [r2, #0]
 8002e30:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <SystemClock_Config+0xd4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e38:	607b      	str	r3, [r7, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e46:	2302      	movs	r3, #2
 8002e48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002e50:	2308      	movs	r3, #8
 8002e52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002e54:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002e58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e5e:	2304      	movs	r3, #4
 8002e60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e62:	f107 0320 	add.w	r3, r7, #32
 8002e66:	4618      	mov	r0, r3
 8002e68:	f011 faec 	bl	8014444 <HAL_RCC_OscConfig>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002e72:	f001 fb69 	bl	8004548 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e76:	230f      	movs	r3, #15
 8002e78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e82:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002e8e:	f107 030c 	add.w	r3, r7, #12
 8002e92:	2105      	movs	r1, #5
 8002e94:	4618      	mov	r0, r3
 8002e96:	f011 fd45 	bl	8014924 <HAL_RCC_ClockConfig>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002ea0:	f001 fb52 	bl	8004548 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002ea4:	f011 fe24 	bl	8014af0 <HAL_RCC_EnableCSS>
}
 8002ea8:	bf00      	nop
 8002eaa:	3750      	adds	r7, #80	; 0x50
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40007000 	.word	0x40007000

08002eb8 <TIMxInit>:
 * 						  BIOSTIMx_Init (&htim2, 1000, 84);  //1ms  interrupt
 * 						  BIOSTIMx_Init (&htim3, 20000, 84); //20ms interrupt
 */

void TIMxInit(TIM_HandleTypeDef* htimx, uint16_t period, uint16_t prescaler)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	807b      	strh	r3, [r7, #2]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	803b      	strh	r3, [r7, #0]

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec8:	f107 030c 	add.w	r3, r7, #12
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
	int nvic = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]

	if(htimx == &htim1){
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a9b      	ldr	r2, [pc, #620]	; (8003148 <TIMxInit+0x290>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d105      	bne.n	8002eea <TIMxInit+0x32>
		htimx->Instance = TIM1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a9a      	ldr	r2, [pc, #616]	; (800314c <TIMxInit+0x294>)
 8002ee2:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8002ee4:	2319      	movs	r3, #25
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	e081      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim2)	{
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a98      	ldr	r2, [pc, #608]	; (8003150 <TIMxInit+0x298>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d106      	bne.n	8002f00 <TIMxInit+0x48>
		htimx->Instance = TIM2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ef8:	601a      	str	r2, [r3, #0]
		nvic = TIM2_IRQn;
 8002efa:	231c      	movs	r3, #28
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	e076      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim3)	{
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a94      	ldr	r2, [pc, #592]	; (8003154 <TIMxInit+0x29c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d105      	bne.n	8002f14 <TIMxInit+0x5c>
		htimx->Instance = TIM3;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a93      	ldr	r2, [pc, #588]	; (8003158 <TIMxInit+0x2a0>)
 8002f0c:	601a      	str	r2, [r3, #0]
		nvic = TIM3_IRQn;
 8002f0e:	231d      	movs	r3, #29
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	e06c      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim4)	{
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a91      	ldr	r2, [pc, #580]	; (800315c <TIMxInit+0x2a4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d105      	bne.n	8002f28 <TIMxInit+0x70>
		htimx->Instance = TIM4;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a90      	ldr	r2, [pc, #576]	; (8003160 <TIMxInit+0x2a8>)
 8002f20:	601a      	str	r2, [r3, #0]
		nvic = TIM4_IRQn;
 8002f22:	231e      	movs	r3, #30
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	e062      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim5)	{
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a8e      	ldr	r2, [pc, #568]	; (8003164 <TIMxInit+0x2ac>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d105      	bne.n	8002f3c <TIMxInit+0x84>
		htimx->Instance = TIM5;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a8d      	ldr	r2, [pc, #564]	; (8003168 <TIMxInit+0x2b0>)
 8002f34:	601a      	str	r2, [r3, #0]
		nvic = TIM5_IRQn;
 8002f36:	2332      	movs	r3, #50	; 0x32
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	e058      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim6)	{
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a8b      	ldr	r2, [pc, #556]	; (800316c <TIMxInit+0x2b4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d105      	bne.n	8002f50 <TIMxInit+0x98>
		htimx->Instance = TIM6;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a8a      	ldr	r2, [pc, #552]	; (8003170 <TIMxInit+0x2b8>)
 8002f48:	601a      	str	r2, [r3, #0]
		nvic = TIM6_DAC_IRQn;
 8002f4a:	2336      	movs	r3, #54	; 0x36
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	e04e      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim7)	{
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a88      	ldr	r2, [pc, #544]	; (8003174 <TIMxInit+0x2bc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d105      	bne.n	8002f64 <TIMxInit+0xac>
		htimx->Instance = TIM7;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a87      	ldr	r2, [pc, #540]	; (8003178 <TIMxInit+0x2c0>)
 8002f5c:	601a      	str	r2, [r3, #0]
		nvic = TIM7_IRQn;
 8002f5e:	2337      	movs	r3, #55	; 0x37
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	e044      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim8)	{
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a85      	ldr	r2, [pc, #532]	; (800317c <TIMxInit+0x2c4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d105      	bne.n	8002f78 <TIMxInit+0xc0>
		htimx->Instance = TIM8;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a84      	ldr	r2, [pc, #528]	; (8003180 <TIMxInit+0x2c8>)
 8002f70:	601a      	str	r2, [r3, #0]
		nvic = TIM8_CC_IRQn;
 8002f72:	232e      	movs	r3, #46	; 0x2e
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	e03a      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim9)	{
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a82      	ldr	r2, [pc, #520]	; (8003184 <TIMxInit+0x2cc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d105      	bne.n	8002f8c <TIMxInit+0xd4>
		htimx->Instance = TIM9;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a81      	ldr	r2, [pc, #516]	; (8003188 <TIMxInit+0x2d0>)
 8002f84:	601a      	str	r2, [r3, #0]
		nvic = TIM1_BRK_TIM9_IRQn;
 8002f86:	2318      	movs	r3, #24
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	e030      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim10)	{
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a7f      	ldr	r2, [pc, #508]	; (800318c <TIMxInit+0x2d4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d105      	bne.n	8002fa0 <TIMxInit+0xe8>
		htimx->Instance = TIM10;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a7e      	ldr	r2, [pc, #504]	; (8003190 <TIMxInit+0x2d8>)
 8002f98:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8002f9a:	2319      	movs	r3, #25
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	e026      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim11)	{
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a7c      	ldr	r2, [pc, #496]	; (8003194 <TIMxInit+0x2dc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d105      	bne.n	8002fb4 <TIMxInit+0xfc>
		htimx->Instance = TIM11;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a7b      	ldr	r2, [pc, #492]	; (8003198 <TIMxInit+0x2e0>)
 8002fac:	601a      	str	r2, [r3, #0]
		nvic = TIM1_TRG_COM_TIM11_IRQn;
 8002fae:	231a      	movs	r3, #26
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	e01c      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim12)	{
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a79      	ldr	r2, [pc, #484]	; (800319c <TIMxInit+0x2e4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d105      	bne.n	8002fc8 <TIMxInit+0x110>
		htimx->Instance = TIM12;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a78      	ldr	r2, [pc, #480]	; (80031a0 <TIMxInit+0x2e8>)
 8002fc0:	601a      	str	r2, [r3, #0]
		nvic = TIM8_BRK_TIM12_IRQn;
 8002fc2:	232b      	movs	r3, #43	; 0x2b
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	e012      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim13)	{
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a76      	ldr	r2, [pc, #472]	; (80031a4 <TIMxInit+0x2ec>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d105      	bne.n	8002fdc <TIMxInit+0x124>
		htimx->Instance = TIM13;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a75      	ldr	r2, [pc, #468]	; (80031a8 <TIMxInit+0x2f0>)
 8002fd4:	601a      	str	r2, [r3, #0]
		nvic = TIM8_UP_TIM13_IRQn;
 8002fd6:	232c      	movs	r3, #44	; 0x2c
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	e008      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim14)	{
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a73      	ldr	r2, [pc, #460]	; (80031ac <TIMxInit+0x2f4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d104      	bne.n	8002fee <TIMxInit+0x136>
		htimx->Instance = TIM14;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a72      	ldr	r2, [pc, #456]	; (80031b0 <TIMxInit+0x2f8>)
 8002fe8:	601a      	str	r2, [r3, #0]
		nvic = TIM8_TRG_COM_TIM14_IRQn;
 8002fea:	232d      	movs	r3, #45	; 0x2d
 8002fec:	617b      	str	r3, [r7, #20]
	}


	htimx->Init.Prescaler = prescaler;
 8002fee:	883a      	ldrh	r2, [r7, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = period;
 8002ffa:	887a      	ldrh	r2, [r7, #2]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	60da      	str	r2, [r3, #12]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f011 ffe4 	bl	8014fd4 <HAL_TIM_Base_Init>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <TIMxInit+0x15e>
	{
		Error_Handler();
 8003012:	f001 fa99 	bl	8004548 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 800301e:	f107 030c 	add.w	r3, r7, #12
 8003022:	4619      	mov	r1, r3
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f012 ff45 	bl	8015eb4 <HAL_TIMEx_MasterConfigSynchronization>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <TIMxInit+0x17c>
	{
		Error_Handler();
 8003030:	f001 fa8a 	bl	8004548 <Error_Handler>
	}

	if(htimx == &htim1){
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a44      	ldr	r2, [pc, #272]	; (8003148 <TIMxInit+0x290>)
 8003038:	4293      	cmp	r3, r2
 800303a:	f000 80cb 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef QEI1_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM1_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim2)	{
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a43      	ldr	r2, [pc, #268]	; (8003150 <TIMxInit+0x298>)
 8003042:	4293      	cmp	r3, r2
 8003044:	f000 80c6 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef FREERTOS_USED
		HAL_NVIC_SetPriority(nvic, TIM2_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim3)	{
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a42      	ldr	r2, [pc, #264]	; (8003154 <TIMxInit+0x29c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	f000 80c1 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM3_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim4)	{
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a41      	ldr	r2, [pc, #260]	; (800315c <TIMxInit+0x2a4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	f000 80bc 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef QEI4_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM4_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim5)	{
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a41      	ldr	r2, [pc, #260]	; (8003164 <TIMxInit+0x2ac>)
 8003060:	4293      	cmp	r3, r2
 8003062:	f000 80b7 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM5_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim6)	{
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a40      	ldr	r2, [pc, #256]	; (800316c <TIMxInit+0x2b4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d10c      	bne.n	8003088 <TIMxInit+0x1d0>
		HAL_NVIC_SetPriority(nvic, TIM6_IRQ_PRIO, 0);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	b25b      	sxtb	r3, r3
 8003072:	2200      	movs	r2, #0
 8003074:	2107      	movs	r1, #7
 8003076:	4618      	mov	r0, r3
 8003078:	f00e fa82 	bl	8011580 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	b25b      	sxtb	r3, r3
 8003080:	4618      	mov	r0, r3
 8003082:	f00e fa99 	bl	80115b8 <HAL_NVIC_EnableIRQ>
 8003086:	e0a5      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim7)	{
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a3a      	ldr	r2, [pc, #232]	; (8003174 <TIMxInit+0x2bc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d10c      	bne.n	80030aa <TIMxInit+0x1f2>
		HAL_NVIC_SetPriority(nvic, TIM7_IRQ_PRIO, 0);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	b25b      	sxtb	r3, r3
 8003094:	2200      	movs	r2, #0
 8003096:	210e      	movs	r1, #14
 8003098:	4618      	mov	r0, r3
 800309a:	f00e fa71 	bl	8011580 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	b25b      	sxtb	r3, r3
 80030a2:	4618      	mov	r0, r3
 80030a4:	f00e fa88 	bl	80115b8 <HAL_NVIC_EnableIRQ>
 80030a8:	e094      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim8)	{
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a33      	ldr	r2, [pc, #204]	; (800317c <TIMxInit+0x2c4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	f000 8090 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef QEI6_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM8_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim9)	{
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a33      	ldr	r2, [pc, #204]	; (8003184 <TIMxInit+0x2cc>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	f000 808b 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM9_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim10)	{
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a32      	ldr	r2, [pc, #200]	; (800318c <TIMxInit+0x2d4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d10c      	bne.n	80030e0 <TIMxInit+0x228>
		HAL_NVIC_SetPriority(nvic, TIM10_IRQ_PRIO, 0);
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	b25b      	sxtb	r3, r3
 80030ca:	2200      	movs	r2, #0
 80030cc:	210e      	movs	r1, #14
 80030ce:	4618      	mov	r0, r3
 80030d0:	f00e fa56 	bl	8011580 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	b25b      	sxtb	r3, r3
 80030d8:	4618      	mov	r0, r3
 80030da:	f00e fa6d 	bl	80115b8 <HAL_NVIC_EnableIRQ>
 80030de:	e079      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim11)	{
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a2c      	ldr	r2, [pc, #176]	; (8003194 <TIMxInit+0x2dc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d10c      	bne.n	8003102 <TIMxInit+0x24a>
		HAL_NVIC_SetPriority(nvic, TIM11_IRQ_PRIO, 0);
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	b25b      	sxtb	r3, r3
 80030ec:	2200      	movs	r2, #0
 80030ee:	210e      	movs	r1, #14
 80030f0:	4618      	mov	r0, r3
 80030f2:	f00e fa45 	bl	8011580 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	b25b      	sxtb	r3, r3
 80030fa:	4618      	mov	r0, r3
 80030fc:	f00e fa5c 	bl	80115b8 <HAL_NVIC_EnableIRQ>
 8003100:	e068      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim12)	{
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a25      	ldr	r2, [pc, #148]	; (800319c <TIMxInit+0x2e4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d10c      	bne.n	8003124 <TIMxInit+0x26c>
		HAL_NVIC_SetPriority(nvic, TIM12_IRQ_PRIO, 0);
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	b25b      	sxtb	r3, r3
 800310e:	2200      	movs	r2, #0
 8003110:	210e      	movs	r1, #14
 8003112:	4618      	mov	r0, r3
 8003114:	f00e fa34 	bl	8011580 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	b25b      	sxtb	r3, r3
 800311c:	4618      	mov	r0, r3
 800311e:	f00e fa4b 	bl	80115b8 <HAL_NVIC_EnableIRQ>
 8003122:	e057      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim13)	{
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a1f      	ldr	r2, [pc, #124]	; (80031a4 <TIMxInit+0x2ec>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d143      	bne.n	80031b4 <TIMxInit+0x2fc>
		HAL_NVIC_SetPriority(nvic, TIM13_IRQ_PRIO, 0);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	b25b      	sxtb	r3, r3
 8003130:	2200      	movs	r2, #0
 8003132:	210e      	movs	r1, #14
 8003134:	4618      	mov	r0, r3
 8003136:	f00e fa23 	bl	8011580 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	b25b      	sxtb	r3, r3
 800313e:	4618      	mov	r0, r3
 8003140:	f00e fa3a 	bl	80115b8 <HAL_NVIC_EnableIRQ>
 8003144:	e046      	b.n	80031d4 <TIMxInit+0x31c>
 8003146:	bf00      	nop
 8003148:	20005f34 	.word	0x20005f34
 800314c:	40010000 	.word	0x40010000
 8003150:	20006038 	.word	0x20006038
 8003154:	20005ce8 	.word	0x20005ce8
 8003158:	40000400 	.word	0x40000400
 800315c:	20005b24 	.word	0x20005b24
 8003160:	40000800 	.word	0x40000800
 8003164:	20005ca8 	.word	0x20005ca8
 8003168:	40000c00 	.word	0x40000c00
 800316c:	20005ef4 	.word	0x20005ef4
 8003170:	40001000 	.word	0x40001000
 8003174:	20006198 	.word	0x20006198
 8003178:	40001400 	.word	0x40001400
 800317c:	20005ae4 	.word	0x20005ae4
 8003180:	40010400 	.word	0x40010400
 8003184:	20005f74 	.word	0x20005f74
 8003188:	40014000 	.word	0x40014000
 800318c:	20005c04 	.word	0x20005c04
 8003190:	40014400 	.word	0x40014400
 8003194:	20005e4c 	.word	0x20005e4c
 8003198:	40014800 	.word	0x40014800
 800319c:	20006158 	.word	0x20006158
 80031a0:	40001800 	.word	0x40001800
 80031a4:	20005dcc 	.word	0x20005dcc
 80031a8:	40001c00 	.word	0x40001c00
 80031ac:	20006118 	.word	0x20006118
 80031b0:	40002000 	.word	0x40002000
	}
	else if(htimx == &htim14)	{
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a0c      	ldr	r2, [pc, #48]	; (80031e8 <TIMxInit+0x330>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d10b      	bne.n	80031d4 <TIMxInit+0x31c>
		HAL_NVIC_SetPriority(nvic, TIM14_IRQ_PRIO, 0);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	b25b      	sxtb	r3, r3
 80031c0:	2200      	movs	r2, #0
 80031c2:	210e      	movs	r1, #14
 80031c4:	4618      	mov	r0, r3
 80031c6:	f00e f9db 	bl	8011580 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	b25b      	sxtb	r3, r3
 80031ce:	4618      	mov	r0, r3
 80031d0:	f00e f9f2 	bl	80115b8 <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Base_Start(htimx);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f011 ff28 	bl	801502a <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(htimx);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f011 ff49 	bl	8015072 <HAL_TIM_Base_Start_IT>

}
 80031e0:	bf00      	nop
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20006118 	.word	0x20006118

080031ec <UARTInit>:
 * 						  rxstate				,can be ENABLE (enable USART1 receive interrupt) or DISBALE
 * Function Return		: None
 * Function Example		: UARTxInit(&huart1, 115200, ENABLE, 0, 0);
 */
void UARTInit(UART_HandleTypeDef* huartx, uint32_t baudrate, FunctionalState rxstate)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	4613      	mov	r3, r2
 80031f8:	71fb      	strb	r3, [r7, #7]
	IRQn_Type nvic;
	uint8_t *rcv_data;

	if (huartx == &huart1){
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4a6e      	ldr	r2, [pc, #440]	; (80033b8 <UARTInit+0x1cc>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d107      	bne.n	8003212 <UARTInit+0x26>
		huartx->Instance = USART1;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4a6d      	ldr	r2, [pc, #436]	; (80033bc <UARTInit+0x1d0>)
 8003206:	601a      	str	r2, [r3, #0]
		nvic = USART1_IRQn;
 8003208:	2325      	movs	r3, #37	; 0x25
 800320a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart1_data;
 800320c:	4b6c      	ldr	r3, [pc, #432]	; (80033c0 <UARTInit+0x1d4>)
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	e036      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart2){
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4a6b      	ldr	r2, [pc, #428]	; (80033c4 <UARTInit+0x1d8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d107      	bne.n	800322a <UARTInit+0x3e>
		huartx->Instance = USART2;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4a6a      	ldr	r2, [pc, #424]	; (80033c8 <UARTInit+0x1dc>)
 800321e:	601a      	str	r2, [r3, #0]
		nvic = USART2_IRQn;
 8003220:	2326      	movs	r3, #38	; 0x26
 8003222:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart2_data;
 8003224:	4b69      	ldr	r3, [pc, #420]	; (80033cc <UARTInit+0x1e0>)
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	e02a      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart3){
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4a68      	ldr	r2, [pc, #416]	; (80033d0 <UARTInit+0x1e4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d107      	bne.n	8003242 <UARTInit+0x56>
		huartx->Instance = USART3;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4a67      	ldr	r2, [pc, #412]	; (80033d4 <UARTInit+0x1e8>)
 8003236:	601a      	str	r2, [r3, #0]
		nvic = USART3_IRQn;
 8003238:	2327      	movs	r3, #39	; 0x27
 800323a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart3_data;
 800323c:	4b66      	ldr	r3, [pc, #408]	; (80033d8 <UARTInit+0x1ec>)
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	e01e      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart4){
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4a65      	ldr	r2, [pc, #404]	; (80033dc <UARTInit+0x1f0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d107      	bne.n	800325a <UARTInit+0x6e>
		huartx->Instance = UART4;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4a64      	ldr	r2, [pc, #400]	; (80033e0 <UARTInit+0x1f4>)
 800324e:	601a      	str	r2, [r3, #0]
		nvic = UART4_IRQn;
 8003250:	2334      	movs	r3, #52	; 0x34
 8003252:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart4_data;
 8003254:	4b63      	ldr	r3, [pc, #396]	; (80033e4 <UARTInit+0x1f8>)
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	e012      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart5){
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4a62      	ldr	r2, [pc, #392]	; (80033e8 <UARTInit+0x1fc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d107      	bne.n	8003272 <UARTInit+0x86>
		huartx->Instance = UART5;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4a61      	ldr	r2, [pc, #388]	; (80033ec <UARTInit+0x200>)
 8003266:	601a      	str	r2, [r3, #0]
		nvic = UART5_IRQn;
 8003268:	2335      	movs	r3, #53	; 0x35
 800326a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart5_data;
 800326c:	4b60      	ldr	r3, [pc, #384]	; (80033f0 <UARTInit+0x204>)
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	e006      	b.n	8003280 <UARTInit+0x94>
	}else{
		huartx->Instance = USART6;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4a5f      	ldr	r2, [pc, #380]	; (80033f4 <UARTInit+0x208>)
 8003276:	601a      	str	r2, [r3, #0]
		nvic = USART6_IRQn;
 8003278:	2347      	movs	r3, #71	; 0x47
 800327a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart6_data;
 800327c:	4b5e      	ldr	r3, [pc, #376]	; (80033f8 <UARTInit+0x20c>)
 800327e:	613b      	str	r3, [r7, #16]
	}


	huartx->Init.BaudRate = baudrate;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	605a      	str	r2, [r3, #4]
	huartx->Init.WordLength = UART_WORDLENGTH_8B;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	609a      	str	r2, [r3, #8]
	huartx->Init.StopBits = UART_STOPBITS_1;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	60da      	str	r2, [r3, #12]
	huartx->Init.Parity = UART_PARITY_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	611a      	str	r2, [r3, #16]
	huartx->Init.Mode = UART_MODE_TX_RX;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	220c      	movs	r2, #12
 800329c:	615a      	str	r2, [r3, #20]
	huartx->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	619a      	str	r2, [r3, #24]
	huartx->Init.OverSampling = UART_OVERSAMPLING_16;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	61da      	str	r2, [r3, #28]


	if (HAL_UART_Init(huartx) != HAL_OK)
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f012 fe92 	bl	8015fd4 <HAL_UART_Init>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <UARTInit+0xce>
	{
		Error_Handler();
 80032b6:	f001 f947 	bl	8004548 <Error_Handler>
	}

	if(rxstate == ENABLE){
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d176      	bne.n	80033ae <UARTInit+0x1c2>
		if(huartx == &huart2){
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4a40      	ldr	r2, [pc, #256]	; (80033c4 <UARTInit+0x1d8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d119      	bne.n	80032fc <UARTInit+0x110>

			HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 80032c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032cc:	2200      	movs	r2, #0
 80032ce:	2105      	movs	r1, #5
 80032d0:	4618      	mov	r0, r3
 80032d2:	f00e f955 	bl	8011580 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 80032d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032da:	4618      	mov	r0, r3
 80032dc:	f00e f988 	bl	80115f0 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 80032e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f00e f967 	bl	80115b8 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0220 	orr.w	r2, r2, #32
 80032f8:	60da      	str	r2, [r3, #12]
			HAL_NVIC_EnableIRQ(nvic);
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);

		}
	}
}
 80032fa:	e058      	b.n	80033ae <UARTInit+0x1c2>
		}else if(huartx == &huart3){
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4a34      	ldr	r2, [pc, #208]	; (80033d0 <UARTInit+0x1e4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d119      	bne.n	8003338 <UARTInit+0x14c>
			HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 8003304:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003308:	2200      	movs	r2, #0
 800330a:	2104      	movs	r1, #4
 800330c:	4618      	mov	r0, r3
 800330e:	f00e f937 	bl	8011580 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 8003312:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003316:	4618      	mov	r0, r3
 8003318:	f00e f96a 	bl	80115f0 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 800331c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003320:	4618      	mov	r0, r3
 8003322:	f00e f949 	bl	80115b8 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0220 	orr.w	r2, r2, #32
 8003334:	60da      	str	r2, [r3, #12]
}
 8003336:	e03a      	b.n	80033ae <UARTInit+0x1c2>
		}else if(huartx == &huart4){
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4a28      	ldr	r2, [pc, #160]	; (80033dc <UARTInit+0x1f0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d119      	bne.n	8003374 <UARTInit+0x188>
			HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 8003340:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003344:	2200      	movs	r2, #0
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f00e f919 	bl	8011580 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 800334e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003352:	4618      	mov	r0, r3
 8003354:	f00e f94c 	bl	80115f0 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8003358:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800335c:	4618      	mov	r0, r3
 800335e:	f00e f92b 	bl	80115b8 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0220 	orr.w	r2, r2, #32
 8003370:	60da      	str	r2, [r3, #12]
}
 8003372:	e01c      	b.n	80033ae <UARTInit+0x1c2>
		}else if(huartx == &huart5){
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4a1c      	ldr	r2, [pc, #112]	; (80033e8 <UARTInit+0x1fc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d118      	bne.n	80033ae <UARTInit+0x1c2>
			HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 800337c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003380:	2200      	movs	r2, #0
 8003382:	210e      	movs	r1, #14
 8003384:	4618      	mov	r0, r3
 8003386:	f00e f8fb 	bl	8011580 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 800338a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800338e:	4618      	mov	r0, r3
 8003390:	f00e f92e 	bl	80115f0 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8003394:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003398:	4618      	mov	r0, r3
 800339a:	f00e f90d 	bl	80115b8 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0220 	orr.w	r2, r2, #32
 80033ac:	60da      	str	r2, [r3, #12]
}
 80033ae:	bf00      	nop
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20005e0c 	.word	0x20005e0c
 80033bc:	40011000 	.word	0x40011000
 80033c0:	20005ae0 	.word	0x20005ae0
 80033c4:	20006078 	.word	0x20006078
 80033c8:	40004400 	.word	0x40004400
 80033cc:	20005e8c 	.word	0x20005e8c
 80033d0:	20005bc4 	.word	0x20005bc4
 80033d4:	40004800 	.word	0x40004800
 80033d8:	20005d29 	.word	0x20005d29
 80033dc:	20005ff8 	.word	0x20005ff8
 80033e0:	40004c00 	.word	0x40004c00
 80033e4:	20005ff4 	.word	0x20005ff4
 80033e8:	20005d2c 	.word	0x20005d2c
 80033ec:	40005000 	.word	0x40005000
 80033f0:	20005ca4 	.word	0x20005ca4
 80033f4:	40011400 	.word	0x40011400
 80033f8:	20005d28 	.word	0x20005d28

080033fc <UARTx_DMA_Rx_Init>:
 * 						  baudrate				,normally set to 115200 according to UTM ROBOCON UART COMMUNICATION PROTOCOL.
 * Function Return		: None
 * Function Example		: UARTx_DMA_Rx_Init(&huart1, &hdma_usart2_rx, 115200);
 */
void UARTx_DMA_Rx_Init(UART_HandleTypeDef* huartx, DMA_HandleTypeDef* hdma_usart_rx,  uint32_t baudrate)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	4b5a      	ldr	r3, [pc, #360]	; (8003578 <UARTx_DMA_Rx_Init+0x17c>)
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	4a59      	ldr	r2, [pc, #356]	; (8003578 <UARTx_DMA_Rx_Init+0x17c>)
 8003412:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003416:	6313      	str	r3, [r2, #48]	; 0x30
 8003418:	4b57      	ldr	r3, [pc, #348]	; (8003578 <UARTx_DMA_Rx_Init+0x17c>)
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	697b      	ldr	r3, [r7, #20]
	IRQn_Type nvic;
	uint32_t DMA_CHANNEL;

	if(hdma_usart_rx == &hdma_usart2_rx){
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	4a55      	ldr	r2, [pc, #340]	; (800357c <UARTx_DMA_Rx_Init+0x180>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d119      	bne.n	8003460 <UARTx_DMA_Rx_Init+0x64>

		nvic = DMA1_Stream5_IRQn;
 800342c:	2310      	movs	r3, #16
 800342e:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream5;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	4a53      	ldr	r2, [pc, #332]	; (8003580 <UARTx_DMA_Rx_Init+0x184>)
 8003434:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8003436:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800343a:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 800343c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003440:	2200      	movs	r2, #0
 8003442:	2105      	movs	r1, #5
 8003444:	4618      	mov	r0, r3
 8003446:	f00e f89b 	bl	8011580 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 800344a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800344e:	4618      	mov	r0, r3
 8003450:	f00e f8ce 	bl	80115f0 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003454:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003458:	4618      	mov	r0, r3
 800345a:	f00e f8ad 	bl	80115b8 <HAL_NVIC_EnableIRQ>
 800345e:	e058      	b.n	8003512 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_usart3_rx){
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4a48      	ldr	r2, [pc, #288]	; (8003584 <UARTx_DMA_Rx_Init+0x188>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d119      	bne.n	800349c <UARTx_DMA_Rx_Init+0xa0>

		nvic = DMA1_Stream1_IRQn;
 8003468:	230c      	movs	r3, #12
 800346a:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream1;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	4a46      	ldr	r2, [pc, #280]	; (8003588 <UARTx_DMA_Rx_Init+0x18c>)
 8003470:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8003472:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003476:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 8003478:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800347c:	2200      	movs	r2, #0
 800347e:	2104      	movs	r1, #4
 8003480:	4618      	mov	r0, r3
 8003482:	f00e f87d 	bl	8011580 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003486:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800348a:	4618      	mov	r0, r3
 800348c:	f00e f8b0 	bl	80115f0 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003490:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003494:	4618      	mov	r0, r3
 8003496:	f00e f88f 	bl	80115b8 <HAL_NVIC_EnableIRQ>
 800349a:	e03a      	b.n	8003512 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_uart4_rx){
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4a3b      	ldr	r2, [pc, #236]	; (800358c <UARTx_DMA_Rx_Init+0x190>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d119      	bne.n	80034d8 <UARTx_DMA_Rx_Init+0xdc>

		nvic = DMA1_Stream2_IRQn;
 80034a4:	230d      	movs	r3, #13
 80034a6:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream2;
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4a39      	ldr	r2, [pc, #228]	; (8003590 <UARTx_DMA_Rx_Init+0x194>)
 80034ac:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 80034ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034b2:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 80034b4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034b8:	2200      	movs	r2, #0
 80034ba:	2100      	movs	r1, #0
 80034bc:	4618      	mov	r0, r3
 80034be:	f00e f85f 	bl	8011580 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 80034c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f00e f892 	bl	80115f0 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 80034cc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f00e f871 	bl	80115b8 <HAL_NVIC_EnableIRQ>
 80034d6:	e01c      	b.n	8003512 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_uart5_rx){
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	4a2e      	ldr	r2, [pc, #184]	; (8003594 <UARTx_DMA_Rx_Init+0x198>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d118      	bne.n	8003512 <UARTx_DMA_Rx_Init+0x116>

		nvic = DMA1_Stream0_IRQn;
 80034e0:	230b      	movs	r3, #11
 80034e2:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream0;
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	4a2c      	ldr	r2, [pc, #176]	; (8003598 <UARTx_DMA_Rx_Init+0x19c>)
 80034e8:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 80034ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034ee:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 80034f0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034f4:	2200      	movs	r2, #0
 80034f6:	210e      	movs	r1, #14
 80034f8:	4618      	mov	r0, r3
 80034fa:	f00e f841 	bl	8011580 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 80034fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003502:	4618      	mov	r0, r3
 8003504:	f00e f874 	bl	80115f0 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003508:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800350c:	4618      	mov	r0, r3
 800350e:	f00e f853 	bl	80115b8 <HAL_NVIC_EnableIRQ>

	}

	UARTInit(huartx, baudrate, DISABLE);
 8003512:	2200      	movs	r2, #0
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f7ff fe68 	bl	80031ec <UARTInit>

	hdma_usart_rx->Init.Channel = DMA_CHANNEL;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	605a      	str	r2, [r3, #4]
	hdma_usart_rx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2200      	movs	r2, #0
 8003526:	609a      	str	r2, [r3, #8]
	hdma_usart_rx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2200      	movs	r2, #0
 800352c:	60da      	str	r2, [r3, #12]
	hdma_usart_rx->Init.MemInc = DMA_MINC_ENABLE;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003534:	611a      	str	r2, [r3, #16]
	hdma_usart_rx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2200      	movs	r2, #0
 800353a:	615a      	str	r2, [r3, #20]
	hdma_usart_rx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2200      	movs	r2, #0
 8003540:	619a      	str	r2, [r3, #24]
	hdma_usart_rx->Init.Mode = DMA_NORMAL;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2200      	movs	r2, #0
 8003546:	61da      	str	r2, [r3, #28]
	hdma_usart_rx->Init.Priority = DMA_PRIORITY_LOW;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2200      	movs	r2, #0
 800354c:	621a      	str	r2, [r3, #32]
	hdma_usart_rx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2200      	movs	r2, #0
 8003552:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DMA_Init(hdma_usart_rx) != HAL_OK)
 8003554:	68b8      	ldr	r0, [r7, #8]
 8003556:	f00e f859 	bl	801160c <HAL_DMA_Init>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <UARTx_DMA_Rx_Init+0x168>
	{
		Error_Handler();
 8003560:	f000 fff2 	bl	8004548 <Error_Handler>
	}

	__HAL_LINKDMA(huartx,hdmarx, *hdma_usart_rx);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	635a      	str	r2, [r3, #52]	; 0x34
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003570:	bf00      	nop
 8003572:	3720      	adds	r7, #32
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40023800 	.word	0x40023800
 800357c:	20005a80 	.word	0x20005a80
 8003580:	40026088 	.word	0x40026088
 8003584:	20005b64 	.word	0x20005b64
 8003588:	40026028 	.word	0x40026028
 800358c:	20005a20 	.word	0x20005a20
 8003590:	40026040 	.word	0x40026040
 8003594:	200060b8 	.word	0x200060b8
 8003598:	40026010 	.word	0x40026010

0800359c <USART1_IRQHandler>:
void UARTPrintString_IT(UART_HandleTypeDef* huartx, char s[]){
	if(HAL_UART_GetState(huartx) == HAL_UART_STATE_READY)
		HAL_UART_Transmit_IT(huartx, (uint8_t *)s, strlen(s));
}

void  USART1_IRQHandler(void){
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0


	HAL_UART_IRQHandler(&huart1);
 80035a0:	4802      	ldr	r0, [pc, #8]	; (80035ac <USART1_IRQHandler+0x10>)
 80035a2:	f012 fe53 	bl	801624c <HAL_UART_IRQHandler>
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20005e0c 	.word	0x20005e0c

080035b0 <USART2_IRQHandler>:

void  USART2_IRQHandler(void){
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart2);
 80035b4:	4802      	ldr	r0, [pc, #8]	; (80035c0 <USART2_IRQHandler+0x10>)
 80035b6:	f012 fe49 	bl	801624c <HAL_UART_IRQHandler>
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20006078 	.word	0x20006078

080035c4 <USART3_IRQHandler>:

void  USART3_IRQHandler(void){
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart3);
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <USART3_IRQHandler+0x10>)
 80035ca:	f012 fe3f 	bl	801624c <HAL_UART_IRQHandler>
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20005bc4 	.word	0x20005bc4

080035d8 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart4);
 80035dc:	4802      	ldr	r0, [pc, #8]	; (80035e8 <UART4_IRQHandler+0x10>)
 80035de:	f012 fe35 	bl	801624c <HAL_UART_IRQHandler>
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20005ff8 	.word	0x20005ff8

080035ec <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart5);
 80035f0:	4802      	ldr	r0, [pc, #8]	; (80035fc <UART5_IRQHandler+0x10>)
 80035f2:	f012 fe2b 	bl	801624c <HAL_UART_IRQHandler>
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20005d2c 	.word	0x20005d2c

08003600 <USART6_IRQHandler>:

void  USART6_IRQHandler(void){
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart6);
 8003604:	4802      	ldr	r0, [pc, #8]	; (8003610 <USART6_IRQHandler+0x10>)
 8003606:	f012 fe21 	bl	801624c <HAL_UART_IRQHandler>
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20005fb4 	.word	0x20005fb4

08003614 <CANxInit>:
 * Function Return		: CAN_InitStatus				Constant indicates initialization succeed which will be
  *        											    CAN_InitStatus_Failed or CAN_InitStatus_Success.
 * Function Example		: CAN1_Init(&hcan1,4,CAN_Filter_FIFO0,0,0,13,1,1);
 */
void CANxInit(CAN_HandleTypeDef* hcanx,uint16_t prescaler,uint32_t FilterFIFOAssignment,uint16_t CAN_FilterId_11bits,
		uint16_t CAN_FilterMaskId_11bits,uint8_t CAN_FilterNumber, uint8_t rate){
 8003614:	b580      	push	{r7, lr}
 8003616:	b08e      	sub	sp, #56	; 0x38
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	607a      	str	r2, [r7, #4]
 800361e:	461a      	mov	r2, r3
 8003620:	460b      	mov	r3, r1
 8003622:	817b      	strh	r3, [r7, #10]
 8003624:	4613      	mov	r3, r2
 8003626:	813b      	strh	r3, [r7, #8]

	CAN_FilterTypeDef sFilterConfig = {0};
 8003628:	f107 0310 	add.w	r3, r7, #16
 800362c:	2228      	movs	r2, #40	; 0x28
 800362e:	2100      	movs	r1, #0
 8003630:	4618      	mov	r0, r3
 8003632:	f016 fb03 	bl	8019c3c <memset>

	if(hcanx == &hcan1){
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4a53      	ldr	r2, [pc, #332]	; (8003788 <CANxInit+0x174>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d103      	bne.n	8003646 <CANxInit+0x32>
		hcanx->Instance = CAN1;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4a52      	ldr	r2, [pc, #328]	; (800378c <CANxInit+0x178>)
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	e002      	b.n	800364c <CANxInit+0x38>
	}else{
		hcanx->Instance = CAN2;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a51      	ldr	r2, [pc, #324]	; (8003790 <CANxInit+0x17c>)
 800364a:	601a      	str	r2, [r3, #0]
	}


	hcanx->Init.Prescaler = prescaler;
 800364c:	897a      	ldrh	r2, [r7, #10]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	605a      	str	r2, [r3, #4]
	hcanx->Init.Mode = CAN_MODE_NORMAL;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	609a      	str	r2, [r3, #8]

	hcanx->Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	60da      	str	r2, [r3, #12]
	if(rate == CAN_1MHz){
 800365e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003662:	2b01      	cmp	r3, #1
 8003664:	d108      	bne.n	8003678 <CANxInit+0x64>
		//sampling point 85.71%
		hcanx->Init.TimeSeg1 = CAN_BS1_11TQ;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800366c:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_2TQ;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003674:	615a      	str	r2, [r3, #20]
 8003676:	e00b      	b.n	8003690 <CANxInit+0x7c>
	}else if(rate == CAN_500KHz){
 8003678:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800367c:	2b00      	cmp	r3, #0
 800367e:	d107      	bne.n	8003690 <CANxInit+0x7c>
		//sampling point 71.42%
		hcanx->Init.TimeSeg1 = CAN_BS1_14TQ;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8003686:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_6TQ;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 800368e:	615a      	str	r2, [r3, #20]
	}
	hcanx->Init.TimeTriggeredMode = DISABLE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	761a      	strb	r2, [r3, #24]
	hcanx->Init.AutoBusOff = ENABLE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	765a      	strb	r2, [r3, #25]
	hcanx->Init.AutoWakeUp = DISABLE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	769a      	strb	r2, [r3, #26]
	hcanx->Init.AutoRetransmission = DISABLE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	76da      	strb	r2, [r3, #27]
	hcanx->Init.ReceiveFifoLocked = DISABLE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	771a      	strb	r2, [r3, #28]
	hcanx->Init.TransmitFifoPriority = DISABLE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(hcanx) != HAL_OK)
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f00c ffdb 	bl	8010670 <HAL_CAN_Init>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <CANxInit+0xb0>
	{
		Error_Handler();
 80036c0:	f000 ff42 	bl	8004548 <Error_Handler>
	}

	sFilterConfig.SlaveStartFilterBank = 14;
 80036c4:	230e      	movs	r3, #14
 80036c6:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80036c8:	2301      	movs	r3, #1
 80036ca:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment=FilterFIFOAssignment; //set fifo assignment
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh= CAN_FilterId_11bits <<5; //the ID that the filter looks for (switch this for the other microcontroller)
 80036d4:	893b      	ldrh	r3, [r7, #8]
 80036d6:	015b      	lsls	r3, r3, #5
 80036d8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow=0;
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh=CAN_FilterMaskId_11bits <<5;
 80036de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80036e2:	015b      	lsls	r3, r3, #5
 80036e4:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow=0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 80036ea:	2301      	movs	r3, #1
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterBank = CAN_FilterNumber;
 80036ee:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(hcanx, &sFilterConfig);
 80036f4:	f107 0310 	add.w	r3, r7, #16
 80036f8:	4619      	mov	r1, r3
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f00d f8b4 	bl	8010868 <HAL_CAN_ConfigFilter>



	if(hcanx == &hcan1){
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4a21      	ldr	r2, [pc, #132]	; (8003788 <CANxInit+0x174>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d11c      	bne.n	8003742 <CANxInit+0x12e>

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10c      	bne.n	8003728 <CANxInit+0x114>
			/* CAN1_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX0_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 800370e:	2200      	movs	r2, #0
 8003710:	2101      	movs	r1, #1
 8003712:	2014      	movs	r0, #20
 8003714:	f00d ff34 	bl	8011580 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003718:	2014      	movs	r0, #20
 800371a:	f00d ff4d 	bl	80115b8 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 800371e:	2102      	movs	r1, #2
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f00d fbe7 	bl	8010ef4 <HAL_CAN_ActivateNotification>
 8003726:	e028      	b.n	800377a <CANxInit+0x166>

		}else{
			/* CAN1_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX1_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 8003728:	2200      	movs	r2, #0
 800372a:	2101      	movs	r1, #1
 800372c:	2015      	movs	r0, #21
 800372e:	f00d ff27 	bl	8011580 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003732:	2015      	movs	r0, #21
 8003734:	f00d ff40 	bl	80115b8 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003738:	2110      	movs	r1, #16
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f00d fbda 	bl	8010ef4 <HAL_CAN_ActivateNotification>
 8003740:	e01b      	b.n	800377a <CANxInit+0x166>
		}
	}else{

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10c      	bne.n	8003762 <CANxInit+0x14e>
			/* CAN2_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX0_IRQn, CAN2_FIFO0_IRQ_PRIO, 0);
 8003748:	2200      	movs	r2, #0
 800374a:	2101      	movs	r1, #1
 800374c:	2040      	movs	r0, #64	; 0x40
 800374e:	f00d ff17 	bl	8011580 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003752:	2040      	movs	r0, #64	; 0x40
 8003754:	f00d ff30 	bl	80115b8 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003758:	2102      	movs	r1, #2
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f00d fbca 	bl	8010ef4 <HAL_CAN_ActivateNotification>
 8003760:	e00b      	b.n	800377a <CANxInit+0x166>
		}else{
			/* CAN2_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX1_IRQn, CAN2_FIFO1_IRQ_PRIO, 0);
 8003762:	2200      	movs	r2, #0
 8003764:	2102      	movs	r1, #2
 8003766:	2041      	movs	r0, #65	; 0x41
 8003768:	f00d ff0a 	bl	8011580 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800376c:	2041      	movs	r0, #65	; 0x41
 800376e:	f00d ff23 	bl	80115b8 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003772:	2110      	movs	r1, #16
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f00d fbbd 	bl	8010ef4 <HAL_CAN_ActivateNotification>
		}
	}

	HAL_CAN_Start(hcanx);
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f00d f954 	bl	8010a28 <HAL_CAN_Start>

}
 8003780:	bf00      	nop
 8003782:	3738      	adds	r7, #56	; 0x38
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	20009f30 	.word	0x20009f30
 800378c:	40006400 	.word	0x40006400
 8003790:	40006800 	.word	0x40006800

08003794 <CAN_TxMsg>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsg(CAN_HandleTypeDef* hcanx,uint32_t StdId_11bits,uint8_t *Msg,uint8_t len)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b090      	sub	sp, #64	; 0x40
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	70fb      	strb	r3, [r7, #3]
//	sys.rns_busy = 1;
	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 80037a2:	bf00      	nop
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f00d fa5e 	bl	8010c66 <HAL_CAN_GetTxMailboxesFreeLevel>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f9      	beq.n	80037a4 <CAN_TxMsg+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 80037b4:	2300      	movs	r3, #0
 80037b6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=StdId_11bits;					 // standard identifier=0
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=0;					 // extended identifier=StdId
 80037c0:	2300      	movs	r3, #0
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Standard;			 // type of identifier for the message is Standard
 80037c4:	2300      	movs	r3, #0
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 80037c8:	2300      	movs	r3, #0
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 80037cc:	2300      	movs	r3, #0
 80037ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 80037d2:	e00c      	b.n	80037ee <CAN_TxMsg+0x5a>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 80037d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80037dc:	1c51      	adds	r1, r2, #1
 80037de:	8779      	strh	r1, [r7, #58]	; 0x3a
 80037e0:	4611      	mov	r1, r2
 80037e2:	781a      	ldrb	r2, [r3, #0]
 80037e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037e8:	440b      	add	r3, r1
 80037ea:	f803 2c2c 	strb.w	r2, [r3, #-44]
	while(datalen--)
 80037ee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80037f0:	1e5a      	subs	r2, r3, #1
 80037f2:	873a      	strh	r2, [r7, #56]	; 0x38
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1ed      	bne.n	80037d4 <CAN_TxMsg+0x40>
//			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
//				Error_Handler();
//			}
//		}
	}
	if(i>0){
 80037f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00f      	beq.n	800381e <CAN_TxMsg+0x8a>
		TxMessage.DLC = i;
 80037fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003800:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 8003802:	f107 031c 	add.w	r3, r7, #28
 8003806:	f107 0214 	add.w	r2, r7, #20
 800380a:	f107 0120 	add.w	r1, r7, #32
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f00d f94e 	bl	8010ab0 <HAL_CAN_AddTxMessage>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <CAN_TxMsg+0x8a>
			Error_Handler();
 800381a:	f000 fe95 	bl	8004548 <Error_Handler>
		}

	}
//	sys.rns_busy = 0;

	return(canMailbox);
 800381e:	69fb      	ldr	r3, [r7, #28]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3740      	adds	r7, #64	; 0x40
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <CAN_TxMsgEID>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsgEID(CAN_HandleTypeDef* hcanx,uint32_t EID,uint8_t *Msg,uint8_t len)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b090      	sub	sp, #64	; 0x40
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	70fb      	strb	r3, [r7, #3]


	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 8003836:	bf00      	nop
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f00d fa14 	bl	8010c66 <HAL_CAN_GetTxMailboxesFreeLevel>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f9      	beq.n	8003838 <CAN_TxMsgEID+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 8003848:	2300      	movs	r3, #0
 800384a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=0;					 // standard identifier=0
 8003850:	2300      	movs	r3, #0
 8003852:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=EID;					 // extended identifier=StdId
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Extended;			 // type of identifier for the message is Standard
 8003858:	2304      	movs	r3, #4
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 800385c:	2300      	movs	r3, #0
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 8003860:	2300      	movs	r3, #0
 8003862:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 8003866:	e01f      	b.n	80038a8 <CAN_TxMsgEID+0x80>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 8003868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800386e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003870:	1c51      	adds	r1, r2, #1
 8003872:	8779      	strh	r1, [r7, #58]	; 0x3a
 8003874:	4611      	mov	r1, r2
 8003876:	781a      	ldrb	r2, [r3, #0]
 8003878:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800387c:	440b      	add	r3, r1
 800387e:	f803 2c2c 	strb.w	r2, [r3, #-44]
		if(i == 8){
 8003882:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003884:	2b08      	cmp	r3, #8
 8003886:	d10f      	bne.n	80038a8 <CAN_TxMsgEID+0x80>
			TxMessage.DLC=8;
 8003888:	2308      	movs	r3, #8
 800388a:	633b      	str	r3, [r7, #48]	; 0x30
			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 800388c:	f107 031c 	add.w	r3, r7, #28
 8003890:	f107 0214 	add.w	r2, r7, #20
 8003894:	f107 0120 	add.w	r1, r7, #32
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f00d f909 	bl	8010ab0 <HAL_CAN_AddTxMessage>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <CAN_TxMsgEID+0x80>
				Error_Handler();
 80038a4:	f000 fe50 	bl	8004548 <Error_Handler>
	while(datalen--)
 80038a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80038aa:	1e5a      	subs	r2, r3, #1
 80038ac:	873a      	strh	r2, [r7, #56]	; 0x38
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1da      	bne.n	8003868 <CAN_TxMsgEID+0x40>
			}
		}
	}
	if(i>0){
 80038b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00f      	beq.n	80038d8 <CAN_TxMsgEID+0xb0>
		TxMessage.DLC = i;
 80038b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80038ba:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 80038bc:	f107 031c 	add.w	r3, r7, #28
 80038c0:	f107 0214 	add.w	r2, r7, #20
 80038c4:	f107 0120 	add.w	r1, r7, #32
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f00d f8f1 	bl	8010ab0 <HAL_CAN_AddTxMessage>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <CAN_TxMsgEID+0xb0>
			Error_Handler();
 80038d4:	f000 fe38 	bl	8004548 <Error_Handler>
		}

	}

	return(canMailbox);
 80038d8:	69fb      	ldr	r3, [r7, #28]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3740      	adds	r7, #64	; 0x40
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <FH_CheckCAN>:
 * Function Arguments	: 	*fh	, pointer to structure FaulHaber_t
 * 							dat	, data received by CAN
 * Function Return		: 	0(FaulHaber ID found) or 1(not from FaulHaber)
 * Function Example		: 	FH_CheckCAN(&fh1, temp);
 */
uint8_t FH_CheckCAN(FaulHaber_t *fh, uint8_t dat[8]){
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
	uint32_t id;
	if(fh->hcanx==&hcan1){
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	4a6a      	ldr	r2, [pc, #424]	; (8003a9c <FH_CheckCAN+0x1b8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d103      	bne.n	8003900 <FH_CheckCAN+0x1c>
		id=CAN1RxMessage.StdId;
 80038f8:	4b69      	ldr	r3, [pc, #420]	; (8003aa0 <FH_CheckCAN+0x1bc>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	e002      	b.n	8003906 <FH_CheckCAN+0x22>
	}else{
		id=CAN2RxMessage.StdId;
 8003900:	4b68      	ldr	r3, [pc, #416]	; (8003aa4 <FH_CheckCAN+0x1c0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60fb      	str	r3, [r7, #12]
	}

	if((id - fh->nodeID) & 0b00001111111)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	791b      	ldrb	r3, [r3, #4]
 800390a:	461a      	mov	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <FH_CheckCAN+0x38>
		return 1;
 8003918:	2301      	movs	r3, #1
 800391a:	e0b8      	b.n	8003a8e <FH_CheckCAN+0x1aa>
	switch((id)>>7){
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	09db      	lsrs	r3, r3, #7
 8003920:	2b0e      	cmp	r3, #14
 8003922:	d821      	bhi.n	8003968 <FH_CheckCAN+0x84>
 8003924:	2b03      	cmp	r3, #3
 8003926:	f0c0 80b1 	bcc.w	8003a8c <FH_CheckCAN+0x1a8>
 800392a:	3b03      	subs	r3, #3
 800392c:	2b0b      	cmp	r3, #11
 800392e:	f200 80ad 	bhi.w	8003a8c <FH_CheckCAN+0x1a8>
 8003932:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <FH_CheckCAN+0x54>)
 8003934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003938:	08003977 	.word	0x08003977
 800393c:	08003a8d 	.word	0x08003a8d
 8003940:	080039dd 	.word	0x080039dd
 8003944:	08003a8d 	.word	0x08003a8d
 8003948:	08003a09 	.word	0x08003a09
 800394c:	08003a8d 	.word	0x08003a8d
 8003950:	08003a27 	.word	0x08003a27
 8003954:	08003a8d 	.word	0x08003a8d
 8003958:	08003a45 	.word	0x08003a45
 800395c:	08003a8d 	.word	0x08003a8d
 8003960:	08003a8d 	.word	0x08003a8d
 8003964:	0800396f 	.word	0x0800396f
 8003968:	2b80      	cmp	r3, #128	; 0x80
 800396a:	d002      	beq.n	8003972 <FH_CheckCAN+0x8e>
 800396c:	e08e      	b.n	8003a8c <FH_CheckCAN+0x1a8>

		case 0b1110:		//boot up messege
			return 0;
 800396e:	2300      	movs	r3, #0
 8003970:	e08d      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case 0x80:		//error messege
			return 0;
 8003972:	2300      	movs	r3, #0
 8003974:	e08b      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO1Tx:		//PDO1/statusword
			fh->target=(dat[1]>>2) & 0b01;		//target reached bit in PP mode
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	3301      	adds	r3, #1
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	089b      	lsrs	r3, r3, #2
 800397e:	b2db      	uxtb	r3, r3
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	b2d9      	uxtb	r1, r3
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800398c:	f361 1304 	bfi	r3, r1, #4, #1
 8003990:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			if(dat[0] & 0b01000000)				//switch on disabled bit
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	d007      	beq.n	80039b0 <FH_CheckCAN+0xcc>
				fh->PDOInit=1;
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039a6:	f043 0304 	orr.w	r3, r3, #4
 80039aa:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80039ae:	e00c      	b.n	80039ca <FH_CheckCAN+0xe6>
			else if(dat[0] & 0b00000100)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d006      	beq.n	80039ca <FH_CheckCAN+0xe6>
				fh->start=1;
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039c2:	f043 0320 	orr.w	r3, r3, #32
 80039c6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			fh->waiting=0;
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039d0:	f36f 0341 	bfc	r3, #1, #1
 80039d4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	e058      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO2Tx:		//PDO2/position
			memcpy(fh->rx_buff, &dat[2], 4);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3324      	adds	r3, #36	; 0x24
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	3202      	adds	r2, #2
 80039e4:	6812      	ldr	r2, [r2, #0]
 80039e6:	601a      	str	r2, [r3, #0]
			fh->rx-=fh->offset;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	1ad2      	subs	r2, r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	625a      	str	r2, [r3, #36]	; 0x24
			fh->waiting=0;
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039fc:	f36f 0341 	bfc	r3, #1, #1
 8003a00:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e042      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO3Tx:		//PDO3/velocity
			memcpy(fh->rx_buff, &dat[2], 4);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3324      	adds	r3, #36	; 0x24
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	3202      	adds	r2, #2
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	601a      	str	r2, [r3, #0]
			fh->waiting=0;
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003a1a:	f36f 0341 	bfc	r3, #1, #1
 8003a1e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e033      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO4Tx:		//PDO4/torque
			memcpy(fh->rx_buff, &dat[2], 4);//not sure if need to convert to int16, because datasheet says type is S16, not S32
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3324      	adds	r3, #36	; 0x24
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	3202      	adds	r2, #2
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	601a      	str	r2, [r3, #0]
			fh->waiting=0;
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003a38:	f36f 0341 	bfc	r3, #1, #1
 8003a3c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	e024      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case SDOTx:		//SDO
			if((dat[0]=0x60)&&(dat[1]==fh->conf[0])&&(dat[2]==fh->conf[1])&&(dat[3]==fh->conf[2]))
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2260      	movs	r2, #96	; 0x60
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	781a      	ldrb	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d116      	bne.n	8003a88 <FH_CheckCAN+0x1a4>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	3302      	adds	r3, #2
 8003a5e:	781a      	ldrb	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d10e      	bne.n	8003a88 <FH_CheckCAN+0x1a4>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	3303      	adds	r3, #3
 8003a6e:	781a      	ldrb	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d106      	bne.n	8003a88 <FH_CheckCAN+0x1a4>
				fh->waiting=0;
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003a80:	f36f 0341 	bfc	r3, #1, #1
 8003a84:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e000      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		default :
			return 1;
 8003a8c:	2301      	movs	r3, #1
			break;
	}
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	20009f30 	.word	0x20009f30
 8003aa0:	2000a4f0 	.word	0x2000a4f0
 8003aa4:	20006ab8 	.word	0x20006ab8

08003aa8 <FaulHaber_Handler>:
 * 							the CAN data is from FaulHaber or not
 * Function Arguments	: 	dat	, data received by CAN
 * Function Return		: 	None
 * Function Example		: 	FaulHaber_Handler(aData);
 */
void FaulHaber_Handler(uint8_t dat[8]){
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	led2 = 1;
 8003ab0:	4a11      	ldr	r2, [pc, #68]	; (8003af8 <FaulHaber_Handler+0x50>)
 8003ab2:	7853      	ldrb	r3, [r2, #1]
 8003ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ab8:	7053      	strb	r3, [r2, #1]
	uint8_t bflag=1, ad=0;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	73bb      	strb	r3, [r7, #14]
	while(bflag && pfh[ad]!=0)
 8003ac2:	e00c      	b.n	8003ade <FaulHaber_Handler+0x36>
		bflag=FH_CheckCAN(pfh[ad++], dat);
 8003ac4:	7bbb      	ldrb	r3, [r7, #14]
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	73ba      	strb	r2, [r7, #14]
 8003aca:	461a      	mov	r2, r3
 8003acc:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <FaulHaber_Handler+0x54>)
 8003ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff ff05 	bl	80038e4 <FH_CheckCAN>
 8003ada:	4603      	mov	r3, r0
 8003adc:	73fb      	strb	r3, [r7, #15]
	while(bflag && pfh[ad]!=0)
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <FaulHaber_Handler+0x48>
 8003ae4:	7bbb      	ldrb	r3, [r7, #14]
 8003ae6:	4a05      	ldr	r2, [pc, #20]	; (8003afc <FaulHaber_Handler+0x54>)
 8003ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1e9      	bne.n	8003ac4 <FaulHaber_Handler+0x1c>

}
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40020814 	.word	0x40020814
 8003afc:	20006a24 	.word	0x20006a24

08003b00 <I2CxInit>:
 * 						  InterruptEnable				interrupt enable for I2C can be ENABLE or DISABLE
 * Function Return		: NONE
 * Function Example		: I2CxInit (&hi2c1,main_board_1, CLOCK_SPEED_400KHz,ENABLE);
 */
void I2CxInit(I2C_HandleTypeDef* hi2cx,uint8_t OwnAddress,uint32_t ClockSpeed,int InterruptEnable)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	607a      	str	r2, [r7, #4]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	72fb      	strb	r3, [r7, #11]

	IRQn_Type nvicER = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	75fb      	strb	r3, [r7, #23]
	IRQn_Type nvicEV = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	75bb      	strb	r3, [r7, #22]

	if(hi2cx == &hi2c1){
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4a4d      	ldr	r2, [pc, #308]	; (8003c50 <I2CxInit+0x150>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d107      	bne.n	8003b30 <I2CxInit+0x30>
		hi2cx->Instance = I2C1;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4a4c      	ldr	r2, [pc, #304]	; (8003c54 <I2CxInit+0x154>)
 8003b24:	601a      	str	r2, [r3, #0]
		nvicER = I2C1_ER_IRQn;
 8003b26:	2320      	movs	r3, #32
 8003b28:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C1_EV_IRQn;
 8003b2a:	231f      	movs	r3, #31
 8003b2c:	75bb      	strb	r3, [r7, #22]
 8003b2e:	e012      	b.n	8003b56 <I2CxInit+0x56>
	}else if(hi2cx == &hi2c2){
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4a49      	ldr	r2, [pc, #292]	; (8003c58 <I2CxInit+0x158>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d107      	bne.n	8003b48 <I2CxInit+0x48>
		hi2cx->Instance = I2C2;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4a48      	ldr	r2, [pc, #288]	; (8003c5c <I2CxInit+0x15c>)
 8003b3c:	601a      	str	r2, [r3, #0]
		nvicER = I2C2_ER_IRQn;
 8003b3e:	2322      	movs	r3, #34	; 0x22
 8003b40:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C2_EV_IRQn;
 8003b42:	2321      	movs	r3, #33	; 0x21
 8003b44:	75bb      	strb	r3, [r7, #22]
 8003b46:	e006      	b.n	8003b56 <I2CxInit+0x56>
	}else{
		hi2cx->Instance = I2C3;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4a45      	ldr	r2, [pc, #276]	; (8003c60 <I2CxInit+0x160>)
 8003b4c:	601a      	str	r2, [r3, #0]
		nvicER = I2C3_ER_IRQn;
 8003b4e:	2349      	movs	r3, #73	; 0x49
 8003b50:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C3_EV_IRQn;
 8003b52:	2348      	movs	r3, #72	; 0x48
 8003b54:	75bb      	strb	r3, [r7, #22]
	}

	hi2cx->Init.ClockSpeed = ClockSpeed;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	605a      	str	r2, [r3, #4]
	hi2cx->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	609a      	str	r2, [r3, #8]
	hi2cx->Init.OwnAddress1 = OwnAddress<<1;
 8003b62:	7afb      	ldrb	r3, [r7, #11]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	461a      	mov	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	60da      	str	r2, [r3, #12]
	hi2cx->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b72:	611a      	str	r2, [r3, #16]
	hi2cx->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	615a      	str	r2, [r3, #20]
	hi2cx->Init.OwnAddress2 = 0;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	619a      	str	r2, [r3, #24]
	hi2cx->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	61da      	str	r2, [r3, #28]
	hi2cx->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	621a      	str	r2, [r3, #32]



	if(InterruptEnable){
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d051      	beq.n	8003c36 <I2CxInit+0x136>
		if(hi2cx == &hi2c1){
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4a2e      	ldr	r2, [pc, #184]	; (8003c50 <I2CxInit+0x150>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d118      	bne.n	8003bcc <I2CxInit+0xcc>
			HAL_NVIC_SetPriority(nvicER, I2C1_ER_IRQ_PRIO, 0);
 8003b9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f00d fcec 	bl	8011580 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 8003ba8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f00d fd03 	bl	80115b8 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C1_EV_IRQ_PRIO, 0);
 8003bb2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f00d fce0 	bl	8011580 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 8003bc0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f00d fcf7 	bl	80115b8 <HAL_NVIC_EnableIRQ>
 8003bca:	e034      	b.n	8003c36 <I2CxInit+0x136>
		}else if(hi2cx == &hi2c2){
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4a22      	ldr	r2, [pc, #136]	; (8003c58 <I2CxInit+0x158>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d118      	bne.n	8003c06 <I2CxInit+0x106>
			HAL_NVIC_SetPriority(nvicER, I2C2_ER_IRQ_PRIO, 0);
 8003bd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	210e      	movs	r1, #14
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f00d fccf 	bl	8011580 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 8003be2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f00d fce6 	bl	80115b8 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C2_EV_IRQ_PRIO, 0);
 8003bec:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	210e      	movs	r1, #14
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f00d fcc3 	bl	8011580 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 8003bfa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f00d fcda 	bl	80115b8 <HAL_NVIC_EnableIRQ>
 8003c04:	e017      	b.n	8003c36 <I2CxInit+0x136>
		}else{
			HAL_NVIC_SetPriority(nvicER, I2C3_ER_IRQ_PRIO, 0);
 8003c06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	210e      	movs	r1, #14
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f00d fcb6 	bl	8011580 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 8003c14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f00d fccd 	bl	80115b8 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C3_EV_IRQ_PRIO, 0);
 8003c1e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c22:	2200      	movs	r2, #0
 8003c24:	210e      	movs	r1, #14
 8003c26:	4618      	mov	r0, r3
 8003c28:	f00d fcaa 	bl	8011580 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 8003c2c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f00d fcc1 	bl	80115b8 <HAL_NVIC_EnableIRQ>
		}
	}


	if (HAL_I2C_Init(hi2cx) != HAL_OK)
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f00e fbbc 	bl	80123b4 <HAL_I2C_Init>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <I2CxInit+0x146>
	{
		Error_Handler();
 8003c42:	f000 fc81 	bl	8004548 <Error_Handler>
	}

}
 8003c46:	bf00      	nop
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20006b88 	.word	0x20006b88
 8003c54:	40005400 	.word	0x40005400
 8003c58:	20006be4 	.word	0x20006be4
 8003c5c:	40005800 	.word	0x40005800
 8003c60:	40005c00 	.word	0x40005c00

08003c64 <I2CX_DMA_RX_Init>:
 * 						  ClockSpeed					Speed of transmission can be CLOCK_SPEED_100KHz or CLOCK_SPEED_400KHz
 * Function Return		: NONE
 * Function Example		: I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 *
 */
void I2CX_DMA_RX_Init(I2C_HandleTypeDef *hi2cx,DMA_HandleTypeDef* hdma_i2cx,uint8_t OwnAddress,uint32_t ClockSpeed){
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	4613      	mov	r3, r2
 8003c72:	71fb      	strb	r3, [r7, #7]

	IRQn_Type nvic,nvicER,nvicEV;
	uint32_t DMA_CHANNEL;
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	4b9e      	ldr	r3, [pc, #632]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7c:	4a9d      	ldr	r2, [pc, #628]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003c7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c82:	6313      	str	r3, [r2, #48]	; 0x30
 8003c84:	4b9b      	ldr	r3, [pc, #620]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	697b      	ldr	r3, [r7, #20]
	if(hi2cx == &hi2c1){
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4a99      	ldr	r2, [pc, #612]	; (8003ef8 <I2CX_DMA_RX_Init+0x294>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d11d      	bne.n	8003cd4 <I2CX_DMA_RX_Init+0x70>

		hi2cx->Instance = I2C1;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4a98      	ldr	r2, [pc, #608]	; (8003efc <I2CX_DMA_RX_Init+0x298>)
 8003c9c:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream0;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	4a97      	ldr	r2, [pc, #604]	; (8003f00 <I2CX_DMA_RX_Init+0x29c>)
 8003ca2:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_1;
 8003ca4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ca8:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream0_IRQn;
 8003caa:	230b      	movs	r3, #11
 8003cac:	77fb      	strb	r3, [r7, #31]

		nvicER = I2C1_ER_IRQn;
 8003cae:	2320      	movs	r3, #32
 8003cb0:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C1_EV_IRQn;
 8003cb2:	231f      	movs	r3, #31
 8003cb4:	777b      	strb	r3, [r7, #29]
		__HAL_RCC_DMA1_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	4b8e      	ldr	r3, [pc, #568]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	4a8d      	ldr	r2, [pc, #564]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003cc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc6:	4b8b      	ldr	r3, [pc, #556]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	e022      	b.n	8003d1a <I2CX_DMA_RX_Init+0xb6>
	}else if(hi2cx == &hi2c2){
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4a8b      	ldr	r2, [pc, #556]	; (8003f04 <I2CX_DMA_RX_Init+0x2a0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d10f      	bne.n	8003cfc <I2CX_DMA_RX_Init+0x98>

		hi2cx->Instance = I2C2;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4a8a      	ldr	r2, [pc, #552]	; (8003f08 <I2CX_DMA_RX_Init+0x2a4>)
 8003ce0:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream3;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4a89      	ldr	r2, [pc, #548]	; (8003f0c <I2CX_DMA_RX_Init+0x2a8>)
 8003ce6:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_7;
 8003ce8:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8003cec:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream3_IRQn;
 8003cee:	230e      	movs	r3, #14
 8003cf0:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C2_ER_IRQn;
 8003cf2:	2322      	movs	r3, #34	; 0x22
 8003cf4:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C2_EV_IRQn;
 8003cf6:	2321      	movs	r3, #33	; 0x21
 8003cf8:	777b      	strb	r3, [r7, #29]
 8003cfa:	e00e      	b.n	8003d1a <I2CX_DMA_RX_Init+0xb6>

	}else{
		hi2cx->Instance = I2C3;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4a84      	ldr	r2, [pc, #528]	; (8003f10 <I2CX_DMA_RX_Init+0x2ac>)
 8003d00:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream2;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	4a83      	ldr	r2, [pc, #524]	; (8003f14 <I2CX_DMA_RX_Init+0x2b0>)
 8003d06:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_3;
 8003d08:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8003d0c:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream2_IRQn;
 8003d0e:	230d      	movs	r3, #13
 8003d10:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C3_ER_IRQn;
 8003d12:	2349      	movs	r3, #73	; 0x49
 8003d14:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C3_EV_IRQn;
 8003d16:	2348      	movs	r3, #72	; 0x48
 8003d18:	777b      	strb	r3, [r7, #29]
	}

	hdma_i2cx->Init.Channel = DMA_CHANNEL;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	605a      	str	r2, [r3, #4]
	hdma_i2cx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2200      	movs	r2, #0
 8003d24:	609a      	str	r2, [r3, #8]
	hdma_i2cx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	60da      	str	r2, [r3, #12]
	hdma_i2cx->Init.MemInc = DMA_MINC_ENABLE;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d32:	611a      	str	r2, [r3, #16]
	hdma_i2cx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2200      	movs	r2, #0
 8003d38:	615a      	str	r2, [r3, #20]
	hdma_i2cx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	619a      	str	r2, [r3, #24]
	hdma_i2cx->Init.Mode = DMA_NORMAL;
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2200      	movs	r2, #0
 8003d44:	61da      	str	r2, [r3, #28]
	hdma_i2cx->Init.Priority = DMA_PRIORITY_HIGH;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d4c:	621a      	str	r2, [r3, #32]
	hdma_i2cx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2200      	movs	r2, #0
 8003d52:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_i2cx->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2203      	movs	r2, #3
 8003d58:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_i2cx->Init.MemBurst = DMA_MBURST_INC4;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003d60:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_i2cx->Init.PeriphBurst = DMA_PBURST_INC4;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003d68:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(hdma_i2cx) != HAL_OK)
 8003d6a:	68b8      	ldr	r0, [r7, #8]
 8003d6c:	f00d fc4e 	bl	801160c <HAL_DMA_Init>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <I2CX_DMA_RX_Init+0x116>
	{

		Error_Handler();
 8003d76:	f000 fbe7 	bl	8004548 <Error_Handler>

	}
	__HAL_LINKDMA(hi2cx,hdmarx,*hdma_i2cx);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	639a      	str	r2, [r3, #56]	; 0x38
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	639a      	str	r2, [r3, #56]	; 0x38

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */

	//	__HAL_DMA_ENABLE_IT(hdma_i2cx,DMA_IT_TC);
	if(hi2cx == &hi2c1){
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4a5b      	ldr	r2, [pc, #364]	; (8003ef8 <I2CX_DMA_RX_Init+0x294>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d111      	bne.n	8003db2 <I2CX_DMA_RX_Init+0x14e>
		HAL_NVIC_SetPriority(nvic, DMA1_Str0__IRQ_PRIO, 0);
 8003d8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d92:	2200      	movs	r2, #0
 8003d94:	210a      	movs	r1, #10
 8003d96:	4618      	mov	r0, r3
 8003d98:	f00d fbf2 	bl	8011580 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003d9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f00d fc25 	bl	80115f0 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003da6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f00d fc04 	bl	80115b8 <HAL_NVIC_EnableIRQ>
 8003db0:	e026      	b.n	8003e00 <I2CX_DMA_RX_Init+0x19c>
	}else if(hi2cx == &hi2c2){
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4a53      	ldr	r2, [pc, #332]	; (8003f04 <I2CX_DMA_RX_Init+0x2a0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d111      	bne.n	8003dde <I2CX_DMA_RX_Init+0x17a>
		HAL_NVIC_SetPriority(nvic, DMA1_Str3__IRQ_PRIO, 0);
 8003dba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	210e      	movs	r1, #14
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f00d fbdc 	bl	8011580 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003dc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f00d fc0f 	bl	80115f0 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003dd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f00d fbee 	bl	80115b8 <HAL_NVIC_EnableIRQ>
 8003ddc:	e010      	b.n	8003e00 <I2CX_DMA_RX_Init+0x19c>
	}else{
		HAL_NVIC_SetPriority(nvic, DMA1_Str2__IRQ_PRIO, 0);
 8003dde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003de2:	2200      	movs	r2, #0
 8003de4:	210e      	movs	r1, #14
 8003de6:	4618      	mov	r0, r3
 8003de8:	f00d fbca 	bl	8011580 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003dec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f00d fbfd 	bl	80115f0 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003df6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f00d fbdc 	bl	80115b8 <HAL_NVIC_EnableIRQ>
	}

	hi2cx->Init.ClockSpeed = ClockSpeed;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	605a      	str	r2, [r3, #4]
	hi2cx->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	609a      	str	r2, [r3, #8]
	hi2cx->Init.OwnAddress1 = OwnAddress<<1;
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	461a      	mov	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	60da      	str	r2, [r3, #12]
	hi2cx->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e1c:	611a      	str	r2, [r3, #16]
	hi2cx->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	615a      	str	r2, [r3, #20]
	hi2cx->Init.OwnAddress2 = 0;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	619a      	str	r2, [r3, #24]
	hi2cx->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	61da      	str	r2, [r3, #28]
	hi2cx->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	621a      	str	r2, [r3, #32]

	if(hi2cx == &hi2c1){
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4a2f      	ldr	r2, [pc, #188]	; (8003ef8 <I2CX_DMA_RX_Init+0x294>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d118      	bne.n	8003e70 <I2CX_DMA_RX_Init+0x20c>
		HAL_NVIC_SetPriority(nvicER, I2C1_ER_IRQ_PRIO, 0);
 8003e3e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e42:	2200      	movs	r2, #0
 8003e44:	2100      	movs	r1, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f00d fb9a 	bl	8011580 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003e4c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f00d fbb1 	bl	80115b8 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C1_EV_IRQ_PRIO, 0);
 8003e56:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f00d fb8e 	bl	8011580 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003e64:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f00d fba5 	bl	80115b8 <HAL_NVIC_EnableIRQ>
 8003e6e:	e034      	b.n	8003eda <I2CX_DMA_RX_Init+0x276>
	}else if(hi2cx == &hi2c2){
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4a24      	ldr	r2, [pc, #144]	; (8003f04 <I2CX_DMA_RX_Init+0x2a0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d118      	bne.n	8003eaa <I2CX_DMA_RX_Init+0x246>
		HAL_NVIC_SetPriority(nvicER, I2C2_ER_IRQ_PRIO, 0);
 8003e78:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	210e      	movs	r1, #14
 8003e80:	4618      	mov	r0, r3
 8003e82:	f00d fb7d 	bl	8011580 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003e86:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f00d fb94 	bl	80115b8 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C2_EV_IRQ_PRIO, 0);
 8003e90:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e94:	2200      	movs	r2, #0
 8003e96:	210e      	movs	r1, #14
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f00d fb71 	bl	8011580 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003e9e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f00d fb88 	bl	80115b8 <HAL_NVIC_EnableIRQ>
 8003ea8:	e017      	b.n	8003eda <I2CX_DMA_RX_Init+0x276>
	}else{
		HAL_NVIC_SetPriority(nvicER, I2C3_ER_IRQ_PRIO, 0);
 8003eaa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	210e      	movs	r1, #14
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f00d fb64 	bl	8011580 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003eb8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f00d fb7b 	bl	80115b8 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C3_EV_IRQ_PRIO, 0);
 8003ec2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	210e      	movs	r1, #14
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f00d fb58 	bl	8011580 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003ed0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f00d fb6f 	bl	80115b8 <HAL_NVIC_EnableIRQ>
	}

	if (HAL_I2C_Init(hi2cx) != HAL_OK)
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f00e fa6a 	bl	80123b4 <HAL_I2C_Init>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <I2CX_DMA_RX_Init+0x286>
	{

		Error_Handler();
 8003ee6:	f000 fb2f 	bl	8004548 <Error_Handler>
	}
}
 8003eea:	bf00      	nop
 8003eec:	3720      	adds	r7, #32
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	20006b88 	.word	0x20006b88
 8003efc:	40005400 	.word	0x40005400
 8003f00:	40026010 	.word	0x40026010
 8003f04:	20006be4 	.word	0x20006be4
 8003f08:	40005800 	.word	0x40005800
 8003f0c:	40026058 	.word	0x40026058
 8003f10:	40005c00 	.word	0x40005c00
 8003f14:	40026040 	.word	0x40026040

08003f18 <I2C2_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_EV_IRQHandler(void){
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0


	HAL_I2C_EV_IRQHandler(&hi2c2);
 8003f1c:	4802      	ldr	r0, [pc, #8]	; (8003f28 <I2C2_EV_IRQHandler+0x10>)
 8003f1e:	f00e fcd3 	bl	80128c8 <HAL_I2C_EV_IRQHandler>


}
 8003f22:	bf00      	nop
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20006be4 	.word	0x20006be4

08003f2c <I2C2_ER_IRQHandler>:
 * Function Remarks		: This interrupt handle the error event of I2C2.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_ER_IRQHandler(void){
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0

	HAL_I2C_ER_IRQHandler(&hi2c2);
 8003f30:	4802      	ldr	r0, [pc, #8]	; (8003f3c <I2C2_ER_IRQHandler+0x10>)
 8003f32:	f00e fe36 	bl	8012ba2 <HAL_I2C_ER_IRQHandler>


}
 8003f36:	bf00      	nop
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20006be4 	.word	0x20006be4

08003f40 <I2C3_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C3_EV_IRQHandler(void){
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0

	//	taskENTER_CRITICAL();
	HAL_I2C_EV_IRQHandler(&hi2c3);
 8003f44:	4802      	ldr	r0, [pc, #8]	; (8003f50 <I2C3_EV_IRQHandler+0x10>)
 8003f46:	f00e fcbf 	bl	80128c8 <HAL_I2C_EV_IRQHandler>
	//	taskEXIT_CRITICAL();

}
 8003f4a:	bf00      	nop
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	200067d8 	.word	0x200067d8

08003f54 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b0a4      	sub	sp, #144	; 0x90
 8003f58:	af00      	add	r7, sp, #0
	set();
 8003f5a:	f006 fd6b 	bl	800aa34 <set>
	const osThreadAttr_t MainTask_attributes =
 8003f5e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f62:	2224      	movs	r2, #36	; 0x24
 8003f64:	2100      	movs	r1, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f015 fe68 	bl	8019c3c <memset>
 8003f6c:	4b31      	ldr	r3, [pc, #196]	; (8004034 <main+0xe0>)
 8003f6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f78:	2318      	movs	r3, #24
 8003f7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			{ .name = "MainTask", .stack_size = 512 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	const osThreadAttr_t CheckingTask_attributes =
 8003f7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f82:	2224      	movs	r2, #36	; 0x24
 8003f84:	2100      	movs	r1, #0
 8003f86:	4618      	mov	r0, r3
 8003f88:	f015 fe58 	bl	8019c3c <memset>
 8003f8c:	4b2a      	ldr	r3, [pc, #168]	; (8004038 <main+0xe4>)
 8003f8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f96:	2318      	movs	r3, #24
 8003f98:	663b      	str	r3, [r7, #96]	; 0x60
			{ .name = "CheckingTask", .stack_size =512 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	const osThreadAttr_t NaviTask_attributes =
 8003f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f9e:	2224      	movs	r2, #36	; 0x24
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f015 fe4a 	bl	8019c3c <memset>
 8003fa8:	4b24      	ldr	r3, [pc, #144]	; (800403c <main+0xe8>)
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
 8003fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fb2:	2318      	movs	r3, #24
 8003fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
			{ .name = "NaviTask", .stack_size = 1024 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	const osThreadAttr_t EmergencyTask_attributes =
 8003fb6:	463b      	mov	r3, r7
 8003fb8:	2224      	movs	r2, #36	; 0x24
 8003fba:	2100      	movs	r1, #0
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f015 fe3d 	bl	8019c3c <memset>
 8003fc2:	4b1f      	ldr	r3, [pc, #124]	; (8004040 <main+0xec>)
 8003fc4:	603b      	str	r3, [r7, #0]
 8003fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	2318      	movs	r3, #24
 8003fce:	61bb      	str	r3, [r7, #24]
			{ .name = "EmergencyTask", .stack_size = 256 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	osKernelInitialize();
 8003fd0:	f012 ff9c 	bl	8016f0c <osKernelInitialize>

	MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 8003fd4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003fd8:	461a      	mov	r2, r3
 8003fda:	2100      	movs	r1, #0
 8003fdc:	4819      	ldr	r0, [pc, #100]	; (8004044 <main+0xf0>)
 8003fde:	f012 ffdf 	bl	8016fa0 <osThreadNew>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4a18      	ldr	r2, [pc, #96]	; (8004048 <main+0xf4>)
 8003fe6:	6013      	str	r3, [r2, #0]
	NaviTaskHandle = osThreadNew(NaviTask, NULL, &NaviTask_attributes);
 8003fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fec:	461a      	mov	r2, r3
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4816      	ldr	r0, [pc, #88]	; (800404c <main+0xf8>)
 8003ff2:	f012 ffd5 	bl	8016fa0 <osThreadNew>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4a15      	ldr	r2, [pc, #84]	; (8004050 <main+0xfc>)
 8003ffa:	6013      	str	r3, [r2, #0]
	CheckingTaskHandle = osThreadNew(CheckingTask, NULL,
 8003ffc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004000:	461a      	mov	r2, r3
 8004002:	2100      	movs	r1, #0
 8004004:	4813      	ldr	r0, [pc, #76]	; (8004054 <main+0x100>)
 8004006:	f012 ffcb 	bl	8016fa0 <osThreadNew>
 800400a:	4603      	mov	r3, r0
 800400c:	4a12      	ldr	r2, [pc, #72]	; (8004058 <main+0x104>)
 800400e:	6013      	str	r3, [r2, #0]
			&CheckingTask_attributes);
	EmergencyTaskHandle = osThreadNew(EmergencyTask, NULL,
 8004010:	463b      	mov	r3, r7
 8004012:	461a      	mov	r2, r3
 8004014:	2100      	movs	r1, #0
 8004016:	4811      	ldr	r0, [pc, #68]	; (800405c <main+0x108>)
 8004018:	f012 ffc2 	bl	8016fa0 <osThreadNew>
 800401c:	4603      	mov	r3, r0
 800401e:	4a10      	ldr	r2, [pc, #64]	; (8004060 <main+0x10c>)
 8004020:	6013      	str	r3, [r2, #0]
			&EmergencyTask_attributes);
	led2 = 1;
 8004022:	4a10      	ldr	r2, [pc, #64]	; (8004064 <main+0x110>)
 8004024:	7853      	ldrb	r3, [r2, #1]
 8004026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800402a:	7053      	strb	r3, [r2, #1]
	osKernelStart();
 800402c:	f012 ff92 	bl	8016f54 <osKernelStart>

	while (1) {
 8004030:	e7fe      	b.n	8004030 <main+0xdc>
 8004032:	bf00      	nop
 8004034:	0801fa78 	.word	0x0801fa78
 8004038:	0801fa84 	.word	0x0801fa84
 800403c:	0801fa94 	.word	0x0801fa94
 8004040:	0801faa0 	.word	0x0801faa0
 8004044:	08004159 	.word	0x08004159
 8004048:	20007868 	.word	0x20007868
 800404c:	080042ad 	.word	0x080042ad
 8004050:	200072a0 	.word	0x200072a0
 8004054:	080043b1 	.word	0x080043b1
 8004058:	20009ec4 	.word	0x20009ec4
 800405c:	08004465 	.word	0x08004465
 8004060:	20009db8 	.word	0x20009db8
 8004064:	40020814 	.word	0x40020814

08004068 <TIM6_DAC_IRQHandler>:

	}
}

void TIM6_DAC_IRQHandler(void) {
 8004068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800406c:	b088      	sub	sp, #32
 800406e:	af08      	add	r7, sp, #32

	static int counter = 0;
	counter++;
 8004070:	4b2f      	ldr	r3, [pc, #188]	; (8004130 <TIM6_DAC_IRQHandler+0xc8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3301      	adds	r3, #1
 8004076:	4a2e      	ldr	r2, [pc, #184]	; (8004130 <TIM6_DAC_IRQHandler+0xc8>)
 8004078:	6013      	str	r3, [r2, #0]

	if(counter % 4 == 0)
 800407a:	4b2d      	ldr	r3, [pc, #180]	; (8004130 <TIM6_DAC_IRQHandler+0xc8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d147      	bne.n	8004116 <TIM6_DAC_IRQHandler+0xae>
	{
		led1 = !led1;
 8004086:	4b2b      	ldr	r3, [pc, #172]	; (8004134 <TIM6_DAC_IRQHandler+0xcc>)
 8004088:	785b      	ldrb	r3, [r3, #1]
 800408a:	f003 0320 	and.w	r3, r3, #32
 800408e:	b2db      	uxtb	r3, r3
 8004090:	4a28      	ldr	r2, [pc, #160]	; (8004134 <TIM6_DAC_IRQHandler+0xcc>)
 8004092:	2b00      	cmp	r3, #0
 8004094:	bf0c      	ite	eq
 8004096:	2301      	moveq	r3, #1
 8004098:	2300      	movne	r3, #0
 800409a:	b2d9      	uxtb	r1, r3
 800409c:	7853      	ldrb	r3, [r2, #1]
 800409e:	f361 1345 	bfi	r3, r1, #5, #1
 80040a2:	7053      	strb	r3, [r2, #1]
		counter = 0;
 80040a4:	4b22      	ldr	r3, [pc, #136]	; (8004130 <TIM6_DAC_IRQHandler+0xc8>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
//	//				lidar.pos_counter, pp.error_x, pp.error_y, pp.real_x, pp.real_y, pp.real_z, pick_enc);
//	//		sprintf((char*)debug, "VESC: %f\n", vesc_duty);
//		}

		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f VESC: %.4f P: %ld\n",
				pp.real_x, pp.real_y, pp.real_z, vesc_duty, pick_enc);
 80040aa:	4b23      	ldr	r3, [pc, #140]	; (8004138 <TIM6_DAC_IRQHandler+0xd0>)
 80040ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f VESC: %.4f P: %ld\n",
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fc fa4a 	bl	8000548 <__aeabi_f2d>
 80040b4:	4682      	mov	sl, r0
 80040b6:	468b      	mov	fp, r1
				pp.real_x, pp.real_y, pp.real_z, vesc_duty, pick_enc);
 80040b8:	4b1f      	ldr	r3, [pc, #124]	; (8004138 <TIM6_DAC_IRQHandler+0xd0>)
 80040ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f VESC: %.4f P: %ld\n",
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fc fa43 	bl	8000548 <__aeabi_f2d>
 80040c2:	4604      	mov	r4, r0
 80040c4:	460d      	mov	r5, r1
				pp.real_x, pp.real_y, pp.real_z, vesc_duty, pick_enc);
 80040c6:	4b1c      	ldr	r3, [pc, #112]	; (8004138 <TIM6_DAC_IRQHandler+0xd0>)
 80040c8:	691b      	ldr	r3, [r3, #16]
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f VESC: %.4f P: %ld\n",
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fc fa3c 	bl	8000548 <__aeabi_f2d>
 80040d0:	4680      	mov	r8, r0
 80040d2:	4689      	mov	r9, r1
 80040d4:	4b19      	ldr	r3, [pc, #100]	; (800413c <TIM6_DAC_IRQHandler+0xd4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f7fc fa35 	bl	8000548 <__aeabi_f2d>
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4917      	ldr	r1, [pc, #92]	; (8004140 <TIM6_DAC_IRQHandler+0xd8>)
 80040e4:	6809      	ldr	r1, [r1, #0]
 80040e6:	9106      	str	r1, [sp, #24]
 80040e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80040ec:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80040f0:	e9cd 4500 	strd	r4, r5, [sp]
 80040f4:	4652      	mov	r2, sl
 80040f6:	465b      	mov	r3, fp
 80040f8:	4912      	ldr	r1, [pc, #72]	; (8004144 <TIM6_DAC_IRQHandler+0xdc>)
 80040fa:	4813      	ldr	r0, [pc, #76]	; (8004148 <TIM6_DAC_IRQHandler+0xe0>)
 80040fc:	f016 fd5a 	bl	801abb4 <siprintf>
//		sprintf((char*) debug, "Left: %.2f Right: %.2f VESC: %.2f\n",
//				vesc1.vel, vesc2.vel, vesc_speed);
		HAL_UART_Transmit(&huart5, debug, strlen((char*) debug), HAL_MAX_DELAY);
 8004100:	4811      	ldr	r0, [pc, #68]	; (8004148 <TIM6_DAC_IRQHandler+0xe0>)
 8004102:	f7fc f865 	bl	80001d0 <strlen>
 8004106:	4603      	mov	r3, r0
 8004108:	b29a      	uxth	r2, r3
 800410a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800410e:	490e      	ldr	r1, [pc, #56]	; (8004148 <TIM6_DAC_IRQHandler+0xe0>)
 8004110:	480e      	ldr	r0, [pc, #56]	; (800414c <TIM6_DAC_IRQHandler+0xe4>)
 8004112:	f011 ffac 	bl	801606e <HAL_UART_Transmit>
//	}
//
//	flywheelPID(vesc_speed);
//	flywheelAct();

	PathPlan(&pp);
 8004116:	4808      	ldr	r0, [pc, #32]	; (8004138 <TIM6_DAC_IRQHandler+0xd0>)
 8004118:	f001 fefa 	bl	8005f10 <PathPlan>
	CheckPickEnc();
 800411c:	f007 fc8c 	bl	800ba38 <CheckPickEnc>

//	sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f \n", fXPos, fYPos, fyaw);
//	HAL_UART_Transmit(&huart4, debug, strlen((char*) debug), HAL_MAX_DELAY);
	HAL_TIM_IRQHandler(&htim6);
 8004120:	480b      	ldr	r0, [pc, #44]	; (8004150 <TIM6_DAC_IRQHandler+0xe8>)
 8004122:	f011 f8fd 	bl	8015320 <HAL_TIM_IRQHandler>

}
 8004126:	bf00      	nop
 8004128:	46bd      	mov	sp, r7
 800412a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800412e:	bf00      	nop
 8004130:	200002c0 	.word	0x200002c0
 8004134:	40020814 	.word	0x40020814
 8004138:	20006cc4 	.word	0x20006cc4
 800413c:	20007380 	.word	0x20007380
 8004140:	20006be0 	.word	0x20006be0
 8004144:	0801fab0 	.word	0x0801fab0
 8004148:	20007488 	.word	0x20007488
 800414c:	20005d2c 	.word	0x20005d2c
 8004150:	20005ef4 	.word	0x20005ef4
 8004154:	00000000 	.word	0x00000000

08004158 <MainTask>:

// Can be polling
void MainTask(void *argument) {
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
	RobotStart();
 8004160:	f006 ff78 	bl	800b054 <RobotStart>
	while (1) {
		if (ps4.button == SELECT)
 8004164:	4b4c      	ldr	r3, [pc, #304]	; (8004298 <MainTask+0x140>)
 8004166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004168:	2b01      	cmp	r3, #1
 800416a:	d110      	bne.n	800418e <MainTask+0x36>
		{
			while (ps4.button == SELECT);
 800416c:	bf00      	nop
 800416e:	4b4a      	ldr	r3, [pc, #296]	; (8004298 <MainTask+0x140>)
 8004170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004172:	2b01      	cmp	r3, #1
 8004174:	d0fb      	beq.n	800416e <MainTask+0x16>
			mode++;
 8004176:	4b49      	ldr	r3, [pc, #292]	; (800429c <MainTask+0x144>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3301      	adds	r3, #1
 800417c:	4a47      	ldr	r2, [pc, #284]	; (800429c <MainTask+0x144>)
 800417e:	6013      	str	r3, [r2, #0]

			if (mode > 1)
 8004180:	4b46      	ldr	r3, [pc, #280]	; (800429c <MainTask+0x144>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b01      	cmp	r3, #1
 8004186:	dd02      	ble.n	800418e <MainTask+0x36>
				mode = 0;
 8004188:	4b44      	ldr	r3, [pc, #272]	; (800429c <MainTask+0x144>)
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
		}

		if(ps4.button == L1)
 800418e:	4b42      	ldr	r3, [pc, #264]	; (8004298 <MainTask+0x140>)
 8004190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004196:	d12b      	bne.n	80041f0 <MainTask+0x98>
		{
			while(ps4.button == L1);
 8004198:	bf00      	nop
 800419a:	4b3f      	ldr	r3, [pc, #252]	; (8004298 <MainTask+0x140>)
 800419c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800419e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a2:	d0fa      	beq.n	800419a <MainTask+0x42>
			vesc_speed += 0.05;
 80041a4:	4b3e      	ldr	r3, [pc, #248]	; (80042a0 <MainTask+0x148>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fc f9cd 	bl	8000548 <__aeabi_f2d>
 80041ae:	a336      	add	r3, pc, #216	; (adr r3, 8004288 <MainTask+0x130>)
 80041b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b4:	f7fc f86a 	bl	800028c <__adddf3>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	4610      	mov	r0, r2
 80041be:	4619      	mov	r1, r3
 80041c0:	f7fc fd12 	bl	8000be8 <__aeabi_d2f>
 80041c4:	4603      	mov	r3, r0
 80041c6:	4a36      	ldr	r2, [pc, #216]	; (80042a0 <MainTask+0x148>)
 80041c8:	6013      	str	r3, [r2, #0]
			vesc_duty += 0.0025;
 80041ca:	4b36      	ldr	r3, [pc, #216]	; (80042a4 <MainTask+0x14c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fc f9ba 	bl	8000548 <__aeabi_f2d>
 80041d4:	a32e      	add	r3, pc, #184	; (adr r3, 8004290 <MainTask+0x138>)
 80041d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041da:	f7fc f857 	bl	800028c <__adddf3>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	4610      	mov	r0, r2
 80041e4:	4619      	mov	r1, r3
 80041e6:	f7fc fcff 	bl	8000be8 <__aeabi_d2f>
 80041ea:	4603      	mov	r3, r0
 80041ec:	4a2d      	ldr	r2, [pc, #180]	; (80042a4 <MainTask+0x14c>)
 80041ee:	6013      	str	r3, [r2, #0]
//			ServoMovePulse(&servo_ring, 10);
		}

		if(ps4.button == R1)
 80041f0:	4b29      	ldr	r3, [pc, #164]	; (8004298 <MainTask+0x140>)
 80041f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f8:	d12b      	bne.n	8004252 <MainTask+0xfa>
		{
			while(ps4.button == R1);
 80041fa:	bf00      	nop
 80041fc:	4b26      	ldr	r3, [pc, #152]	; (8004298 <MainTask+0x140>)
 80041fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004204:	d0fa      	beq.n	80041fc <MainTask+0xa4>
			vesc_speed -= 0.05;
 8004206:	4b26      	ldr	r3, [pc, #152]	; (80042a0 <MainTask+0x148>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7fc f99c 	bl	8000548 <__aeabi_f2d>
 8004210:	a31d      	add	r3, pc, #116	; (adr r3, 8004288 <MainTask+0x130>)
 8004212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004216:	f7fc f837 	bl	8000288 <__aeabi_dsub>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4610      	mov	r0, r2
 8004220:	4619      	mov	r1, r3
 8004222:	f7fc fce1 	bl	8000be8 <__aeabi_d2f>
 8004226:	4603      	mov	r3, r0
 8004228:	4a1d      	ldr	r2, [pc, #116]	; (80042a0 <MainTask+0x148>)
 800422a:	6013      	str	r3, [r2, #0]
			vesc_duty -= 0.0025;
 800422c:	4b1d      	ldr	r3, [pc, #116]	; (80042a4 <MainTask+0x14c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f7fc f989 	bl	8000548 <__aeabi_f2d>
 8004236:	a316      	add	r3, pc, #88	; (adr r3, 8004290 <MainTask+0x138>)
 8004238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423c:	f7fc f824 	bl	8000288 <__aeabi_dsub>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4610      	mov	r0, r2
 8004246:	4619      	mov	r1, r3
 8004248:	f7fc fcce 	bl	8000be8 <__aeabi_d2f>
 800424c:	4603      	mov	r3, r0
 800424e:	4a15      	ldr	r2, [pc, #84]	; (80042a4 <MainTask+0x14c>)
 8004250:	6013      	str	r3, [r2, #0]
//			ServoMovePulse(&servo_ring, -10);
		}

		switch (mode)
 8004252:	4b12      	ldr	r3, [pc, #72]	; (800429c <MainTask+0x144>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b02      	cmp	r3, #2
 8004258:	d00f      	beq.n	800427a <MainTask+0x122>
 800425a:	2b02      	cmp	r3, #2
 800425c:	dc82      	bgt.n	8004164 <MainTask+0xc>
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <MainTask+0x110>
 8004262:	2b01      	cmp	r3, #1
 8004264:	d003      	beq.n	800426e <MainTask+0x116>
 8004266:	e00b      	b.n	8004280 <MainTask+0x128>
		{
			case NORMAL:
				NormalControl();
 8004268:	f006 ff9e 	bl	800b1a8 <NormalControl>
			break;
 800426c:	e008      	b.n	8004280 <MainTask+0x128>

			case AUTO:
				Auto();
 800426e:	f007 f9ff 	bl	800b670 <Auto>
				LidarControl(&lidar);
 8004272:	480d      	ldr	r0, [pc, #52]	; (80042a8 <MainTask+0x150>)
 8004274:	f00b feb0 	bl	800ffd8 <LidarControl>
			break;
 8004278:	e002      	b.n	8004280 <MainTask+0x128>

			case TUNE:
				tune();
 800427a:	f008 f8c9 	bl	800c410 <tune>
			break;
 800427e:	bf00      	nop
		if (ps4.button == SELECT)
 8004280:	e770      	b.n	8004164 <MainTask+0xc>
 8004282:	bf00      	nop
 8004284:	f3af 8000 	nop.w
 8004288:	9999999a 	.word	0x9999999a
 800428c:	3fa99999 	.word	0x3fa99999
 8004290:	47ae147b 	.word	0x47ae147b
 8004294:	3f647ae1 	.word	0x3f647ae1
 8004298:	2000a014 	.word	0x2000a014
 800429c:	200092d0 	.word	0x200092d0
 80042a0:	2000659c 	.word	0x2000659c
 80042a4:	20007380 	.word	0x20007380
 80042a8:	20009030 	.word	0x20009030

080042ac <NaviTask>:
		}
	}
}

// Cannot Polling
void NaviTask(void *argument) {
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
//			{
//				pitch_stop;
//			}
//		}

		if(!load_start && !set_pick_enc && !reload)
 80042b4:	4b31      	ldr	r3, [pc, #196]	; (800437c <NaviTask+0xd0>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d115      	bne.n	80042e8 <NaviTask+0x3c>
 80042bc:	4b30      	ldr	r3, [pc, #192]	; (8004380 <NaviTask+0xd4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d111      	bne.n	80042e8 <NaviTask+0x3c>
 80042c4:	4b2f      	ldr	r3, [pc, #188]	; (8004384 <NaviTask+0xd8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10d      	bne.n	80042e8 <NaviTask+0x3c>
			pick_manual(ps4.joyR_y * 14000);
 80042cc:	4b2e      	ldr	r3, [pc, #184]	; (8004388 <NaviTask+0xdc>)
 80042ce:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80042d2:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800438c <NaviTask+0xe0>
 80042d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042de:	ee17 1a90 	vmov	r1, s15
 80042e2:	482b      	ldr	r0, [pc, #172]	; (8004390 <NaviTask+0xe4>)
 80042e4:	f7fc ff51 	bl	800118a <WriteBDC>

		VESCPDC(vesc_duty, &vesc1);
 80042e8:	4b2a      	ldr	r3, [pc, #168]	; (8004394 <NaviTask+0xe8>)
 80042ea:	edd3 7a00 	vldr	s15, [r3]
 80042ee:	482a      	ldr	r0, [pc, #168]	; (8004398 <NaviTask+0xec>)
 80042f0:	eeb0 0a67 	vmov.f32	s0, s15
 80042f4:	f009 f9f0 	bl	800d6d8 <VESCPDC>
		VESCPDC(vesc_duty, &vesc2);
 80042f8:	4b26      	ldr	r3, [pc, #152]	; (8004394 <NaviTask+0xe8>)
 80042fa:	edd3 7a00 	vldr	s15, [r3]
 80042fe:	4827      	ldr	r0, [pc, #156]	; (800439c <NaviTask+0xf0>)
 8004300:	eeb0 0a67 	vmov.f32	s0, s15
 8004304:	f009 f9e8 	bl	800d6d8 <VESCPDC>
//		if(stick_fence && MODN.x_vel == 0.0 && MODN.y_vel == 0.0 && !In_LS_Shot_1 && !In_LS_Shot_2)
//			RNSVelocity(0.25, 0.25, 0.25, 0.25, &rns);
//		else if(stick_fence && In_LS_Shot_1 && In_LS_Shot_2)
//			RNSStop(&rns);

		enq();
 8004308:	f008 f864 	bl	800c3d4 <enq>
		pick_enc = QEIRead(QEI1);
 800430c:	2001      	movs	r0, #1
 800430e:	f7fd fcdd 	bl	8001ccc <QEIRead>
 8004312:	4603      	mov	r3, r0
 8004314:	4a22      	ldr	r2, [pc, #136]	; (80043a0 <NaviTask+0xf4>)
 8004316:	6013      	str	r3, [r2, #0]

		if(!pp.pp_start && !vel_adjust)
 8004318:	4b22      	ldr	r3, [pc, #136]	; (80043a4 <NaviTask+0xf8>)
 800431a:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d108      	bne.n	800433a <NaviTask+0x8e>
 8004328:	4b1f      	ldr	r3, [pc, #124]	; (80043a8 <NaviTask+0xfc>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d104      	bne.n	800433a <NaviTask+0x8e>
//			if (ps4.button == R1) {
//				while (ps4.button == R1);
//				moveSpeed--;
//				setSpeedMODN(moveSpeed);
//			}
			realMODN(&ps4, &rns);
 8004330:	491e      	ldr	r1, [pc, #120]	; (80043ac <NaviTask+0x100>)
 8004332:	4815      	ldr	r0, [pc, #84]	; (8004388 <NaviTask+0xdc>)
 8004334:	f000 f96c 	bl	8004610 <realMODN>
 8004338:	e01e      	b.n	8004378 <NaviTask+0xcc>
		}
		else if(pp.pp_start)
 800433a:	4b1a      	ldr	r3, [pc, #104]	; (80043a4 <NaviTask+0xf8>)
 800433c:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0b4      	beq.n	80042b4 <NaviTask+0x8>
			RNSVelocity(pp.v1, pp.v2, pp.v3, pp.v4, &rns);
 800434a:	4b16      	ldr	r3, [pc, #88]	; (80043a4 <NaviTask+0xf8>)
 800434c:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8004350:	4b14      	ldr	r3, [pc, #80]	; (80043a4 <NaviTask+0xf8>)
 8004352:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8004356:	4b13      	ldr	r3, [pc, #76]	; (80043a4 <NaviTask+0xf8>)
 8004358:	edd3 6abc 	vldr	s13, [r3, #752]	; 0x2f0
 800435c:	4b11      	ldr	r3, [pc, #68]	; (80043a4 <NaviTask+0xf8>)
 800435e:	ed93 6abd 	vldr	s12, [r3, #756]	; 0x2f4
 8004362:	4812      	ldr	r0, [pc, #72]	; (80043ac <NaviTask+0x100>)
 8004364:	eef0 1a46 	vmov.f32	s3, s12
 8004368:	eeb0 1a66 	vmov.f32	s2, s13
 800436c:	eef0 0a47 	vmov.f32	s1, s14
 8004370:	eeb0 0a67 	vmov.f32	s0, s15
 8004374:	f005 f928 	bl	80095c8 <RNSVelocity>
		if(!load_start && !set_pick_enc && !reload)
 8004378:	e79c      	b.n	80042b4 <NaviTask+0x8>
 800437a:	bf00      	nop
 800437c:	20007348 	.word	0x20007348
 8004380:	20007730 	.word	0x20007730
 8004384:	2000774c 	.word	0x2000774c
 8004388:	2000a014 	.word	0x2000a014
 800438c:	465ac000 	.word	0x465ac000
 8004390:	2000770c 	.word	0x2000770c
 8004394:	20007380 	.word	0x20007380
 8004398:	20006b04 	.word	0x20006b04
 800439c:	2000997c 	.word	0x2000997c
 80043a0:	20006be0 	.word	0x20006be0
 80043a4:	20006cc4 	.word	0x20006cc4
 80043a8:	20009028 	.word	0x20009028
 80043ac:	20008f08 	.word	0x20008f08

080043b0 <CheckingTask>:

	}
}

void CheckingTask(void *argument)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
	while (1)
	{
		Checking();
 80043b8:	f007 ff66 	bl	800c288 <Checking>
//		else
//		{
//			led4_off;
//		}

		if(blue)
 80043bc:	4b22      	ldr	r3, [pc, #136]	; (8004448 <CheckingTask+0x98>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <CheckingTask+0x20>
		{
			led4_on;
 80043c4:	4b21      	ldr	r3, [pc, #132]	; (800444c <CheckingTask+0x9c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80043cc:	641a      	str	r2, [r3, #64]	; 0x40
 80043ce:	e003      	b.n	80043d8 <CheckingTask+0x28>
		}
		else
		{
			led4_off;
 80043d0:	4b1e      	ldr	r3, [pc, #120]	; (800444c <CheckingTask+0x9c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2200      	movs	r2, #0
 80043d6:	641a      	str	r2, [r3, #64]	; 0x40
//		else
//		{
//			led5_off;
//		}

		if(In_Load)
 80043d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80043dc:	481c      	ldr	r0, [pc, #112]	; (8004450 <CheckingTask+0xa0>)
 80043de:	f00d ffb7 	bl	8012350 <HAL_GPIO_ReadPin>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d105      	bne.n	80043f4 <CheckingTask+0x44>
		{
			led6_on;
 80043e8:	4a1a      	ldr	r2, [pc, #104]	; (8004454 <CheckingTask+0xa4>)
 80043ea:	7e13      	ldrb	r3, [r2, #24]
 80043ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043f0:	7613      	strb	r3, [r2, #24]
 80043f2:	e004      	b.n	80043fe <CheckingTask+0x4e>
		}
		else
		{
			led6_off;
 80043f4:	4a17      	ldr	r2, [pc, #92]	; (8004454 <CheckingTask+0xa4>)
 80043f6:	7e13      	ldrb	r3, [r2, #24]
 80043f8:	f36f 1386 	bfc	r3, #6, #1
 80043fc:	7613      	strb	r3, [r2, #24]
//		else
//		{
//			led7_off;
//		}

		if(led_enb)
 80043fe:	4b16      	ldr	r3, [pc, #88]	; (8004458 <CheckingTask+0xa8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0d8      	beq.n	80043b8 <CheckingTask+0x8>
		{
			if (HAL_GetTick() - before_shot >= shot_prd)
 8004406:	f00c f927 	bl	8010658 <HAL_GetTick>
 800440a:	4603      	mov	r3, r0
 800440c:	4a13      	ldr	r2, [pc, #76]	; (800445c <CheckingTask+0xac>)
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	4a13      	ldr	r2, [pc, #76]	; (8004460 <CheckingTask+0xb0>)
 8004414:	6812      	ldr	r2, [r2, #0]
 8004416:	4293      	cmp	r3, r2
 8004418:	d3ce      	bcc.n	80043b8 <CheckingTask+0x8>
			{
				led8 = !led8;
 800441a:	4b0e      	ldr	r3, [pc, #56]	; (8004454 <CheckingTask+0xa4>)
 800441c:	7e1b      	ldrb	r3, [r3, #24]
 800441e:	f003 0320 	and.w	r3, r3, #32
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	bf0c      	ite	eq
 8004428:	2301      	moveq	r3, #1
 800442a:	2300      	movne	r3, #0
 800442c:	b2d9      	uxtb	r1, r3
 800442e:	4a09      	ldr	r2, [pc, #36]	; (8004454 <CheckingTask+0xa4>)
 8004430:	7e13      	ldrb	r3, [r2, #24]
 8004432:	f361 1345 	bfi	r3, r1, #5, #1
 8004436:	7613      	strb	r3, [r2, #24]
				before_shot = HAL_GetTick();
 8004438:	f00c f90e 	bl	8010658 <HAL_GetTick>
 800443c:	4603      	mov	r3, r0
 800443e:	461a      	mov	r2, r3
 8004440:	4b06      	ldr	r3, [pc, #24]	; (800445c <CheckingTask+0xac>)
 8004442:	601a      	str	r2, [r3, #0]
		Checking();
 8004444:	e7b8      	b.n	80043b8 <CheckingTask+0x8>
 8004446:	bf00      	nop
 8004448:	20006a1c 	.word	0x20006a1c
 800444c:	20005ca8 	.word	0x20005ca8
 8004450:	40021000 	.word	0x40021000
 8004454:	2000959c 	.word	0x2000959c
 8004458:	2000a5e0 	.word	0x2000a5e0
 800445c:	20006ad4 	.word	0x20006ad4
 8004460:	2000a388 	.word	0x2000a388

08004464 <EmergencyTask>:
			}
		}
	}
}

void EmergencyTask(void *argument) {
 8004464:	b580      	push	{r7, lr}
 8004466:	b08c      	sub	sp, #48	; 0x30
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]

	while (1) {

		if (ps4.button == TOUCH) {
 800446c:	4b1d      	ldr	r3, [pc, #116]	; (80044e4 <EmergencyTask+0x80>)
 800446e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004470:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004474:	d1fa      	bne.n	800446c <EmergencyTask+0x8>
//			led3 = 1;
			RNSStop(&rns);
 8004476:	481c      	ldr	r0, [pc, #112]	; (80044e8 <EmergencyTask+0x84>)
 8004478:	f005 f822 	bl	80094c0 <RNSStop>
			PP_stop(&pp);
 800447c:	481b      	ldr	r0, [pc, #108]	; (80044ec <EmergencyTask+0x88>)
 800447e:	f001 fcbc 	bl	8005dfa <PP_stop>
			pitch_stop;
 8004482:	2100      	movs	r1, #0
 8004484:	481a      	ldr	r0, [pc, #104]	; (80044f0 <EmergencyTask+0x8c>)
 8004486:	f7fc fe80 	bl	800118a <WriteBDC>
			pick_stop;
 800448a:	2100      	movs	r1, #0
 800448c:	4819      	ldr	r0, [pc, #100]	; (80044f4 <EmergencyTask+0x90>)
 800448e:	f7fc fe7c 	bl	800118a <WriteBDC>
//			flywheelStop();
			push_stop;
 8004492:	2100      	movs	r1, #0
 8004494:	4818      	ldr	r0, [pc, #96]	; (80044f8 <EmergencyTask+0x94>)
 8004496:	f7fc fe78 	bl	800118a <WriteBDC>
			vesc_duty = 0.0;
 800449a:	4b18      	ldr	r3, [pc, #96]	; (80044fc <EmergencyTask+0x98>)
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]
//			ResetPickEnc();
			osThreadTerminate(MainTaskHandle);
 80044a2:	4b17      	ldr	r3, [pc, #92]	; (8004500 <EmergencyTask+0x9c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f012 fe0c 	bl	80170c4 <osThreadTerminate>
			osDelay(5);
 80044ac:	2005      	movs	r0, #5
 80044ae:	f012 fe36 	bl	801711e <osDelay>

			const osThreadAttr_t MainTask_attributes = { .name = "MainTask",
 80044b2:	f107 030c 	add.w	r3, r7, #12
 80044b6:	2224      	movs	r2, #36	; 0x24
 80044b8:	2100      	movs	r1, #0
 80044ba:	4618      	mov	r0, r3
 80044bc:	f015 fbbe 	bl	8019c3c <memset>
 80044c0:	4b10      	ldr	r3, [pc, #64]	; (8004504 <EmergencyTask+0xa0>)
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044c8:	623b      	str	r3, [r7, #32]
 80044ca:	2318      	movs	r3, #24
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
					.stack_size = 256 * 4, .priority =
							(osPriority_t) osPriorityNormal, };

			MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 80044ce:	f107 030c 	add.w	r3, r7, #12
 80044d2:	461a      	mov	r2, r3
 80044d4:	2100      	movs	r1, #0
 80044d6:	480c      	ldr	r0, [pc, #48]	; (8004508 <EmergencyTask+0xa4>)
 80044d8:	f012 fd62 	bl	8016fa0 <osThreadNew>
 80044dc:	4603      	mov	r3, r0
 80044de:	4a08      	ldr	r2, [pc, #32]	; (8004500 <EmergencyTask+0x9c>)
 80044e0:	6013      	str	r3, [r2, #0]
		if (ps4.button == TOUCH) {
 80044e2:	e7c3      	b.n	800446c <EmergencyTask+0x8>
 80044e4:	2000a014 	.word	0x2000a014
 80044e8:	20008f08 	.word	0x20008f08
 80044ec:	20006cc4 	.word	0x20006cc4
 80044f0:	20006c44 	.word	0x20006c44
 80044f4:	2000770c 	.word	0x2000770c
 80044f8:	20009674 	.word	0x20009674
 80044fc:	20007380 	.word	0x20007380
 8004500:	20007868 	.word	0x20007868
 8004504:	0801fa78 	.word	0x0801fa78
 8004508:	08004159 	.word	0x08004159

0800450c <HAL_UART_RxCpltCallback>:
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
	if (huart == IMU.huartx) {
 8004514:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <HAL_UART_RxCpltCallback+0x34>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	429a      	cmp	r2, r3
 800451c:	d102      	bne.n	8004524 <HAL_UART_RxCpltCallback+0x18>
		R6091U_Handler(&IMU);
 800451e:	4808      	ldr	r0, [pc, #32]	; (8004540 <HAL_UART_RxCpltCallback+0x34>)
 8004520:	f004 fea4 	bl	800926c <R6091U_Handler>
	}

	if(huart == lidar.lidar_UART)
 8004524:	4b07      	ldr	r3, [pc, #28]	; (8004544 <HAL_UART_RxCpltCallback+0x38>)
 8004526:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	429a      	cmp	r2, r3
 800452e:	d102      	bne.n	8004536 <HAL_UART_RxCpltCallback+0x2a>
	{
		ObstacleHandler(&lidar);
 8004530:	4804      	ldr	r0, [pc, #16]	; (8004544 <HAL_UART_RxCpltCallback+0x38>)
 8004532:	f00b fe29 	bl	8010188 <ObstacleHandler>
	}
}
 8004536:	bf00      	nop
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20006c68 	.word	0x20006c68
 8004544:	20009030 	.word	0x20009030

08004548 <Error_Handler>:

/**
 * @brief  This function is executed in case of errorYaw occurrence.
 */
void Error_Handler(void) {
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0

}
 800454c:	bf00      	nop
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <MODNInit>:
 * 						  								gain added to four wheels based on the speed
 * Function Return		: NONE
 * Function Example		: void MODNInit(MODN_FWD_OMNI, 3.0, 0.5, 2.0, 0.1);
 */
void MODNInit(RobotBaseType_t base, float speed, float turnSpeed, float angleTol, float imuGain)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	ed87 0a04 	vstr	s0, [r7, #16]
 8004564:	edc7 0a03 	vstr	s1, [r7, #12]
 8004568:	ed87 1a02 	vstr	s2, [r7, #8]
 800456c:	edc7 1a01 	vstr	s3, [r7, #4]
 8004570:	75fb      	strb	r3, [r7, #23]
	MODN.base = base;
 8004572:	4a23      	ldr	r2, [pc, #140]	; (8004600 <MODNInit+0xa8>)
 8004574:	7dfb      	ldrb	r3, [r7, #23]
 8004576:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	MODN.speed = speed;
 800457a:	4a21      	ldr	r2, [pc, #132]	; (8004600 <MODNInit+0xa8>)
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	61d3      	str	r3, [r2, #28]
	MODN.d	= turnSpeed;
 8004580:	4a1f      	ldr	r2, [pc, #124]	; (8004600 <MODNInit+0xa8>)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6213      	str	r3, [r2, #32]
	MODN.radTol = angleTol/180.0*3.14159265359;
 8004586:	68b8      	ldr	r0, [r7, #8]
 8004588:	f7fb ffde 	bl	8000548 <__aeabi_f2d>
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	4b1c      	ldr	r3, [pc, #112]	; (8004604 <MODNInit+0xac>)
 8004592:	f7fc f95b 	bl	800084c <__aeabi_ddiv>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	4610      	mov	r0, r2
 800459c:	4619      	mov	r1, r3
 800459e:	a316      	add	r3, pc, #88	; (adr r3, 80045f8 <MODNInit+0xa0>)
 80045a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a4:	f7fc f828 	bl	80005f8 <__aeabi_dmul>
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4610      	mov	r0, r2
 80045ae:	4619      	mov	r1, r3
 80045b0:	f7fc fb1a 	bl	8000be8 <__aeabi_d2f>
 80045b4:	4603      	mov	r3, r0
 80045b6:	4a12      	ldr	r2, [pc, #72]	; (8004600 <MODNInit+0xa8>)
 80045b8:	62d3      	str	r3, [r2, #44]	; 0x2c
	MODN.imuGain = speed*imuGain/MODN.radTol;
 80045ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80045be:	edd7 7a01 	vldr	s15, [r7, #4]
 80045c2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80045c6:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <MODNInit+0xa8>)
 80045c8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80045cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <MODNInit+0xa8>)
 80045d2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	MODN.radTarget = 0.0;
 80045d6:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <MODNInit+0xa8>)
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	639a      	str	r2, [r3, #56]	; 0x38
	MODN.orientation = OPERATOR_TURNED_0_DEGREE;
 80045de:	4b08      	ldr	r3, [pc, #32]	; (8004600 <MODNInit+0xa8>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	641a      	str	r2, [r3, #64]	; 0x40
	MODN.real_x_vel = &(MODN.x_vel);
 80045e4:	4b06      	ldr	r3, [pc, #24]	; (8004600 <MODNInit+0xa8>)
 80045e6:	4a06      	ldr	r2, [pc, #24]	; (8004600 <MODNInit+0xa8>)
 80045e8:	645a      	str	r2, [r3, #68]	; 0x44
	MODN.real_y_vel = &(MODN.y_vel);
 80045ea:	4b05      	ldr	r3, [pc, #20]	; (8004600 <MODNInit+0xa8>)
 80045ec:	4a06      	ldr	r2, [pc, #24]	; (8004608 <MODNInit+0xb0>)
 80045ee:	649a      	str	r2, [r3, #72]	; 0x48
}
 80045f0:	bf00      	nop
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	54442eea 	.word	0x54442eea
 80045fc:	400921fb 	.word	0x400921fb
 8004600:	20006a6c 	.word	0x20006a6c
 8004604:	40668000 	.word	0x40668000
 8004608:	20006a70 	.word	0x20006a70
 800460c:	00000000 	.word	0x00000000

08004610 <realMODN>:
 * Function Return		: NONE
 * Function Example		: realMODN(ps4, &rns);
 */

void realMODN(PSxBT_t *psx, RNS_interface_t* rns)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	ed2d 8b02 	vpush	{d8}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
	switch(MODN.orientation)
 800461e:	4b52      	ldr	r3, [pc, #328]	; (8004768 <realMODN+0x158>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	2b03      	cmp	r3, #3
 8004624:	d86e      	bhi.n	8004704 <realMODN+0xf4>
 8004626:	a201      	add	r2, pc, #4	; (adr r2, 800462c <realMODN+0x1c>)
 8004628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462c:	0800463d 	.word	0x0800463d
 8004630:	0800466f 	.word	0x0800466f
 8004634:	0800469d 	.word	0x0800469d
 8004638:	080046cf 	.word	0x080046cf
	{
		case OPERATOR_TURNED_0_DEGREE:
			MODN.x_vel = -(psx->joyL_x) * MODN.speed;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004642:	eeb1 7a67 	vneg.f32	s14, s15
 8004646:	4b48      	ldr	r3, [pc, #288]	; (8004768 <realMODN+0x158>)
 8004648:	edd3 7a07 	vldr	s15, [r3, #28]
 800464c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004650:	4b45      	ldr	r3, [pc, #276]	; (8004768 <realMODN+0x158>)
 8004652:	edc3 7a00 	vstr	s15, [r3]
			MODN.y_vel =  (psx->joyL_y) * MODN.speed;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800465c:	4b42      	ldr	r3, [pc, #264]	; (8004768 <realMODN+0x158>)
 800465e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004666:	4b40      	ldr	r3, [pc, #256]	; (8004768 <realMODN+0x158>)
 8004668:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 800466c:	e04a      	b.n	8004704 <realMODN+0xf4>
		case OPERATOR_TURNED_90_DEGREES_CLOCKWISE:
			MODN.x_vel =  psx->joyL_y * MODN.speed;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8004674:	4b3c      	ldr	r3, [pc, #240]	; (8004768 <realMODN+0x158>)
 8004676:	edd3 7a07 	vldr	s15, [r3, #28]
 800467a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467e:	4b3a      	ldr	r3, [pc, #232]	; (8004768 <realMODN+0x158>)
 8004680:	edc3 7a00 	vstr	s15, [r3]
			MODN.y_vel =  psx->joyL_x * MODN.speed;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800468a:	4b37      	ldr	r3, [pc, #220]	; (8004768 <realMODN+0x158>)
 800468c:	edd3 7a07 	vldr	s15, [r3, #28]
 8004690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004694:	4b34      	ldr	r3, [pc, #208]	; (8004768 <realMODN+0x158>)
 8004696:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 800469a:	e033      	b.n	8004704 <realMODN+0xf4>
		case OPERATOR_TURNED_180_DEGREES:
			MODN.x_vel =  psx->joyL_x * MODN.speed;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80046a2:	4b31      	ldr	r3, [pc, #196]	; (8004768 <realMODN+0x158>)
 80046a4:	edd3 7a07 	vldr	s15, [r3, #28]
 80046a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ac:	4b2e      	ldr	r3, [pc, #184]	; (8004768 <realMODN+0x158>)
 80046ae:	edc3 7a00 	vstr	s15, [r3]
			MODN.y_vel = -psx->joyL_y * MODN.speed;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80046b8:	eeb1 7a67 	vneg.f32	s14, s15
 80046bc:	4b2a      	ldr	r3, [pc, #168]	; (8004768 <realMODN+0x158>)
 80046be:	edd3 7a07 	vldr	s15, [r3, #28]
 80046c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c6:	4b28      	ldr	r3, [pc, #160]	; (8004768 <realMODN+0x158>)
 80046c8:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 80046cc:	e01a      	b.n	8004704 <realMODN+0xf4>
		case OPERATOR_TURNED_90_DEGREES_ANTICLOCKWISE:
			MODN.x_vel = -psx->joyL_y * MODN.speed;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80046d4:	eeb1 7a67 	vneg.f32	s14, s15
 80046d8:	4b23      	ldr	r3, [pc, #140]	; (8004768 <realMODN+0x158>)
 80046da:	edd3 7a07 	vldr	s15, [r3, #28]
 80046de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e2:	4b21      	ldr	r3, [pc, #132]	; (8004768 <realMODN+0x158>)
 80046e4:	edc3 7a00 	vstr	s15, [r3]
			MODN.y_vel = -psx->joyL_x * MODN.speed;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80046ee:	eeb1 7a67 	vneg.f32	s14, s15
 80046f2:	4b1d      	ldr	r3, [pc, #116]	; (8004768 <realMODN+0x158>)
 80046f4:	edd3 7a07 	vldr	s15, [r3, #28]
 80046f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046fc:	4b1a      	ldr	r3, [pc, #104]	; (8004768 <realMODN+0x158>)
 80046fe:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 8004702:	bf00      	nop
	}

	MODN.w_vel = ((psx->joyR_2) - (psx->joyL_2))* MODN.speed;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004710:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004714:	4b14      	ldr	r3, [pc, #80]	; (8004768 <realMODN+0x158>)
 8004716:	edd3 7a07 	vldr	s15, [r3, #28]
 800471a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800471e:	4b12      	ldr	r3, [pc, #72]	; (8004768 <realMODN+0x158>)
 8004720:	edc3 7a02 	vstr	s15, [r3, #8]
	if(MODN.x_vel==0.0 && MODN.y_vel==0.0 && MODN.w_vel==0.0){
 8004724:	4b10      	ldr	r3, [pc, #64]	; (8004768 <realMODN+0x158>)
 8004726:	edd3 7a00 	vldr	s15, [r3]
 800472a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800472e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004732:	d11b      	bne.n	800476c <realMODN+0x15c>
 8004734:	4b0c      	ldr	r3, [pc, #48]	; (8004768 <realMODN+0x158>)
 8004736:	edd3 7a01 	vldr	s15, [r3, #4]
 800473a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800473e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004742:	d113      	bne.n	800476c <realMODN+0x15c>
 8004744:	4b08      	ldr	r3, [pc, #32]	; (8004768 <realMODN+0x158>)
 8004746:	edd3 7a02 	vldr	s15, [r3, #8]
 800474a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800474e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004752:	d10b      	bne.n	800476c <realMODN+0x15c>
		if(rns->RNS_data.common_instruction != RNS_BUSY)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800475a:	2b01      	cmp	r3, #1
 800475c:	f000 8226 	beq.w	8004bac <realMODN+0x59c>
			RNSStop(rns);
 8004760:	6838      	ldr	r0, [r7, #0]
 8004762:	f004 fead 	bl	80094c0 <RNSStop>
		if(rns->RNS_data.common_instruction != RNS_BUSY)
 8004766:	e221      	b.n	8004bac <realMODN+0x59c>
 8004768:	20006a6c 	.word	0x20006a6c
	}else{
//		RNSEnquire(RNS_COORDINATE_X_Y_Z_Zrad, rns);
//		float realZrad = rns->enq.enq_buffer[3].data;
		float realZrad = pp.real_z_rad;
 800476c:	4ba2      	ldr	r3, [pc, #648]	; (80049f8 <realMODN+0x3e8>)
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	60fb      	str	r3, [r7, #12]

		if(MODN.base == MODN_FWD_OMNI) {
 8004772:	4ba2      	ldr	r3, [pc, #648]	; (80049fc <realMODN+0x3ec>)
 8004774:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004778:	2b00      	cmp	r3, #0
 800477a:	f040 8141 	bne.w	8004a00 <realMODN+0x3f0>
			MODN.vel1 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) + MODN.w_vel*MODN.d;
 800477e:	4b9f      	ldr	r3, [pc, #636]	; (80049fc <realMODN+0x3ec>)
 8004780:	ed93 8a00 	vldr	s16, [r3]
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f7fb fedf 	bl	8000548 <__aeabi_f2d>
 800478a:	4602      	mov	r2, r0
 800478c:	460b      	mov	r3, r1
 800478e:	a196      	add	r1, pc, #600	; (adr r1, 80049e8 <realMODN+0x3d8>)
 8004790:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004794:	f7fb fd78 	bl	8000288 <__aeabi_dsub>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4610      	mov	r0, r2
 800479e:	4619      	mov	r1, r3
 80047a0:	f7fc fa22 	bl	8000be8 <__aeabi_d2f>
 80047a4:	4603      	mov	r3, r0
 80047a6:	ee00 3a10 	vmov	s0, r3
 80047aa:	f019 ffc5 	bl	801e738 <cosf>
 80047ae:	eef0 7a40 	vmov.f32	s15, s0
 80047b2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80047b6:	4b91      	ldr	r3, [pc, #580]	; (80049fc <realMODN+0x3ec>)
 80047b8:	edd3 8a01 	vldr	s17, [r3, #4]
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f7fb fec3 	bl	8000548 <__aeabi_f2d>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	a188      	add	r1, pc, #544	; (adr r1, 80049e8 <realMODN+0x3d8>)
 80047c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047cc:	f7fb fd5c 	bl	8000288 <__aeabi_dsub>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4610      	mov	r0, r2
 80047d6:	4619      	mov	r1, r3
 80047d8:	f7fc fa06 	bl	8000be8 <__aeabi_d2f>
 80047dc:	4603      	mov	r3, r0
 80047de:	ee00 3a10 	vmov	s0, r3
 80047e2:	f019 fff1 	bl	801e7c8 <sinf>
 80047e6:	eef0 7a40 	vmov.f32	s15, s0
 80047ea:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80047ee:	ee38 7a27 	vadd.f32	s14, s16, s15
 80047f2:	4b82      	ldr	r3, [pc, #520]	; (80049fc <realMODN+0x3ec>)
 80047f4:	edd3 6a02 	vldr	s13, [r3, #8]
 80047f8:	4b80      	ldr	r3, [pc, #512]	; (80049fc <realMODN+0x3ec>)
 80047fa:	edd3 7a08 	vldr	s15, [r3, #32]
 80047fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004806:	4b7d      	ldr	r3, [pc, #500]	; (80049fc <realMODN+0x3ec>)
 8004808:	edc3 7a03 	vstr	s15, [r3, #12]
			MODN.vel2 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) - MODN.w_vel*MODN.d;
 800480c:	4b7b      	ldr	r3, [pc, #492]	; (80049fc <realMODN+0x3ec>)
 800480e:	ed93 8a00 	vldr	s16, [r3]
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f7fb fe98 	bl	8000548 <__aeabi_f2d>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	a174      	add	r1, pc, #464	; (adr r1, 80049f0 <realMODN+0x3e0>)
 800481e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004822:	f7fb fd31 	bl	8000288 <__aeabi_dsub>
 8004826:	4602      	mov	r2, r0
 8004828:	460b      	mov	r3, r1
 800482a:	4610      	mov	r0, r2
 800482c:	4619      	mov	r1, r3
 800482e:	f7fc f9db 	bl	8000be8 <__aeabi_d2f>
 8004832:	4603      	mov	r3, r0
 8004834:	ee00 3a10 	vmov	s0, r3
 8004838:	f019 ff7e 	bl	801e738 <cosf>
 800483c:	eef0 7a40 	vmov.f32	s15, s0
 8004840:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004844:	4b6d      	ldr	r3, [pc, #436]	; (80049fc <realMODN+0x3ec>)
 8004846:	edd3 8a01 	vldr	s17, [r3, #4]
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f7fb fe7c 	bl	8000548 <__aeabi_f2d>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	a166      	add	r1, pc, #408	; (adr r1, 80049f0 <realMODN+0x3e0>)
 8004856:	e9d1 0100 	ldrd	r0, r1, [r1]
 800485a:	f7fb fd15 	bl	8000288 <__aeabi_dsub>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	4610      	mov	r0, r2
 8004864:	4619      	mov	r1, r3
 8004866:	f7fc f9bf 	bl	8000be8 <__aeabi_d2f>
 800486a:	4603      	mov	r3, r0
 800486c:	ee00 3a10 	vmov	s0, r3
 8004870:	f019 ffaa 	bl	801e7c8 <sinf>
 8004874:	eef0 7a40 	vmov.f32	s15, s0
 8004878:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800487c:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004880:	4b5e      	ldr	r3, [pc, #376]	; (80049fc <realMODN+0x3ec>)
 8004882:	edd3 6a02 	vldr	s13, [r3, #8]
 8004886:	4b5d      	ldr	r3, [pc, #372]	; (80049fc <realMODN+0x3ec>)
 8004888:	edd3 7a08 	vldr	s15, [r3, #32]
 800488c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004890:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004894:	4b59      	ldr	r3, [pc, #356]	; (80049fc <realMODN+0x3ec>)
 8004896:	edc3 7a04 	vstr	s15, [r3, #16]
			MODN.vel3 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) + MODN.w_vel*MODN.d;
 800489a:	4b58      	ldr	r3, [pc, #352]	; (80049fc <realMODN+0x3ec>)
 800489c:	ed93 8a00 	vldr	s16, [r3]
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f7fb fe51 	bl	8000548 <__aeabi_f2d>
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	a151      	add	r1, pc, #324	; (adr r1, 80049f0 <realMODN+0x3e0>)
 80048ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048b0:	f7fb fcea 	bl	8000288 <__aeabi_dsub>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4610      	mov	r0, r2
 80048ba:	4619      	mov	r1, r3
 80048bc:	f7fc f994 	bl	8000be8 <__aeabi_d2f>
 80048c0:	4603      	mov	r3, r0
 80048c2:	ee00 3a10 	vmov	s0, r3
 80048c6:	f019 ff37 	bl	801e738 <cosf>
 80048ca:	eef0 7a40 	vmov.f32	s15, s0
 80048ce:	ee28 8a27 	vmul.f32	s16, s16, s15
 80048d2:	4b4a      	ldr	r3, [pc, #296]	; (80049fc <realMODN+0x3ec>)
 80048d4:	edd3 8a01 	vldr	s17, [r3, #4]
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f7fb fe35 	bl	8000548 <__aeabi_f2d>
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	a143      	add	r1, pc, #268	; (adr r1, 80049f0 <realMODN+0x3e0>)
 80048e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048e8:	f7fb fcce 	bl	8000288 <__aeabi_dsub>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	4610      	mov	r0, r2
 80048f2:	4619      	mov	r1, r3
 80048f4:	f7fc f978 	bl	8000be8 <__aeabi_d2f>
 80048f8:	4603      	mov	r3, r0
 80048fa:	ee00 3a10 	vmov	s0, r3
 80048fe:	f019 ff63 	bl	801e7c8 <sinf>
 8004902:	eef0 7a40 	vmov.f32	s15, s0
 8004906:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800490a:	ee38 7a27 	vadd.f32	s14, s16, s15
 800490e:	4b3b      	ldr	r3, [pc, #236]	; (80049fc <realMODN+0x3ec>)
 8004910:	edd3 6a02 	vldr	s13, [r3, #8]
 8004914:	4b39      	ldr	r3, [pc, #228]	; (80049fc <realMODN+0x3ec>)
 8004916:	edd3 7a08 	vldr	s15, [r3, #32]
 800491a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800491e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004922:	4b36      	ldr	r3, [pc, #216]	; (80049fc <realMODN+0x3ec>)
 8004924:	edc3 7a05 	vstr	s15, [r3, #20]
			MODN.vel4 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) - MODN.w_vel*MODN.d;
 8004928:	4b34      	ldr	r3, [pc, #208]	; (80049fc <realMODN+0x3ec>)
 800492a:	ed93 8a00 	vldr	s16, [r3]
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f7fb fe0a 	bl	8000548 <__aeabi_f2d>
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	a12b      	add	r1, pc, #172	; (adr r1, 80049e8 <realMODN+0x3d8>)
 800493a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800493e:	f7fb fca3 	bl	8000288 <__aeabi_dsub>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4610      	mov	r0, r2
 8004948:	4619      	mov	r1, r3
 800494a:	f7fc f94d 	bl	8000be8 <__aeabi_d2f>
 800494e:	4603      	mov	r3, r0
 8004950:	ee00 3a10 	vmov	s0, r3
 8004954:	f019 fef0 	bl	801e738 <cosf>
 8004958:	eef0 7a40 	vmov.f32	s15, s0
 800495c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004960:	4b26      	ldr	r3, [pc, #152]	; (80049fc <realMODN+0x3ec>)
 8004962:	edd3 8a01 	vldr	s17, [r3, #4]
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f7fb fdee 	bl	8000548 <__aeabi_f2d>
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	a11d      	add	r1, pc, #116	; (adr r1, 80049e8 <realMODN+0x3d8>)
 8004972:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004976:	f7fb fc87 	bl	8000288 <__aeabi_dsub>
 800497a:	4602      	mov	r2, r0
 800497c:	460b      	mov	r3, r1
 800497e:	4610      	mov	r0, r2
 8004980:	4619      	mov	r1, r3
 8004982:	f7fc f931 	bl	8000be8 <__aeabi_d2f>
 8004986:	4603      	mov	r3, r0
 8004988:	ee00 3a10 	vmov	s0, r3
 800498c:	f019 ff1c 	bl	801e7c8 <sinf>
 8004990:	eef0 7a40 	vmov.f32	s15, s0
 8004994:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004998:	ee38 7a27 	vadd.f32	s14, s16, s15
 800499c:	4b17      	ldr	r3, [pc, #92]	; (80049fc <realMODN+0x3ec>)
 800499e:	edd3 6a02 	vldr	s13, [r3, #8]
 80049a2:	4b16      	ldr	r3, [pc, #88]	; (80049fc <realMODN+0x3ec>)
 80049a4:	edd3 7a08 	vldr	s15, [r3, #32]
 80049a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049b0:	4b12      	ldr	r3, [pc, #72]	; (80049fc <realMODN+0x3ec>)
 80049b2:	edc3 7a06 	vstr	s15, [r3, #24]
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, MODN.vel4, rns);
 80049b6:	4b11      	ldr	r3, [pc, #68]	; (80049fc <realMODN+0x3ec>)
 80049b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80049bc:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <realMODN+0x3ec>)
 80049be:	ed93 7a04 	vldr	s14, [r3, #16]
 80049c2:	4b0e      	ldr	r3, [pc, #56]	; (80049fc <realMODN+0x3ec>)
 80049c4:	edd3 6a05 	vldr	s13, [r3, #20]
 80049c8:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <realMODN+0x3ec>)
 80049ca:	ed93 6a06 	vldr	s12, [r3, #24]
 80049ce:	6838      	ldr	r0, [r7, #0]
 80049d0:	eef0 1a46 	vmov.f32	s3, s12
 80049d4:	eeb0 1a66 	vmov.f32	s2, s13
 80049d8:	eef0 0a47 	vmov.f32	s1, s14
 80049dc:	eeb0 0a67 	vmov.f32	s0, s15
 80049e0:	f004 fdf2 	bl	80095c8 <RNSVelocity>
			MODN.vel1 = MODN.y_vel*sinf(2.0944-realZrad) + MODN.x_vel*cosf(2.0944-realZrad) + MODN.w_vel*MODN.d;
			MODN.vel2 = MODN.y_vel*sinf(1.0472-realZrad) + MODN.x_vel*cosf(1.0472-realZrad) - MODN.w_vel*MODN.d;
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
		}
	}
}
 80049e4:	e0e2      	b.n	8004bac <realMODN+0x59c>
 80049e6:	bf00      	nop
 80049e8:	2e48e8a7 	.word	0x2e48e8a7
 80049ec:	3fe921ff 	.word	0x3fe921ff
 80049f0:	62b6ae7d 	.word	0x62b6ae7d
 80049f4:	4002d97f 	.word	0x4002d97f
 80049f8:	20006cc4 	.word	0x20006cc4
 80049fc:	20006a6c 	.word	0x20006a6c
		else if (MODN.base == MODN_TRI_OMNI){
 8004a00:	4b71      	ldr	r3, [pc, #452]	; (8004bc8 <realMODN+0x5b8>)
 8004a02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	f040 80d0 	bne.w	8004bac <realMODN+0x59c>
			MODN.vel3 = MODN.y_vel*sinf(-realZrad) 		 + MODN.x_vel*cosf(-realZrad)  	    + MODN.w_vel*MODN.d;
 8004a0c:	4b6e      	ldr	r3, [pc, #440]	; (8004bc8 <realMODN+0x5b8>)
 8004a0e:	ed93 8a01 	vldr	s16, [r3, #4]
 8004a12:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a16:	eef1 7a67 	vneg.f32	s15, s15
 8004a1a:	eeb0 0a67 	vmov.f32	s0, s15
 8004a1e:	f019 fed3 	bl	801e7c8 <sinf>
 8004a22:	eef0 7a40 	vmov.f32	s15, s0
 8004a26:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004a2a:	4b67      	ldr	r3, [pc, #412]	; (8004bc8 <realMODN+0x5b8>)
 8004a2c:	edd3 8a00 	vldr	s17, [r3]
 8004a30:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a34:	eef1 7a67 	vneg.f32	s15, s15
 8004a38:	eeb0 0a67 	vmov.f32	s0, s15
 8004a3c:	f019 fe7c 	bl	801e738 <cosf>
 8004a40:	eef0 7a40 	vmov.f32	s15, s0
 8004a44:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004a48:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004a4c:	4b5e      	ldr	r3, [pc, #376]	; (8004bc8 <realMODN+0x5b8>)
 8004a4e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a52:	4b5d      	ldr	r3, [pc, #372]	; (8004bc8 <realMODN+0x5b8>)
 8004a54:	edd3 7a08 	vldr	s15, [r3, #32]
 8004a58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a60:	4b59      	ldr	r3, [pc, #356]	; (8004bc8 <realMODN+0x5b8>)
 8004a62:	edc3 7a05 	vstr	s15, [r3, #20]
			MODN.vel1 = MODN.y_vel*sinf(2.0944-realZrad) + MODN.x_vel*cosf(2.0944-realZrad) + MODN.w_vel*MODN.d;
 8004a66:	4b58      	ldr	r3, [pc, #352]	; (8004bc8 <realMODN+0x5b8>)
 8004a68:	ed93 8a01 	vldr	s16, [r3, #4]
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7fb fd6b 	bl	8000548 <__aeabi_f2d>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	a150      	add	r1, pc, #320	; (adr r1, 8004bb8 <realMODN+0x5a8>)
 8004a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a7c:	f7fb fc04 	bl	8000288 <__aeabi_dsub>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4610      	mov	r0, r2
 8004a86:	4619      	mov	r1, r3
 8004a88:	f7fc f8ae 	bl	8000be8 <__aeabi_d2f>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	ee00 3a10 	vmov	s0, r3
 8004a92:	f019 fe99 	bl	801e7c8 <sinf>
 8004a96:	eef0 7a40 	vmov.f32	s15, s0
 8004a9a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004a9e:	4b4a      	ldr	r3, [pc, #296]	; (8004bc8 <realMODN+0x5b8>)
 8004aa0:	edd3 8a00 	vldr	s17, [r3]
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f7fb fd4f 	bl	8000548 <__aeabi_f2d>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	a142      	add	r1, pc, #264	; (adr r1, 8004bb8 <realMODN+0x5a8>)
 8004ab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ab4:	f7fb fbe8 	bl	8000288 <__aeabi_dsub>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4610      	mov	r0, r2
 8004abe:	4619      	mov	r1, r3
 8004ac0:	f7fc f892 	bl	8000be8 <__aeabi_d2f>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	ee00 3a10 	vmov	s0, r3
 8004aca:	f019 fe35 	bl	801e738 <cosf>
 8004ace:	eef0 7a40 	vmov.f32	s15, s0
 8004ad2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004ad6:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004ada:	4b3b      	ldr	r3, [pc, #236]	; (8004bc8 <realMODN+0x5b8>)
 8004adc:	edd3 6a02 	vldr	s13, [r3, #8]
 8004ae0:	4b39      	ldr	r3, [pc, #228]	; (8004bc8 <realMODN+0x5b8>)
 8004ae2:	edd3 7a08 	vldr	s15, [r3, #32]
 8004ae6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004aea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004aee:	4b36      	ldr	r3, [pc, #216]	; (8004bc8 <realMODN+0x5b8>)
 8004af0:	edc3 7a03 	vstr	s15, [r3, #12]
			MODN.vel2 = MODN.y_vel*sinf(1.0472-realZrad) + MODN.x_vel*cosf(1.0472-realZrad) - MODN.w_vel*MODN.d;
 8004af4:	4b34      	ldr	r3, [pc, #208]	; (8004bc8 <realMODN+0x5b8>)
 8004af6:	ed93 8a01 	vldr	s16, [r3, #4]
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f7fb fd24 	bl	8000548 <__aeabi_f2d>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	a12e      	add	r1, pc, #184	; (adr r1, 8004bc0 <realMODN+0x5b0>)
 8004b06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b0a:	f7fb fbbd 	bl	8000288 <__aeabi_dsub>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	4610      	mov	r0, r2
 8004b14:	4619      	mov	r1, r3
 8004b16:	f7fc f867 	bl	8000be8 <__aeabi_d2f>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	ee00 3a10 	vmov	s0, r3
 8004b20:	f019 fe52 	bl	801e7c8 <sinf>
 8004b24:	eef0 7a40 	vmov.f32	s15, s0
 8004b28:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004b2c:	4b26      	ldr	r3, [pc, #152]	; (8004bc8 <realMODN+0x5b8>)
 8004b2e:	edd3 8a00 	vldr	s17, [r3]
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f7fb fd08 	bl	8000548 <__aeabi_f2d>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	a120      	add	r1, pc, #128	; (adr r1, 8004bc0 <realMODN+0x5b0>)
 8004b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b42:	f7fb fba1 	bl	8000288 <__aeabi_dsub>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	f7fc f84b 	bl	8000be8 <__aeabi_d2f>
 8004b52:	4603      	mov	r3, r0
 8004b54:	ee00 3a10 	vmov	s0, r3
 8004b58:	f019 fdee 	bl	801e738 <cosf>
 8004b5c:	eef0 7a40 	vmov.f32	s15, s0
 8004b60:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004b64:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004b68:	4b17      	ldr	r3, [pc, #92]	; (8004bc8 <realMODN+0x5b8>)
 8004b6a:	edd3 6a02 	vldr	s13, [r3, #8]
 8004b6e:	4b16      	ldr	r3, [pc, #88]	; (8004bc8 <realMODN+0x5b8>)
 8004b70:	edd3 7a08 	vldr	s15, [r3, #32]
 8004b74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b7c:	4b12      	ldr	r3, [pc, #72]	; (8004bc8 <realMODN+0x5b8>)
 8004b7e:	edc3 7a04 	vstr	s15, [r3, #16]
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
 8004b82:	4b11      	ldr	r3, [pc, #68]	; (8004bc8 <realMODN+0x5b8>)
 8004b84:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b88:	4b0f      	ldr	r3, [pc, #60]	; (8004bc8 <realMODN+0x5b8>)
 8004b8a:	ed93 7a04 	vldr	s14, [r3, #16]
 8004b8e:	4b0e      	ldr	r3, [pc, #56]	; (8004bc8 <realMODN+0x5b8>)
 8004b90:	edd3 6a05 	vldr	s13, [r3, #20]
 8004b94:	6838      	ldr	r0, [r7, #0]
 8004b96:	eddf 1a0d 	vldr	s3, [pc, #52]	; 8004bcc <realMODN+0x5bc>
 8004b9a:	eeb0 1a66 	vmov.f32	s2, s13
 8004b9e:	eef0 0a47 	vmov.f32	s1, s14
 8004ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ba6:	f004 fd0f 	bl	80095c8 <RNSVelocity>
}
 8004baa:	e7ff      	b.n	8004bac <realMODN+0x59c>
 8004bac:	bf00      	nop
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	ecbd 8b02 	vpop	{d8}
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	c985f06f 	.word	0xc985f06f
 8004bbc:	4000c154 	.word	0x4000c154
 8004bc0:	c985f06f 	.word	0xc985f06f
 8004bc4:	3ff0c154 	.word	0x3ff0c154
 8004bc8:	20006a6c 	.word	0x20006a6c
 8004bcc:	00000000 	.word	0x00000000

08004bd0 <setOrientationMODN>:
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
		}
	}
}
void setOrientationMODN(OrientationMODN_t orientation)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	71fb      	strb	r3, [r7, #7]
	MODN.orientation = orientation;
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	4a03      	ldr	r2, [pc, #12]	; (8004bec <setOrientationMODN+0x1c>)
 8004bde:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	20006a6c 	.word	0x20006a6c

08004bf0 <setSpeedMODN>:

void setSpeedMODN(float speed){
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	ed87 0a01 	vstr	s0, [r7, #4]
	MODN.speed = speed;
 8004bfa:	4a0c      	ldr	r2, [pc, #48]	; (8004c2c <setSpeedMODN+0x3c>)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	61d3      	str	r3, [r2, #28]
	MODN.imuGain = speed*MODN.imuGain/MODN.radTol;
 8004c00:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <setSpeedMODN+0x3c>)
 8004c02:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004c06:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c0a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004c0e:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <setSpeedMODN+0x3c>)
 8004c10:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c18:	4b04      	ldr	r3, [pc, #16]	; (8004c2c <setSpeedMODN+0x3c>)
 8004c1a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	20006a6c 	.word	0x20006a6c

08004c30 <decode_Odrive>:
		break;
	}

 * */
void decode_Odrive(Odrv_t* odrive)
{
 8004c30:	b5b0      	push	{r4, r5, r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
	float data=0;
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	60fb      	str	r3, [r7, #12]
	uint16_t id = Odrvmsg.RXmsg.StdId;
 8004c3e:	4b72      	ldr	r3, [pc, #456]	; (8004e08 <decode_Odrive+0x1d8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	82fb      	strh	r3, [r7, #22]
	uint16_t mask = 0x01F;
 8004c44:	231f      	movs	r3, #31
 8004c46:	82bb      	strh	r3, [r7, #20]
	uint16_t command=id&mask;
 8004c48:	8afa      	ldrh	r2, [r7, #22]
 8004c4a:	8abb      	ldrh	r3, [r7, #20]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	827b      	strh	r3, [r7, #18]
	if(command==GET_ENCODER_ESTIMATE){
 8004c50:	8a7b      	ldrh	r3, [r7, #18]
 8004c52:	2b09      	cmp	r3, #9
 8004c54:	d136      	bne.n	8004cc4 <decode_Odrive+0x94>

		if(odrive->type==DENG_FOC)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d102      	bne.n	8004c66 <decode_Odrive+0x36>
			odrive->busy[TURN_COUNT_AND_VELOCITY]=0;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	749a      	strb	r2, [r3, #18]
 8004c66:	4b68      	ldr	r3, [pc, #416]	; (8004e08 <decode_Odrive+0x1d8>)
 8004c68:	69db      	ldr	r3, [r3, #28]

		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004c6a:	60fb      	str	r3, [r7, #12]
		odrive->feedback.encoder=data;
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	629a      	str	r2, [r3, #40]	; 0x28
 8004c72:	4b65      	ldr	r3, [pc, #404]	; (8004e08 <decode_Odrive+0x1d8>)
 8004c74:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004c76:	60fb      	str	r3, [r7, #12]
		odrive->feedback.round_per_second=data;
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	62da      	str	r2, [r3, #44]	; 0x2c
		odrive->feedback.velocity=odrive->feedback.round_per_second*M_PI*odrive->wheel_diameter;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fb fc60 	bl	8000548 <__aeabi_f2d>
 8004c88:	a35d      	add	r3, pc, #372	; (adr r3, 8004e00 <decode_Odrive+0x1d0>)
 8004c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8e:	f7fb fcb3 	bl	80005f8 <__aeabi_dmul>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	4614      	mov	r4, r2
 8004c98:	461d      	mov	r5, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fb fc52 	bl	8000548 <__aeabi_f2d>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4620      	mov	r0, r4
 8004caa:	4629      	mov	r1, r5
 8004cac:	f7fb fca4 	bl	80005f8 <__aeabi_dmul>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	f7fb ff96 	bl	8000be8 <__aeabi_d2f>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	625a      	str	r2, [r3, #36]	; 0x24
		odrive->feedback.shadow_count=data;
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
		odrive->feedback.cpr=data;
		odrive->busy[SHADOW_COUNT]=0;
	}
}
 8004cc2:	e097      	b.n	8004df4 <decode_Odrive+0x1c4>
	else if(command==HEARTBEAT){
 8004cc4:	8a7b      	ldrh	r3, [r7, #18]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d123      	bne.n	8004d12 <decode_Odrive+0xe2>
 8004cca:	4b4f      	ldr	r3, [pc, #316]	; (8004e08 <decode_Odrive+0x1d8>)
 8004ccc:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004cce:	60fb      	str	r3, [r7, #12]
		odrive->feedback.error=data;
 8004cd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cd8:	ee17 2a90 	vmov	r2, s15
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	645a      	str	r2, [r3, #68]	; 0x44
		odrive->feedback.state=Odrvmsg.Data[4];
 8004ce0:	4b49      	ldr	r3, [pc, #292]	; (8004e08 <decode_Odrive+0x1d8>)
 8004ce2:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		odrive->feedback.traj_state = Odrvmsg.Data[7];
 8004cec:	4b46      	ldr	r3, [pc, #280]	; (8004e08 <decode_Odrive+0x1d8>)
 8004cee:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		if(odrive->feedback.traj_state == TRAJECTORY_DONE && odrive->turning == 1)//TRAJECTORY
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004cfe:	2b80      	cmp	r3, #128	; 0x80
 8004d00:	d178      	bne.n	8004df4 <decode_Odrive+0x1c4>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	7c1b      	ldrb	r3, [r3, #16]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d174      	bne.n	8004df4 <decode_Odrive+0x1c4>
			odrive->turning = 0; // Done turning
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	741a      	strb	r2, [r3, #16]
}
 8004d10:	e070      	b.n	8004df4 <decode_Odrive+0x1c4>
	else if(command==GET_BUS_VOLTAGE){
 8004d12:	8a7b      	ldrh	r3, [r7, #18]
 8004d14:	2b17      	cmp	r3, #23
 8004d16:	d109      	bne.n	8004d2c <decode_Odrive+0xfc>
 8004d18:	4b3b      	ldr	r3, [pc, #236]	; (8004e08 <decode_Odrive+0x1d8>)
 8004d1a:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004d1c:	60fb      	str	r3, [r7, #12]
		odrive->feedback.bus_voltage=data;
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	639a      	str	r2, [r3, #56]	; 0x38
		odrive->busy[BUS_VOLTAGE]=0;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	745a      	strb	r2, [r3, #17]
}
 8004d2a:	e063      	b.n	8004df4 <decode_Odrive+0x1c4>
	else if(command==GET_SENSORLESS_ESTIMATES){
 8004d2c:	8a7b      	ldrh	r3, [r7, #18]
 8004d2e:	2b15      	cmp	r3, #21
 8004d30:	d10f      	bne.n	8004d52 <decode_Odrive+0x122>
 8004d32:	4b35      	ldr	r3, [pc, #212]	; (8004e08 <decode_Odrive+0x1d8>)
 8004d34:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004d36:	60fb      	str	r3, [r7, #12]
		odrive->feedback.sensorless_estimates.position=data;
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d3e:	4b32      	ldr	r3, [pc, #200]	; (8004e08 <decode_Odrive+0x1d8>)
 8004d40:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004d42:	60fb      	str	r3, [r7, #12]
		odrive->feedback.sensorless_estimates.velocity=data;
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	661a      	str	r2, [r3, #96]	; 0x60
		odrive->busy[SENSORLESS_ESTIMATE]=0;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	75da      	strb	r2, [r3, #23]
}
 8004d50:	e050      	b.n	8004df4 <decode_Odrive+0x1c4>
	else if(command==GET_IQ){
 8004d52:	8a7b      	ldrh	r3, [r7, #18]
 8004d54:	2b14      	cmp	r3, #20
 8004d56:	d10f      	bne.n	8004d78 <decode_Odrive+0x148>
 8004d58:	4b2b      	ldr	r3, [pc, #172]	; (8004e08 <decode_Odrive+0x1d8>)
 8004d5a:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004d5c:	60fb      	str	r3, [r7, #12]
		odrive->feedback.Iq.iq_setpoint=data;
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	665a      	str	r2, [r3, #100]	; 0x64
 8004d64:	4b28      	ldr	r3, [pc, #160]	; (8004e08 <decode_Odrive+0x1d8>)
 8004d66:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004d68:	60fb      	str	r3, [r7, #12]
		odrive->feedback.Iq.iq_measured=data;
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	669a      	str	r2, [r3, #104]	; 0x68
		odrive->busy[IQ_VALUE]=0;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	755a      	strb	r2, [r3, #21]
}
 8004d76:	e03d      	b.n	8004df4 <decode_Odrive+0x1c4>
	else if(command==GET_MOTOR_ERROR){
 8004d78:	8a7b      	ldrh	r3, [r7, #18]
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	d128      	bne.n	8004dd0 <decode_Odrive+0x1a0>
 8004d7e:	4b22      	ldr	r3, [pc, #136]	; (8004e08 <decode_Odrive+0x1d8>)
 8004d80:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004d82:	60fb      	str	r3, [r7, #12]
		odrive->feedback.error_code=data;
 8004d84:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d8c:	ee17 2a90 	vmov	r2, s15
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	671a      	str	r2, [r3, #112]	; 0x70
		strcat(odrive->feedback.error_msg, Odrive_Error_To_String(odrive->feedback.error_code));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 f836 	bl	8004e10 <Odrive_Error_To_String>
 8004da4:	4603      	mov	r3, r0
 8004da6:	4619      	mov	r1, r3
 8004da8:	4620      	mov	r0, r4
 8004daa:	f015 ff66 	bl	801ac7a <strcat>
		strcat(odrive->feedback.error_msg, "\n");
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8004db4:	4620      	mov	r0, r4
 8004db6:	f7fb fa0b 	bl	80001d0 <strlen>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	4423      	add	r3, r4
 8004dbe:	4913      	ldr	r1, [pc, #76]	; (8004e0c <decode_Odrive+0x1dc>)
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	8013      	strh	r3, [r2, #0]
		odrive->busy[ODRIVE_ERROR_CODE]=0;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	759a      	strb	r2, [r3, #22]
}
 8004dce:	e011      	b.n	8004df4 <decode_Odrive+0x1c4>
	else if(command==GET_SHADOW_COUNT){
 8004dd0:	8a7b      	ldrh	r3, [r7, #18]
 8004dd2:	2b0a      	cmp	r3, #10
 8004dd4:	d10e      	bne.n	8004df4 <decode_Odrive+0x1c4>
 8004dd6:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <decode_Odrive+0x1d8>)
 8004dd8:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004dda:	60fb      	str	r3, [r7, #12]
		odrive->feedback.shadow_count=data;
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	63da      	str	r2, [r3, #60]	; 0x3c
 8004de2:	4b09      	ldr	r3, [pc, #36]	; (8004e08 <decode_Odrive+0x1d8>)
 8004de4:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004de6:	60fb      	str	r3, [r7, #12]
		odrive->feedback.cpr=data;
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	641a      	str	r2, [r3, #64]	; 0x40
		odrive->busy[SHADOW_COUNT]=0;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	751a      	strb	r2, [r3, #20]
}
 8004df4:	bf00      	nop
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bdb0      	pop	{r4, r5, r7, pc}
 8004dfc:	f3af 8000 	nop.w
 8004e00:	54442d18 	.word	0x54442d18
 8004e04:	400921fb 	.word	0x400921fb
 8004e08:	20006888 	.word	0x20006888
 8004e0c:	0801fbc8 	.word	0x0801fbc8

08004e10 <Odrive_Error_To_String>:
	memcpy(&TxBuffer[0],&vel_gains,4);
	memcpy(&TxBuffer[4],&vel_integrator_gains,4);
	OdriveSendCAN(odrive,SET_VEL_GAIN,TxBuffer);
}

const char* Odrive_Error_To_String(error_code fault) {
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
	switch (fault) {
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1e:	f000 80fd 	beq.w	800501c <Odrive_Error_To_String+0x20c>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e28:	f200 80fa 	bhi.w	8005020 <Odrive_Error_To_String+0x210>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e32:	f000 80f1 	beq.w	8005018 <Odrive_Error_To_String+0x208>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e3c:	f200 80f0 	bhi.w	8005020 <Odrive_Error_To_String+0x210>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e46:	f000 80e5 	beq.w	8005014 <Odrive_Error_To_String+0x204>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e50:	f200 80e6 	bhi.w	8005020 <Odrive_Error_To_String+0x210>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e5a:	f000 80d9 	beq.w	8005010 <Odrive_Error_To_String+0x200>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e64:	f200 80dc 	bhi.w	8005020 <Odrive_Error_To_String+0x210>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e6e:	f000 80cd 	beq.w	800500c <Odrive_Error_To_String+0x1fc>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e78:	f200 80d2 	bhi.w	8005020 <Odrive_Error_To_String+0x210>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e82:	f000 80c1 	beq.w	8005008 <Odrive_Error_To_String+0x1f8>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8c:	f200 80c8 	bhi.w	8005020 <Odrive_Error_To_String+0x210>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e96:	f000 80b5 	beq.w	8005004 <Odrive_Error_To_String+0x1f4>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea0:	f200 80be 	bhi.w	8005020 <Odrive_Error_To_String+0x210>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eaa:	f000 80a9 	beq.w	8005000 <Odrive_Error_To_String+0x1f0>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eb4:	f200 80b4 	bhi.w	8005020 <Odrive_Error_To_String+0x210>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ebe:	f000 809d 	beq.w	8004ffc <Odrive_Error_To_String+0x1ec>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ec8:	f200 80aa 	bhi.w	8005020 <Odrive_Error_To_String+0x210>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed2:	f000 8091 	beq.w	8004ff8 <Odrive_Error_To_String+0x1e8>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004edc:	f200 80a0 	bhi.w	8005020 <Odrive_Error_To_String+0x210>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ee6:	f000 8085 	beq.w	8004ff4 <Odrive_Error_To_String+0x1e4>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef0:	f200 8096 	bhi.w	8005020 <Odrive_Error_To_String+0x210>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004efa:	d079      	beq.n	8004ff0 <Odrive_Error_To_String+0x1e0>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f02:	f200 808d 	bhi.w	8005020 <Odrive_Error_To_String+0x210>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f0c:	d06e      	beq.n	8004fec <Odrive_Error_To_String+0x1dc>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f14:	f200 8084 	bhi.w	8005020 <Odrive_Error_To_String+0x210>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f1e:	d063      	beq.n	8004fe8 <Odrive_Error_To_String+0x1d8>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f26:	d87b      	bhi.n	8005020 <Odrive_Error_To_String+0x210>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b20      	cmp	r3, #32
 8004f2c:	d848      	bhi.n	8004fc0 <Odrive_Error_To_String+0x1b0>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b20      	cmp	r3, #32
 8004f32:	d875      	bhi.n	8005020 <Odrive_Error_To_String+0x210>
 8004f34:	a201      	add	r2, pc, #4	; (adr r2, 8004f3c <Odrive_Error_To_String+0x12c>)
 8004f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3a:	bf00      	nop
 8004f3c:	08004fc9 	.word	0x08004fc9
 8004f40:	08004fcd 	.word	0x08004fcd
 8004f44:	08004fd1 	.word	0x08004fd1
 8004f48:	08005021 	.word	0x08005021
 8004f4c:	08004fd5 	.word	0x08004fd5
 8004f50:	08005021 	.word	0x08005021
 8004f54:	08005021 	.word	0x08005021
 8004f58:	08005021 	.word	0x08005021
 8004f5c:	08004fd9 	.word	0x08004fd9
 8004f60:	08005021 	.word	0x08005021
 8004f64:	08005021 	.word	0x08005021
 8004f68:	08005021 	.word	0x08005021
 8004f6c:	08005021 	.word	0x08005021
 8004f70:	08005021 	.word	0x08005021
 8004f74:	08005021 	.word	0x08005021
 8004f78:	08005021 	.word	0x08005021
 8004f7c:	08004fdd 	.word	0x08004fdd
 8004f80:	08005021 	.word	0x08005021
 8004f84:	08005021 	.word	0x08005021
 8004f88:	08005021 	.word	0x08005021
 8004f8c:	08005021 	.word	0x08005021
 8004f90:	08005021 	.word	0x08005021
 8004f94:	08005021 	.word	0x08005021
 8004f98:	08005021 	.word	0x08005021
 8004f9c:	08005021 	.word	0x08005021
 8004fa0:	08005021 	.word	0x08005021
 8004fa4:	08005021 	.word	0x08005021
 8004fa8:	08005021 	.word	0x08005021
 8004fac:	08005021 	.word	0x08005021
 8004fb0:	08005021 	.word	0x08005021
 8004fb4:	08005021 	.word	0x08005021
 8004fb8:	08005021 	.word	0x08005021
 8004fbc:	08004fe1 	.word	0x08004fe1
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b40      	cmp	r3, #64	; 0x40
 8004fc4:	d00e      	beq.n	8004fe4 <Odrive_Error_To_String+0x1d4>
 8004fc6:	e02b      	b.n	8005020 <Odrive_Error_To_String+0x210>
	case NO_ERROR: return "NO_ERROR";
 8004fc8:	4b19      	ldr	r3, [pc, #100]	; (8005030 <Odrive_Error_To_String+0x220>)
 8004fca:	e02a      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case INITIALIZING: return "INITIALIZING";
 8004fcc:	4b19      	ldr	r3, [pc, #100]	; (8005034 <Odrive_Error_To_String+0x224>)
 8004fce:	e028      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case SYSTEM_LEVEL: return "SYSTEM_LEVEL";	//firmware bug / system error: memory corruption, stack overflow, frozen thread
 8004fd0:	4b19      	ldr	r3, [pc, #100]	; (8005038 <Odrive_Error_To_String+0x228>)
 8004fd2:	e026      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case TIMING_ERROR: return "TIMING_ERROR";
 8004fd4:	4b19      	ldr	r3, [pc, #100]	; (800503c <Odrive_Error_To_String+0x22c>)
 8004fd6:	e024      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case MISSING_ESTIMATE: return "MISSING_ESTIMATE";
 8004fd8:	4b19      	ldr	r3, [pc, #100]	; (8005040 <Odrive_Error_To_String+0x230>)
 8004fda:	e022      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case BAD_CONFIG: return "BAD_CONFIG";
 8004fdc:	4b19      	ldr	r3, [pc, #100]	; (8005044 <Odrive_Error_To_String+0x234>)
 8004fde:	e020      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case DRV_FAULT: return "DRV_FAULT";
 8004fe0:	4b19      	ldr	r3, [pc, #100]	; (8005048 <Odrive_Error_To_String+0x238>)
 8004fe2:	e01e      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case MISSING_INPUT: return "MISSING_INPUT";
 8004fe4:	4b19      	ldr	r3, [pc, #100]	; (800504c <Odrive_Error_To_String+0x23c>)
 8004fe6:	e01c      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case DC_BUS_OVER_VOLTAGE: return "DC_BUS_OVER_VOLTAGE";
 8004fe8:	4b19      	ldr	r3, [pc, #100]	; (8005050 <Odrive_Error_To_String+0x240>)
 8004fea:	e01a      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case DC_BUS_UNDER_VOLTAGE: return "DC_BUS_UNDER_VOLTAGE";
 8004fec:	4b19      	ldr	r3, [pc, #100]	; (8005054 <Odrive_Error_To_String+0x244>)
 8004fee:	e018      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case DC_BUS_OVER_CURRENT: return "DC_BUS_OVER_CURRENT";
 8004ff0:	4b19      	ldr	r3, [pc, #100]	; (8005058 <Odrive_Error_To_String+0x248>)
 8004ff2:	e016      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case DC_BUS_OVER_REGEN_CURRENT: return "DC_BUS_OVER_REGEN_CURRENT";
 8004ff4:	4b19      	ldr	r3, [pc, #100]	; (800505c <Odrive_Error_To_String+0x24c>)
 8004ff6:	e014      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case CURRENT_LIMIT_VIOLATION: return "CURRENT_LIMIT_VIOLATION";
 8004ff8:	4b19      	ldr	r3, [pc, #100]	; (8005060 <Odrive_Error_To_String+0x250>)
 8004ffa:	e012      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case MOTOR_OVER_TEMP: return "MOTOR_OVER_TEMP";
 8004ffc:	4b19      	ldr	r3, [pc, #100]	; (8005064 <Odrive_Error_To_String+0x254>)
 8004ffe:	e010      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case INVERTER_OVER_TEMP: return "INVERTER_OVER_TEMP";
 8005000:	4b19      	ldr	r3, [pc, #100]	; (8005068 <Odrive_Error_To_String+0x258>)
 8005002:	e00e      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case VELOCITY_LIMIT_VIOLATION: return "VELOCITY_LIMIT_VIOLATION";
 8005004:	4b19      	ldr	r3, [pc, #100]	; (800506c <Odrive_Error_To_String+0x25c>)
 8005006:	e00c      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case POSITION_LIMIT_VIOLATION: return "POSITION_LIMIT_VIOLATION";
 8005008:	4b19      	ldr	r3, [pc, #100]	; (8005070 <Odrive_Error_To_String+0x260>)
 800500a:	e00a      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case WATCHDOG_TIMER_EXPIRED: return "WATCHDOG_TIMER_EXPIRED";
 800500c:	4b19      	ldr	r3, [pc, #100]	; (8005074 <Odrive_Error_To_String+0x264>)
 800500e:	e008      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case ESTOP_REQUESTED: return "ESTOP_REQUESTED";
 8005010:	4b19      	ldr	r3, [pc, #100]	; (8005078 <Odrive_Error_To_String+0x268>)
 8005012:	e006      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case SPINOUT_DETECTED: return "SPINOUT_DETECTED";
 8005014:	4b19      	ldr	r3, [pc, #100]	; (800507c <Odrive_Error_To_String+0x26c>)
 8005016:	e004      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case OTHER_DEVICE_FAILED: return "OTHER_DEVICE_FAILED";
 8005018:	4b19      	ldr	r3, [pc, #100]	; (8005080 <Odrive_Error_To_String+0x270>)
 800501a:	e002      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case CALIBRATION_ERROR: return "CALIBRATION_ERROR";
 800501c:	4b19      	ldr	r3, [pc, #100]	; (8005084 <Odrive_Error_To_String+0x274>)
 800501e:	e000      	b.n	8005022 <Odrive_Error_To_String+0x212>
	}

	return "Unknown fault";
 8005020:	4b19      	ldr	r3, [pc, #100]	; (8005088 <Odrive_Error_To_String+0x278>)
}
 8005022:	4618      	mov	r0, r3
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	0801fbcc 	.word	0x0801fbcc
 8005034:	0801fbd8 	.word	0x0801fbd8
 8005038:	0801fbe8 	.word	0x0801fbe8
 800503c:	0801fbf8 	.word	0x0801fbf8
 8005040:	0801fc08 	.word	0x0801fc08
 8005044:	0801fc1c 	.word	0x0801fc1c
 8005048:	0801fc28 	.word	0x0801fc28
 800504c:	0801fc34 	.word	0x0801fc34
 8005050:	0801fc44 	.word	0x0801fc44
 8005054:	0801fc58 	.word	0x0801fc58
 8005058:	0801fc70 	.word	0x0801fc70
 800505c:	0801fc84 	.word	0x0801fc84
 8005060:	0801fca0 	.word	0x0801fca0
 8005064:	0801fcb8 	.word	0x0801fcb8
 8005068:	0801fcc8 	.word	0x0801fcc8
 800506c:	0801fcdc 	.word	0x0801fcdc
 8005070:	0801fcf8 	.word	0x0801fcf8
 8005074:	0801fd14 	.word	0x0801fd14
 8005078:	0801fd2c 	.word	0x0801fd2c
 800507c:	0801fd3c 	.word	0x0801fd3c
 8005080:	0801fd50 	.word	0x0801fd50
 8005084:	0801fd64 	.word	0x0801fd64
 8005088:	0801fd78 	.word	0x0801fd78

0800508c <OdriveCAN_Handler>:
}



void OdriveCAN_Handler()
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
	static int c[2];
	uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 8005092:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005096:	807b      	strh	r3, [r7, #2]
	uint16_t id = CAN1RxMessage.StdId&command_mask;
 8005098:	4b2f      	ldr	r3, [pc, #188]	; (8005158 <OdriveCAN_Handler+0xcc>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	b29a      	uxth	r2, r3
 800509e:	887b      	ldrh	r3, [r7, #2]
 80050a0:	4013      	ands	r3, r2
 80050a2:	803b      	strh	r3, [r7, #0]
	id=id>>5;
 80050a4:	883b      	ldrh	r3, [r7, #0]
 80050a6:	095b      	lsrs	r3, r3, #5
 80050a8:	803b      	strh	r3, [r7, #0]
	int i=0;
 80050aa:	2300      	movs	r3, #0
 80050ac:	607b      	str	r3, [r7, #4]
	for( i=0 ; i < number_of_odrive; i++)
 80050ae:	2300      	movs	r3, #0
 80050b0:	607b      	str	r3, [r7, #4]
 80050b2:	e01f      	b.n	80050f4 <OdriveCAN_Handler+0x68>
	{
		if(id == P_to_Odrive[i]->Instance)
 80050b4:	4b29      	ldr	r3, [pc, #164]	; (800515c <OdriveCAN_Handler+0xd0>)
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	8b1b      	ldrh	r3, [r3, #24]
 80050c2:	883a      	ldrh	r2, [r7, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d112      	bne.n	80050ee <OdriveCAN_Handler+0x62>
		{
			decode_Odrive(P_to_Odrive[i]);
 80050c8:	4b24      	ldr	r3, [pc, #144]	; (800515c <OdriveCAN_Handler+0xd0>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff fdab 	bl	8004c30 <decode_Odrive>
			c[i]++;
 80050da:	4a21      	ldr	r2, [pc, #132]	; (8005160 <OdriveCAN_Handler+0xd4>)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	491e      	ldr	r1, [pc, #120]	; (8005160 <OdriveCAN_Handler+0xd4>)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 80050ec:	e007      	b.n	80050fe <OdriveCAN_Handler+0x72>
	for( i=0 ; i < number_of_odrive; i++)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3301      	adds	r3, #1
 80050f2:	607b      	str	r3, [r7, #4]
 80050f4:	4b1b      	ldr	r3, [pc, #108]	; (8005164 <OdriveCAN_Handler+0xd8>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	dbda      	blt.n	80050b4 <OdriveCAN_Handler+0x28>
		//			decode_Odrive(&Odrv2);
		//			break;
		//		}
	}

	if(c[0]==100)
 80050fe:	4b18      	ldr	r3, [pc, #96]	; (8005160 <OdriveCAN_Handler+0xd4>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b64      	cmp	r3, #100	; 0x64
 8005104:	d111      	bne.n	800512a <OdriveCAN_Handler+0x9e>
	{
		c[0]=0;
 8005106:	4b16      	ldr	r3, [pc, #88]	; (8005160 <OdriveCAN_Handler+0xd4>)
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]
		GPIOC_OUT->bit14=!GPIOC_OUT->bit14;
 800510c:	4b16      	ldr	r3, [pc, #88]	; (8005168 <OdriveCAN_Handler+0xdc>)
 800510e:	785b      	ldrb	r3, [r3, #1]
 8005110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005114:	b2db      	uxtb	r3, r3
 8005116:	4a14      	ldr	r2, [pc, #80]	; (8005168 <OdriveCAN_Handler+0xdc>)
 8005118:	2b00      	cmp	r3, #0
 800511a:	bf0c      	ite	eq
 800511c:	2301      	moveq	r3, #1
 800511e:	2300      	movne	r3, #0
 8005120:	b2d9      	uxtb	r1, r3
 8005122:	7853      	ldrb	r3, [r2, #1]
 8005124:	f361 1386 	bfi	r3, r1, #6, #1
 8005128:	7053      	strb	r3, [r2, #1]
	}

	if(c[1]==100)
 800512a:	4b0d      	ldr	r3, [pc, #52]	; (8005160 <OdriveCAN_Handler+0xd4>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2b64      	cmp	r3, #100	; 0x64
 8005130:	d10e      	bne.n	8005150 <OdriveCAN_Handler+0xc4>
	{
		c[1]=0;
 8005132:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <OdriveCAN_Handler+0xd4>)
 8005134:	2200      	movs	r2, #0
 8005136:	605a      	str	r2, [r3, #4]
		GPIOC_OUT->bit15=!GPIOC_OUT->bit15;
 8005138:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <OdriveCAN_Handler+0xdc>)
 800513a:	785b      	ldrb	r3, [r3, #1]
 800513c:	b25b      	sxtb	r3, r3
 800513e:	4a0a      	ldr	r2, [pc, #40]	; (8005168 <OdriveCAN_Handler+0xdc>)
 8005140:	43db      	mvns	r3, r3
 8005142:	b2db      	uxtb	r3, r3
 8005144:	09db      	lsrs	r3, r3, #7
 8005146:	b2d9      	uxtb	r1, r3
 8005148:	7853      	ldrb	r3, [r2, #1]
 800514a:	f361 13c7 	bfi	r3, r1, #7, #1
 800514e:	7053      	strb	r3, [r2, #1]
	}

}
 8005150:	bf00      	nop
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	2000a4f0 	.word	0x2000a4f0
 800515c:	2000a614 	.word	0x2000a614
 8005160:	200002c8 	.word	0x200002c8
 8005164:	200002c4 	.word	0x200002c4
 8005168:	40020814 	.word	0x40020814

0800516c <PIDSourceInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void PIDSourceInit (float *in, float *out, PID_t *pid)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
	pid->error = in;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	605a      	str	r2, [r3, #4]
	pid->out_put = out;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	609a      	str	r2, [r3, #8]
}
 8005184:	bf00      	nop
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <PIDGainInit>:

void PIDGainInit(float ts, float sat, float ke, float ku, float kp, float ki,
									float kd, float kn, PID_t *pid)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08a      	sub	sp, #40	; 0x28
 8005194:	af00      	add	r7, sp, #0
 8005196:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800519a:	edc7 0a08 	vstr	s1, [r7, #32]
 800519e:	ed87 1a07 	vstr	s2, [r7, #28]
 80051a2:	edc7 1a06 	vstr	s3, [r7, #24]
 80051a6:	ed87 2a05 	vstr	s4, [r7, #20]
 80051aa:	edc7 2a04 	vstr	s5, [r7, #16]
 80051ae:	ed87 3a03 	vstr	s6, [r7, #12]
 80051b2:	edc7 3a02 	vstr	s7, [r7, #8]
 80051b6:	6078      	str	r0, [r7, #4]
	pid->K[TS] = ts;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051bc:	60da      	str	r2, [r3, #12]
	pid->K[SAT] = sat;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a3a      	ldr	r2, [r7, #32]
 80051c2:	611a      	str	r2, [r3, #16]
	pid->K[KE] = ke;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	69fa      	ldr	r2, [r7, #28]
 80051c8:	615a      	str	r2, [r3, #20]
	pid->K[KU] = ku;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	619a      	str	r2, [r3, #24]
	pid->K[KP] = kp;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	61da      	str	r2, [r3, #28]
	pid->K[KI] = ki;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	621a      	str	r2, [r3, #32]
	pid->K[KD] = kd;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	625a      	str	r2, [r3, #36]	; 0x24
	pid->K[KN] = kn;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	629a      	str	r2, [r3, #40]	; 0x28
	PIDCoeffCalc(pid);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f81b 	bl	8005224 <PIDCoeffCalc>
//	pid->K[D_1] = (((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) / (pid->K[KN] * pid->K[TS] + 2);
//	} else {
//		pid->pd_flag = 0;
//		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0;
//	}
}
 80051ee:	bf00      	nop
 80051f0:	3728      	adds	r7, #40	; 0x28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <PIDGainSet>:

void PIDGainSet (unsigned char a, float value, PID_t *pid)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b084      	sub	sp, #16
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	4603      	mov	r3, r0
 80051fe:	ed87 0a02 	vstr	s0, [r7, #8]
 8005202:	6079      	str	r1, [r7, #4]
 8005204:	73fb      	strb	r3, [r7, #15]
	pid->K[a] = value;
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	3302      	adds	r3, #2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	3304      	adds	r3, #4
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	601a      	str	r2, [r3, #0]
	PIDCoeffCalc(pid);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f804 	bl	8005224 <PIDCoeffCalc>
}
 800521c:	bf00      	nop
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <PIDCoeffCalc>:

void PIDCoeffCalc (PID_t *pid)
{
 8005224:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005228:	b082      	sub	sp, #8
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
	if (pid->K[KI] != 0){
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	edd3 7a08 	vldr	s15, [r3, #32]
 8005234:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800523c:	d013      	beq.n	8005266 <PIDCoeffCalc+0x42>
		pid->K[B_0] = (pid->K[TS] * pid->K[KI]) * 0.5;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	ed93 7a03 	vldr	s14, [r3, #12]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	edd3 7a08 	vldr	s15, [r3, #32]
 800524a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800524e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		pid->K[B_1] = pid->K[B_0];
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	631a      	str	r2, [r3, #48]	; 0x30
 8005264:	e007      	b.n	8005276 <PIDCoeffCalc+0x52>
	} else {
		pid->K[B_0] = pid->K[B_1] = 0;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	631a      	str	r2, [r3, #48]	; 0x30
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	edd3 7a07 	vldr	s15, [r3, #28]
 800527c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005284:	d108      	bne.n	8005298 <PIDCoeffCalc+0x74>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800528c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005294:	f000 80ef 	beq.w	8005476 <PIDCoeffCalc+0x252>
	pid->K[C_1] = -((pid->K[TS] * pid->K[KN] - 2.0) / (pid->K[TS] * pid->K[KN] + 2.0));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	ed93 7a03 	vldr	s14, [r3, #12]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80052a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a8:	ee17 0a90 	vmov	r0, s15
 80052ac:	f7fb f94c 	bl	8000548 <__aeabi_f2d>
 80052b0:	f04f 0200 	mov.w	r2, #0
 80052b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052b8:	f7fa ffe6 	bl	8000288 <__aeabi_dsub>
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	4614      	mov	r4, r2
 80052c2:	461d      	mov	r5, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80052d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052d4:	ee17 0a90 	vmov	r0, s15
 80052d8:	f7fb f936 	bl	8000548 <__aeabi_f2d>
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052e4:	f7fa ffd2 	bl	800028c <__adddf3>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4620      	mov	r0, r4
 80052ee:	4629      	mov	r1, r5
 80052f0:	f7fb faac 	bl	800084c <__aeabi_ddiv>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4610      	mov	r0, r2
 80052fa:	4619      	mov	r1, r3
 80052fc:	f7fb fc74 	bl	8000be8 <__aeabi_d2f>
 8005300:	4603      	mov	r3, r0
 8005302:	ee07 3a90 	vmov	s15, r3
 8005306:	eef1 7a67 	vneg.f32	s15, s15
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->K[D_0] = (pid->K[KP] + ((2.0 * pid->K[KD] * pid->K[KN]) / (pid->K[KN] * pid->K[TS] + 2.0)));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	4618      	mov	r0, r3
 8005316:	f7fb f917 	bl	8000548 <__aeabi_f2d>
 800531a:	4604      	mov	r4, r0
 800531c:	460d      	mov	r5, r1
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	4618      	mov	r0, r3
 8005324:	f7fb f910 	bl	8000548 <__aeabi_f2d>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	f7fa ffae 	bl	800028c <__adddf3>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4690      	mov	r8, r2
 8005336:	4699      	mov	r9, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533c:	4618      	mov	r0, r3
 800533e:	f7fb f903 	bl	8000548 <__aeabi_f2d>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4640      	mov	r0, r8
 8005348:	4649      	mov	r1, r9
 800534a:	f7fb f955 	bl	80005f8 <__aeabi_dmul>
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	4690      	mov	r8, r2
 8005354:	4699      	mov	r9, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005366:	ee17 0a90 	vmov	r0, s15
 800536a:	f7fb f8ed 	bl	8000548 <__aeabi_f2d>
 800536e:	f04f 0200 	mov.w	r2, #0
 8005372:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005376:	f7fa ff89 	bl	800028c <__adddf3>
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	4640      	mov	r0, r8
 8005380:	4649      	mov	r1, r9
 8005382:	f7fb fa63 	bl	800084c <__aeabi_ddiv>
 8005386:	4602      	mov	r2, r0
 8005388:	460b      	mov	r3, r1
 800538a:	4620      	mov	r0, r4
 800538c:	4629      	mov	r1, r5
 800538e:	f7fa ff7d 	bl	800028c <__adddf3>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	4610      	mov	r0, r2
 8005398:	4619      	mov	r1, r3
 800539a:	f7fb fc25 	bl	8000be8 <__aeabi_d2f>
 800539e:	4602      	mov	r2, r0
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	639a      	str	r2, [r3, #56]	; 0x38
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80053b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b4:	ee17 0a90 	vmov	r0, s15
 80053b8:	f7fb f8c6 	bl	8000548 <__aeabi_f2d>
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80053c4:	f7fa ff60 	bl	8000288 <__aeabi_dsub>
 80053c8:	4602      	mov	r2, r0
 80053ca:	460b      	mov	r3, r1
 80053cc:	4614      	mov	r4, r2
 80053ce:	461d      	mov	r5, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7fb f8b7 	bl	8000548 <__aeabi_f2d>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	4620      	mov	r0, r4
 80053e0:	4629      	mov	r1, r5
 80053e2:	f7fb f909 	bl	80005f8 <__aeabi_dmul>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4614      	mov	r4, r2
 80053ec:	461d      	mov	r5, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fb f8a8 	bl	8000548 <__aeabi_f2d>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	f7fa ff46 	bl	800028c <__adddf3>
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	4690      	mov	r8, r2
 8005406:	4699      	mov	r9, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540c:	4618      	mov	r0, r3
 800540e:	f7fb f89b 	bl	8000548 <__aeabi_f2d>
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	4640      	mov	r0, r8
 8005418:	4649      	mov	r1, r9
 800541a:	f7fb f8ed 	bl	80005f8 <__aeabi_dmul>
 800541e:	4602      	mov	r2, r0
 8005420:	460b      	mov	r3, r1
 8005422:	4620      	mov	r0, r4
 8005424:	4629      	mov	r1, r5
 8005426:	f7fa ff2f 	bl	8000288 <__aeabi_dsub>
 800542a:	4602      	mov	r2, r0
 800542c:	460b      	mov	r3, r1
 800542e:	4614      	mov	r4, r2
 8005430:	461d      	mov	r5, r3
					(pid->K[KN] * pid->K[TS] + 2.0));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	edd3 7a03 	vldr	s15, [r3, #12]
 800543e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005442:	ee17 0a90 	vmov	r0, s15
 8005446:	f7fb f87f 	bl	8000548 <__aeabi_f2d>
 800544a:	f04f 0200 	mov.w	r2, #0
 800544e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005452:	f7fa ff1b 	bl	800028c <__adddf3>
 8005456:	4602      	mov	r2, r0
 8005458:	460b      	mov	r3, r1
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 800545a:	4620      	mov	r0, r4
 800545c:	4629      	mov	r1, r5
 800545e:	f7fb f9f5 	bl	800084c <__aeabi_ddiv>
 8005462:	4602      	mov	r2, r0
 8005464:	460b      	mov	r3, r1
 8005466:	4610      	mov	r0, r2
 8005468:	4619      	mov	r1, r3
 800546a:	f7fb fbbd 	bl	8000be8 <__aeabi_d2f>
 800546e:	4602      	mov	r2, r0
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	63da      	str	r2, [r3, #60]	; 0x3c
 8005474:	e00c      	b.n	8005490 <PIDCoeffCalc+0x26c>
	} else {
		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0.0;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f04f 0200 	mov.w	r2, #0
 800547c:	63da      	str	r2, [r3, #60]	; 0x3c
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	639a      	str	r2, [r3, #56]	; 0x38
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 800548e:	bf00      	nop
 8005490:	bf00      	nop
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800549a <PIDDelayInit>:

void PIDDelayInit (PID_t *pid)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
//	unsigned char i;
//	for(i = 0; i < 2; i++){
//		pid->i_delay[i] = 0;
//		pid->d_delay[i] = 0;
//	}
	pid->i_delay[0] = 0.0;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f04f 0200 	mov.w	r2, #0
 80054a8:	641a      	str	r2, [r3, #64]	; 0x40
	pid->i_delay[1] = 0.0;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f04f 0200 	mov.w	r2, #0
 80054b0:	645a      	str	r2, [r3, #68]	; 0x44
	pid->d_delay[0] = 0.0;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f04f 0200 	mov.w	r2, #0
 80054b8:	649a      	str	r2, [r3, #72]	; 0x48
	pid->d_delay[1] = 0.0;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->s_delay = 0.0;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <PID>:
{
	return !pid->s_flag;	/* 1 is not saturated, 0 is saturated */
}

void PID (PID_t *pid)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b087      	sub	sp, #28
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
	/* Error ******************************************************************/
	float input_buffer, error;

	input_buffer = *pid->error;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	613b      	str	r3, [r7, #16]
	error = input_buffer * pid->K[KE];
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	edd3 7a05 	vldr	s15, [r3, #20]
 80054ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80054f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054f4:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Reset previous sum *****************************************************/
	pid->s_delay = 0;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f04f 0200 	mov.w	r2, #0
 80054fe:	651a      	str	r2, [r3, #80]	; 0x50

	/* I algorithm ************************************************************/

	if (pid->K[KI] != 0){
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	edd3 7a08 	vldr	s15, [r3, #32]
 8005506:	eef5 7a40 	vcmp.f32	s15, #0.0
 800550a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550e:	d033      	beq.n	8005578 <PID+0xa2>
		if (pid->s_flag){     //flag only, so 0 or 1...
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <PID+0x5e>
			pid->i_delay[1] = error + pid->i_delay[0];      //it is not saturated, so it will continue add error
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8005524:	edd7 7a03 	vldr	s15, [r7, #12]
 8005528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8005532:	e003      	b.n	800553c <PID+0x66>
		} else {
			pid->i_delay[1] = pid->i_delay[0];				//it is saturated already, so all pid->i_delay will be constant
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800554e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005552:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ (pid->K[B_1] * pid->i_delay[0]);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005562:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005566:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->i_delay[0] = pid->i_delay[1];
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	641a      	str	r2, [r3, #64]	; 0x40

// since final output is addition of 2 outputs, so pid->s_delay will combine with the equation in document..

	/* PD algorithm ***********************************************************/

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){       				// i has change behind KP to KD..
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	edd3 7a07 	vldr	s15, [r3, #28]
 800557e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005586:	d107      	bne.n	8005598 <PID+0xc2>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800558e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005596:	d02c      	beq.n	80055f2 <PID+0x11c>
		pid->d_delay[1] = error + pid->K[C_1] * pid->d_delay[0];  		//pid->d_delay[0] is old value,pid->d_delay[1]is new value,so both are different values
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80055a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80055ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80055c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055cc:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ pid->K[D_1] * pid->d_delay[0];
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80055dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055e0:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->d_delay[0] = pid->d_delay[1];
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	649a      	str	r2, [r3, #72]	; 0x48
	}

	/* Saturation element *****************************************************/
	float output_buffer, output;

	output_buffer = pid->s_delay;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f6:	60bb      	str	r3, [r7, #8]
	if (output_buffer > pid->K[SAT]){
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80055fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8005602:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800560a:	dd0f      	ble.n	800562c <PID+0x156>
		output = (pid->K[SAT] * pid->K[KU]);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	ed93 7a04 	vldr	s14, [r3, #16]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	edd3 7a06 	vldr	s15, [r3, #24]
 8005618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800561c:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	7813      	ldrb	r3, [r2, #0]
 8005624:	f36f 0300 	bfc	r3, #0, #1
 8005628:	7013      	strb	r3, [r2, #0]
 800562a:	e02b      	b.n	8005684 <PID+0x1ae>
	}else if (output_buffer < -(pid->K[SAT])){
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	edd3 7a04 	vldr	s15, [r3, #16]
 8005632:	eef1 7a67 	vneg.f32	s15, s15
 8005636:	ed97 7a02 	vldr	s14, [r7, #8]
 800563a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800563e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005642:	d511      	bpl.n	8005668 <PID+0x192>
		output = -(pid->K[SAT] * pid->K[KU]);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	ed93 7a04 	vldr	s14, [r3, #16]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005654:	eef1 7a67 	vneg.f32	s15, s15
 8005658:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	7813      	ldrb	r3, [r2, #0]
 8005660:	f36f 0300 	bfc	r3, #0, #1
 8005664:	7013      	strb	r3, [r2, #0]
 8005666:	e00d      	b.n	8005684 <PID+0x1ae>
	}else {
		output = (output_buffer * pid->K[KU]);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	edd3 7a06 	vldr	s15, [r3, #24]
 800566e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005676:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 1;							/* Not saturated */
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	7813      	ldrb	r3, [r2, #0]
 800567e:	f043 0301 	orr.w	r3, r3, #1
 8005682:	7013      	strb	r3, [r2, #0]
	}

	/* Output *****************************************************************/
	*pid->out_put = output;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	601a      	str	r2, [r3, #0]
}
 800568c:	bf00      	nop
 800568e:	371c      	adds	r7, #28
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <PPInit>:
#include "../adapter.h"

void PPInit(uint8_t base,float *qeix, float *qeiy, float*imu,PathPlan_t *pp)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	60b9      	str	r1, [r7, #8]
 80056a0:	607a      	str	r2, [r7, #4]
 80056a2:	603b      	str	r3, [r7, #0]
 80056a4:	4603      	mov	r3, r0
 80056a6:	73fb      	strb	r3, [r7, #15]
	pp->base_shape=base;
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	7bfa      	ldrb	r2, [r7, #15]
 80056ac:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
	pp->qeix = qeix;
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	601a      	str	r2, [r3, #0]
	pp->qeiy = qeiy;
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	605a      	str	r2, [r3, #4]
	pp->yaw = imu;
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	609a      	str	r2, [r3, #8]
	pp->point_start=1;
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 80056c8:	f043 0302 	orr.w	r3, r3, #2
 80056cc:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538

	PIDSourceInit(&(pp->error_x), &(pp->outx), &(pp->x));
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	f503 702c 	add.w	r0, r3, #688	; 0x2b0
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80056e2:	461a      	mov	r2, r3
 80056e4:	f7ff fd42 	bl	800516c <PIDSourceInit>
	PIDGainInit(0.005, 1.0, 1.0, 1.0, 1.0, 0.0, 0.4, 30.0, &(pp->x));
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80056ee:	4618      	mov	r0, r3
 80056f0:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80056f4:	ed9f 3a48 	vldr	s6, [pc, #288]	; 8005818 <PPInit+0x180>
 80056f8:	eddf 2a48 	vldr	s5, [pc, #288]	; 800581c <PPInit+0x184>
 80056fc:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8005700:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8005704:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005708:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800570c:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8005820 <PPInit+0x188>
 8005710:	f7ff fd3e 	bl	8005190 <PIDGainInit>
	PIDDelayInit(&(pp->x));
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff febd 	bl	800549a <PIDDelayInit>

	PIDSourceInit(&(pp->error_y), &(pp->outy), &(pp->y));
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005732:	461a      	mov	r2, r3
 8005734:	f7ff fd1a 	bl	800516c <PIDSourceInit>
	PIDGainInit(0.005, 1.0, 1.0, 1.0, 1.0, 0.0, 0.4, 30.0, &(pp->y));
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800573e:	4618      	mov	r0, r3
 8005740:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8005744:	ed9f 3a34 	vldr	s6, [pc, #208]	; 8005818 <PPInit+0x180>
 8005748:	eddf 2a34 	vldr	s5, [pc, #208]	; 800581c <PPInit+0x184>
 800574c:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8005750:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8005754:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005758:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800575c:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8005820 <PPInit+0x188>
 8005760:	f7ff fd16 	bl	8005190 <PIDGainInit>
	PIDDelayInit(&(pp->y));
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff fe95 	bl	800549a <PIDDelayInit>

	PIDSourceInit(&(pp->error_z), &(pp->outz), &(pp->z));
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	f503 702e 	add.w	r0, r3, #696	; 0x2b8
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005782:	461a      	mov	r2, r3
 8005784:	f7ff fcf2 	bl	800516c <PIDSourceInit>
	PIDGainInit(0.005, 1.0, (1.0 / 30.0), 0.5, 5.0, 0.2, 0.2, 30.0, &(pp->z));
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800578e:	4618      	mov	r0, r3
 8005790:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8005794:	ed9f 3a23 	vldr	s6, [pc, #140]	; 8005824 <PPInit+0x18c>
 8005798:	eddf 2a22 	vldr	s5, [pc, #136]	; 8005824 <PPInit+0x18c>
 800579c:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 80057a0:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 80057a4:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8005828 <PPInit+0x190>
 80057a8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80057ac:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8005820 <PPInit+0x188>
 80057b0:	f7ff fcee 	bl	8005190 <PIDGainInit>
	PIDDelayInit(&(pp->z));
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7ff fe6d 	bl	800549a <PIDDelayInit>

	pp->tol_xy=0.20;
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	4a1a      	ldr	r2, [pc, #104]	; (800582c <PPInit+0x194>)
 80057c4:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	pp->tol_z=5.0;
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	4a19      	ldr	r2, [pc, #100]	; (8005830 <PPInit+0x198>)
 80057cc:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc

	pp->tol_xy_crv= 0.6;
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	4a18      	ldr	r2, [pc, #96]	; (8005834 <PPInit+0x19c>)
 80057d4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

	pp->f_tol_xy=0.06;
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	4a17      	ldr	r2, [pc, #92]	; (8005838 <PPInit+0x1a0>)
 80057dc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
	pp->f_tol_z=5.0;
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	4a13      	ldr	r2, [pc, #76]	; (8005830 <PPInit+0x198>)
 80057e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	pp->yaw_offset=*(pp->yaw);
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	625a      	str	r2, [r3, #36]	; 0x24
	pp->prev_real_z = 0;
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	615a      	str	r2, [r3, #20]
	pp->real_z = 0;
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	611a      	str	r2, [r3, #16]
	pp->rotate_only = 0;
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005808:	f36f 1304 	bfc	r3, #4, #1
 800580c:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
}
 8005810:	bf00      	nop
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	3ecccccd 	.word	0x3ecccccd
 800581c:	00000000 	.word	0x00000000
 8005820:	3ba3d70a 	.word	0x3ba3d70a
 8005824:	3e4ccccd 	.word	0x3e4ccccd
 8005828:	3d088889 	.word	0x3d088889
 800582c:	3e4ccccd 	.word	0x3e4ccccd
 8005830:	40a00000 	.word	0x40a00000
 8005834:	3f19999a 	.word	0x3f19999a
 8005838:	3d75c28f 	.word	0x3d75c28f

0800583c <PP_PIDPathSet>:

void PP_PIDPathSet(float kp, float ki, float kd, PathPlan_t *pp)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	ed87 0a03 	vstr	s0, [r7, #12]
 8005846:	edc7 0a02 	vstr	s1, [r7, #8]
 800584a:	ed87 1a01 	vstr	s2, [r7, #4]
 800584e:	6038      	str	r0, [r7, #0]
	pp->kp[0]=kp;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	pp->ki[0]=ki;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	pp->kd[0]=kd;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c

	PIDGainSet(KP,kp,&(pp->x));
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800586e:	4619      	mov	r1, r3
 8005870:	ed97 0a03 	vldr	s0, [r7, #12]
 8005874:	2004      	movs	r0, #4
 8005876:	f7ff fcbe 	bl	80051f6 <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->x));
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005880:	4619      	mov	r1, r3
 8005882:	ed97 0a02 	vldr	s0, [r7, #8]
 8005886:	2005      	movs	r0, #5
 8005888:	f7ff fcb5 	bl	80051f6 <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->x));
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005892:	4619      	mov	r1, r3
 8005894:	ed97 0a01 	vldr	s0, [r7, #4]
 8005898:	2006      	movs	r0, #6
 800589a:	f7ff fcac 	bl	80051f6 <PIDGainSet>

	PIDGainSet(KP,kp,&(pp->y));
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80058a4:	4619      	mov	r1, r3
 80058a6:	ed97 0a03 	vldr	s0, [r7, #12]
 80058aa:	2004      	movs	r0, #4
 80058ac:	f7ff fca3 	bl	80051f6 <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->y));
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80058b6:	4619      	mov	r1, r3
 80058b8:	ed97 0a02 	vldr	s0, [r7, #8]
 80058bc:	2005      	movs	r0, #5
 80058be:	f7ff fc9a 	bl	80051f6 <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->y));
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80058c8:	4619      	mov	r1, r3
 80058ca:	ed97 0a01 	vldr	s0, [r7, #4]
 80058ce:	2006      	movs	r0, #6
 80058d0:	f7ff fc91 	bl	80051f6 <PIDGainSet>
}
 80058d4:	bf00      	nop
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <PP_PIDZSet>:

void PP_PIDZSet(float kp, float ki, float kd, float ku, PathPlan_t *pp){
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	ed87 0a05 	vstr	s0, [r7, #20]
 80058e6:	edc7 0a04 	vstr	s1, [r7, #16]
 80058ea:	ed87 1a03 	vstr	s2, [r7, #12]
 80058ee:	edc7 1a02 	vstr	s3, [r7, #8]
 80058f2:	6078      	str	r0, [r7, #4]

	PIDGainSet(KP,kp,&(pp->z));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80058fa:	4619      	mov	r1, r3
 80058fc:	ed97 0a05 	vldr	s0, [r7, #20]
 8005900:	2004      	movs	r0, #4
 8005902:	f7ff fc78 	bl	80051f6 <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->z));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800590c:	4619      	mov	r1, r3
 800590e:	ed97 0a04 	vldr	s0, [r7, #16]
 8005912:	2005      	movs	r0, #5
 8005914:	f7ff fc6f 	bl	80051f6 <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->z));
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800591e:	4619      	mov	r1, r3
 8005920:	ed97 0a03 	vldr	s0, [r7, #12]
 8005924:	2006      	movs	r0, #6
 8005926:	f7ff fc66 	bl	80051f6 <PIDGainSet>
	PIDGainSet(KU,ku,&(pp->z));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005930:	4619      	mov	r1, r3
 8005932:	ed97 0a02 	vldr	s0, [r7, #8]
 8005936:	2003      	movs	r0, #3
 8005938:	f7ff fc5d 	bl	80051f6 <PIDGainSet>
	pp->pp_orgz_kp = kp;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	601a      	str	r2, [r3, #0]
}
 8005946:	bf00      	nop
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <PP_PIDEndSet>:

void PP_PIDEndSet(float kp, float ki, float kd, PathPlan_t *pp)
{
 800594e:	b480      	push	{r7}
 8005950:	b085      	sub	sp, #20
 8005952:	af00      	add	r7, sp, #0
 8005954:	ed87 0a03 	vstr	s0, [r7, #12]
 8005958:	edc7 0a02 	vstr	s1, [r7, #8]
 800595c:	ed87 1a01 	vstr	s2, [r7, #4]
 8005960:	6038      	str	r0, [r7, #0]
	pp->kp[1]=kp;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	pp->ki[1]=ki;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	pp->kd[1]=kd;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
}
 800597a:	bf00      	nop
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <PP_start>:

void PP_start(float point[][7],int no_point,PathPlan_t *pp)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	ed2d 8b02 	vpush	{d8}
 800598c:	b086      	sub	sp, #24
 800598e:	af00      	add	r7, sp, #0
 8005990:	60f8      	str	r0, [r7, #12]
 8005992:	60b9      	str	r1, [r7, #8]
 8005994:	607a      	str	r2, [r7, #4]
	int i;
	for(i=0;i<no_point;i++)
 8005996:	2300      	movs	r3, #0
 8005998:	617b      	str	r3, [r7, #20]
 800599a:	e114      	b.n	8005bc6 <PP_start+0x240>
	{
		pp->target_vel[i] = point[i][0];
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	4613      	mov	r3, r2
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	1a9b      	subs	r3, r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	461a      	mov	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4413      	add	r3, r2
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	3374      	adds	r3, #116	; 0x74
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	440b      	add	r3, r1
 80059b8:	601a      	str	r2, [r3, #0]
		pp->target_x[i] = point[i][1] + pp->real_x;
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	4613      	mov	r3, r2
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	1a9b      	subs	r3, r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	461a      	mov	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4413      	add	r3, r2
 80059ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80059d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	331a      	adds	r3, #26
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	edc3 7a00 	vstr	s15, [r3]
		pp->target_y[i] = point[i][2] + pp->real_y;
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	4613      	mov	r3, r2
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	1a9b      	subs	r3, r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	461a      	mov	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4413      	add	r3, r2
 80059f6:	ed93 7a02 	vldr	s14, [r3, #8]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005a00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	3328      	adds	r3, #40	; 0x28
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	3304      	adds	r3, #4
 8005a10:	edc3 7a00 	vstr	s15, [r3]
		pp->target_accurate[i] = point[i][5]; // point_lock
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	4613      	mov	r3, r2
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	1a9b      	subs	r3, r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	461a      	mov	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	695a      	ldr	r2, [r3, #20]
 8005a26:	6879      	ldr	r1, [r7, #4]
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	3346      	adds	r3, #70	; 0x46
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	440b      	add	r3, r1
 8005a30:	3304      	adds	r3, #4
 8005a32:	601a      	str	r2, [r3, #0]
		pp->pp_crv_radius[i] =  point[i][6];
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	4613      	mov	r3, r2
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	1a9b      	subs	r3, r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	461a      	mov	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4413      	add	r3, r2
 8005a44:	699a      	ldr	r2, [r3, #24]
 8005a46:	6879      	ldr	r1, [r7, #4]
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	440b      	add	r3, r1
 8005a52:	3304      	adds	r3, #4
 8005a54:	601a      	str	r2, [r3, #0]
		if(i == 0)
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d11f      	bne.n	8005a9c <PP_start+0x116>
			pp->target_angle1[0] = atanf((fabs)(point[0][2] - pp->real_y) / (fabs)(point[0][1]- pp->real_x));
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	ed93 7a02 	vldr	s14, [r3, #8]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a6c:	eeb0 7ae7 	vabs.f32	s14, s15
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	edd3 6a01 	vldr	s13, [r3, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005a7c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005a80:	eef0 7ae7 	vabs.f32	s15, s15
 8005a84:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005a88:	eeb0 0a66 	vmov.f32	s0, s13
 8005a8c:	f018 fd80 	bl	801e590 <atanf>
 8005a90:	eef0 7a40 	vmov.f32	s15, s0
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	edc3 7a65 	vstr	s15, [r3, #404]	; 0x194
 8005a9a:	e03f      	b.n	8005b1c <PP_start+0x196>
		else
			pp->target_angle1[i]= atanf((fabs)(point[i][2]-point[i-1][2]) / (fabs)(point[i][1]-point[i-1][1]));
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	1a9b      	subs	r3, r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4413      	add	r3, r2
 8005aac:	ed93 7a02 	vldr	s14, [r3, #8]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	1a9b      	subs	r3, r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	3b1c      	subs	r3, #28
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	edd3 7a02 	vldr	s15, [r3, #8]
 8005ac4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ac8:	eeb0 7ae7 	vabs.f32	s14, s15
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	1a9b      	subs	r3, r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	edd3 6a01 	vldr	s13, [r3, #4]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	1a9b      	subs	r3, r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	3b1c      	subs	r3, #28
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	4413      	add	r3, r2
 8005af0:	edd3 7a01 	vldr	s15, [r3, #4]
 8005af4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005af8:	eef0 7ae7 	vabs.f32	s15, s15
 8005afc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005b00:	eeb0 0a66 	vmov.f32	s0, s13
 8005b04:	f018 fd44 	bl	801e590 <atanf>
 8005b08:	eef0 7a40 	vmov.f32	s15, s0
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	3364      	adds	r3, #100	; 0x64
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	3304      	adds	r3, #4
 8005b18:	edc3 7a00 	vstr	s15, [r3]
		pp->target_z[i] = point[i][3];
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	1a9b      	subs	r3, r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	461a      	mov	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	6879      	ldr	r1, [r7, #4]
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	3338      	adds	r3, #56	; 0x38
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	440b      	add	r3, r1
 8005b38:	601a      	str	r2, [r3, #0]
		pp->ku_x[i] = point[i][4]* cosf(pp->target_angle1[i]);  // xy-pid
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	00db      	lsls	r3, r3, #3
 8005b40:	1a9b      	subs	r3, r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	461a      	mov	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4413      	add	r3, r2
 8005b4a:	ed93 8a04 	vldr	s16, [r3, #16]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	3364      	adds	r3, #100	; 0x64
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	3304      	adds	r3, #4
 8005b5a:	edd3 7a00 	vldr	s15, [r3]
 8005b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b62:	f018 fde9 	bl	801e738 <cosf>
 8005b66:	eef0 7a40 	vmov.f32	s15, s0
 8005b6a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	3384      	adds	r3, #132	; 0x84
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	3304      	adds	r3, #4
 8005b7a:	edc3 7a00 	vstr	s15, [r3]
		pp->ku_y[i] = point[i][4]* sinf(pp->target_angle1[i]);
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	4613      	mov	r3, r2
 8005b82:	00db      	lsls	r3, r3, #3
 8005b84:	1a9b      	subs	r3, r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	461a      	mov	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	ed93 8a04 	vldr	s16, [r3, #16]
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	3364      	adds	r3, #100	; 0x64
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	edd3 7a00 	vldr	s15, [r3]
 8005ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ba6:	f018 fe0f 	bl	801e7c8 <sinf>
 8005baa:	eef0 7a40 	vmov.f32	s15, s0
 8005bae:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	3394      	adds	r3, #148	; 0x94
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	edc3 7a00 	vstr	s15, [r3]
	for(i=0;i<no_point;i++)
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	617b      	str	r3, [r7, #20]
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	f6ff aee6 	blt.w	800599c <PP_start+0x16>
	}

	pp->target_point=no_point;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414

	if(pp->target_point == 1)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d166      	bne.n	8005cb0 <PP_start+0x32a>
	{
		if(fabs(pp->real_x - pp->target_x[0]) >= pp->f_tol_xy)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8005bee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bf2:	eeb0 7ae7 	vabs.f32	s14, s15
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8005bfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c04:	db17      	blt.n	8005c36 <PP_start+0x2b0>
			PIDGainSet(KE,1.0/fabs(pp->real_x - pp->target_x[0]),&(pp->x));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8005c12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c16:	eef0 7ae7 	vabs.f32	s15, s15
 8005c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005c28:	4619      	mov	r1, r3
 8005c2a:	eeb0 0a47 	vmov.f32	s0, s14
 8005c2e:	2002      	movs	r0, #2
 8005c30:	f7ff fae1 	bl	80051f6 <PIDGainSet>
 8005c34:	e008      	b.n	8005c48 <PP_start+0x2c2>
		else
			PIDGainSet(KE,1.0,&(pp->x));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005c42:	2002      	movs	r0, #2
 8005c44:	f7ff fad7 	bl	80051f6 <PIDGainSet>

		if(fabs(pp->real_y - pp->target_y[0]) >= pp->f_tol_xy)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005c54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c58:	eeb0 7ae7 	vabs.f32	s14, s15
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8005c62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c6a:	db17      	blt.n	8005c9c <PP_start+0x316>
			PIDGainSet(KE,1.0/fabs(pp->real_y - pp->target_y[0]),&(pp->y));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005c78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c7c:	eef0 7ae7 	vabs.f32	s15, s15
 8005c80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005c8e:	4619      	mov	r1, r3
 8005c90:	eeb0 0a47 	vmov.f32	s0, s14
 8005c94:	2002      	movs	r0, #2
 8005c96:	f7ff faae 	bl	80051f6 <PIDGainSet>
 8005c9a:	e06f      	b.n	8005d7c <PP_start+0x3f6>

		else
			PIDGainSet(KE,1.0,&(pp->y));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005ca8:	2002      	movs	r0, #2
 8005caa:	f7ff faa4 	bl	80051f6 <PIDGainSet>
 8005cae:	e065      	b.n	8005d7c <PP_start+0x3f6>
	}
	else
	{
		if(fabs(pp->real_x - pp->target_x[0]) >= pp->tol_xy)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8005cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cc0:	eeb0 7ae7 	vabs.f32	s14, s15
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	edd3 7abe 	vldr	s15, [r3, #760]	; 0x2f8
 8005cca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd2:	db17      	blt.n	8005d04 <PP_start+0x37e>
			PIDGainSet(KE,1.0/fabs(pp->real_x - pp->target_x[0]),&(pp->x));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8005ce0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ce4:	eef0 7ae7 	vabs.f32	s15, s15
 8005ce8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	eeb0 0a47 	vmov.f32	s0, s14
 8005cfc:	2002      	movs	r0, #2
 8005cfe:	f7ff fa7a 	bl	80051f6 <PIDGainSet>
 8005d02:	e008      	b.n	8005d16 <PP_start+0x390>
		else
			PIDGainSet(KE,1.0,&(pp->x));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005d10:	2002      	movs	r0, #2
 8005d12:	f7ff fa70 	bl	80051f6 <PIDGainSet>

		if(fabs(pp->real_y - pp->target_y[0]) >= pp->tol_xy)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005d22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d26:	eeb0 7ae7 	vabs.f32	s14, s15
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	edd3 7abe 	vldr	s15, [r3, #760]	; 0x2f8
 8005d30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d38:	db17      	blt.n	8005d6a <PP_start+0x3e4>
			PIDGainSet(KE,1.0/fabs(pp->real_y - pp->target_y[0]),&(pp->y));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005d46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d4a:	eef0 7ae7 	vabs.f32	s15, s15
 8005d4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	eeb0 0a47 	vmov.f32	s0, s14
 8005d62:	2002      	movs	r0, #2
 8005d64:	f7ff fa47 	bl	80051f6 <PIDGainSet>
 8005d68:	e008      	b.n	8005d7c <PP_start+0x3f6>

		else
			PIDGainSet(KE,1.0,&(pp->y));
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005d70:	4619      	mov	r1, r3
 8005d72:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005d76:	2002      	movs	r0, #2
 8005d78:	f7ff fa3d 	bl	80051f6 <PIDGainSet>
	}

	PIDGainSet(KU,pp->ku_x[0],&(pp->x));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	edd3 7a85 	vldr	s15, [r3, #532]	; 0x214
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005d88:	4619      	mov	r1, r3
 8005d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8005d8e:	2003      	movs	r0, #3
 8005d90:	f7ff fa31 	bl	80051f6 <PIDGainSet>
	PIDGainSet(KU,pp->ku_y[0],&(pp->y));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	edd3 7a94 	vldr	s15, [r3, #592]	; 0x250
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005da0:	4619      	mov	r1, r3
 8005da2:	eeb0 0a67 	vmov.f32	s0, s15
 8005da6:	2003      	movs	r0, #3
 8005da8:	f7ff fa25 	bl	80051f6 <PIDGainSet>

	pp->point_count=0;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
	pp->crnt_crv_pt=0;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	pp->pp_crv_calc=0;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	pp->pp_start=1;
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005dca:	f043 0301 	orr.w	r3, r3, #1
 8005dce:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
//	sys.navi_vel = 1;
	pp->final_f=0;
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005dd8:	f36f 0382 	bfc	r3, #2, #1
 8005ddc:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
	pp->rotate=0;
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005de6:	f36f 03c3 	bfc	r3, #3, #1
 8005dea:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
}
 8005dee:	bf00      	nop
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	ecbd 8b02 	vpop	{d8}
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <PP_stop>:
	pp->final_f=0;
	pp->rotate=0;
}

void PP_stop (PathPlan_t *pp)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b082      	sub	sp, #8
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
	pp->pp_start=0;
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005e08:	f36f 0300 	bfc	r3, #0, #1
 8005e0c:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
	PIDDelayInit(&(pp->x));
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7ff fb3f 	bl	800549a <PIDDelayInit>
	PIDDelayInit(&(pp->y));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff fb39 	bl	800549a <PIDDelayInit>
	PIDDelayInit(&(pp->z));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7ff fb33 	bl	800549a <PIDDelayInit>

}
 8005e34:	bf00      	nop
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <PP_reset>:

void PP_reset (PathPlan_t *pp)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
	pp->pos_x = 0.0;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f04f 0200 	mov.w	r2, #0
 8005e4a:	62da      	str	r2, [r3, #44]	; 0x2c
	pp->pos_y = 0.0;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f04f 0200 	mov.w	r2, #0
 8005e52:	63da      	str	r2, [r3, #60]	; 0x3c
	pp->prev_x = 0.0;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f04f 0200 	mov.w	r2, #0
 8005e5a:	631a      	str	r2, [r3, #48]	; 0x30
	pp->prev_y = 0.0;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f04f 0200 	mov.w	r2, #0
 8005e62:	641a      	str	r2, [r3, #64]	; 0x40
	pp->prev_real_x = 0.0;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f04f 0200 	mov.w	r2, #0
 8005e6a:	639a      	str	r2, [r3, #56]	; 0x38
	pp->prev_real_y = 0.0;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f04f 0200 	mov.w	r2, #0
 8005e72:	649a      	str	r2, [r3, #72]	; 0x48
	pp->del_pos_x = 0.0;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f04f 0200 	mov.w	r2, #0
 8005e7a:	64da      	str	r2, [r3, #76]	; 0x4c
	pp->del_pos_y = 0.0;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f04f 0200 	mov.w	r2, #0
 8005e82:	651a      	str	r2, [r3, #80]	; 0x50
//		pp->yaw_constant = 0.0;
//		pp->yaw_offset = *(pp->yaw);
//		pp->prev_yaw = *(pp->yaw);
	pp->real_x=0.0;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f04f 0200 	mov.w	r2, #0
 8005e8a:	635a      	str	r2, [r3, #52]	; 0x34
	pp->real_y=0.0;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f04f 0200 	mov.w	r2, #0
 8005e92:	645a      	str	r2, [r3, #68]	; 0x44
	PIDDelayInit(&(pp->x));
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7ff fafd 	bl	800549a <PIDDelayInit>
	PIDDelayInit(&(pp->y));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff faf7 	bl	800549a <PIDDelayInit>
	PIDDelayInit(&(pp->z));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7ff faf1 	bl	800549a <PIDDelayInit>
//		pp->real_z=0.0;
//	PP_SetZ(0, pp);
}
 8005eb8:	bf00      	nop
 8005eba:	3708      	adds	r7, #8
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <PP_SetZ>:


void PP_SetZ (float z,PathPlan_t *pp)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	ed87 0a01 	vstr	s0, [r7, #4]
 8005eca:	6038      	str	r0, [r7, #0]

	pp->setz=z;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	621a      	str	r2, [r3, #32]
	pp->yaw_constant=0;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	629a      	str	r2, [r3, #40]	; 0x28
	//	pp->yaw_offset=*(pp->yaw);
	pp->prev_yaw=*(pp->yaw);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	60da      	str	r2, [r3, #12]
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <PP_SetCrv_Points>:

void PP_SetCrv_Points (int z,PathPlan_t *pp)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
	pp->pp_no_crv_pts = z;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
}
 8005f02:	bf00      	nop
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
	...

08005f10 <PathPlan>:



void PathPlan (PathPlan_t *pp)
{
 8005f10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005f14:	ed2d 8b02 	vpush	{d8}
 8005f18:	b084      	sub	sp, #16
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
	// Called every 5ms
	if(pp->point_start) // The start of program
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 8134 	beq.w	8006198 <PathPlan+0x288>
	{
		pp->pos_x=*(pp->qeix);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	62da      	str	r2, [r3, #44]	; 0x2c
		pp->pos_y=*(pp->qeiy);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	63da      	str	r2, [r3, #60]	; 0x3c

		if(*(pp->yaw) < 30.0){
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	edd3 7a00 	vldr	s15, [r3]
 8005f4c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8005f50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f58:	d516      	bpl.n	8005f88 <PathPlan+0x78>
			if(pp->prev_yaw > 330.0){
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005f60:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005f84 <PathPlan+0x74>
 8005f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f6c:	dd2b      	ble.n	8005fc6 <PathPlan+0xb6>
				pp->yaw_constant++;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005f74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 8005f82:	e020      	b.n	8005fc6 <PathPlan+0xb6>
 8005f84:	43a50000 	.word	0x43a50000
			}
		}else if(*(pp->yaw) > 330.0){
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	edd3 7a00 	vldr	s15, [r3]
 8005f90:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8005f84 <PathPlan+0x74>
 8005f94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f9c:	dd13      	ble.n	8005fc6 <PathPlan+0xb6>
			if(pp->prev_yaw < 30.0){
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	edd3 7a03 	vldr	s15, [r3, #12]
 8005fa4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8005fa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb0:	d509      	bpl.n	8005fc6 <PathPlan+0xb6>
				pp->yaw_constant--;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005fb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			}
		}

		pp->prev_yaw = *(pp->yaw);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	60da      	str	r2, [r3, #12]
		pp->real_z = *(pp->yaw) + (pp->yaw_constant)*360.0 - pp->yaw_offset+pp->setz;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fa fab6 	bl	8000548 <__aeabi_f2d>
 8005fdc:	4604      	mov	r4, r0
 8005fde:	460d      	mov	r5, r1
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fa faaf 	bl	8000548 <__aeabi_f2d>
 8005fea:	f04f 0200 	mov.w	r2, #0
 8005fee:	4b68      	ldr	r3, [pc, #416]	; (8006190 <PathPlan+0x280>)
 8005ff0:	f7fa fb02 	bl	80005f8 <__aeabi_dmul>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	4629      	mov	r1, r5
 8005ffc:	f7fa f946 	bl	800028c <__adddf3>
 8006000:	4602      	mov	r2, r0
 8006002:	460b      	mov	r3, r1
 8006004:	4614      	mov	r4, r2
 8006006:	461d      	mov	r5, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	4618      	mov	r0, r3
 800600e:	f7fa fa9b 	bl	8000548 <__aeabi_f2d>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	4620      	mov	r0, r4
 8006018:	4629      	mov	r1, r5
 800601a:	f7fa f935 	bl	8000288 <__aeabi_dsub>
 800601e:	4602      	mov	r2, r0
 8006020:	460b      	mov	r3, r1
 8006022:	4614      	mov	r4, r2
 8006024:	461d      	mov	r5, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	4618      	mov	r0, r3
 800602c:	f7fa fa8c 	bl	8000548 <__aeabi_f2d>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4620      	mov	r0, r4
 8006036:	4629      	mov	r1, r5
 8006038:	f7fa f928 	bl	800028c <__adddf3>
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	4610      	mov	r0, r2
 8006042:	4619      	mov	r1, r3
 8006044:	f7fa fdd0 	bl	8000be8 <__aeabi_d2f>
 8006048:	4602      	mov	r2, r0
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	611a      	str	r2, [r3, #16]
		pp->real_z_rad = (pp->real_z / 180.0) * M_PI;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	4618      	mov	r0, r3
 8006054:	f7fa fa78 	bl	8000548 <__aeabi_f2d>
 8006058:	f04f 0200 	mov.w	r2, #0
 800605c:	4b4d      	ldr	r3, [pc, #308]	; (8006194 <PathPlan+0x284>)
 800605e:	f7fa fbf5 	bl	800084c <__aeabi_ddiv>
 8006062:	4602      	mov	r2, r0
 8006064:	460b      	mov	r3, r1
 8006066:	4610      	mov	r0, r2
 8006068:	4619      	mov	r1, r3
 800606a:	a347      	add	r3, pc, #284	; (adr r3, 8006188 <PathPlan+0x278>)
 800606c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006070:	f7fa fac2 	bl	80005f8 <__aeabi_dmul>
 8006074:	4602      	mov	r2, r0
 8006076:	460b      	mov	r3, r1
 8006078:	4610      	mov	r0, r2
 800607a:	4619      	mov	r1, r3
 800607c:	f7fa fdb4 	bl	8000be8 <__aeabi_d2f>
 8006080:	4602      	mov	r2, r0
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	619a      	str	r2, [r3, #24]

		pp->del_pos_x =  (pp->pos_x - pp->prev_x) * cosf(pp->real_z_rad) +
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006092:	ee37 8a67 	vsub.f32	s16, s14, s15
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	edd3 7a06 	vldr	s15, [r3, #24]
 800609c:	eeb0 0a67 	vmov.f32	s0, s15
 80060a0:	f018 fb4a 	bl	801e738 <cosf>
 80060a4:	eef0 7a40 	vmov.f32	s15, s0
 80060a8:	ee28 8a27 	vmul.f32	s16, s16, s15
				(pp->pos_y - pp->prev_y) * sinf(pp->real_z_rad);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80060b8:	ee77 8a67 	vsub.f32	s17, s14, s15
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	edd3 7a06 	vldr	s15, [r3, #24]
 80060c2:	eeb0 0a67 	vmov.f32	s0, s15
 80060c6:	f018 fb7f 	bl	801e7c8 <sinf>
 80060ca:	eef0 7a40 	vmov.f32	s15, s0
 80060ce:	ee68 7aa7 	vmul.f32	s15, s17, s15
		pp->del_pos_x =  (pp->pos_x - pp->prev_x) * cosf(pp->real_z_rad) +
 80060d2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		pp->del_pos_y = -(pp->pos_x - pp->prev_x) * sinf(pp->real_z_rad) +
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80060e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060ec:	eeb1 8a67 	vneg.f32	s16, s15
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	edd3 7a06 	vldr	s15, [r3, #24]
 80060f6:	eeb0 0a67 	vmov.f32	s0, s15
 80060fa:	f018 fb65 	bl	801e7c8 <sinf>
 80060fe:	eef0 7a40 	vmov.f32	s15, s0
 8006102:	ee28 8a27 	vmul.f32	s16, s16, s15
				(pp->pos_y - pp->prev_y) * cosf(pp->real_z_rad);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006112:	ee77 8a67 	vsub.f32	s17, s14, s15
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	edd3 7a06 	vldr	s15, [r3, #24]
 800611c:	eeb0 0a67 	vmov.f32	s0, s15
 8006120:	f018 fb0a 	bl	801e738 <cosf>
 8006124:	eef0 7a40 	vmov.f32	s15, s0
 8006128:	ee68 7aa7 	vmul.f32	s15, s17, s15
		pp->del_pos_y = -(pp->pos_x - pp->prev_x) * sinf(pp->real_z_rad) +
 800612c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		pp->real_x = pp->real_x + pp->del_pos_x;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8006142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		pp->real_y = pp->real_y + pp->del_pos_y;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8006158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

		pp->prev_x = pp->pos_x;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	631a      	str	r2, [r3, #48]	; 0x30
		pp->prev_y = pp->pos_y;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	641a      	str	r2, [r3, #64]	; 0x40

		pp->prev_real_x = pp->real_x;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	639a      	str	r2, [r3, #56]	; 0x38
		pp->prev_real_y = pp->real_y;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	649a      	str	r2, [r3, #72]	; 0x48
 8006182:	e009      	b.n	8006198 <PathPlan+0x288>
 8006184:	f3af 8000 	nop.w
 8006188:	54442d18 	.word	0x54442d18
 800618c:	400921fb 	.word	0x400921fb
 8006190:	40768000 	.word	0x40768000
 8006194:	40668000 	.word	0x40668000
	}


	if(pp->point_start && pp->pp_start){ // If path plan started
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f002 8513 	beq.w	8008bd0 <PathPlan+0x2cc0>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f002 850a 	beq.w	8008bd0 <PathPlan+0x2cc0>

		if(pp->pp_crv_radius[pp->point_count]){
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	3304      	adds	r3, #4
 80061ce:	edd3 7a00 	vldr	s15, [r3]
 80061d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80061d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061da:	f001 8389 	beq.w	80078f0 <PathPlan+0x19e0>


			if(!pp->pp_crv_calc){
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8d3 3528 	ldr.w	r3, [r3, #1320]	; 0x528
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f040 8208 	bne.w	80065fa <PathPlan+0x6ea>
				pp->pp_rad_ptx = ((pp->target_x[pp->point_count] - pp->real_x)/(float)2.0) + (pp->pp_crv_radius[pp->point_count] * sinf(atan2f(pp->target_y[pp->point_count] - pp->real_y, pp->target_x[pp->point_count] - pp->real_x)));
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	331a      	adds	r3, #26
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	ed93 7a00 	vldr	s14, [r3]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006202:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006206:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800620a:	ee87 8a87 	vdiv.f32	s16, s15, s14
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	3304      	adds	r3, #4
 8006220:	edd3 8a00 	vldr	s17, [r3]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	3328      	adds	r3, #40	; 0x28
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	3304      	adds	r3, #4
 8006234:	ed93 7a00 	vldr	s14, [r3]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800623e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	331a      	adds	r3, #26
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4413      	add	r3, r2
 8006250:	ed93 7a00 	vldr	s14, [r3]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800625a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800625e:	eef0 0a67 	vmov.f32	s1, s15
 8006262:	eeb0 0a66 	vmov.f32	s0, s13
 8006266:	f018 faf1 	bl	801e84c <atan2f>
 800626a:	eef0 7a40 	vmov.f32	s15, s0
 800626e:	eeb0 0a67 	vmov.f32	s0, s15
 8006272:	f018 faa9 	bl	801e7c8 <sinf>
 8006276:	eef0 7a40 	vmov.f32	s15, s0
 800627a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800627e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8006288:	edc3 7a00 	vstr	s15, [r3]
				pp->pp_rad_pty = ((pp->target_y[pp->point_count] - pp->real_y)/(float)2.0) - (pp->pp_crv_radius[pp->point_count] * cosf(atan2f(pp->target_y[pp->point_count] - pp->real_y, pp->target_x[pp->point_count] - pp->real_x)));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	3328      	adds	r3, #40	; 0x28
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	3304      	adds	r3, #4
 800629c:	ed93 7a00 	vldr	s14, [r3]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80062a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062aa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80062ae:	ee87 8a87 	vdiv.f32	s16, s15, s14
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	3304      	adds	r3, #4
 80062c4:	edd3 8a00 	vldr	s17, [r3]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	3328      	adds	r3, #40	; 0x28
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	3304      	adds	r3, #4
 80062d8:	ed93 7a00 	vldr	s14, [r3]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80062e2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	331a      	adds	r3, #26
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	ed93 7a00 	vldr	s14, [r3]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80062fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006302:	eef0 0a67 	vmov.f32	s1, s15
 8006306:	eeb0 0a66 	vmov.f32	s0, s13
 800630a:	f018 fa9f 	bl	801e84c <atan2f>
 800630e:	eef0 7a40 	vmov.f32	s15, s0
 8006312:	eeb0 0a67 	vmov.f32	s0, s15
 8006316:	f018 fa0f 	bl	801e738 <cosf>
 800631a:	eef0 7a40 	vmov.f32	s15, s0
 800631e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8006322:	ee78 7a67 	vsub.f32	s15, s16, s15
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 800632c:	edc3 7a00 	vstr	s15, [r3]
				pp->pp_crv_const[pp->point_count] = pp->target_z[pp->point_count]/pp->pp_no_crv_pts;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	3338      	adds	r3, #56	; 0x38
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	edd3 6a00 	vldr	s13, [r3]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006348:	ee07 3a90 	vmov	s15, r3
 800634c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	edc3 7a00 	vstr	s15, [r3]

				float crvpath = (float)1.0/pp->pp_no_crv_pts;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 800636e:	ee07 3a90 	vmov	s15, r3
 8006372:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800637a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800637e:	edc7 7a03 	vstr	s15, [r7, #12]
				for(int i = 0;i<pp->pp_no_crv_pts;i++){
 8006382:	2300      	movs	r3, #0
 8006384:	60bb      	str	r3, [r7, #8]
 8006386:	e12d      	b.n	80065e4 <PathPlan+0x6d4>
					pp->pp_crv_x[i]= powf((1-crvpath),2) * pp->real_x + 2.0*(1-crvpath)*crvpath*pp->pp_rad_ptx + powf(crvpath,2) * pp->target_x[pp->point_count];
 8006388:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800638c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006390:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006394:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8006398:	eeb0 0a67 	vmov.f32	s0, s15
 800639c:	f018 fa58 	bl	801e850 <powf>
 80063a0:	eeb0 7a40 	vmov.f32	s14, s0
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80063aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ae:	ee17 0a90 	vmov	r0, s15
 80063b2:	f7fa f8c9 	bl	8000548 <__aeabi_f2d>
 80063b6:	4604      	mov	r4, r0
 80063b8:	460d      	mov	r5, r1
 80063ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063be:	edd7 7a03 	vldr	s15, [r7, #12]
 80063c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063c6:	ee17 0a90 	vmov	r0, s15
 80063ca:	f7fa f8bd 	bl	8000548 <__aeabi_f2d>
 80063ce:	4602      	mov	r2, r0
 80063d0:	460b      	mov	r3, r1
 80063d2:	f7f9 ff5b 	bl	800028c <__adddf3>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4690      	mov	r8, r2
 80063dc:	4699      	mov	r9, r3
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f7fa f8b2 	bl	8000548 <__aeabi_f2d>
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
 80063e8:	4640      	mov	r0, r8
 80063ea:	4649      	mov	r1, r9
 80063ec:	f7fa f904 	bl	80005f8 <__aeabi_dmul>
 80063f0:	4602      	mov	r2, r0
 80063f2:	460b      	mov	r3, r1
 80063f4:	4690      	mov	r8, r2
 80063f6:	4699      	mov	r9, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4618      	mov	r0, r3
 8006402:	f7fa f8a1 	bl	8000548 <__aeabi_f2d>
 8006406:	4602      	mov	r2, r0
 8006408:	460b      	mov	r3, r1
 800640a:	4640      	mov	r0, r8
 800640c:	4649      	mov	r1, r9
 800640e:	f7fa f8f3 	bl	80005f8 <__aeabi_dmul>
 8006412:	4602      	mov	r2, r0
 8006414:	460b      	mov	r3, r1
 8006416:	4620      	mov	r0, r4
 8006418:	4629      	mov	r1, r5
 800641a:	f7f9 ff37 	bl	800028c <__adddf3>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	4614      	mov	r4, r2
 8006424:	461d      	mov	r5, r3
 8006426:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800642a:	ed97 0a03 	vldr	s0, [r7, #12]
 800642e:	f018 fa0f 	bl	801e850 <powf>
 8006432:	eeb0 7a40 	vmov.f32	s14, s0
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	331a      	adds	r3, #26
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	edd3 7a00 	vldr	s15, [r3]
 8006448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800644c:	ee17 0a90 	vmov	r0, s15
 8006450:	f7fa f87a 	bl	8000548 <__aeabi_f2d>
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	4620      	mov	r0, r4
 800645a:	4629      	mov	r1, r5
 800645c:	f7f9 ff16 	bl	800028c <__adddf3>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	4610      	mov	r0, r2
 8006466:	4619      	mov	r1, r3
 8006468:	f7fa fbbe 	bl	8000be8 <__aeabi_d2f>
 800646c:	4601      	mov	r1, r0
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	6019      	str	r1, [r3, #0]
					pp->pp_crv_y[i]= powf((1-crvpath),2) * pp->real_y + 2.0*(1-crvpath)*crvpath*pp->pp_rad_pty + powf(crvpath,2) * pp->target_y[pp->point_count];
 800647c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006480:	edd7 7a03 	vldr	s15, [r7, #12]
 8006484:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006488:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800648c:	eeb0 0a67 	vmov.f32	s0, s15
 8006490:	f018 f9de 	bl	801e850 <powf>
 8006494:	eeb0 7a40 	vmov.f32	s14, s0
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800649e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064a2:	ee17 0a90 	vmov	r0, s15
 80064a6:	f7fa f84f 	bl	8000548 <__aeabi_f2d>
 80064aa:	4604      	mov	r4, r0
 80064ac:	460d      	mov	r5, r1
 80064ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80064b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064ba:	ee17 0a90 	vmov	r0, s15
 80064be:	f7fa f843 	bl	8000548 <__aeabi_f2d>
 80064c2:	4602      	mov	r2, r0
 80064c4:	460b      	mov	r3, r1
 80064c6:	f7f9 fee1 	bl	800028c <__adddf3>
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	4690      	mov	r8, r2
 80064d0:	4699      	mov	r9, r3
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f7fa f838 	bl	8000548 <__aeabi_f2d>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	4640      	mov	r0, r8
 80064de:	4649      	mov	r1, r9
 80064e0:	f7fa f88a 	bl	80005f8 <__aeabi_dmul>
 80064e4:	4602      	mov	r2, r0
 80064e6:	460b      	mov	r3, r1
 80064e8:	4690      	mov	r8, r2
 80064ea:	4699      	mov	r9, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7fa f827 	bl	8000548 <__aeabi_f2d>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	4640      	mov	r0, r8
 8006500:	4649      	mov	r1, r9
 8006502:	f7fa f879 	bl	80005f8 <__aeabi_dmul>
 8006506:	4602      	mov	r2, r0
 8006508:	460b      	mov	r3, r1
 800650a:	4620      	mov	r0, r4
 800650c:	4629      	mov	r1, r5
 800650e:	f7f9 febd 	bl	800028c <__adddf3>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	4614      	mov	r4, r2
 8006518:	461d      	mov	r5, r3
 800651a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800651e:	ed97 0a03 	vldr	s0, [r7, #12]
 8006522:	f018 f995 	bl	801e850 <powf>
 8006526:	eeb0 7a40 	vmov.f32	s14, s0
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	3328      	adds	r3, #40	; 0x28
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	3304      	adds	r3, #4
 800653a:	edd3 7a00 	vldr	s15, [r3]
 800653e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006542:	ee17 0a90 	vmov	r0, s15
 8006546:	f7f9 ffff 	bl	8000548 <__aeabi_f2d>
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	4620      	mov	r0, r4
 8006550:	4629      	mov	r1, r5
 8006552:	f7f9 fe9b 	bl	800028c <__adddf3>
 8006556:	4602      	mov	r2, r0
 8006558:	460b      	mov	r3, r1
 800655a:	4610      	mov	r0, r2
 800655c:	4619      	mov	r1, r3
 800655e:	f7fa fb43 	bl	8000be8 <__aeabi_d2f>
 8006562:	4601      	mov	r1, r0
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	6019      	str	r1, [r3, #0]
					pp->pp_crv_z[i] = pp->pp_crv_const[pp->point_count] + pp->pp_crv_const[pp->point_count]*i;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	ed93 7a00 	vldr	s14, [r3]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	edd3 6a00 	vldr	s13, [r3]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	ee07 3a90 	vmov	s15, r3
 80065a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	edc3 7a00 	vstr	s15, [r3]
					crvpath+=(float)1.0/pp->pp_no_crv_pts;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 80065c2:	ee07 3a90 	vmov	s15, r3
 80065c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065d2:	ed97 7a03 	vldr	s14, [r7, #12]
 80065d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065da:	edc7 7a03 	vstr	s15, [r7, #12]
				for(int i = 0;i<pp->pp_no_crv_pts;i++){
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	3301      	adds	r3, #1
 80065e2:	60bb      	str	r3, [r7, #8]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	f6ff aecb 	blt.w	8006388 <PathPlan+0x478>
				}
				//				PIDGainSet(KP,(pp->target_vel[pp->point_count]/(float)4.0),&(pp->z));
				pp->pp_crv_calc = 1;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
			}

			pp->error_x = pp->pp_crv_x[pp->crnt_crv_pt] - pp->real_x;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	ed93 7a00 	vldr	s14, [r3]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
			pp->error_y = pp->pp_crv_y[pp->crnt_crv_pt] - pp->real_y;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	ed93 7a00 	vldr	s14, [r3]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006638:	ee77 7a67 	vsub.f32	s15, s14, s15
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
			pp->error_z = pp->pp_crv_z[pp->crnt_crv_pt] - pp->real_z;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	ed93 7a00 	vldr	s14, [r3]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	edd3 7a04 	vldr	s15, [r3, #16]
 800665c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8


			if( pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && ((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006672:	3b01      	subs	r3, #1
 8006674:	429a      	cmp	r2, r3
 8006676:	d14a      	bne.n	800670e <PathPlan+0x7fe>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 800667e:	eef0 7ae7 	vabs.f32	s15, s15
 8006682:	ee17 0a90 	vmov	r0, s15
 8006686:	f7f9 ff5f 	bl	8000548 <__aeabi_f2d>
 800668a:	4604      	mov	r4, r0
 800668c:	460d      	mov	r5, r1
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8006694:	eef0 7ae7 	vabs.f32	s15, s15
 8006698:	ee17 0a90 	vmov	r0, s15
 800669c:	f7f9 ff54 	bl	8000548 <__aeabi_f2d>
 80066a0:	4602      	mov	r2, r0
 80066a2:	460b      	mov	r3, r1
 80066a4:	4620      	mov	r0, r4
 80066a6:	4629      	mov	r1, r5
 80066a8:	f7f9 fdf0 	bl	800028c <__adddf3>
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	4610      	mov	r0, r2
 80066b2:	4619      	mov	r1, r3
 80066b4:	f04f 0200 	mov.w	r2, #0
 80066b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80066bc:	f7fa f8c6 	bl	800084c <__aeabi_ddiv>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	4614      	mov	r4, r2
 80066c6:	461d      	mov	r5, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7f9 ff3a 	bl	8000548 <__aeabi_f2d>
 80066d4:	4602      	mov	r2, r0
 80066d6:	460b      	mov	r3, r1
 80066d8:	4620      	mov	r0, r4
 80066da:	4629      	mov	r1, r5
 80066dc:	f7fa f9fe 	bl	8000adc <__aeabi_dcmplt>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d013      	beq.n	800670e <PathPlan+0x7fe>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 80066ec:	eeb0 7ae7 	vabs.f32	s14, s15
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 80066f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066fe:	d506      	bpl.n	800670e <PathPlan+0x7fe>
				pp->pp_lck = 1.0;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006706:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800670a:	601a      	str	r2, [r3, #0]
 800670c:	e005      	b.n	800671a <PathPlan+0x80a>
			else
				pp->pp_lck = 0.0;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006714:	f04f 0200 	mov.w	r2, #0
 8006718:	601a      	str	r2, [r3, #0]

			pp->pp_lck_count = pp->pp_lck_count + 1.0;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8006720:	edd3 7a00 	vldr	s15, [r3]
 8006724:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006728:	ee77 7a87 	vadd.f32	s15, s15, s14
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8006732:	edc3 7a00 	vstr	s15, [r3]

			if(pp->pp_lck_count <= 60.0)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800673c:	edd3 7a00 	vldr	s15, [r3]
 8006740:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 80069d8 <PathPlan+0xac8>
 8006744:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800674c:	d811      	bhi.n	8006772 <PathPlan+0x862>
				pp->pp_lck_cal = pp->pp_lck_cal + pp->pp_lck;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8006754:	ed93 7a00 	vldr	s14, [r3]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800675e:	edd3 7a00 	vldr	s15, [r3]
 8006762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800676c:	edc3 7a00 	vstr	s15, [r3]
 8006770:	e034      	b.n	80067dc <PathPlan+0x8cc>
			else{
				pp->pp_lck_final = (pp->pp_lck_cal) / (pp->pp_lck_count) ;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8006778:	edd3 6a00 	vldr	s13, [r3]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8006782:	ed93 7a00 	vldr	s14, [r3]
 8006786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006790:	edc3 7a00 	vstr	s15, [r3]
				if(pp->pp_lck_final >= 0.95)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4618      	mov	r0, r3
 800679e:	f7f9 fed3 	bl	8000548 <__aeabi_f2d>
 80067a2:	a38b      	add	r3, pc, #556	; (adr r3, 80069d0 <PathPlan+0xac0>)
 80067a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a8:	f7fa f9ac 	bl	8000b04 <__aeabi_dcmpge>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d004      	beq.n	80067bc <PathPlan+0x8ac>
					pp->pp_lck_enb = 1;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 80067ba:	e003      	b.n	80067c4 <PathPlan+0x8b4>
				else
					pp->pp_lck_enb = 0;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
				pp->pp_lck_count = 0.0;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80067ca:	f04f 0200 	mov.w	r2, #0
 80067ce:	601a      	str	r2, [r3, #0]
				pp->pp_lck_cal   = 0.0;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80067d6:	f04f 0200 	mov.w	r2, #0
 80067da:	601a      	str	r2, [r3, #0]
			}


			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy_crv){
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 80067e2:	eef0 7ae7 	vabs.f32	s15, s15
 80067e6:	ee17 0a90 	vmov	r0, s15
 80067ea:	f7f9 fead 	bl	8000548 <__aeabi_f2d>
 80067ee:	4604      	mov	r4, r0
 80067f0:	460d      	mov	r5, r1
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 80067f8:	eef0 7ae7 	vabs.f32	s15, s15
 80067fc:	ee17 0a90 	vmov	r0, s15
 8006800:	f7f9 fea2 	bl	8000548 <__aeabi_f2d>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	4620      	mov	r0, r4
 800680a:	4629      	mov	r1, r5
 800680c:	f7f9 fd3e 	bl	800028c <__adddf3>
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	4610      	mov	r0, r2
 8006816:	4619      	mov	r1, r3
 8006818:	f04f 0200 	mov.w	r2, #0
 800681c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006820:	f7fa f814 	bl	800084c <__aeabi_ddiv>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	4614      	mov	r4, r2
 800682a:	461d      	mov	r5, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8006832:	4618      	mov	r0, r3
 8006834:	f7f9 fe88 	bl	8000548 <__aeabi_f2d>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	4620      	mov	r0, r4
 800683e:	4629      	mov	r1, r5
 8006840:	f7fa f94c 	bl	8000adc <__aeabi_dcmplt>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 8462 	beq.w	8007110 <PathPlan+0x1200>
				if(pp->crnt_crv_pt < pp->pp_no_crv_pts - 1){
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006858:	3b01      	subs	r3, #1
 800685a:	429a      	cmp	r2, r3
 800685c:	f280 8135 	bge.w	8006aca <PathPlan+0xbba>
					PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8006866:	edd3 7a00 	vldr	s15, [r3]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8006870:	4619      	mov	r1, r3
 8006872:	eeb0 0a67 	vmov.f32	s0, s15
 8006876:	2004      	movs	r0, #4
 8006878:	f7fe fcbd 	bl	80051f6 <PIDGainSet>
					pp->crnt_crv_pt++;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
					pp->error_x = pp->pp_crv_x[pp->crnt_crv_pt] - pp->real_x;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	ed93 7a00 	vldr	s14, [r3]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80068a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
					pp->error_y = pp->pp_crv_y[pp->crnt_crv_pt] - pp->real_y;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	ed93 7a00 	vldr	s14, [r3]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80068c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
					pp->error_z = pp->pp_crv_z[pp->crnt_crv_pt] - pp->real_z;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	ed93 7a00 	vldr	s14, [r3]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80068ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8

					if(pp->target_x[pp->point_count]-pp->real_x){
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	331a      	adds	r3, #26
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	ed93 7a00 	vldr	s14, [r3]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800690e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006912:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800691a:	d01d      	beq.n	8006958 <PathPlan+0xa48>
						PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	331a      	adds	r3, #26
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	ed93 7a00 	vldr	s14, [r3]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006934:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006938:	eef0 7ae7 	vabs.f32	s15, s15
 800693c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006940:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800694a:	4619      	mov	r1, r3
 800694c:	eeb0 0a47 	vmov.f32	s0, s14
 8006950:	2002      	movs	r0, #2
 8006952:	f7fe fc50 	bl	80051f6 <PIDGainSet>
 8006956:	e008      	b.n	800696a <PathPlan+0xa5a>
					} else {
						PIDGainSet(KE,1.0,&(pp->x));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800695e:	4619      	mov	r1, r3
 8006960:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006964:	2002      	movs	r0, #2
 8006966:	f7fe fc46 	bl	80051f6 <PIDGainSet>
					}
					if(pp->target_y[pp->point_count]-pp->real_y){
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	3328      	adds	r3, #40	; 0x28
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	3304      	adds	r3, #4
 800697a:	ed93 7a00 	vldr	s14, [r3]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006984:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006988:	eef5 7a40 	vcmp.f32	s15, #0.0
 800698c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006990:	d024      	beq.n	80069dc <PathPlan+0xacc>
						PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	3328      	adds	r3, #40	; 0x28
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	3304      	adds	r3, #4
 80069a2:	ed93 7a00 	vldr	s14, [r3]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80069ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069b0:	eef0 7ae7 	vabs.f32	s15, s15
 80069b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80069c2:	4619      	mov	r1, r3
 80069c4:	eeb0 0a47 	vmov.f32	s0, s14
 80069c8:	2002      	movs	r0, #2
 80069ca:	f7fe fc14 	bl	80051f6 <PIDGainSet>
 80069ce:	e00e      	b.n	80069ee <PathPlan+0xade>
 80069d0:	66666666 	.word	0x66666666
 80069d4:	3fee6666 	.word	0x3fee6666
 80069d8:	42700000 	.word	0x42700000
					} else {
						PIDGainSet(KE,1.0,&(pp->y));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80069e2:	4619      	mov	r1, r3
 80069e4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80069e8:	2002      	movs	r0, #2
 80069ea:	f7fe fc04 	bl	80051f6 <PIDGainSet>
					}
					PIDGainSet(KP,pp->kp[0],&(pp->x));
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80069fa:	4619      	mov	r1, r3
 80069fc:	eeb0 0a67 	vmov.f32	s0, s15
 8006a00:	2004      	movs	r0, #4
 8006a02:	f7fe fbf8 	bl	80051f6 <PIDGainSet>
					PIDGainSet(KP,pp->kp[0],&(pp->y));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006a12:	4619      	mov	r1, r3
 8006a14:	eeb0 0a67 	vmov.f32	s0, s15
 8006a18:	2004      	movs	r0, #4
 8006a1a:	f7fe fbec 	bl	80051f6 <PIDGainSet>
					PIDGainSet(KI,pp->ki[0],&(pp->x));
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8006a30:	2005      	movs	r0, #5
 8006a32:	f7fe fbe0 	bl	80051f6 <PIDGainSet>
					PIDGainSet(KI,pp->ki[0],&(pp->y));
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006a42:	4619      	mov	r1, r3
 8006a44:	eeb0 0a67 	vmov.f32	s0, s15
 8006a48:	2005      	movs	r0, #5
 8006a4a:	f7fe fbd4 	bl	80051f6 <PIDGainSet>
					PIDGainSet(KD,pp->kd[0],&(pp->x));
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	eeb0 0a67 	vmov.f32	s0, s15
 8006a60:	2006      	movs	r0, #6
 8006a62:	f7fe fbc8 	bl	80051f6 <PIDGainSet>
					PIDGainSet(KD,pp->kd[0],&(pp->y));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006a72:	4619      	mov	r1, r3
 8006a74:	eeb0 0a67 	vmov.f32	s0, s15
 8006a78:	2006      	movs	r0, #6
 8006a7a:	f7fe fbbc 	bl	80051f6 <PIDGainSet>
					PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	3384      	adds	r3, #132	; 0x84
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	edd3 7a00 	vldr	s15, [r3]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006a98:	4619      	mov	r1, r3
 8006a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8006a9e:	2003      	movs	r0, #3
 8006aa0:	f7fe fba9 	bl	80051f6 <PIDGainSet>
					PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	3394      	adds	r3, #148	; 0x94
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	edd3 7a00 	vldr	s15, [r3]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006abc:	4619      	mov	r1, r3
 8006abe:	eeb0 0a67 	vmov.f32	s0, s15
 8006ac2:	2003      	movs	r0, #3
 8006ac4:	f7fe fb97 	bl	80051f6 <PIDGainSet>
 8006ac8:	e322      	b.n	8007110 <PathPlan+0x1200>


				}else if(pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && (pp->point_count < (pp->target_point - 1)) ){
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	f040 8252 	bne.w	8006f82 <PathPlan+0x1072>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006aea:	3b01      	subs	r3, #1
 8006aec:	429a      	cmp	r2, r3
 8006aee:	f280 8248 	bge.w	8006f82 <PathPlan+0x1072>
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8006af8:	eef0 7ae7 	vabs.f32	s15, s15
 8006afc:	ee17 0a90 	vmov	r0, s15
 8006b00:	f7f9 fd22 	bl	8000548 <__aeabi_f2d>
 8006b04:	4604      	mov	r4, r0
 8006b06:	460d      	mov	r5, r1
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8006b0e:	eef0 7ae7 	vabs.f32	s15, s15
 8006b12:	ee17 0a90 	vmov	r0, s15
 8006b16:	f7f9 fd17 	bl	8000548 <__aeabi_f2d>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	4620      	mov	r0, r4
 8006b20:	4629      	mov	r1, r5
 8006b22:	f7f9 fbb3 	bl	800028c <__adddf3>
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	4610      	mov	r0, r2
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	f04f 0200 	mov.w	r2, #0
 8006b32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b36:	f7f9 fe89 	bl	800084c <__aeabi_ddiv>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	4614      	mov	r4, r2
 8006b40:	461d      	mov	r5, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7f9 fcfd 	bl	8000548 <__aeabi_f2d>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	4620      	mov	r0, r4
 8006b54:	4629      	mov	r1, r5
 8006b56:	f7f9 ffc1 	bl	8000adc <__aeabi_dcmplt>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 82d6 	beq.w	800710e <PathPlan+0x11fe>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8006b68:	eeb0 7ae7 	vabs.f32	s14, s15
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 8006b72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b7a:	d400      	bmi.n	8006b7e <PathPlan+0xc6e>
 8006b7c:	e2c7      	b.n	800710e <PathPlan+0x11fe>
						if(pp->target_accurate[pp->point_count] == 1.0){
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	3346      	adds	r3, #70	; 0x46
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	3304      	adds	r3, #4
 8006b8e:	edd3 7a00 	vldr	s15, [r3]
 8006b92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b96:	eef4 7a47 	vcmp.f32	s15, s14
 8006b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b9e:	f040 80fd 	bne.w	8006d9c <PathPlan+0xe8c>
							if(pp->pp_lck_enb == 1){
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	f040 82b0 	bne.w	800710e <PathPlan+0x11fe>

								pp->point_count++;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006bb4:	1c5a      	adds	r2, r3, #1
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
								if(pp->target_x[pp->point_count]-pp->real_x){
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	331a      	adds	r3, #26
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	ed93 7a00 	vldr	s14, [r3]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006bd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bd8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006be0:	d01d      	beq.n	8006c1e <PathPlan+0xd0e>
									PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	331a      	adds	r3, #26
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	ed93 7a00 	vldr	s14, [r3]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bfe:	eef0 7ae7 	vabs.f32	s15, s15
 8006c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006c10:	4619      	mov	r1, r3
 8006c12:	eeb0 0a47 	vmov.f32	s0, s14
 8006c16:	2002      	movs	r0, #2
 8006c18:	f7fe faed 	bl	80051f6 <PIDGainSet>
 8006c1c:	e008      	b.n	8006c30 <PathPlan+0xd20>
								} else {
									PIDGainSet(KE,1.0,&(pp->x));
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006c24:	4619      	mov	r1, r3
 8006c26:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006c2a:	2002      	movs	r0, #2
 8006c2c:	f7fe fae3 	bl	80051f6 <PIDGainSet>
								}
								if(pp->target_y[pp->point_count]-pp->real_y){
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	3328      	adds	r3, #40	; 0x28
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	3304      	adds	r3, #4
 8006c40:	ed93 7a00 	vldr	s14, [r3]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c4e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c56:	d01e      	beq.n	8006c96 <PathPlan+0xd86>
									PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	3328      	adds	r3, #40	; 0x28
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	3304      	adds	r3, #4
 8006c68:	ed93 7a00 	vldr	s14, [r3]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006c72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c76:	eef0 7ae7 	vabs.f32	s15, s15
 8006c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006c88:	4619      	mov	r1, r3
 8006c8a:	eeb0 0a47 	vmov.f32	s0, s14
 8006c8e:	2002      	movs	r0, #2
 8006c90:	f7fe fab1 	bl	80051f6 <PIDGainSet>
 8006c94:	e008      	b.n	8006ca8 <PathPlan+0xd98>
								} else {
									PIDGainSet(KE,1.0,&(pp->y));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006ca2:	2002      	movs	r0, #2
 8006ca4:	f7fe faa7 	bl	80051f6 <PIDGainSet>
								}
								PIDGainSet(KP,pp->kp[0],&(pp->x));
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8006cba:	2004      	movs	r0, #4
 8006cbc:	f7fe fa9b 	bl	80051f6 <PIDGainSet>
								PIDGainSet(KP,pp->kp[0],&(pp->y));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006ccc:	4619      	mov	r1, r3
 8006cce:	eeb0 0a67 	vmov.f32	s0, s15
 8006cd2:	2004      	movs	r0, #4
 8006cd4:	f7fe fa8f 	bl	80051f6 <PIDGainSet>
								PIDGainSet(KI,pp->ki[0],&(pp->x));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8006cea:	2005      	movs	r0, #5
 8006cec:	f7fe fa83 	bl	80051f6 <PIDGainSet>
								PIDGainSet(KI,pp->ki[0],&(pp->y));
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8006d02:	2005      	movs	r0, #5
 8006d04:	f7fe fa77 	bl	80051f6 <PIDGainSet>
								PIDGainSet(KD,pp->kd[0],&(pp->x));
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006d14:	4619      	mov	r1, r3
 8006d16:	eeb0 0a67 	vmov.f32	s0, s15
 8006d1a:	2006      	movs	r0, #6
 8006d1c:	f7fe fa6b 	bl	80051f6 <PIDGainSet>
								PIDGainSet(KD,pp->kd[0],&(pp->y));
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8006d32:	2006      	movs	r0, #6
 8006d34:	f7fe fa5f 	bl	80051f6 <PIDGainSet>
								PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	3384      	adds	r3, #132	; 0x84
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	3304      	adds	r3, #4
 8006d48:	edd3 7a00 	vldr	s15, [r3]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006d52:	4619      	mov	r1, r3
 8006d54:	eeb0 0a67 	vmov.f32	s0, s15
 8006d58:	2003      	movs	r0, #3
 8006d5a:	f7fe fa4c 	bl	80051f6 <PIDGainSet>
								PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	3394      	adds	r3, #148	; 0x94
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	edd3 7a00 	vldr	s15, [r3]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006d76:	4619      	mov	r1, r3
 8006d78:	eeb0 0a67 	vmov.f32	s0, s15
 8006d7c:	2003      	movs	r0, #3
 8006d7e:	f7fe fa3a 	bl	80051f6 <PIDGainSet>
								pp->crnt_crv_pt=0;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
								pp->pp_crv_calc = 0;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528

								pp->pp_lck_enb = 0;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8006d9a:	e1b8      	b.n	800710e <PathPlan+0x11fe>

							}
						}else{
							pp->point_count++;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006da2:	1c5a      	adds	r2, r3, #1
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							if(pp->target_x[pp->point_count]-pp->real_x){
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	331a      	adds	r3, #26
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	ed93 7a00 	vldr	s14, [r3]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006dc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006dc6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dce:	d01d      	beq.n	8006e0c <PathPlan+0xefc>
								PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	331a      	adds	r3, #26
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4413      	add	r3, r2
 8006dde:	ed93 7a00 	vldr	s14, [r3]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006de8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006dec:	eef0 7ae7 	vabs.f32	s15, s15
 8006df0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006df4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006dfe:	4619      	mov	r1, r3
 8006e00:	eeb0 0a47 	vmov.f32	s0, s14
 8006e04:	2002      	movs	r0, #2
 8006e06:	f7fe f9f6 	bl	80051f6 <PIDGainSet>
 8006e0a:	e008      	b.n	8006e1e <PathPlan+0xf0e>
							} else {
								PIDGainSet(KE,1.0,&(pp->x));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006e12:	4619      	mov	r1, r3
 8006e14:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006e18:	2002      	movs	r0, #2
 8006e1a:	f7fe f9ec 	bl	80051f6 <PIDGainSet>
							}
							if(pp->target_y[pp->point_count]-pp->real_y){
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	3328      	adds	r3, #40	; 0x28
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	ed93 7a00 	vldr	s14, [r3]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006e38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e3c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e44:	d01e      	beq.n	8006e84 <PathPlan+0xf74>
								PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	3328      	adds	r3, #40	; 0x28
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	3304      	adds	r3, #4
 8006e56:	ed93 7a00 	vldr	s14, [r3]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006e60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e64:	eef0 7ae7 	vabs.f32	s15, s15
 8006e68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006e76:	4619      	mov	r1, r3
 8006e78:	eeb0 0a47 	vmov.f32	s0, s14
 8006e7c:	2002      	movs	r0, #2
 8006e7e:	f7fe f9ba 	bl	80051f6 <PIDGainSet>
 8006e82:	e008      	b.n	8006e96 <PathPlan+0xf86>
							} else {
								PIDGainSet(KE,1.0,&(pp->y));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006e90:	2002      	movs	r0, #2
 8006e92:	f7fe f9b0 	bl	80051f6 <PIDGainSet>
							}
							PIDGainSet(KP,pp->kp[0],&(pp->x));
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8006ea8:	2004      	movs	r0, #4
 8006eaa:	f7fe f9a4 	bl	80051f6 <PIDGainSet>
							PIDGainSet(KP,pp->kp[0],&(pp->y));
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006eba:	4619      	mov	r1, r3
 8006ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8006ec0:	2004      	movs	r0, #4
 8006ec2:	f7fe f998 	bl	80051f6 <PIDGainSet>
							PIDGainSet(KI,pp->ki[0],&(pp->x));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8006ed8:	2005      	movs	r0, #5
 8006eda:	f7fe f98c 	bl	80051f6 <PIDGainSet>
							PIDGainSet(KI,pp->ki[0],&(pp->y));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006eea:	4619      	mov	r1, r3
 8006eec:	eeb0 0a67 	vmov.f32	s0, s15
 8006ef0:	2005      	movs	r0, #5
 8006ef2:	f7fe f980 	bl	80051f6 <PIDGainSet>
							PIDGainSet(KD,pp->kd[0],&(pp->x));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006f02:	4619      	mov	r1, r3
 8006f04:	eeb0 0a67 	vmov.f32	s0, s15
 8006f08:	2006      	movs	r0, #6
 8006f0a:	f7fe f974 	bl	80051f6 <PIDGainSet>
							PIDGainSet(KD,pp->kd[0],&(pp->y));
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8006f20:	2006      	movs	r0, #6
 8006f22:	f7fe f968 	bl	80051f6 <PIDGainSet>
							PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	3384      	adds	r3, #132	; 0x84
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	3304      	adds	r3, #4
 8006f36:	edd3 7a00 	vldr	s15, [r3]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006f40:	4619      	mov	r1, r3
 8006f42:	eeb0 0a67 	vmov.f32	s0, s15
 8006f46:	2003      	movs	r0, #3
 8006f48:	f7fe f955 	bl	80051f6 <PIDGainSet>
							PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	3394      	adds	r3, #148	; 0x94
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	edd3 7a00 	vldr	s15, [r3]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006f64:	4619      	mov	r1, r3
 8006f66:	eeb0 0a67 	vmov.f32	s0, s15
 8006f6a:	2003      	movs	r0, #3
 8006f6c:	f7fe f943 	bl	80051f6 <PIDGainSet>
							pp->crnt_crv_pt=0;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
							pp->pp_crv_calc = 0;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8006f80:	e0c5      	b.n	800710e <PathPlan+0x11fe>
						}
					}

				}else if(pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && pp->point_count == (pp->target_point - 1) ){
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	429a      	cmp	r2, r3
 8006f92:	f040 80bd 	bne.w	8007110 <PathPlan+0x1200>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	f040 80b3 	bne.w	8007110 <PathPlan+0x1200>

					if(fabs(pp->error_x)<pp->f_tol_xy && fabs(pp->error_y)<pp->f_tol_xy && (int)pp->error_z<=pp->f_tol_z){
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8006fb0:	eeb0 7ae7 	vabs.f32	s14, s15
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8006fba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fc2:	f140 80a5 	bpl.w	8007110 <PathPlan+0x1200>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8006fcc:	eeb0 7ae7 	vabs.f32	s14, s15
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8006fd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fde:	f140 8097 	bpl.w	8007110 <PathPlan+0x1200>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8006fe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	edd3 7ac1 	vldr	s15, [r3, #772]	; 0x304
 8006ff6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ffe:	f200 8087 	bhi.w	8007110 <PathPlan+0x1200>

						if(pp->target_accurate[pp->point_count] == 1.0){
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	3346      	adds	r3, #70	; 0x46
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4413      	add	r3, r2
 8007010:	3304      	adds	r3, #4
 8007012:	edd3 7a00 	vldr	s15, [r3]
 8007016:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800701a:	eef4 7a47 	vcmp.f32	s15, s14
 800701e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007022:	d13e      	bne.n	80070a2 <PathPlan+0x1192>
							if(pp->pp_lck_enb == 1){
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 800702a:	2b01      	cmp	r3, #1
 800702c:	d170      	bne.n	8007110 <PathPlan+0x1200>
								PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8007034:	edd3 7a00 	vldr	s15, [r3]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800703e:	4619      	mov	r1, r3
 8007040:	eeb0 0a67 	vmov.f32	s0, s15
 8007044:	2004      	movs	r0, #4
 8007046:	f7fe f8d6 	bl	80051f6 <PIDGainSet>
								//								APPStop();
//								RNSStop(&rns);
//								PP_stop(&pp);
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 800704a:	2201      	movs	r2, #1
 800704c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007050:	487e      	ldr	r0, [pc, #504]	; (800724c <PathPlan+0x133c>)
 8007052:	f00b f995 	bl	8012380 <HAL_GPIO_WritePin>
								//								LED4 = 1;
								PIDDelayInit(&(pp->x));
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800705c:	4618      	mov	r0, r3
 800705e:	f7fe fa1c 	bl	800549a <PIDDelayInit>
								PIDDelayInit(&(pp->y));
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007068:	4618      	mov	r0, r3
 800706a:	f7fe fa16 	bl	800549a <PIDDelayInit>
								PIDDelayInit(&(pp->z));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8007074:	4618      	mov	r0, r3
 8007076:	f7fe fa10 	bl	800549a <PIDDelayInit>
								pp->crnt_crv_pt=0;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
								pp->pp_crv_calc = 0;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
								pp->pp_start=0;
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8007090:	f36f 0300 	bfc	r3, #0, #1
 8007094:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
								pp->pp_lck_enb = 0;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 80070a0:	e036      	b.n	8007110 <PathPlan+0x1200>
							}
						}else{
							PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 80070a8:	edd3 7a00 	vldr	s15, [r3]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80070b2:	4619      	mov	r1, r3
 80070b4:	eeb0 0a67 	vmov.f32	s0, s15
 80070b8:	2004      	movs	r0, #4
 80070ba:	f7fe f89c 	bl	80051f6 <PIDGainSet>
//							RNSStop(&rns);
//							PP_stop(&pp);
							//							APPStop();
							//							LED4 = 1;
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 80070be:	2201      	movs	r2, #1
 80070c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80070c4:	4861      	ldr	r0, [pc, #388]	; (800724c <PathPlan+0x133c>)
 80070c6:	f00b f95b 	bl	8012380 <HAL_GPIO_WritePin>
							PIDDelayInit(&(pp->x));
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fe f9e2 	bl	800549a <PIDDelayInit>
							PIDDelayInit(&(pp->y));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fe f9dc 	bl	800549a <PIDDelayInit>
							PIDDelayInit(&(pp->z));
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fe f9d6 	bl	800549a <PIDDelayInit>
							pp->crnt_crv_pt=0;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
							pp->pp_crv_calc = 0;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
							pp->pp_start=0;
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8007104:	f36f 0300 	bfc	r3, #0, #1
 8007108:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
 800710c:	e000      	b.n	8007110 <PathPlan+0x1200>
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 800710e:	bf00      	nop

				}
			}


			if(pp->pp_start){
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b00      	cmp	r3, #0
 800711e:	f001 8557 	beq.w	8008bd0 <PathPlan+0x2cc0>

				pp->dx = pp->pp_crv_x[pp->crnt_crv_pt] - pp->prev_real_x;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	ed93 7a00 	vldr	s14, [r3]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800713c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
				pp->dy = pp->pp_crv_y[pp->crnt_crv_pt] - pp->prev_real_y;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4413      	add	r3, r2
 8007156:	ed93 7a00 	vldr	s14, [r3]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8007160:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

				pp->rotate=0;
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8007170:	f36f 03c3 	bfc	r3, #3, #1
 8007174:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538

				if ((pp->dx != 0.0 || pp->dx != -0.0)&&(pp->dy != -0.0 || pp->dy != 0.0)){
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800717e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007186:	d107      	bne.n	8007198 <PathPlan+0x1288>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800718e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007196:	d021      	beq.n	80071dc <PathPlan+0x12cc>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800719e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80071a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071a6:	d107      	bne.n	80071b8 <PathPlan+0x12a8>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80071ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80071b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071b6:	d011      	beq.n	80071dc <PathPlan+0x12cc>
					pp->heading = atan2f(pp->dy, pp->dx);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80071c4:	eef0 0a47 	vmov.f32	s1, s14
 80071c8:	eeb0 0a67 	vmov.f32	s0, s15
 80071cc:	f017 fb3e 	bl	801e84c <atan2f>
 80071d0:	eef0 7a40 	vmov.f32	s15, s0
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 80071da:	e048      	b.n	800726e <PathPlan+0x135e>
				} else {
					if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy < 0.0) {
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80071e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80071e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ea:	d007      	beq.n	80071fc <PathPlan+0x12ec>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80071f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80071f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071fa:	d10b      	bne.n	8007214 <PathPlan+0x1304>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007202:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800720a:	d503      	bpl.n	8007214 <PathPlan+0x1304>
						pp->heading = 1.5708;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a10      	ldr	r2, [pc, #64]	; (8007250 <PathPlan+0x1340>)
 8007210:	65da      	str	r2, [r3, #92]	; 0x5c
 8007212:	e02c      	b.n	800726e <PathPlan+0x135e>
					} else if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy > 0.0) {
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800721a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800721e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007222:	d007      	beq.n	8007234 <PathPlan+0x1324>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800722a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800722e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007232:	d111      	bne.n	8007258 <PathPlan+0x1348>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800723a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800723e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007242:	dd09      	ble.n	8007258 <PathPlan+0x1348>
						pp->heading = -1.5708;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a03      	ldr	r2, [pc, #12]	; (8007254 <PathPlan+0x1344>)
 8007248:	65da      	str	r2, [r3, #92]	; 0x5c
 800724a:	e010      	b.n	800726e <PathPlan+0x135e>
 800724c:	40020800 	.word	0x40020800
 8007250:	3fc90ff9 	.word	0x3fc90ff9
 8007254:	bfc90ff9 	.word	0xbfc90ff9
					} else {
						pp->heading = 0.0;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f04f 0200 	mov.w	r2, #0
 800725e:	65da      	str	r2, [r3, #92]	; 0x5c
						pp->rotate = 1;
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8007266:	f043 0308 	orr.w	r3, r3, #8
 800726a:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
					}
				}

				pp->vx  = pp->target_vel[pp->point_count] * cosf(pp->heading);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	3374      	adds	r3, #116	; 0x74
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	ed93 8a00 	vldr	s16, [r3]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8007286:	eeb0 0a67 	vmov.f32	s0, s15
 800728a:	f017 fa55 	bl	801e738 <cosf>
 800728e:	eef0 7a40 	vmov.f32	s15, s0
 8007292:	ee68 7a27 	vmul.f32	s15, s16, s15
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				pp->vy  = pp->target_vel[pp->point_count] * sinf(pp->heading);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	3374      	adds	r3, #116	; 0x74
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	ed93 8a00 	vldr	s16, [r3]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80072b4:	eeb0 0a67 	vmov.f32	s0, s15
 80072b8:	f017 fa86 	bl	801e7c8 <sinf>
 80072bc:	eef0 7a40 	vmov.f32	s15, s0
 80072c0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

				if(pp->rotate){
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80072d0:	f003 0308 	and.w	r3, r3, #8
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d007      	beq.n	80072ea <PathPlan+0x13da>
					pp->vx = pp->vy = 0.0;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f04f 0200 	mov.w	r2, #0
 80072e0:	665a      	str	r2, [r3, #100]	; 0x64
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	661a      	str	r2, [r3, #96]	; 0x60
				}

				PID(&(pp->x));
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7fe f8f0 	bl	80054d6 <PID>
				PID(&(pp->y));
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7fe f8ea 	bl	80054d6 <PID>
				PID(&(pp->z));
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8007308:	4618      	mov	r0, r3
 800730a:	f7fe f8e4 	bl	80054d6 <PID>

				pp->rux =   pp->outx*cosf(pp->real_z_rad) - pp->outy*sinf(pp->real_z_rad);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	edd3 7a06 	vldr	s15, [r3, #24]
 800731a:	eeb0 0a67 	vmov.f32	s0, s15
 800731e:	f017 fa0b 	bl	801e738 <cosf>
 8007322:	eef0 7a40 	vmov.f32	s15, s0
 8007326:	ee28 8a27 	vmul.f32	s16, s16, s15
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	edd3 7a06 	vldr	s15, [r3, #24]
 8007336:	eeb0 0a67 	vmov.f32	s0, s15
 800733a:	f017 fa45 	bl	801e7c8 <sinf>
 800733e:	eef0 7a40 	vmov.f32	s15, s0
 8007342:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007346:	ee78 7a67 	vsub.f32	s15, s16, s15
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
				pp->ruy =   pp->outx*sinf(pp->real_z_rad) + pp->outy*cosf(pp->real_z_rad);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	edd3 7a06 	vldr	s15, [r3, #24]
 800735c:	eeb0 0a67 	vmov.f32	s0, s15
 8007360:	f017 fa32 	bl	801e7c8 <sinf>
 8007364:	eef0 7a40 	vmov.f32	s15, s0
 8007368:	ee28 8a27 	vmul.f32	s16, s16, s15
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	edd3 7a06 	vldr	s15, [r3, #24]
 8007378:	eeb0 0a67 	vmov.f32	s0, s15
 800737c:	f017 f9dc 	bl	801e738 <cosf>
 8007380:	eef0 7a40 	vmov.f32	s15, s0
 8007384:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007388:	ee78 7a27 	vadd.f32	s15, s16, s15
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	edc3 7ab3 	vstr	s15, [r3, #716]	; 0x2cc
				pp->rvx =   pp->vx*cosf(pp->real_z_rad) - pp->vy*sinf(pp->real_z_rad);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	edd3 7a06 	vldr	s15, [r3, #24]
 800739e:	eeb0 0a67 	vmov.f32	s0, s15
 80073a2:	f017 f9c9 	bl	801e738 <cosf>
 80073a6:	eef0 7a40 	vmov.f32	s15, s0
 80073aa:	ee28 8a27 	vmul.f32	s16, s16, s15
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	edd3 7a06 	vldr	s15, [r3, #24]
 80073ba:	eeb0 0a67 	vmov.f32	s0, s15
 80073be:	f017 fa03 	bl	801e7c8 <sinf>
 80073c2:	eef0 7a40 	vmov.f32	s15, s0
 80073c6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80073ca:	ee78 7a67 	vsub.f32	s15, s16, s15
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	edc3 7ab4 	vstr	s15, [r3, #720]	; 0x2d0
				pp->rvy =   pp->vx*sinf(pp->real_z_rad) + pp->vy*cosf(pp->real_z_rad);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	edd3 7a06 	vldr	s15, [r3, #24]
 80073e0:	eeb0 0a67 	vmov.f32	s0, s15
 80073e4:	f017 f9f0 	bl	801e7c8 <sinf>
 80073e8:	eef0 7a40 	vmov.f32	s15, s0
 80073ec:	ee28 8a27 	vmul.f32	s16, s16, s15
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	edd3 7a06 	vldr	s15, [r3, #24]
 80073fc:	eeb0 0a67 	vmov.f32	s0, s15
 8007400:	f017 f99a 	bl	801e738 <cosf>
 8007404:	eef0 7a40 	vmov.f32	s15, s0
 8007408:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800740c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	edc3 7ab5 	vstr	s15, [r3, #724]	; 0x2d4

				if(pp->base_shape== 0){
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 800741c:	2b00      	cmp	r3, #0
 800741e:	f040 8161 	bne.w	80076e4 <PathPlan+0x17d4>
					pp->u1 = 0.707107 * ( pp->ruy - pp->rux) - (pp->outz * 1.0);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800742e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007432:	ee17 0a90 	vmov	r0, s15
 8007436:	f7f9 f887 	bl	8000548 <__aeabi_f2d>
 800743a:	f20f 6338 	addw	r3, pc, #1592	; 0x638
 800743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007442:	f7f9 f8d9 	bl	80005f8 <__aeabi_dmul>
 8007446:	4602      	mov	r2, r0
 8007448:	460b      	mov	r3, r1
 800744a:	4614      	mov	r4, r2
 800744c:	461d      	mov	r5, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007454:	4618      	mov	r0, r3
 8007456:	f7f9 f877 	bl	8000548 <__aeabi_f2d>
 800745a:	4602      	mov	r2, r0
 800745c:	460b      	mov	r3, r1
 800745e:	4620      	mov	r0, r4
 8007460:	4629      	mov	r1, r5
 8007462:	f7f8 ff11 	bl	8000288 <__aeabi_dsub>
 8007466:	4602      	mov	r2, r0
 8007468:	460b      	mov	r3, r1
 800746a:	4610      	mov	r0, r2
 800746c:	4619      	mov	r1, r3
 800746e:	f7f9 fbbb 	bl	8000be8 <__aeabi_d2f>
 8007472:	4602      	mov	r2, r0
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = 0.707107 * ( pp->ruy + pp->rux) + (pp->outz * 1.0);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8007486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800748a:	ee17 0a90 	vmov	r0, s15
 800748e:	f7f9 f85b 	bl	8000548 <__aeabi_f2d>
 8007492:	f20f 53e0 	addw	r3, pc, #1504	; 0x5e0
 8007496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749a:	f7f9 f8ad 	bl	80005f8 <__aeabi_dmul>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	4614      	mov	r4, r2
 80074a4:	461d      	mov	r5, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7f9 f84b 	bl	8000548 <__aeabi_f2d>
 80074b2:	4602      	mov	r2, r0
 80074b4:	460b      	mov	r3, r1
 80074b6:	4620      	mov	r0, r4
 80074b8:	4629      	mov	r1, r5
 80074ba:	f7f8 fee7 	bl	800028c <__adddf3>
 80074be:	4602      	mov	r2, r0
 80074c0:	460b      	mov	r3, r1
 80074c2:	4610      	mov	r0, r2
 80074c4:	4619      	mov	r1, r3
 80074c6:	f7f9 fb8f 	bl	8000be8 <__aeabi_d2f>
 80074ca:	4602      	mov	r2, r0
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 0.707107 * ( pp->ruy - pp->rux) + (pp->outz * 1.0);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80074de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074e2:	ee17 0a90 	vmov	r0, s15
 80074e6:	f7f9 f82f 	bl	8000548 <__aeabi_f2d>
 80074ea:	f20f 5388 	addw	r3, pc, #1416	; 0x588
 80074ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f2:	f7f9 f881 	bl	80005f8 <__aeabi_dmul>
 80074f6:	4602      	mov	r2, r0
 80074f8:	460b      	mov	r3, r1
 80074fa:	4614      	mov	r4, r2
 80074fc:	461d      	mov	r5, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007504:	4618      	mov	r0, r3
 8007506:	f7f9 f81f 	bl	8000548 <__aeabi_f2d>
 800750a:	4602      	mov	r2, r0
 800750c:	460b      	mov	r3, r1
 800750e:	4620      	mov	r0, r4
 8007510:	4629      	mov	r1, r5
 8007512:	f7f8 febb 	bl	800028c <__adddf3>
 8007516:	4602      	mov	r2, r0
 8007518:	460b      	mov	r3, r1
 800751a:	4610      	mov	r0, r2
 800751c:	4619      	mov	r1, r3
 800751e:	f7f9 fb63 	bl	8000be8 <__aeabi_d2f>
 8007522:	4602      	mov	r2, r0
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
					pp->u4 = 0.707107 * ( pp->ruy + pp->rux) - (pp->outz * 1.0);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8007536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800753a:	ee17 0a90 	vmov	r0, s15
 800753e:	f7f9 f803 	bl	8000548 <__aeabi_f2d>
 8007542:	f20f 5330 	addw	r3, pc, #1328	; 0x530
 8007546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754a:	f7f9 f855 	bl	80005f8 <__aeabi_dmul>
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	4614      	mov	r4, r2
 8007554:	461d      	mov	r5, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800755c:	4618      	mov	r0, r3
 800755e:	f7f8 fff3 	bl	8000548 <__aeabi_f2d>
 8007562:	4602      	mov	r2, r0
 8007564:	460b      	mov	r3, r1
 8007566:	4620      	mov	r0, r4
 8007568:	4629      	mov	r1, r5
 800756a:	f7f8 fe8d 	bl	8000288 <__aeabi_dsub>
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	4610      	mov	r0, r2
 8007574:	4619      	mov	r1, r3
 8007576:	f7f9 fb37 	bl	8000be8 <__aeabi_d2f>
 800757a:	4602      	mov	r2, r0
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4

					pp->v1 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u1;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800758e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007592:	ee17 0a90 	vmov	r0, s15
 8007596:	f7f8 ffd7 	bl	8000548 <__aeabi_f2d>
 800759a:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 800759e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a2:	f7f9 f829 	bl	80005f8 <__aeabi_dmul>
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	4614      	mov	r4, r2
 80075ac:	461d      	mov	r5, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7f8 ffc7 	bl	8000548 <__aeabi_f2d>
 80075ba:	4602      	mov	r2, r0
 80075bc:	460b      	mov	r3, r1
 80075be:	4620      	mov	r0, r4
 80075c0:	4629      	mov	r1, r5
 80075c2:	f7f8 fe63 	bl	800028c <__adddf3>
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	4610      	mov	r0, r2
 80075cc:	4619      	mov	r1, r3
 80075ce:	f7f9 fb0b 	bl	8000be8 <__aeabi_d2f>
 80075d2:	4602      	mov	r2, r0
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u2;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80075e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075ea:	ee17 0a90 	vmov	r0, s15
 80075ee:	f7f8 ffab 	bl	8000548 <__aeabi_f2d>
 80075f2:	f20f 4380 	addw	r3, pc, #1152	; 0x480
 80075f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fa:	f7f8 fffd 	bl	80005f8 <__aeabi_dmul>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	4614      	mov	r4, r2
 8007604:	461d      	mov	r5, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800760c:	4618      	mov	r0, r3
 800760e:	f7f8 ff9b 	bl	8000548 <__aeabi_f2d>
 8007612:	4602      	mov	r2, r0
 8007614:	460b      	mov	r3, r1
 8007616:	4620      	mov	r0, r4
 8007618:	4629      	mov	r1, r5
 800761a:	f7f8 fe37 	bl	800028c <__adddf3>
 800761e:	4602      	mov	r2, r0
 8007620:	460b      	mov	r3, r1
 8007622:	4610      	mov	r0, r2
 8007624:	4619      	mov	r1, r3
 8007626:	f7f9 fadf 	bl	8000be8 <__aeabi_d2f>
 800762a:	4602      	mov	r2, r0
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u3;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800763e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007642:	ee17 0a90 	vmov	r0, s15
 8007646:	f7f8 ff7f 	bl	8000548 <__aeabi_f2d>
 800764a:	f20f 4328 	addw	r3, pc, #1064	; 0x428
 800764e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007652:	f7f8 ffd1 	bl	80005f8 <__aeabi_dmul>
 8007656:	4602      	mov	r2, r0
 8007658:	460b      	mov	r3, r1
 800765a:	4614      	mov	r4, r2
 800765c:	461d      	mov	r5, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8007664:	4618      	mov	r0, r3
 8007666:	f7f8 ff6f 	bl	8000548 <__aeabi_f2d>
 800766a:	4602      	mov	r2, r0
 800766c:	460b      	mov	r3, r1
 800766e:	4620      	mov	r0, r4
 8007670:	4629      	mov	r1, r5
 8007672:	f7f8 fe0b 	bl	800028c <__adddf3>
 8007676:	4602      	mov	r2, r0
 8007678:	460b      	mov	r3, r1
 800767a:	4610      	mov	r0, r2
 800767c:	4619      	mov	r1, r3
 800767e:	f7f9 fab3 	bl	8000be8 <__aeabi_d2f>
 8007682:	4602      	mov	r2, r0
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
					pp->v4 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u4;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8007696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800769a:	ee17 0a90 	vmov	r0, s15
 800769e:	f7f8 ff53 	bl	8000548 <__aeabi_f2d>
 80076a2:	a3f4      	add	r3, pc, #976	; (adr r3, 8007a74 <PathPlan+0x1b64>)
 80076a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a8:	f7f8 ffa6 	bl	80005f8 <__aeabi_dmul>
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	4614      	mov	r4, r2
 80076b2:	461d      	mov	r5, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7f8 ff44 	bl	8000548 <__aeabi_f2d>
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4620      	mov	r0, r4
 80076c6:	4629      	mov	r1, r5
 80076c8:	f7f8 fde0 	bl	800028c <__adddf3>
 80076cc:	4602      	mov	r2, r0
 80076ce:	460b      	mov	r3, r1
 80076d0:	4610      	mov	r0, r2
 80076d2:	4619      	mov	r1, r3
 80076d4:	f7f9 fa88 	bl	8000be8 <__aeabi_d2f>
 80076d8:	4602      	mov	r2, r0
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
//				hb_count = HAL_GetTick();

			}
		}
	}
}
 80076e0:	f001 ba76 	b.w	8008bd0 <PathPlan+0x2cc0>
				} else if(pp->base_shape==1){
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	f041 8270 	bne.w	8008bd0 <PathPlan+0x2cc0>
					pp->u1 = (0.866 * pp->ruy) - (0.5 * pp->rux) + (pp->outz * 1.0);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7f8 ff26 	bl	8000548 <__aeabi_f2d>
 80076fc:	a3d8      	add	r3, pc, #864	; (adr r3, 8007a60 <PathPlan+0x1b50>)
 80076fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007702:	f7f8 ff79 	bl	80005f8 <__aeabi_dmul>
 8007706:	4602      	mov	r2, r0
 8007708:	460b      	mov	r3, r1
 800770a:	4614      	mov	r4, r2
 800770c:	461d      	mov	r5, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007714:	4618      	mov	r0, r3
 8007716:	f7f8 ff17 	bl	8000548 <__aeabi_f2d>
 800771a:	f04f 0200 	mov.w	r2, #0
 800771e:	4bd2      	ldr	r3, [pc, #840]	; (8007a68 <PathPlan+0x1b58>)
 8007720:	f7f8 ff6a 	bl	80005f8 <__aeabi_dmul>
 8007724:	4602      	mov	r2, r0
 8007726:	460b      	mov	r3, r1
 8007728:	4620      	mov	r0, r4
 800772a:	4629      	mov	r1, r5
 800772c:	f7f8 fdac 	bl	8000288 <__aeabi_dsub>
 8007730:	4602      	mov	r2, r0
 8007732:	460b      	mov	r3, r1
 8007734:	4614      	mov	r4, r2
 8007736:	461d      	mov	r5, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800773e:	4618      	mov	r0, r3
 8007740:	f7f8 ff02 	bl	8000548 <__aeabi_f2d>
 8007744:	4602      	mov	r2, r0
 8007746:	460b      	mov	r3, r1
 8007748:	4620      	mov	r0, r4
 800774a:	4629      	mov	r1, r5
 800774c:	f7f8 fd9e 	bl	800028c <__adddf3>
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	4610      	mov	r0, r2
 8007756:	4619      	mov	r1, r3
 8007758:	f7f9 fa46 	bl	8000be8 <__aeabi_d2f>
 800775c:	4602      	mov	r2, r0
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = (0.866 * pp->ruy) + (0.5 * pp->rux) - (pp->outz * 1.0);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800776a:	4618      	mov	r0, r3
 800776c:	f7f8 feec 	bl	8000548 <__aeabi_f2d>
 8007770:	a3bb      	add	r3, pc, #748	; (adr r3, 8007a60 <PathPlan+0x1b50>)
 8007772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007776:	f7f8 ff3f 	bl	80005f8 <__aeabi_dmul>
 800777a:	4602      	mov	r2, r0
 800777c:	460b      	mov	r3, r1
 800777e:	4614      	mov	r4, r2
 8007780:	461d      	mov	r5, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007788:	4618      	mov	r0, r3
 800778a:	f7f8 fedd 	bl	8000548 <__aeabi_f2d>
 800778e:	f04f 0200 	mov.w	r2, #0
 8007792:	4bb5      	ldr	r3, [pc, #724]	; (8007a68 <PathPlan+0x1b58>)
 8007794:	f7f8 ff30 	bl	80005f8 <__aeabi_dmul>
 8007798:	4602      	mov	r2, r0
 800779a:	460b      	mov	r3, r1
 800779c:	4620      	mov	r0, r4
 800779e:	4629      	mov	r1, r5
 80077a0:	f7f8 fd74 	bl	800028c <__adddf3>
 80077a4:	4602      	mov	r2, r0
 80077a6:	460b      	mov	r3, r1
 80077a8:	4614      	mov	r4, r2
 80077aa:	461d      	mov	r5, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7f8 fec8 	bl	8000548 <__aeabi_f2d>
 80077b8:	4602      	mov	r2, r0
 80077ba:	460b      	mov	r3, r1
 80077bc:	4620      	mov	r0, r4
 80077be:	4629      	mov	r1, r5
 80077c0:	f7f8 fd62 	bl	8000288 <__aeabi_dsub>
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	4610      	mov	r0, r2
 80077ca:	4619      	mov	r1, r3
 80077cc:	f7f9 fa0c 	bl	8000be8 <__aeabi_d2f>
 80077d0:	4602      	mov	r2, r0
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 1.0 * pp->rux + (pp->outz * 1.0);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80077e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	edc3 7ab8 	vstr	s15, [r3, #736]	; 0x2e0
					pp->v1 = (0.866 * pp->rvy) - (0.5 * pp->rvx) + pp->u1;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7f8 fea7 	bl	8000548 <__aeabi_f2d>
 80077fa:	a399      	add	r3, pc, #612	; (adr r3, 8007a60 <PathPlan+0x1b50>)
 80077fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007800:	f7f8 fefa 	bl	80005f8 <__aeabi_dmul>
 8007804:	4602      	mov	r2, r0
 8007806:	460b      	mov	r3, r1
 8007808:	4614      	mov	r4, r2
 800780a:	461d      	mov	r5, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8007812:	4618      	mov	r0, r3
 8007814:	f7f8 fe98 	bl	8000548 <__aeabi_f2d>
 8007818:	f04f 0200 	mov.w	r2, #0
 800781c:	4b92      	ldr	r3, [pc, #584]	; (8007a68 <PathPlan+0x1b58>)
 800781e:	f7f8 feeb 	bl	80005f8 <__aeabi_dmul>
 8007822:	4602      	mov	r2, r0
 8007824:	460b      	mov	r3, r1
 8007826:	4620      	mov	r0, r4
 8007828:	4629      	mov	r1, r5
 800782a:	f7f8 fd2d 	bl	8000288 <__aeabi_dsub>
 800782e:	4602      	mov	r2, r0
 8007830:	460b      	mov	r3, r1
 8007832:	4614      	mov	r4, r2
 8007834:	461d      	mov	r5, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800783c:	4618      	mov	r0, r3
 800783e:	f7f8 fe83 	bl	8000548 <__aeabi_f2d>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	4620      	mov	r0, r4
 8007848:	4629      	mov	r1, r5
 800784a:	f7f8 fd1f 	bl	800028c <__adddf3>
 800784e:	4602      	mov	r2, r0
 8007850:	460b      	mov	r3, r1
 8007852:	4610      	mov	r0, r2
 8007854:	4619      	mov	r1, r3
 8007856:	f7f9 f9c7 	bl	8000be8 <__aeabi_d2f>
 800785a:	4602      	mov	r2, r0
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = (0.866 * pp->rvy) + (0.5 * pp->rvx) + pp->u2;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007868:	4618      	mov	r0, r3
 800786a:	f7f8 fe6d 	bl	8000548 <__aeabi_f2d>
 800786e:	a37c      	add	r3, pc, #496	; (adr r3, 8007a60 <PathPlan+0x1b50>)
 8007870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007874:	f7f8 fec0 	bl	80005f8 <__aeabi_dmul>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	4614      	mov	r4, r2
 800787e:	461d      	mov	r5, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8007886:	4618      	mov	r0, r3
 8007888:	f7f8 fe5e 	bl	8000548 <__aeabi_f2d>
 800788c:	f04f 0200 	mov.w	r2, #0
 8007890:	4b75      	ldr	r3, [pc, #468]	; (8007a68 <PathPlan+0x1b58>)
 8007892:	f7f8 feb1 	bl	80005f8 <__aeabi_dmul>
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	4620      	mov	r0, r4
 800789c:	4629      	mov	r1, r5
 800789e:	f7f8 fcf5 	bl	800028c <__adddf3>
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
 80078a6:	4614      	mov	r4, r2
 80078a8:	461d      	mov	r5, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7f8 fe49 	bl	8000548 <__aeabi_f2d>
 80078b6:	4602      	mov	r2, r0
 80078b8:	460b      	mov	r3, r1
 80078ba:	4620      	mov	r0, r4
 80078bc:	4629      	mov	r1, r5
 80078be:	f7f8 fce5 	bl	800028c <__adddf3>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4610      	mov	r0, r2
 80078c8:	4619      	mov	r1, r3
 80078ca:	f7f9 f98d 	bl	8000be8 <__aeabi_d2f>
 80078ce:	4602      	mov	r2, r0
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 1.0 * pp->rvx + pp->u3;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	ed93 7ab4 	vldr	s14, [r3, #720]	; 0x2d0
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 80078e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	edc3 7abc 	vstr	s15, [r3, #752]	; 0x2f0
}
 80078ec:	f001 b970 	b.w	8008bd0 <PathPlan+0x2cc0>
			led3 = 1;
 80078f0:	4a5e      	ldr	r2, [pc, #376]	; (8007a6c <PathPlan+0x1b5c>)
 80078f2:	7853      	ldrb	r3, [r2, #1]
 80078f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078f8:	7053      	strb	r3, [r2, #1]
			pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	331a      	adds	r3, #26
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	ed93 7a00 	vldr	s14, [r3]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007912:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
			pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	3328      	adds	r3, #40	; 0x28
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4413      	add	r3, r2
 800792a:	3304      	adds	r3, #4
 800792c:	ed93 7a00 	vldr	s14, [r3]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
			pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	3338      	adds	r3, #56	; 0x38
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	4413      	add	r3, r2
 800794e:	ed93 7a00 	vldr	s14, [r3]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	edd3 7a04 	vldr	s15, [r3, #16]
 8007958:	ee77 7a67 	vsub.f32	s15, s14, s15
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8007968:	eef0 7ae7 	vabs.f32	s15, s15
 800796c:	ee17 0a90 	vmov	r0, s15
 8007970:	f7f8 fdea 	bl	8000548 <__aeabi_f2d>
 8007974:	4604      	mov	r4, r0
 8007976:	460d      	mov	r5, r1
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 800797e:	eef0 7ae7 	vabs.f32	s15, s15
 8007982:	ee17 0a90 	vmov	r0, s15
 8007986:	f7f8 fddf 	bl	8000548 <__aeabi_f2d>
 800798a:	4602      	mov	r2, r0
 800798c:	460b      	mov	r3, r1
 800798e:	4620      	mov	r0, r4
 8007990:	4629      	mov	r1, r5
 8007992:	f7f8 fc7b 	bl	800028c <__adddf3>
 8007996:	4602      	mov	r2, r0
 8007998:	460b      	mov	r3, r1
 800799a:	4610      	mov	r0, r2
 800799c:	4619      	mov	r1, r3
 800799e:	f04f 0200 	mov.w	r2, #0
 80079a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80079a6:	f7f8 ff51 	bl	800084c <__aeabi_ddiv>
 80079aa:	4602      	mov	r2, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	4614      	mov	r4, r2
 80079b0:	461d      	mov	r5, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7f8 fdc5 	bl	8000548 <__aeabi_f2d>
 80079be:	4602      	mov	r2, r0
 80079c0:	460b      	mov	r3, r1
 80079c2:	4620      	mov	r0, r4
 80079c4:	4629      	mov	r1, r5
 80079c6:	f7f9 f889 	bl	8000adc <__aeabi_dcmplt>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d013      	beq.n	80079f8 <PathPlan+0x1ae8>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 80079d6:	eeb0 7ae7 	vabs.f32	s14, s15
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 80079e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80079e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079e8:	d506      	bpl.n	80079f8 <PathPlan+0x1ae8>
				pp->pp_lck = 1.0;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80079f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80079f4:	601a      	str	r2, [r3, #0]
 80079f6:	e005      	b.n	8007a04 <PathPlan+0x1af4>
				pp->pp_lck = 0.0;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80079fe:	f04f 0200 	mov.w	r2, #0
 8007a02:	601a      	str	r2, [r3, #0]
			pp->pp_lck_count = pp->pp_lck_count + 1.0;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007a0a:	edd3 7a00 	vldr	s15, [r3]
 8007a0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007a1c:	edc3 7a00 	vstr	s15, [r3]
			if(pp->pp_lck_count <= 60.0)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007a26:	edd3 7a00 	vldr	s15, [r3]
 8007a2a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8007a70 <PathPlan+0x1b60>
 8007a2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a36:	d821      	bhi.n	8007a7c <PathPlan+0x1b6c>
				pp->pp_lck_cal = pp->pp_lck_cal + pp->pp_lck;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007a3e:	ed93 7a00 	vldr	s14, [r3]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007a48:	edd3 7a00 	vldr	s15, [r3]
 8007a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007a56:	edc3 7a00 	vstr	s15, [r3]
 8007a5a:	e045      	b.n	8007ae8 <PathPlan+0x1bd8>
 8007a5c:	f3af 8000 	nop.w
 8007a60:	a1cac083 	.word	0xa1cac083
 8007a64:	3febb645 	.word	0x3febb645
 8007a68:	3fe00000 	.word	0x3fe00000
 8007a6c:	40020814 	.word	0x40020814
 8007a70:	42700000 	.word	0x42700000
 8007a74:	dbf8b9bb 	.word	0xdbf8b9bb
 8007a78:	3fe6a09e 	.word	0x3fe6a09e
				pp->pp_lck_final = (pp->pp_lck_cal) / (pp->pp_lck_count) ;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007a82:	edd3 6a00 	vldr	s13, [r3]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007a8c:	ed93 7a00 	vldr	s14, [r3]
 8007a90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8007a9a:	edc3 7a00 	vstr	s15, [r3]
				if(pp->pp_lck_final >= 0.95)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7f8 fd4e 	bl	8000548 <__aeabi_f2d>
 8007aac:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 8007ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab4:	f7f9 f826 	bl	8000b04 <__aeabi_dcmpge>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d004      	beq.n	8007ac8 <PathPlan+0x1bb8>
					pp->pp_lck_enb = 1;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8007ac6:	e003      	b.n	8007ad0 <PathPlan+0x1bc0>
					pp->pp_lck_enb = 0;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
				pp->pp_lck_count = 0.0;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007ad6:	f04f 0200 	mov.w	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]
				pp->pp_lck_cal   = 0.0;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007ae2:	f04f 0200 	mov.w	r2, #0
 8007ae6:	601a      	str	r2, [r3, #0]
			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){ // Already almost at destination
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8007aee:	eef0 7ae7 	vabs.f32	s15, s15
 8007af2:	ee17 0a90 	vmov	r0, s15
 8007af6:	f7f8 fd27 	bl	8000548 <__aeabi_f2d>
 8007afa:	4604      	mov	r4, r0
 8007afc:	460d      	mov	r5, r1
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8007b04:	eef0 7ae7 	vabs.f32	s15, s15
 8007b08:	ee17 0a90 	vmov	r0, s15
 8007b0c:	f7f8 fd1c 	bl	8000548 <__aeabi_f2d>
 8007b10:	4602      	mov	r2, r0
 8007b12:	460b      	mov	r3, r1
 8007b14:	4620      	mov	r0, r4
 8007b16:	4629      	mov	r1, r5
 8007b18:	f7f8 fbb8 	bl	800028c <__adddf3>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4610      	mov	r0, r2
 8007b22:	4619      	mov	r1, r3
 8007b24:	f04f 0200 	mov.w	r2, #0
 8007b28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b2c:	f7f8 fe8e 	bl	800084c <__aeabi_ddiv>
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	4614      	mov	r4, r2
 8007b36:	461d      	mov	r5, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7f8 fd02 	bl	8000548 <__aeabi_f2d>
 8007b44:	4602      	mov	r2, r0
 8007b46:	460b      	mov	r3, r1
 8007b48:	4620      	mov	r0, r4
 8007b4a:	4629      	mov	r1, r5
 8007b4c:	f7f8 ffc6 	bl	8000adc <__aeabi_dcmplt>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f000 84a6 	beq.w	80084a4 <PathPlan+0x2594>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8007b5e:	eeb0 7ae7 	vabs.f32	s14, s15
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 8007b68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b70:	f140 8498 	bpl.w	80084a4 <PathPlan+0x2594>
				if(pp->point_count < (pp->target_point - 2)){ // Checking is second last point or not
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007b80:	3b02      	subs	r3, #2
 8007b82:	429a      	cmp	r2, r3
 8007b84:	f280 8206 	bge.w	8007f94 <PathPlan+0x2084>
					if(pp->target_accurate[pp->point_count] == 1.0){ // point_lock enable
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	3346      	adds	r3, #70	; 0x46
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4413      	add	r3, r2
 8007b96:	3304      	adds	r3, #4
 8007b98:	edd3 7a00 	vldr	s15, [r3]
 8007b9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ba0:	eef4 7a47 	vcmp.f32	s15, s14
 8007ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba8:	f040 813a 	bne.w	8007e20 <PathPlan+0x1f10>
						if(pp->pp_lck_enb == 1){ // After < tol some time, lck_enb = 1
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	f040 8476 	bne.w	80084a4 <PathPlan+0x2594>
							pp->point_count++; // Showing reached previous destination
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007bbe:	1c5a      	adds	r2, r3, #1
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	331a      	adds	r3, #26
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4413      	add	r3, r2
 8007bd4:	ed93 7a00 	vldr	s14, [r3]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007bde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
							pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	3328      	adds	r3, #40	; 0x28
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4413      	add	r3, r2
 8007bf6:	3304      	adds	r3, #4
 8007bf8:	ed93 7a00 	vldr	s14, [r3]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
							pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	3338      	adds	r3, #56	; 0x38
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4413      	add	r3, r2
 8007c1a:	ed93 7a00 	vldr	s14, [r3]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	edd3 7a04 	vldr	s15, [r3, #16]
 8007c24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
							if(pp->target_x[pp->point_count]-pp->real_x){
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	331a      	adds	r3, #26
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	ed93 7a00 	vldr	s14, [r3]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007c46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c52:	d03d      	beq.n	8007cd0 <PathPlan+0x1dc0>
										1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	331a      	adds	r3, #26
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4413      	add	r3, r2
 8007c62:	ed93 7a00 	vldr	s14, [r3]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007c6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c70:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8007c74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_x[pp->point_count],
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	3384      	adds	r3, #132	; 0x84
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4413      	add	r3, r2
 8007c8a:	3304      	adds	r3, #4
 8007c8c:	edd3 7a00 	vldr	s15, [r3]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	edd3 6aa3 	vldr	s13, [r3, #652]	; 0x28c
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	ed93 6aa5 	vldr	s12, [r3, #660]	; 0x294
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	edd3 5aa7 	vldr	s11, [r3, #668]	; 0x29c
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007ca8:	4618      	mov	r0, r3
 8007caa:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007cae:	eeb0 3a65 	vmov.f32	s6, s11
 8007cb2:	eef0 2a46 	vmov.f32	s5, s12
 8007cb6:	eeb0 2a66 	vmov.f32	s4, s13
 8007cba:	eef0 1a67 	vmov.f32	s3, s15
 8007cbe:	eeb0 1a47 	vmov.f32	s2, s14
 8007cc2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007cc6:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8007f90 <PathPlan+0x2080>
 8007cca:	f7fd fa61 	bl	8005190 <PIDGainInit>
 8007cce:	e028      	b.n	8007d22 <PathPlan+0x1e12>
										pp->ku_x[pp->point_count],
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	3384      	adds	r3, #132	; 0x84
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	4413      	add	r3, r2
 8007cde:	3304      	adds	r3, #4
 8007ce0:	edd3 7a00 	vldr	s15, [r3]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	ed93 7aa3 	vldr	s14, [r3, #652]	; 0x28c
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	edd3 6aa5 	vldr	s13, [r3, #660]	; 0x294
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	ed93 6aa7 	vldr	s12, [r3, #668]	; 0x29c
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007d02:	eeb0 3a46 	vmov.f32	s6, s12
 8007d06:	eef0 2a66 	vmov.f32	s5, s13
 8007d0a:	eeb0 2a47 	vmov.f32	s4, s14
 8007d0e:	eef0 1a67 	vmov.f32	s3, s15
 8007d12:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8007d16:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007d1a:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8007f90 <PathPlan+0x2080>
 8007d1e:	f7fd fa37 	bl	8005190 <PIDGainInit>
							if(pp->target_y[pp->point_count]-pp->real_y){
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	3328      	adds	r3, #40	; 0x28
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4413      	add	r3, r2
 8007d30:	3304      	adds	r3, #4
 8007d32:	ed93 7a00 	vldr	s14, [r3]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007d3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d40:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d48:	d03d      	beq.n	8007dc6 <PathPlan+0x1eb6>
										1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	3328      	adds	r3, #40	; 0x28
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4413      	add	r3, r2
 8007d58:	3304      	adds	r3, #4
 8007d5a:	ed93 7a00 	vldr	s14, [r3]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007d64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d68:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8007d6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_y[pp->point_count],
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	3394      	adds	r3, #148	; 0x94
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	edd3 7a00 	vldr	s15, [r3]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	edd3 6aa3 	vldr	s13, [r3, #652]	; 0x28c
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	ed93 6aa5 	vldr	s12, [r3, #660]	; 0x294
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	edd3 5aa7 	vldr	s11, [r3, #668]	; 0x29c
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007d9e:	4618      	mov	r0, r3
 8007da0:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007da4:	eeb0 3a65 	vmov.f32	s6, s11
 8007da8:	eef0 2a46 	vmov.f32	s5, s12
 8007dac:	eeb0 2a66 	vmov.f32	s4, s13
 8007db0:	eef0 1a67 	vmov.f32	s3, s15
 8007db4:	eeb0 1a47 	vmov.f32	s2, s14
 8007db8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007dbc:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8007f90 <PathPlan+0x2080>
 8007dc0:	f7fd f9e6 	bl	8005190 <PIDGainInit>
 8007dc4:	e027      	b.n	8007e16 <PathPlan+0x1f06>
										pp->ku_y[pp->point_count],
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	3394      	adds	r3, #148	; 0x94
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	edd3 7a00 	vldr	s15, [r3]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	ed93 7aa3 	vldr	s14, [r3, #652]	; 0x28c
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	edd3 6aa5 	vldr	s13, [r3, #660]	; 0x294
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	ed93 6aa7 	vldr	s12, [r3, #668]	; 0x29c
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007df0:	4618      	mov	r0, r3
 8007df2:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007df6:	eeb0 3a46 	vmov.f32	s6, s12
 8007dfa:	eef0 2a66 	vmov.f32	s5, s13
 8007dfe:	eeb0 2a47 	vmov.f32	s4, s14
 8007e02:	eef0 1a67 	vmov.f32	s3, s15
 8007e06:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8007e0a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007e0e:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8007f90 <PathPlan+0x2080>
 8007e12:	f7fd f9bd 	bl	8005190 <PIDGainInit>
							pp->pp_lck_enb = 0;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8007e1e:	e341      	b.n	80084a4 <PathPlan+0x2594>
						pp->point_count++; // Assuming reached previous point
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007e26:	1c5a      	adds	r2, r3, #1
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
						pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	331a      	adds	r3, #26
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4413      	add	r3, r2
 8007e3c:	ed93 7a00 	vldr	s14, [r3]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	3328      	adds	r3, #40	; 0x28
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4413      	add	r3, r2
 8007e5e:	3304      	adds	r3, #4
 8007e60:	ed93 7a00 	vldr	s14, [r3]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007e6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	3338      	adds	r3, #56	; 0x38
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	4413      	add	r3, r2
 8007e82:	ed93 7a00 	vldr	s14, [r3]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	edd3 7a04 	vldr	s15, [r3, #16]
 8007e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
						if(pp->target_x[pp->point_count]-pp->real_x){
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	331a      	adds	r3, #26
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4413      	add	r3, r2
 8007ea4:	ed93 7a00 	vldr	s14, [r3]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007eae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007eb2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eba:	d01d      	beq.n	8007ef8 <PathPlan+0x1fe8>
							PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	331a      	adds	r3, #26
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4413      	add	r3, r2
 8007eca:	ed93 7a00 	vldr	s14, [r3]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007ed4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ed8:	eef0 7ae7 	vabs.f32	s15, s15
 8007edc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ee0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007eea:	4619      	mov	r1, r3
 8007eec:	eeb0 0a47 	vmov.f32	s0, s14
 8007ef0:	2002      	movs	r0, #2
 8007ef2:	f7fd f980 	bl	80051f6 <PIDGainSet>
 8007ef6:	e008      	b.n	8007f0a <PathPlan+0x1ffa>
							PIDGainSet(KE,1.0,&(pp->x));
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007efe:	4619      	mov	r1, r3
 8007f00:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007f04:	2002      	movs	r0, #2
 8007f06:	f7fd f976 	bl	80051f6 <PIDGainSet>
						if(pp->target_y[pp->point_count]-pp->real_y){
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	3328      	adds	r3, #40	; 0x28
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	3304      	adds	r3, #4
 8007f1a:	ed93 7a00 	vldr	s14, [r3]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007f24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f28:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f30:	d01e      	beq.n	8007f70 <PathPlan+0x2060>
							PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	3328      	adds	r3, #40	; 0x28
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	3304      	adds	r3, #4
 8007f42:	ed93 7a00 	vldr	s14, [r3]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f50:	eef0 7ae7 	vabs.f32	s15, s15
 8007f54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007f62:	4619      	mov	r1, r3
 8007f64:	eeb0 0a47 	vmov.f32	s0, s14
 8007f68:	2002      	movs	r0, #2
 8007f6a:	f7fd f944 	bl	80051f6 <PIDGainSet>
 8007f6e:	e299      	b.n	80084a4 <PathPlan+0x2594>
							PIDGainSet(KE,1.0,&(pp->y));
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007f76:	4619      	mov	r1, r3
 8007f78:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007f7c:	2002      	movs	r0, #2
 8007f7e:	f7fd f93a 	bl	80051f6 <PIDGainSet>
 8007f82:	e28f      	b.n	80084a4 <PathPlan+0x2594>
 8007f84:	f3af 8000 	nop.w
 8007f88:	66666666 	.word	0x66666666
 8007f8c:	3fee6666 	.word	0x3fee6666
 8007f90:	3ba3d70a 	.word	0x3ba3d70a
				} else if(pp->point_count == (pp->target_point - 2)){ // Reached second last going last point
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007fa0:	3b02      	subs	r3, #2
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	f040 81fe 	bne.w	80083a4 <PathPlan+0x2494>
					if(pp->target_accurate[pp->point_count] == 1.0){ // point_lock enable
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	3346      	adds	r3, #70	; 0x46
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4413      	add	r3, r2
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	edd3 7a00 	vldr	s15, [r3]
 8007fbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fc0:	eef4 7a47 	vcmp.f32	s15, s14
 8007fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fc8:	f040 813a 	bne.w	8008240 <PathPlan+0x2330>
						if(pp->pp_lck_enb == 1){
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	f040 8266 	bne.w	80084a4 <PathPlan+0x2594>
							pp->point_count++;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007fde:	1c5a      	adds	r2, r3, #1
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	331a      	adds	r3, #26
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	ed93 7a00 	vldr	s14, [r3]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007ffe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
							pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	3328      	adds	r3, #40	; 0x28
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	3304      	adds	r3, #4
 8008018:	ed93 7a00 	vldr	s14, [r3]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008022:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
							pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	3338      	adds	r3, #56	; 0x38
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4413      	add	r3, r2
 800803a:	ed93 7a00 	vldr	s14, [r3]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	edd3 7a04 	vldr	s15, [r3, #16]
 8008044:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
							if(pp->target_x[pp->point_count]-pp->real_x){
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	331a      	adds	r3, #26
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4413      	add	r3, r2
 800805c:	ed93 7a00 	vldr	s14, [r3]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008066:	ee77 7a67 	vsub.f32	s15, s14, s15
 800806a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800806e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008072:	d03d      	beq.n	80080f0 <PathPlan+0x21e0>
										1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	331a      	adds	r3, #26
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	ed93 7a00 	vldr	s14, [r3]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800808c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008090:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8008094:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008098:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_x[pp->point_count],
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	3384      	adds	r3, #132	; 0x84
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	3304      	adds	r3, #4
 80080ac:	edd3 7a00 	vldr	s15, [r3]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	edd3 6aa4 	vldr	s13, [r3, #656]	; 0x290
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	ed93 6aa6 	vldr	s12, [r3, #664]	; 0x298
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	edd3 5aa8 	vldr	s11, [r3, #672]	; 0x2a0
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80080c8:	4618      	mov	r0, r3
 80080ca:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80080ce:	eeb0 3a65 	vmov.f32	s6, s11
 80080d2:	eef0 2a46 	vmov.f32	s5, s12
 80080d6:	eeb0 2a66 	vmov.f32	s4, s13
 80080da:	eef0 1a67 	vmov.f32	s3, s15
 80080de:	eeb0 1a47 	vmov.f32	s2, s14
 80080e2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80080e6:	ed1f 0a56 	vldr	s0, [pc, #-344]	; 8007f90 <PathPlan+0x2080>
 80080ea:	f7fd f851 	bl	8005190 <PIDGainInit>
 80080ee:	e028      	b.n	8008142 <PathPlan+0x2232>
										pp->ku_x[pp->point_count],
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	3384      	adds	r3, #132	; 0x84
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	4413      	add	r3, r2
 80080fe:	3304      	adds	r3, #4
 8008100:	edd3 7a00 	vldr	s15, [r3]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	ed93 7aa4 	vldr	s14, [r3, #656]	; 0x290
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	edd3 6aa6 	vldr	s13, [r3, #664]	; 0x298
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	ed93 6aa8 	vldr	s12, [r3, #672]	; 0x2a0
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800811c:	4618      	mov	r0, r3
 800811e:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8008122:	eeb0 3a46 	vmov.f32	s6, s12
 8008126:	eef0 2a66 	vmov.f32	s5, s13
 800812a:	eeb0 2a47 	vmov.f32	s4, s14
 800812e:	eef0 1a67 	vmov.f32	s3, s15
 8008132:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8008136:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800813a:	ed1f 0a6b 	vldr	s0, [pc, #-428]	; 8007f90 <PathPlan+0x2080>
 800813e:	f7fd f827 	bl	8005190 <PIDGainInit>
							if(pp->target_y[pp->point_count]-pp->real_y){
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	3328      	adds	r3, #40	; 0x28
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4413      	add	r3, r2
 8008150:	3304      	adds	r3, #4
 8008152:	ed93 7a00 	vldr	s14, [r3]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800815c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008160:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008168:	d03d      	beq.n	80081e6 <PathPlan+0x22d6>
										1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	3328      	adds	r3, #40	; 0x28
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	4413      	add	r3, r2
 8008178:	3304      	adds	r3, #4
 800817a:	ed93 7a00 	vldr	s14, [r3]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008188:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 800818c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_y[pp->point_count],
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	3394      	adds	r3, #148	; 0x94
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4413      	add	r3, r2
 80081a2:	edd3 7a00 	vldr	s15, [r3]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	edd3 6aa4 	vldr	s13, [r3, #656]	; 0x290
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	ed93 6aa6 	vldr	s12, [r3, #664]	; 0x298
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	edd3 5aa8 	vldr	s11, [r3, #672]	; 0x2a0
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80081be:	4618      	mov	r0, r3
 80081c0:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80081c4:	eeb0 3a65 	vmov.f32	s6, s11
 80081c8:	eef0 2a46 	vmov.f32	s5, s12
 80081cc:	eeb0 2a66 	vmov.f32	s4, s13
 80081d0:	eef0 1a67 	vmov.f32	s3, s15
 80081d4:	eeb0 1a47 	vmov.f32	s2, s14
 80081d8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80081dc:	ed1f 0a94 	vldr	s0, [pc, #-592]	; 8007f90 <PathPlan+0x2080>
 80081e0:	f7fc ffd6 	bl	8005190 <PIDGainInit>
 80081e4:	e027      	b.n	8008236 <PathPlan+0x2326>
										pp->ku_y[pp->point_count],
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	3394      	adds	r3, #148	; 0x94
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	4413      	add	r3, r2
 80081f4:	edd3 7a00 	vldr	s15, [r3]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	ed93 7aa4 	vldr	s14, [r3, #656]	; 0x290
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	edd3 6aa6 	vldr	s13, [r3, #664]	; 0x298
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	ed93 6aa8 	vldr	s12, [r3, #672]	; 0x2a0
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8008210:	4618      	mov	r0, r3
 8008212:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8008216:	eeb0 3a46 	vmov.f32	s6, s12
 800821a:	eef0 2a66 	vmov.f32	s5, s13
 800821e:	eeb0 2a47 	vmov.f32	s4, s14
 8008222:	eef0 1a67 	vmov.f32	s3, s15
 8008226:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800822a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800822e:	ed1f 0aa8 	vldr	s0, [pc, #-672]	; 8007f90 <PathPlan+0x2080>
 8008232:	f7fc ffad 	bl	8005190 <PIDGainInit>
							pp->pp_lck_enb = 0;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 800823e:	e131      	b.n	80084a4 <PathPlan+0x2594>
						pp->point_count++;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008246:	1c5a      	adds	r2, r3, #1
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
						pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	331a      	adds	r3, #26
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4413      	add	r3, r2
 800825c:	ed93 7a00 	vldr	s14, [r3]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	3328      	adds	r3, #40	; 0x28
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	4413      	add	r3, r2
 800827e:	3304      	adds	r3, #4
 8008280:	ed93 7a00 	vldr	s14, [r3]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800828a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	3338      	adds	r3, #56	; 0x38
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	ed93 7a00 	vldr	s14, [r3]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80082ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
						if(pp->target_x[pp->point_count]-pp->real_x){
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	331a      	adds	r3, #26
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4413      	add	r3, r2
 80082c4:	ed93 7a00 	vldr	s14, [r3]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80082ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80082d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082da:	d01d      	beq.n	8008318 <PathPlan+0x2408>
							PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	331a      	adds	r3, #26
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4413      	add	r3, r2
 80082ea:	ed93 7a00 	vldr	s14, [r3]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80082f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082f8:	eef0 7ae7 	vabs.f32	s15, s15
 80082fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008300:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800830a:	4619      	mov	r1, r3
 800830c:	eeb0 0a47 	vmov.f32	s0, s14
 8008310:	2002      	movs	r0, #2
 8008312:	f7fc ff70 	bl	80051f6 <PIDGainSet>
 8008316:	e008      	b.n	800832a <PathPlan+0x241a>
							PIDGainSet(KE,1.0,&(pp->x));
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800831e:	4619      	mov	r1, r3
 8008320:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008324:	2002      	movs	r0, #2
 8008326:	f7fc ff66 	bl	80051f6 <PIDGainSet>
						if(pp->target_y[pp->point_count]-pp->real_y){
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	3328      	adds	r3, #40	; 0x28
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	3304      	adds	r3, #4
 800833a:	ed93 7a00 	vldr	s14, [r3]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008344:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008348:	eef5 7a40 	vcmp.f32	s15, #0.0
 800834c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008350:	d01e      	beq.n	8008390 <PathPlan+0x2480>
							PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	3328      	adds	r3, #40	; 0x28
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4413      	add	r3, r2
 8008360:	3304      	adds	r3, #4
 8008362:	ed93 7a00 	vldr	s14, [r3]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800836c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008370:	eef0 7ae7 	vabs.f32	s15, s15
 8008374:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008378:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8008382:	4619      	mov	r1, r3
 8008384:	eeb0 0a47 	vmov.f32	s0, s14
 8008388:	2002      	movs	r0, #2
 800838a:	f7fc ff34 	bl	80051f6 <PIDGainSet>
 800838e:	e089      	b.n	80084a4 <PathPlan+0x2594>
							PIDGainSet(KE,1.0,&(pp->y));
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8008396:	4619      	mov	r1, r3
 8008398:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800839c:	2002      	movs	r0, #2
 800839e:	f7fc ff2a 	bl	80051f6 <PIDGainSet>
 80083a2:	e07f      	b.n	80084a4 <PathPlan+0x2594>
				}else if(fabs(pp->error_x)<pp->f_tol_xy && fabs(pp->error_y)<pp->f_tol_xy && (int)pp->error_z<=pp->f_tol_z){ // Reached last point
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 80083aa:	eeb0 7ae7 	vabs.f32	s14, s15
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 80083b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80083b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083bc:	d572      	bpl.n	80084a4 <PathPlan+0x2594>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 80083c4:	eeb0 7ae7 	vabs.f32	s14, s15
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 80083ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80083d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083d6:	d565      	bpl.n	80084a4 <PathPlan+0x2594>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 80083de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	edd3 7ac1 	vldr	s15, [r3, #772]	; 0x304
 80083ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80083f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083f4:	d856      	bhi.n	80084a4 <PathPlan+0x2594>
					if(pp->target_accurate[pp->point_count] == 1.0){
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	3346      	adds	r3, #70	; 0x46
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	3304      	adds	r3, #4
 8008406:	edd3 7a00 	vldr	s15, [r3]
 800840a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800840e:	eef4 7a47 	vcmp.f32	s15, s14
 8008412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008416:	d127      	bne.n	8008468 <PathPlan+0x2558>
						if(pp->pp_lck_enb == 1){
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 800841e:	2b01      	cmp	r3, #1
 8008420:	d140      	bne.n	80084a4 <PathPlan+0x2594>
							led3 = 0;
 8008422:	4a7d      	ldr	r2, [pc, #500]	; (8008618 <PathPlan+0x2708>)
 8008424:	7853      	ldrb	r3, [r2, #1]
 8008426:	f36f 13c7 	bfc	r3, #7, #1
 800842a:	7053      	strb	r3, [r2, #1]
							PIDDelayInit(&(pp->x));
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8008432:	4618      	mov	r0, r3
 8008434:	f7fd f831 	bl	800549a <PIDDelayInit>
							PIDDelayInit(&(pp->y));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800843e:	4618      	mov	r0, r3
 8008440:	f7fd f82b 	bl	800549a <PIDDelayInit>
							PIDDelayInit(&(pp->z));
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800844a:	4618      	mov	r0, r3
 800844c:	f7fd f825 	bl	800549a <PIDDelayInit>
							pp->pp_start=0;
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8008456:	f36f 0300 	bfc	r3, #0, #1
 800845a:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
							pp->pp_lck_enb = 0;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8008466:	e01d      	b.n	80084a4 <PathPlan+0x2594>
						led3 = 0;
 8008468:	4a6b      	ldr	r2, [pc, #428]	; (8008618 <PathPlan+0x2708>)
 800846a:	7853      	ldrb	r3, [r2, #1]
 800846c:	f36f 13c7 	bfc	r3, #7, #1
 8008470:	7053      	strb	r3, [r2, #1]
						PIDDelayInit(&(pp->x));
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8008478:	4618      	mov	r0, r3
 800847a:	f7fd f80e 	bl	800549a <PIDDelayInit>
						PIDDelayInit(&(pp->y));
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8008484:	4618      	mov	r0, r3
 8008486:	f7fd f808 	bl	800549a <PIDDelayInit>
						PIDDelayInit(&(pp->z));
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8008490:	4618      	mov	r0, r3
 8008492:	f7fd f802 	bl	800549a <PIDDelayInit>
						pp->pp_start=0;
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 800849c:	f36f 0300 	bfc	r3, #0, #1
 80084a0:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
			if(pp->pp_start){
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80084aa:	f003 0301 	and.w	r3, r3, #1
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 838d 	beq.w	8008bd0 <PathPlan+0x2cc0>
				pp->dx = pp->target_x[pp->point_count] - pp->prev_real_x;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	331a      	adds	r3, #26
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	ed93 7a00 	vldr	s14, [r3]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80084ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
				pp->dy = pp->target_y[pp->point_count] - pp->prev_real_y;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	3328      	adds	r3, #40	; 0x28
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	3304      	adds	r3, #4
 80084e8:	ed93 7a00 	vldr	s14, [r3]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80084f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
				pp->rotate=0;
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8008502:	f36f 03c3 	bfc	r3, #3, #1
 8008506:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
				if ((pp->dx != 0.0 || pp->dx != -0.0)&&(pp->dy != -0.0 || pp->dy != 0.0)){
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008510:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008518:	d107      	bne.n	800852a <PathPlan+0x261a>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008520:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008528:	d021      	beq.n	800856e <PathPlan+0x265e>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008530:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008538:	d107      	bne.n	800854a <PathPlan+0x263a>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008540:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008548:	d011      	beq.n	800856e <PathPlan+0x265e>
					pp->heading = atan2f(pp->dy, pp->dx);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8008556:	eef0 0a47 	vmov.f32	s1, s14
 800855a:	eeb0 0a67 	vmov.f32	s0, s15
 800855e:	f016 f975 	bl	801e84c <atan2f>
 8008562:	eef0 7a40 	vmov.f32	s15, s0
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 800856c:	e075      	b.n	800865a <PathPlan+0x274a>
					if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy < 0.0) { // Backward
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008574:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800857c:	d007      	beq.n	800858e <PathPlan+0x267e>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008584:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800858c:	d10b      	bne.n	80085a6 <PathPlan+0x2696>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008594:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800859c:	d503      	bpl.n	80085a6 <PathPlan+0x2696>
						pp->heading = -1.5708;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a1e      	ldr	r2, [pc, #120]	; (800861c <PathPlan+0x270c>)
 80085a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80085a4:	e059      	b.n	800865a <PathPlan+0x274a>
					} else if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy > 0.0) { // Forward
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80085ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80085b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085b4:	d007      	beq.n	80085c6 <PathPlan+0x26b6>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80085bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80085c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085c4:	d10b      	bne.n	80085de <PathPlan+0x26ce>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80085cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80085d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085d4:	dd03      	ble.n	80085de <PathPlan+0x26ce>
						pp->heading = 1.5708;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a11      	ldr	r2, [pc, #68]	; (8008620 <PathPlan+0x2710>)
 80085da:	65da      	str	r2, [r3, #92]	; 0x5c
 80085dc:	e03d      	b.n	800865a <PathPlan+0x274a>
					} else if((pp->dy == 0.0 || pp->dy == -0.0) && pp->dx > 0){ // Right
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80085e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80085e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ec:	d007      	beq.n	80085fe <PathPlan+0x26ee>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80085f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80085f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085fc:	d112      	bne.n	8008624 <PathPlan+0x2714>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008604:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800860c:	dd0a      	ble.n	8008624 <PathPlan+0x2714>
						pp->heading = 0.0;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f04f 0200 	mov.w	r2, #0
 8008614:	65da      	str	r2, [r3, #92]	; 0x5c
 8008616:	e020      	b.n	800865a <PathPlan+0x274a>
 8008618:	40020814 	.word	0x40020814
 800861c:	bfc90ff9 	.word	0xbfc90ff9
 8008620:	3fc90ff9 	.word	0x3fc90ff9
					else if((pp->dy == 0.0 || pp->dy == -0.0) && pp->dx < 0) // Left
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800862a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800862e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008632:	d007      	beq.n	8008644 <PathPlan+0x2734>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800863a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800863e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008642:	d10a      	bne.n	800865a <PathPlan+0x274a>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800864a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800864e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008652:	d502      	bpl.n	800865a <PathPlan+0x274a>
						pp->heading = M_PI;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4ad6      	ldr	r2, [pc, #856]	; (80089b0 <PathPlan+0x2aa0>)
 8008658:	65da      	str	r2, [r3, #92]	; 0x5c
				pp->vx  = pp->target_vel[pp->point_count] * cosf(pp->heading);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	3374      	adds	r3, #116	; 0x74
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	4413      	add	r3, r2
 8008668:	ed93 8a00 	vldr	s16, [r3]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8008672:	eeb0 0a67 	vmov.f32	s0, s15
 8008676:	f016 f85f 	bl	801e738 <cosf>
 800867a:	eef0 7a40 	vmov.f32	s15, s0
 800867e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				pp->vy  = pp->target_vel[pp->point_count] * sinf(pp->heading);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	3374      	adds	r3, #116	; 0x74
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	4413      	add	r3, r2
 8008696:	ed93 8a00 	vldr	s16, [r3]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80086a0:	eeb0 0a67 	vmov.f32	s0, s15
 80086a4:	f016 f890 	bl	801e7c8 <sinf>
 80086a8:	eef0 7a40 	vmov.f32	s15, s0
 80086ac:	ee68 7a27 	vmul.f32	s15, s16, s15
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
				if(pp->rotate){
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80086bc:	f003 0308 	and.w	r3, r3, #8
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d007      	beq.n	80086d6 <PathPlan+0x27c6>
					pp->vx = pp->vy = 0.0;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f04f 0200 	mov.w	r2, #0
 80086cc:	665a      	str	r2, [r3, #100]	; 0x64
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	661a      	str	r2, [r3, #96]	; 0x60
				PID(&(pp->x));
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80086dc:	4618      	mov	r0, r3
 80086de:	f7fc fefa 	bl	80054d6 <PID>
				PID(&(pp->y));
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fc fef4 	bl	80054d6 <PID>
				PID(&(pp->z));
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7fc feee 	bl	80054d6 <PID>
				pp->rux =   pp->outx*cosf(pp->real_z_rad) - pp->outy*sinf(pp->real_z_rad);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	edd3 7a06 	vldr	s15, [r3, #24]
 8008706:	eeb0 0a67 	vmov.f32	s0, s15
 800870a:	f016 f815 	bl	801e738 <cosf>
 800870e:	eef0 7a40 	vmov.f32	s15, s0
 8008712:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	edd3 7a06 	vldr	s15, [r3, #24]
 8008722:	eeb0 0a67 	vmov.f32	s0, s15
 8008726:	f016 f84f 	bl	801e7c8 <sinf>
 800872a:	eef0 7a40 	vmov.f32	s15, s0
 800872e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8008732:	ee78 7a67 	vsub.f32	s15, s16, s15
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
				pp->ruy =   pp->outx*sinf(pp->real_z_rad) + pp->outy*cosf(pp->real_z_rad);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	edd3 7a06 	vldr	s15, [r3, #24]
 8008748:	eeb0 0a67 	vmov.f32	s0, s15
 800874c:	f016 f83c 	bl	801e7c8 <sinf>
 8008750:	eef0 7a40 	vmov.f32	s15, s0
 8008754:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	edd3 7a06 	vldr	s15, [r3, #24]
 8008764:	eeb0 0a67 	vmov.f32	s0, s15
 8008768:	f015 ffe6 	bl	801e738 <cosf>
 800876c:	eef0 7a40 	vmov.f32	s15, s0
 8008770:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8008774:	ee78 7a27 	vadd.f32	s15, s16, s15
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	edc3 7ab3 	vstr	s15, [r3, #716]	; 0x2cc
				pp->rvx =   pp->vx*cosf(pp->real_z_rad) - pp->vy*sinf(pp->real_z_rad);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	edd3 7a06 	vldr	s15, [r3, #24]
 800878a:	eeb0 0a67 	vmov.f32	s0, s15
 800878e:	f015 ffd3 	bl	801e738 <cosf>
 8008792:	eef0 7a40 	vmov.f32	s15, s0
 8008796:	ee28 8a27 	vmul.f32	s16, s16, s15
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80087a6:	eeb0 0a67 	vmov.f32	s0, s15
 80087aa:	f016 f80d 	bl	801e7c8 <sinf>
 80087ae:	eef0 7a40 	vmov.f32	s15, s0
 80087b2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80087b6:	ee78 7a67 	vsub.f32	s15, s16, s15
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	edc3 7ab4 	vstr	s15, [r3, #720]	; 0x2d0
				pp->rvy =   pp->vx*sinf(pp->real_z_rad) + pp->vy*cosf(pp->real_z_rad);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	edd3 7a06 	vldr	s15, [r3, #24]
 80087cc:	eeb0 0a67 	vmov.f32	s0, s15
 80087d0:	f015 fffa 	bl	801e7c8 <sinf>
 80087d4:	eef0 7a40 	vmov.f32	s15, s0
 80087d8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	edd3 7a06 	vldr	s15, [r3, #24]
 80087e8:	eeb0 0a67 	vmov.f32	s0, s15
 80087ec:	f015 ffa4 	bl	801e738 <cosf>
 80087f0:	eef0 7a40 	vmov.f32	s15, s0
 80087f4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80087f8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	edc3 7ab5 	vstr	s15, [r3, #724]	; 0x2d4
				if(pp->base_shape== fwd_omni){
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 8008808:	2b02      	cmp	r3, #2
 800880a:	f040 80dd 	bne.w	80089c8 <PathPlan+0x2ab8>
					pp->u1 = (pp->outz * 1.0);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = -pp->outz * 1.0;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8008820:	eef1 7a67 	vneg.f32	s15, s15
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	edc3 7ab7 	vstr	s15, [r3, #732]	; 0x2dc
					pp->u3 = (pp->outz * 1.0);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
					pp->u4 = -(pp->outz * 1.0);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800883c:	4618      	mov	r0, r3
 800883e:	f7f7 fe83 	bl	8000548 <__aeabi_f2d>
 8008842:	4602      	mov	r2, r0
 8008844:	460b      	mov	r3, r1
 8008846:	4610      	mov	r0, r2
 8008848:	4619      	mov	r1, r3
 800884a:	f7f8 f9cd 	bl	8000be8 <__aeabi_d2f>
 800884e:	4603      	mov	r3, r0
 8008850:	ee07 3a90 	vmov	s15, r3
 8008854:	eef1 7a67 	vneg.f32	s15, s15
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	edc3 7ab9 	vstr	s15, [r3, #740]	; 0x2e4
					pp->v1 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u1;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800886a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800886e:	ee17 0a90 	vmov	r0, s15
 8008872:	f7f7 fe69 	bl	8000548 <__aeabi_f2d>
 8008876:	a34c      	add	r3, pc, #304	; (adr r3, 80089a8 <PathPlan+0x2a98>)
 8008878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887c:	f7f7 febc 	bl	80005f8 <__aeabi_dmul>
 8008880:	4602      	mov	r2, r0
 8008882:	460b      	mov	r3, r1
 8008884:	4614      	mov	r4, r2
 8008886:	461d      	mov	r5, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800888e:	4618      	mov	r0, r3
 8008890:	f7f7 fe5a 	bl	8000548 <__aeabi_f2d>
 8008894:	4602      	mov	r2, r0
 8008896:	460b      	mov	r3, r1
 8008898:	4620      	mov	r0, r4
 800889a:	4629      	mov	r1, r5
 800889c:	f7f7 fcf6 	bl	800028c <__adddf3>
 80088a0:	4602      	mov	r2, r0
 80088a2:	460b      	mov	r3, r1
 80088a4:	4610      	mov	r0, r2
 80088a6:	4619      	mov	r1, r3
 80088a8:	f7f8 f99e 	bl	8000be8 <__aeabi_d2f>
 80088ac:	4602      	mov	r2, r0
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u2;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80088c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088c4:	ee17 0a90 	vmov	r0, s15
 80088c8:	f7f7 fe3e 	bl	8000548 <__aeabi_f2d>
 80088cc:	a336      	add	r3, pc, #216	; (adr r3, 80089a8 <PathPlan+0x2a98>)
 80088ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d2:	f7f7 fe91 	bl	80005f8 <__aeabi_dmul>
 80088d6:	4602      	mov	r2, r0
 80088d8:	460b      	mov	r3, r1
 80088da:	4614      	mov	r4, r2
 80088dc:	461d      	mov	r5, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7f7 fe2f 	bl	8000548 <__aeabi_f2d>
 80088ea:	4602      	mov	r2, r0
 80088ec:	460b      	mov	r3, r1
 80088ee:	4620      	mov	r0, r4
 80088f0:	4629      	mov	r1, r5
 80088f2:	f7f7 fccb 	bl	800028c <__adddf3>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	4610      	mov	r0, r2
 80088fc:	4619      	mov	r1, r3
 80088fe:	f7f8 f973 	bl	8000be8 <__aeabi_d2f>
 8008902:	4602      	mov	r2, r0
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u3;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8008916:	ee77 7a67 	vsub.f32	s15, s14, s15
 800891a:	ee17 0a90 	vmov	r0, s15
 800891e:	f7f7 fe13 	bl	8000548 <__aeabi_f2d>
 8008922:	a321      	add	r3, pc, #132	; (adr r3, 80089a8 <PathPlan+0x2a98>)
 8008924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008928:	f7f7 fe66 	bl	80005f8 <__aeabi_dmul>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	4614      	mov	r4, r2
 8008932:	461d      	mov	r5, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 800893a:	4618      	mov	r0, r3
 800893c:	f7f7 fe04 	bl	8000548 <__aeabi_f2d>
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	4620      	mov	r0, r4
 8008946:	4629      	mov	r1, r5
 8008948:	f7f7 fca0 	bl	800028c <__adddf3>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	4610      	mov	r0, r2
 8008952:	4619      	mov	r1, r3
 8008954:	f7f8 f948 	bl	8000be8 <__aeabi_d2f>
 8008958:	4602      	mov	r2, r0
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
					pp->v4 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u4;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800896c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008970:	ee17 0a90 	vmov	r0, s15
 8008974:	f7f7 fde8 	bl	8000548 <__aeabi_f2d>
 8008978:	a30b      	add	r3, pc, #44	; (adr r3, 80089a8 <PathPlan+0x2a98>)
 800897a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897e:	f7f7 fe3b 	bl	80005f8 <__aeabi_dmul>
 8008982:	4602      	mov	r2, r0
 8008984:	460b      	mov	r3, r1
 8008986:	4614      	mov	r4, r2
 8008988:	461d      	mov	r5, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8008990:	4618      	mov	r0, r3
 8008992:	f7f7 fdd9 	bl	8000548 <__aeabi_f2d>
 8008996:	4602      	mov	r2, r0
 8008998:	460b      	mov	r3, r1
 800899a:	4620      	mov	r0, r4
 800899c:	4629      	mov	r1, r5
 800899e:	f7f7 fc75 	bl	800028c <__adddf3>
 80089a2:	4602      	mov	r2, r0
 80089a4:	e006      	b.n	80089b4 <PathPlan+0x2aa4>
 80089a6:	bf00      	nop
 80089a8:	dbf8b9bb 	.word	0xdbf8b9bb
 80089ac:	3fe6a09e 	.word	0x3fe6a09e
 80089b0:	40490fdb 	.word	0x40490fdb
 80089b4:	460b      	mov	r3, r1
 80089b6:	4610      	mov	r0, r2
 80089b8:	4619      	mov	r1, r3
 80089ba:	f7f8 f915 	bl	8000be8 <__aeabi_d2f>
 80089be:	4602      	mov	r2, r0
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
 80089c6:	e103      	b.n	8008bd0 <PathPlan+0x2cc0>
				} else if(pp->base_shape== 1){
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	f040 80fe 	bne.w	8008bd0 <PathPlan+0x2cc0>
					pp->u1 = (0.866 * pp->ruy) - (0.5 * pp->rux) + (pp->outz * 1.0);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80089da:	4618      	mov	r0, r3
 80089dc:	f7f7 fdb4 	bl	8000548 <__aeabi_f2d>
 80089e0:	a37f      	add	r3, pc, #508	; (adr r3, 8008be0 <PathPlan+0x2cd0>)
 80089e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e6:	f7f7 fe07 	bl	80005f8 <__aeabi_dmul>
 80089ea:	4602      	mov	r2, r0
 80089ec:	460b      	mov	r3, r1
 80089ee:	4614      	mov	r4, r2
 80089f0:	461d      	mov	r5, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7f7 fda5 	bl	8000548 <__aeabi_f2d>
 80089fe:	f04f 0200 	mov.w	r2, #0
 8008a02:	4b79      	ldr	r3, [pc, #484]	; (8008be8 <PathPlan+0x2cd8>)
 8008a04:	f7f7 fdf8 	bl	80005f8 <__aeabi_dmul>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	4629      	mov	r1, r5
 8008a10:	f7f7 fc3a 	bl	8000288 <__aeabi_dsub>
 8008a14:	4602      	mov	r2, r0
 8008a16:	460b      	mov	r3, r1
 8008a18:	4614      	mov	r4, r2
 8008a1a:	461d      	mov	r5, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7f7 fd90 	bl	8000548 <__aeabi_f2d>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	4629      	mov	r1, r5
 8008a30:	f7f7 fc2c 	bl	800028c <__adddf3>
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	4610      	mov	r0, r2
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	f7f8 f8d4 	bl	8000be8 <__aeabi_d2f>
 8008a40:	4602      	mov	r2, r0
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = (0.866 * pp->ruy) + (0.5 * pp->rux) - (pp->outz * 1.0);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7f7 fd7a 	bl	8000548 <__aeabi_f2d>
 8008a54:	a362      	add	r3, pc, #392	; (adr r3, 8008be0 <PathPlan+0x2cd0>)
 8008a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5a:	f7f7 fdcd 	bl	80005f8 <__aeabi_dmul>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	460b      	mov	r3, r1
 8008a62:	4614      	mov	r4, r2
 8008a64:	461d      	mov	r5, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7f7 fd6b 	bl	8000548 <__aeabi_f2d>
 8008a72:	f04f 0200 	mov.w	r2, #0
 8008a76:	4b5c      	ldr	r3, [pc, #368]	; (8008be8 <PathPlan+0x2cd8>)
 8008a78:	f7f7 fdbe 	bl	80005f8 <__aeabi_dmul>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	460b      	mov	r3, r1
 8008a80:	4620      	mov	r0, r4
 8008a82:	4629      	mov	r1, r5
 8008a84:	f7f7 fc02 	bl	800028c <__adddf3>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	4614      	mov	r4, r2
 8008a8e:	461d      	mov	r5, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7f7 fd56 	bl	8000548 <__aeabi_f2d>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	f7f7 fbf0 	bl	8000288 <__aeabi_dsub>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	460b      	mov	r3, r1
 8008aac:	4610      	mov	r0, r2
 8008aae:	4619      	mov	r1, r3
 8008ab0:	f7f8 f89a 	bl	8000be8 <__aeabi_d2f>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 1.0 * pp->rux + (pp->outz * 1.0);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8008ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	edc3 7ab8 	vstr	s15, [r3, #736]	; 0x2e0
					pp->v1 = (0.866 * pp->rvy) - (0.5 * pp->rvx) + pp->u1;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7f7 fd35 	bl	8000548 <__aeabi_f2d>
 8008ade:	a340      	add	r3, pc, #256	; (adr r3, 8008be0 <PathPlan+0x2cd0>)
 8008ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae4:	f7f7 fd88 	bl	80005f8 <__aeabi_dmul>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	460b      	mov	r3, r1
 8008aec:	4614      	mov	r4, r2
 8008aee:	461d      	mov	r5, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7f7 fd26 	bl	8000548 <__aeabi_f2d>
 8008afc:	f04f 0200 	mov.w	r2, #0
 8008b00:	4b39      	ldr	r3, [pc, #228]	; (8008be8 <PathPlan+0x2cd8>)
 8008b02:	f7f7 fd79 	bl	80005f8 <__aeabi_dmul>
 8008b06:	4602      	mov	r2, r0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	4629      	mov	r1, r5
 8008b0e:	f7f7 fbbb 	bl	8000288 <__aeabi_dsub>
 8008b12:	4602      	mov	r2, r0
 8008b14:	460b      	mov	r3, r1
 8008b16:	4614      	mov	r4, r2
 8008b18:	461d      	mov	r5, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7f7 fd11 	bl	8000548 <__aeabi_f2d>
 8008b26:	4602      	mov	r2, r0
 8008b28:	460b      	mov	r3, r1
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	4629      	mov	r1, r5
 8008b2e:	f7f7 fbad 	bl	800028c <__adddf3>
 8008b32:	4602      	mov	r2, r0
 8008b34:	460b      	mov	r3, r1
 8008b36:	4610      	mov	r0, r2
 8008b38:	4619      	mov	r1, r3
 8008b3a:	f7f8 f855 	bl	8000be8 <__aeabi_d2f>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = (0.866 * pp->rvy) + (0.5 * pp->rvx) + pp->u2;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7f7 fcfb 	bl	8000548 <__aeabi_f2d>
 8008b52:	a323      	add	r3, pc, #140	; (adr r3, 8008be0 <PathPlan+0x2cd0>)
 8008b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b58:	f7f7 fd4e 	bl	80005f8 <__aeabi_dmul>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	460b      	mov	r3, r1
 8008b60:	4614      	mov	r4, r2
 8008b62:	461d      	mov	r5, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7f7 fcec 	bl	8000548 <__aeabi_f2d>
 8008b70:	f04f 0200 	mov.w	r2, #0
 8008b74:	4b1c      	ldr	r3, [pc, #112]	; (8008be8 <PathPlan+0x2cd8>)
 8008b76:	f7f7 fd3f 	bl	80005f8 <__aeabi_dmul>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	4620      	mov	r0, r4
 8008b80:	4629      	mov	r1, r5
 8008b82:	f7f7 fb83 	bl	800028c <__adddf3>
 8008b86:	4602      	mov	r2, r0
 8008b88:	460b      	mov	r3, r1
 8008b8a:	4614      	mov	r4, r2
 8008b8c:	461d      	mov	r5, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7f7 fcd7 	bl	8000548 <__aeabi_f2d>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	4629      	mov	r1, r5
 8008ba2:	f7f7 fb73 	bl	800028c <__adddf3>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	460b      	mov	r3, r1
 8008baa:	4610      	mov	r0, r2
 8008bac:	4619      	mov	r1, r3
 8008bae:	f7f8 f81b 	bl	8000be8 <__aeabi_d2f>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 1.0 * pp->rvx + pp->u3;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	ed93 7ab4 	vldr	s14, [r3, #720]	; 0x2d0
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8008bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	edc3 7abc 	vstr	s15, [r3, #752]	; 0x2f0
}
 8008bd0:	bf00      	nop
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	ecbd 8b02 	vpop	{d8}
 8008bda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008bde:	bf00      	nop
 8008be0:	a1cac083 	.word	0xa1cac083
 8008be4:	3febb645 	.word	0x3febb645
 8008be8:	3fe00000 	.word	0x3fe00000

08008bec <PSxConnectDMA>:
 * Function Remarks		: Called in respective I2c interrupt
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSxConnectDMA(&ps4);
 */
void PSxConnectDMA(PSxBT_t* psxbt){
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	1c5a      	adds	r2, r3, #1
 8008bfc:	230b      	movs	r3, #11
 8008bfe:	2188      	movs	r1, #136	; 0x88
 8008c00:	f009 fd4c 	bl	801269c <HAL_I2C_Master_Receive_DMA>
	PSx_HandlerI2C(psxbt);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 f81e 	bl	8008c46 <PSx_HandlerI2C>
}
 8008c0a:	bf00      	nop
 8008c0c:	3708      	adds	r7, #8
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <PSxInitDMA>:
 * Function Arguments	: *psxbt	, Pointer to structure PSxBT_t
 * 						   hi2cx    , Pointer to I2C handle
 * Function Return		: None
 * Function Example		: PSxInitDMA(&ps4,&hi2c1);
 */
void PSxInitDMA(PSxBT_t *psxbt,I2C_HandleTypeDef* hi2cx){
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b082      	sub	sp, #8
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
 8008c1a:	6039      	str	r1, [r7, #0]
	psxbt->hi2cps4 = hi2cx;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	665a      	str	r2, [r3, #100]	; 0x64
//	HAL_I2C_Slave_Receive_DMA(hi2cx, psxbt->ReceiveBuffer, 11);//GG
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	1c5a      	adds	r2, r3, #1
 8008c2a:	230b      	movs	r3, #11
 8008c2c:	2188      	movs	r1, #136	; 0x88
 8008c2e:	f009 fd35 	bl	801269c <HAL_I2C_Master_Receive_DMA>
	psxbt->initialized = 1;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	701a      	strb	r2, [r3, #0]
	psxbt->disconnected = 0;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008c3e:	bf00      	nop
 8008c40:	3708      	adds	r7, #8
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <PSx_HandlerI2C>:
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSx_HandlerI2C(&ps4x);
 */

void PSx_HandlerI2C(PSxBT_t *psxbt){
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b082      	sub	sp, #8
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
	psxbt->buf1 = psxbt->ReceiveBuffer[1];
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	789a      	ldrb	r2, [r3, #2]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	psxbt->buf2 = psxbt->ReceiveBuffer[2];
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	78da      	ldrb	r2, [r3, #3]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	psxbt->leftjoy_x = psxbt->ReceiveBuffer[3];
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	791b      	ldrb	r3, [r3, #4]
 8008c66:	461a      	mov	r2, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	635a      	str	r2, [r3, #52]	; 0x34
	psxbt->leftjoy_y = psxbt->ReceiveBuffer[4];
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	795b      	ldrb	r3, [r3, #5]
 8008c70:	461a      	mov	r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	639a      	str	r2, [r3, #56]	; 0x38
	psxbt->rightjoy_x = psxbt->ReceiveBuffer[5];
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	799b      	ldrb	r3, [r3, #6]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	63da      	str	r2, [r3, #60]	; 0x3c
	psxbt->rightjoy_y = psxbt->ReceiveBuffer[6];
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	79db      	ldrb	r3, [r3, #7]
 8008c84:	461a      	mov	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	641a      	str	r2, [r3, #64]	; 0x40
	psxbt->an_L2 = psxbt->ReceiveBuffer[7];
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	7a1b      	ldrb	r3, [r3, #8]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	645a      	str	r2, [r3, #68]	; 0x44
	psxbt->an_R2 = psxbt->ReceiveBuffer[8];
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	7a5b      	ldrb	r3, [r3, #9]
 8008c98:	461a      	mov	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	649a      	str	r2, [r3, #72]	; 0x48
	psxbt->buf3 = psxbt->ReceiveBuffer[9];
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	7a9a      	ldrb	r2, [r3, #10]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	psxbt->state = psxbt->ReceiveBuffer[10];
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	7ada      	ldrb	r2, [r3, #11]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	PSxBTGetXY(psxbt);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f804 	bl	8008cc0 <PSxBTGetXY>
}
 8008cb8:	bf00      	nop
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <PSxBTGetXY>:
 * Function Return		: None
 * Function Example		: PSxBTGetXY(&ps3x);
 */

void PSxBTGetXY(PSxBT_t *psxbt)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
	if(joyR_up){
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ccc:	ee07 3a90 	vmov	s15, r3
 8008cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cd4:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 8008fd8 <PSxBTGetXY+0x318>
 8008cd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ce0:	d53e      	bpl.n	8008d60 <PSxBTGetXY+0xa0>
		psxbt->joyR_y  = ((psx_low_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce6:	ee07 3a90 	vmov	s15, r3
 8008cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cee:	ee17 0a90 	vmov	r0, s15
 8008cf2:	f7f7 fc29 	bl	8000548 <__aeabi_f2d>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	a1b5      	add	r1, pc, #724	; (adr r1, 8008fd0 <PSxBTGetXY+0x310>)
 8008cfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d00:	f7f7 fac2 	bl	8000288 <__aeabi_dsub>
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	4610      	mov	r0, r2
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	f04f 0200 	mov.w	r2, #0
 8008d10:	4bb2      	ldr	r3, [pc, #712]	; (8008fdc <PSxBTGetXY+0x31c>)
 8008d12:	f7f7 fd9b 	bl	800084c <__aeabi_ddiv>
 8008d16:	4602      	mov	r2, r0
 8008d18:	460b      	mov	r3, r1
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	f7f7 ff63 	bl	8000be8 <__aeabi_d2f>
 8008d22:	4602      	mov	r2, r0
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y < 0.0){
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008d2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d36:	d504      	bpl.n	8008d42 <PSxBTGetXY+0x82>
			psxbt->joyR_y = 0.0;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f04f 0200 	mov.w	r2, #0
 8008d3e:	64da      	str	r2, [r3, #76]	; 0x4c
 8008d40:	e05d      	b.n	8008dfe <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y > 1.0){
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008d48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d54:	dd53      	ble.n	8008dfe <PSxBTGetXY+0x13e>
			psxbt->joyR_y = 1.0;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008d5c:	64da      	str	r2, [r3, #76]	; 0x4c
 8008d5e:	e04e      	b.n	8008dfe <PSxBTGetXY+0x13e>
		}
	}else if(joyR_down){
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d64:	ee07 3a90 	vmov	s15, r3
 8008d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6c:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8008fe8 <PSxBTGetXY+0x328>
 8008d70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d78:	dd3d      	ble.n	8008df6 <PSxBTGetXY+0x136>
		psxbt->joyR_y = ((psx_high_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7e:	ee07 3a90 	vmov	s15, r3
 8008d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d86:	ee17 0a90 	vmov	r0, s15
 8008d8a:	f7f7 fbdd 	bl	8000548 <__aeabi_f2d>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	460b      	mov	r3, r1
 8008d92:	f04f 0000 	mov.w	r0, #0
 8008d96:	4992      	ldr	r1, [pc, #584]	; (8008fe0 <PSxBTGetXY+0x320>)
 8008d98:	f7f7 fa76 	bl	8000288 <__aeabi_dsub>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	460b      	mov	r3, r1
 8008da0:	4610      	mov	r0, r2
 8008da2:	4619      	mov	r1, r3
 8008da4:	f04f 0200 	mov.w	r2, #0
 8008da8:	4b8c      	ldr	r3, [pc, #560]	; (8008fdc <PSxBTGetXY+0x31c>)
 8008daa:	f7f7 fd4f 	bl	800084c <__aeabi_ddiv>
 8008dae:	4602      	mov	r2, r0
 8008db0:	460b      	mov	r3, r1
 8008db2:	4610      	mov	r0, r2
 8008db4:	4619      	mov	r1, r3
 8008db6:	f7f7 ff17 	bl	8000be8 <__aeabi_d2f>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y > 0.0){
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008dc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dce:	dd04      	ble.n	8008dda <PSxBTGetXY+0x11a>
			psxbt->joyR_y = 0.0;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f04f 0200 	mov.w	r2, #0
 8008dd6:	64da      	str	r2, [r3, #76]	; 0x4c
 8008dd8:	e011      	b.n	8008dfe <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y < -1.0){
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008de0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dec:	d507      	bpl.n	8008dfe <PSxBTGetXY+0x13e>
			psxbt->joyR_y = -1.0;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a7c      	ldr	r2, [pc, #496]	; (8008fe4 <PSxBTGetXY+0x324>)
 8008df2:	64da      	str	r2, [r3, #76]	; 0x4c
 8008df4:	e003      	b.n	8008dfe <PSxBTGetXY+0x13e>
		}
	}else{
		psxbt->joyR_y = 0.0;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f04f 0200 	mov.w	r2, #0
 8008dfc:	64da      	str	r2, [r3, #76]	; 0x4c
	}

	if(joyR_left){
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e02:	ee07 3a90 	vmov	s15, r3
 8008e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e0a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8008fd8 <PSxBTGetXY+0x318>
 8008e0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e16:	d53e      	bpl.n	8008e96 <PSxBTGetXY+0x1d6>
		psxbt->joyR_x = ((psx_low_Rx - ((float)psxbt->rightjoy_x))/100.0)/1.00;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e1c:	ee07 3a90 	vmov	s15, r3
 8008e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e24:	ee17 0a90 	vmov	r0, s15
 8008e28:	f7f7 fb8e 	bl	8000548 <__aeabi_f2d>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	460b      	mov	r3, r1
 8008e30:	a167      	add	r1, pc, #412	; (adr r1, 8008fd0 <PSxBTGetXY+0x310>)
 8008e32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e36:	f7f7 fa27 	bl	8000288 <__aeabi_dsub>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	4610      	mov	r0, r2
 8008e40:	4619      	mov	r1, r3
 8008e42:	f04f 0200 	mov.w	r2, #0
 8008e46:	4b65      	ldr	r3, [pc, #404]	; (8008fdc <PSxBTGetXY+0x31c>)
 8008e48:	f7f7 fd00 	bl	800084c <__aeabi_ddiv>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	460b      	mov	r3, r1
 8008e50:	4610      	mov	r0, r2
 8008e52:	4619      	mov	r1, r3
 8008e54:	f7f7 fec8 	bl	8000be8 <__aeabi_d2f>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	651a      	str	r2, [r3, #80]	; 0x50
		if(psxbt->joyR_x < 0.0){
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008e64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e6c:	d504      	bpl.n	8008e78 <PSxBTGetXY+0x1b8>
			psxbt->joyR_x = 0.0;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f04f 0200 	mov.w	r2, #0
 8008e74:	651a      	str	r2, [r3, #80]	; 0x50
 8008e76:	e05d      	b.n	8008f34 <PSxBTGetXY+0x274>
		}else if(psxbt->joyR_x > 1.0){
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008e7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e8a:	dd53      	ble.n	8008f34 <PSxBTGetXY+0x274>
			psxbt->joyR_x = 1.0;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008e92:	651a      	str	r2, [r3, #80]	; 0x50
 8008e94:	e04e      	b.n	8008f34 <PSxBTGetXY+0x274>
		}
	}else if(joyR_right){
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e9a:	ee07 3a90 	vmov	s15, r3
 8008e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea2:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8008fe8 <PSxBTGetXY+0x328>
 8008ea6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eae:	dd3d      	ble.n	8008f2c <PSxBTGetXY+0x26c>
		psxbt->joyR_x = ((psx_high_Rx - ((float)psxbt->rightjoy_x))/100.0)/1.00;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eb4:	ee07 3a90 	vmov	s15, r3
 8008eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ebc:	ee17 0a90 	vmov	r0, s15
 8008ec0:	f7f7 fb42 	bl	8000548 <__aeabi_f2d>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	f04f 0000 	mov.w	r0, #0
 8008ecc:	4944      	ldr	r1, [pc, #272]	; (8008fe0 <PSxBTGetXY+0x320>)
 8008ece:	f7f7 f9db 	bl	8000288 <__aeabi_dsub>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	4610      	mov	r0, r2
 8008ed8:	4619      	mov	r1, r3
 8008eda:	f04f 0200 	mov.w	r2, #0
 8008ede:	4b3f      	ldr	r3, [pc, #252]	; (8008fdc <PSxBTGetXY+0x31c>)
 8008ee0:	f7f7 fcb4 	bl	800084c <__aeabi_ddiv>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	4610      	mov	r0, r2
 8008eea:	4619      	mov	r1, r3
 8008eec:	f7f7 fe7c 	bl	8000be8 <__aeabi_d2f>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	651a      	str	r2, [r3, #80]	; 0x50
		if(psxbt->joyR_x > 0.0){
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008efc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f04:	dd04      	ble.n	8008f10 <PSxBTGetXY+0x250>
			psxbt->joyR_x = 0.0;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f04f 0200 	mov.w	r2, #0
 8008f0c:	651a      	str	r2, [r3, #80]	; 0x50
 8008f0e:	e011      	b.n	8008f34 <PSxBTGetXY+0x274>
		}else if(psxbt->joyR_x < -1.0){
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008f16:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008f1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f22:	d507      	bpl.n	8008f34 <PSxBTGetXY+0x274>
			psxbt->joyR_x = -1.0;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a2f      	ldr	r2, [pc, #188]	; (8008fe4 <PSxBTGetXY+0x324>)
 8008f28:	651a      	str	r2, [r3, #80]	; 0x50
 8008f2a:	e003      	b.n	8008f34 <PSxBTGetXY+0x274>
		}
	}else{
		psxbt->joyR_x = 0.0;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f04f 0200 	mov.w	r2, #0
 8008f32:	651a      	str	r2, [r3, #80]	; 0x50
	}

	if(joyL_up){
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f38:	ee07 3a90 	vmov	s15, r3
 8008f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f40:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8008fd8 <PSxBTGetXY+0x318>
 8008f44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f4c:	d54e      	bpl.n	8008fec <PSxBTGetXY+0x32c>
		psxbt->joyL_y = ((psx_low_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f52:	ee07 3a90 	vmov	s15, r3
 8008f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f5a:	ee17 0a90 	vmov	r0, s15
 8008f5e:	f7f7 faf3 	bl	8000548 <__aeabi_f2d>
 8008f62:	4602      	mov	r2, r0
 8008f64:	460b      	mov	r3, r1
 8008f66:	a11a      	add	r1, pc, #104	; (adr r1, 8008fd0 <PSxBTGetXY+0x310>)
 8008f68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f6c:	f7f7 f98c 	bl	8000288 <__aeabi_dsub>
 8008f70:	4602      	mov	r2, r0
 8008f72:	460b      	mov	r3, r1
 8008f74:	4610      	mov	r0, r2
 8008f76:	4619      	mov	r1, r3
 8008f78:	f04f 0200 	mov.w	r2, #0
 8008f7c:	4b17      	ldr	r3, [pc, #92]	; (8008fdc <PSxBTGetXY+0x31c>)
 8008f7e:	f7f7 fc65 	bl	800084c <__aeabi_ddiv>
 8008f82:	4602      	mov	r2, r0
 8008f84:	460b      	mov	r3, r1
 8008f86:	4610      	mov	r0, r2
 8008f88:	4619      	mov	r1, r3
 8008f8a:	f7f7 fe2d 	bl	8000be8 <__aeabi_d2f>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y < 0.0){
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008f9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa2:	d504      	bpl.n	8008fae <PSxBTGetXY+0x2ee>
			psxbt->joyL_y = 0.0;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f04f 0200 	mov.w	r2, #0
 8008faa:	655a      	str	r2, [r3, #84]	; 0x54
 8008fac:	e06d      	b.n	800908a <PSxBTGetXY+0x3ca>
		}else if(psxbt->joyL_y > 1.0){
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008fb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fc0:	dd63      	ble.n	800908a <PSxBTGetXY+0x3ca>
			psxbt->joyL_y = 1.0;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008fc8:	655a      	str	r2, [r3, #84]	; 0x54
 8008fca:	e05e      	b.n	800908a <PSxBTGetXY+0x3ca>
 8008fcc:	f3af 8000 	nop.w
 8008fd0:	00000000 	.word	0x00000000
 8008fd4:	405cc000 	.word	0x405cc000
 8008fd8:	42e60000 	.word	0x42e60000
 8008fdc:	40590000 	.word	0x40590000
 8008fe0:	40618000 	.word	0x40618000
 8008fe4:	bf800000 	.word	0xbf800000
 8008fe8:	430c0000 	.word	0x430c0000
		}
	}else if(joyL_down){
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff0:	ee07 3a90 	vmov	s15, r3
 8008ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ff8:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8008fe8 <PSxBTGetXY+0x328>
 8008ffc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009004:	dd3d      	ble.n	8009082 <PSxBTGetXY+0x3c2>
		psxbt->joyL_y = ((psx_high_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800900a:	ee07 3a90 	vmov	s15, r3
 800900e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009012:	ee17 0a90 	vmov	r0, s15
 8009016:	f7f7 fa97 	bl	8000548 <__aeabi_f2d>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	f04f 0000 	mov.w	r0, #0
 8009022:	4981      	ldr	r1, [pc, #516]	; (8009228 <PSxBTGetXY+0x568>)
 8009024:	f7f7 f930 	bl	8000288 <__aeabi_dsub>
 8009028:	4602      	mov	r2, r0
 800902a:	460b      	mov	r3, r1
 800902c:	4610      	mov	r0, r2
 800902e:	4619      	mov	r1, r3
 8009030:	f04f 0200 	mov.w	r2, #0
 8009034:	4b7d      	ldr	r3, [pc, #500]	; (800922c <PSxBTGetXY+0x56c>)
 8009036:	f7f7 fc09 	bl	800084c <__aeabi_ddiv>
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	4610      	mov	r0, r2
 8009040:	4619      	mov	r1, r3
 8009042:	f7f7 fdd1 	bl	8000be8 <__aeabi_d2f>
 8009046:	4602      	mov	r2, r0
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y > 0.0){
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009052:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800905a:	dd04      	ble.n	8009066 <PSxBTGetXY+0x3a6>
			psxbt->joyL_y = 0.0;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f04f 0200 	mov.w	r2, #0
 8009062:	655a      	str	r2, [r3, #84]	; 0x54
 8009064:	e011      	b.n	800908a <PSxBTGetXY+0x3ca>
		}else if(psxbt->joyL_y < -1.0){
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800906c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009070:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009078:	d507      	bpl.n	800908a <PSxBTGetXY+0x3ca>
			psxbt->joyL_y = -1.0;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a6c      	ldr	r2, [pc, #432]	; (8009230 <PSxBTGetXY+0x570>)
 800907e:	655a      	str	r2, [r3, #84]	; 0x54
 8009080:	e003      	b.n	800908a <PSxBTGetXY+0x3ca>
		}
	}else{
		psxbt->joyL_y = 0.0;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f04f 0200 	mov.w	r2, #0
 8009088:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if(joyL_left){
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800908e:	ee07 3a90 	vmov	s15, r3
 8009092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009096:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8009234 <PSxBTGetXY+0x574>
 800909a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800909e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090a2:	d53e      	bpl.n	8009122 <PSxBTGetXY+0x462>
		psxbt->joyL_x = ((psx_low_Lx - ((float)psxbt->leftjoy_x))/100.0)/1.00;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090a8:	ee07 3a90 	vmov	s15, r3
 80090ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090b0:	ee17 0a90 	vmov	r0, s15
 80090b4:	f7f7 fa48 	bl	8000548 <__aeabi_f2d>
 80090b8:	4602      	mov	r2, r0
 80090ba:	460b      	mov	r3, r1
 80090bc:	a156      	add	r1, pc, #344	; (adr r1, 8009218 <PSxBTGetXY+0x558>)
 80090be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090c2:	f7f7 f8e1 	bl	8000288 <__aeabi_dsub>
 80090c6:	4602      	mov	r2, r0
 80090c8:	460b      	mov	r3, r1
 80090ca:	4610      	mov	r0, r2
 80090cc:	4619      	mov	r1, r3
 80090ce:	f04f 0200 	mov.w	r2, #0
 80090d2:	4b56      	ldr	r3, [pc, #344]	; (800922c <PSxBTGetXY+0x56c>)
 80090d4:	f7f7 fbba 	bl	800084c <__aeabi_ddiv>
 80090d8:	4602      	mov	r2, r0
 80090da:	460b      	mov	r3, r1
 80090dc:	4610      	mov	r0, r2
 80090de:	4619      	mov	r1, r3
 80090e0:	f7f7 fd82 	bl	8000be8 <__aeabi_d2f>
 80090e4:	4602      	mov	r2, r0
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	659a      	str	r2, [r3, #88]	; 0x58
		if(psxbt->joyL_x < 0.0){
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80090f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80090f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090f8:	d504      	bpl.n	8009104 <PSxBTGetXY+0x444>
			psxbt->joyL_x = 0.0;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f04f 0200 	mov.w	r2, #0
 8009100:	659a      	str	r2, [r3, #88]	; 0x58
 8009102:	e05d      	b.n	80091c0 <PSxBTGetXY+0x500>
		}else if(psxbt->joyL_x > 1.0){
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800910a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800910e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009116:	dd53      	ble.n	80091c0 <PSxBTGetXY+0x500>
			psxbt->joyL_x = 1.0;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800911e:	659a      	str	r2, [r3, #88]	; 0x58
 8009120:	e04e      	b.n	80091c0 <PSxBTGetXY+0x500>
		}
	}else if(joyL_right){
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009126:	ee07 3a90 	vmov	s15, r3
 800912a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800912e:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8009238 <PSxBTGetXY+0x578>
 8009132:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800913a:	dd3d      	ble.n	80091b8 <PSxBTGetXY+0x4f8>
		psxbt->joyL_x = ((psx_high_Lx - ((float)psxbt->leftjoy_x))/100.0)/1.00;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009140:	ee07 3a90 	vmov	s15, r3
 8009144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009148:	ee17 0a90 	vmov	r0, s15
 800914c:	f7f7 f9fc 	bl	8000548 <__aeabi_f2d>
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	f04f 0000 	mov.w	r0, #0
 8009158:	4933      	ldr	r1, [pc, #204]	; (8009228 <PSxBTGetXY+0x568>)
 800915a:	f7f7 f895 	bl	8000288 <__aeabi_dsub>
 800915e:	4602      	mov	r2, r0
 8009160:	460b      	mov	r3, r1
 8009162:	4610      	mov	r0, r2
 8009164:	4619      	mov	r1, r3
 8009166:	f04f 0200 	mov.w	r2, #0
 800916a:	4b30      	ldr	r3, [pc, #192]	; (800922c <PSxBTGetXY+0x56c>)
 800916c:	f7f7 fb6e 	bl	800084c <__aeabi_ddiv>
 8009170:	4602      	mov	r2, r0
 8009172:	460b      	mov	r3, r1
 8009174:	4610      	mov	r0, r2
 8009176:	4619      	mov	r1, r3
 8009178:	f7f7 fd36 	bl	8000be8 <__aeabi_d2f>
 800917c:	4602      	mov	r2, r0
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	659a      	str	r2, [r3, #88]	; 0x58
		if(psxbt->joyL_x > 0.0){
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009188:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800918c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009190:	dd04      	ble.n	800919c <PSxBTGetXY+0x4dc>
			psxbt->joyL_x = 0.0;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f04f 0200 	mov.w	r2, #0
 8009198:	659a      	str	r2, [r3, #88]	; 0x58
 800919a:	e011      	b.n	80091c0 <PSxBTGetXY+0x500>
		}else if(psxbt->joyL_x < -1.0){
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80091a2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80091a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ae:	d507      	bpl.n	80091c0 <PSxBTGetXY+0x500>
			psxbt->joyL_x = -1.0;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a1f      	ldr	r2, [pc, #124]	; (8009230 <PSxBTGetXY+0x570>)
 80091b4:	659a      	str	r2, [r3, #88]	; 0x58
 80091b6:	e003      	b.n	80091c0 <PSxBTGetXY+0x500>
		}
	}else{
		psxbt->joyL_x = 0.0;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f04f 0200 	mov.w	r2, #0
 80091be:	659a      	str	r2, [r3, #88]	; 0x58
	}

	psxbt->joyR_2 = (psxbt->an_R2/255.0);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7f7 f99d 	bl	8000504 <__aeabi_ui2d>
 80091ca:	a315      	add	r3, pc, #84	; (adr r3, 8009220 <PSxBTGetXY+0x560>)
 80091cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d0:	f7f7 fb3c 	bl	800084c <__aeabi_ddiv>
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	4610      	mov	r0, r2
 80091da:	4619      	mov	r1, r3
 80091dc:	f7f7 fd04 	bl	8000be8 <__aeabi_d2f>
 80091e0:	4602      	mov	r2, r0
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	65da      	str	r2, [r3, #92]	; 0x5c
	psxbt->joyL_2 = (psxbt->an_L2/255.0);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7f7 f98a 	bl	8000504 <__aeabi_ui2d>
 80091f0:	a30b      	add	r3, pc, #44	; (adr r3, 8009220 <PSxBTGetXY+0x560>)
 80091f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f6:	f7f7 fb29 	bl	800084c <__aeabi_ddiv>
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	4610      	mov	r0, r2
 8009200:	4619      	mov	r1, r3
 8009202:	f7f7 fcf1 	bl	8000be8 <__aeabi_d2f>
 8009206:	4602      	mov	r2, r0
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800920c:	bf00      	nop
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	f3af 8000 	nop.w
 8009218:	00000000 	.word	0x00000000
 800921c:	405cc000 	.word	0x405cc000
 8009220:	00000000 	.word	0x00000000
 8009224:	406fe000 	.word	0x406fe000
 8009228:	40618000 	.word	0x40618000
 800922c:	40590000 	.word	0x40590000
 8009230:	bf800000 	.word	0xbf800000
 8009234:	42e60000 	.word	0x42e60000
 8009238:	430c0000 	.word	0x430c0000

0800923c <R6091U_Init>:
	memset(IMU->Buffer, 0, 20);
	HAL_I2C_Master_Receive_DMA(IMU->hi2cimu, 0x35<<1, (uint8_t*)&IMU->Buffer, 20);//RECEIVE FROM R6091U
}


void R6091U_Init(R6091U_t* IMU,UART_HandleTypeDef* huartx){
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]

	IMU->huartx = huartx;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	683a      	ldr	r2, [r7, #0]
 800924a:	605a      	str	r2, [r3, #4]
	IMU->State = PENDING_SYNC;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	775a      	strb	r2, [r3, #29]
	HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6858      	ldr	r0, [r3, #4]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	3308      	adds	r3, #8
 800925a:	2201      	movs	r2, #1
 800925c:	4619      	mov	r1, r3
 800925e:	f00c ff9f 	bl	80161a0 <HAL_UART_Receive_IT>

}
 8009262:	bf00      	nop
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
	...

0800926c <R6091U_Handler>:
void R6091U_Handler(R6091U_t* IMU){
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]

//	uint8_t checksum;

	switch(IMU->State){
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	7f5b      	ldrb	r3, [r3, #29]
 8009278:	2b02      	cmp	r3, #2
 800927a:	d035      	beq.n	80092e8 <R6091U_Handler+0x7c>
 800927c:	2b02      	cmp	r3, #2
 800927e:	f300 80b2 	bgt.w	80093e6 <R6091U_Handler+0x17a>
 8009282:	2b00      	cmp	r3, #0
 8009284:	d002      	beq.n	800928c <R6091U_Handler+0x20>
 8009286:	2b01      	cmp	r3, #1
 8009288:	d011      	beq.n	80092ae <R6091U_Handler+0x42>
		IMU->State = PENDING_SYNC;
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);

		break;
	}
}
 800928a:	e0ac      	b.n	80093e6 <R6091U_Handler+0x17a>
		if(IMU->Buffer[0] == 0xAA){
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	7a1b      	ldrb	r3, [r3, #8]
 8009290:	b2db      	uxtb	r3, r3
 8009292:	2baa      	cmp	r3, #170	; 0xaa
 8009294:	d102      	bne.n	800929c <R6091U_Handler+0x30>
			IMU->State = CONFIRMING_SYNC;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2201      	movs	r2, #1
 800929a:	775a      	strb	r2, [r3, #29]
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6858      	ldr	r0, [r3, #4]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	3308      	adds	r3, #8
 80092a4:	2201      	movs	r2, #1
 80092a6:	4619      	mov	r1, r3
 80092a8:	f00c ff7a 	bl	80161a0 <HAL_UART_Receive_IT>
		break;
 80092ac:	e09b      	b.n	80093e6 <R6091U_Handler+0x17a>
		if(IMU->Buffer[0] == 0x00){
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	7a1b      	ldrb	r3, [r3, #8]
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d10b      	bne.n	80092d0 <R6091U_Handler+0x64>
			IMU->State = IN_SYNC;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2202      	movs	r2, #2
 80092bc:	775a      	strb	r2, [r3, #29]
			HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 13);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6858      	ldr	r0, [r3, #4]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	3308      	adds	r3, #8
 80092c6:	220d      	movs	r2, #13
 80092c8:	4619      	mov	r1, r3
 80092ca:	f00c ff69 	bl	80161a0 <HAL_UART_Receive_IT>
		break;
 80092ce:	e08a      	b.n	80093e6 <R6091U_Handler+0x17a>
			IMU->State = PENDING_SYNC;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	775a      	strb	r2, [r3, #29]
			HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6858      	ldr	r0, [r3, #4]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	3308      	adds	r3, #8
 80092de:	2201      	movs	r2, #1
 80092e0:	4619      	mov	r1, r3
 80092e2:	f00c ff5d 	bl	80161a0 <HAL_UART_Receive_IT>
		break;
 80092e6:	e07e      	b.n	80093e6 <R6091U_Handler+0x17a>
		IMU->checksum = 0;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		IMU->checksum = IMU->Buffer[0] + IMU->Buffer[1] + IMU->Buffer[2] + IMU->Buffer[3] + IMU->Buffer[4] + IMU->Buffer[5]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	7a1b      	ldrb	r3, [r3, #8]
 80092f4:	b2da      	uxtb	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	7a5b      	ldrb	r3, [r3, #9]
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	4413      	add	r3, r2
 80092fe:	b2da      	uxtb	r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	7a9b      	ldrb	r3, [r3, #10]
 8009304:	b2db      	uxtb	r3, r3
 8009306:	4413      	add	r3, r2
 8009308:	b2da      	uxtb	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	7adb      	ldrb	r3, [r3, #11]
 800930e:	b2db      	uxtb	r3, r3
 8009310:	4413      	add	r3, r2
 8009312:	b2da      	uxtb	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	7b1b      	ldrb	r3, [r3, #12]
 8009318:	b2db      	uxtb	r3, r3
 800931a:	4413      	add	r3, r2
 800931c:	b2da      	uxtb	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	7b5b      	ldrb	r3, [r3, #13]
 8009322:	b2db      	uxtb	r3, r3
 8009324:	4413      	add	r3, r2
 8009326:	b2da      	uxtb	r2, r3
						+ IMU->Buffer[6] + IMU->Buffer[7] + IMU->Buffer[8] + IMU->Buffer[9] + IMU->Buffer[10] + IMU->Buffer[11];
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	7b9b      	ldrb	r3, [r3, #14]
 800932c:	b2db      	uxtb	r3, r3
 800932e:	4413      	add	r3, r2
 8009330:	b2da      	uxtb	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	7bdb      	ldrb	r3, [r3, #15]
 8009336:	b2db      	uxtb	r3, r3
 8009338:	4413      	add	r3, r2
 800933a:	b2da      	uxtb	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	7c1b      	ldrb	r3, [r3, #16]
 8009340:	b2db      	uxtb	r3, r3
 8009342:	4413      	add	r3, r2
 8009344:	b2da      	uxtb	r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	7c5b      	ldrb	r3, [r3, #17]
 800934a:	b2db      	uxtb	r3, r3
 800934c:	4413      	add	r3, r2
 800934e:	b2da      	uxtb	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	7c9b      	ldrb	r3, [r3, #18]
 8009354:	b2db      	uxtb	r3, r3
 8009356:	4413      	add	r3, r2
 8009358:	b2da      	uxtb	r2, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	7cdb      	ldrb	r3, [r3, #19]
 800935e:	b2db      	uxtb	r3, r3
 8009360:	4413      	add	r3, r2
 8009362:	b2da      	uxtb	r2, r3
		IMU->checksum = IMU->Buffer[0] + IMU->Buffer[1] + IMU->Buffer[2] + IMU->Buffer[3] + IMU->Buffer[4] + IMU->Buffer[5]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		if( IMU->checksum == IMU->Buffer[12]){
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009370:	b2da      	uxtb	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	7d1b      	ldrb	r3, [r3, #20]
 8009376:	b2db      	uxtb	r3, r3
 8009378:	429a      	cmp	r2, r3
 800937a:	d121      	bne.n	80093c0 <R6091U_Handler+0x154>
			int16_t yaw = *((uint16_t*)&IMU->Buffer[1]);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	3309      	adds	r3, #9
 8009380:	881b      	ldrh	r3, [r3, #0]
 8009382:	81fb      	strh	r3, [r7, #14]
			fyaw = ((float)(yaw) / (float)100.0) + 180.0 ;
 8009384:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009388:	ee07 3a90 	vmov	s15, r3
 800938c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009390:	eddf 6a17 	vldr	s13, [pc, #92]	; 80093f0 <R6091U_Handler+0x184>
 8009394:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009398:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80093f4 <R6091U_Handler+0x188>
 800939c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80093a0:	4b15      	ldr	r3, [pc, #84]	; (80093f8 <R6091U_Handler+0x18c>)
 80093a2:	edc3 7a00 	vstr	s15, [r3]
			if(testCounter2 >= 20){
 80093a6:	4b15      	ldr	r3, [pc, #84]	; (80093fc <R6091U_Handler+0x190>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b13      	cmp	r3, #19
 80093ac:	dd03      	ble.n	80093b6 <R6091U_Handler+0x14a>
				testCounter2 = 0;
 80093ae:	4b13      	ldr	r3, [pc, #76]	; (80093fc <R6091U_Handler+0x190>)
 80093b0:	2200      	movs	r2, #0
 80093b2:	601a      	str	r2, [r3, #0]
 80093b4:	e004      	b.n	80093c0 <R6091U_Handler+0x154>
				testCounter2 ++;
 80093b6:	4b11      	ldr	r3, [pc, #68]	; (80093fc <R6091U_Handler+0x190>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	3301      	adds	r3, #1
 80093bc:	4a0f      	ldr	r2, [pc, #60]	; (80093fc <R6091U_Handler+0x190>)
 80093be:	6013      	str	r3, [r2, #0]
		memset(IMU->Buffer, 0, 13);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	3308      	adds	r3, #8
 80093c4:	220d      	movs	r2, #13
 80093c6:	2100      	movs	r1, #0
 80093c8:	4618      	mov	r0, r3
 80093ca:	f010 fc37 	bl	8019c3c <memset>
		IMU->State = PENDING_SYNC;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	775a      	strb	r2, [r3, #29]
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6858      	ldr	r0, [r3, #4]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	3308      	adds	r3, #8
 80093dc:	2201      	movs	r2, #1
 80093de:	4619      	mov	r1, r3
 80093e0:	f00c fede 	bl	80161a0 <HAL_UART_Receive_IT>
		break;
 80093e4:	bf00      	nop
}
 80093e6:	bf00      	nop
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	42c80000 	.word	0x42c80000
 80093f4:	43340000 	.word	0x43340000
 80093f8:	2000996c 	.word	0x2000996c
 80093fc:	200067c8 	.word	0x200067c8

08009400 <RNSInit>:
 * Function Example		: RNSInit(CAN1, &RNS);
 * 						  RNSInit(Robot_navi_system, I2C1,  &RNS);
 */

void RNSInit(CAN_HandleTypeDef* hcanx, RNS_interface_t* rns)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
	rns->rns_hcanx = hcanx;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	601a      	str	r2, [r3, #0]

	insData_send[0] = 1;
 8009410:	4b28      	ldr	r3, [pc, #160]	; (80094b4 <RNSInit+0xb4>)
 8009412:	2201      	movs	r2, #1
 8009414:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 8009416:	4b27      	ldr	r3, [pc, #156]	; (80094b4 <RNSInit+0xb4>)
 8009418:	2200      	movs	r2, #0
 800941a:	705a      	strb	r2, [r3, #1]

	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	6818      	ldr	r0, [r3, #0]
 8009420:	2302      	movs	r3, #2
 8009422:	4a24      	ldr	r2, [pc, #144]	; (80094b4 <RNSInit+0xb4>)
 8009424:	2117      	movs	r1, #23
 8009426:	f7fa f9b5 	bl	8003794 <CAN_TxMsg>
	rns->RNS_data.common_instruction = RNS_PENDING;
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 1;
 8009432:	4b20      	ldr	r3, [pc, #128]	; (80094b4 <RNSInit+0xb4>)
 8009434:	2201      	movs	r2, #1
 8009436:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_RESET_POS;
 8009438:	4b1e      	ldr	r3, [pc, #120]	; (80094b4 <RNSInit+0xb4>)
 800943a:	2214      	movs	r2, #20
 800943c:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	6818      	ldr	r0, [r3, #0]
 8009442:	2302      	movs	r3, #2
 8009444:	4a1b      	ldr	r2, [pc, #108]	; (80094b4 <RNSInit+0xb4>)
 8009446:	2117      	movs	r1, #23
 8009448:	f7fa f9a4 	bl	8003794 <CAN_TxMsg>

	rns->RNS_data.common_instruction = RNS_WAITING;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	2202      	movs	r2, #2
 8009450:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	int wait=0;
 8009454:	2300      	movs	r3, #0
 8009456:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING){
 8009458:	e022      	b.n	80094a0 <RNSInit+0xa0>
		if(wait >= 2000000){
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	4a16      	ldr	r2, [pc, #88]	; (80094b8 <RNSInit+0xb8>)
 800945e:	4293      	cmp	r3, r2
 8009460:	dd1b      	ble.n	800949a <RNSInit+0x9a>
			insData_send[0] = 1;
 8009462:	4b14      	ldr	r3, [pc, #80]	; (80094b4 <RNSInit+0xb4>)
 8009464:	2201      	movs	r2, #1
 8009466:	701a      	strb	r2, [r3, #0]
			insData_send[1] = RNS_RESET_POS;
 8009468:	4b12      	ldr	r3, [pc, #72]	; (80094b4 <RNSInit+0xb4>)
 800946a:	2214      	movs	r2, #20
 800946c:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	6818      	ldr	r0, [r3, #0]
 8009472:	2302      	movs	r3, #2
 8009474:	4a0f      	ldr	r2, [pc, #60]	; (80094b4 <RNSInit+0xb4>)
 8009476:	2117      	movs	r1, #23
 8009478:	f7fa f98c 	bl	8003794 <CAN_TxMsg>
			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15;
 800947c:	4b0f      	ldr	r3, [pc, #60]	; (80094bc <RNSInit+0xbc>)
 800947e:	785b      	ldrb	r3, [r3, #1]
 8009480:	b25b      	sxtb	r3, r3
 8009482:	4a0e      	ldr	r2, [pc, #56]	; (80094bc <RNSInit+0xbc>)
 8009484:	43db      	mvns	r3, r3
 8009486:	b2db      	uxtb	r3, r3
 8009488:	09db      	lsrs	r3, r3, #7
 800948a:	b2d9      	uxtb	r1, r3
 800948c:	7853      	ldrb	r3, [r2, #1]
 800948e:	f361 13c7 	bfi	r3, r1, #7, #1
 8009492:	7053      	strb	r3, [r2, #1]
			wait = 0;
 8009494:	2300      	movs	r3, #0
 8009496:	60fb      	str	r3, [r7, #12]
 8009498:	e002      	b.n	80094a0 <RNSInit+0xa0>
		}else{
			wait ++;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	3301      	adds	r3, #1
 800949e:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING){
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	d0d7      	beq.n	800945a <RNSInit+0x5a>
		}
	}
}
 80094aa:	bf00      	nop
 80094ac:	bf00      	nop
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	2000a68c 	.word	0x2000a68c
 80094b8:	001e847f 	.word	0x001e847f
 80094bc:	40020814 	.word	0x40020814

080094c0 <RNSStop>:
 * Function Return		: None
 * Function Example		: RNSStop(&RNS);
 */

void RNSStop(RNS_interface_t* rns)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]


	rns->ins.instruction = RNS_STOP;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2203      	movs	r2, #3
 80094cc:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0.0;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f04f 0200 	mov.w	r2, #0
 80094d4:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0.0;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f04f 0200 	mov.w	r2, #0
 80094dc:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0.0;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f04f 0200 	mov.w	r2, #0
 80094e4:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0.0;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f04f 0200 	mov.w	r2, #0
 80094ec:	615a      	str	r2, [r3, #20]

	//RNSSendIns(rns);
	rns->RNS_data.common_instruction = RNS_WAITING;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2202      	movs	r2, #2
 80094f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 80094f6:	4b31      	ldr	r3, [pc, #196]	; (80095bc <RNSStop+0xfc>)
 80094f8:	2211      	movs	r2, #17
 80094fa:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	791a      	ldrb	r2, [r3, #4]
 8009500:	4b2e      	ldr	r3, [pc, #184]	; (80095bc <RNSStop+0xfc>)
 8009502:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6818      	ldr	r0, [r3, #0]
 8009508:	2302      	movs	r3, #2
 800950a:	4a2c      	ldr	r2, [pc, #176]	; (80095bc <RNSStop+0xfc>)
 800950c:	2117      	movs	r1, #23
 800950e:	f7fa f941 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0]),8);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6818      	ldr	r0, [r3, #0]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f103 0208 	add.w	r2, r3, #8
 800951c:	2308      	movs	r3, #8
 800951e:	2118      	movs	r1, #24
 8009520:	f7fa f938 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2]),8);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6818      	ldr	r0, [r3, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f103 0210 	add.w	r2, r3, #16
 800952e:	2308      	movs	r3, #8
 8009530:	2119      	movs	r1, #25
 8009532:	f7fa f92f 	bl	8003794 <CAN_TxMsg>

	int wait = 0;
 8009536:	2300      	movs	r3, #0
 8009538:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800953a:	e035      	b.n	80095a8 <RNSStop+0xe8>
	{
		if(wait >= 2000000)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	4a20      	ldr	r2, [pc, #128]	; (80095c0 <RNSStop+0x100>)
 8009540:	4293      	cmp	r3, r2
 8009542:	dd2e      	ble.n	80095a2 <RNSStop+0xe2>
		{
			insData_send[0] = 17;
 8009544:	4b1d      	ldr	r3, [pc, #116]	; (80095bc <RNSStop+0xfc>)
 8009546:	2211      	movs	r2, #17
 8009548:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	791a      	ldrb	r2, [r3, #4]
 800954e:	4b1b      	ldr	r3, [pc, #108]	; (80095bc <RNSStop+0xfc>)
 8009550:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6818      	ldr	r0, [r3, #0]
 8009556:	2302      	movs	r3, #2
 8009558:	4a18      	ldr	r2, [pc, #96]	; (80095bc <RNSStop+0xfc>)
 800955a:	2117      	movs	r1, #23
 800955c:	f7fa f91a 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0]),8);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6818      	ldr	r0, [r3, #0]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f103 0208 	add.w	r2, r3, #8
 800956a:	2308      	movs	r3, #8
 800956c:	2118      	movs	r1, #24
 800956e:	f7fa f911 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2]),8);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6818      	ldr	r0, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f103 0210 	add.w	r2, r3, #16
 800957c:	2308      	movs	r3, #8
 800957e:	2119      	movs	r1, #25
 8009580:	f7fa f908 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 8009584:	4b0f      	ldr	r3, [pc, #60]	; (80095c4 <RNSStop+0x104>)
 8009586:	785b      	ldrb	r3, [r3, #1]
 8009588:	b25b      	sxtb	r3, r3
 800958a:	4a0e      	ldr	r2, [pc, #56]	; (80095c4 <RNSStop+0x104>)
 800958c:	43db      	mvns	r3, r3
 800958e:	b2db      	uxtb	r3, r3
 8009590:	09db      	lsrs	r3, r3, #7
 8009592:	b2d9      	uxtb	r1, r3
 8009594:	7853      	ldrb	r3, [r2, #1]
 8009596:	f361 13c7 	bfi	r3, r1, #7, #1
 800959a:	7053      	strb	r3, [r2, #1]
			wait = 0;
 800959c:	2300      	movs	r3, #0
 800959e:	60fb      	str	r3, [r7, #12]
 80095a0:	e002      	b.n	80095a8 <RNSStop+0xe8>
		}
		else
			wait++;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	3301      	adds	r3, #1
 80095a6:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80095ae:	2b02      	cmp	r3, #2
 80095b0:	d0c4      	beq.n	800953c <RNSStop+0x7c>
	}


}
 80095b2:	bf00      	nop
 80095b4:	bf00      	nop
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	2000a68c 	.word	0x2000a68c
 80095c0:	001e847f 	.word	0x001e847f
 80095c4:	40020814 	.word	0x40020814

080095c8 <RNSVelocity>:
 * Function Return		: None
 * Function Example		: RNSVelocity(1.0, 1.5 , 1.5 , 1.0, &RNS);
 */

void RNSVelocity(float fFLeftVelR, float fFRightVelR, float fBLeftVelR, float fBRightVelR, RNS_interface_t* rns)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b086      	sub	sp, #24
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	ed87 0a05 	vstr	s0, [r7, #20]
 80095d2:	edc7 0a04 	vstr	s1, [r7, #16]
 80095d6:	ed87 1a03 	vstr	s2, [r7, #12]
 80095da:	edc7 1a02 	vstr	s3, [r7, #8]
 80095de:	6078      	str	r0, [r7, #4]

	rns->ins.instruction = RNS_VELOCITY;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2205      	movs	r2, #5
 80095e4:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = fFLeftVelR;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	697a      	ldr	r2, [r7, #20]
 80095ea:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = fFRightVelR;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	693a      	ldr	r2, [r7, #16]
 80095f0:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = fBLeftVelR;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = fBRightVelR;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	615a      	str	r2, [r3, #20]

	RNSSendIns(rns);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f804 	bl	800960c <RNSSendIns>

}
 8009604:	bf00      	nop
 8009606:	3718      	adds	r7, #24
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <RNSSendIns>:
 * Function Return		: None
 * Function Example		: None
 */

void RNSSendIns(RNS_interface_t* rns)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
	while(rns->RNS_data.common_instruction == RNS_BUSY);
 8009614:	bf00      	nop
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800961c:	2b01      	cmp	r3, #1
 800961e:	d0fa      	beq.n	8009616 <RNSSendIns+0xa>
	rns->RNS_data.common_instruction = RNS_WAITING;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2202      	movs	r2, #2
 8009624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 8009628:	4b31      	ldr	r3, [pc, #196]	; (80096f0 <RNSSendIns+0xe4>)
 800962a:	2211      	movs	r2, #17
 800962c:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	791a      	ldrb	r2, [r3, #4]
 8009632:	4b2f      	ldr	r3, [pc, #188]	; (80096f0 <RNSSendIns+0xe4>)
 8009634:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS, insData_send,2);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6818      	ldr	r0, [r3, #0]
 800963a:	2302      	movs	r3, #2
 800963c:	4a2c      	ldr	r2, [pc, #176]	; (80096f0 <RNSSendIns+0xe4>)
 800963e:	2117      	movs	r1, #23
 8009640:	f7fa f8a8 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6818      	ldr	r0, [r3, #0]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f103 0208 	add.w	r2, r3, #8
 800964e:	2308      	movs	r3, #8
 8009650:	2118      	movs	r1, #24
 8009652:	f7fa f89f 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6818      	ldr	r0, [r3, #0]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f103 0210 	add.w	r2, r3, #16
 8009660:	2308      	movs	r3, #8
 8009662:	2119      	movs	r1, #25
 8009664:	f7fa f896 	bl	8003794 <CAN_TxMsg>

	int wait = 0;
 8009668:	2300      	movs	r3, #0
 800966a:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800966c:	e035      	b.n	80096da <RNSSendIns+0xce>
	{
		if(wait >= 2000000)
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	4a20      	ldr	r2, [pc, #128]	; (80096f4 <RNSSendIns+0xe8>)
 8009672:	4293      	cmp	r3, r2
 8009674:	dd2e      	ble.n	80096d4 <RNSSendIns+0xc8>
		{
			insData_send[0] = 17;
 8009676:	4b1e      	ldr	r3, [pc, #120]	; (80096f0 <RNSSendIns+0xe4>)
 8009678:	2211      	movs	r2, #17
 800967a:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	791a      	ldrb	r2, [r3, #4]
 8009680:	4b1b      	ldr	r3, [pc, #108]	; (80096f0 <RNSSendIns+0xe4>)
 8009682:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS, insData_send,2);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6818      	ldr	r0, [r3, #0]
 8009688:	2302      	movs	r3, #2
 800968a:	4a19      	ldr	r2, [pc, #100]	; (80096f0 <RNSSendIns+0xe4>)
 800968c:	2117      	movs	r1, #23
 800968e:	f7fa f881 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6818      	ldr	r0, [r3, #0]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f103 0208 	add.w	r2, r3, #8
 800969c:	2308      	movs	r3, #8
 800969e:	2118      	movs	r1, #24
 80096a0:	f7fa f878 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6818      	ldr	r0, [r3, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f103 0210 	add.w	r2, r3, #16
 80096ae:	2308      	movs	r3, #8
 80096b0:	2119      	movs	r1, #25
 80096b2:	f7fa f86f 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 80096b6:	4b10      	ldr	r3, [pc, #64]	; (80096f8 <RNSSendIns+0xec>)
 80096b8:	785b      	ldrb	r3, [r3, #1]
 80096ba:	b25b      	sxtb	r3, r3
 80096bc:	4a0e      	ldr	r2, [pc, #56]	; (80096f8 <RNSSendIns+0xec>)
 80096be:	43db      	mvns	r3, r3
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	09db      	lsrs	r3, r3, #7
 80096c4:	b2d9      	uxtb	r1, r3
 80096c6:	7853      	ldrb	r3, [r2, #1]
 80096c8:	f361 13c7 	bfi	r3, r1, #7, #1
 80096cc:	7053      	strb	r3, [r2, #1]
			wait = 0;
 80096ce:	2300      	movs	r3, #0
 80096d0:	60fb      	str	r3, [r7, #12]
 80096d2:	e002      	b.n	80096da <RNSSendIns+0xce>
		}
		else
		{
			wait++;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	3301      	adds	r3, #1
 80096d8:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d0c4      	beq.n	800966e <RNSSendIns+0x62>
		}
	}

}
 80096e4:	bf00      	nop
 80096e6:	bf00      	nop
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	2000a68c 	.word	0x2000a68c
 80096f4:	001e847f 	.word	0x001e847f
 80096f8:	40020814 	.word	0x40020814

080096fc <RNSSet>:
 * Function Return		: None
 * Function Example		: RNSSet(&RNS, RNS_F_KCD_PTD, 0.9956, 0.01/2000);
 */

void RNSSet(RNS_interface_t* rns, unsigned char parameter, ...)
{
 80096fc:	b40e      	push	{r1, r2, r3}
 80096fe:	b580      	push	{r7, lr}
 8009700:	b085      	sub	sp, #20
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]

	va_list value;
	rns->param.parameter = parameter;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	7f3a      	ldrb	r2, [r7, #28]
 800970a:	761a      	strb	r2, [r3, #24]
	va_start(value, parameter);
 800970c:	f107 0320 	add.w	r3, r7, #32
 8009710:	60bb      	str	r3, [r7, #8]
	while(rns->RNS_data.common_instruction == RNS_WAITING);
 8009712:	bf00      	nop
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800971a:	2b02      	cmp	r3, #2
 800971c:	d0fa      	beq.n	8009714 <RNSSet+0x18>
	if (parameter > RNS_PARAM_1){
 800971e:	7f3b      	ldrb	r3, [r7, #28]
 8009720:	2b18      	cmp	r3, #24
 8009722:	d92b      	bls.n	800977c <RNSSet+0x80>
		rns->param.param_buffer[0].data = va_arg(value, double);
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	3307      	adds	r3, #7
 8009728:	f023 0307 	bic.w	r3, r3, #7
 800972c:	f103 0208 	add.w	r2, r3, #8
 8009730:	60ba      	str	r2, [r7, #8]
 8009732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009736:	4610      	mov	r0, r2
 8009738:	4619      	mov	r1, r3
 800973a:	f7f7 fa55 	bl	8000be8 <__aeabi_d2f>
 800973e:	4602      	mov	r2, r0
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	61da      	str	r2, [r3, #28]
		rns->param.param_buffer[1].data = 0;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f04f 0200 	mov.w	r2, #0
 800974a:	621a      	str	r2, [r3, #32]
		rns->param.param_buffer[2].data = 0;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f04f 0200 	mov.w	r2, #0
 8009752:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f04f 0200 	mov.w	r2, #0
 800975a:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f04f 0200 	mov.w	r2, #0
 8009762:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f04f 0200 	mov.w	r2, #0
 800976a:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f04f 0200 	mov.w	r2, #0
 8009772:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f04f 0200 	mov.w	r2, #0
 800977a:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_2){
 800977c:	7f3b      	ldrb	r3, [r7, #28]
 800977e:	2b1e      	cmp	r3, #30
 8009780:	d927      	bls.n	80097d2 <RNSSet+0xd6>
		rns->param.param_buffer[1].data = va_arg(value, double);
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	3307      	adds	r3, #7
 8009786:	f023 0307 	bic.w	r3, r3, #7
 800978a:	f103 0208 	add.w	r2, r3, #8
 800978e:	60ba      	str	r2, [r7, #8]
 8009790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009794:	4610      	mov	r0, r2
 8009796:	4619      	mov	r1, r3
 8009798:	f7f7 fa26 	bl	8000be8 <__aeabi_d2f>
 800979c:	4602      	mov	r2, r0
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	621a      	str	r2, [r3, #32]
		rns->param.param_buffer[2].data = 0;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f04f 0200 	mov.w	r2, #0
 80097a8:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f04f 0200 	mov.w	r2, #0
 80097b0:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f04f 0200 	mov.w	r2, #0
 80097b8:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f04f 0200 	mov.w	r2, #0
 80097c0:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f04f 0200 	mov.w	r2, #0
 80097c8:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f04f 0200 	mov.w	r2, #0
 80097d0:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_3){
 80097d2:	7f3b      	ldrb	r3, [r7, #28]
 80097d4:	2b23      	cmp	r3, #35	; 0x23
 80097d6:	d923      	bls.n	8009820 <RNSSet+0x124>
		rns->param.param_buffer[2].data = va_arg(value, double);
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	3307      	adds	r3, #7
 80097dc:	f023 0307 	bic.w	r3, r3, #7
 80097e0:	f103 0208 	add.w	r2, r3, #8
 80097e4:	60ba      	str	r2, [r7, #8]
 80097e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ea:	4610      	mov	r0, r2
 80097ec:	4619      	mov	r1, r3
 80097ee:	f7f7 f9fb 	bl	8000be8 <__aeabi_d2f>
 80097f2:	4602      	mov	r2, r0
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f04f 0200 	mov.w	r2, #0
 80097fe:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f04f 0200 	mov.w	r2, #0
 8009806:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f04f 0200 	mov.w	r2, #0
 800980e:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f04f 0200 	mov.w	r2, #0
 8009816:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f04f 0200 	mov.w	r2, #0
 800981e:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_4){
 8009820:	7f3b      	ldrb	r3, [r7, #28]
 8009822:	2b48      	cmp	r3, #72	; 0x48
 8009824:	d91f      	bls.n	8009866 <RNSSet+0x16a>
		rns->param.param_buffer[3].data = va_arg(value, double);
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	3307      	adds	r3, #7
 800982a:	f023 0307 	bic.w	r3, r3, #7
 800982e:	f103 0208 	add.w	r2, r3, #8
 8009832:	60ba      	str	r2, [r7, #8]
 8009834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009838:	4610      	mov	r0, r2
 800983a:	4619      	mov	r1, r3
 800983c:	f7f7 f9d4 	bl	8000be8 <__aeabi_d2f>
 8009840:	4602      	mov	r2, r0
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f04f 0200 	mov.w	r2, #0
 800984c:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f04f 0200 	mov.w	r2, #0
 8009854:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f04f 0200 	mov.w	r2, #0
 800985c:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f04f 0200 	mov.w	r2, #0
 8009864:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_5){
 8009866:	7f3b      	ldrb	r3, [r7, #28]
 8009868:	2b50      	cmp	r3, #80	; 0x50
 800986a:	d91b      	bls.n	80098a4 <RNSSet+0x1a8>
		rns->param.param_buffer[4].data = va_arg(value,double);
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	3307      	adds	r3, #7
 8009870:	f023 0307 	bic.w	r3, r3, #7
 8009874:	f103 0208 	add.w	r2, r3, #8
 8009878:	60ba      	str	r2, [r7, #8]
 800987a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987e:	4610      	mov	r0, r2
 8009880:	4619      	mov	r1, r3
 8009882:	f7f7 f9b1 	bl	8000be8 <__aeabi_d2f>
 8009886:	4602      	mov	r2, r0
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f04f 0200 	mov.w	r2, #0
 8009892:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f04f 0200 	mov.w	r2, #0
 800989a:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f04f 0200 	mov.w	r2, #0
 80098a2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_6){
 80098a4:	7f3b      	ldrb	r3, [r7, #28]
 80098a6:	2b51      	cmp	r3, #81	; 0x51
 80098a8:	d917      	bls.n	80098da <RNSSet+0x1de>
		rns->param.param_buffer[5].data = va_arg(value, double);
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	3307      	adds	r3, #7
 80098ae:	f023 0307 	bic.w	r3, r3, #7
 80098b2:	f103 0208 	add.w	r2, r3, #8
 80098b6:	60ba      	str	r2, [r7, #8]
 80098b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098bc:	4610      	mov	r0, r2
 80098be:	4619      	mov	r1, r3
 80098c0:	f7f7 f992 	bl	8000be8 <__aeabi_d2f>
 80098c4:	4602      	mov	r2, r0
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f04f 0200 	mov.w	r2, #0
 80098d0:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f04f 0200 	mov.w	r2, #0
 80098d8:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_7){
 80098da:	7f3b      	ldrb	r3, [r7, #28]
 80098dc:	2b52      	cmp	r3, #82	; 0x52
 80098de:	d913      	bls.n	8009908 <RNSSet+0x20c>
		rns->param.param_buffer[6].data = va_arg(value, double);
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	3307      	adds	r3, #7
 80098e4:	f023 0307 	bic.w	r3, r3, #7
 80098e8:	f103 0208 	add.w	r2, r3, #8
 80098ec:	60ba      	str	r2, [r7, #8]
 80098ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f2:	4610      	mov	r0, r2
 80098f4:	4619      	mov	r1, r3
 80098f6:	f7f7 f977 	bl	8000be8 <__aeabi_d2f>
 80098fa:	4602      	mov	r2, r0
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f04f 0200 	mov.w	r2, #0
 8009906:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if(parameter > RNS_PARAM_8){
 8009908:	7f3b      	ldrb	r3, [r7, #28]
 800990a:	2b54      	cmp	r3, #84	; 0x54
 800990c:	d90f      	bls.n	800992e <RNSSet+0x232>
		rns->param.param_buffer[7].data = va_arg(value, double);
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	3307      	adds	r3, #7
 8009912:	f023 0307 	bic.w	r3, r3, #7
 8009916:	f103 0208 	add.w	r2, r3, #8
 800991a:	60ba      	str	r2, [r7, #8]
 800991c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009920:	4610      	mov	r0, r2
 8009922:	4619      	mov	r1, r3
 8009924:	f7f7 f960 	bl	8000be8 <__aeabi_d2f>
 8009928:	4602      	mov	r2, r0
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	639a      	str	r2, [r3, #56]	; 0x38
	}

	va_end(value);

	insData_send[0] = 17;
 800992e:	4b4d      	ldr	r3, [pc, #308]	; (8009a64 <RNSSet+0x368>)
 8009930:	2211      	movs	r2, #17
 8009932:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->param.parameter;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	7e1a      	ldrb	r2, [r3, #24]
 8009938:	4b4a      	ldr	r3, [pc, #296]	; (8009a64 <RNSSet+0x368>)
 800993a:	705a      	strb	r2, [r3, #1]

	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6818      	ldr	r0, [r3, #0]
 8009940:	2302      	movs	r3, #2
 8009942:	4a48      	ldr	r2, [pc, #288]	; (8009a64 <RNSSet+0x368>)
 8009944:	2117      	movs	r1, #23
 8009946:	f7f9 ff25 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->param.param_buffer[0]),8);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6818      	ldr	r0, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f103 021c 	add.w	r2, r3, #28
 8009954:	2308      	movs	r3, #8
 8009956:	2118      	movs	r1, #24
 8009958:	f7f9 ff1c 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->param.param_buffer[2]),8);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6818      	ldr	r0, [r3, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8009966:	2308      	movs	r3, #8
 8009968:	2119      	movs	r1, #25
 800996a:	f7f9 ff13 	bl	8003794 <CAN_TxMsg>
	if(parameter > RNS_PARAM_5)
 800996e:	7f3b      	ldrb	r3, [r7, #28]
 8009970:	2b50      	cmp	r3, #80	; 0x50
 8009972:	d908      	bls.n	8009986 <RNSSet+0x28a>
		CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf3,&(rns->param.param_buffer[4]),8);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6818      	ldr	r0, [r3, #0]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800997e:	2308      	movs	r3, #8
 8009980:	211a      	movs	r1, #26
 8009982:	f7f9 ff07 	bl	8003794 <CAN_TxMsg>
	if(parameter > RNS_PARAM_7)
 8009986:	7f3b      	ldrb	r3, [r7, #28]
 8009988:	2b52      	cmp	r3, #82	; 0x52
 800998a:	d908      	bls.n	800999e <RNSSet+0x2a2>
		CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf4,&(rns->param.param_buffer[6]),8);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6818      	ldr	r0, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009996:	2308      	movs	r3, #8
 8009998:	211b      	movs	r1, #27
 800999a:	f7f9 fefb 	bl	8003794 <CAN_TxMsg>

	rns->RNS_data.common_instruction = RNS_WAITING;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2202      	movs	r2, #2
 80099a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	int wait = 0;
 80099a6:	2300      	movs	r3, #0
 80099a8:	60fb      	str	r3, [r7, #12]

	while(rns->RNS_data.common_instruction == RNS_WAITING)
 80099aa:	e04d      	b.n	8009a48 <RNSSet+0x34c>
	{
		if(wait >= 2000000)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	4a2e      	ldr	r2, [pc, #184]	; (8009a68 <RNSSet+0x36c>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	dd46      	ble.n	8009a42 <RNSSet+0x346>
		{
			insData_send[0] = 17;
 80099b4:	4b2b      	ldr	r3, [pc, #172]	; (8009a64 <RNSSet+0x368>)
 80099b6:	2211      	movs	r2, #17
 80099b8:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->param.parameter;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	7e1a      	ldrb	r2, [r3, #24]
 80099be:	4b29      	ldr	r3, [pc, #164]	; (8009a64 <RNSSet+0x368>)
 80099c0:	705a      	strb	r2, [r3, #1]

			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6818      	ldr	r0, [r3, #0]
 80099c6:	2302      	movs	r3, #2
 80099c8:	4a26      	ldr	r2, [pc, #152]	; (8009a64 <RNSSet+0x368>)
 80099ca:	2117      	movs	r1, #23
 80099cc:	f7f9 fee2 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->param.param_buffer[0]),8);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6818      	ldr	r0, [r3, #0]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f103 021c 	add.w	r2, r3, #28
 80099da:	2308      	movs	r3, #8
 80099dc:	2118      	movs	r1, #24
 80099de:	f7f9 fed9 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->param.param_buffer[2]),8);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6818      	ldr	r0, [r3, #0]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80099ec:	2308      	movs	r3, #8
 80099ee:	2119      	movs	r1, #25
 80099f0:	f7f9 fed0 	bl	8003794 <CAN_TxMsg>
			if(parameter > RNS_PARAM_5)
 80099f4:	7f3b      	ldrb	r3, [r7, #28]
 80099f6:	2b50      	cmp	r3, #80	; 0x50
 80099f8:	d908      	bls.n	8009a0c <RNSSet+0x310>
				CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf3,&(rns->param.param_buffer[4]),8);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6818      	ldr	r0, [r3, #0]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8009a04:	2308      	movs	r3, #8
 8009a06:	211a      	movs	r1, #26
 8009a08:	f7f9 fec4 	bl	8003794 <CAN_TxMsg>
			if(parameter > RNS_PARAM_7)
 8009a0c:	7f3b      	ldrb	r3, [r7, #28]
 8009a0e:	2b52      	cmp	r3, #82	; 0x52
 8009a10:	d908      	bls.n	8009a24 <RNSSet+0x328>
				CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf4,&(rns->param.param_buffer[6]),8);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6818      	ldr	r0, [r3, #0]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009a1c:	2308      	movs	r3, #8
 8009a1e:	211b      	movs	r1, #27
 8009a20:	f7f9 feb8 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 8009a24:	4b11      	ldr	r3, [pc, #68]	; (8009a6c <RNSSet+0x370>)
 8009a26:	785b      	ldrb	r3, [r3, #1]
 8009a28:	b25b      	sxtb	r3, r3
 8009a2a:	4a10      	ldr	r2, [pc, #64]	; (8009a6c <RNSSet+0x370>)
 8009a2c:	43db      	mvns	r3, r3
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	09db      	lsrs	r3, r3, #7
 8009a32:	b2d9      	uxtb	r1, r3
 8009a34:	7853      	ldrb	r3, [r2, #1]
 8009a36:	f361 13c7 	bfi	r3, r1, #7, #1
 8009a3a:	7053      	strb	r3, [r2, #1]
			wait = 0;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	60fb      	str	r3, [r7, #12]
 8009a40:	e002      	b.n	8009a48 <RNSSet+0x34c>
		}
		else
			wait++;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	3301      	adds	r3, #1
 8009a46:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a4e:	2b02      	cmp	r3, #2
 8009a50:	d0ac      	beq.n	80099ac <RNSSet+0x2b0>
	}
	//UARTPrintString(&huart5,"1\r\n");

}
 8009a52:	bf00      	nop
 8009a54:	bf00      	nop
 8009a56:	3714      	adds	r7, #20
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a5e:	b003      	add	sp, #12
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	2000a68c 	.word	0x2000a68c
 8009a68:	001e847f 	.word	0x001e847f
 8009a6c:	40020814 	.word	0x40020814

08009a70 <RNSEnquire>:
 * Function Return		: None
 * Function Example		: RNSSet(&RNS, RNS_F_KCD_PTD, 0.9956, 0.01/2000);
 */

uint8_t RNSEnquire(unsigned char parameter, RNS_interface_t* rns)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	4603      	mov	r3, r0
 8009a78:	6039      	str	r1, [r7, #0]
 8009a7a:	71fb      	strb	r3, [r7, #7]

	rns->ins.instruction = parameter;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	79fa      	ldrb	r2, [r7, #7]
 8009a80:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0.0;
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	f04f 0200 	mov.w	r2, #0
 8009a88:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0.0;
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	f04f 0200 	mov.w	r2, #0
 8009a90:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0.0;
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	f04f 0200 	mov.w	r2, #0
 8009a98:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0.0;
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	f04f 0200 	mov.w	r2, #0
 8009aa0:	615a      	str	r2, [r3, #20]

//	RNSSendIns(rns);

	rns->RNS_data.common_instruction = RNS_WAITING;
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	2202      	movs	r2, #2
 8009aa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 8009aaa:	4b3b      	ldr	r3, [pc, #236]	; (8009b98 <RNSEnquire+0x128>)
 8009aac:	2211      	movs	r2, #17
 8009aae:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	791a      	ldrb	r2, [r3, #4]
 8009ab4:	4b38      	ldr	r3, [pc, #224]	; (8009b98 <RNSEnquire+0x128>)
 8009ab6:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	6818      	ldr	r0, [r3, #0]
 8009abc:	2302      	movs	r3, #2
 8009abe:	4a36      	ldr	r2, [pc, #216]	; (8009b98 <RNSEnquire+0x128>)
 8009ac0:	2117      	movs	r1, #23
 8009ac2:	f7f9 fe67 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	6818      	ldr	r0, [r3, #0]
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	f103 0208 	add.w	r2, r3, #8
 8009ad0:	2308      	movs	r3, #8
 8009ad2:	2118      	movs	r1, #24
 8009ad4:	f7f9 fe5e 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	6818      	ldr	r0, [r3, #0]
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	f103 0210 	add.w	r2, r3, #16
 8009ae2:	2308      	movs	r3, #8
 8009ae4:	2119      	movs	r1, #25
 8009ae6:	f7f9 fe55 	bl	8003794 <CAN_TxMsg>

	int wait = 0;
 8009aea:	2300      	movs	r3, #0
 8009aec:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8009aee:	e035      	b.n	8009b5c <RNSEnquire+0xec>
	{
		if(wait >= 2000000)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	4a2a      	ldr	r2, [pc, #168]	; (8009b9c <RNSEnquire+0x12c>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	dd2e      	ble.n	8009b56 <RNSEnquire+0xe6>
		{
			insData_send[0] = 17;
 8009af8:	4b27      	ldr	r3, [pc, #156]	; (8009b98 <RNSEnquire+0x128>)
 8009afa:	2211      	movs	r2, #17
 8009afc:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	791a      	ldrb	r2, [r3, #4]
 8009b02:	4b25      	ldr	r3, [pc, #148]	; (8009b98 <RNSEnquire+0x128>)
 8009b04:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	6818      	ldr	r0, [r3, #0]
 8009b0a:	2302      	movs	r3, #2
 8009b0c:	4a22      	ldr	r2, [pc, #136]	; (8009b98 <RNSEnquire+0x128>)
 8009b0e:	2117      	movs	r1, #23
 8009b10:	f7f9 fe40 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	6818      	ldr	r0, [r3, #0]
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	f103 0208 	add.w	r2, r3, #8
 8009b1e:	2308      	movs	r3, #8
 8009b20:	2118      	movs	r1, #24
 8009b22:	f7f9 fe37 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	6818      	ldr	r0, [r3, #0]
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	f103 0210 	add.w	r2, r3, #16
 8009b30:	2308      	movs	r3, #8
 8009b32:	2119      	movs	r1, #25
 8009b34:	f7f9 fe2e 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 8009b38:	4b19      	ldr	r3, [pc, #100]	; (8009ba0 <RNSEnquire+0x130>)
 8009b3a:	785b      	ldrb	r3, [r3, #1]
 8009b3c:	b25b      	sxtb	r3, r3
 8009b3e:	4a18      	ldr	r2, [pc, #96]	; (8009ba0 <RNSEnquire+0x130>)
 8009b40:	43db      	mvns	r3, r3
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	09db      	lsrs	r3, r3, #7
 8009b46:	b2d9      	uxtb	r1, r3
 8009b48:	7853      	ldrb	r3, [r2, #1]
 8009b4a:	f361 13c7 	bfi	r3, r1, #7, #1
 8009b4e:	7053      	strb	r3, [r2, #1]
			wait = 0;
 8009b50:	2300      	movs	r3, #0
 8009b52:	60fb      	str	r3, [r7, #12]
 8009b54:	e002      	b.n	8009b5c <RNSEnquire+0xec>
		}
		else wait++;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d0c4      	beq.n	8009af0 <RNSEnquire+0x80>

	}

	rns->enq.enquiry = parameter;
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	79fa      	ldrb	r2, [r7, #7]
 8009b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rns->enq.enq_buffer[0].data = rns->RNS_data.common_buffer[0].data;
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	641a      	str	r2, [r3, #64]	; 0x40
	rns->enq.enq_buffer[1].data = rns->RNS_data.common_buffer[1].data;
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	645a      	str	r2, [r3, #68]	; 0x44
	rns->enq.enq_buffer[2].data = rns->RNS_data.common_buffer[2].data;
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	649a      	str	r2, [r3, #72]	; 0x48
	rns->enq.enq_buffer[3].data = rns->RNS_data.common_buffer[3].data;
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	64da      	str	r2, [r3, #76]	; 0x4c


	return 1;
 8009b8e:	2301      	movs	r3, #1
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3710      	adds	r7, #16
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	2000a68c 	.word	0x2000a68c
 8009b9c:	001e847f 	.word	0x001e847f
 8009ba0:	40020814 	.word	0x40020814

08009ba4 <ServoxInit>:
 * 						  					TIM_CHANNEL_3
 * 						  					TIM_CHANNEL_4
 * Function Return		: None
 * Function Example		: ServoInit(&SERVO1, &htim3, GPIOA,GPIO_Pin_6, TIM_CHANNEL_1);
 */
void ServoxInit(SERVO_t* servo, TIM_HandleTypeDef* htimx, GPIO_TypeDef * SERVO_GPIOx,uint16_t SERVO_GPIO_Pin, uint32_t channel){
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b08c      	sub	sp, #48	; 0x30
 8009ba8:	af02      	add	r7, sp, #8
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	607a      	str	r2, [r7, #4]
 8009bb0:	807b      	strh	r3, [r7, #2]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009bb2:	f107 0318 	add.w	r3, r7, #24
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	601a      	str	r2, [r3, #0]
 8009bba:	605a      	str	r2, [r3, #4]
 8009bbc:	609a      	str	r2, [r3, #8]
 8009bbe:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009bc0:	f107 0310 	add.w	r3, r7, #16
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	601a      	str	r2, [r3, #0]
 8009bc8:	605a      	str	r2, [r3, #4]


		if(htimx == &htim1){
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	4a6d      	ldr	r2, [pc, #436]	; (8009d84 <ServoxInit+0x1e0>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d106      	bne.n	8009be0 <ServoxInit+0x3c>
			htimx->Instance = TIM1;
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	4a6c      	ldr	r2, [pc, #432]	; (8009d88 <ServoxInit+0x1e4>)
 8009bd6:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	22a7      	movs	r2, #167	; 0xa7
 8009bdc:	605a      	str	r2, [r3, #4]
 8009bde:	e078      	b.n	8009cd2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim2)	{
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	4a6a      	ldr	r2, [pc, #424]	; (8009d8c <ServoxInit+0x1e8>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d107      	bne.n	8009bf8 <ServoxInit+0x54>
			htimx->Instance = TIM2;
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009bee:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	2253      	movs	r2, #83	; 0x53
 8009bf4:	605a      	str	r2, [r3, #4]
 8009bf6:	e06c      	b.n	8009cd2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim3)	{
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	4a65      	ldr	r2, [pc, #404]	; (8009d90 <ServoxInit+0x1ec>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d106      	bne.n	8009c0e <ServoxInit+0x6a>
			htimx->Instance = TIM3;
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	4a64      	ldr	r2, [pc, #400]	; (8009d94 <ServoxInit+0x1f0>)
 8009c04:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	2253      	movs	r2, #83	; 0x53
 8009c0a:	605a      	str	r2, [r3, #4]
 8009c0c:	e061      	b.n	8009cd2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim4)	{
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	4a61      	ldr	r2, [pc, #388]	; (8009d98 <ServoxInit+0x1f4>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d106      	bne.n	8009c24 <ServoxInit+0x80>
			htimx->Instance = TIM4;
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	4a60      	ldr	r2, [pc, #384]	; (8009d9c <ServoxInit+0x1f8>)
 8009c1a:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	2253      	movs	r2, #83	; 0x53
 8009c20:	605a      	str	r2, [r3, #4]
 8009c22:	e056      	b.n	8009cd2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim5)	{
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	4a5e      	ldr	r2, [pc, #376]	; (8009da0 <ServoxInit+0x1fc>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d106      	bne.n	8009c3a <ServoxInit+0x96>
			htimx->Instance = TIM5;
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	4a5d      	ldr	r2, [pc, #372]	; (8009da4 <ServoxInit+0x200>)
 8009c30:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	2253      	movs	r2, #83	; 0x53
 8009c36:	605a      	str	r2, [r3, #4]
 8009c38:	e04b      	b.n	8009cd2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim8)	{
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	4a5a      	ldr	r2, [pc, #360]	; (8009da8 <ServoxInit+0x204>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d106      	bne.n	8009c50 <ServoxInit+0xac>
			htimx->Instance = TIM8;
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	4a59      	ldr	r2, [pc, #356]	; (8009dac <ServoxInit+0x208>)
 8009c46:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	22a7      	movs	r2, #167	; 0xa7
 8009c4c:	605a      	str	r2, [r3, #4]
 8009c4e:	e040      	b.n	8009cd2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim9)	{
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	4a57      	ldr	r2, [pc, #348]	; (8009db0 <ServoxInit+0x20c>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d106      	bne.n	8009c66 <ServoxInit+0xc2>
			htimx->Instance = TIM9;
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	4a56      	ldr	r2, [pc, #344]	; (8009db4 <ServoxInit+0x210>)
 8009c5c:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	22a7      	movs	r2, #167	; 0xa7
 8009c62:	605a      	str	r2, [r3, #4]
 8009c64:	e035      	b.n	8009cd2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim10)	{
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	4a53      	ldr	r2, [pc, #332]	; (8009db8 <ServoxInit+0x214>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d106      	bne.n	8009c7c <ServoxInit+0xd8>
			htimx->Instance = TIM10;
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	4a52      	ldr	r2, [pc, #328]	; (8009dbc <ServoxInit+0x218>)
 8009c72:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	22a7      	movs	r2, #167	; 0xa7
 8009c78:	605a      	str	r2, [r3, #4]
 8009c7a:	e02a      	b.n	8009cd2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim11)	{
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	4a50      	ldr	r2, [pc, #320]	; (8009dc0 <ServoxInit+0x21c>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d106      	bne.n	8009c92 <ServoxInit+0xee>
			htimx->Instance = TIM11;
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	4a4f      	ldr	r2, [pc, #316]	; (8009dc4 <ServoxInit+0x220>)
 8009c88:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	22a7      	movs	r2, #167	; 0xa7
 8009c8e:	605a      	str	r2, [r3, #4]
 8009c90:	e01f      	b.n	8009cd2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim12)	{
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	4a4c      	ldr	r2, [pc, #304]	; (8009dc8 <ServoxInit+0x224>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d106      	bne.n	8009ca8 <ServoxInit+0x104>
			htimx->Instance = TIM12;
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	4a4b      	ldr	r2, [pc, #300]	; (8009dcc <ServoxInit+0x228>)
 8009c9e:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	2253      	movs	r2, #83	; 0x53
 8009ca4:	605a      	str	r2, [r3, #4]
 8009ca6:	e014      	b.n	8009cd2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim13)	{
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	4a49      	ldr	r2, [pc, #292]	; (8009dd0 <ServoxInit+0x22c>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d106      	bne.n	8009cbe <ServoxInit+0x11a>
			htimx->Instance = TIM13;
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	4a48      	ldr	r2, [pc, #288]	; (8009dd4 <ServoxInit+0x230>)
 8009cb4:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	2253      	movs	r2, #83	; 0x53
 8009cba:	605a      	str	r2, [r3, #4]
 8009cbc:	e009      	b.n	8009cd2 <ServoxInit+0x12e>
			}
		else if(htimx == &htim14)	{
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	4a45      	ldr	r2, [pc, #276]	; (8009dd8 <ServoxInit+0x234>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d105      	bne.n	8009cd2 <ServoxInit+0x12e>
			htimx->Instance = TIM14;
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	4a44      	ldr	r2, [pc, #272]	; (8009ddc <ServoxInit+0x238>)
 8009cca:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	2253      	movs	r2, #83	; 0x53
 8009cd0:	605a      	str	r2, [r3, #4]
			}


		htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	609a      	str	r2, [r3, #8]
		htimx->Init.Period = 19999;
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8009cde:	60da      	str	r2, [r3, #12]
		htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	611a      	str	r2, [r3, #16]
		htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	2280      	movs	r2, #128	; 0x80
 8009cea:	619a      	str	r2, [r3, #24]
		 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 8009cec:	68b8      	ldr	r0, [r7, #8]
 8009cee:	f00b f971 	bl	8014fd4 <HAL_TIM_Base_Init>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d001      	beq.n	8009cfc <ServoxInit+0x158>
		  {
		    Error_Handler();
 8009cf8:	f7fa fc26 	bl	8004548 <Error_Handler>
		  }
		  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d00:	61bb      	str	r3, [r7, #24]
		  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 8009d02:	f107 0318 	add.w	r3, r7, #24
 8009d06:	4619      	mov	r1, r3
 8009d08:	68b8      	ldr	r0, [r7, #8]
 8009d0a:	f00b fcd7 	bl	80156bc <HAL_TIM_ConfigClockSource>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d001      	beq.n	8009d18 <ServoxInit+0x174>
		  {
		    Error_Handler();
 8009d14:	f7fa fc18 	bl	8004548 <Error_Handler>
		  }
		if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 8009d18:	68b8      	ldr	r0, [r7, #8]
 8009d1a:	f00b f9ce 	bl	80150ba <HAL_TIM_PWM_Init>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <ServoxInit+0x184>
			{
				Error_Handler();
 8009d24:	f7fa fc10 	bl	8004548 <Error_Handler>
			}

		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	613b      	str	r3, [r7, #16]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	617b      	str	r3, [r7, #20]
		if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8009d30:	f107 0310 	add.w	r3, r7, #16
 8009d34:	4619      	mov	r1, r3
 8009d36:	68b8      	ldr	r0, [r7, #8]
 8009d38:	f00c f8bc 	bl	8015eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d001      	beq.n	8009d46 <ServoxInit+0x1a2>
		{
			Error_Handler();
 8009d42:	f7fa fc01 	bl	8004548 <Error_Handler>
		}


	    HAL_TIM_Base_Start(htimx);
 8009d46:	68b8      	ldr	r0, [r7, #8]
 8009d48:	f00b f96f 	bl	801502a <HAL_TIM_Base_Start>

	GPIOPinsInit(SERVO_GPIOx, SERVO_GPIO_Pin, GPIO_MODE_AF_PP, GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009d4c:	8879      	ldrh	r1, [r7, #2]
 8009d4e:	2301      	movs	r3, #1
 8009d50:	9300      	str	r3, [sp, #0]
 8009d52:	2302      	movs	r3, #2
 8009d54:	2202      	movs	r2, #2
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f7f7 fad2 	bl	8001300 <GPIOPinsInit>

	servo->htimx = htimx;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	601a      	str	r2, [r3, #0]
	servo->htimx_Channel = channel;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d66:	605a      	str	r2, [r3, #4]

	PWMChannelConfig(htimx, channel , SERVO_GPIOx,SERVO_GPIO_Pin);
 8009d68:	887b      	ldrh	r3, [r7, #2]
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d6e:	68b8      	ldr	r0, [r7, #8]
 8009d70:	f7f7 fca6 	bl	80016c0 <PWMChannelConfig>

	servo->currentPulse = 0;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2200      	movs	r2, #0
 8009d78:	621a      	str	r2, [r3, #32]
}
 8009d7a:	bf00      	nop
 8009d7c:	3728      	adds	r7, #40	; 0x28
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	20005f34 	.word	0x20005f34
 8009d88:	40010000 	.word	0x40010000
 8009d8c:	20006038 	.word	0x20006038
 8009d90:	20005ce8 	.word	0x20005ce8
 8009d94:	40000400 	.word	0x40000400
 8009d98:	20005b24 	.word	0x20005b24
 8009d9c:	40000800 	.word	0x40000800
 8009da0:	20005ca8 	.word	0x20005ca8
 8009da4:	40000c00 	.word	0x40000c00
 8009da8:	20005ae4 	.word	0x20005ae4
 8009dac:	40010400 	.word	0x40010400
 8009db0:	20005f74 	.word	0x20005f74
 8009db4:	40014000 	.word	0x40014000
 8009db8:	20005c04 	.word	0x20005c04
 8009dbc:	40014400 	.word	0x40014400
 8009dc0:	20005e4c 	.word	0x20005e4c
 8009dc4:	40014800 	.word	0x40014800
 8009dc8:	20006158 	.word	0x20006158
 8009dcc:	40001800 	.word	0x40001800
 8009dd0:	20005dcc 	.word	0x20005dcc
 8009dd4:	40001c00 	.word	0x40001c00
 8009dd8:	20006118 	.word	0x20006118
 8009ddc:	40002000 	.word	0x40002000

08009de0 <ServoSetPulse>:
 * 						  pulse		output compare pulse to be set
 * Function Return		: None
 * Function Example		: ServoSetPulse(&SERVO1, 1000);
 */

void ServoSetPulse(SERVO_t* servo, uint32_t pulse){
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
	if(pulse < servo->SERVO_pulseMinLimit){
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	695b      	ldr	r3, [r3, #20]
 8009dee:	683a      	ldr	r2, [r7, #0]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d204      	bcs.n	8009dfe <ServoSetPulse+0x1e>
		servo->currentPulse = servo->SERVO_pulseMinLimit;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	695a      	ldr	r2, [r3, #20]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	621a      	str	r2, [r3, #32]
 8009dfc:	e00c      	b.n	8009e18 <ServoSetPulse+0x38>
	}else if(pulse > servo->SERVO_pulseMaxLimit){
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	683a      	ldr	r2, [r7, #0]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d904      	bls.n	8009e12 <ServoSetPulse+0x32>
		servo->currentPulse = servo->SERVO_pulseMaxLimit;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	699a      	ldr	r2, [r3, #24]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	621a      	str	r2, [r3, #32]
 8009e10:	e002      	b.n	8009e18 <ServoSetPulse+0x38>
	}else{
		servo->currentPulse = pulse;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	621a      	str	r2, [r3, #32]
	}
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d106      	bne.n	8009e2e <ServoSetPulse+0x4e>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	6a12      	ldr	r2, [r2, #32]
 8009e2a:	635a      	str	r2, [r3, #52]	; 0x34

}
 8009e2c:	e01b      	b.n	8009e66 <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	2b04      	cmp	r3, #4
 8009e34:	d106      	bne.n	8009e44 <ServoSetPulse+0x64>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6a1b      	ldr	r3, [r3, #32]
 8009e40:	6393      	str	r3, [r2, #56]	; 0x38
}
 8009e42:	e010      	b.n	8009e66 <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	2b08      	cmp	r3, #8
 8009e4a:	d106      	bne.n	8009e5a <ServoSetPulse+0x7a>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a1b      	ldr	r3, [r3, #32]
 8009e56:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8009e58:	e005      	b.n	8009e66 <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6a1b      	ldr	r3, [r3, #32]
 8009e64:	6413      	str	r3, [r2, #64]	; 0x40
}
 8009e66:	bf00      	nop
 8009e68:	370c      	adds	r7, #12
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr

08009e72 <ServoInitPulseLimit>:
	servo->TIMx_Compare = servo->SERVO_pulse0degree + (servo->SERVO_pulse1degree)*angle;
	servo->currentPulse = servo->TIMx_Compare;
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->TIMx_Compare);
}

void ServoInitPulseLimit(SERVO_t* servo, uint32_t MinPulse, uint32_t MaxPulse){
 8009e72:	b480      	push	{r7}
 8009e74:	b085      	sub	sp, #20
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	60f8      	str	r0, [r7, #12]
 8009e7a:	60b9      	str	r1, [r7, #8]
 8009e7c:	607a      	str	r2, [r7, #4]
	servo->SERVO_pulseMinLimit = MinPulse;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	615a      	str	r2, [r3, #20]
	servo->SERVO_pulseMaxLimit = MaxPulse;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	619a      	str	r2, [r3, #24]
}
 8009e8a:	bf00      	nop
 8009e8c:	3714      	adds	r7, #20
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr
	...

08009e98 <SPI1_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI1_IRQHandler(void)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi1);
 8009e9c:	4802      	ldr	r0, [pc, #8]	; (8009ea8 <SPI1_IRQHandler+0x10>)
 8009e9e:	f00a ff7b 	bl	8014d98 <HAL_SPI_IRQHandler>
}
 8009ea2:	bf00      	nop
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	20009c48 	.word	0x20009c48

08009eac <SPI2_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI2_IRQHandler(void)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi2);
 8009eb0:	4802      	ldr	r0, [pc, #8]	; (8009ebc <SPI2_IRQHandler+0x10>)
 8009eb2:	f00a ff71 	bl	8014d98 <HAL_SPI_IRQHandler>
}
 8009eb6:	bf00      	nop
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	200068b4 	.word	0x200068b4

08009ec0 <SPI3_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI3_IRQHandler(void)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi3);
 8009ec4:	4802      	ldr	r0, [pc, #8]	; (8009ed0 <SPI3_IRQHandler+0x10>)
 8009ec6:	f00a ff67 	bl	8014d98 <HAL_SPI_IRQHandler>
}
 8009eca:	bf00      	nop
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	2000777c 	.word	0x2000777c

08009ed4 <Initialize>:
uint8_t mailbox = 0, buf2_flag = 0, buf2_flagC2 = 0;

/************************************************/
/*		 	 	Functions		       		  	*/
/************************************************/
void Initialize(){
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af04      	add	r7, sp, #16
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8009eda:	f006 fb87 	bl	80105ec <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8009ede:	f7f8 ff7f 	bl	8002de0 <SystemClock_Config>

	/* Initialize all configured peripherals */
	GPIOPinsInit (LED1_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	9300      	str	r3, [sp, #0]
 8009ee6:	2302      	movs	r3, #2
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009eee:	48c6      	ldr	r0, [pc, #792]	; (800a208 <Initialize+0x334>)
 8009ef0:	f7f7 fa06 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (LED2_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	2302      	movs	r3, #2
 8009efa:	2201      	movs	r2, #1
 8009efc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009f00:	48c1      	ldr	r0, [pc, #772]	; (800a208 <Initialize+0x334>)
 8009f02:	f7f7 f9fd 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (LED3_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009f06:	2301      	movs	r3, #1
 8009f08:	9300      	str	r3, [sp, #0]
 8009f0a:	2302      	movs	r3, #2
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009f12:	48bd      	ldr	r0, [pc, #756]	; (800a208 <Initialize+0x334>)
 8009f14:	f7f7 f9f4 	bl	8001300 <GPIOPinsInit>

	GPIOPinsInit (PB1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009f18:	2301      	movs	r3, #1
 8009f1a:	9300      	str	r3, [sp, #0]
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	2200      	movs	r2, #0
 8009f20:	2180      	movs	r1, #128	; 0x80
 8009f22:	48ba      	ldr	r0, [pc, #744]	; (800a20c <Initialize+0x338>)
 8009f24:	f7f7 f9ec 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (PB2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009f28:	2301      	movs	r3, #1
 8009f2a:	9300      	str	r3, [sp, #0]
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	2200      	movs	r2, #0
 8009f30:	2101      	movs	r1, #1
 8009f32:	48b7      	ldr	r0, [pc, #732]	; (800a210 <Initialize+0x33c>)
 8009f34:	f7f7 f9e4 	bl	8001300 <GPIOPinsInit>

	/*Normal IOs*/
	GPIOPinsInit (IP1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f38:	2301      	movs	r3, #1
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009f44:	48b2      	ldr	r0, [pc, #712]	; (800a210 <Initialize+0x33c>)
 8009f46:	f7f7 f9db 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	9300      	str	r3, [sp, #0]
 8009f4e:	2301      	movs	r3, #1
 8009f50:	2200      	movs	r2, #0
 8009f52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009f56:	48ae      	ldr	r0, [pc, #696]	; (800a210 <Initialize+0x33c>)
 8009f58:	f7f7 f9d2 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	9300      	str	r3, [sp, #0]
 8009f60:	2301      	movs	r3, #1
 8009f62:	2200      	movs	r2, #0
 8009f64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009f68:	48a9      	ldr	r0, [pc, #676]	; (800a210 <Initialize+0x33c>)
 8009f6a:	f7f7 f9c9 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f6e:	2301      	movs	r3, #1
 8009f70:	9300      	str	r3, [sp, #0]
 8009f72:	2301      	movs	r3, #1
 8009f74:	2200      	movs	r2, #0
 8009f76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009f7a:	48a5      	ldr	r0, [pc, #660]	; (800a210 <Initialize+0x33c>)
 8009f7c:	f7f7 f9c0 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f80:	2301      	movs	r3, #1
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	2301      	movs	r3, #1
 8009f86:	2200      	movs	r2, #0
 8009f88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009f8c:	489f      	ldr	r0, [pc, #636]	; (800a20c <Initialize+0x338>)
 8009f8e:	f7f7 f9b7 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f92:	2301      	movs	r3, #1
 8009f94:	9300      	str	r3, [sp, #0]
 8009f96:	2301      	movs	r3, #1
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009f9e:	489b      	ldr	r0, [pc, #620]	; (800a20c <Initialize+0x338>)
 8009fa0:	f7f7 f9ae 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP7_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	9300      	str	r3, [sp, #0]
 8009fa8:	2301      	movs	r3, #1
 8009faa:	2200      	movs	r2, #0
 8009fac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009fb0:	4898      	ldr	r0, [pc, #608]	; (800a214 <Initialize+0x340>)
 8009fb2:	f7f7 f9a5 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP8_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	2301      	movs	r3, #1
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009fc2:	4894      	ldr	r0, [pc, #592]	; (800a214 <Initialize+0x340>)
 8009fc4:	f7f7 f99c 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP9_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009fc8:	2301      	movs	r3, #1
 8009fca:	9300      	str	r3, [sp, #0]
 8009fcc:	2301      	movs	r3, #1
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009fd4:	488c      	ldr	r0, [pc, #560]	; (800a208 <Initialize+0x334>)
 8009fd6:	f7f7 f993 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP10_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009fda:	2301      	movs	r3, #1
 8009fdc:	9300      	str	r3, [sp, #0]
 8009fde:	2301      	movs	r3, #1
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009fe6:	488c      	ldr	r0, [pc, #560]	; (800a218 <Initialize+0x344>)
 8009fe8:	f7f7 f98a 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP11_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009fec:	2301      	movs	r3, #1
 8009fee:	9300      	str	r3, [sp, #0]
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	2108      	movs	r1, #8
 8009ff6:	4887      	ldr	r0, [pc, #540]	; (800a214 <Initialize+0x340>)
 8009ff8:	f7f7 f982 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP12_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	2301      	movs	r3, #1
 800a002:	2200      	movs	r2, #0
 800a004:	2110      	movs	r1, #16
 800a006:	4883      	ldr	r0, [pc, #524]	; (800a214 <Initialize+0x340>)
 800a008:	f7f7 f97a 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP13_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a00c:	2301      	movs	r3, #1
 800a00e:	9300      	str	r3, [sp, #0]
 800a010:	2301      	movs	r3, #1
 800a012:	2200      	movs	r2, #0
 800a014:	2180      	movs	r1, #128	; 0x80
 800a016:	487f      	ldr	r0, [pc, #508]	; (800a214 <Initialize+0x340>)
 800a018:	f7f7 f972 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP14_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a01c:	2301      	movs	r3, #1
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	2301      	movs	r3, #1
 800a022:	2200      	movs	r2, #0
 800a024:	2120      	movs	r1, #32
 800a026:	4879      	ldr	r0, [pc, #484]	; (800a20c <Initialize+0x338>)
 800a028:	f7f7 f96a 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP15_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a02c:	2301      	movs	r3, #1
 800a02e:	9300      	str	r3, [sp, #0]
 800a030:	2301      	movs	r3, #1
 800a032:	2200      	movs	r2, #0
 800a034:	2140      	movs	r1, #64	; 0x40
 800a036:	4875      	ldr	r0, [pc, #468]	; (800a20c <Initialize+0x338>)
 800a038:	f7f7 f962 	bl	8001300 <GPIOPinsInit>

	GPIOPinsInit (IP16_Analog1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a03c:	2301      	movs	r3, #1
 800a03e:	9300      	str	r3, [sp, #0]
 800a040:	2301      	movs	r3, #1
 800a042:	2200      	movs	r2, #0
 800a044:	2101      	movs	r1, #1
 800a046:	4870      	ldr	r0, [pc, #448]	; (800a208 <Initialize+0x334>)
 800a048:	f7f7 f95a 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP17_Analog2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a04c:	2301      	movs	r3, #1
 800a04e:	9300      	str	r3, [sp, #0]
 800a050:	2301      	movs	r3, #1
 800a052:	2200      	movs	r2, #0
 800a054:	2102      	movs	r1, #2
 800a056:	486c      	ldr	r0, [pc, #432]	; (800a208 <Initialize+0x334>)
 800a058:	f7f7 f952 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP18_Analog3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a05c:	2301      	movs	r3, #1
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	2301      	movs	r3, #1
 800a062:	2200      	movs	r2, #0
 800a064:	2104      	movs	r1, #4
 800a066:	4868      	ldr	r0, [pc, #416]	; (800a208 <Initialize+0x334>)
 800a068:	f7f7 f94a 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP19_Analog4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a06c:	2301      	movs	r3, #1
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	2301      	movs	r3, #1
 800a072:	2200      	movs	r2, #0
 800a074:	2108      	movs	r1, #8
 800a076:	4864      	ldr	r0, [pc, #400]	; (800a208 <Initialize+0x334>)
 800a078:	f7f7 f942 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP20_Analog5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a07c:	2301      	movs	r3, #1
 800a07e:	9300      	str	r3, [sp, #0]
 800a080:	2301      	movs	r3, #1
 800a082:	2200      	movs	r2, #0
 800a084:	2110      	movs	r1, #16
 800a086:	4860      	ldr	r0, [pc, #384]	; (800a208 <Initialize+0x334>)
 800a088:	f7f7 f93a 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP21_Analog6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a08c:	2301      	movs	r3, #1
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	2301      	movs	r3, #1
 800a092:	2200      	movs	r2, #0
 800a094:	2120      	movs	r1, #32
 800a096:	485c      	ldr	r0, [pc, #368]	; (800a208 <Initialize+0x334>)
 800a098:	f7f7 f932 	bl	8001300 <GPIOPinsInit>

	//Unused peripheral pins can be used as GPIO Input or Output
//	GPIOPinsInit (UART3_Rx, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);

//	MUXInit(&MUX, MUX1_INPUT_PIN, MUX1_S0_PIN, MUX1_S1_PIN, MUX1_S2_PIN);
	SHIFTREGInit (&SR, CASCADE_1, SR_SCK_PIN, SR_RCK_PIN, SR_SI_PIN);
 800a09c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0a0:	9303      	str	r3, [sp, #12]
 800a0a2:	4b5b      	ldr	r3, [pc, #364]	; (800a210 <Initialize+0x33c>)
 800a0a4:	9302      	str	r3, [sp, #8]
 800a0a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0aa:	9301      	str	r3, [sp, #4]
 800a0ac:	4b58      	ldr	r3, [pc, #352]	; (800a210 <Initialize+0x33c>)
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	2380      	movs	r3, #128	; 0x80
 800a0b2:	4a57      	ldr	r2, [pc, #348]	; (800a210 <Initialize+0x33c>)
 800a0b4:	2101      	movs	r1, #1
 800a0b6:	4859      	ldr	r0, [pc, #356]	; (800a21c <Initialize+0x348>)
 800a0b8:	f7f7 fe76 	bl	8001da8 <SHIFTREGInit>

	//https://stackoverflow.com/questions/50243996/what-are-valid-values-of-hal-nvic-setpriority-when-using-stm32-and-freertos
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a0bc:	2003      	movs	r0, #3
 800a0be:	f007 fa54 	bl	801156a <HAL_NVIC_SetPriorityGrouping>


	/*************** Set Interrupt Priorities in BIOS/priorities.h ***************/

	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 800a0c2:	4b57      	ldr	r3, [pc, #348]	; (800a220 <Initialize+0x34c>)
 800a0c4:	2208      	movs	r2, #8
 800a0c6:	4957      	ldr	r1, [pc, #348]	; (800a224 <Initialize+0x350>)
 800a0c8:	4857      	ldr	r0, [pc, #348]	; (800a228 <Initialize+0x354>)
 800a0ca:	f7f9 fdcb 	bl	8003c64 <I2CX_DMA_RX_Init>
	I2CxInit (&hi2c2,main_board_1, CLOCK_SPEED_100KHz,ENABLE);
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	4a56      	ldr	r2, [pc, #344]	; (800a22c <Initialize+0x358>)
 800a0d2:	2108      	movs	r1, #8
 800a0d4:	4856      	ldr	r0, [pc, #344]	; (800a230 <Initialize+0x35c>)
 800a0d6:	f7f9 fd13 	bl	8003b00 <I2CxInit>

	//Servo Driver - recommended to use 100KHz I2C as 400KHz hang frequently
//	I2CxInit (&hi2c3,main_board_1, CLOCK_SPEED_100KHz,DISABLE);
//	ServoDriverInit(&srv_drv,&hi2c3,0x40);

	UARTx_DMA_Rx_Init(&huart2, &hdma_usart2_rx, 115200);//Bluebee Tuning
 800a0da:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a0de:	4955      	ldr	r1, [pc, #340]	; (800a234 <Initialize+0x360>)
 800a0e0:	4855      	ldr	r0, [pc, #340]	; (800a238 <Initialize+0x364>)
 800a0e2:	f7f9 f98b 	bl	80033fc <UARTx_DMA_Rx_Init>
//	UARTx_DMA_Rx_Init(&huart4, &hdma_uart4_rx, 115200); //Jetson
	UARTInit(&huart3, 115200, ENABLE); // ROS UART
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800a0ec:	4853      	ldr	r0, [pc, #332]	; (800a23c <Initialize+0x368>)
 800a0ee:	f7f9 f87d 	bl	80031ec <UARTInit>
	UARTInit(&huart4, 115200, ENABLE); // ROS UART
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800a0f8:	4851      	ldr	r0, [pc, #324]	; (800a240 <Initialize+0x36c>)
 800a0fa:	f7f9 f877 	bl	80031ec <UARTInit>
	UARTInit(&huart5, 115200, ENABLE);
 800a0fe:	2201      	movs	r2, #1
 800a100:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800a104:	484f      	ldr	r0, [pc, #316]	; (800a244 <Initialize+0x370>)
 800a106:	f7f9 f871 	bl	80031ec <UARTInit>

	QEIInit(&htim1);
 800a10a:	484f      	ldr	r0, [pc, #316]	; (800a248 <Initialize+0x374>)
 800a10c:	f7f7 fc64 	bl	80019d8 <QEIInit>
	QEIInit(&htim4);
 800a110:	484e      	ldr	r0, [pc, #312]	; (800a24c <Initialize+0x378>)
 800a112:	f7f7 fc61 	bl	80019d8 <QEIInit>
	QEIInit(&htim8);
 800a116:	484e      	ldr	r0, [pc, #312]	; (800a250 <Initialize+0x37c>)
 800a118:	f7f7 fc5e 	bl	80019d8 <QEIInit>

	CANxInit(&hcan1,4,CAN_FILTER_FIFO0,0,0,0,CAN_500KHz);
 800a11c:	2300      	movs	r3, #0
 800a11e:	9302      	str	r3, [sp, #8]
 800a120:	2300      	movs	r3, #0
 800a122:	9301      	str	r3, [sp, #4]
 800a124:	2300      	movs	r3, #0
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	2300      	movs	r3, #0
 800a12a:	2200      	movs	r2, #0
 800a12c:	2104      	movs	r1, #4
 800a12e:	4849      	ldr	r0, [pc, #292]	; (800a254 <Initialize+0x380>)
 800a130:	f7f9 fa70 	bl	8003614 <CANxInit>
	CANxInit(&hcan2,4,CAN_FILTER_FIFO1,0,0,14,CAN_500KHz);
 800a134:	2300      	movs	r3, #0
 800a136:	9302      	str	r3, [sp, #8]
 800a138:	230e      	movs	r3, #14
 800a13a:	9301      	str	r3, [sp, #4]
 800a13c:	2300      	movs	r3, #0
 800a13e:	9300      	str	r3, [sp, #0]
 800a140:	2300      	movs	r3, #0
 800a142:	2201      	movs	r2, #1
 800a144:	2104      	movs	r1, #4
 800a146:	4844      	ldr	r0, [pc, #272]	; (800a258 <Initialize+0x384>)
 800a148:	f7f9 fa64 	bl	8003614 <CANxInit>

	PWMTimeBaseInit(&htim3, 19999, 83);
 800a14c:	2253      	movs	r2, #83	; 0x53
 800a14e:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800a152:	4842      	ldr	r0, [pc, #264]	; (800a25c <Initialize+0x388>)
 800a154:	f7f7 f9ce 	bl	80014f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 800a158:	2301      	movs	r3, #1
 800a15a:	4a2c      	ldr	r2, [pc, #176]	; (800a20c <Initialize+0x338>)
 800a15c:	2108      	movs	r1, #8
 800a15e:	483f      	ldr	r0, [pc, #252]	; (800a25c <Initialize+0x388>)
 800a160:	f7f7 faae 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim3, TIM_CHANNEL_4 , TIM3_CHANNEL4_PIN);
 800a164:	2302      	movs	r3, #2
 800a166:	4a29      	ldr	r2, [pc, #164]	; (800a20c <Initialize+0x338>)
 800a168:	210c      	movs	r1, #12
 800a16a:	483c      	ldr	r0, [pc, #240]	; (800a25c <Initialize+0x388>)
 800a16c:	f7f7 faa8 	bl	80016c0 <PWMChannelConfig>

	PWMTimeBaseInit(&htim5, 19999, 83);
 800a170:	2253      	movs	r2, #83	; 0x53
 800a172:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800a176:	483a      	ldr	r0, [pc, #232]	; (800a260 <Initialize+0x38c>)
 800a178:	f7f7 f9bc 	bl	80014f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim5, TIM_CHANNEL_1, TIM5_CHANNEL1_PIN);
 800a17c:	2301      	movs	r3, #1
 800a17e:	4a26      	ldr	r2, [pc, #152]	; (800a218 <Initialize+0x344>)
 800a180:	2100      	movs	r1, #0
 800a182:	4837      	ldr	r0, [pc, #220]	; (800a260 <Initialize+0x38c>)
 800a184:	f7f7 fa9c 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_2, TIM5_CHANNEL2_PIN);
 800a188:	2302      	movs	r3, #2
 800a18a:	4a23      	ldr	r2, [pc, #140]	; (800a218 <Initialize+0x344>)
 800a18c:	2104      	movs	r1, #4
 800a18e:	4834      	ldr	r0, [pc, #208]	; (800a260 <Initialize+0x38c>)
 800a190:	f7f7 fa96 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_3, TIM5_CHANNEL3_PIN);
 800a194:	2304      	movs	r3, #4
 800a196:	4a20      	ldr	r2, [pc, #128]	; (800a218 <Initialize+0x344>)
 800a198:	2108      	movs	r1, #8
 800a19a:	4831      	ldr	r0, [pc, #196]	; (800a260 <Initialize+0x38c>)
 800a19c:	f7f7 fa90 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_4, TIM5_CHANNEL4_PIN);
 800a1a0:	2308      	movs	r3, #8
 800a1a2:	4a1d      	ldr	r2, [pc, #116]	; (800a218 <Initialize+0x344>)
 800a1a4:	210c      	movs	r1, #12
 800a1a6:	482e      	ldr	r0, [pc, #184]	; (800a260 <Initialize+0x38c>)
 800a1a8:	f7f7 fa8a 	bl	80016c0 <PWMChannelConfig>

	PWMTimeBaseInit(&htim9, 19999, 167);
 800a1ac:	22a7      	movs	r2, #167	; 0xa7
 800a1ae:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800a1b2:	482c      	ldr	r0, [pc, #176]	; (800a264 <Initialize+0x390>)
 800a1b4:	f7f7 f99e 	bl	80014f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim9, TIM_CHANNEL_1, TIM9_CHANNEL1_PIN);
 800a1b8:	2320      	movs	r3, #32
 800a1ba:	4a15      	ldr	r2, [pc, #84]	; (800a210 <Initialize+0x33c>)
 800a1bc:	2100      	movs	r1, #0
 800a1be:	4829      	ldr	r0, [pc, #164]	; (800a264 <Initialize+0x390>)
 800a1c0:	f7f7 fa7e 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim9, TIM_CHANNEL_2, TIM9_CHANNEL2_PIN);
 800a1c4:	2340      	movs	r3, #64	; 0x40
 800a1c6:	4a12      	ldr	r2, [pc, #72]	; (800a210 <Initialize+0x33c>)
 800a1c8:	2104      	movs	r1, #4
 800a1ca:	4826      	ldr	r0, [pc, #152]	; (800a264 <Initialize+0x390>)
 800a1cc:	f7f7 fa78 	bl	80016c0 <PWMChannelConfig>


	BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 800a1d0:	2380      	movs	r3, #128	; 0x80
 800a1d2:	9302      	str	r3, [sp, #8]
 800a1d4:	2340      	movs	r3, #64	; 0x40
 800a1d6:	9301      	str	r3, [sp, #4]
 800a1d8:	4b23      	ldr	r3, [pc, #140]	; (800a268 <Initialize+0x394>)
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	2300      	movs	r3, #0
 800a1de:	220c      	movs	r2, #12
 800a1e0:	491e      	ldr	r1, [pc, #120]	; (800a25c <Initialize+0x388>)
 800a1e2:	4822      	ldr	r0, [pc, #136]	; (800a26c <Initialize+0x398>)
 800a1e4:	f7f6 ff48 	bl	8001078 <BDCInit>
	BDCInit(&BDC2, &htim3, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[1]), Bit4, Bit5);
 800a1e8:	2320      	movs	r3, #32
 800a1ea:	9302      	str	r3, [sp, #8]
 800a1ec:	2310      	movs	r3, #16
 800a1ee:	9301      	str	r3, [sp, #4]
 800a1f0:	4b1d      	ldr	r3, [pc, #116]	; (800a268 <Initialize+0x394>)
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	2208      	movs	r2, #8
 800a1f8:	4918      	ldr	r1, [pc, #96]	; (800a25c <Initialize+0x388>)
 800a1fa:	481d      	ldr	r0, [pc, #116]	; (800a270 <Initialize+0x39c>)
 800a1fc:	f7f6 ff3c 	bl	8001078 <BDCInit>
	BDCInit(&BDC3, &htim9, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[1]), Bit2, Bit3);
 800a200:	2308      	movs	r3, #8
 800a202:	9302      	str	r3, [sp, #8]
 800a204:	2304      	movs	r3, #4
 800a206:	e035      	b.n	800a274 <Initialize+0x3a0>
 800a208:	40020800 	.word	0x40020800
 800a20c:	40020400 	.word	0x40020400
 800a210:	40021000 	.word	0x40021000
 800a214:	40020c00 	.word	0x40020c00
 800a218:	40020000 	.word	0x40020000
 800a21c:	2000959c 	.word	0x2000959c
 800a220:	00061a80 	.word	0x00061a80
 800a224:	20009fac 	.word	0x20009fac
 800a228:	20006b88 	.word	0x20006b88
 800a22c:	000186a0 	.word	0x000186a0
 800a230:	20006be4 	.word	0x20006be4
 800a234:	20005a80 	.word	0x20005a80
 800a238:	20006078 	.word	0x20006078
 800a23c:	20005bc4 	.word	0x20005bc4
 800a240:	20005ff8 	.word	0x20005ff8
 800a244:	20005d2c 	.word	0x20005d2c
 800a248:	20005f34 	.word	0x20005f34
 800a24c:	20005b24 	.word	0x20005b24
 800a250:	20005ae4 	.word	0x20005ae4
 800a254:	20009f30 	.word	0x20009f30
 800a258:	20009000 	.word	0x20009000
 800a25c:	20005ce8 	.word	0x20005ce8
 800a260:	20005ca8 	.word	0x20005ca8
 800a264:	20005f74 	.word	0x20005f74
 800a268:	200095b8 	.word	0x200095b8
 800a26c:	2000a534 	.word	0x2000a534
 800a270:	2000770c 	.word	0x2000770c
 800a274:	9301      	str	r3, [sp, #4]
 800a276:	4b23      	ldr	r3, [pc, #140]	; (800a304 <Initialize+0x430>)
 800a278:	9300      	str	r3, [sp, #0]
 800a27a:	2300      	movs	r3, #0
 800a27c:	2200      	movs	r2, #0
 800a27e:	4922      	ldr	r1, [pc, #136]	; (800a308 <Initialize+0x434>)
 800a280:	4822      	ldr	r0, [pc, #136]	; (800a30c <Initialize+0x438>)
 800a282:	f7f6 fef9 	bl	8001078 <BDCInit>
	BDCInit(&BDC4, &htim9, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[1]), Bit0, Bit1);
 800a286:	2302      	movs	r3, #2
 800a288:	9302      	str	r3, [sp, #8]
 800a28a:	2301      	movs	r3, #1
 800a28c:	9301      	str	r3, [sp, #4]
 800a28e:	4b1d      	ldr	r3, [pc, #116]	; (800a304 <Initialize+0x430>)
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	2300      	movs	r3, #0
 800a294:	2204      	movs	r2, #4
 800a296:	491c      	ldr	r1, [pc, #112]	; (800a308 <Initialize+0x434>)
 800a298:	481d      	ldr	r0, [pc, #116]	; (800a310 <Initialize+0x43c>)
 800a29a:	f7f6 feed 	bl	8001078 <BDCInit>
	BDCInit(&BDC5, &htim5, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[0]), Bit6, Bit7);
 800a29e:	2380      	movs	r3, #128	; 0x80
 800a2a0:	9302      	str	r3, [sp, #8]
 800a2a2:	2340      	movs	r3, #64	; 0x40
 800a2a4:	9301      	str	r3, [sp, #4]
 800a2a6:	4b1b      	ldr	r3, [pc, #108]	; (800a314 <Initialize+0x440>)
 800a2a8:	9300      	str	r3, [sp, #0]
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	220c      	movs	r2, #12
 800a2ae:	491a      	ldr	r1, [pc, #104]	; (800a318 <Initialize+0x444>)
 800a2b0:	481a      	ldr	r0, [pc, #104]	; (800a31c <Initialize+0x448>)
 800a2b2:	f7f6 fee1 	bl	8001078 <BDCInit>
	BDCInit(&BDC6, &htim5, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[0]), Bit4, Bit5);
 800a2b6:	2320      	movs	r3, #32
 800a2b8:	9302      	str	r3, [sp, #8]
 800a2ba:	2310      	movs	r3, #16
 800a2bc:	9301      	str	r3, [sp, #4]
 800a2be:	4b15      	ldr	r3, [pc, #84]	; (800a314 <Initialize+0x440>)
 800a2c0:	9300      	str	r3, [sp, #0]
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	2208      	movs	r2, #8
 800a2c6:	4914      	ldr	r1, [pc, #80]	; (800a318 <Initialize+0x444>)
 800a2c8:	4815      	ldr	r0, [pc, #84]	; (800a320 <Initialize+0x44c>)
 800a2ca:	f7f6 fed5 	bl	8001078 <BDCInit>
	BDCInit(&BDC7, &htim5, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[0]), Bit2, Bit3);
 800a2ce:	2308      	movs	r3, #8
 800a2d0:	9302      	str	r3, [sp, #8]
 800a2d2:	2304      	movs	r3, #4
 800a2d4:	9301      	str	r3, [sp, #4]
 800a2d6:	4b0f      	ldr	r3, [pc, #60]	; (800a314 <Initialize+0x440>)
 800a2d8:	9300      	str	r3, [sp, #0]
 800a2da:	2300      	movs	r3, #0
 800a2dc:	2204      	movs	r2, #4
 800a2de:	490e      	ldr	r1, [pc, #56]	; (800a318 <Initialize+0x444>)
 800a2e0:	4810      	ldr	r0, [pc, #64]	; (800a324 <Initialize+0x450>)
 800a2e2:	f7f6 fec9 	bl	8001078 <BDCInit>
	BDCInit(&BDC8, &htim5, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[0]), Bit0, Bit1);
 800a2e6:	2302      	movs	r3, #2
 800a2e8:	9302      	str	r3, [sp, #8]
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	9301      	str	r3, [sp, #4]
 800a2ee:	4b09      	ldr	r3, [pc, #36]	; (800a314 <Initialize+0x440>)
 800a2f0:	9300      	str	r3, [sp, #0]
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	4908      	ldr	r1, [pc, #32]	; (800a318 <Initialize+0x444>)
 800a2f8:	480b      	ldr	r0, [pc, #44]	; (800a328 <Initialize+0x454>)
 800a2fa:	f7f6 febd 	bl	8001078 <BDCInit>

//	VESCInit(31920, 7, 0.0037, VESC1, &vesc1);

//	SPIx_DMA_TX_Init(&hspi1, &hdma_spi1_tx, SPI1_NSS_PIN, SPI_MODE_MASTER);
//	GPIOPinsInit (SPI1_MISO_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
}
 800a2fe:	bf00      	nop
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	200095b8 	.word	0x200095b8
 800a308:	20005f74 	.word	0x20005f74
 800a30c:	20006c44 	.word	0x20006c44
 800a310:	20009674 	.word	0x20009674
 800a314:	200095b4 	.word	0x200095b4
 800a318:	20005ca8 	.word	0x20005ca8
 800a31c:	2000a3b0 	.word	0x2000a3b0
 800a320:	200096f4 	.word	0x200096f4
 800a324:	20009718 	.word	0x20009718
 800a328:	20007324 	.word	0x20007324

0800a32c <CAN1_RX0_IRQHandler>:



void CAN1_RX0_IRQHandler()
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 800a330:	4802      	ldr	r0, [pc, #8]	; (800a33c <CAN1_RX0_IRQHandler+0x10>)
 800a332:	f006 fe05 	bl	8010f40 <HAL_CAN_IRQHandler>

}
 800a336:	bf00      	nop
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	20009f30 	.word	0x20009f30

0800a340 <CAN2_RX1_IRQHandler>:

void CAN2_RX1_IRQHandler()
{
 800a340:	b580      	push	{r7, lr}
 800a342:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan2);
 800a344:	4802      	ldr	r0, [pc, #8]	; (800a350 <CAN2_RX1_IRQHandler+0x10>)
 800a346:	f006 fdfb 	bl	8010f40 <HAL_CAN_IRQHandler>

}
 800a34a:	bf00      	nop
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	20009000 	.word	0x20009000

0800a354 <CAN_PROCESS>:


void CAN_PROCESS(PACKET_t packet_src){
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	4603      	mov	r3, r0
 800a35c:	71fb      	strb	r3, [r7, #7]

	switch(packet_src){
 800a35e:	79fb      	ldrb	r3, [r7, #7]
 800a360:	2b02      	cmp	r3, #2
 800a362:	d008      	beq.n	800a376 <CAN_PROCESS+0x22>
 800a364:	2b02      	cmp	r3, #2
 800a366:	dc36      	bgt.n	800a3d6 <CAN_PROCESS+0x82>
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d007      	beq.n	800a37c <CAN_PROCESS+0x28>
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d132      	bne.n	800a3d6 <CAN_PROCESS+0x82>

	case VESC_PACKET:
		decode_VESC();
 800a370:	f003 f8ec 	bl	800d54c <decode_VESC>
		break;
 800a374:	e02f      	b.n	800a3d6 <CAN_PROCESS+0x82>

	case ODRIVE_PACKET:
		OdriveCAN_Handler();
 800a376:	f7fa fe89 	bl	800508c <OdriveCAN_Handler>
		break;
 800a37a:	e02c      	b.n	800a3d6 <CAN_PROCESS+0x82>

	case RNS_PACKET:

		if(insData_receive[0] == 1){
 800a37c:	4b18      	ldr	r3, [pc, #96]	; (800a3e0 <CAN_PROCESS+0x8c>)
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	2b01      	cmp	r3, #1
 800a382:	d107      	bne.n	800a394 <CAN_PROCESS+0x40>
			rns.RNS_data.common_instruction = insData_receive[1];
 800a384:	4b16      	ldr	r3, [pc, #88]	; (800a3e0 <CAN_PROCESS+0x8c>)
 800a386:	785a      	ldrb	r2, [r3, #1]
 800a388:	4b16      	ldr	r3, [pc, #88]	; (800a3e4 <CAN_PROCESS+0x90>)
 800a38a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			insData_receive[0]=2;
 800a38e:	4b14      	ldr	r3, [pc, #80]	; (800a3e0 <CAN_PROCESS+0x8c>)
 800a390:	2202      	movs	r2, #2
 800a392:	701a      	strb	r2, [r3, #0]
		}
		if(insData_receive[0] == 17){
 800a394:	4b12      	ldr	r3, [pc, #72]	; (800a3e0 <CAN_PROCESS+0x8c>)
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	2b11      	cmp	r3, #17
 800a39a:	d11b      	bne.n	800a3d4 <CAN_PROCESS+0x80>
			if(buf2_flag == 1){
 800a39c:	4b12      	ldr	r3, [pc, #72]	; (800a3e8 <CAN_PROCESS+0x94>)
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d117      	bne.n	800a3d4 <CAN_PROCESS+0x80>
				rns.RNS_data.common_instruction = insData_receive[1];
 800a3a4:	4b0e      	ldr	r3, [pc, #56]	; (800a3e0 <CAN_PROCESS+0x8c>)
 800a3a6:	785a      	ldrb	r2, [r3, #1]
 800a3a8:	4b0e      	ldr	r3, [pc, #56]	; (800a3e4 <CAN_PROCESS+0x90>)
 800a3aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				rns.RNS_data.common_buffer[0].data = buf1_receive[0].data;
 800a3ae:	4b0f      	ldr	r3, [pc, #60]	; (800a3ec <CAN_PROCESS+0x98>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a0c      	ldr	r2, [pc, #48]	; (800a3e4 <CAN_PROCESS+0x90>)
 800a3b4:	6553      	str	r3, [r2, #84]	; 0x54
				rns.RNS_data.common_buffer[1].data = buf1_receive[1].data;
 800a3b6:	4b0d      	ldr	r3, [pc, #52]	; (800a3ec <CAN_PROCESS+0x98>)
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	4a0a      	ldr	r2, [pc, #40]	; (800a3e4 <CAN_PROCESS+0x90>)
 800a3bc:	6593      	str	r3, [r2, #88]	; 0x58
				rns.RNS_data.common_buffer[2].data = buf2_receive[0].data;
 800a3be:	4b0c      	ldr	r3, [pc, #48]	; (800a3f0 <CAN_PROCESS+0x9c>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a08      	ldr	r2, [pc, #32]	; (800a3e4 <CAN_PROCESS+0x90>)
 800a3c4:	65d3      	str	r3, [r2, #92]	; 0x5c
				rns.RNS_data.common_buffer[3].data = buf2_receive[1].data;
 800a3c6:	4b0a      	ldr	r3, [pc, #40]	; (800a3f0 <CAN_PROCESS+0x9c>)
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	4a06      	ldr	r2, [pc, #24]	; (800a3e4 <CAN_PROCESS+0x90>)
 800a3cc:	6613      	str	r3, [r2, #96]	; 0x60
				insData_receive[0]=3;
 800a3ce:	4b04      	ldr	r3, [pc, #16]	; (800a3e0 <CAN_PROCESS+0x8c>)
 800a3d0:	2203      	movs	r2, #3
 800a3d2:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 800a3d4:	bf00      	nop
	}
}
 800a3d6:	bf00      	nop
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	20006a3c 	.word	0x20006a3c
 800a3e4:	20008f08 	.word	0x20008f08
 800a3e8:	200002d0 	.word	0x200002d0
 800a3ec:	20009c34 	.word	0x20009c34
 800a3f0:	20009d94 	.word	0x20009d94

0800a3f4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a3f4:	b5b0      	push	{r4, r5, r7, lr}
 800a3f6:	b08c      	sub	sp, #48	; 0x30
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
	PACKET_t source;
	uint8_t aData[8];
	uint8_t rns_can = 1;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if(hcan == &hcan1){
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	4aaa      	ldr	r2, [pc, #680]	; (800a6b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 800a406:	4293      	cmp	r3, r2
 800a408:	f040 80b4 	bne.w	800a574 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN1RxMessage, aData);
 800a40c:	f107 030c 	add.w	r3, r7, #12
 800a410:	4aa8      	ldr	r2, [pc, #672]	; (800a6b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a412:	2100      	movs	r1, #0
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f006 fc5b 	bl	8010cd0 <HAL_CAN_GetRxMessage>
		//	sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);

		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 800a41a:	4ba6      	ldr	r3, [pc, #664]	; (800a6b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	2b04      	cmp	r3, #4
 800a420:	d118      	bne.n	800a454 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 800a422:	4aa5      	ldr	r2, [pc, #660]	; (800a6b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a424:	4ba3      	ldr	r3, [pc, #652]	; (800a6b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a426:	4614      	mov	r4, r2
 800a428:	461d      	mov	r5, r3
 800a42a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a42c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a42e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a432:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800a436:	4ba0      	ldr	r3, [pc, #640]	; (800a6b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a438:	331c      	adds	r3, #28
 800a43a:	f107 020c 	add.w	r2, r7, #12
 800a43e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a442:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800a446:	489c      	ldr	r0, [pc, #624]	; (800a6b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a448:	f003 f8ee 	bl	800d628 <set_rx_frames>
			source = VESC_PACKET;
 800a44c:	2301      	movs	r3, #1
 800a44e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a452:	e081      	b.n	800a558 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
		}else{
			source = RNS_PACKET;
 800a454:	2300      	movs	r3, #0
 800a456:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800a45a:	231f      	movs	r3, #31
 800a45c:	837b      	strh	r3, [r7, #26]
			uint16_t command = CAN1RxMessage.StdId & id_mask;
 800a45e:	4b95      	ldr	r3, [pc, #596]	; (800a6b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	b29a      	uxth	r2, r3
 800a464:	8b7b      	ldrh	r3, [r7, #26]
 800a466:	4013      	ands	r3, r2
 800a468:	833b      	strh	r3, [r7, #24]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800a46a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800a46e:	82fb      	strh	r3, [r7, #22]
			uint16_t id = CAN1RxMessage.StdId&command_mask;
 800a470:	4b90      	ldr	r3, [pc, #576]	; (800a6b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	b29a      	uxth	r2, r3
 800a476:	8afb      	ldrh	r3, [r7, #22]
 800a478:	4013      	ands	r3, r2
 800a47a:	82bb      	strh	r3, [r7, #20]
			id=id>>5;
 800a47c:	8abb      	ldrh	r3, [r7, #20]
 800a47e:	095b      	lsrs	r3, r3, #5
 800a480:	82bb      	strh	r3, [r7, #20]

			for( int i=0 ; i < number_of_odrive; i++)
 800a482:	2300      	movs	r3, #0
 800a484:	62bb      	str	r3, [r7, #40]	; 0x28
 800a486:	e016      	b.n	800a4b6 <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
			{
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800a488:	4b8c      	ldr	r3, [pc, #560]	; (800a6bc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	4413      	add	r3, r2
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	8b1b      	ldrh	r3, [r3, #24]
 800a496:	8aba      	ldrh	r2, [r7, #20]
 800a498:	429a      	cmp	r2, r3
 800a49a:	d109      	bne.n	800a4b0 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
 800a49c:	8b3b      	ldrh	r3, [r7, #24]
 800a49e:	2b09      	cmp	r3, #9
 800a4a0:	d002      	beq.n	800a4a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 800a4a2:	8b3b      	ldrh	r3, [r7, #24]
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d103      	bne.n	800a4b0 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
				{
					source = ODRIVE_PACKET;
 800a4a8:	2302      	movs	r3, #2
 800a4aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800a4ae:	e007      	b.n	800a4c0 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>
			for( int i=0 ; i < number_of_odrive; i++)
 800a4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4b6:	4b82      	ldr	r3, [pc, #520]	; (800a6c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	dbe3      	blt.n	800a488 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
				}
			}

			if(source  == ODRIVE_PACKET)
 800a4c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	d112      	bne.n	800a4ee <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
			{
				Odrvmsg.RXmsg = CAN1RxMessage;
 800a4c8:	4a7e      	ldr	r2, [pc, #504]	; (800a6c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 800a4ca:	4b7a      	ldr	r3, [pc, #488]	; (800a6b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a4cc:	4614      	mov	r4, r2
 800a4ce:	461d      	mov	r5, r3
 800a4d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a4d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a4d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN1RxMessage.DLC);
 800a4dc:	4b75      	ldr	r3, [pc, #468]	; (800a6b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a4de:	691a      	ldr	r2, [r3, #16]
 800a4e0:	f107 030c 	add.w	r3, r7, #12
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	4878      	ldr	r0, [pc, #480]	; (800a6c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 800a4e8:	f00f fb9a 	bl	8019c20 <memcpy>
 800a4ec:	e034      	b.n	800a558 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
			}

			else{
				switch(CAN1RxMessage.StdId){
 800a4ee:	4b71      	ldr	r3, [pc, #452]	; (800a6b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	2b16      	cmp	r3, #22
 800a4f4:	d01b      	beq.n	800a52e <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
 800a4f6:	2b16      	cmp	r3, #22
 800a4f8:	d825      	bhi.n	800a546 <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
 800a4fa:	2b14      	cmp	r3, #20
 800a4fc:	d002      	beq.n	800a504 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
 800a4fe:	2b15      	cmp	r3, #21
 800a500:	d00c      	beq.n	800a51c <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
 800a502:	e020      	b.n	800a546 <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
				case RNS_TO_mainboard:
					memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 800a504:	4b6b      	ldr	r3, [pc, #428]	; (800a6b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a506:	691a      	ldr	r2, [r3, #16]
 800a508:	f107 030c 	add.w	r3, r7, #12
 800a50c:	4619      	mov	r1, r3
 800a50e:	486f      	ldr	r0, [pc, #444]	; (800a6cc <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 800a510:	f00f fb86 	bl	8019c20 <memcpy>
					buf2_flag = 0;
 800a514:	4b6e      	ldr	r3, [pc, #440]	; (800a6d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800a516:	2200      	movs	r2, #0
 800a518:	701a      	strb	r2, [r3, #0]

					break;
 800a51a:	e01d      	b.n	800a558 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf1:
					memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 800a51c:	4b65      	ldr	r3, [pc, #404]	; (800a6b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a51e:	691a      	ldr	r2, [r3, #16]
 800a520:	f107 030c 	add.w	r3, r7, #12
 800a524:	4619      	mov	r1, r3
 800a526:	486b      	ldr	r0, [pc, #428]	; (800a6d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e0>)
 800a528:	f00f fb7a 	bl	8019c20 <memcpy>

					break;
 800a52c:	e014      	b.n	800a558 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf2:
					memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 800a52e:	4b61      	ldr	r3, [pc, #388]	; (800a6b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a530:	691a      	ldr	r2, [r3, #16]
 800a532:	f107 030c 	add.w	r3, r7, #12
 800a536:	4619      	mov	r1, r3
 800a538:	4867      	ldr	r0, [pc, #412]	; (800a6d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e4>)
 800a53a:	f00f fb71 	bl	8019c20 <memcpy>
					buf2_flag = 1;
 800a53e:	4b64      	ldr	r3, [pc, #400]	; (800a6d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800a540:	2201      	movs	r2, #1
 800a542:	701a      	strb	r2, [r3, #0]
					break;
 800a544:	e008      	b.n	800a558 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>

				default:
					rns_can = 0;
 800a546:	2300      	movs	r3, #0
 800a548:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800a54c:	f107 030c 	add.w	r3, r7, #12
 800a550:	4618      	mov	r0, r3
 800a552:	f7f9 faa9 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800a556:	bf00      	nop
				}
			}
		}
		if(rns_can)
 800a558:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d004      	beq.n	800a56a <HAL_CAN_RxFifo0MsgPendingCallback+0x176>
			CAN_PROCESS(source);
 800a560:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a564:	4618      	mov	r0, r3
 800a566:	f7ff fef5 	bl	800a354 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800a56a:	2102      	movs	r1, #2
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f006 fcc1 	bl	8010ef4 <HAL_CAN_ActivateNotification>
		}
		if(rns_can)
			CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
	}
}
 800a572:	e0cb      	b.n	800a70c <HAL_CAN_RxFifo0MsgPendingCallback+0x318>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN2RxMessage, aData);
 800a574:	f107 030c 	add.w	r3, r7, #12
 800a578:	4a58      	ldr	r2, [pc, #352]	; (800a6dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a57a:	2100      	movs	r1, #0
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f006 fba7 	bl	8010cd0 <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 800a582:	4b56      	ldr	r3, [pc, #344]	; (800a6dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	2b04      	cmp	r3, #4
 800a588:	d118      	bne.n	800a5bc <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>
			vescmsg.Rxmsg = CAN2RxMessage;
 800a58a:	4a4b      	ldr	r2, [pc, #300]	; (800a6b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a58c:	4b53      	ldr	r3, [pc, #332]	; (800a6dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a58e:	4614      	mov	r4, r2
 800a590:	461d      	mov	r5, r3
 800a592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a596:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a59a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800a59e:	4b46      	ldr	r3, [pc, #280]	; (800a6b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a5a0:	331c      	adds	r3, #28
 800a5a2:	f107 020c 	add.w	r2, r7, #12
 800a5a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a5aa:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800a5ae:	4842      	ldr	r0, [pc, #264]	; (800a6b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a5b0:	f003 f83a 	bl	800d628 <set_rx_frames>
			source = VESC_PACKET;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a5ba:	e09a      	b.n	800a6f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
			source = RNS_PACKET;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800a5c2:	231f      	movs	r3, #31
 800a5c4:	847b      	strh	r3, [r7, #34]	; 0x22
			uint16_t command = CAN2RxMessage.StdId & id_mask;
 800a5c6:	4b45      	ldr	r3, [pc, #276]	; (800a6dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	b29a      	uxth	r2, r3
 800a5cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a5ce:	4013      	ands	r3, r2
 800a5d0:	843b      	strh	r3, [r7, #32]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800a5d2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800a5d6:	83fb      	strh	r3, [r7, #30]
			uint16_t id = CAN2RxMessage.StdId&command_mask;
 800a5d8:	4b40      	ldr	r3, [pc, #256]	; (800a6dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	b29a      	uxth	r2, r3
 800a5de:	8bfb      	ldrh	r3, [r7, #30]
 800a5e0:	4013      	ands	r3, r2
 800a5e2:	83bb      	strh	r3, [r7, #28]
			id=id>>5;
 800a5e4:	8bbb      	ldrh	r3, [r7, #28]
 800a5e6:	095b      	lsrs	r3, r3, #5
 800a5e8:	83bb      	strh	r3, [r7, #28]
			for( int i=0 ; i < number_of_odrive; i++)
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	627b      	str	r3, [r7, #36]	; 0x24
 800a5ee:	e016      	b.n	800a61e <HAL_CAN_RxFifo0MsgPendingCallback+0x22a>
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800a5f0:	4b32      	ldr	r3, [pc, #200]	; (800a6bc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	4413      	add	r3, r2
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	8b1b      	ldrh	r3, [r3, #24]
 800a5fe:	8bba      	ldrh	r2, [r7, #28]
 800a600:	429a      	cmp	r2, r3
 800a602:	d109      	bne.n	800a618 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>
 800a604:	8c3b      	ldrh	r3, [r7, #32]
 800a606:	2b09      	cmp	r3, #9
 800a608:	d002      	beq.n	800a610 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>
 800a60a:	8c3b      	ldrh	r3, [r7, #32]
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d103      	bne.n	800a618 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>
					source = ODRIVE_PACKET;
 800a610:	2302      	movs	r3, #2
 800a612:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800a616:	e007      	b.n	800a628 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>
			for( int i=0 ; i < number_of_odrive; i++)
 800a618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61a:	3301      	adds	r3, #1
 800a61c:	627b      	str	r3, [r7, #36]	; 0x24
 800a61e:	4b28      	ldr	r3, [pc, #160]	; (800a6c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a624:	429a      	cmp	r2, r3
 800a626:	dbe3      	blt.n	800a5f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>
			if(source  == ODRIVE_PACKET)
 800a628:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	d112      	bne.n	800a656 <HAL_CAN_RxFifo0MsgPendingCallback+0x262>
				Odrvmsg.RXmsg = CAN2RxMessage;
 800a630:	4a24      	ldr	r2, [pc, #144]	; (800a6c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 800a632:	4b2a      	ldr	r3, [pc, #168]	; (800a6dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a634:	4614      	mov	r4, r2
 800a636:	461d      	mov	r5, r3
 800a638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a63a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a63c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN2RxMessage.DLC);
 800a644:	4b25      	ldr	r3, [pc, #148]	; (800a6dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a646:	691a      	ldr	r2, [r3, #16]
 800a648:	f107 030c 	add.w	r3, r7, #12
 800a64c:	4619      	mov	r1, r3
 800a64e:	481e      	ldr	r0, [pc, #120]	; (800a6c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 800a650:	f00f fae6 	bl	8019c20 <memcpy>
 800a654:	e04d      	b.n	800a6f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
				switch(CAN2RxMessage.StdId){
 800a656:	4b21      	ldr	r3, [pc, #132]	; (800a6dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2b16      	cmp	r3, #22
 800a65c:	d01b      	beq.n	800a696 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a2>
 800a65e:	2b16      	cmp	r3, #22
 800a660:	d83e      	bhi.n	800a6e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>
 800a662:	2b14      	cmp	r3, #20
 800a664:	d002      	beq.n	800a66c <HAL_CAN_RxFifo0MsgPendingCallback+0x278>
 800a666:	2b15      	cmp	r3, #21
 800a668:	d00c      	beq.n	800a684 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>
 800a66a:	e039      	b.n	800a6e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>
					memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 800a66c:	4b1b      	ldr	r3, [pc, #108]	; (800a6dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a66e:	691a      	ldr	r2, [r3, #16]
 800a670:	f107 030c 	add.w	r3, r7, #12
 800a674:	4619      	mov	r1, r3
 800a676:	4815      	ldr	r0, [pc, #84]	; (800a6cc <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 800a678:	f00f fad2 	bl	8019c20 <memcpy>
					buf2_flag = 0;
 800a67c:	4b14      	ldr	r3, [pc, #80]	; (800a6d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800a67e:	2200      	movs	r2, #0
 800a680:	701a      	strb	r2, [r3, #0]
					break;
 800a682:	e036      	b.n	800a6f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
					memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 800a684:	4b15      	ldr	r3, [pc, #84]	; (800a6dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a686:	691a      	ldr	r2, [r3, #16]
 800a688:	f107 030c 	add.w	r3, r7, #12
 800a68c:	4619      	mov	r1, r3
 800a68e:	4811      	ldr	r0, [pc, #68]	; (800a6d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e0>)
 800a690:	f00f fac6 	bl	8019c20 <memcpy>
					break;
 800a694:	e02d      	b.n	800a6f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
					memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 800a696:	4b11      	ldr	r3, [pc, #68]	; (800a6dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a698:	691a      	ldr	r2, [r3, #16]
 800a69a:	f107 030c 	add.w	r3, r7, #12
 800a69e:	4619      	mov	r1, r3
 800a6a0:	480d      	ldr	r0, [pc, #52]	; (800a6d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e4>)
 800a6a2:	f00f fabd 	bl	8019c20 <memcpy>
					buf2_flag = 1;
 800a6a6:	4b0a      	ldr	r3, [pc, #40]	; (800a6d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	701a      	strb	r2, [r3, #0]
					break;
 800a6ac:	e021      	b.n	800a6f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
 800a6ae:	bf00      	nop
 800a6b0:	20009f30 	.word	0x20009f30
 800a6b4:	2000a4f0 	.word	0x2000a4f0
 800a6b8:	200096c4 	.word	0x200096c4
 800a6bc:	2000a614 	.word	0x2000a614
 800a6c0:	200002c4 	.word	0x200002c4
 800a6c4:	20006888 	.word	0x20006888
 800a6c8:	200068a4 	.word	0x200068a4
 800a6cc:	20006a3c 	.word	0x20006a3c
 800a6d0:	200002d0 	.word	0x200002d0
 800a6d4:	20009c34 	.word	0x20009c34
 800a6d8:	20009d94 	.word	0x20009d94
 800a6dc:	20006ab8 	.word	0x20006ab8
					rns_can = 0;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800a6e6:	f107 030c 	add.w	r3, r7, #12
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7f9 f9dc 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800a6f0:	bf00      	nop
		if(rns_can)
 800a6f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d004      	beq.n	800a704 <HAL_CAN_RxFifo0MsgPendingCallback+0x310>
			CAN_PROCESS(source);
 800a6fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7ff fe28 	bl	800a354 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800a704:	2102      	movs	r1, #2
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f006 fbf4 	bl	8010ef4 <HAL_CAN_ActivateNotification>
}
 800a70c:	bf00      	nop
 800a70e:	3730      	adds	r7, #48	; 0x30
 800a710:	46bd      	mov	sp, r7
 800a712:	bdb0      	pop	{r4, r5, r7, pc}

0800a714 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a714:	b5b0      	push	{r4, r5, r7, lr}
 800a716:	b08c      	sub	sp, #48	; 0x30
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
	PACKET_t source;
	uint8_t aData[8];
	uint8_t rns_can = 1;
 800a71c:	2301      	movs	r3, #1
 800a71e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if(hcan == &hcan1){
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4aaa      	ldr	r2, [pc, #680]	; (800a9d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2bc>)
 800a726:	4293      	cmp	r3, r2
 800a728:	f040 80b4 	bne.w	800a894 <HAL_CAN_RxFifo1MsgPendingCallback+0x180>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN1RxMessage, aData);
 800a72c:	f107 030c 	add.w	r3, r7, #12
 800a730:	4aa8      	ldr	r2, [pc, #672]	; (800a9d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a732:	2101      	movs	r1, #1
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f006 facb 	bl	8010cd0 <HAL_CAN_GetRxMessage>
		//	sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);

		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 800a73a:	4ba6      	ldr	r3, [pc, #664]	; (800a9d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	2b04      	cmp	r3, #4
 800a740:	d118      	bne.n	800a774 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 800a742:	4aa5      	ldr	r2, [pc, #660]	; (800a9d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a744:	4ba3      	ldr	r3, [pc, #652]	; (800a9d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a746:	4614      	mov	r4, r2
 800a748:	461d      	mov	r5, r3
 800a74a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a74c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a74e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a752:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800a756:	4ba0      	ldr	r3, [pc, #640]	; (800a9d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a758:	331c      	adds	r3, #28
 800a75a:	f107 020c 	add.w	r2, r7, #12
 800a75e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a762:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800a766:	489c      	ldr	r0, [pc, #624]	; (800a9d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a768:	f002 ff5e 	bl	800d628 <set_rx_frames>
			source = VESC_PACKET;
 800a76c:	2301      	movs	r3, #1
 800a76e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a772:	e081      	b.n	800a878 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
		}else{
			source = RNS_PACKET;
 800a774:	2300      	movs	r3, #0
 800a776:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800a77a:	231f      	movs	r3, #31
 800a77c:	837b      	strh	r3, [r7, #26]
			uint16_t command = CAN1RxMessage.StdId & id_mask;
 800a77e:	4b95      	ldr	r3, [pc, #596]	; (800a9d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	b29a      	uxth	r2, r3
 800a784:	8b7b      	ldrh	r3, [r7, #26]
 800a786:	4013      	ands	r3, r2
 800a788:	833b      	strh	r3, [r7, #24]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800a78a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800a78e:	82fb      	strh	r3, [r7, #22]
			uint16_t id = CAN1RxMessage.StdId&command_mask;
 800a790:	4b90      	ldr	r3, [pc, #576]	; (800a9d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	b29a      	uxth	r2, r3
 800a796:	8afb      	ldrh	r3, [r7, #22]
 800a798:	4013      	ands	r3, r2
 800a79a:	82bb      	strh	r3, [r7, #20]
			id=id>>5;
 800a79c:	8abb      	ldrh	r3, [r7, #20]
 800a79e:	095b      	lsrs	r3, r3, #5
 800a7a0:	82bb      	strh	r3, [r7, #20]

			for( int i=0 ; i < number_of_odrive; i++)
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7a6:	e016      	b.n	800a7d6 <HAL_CAN_RxFifo1MsgPendingCallback+0xc2>
			{
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800a7a8:	4b8c      	ldr	r3, [pc, #560]	; (800a9dc <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	4413      	add	r3, r2
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	8b1b      	ldrh	r3, [r3, #24]
 800a7b6:	8aba      	ldrh	r2, [r7, #20]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d109      	bne.n	800a7d0 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>
 800a7bc:	8b3b      	ldrh	r3, [r7, #24]
 800a7be:	2b09      	cmp	r3, #9
 800a7c0:	d002      	beq.n	800a7c8 <HAL_CAN_RxFifo1MsgPendingCallback+0xb4>
 800a7c2:	8b3b      	ldrh	r3, [r7, #24]
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d103      	bne.n	800a7d0 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>
				{
					source = ODRIVE_PACKET;
 800a7c8:	2302      	movs	r3, #2
 800a7ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800a7ce:	e007      	b.n	800a7e0 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>
			for( int i=0 ; i < number_of_odrive; i++)
 800a7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7d6:	4b82      	ldr	r3, [pc, #520]	; (800a9e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	dbe3      	blt.n	800a7a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x94>
				}
			}

			if(source  == ODRIVE_PACKET)
 800a7e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a7e4:	2b02      	cmp	r3, #2
 800a7e6:	d112      	bne.n	800a80e <HAL_CAN_RxFifo1MsgPendingCallback+0xfa>
			{
				Odrvmsg.RXmsg = CAN1RxMessage;
 800a7e8:	4a7e      	ldr	r2, [pc, #504]	; (800a9e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 800a7ea:	4b7a      	ldr	r3, [pc, #488]	; (800a9d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a7ec:	4614      	mov	r4, r2
 800a7ee:	461d      	mov	r5, r3
 800a7f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a7f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a7f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a7f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN1RxMessage.DLC);
 800a7fc:	4b75      	ldr	r3, [pc, #468]	; (800a9d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a7fe:	691a      	ldr	r2, [r3, #16]
 800a800:	f107 030c 	add.w	r3, r7, #12
 800a804:	4619      	mov	r1, r3
 800a806:	4878      	ldr	r0, [pc, #480]	; (800a9e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 800a808:	f00f fa0a 	bl	8019c20 <memcpy>
 800a80c:	e034      	b.n	800a878 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
			}

			else{
				switch(CAN1RxMessage.StdId){
 800a80e:	4b71      	ldr	r3, [pc, #452]	; (800a9d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2b16      	cmp	r3, #22
 800a814:	d01b      	beq.n	800a84e <HAL_CAN_RxFifo1MsgPendingCallback+0x13a>
 800a816:	2b16      	cmp	r3, #22
 800a818:	d825      	bhi.n	800a866 <HAL_CAN_RxFifo1MsgPendingCallback+0x152>
 800a81a:	2b14      	cmp	r3, #20
 800a81c:	d002      	beq.n	800a824 <HAL_CAN_RxFifo1MsgPendingCallback+0x110>
 800a81e:	2b15      	cmp	r3, #21
 800a820:	d00c      	beq.n	800a83c <HAL_CAN_RxFifo1MsgPendingCallback+0x128>
 800a822:	e020      	b.n	800a866 <HAL_CAN_RxFifo1MsgPendingCallback+0x152>
				case RNS_TO_mainboard:
					memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 800a824:	4b6b      	ldr	r3, [pc, #428]	; (800a9d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a826:	691a      	ldr	r2, [r3, #16]
 800a828:	f107 030c 	add.w	r3, r7, #12
 800a82c:	4619      	mov	r1, r3
 800a82e:	486f      	ldr	r0, [pc, #444]	; (800a9ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 800a830:	f00f f9f6 	bl	8019c20 <memcpy>
					buf2_flag = 0;
 800a834:	4b6e      	ldr	r3, [pc, #440]	; (800a9f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800a836:	2200      	movs	r2, #0
 800a838:	701a      	strb	r2, [r3, #0]

					break;
 800a83a:	e01d      	b.n	800a878 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf1:
					memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 800a83c:	4b65      	ldr	r3, [pc, #404]	; (800a9d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a83e:	691a      	ldr	r2, [r3, #16]
 800a840:	f107 030c 	add.w	r3, r7, #12
 800a844:	4619      	mov	r1, r3
 800a846:	486b      	ldr	r0, [pc, #428]	; (800a9f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 800a848:	f00f f9ea 	bl	8019c20 <memcpy>

					break;
 800a84c:	e014      	b.n	800a878 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf2:
					memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 800a84e:	4b61      	ldr	r3, [pc, #388]	; (800a9d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a850:	691a      	ldr	r2, [r3, #16]
 800a852:	f107 030c 	add.w	r3, r7, #12
 800a856:	4619      	mov	r1, r3
 800a858:	4867      	ldr	r0, [pc, #412]	; (800a9f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e4>)
 800a85a:	f00f f9e1 	bl	8019c20 <memcpy>
					buf2_flag = 1;
 800a85e:	4b64      	ldr	r3, [pc, #400]	; (800a9f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800a860:	2201      	movs	r2, #1
 800a862:	701a      	strb	r2, [r3, #0]
					break;
 800a864:	e008      	b.n	800a878 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>

				default:
					rns_can = 0;
 800a866:	2300      	movs	r3, #0
 800a868:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800a86c:	f107 030c 	add.w	r3, r7, #12
 800a870:	4618      	mov	r0, r3
 800a872:	f7f9 f919 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800a876:	bf00      	nop
				}
			}
		}
		if(rns_can)
 800a878:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d004      	beq.n	800a88a <HAL_CAN_RxFifo1MsgPendingCallback+0x176>
			CAN_PROCESS(source);
 800a880:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a884:	4618      	mov	r0, r3
 800a886:	f7ff fd65 	bl	800a354 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800a88a:	2110      	movs	r1, #16
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f006 fb31 	bl	8010ef4 <HAL_CAN_ActivateNotification>
		if(rns_can)
			CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	}

}
 800a892:	e0cb      	b.n	800aa2c <HAL_CAN_RxFifo1MsgPendingCallback+0x318>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN2RxMessage, aData);
 800a894:	f107 030c 	add.w	r3, r7, #12
 800a898:	4a58      	ldr	r2, [pc, #352]	; (800a9fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a89a:	2101      	movs	r1, #1
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f006 fa17 	bl	8010cd0 <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 800a8a2:	4b56      	ldr	r3, [pc, #344]	; (800a9fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a8a4:	689b      	ldr	r3, [r3, #8]
 800a8a6:	2b04      	cmp	r3, #4
 800a8a8:	d118      	bne.n	800a8dc <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>
			vescmsg.Rxmsg = CAN2RxMessage;
 800a8aa:	4a4b      	ldr	r2, [pc, #300]	; (800a9d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a8ac:	4b53      	ldr	r3, [pc, #332]	; (800a9fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a8ae:	4614      	mov	r4, r2
 800a8b0:	461d      	mov	r5, r3
 800a8b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a8b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a8b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a8ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800a8be:	4b46      	ldr	r3, [pc, #280]	; (800a9d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a8c0:	331c      	adds	r3, #28
 800a8c2:	f107 020c 	add.w	r2, r7, #12
 800a8c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a8ca:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800a8ce:	4842      	ldr	r0, [pc, #264]	; (800a9d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a8d0:	f002 feaa 	bl	800d628 <set_rx_frames>
			source = VESC_PACKET;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a8da:	e09a      	b.n	800aa12 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
			source = RNS_PACKET;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800a8e2:	231f      	movs	r3, #31
 800a8e4:	847b      	strh	r3, [r7, #34]	; 0x22
			uint16_t command = CAN2RxMessage.StdId & id_mask;
 800a8e6:	4b45      	ldr	r3, [pc, #276]	; (800a9fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	b29a      	uxth	r2, r3
 800a8ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a8ee:	4013      	ands	r3, r2
 800a8f0:	843b      	strh	r3, [r7, #32]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800a8f2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800a8f6:	83fb      	strh	r3, [r7, #30]
			uint16_t id = CAN2RxMessage.StdId&command_mask;
 800a8f8:	4b40      	ldr	r3, [pc, #256]	; (800a9fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	b29a      	uxth	r2, r3
 800a8fe:	8bfb      	ldrh	r3, [r7, #30]
 800a900:	4013      	ands	r3, r2
 800a902:	83bb      	strh	r3, [r7, #28]
			id=id>>5;
 800a904:	8bbb      	ldrh	r3, [r7, #28]
 800a906:	095b      	lsrs	r3, r3, #5
 800a908:	83bb      	strh	r3, [r7, #28]
			for( int i=0 ; i < number_of_odrive; i++)
 800a90a:	2300      	movs	r3, #0
 800a90c:	627b      	str	r3, [r7, #36]	; 0x24
 800a90e:	e016      	b.n	800a93e <HAL_CAN_RxFifo1MsgPendingCallback+0x22a>
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800a910:	4b32      	ldr	r3, [pc, #200]	; (800a9dc <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	4413      	add	r3, r2
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	8b1b      	ldrh	r3, [r3, #24]
 800a91e:	8bba      	ldrh	r2, [r7, #28]
 800a920:	429a      	cmp	r2, r3
 800a922:	d109      	bne.n	800a938 <HAL_CAN_RxFifo1MsgPendingCallback+0x224>
 800a924:	8c3b      	ldrh	r3, [r7, #32]
 800a926:	2b09      	cmp	r3, #9
 800a928:	d002      	beq.n	800a930 <HAL_CAN_RxFifo1MsgPendingCallback+0x21c>
 800a92a:	8c3b      	ldrh	r3, [r7, #32]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d103      	bne.n	800a938 <HAL_CAN_RxFifo1MsgPendingCallback+0x224>
					source = ODRIVE_PACKET;
 800a930:	2302      	movs	r3, #2
 800a932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800a936:	e007      	b.n	800a948 <HAL_CAN_RxFifo1MsgPendingCallback+0x234>
			for( int i=0 ; i < number_of_odrive; i++)
 800a938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93a:	3301      	adds	r3, #1
 800a93c:	627b      	str	r3, [r7, #36]	; 0x24
 800a93e:	4b28      	ldr	r3, [pc, #160]	; (800a9e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a944:	429a      	cmp	r2, r3
 800a946:	dbe3      	blt.n	800a910 <HAL_CAN_RxFifo1MsgPendingCallback+0x1fc>
			if(source  == ODRIVE_PACKET)
 800a948:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a94c:	2b02      	cmp	r3, #2
 800a94e:	d112      	bne.n	800a976 <HAL_CAN_RxFifo1MsgPendingCallback+0x262>
				Odrvmsg.RXmsg = CAN2RxMessage;
 800a950:	4a24      	ldr	r2, [pc, #144]	; (800a9e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 800a952:	4b2a      	ldr	r3, [pc, #168]	; (800a9fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a954:	4614      	mov	r4, r2
 800a956:	461d      	mov	r5, r3
 800a958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a95a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a95c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a960:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN2RxMessage.DLC);
 800a964:	4b25      	ldr	r3, [pc, #148]	; (800a9fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a966:	691a      	ldr	r2, [r3, #16]
 800a968:	f107 030c 	add.w	r3, r7, #12
 800a96c:	4619      	mov	r1, r3
 800a96e:	481e      	ldr	r0, [pc, #120]	; (800a9e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 800a970:	f00f f956 	bl	8019c20 <memcpy>
 800a974:	e04d      	b.n	800aa12 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
				switch(CAN2RxMessage.StdId){
 800a976:	4b21      	ldr	r3, [pc, #132]	; (800a9fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	2b16      	cmp	r3, #22
 800a97c:	d01b      	beq.n	800a9b6 <HAL_CAN_RxFifo1MsgPendingCallback+0x2a2>
 800a97e:	2b16      	cmp	r3, #22
 800a980:	d83e      	bhi.n	800aa00 <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>
 800a982:	2b14      	cmp	r3, #20
 800a984:	d002      	beq.n	800a98c <HAL_CAN_RxFifo1MsgPendingCallback+0x278>
 800a986:	2b15      	cmp	r3, #21
 800a988:	d00c      	beq.n	800a9a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x290>
 800a98a:	e039      	b.n	800aa00 <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>
					memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 800a98c:	4b1b      	ldr	r3, [pc, #108]	; (800a9fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a98e:	691a      	ldr	r2, [r3, #16]
 800a990:	f107 030c 	add.w	r3, r7, #12
 800a994:	4619      	mov	r1, r3
 800a996:	4815      	ldr	r0, [pc, #84]	; (800a9ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 800a998:	f00f f942 	bl	8019c20 <memcpy>
					buf2_flag = 0;
 800a99c:	4b14      	ldr	r3, [pc, #80]	; (800a9f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800a99e:	2200      	movs	r2, #0
 800a9a0:	701a      	strb	r2, [r3, #0]
					break;
 800a9a2:	e036      	b.n	800aa12 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
					memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 800a9a4:	4b15      	ldr	r3, [pc, #84]	; (800a9fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a9a6:	691a      	ldr	r2, [r3, #16]
 800a9a8:	f107 030c 	add.w	r3, r7, #12
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	4811      	ldr	r0, [pc, #68]	; (800a9f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 800a9b0:	f00f f936 	bl	8019c20 <memcpy>
					break;
 800a9b4:	e02d      	b.n	800aa12 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
					memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 800a9b6:	4b11      	ldr	r3, [pc, #68]	; (800a9fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a9b8:	691a      	ldr	r2, [r3, #16]
 800a9ba:	f107 030c 	add.w	r3, r7, #12
 800a9be:	4619      	mov	r1, r3
 800a9c0:	480d      	ldr	r0, [pc, #52]	; (800a9f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e4>)
 800a9c2:	f00f f92d 	bl	8019c20 <memcpy>
					buf2_flag = 1;
 800a9c6:	4b0a      	ldr	r3, [pc, #40]	; (800a9f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	701a      	strb	r2, [r3, #0]
					break;
 800a9cc:	e021      	b.n	800aa12 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
 800a9ce:	bf00      	nop
 800a9d0:	20009f30 	.word	0x20009f30
 800a9d4:	2000a4f0 	.word	0x2000a4f0
 800a9d8:	200096c4 	.word	0x200096c4
 800a9dc:	2000a614 	.word	0x2000a614
 800a9e0:	200002c4 	.word	0x200002c4
 800a9e4:	20006888 	.word	0x20006888
 800a9e8:	200068a4 	.word	0x200068a4
 800a9ec:	20006a3c 	.word	0x20006a3c
 800a9f0:	200002d0 	.word	0x200002d0
 800a9f4:	20009c34 	.word	0x20009c34
 800a9f8:	20009d94 	.word	0x20009d94
 800a9fc:	20006ab8 	.word	0x20006ab8
					rns_can = 0;
 800aa00:	2300      	movs	r3, #0
 800aa02:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800aa06:	f107 030c 	add.w	r3, r7, #12
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7f9 f84c 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800aa10:	bf00      	nop
		if(rns_can)
 800aa12:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d004      	beq.n	800aa24 <HAL_CAN_RxFifo1MsgPendingCallback+0x310>
			CAN_PROCESS(source);
 800aa1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7ff fc98 	bl	800a354 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800aa24:	2110      	movs	r1, #16
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f006 fa64 	bl	8010ef4 <HAL_CAN_ActivateNotification>
}
 800aa2c:	bf00      	nop
 800aa2e:	3730      	adds	r7, #48	; 0x30
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bdb0      	pop	{r4, r5, r7, pc}

0800aa34 <set>:

float pickVG[7] = {1.0, 1.0, 19999.0, 1.0, 1.0, 0.001, 60.0};
float flywheelVG[7] = {1.0, 1.0 / 25.0, 19999, 1.0, 1.5, 0.001, 60};
float flywheelLVG[7] = {1.0, 1.0 / 25.0, 19999, 1.0, 1.5, 0.001, 60};

void set(void) {
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b088      	sub	sp, #32
 800aa38:	af02      	add	r7, sp, #8
	Initialize();
 800aa3a:	f7ff fa4b 	bl	8009ed4 <Initialize>
	PSxInitDMA(&ps4, &hi2c1);
 800aa3e:	49a4      	ldr	r1, [pc, #656]	; (800acd0 <set+0x29c>)
 800aa40:	48a4      	ldr	r0, [pc, #656]	; (800acd4 <set+0x2a0>)
 800aa42:	f7fe f8e6 	bl	8008c12 <PSxInitDMA>
	TIMxInit(&htim6, 5000, 84);
 800aa46:	2254      	movs	r2, #84	; 0x54
 800aa48:	f241 3188 	movw	r1, #5000	; 0x1388
 800aa4c:	48a2      	ldr	r0, [pc, #648]	; (800acd8 <set+0x2a4>)
 800aa4e:	f7f8 fa33 	bl	8002eb8 <TIMxInit>
	MODNInit(MODN_FWD_OMNI, 5.5, 0.5, 2.0, 0.1);
 800aa52:	eddf 1aa2 	vldr	s3, [pc, #648]	; 800acdc <set+0x2a8>
 800aa56:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 800aa5a:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800aa5e:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
 800aa62:	2000      	movs	r0, #0
 800aa64:	f7f9 fd78 	bl	8004558 <MODNInit>
	LidarInit(&huart4, DISCONTINUOUS, &lidar);
 800aa68:	4a9d      	ldr	r2, [pc, #628]	; (800ace0 <set+0x2ac>)
 800aa6a:	2101      	movs	r1, #1
 800aa6c:	489d      	ldr	r0, [pc, #628]	; (800ace4 <set+0x2b0>)
 800aa6e:	f002 feb1 	bl	800d7d4 <LidarInit>
	RNS_config(&hcan1);
 800aa72:	489d      	ldr	r0, [pc, #628]	; (800ace8 <set+0x2b4>)
 800aa74:	f000 f988 	bl	800ad88 <RNS_config>
	ServoxInit(&servo_ring, &htim5, IP15_PIN, TIM_CHANNEL_2); // BDC7
 800aa78:	2304      	movs	r3, #4
 800aa7a:	9300      	str	r3, [sp, #0]
 800aa7c:	2340      	movs	r3, #64	; 0x40
 800aa7e:	4a9b      	ldr	r2, [pc, #620]	; (800acec <set+0x2b8>)
 800aa80:	499b      	ldr	r1, [pc, #620]	; (800acf0 <set+0x2bc>)
 800aa82:	489c      	ldr	r0, [pc, #624]	; (800acf4 <set+0x2c0>)
 800aa84:	f7ff f88e 	bl	8009ba4 <ServoxInit>
	ServoInitPulseLimit(&servo_ring, 500, 2500);
 800aa88:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800aa8c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800aa90:	4898      	ldr	r0, [pc, #608]	; (800acf4 <set+0x2c0>)
 800aa92:	f7ff f9ee 	bl	8009e72 <ServoInitPulseLimit>
	ServoSetPulse(&servo_ring, 2300);
 800aa96:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800aa9a:	4896      	ldr	r0, [pc, #600]	; (800acf4 <set+0x2c0>)
 800aa9c:	f7ff f9a0 	bl	8009de0 <ServoSetPulse>

	PPInit(fwd_omni, &fXPos, &fYPos, &fyaw, &pp);
 800aaa0:	4b95      	ldr	r3, [pc, #596]	; (800acf8 <set+0x2c4>)
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	4b95      	ldr	r3, [pc, #596]	; (800acfc <set+0x2c8>)
 800aaa6:	4a96      	ldr	r2, [pc, #600]	; (800ad00 <set+0x2cc>)
 800aaa8:	4996      	ldr	r1, [pc, #600]	; (800ad04 <set+0x2d0>)
 800aaaa:	2002      	movs	r0, #2
 800aaac:	f7fa fdf4 	bl	8005698 <PPInit>
	PP_SetZ(-180, &pp);
 800aab0:	4891      	ldr	r0, [pc, #580]	; (800acf8 <set+0x2c4>)
 800aab2:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800ad08 <set+0x2d4>
 800aab6:	f7fb fa03 	bl	8005ec0 <PP_SetZ>
	PP_PIDPathSet(1.0, 0.5, 0.5, &pp);
 800aaba:	488f      	ldr	r0, [pc, #572]	; (800acf8 <set+0x2c4>)
 800aabc:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800aac0:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800aac4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800aac8:	f7fa feb8 	bl	800583c <PP_PIDPathSet>
	PP_PIDEndSet(0.5, 0.1, 0.7, &pp);
 800aacc:	488a      	ldr	r0, [pc, #552]	; (800acf8 <set+0x2c4>)
 800aace:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800ad0c <set+0x2d8>
 800aad2:	eddf 0a82 	vldr	s1, [pc, #520]	; 800acdc <set+0x2a8>
 800aad6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800aada:	f7fa ff38 	bl	800594e <PP_PIDEndSet>
	PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 800aade:	4886      	ldr	r0, [pc, #536]	; (800acf8 <set+0x2c4>)
 800aae0:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 800aae4:	ed9f 1a8a 	vldr	s2, [pc, #552]	; 800ad10 <set+0x2dc>
 800aae8:	eddf 0a8a 	vldr	s1, [pc, #552]	; 800ad14 <set+0x2e0>
 800aaec:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 800aaf0:	f7fa fef4 	bl	80058dc <PP_PIDZSet>
	PP_SetCrv_Points(10, &pp);
 800aaf4:	4980      	ldr	r1, [pc, #512]	; (800acf8 <set+0x2c4>)
 800aaf6:	200a      	movs	r0, #10
 800aaf8:	f7fb f9fa 	bl	8005ef0 <PP_SetCrv_Points>

	R6091U_Init(&IMU, &huart3);
 800aafc:	4986      	ldr	r1, [pc, #536]	; (800ad18 <set+0x2e4>)
 800aafe:	4887      	ldr	r0, [pc, #540]	; (800ad1c <set+0x2e8>)
 800ab00:	f7fe fb9c 	bl	800923c <R6091U_Init>

	PIDSourceInit(&pickErr, &pickU, &pick_PID);
 800ab04:	4a86      	ldr	r2, [pc, #536]	; (800ad20 <set+0x2ec>)
 800ab06:	4987      	ldr	r1, [pc, #540]	; (800ad24 <set+0x2f0>)
 800ab08:	4887      	ldr	r0, [pc, #540]	; (800ad28 <set+0x2f4>)
 800ab0a:	f7fa fb2f 	bl	800516c <PIDSourceInit>
	PIDDelayInit(&pick_PID);
 800ab0e:	4884      	ldr	r0, [pc, #528]	; (800ad20 <set+0x2ec>)
 800ab10:	f7fa fcc3 	bl	800549a <PIDDelayInit>
	PIDGainInit(0.005, pickVG[0], pickVG[1], pickVG[2], pickVG[3], pickVG[4], pickVG[5], pickVG[6], &pick_PID);
 800ab14:	4b85      	ldr	r3, [pc, #532]	; (800ad2c <set+0x2f8>)
 800ab16:	edd3 7a00 	vldr	s15, [r3]
 800ab1a:	4b84      	ldr	r3, [pc, #528]	; (800ad2c <set+0x2f8>)
 800ab1c:	ed93 7a01 	vldr	s14, [r3, #4]
 800ab20:	4b82      	ldr	r3, [pc, #520]	; (800ad2c <set+0x2f8>)
 800ab22:	edd3 6a02 	vldr	s13, [r3, #8]
 800ab26:	4b81      	ldr	r3, [pc, #516]	; (800ad2c <set+0x2f8>)
 800ab28:	ed93 6a03 	vldr	s12, [r3, #12]
 800ab2c:	4b7f      	ldr	r3, [pc, #508]	; (800ad2c <set+0x2f8>)
 800ab2e:	edd3 5a04 	vldr	s11, [r3, #16]
 800ab32:	4b7e      	ldr	r3, [pc, #504]	; (800ad2c <set+0x2f8>)
 800ab34:	ed93 5a05 	vldr	s10, [r3, #20]
 800ab38:	4b7c      	ldr	r3, [pc, #496]	; (800ad2c <set+0x2f8>)
 800ab3a:	edd3 4a06 	vldr	s9, [r3, #24]
 800ab3e:	4878      	ldr	r0, [pc, #480]	; (800ad20 <set+0x2ec>)
 800ab40:	eef0 3a64 	vmov.f32	s7, s9
 800ab44:	eeb0 3a45 	vmov.f32	s6, s10
 800ab48:	eef0 2a65 	vmov.f32	s5, s11
 800ab4c:	eeb0 2a46 	vmov.f32	s4, s12
 800ab50:	eef0 1a66 	vmov.f32	s3, s13
 800ab54:	eeb0 1a47 	vmov.f32	s2, s14
 800ab58:	eef0 0a67 	vmov.f32	s1, s15
 800ab5c:	ed9f 0a74 	vldr	s0, [pc, #464]	; 800ad30 <set+0x2fc>
 800ab60:	f7fa fb16 	bl	8005190 <PIDGainInit>

	PIDSourceInit(&leftErr, &leftU, &left_PID);
 800ab64:	4a73      	ldr	r2, [pc, #460]	; (800ad34 <set+0x300>)
 800ab66:	4974      	ldr	r1, [pc, #464]	; (800ad38 <set+0x304>)
 800ab68:	4874      	ldr	r0, [pc, #464]	; (800ad3c <set+0x308>)
 800ab6a:	f7fa faff 	bl	800516c <PIDSourceInit>
	PIDDelayInit(&left_PID);
 800ab6e:	4871      	ldr	r0, [pc, #452]	; (800ad34 <set+0x300>)
 800ab70:	f7fa fc93 	bl	800549a <PIDDelayInit>
	PIDGainInit(0.005, flywheelLVG[0], flywheelLVG[1], flywheelLVG[2], flywheelLVG[3], flywheelLVG[4], flywheelLVG[5], flywheelLVG[6], &left_PID);
 800ab74:	4b72      	ldr	r3, [pc, #456]	; (800ad40 <set+0x30c>)
 800ab76:	edd3 7a00 	vldr	s15, [r3]
 800ab7a:	4b71      	ldr	r3, [pc, #452]	; (800ad40 <set+0x30c>)
 800ab7c:	ed93 7a01 	vldr	s14, [r3, #4]
 800ab80:	4b6f      	ldr	r3, [pc, #444]	; (800ad40 <set+0x30c>)
 800ab82:	edd3 6a02 	vldr	s13, [r3, #8]
 800ab86:	4b6e      	ldr	r3, [pc, #440]	; (800ad40 <set+0x30c>)
 800ab88:	ed93 6a03 	vldr	s12, [r3, #12]
 800ab8c:	4b6c      	ldr	r3, [pc, #432]	; (800ad40 <set+0x30c>)
 800ab8e:	edd3 5a04 	vldr	s11, [r3, #16]
 800ab92:	4b6b      	ldr	r3, [pc, #428]	; (800ad40 <set+0x30c>)
 800ab94:	ed93 5a05 	vldr	s10, [r3, #20]
 800ab98:	4b69      	ldr	r3, [pc, #420]	; (800ad40 <set+0x30c>)
 800ab9a:	edd3 4a06 	vldr	s9, [r3, #24]
 800ab9e:	4865      	ldr	r0, [pc, #404]	; (800ad34 <set+0x300>)
 800aba0:	eef0 3a64 	vmov.f32	s7, s9
 800aba4:	eeb0 3a45 	vmov.f32	s6, s10
 800aba8:	eef0 2a65 	vmov.f32	s5, s11
 800abac:	eeb0 2a46 	vmov.f32	s4, s12
 800abb0:	eef0 1a66 	vmov.f32	s3, s13
 800abb4:	eeb0 1a47 	vmov.f32	s2, s14
 800abb8:	eef0 0a67 	vmov.f32	s1, s15
 800abbc:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 800ad30 <set+0x2fc>
 800abc0:	f7fa fae6 	bl	8005190 <PIDGainInit>

	PIDSourceInit(&rightErr, &rightU, &right_PID);
 800abc4:	4a5f      	ldr	r2, [pc, #380]	; (800ad44 <set+0x310>)
 800abc6:	4960      	ldr	r1, [pc, #384]	; (800ad48 <set+0x314>)
 800abc8:	4860      	ldr	r0, [pc, #384]	; (800ad4c <set+0x318>)
 800abca:	f7fa facf 	bl	800516c <PIDSourceInit>
	PIDDelayInit(&right_PID);
 800abce:	485d      	ldr	r0, [pc, #372]	; (800ad44 <set+0x310>)
 800abd0:	f7fa fc63 	bl	800549a <PIDDelayInit>
	PIDGainInit(0.005, flywheelVG[0], flywheelVG[1], flywheelVG[2], flywheelVG[3], flywheelVG[4], flywheelVG[5], flywheelVG[6], &right_PID);
 800abd4:	4b5e      	ldr	r3, [pc, #376]	; (800ad50 <set+0x31c>)
 800abd6:	edd3 7a00 	vldr	s15, [r3]
 800abda:	4b5d      	ldr	r3, [pc, #372]	; (800ad50 <set+0x31c>)
 800abdc:	ed93 7a01 	vldr	s14, [r3, #4]
 800abe0:	4b5b      	ldr	r3, [pc, #364]	; (800ad50 <set+0x31c>)
 800abe2:	edd3 6a02 	vldr	s13, [r3, #8]
 800abe6:	4b5a      	ldr	r3, [pc, #360]	; (800ad50 <set+0x31c>)
 800abe8:	ed93 6a03 	vldr	s12, [r3, #12]
 800abec:	4b58      	ldr	r3, [pc, #352]	; (800ad50 <set+0x31c>)
 800abee:	edd3 5a04 	vldr	s11, [r3, #16]
 800abf2:	4b57      	ldr	r3, [pc, #348]	; (800ad50 <set+0x31c>)
 800abf4:	ed93 5a05 	vldr	s10, [r3, #20]
 800abf8:	4b55      	ldr	r3, [pc, #340]	; (800ad50 <set+0x31c>)
 800abfa:	edd3 4a06 	vldr	s9, [r3, #24]
 800abfe:	4851      	ldr	r0, [pc, #324]	; (800ad44 <set+0x310>)
 800ac00:	eef0 3a64 	vmov.f32	s7, s9
 800ac04:	eeb0 3a45 	vmov.f32	s6, s10
 800ac08:	eef0 2a65 	vmov.f32	s5, s11
 800ac0c:	eeb0 2a46 	vmov.f32	s4, s12
 800ac10:	eef0 1a66 	vmov.f32	s3, s13
 800ac14:	eeb0 1a47 	vmov.f32	s2, s14
 800ac18:	eef0 0a67 	vmov.f32	s1, s15
 800ac1c:	ed9f 0a44 	vldr	s0, [pc, #272]	; 800ad30 <set+0x2fc>
 800ac20:	f7fa fab6 	bl	8005190 <PIDGainInit>

	float fXPosGain[3] = {0.8, 0.4, 0.2};
 800ac24:	4a4b      	ldr	r2, [pc, #300]	; (800ad54 <set+0x320>)
 800ac26:	f107 030c 	add.w	r3, r7, #12
 800ac2a:	ca07      	ldmia	r2, {r0, r1, r2}
 800ac2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float fYPosGain[3] = {0.8, 0.4, 0.2};
 800ac30:	4a48      	ldr	r2, [pc, #288]	; (800ad54 <set+0x320>)
 800ac32:	463b      	mov	r3, r7
 800ac34:	ca07      	ldmia	r2, {r0, r1, r2}
 800ac36:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	/* X & Y position ABT */
	ABTInit(SAMPLE_TIME, fXPosGain[0], fXPosGain[1], fXPosGain[2], &fXEncData, &fXPos, &fXVel, &fXAcc, &x_data);
 800ac3a:	edd7 7a03 	vldr	s15, [r7, #12]
 800ac3e:	ed97 7a04 	vldr	s14, [r7, #16]
 800ac42:	edd7 6a05 	vldr	s13, [r7, #20]
 800ac46:	4b44      	ldr	r3, [pc, #272]	; (800ad58 <set+0x324>)
 800ac48:	9300      	str	r3, [sp, #0]
 800ac4a:	4b44      	ldr	r3, [pc, #272]	; (800ad5c <set+0x328>)
 800ac4c:	4a44      	ldr	r2, [pc, #272]	; (800ad60 <set+0x32c>)
 800ac4e:	492d      	ldr	r1, [pc, #180]	; (800ad04 <set+0x2d0>)
 800ac50:	4844      	ldr	r0, [pc, #272]	; (800ad64 <set+0x330>)
 800ac52:	eef0 1a66 	vmov.f32	s3, s13
 800ac56:	eeb0 1a47 	vmov.f32	s2, s14
 800ac5a:	eef0 0a67 	vmov.f32	s1, s15
 800ac5e:	ed9f 0a34 	vldr	s0, [pc, #208]	; 800ad30 <set+0x2fc>
 800ac62:	f7f6 f9c3 	bl	8000fec <ABTInit>
	ABTEstimateInit(&x_data);
 800ac66:	483c      	ldr	r0, [pc, #240]	; (800ad58 <set+0x324>)
 800ac68:	f7f6 f9ed 	bl	8001046 <ABTEstimateInit>

	ABTInit(SAMPLE_TIME, fYPosGain[0], fYPosGain[1], fYPosGain[2], &fYEncData, &fYPos, &fYVel, &fYAcc, &y_data);
 800ac6c:	edd7 7a00 	vldr	s15, [r7]
 800ac70:	ed97 7a01 	vldr	s14, [r7, #4]
 800ac74:	edd7 6a02 	vldr	s13, [r7, #8]
 800ac78:	4b3b      	ldr	r3, [pc, #236]	; (800ad68 <set+0x334>)
 800ac7a:	9300      	str	r3, [sp, #0]
 800ac7c:	4b3b      	ldr	r3, [pc, #236]	; (800ad6c <set+0x338>)
 800ac7e:	4a3c      	ldr	r2, [pc, #240]	; (800ad70 <set+0x33c>)
 800ac80:	491f      	ldr	r1, [pc, #124]	; (800ad00 <set+0x2cc>)
 800ac82:	483c      	ldr	r0, [pc, #240]	; (800ad74 <set+0x340>)
 800ac84:	eef0 1a66 	vmov.f32	s3, s13
 800ac88:	eeb0 1a47 	vmov.f32	s2, s14
 800ac8c:	eef0 0a67 	vmov.f32	s1, s15
 800ac90:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800ad30 <set+0x2fc>
 800ac94:	f7f6 f9aa 	bl	8000fec <ABTInit>
	ABTEstimateInit(&y_data);
 800ac98:	4833      	ldr	r0, [pc, #204]	; (800ad68 <set+0x334>)
 800ac9a:	f7f6 f9d4 	bl	8001046 <ABTEstimateInit>

	VESCInit(35000, 7, 0.15, 111, &vesc1);
 800ac9e:	4936      	ldr	r1, [pc, #216]	; (800ad78 <set+0x344>)
 800aca0:	206f      	movs	r0, #111	; 0x6f
 800aca2:	ed9f 1a36 	vldr	s2, [pc, #216]	; 800ad7c <set+0x348>
 800aca6:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 800acaa:	ed9f 0a35 	vldr	s0, [pc, #212]	; 800ad80 <set+0x34c>
 800acae:	f002 fcf1 	bl	800d694 <VESCInit>
	VESCInit(35000, 7, 0.15, 112, &vesc2);
 800acb2:	4934      	ldr	r1, [pc, #208]	; (800ad84 <set+0x350>)
 800acb4:	2070      	movs	r0, #112	; 0x70
 800acb6:	ed9f 1a31 	vldr	s2, [pc, #196]	; 800ad7c <set+0x348>
 800acba:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 800acbe:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800ad80 <set+0x34c>
 800acc2:	f002 fce7 	bl	800d694 <VESCInit>
}
 800acc6:	bf00      	nop
 800acc8:	3718      	adds	r7, #24
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	20006b88 	.word	0x20006b88
 800acd4:	2000a014 	.word	0x2000a014
 800acd8:	20005ef4 	.word	0x20005ef4
 800acdc:	3dcccccd 	.word	0x3dcccccd
 800ace0:	20009030 	.word	0x20009030
 800ace4:	20005ff8 	.word	0x20005ff8
 800ace8:	20009f30 	.word	0x20009f30
 800acec:	40020400 	.word	0x40020400
 800acf0:	20005ca8 	.word	0x20005ca8
 800acf4:	2000786c 	.word	0x2000786c
 800acf8:	20006cc4 	.word	0x20006cc4
 800acfc:	2000996c 	.word	0x2000996c
 800ad00:	20009808 	.word	0x20009808
 800ad04:	200099b4 	.word	0x200099b4
 800ad08:	c3340000 	.word	0xc3340000
 800ad0c:	3f333333 	.word	0x3f333333
 800ad10:	3e4ccccd 	.word	0x3e4ccccd
 800ad14:	3d4ccccd 	.word	0x3d4ccccd
 800ad18:	20005bc4 	.word	0x20005bc4
 800ad1c:	20006c68 	.word	0x20006c68
 800ad20:	20009810 	.word	0x20009810
 800ad24:	20007350 	.word	0x20007350
 800ad28:	200064d8 	.word	0x200064d8
 800ad2c:	20000000 	.word	0x20000000
 800ad30:	3ba3d70a 	.word	0x3ba3d70a
 800ad34:	20008eb4 	.word	0x20008eb4
 800ad38:	20006880 	.word	0x20006880
 800ad3c:	2000a010 	.word	0x2000a010
 800ad40:	20000038 	.word	0x20000038
 800ad44:	20009f58 	.word	0x20009f58
 800ad48:	20006b00 	.word	0x20006b00
 800ad4c:	20009dac 	.word	0x20009dac
 800ad50:	2000001c 	.word	0x2000001c
 800ad54:	0801fd88 	.word	0x0801fd88
 800ad58:	2000a300 	.word	0x2000a300
 800ad5c:	20006638 	.word	0x20006638
 800ad60:	2000986c 	.word	0x2000986c
 800ad64:	20006914 	.word	0x20006914
 800ad68:	200077d4 	.word	0x200077d4
 800ad6c:	2000720c 	.word	0x2000720c
 800ad70:	20006bdc 	.word	0x20006bdc
 800ad74:	2000a324 	.word	0x2000a324
 800ad78:	20006b04 	.word	0x20006b04
 800ad7c:	3e19999a 	.word	0x3e19999a
 800ad80:	4708b800 	.word	0x4708b800
 800ad84:	2000997c 	.word	0x2000997c

0800ad88 <RNS_config>:

void RNS_config(CAN_HandleTypeDef *hcanx) {
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b088      	sub	sp, #32
 800ad8c:	af06      	add	r7, sp, #24
 800ad8e:	6078      	str	r0, [r7, #4]
	RNSInit(hcanx, &rns);
 800ad90:	49a9      	ldr	r1, [pc, #676]	; (800b038 <RNS_config+0x2b0>)
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f7fe fb34 	bl	8009400 <RNSInit>
	//0b11100101
	//Encoder dcba(0-swap, 1-keep)  BDC dcba(0-keep, 1-swap) //0x00 0x00 0x
	RNSSet(&rns, RNS_DEVICE_CONFIG, (float) 0b00001101, (float) fwd_omni,
 800ad98:	f04f 0200 	mov.w	r2, #0
 800ad9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ada0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ada4:	f04f 0200 	mov.w	r2, #0
 800ada8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800adac:	e9cd 2300 	strd	r2, r3, [sp]
 800adb0:	f04f 0200 	mov.w	r2, #0
 800adb4:	4ba1      	ldr	r3, [pc, #644]	; (800b03c <RNS_config+0x2b4>)
 800adb6:	2124      	movs	r1, #36	; 0x24
 800adb8:	489f      	ldr	r0, [pc, #636]	; (800b038 <RNS_config+0x2b0>)
 800adba:	f7fe fc9f 	bl	80096fc <RNSSet>
			(float) roboconPID);
	RNSSet(&rns, RNS_X_Y_ENC_CONFIG, 0.05 / 4000.0 * 3.142, 2.0,
 800adbe:	f04f 0200 	mov.w	r2, #0
 800adc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800adc6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800adca:	a37d      	add	r3, pc, #500	; (adr r3, 800afc0 <RNS_config+0x238>)
 800adcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800add4:	f04f 0200 	mov.w	r2, #0
 800add8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800addc:	e9cd 2300 	strd	r2, r3, [sp]
 800ade0:	a377      	add	r3, pc, #476	; (adr r3, 800afc0 <RNS_config+0x238>)
 800ade2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade6:	2149      	movs	r1, #73	; 0x49
 800ade8:	4893      	ldr	r0, [pc, #588]	; (800b038 <RNS_config+0x2b0>)
 800adea:	f7fe fc87 	bl	80096fc <RNSSet>
			0.05 / 4000.0 * 3.142, 2.0); //1.0 for nonswap , 2.0 for swap
	RNSSet(&rns, RNS_F_KCD_PTD, (float) 5816.0 / 5181.0, //remember to put floating point 5175/5174 wrong
 800adee:	a376      	add	r3, pc, #472	; (adr r3, 800afc8 <RNS_config+0x240>)
 800adf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf4:	e9cd 2300 	strd	r2, r3, [sp]
 800adf8:	a375      	add	r3, pc, #468	; (adr r3, 800afd0 <RNS_config+0x248>)
 800adfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfe:	211f      	movs	r1, #31
 800ae00:	488d      	ldr	r0, [pc, #564]	; (800b038 <RNS_config+0x2b0>)
 800ae02:	f7fe fc7b 	bl	80096fc <RNSSet>
	(float) (3.142 * 0.126 * 2 / 581.6));
	RNSSet(&rns, RNS_B_KCD_PTD, (float) 5191.0 / 5183.0,
 800ae06:	a374      	add	r3, pc, #464	; (adr r3, 800afd8 <RNS_config+0x250>)
 800ae08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0c:	e9cd 2300 	strd	r2, r3, [sp]
 800ae10:	a373      	add	r3, pc, #460	; (adr r3, 800afe0 <RNS_config+0x258>)
 800ae12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae16:	2120      	movs	r1, #32
 800ae18:	4887      	ldr	r0, [pc, #540]	; (800b038 <RNS_config+0x2b0>)
 800ae1a:	f7fe fc6f 	bl	80096fc <RNSSet>
			(float) (3.142 * 0.126 * 2 / 519.1));

	RNSSet(&rns, RNS_F_LEFT_VEL_SATEU, 1.0, 1.0 / 6.88, 19999.0);
 800ae1e:	a372      	add	r3, pc, #456	; (adr r3, 800afe8 <RNS_config+0x260>)
 800ae20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae28:	a371      	add	r3, pc, #452	; (adr r3, 800aff0 <RNS_config+0x268>)
 800ae2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2e:	e9cd 2300 	strd	r2, r3, [sp]
 800ae32:	f04f 0200 	mov.w	r2, #0
 800ae36:	4b82      	ldr	r3, [pc, #520]	; (800b040 <RNS_config+0x2b8>)
 800ae38:	212b      	movs	r1, #43	; 0x2b
 800ae3a:	487f      	ldr	r0, [pc, #508]	; (800b038 <RNS_config+0x2b0>)
 800ae3c:	f7fe fc5e 	bl	80096fc <RNSSet>
	RNSSet(&rns, RNS_F_RIGHT_VEL_SATEU, 1.0, 1.0 / 8.66, 19999.0);
 800ae40:	a369      	add	r3, pc, #420	; (adr r3, 800afe8 <RNS_config+0x260>)
 800ae42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae4a:	a36b      	add	r3, pc, #428	; (adr r3, 800aff8 <RNS_config+0x270>)
 800ae4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae50:	e9cd 2300 	strd	r2, r3, [sp]
 800ae54:	f04f 0200 	mov.w	r2, #0
 800ae58:	4b79      	ldr	r3, [pc, #484]	; (800b040 <RNS_config+0x2b8>)
 800ae5a:	212c      	movs	r1, #44	; 0x2c
 800ae5c:	4876      	ldr	r0, [pc, #472]	; (800b038 <RNS_config+0x2b0>)
 800ae5e:	f7fe fc4d 	bl	80096fc <RNSSet>
	RNSSet(&rns, RNS_B_LEFT_VEL_SATEU, 1.0, 1.0 / 7.91, 19999.0);
 800ae62:	a361      	add	r3, pc, #388	; (adr r3, 800afe8 <RNS_config+0x260>)
 800ae64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae6c:	a364      	add	r3, pc, #400	; (adr r3, 800b000 <RNS_config+0x278>)
 800ae6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae72:	e9cd 2300 	strd	r2, r3, [sp]
 800ae76:	f04f 0200 	mov.w	r2, #0
 800ae7a:	4b71      	ldr	r3, [pc, #452]	; (800b040 <RNS_config+0x2b8>)
 800ae7c:	212d      	movs	r1, #45	; 0x2d
 800ae7e:	486e      	ldr	r0, [pc, #440]	; (800b038 <RNS_config+0x2b0>)
 800ae80:	f7fe fc3c 	bl	80096fc <RNSSet>
	RNSSet(&rns, RNS_B_RIGHT_VEL_SATEU, 1.0, 1.0 / 7.79, 19999.0);
 800ae84:	a358      	add	r3, pc, #352	; (adr r3, 800afe8 <RNS_config+0x260>)
 800ae86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae8e:	a35e      	add	r3, pc, #376	; (adr r3, 800b008 <RNS_config+0x280>)
 800ae90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae94:	e9cd 2300 	strd	r2, r3, [sp]
 800ae98:	f04f 0200 	mov.w	r2, #0
 800ae9c:	4b68      	ldr	r3, [pc, #416]	; (800b040 <RNS_config+0x2b8>)
 800ae9e:	212e      	movs	r1, #46	; 0x2e
 800aea0:	4865      	ldr	r0, [pc, #404]	; (800b038 <RNS_config+0x2b0>)
 800aea2:	f7fe fc2b 	bl	80096fc <RNSSet>

	RNSSet(&rns, RNS_F_LEFT_VEL_PID, 1.0, 1.5, 0.001);   //
 800aea6:	a35a      	add	r3, pc, #360	; (adr r3, 800b010 <RNS_config+0x288>)
 800aea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aeb0:	f04f 0200 	mov.w	r2, #0
 800aeb4:	4b63      	ldr	r3, [pc, #396]	; (800b044 <RNS_config+0x2bc>)
 800aeb6:	e9cd 2300 	strd	r2, r3, [sp]
 800aeba:	f04f 0200 	mov.w	r2, #0
 800aebe:	4b60      	ldr	r3, [pc, #384]	; (800b040 <RNS_config+0x2b8>)
 800aec0:	212f      	movs	r1, #47	; 0x2f
 800aec2:	485d      	ldr	r0, [pc, #372]	; (800b038 <RNS_config+0x2b0>)
 800aec4:	f7fe fc1a 	bl	80096fc <RNSSet>
	RNSSet(&rns, RNS_F_RIGHT_VEL_PID, 1.0, 1.5, 0.001);   //
 800aec8:	a351      	add	r3, pc, #324	; (adr r3, 800b010 <RNS_config+0x288>)
 800aeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aece:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aed2:	f04f 0200 	mov.w	r2, #0
 800aed6:	4b5b      	ldr	r3, [pc, #364]	; (800b044 <RNS_config+0x2bc>)
 800aed8:	e9cd 2300 	strd	r2, r3, [sp]
 800aedc:	f04f 0200 	mov.w	r2, #0
 800aee0:	4b57      	ldr	r3, [pc, #348]	; (800b040 <RNS_config+0x2b8>)
 800aee2:	2130      	movs	r1, #48	; 0x30
 800aee4:	4854      	ldr	r0, [pc, #336]	; (800b038 <RNS_config+0x2b0>)
 800aee6:	f7fe fc09 	bl	80096fc <RNSSet>
	RNSSet(&rns, RNS_B_LEFT_VEL_PID, 1.0, 1.5, 0.001);   //
 800aeea:	a349      	add	r3, pc, #292	; (adr r3, 800b010 <RNS_config+0x288>)
 800aeec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aef4:	f04f 0200 	mov.w	r2, #0
 800aef8:	4b52      	ldr	r3, [pc, #328]	; (800b044 <RNS_config+0x2bc>)
 800aefa:	e9cd 2300 	strd	r2, r3, [sp]
 800aefe:	f04f 0200 	mov.w	r2, #0
 800af02:	4b4f      	ldr	r3, [pc, #316]	; (800b040 <RNS_config+0x2b8>)
 800af04:	2131      	movs	r1, #49	; 0x31
 800af06:	484c      	ldr	r0, [pc, #304]	; (800b038 <RNS_config+0x2b0>)
 800af08:	f7fe fbf8 	bl	80096fc <RNSSet>
	RNSSet(&rns, RNS_B_RIGHT_VEL_PID, 1.0, 1.5, 0.001);   //
 800af0c:	a340      	add	r3, pc, #256	; (adr r3, 800b010 <RNS_config+0x288>)
 800af0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af12:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af16:	f04f 0200 	mov.w	r2, #0
 800af1a:	4b4a      	ldr	r3, [pc, #296]	; (800b044 <RNS_config+0x2bc>)
 800af1c:	e9cd 2300 	strd	r2, r3, [sp]
 800af20:	f04f 0200 	mov.w	r2, #0
 800af24:	4b46      	ldr	r3, [pc, #280]	; (800b040 <RNS_config+0x2b8>)
 800af26:	2132      	movs	r1, #50	; 0x32
 800af28:	4843      	ldr	r0, [pc, #268]	; (800b038 <RNS_config+0x2b0>)
 800af2a:	f7fe fbe7 	bl	80096fc <RNSSet>

	RNSSet(&rns, RNS_PPInit); //Path Planning
 800af2e:	2116      	movs	r1, #22
 800af30:	4841      	ldr	r0, [pc, #260]	; (800b038 <RNS_config+0x2b0>)
 800af32:	f7fe fbe3 	bl	80096fc <RNSSet>
	RNSSet(&rns, RNS_PPPathPID, 1.0, 0.5, 0.5);
 800af36:	f04f 0200 	mov.w	r2, #0
 800af3a:	4b43      	ldr	r3, [pc, #268]	; (800b048 <RNS_config+0x2c0>)
 800af3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af40:	f04f 0200 	mov.w	r2, #0
 800af44:	4b40      	ldr	r3, [pc, #256]	; (800b048 <RNS_config+0x2c0>)
 800af46:	e9cd 2300 	strd	r2, r3, [sp]
 800af4a:	f04f 0200 	mov.w	r2, #0
 800af4e:	4b3c      	ldr	r3, [pc, #240]	; (800b040 <RNS_config+0x2b8>)
 800af50:	2146      	movs	r1, #70	; 0x46
 800af52:	4839      	ldr	r0, [pc, #228]	; (800b038 <RNS_config+0x2b0>)
 800af54:	f7fe fbd2 	bl	80096fc <RNSSet>
	RNSSet(&rns, RNS_PPEndPID, 0.5, 0.1, 0.7);
 800af58:	a32f      	add	r3, pc, #188	; (adr r3, 800b018 <RNS_config+0x290>)
 800af5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af62:	a32f      	add	r3, pc, #188	; (adr r3, 800b020 <RNS_config+0x298>)
 800af64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af68:	e9cd 2300 	strd	r2, r3, [sp]
 800af6c:	f04f 0200 	mov.w	r2, #0
 800af70:	4b35      	ldr	r3, [pc, #212]	; (800b048 <RNS_config+0x2c0>)
 800af72:	2147      	movs	r1, #71	; 0x47
 800af74:	4830      	ldr	r0, [pc, #192]	; (800b038 <RNS_config+0x2b0>)
 800af76:	f7fe fbc1 	bl	80096fc <RNSSet>
	RNSSet(&rns, RNS_PPZPID, 0.5, 0.05, 0.2, 5.5);
 800af7a:	f04f 0200 	mov.w	r2, #0
 800af7e:	4b33      	ldr	r3, [pc, #204]	; (800b04c <RNS_config+0x2c4>)
 800af80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af84:	a328      	add	r3, pc, #160	; (adr r3, 800b028 <RNS_config+0x2a0>)
 800af86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af8e:	a328      	add	r3, pc, #160	; (adr r3, 800b030 <RNS_config+0x2a8>)
 800af90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af94:	e9cd 2300 	strd	r2, r3, [sp]
 800af98:	f04f 0200 	mov.w	r2, #0
 800af9c:	4b2a      	ldr	r3, [pc, #168]	; (800b048 <RNS_config+0x2c0>)
 800af9e:	214f      	movs	r1, #79	; 0x4f
 800afa0:	4825      	ldr	r0, [pc, #148]	; (800b038 <RNS_config+0x2b0>)
 800afa2:	f7fe fbab 	bl	80096fc <RNSSet>
	RNSSet(&rns, RNS_PPSetCRV_PTS, 10.0); // Change No. of Points in the Curved Path
 800afa6:	f04f 0200 	mov.w	r2, #0
 800afaa:	4b29      	ldr	r3, [pc, #164]	; (800b050 <RNS_config+0x2c8>)
 800afac:	211d      	movs	r1, #29
 800afae:	4822      	ldr	r0, [pc, #136]	; (800b038 <RNS_config+0x2b0>)
 800afb0:	f7fe fba4 	bl	80096fc <RNSSet>
}
 800afb4:	bf00      	nop
 800afb6:	3708      	adds	r7, #8
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	f3af 8000 	nop.w
 800afc0:	b9727cf5 	.word	0xb9727cf5
 800afc4:	3f049766 	.word	0x3f049766
 800afc8:	a0000000 	.word	0xa0000000
 800afcc:	3f564e14 	.word	0x3f564e14
 800afd0:	d7a1868c 	.word	0xd7a1868c
 800afd4:	3ff1f604 	.word	0x3ff1f604
 800afd8:	00000000 	.word	0x00000000
 800afdc:	3f58fd94 	.word	0x3f58fd94
 800afe0:	7c2c0ed1 	.word	0x7c2c0ed1
 800afe4:	3ff00652 	.word	0x3ff00652
 800afe8:	00000000 	.word	0x00000000
 800afec:	40d387c0 	.word	0x40d387c0
 800aff0:	6b29aca7 	.word	0x6b29aca7
 800aff4:	3fc29aca 	.word	0x3fc29aca
 800aff8:	dd1e2705 	.word	0xdd1e2705
 800affc:	3fbd8faa 	.word	0x3fbd8faa
 800b000:	b34c0e3d 	.word	0xb34c0e3d
 800b004:	3fc02e9a 	.word	0x3fc02e9a
 800b008:	21d938da 	.word	0x21d938da
 800b00c:	3fc06e6b 	.word	0x3fc06e6b
 800b010:	d2f1a9fc 	.word	0xd2f1a9fc
 800b014:	3f50624d 	.word	0x3f50624d
 800b018:	66666666 	.word	0x66666666
 800b01c:	3fe66666 	.word	0x3fe66666
 800b020:	9999999a 	.word	0x9999999a
 800b024:	3fb99999 	.word	0x3fb99999
 800b028:	9999999a 	.word	0x9999999a
 800b02c:	3fc99999 	.word	0x3fc99999
 800b030:	9999999a 	.word	0x9999999a
 800b034:	3fa99999 	.word	0x3fa99999
 800b038:	20008f08 	.word	0x20008f08
 800b03c:	402a0000 	.word	0x402a0000
 800b040:	3ff00000 	.word	0x3ff00000
 800b044:	3ff80000 	.word	0x3ff80000
 800b048:	3fe00000 	.word	0x3fe00000
 800b04c:	40160000 	.word	0x40160000
 800b050:	40240000 	.word	0x40240000

0800b054 <RobotStart>:
	}

}

void RobotStart()
{
 800b054:	b480      	push	{r7}
 800b056:	af00      	add	r7, sp, #0
	before = 0;
 800b058:	4b33      	ldr	r3, [pc, #204]	; (800b128 <RobotStart+0xd4>)
 800b05a:	2200      	movs	r2, #0
 800b05c:	601a      	str	r2, [r3, #0]
	mode = 1;
 800b05e:	4b33      	ldr	r3, [pc, #204]	; (800b12c <RobotStart+0xd8>)
 800b060:	2201      	movs	r2, #1
 800b062:	601a      	str	r2, [r3, #0]
	servo_close_once = 0;
 800b064:	4b32      	ldr	r3, [pc, #200]	; (800b130 <RobotStart+0xdc>)
 800b066:	2200      	movs	r2, #0
 800b068:	601a      	str	r2, [r3, #0]
	shoot_done = 0;
 800b06a:	4b32      	ldr	r3, [pc, #200]	; (800b134 <RobotStart+0xe0>)
 800b06c:	2200      	movs	r2, #0
 800b06e:	601a      	str	r2, [r3, #0]
	shoot_start = 0;
 800b070:	4b31      	ldr	r3, [pc, #196]	; (800b138 <RobotStart+0xe4>)
 800b072:	2200      	movs	r2, #0
 800b074:	601a      	str	r2, [r3, #0]
	pick_start = 0;
 800b076:	4b31      	ldr	r3, [pc, #196]	; (800b13c <RobotStart+0xe8>)
 800b078:	2200      	movs	r2, #0
 800b07a:	601a      	str	r2, [r3, #0]
	Robot_Pitch = PITCH45;
 800b07c:	4b30      	ldr	r3, [pc, #192]	; (800b140 <RobotStart+0xec>)
 800b07e:	2200      	movs	r2, #0
 800b080:	701a      	strb	r2, [r3, #0]
	blue = 1;
 800b082:	4b30      	ldr	r3, [pc, #192]	; (800b144 <RobotStart+0xf0>)
 800b084:	2201      	movs	r2, #1
 800b086:	601a      	str	r2, [r3, #0]
	set_pitch = 0;
 800b088:	4b2f      	ldr	r3, [pc, #188]	; (800b148 <RobotStart+0xf4>)
 800b08a:	2200      	movs	r2, #0
 800b08c:	601a      	str	r2, [r3, #0]
	picked_left = 0;
 800b08e:	4b2f      	ldr	r3, [pc, #188]	; (800b14c <RobotStart+0xf8>)
 800b090:	2200      	movs	r2, #0
 800b092:	601a      	str	r2, [r3, #0]
	picked_right = 0;
 800b094:	4b2e      	ldr	r3, [pc, #184]	; (800b150 <RobotStart+0xfc>)
 800b096:	2200      	movs	r2, #0
 800b098:	601a      	str	r2, [r3, #0]
	cylinder_retract;
 800b09a:	4a2e      	ldr	r2, [pc, #184]	; (800b154 <RobotStart+0x100>)
 800b09c:	7f13      	ldrb	r3, [r2, #28]
 800b09e:	f36f 1386 	bfc	r3, #6, #1
 800b0a2:	7713      	strb	r3, [r2, #28]
	set_pick_enc = 0;
 800b0a4:	4b2c      	ldr	r3, [pc, #176]	; (800b158 <RobotStart+0x104>)
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	601a      	str	r2, [r3, #0]
	up_done = 0;
 800b0aa:	4b2c      	ldr	r3, [pc, #176]	; (800b15c <RobotStart+0x108>)
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	601a      	str	r2, [r3, #0]
	pick_tol = 100;
 800b0b0:	4b2b      	ldr	r3, [pc, #172]	; (800b160 <RobotStart+0x10c>)
 800b0b2:	2264      	movs	r2, #100	; 0x64
 800b0b4:	601a      	str	r2, [r3, #0]
	vel_adjust = 0;
 800b0b6:	4b2b      	ldr	r3, [pc, #172]	; (800b164 <RobotStart+0x110>)
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	601a      	str	r2, [r3, #0]
	reload = 0;
 800b0bc:	4b2a      	ldr	r3, [pc, #168]	; (800b168 <RobotStart+0x114>)
 800b0be:	2200      	movs	r2, #0
 800b0c0:	601a      	str	r2, [r3, #0]
	load_stop_once = 0;
 800b0c2:	4b2a      	ldr	r3, [pc, #168]	; (800b16c <RobotStart+0x118>)
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	601a      	str	r2, [r3, #0]
	load_start = 0;
 800b0c8:	4b29      	ldr	r3, [pc, #164]	; (800b170 <RobotStart+0x11c>)
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	601a      	str	r2, [r3, #0]
	wait_load = 0;
 800b0ce:	4b29      	ldr	r3, [pc, #164]	; (800b174 <RobotStart+0x120>)
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	601a      	str	r2, [r3, #0]
	wheel = 1;
 800b0d4:	4b28      	ldr	r3, [pc, #160]	; (800b178 <RobotStart+0x124>)
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	601a      	str	r2, [r3, #0]
	loaded = 0;
 800b0da:	4b28      	ldr	r3, [pc, #160]	; (800b17c <RobotStart+0x128>)
 800b0dc:	2200      	movs	r2, #0
 800b0de:	601a      	str	r2, [r3, #0]
	led_enb = 0;
 800b0e0:	4b27      	ldr	r3, [pc, #156]	; (800b180 <RobotStart+0x12c>)
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	601a      	str	r2, [r3, #0]
	pick_enc_buf = 0;
 800b0e6:	4b27      	ldr	r3, [pc, #156]	; (800b184 <RobotStart+0x130>)
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	601a      	str	r2, [r3, #0]
	vesc_speed = 0;
 800b0ec:	4b26      	ldr	r3, [pc, #152]	; (800b188 <RobotStart+0x134>)
 800b0ee:	f04f 0200 	mov.w	r2, #0
 800b0f2:	601a      	str	r2, [r3, #0]
	stick_fence = 0;
 800b0f4:	4b25      	ldr	r3, [pc, #148]	; (800b18c <RobotStart+0x138>)
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	601a      	str	r2, [r3, #0]
	pick_left_manual = 0;
 800b0fa:	4b25      	ldr	r3, [pc, #148]	; (800b190 <RobotStart+0x13c>)
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	601a      	str	r2, [r3, #0]
	load_adjust = 1;
 800b100:	4b24      	ldr	r3, [pc, #144]	; (800b194 <RobotStart+0x140>)
 800b102:	2201      	movs	r2, #1
 800b104:	601a      	str	r2, [r3, #0]
	adjust_count = 0;
 800b106:	4b24      	ldr	r3, [pc, #144]	; (800b198 <RobotStart+0x144>)
 800b108:	2200      	movs	r2, #0
 800b10a:	601a      	str	r2, [r3, #0]
	type_3_done = 0;
 800b10c:	4b23      	ldr	r3, [pc, #140]	; (800b19c <RobotStart+0x148>)
 800b10e:	2200      	movs	r2, #0
 800b110:	601a      	str	r2, [r3, #0]
	pick_0 = 0;
 800b112:	4b23      	ldr	r3, [pc, #140]	; (800b1a0 <RobotStart+0x14c>)
 800b114:	2200      	movs	r2, #0
 800b116:	601a      	str	r2, [r3, #0]
	cylinder_load_once = 0;
 800b118:	4b22      	ldr	r3, [pc, #136]	; (800b1a4 <RobotStart+0x150>)
 800b11a:	2200      	movs	r2, #0
 800b11c:	601a      	str	r2, [r3, #0]
}
 800b11e:	bf00      	nop
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr
 800b128:	2000729c 	.word	0x2000729c
 800b12c:	200092d0 	.word	0x200092d0
 800b130:	20009868 	.word	0x20009868
 800b134:	20008f7c 	.word	0x20008f7c
 800b138:	200092cc 	.word	0x200092cc
 800b13c:	20007858 	.word	0x20007858
 800b140:	20009672 	.word	0x20009672
 800b144:	20006a1c 	.word	0x20006a1c
 800b148:	2000965c 	.word	0x2000965c
 800b14c:	200097fc 	.word	0x200097fc
 800b150:	20007214 	.word	0x20007214
 800b154:	2000959c 	.word	0x2000959c
 800b158:	20007730 	.word	0x20007730
 800b15c:	20007860 	.word	0x20007860
 800b160:	200072b4 	.word	0x200072b4
 800b164:	20009028 	.word	0x20009028
 800b168:	2000774c 	.word	0x2000774c
 800b16c:	20009978 	.word	0x20009978
 800b170:	20007348 	.word	0x20007348
 800b174:	20007484 	.word	0x20007484
 800b178:	200064dc 	.word	0x200064dc
 800b17c:	20009428 	.word	0x20009428
 800b180:	2000a5e0 	.word	0x2000a5e0
 800b184:	20009c40 	.word	0x20009c40
 800b188:	2000659c 	.word	0x2000659c
 800b18c:	200072bc 	.word	0x200072bc
 800b190:	200099a8 	.word	0x200099a8
 800b194:	2000943c 	.word	0x2000943c
 800b198:	20009474 	.word	0x20009474
 800b19c:	20009434 	.word	0x20009434
 800b1a0:	20009d90 	.word	0x20009d90
 800b1a4:	2000a570 	.word	0x2000a570

0800b1a8 <NormalControl>:

void NormalControl()
{
 800b1a8:	b5b0      	push	{r4, r5, r7, lr}
 800b1aa:	b096      	sub	sp, #88	; 0x58
 800b1ac:	af00      	add	r7, sp, #0
	// Cylinder
	if (ps4.button == OPTION)
 800b1ae:	4b8f      	ldr	r3, [pc, #572]	; (800b3ec <NormalControl+0x244>)
 800b1b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1b6:	d10a      	bne.n	800b1ce <NormalControl+0x26>
	{
		while (ps4.button == OPTION);
 800b1b8:	bf00      	nop
 800b1ba:	4b8c      	ldr	r3, [pc, #560]	; (800b3ec <NormalControl+0x244>)
 800b1bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1c2:	d0fa      	beq.n	800b1ba <NormalControl+0x12>
		ResetPickEnc();
 800b1c4:	f001 f8fa 	bl	800c3bc <ResetPickEnc>
		mode = AUTO;
 800b1c8:	4b89      	ldr	r3, [pc, #548]	; (800b3f0 <NormalControl+0x248>)
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	601a      	str	r2, [r3, #0]
//		pick_0 = 1;
//		pick_down;
	}

	// Cylinder
	if (ps4.button == TRIANGLE)
 800b1ce:	4b87      	ldr	r3, [pc, #540]	; (800b3ec <NormalControl+0x244>)
 800b1d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1d6:	d11e      	bne.n	800b216 <NormalControl+0x6e>
	{
		while (ps4.button == TRIANGLE);
 800b1d8:	bf00      	nop
 800b1da:	4b84      	ldr	r3, [pc, #528]	; (800b3ec <NormalControl+0x244>)
 800b1dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1e2:	d0fa      	beq.n	800b1da <NormalControl+0x32>
//			cylinder_load;
//			counter = 0;
//		}
//		LidarSendIns(NEAR, &lidar);
//		ResetCoordinate();
		ResetCoordinate();
 800b1e4:	f001 f8da 	bl	800c39c <ResetCoordinate>
		lidar.pos = POS_PENDING;
 800b1e8:	4b82      	ldr	r3, [pc, #520]	; (800b3f4 <NormalControl+0x24c>)
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar.pos_counter = POS_PENDING;
 800b1f0:	4b80      	ldr	r3, [pc, #512]	; (800b3f4 <NormalControl+0x24c>)
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		pick_right = 1;
 800b1f8:	4b7f      	ldr	r3, [pc, #508]	; (800b3f8 <NormalControl+0x250>)
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	601a      	str	r2, [r3, #0]
		vesc_speed = 4;
 800b1fe:	4b7f      	ldr	r3, [pc, #508]	; (800b3fc <NormalControl+0x254>)
 800b200:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800b204:	601a      	str	r2, [r3, #0]
		cylinder_retract;
 800b206:	4a7e      	ldr	r2, [pc, #504]	; (800b400 <NormalControl+0x258>)
 800b208:	7f13      	ldrb	r3, [r2, #28]
 800b20a:	f36f 1386 	bfc	r3, #6, #1
 800b20e:	7713      	strb	r3, [r2, #28]
		mode = AUTO;
 800b210:	4b77      	ldr	r3, [pc, #476]	; (800b3f0 <NormalControl+0x248>)
 800b212:	2201      	movs	r2, #1
 800b214:	601a      	str	r2, [r3, #0]
	}

	// Servo
	if(ps4.button == SQUARE)
 800b216:	4b75      	ldr	r3, [pc, #468]	; (800b3ec <NormalControl+0x244>)
 800b218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b21a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b21e:	d123      	bne.n	800b268 <NormalControl+0xc0>
	{
		while(ps4.button == SQUARE);
 800b220:	bf00      	nop
 800b222:	4b72      	ldr	r3, [pc, #456]	; (800b3ec <NormalControl+0x244>)
 800b224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b22a:	d0fa      	beq.n	800b222 <NormalControl+0x7a>
		if(!pp.pp_start)
 800b22c:	4b75      	ldr	r3, [pc, #468]	; (800b404 <NormalControl+0x25c>)
 800b22e:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b232:	f003 0301 	and.w	r3, r3, #1
 800b236:	b2db      	uxtb	r3, r3
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d112      	bne.n	800b262 <NormalControl+0xba>
		{
			static int counter = 0;

			if(counter == 0)
 800b23c:	4b72      	ldr	r3, [pc, #456]	; (800b408 <NormalControl+0x260>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d108      	bne.n	800b256 <NormalControl+0xae>
			{
				counter++;
 800b244:	4b70      	ldr	r3, [pc, #448]	; (800b408 <NormalControl+0x260>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	3301      	adds	r3, #1
 800b24a:	4a6f      	ldr	r2, [pc, #444]	; (800b408 <NormalControl+0x260>)
 800b24c:	6013      	str	r3, [r2, #0]
				blue = 0;
 800b24e:	4b6f      	ldr	r3, [pc, #444]	; (800b40c <NormalControl+0x264>)
 800b250:	2200      	movs	r2, #0
 800b252:	601a      	str	r2, [r3, #0]
 800b254:	e005      	b.n	800b262 <NormalControl+0xba>
			}
			else
			{
				blue = 1;
 800b256:	4b6d      	ldr	r3, [pc, #436]	; (800b40c <NormalControl+0x264>)
 800b258:	2201      	movs	r2, #1
 800b25a:	601a      	str	r2, [r3, #0]
				counter = 0;
 800b25c:	4b6a      	ldr	r3, [pc, #424]	; (800b408 <NormalControl+0x260>)
 800b25e:	2200      	movs	r2, #0
 800b260:	601a      	str	r2, [r3, #0]
			}
		}
		mode = AUTO;
 800b262:	4b63      	ldr	r3, [pc, #396]	; (800b3f0 <NormalControl+0x248>)
 800b264:	2201      	movs	r2, #1
 800b266:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == UP)
 800b268:	4b60      	ldr	r3, [pc, #384]	; (800b3ec <NormalControl+0x244>)
 800b26a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b26c:	2b10      	cmp	r3, #16
 800b26e:	d112      	bne.n	800b296 <NormalControl+0xee>
	{
		while(ps4.button == UP);
 800b270:	bf00      	nop
 800b272:	4b5e      	ldr	r3, [pc, #376]	; (800b3ec <NormalControl+0x244>)
 800b274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b276:	2b10      	cmp	r3, #16
 800b278:	d0fb      	beq.n	800b272 <NormalControl+0xca>
		if(type_3_done)
 800b27a:	4b65      	ldr	r3, [pc, #404]	; (800b410 <NormalControl+0x268>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d003      	beq.n	800b28a <NormalControl+0xe2>
			type_3_done = 0;
 800b282:	4b63      	ldr	r3, [pc, #396]	; (800b410 <NormalControl+0x268>)
 800b284:	2200      	movs	r2, #0
 800b286:	601a      	str	r2, [r3, #0]
 800b288:	e002      	b.n	800b290 <NormalControl+0xe8>
		else
			type_3_done = 1;
 800b28a:	4b61      	ldr	r3, [pc, #388]	; (800b410 <NormalControl+0x268>)
 800b28c:	2201      	movs	r2, #1
 800b28e:	601a      	str	r2, [r3, #0]
		mode = AUTO;
 800b290:	4b57      	ldr	r3, [pc, #348]	; (800b3f0 <NormalControl+0x248>)
 800b292:	2201      	movs	r2, #1
 800b294:	601a      	str	r2, [r3, #0]
	}

	// Shoot
	if(ps4.button == CROSS)
 800b296:	4b55      	ldr	r3, [pc, #340]	; (800b3ec <NormalControl+0x244>)
 800b298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b29a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b29e:	d13d      	bne.n	800b31c <NormalControl+0x174>
	{
		while(ps4.button == CROSS);
 800b2a0:	bf00      	nop
 800b2a2:	4b52      	ldr	r3, [pc, #328]	; (800b3ec <NormalControl+0x244>)
 800b2a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2aa:	d0fa      	beq.n	800b2a2 <NormalControl+0xfa>
		static int counter = 0;

		if(counter == 0)
 800b2ac:	4b59      	ldr	r3, [pc, #356]	; (800b414 <NormalControl+0x26c>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d11b      	bne.n	800b2ec <NormalControl+0x144>
		{
			lidar.pos = CENTER_4;
 800b2b4:	4b4f      	ldr	r3, [pc, #316]	; (800b3f4 <NormalControl+0x24c>)
 800b2b6:	2207      	movs	r2, #7
 800b2b8:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
			lidar.pos_counter = CENTER_4;
 800b2bc:	4b4d      	ldr	r3, [pc, #308]	; (800b3f4 <NormalControl+0x24c>)
 800b2be:	2207      	movs	r2, #7
 800b2c0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			vesc_duty = type1Duty;
 800b2c4:	4b54      	ldr	r3, [pc, #336]	; (800b418 <NormalControl+0x270>)
 800b2c6:	4a55      	ldr	r2, [pc, #340]	; (800b41c <NormalControl+0x274>)
 800b2c8:	601a      	str	r2, [r3, #0]
			vesc_speed = type1;
 800b2ca:	4b4c      	ldr	r3, [pc, #304]	; (800b3fc <NormalControl+0x254>)
 800b2cc:	4a54      	ldr	r2, [pc, #336]	; (800b420 <NormalControl+0x278>)
 800b2ce:	601a      	str	r2, [r3, #0]
			led7_on;
 800b2d0:	4b54      	ldr	r3, [pc, #336]	; (800b424 <NormalControl+0x27c>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800b2d8:	63da      	str	r2, [r3, #60]	; 0x3c
			mode = AUTO;
 800b2da:	4b45      	ldr	r3, [pc, #276]	; (800b3f0 <NormalControl+0x248>)
 800b2dc:	2201      	movs	r2, #1
 800b2de:	601a      	str	r2, [r3, #0]
			counter++;
 800b2e0:	4b4c      	ldr	r3, [pc, #304]	; (800b414 <NormalControl+0x26c>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	4a4b      	ldr	r2, [pc, #300]	; (800b414 <NormalControl+0x26c>)
 800b2e8:	6013      	str	r3, [r2, #0]
 800b2ea:	e017      	b.n	800b31c <NormalControl+0x174>
		}
		else
		{
			lidar.pos = CENTER_1;
 800b2ec:	4b41      	ldr	r3, [pc, #260]	; (800b3f4 <NormalControl+0x24c>)
 800b2ee:	2203      	movs	r2, #3
 800b2f0:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
			lidar.pos_counter = CENTER_1;
 800b2f4:	4b3f      	ldr	r3, [pc, #252]	; (800b3f4 <NormalControl+0x24c>)
 800b2f6:	2203      	movs	r2, #3
 800b2f8:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			led7_off;
 800b2fc:	4b49      	ldr	r3, [pc, #292]	; (800b424 <NormalControl+0x27c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2200      	movs	r2, #0
 800b302:	63da      	str	r2, [r3, #60]	; 0x3c
			vesc_speed = type1;
 800b304:	4b3d      	ldr	r3, [pc, #244]	; (800b3fc <NormalControl+0x254>)
 800b306:	4a46      	ldr	r2, [pc, #280]	; (800b420 <NormalControl+0x278>)
 800b308:	601a      	str	r2, [r3, #0]
			vesc_duty = type1Duty;
 800b30a:	4b43      	ldr	r3, [pc, #268]	; (800b418 <NormalControl+0x270>)
 800b30c:	4a43      	ldr	r2, [pc, #268]	; (800b41c <NormalControl+0x274>)
 800b30e:	601a      	str	r2, [r3, #0]
			mode = AUTO;
 800b310:	4b37      	ldr	r3, [pc, #220]	; (800b3f0 <NormalControl+0x248>)
 800b312:	2201      	movs	r2, #1
 800b314:	601a      	str	r2, [r3, #0]
			counter = 0;
 800b316:	4b3f      	ldr	r3, [pc, #252]	; (800b414 <NormalControl+0x26c>)
 800b318:	2200      	movs	r2, #0
 800b31a:	601a      	str	r2, [r3, #0]
		}
	}

	// Fly wheel
	if(ps4.button == CIRCLE)
 800b31c:	4b33      	ldr	r3, [pc, #204]	; (800b3ec <NormalControl+0x244>)
 800b31e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b324:	d113      	bne.n	800b34e <NormalControl+0x1a6>
	{
		while(ps4.button == CIRCLE);
 800b326:	bf00      	nop
 800b328:	4b30      	ldr	r3, [pc, #192]	; (800b3ec <NormalControl+0x244>)
 800b32a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b32c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b330:	d0fa      	beq.n	800b328 <NormalControl+0x180>
//			vesc_duty = 0;
//			VESCStop(&vesc1);
//			VESCStop(&vesc2);
//			counter = 0;
//		}
		if(MODN.orientation == OPERATOR_TURNED_90_DEGREES_ANTICLOCKWISE)
 800b332:	4b3d      	ldr	r3, [pc, #244]	; (800b428 <NormalControl+0x280>)
 800b334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b336:	2b03      	cmp	r3, #3
 800b338:	d103      	bne.n	800b342 <NormalControl+0x19a>
			setOrientationMODN(OPERATOR_TURNED_0_DEGREE);
 800b33a:	2000      	movs	r0, #0
 800b33c:	f7f9 fc48 	bl	8004bd0 <setOrientationMODN>
 800b340:	e002      	b.n	800b348 <NormalControl+0x1a0>
		else
			setOrientationMODN(OPERATOR_TURNED_90_DEGREES_ANTICLOCKWISE);
 800b342:	2003      	movs	r0, #3
 800b344:	f7f9 fc44 	bl	8004bd0 <setOrientationMODN>
		mode = AUTO;
 800b348:	4b29      	ldr	r3, [pc, #164]	; (800b3f0 <NormalControl+0x248>)
 800b34a:	2201      	movs	r2, #1
 800b34c:	601a      	str	r2, [r3, #0]
//		setPick(800);
//		open_servo;
	}

	if(ps4.button == RIGHT)
 800b34e:	4b27      	ldr	r3, [pc, #156]	; (800b3ec <NormalControl+0x244>)
 800b350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b352:	2b20      	cmp	r3, #32
 800b354:	d11b      	bne.n	800b38e <NormalControl+0x1e6>
	{
		while(ps4.button == RIGHT);
 800b356:	bf00      	nop
 800b358:	4b24      	ldr	r3, [pc, #144]	; (800b3ec <NormalControl+0x244>)
 800b35a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b35c:	2b20      	cmp	r3, #32
 800b35e:	d0fb      	beq.n	800b358 <NormalControl+0x1b0>
		static int counter = 0;
		counter++;
 800b360:	4b32      	ldr	r3, [pc, #200]	; (800b42c <NormalControl+0x284>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	3301      	adds	r3, #1
 800b366:	4a31      	ldr	r2, [pc, #196]	; (800b42c <NormalControl+0x284>)
 800b368:	6013      	str	r3, [r2, #0]

		if(counter == 1)
 800b36a:	4b30      	ldr	r3, [pc, #192]	; (800b42c <NormalControl+0x284>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d105      	bne.n	800b37e <NormalControl+0x1d6>
		{
			open_servo;
 800b372:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800b376:	482e      	ldr	r0, [pc, #184]	; (800b430 <NormalControl+0x288>)
 800b378:	f7fe fd32 	bl	8009de0 <ServoSetPulse>
 800b37c:	e007      	b.n	800b38e <NormalControl+0x1e6>
		}
		else
		{
			close_servo;
 800b37e:	f240 3152 	movw	r1, #850	; 0x352
 800b382:	482b      	ldr	r0, [pc, #172]	; (800b430 <NormalControl+0x288>)
 800b384:	f7fe fd2c 	bl	8009de0 <ServoSetPulse>
			counter = 0;
 800b388:	4b28      	ldr	r3, [pc, #160]	; (800b42c <NormalControl+0x284>)
 800b38a:	2200      	movs	r2, #0
 800b38c:	601a      	str	r2, [r3, #0]
		}
	}

	if(ps4.button == LEFT)
 800b38e:	4b17      	ldr	r3, [pc, #92]	; (800b3ec <NormalControl+0x244>)
 800b390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b392:	2b80      	cmp	r3, #128	; 0x80
 800b394:	f040 8114 	bne.w	800b5c0 <NormalControl+0x418>
	{
		while(ps4.button == LEFT);
 800b398:	bf00      	nop
 800b39a:	4b14      	ldr	r3, [pc, #80]	; (800b3ec <NormalControl+0x244>)
 800b39c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b39e:	2b80      	cmp	r3, #128	; 0x80
 800b3a0:	d0fb      	beq.n	800b39a <NormalControl+0x1f2>
//		else
//			pick_right = 1;

//		pick_left = 1;
//		pick_left_manual = 1;
		ResetCoordinate();
 800b3a2:	f000 fffb 	bl	800c39c <ResetCoordinate>
		lidar.pos = PICK_LEFT;
 800b3a6:	4b13      	ldr	r3, [pc, #76]	; (800b3f4 <NormalControl+0x24c>)
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar.pos_counter = PICK_LEFT;
 800b3ae:	4b11      	ldr	r3, [pc, #68]	; (800b3f4 <NormalControl+0x24c>)
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		cylinder_retract;
 800b3b6:	4a12      	ldr	r2, [pc, #72]	; (800b400 <NormalControl+0x258>)
 800b3b8:	7f13      	ldrb	r3, [r2, #28]
 800b3ba:	f36f 1386 	bfc	r3, #6, #1
 800b3be:	7713      	strb	r3, [r2, #28]
		vesc_speed = 4;
 800b3c0:	4b0e      	ldr	r3, [pc, #56]	; (800b3fc <NormalControl+0x254>)
 800b3c2:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800b3c6:	601a      	str	r2, [r3, #0]
		// Stick to fence
		float stick_fence_point[1][7] = {{2.0, 0.0, -5, 0, 0, 0, 0}};
 800b3c8:	4b1a      	ldr	r3, [pc, #104]	; (800b434 <NormalControl+0x28c>)
 800b3ca:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800b3ce:	461d      	mov	r5, r3
 800b3d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b3d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b3d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b3d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(stick_fence_point, 1, &pp);
 800b3dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b3e0:	4a08      	ldr	r2, [pc, #32]	; (800b404 <NormalControl+0x25c>)
 800b3e2:	2101      	movs	r1, #1
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7fa face 	bl	8005986 <PP_start>
		while(pp.pp_start)
 800b3ea:	e046      	b.n	800b47a <NormalControl+0x2d2>
 800b3ec:	2000a014 	.word	0x2000a014
 800b3f0:	200092d0 	.word	0x200092d0
 800b3f4:	20009030 	.word	0x20009030
 800b3f8:	2000a624 	.word	0x2000a624
 800b3fc:	2000659c 	.word	0x2000659c
 800b400:	2000959c 	.word	0x2000959c
 800b404:	20006cc4 	.word	0x20006cc4
 800b408:	200002d4 	.word	0x200002d4
 800b40c:	20006a1c 	.word	0x20006a1c
 800b410:	20009434 	.word	0x20009434
 800b414:	200002d8 	.word	0x200002d8
 800b418:	20007380 	.word	0x20007380
 800b41c:	3e2e147b 	.word	0x3e2e147b
 800b420:	40966666 	.word	0x40966666
 800b424:	20005ca8 	.word	0x20005ca8
 800b428:	20006a6c 	.word	0x20006a6c
 800b42c:	200002dc 	.word	0x200002dc
 800b430:	2000786c 	.word	0x2000786c
 800b434:	0801fd94 	.word	0x0801fd94
		{
			if(ps4.button == SQUARE)
 800b438:	4b7f      	ldr	r3, [pc, #508]	; (800b638 <NormalControl+0x490>)
 800b43a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b43c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b440:	d108      	bne.n	800b454 <NormalControl+0x2ac>
			{
				while(ps4.button == SQUARE);
 800b442:	bf00      	nop
 800b444:	4b7c      	ldr	r3, [pc, #496]	; (800b638 <NormalControl+0x490>)
 800b446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b44c:	d0fa      	beq.n	800b444 <NormalControl+0x29c>
				PP_stop(&pp);
 800b44e:	487b      	ldr	r0, [pc, #492]	; (800b63c <NormalControl+0x494>)
 800b450:	f7fa fcd3 	bl	8005dfa <PP_stop>
			}

			if(In_LS_Left_1 || In_LS_Left_2)
 800b454:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b458:	4879      	ldr	r0, [pc, #484]	; (800b640 <NormalControl+0x498>)
 800b45a:	f006 ff79 	bl	8012350 <HAL_GPIO_ReadPin>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d007      	beq.n	800b474 <NormalControl+0x2cc>
 800b464:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b468:	4875      	ldr	r0, [pc, #468]	; (800b640 <NormalControl+0x498>)
 800b46a:	f006 ff71 	bl	8012350 <HAL_GPIO_ReadPin>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d102      	bne.n	800b47a <NormalControl+0x2d2>
				PP_stop(&pp);
 800b474:	4871      	ldr	r0, [pc, #452]	; (800b63c <NormalControl+0x494>)
 800b476:	f7fa fcc0 	bl	8005dfa <PP_stop>
		while(pp.pp_start)
 800b47a:	4b70      	ldr	r3, [pc, #448]	; (800b63c <NormalControl+0x494>)
 800b47c:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b480:	f003 0301 	and.w	r3, r3, #1
 800b484:	b2db      	uxtb	r3, r3
 800b486:	2b00      	cmp	r3, #0
 800b488:	d1d6      	bne.n	800b438 <NormalControl+0x290>
		}
		pick_left = 0;
 800b48a:	4b6e      	ldr	r3, [pc, #440]	; (800b644 <NormalControl+0x49c>)
 800b48c:	2200      	movs	r2, #0
 800b48e:	601a      	str	r2, [r3, #0]
		picked_left = 1;
 800b490:	4b6d      	ldr	r3, [pc, #436]	; (800b648 <NormalControl+0x4a0>)
 800b492:	2201      	movs	r2, #1
 800b494:	601a      	str	r2, [r3, #0]

		setPick(0);
 800b496:	2000      	movs	r0, #0
 800b498:	f000 faba 	bl	800ba10 <setPick>
		ResetCoordinate();
 800b49c:	f000 ff7e 	bl	800c39c <ResetCoordinate>

		float pick_left_point[1][7] = {{3.3, -10, -1.5, 0, 0, 0, 0}};
 800b4a0:	4b6a      	ldr	r3, [pc, #424]	; (800b64c <NormalControl+0x4a4>)
 800b4a2:	f107 0420 	add.w	r4, r7, #32
 800b4a6:	461d      	mov	r5, r3
 800b4a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b4aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b4ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b4b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(pick_left_point, 1, &pp);
 800b4b4:	f107 0320 	add.w	r3, r7, #32
 800b4b8:	4a60      	ldr	r2, [pc, #384]	; (800b63c <NormalControl+0x494>)
 800b4ba:	2101      	movs	r1, #1
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f7fa fa62 	bl	8005986 <PP_start>
		while(pp.pp_start)
 800b4c2:	e039      	b.n	800b538 <NormalControl+0x390>
		{
			if(pp.real_x <= -0.3)
 800b4c4:	4b5d      	ldr	r3, [pc, #372]	; (800b63c <NormalControl+0x494>)
 800b4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7f5 f83d 	bl	8000548 <__aeabi_f2d>
 800b4ce:	a356      	add	r3, pc, #344	; (adr r3, 800b628 <NormalControl+0x480>)
 800b4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d4:	f7f5 fb0c 	bl	8000af0 <__aeabi_dcmple>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d003      	beq.n	800b4e6 <NormalControl+0x33e>
				pp.target_vel[0] = 0.45;
 800b4de:	4b57      	ldr	r3, [pc, #348]	; (800b63c <NormalControl+0x494>)
 800b4e0:	4a5b      	ldr	r2, [pc, #364]	; (800b650 <NormalControl+0x4a8>)
 800b4e2:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

			if(In_Pick && pp.real_x <= -0.4)
 800b4e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b4ea:	485a      	ldr	r0, [pc, #360]	; (800b654 <NormalControl+0x4ac>)
 800b4ec:	f006 ff30 	bl	8012350 <HAL_GPIO_ReadPin>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d10f      	bne.n	800b516 <NormalControl+0x36e>
 800b4f6:	4b51      	ldr	r3, [pc, #324]	; (800b63c <NormalControl+0x494>)
 800b4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7f5 f824 	bl	8000548 <__aeabi_f2d>
 800b500:	a34b      	add	r3, pc, #300	; (adr r3, 800b630 <NormalControl+0x488>)
 800b502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b506:	f7f5 faf3 	bl	8000af0 <__aeabi_dcmple>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d002      	beq.n	800b516 <NormalControl+0x36e>
				PP_stop(&pp);
 800b510:	484a      	ldr	r0, [pc, #296]	; (800b63c <NormalControl+0x494>)
 800b512:	f7fa fc72 	bl	8005dfa <PP_stop>

			if(ps4.button == SQUARE)
 800b516:	4b48      	ldr	r3, [pc, #288]	; (800b638 <NormalControl+0x490>)
 800b518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b51a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b51e:	d10b      	bne.n	800b538 <NormalControl+0x390>
			{
				while(ps4.button == SQUARE);
 800b520:	bf00      	nop
 800b522:	4b45      	ldr	r3, [pc, #276]	; (800b638 <NormalControl+0x490>)
 800b524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b52a:	d0fa      	beq.n	800b522 <NormalControl+0x37a>
				PP_stop(&pp);
 800b52c:	4843      	ldr	r0, [pc, #268]	; (800b63c <NormalControl+0x494>)
 800b52e:	f7fa fc64 	bl	8005dfa <PP_stop>
				picked_left = 0;
 800b532:	4b45      	ldr	r3, [pc, #276]	; (800b648 <NormalControl+0x4a0>)
 800b534:	2200      	movs	r2, #0
 800b536:	601a      	str	r2, [r3, #0]
		while(pp.pp_start)
 800b538:	4b40      	ldr	r3, [pc, #256]	; (800b63c <NormalControl+0x494>)
 800b53a:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b53e:	f003 0301 	and.w	r3, r3, #1
 800b542:	b2db      	uxtb	r3, r3
 800b544:	2b00      	cmp	r3, #0
 800b546:	d1bd      	bne.n	800b4c4 <NormalControl+0x31c>
			}
		}
		if(picked_left)
 800b548:	4b3f      	ldr	r3, [pc, #252]	; (800b648 <NormalControl+0x4a0>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d034      	beq.n	800b5ba <NormalControl+0x412>
		{
			float pick_left_adjust_servo[1][7] = {{3.5, 0.5, 0, 0, 0, 0, 0}};
 800b550:	4b41      	ldr	r3, [pc, #260]	; (800b658 <NormalControl+0x4b0>)
 800b552:	1d3c      	adds	r4, r7, #4
 800b554:	461d      	mov	r5, r3
 800b556:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b55a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b55e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			PP_start(pick_left_adjust_servo, 1, &pp);
 800b562:	1d3b      	adds	r3, r7, #4
 800b564:	4a35      	ldr	r2, [pc, #212]	; (800b63c <NormalControl+0x494>)
 800b566:	2101      	movs	r1, #1
 800b568:	4618      	mov	r0, r3
 800b56a:	f7fa fa0c 	bl	8005986 <PP_start>
			while(pp.pp_start)
 800b56e:	e00d      	b.n	800b58c <NormalControl+0x3e4>
			{
				if(ps4.button == SQUARE)
 800b570:	4b31      	ldr	r3, [pc, #196]	; (800b638 <NormalControl+0x490>)
 800b572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b578:	d108      	bne.n	800b58c <NormalControl+0x3e4>
				{
					while(ps4.button == SQUARE);
 800b57a:	bf00      	nop
 800b57c:	4b2e      	ldr	r3, [pc, #184]	; (800b638 <NormalControl+0x490>)
 800b57e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b584:	d0fa      	beq.n	800b57c <NormalControl+0x3d4>
					PP_stop(&pp);
 800b586:	482d      	ldr	r0, [pc, #180]	; (800b63c <NormalControl+0x494>)
 800b588:	f7fa fc37 	bl	8005dfa <PP_stop>
			while(pp.pp_start)
 800b58c:	4b2b      	ldr	r3, [pc, #172]	; (800b63c <NormalControl+0x494>)
 800b58e:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b592:	f003 0301 	and.w	r3, r3, #1
 800b596:	b2db      	uxtb	r3, r3
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d1e9      	bne.n	800b570 <NormalControl+0x3c8>
				}
			}
			LoadRing();
 800b59c:	f000 fe80 	bl	800c2a0 <LoadRing>
			close_servo;
 800b5a0:	f240 3152 	movw	r1, #850	; 0x352
 800b5a4:	482d      	ldr	r0, [pc, #180]	; (800b65c <NormalControl+0x4b4>)
 800b5a6:	f7fe fc1b 	bl	8009de0 <ServoSetPulse>
			lidar.pos_counter = CENTER_1;
 800b5aa:	4b2d      	ldr	r3, [pc, #180]	; (800b660 <NormalControl+0x4b8>)
 800b5ac:	2203      	movs	r2, #3
 800b5ae:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
//			osDelay(500);
			setSpeedMODN(5.5);
 800b5b2:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
 800b5b6:	f7f9 fb1b 	bl	8004bf0 <setSpeedMODN>
		}
		mode = AUTO;
 800b5ba:	4b2a      	ldr	r3, [pc, #168]	; (800b664 <NormalControl+0x4bc>)
 800b5bc:	2201      	movs	r2, #1
 800b5be:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == DOWN)
 800b5c0:	4b1d      	ldr	r3, [pc, #116]	; (800b638 <NormalControl+0x490>)
 800b5c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5c4:	2b40      	cmp	r3, #64	; 0x40
 800b5c6:	d10b      	bne.n	800b5e0 <NormalControl+0x438>
	{
		while(ps4.button == DOWN);
 800b5c8:	bf00      	nop
 800b5ca:	4b1b      	ldr	r3, [pc, #108]	; (800b638 <NormalControl+0x490>)
 800b5cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5ce:	2b40      	cmp	r3, #64	; 0x40
 800b5d0:	d0fb      	beq.n	800b5ca <NormalControl+0x422>
//		stick_fence = 0;
		lidar.pos_counter = PICK_RIGHT;
 800b5d2:	4b23      	ldr	r3, [pc, #140]	; (800b660 <NormalControl+0x4b8>)
 800b5d4:	2209      	movs	r2, #9
 800b5d6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		mode = AUTO;
 800b5da:	4b22      	ldr	r3, [pc, #136]	; (800b664 <NormalControl+0x4bc>)
 800b5dc:	2201      	movs	r2, #1
 800b5de:	601a      	str	r2, [r3, #0]
	}

	if (HAL_GetTick() - before >= NormalMode) {
 800b5e0:	f005 f83a 	bl	8010658 <HAL_GetTick>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	4a20      	ldr	r2, [pc, #128]	; (800b668 <NormalControl+0x4c0>)
 800b5e8:	6812      	ldr	r2, [r2, #0]
 800b5ea:	1a9b      	subs	r3, r3, r2
 800b5ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800b5f0:	d314      	bcc.n	800b61c <NormalControl+0x474>
		led9= !led9;
 800b5f2:	4b1e      	ldr	r3, [pc, #120]	; (800b66c <NormalControl+0x4c4>)
 800b5f4:	7e1b      	ldrb	r3, [r3, #24]
 800b5f6:	f003 0310 	and.w	r3, r3, #16
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	bf0c      	ite	eq
 800b600:	2301      	moveq	r3, #1
 800b602:	2300      	movne	r3, #0
 800b604:	b2d9      	uxtb	r1, r3
 800b606:	4a19      	ldr	r2, [pc, #100]	; (800b66c <NormalControl+0x4c4>)
 800b608:	7e13      	ldrb	r3, [r2, #24]
 800b60a:	f361 1304 	bfi	r3, r1, #4, #1
 800b60e:	7613      	strb	r3, [r2, #24]
		before = HAL_GetTick();
 800b610:	f005 f822 	bl	8010658 <HAL_GetTick>
 800b614:	4603      	mov	r3, r0
 800b616:	461a      	mov	r2, r3
 800b618:	4b13      	ldr	r3, [pc, #76]	; (800b668 <NormalControl+0x4c0>)
 800b61a:	601a      	str	r2, [r3, #0]
	}
}
 800b61c:	bf00      	nop
 800b61e:	3758      	adds	r7, #88	; 0x58
 800b620:	46bd      	mov	sp, r7
 800b622:	bdb0      	pop	{r4, r5, r7, pc}
 800b624:	f3af 8000 	nop.w
 800b628:	33333333 	.word	0x33333333
 800b62c:	bfd33333 	.word	0xbfd33333
 800b630:	9999999a 	.word	0x9999999a
 800b634:	bfd99999 	.word	0xbfd99999
 800b638:	2000a014 	.word	0x2000a014
 800b63c:	20006cc4 	.word	0x20006cc4
 800b640:	40020c00 	.word	0x40020c00
 800b644:	2000785c 	.word	0x2000785c
 800b648:	200097fc 	.word	0x200097fc
 800b64c:	0801fdb0 	.word	0x0801fdb0
 800b650:	3ee66666 	.word	0x3ee66666
 800b654:	40021000 	.word	0x40021000
 800b658:	0801fdcc 	.word	0x0801fdcc
 800b65c:	2000786c 	.word	0x2000786c
 800b660:	20009030 	.word	0x20009030
 800b664:	200092d0 	.word	0x200092d0
 800b668:	2000729c 	.word	0x2000729c
 800b66c:	2000959c 	.word	0x2000959c

0800b670 <Auto>:

void Auto() {
 800b670:	b5b0      	push	{r4, r5, r7, lr}
 800b672:	b088      	sub	sp, #32
 800b674:	af00      	add	r7, sp, #0
	if(ps4.button == OPTION)
 800b676:	4b96      	ldr	r3, [pc, #600]	; (800b8d0 <Auto+0x260>)
 800b678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b67a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b67e:	d17b      	bne.n	800b778 <Auto+0x108>
	{
		while(ps4.button == OPTION);
 800b680:	bf00      	nop
 800b682:	4b93      	ldr	r3, [pc, #588]	; (800b8d0 <Auto+0x260>)
 800b684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b68a:	d0fa      	beq.n	800b682 <Auto+0x12>

		static int counter = 0;
		counter++;
 800b68c:	4b91      	ldr	r3, [pc, #580]	; (800b8d4 <Auto+0x264>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	3301      	adds	r3, #1
 800b692:	4a90      	ldr	r2, [pc, #576]	; (800b8d4 <Auto+0x264>)
 800b694:	6013      	str	r3, [r2, #0]

		if(counter == 1)
 800b696:	4b8f      	ldr	r3, [pc, #572]	; (800b8d4 <Auto+0x264>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d11b      	bne.n	800b6d6 <Auto+0x66>
		{
			led_enb = 0;
 800b69e:	4b8e      	ldr	r3, [pc, #568]	; (800b8d8 <Auto+0x268>)
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	601a      	str	r2, [r3, #0]
			if(blue)
 800b6a4:	4b8d      	ldr	r3, [pc, #564]	; (800b8dc <Auto+0x26c>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d007      	beq.n	800b6bc <Auto+0x4c>
			{
				vesc_speed = BlueType3;
 800b6ac:	4b8c      	ldr	r3, [pc, #560]	; (800b8e0 <Auto+0x270>)
 800b6ae:	4a8d      	ldr	r2, [pc, #564]	; (800b8e4 <Auto+0x274>)
 800b6b0:	601a      	str	r2, [r3, #0]
				vesc_duty = BlueType3Duty;
 800b6b2:	4b8d      	ldr	r3, [pc, #564]	; (800b8e8 <Auto+0x278>)
 800b6b4:	f04f 527b 	mov.w	r2, #1052770304	; 0x3ec00000
 800b6b8:	601a      	str	r2, [r3, #0]
 800b6ba:	e006      	b.n	800b6ca <Auto+0x5a>
			}
			else
			{
				vesc_speed = RedType3;
 800b6bc:	4b88      	ldr	r3, [pc, #544]	; (800b8e0 <Auto+0x270>)
 800b6be:	4a8b      	ldr	r2, [pc, #556]	; (800b8ec <Auto+0x27c>)
 800b6c0:	601a      	str	r2, [r3, #0]
				vesc_duty = RedType3Duty;
 800b6c2:	4b89      	ldr	r3, [pc, #548]	; (800b8e8 <Auto+0x278>)
 800b6c4:	f04f 527b 	mov.w	r2, #1052770304	; 0x3ec00000
 800b6c8:	601a      	str	r2, [r3, #0]
			}
			led8 = 1;
 800b6ca:	4a89      	ldr	r2, [pc, #548]	; (800b8f0 <Auto+0x280>)
 800b6cc:	7e13      	ldrb	r3, [r2, #24]
 800b6ce:	f043 0320 	orr.w	r3, r3, #32
 800b6d2:	7613      	strb	r3, [r2, #24]
 800b6d4:	e050      	b.n	800b778 <Auto+0x108>
		}
		else if(counter == 2)
 800b6d6:	4b7f      	ldr	r3, [pc, #508]	; (800b8d4 <Auto+0x264>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2b02      	cmp	r3, #2
 800b6dc:	d117      	bne.n	800b70e <Auto+0x9e>
		{
			led_enb = 1;
 800b6de:	4b7e      	ldr	r3, [pc, #504]	; (800b8d8 <Auto+0x268>)
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	601a      	str	r2, [r3, #0]
			shot_prd = 125;
 800b6e4:	4b83      	ldr	r3, [pc, #524]	; (800b8f4 <Auto+0x284>)
 800b6e6:	227d      	movs	r2, #125	; 0x7d
 800b6e8:	601a      	str	r2, [r3, #0]
			if(blue)
 800b6ea:	4b7c      	ldr	r3, [pc, #496]	; (800b8dc <Auto+0x26c>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d006      	beq.n	800b700 <Auto+0x90>
			{
				vesc_speed = BlueType2;
 800b6f2:	4b7b      	ldr	r3, [pc, #492]	; (800b8e0 <Auto+0x270>)
 800b6f4:	4a80      	ldr	r2, [pc, #512]	; (800b8f8 <Auto+0x288>)
 800b6f6:	601a      	str	r2, [r3, #0]
				vesc_duty = BlueType2Duty;
 800b6f8:	4b7b      	ldr	r3, [pc, #492]	; (800b8e8 <Auto+0x278>)
 800b6fa:	4a80      	ldr	r2, [pc, #512]	; (800b8fc <Auto+0x28c>)
 800b6fc:	601a      	str	r2, [r3, #0]
 800b6fe:	e03b      	b.n	800b778 <Auto+0x108>
			}
			else
			{
				vesc_speed = RedType2;
 800b700:	4b77      	ldr	r3, [pc, #476]	; (800b8e0 <Auto+0x270>)
 800b702:	4a7f      	ldr	r2, [pc, #508]	; (800b900 <Auto+0x290>)
 800b704:	601a      	str	r2, [r3, #0]
				vesc_duty = RedType2Duty;
 800b706:	4b78      	ldr	r3, [pc, #480]	; (800b8e8 <Auto+0x278>)
 800b708:	4a7e      	ldr	r2, [pc, #504]	; (800b904 <Auto+0x294>)
 800b70a:	601a      	str	r2, [r3, #0]
 800b70c:	e034      	b.n	800b778 <Auto+0x108>
			}
//			vesc_duty = 0.275;
//			vesc_speed = 8.0;
		}
		else if(counter == 3)
 800b70e:	4b71      	ldr	r3, [pc, #452]	; (800b8d4 <Auto+0x264>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2b03      	cmp	r3, #3
 800b714:	d11b      	bne.n	800b74e <Auto+0xde>
		{
			led_enb = 1;
 800b716:	4b70      	ldr	r3, [pc, #448]	; (800b8d8 <Auto+0x268>)
 800b718:	2201      	movs	r2, #1
 800b71a:	601a      	str	r2, [r3, #0]
			shot_prd = 500;
 800b71c:	4b75      	ldr	r3, [pc, #468]	; (800b8f4 <Auto+0x284>)
 800b71e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b722:	601a      	str	r2, [r3, #0]
			vesc_duty = 0.39;
 800b724:	4b70      	ldr	r3, [pc, #448]	; (800b8e8 <Auto+0x278>)
 800b726:	4a78      	ldr	r2, [pc, #480]	; (800b908 <Auto+0x298>)
 800b728:	601a      	str	r2, [r3, #0]
//			vesc_speed = 12.2;
			if(blue)
 800b72a:	4b6c      	ldr	r3, [pc, #432]	; (800b8dc <Auto+0x26c>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d006      	beq.n	800b740 <Auto+0xd0>
			{
				vesc_speed = BlueOppoType2;
 800b732:	4b6b      	ldr	r3, [pc, #428]	; (800b8e0 <Auto+0x270>)
 800b734:	4a75      	ldr	r2, [pc, #468]	; (800b90c <Auto+0x29c>)
 800b736:	601a      	str	r2, [r3, #0]
				vesc_duty = BlueOppoType2Duty;
 800b738:	4b6b      	ldr	r3, [pc, #428]	; (800b8e8 <Auto+0x278>)
 800b73a:	4a73      	ldr	r2, [pc, #460]	; (800b908 <Auto+0x298>)
 800b73c:	601a      	str	r2, [r3, #0]
 800b73e:	e01b      	b.n	800b778 <Auto+0x108>
			}
			else
			{
				vesc_speed = RedOppoType2;
 800b740:	4b67      	ldr	r3, [pc, #412]	; (800b8e0 <Auto+0x270>)
 800b742:	4a73      	ldr	r2, [pc, #460]	; (800b910 <Auto+0x2a0>)
 800b744:	601a      	str	r2, [r3, #0]
				vesc_duty = RedOppoType2Duty;
 800b746:	4b68      	ldr	r3, [pc, #416]	; (800b8e8 <Auto+0x278>)
 800b748:	4a6f      	ldr	r2, [pc, #444]	; (800b908 <Auto+0x298>)
 800b74a:	601a      	str	r2, [r3, #0]
 800b74c:	e014      	b.n	800b778 <Auto+0x108>
			}
		}

		else if(counter == 4)
 800b74e:	4b61      	ldr	r3, [pc, #388]	; (800b8d4 <Auto+0x264>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2b04      	cmp	r3, #4
 800b754:	d110      	bne.n	800b778 <Auto+0x108>
		{
			led_enb = 0;
 800b756:	4b60      	ldr	r3, [pc, #384]	; (800b8d8 <Auto+0x268>)
 800b758:	2200      	movs	r2, #0
 800b75a:	601a      	str	r2, [r3, #0]
			vesc_duty = type1Duty;
 800b75c:	4b62      	ldr	r3, [pc, #392]	; (800b8e8 <Auto+0x278>)
 800b75e:	4a6d      	ldr	r2, [pc, #436]	; (800b914 <Auto+0x2a4>)
 800b760:	601a      	str	r2, [r3, #0]
			vesc_speed = type1;
 800b762:	4b5f      	ldr	r3, [pc, #380]	; (800b8e0 <Auto+0x270>)
 800b764:	4a6c      	ldr	r2, [pc, #432]	; (800b918 <Auto+0x2a8>)
 800b766:	601a      	str	r2, [r3, #0]
			led8 = 0;
 800b768:	4a61      	ldr	r2, [pc, #388]	; (800b8f0 <Auto+0x280>)
 800b76a:	7e13      	ldrb	r3, [r2, #24]
 800b76c:	f36f 1345 	bfc	r3, #5, #1
 800b770:	7613      	strb	r3, [r2, #24]
			counter = 0;
 800b772:	4b58      	ldr	r3, [pc, #352]	; (800b8d4 <Auto+0x264>)
 800b774:	2200      	movs	r2, #0
 800b776:	601a      	str	r2, [r3, #0]
		}
	}

	// Shoot
	if(ps4.button == CROSS)
 800b778:	4b55      	ldr	r3, [pc, #340]	; (800b8d0 <Auto+0x260>)
 800b77a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b77c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b780:	d113      	bne.n	800b7aa <Auto+0x13a>
	{
		while(ps4.button == CROSS);
 800b782:	bf00      	nop
 800b784:	4b52      	ldr	r3, [pc, #328]	; (800b8d0 <Auto+0x260>)
 800b786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b78c:	d0fa      	beq.n	800b784 <Auto+0x114>
		push_shoot;
 800b78e:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800b792:	4862      	ldr	r0, [pc, #392]	; (800b91c <Auto+0x2ac>)
 800b794:	f7f5 fcf9 	bl	800118a <WriteBDC>
		shoot_start = 1;
 800b798:	4b61      	ldr	r3, [pc, #388]	; (800b920 <Auto+0x2b0>)
 800b79a:	2201      	movs	r2, #1
 800b79c:	601a      	str	r2, [r3, #0]
		wait_load = 1;
 800b79e:	4b61      	ldr	r3, [pc, #388]	; (800b924 <Auto+0x2b4>)
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	601a      	str	r2, [r3, #0]
		cylinder_load_once = 1; // Only allow cylinder to load once every shot
 800b7a4:	4b60      	ldr	r3, [pc, #384]	; (800b928 <Auto+0x2b8>)
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	601a      	str	r2, [r3, #0]
//			pick_manual(5000);
//			counter = 0;
//		}
	}

	if(ps4.button == SQUARE)
 800b7aa:	4b49      	ldr	r3, [pc, #292]	; (800b8d0 <Auto+0x260>)
 800b7ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7b2:	d137      	bne.n	800b824 <Auto+0x1b4>
	{
		while(ps4.button == SQUARE);
 800b7b4:	bf00      	nop
 800b7b6:	4b46      	ldr	r3, [pc, #280]	; (800b8d0 <Auto+0x260>)
 800b7b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7be:	d0fa      	beq.n	800b7b6 <Auto+0x146>

		if(pp.pp_start)
 800b7c0:	4b5a      	ldr	r3, [pc, #360]	; (800b92c <Auto+0x2bc>)
 800b7c2:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b7c6:	f003 0301 	and.w	r3, r3, #1
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d003      	beq.n	800b7d8 <Auto+0x168>
		{
			PP_stop(&pp);
 800b7d0:	4856      	ldr	r0, [pc, #344]	; (800b92c <Auto+0x2bc>)
 800b7d2:	f7fa fb12 	bl	8005dfa <PP_stop>
 800b7d6:	e025      	b.n	800b824 <Auto+0x1b4>
		}
		else
		{
			loaded = 0;
 800b7d8:	4b55      	ldr	r3, [pc, #340]	; (800b930 <Auto+0x2c0>)
 800b7da:	2200      	movs	r2, #0
 800b7dc:	601a      	str	r2, [r3, #0]
			vesc_duty = 0.0;
 800b7de:	4b42      	ldr	r3, [pc, #264]	; (800b8e8 <Auto+0x278>)
 800b7e0:	f04f 0200 	mov.w	r2, #0
 800b7e4:	601a      	str	r2, [r3, #0]
			flywheelStop();
 800b7e6:	f001 f931 	bl	800ca4c <flywheelStop>
			setPick(500);
 800b7ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b7ee:	f000 f90f 	bl	800ba10 <setPick>
			cylinder_load;
 800b7f2:	4a3f      	ldr	r2, [pc, #252]	; (800b8f0 <Auto+0x280>)
 800b7f4:	7f13      	ldrb	r3, [r2, #28]
 800b7f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7fa:	7713      	strb	r3, [r2, #28]
			open_servo;
 800b7fc:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800b800:	484c      	ldr	r0, [pc, #304]	; (800b934 <Auto+0x2c4>)
 800b802:	f7fe faed 	bl	8009de0 <ServoSetPulse>
			reload = 0;
 800b806:	4b4c      	ldr	r3, [pc, #304]	; (800b938 <Auto+0x2c8>)
 800b808:	2200      	movs	r2, #0
 800b80a:	601a      	str	r2, [r3, #0]
			load_start = 0;
 800b80c:	4b4b      	ldr	r3, [pc, #300]	; (800b93c <Auto+0x2cc>)
 800b80e:	2200      	movs	r2, #0
 800b810:	601a      	str	r2, [r3, #0]
			load_adjust = 0;
 800b812:	4b4b      	ldr	r3, [pc, #300]	; (800b940 <Auto+0x2d0>)
 800b814:	2200      	movs	r2, #0
 800b816:	601a      	str	r2, [r3, #0]
			stick_fence = 0;
 800b818:	4b4a      	ldr	r3, [pc, #296]	; (800b944 <Auto+0x2d4>)
 800b81a:	2200      	movs	r2, #0
 800b81c:	601a      	str	r2, [r3, #0]
			picked_manual = 0;
 800b81e:	4b4a      	ldr	r3, [pc, #296]	; (800b948 <Auto+0x2d8>)
 800b820:	2200      	movs	r2, #0
 800b822:	601a      	str	r2, [r3, #0]
		}
	}

	if(ps4.button == CIRCLE)
 800b824:	4b2a      	ldr	r3, [pc, #168]	; (800b8d0 <Auto+0x260>)
 800b826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b82c:	f040 80a1 	bne.w	800b972 <Auto+0x302>
	{
		while(ps4.button == CIRCLE);
 800b830:	bf00      	nop
 800b832:	4b27      	ldr	r3, [pc, #156]	; (800b8d0 <Auto+0x260>)
 800b834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b83a:	d0fa      	beq.n	800b832 <Auto+0x1c2>
		vesc_speed = 4;
 800b83c:	4b28      	ldr	r3, [pc, #160]	; (800b8e0 <Auto+0x270>)
 800b83e:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800b842:	601a      	str	r2, [r3, #0]
		static int counter = 0;

		if(counter == 0)
 800b844:	4b41      	ldr	r3, [pc, #260]	; (800b94c <Auto+0x2dc>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	f040 8087 	bne.w	800b95c <Auto+0x2ec>
		{
			lidar.pos = PICK_LEFT;
 800b84e:	4b40      	ldr	r3, [pc, #256]	; (800b950 <Auto+0x2e0>)
 800b850:	2201      	movs	r2, #1
 800b852:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
			lidar.pos_counter = PICK_LEFT;
 800b856:	4b3e      	ldr	r3, [pc, #248]	; (800b950 <Auto+0x2e0>)
 800b858:	2201      	movs	r2, #1
 800b85a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288

			setPick(2200);
 800b85e:	f640 0098 	movw	r0, #2200	; 0x898
 800b862:	f000 f8d5 	bl	800ba10 <setPick>

			float pick_left_point[1][7] = {{5.0, -3.9, 0.12, 0, 0, 0, 0}};
 800b866:	4b3b      	ldr	r3, [pc, #236]	; (800b954 <Auto+0x2e4>)
 800b868:	1d3c      	adds	r4, r7, #4
 800b86a:	461d      	mov	r5, r3
 800b86c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b86e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b870:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b874:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			PP_start(pick_left_point, 1, &pp);
 800b878:	1d3b      	adds	r3, r7, #4
 800b87a:	4a2c      	ldr	r2, [pc, #176]	; (800b92c <Auto+0x2bc>)
 800b87c:	2101      	movs	r1, #1
 800b87e:	4618      	mov	r0, r3
 800b880:	f7fa f881 	bl	8005986 <PP_start>
			while(pp.pp_start)
 800b884:	e00d      	b.n	800b8a2 <Auto+0x232>
			{
				if(ps4.button == SQUARE)
 800b886:	4b12      	ldr	r3, [pc, #72]	; (800b8d0 <Auto+0x260>)
 800b888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b88a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b88e:	d108      	bne.n	800b8a2 <Auto+0x232>
				{
					while(ps4.button == SQUARE);
 800b890:	bf00      	nop
 800b892:	4b0f      	ldr	r3, [pc, #60]	; (800b8d0 <Auto+0x260>)
 800b894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b89a:	d0fa      	beq.n	800b892 <Auto+0x222>
					PP_stop(&pp);
 800b89c:	4823      	ldr	r0, [pc, #140]	; (800b92c <Auto+0x2bc>)
 800b89e:	f7fa faac 	bl	8005dfa <PP_stop>
			while(pp.pp_start)
 800b8a2:	4b22      	ldr	r3, [pc, #136]	; (800b92c <Auto+0x2bc>)
 800b8a4:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b8a8:	f003 0301 	and.w	r3, r3, #1
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d1e9      	bne.n	800b886 <Auto+0x216>
				}
			}
			pick_left = 1;
 800b8b2:	4b29      	ldr	r3, [pc, #164]	; (800b958 <Auto+0x2e8>)
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	601a      	str	r2, [r3, #0]
			counter++;
 800b8b8:	4b24      	ldr	r3, [pc, #144]	; (800b94c <Auto+0x2dc>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	3301      	adds	r3, #1
 800b8be:	4a23      	ldr	r2, [pc, #140]	; (800b94c <Auto+0x2dc>)
 800b8c0:	6013      	str	r3, [r2, #0]
			cylinder_retract;
 800b8c2:	4a0b      	ldr	r2, [pc, #44]	; (800b8f0 <Auto+0x280>)
 800b8c4:	7f13      	ldrb	r3, [r2, #28]
 800b8c6:	f36f 1386 	bfc	r3, #6, #1
 800b8ca:	7713      	strb	r3, [r2, #28]
 800b8cc:	e051      	b.n	800b972 <Auto+0x302>
 800b8ce:	bf00      	nop
 800b8d0:	2000a014 	.word	0x2000a014
 800b8d4:	200002e0 	.word	0x200002e0
 800b8d8:	2000a5e0 	.word	0x2000a5e0
 800b8dc:	20006a1c 	.word	0x20006a1c
 800b8e0:	2000659c 	.word	0x2000659c
 800b8e4:	413c0000 	.word	0x413c0000
 800b8e8:	20007380 	.word	0x20007380
 800b8ec:	413b3333 	.word	0x413b3333
 800b8f0:	2000959c 	.word	0x2000959c
 800b8f4:	2000a388 	.word	0x2000a388
 800b8f8:	41026666 	.word	0x41026666
 800b8fc:	3e8ccccd 	.word	0x3e8ccccd
 800b900:	41033333 	.word	0x41033333
 800b904:	3e8a3d71 	.word	0x3e8a3d71
 800b908:	3ec7ae14 	.word	0x3ec7ae14
 800b90c:	4144cccd 	.word	0x4144cccd
 800b910:	41433333 	.word	0x41433333
 800b914:	3e2e147b 	.word	0x3e2e147b
 800b918:	40966666 	.word	0x40966666
 800b91c:	20009674 	.word	0x20009674
 800b920:	200092cc 	.word	0x200092cc
 800b924:	20007484 	.word	0x20007484
 800b928:	2000a570 	.word	0x2000a570
 800b92c:	20006cc4 	.word	0x20006cc4
 800b930:	20009428 	.word	0x20009428
 800b934:	2000786c 	.word	0x2000786c
 800b938:	2000774c 	.word	0x2000774c
 800b93c:	20007348 	.word	0x20007348
 800b940:	2000943c 	.word	0x2000943c
 800b944:	200072bc 	.word	0x200072bc
 800b948:	20009488 	.word	0x20009488
 800b94c:	200002e4 	.word	0x200002e4
 800b950:	20009030 	.word	0x20009030
 800b954:	0801fde8 	.word	0x0801fde8
 800b958:	2000785c 	.word	0x2000785c
		}
		else
		{
			counter = 0;
 800b95c:	4b24      	ldr	r3, [pc, #144]	; (800b9f0 <Auto+0x380>)
 800b95e:	2200      	movs	r2, #0
 800b960:	601a      	str	r2, [r3, #0]
			pick_right = 1;
 800b962:	4b24      	ldr	r3, [pc, #144]	; (800b9f4 <Auto+0x384>)
 800b964:	2201      	movs	r2, #1
 800b966:	601a      	str	r2, [r3, #0]
			cylinder_retract;
 800b968:	4a23      	ldr	r2, [pc, #140]	; (800b9f8 <Auto+0x388>)
 800b96a:	7f13      	ldrb	r3, [r2, #28]
 800b96c:	f36f 1386 	bfc	r3, #6, #1
 800b970:	7713      	strb	r3, [r2, #28]
		}
	}

	if(ps4.button == TRIANGLE)
 800b972:	4b22      	ldr	r3, [pc, #136]	; (800b9fc <Auto+0x38c>)
 800b974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b97a:	d117      	bne.n	800b9ac <Auto+0x33c>
	{
		while(ps4.button == TRIANGLE);
 800b97c:	bf00      	nop
 800b97e:	4b1f      	ldr	r3, [pc, #124]	; (800b9fc <Auto+0x38c>)
 800b980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b986:	d0fa      	beq.n	800b97e <Auto+0x30e>
		LoadRing();
 800b988:	f000 fc8a 	bl	800c2a0 <LoadRing>
		picked_manual = 1;
 800b98c:	4b1c      	ldr	r3, [pc, #112]	; (800ba00 <Auto+0x390>)
 800b98e:	2201      	movs	r2, #1
 800b990:	601a      	str	r2, [r3, #0]
		adjust_servo;
 800b992:	f240 31b6 	movw	r1, #950	; 0x3b6
 800b996:	481b      	ldr	r0, [pc, #108]	; (800ba04 <Auto+0x394>)
 800b998:	f7fe fa22 	bl	8009de0 <ServoSetPulse>
		load_adjust = 1;
 800b99c:	4b1a      	ldr	r3, [pc, #104]	; (800ba08 <Auto+0x398>)
 800b99e:	2201      	movs	r2, #1
 800b9a0:	601a      	str	r2, [r3, #0]
		cylinder_retract;
 800b9a2:	4a15      	ldr	r2, [pc, #84]	; (800b9f8 <Auto+0x388>)
 800b9a4:	7f13      	ldrb	r3, [r2, #28]
 800b9a6:	f36f 1386 	bfc	r3, #6, #1
 800b9aa:	7713      	strb	r3, [r2, #28]
	}

	if (HAL_GetTick() - before >= AutoMode)
 800b9ac:	f004 fe54 	bl	8010658 <HAL_GetTick>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	4a16      	ldr	r2, [pc, #88]	; (800ba0c <Auto+0x39c>)
 800b9b4:	6812      	ldr	r2, [r2, #0]
 800b9b6:	1a9b      	subs	r3, r3, r2
 800b9b8:	2b7c      	cmp	r3, #124	; 0x7c
 800b9ba:	d914      	bls.n	800b9e6 <Auto+0x376>
	{
		led9= !led9;
 800b9bc:	4b0e      	ldr	r3, [pc, #56]	; (800b9f8 <Auto+0x388>)
 800b9be:	7e1b      	ldrb	r3, [r3, #24]
 800b9c0:	f003 0310 	and.w	r3, r3, #16
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	bf0c      	ite	eq
 800b9ca:	2301      	moveq	r3, #1
 800b9cc:	2300      	movne	r3, #0
 800b9ce:	b2d9      	uxtb	r1, r3
 800b9d0:	4a09      	ldr	r2, [pc, #36]	; (800b9f8 <Auto+0x388>)
 800b9d2:	7e13      	ldrb	r3, [r2, #24]
 800b9d4:	f361 1304 	bfi	r3, r1, #4, #1
 800b9d8:	7613      	strb	r3, [r2, #24]
		before = HAL_GetTick();
 800b9da:	f004 fe3d 	bl	8010658 <HAL_GetTick>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	4b0a      	ldr	r3, [pc, #40]	; (800ba0c <Auto+0x39c>)
 800b9e4:	601a      	str	r2, [r3, #0]
	}
}
 800b9e6:	bf00      	nop
 800b9e8:	3720      	adds	r7, #32
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bdb0      	pop	{r4, r5, r7, pc}
 800b9ee:	bf00      	nop
 800b9f0:	200002e4 	.word	0x200002e4
 800b9f4:	2000a624 	.word	0x2000a624
 800b9f8:	2000959c 	.word	0x2000959c
 800b9fc:	2000a014 	.word	0x2000a014
 800ba00:	20009488 	.word	0x20009488
 800ba04:	2000786c 	.word	0x2000786c
 800ba08:	2000943c 	.word	0x2000943c
 800ba0c:	2000729c 	.word	0x2000729c

0800ba10 <setPick>:
			break;
	}
}

void setPick(int32_t target)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b083      	sub	sp, #12
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
	pick_target_enc = target;
 800ba18:	4a05      	ldr	r2, [pc, #20]	; (800ba30 <setPick+0x20>)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6013      	str	r3, [r2, #0]
	set_pick_enc = 1;
 800ba1e:	4b05      	ldr	r3, [pc, #20]	; (800ba34 <setPick+0x24>)
 800ba20:	2201      	movs	r2, #1
 800ba22:	601a      	str	r2, [r3, #0]
}
 800ba24:	bf00      	nop
 800ba26:	370c      	adds	r7, #12
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr
 800ba30:	200065a8 	.word	0x200065a8
 800ba34:	20007730 	.word	0x20007730

0800ba38 <CheckPickEnc>:

void CheckPickEnc(void)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	af00      	add	r7, sp, #0
	if(set_pick_enc)
 800ba3c:	4b1a      	ldr	r3, [pc, #104]	; (800baa8 <CheckPickEnc+0x70>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d02e      	beq.n	800baa2 <CheckPickEnc+0x6a>
	{
		pickErr = pick_target_enc - pick_enc;
 800ba44:	4b19      	ldr	r3, [pc, #100]	; (800baac <CheckPickEnc+0x74>)
 800ba46:	681a      	ldr	r2, [r3, #0]
 800ba48:	4b19      	ldr	r3, [pc, #100]	; (800bab0 <CheckPickEnc+0x78>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	1ad3      	subs	r3, r2, r3
 800ba4e:	ee07 3a90 	vmov	s15, r3
 800ba52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba56:	4b17      	ldr	r3, [pc, #92]	; (800bab4 <CheckPickEnc+0x7c>)
 800ba58:	edc3 7a00 	vstr	s15, [r3]
		PID(&pick_PID);
 800ba5c:	4816      	ldr	r0, [pc, #88]	; (800bab8 <CheckPickEnc+0x80>)
 800ba5e:	f7f9 fd3a 	bl	80054d6 <PID>
		pick_manual((int32_t)pickU);
 800ba62:	4b16      	ldr	r3, [pc, #88]	; (800babc <CheckPickEnc+0x84>)
 800ba64:	edd3 7a00 	vldr	s15, [r3]
 800ba68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba6c:	ee17 1a90 	vmov	r1, s15
 800ba70:	4813      	ldr	r0, [pc, #76]	; (800bac0 <CheckPickEnc+0x88>)
 800ba72:	f7f5 fb8a 	bl	800118a <WriteBDC>

		if(abs(pickErr) < pick_tol)
 800ba76:	4b0f      	ldr	r3, [pc, #60]	; (800bab4 <CheckPickEnc+0x7c>)
 800ba78:	edd3 7a00 	vldr	s15, [r3]
 800ba7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba80:	ee17 3a90 	vmov	r3, s15
 800ba84:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800ba88:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800ba8c:	4b0d      	ldr	r3, [pc, #52]	; (800bac4 <CheckPickEnc+0x8c>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	da06      	bge.n	800baa2 <CheckPickEnc+0x6a>
		{
			set_pick_enc = 0;
 800ba94:	4b04      	ldr	r3, [pc, #16]	; (800baa8 <CheckPickEnc+0x70>)
 800ba96:	2200      	movs	r2, #0
 800ba98:	601a      	str	r2, [r3, #0]
			pick_stop;
 800ba9a:	2100      	movs	r1, #0
 800ba9c:	4808      	ldr	r0, [pc, #32]	; (800bac0 <CheckPickEnc+0x88>)
 800ba9e:	f7f5 fb74 	bl	800118a <WriteBDC>
		}
	}
}
 800baa2:	bf00      	nop
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	20007730 	.word	0x20007730
 800baac:	200065a8 	.word	0x200065a8
 800bab0:	20006be0 	.word	0x20006be0
 800bab4:	200064d8 	.word	0x200064d8
 800bab8:	20009810 	.word	0x20009810
 800babc:	20007350 	.word	0x20007350
 800bac0:	2000770c 	.word	0x2000770c
 800bac4:	200072b4 	.word	0x200072b4

0800bac8 <CheckPitch>:

void CheckPitch()
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	af00      	add	r7, sp, #0
	if(set_pitch)
 800bacc:	4b1b      	ldr	r3, [pc, #108]	; (800bb3c <CheckPitch+0x74>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d02c      	beq.n	800bb2e <CheckPitch+0x66>
	{
		switch(Robot_Pitch)
 800bad4:	4b1a      	ldr	r3, [pc, #104]	; (800bb40 <CheckPitch+0x78>)
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d002      	beq.n	800bae2 <CheckPitch+0x1a>
 800badc:	2b01      	cmp	r3, #1
 800bade:	d013      	beq.n	800bb08 <CheckPitch+0x40>
					set_pitch = 0;
				}
				break;
		}
	}
}
 800bae0:	e02a      	b.n	800bb38 <CheckPitch+0x70>
				if(In_Pitch70)
 800bae2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bae6:	4817      	ldr	r0, [pc, #92]	; (800bb44 <CheckPitch+0x7c>)
 800bae8:	f006 fc32 	bl	8012350 <HAL_GPIO_ReadPin>
 800baec:	4603      	mov	r3, r0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d11f      	bne.n	800bb32 <CheckPitch+0x6a>
					pitch_stop;
 800baf2:	2100      	movs	r1, #0
 800baf4:	4814      	ldr	r0, [pc, #80]	; (800bb48 <CheckPitch+0x80>)
 800baf6:	f7f5 fb48 	bl	800118a <WriteBDC>
					Robot_Pitch = PITCH70;
 800bafa:	4b11      	ldr	r3, [pc, #68]	; (800bb40 <CheckPitch+0x78>)
 800bafc:	2201      	movs	r2, #1
 800bafe:	701a      	strb	r2, [r3, #0]
					set_pitch = 0;
 800bb00:	4b0e      	ldr	r3, [pc, #56]	; (800bb3c <CheckPitch+0x74>)
 800bb02:	2200      	movs	r2, #0
 800bb04:	601a      	str	r2, [r3, #0]
				break;
 800bb06:	e014      	b.n	800bb32 <CheckPitch+0x6a>
				if(In_Pitch45)
 800bb08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bb0c:	480d      	ldr	r0, [pc, #52]	; (800bb44 <CheckPitch+0x7c>)
 800bb0e:	f006 fc1f 	bl	8012350 <HAL_GPIO_ReadPin>
 800bb12:	4603      	mov	r3, r0
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d10e      	bne.n	800bb36 <CheckPitch+0x6e>
					pitch_stop;
 800bb18:	2100      	movs	r1, #0
 800bb1a:	480b      	ldr	r0, [pc, #44]	; (800bb48 <CheckPitch+0x80>)
 800bb1c:	f7f5 fb35 	bl	800118a <WriteBDC>
					Robot_Pitch = PITCH45;
 800bb20:	4b07      	ldr	r3, [pc, #28]	; (800bb40 <CheckPitch+0x78>)
 800bb22:	2200      	movs	r2, #0
 800bb24:	701a      	strb	r2, [r3, #0]
					set_pitch = 0;
 800bb26:	4b05      	ldr	r3, [pc, #20]	; (800bb3c <CheckPitch+0x74>)
 800bb28:	2200      	movs	r2, #0
 800bb2a:	601a      	str	r2, [r3, #0]
				break;
 800bb2c:	e003      	b.n	800bb36 <CheckPitch+0x6e>
	}
 800bb2e:	bf00      	nop
 800bb30:	e002      	b.n	800bb38 <CheckPitch+0x70>
				break;
 800bb32:	bf00      	nop
 800bb34:	e000      	b.n	800bb38 <CheckPitch+0x70>
				break;
 800bb36:	bf00      	nop
}
 800bb38:	bf00      	nop
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	2000965c 	.word	0x2000965c
 800bb40:	20009672 	.word	0x20009672
 800bb44:	40020400 	.word	0x40020400
 800bb48:	20006c44 	.word	0x20006c44
 800bb4c:	00000000 	.word	0x00000000

0800bb50 <CheckPick>:

void CheckPick()
{
 800bb50:	b5b0      	push	{r4, r5, r7, lr}
 800bb52:	b0a4      	sub	sp, #144	; 0x90
 800bb54:	af00      	add	r7, sp, #0
	if(pick_left)
 800bb56:	4bbc      	ldr	r3, [pc, #752]	; (800be48 <CheckPick+0x2f8>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	f000 8139 	beq.w	800bdd2 <CheckPick+0x282>
	{
		lidar.pos = PICK_LEFT;
 800bb60:	4bba      	ldr	r3, [pc, #744]	; (800be4c <CheckPick+0x2fc>)
 800bb62:	2201      	movs	r2, #1
 800bb64:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar.pos_counter = PICK_LEFT;
 800bb68:	4bb8      	ldr	r3, [pc, #736]	; (800be4c <CheckPick+0x2fc>)
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		// Stick to fence
		float stick_fence_point[1][7] = {{2.0, 0.0, -5, 0, 0, 0, 0}};
 800bb70:	4bb7      	ldr	r3, [pc, #732]	; (800be50 <CheckPick+0x300>)
 800bb72:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800bb76:	461d      	mov	r5, r3
 800bb78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bb80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(stick_fence_point, 1, &pp);
 800bb84:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800bb88:	4ab2      	ldr	r2, [pc, #712]	; (800be54 <CheckPick+0x304>)
 800bb8a:	2101      	movs	r1, #1
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f7f9 fefa 	bl	8005986 <PP_start>
		while(pp.pp_start)
 800bb92:	e020      	b.n	800bbd6 <CheckPick+0x86>
		{
			if(ps4.button == SQUARE)
 800bb94:	4bb0      	ldr	r3, [pc, #704]	; (800be58 <CheckPick+0x308>)
 800bb96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb9c:	d108      	bne.n	800bbb0 <CheckPick+0x60>
			{
				while(ps4.button == SQUARE);
 800bb9e:	bf00      	nop
 800bba0:	4bad      	ldr	r3, [pc, #692]	; (800be58 <CheckPick+0x308>)
 800bba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bba8:	d0fa      	beq.n	800bba0 <CheckPick+0x50>
				PP_stop(&pp);
 800bbaa:	48aa      	ldr	r0, [pc, #680]	; (800be54 <CheckPick+0x304>)
 800bbac:	f7fa f925 	bl	8005dfa <PP_stop>
			}

			if(In_LS_Left_1 || In_LS_Left_2)
 800bbb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bbb4:	48a9      	ldr	r0, [pc, #676]	; (800be5c <CheckPick+0x30c>)
 800bbb6:	f006 fbcb 	bl	8012350 <HAL_GPIO_ReadPin>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d007      	beq.n	800bbd0 <CheckPick+0x80>
 800bbc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bbc4:	48a5      	ldr	r0, [pc, #660]	; (800be5c <CheckPick+0x30c>)
 800bbc6:	f006 fbc3 	bl	8012350 <HAL_GPIO_ReadPin>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d102      	bne.n	800bbd6 <CheckPick+0x86>
				PP_stop(&pp);
 800bbd0:	48a0      	ldr	r0, [pc, #640]	; (800be54 <CheckPick+0x304>)
 800bbd2:	f7fa f912 	bl	8005dfa <PP_stop>
		while(pp.pp_start)
 800bbd6:	4b9f      	ldr	r3, [pc, #636]	; (800be54 <CheckPick+0x304>)
 800bbd8:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800bbdc:	f003 0301 	and.w	r3, r3, #1
 800bbe0:	b2db      	uxtb	r3, r3
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d1d6      	bne.n	800bb94 <CheckPick+0x44>
		}
		pick_left = 0;
 800bbe6:	4b98      	ldr	r3, [pc, #608]	; (800be48 <CheckPick+0x2f8>)
 800bbe8:	2200      	movs	r2, #0
 800bbea:	601a      	str	r2, [r3, #0]
		picked_left = 1;
 800bbec:	4b9c      	ldr	r3, [pc, #624]	; (800be60 <CheckPick+0x310>)
 800bbee:	2201      	movs	r2, #1
 800bbf0:	601a      	str	r2, [r3, #0]

		setPick(0);
 800bbf2:	2000      	movs	r0, #0
 800bbf4:	f7ff ff0c 	bl	800ba10 <setPick>

		if(pick_left_manual)
 800bbf8:	4b9a      	ldr	r3, [pc, #616]	; (800be64 <CheckPick+0x314>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d001      	beq.n	800bc04 <CheckPick+0xb4>
			ResetCoordinate();
 800bc00:	f000 fbcc 	bl	800c39c <ResetCoordinate>

		float pick_left_point[1][7] = {{2.3, -10, -1.5, 0, 0, 0, 0}};
 800bc04:	4b98      	ldr	r3, [pc, #608]	; (800be68 <CheckPick+0x318>)
 800bc06:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800bc0a:	461d      	mov	r5, r3
 800bc0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bc14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(pick_left_point, 1, &pp);
 800bc18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800bc1c:	4a8d      	ldr	r2, [pc, #564]	; (800be54 <CheckPick+0x304>)
 800bc1e:	2101      	movs	r1, #1
 800bc20:	4618      	mov	r0, r3
 800bc22:	f7f9 feb0 	bl	8005986 <PP_start>
		while(pp.pp_start)
 800bc26:	e062      	b.n	800bcee <CheckPick+0x19e>
		{
			if(!pick_left_manual)
 800bc28:	4b8e      	ldr	r3, [pc, #568]	; (800be64 <CheckPick+0x314>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d127      	bne.n	800bc80 <CheckPick+0x130>
			{
				if(pp.real_x <= -4.9)
 800bc30:	4b88      	ldr	r3, [pc, #544]	; (800be54 <CheckPick+0x304>)
 800bc32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7f4 fc87 	bl	8000548 <__aeabi_f2d>
 800bc3a:	a37f      	add	r3, pc, #508	; (adr r3, 800be38 <CheckPick+0x2e8>)
 800bc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc40:	f7f4 ff56 	bl	8000af0 <__aeabi_dcmple>
 800bc44:	4603      	mov	r3, r0
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d004      	beq.n	800bc54 <CheckPick+0x104>
					pp.target_vel[0] = 0.5;
 800bc4a:	4b82      	ldr	r3, [pc, #520]	; (800be54 <CheckPick+0x304>)
 800bc4c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800bc50:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

				if(In_Pick && pp.real_x <= -5.0)
 800bc54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bc58:	4884      	ldr	r0, [pc, #528]	; (800be6c <CheckPick+0x31c>)
 800bc5a:	f006 fb79 	bl	8012350 <HAL_GPIO_ReadPin>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d133      	bne.n	800bccc <CheckPick+0x17c>
 800bc64:	4b7b      	ldr	r3, [pc, #492]	; (800be54 <CheckPick+0x304>)
 800bc66:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800bc6a:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 800bc6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc76:	d829      	bhi.n	800bccc <CheckPick+0x17c>
					PP_stop(&pp);
 800bc78:	4876      	ldr	r0, [pc, #472]	; (800be54 <CheckPick+0x304>)
 800bc7a:	f7fa f8be 	bl	8005dfa <PP_stop>
 800bc7e:	e025      	b.n	800bccc <CheckPick+0x17c>
			}
			else
			{
				if(pp.real_x <= -0.25)
 800bc80:	4b74      	ldr	r3, [pc, #464]	; (800be54 <CheckPick+0x304>)
 800bc82:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800bc86:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800bc8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc92:	d803      	bhi.n	800bc9c <CheckPick+0x14c>
					pp.target_vel[0] = 0.55;
 800bc94:	4b6f      	ldr	r3, [pc, #444]	; (800be54 <CheckPick+0x304>)
 800bc96:	4a76      	ldr	r2, [pc, #472]	; (800be70 <CheckPick+0x320>)
 800bc98:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

				if(In_Pick && pp.real_x <= -0.3)
 800bc9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bca0:	4872      	ldr	r0, [pc, #456]	; (800be6c <CheckPick+0x31c>)
 800bca2:	f006 fb55 	bl	8012350 <HAL_GPIO_ReadPin>
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d10f      	bne.n	800bccc <CheckPick+0x17c>
 800bcac:	4b69      	ldr	r3, [pc, #420]	; (800be54 <CheckPick+0x304>)
 800bcae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f7f4 fc49 	bl	8000548 <__aeabi_f2d>
 800bcb6:	a362      	add	r3, pc, #392	; (adr r3, 800be40 <CheckPick+0x2f0>)
 800bcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbc:	f7f4 ff18 	bl	8000af0 <__aeabi_dcmple>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d002      	beq.n	800bccc <CheckPick+0x17c>
					PP_stop(&pp);
 800bcc6:	4863      	ldr	r0, [pc, #396]	; (800be54 <CheckPick+0x304>)
 800bcc8:	f7fa f897 	bl	8005dfa <PP_stop>
			}

			if(ps4.button == SQUARE)
 800bccc:	4b62      	ldr	r3, [pc, #392]	; (800be58 <CheckPick+0x308>)
 800bcce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcd4:	d10b      	bne.n	800bcee <CheckPick+0x19e>
			{
				while(ps4.button == SQUARE);
 800bcd6:	bf00      	nop
 800bcd8:	4b5f      	ldr	r3, [pc, #380]	; (800be58 <CheckPick+0x308>)
 800bcda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bce0:	d0fa      	beq.n	800bcd8 <CheckPick+0x188>
				PP_stop(&pp);
 800bce2:	485c      	ldr	r0, [pc, #368]	; (800be54 <CheckPick+0x304>)
 800bce4:	f7fa f889 	bl	8005dfa <PP_stop>
				picked_left = 0;
 800bce8:	4b5d      	ldr	r3, [pc, #372]	; (800be60 <CheckPick+0x310>)
 800bcea:	2200      	movs	r2, #0
 800bcec:	601a      	str	r2, [r3, #0]
		while(pp.pp_start)
 800bcee:	4b59      	ldr	r3, [pc, #356]	; (800be54 <CheckPick+0x304>)
 800bcf0:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800bcf4:	f003 0301 	and.w	r3, r3, #1
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d194      	bne.n	800bc28 <CheckPick+0xd8>
			}
		}
		pick_left_manual = 0;
 800bcfe:	4b59      	ldr	r3, [pc, #356]	; (800be64 <CheckPick+0x314>)
 800bd00:	2200      	movs	r2, #0
 800bd02:	601a      	str	r2, [r3, #0]
		if(picked_left)
 800bd04:	4b56      	ldr	r3, [pc, #344]	; (800be60 <CheckPick+0x310>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d062      	beq.n	800bdd2 <CheckPick+0x282>
		{
			float pick_left_adjust_servo[1][7] = {{4.0, 0.5, 0.2, 0, 0, 0, 0}};
 800bd0c:	4b59      	ldr	r3, [pc, #356]	; (800be74 <CheckPick+0x324>)
 800bd0e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800bd12:	461d      	mov	r5, r3
 800bd14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bd16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bd18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bd1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			PP_start(pick_left_adjust_servo, 1, &pp);
 800bd20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bd24:	4a4b      	ldr	r2, [pc, #300]	; (800be54 <CheckPick+0x304>)
 800bd26:	2101      	movs	r1, #1
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7f9 fe2c 	bl	8005986 <PP_start>
			while(pp.pp_start)
 800bd2e:	e00d      	b.n	800bd4c <CheckPick+0x1fc>
			{
				if(ps4.button == SQUARE)
 800bd30:	4b49      	ldr	r3, [pc, #292]	; (800be58 <CheckPick+0x308>)
 800bd32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd38:	d108      	bne.n	800bd4c <CheckPick+0x1fc>
				{
					while(ps4.button == SQUARE);
 800bd3a:	bf00      	nop
 800bd3c:	4b46      	ldr	r3, [pc, #280]	; (800be58 <CheckPick+0x308>)
 800bd3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd44:	d0fa      	beq.n	800bd3c <CheckPick+0x1ec>
					PP_stop(&pp);
 800bd46:	4843      	ldr	r0, [pc, #268]	; (800be54 <CheckPick+0x304>)
 800bd48:	f7fa f857 	bl	8005dfa <PP_stop>
			while(pp.pp_start)
 800bd4c:	4b41      	ldr	r3, [pc, #260]	; (800be54 <CheckPick+0x304>)
 800bd4e:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800bd52:	f003 0301 	and.w	r3, r3, #1
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d1e9      	bne.n	800bd30 <CheckPick+0x1e0>
				}
			}
			LoadRing();
 800bd5c:	f000 faa0 	bl	800c2a0 <LoadRing>
			close_servo;
 800bd60:	f240 3152 	movw	r1, #850	; 0x352
 800bd64:	4844      	ldr	r0, [pc, #272]	; (800be78 <CheckPick+0x328>)
 800bd66:	f7fe f83b 	bl	8009de0 <ServoSetPulse>
			load_adjust = 1;
 800bd6a:	4b44      	ldr	r3, [pc, #272]	; (800be7c <CheckPick+0x32c>)
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	601a      	str	r2, [r3, #0]
			lidar.pos_counter = CENTER_1;
 800bd70:	4b36      	ldr	r3, [pc, #216]	; (800be4c <CheckPick+0x2fc>)
 800bd72:	2203      	movs	r2, #3
 800bd74:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			for(int i = 0; i < 4; i++)
 800bd78:	2300      	movs	r3, #0
 800bd7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bd7e:	e020      	b.n	800bdc2 <CheckPick+0x272>
			{
				if(ps4.button == SQUARE)
 800bd80:	4b35      	ldr	r3, [pc, #212]	; (800be58 <CheckPick+0x308>)
 800bd82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd88:	d106      	bne.n	800bd98 <CheckPick+0x248>
				{
					while(ps4.button == SQUARE);
 800bd8a:	bf00      	nop
 800bd8c:	4b32      	ldr	r3, [pc, #200]	; (800be58 <CheckPick+0x308>)
 800bd8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd94:	d0fa      	beq.n	800bd8c <CheckPick+0x23c>
					break;
 800bd96:	e018      	b.n	800bdca <CheckPick+0x27a>
				}

				load_adjust_servo;
 800bd98:	f240 414c 	movw	r1, #1100	; 0x44c
 800bd9c:	4836      	ldr	r0, [pc, #216]	; (800be78 <CheckPick+0x328>)
 800bd9e:	f7fe f81f 	bl	8009de0 <ServoSetPulse>
				osDelay(100);
 800bda2:	2064      	movs	r0, #100	; 0x64
 800bda4:	f00b f9bb 	bl	801711e <osDelay>
				close_servo;
 800bda8:	f240 3152 	movw	r1, #850	; 0x352
 800bdac:	4832      	ldr	r0, [pc, #200]	; (800be78 <CheckPick+0x328>)
 800bdae:	f7fe f817 	bl	8009de0 <ServoSetPulse>
				osDelay(100);
 800bdb2:	2064      	movs	r0, #100	; 0x64
 800bdb4:	f00b f9b3 	bl	801711e <osDelay>
			for(int i = 0; i < 4; i++)
 800bdb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bdc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bdc6:	2b03      	cmp	r3, #3
 800bdc8:	ddda      	ble.n	800bd80 <CheckPick+0x230>
			}
//			osDelay(500);
			setSpeedMODN(5.5);
 800bdca:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
 800bdce:	f7f8 ff0f 	bl	8004bf0 <setSpeedMODN>
		}
	}

	if(pick_right)
 800bdd2:	4b2b      	ldr	r3, [pc, #172]	; (800be80 <CheckPick+0x330>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	f000 80f3 	beq.w	800bfc2 <CheckPick+0x472>
	{
		load_stop_once = 0;
 800bddc:	4b29      	ldr	r3, [pc, #164]	; (800be84 <CheckPick+0x334>)
 800bdde:	2200      	movs	r2, #0
 800bde0:	601a      	str	r2, [r3, #0]
		loaded = 0;
 800bde2:	4b29      	ldr	r3, [pc, #164]	; (800be88 <CheckPick+0x338>)
 800bde4:	2200      	movs	r2, #0
 800bde6:	601a      	str	r2, [r3, #0]
		load_adjust = 1;
 800bde8:	4b24      	ldr	r3, [pc, #144]	; (800be7c <CheckPick+0x32c>)
 800bdea:	2201      	movs	r2, #1
 800bdec:	601a      	str	r2, [r3, #0]

//		pick_0 = 1;
//		pick_manual(-10000);

		lidar.pos = PICK_RIGHT;
 800bdee:	4b17      	ldr	r3, [pc, #92]	; (800be4c <CheckPick+0x2fc>)
 800bdf0:	2209      	movs	r2, #9
 800bdf2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar.pos_counter = PICK_RIGHT;
 800bdf6:	4b15      	ldr	r3, [pc, #84]	; (800be4c <CheckPick+0x2fc>)
 800bdf8:	2209      	movs	r2, #9
 800bdfa:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		// Stick to fence
		open_servo;
 800bdfe:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800be02:	481d      	ldr	r0, [pc, #116]	; (800be78 <CheckPick+0x328>)
 800be04:	f7fd ffec 	bl	8009de0 <ServoSetPulse>
		pick_right = 0;
 800be08:	4b1d      	ldr	r3, [pc, #116]	; (800be80 <CheckPick+0x330>)
 800be0a:	2200      	movs	r2, #0
 800be0c:	601a      	str	r2, [r3, #0]
		float stick_fence_right[1][7] = {{2.0, 10, 0, -90, 0, 0, 0}};
 800be0e:	4b1f      	ldr	r3, [pc, #124]	; (800be8c <CheckPick+0x33c>)
 800be10:	f107 041c 	add.w	r4, r7, #28
 800be14:	461d      	mov	r5, r3
 800be16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800be1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(stick_fence_right, 1, &pp);
 800be22:	f107 031c 	add.w	r3, r7, #28
 800be26:	4a0b      	ldr	r2, [pc, #44]	; (800be54 <CheckPick+0x304>)
 800be28:	2101      	movs	r1, #1
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7f9 fdab 	bl	8005986 <PP_start>
		while(pp.pp_start)
 800be30:	e04f      	b.n	800bed2 <CheckPick+0x382>
 800be32:	bf00      	nop
 800be34:	f3af 8000 	nop.w
 800be38:	9999999a 	.word	0x9999999a
 800be3c:	c0139999 	.word	0xc0139999
 800be40:	33333333 	.word	0x33333333
 800be44:	bfd33333 	.word	0xbfd33333
 800be48:	2000785c 	.word	0x2000785c
 800be4c:	20009030 	.word	0x20009030
 800be50:	0801fd94 	.word	0x0801fd94
 800be54:	20006cc4 	.word	0x20006cc4
 800be58:	2000a014 	.word	0x2000a014
 800be5c:	40020c00 	.word	0x40020c00
 800be60:	200097fc 	.word	0x200097fc
 800be64:	200099a8 	.word	0x200099a8
 800be68:	0801fe04 	.word	0x0801fe04
 800be6c:	40021000 	.word	0x40021000
 800be70:	3f0ccccd 	.word	0x3f0ccccd
 800be74:	0801fe20 	.word	0x0801fe20
 800be78:	2000786c 	.word	0x2000786c
 800be7c:	2000943c 	.word	0x2000943c
 800be80:	2000a624 	.word	0x2000a624
 800be84:	20009978 	.word	0x20009978
 800be88:	20009428 	.word	0x20009428
 800be8c:	0801fe3c 	.word	0x0801fe3c
		{
			if(ps4.button == SQUARE)
 800be90:	4b51      	ldr	r3, [pc, #324]	; (800bfd8 <CheckPick+0x488>)
 800be92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be98:	d108      	bne.n	800beac <CheckPick+0x35c>
			{
				while(ps4.button == SQUARE);
 800be9a:	bf00      	nop
 800be9c:	4b4e      	ldr	r3, [pc, #312]	; (800bfd8 <CheckPick+0x488>)
 800be9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bea4:	d0fa      	beq.n	800be9c <CheckPick+0x34c>
				PP_stop(&pp);
 800bea6:	484d      	ldr	r0, [pc, #308]	; (800bfdc <CheckPick+0x48c>)
 800bea8:	f7f9 ffa7 	bl	8005dfa <PP_stop>
			}

			if(In_LS_Left_1 || In_LS_Left_2)
 800beac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800beb0:	484b      	ldr	r0, [pc, #300]	; (800bfe0 <CheckPick+0x490>)
 800beb2:	f006 fa4d 	bl	8012350 <HAL_GPIO_ReadPin>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d007      	beq.n	800becc <CheckPick+0x37c>
 800bebc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bec0:	4847      	ldr	r0, [pc, #284]	; (800bfe0 <CheckPick+0x490>)
 800bec2:	f006 fa45 	bl	8012350 <HAL_GPIO_ReadPin>
 800bec6:	4603      	mov	r3, r0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d102      	bne.n	800bed2 <CheckPick+0x382>
				PP_stop(&pp);
 800becc:	4843      	ldr	r0, [pc, #268]	; (800bfdc <CheckPick+0x48c>)
 800bece:	f7f9 ff94 	bl	8005dfa <PP_stop>
		while(pp.pp_start)
 800bed2:	4b42      	ldr	r3, [pc, #264]	; (800bfdc <CheckPick+0x48c>)
 800bed4:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800bed8:	f003 0301 	and.w	r3, r3, #1
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d1d6      	bne.n	800be90 <CheckPick+0x340>
		}

		picked_right = 1;
 800bee2:	4b40      	ldr	r3, [pc, #256]	; (800bfe4 <CheckPick+0x494>)
 800bee4:	2201      	movs	r2, #1
 800bee6:	601a      	str	r2, [r3, #0]
		ResetCoordinate();
 800bee8:	f000 fa58 	bl	800c39c <ResetCoordinate>
		setPick(0);
 800beec:	2000      	movs	r0, #0
 800beee:	f7ff fd8f 	bl	800ba10 <setPick>
		float pick_right_point[1][7] = {{2.5, 2.5, -10, -90, 0, 0, 0}};
 800bef2:	4b3d      	ldr	r3, [pc, #244]	; (800bfe8 <CheckPick+0x498>)
 800bef4:	463c      	mov	r4, r7
 800bef6:	461d      	mov	r5, r3
 800bef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800befa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800befc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bf00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(pick_right_point, 1, &pp);
 800bf04:	463b      	mov	r3, r7
 800bf06:	4a35      	ldr	r2, [pc, #212]	; (800bfdc <CheckPick+0x48c>)
 800bf08:	2101      	movs	r1, #1
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7f9 fd3b 	bl	8005986 <PP_start>
		while(pp.pp_start)
 800bf10:	e037      	b.n	800bf82 <CheckPick+0x432>
		{
			if(ps4.button == SQUARE)
 800bf12:	4b31      	ldr	r3, [pc, #196]	; (800bfd8 <CheckPick+0x488>)
 800bf14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf1a:	d10b      	bne.n	800bf34 <CheckPick+0x3e4>
			{
				while(ps4.button == SQUARE);
 800bf1c:	bf00      	nop
 800bf1e:	4b2e      	ldr	r3, [pc, #184]	; (800bfd8 <CheckPick+0x488>)
 800bf20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf26:	d0fa      	beq.n	800bf1e <CheckPick+0x3ce>
				PP_stop(&pp);
 800bf28:	482c      	ldr	r0, [pc, #176]	; (800bfdc <CheckPick+0x48c>)
 800bf2a:	f7f9 ff66 	bl	8005dfa <PP_stop>
				picked_right = 0;
 800bf2e:	4b2d      	ldr	r3, [pc, #180]	; (800bfe4 <CheckPick+0x494>)
 800bf30:	2200      	movs	r2, #0
 800bf32:	601a      	str	r2, [r3, #0]
			}

			if(pp.real_y <= -0.25)
 800bf34:	4b29      	ldr	r3, [pc, #164]	; (800bfdc <CheckPick+0x48c>)
 800bf36:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800bf3a:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800bf3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf46:	d803      	bhi.n	800bf50 <CheckPick+0x400>
				pp.target_vel[0] = 0.65;
 800bf48:	4b24      	ldr	r3, [pc, #144]	; (800bfdc <CheckPick+0x48c>)
 800bf4a:	4a28      	ldr	r2, [pc, #160]	; (800bfec <CheckPick+0x49c>)
 800bf4c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

			if(In_Pick && pp.real_y <= -0.3)
 800bf50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bf54:	4826      	ldr	r0, [pc, #152]	; (800bff0 <CheckPick+0x4a0>)
 800bf56:	f006 f9fb 	bl	8012350 <HAL_GPIO_ReadPin>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d110      	bne.n	800bf82 <CheckPick+0x432>
 800bf60:	4b1e      	ldr	r3, [pc, #120]	; (800bfdc <CheckPick+0x48c>)
 800bf62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7f4 faef 	bl	8000548 <__aeabi_f2d>
 800bf6a:	a319      	add	r3, pc, #100	; (adr r3, 800bfd0 <CheckPick+0x480>)
 800bf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf70:	f7f4 fdbe 	bl	8000af0 <__aeabi_dcmple>
 800bf74:	4603      	mov	r3, r0
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d100      	bne.n	800bf7c <CheckPick+0x42c>
 800bf7a:	e002      	b.n	800bf82 <CheckPick+0x432>
				PP_stop(&pp);
 800bf7c:	4817      	ldr	r0, [pc, #92]	; (800bfdc <CheckPick+0x48c>)
 800bf7e:	f7f9 ff3c 	bl	8005dfa <PP_stop>
		while(pp.pp_start)
 800bf82:	4b16      	ldr	r3, [pc, #88]	; (800bfdc <CheckPick+0x48c>)
 800bf84:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800bf88:	f003 0301 	and.w	r3, r3, #1
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d1bf      	bne.n	800bf12 <CheckPick+0x3c2>
		}

		if(picked_right)
 800bf92:	4b14      	ldr	r3, [pc, #80]	; (800bfe4 <CheckPick+0x494>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d013      	beq.n	800bfc2 <CheckPick+0x472>
		{
//			LoadRing()
			if(type_3_done)
 800bf9a:	4b16      	ldr	r3, [pc, #88]	; (800bff4 <CheckPick+0x4a4>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d004      	beq.n	800bfac <CheckPick+0x45c>
				lidar.pos_counter = CENTER_4;
 800bfa2:	4b15      	ldr	r3, [pc, #84]	; (800bff8 <CheckPick+0x4a8>)
 800bfa4:	2207      	movs	r2, #7
 800bfa6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 800bfaa:	e003      	b.n	800bfb4 <CheckPick+0x464>
			else
				lidar.pos_counter = UPPER_RIGHT;
 800bfac:	4b12      	ldr	r3, [pc, #72]	; (800bff8 <CheckPick+0x4a8>)
 800bfae:	2208      	movs	r2, #8
 800bfb0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
//			osDelay(500);
//			close_servo;
			load_adjust = 1;
 800bfb4:	4b11      	ldr	r3, [pc, #68]	; (800bffc <CheckPick+0x4ac>)
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	601a      	str	r2, [r3, #0]
			setSpeedMODN(5.5);
 800bfba:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
 800bfbe:	f7f8 fe17 	bl	8004bf0 <setSpeedMODN>
		}
	}
}
 800bfc2:	bf00      	nop
 800bfc4:	3790      	adds	r7, #144	; 0x90
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bdb0      	pop	{r4, r5, r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	f3af 8000 	nop.w
 800bfd0:	33333333 	.word	0x33333333
 800bfd4:	bfd33333 	.word	0xbfd33333
 800bfd8:	2000a014 	.word	0x2000a014
 800bfdc:	20006cc4 	.word	0x20006cc4
 800bfe0:	40020c00 	.word	0x40020c00
 800bfe4:	20007214 	.word	0x20007214
 800bfe8:	0801fe58 	.word	0x0801fe58
 800bfec:	3f266666 	.word	0x3f266666
 800bff0:	40021000 	.word	0x40021000
 800bff4:	20009434 	.word	0x20009434
 800bff8:	20009030 	.word	0x20009030
 800bffc:	2000943c 	.word	0x2000943c

0800c000 <CheckShoot>:

void CheckShoot()
{
 800c000:	b580      	push	{r7, lr}
 800c002:	af00      	add	r7, sp, #0
//	if(In_ShotDone)
//		led3 = 1;
//	else
//		led3 = 0;

	if(shoot_start && In_ShotDone)
 800c004:	4b31      	ldr	r3, [pc, #196]	; (800c0cc <CheckShoot+0xcc>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d012      	beq.n	800c032 <CheckShoot+0x32>
 800c00c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c010:	482f      	ldr	r0, [pc, #188]	; (800c0d0 <CheckShoot+0xd0>)
 800c012:	f006 f99d 	bl	8012350 <HAL_GPIO_ReadPin>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d10a      	bne.n	800c032 <CheckShoot+0x32>
	{
		shoot_done = 1;
 800c01c:	4b2d      	ldr	r3, [pc, #180]	; (800c0d4 <CheckShoot+0xd4>)
 800c01e:	2201      	movs	r2, #1
 800c020:	601a      	str	r2, [r3, #0]
		shoot_start = 0;
 800c022:	4b2a      	ldr	r3, [pc, #168]	; (800c0cc <CheckShoot+0xcc>)
 800c024:	2200      	movs	r2, #0
 800c026:	601a      	str	r2, [r3, #0]
		push_return;
 800c028:	492b      	ldr	r1, [pc, #172]	; (800c0d8 <CheckShoot+0xd8>)
 800c02a:	482c      	ldr	r0, [pc, #176]	; (800c0dc <CheckShoot+0xdc>)
 800c02c:	f7f5 f8ad 	bl	800118a <WriteBDC>
 800c030:	e00e      	b.n	800c050 <CheckShoot+0x50>
	}
	else if(In_ShotDone)
 800c032:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c036:	4826      	ldr	r0, [pc, #152]	; (800c0d0 <CheckShoot+0xd0>)
 800c038:	f006 f98a 	bl	8012350 <HAL_GPIO_ReadPin>
 800c03c:	4603      	mov	r3, r0
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d106      	bne.n	800c050 <CheckShoot+0x50>
	{
		push_return;
 800c042:	4925      	ldr	r1, [pc, #148]	; (800c0d8 <CheckShoot+0xd8>)
 800c044:	4825      	ldr	r0, [pc, #148]	; (800c0dc <CheckShoot+0xdc>)
 800c046:	f7f5 f8a0 	bl	800118a <WriteBDC>
		shoot_done = 1;
 800c04a:	4b22      	ldr	r3, [pc, #136]	; (800c0d4 <CheckShoot+0xd4>)
 800c04c:	2201      	movs	r2, #1
 800c04e:	601a      	str	r2, [r3, #0]
	}

	// Done Shooting
	if(shoot_done && In_ShotReady && wait_load)
 800c050:	4b20      	ldr	r3, [pc, #128]	; (800c0d4 <CheckShoot+0xd4>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d023      	beq.n	800c0a0 <CheckShoot+0xa0>
 800c058:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c05c:	481c      	ldr	r0, [pc, #112]	; (800c0d0 <CheckShoot+0xd0>)
 800c05e:	f006 f977 	bl	8012350 <HAL_GPIO_ReadPin>
 800c062:	4603      	mov	r3, r0
 800c064:	2b00      	cmp	r3, #0
 800c066:	d11b      	bne.n	800c0a0 <CheckShoot+0xa0>
 800c068:	4b1d      	ldr	r3, [pc, #116]	; (800c0e0 <CheckShoot+0xe0>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d017      	beq.n	800c0a0 <CheckShoot+0xa0>
	{
		wait_load = 0;
 800c070:	4b1b      	ldr	r3, [pc, #108]	; (800c0e0 <CheckShoot+0xe0>)
 800c072:	2200      	movs	r2, #0
 800c074:	601a      	str	r2, [r3, #0]
		shoot_done = 0;
 800c076:	4b17      	ldr	r3, [pc, #92]	; (800c0d4 <CheckShoot+0xd4>)
 800c078:	2200      	movs	r2, #0
 800c07a:	601a      	str	r2, [r3, #0]
		push_stop;
 800c07c:	2100      	movs	r1, #0
 800c07e:	4817      	ldr	r0, [pc, #92]	; (800c0dc <CheckShoot+0xdc>)
 800c080:	f7f5 f883 	bl	800118a <WriteBDC>
		adjust_servo;
 800c084:	f240 31b6 	movw	r1, #950	; 0x3b6
 800c088:	4816      	ldr	r0, [pc, #88]	; (800c0e4 <CheckShoot+0xe4>)
 800c08a:	f7fd fea9 	bl	8009de0 <ServoSetPulse>
		reload = 1;
 800c08e:	4b16      	ldr	r3, [pc, #88]	; (800c0e8 <CheckShoot+0xe8>)
 800c090:	2201      	movs	r2, #1
 800c092:	601a      	str	r2, [r3, #0]
		pick_manual(5000);
 800c094:	f241 3188 	movw	r1, #5000	; 0x1388
 800c098:	4814      	ldr	r0, [pc, #80]	; (800c0ec <CheckShoot+0xec>)
 800c09a:	f7f5 f876 	bl	800118a <WriteBDC>
	else if(shoot_done && In_ShotReady)
	{
		shoot_done = 0;
		push_stop;
	}
}
 800c09e:	e012      	b.n	800c0c6 <CheckShoot+0xc6>
	else if(shoot_done && In_ShotReady)
 800c0a0:	4b0c      	ldr	r3, [pc, #48]	; (800c0d4 <CheckShoot+0xd4>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d00e      	beq.n	800c0c6 <CheckShoot+0xc6>
 800c0a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c0ac:	4808      	ldr	r0, [pc, #32]	; (800c0d0 <CheckShoot+0xd0>)
 800c0ae:	f006 f94f 	bl	8012350 <HAL_GPIO_ReadPin>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d106      	bne.n	800c0c6 <CheckShoot+0xc6>
		shoot_done = 0;
 800c0b8:	4b06      	ldr	r3, [pc, #24]	; (800c0d4 <CheckShoot+0xd4>)
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	601a      	str	r2, [r3, #0]
		push_stop;
 800c0be:	2100      	movs	r1, #0
 800c0c0:	4806      	ldr	r0, [pc, #24]	; (800c0dc <CheckShoot+0xdc>)
 800c0c2:	f7f5 f862 	bl	800118a <WriteBDC>
}
 800c0c6:	bf00      	nop
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	200092cc 	.word	0x200092cc
 800c0d0:	40021000 	.word	0x40021000
 800c0d4:	20008f7c 	.word	0x20008f7c
 800c0d8:	ffffb1e1 	.word	0xffffb1e1
 800c0dc:	20009674 	.word	0x20009674
 800c0e0:	20007484 	.word	0x20007484
 800c0e4:	2000786c 	.word	0x2000786c
 800c0e8:	2000774c 	.word	0x2000774c
 800c0ec:	2000770c 	.word	0x2000770c

0800c0f0 <CheckLoad>:

void CheckLoad()
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	af00      	add	r7, sp, #0
//	else if(load_start)
//	{
//		pick_up;
//	}

	if(load_start || reload)
 800c0f4:	4b5b      	ldr	r3, [pc, #364]	; (800c264 <CheckLoad+0x174>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d103      	bne.n	800c104 <CheckLoad+0x14>
 800c0fc:	4b5a      	ldr	r3, [pc, #360]	; (800c268 <CheckLoad+0x178>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d028      	beq.n	800c156 <CheckLoad+0x66>
	{
		if(pick_enc >= 9500 && !load_stop_once)
 800c104:	4b59      	ldr	r3, [pc, #356]	; (800c26c <CheckLoad+0x17c>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f242 521b 	movw	r2, #9499	; 0x251b
 800c10c:	4293      	cmp	r3, r2
 800c10e:	dd12      	ble.n	800c136 <CheckLoad+0x46>
 800c110:	4b57      	ldr	r3, [pc, #348]	; (800c270 <CheckLoad+0x180>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d10e      	bne.n	800c136 <CheckLoad+0x46>
		{
			pick_stop;
 800c118:	2100      	movs	r1, #0
 800c11a:	4856      	ldr	r0, [pc, #344]	; (800c274 <CheckLoad+0x184>)
 800c11c:	f7f5 f835 	bl	800118a <WriteBDC>
			osDelay(200);
 800c120:	20c8      	movs	r0, #200	; 0xc8
 800c122:	f00a fffc 	bl	801711e <osDelay>
			pick_manual(5000);
 800c126:	f241 3188 	movw	r1, #5000	; 0x1388
 800c12a:	4852      	ldr	r0, [pc, #328]	; (800c274 <CheckLoad+0x184>)
 800c12c:	f7f5 f82d 	bl	800118a <WriteBDC>
//			close_servo;
			load_stop_once = 1;
 800c130:	4b4f      	ldr	r3, [pc, #316]	; (800c270 <CheckLoad+0x180>)
 800c132:	2201      	movs	r2, #1
 800c134:	601a      	str	r2, [r3, #0]
		}

		if(pick_enc >= 16500)
 800c136:	4b4d      	ldr	r3, [pc, #308]	; (800c26c <CheckLoad+0x17c>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f244 0273 	movw	r2, #16499	; 0x4073
 800c13e:	4293      	cmp	r3, r2
 800c140:	dd09      	ble.n	800c156 <CheckLoad+0x66>
		{
			load_start = 0;
 800c142:	4b48      	ldr	r3, [pc, #288]	; (800c264 <CheckLoad+0x174>)
 800c144:	2200      	movs	r2, #0
 800c146:	601a      	str	r2, [r3, #0]
			reload = 0;
 800c148:	4b47      	ldr	r3, [pc, #284]	; (800c268 <CheckLoad+0x178>)
 800c14a:	2200      	movs	r2, #0
 800c14c:	601a      	str	r2, [r3, #0]
			pick_stop;
 800c14e:	2100      	movs	r1, #0
 800c150:	4848      	ldr	r0, [pc, #288]	; (800c274 <CheckLoad+0x184>)
 800c152:	f7f5 f81a 	bl	800118a <WriteBDC>
		}
	}

	if(load_start && In_Load && pick_enc >= 8500)
 800c156:	4b43      	ldr	r3, [pc, #268]	; (800c264 <CheckLoad+0x174>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d038      	beq.n	800c1d0 <CheckLoad+0xe0>
 800c15e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c162:	4845      	ldr	r0, [pc, #276]	; (800c278 <CheckLoad+0x188>)
 800c164:	f006 f8f4 	bl	8012350 <HAL_GPIO_ReadPin>
 800c168:	4603      	mov	r3, r0
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d130      	bne.n	800c1d0 <CheckLoad+0xe0>
 800c16e:	4b3f      	ldr	r3, [pc, #252]	; (800c26c <CheckLoad+0x17c>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f242 1233 	movw	r2, #8499	; 0x2133
 800c176:	4293      	cmp	r3, r2
 800c178:	dd2a      	ble.n	800c1d0 <CheckLoad+0xe0>
	{
		load_start = 0;
 800c17a:	4b3a      	ldr	r3, [pc, #232]	; (800c264 <CheckLoad+0x174>)
 800c17c:	2200      	movs	r2, #0
 800c17e:	601a      	str	r2, [r3, #0]
		pick_enc_buf = pick_enc;
 800c180:	4b3a      	ldr	r3, [pc, #232]	; (800c26c <CheckLoad+0x17c>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4a3d      	ldr	r2, [pc, #244]	; (800c27c <CheckLoad+0x18c>)
 800c186:	6013      	str	r3, [r2, #0]
		if(blue)
 800c188:	4b3d      	ldr	r3, [pc, #244]	; (800c280 <CheckLoad+0x190>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d012      	beq.n	800c1b6 <CheckLoad+0xc6>
		{
			while(pick_enc - pick_enc_buf < BluePickMore)
 800c190:	e004      	b.n	800c19c <CheckLoad+0xac>
				pick_manual(2000);
 800c192:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c196:	4837      	ldr	r0, [pc, #220]	; (800c274 <CheckLoad+0x184>)
 800c198:	f7f4 fff7 	bl	800118a <WriteBDC>
			while(pick_enc - pick_enc_buf < BluePickMore)
 800c19c:	4b33      	ldr	r3, [pc, #204]	; (800c26c <CheckLoad+0x17c>)
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	4b36      	ldr	r3, [pc, #216]	; (800c27c <CheckLoad+0x18c>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	1ad3      	subs	r3, r2, r3
 800c1a6:	2bbd      	cmp	r3, #189	; 0xbd
 800c1a8:	ddf3      	ble.n	800c192 <CheckLoad+0xa2>
 800c1aa:	e00b      	b.n	800c1c4 <CheckLoad+0xd4>
		}
		else
		{
			while(pick_enc - pick_enc_buf < RedPickMore)
				pick_manual(2000);
 800c1ac:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c1b0:	4830      	ldr	r0, [pc, #192]	; (800c274 <CheckLoad+0x184>)
 800c1b2:	f7f4 ffea 	bl	800118a <WriteBDC>
			while(pick_enc - pick_enc_buf < RedPickMore)
 800c1b6:	4b2d      	ldr	r3, [pc, #180]	; (800c26c <CheckLoad+0x17c>)
 800c1b8:	681a      	ldr	r2, [r3, #0]
 800c1ba:	4b30      	ldr	r3, [pc, #192]	; (800c27c <CheckLoad+0x18c>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	1ad3      	subs	r3, r2, r3
 800c1c0:	2be5      	cmp	r3, #229	; 0xe5
 800c1c2:	ddf3      	ble.n	800c1ac <CheckLoad+0xbc>
		}

		pick_stop;
 800c1c4:	2100      	movs	r1, #0
 800c1c6:	482b      	ldr	r0, [pc, #172]	; (800c274 <CheckLoad+0x184>)
 800c1c8:	f7f4 ffdf 	bl	800118a <WriteBDC>
		AutoLoadRing();
 800c1cc:	f000 f88c 	bl	800c2e8 <AutoLoadRing>
	}

	if(reload && In_Load)
 800c1d0:	4b25      	ldr	r3, [pc, #148]	; (800c268 <CheckLoad+0x178>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d032      	beq.n	800c23e <CheckLoad+0x14e>
 800c1d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c1dc:	4826      	ldr	r0, [pc, #152]	; (800c278 <CheckLoad+0x188>)
 800c1de:	f006 f8b7 	bl	8012350 <HAL_GPIO_ReadPin>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d12a      	bne.n	800c23e <CheckLoad+0x14e>
	{
		pick_enc_buf = pick_enc;
 800c1e8:	4b20      	ldr	r3, [pc, #128]	; (800c26c <CheckLoad+0x17c>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a23      	ldr	r2, [pc, #140]	; (800c27c <CheckLoad+0x18c>)
 800c1ee:	6013      	str	r3, [r2, #0]

		if(blue)
 800c1f0:	4b23      	ldr	r3, [pc, #140]	; (800c280 <CheckLoad+0x190>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d012      	beq.n	800c21e <CheckLoad+0x12e>
		{
			while(pick_enc - pick_enc_buf < BluePickMore)
 800c1f8:	e004      	b.n	800c204 <CheckLoad+0x114>
				pick_manual(2000);
 800c1fa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c1fe:	481d      	ldr	r0, [pc, #116]	; (800c274 <CheckLoad+0x184>)
 800c200:	f7f4 ffc3 	bl	800118a <WriteBDC>
			while(pick_enc - pick_enc_buf < BluePickMore)
 800c204:	4b19      	ldr	r3, [pc, #100]	; (800c26c <CheckLoad+0x17c>)
 800c206:	681a      	ldr	r2, [r3, #0]
 800c208:	4b1c      	ldr	r3, [pc, #112]	; (800c27c <CheckLoad+0x18c>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	1ad3      	subs	r3, r2, r3
 800c20e:	2bbd      	cmp	r3, #189	; 0xbd
 800c210:	ddf3      	ble.n	800c1fa <CheckLoad+0x10a>
 800c212:	e00b      	b.n	800c22c <CheckLoad+0x13c>
		}
		else
		{
			while(pick_enc - pick_enc_buf < RedPickMore)
				pick_manual(2000);
 800c214:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c218:	4816      	ldr	r0, [pc, #88]	; (800c274 <CheckLoad+0x184>)
 800c21a:	f7f4 ffb6 	bl	800118a <WriteBDC>
			while(pick_enc - pick_enc_buf < RedPickMore)
 800c21e:	4b13      	ldr	r3, [pc, #76]	; (800c26c <CheckLoad+0x17c>)
 800c220:	681a      	ldr	r2, [r3, #0]
 800c222:	4b16      	ldr	r3, [pc, #88]	; (800c27c <CheckLoad+0x18c>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	1ad3      	subs	r3, r2, r3
 800c228:	2be5      	cmp	r3, #229	; 0xe5
 800c22a:	ddf3      	ble.n	800c214 <CheckLoad+0x124>
		}
		reload = 0;
 800c22c:	4b0e      	ldr	r3, [pc, #56]	; (800c268 <CheckLoad+0x178>)
 800c22e:	2200      	movs	r2, #0
 800c230:	601a      	str	r2, [r3, #0]
		pick_stop;
 800c232:	2100      	movs	r1, #0
 800c234:	480f      	ldr	r0, [pc, #60]	; (800c274 <CheckLoad+0x184>)
 800c236:	f7f4 ffa8 	bl	800118a <WriteBDC>
		AutoLoadRing();
 800c23a:	f000 f855 	bl	800c2e8 <AutoLoadRing>
	}

	if(reload)
 800c23e:	4b0a      	ldr	r3, [pc, #40]	; (800c268 <CheckLoad+0x178>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d004      	beq.n	800c250 <CheckLoad+0x160>
		pick_manual(5000);
 800c246:	f241 3188 	movw	r1, #5000	; 0x1388
 800c24a:	480a      	ldr	r0, [pc, #40]	; (800c274 <CheckLoad+0x184>)
 800c24c:	f7f4 ff9d 	bl	800118a <WriteBDC>

//	if(loaded >= 8)
//	{
//		load_adjust_servo;
//	}
	if(loaded >= 10)
 800c250:	4b0c      	ldr	r3, [pc, #48]	; (800c284 <CheckLoad+0x194>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	2b09      	cmp	r3, #9
 800c256:	dd02      	ble.n	800c25e <CheckLoad+0x16e>
		loaded = 0;
 800c258:	4b0a      	ldr	r3, [pc, #40]	; (800c284 <CheckLoad+0x194>)
 800c25a:	2200      	movs	r2, #0
 800c25c:	601a      	str	r2, [r3, #0]

}
 800c25e:	bf00      	nop
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	20007348 	.word	0x20007348
 800c268:	2000774c 	.word	0x2000774c
 800c26c:	20006be0 	.word	0x20006be0
 800c270:	20009978 	.word	0x20009978
 800c274:	2000770c 	.word	0x2000770c
 800c278:	40021000 	.word	0x40021000
 800c27c:	20009c40 	.word	0x20009c40
 800c280:	20006a1c 	.word	0x20006a1c
 800c284:	20009428 	.word	0x20009428

0800c288 <Checking>:
	}

}

void Checking()
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	af00      	add	r7, sp, #0
	CheckShoot();
 800c28c:	f7ff feb8 	bl	800c000 <CheckShoot>
	CheckLoad();
 800c290:	f7ff ff2e 	bl	800c0f0 <CheckLoad>
	CheckPick();
 800c294:	f7ff fc5c 	bl	800bb50 <CheckPick>
	CheckPitch();
 800c298:	f7ff fc16 	bl	800bac8 <CheckPitch>
}
 800c29c:	bf00      	nop
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <LoadRing>:

void LoadRing(void)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	af00      	add	r7, sp, #0
	load_start = 1;
 800c2a4:	4b06      	ldr	r3, [pc, #24]	; (800c2c0 <LoadRing+0x20>)
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	601a      	str	r2, [r3, #0]
	load_stop_once = 0;
 800c2aa:	4b06      	ldr	r3, [pc, #24]	; (800c2c4 <LoadRing+0x24>)
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	601a      	str	r2, [r3, #0]
	pick_up;
 800c2b0:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800c2b4:	4804      	ldr	r0, [pc, #16]	; (800c2c8 <LoadRing+0x28>)
 800c2b6:	f7f4 ff68 	bl	800118a <WriteBDC>
}
 800c2ba:	bf00      	nop
 800c2bc:	bd80      	pop	{r7, pc}
 800c2be:	bf00      	nop
 800c2c0:	20007348 	.word	0x20007348
 800c2c4:	20009978 	.word	0x20009978
 800c2c8:	2000770c 	.word	0x2000770c

0800c2cc <StopAutoPP>:

void StopAutoPP(void)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	af00      	add	r7, sp, #0
	PP_stop(&pp);
 800c2d0:	4803      	ldr	r0, [pc, #12]	; (800c2e0 <StopAutoPP+0x14>)
 800c2d2:	f7f9 fd92 	bl	8005dfa <PP_stop>
	RNSStop(&rns);
 800c2d6:	4803      	ldr	r0, [pc, #12]	; (800c2e4 <StopAutoPP+0x18>)
 800c2d8:	f7fd f8f2 	bl	80094c0 <RNSStop>
}
 800c2dc:	bf00      	nop
 800c2de:	bd80      	pop	{r7, pc}
 800c2e0:	20006cc4 	.word	0x20006cc4
 800c2e4:	20008f08 	.word	0x20008f08

0800c2e8 <AutoLoadRing>:

void AutoLoadRing(void)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	af00      	add	r7, sp, #0
	cylinder_load;
 800c2ec:	4a0d      	ldr	r2, [pc, #52]	; (800c324 <AutoLoadRing+0x3c>)
 800c2ee:	7f13      	ldrb	r3, [r2, #28]
 800c2f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2f4:	7713      	strb	r3, [r2, #28]
	osDelay(500);
 800c2f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c2fa:	f00a ff10 	bl	801711e <osDelay>
	cylinder_retract;
 800c2fe:	4a09      	ldr	r2, [pc, #36]	; (800c324 <AutoLoadRing+0x3c>)
 800c300:	7f13      	ldrb	r3, [r2, #28]
 800c302:	f36f 1386 	bfc	r3, #6, #1
 800c306:	7713      	strb	r3, [r2, #28]
	osDelay(500);
 800c308:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c30c:	f00a ff07 	bl	801711e <osDelay>
	loaded++;
 800c310:	4b05      	ldr	r3, [pc, #20]	; (800c328 <AutoLoadRing+0x40>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	3301      	adds	r3, #1
 800c316:	4a04      	ldr	r2, [pc, #16]	; (800c328 <AutoLoadRing+0x40>)
 800c318:	6013      	str	r3, [r2, #0]

	AdjustRings();
 800c31a:	f000 f807 	bl	800c32c <AdjustRings>
}
 800c31e:	bf00      	nop
 800c320:	bd80      	pop	{r7, pc}
 800c322:	bf00      	nop
 800c324:	2000959c 	.word	0x2000959c
 800c328:	20009428 	.word	0x20009428

0800c32c <AdjustRings>:

void AdjustRings(void)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
	if(load_adjust)
 800c332:	4b17      	ldr	r3, [pc, #92]	; (800c390 <AdjustRings+0x64>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d025      	beq.n	800c386 <AdjustRings+0x5a>
	{
		for(int i = 0; i < 4; i++)
 800c33a:	2300      	movs	r3, #0
 800c33c:	607b      	str	r3, [r7, #4]
 800c33e:	e01e      	b.n	800c37e <AdjustRings+0x52>
		{
			if(ps4.button == SQUARE)
 800c340:	4b14      	ldr	r3, [pc, #80]	; (800c394 <AdjustRings+0x68>)
 800c342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c348:	d106      	bne.n	800c358 <AdjustRings+0x2c>
			{
				while(ps4.button == SQUARE);
 800c34a:	bf00      	nop
 800c34c:	4b11      	ldr	r3, [pc, #68]	; (800c394 <AdjustRings+0x68>)
 800c34e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c354:	d0fa      	beq.n	800c34c <AdjustRings+0x20>
				break;
 800c356:	e016      	b.n	800c386 <AdjustRings+0x5a>
			}

			load_adjust_servo;
 800c358:	f240 414c 	movw	r1, #1100	; 0x44c
 800c35c:	480e      	ldr	r0, [pc, #56]	; (800c398 <AdjustRings+0x6c>)
 800c35e:	f7fd fd3f 	bl	8009de0 <ServoSetPulse>
			osDelay(100);
 800c362:	2064      	movs	r0, #100	; 0x64
 800c364:	f00a fedb 	bl	801711e <osDelay>
			close_servo;
 800c368:	f240 3152 	movw	r1, #850	; 0x352
 800c36c:	480a      	ldr	r0, [pc, #40]	; (800c398 <AdjustRings+0x6c>)
 800c36e:	f7fd fd37 	bl	8009de0 <ServoSetPulse>
			osDelay(100);
 800c372:	2064      	movs	r0, #100	; 0x64
 800c374:	f00a fed3 	bl	801711e <osDelay>
		for(int i = 0; i < 4; i++)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	3301      	adds	r3, #1
 800c37c:	607b      	str	r3, [r7, #4]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2b03      	cmp	r3, #3
 800c382:	dddd      	ble.n	800c340 <AdjustRings+0x14>
		}
	}
}
 800c384:	e7ff      	b.n	800c386 <AdjustRings+0x5a>
 800c386:	bf00      	nop
 800c388:	3708      	adds	r7, #8
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	2000943c 	.word	0x2000943c
 800c394:	2000a014 	.word	0x2000a014
 800c398:	2000786c 	.word	0x2000786c

0800c39c <ResetCoordinate>:

void ResetCoordinate(void)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	af00      	add	r7, sp, #0
	RNSSet(&rns, RNS_PP_Reset);
 800c3a0:	2117      	movs	r1, #23
 800c3a2:	4804      	ldr	r0, [pc, #16]	; (800c3b4 <ResetCoordinate+0x18>)
 800c3a4:	f7fd f9aa 	bl	80096fc <RNSSet>
	PP_reset(&pp);
 800c3a8:	4803      	ldr	r0, [pc, #12]	; (800c3b8 <ResetCoordinate+0x1c>)
 800c3aa:	f7f9 fd47 	bl	8005e3c <PP_reset>
}
 800c3ae:	bf00      	nop
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	20008f08 	.word	0x20008f08
 800c3b8:	20006cc4 	.word	0x20006cc4

0800c3bc <ResetPickEnc>:

void ResetPickEnc(void)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	af00      	add	r7, sp, #0
	QEIReset(QEI1);
 800c3c0:	2001      	movs	r0, #1
 800c3c2:	f7f5 fc07 	bl	8001bd4 <QEIReset>
	pick_enc = 0;
 800c3c6:	4b02      	ldr	r3, [pc, #8]	; (800c3d0 <ResetPickEnc+0x14>)
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	601a      	str	r2, [r3, #0]
}
 800c3cc:	bf00      	nop
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	20006be0 	.word	0x20006be0

0800c3d4 <enq>:

void enq(void) {
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	af00      	add	r7, sp, #0
//	xpos = rns.enq.enq_buffer[0].data;
//	ypos = rns.enq.enq_buffer[1].data;
//	z = rns.enq.enq_buffer[2].data;
//	sprintf((char*)debug, "X: %.2f Y: %.2f Yaw: %.2f\n", xpos, ypos, z);

	RNSEnquire(RNS_XYZ_RAW, &rns);
 800c3d8:	4908      	ldr	r1, [pc, #32]	; (800c3fc <enq+0x28>)
 800c3da:	2061      	movs	r0, #97	; 0x61
 800c3dc:	f7fd fb48 	bl	8009a70 <RNSEnquire>
	fXPos = rns.enq.enq_buffer[0].data;
 800c3e0:	4b06      	ldr	r3, [pc, #24]	; (800c3fc <enq+0x28>)
 800c3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3e4:	4a06      	ldr	r2, [pc, #24]	; (800c400 <enq+0x2c>)
 800c3e6:	6013      	str	r3, [r2, #0]
	fYPos = rns.enq.enq_buffer[1].data;
 800c3e8:	4b04      	ldr	r3, [pc, #16]	; (800c3fc <enq+0x28>)
 800c3ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3ec:	4a05      	ldr	r2, [pc, #20]	; (800c404 <enq+0x30>)
 800c3ee:	6013      	str	r3, [r2, #0]
	fyaw = rns.enq.enq_buffer[2].data;
 800c3f0:	4b02      	ldr	r3, [pc, #8]	; (800c3fc <enq+0x28>)
 800c3f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c3f4:	4a04      	ldr	r2, [pc, #16]	; (800c408 <enq+0x34>)
 800c3f6:	6013      	str	r3, [r2, #0]

//	sprintf((char*)debug, "A: %.2f B: %.2f C: %.2f D: %.2f X: %.2f Y: %.2f Z: %.2f Servo: %ld\n", a, b, c, d, fXPos, fYPos, fyaw, servo_ring.currentPulse);
//	sprintf((char*)debug, "X: %.2f Y: %.2f Yaw: %.2f\n", fXPos, fYPos, fyaw);
}
 800c3f8:	bf00      	nop
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	20008f08 	.word	0x20008f08
 800c400:	200099b4 	.word	0x200099b4
 800c404:	20009808 	.word	0x20009808
 800c408:	2000996c 	.word	0x2000996c
 800c40c:	00000000 	.word	0x00000000

0800c410 <tune>:

void tune(void)
{
 800c410:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c414:	b084      	sub	sp, #16
 800c416:	af04      	add	r7, sp, #16
	if(ps4.button == UP)
 800c418:	4ba7      	ldr	r3, [pc, #668]	; (800c6b8 <tune+0x2a8>)
 800c41a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c41c:	2b10      	cmp	r3, #16
 800c41e:	d10d      	bne.n	800c43c <tune+0x2c>
	{
		while(ps4.button == UP);
 800c420:	bf00      	nop
 800c422:	4ba5      	ldr	r3, [pc, #660]	; (800c6b8 <tune+0x2a8>)
 800c424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c426:	2b10      	cmp	r3, #16
 800c428:	d0fb      	beq.n	800c422 <tune+0x12>
		tune_p = 1;
 800c42a:	4ba4      	ldr	r3, [pc, #656]	; (800c6bc <tune+0x2ac>)
 800c42c:	2201      	movs	r2, #1
 800c42e:	601a      	str	r2, [r3, #0]
		tune_i = 0;
 800c430:	4ba3      	ldr	r3, [pc, #652]	; (800c6c0 <tune+0x2b0>)
 800c432:	2200      	movs	r2, #0
 800c434:	601a      	str	r2, [r3, #0]
		tune_d = 0;
 800c436:	4ba3      	ldr	r3, [pc, #652]	; (800c6c4 <tune+0x2b4>)
 800c438:	2200      	movs	r2, #0
 800c43a:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == DOWN)
 800c43c:	4b9e      	ldr	r3, [pc, #632]	; (800c6b8 <tune+0x2a8>)
 800c43e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c440:	2b40      	cmp	r3, #64	; 0x40
 800c442:	d10d      	bne.n	800c460 <tune+0x50>
	{
		while(ps4.button == DOWN);
 800c444:	bf00      	nop
 800c446:	4b9c      	ldr	r3, [pc, #624]	; (800c6b8 <tune+0x2a8>)
 800c448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c44a:	2b40      	cmp	r3, #64	; 0x40
 800c44c:	d0fb      	beq.n	800c446 <tune+0x36>
		tune_p = 0;
 800c44e:	4b9b      	ldr	r3, [pc, #620]	; (800c6bc <tune+0x2ac>)
 800c450:	2200      	movs	r2, #0
 800c452:	601a      	str	r2, [r3, #0]
		tune_i = 1;
 800c454:	4b9a      	ldr	r3, [pc, #616]	; (800c6c0 <tune+0x2b0>)
 800c456:	2201      	movs	r2, #1
 800c458:	601a      	str	r2, [r3, #0]
		tune_d = 0;
 800c45a:	4b9a      	ldr	r3, [pc, #616]	; (800c6c4 <tune+0x2b4>)
 800c45c:	2200      	movs	r2, #0
 800c45e:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == LEFT)
 800c460:	4b95      	ldr	r3, [pc, #596]	; (800c6b8 <tune+0x2a8>)
 800c462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c464:	2b80      	cmp	r3, #128	; 0x80
 800c466:	d10d      	bne.n	800c484 <tune+0x74>
	{
		while(ps4.button == LEFT);
 800c468:	bf00      	nop
 800c46a:	4b93      	ldr	r3, [pc, #588]	; (800c6b8 <tune+0x2a8>)
 800c46c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c46e:	2b80      	cmp	r3, #128	; 0x80
 800c470:	d0fb      	beq.n	800c46a <tune+0x5a>
		tune_p = 0;
 800c472:	4b92      	ldr	r3, [pc, #584]	; (800c6bc <tune+0x2ac>)
 800c474:	2200      	movs	r2, #0
 800c476:	601a      	str	r2, [r3, #0]
		tune_i = 0;
 800c478:	4b91      	ldr	r3, [pc, #580]	; (800c6c0 <tune+0x2b0>)
 800c47a:	2200      	movs	r2, #0
 800c47c:	601a      	str	r2, [r3, #0]
		tune_d = 1;
 800c47e:	4b91      	ldr	r3, [pc, #580]	; (800c6c4 <tune+0x2b4>)
 800c480:	2201      	movs	r2, #1
 800c482:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == RIGHT)
 800c484:	4b8c      	ldr	r3, [pc, #560]	; (800c6b8 <tune+0x2a8>)
 800c486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c488:	2b20      	cmp	r3, #32
 800c48a:	d110      	bne.n	800c4ae <tune+0x9e>
	{
		while(ps4.button == RIGHT);
 800c48c:	bf00      	nop
 800c48e:	4b8a      	ldr	r3, [pc, #552]	; (800c6b8 <tune+0x2a8>)
 800c490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c492:	2b20      	cmp	r3, #32
 800c494:	d0fb      	beq.n	800c48e <tune+0x7e>
		wheel++;
 800c496:	4b8c      	ldr	r3, [pc, #560]	; (800c6c8 <tune+0x2b8>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	3301      	adds	r3, #1
 800c49c:	4a8a      	ldr	r2, [pc, #552]	; (800c6c8 <tune+0x2b8>)
 800c49e:	6013      	str	r3, [r2, #0]
		if(wheel > 5)
 800c4a0:	4b89      	ldr	r3, [pc, #548]	; (800c6c8 <tune+0x2b8>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2b05      	cmp	r3, #5
 800c4a6:	dd02      	ble.n	800c4ae <tune+0x9e>
			wheel = 1;
 800c4a8:	4b87      	ldr	r3, [pc, #540]	; (800c6c8 <tune+0x2b8>)
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	601a      	str	r2, [r3, #0]
	}

	if(tune_p)
 800c4ae:	4b83      	ldr	r3, [pc, #524]	; (800c6bc <tune+0x2ac>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	f000 809e 	beq.w	800c5f4 <tune+0x1e4>
	{
		switch(wheel)
 800c4b8:	4b83      	ldr	r3, [pc, #524]	; (800c6c8 <tune+0x2b8>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	3b01      	subs	r3, #1
 800c4be:	2b03      	cmp	r3, #3
 800c4c0:	f200 81f4 	bhi.w	800c8ac <tune+0x49c>
 800c4c4:	a201      	add	r2, pc, #4	; (adr r2, 800c4cc <tune+0xbc>)
 800c4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ca:	bf00      	nop
 800c4cc:	0800c4dd 	.word	0x0800c4dd
 800c4d0:	0800c523 	.word	0x0800c523
 800c4d4:	0800c569 	.word	0x0800c569
 800c4d8:	0800c5af 	.word	0x0800c5af
		{
		case 1:
			AP += ps4.joyR_y * 0.0001;
 800c4dc:	4b76      	ldr	r3, [pc, #472]	; (800c6b8 <tune+0x2a8>)
 800c4de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7f4 f831 	bl	8000548 <__aeabi_f2d>
 800c4e6:	a372      	add	r3, pc, #456	; (adr r3, 800c6b0 <tune+0x2a0>)
 800c4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ec:	f7f4 f884 	bl	80005f8 <__aeabi_dmul>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	4614      	mov	r4, r2
 800c4f6:	461d      	mov	r5, r3
 800c4f8:	4b74      	ldr	r3, [pc, #464]	; (800c6cc <tune+0x2bc>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f7f4 f823 	bl	8000548 <__aeabi_f2d>
 800c502:	4602      	mov	r2, r0
 800c504:	460b      	mov	r3, r1
 800c506:	4620      	mov	r0, r4
 800c508:	4629      	mov	r1, r5
 800c50a:	f7f3 febf 	bl	800028c <__adddf3>
 800c50e:	4602      	mov	r2, r0
 800c510:	460b      	mov	r3, r1
 800c512:	4610      	mov	r0, r2
 800c514:	4619      	mov	r1, r3
 800c516:	f7f4 fb67 	bl	8000be8 <__aeabi_d2f>
 800c51a:	4603      	mov	r3, r0
 800c51c:	4a6b      	ldr	r2, [pc, #428]	; (800c6cc <tune+0x2bc>)
 800c51e:	6013      	str	r3, [r2, #0]
			break;
 800c520:	e1c4      	b.n	800c8ac <tune+0x49c>
		case 2:
			BP += ps4.joyR_y * 0.0001;
 800c522:	4b65      	ldr	r3, [pc, #404]	; (800c6b8 <tune+0x2a8>)
 800c524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c526:	4618      	mov	r0, r3
 800c528:	f7f4 f80e 	bl	8000548 <__aeabi_f2d>
 800c52c:	a360      	add	r3, pc, #384	; (adr r3, 800c6b0 <tune+0x2a0>)
 800c52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c532:	f7f4 f861 	bl	80005f8 <__aeabi_dmul>
 800c536:	4602      	mov	r2, r0
 800c538:	460b      	mov	r3, r1
 800c53a:	4614      	mov	r4, r2
 800c53c:	461d      	mov	r5, r3
 800c53e:	4b64      	ldr	r3, [pc, #400]	; (800c6d0 <tune+0x2c0>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	4618      	mov	r0, r3
 800c544:	f7f4 f800 	bl	8000548 <__aeabi_f2d>
 800c548:	4602      	mov	r2, r0
 800c54a:	460b      	mov	r3, r1
 800c54c:	4620      	mov	r0, r4
 800c54e:	4629      	mov	r1, r5
 800c550:	f7f3 fe9c 	bl	800028c <__adddf3>
 800c554:	4602      	mov	r2, r0
 800c556:	460b      	mov	r3, r1
 800c558:	4610      	mov	r0, r2
 800c55a:	4619      	mov	r1, r3
 800c55c:	f7f4 fb44 	bl	8000be8 <__aeabi_d2f>
 800c560:	4603      	mov	r3, r0
 800c562:	4a5b      	ldr	r2, [pc, #364]	; (800c6d0 <tune+0x2c0>)
 800c564:	6013      	str	r3, [r2, #0]
			break;
 800c566:	e1a1      	b.n	800c8ac <tune+0x49c>
		case 3:
			CP += ps4.joyR_y * 0.0001;
 800c568:	4b53      	ldr	r3, [pc, #332]	; (800c6b8 <tune+0x2a8>)
 800c56a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c56c:	4618      	mov	r0, r3
 800c56e:	f7f3 ffeb 	bl	8000548 <__aeabi_f2d>
 800c572:	a34f      	add	r3, pc, #316	; (adr r3, 800c6b0 <tune+0x2a0>)
 800c574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c578:	f7f4 f83e 	bl	80005f8 <__aeabi_dmul>
 800c57c:	4602      	mov	r2, r0
 800c57e:	460b      	mov	r3, r1
 800c580:	4614      	mov	r4, r2
 800c582:	461d      	mov	r5, r3
 800c584:	4b53      	ldr	r3, [pc, #332]	; (800c6d4 <tune+0x2c4>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4618      	mov	r0, r3
 800c58a:	f7f3 ffdd 	bl	8000548 <__aeabi_f2d>
 800c58e:	4602      	mov	r2, r0
 800c590:	460b      	mov	r3, r1
 800c592:	4620      	mov	r0, r4
 800c594:	4629      	mov	r1, r5
 800c596:	f7f3 fe79 	bl	800028c <__adddf3>
 800c59a:	4602      	mov	r2, r0
 800c59c:	460b      	mov	r3, r1
 800c59e:	4610      	mov	r0, r2
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	f7f4 fb21 	bl	8000be8 <__aeabi_d2f>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	4a4a      	ldr	r2, [pc, #296]	; (800c6d4 <tune+0x2c4>)
 800c5aa:	6013      	str	r3, [r2, #0]
			break;
 800c5ac:	e17e      	b.n	800c8ac <tune+0x49c>
		case 4:
			DP += ps4.joyR_y * 0.0001;
 800c5ae:	4b42      	ldr	r3, [pc, #264]	; (800c6b8 <tune+0x2a8>)
 800c5b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7f3 ffc8 	bl	8000548 <__aeabi_f2d>
 800c5b8:	a33d      	add	r3, pc, #244	; (adr r3, 800c6b0 <tune+0x2a0>)
 800c5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5be:	f7f4 f81b 	bl	80005f8 <__aeabi_dmul>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	4614      	mov	r4, r2
 800c5c8:	461d      	mov	r5, r3
 800c5ca:	4b43      	ldr	r3, [pc, #268]	; (800c6d8 <tune+0x2c8>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7f3 ffba 	bl	8000548 <__aeabi_f2d>
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	460b      	mov	r3, r1
 800c5d8:	4620      	mov	r0, r4
 800c5da:	4629      	mov	r1, r5
 800c5dc:	f7f3 fe56 	bl	800028c <__adddf3>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	4610      	mov	r0, r2
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	f7f4 fafe 	bl	8000be8 <__aeabi_d2f>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	4a3a      	ldr	r2, [pc, #232]	; (800c6d8 <tune+0x2c8>)
 800c5f0:	6013      	str	r3, [r2, #0]
			break;
 800c5f2:	e15b      	b.n	800c8ac <tune+0x49c>
		}
	}
	else if(tune_i)
 800c5f4:	4b32      	ldr	r3, [pc, #200]	; (800c6c0 <tune+0x2b0>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	f000 80b9 	beq.w	800c770 <tune+0x360>
	{
		switch(wheel)
 800c5fe:	4b32      	ldr	r3, [pc, #200]	; (800c6c8 <tune+0x2b8>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	3b01      	subs	r3, #1
 800c604:	2b03      	cmp	r3, #3
 800c606:	f200 8151 	bhi.w	800c8ac <tune+0x49c>
 800c60a:	a201      	add	r2, pc, #4	; (adr r2, 800c610 <tune+0x200>)
 800c60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c610:	0800c621 	.word	0x0800c621
 800c614:	0800c667 	.word	0x0800c667
 800c618:	0800c6e5 	.word	0x0800c6e5
 800c61c:	0800c72b 	.word	0x0800c72b
		{
		case 1:
			AI += ps4.joyR_y * 0.0001;
 800c620:	4b25      	ldr	r3, [pc, #148]	; (800c6b8 <tune+0x2a8>)
 800c622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c624:	4618      	mov	r0, r3
 800c626:	f7f3 ff8f 	bl	8000548 <__aeabi_f2d>
 800c62a:	a321      	add	r3, pc, #132	; (adr r3, 800c6b0 <tune+0x2a0>)
 800c62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c630:	f7f3 ffe2 	bl	80005f8 <__aeabi_dmul>
 800c634:	4602      	mov	r2, r0
 800c636:	460b      	mov	r3, r1
 800c638:	4614      	mov	r4, r2
 800c63a:	461d      	mov	r5, r3
 800c63c:	4b27      	ldr	r3, [pc, #156]	; (800c6dc <tune+0x2cc>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	4618      	mov	r0, r3
 800c642:	f7f3 ff81 	bl	8000548 <__aeabi_f2d>
 800c646:	4602      	mov	r2, r0
 800c648:	460b      	mov	r3, r1
 800c64a:	4620      	mov	r0, r4
 800c64c:	4629      	mov	r1, r5
 800c64e:	f7f3 fe1d 	bl	800028c <__adddf3>
 800c652:	4602      	mov	r2, r0
 800c654:	460b      	mov	r3, r1
 800c656:	4610      	mov	r0, r2
 800c658:	4619      	mov	r1, r3
 800c65a:	f7f4 fac5 	bl	8000be8 <__aeabi_d2f>
 800c65e:	4603      	mov	r3, r0
 800c660:	4a1e      	ldr	r2, [pc, #120]	; (800c6dc <tune+0x2cc>)
 800c662:	6013      	str	r3, [r2, #0]
			break;
 800c664:	e122      	b.n	800c8ac <tune+0x49c>
		case 2:
			BI += ps4.joyR_y * 0.0001;
 800c666:	4b14      	ldr	r3, [pc, #80]	; (800c6b8 <tune+0x2a8>)
 800c668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7f3 ff6c 	bl	8000548 <__aeabi_f2d>
 800c670:	a30f      	add	r3, pc, #60	; (adr r3, 800c6b0 <tune+0x2a0>)
 800c672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c676:	f7f3 ffbf 	bl	80005f8 <__aeabi_dmul>
 800c67a:	4602      	mov	r2, r0
 800c67c:	460b      	mov	r3, r1
 800c67e:	4614      	mov	r4, r2
 800c680:	461d      	mov	r5, r3
 800c682:	4b17      	ldr	r3, [pc, #92]	; (800c6e0 <tune+0x2d0>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	4618      	mov	r0, r3
 800c688:	f7f3 ff5e 	bl	8000548 <__aeabi_f2d>
 800c68c:	4602      	mov	r2, r0
 800c68e:	460b      	mov	r3, r1
 800c690:	4620      	mov	r0, r4
 800c692:	4629      	mov	r1, r5
 800c694:	f7f3 fdfa 	bl	800028c <__adddf3>
 800c698:	4602      	mov	r2, r0
 800c69a:	460b      	mov	r3, r1
 800c69c:	4610      	mov	r0, r2
 800c69e:	4619      	mov	r1, r3
 800c6a0:	f7f4 faa2 	bl	8000be8 <__aeabi_d2f>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	4a0e      	ldr	r2, [pc, #56]	; (800c6e0 <tune+0x2d0>)
 800c6a8:	6013      	str	r3, [r2, #0]
			break;
 800c6aa:	e0ff      	b.n	800c8ac <tune+0x49c>
 800c6ac:	f3af 8000 	nop.w
 800c6b0:	eb1c432d 	.word	0xeb1c432d
 800c6b4:	3f1a36e2 	.word	0x3f1a36e2
 800c6b8:	2000a014 	.word	0x2000a014
 800c6bc:	2000737c 	.word	0x2000737c
 800c6c0:	20007210 	.word	0x20007210
 800c6c4:	2000980c 	.word	0x2000980c
 800c6c8:	200064dc 	.word	0x200064dc
 800c6cc:	2000a320 	.word	0x2000a320
 800c6d0:	200075b4 	.word	0x200075b4
 800c6d4:	2000966c 	.word	0x2000966c
 800c6d8:	20009db0 	.word	0x20009db0
 800c6dc:	20007208 	.word	0x20007208
 800c6e0:	20009430 	.word	0x20009430
		case 3:
			CI += ps4.joyR_y * 0.0001;
 800c6e4:	4bb4      	ldr	r3, [pc, #720]	; (800c9b8 <tune+0x5a8>)
 800c6e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f7f3 ff2d 	bl	8000548 <__aeabi_f2d>
 800c6ee:	a3ae      	add	r3, pc, #696	; (adr r3, 800c9a8 <tune+0x598>)
 800c6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f4:	f7f3 ff80 	bl	80005f8 <__aeabi_dmul>
 800c6f8:	4602      	mov	r2, r0
 800c6fa:	460b      	mov	r3, r1
 800c6fc:	4614      	mov	r4, r2
 800c6fe:	461d      	mov	r5, r3
 800c700:	4bae      	ldr	r3, [pc, #696]	; (800c9bc <tune+0x5ac>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	4618      	mov	r0, r3
 800c706:	f7f3 ff1f 	bl	8000548 <__aeabi_f2d>
 800c70a:	4602      	mov	r2, r0
 800c70c:	460b      	mov	r3, r1
 800c70e:	4620      	mov	r0, r4
 800c710:	4629      	mov	r1, r5
 800c712:	f7f3 fdbb 	bl	800028c <__adddf3>
 800c716:	4602      	mov	r2, r0
 800c718:	460b      	mov	r3, r1
 800c71a:	4610      	mov	r0, r2
 800c71c:	4619      	mov	r1, r3
 800c71e:	f7f4 fa63 	bl	8000be8 <__aeabi_d2f>
 800c722:	4603      	mov	r3, r0
 800c724:	4aa5      	ldr	r2, [pc, #660]	; (800c9bc <tune+0x5ac>)
 800c726:	6013      	str	r3, [r2, #0]
			break;
 800c728:	e0c0      	b.n	800c8ac <tune+0x49c>
		case 4:
			DI += ps4.joyR_y * 0.0001;
 800c72a:	4ba3      	ldr	r3, [pc, #652]	; (800c9b8 <tune+0x5a8>)
 800c72c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c72e:	4618      	mov	r0, r3
 800c730:	f7f3 ff0a 	bl	8000548 <__aeabi_f2d>
 800c734:	a39c      	add	r3, pc, #624	; (adr r3, 800c9a8 <tune+0x598>)
 800c736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c73a:	f7f3 ff5d 	bl	80005f8 <__aeabi_dmul>
 800c73e:	4602      	mov	r2, r0
 800c740:	460b      	mov	r3, r1
 800c742:	4614      	mov	r4, r2
 800c744:	461d      	mov	r5, r3
 800c746:	4b9e      	ldr	r3, [pc, #632]	; (800c9c0 <tune+0x5b0>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7f3 fefc 	bl	8000548 <__aeabi_f2d>
 800c750:	4602      	mov	r2, r0
 800c752:	460b      	mov	r3, r1
 800c754:	4620      	mov	r0, r4
 800c756:	4629      	mov	r1, r5
 800c758:	f7f3 fd98 	bl	800028c <__adddf3>
 800c75c:	4602      	mov	r2, r0
 800c75e:	460b      	mov	r3, r1
 800c760:	4610      	mov	r0, r2
 800c762:	4619      	mov	r1, r3
 800c764:	f7f4 fa40 	bl	8000be8 <__aeabi_d2f>
 800c768:	4603      	mov	r3, r0
 800c76a:	4a95      	ldr	r2, [pc, #596]	; (800c9c0 <tune+0x5b0>)
 800c76c:	6013      	str	r3, [r2, #0]
			break;
 800c76e:	e09d      	b.n	800c8ac <tune+0x49c>
		}
	}
	else
	{
		switch(wheel)
 800c770:	4b94      	ldr	r3, [pc, #592]	; (800c9c4 <tune+0x5b4>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	3b01      	subs	r3, #1
 800c776:	2b03      	cmp	r3, #3
 800c778:	f200 8098 	bhi.w	800c8ac <tune+0x49c>
 800c77c:	a201      	add	r2, pc, #4	; (adr r2, 800c784 <tune+0x374>)
 800c77e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c782:	bf00      	nop
 800c784:	0800c795 	.word	0x0800c795
 800c788:	0800c7db 	.word	0x0800c7db
 800c78c:	0800c821 	.word	0x0800c821
 800c790:	0800c867 	.word	0x0800c867
		{
		case 1:
			AD += ps4.joyR_y * 0.00001;
 800c794:	4b88      	ldr	r3, [pc, #544]	; (800c9b8 <tune+0x5a8>)
 800c796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c798:	4618      	mov	r0, r3
 800c79a:	f7f3 fed5 	bl	8000548 <__aeabi_f2d>
 800c79e:	a384      	add	r3, pc, #528	; (adr r3, 800c9b0 <tune+0x5a0>)
 800c7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a4:	f7f3 ff28 	bl	80005f8 <__aeabi_dmul>
 800c7a8:	4602      	mov	r2, r0
 800c7aa:	460b      	mov	r3, r1
 800c7ac:	4614      	mov	r4, r2
 800c7ae:	461d      	mov	r5, r3
 800c7b0:	4b85      	ldr	r3, [pc, #532]	; (800c9c8 <tune+0x5b8>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7f3 fec7 	bl	8000548 <__aeabi_f2d>
 800c7ba:	4602      	mov	r2, r0
 800c7bc:	460b      	mov	r3, r1
 800c7be:	4620      	mov	r0, r4
 800c7c0:	4629      	mov	r1, r5
 800c7c2:	f7f3 fd63 	bl	800028c <__adddf3>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	4610      	mov	r0, r2
 800c7cc:	4619      	mov	r1, r3
 800c7ce:	f7f4 fa0b 	bl	8000be8 <__aeabi_d2f>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	4a7c      	ldr	r2, [pc, #496]	; (800c9c8 <tune+0x5b8>)
 800c7d6:	6013      	str	r3, [r2, #0]
			break;
 800c7d8:	e068      	b.n	800c8ac <tune+0x49c>
		case 2:
			BD += ps4.joyR_y * 0.00001;
 800c7da:	4b77      	ldr	r3, [pc, #476]	; (800c9b8 <tune+0x5a8>)
 800c7dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7f3 feb2 	bl	8000548 <__aeabi_f2d>
 800c7e4:	a372      	add	r3, pc, #456	; (adr r3, 800c9b0 <tune+0x5a0>)
 800c7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ea:	f7f3 ff05 	bl	80005f8 <__aeabi_dmul>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	4614      	mov	r4, r2
 800c7f4:	461d      	mov	r5, r3
 800c7f6:	4b75      	ldr	r3, [pc, #468]	; (800c9cc <tune+0x5bc>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7f3 fea4 	bl	8000548 <__aeabi_f2d>
 800c800:	4602      	mov	r2, r0
 800c802:	460b      	mov	r3, r1
 800c804:	4620      	mov	r0, r4
 800c806:	4629      	mov	r1, r5
 800c808:	f7f3 fd40 	bl	800028c <__adddf3>
 800c80c:	4602      	mov	r2, r0
 800c80e:	460b      	mov	r3, r1
 800c810:	4610      	mov	r0, r2
 800c812:	4619      	mov	r1, r3
 800c814:	f7f4 f9e8 	bl	8000be8 <__aeabi_d2f>
 800c818:	4603      	mov	r3, r0
 800c81a:	4a6c      	ldr	r2, [pc, #432]	; (800c9cc <tune+0x5bc>)
 800c81c:	6013      	str	r3, [r2, #0]
			break;
 800c81e:	e045      	b.n	800c8ac <tune+0x49c>
		case 3:
			CD += ps4.joyR_y * 0.00001;
 800c820:	4b65      	ldr	r3, [pc, #404]	; (800c9b8 <tune+0x5a8>)
 800c822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c824:	4618      	mov	r0, r3
 800c826:	f7f3 fe8f 	bl	8000548 <__aeabi_f2d>
 800c82a:	a361      	add	r3, pc, #388	; (adr r3, 800c9b0 <tune+0x5a0>)
 800c82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c830:	f7f3 fee2 	bl	80005f8 <__aeabi_dmul>
 800c834:	4602      	mov	r2, r0
 800c836:	460b      	mov	r3, r1
 800c838:	4614      	mov	r4, r2
 800c83a:	461d      	mov	r5, r3
 800c83c:	4b64      	ldr	r3, [pc, #400]	; (800c9d0 <tune+0x5c0>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4618      	mov	r0, r3
 800c842:	f7f3 fe81 	bl	8000548 <__aeabi_f2d>
 800c846:	4602      	mov	r2, r0
 800c848:	460b      	mov	r3, r1
 800c84a:	4620      	mov	r0, r4
 800c84c:	4629      	mov	r1, r5
 800c84e:	f7f3 fd1d 	bl	800028c <__adddf3>
 800c852:	4602      	mov	r2, r0
 800c854:	460b      	mov	r3, r1
 800c856:	4610      	mov	r0, r2
 800c858:	4619      	mov	r1, r3
 800c85a:	f7f4 f9c5 	bl	8000be8 <__aeabi_d2f>
 800c85e:	4603      	mov	r3, r0
 800c860:	4a5b      	ldr	r2, [pc, #364]	; (800c9d0 <tune+0x5c0>)
 800c862:	6013      	str	r3, [r2, #0]
			break;
 800c864:	e022      	b.n	800c8ac <tune+0x49c>
		case 4:
			DD += ps4.joyR_y * 0.00001;
 800c866:	4b54      	ldr	r3, [pc, #336]	; (800c9b8 <tune+0x5a8>)
 800c868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7f3 fe6c 	bl	8000548 <__aeabi_f2d>
 800c870:	a34f      	add	r3, pc, #316	; (adr r3, 800c9b0 <tune+0x5a0>)
 800c872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c876:	f7f3 febf 	bl	80005f8 <__aeabi_dmul>
 800c87a:	4602      	mov	r2, r0
 800c87c:	460b      	mov	r3, r1
 800c87e:	4614      	mov	r4, r2
 800c880:	461d      	mov	r5, r3
 800c882:	4b54      	ldr	r3, [pc, #336]	; (800c9d4 <tune+0x5c4>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4618      	mov	r0, r3
 800c888:	f7f3 fe5e 	bl	8000548 <__aeabi_f2d>
 800c88c:	4602      	mov	r2, r0
 800c88e:	460b      	mov	r3, r1
 800c890:	4620      	mov	r0, r4
 800c892:	4629      	mov	r1, r5
 800c894:	f7f3 fcfa 	bl	800028c <__adddf3>
 800c898:	4602      	mov	r2, r0
 800c89a:	460b      	mov	r3, r1
 800c89c:	4610      	mov	r0, r2
 800c89e:	4619      	mov	r1, r3
 800c8a0:	f7f4 f9a2 	bl	8000be8 <__aeabi_d2f>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	4a4b      	ldr	r2, [pc, #300]	; (800c9d4 <tune+0x5c4>)
 800c8a8:	6013      	str	r3, [r2, #0]
			break;
 800c8aa:	bf00      	nop
		}
	}

	if(ps4.button == OPTION)
 800c8ac:	4b42      	ldr	r3, [pc, #264]	; (800c9b8 <tune+0x5a8>)
 800c8ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8b4:	f040 80bc 	bne.w	800ca30 <tune+0x620>
	{
		while(ps4.button == OPTION);
 800c8b8:	bf00      	nop
 800c8ba:	4b3f      	ldr	r3, [pc, #252]	; (800c9b8 <tune+0x5a8>)
 800c8bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8c2:	d0fa      	beq.n	800c8ba <tune+0x4aa>
		switch(wheel)
 800c8c4:	4b3f      	ldr	r3, [pc, #252]	; (800c9c4 <tune+0x5b4>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	3b01      	subs	r3, #1
 800c8ca:	2b03      	cmp	r3, #3
 800c8cc:	f200 80b1 	bhi.w	800ca32 <tune+0x622>
 800c8d0:	a201      	add	r2, pc, #4	; (adr r2, 800c8d8 <tune+0x4c8>)
 800c8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8d6:	bf00      	nop
 800c8d8:	0800c8e9 	.word	0x0800c8e9
 800c8dc:	0800c929 	.word	0x0800c929
 800c8e0:	0800c969 	.word	0x0800c969
 800c8e4:	0800c9f1 	.word	0x0800c9f1
		{
		case 1:
			RNSSet(&rns, RNS_F_LEFT_VEL_PID, AP, AI, AD);
 800c8e8:	4b3b      	ldr	r3, [pc, #236]	; (800c9d8 <tune+0x5c8>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f7f3 fe2b 	bl	8000548 <__aeabi_f2d>
 800c8f2:	4680      	mov	r8, r0
 800c8f4:	4689      	mov	r9, r1
 800c8f6:	4b39      	ldr	r3, [pc, #228]	; (800c9dc <tune+0x5cc>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7f3 fe24 	bl	8000548 <__aeabi_f2d>
 800c900:	4604      	mov	r4, r0
 800c902:	460d      	mov	r5, r1
 800c904:	4b30      	ldr	r3, [pc, #192]	; (800c9c8 <tune+0x5b8>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4618      	mov	r0, r3
 800c90a:	f7f3 fe1d 	bl	8000548 <__aeabi_f2d>
 800c90e:	4602      	mov	r2, r0
 800c910:	460b      	mov	r3, r1
 800c912:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c916:	e9cd 4500 	strd	r4, r5, [sp]
 800c91a:	4642      	mov	r2, r8
 800c91c:	464b      	mov	r3, r9
 800c91e:	212f      	movs	r1, #47	; 0x2f
 800c920:	482f      	ldr	r0, [pc, #188]	; (800c9e0 <tune+0x5d0>)
 800c922:	f7fc feeb 	bl	80096fc <RNSSet>
			break;
 800c926:	e084      	b.n	800ca32 <tune+0x622>

		case 2:
			RNSSet(&rns, RNS_F_RIGHT_VEL_PID, BP, BI, BD);
 800c928:	4b2e      	ldr	r3, [pc, #184]	; (800c9e4 <tune+0x5d4>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4618      	mov	r0, r3
 800c92e:	f7f3 fe0b 	bl	8000548 <__aeabi_f2d>
 800c932:	4680      	mov	r8, r0
 800c934:	4689      	mov	r9, r1
 800c936:	4b2c      	ldr	r3, [pc, #176]	; (800c9e8 <tune+0x5d8>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4618      	mov	r0, r3
 800c93c:	f7f3 fe04 	bl	8000548 <__aeabi_f2d>
 800c940:	4604      	mov	r4, r0
 800c942:	460d      	mov	r5, r1
 800c944:	4b21      	ldr	r3, [pc, #132]	; (800c9cc <tune+0x5bc>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4618      	mov	r0, r3
 800c94a:	f7f3 fdfd 	bl	8000548 <__aeabi_f2d>
 800c94e:	4602      	mov	r2, r0
 800c950:	460b      	mov	r3, r1
 800c952:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c956:	e9cd 4500 	strd	r4, r5, [sp]
 800c95a:	4642      	mov	r2, r8
 800c95c:	464b      	mov	r3, r9
 800c95e:	2130      	movs	r1, #48	; 0x30
 800c960:	481f      	ldr	r0, [pc, #124]	; (800c9e0 <tune+0x5d0>)
 800c962:	f7fc fecb 	bl	80096fc <RNSSet>
			break;
 800c966:	e064      	b.n	800ca32 <tune+0x622>

		case 3:
			RNSSet(&rns, RNS_B_LEFT_VEL_PID, CP, CI, CD);
 800c968:	4b20      	ldr	r3, [pc, #128]	; (800c9ec <tune+0x5dc>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7f3 fdeb 	bl	8000548 <__aeabi_f2d>
 800c972:	4680      	mov	r8, r0
 800c974:	4689      	mov	r9, r1
 800c976:	4b11      	ldr	r3, [pc, #68]	; (800c9bc <tune+0x5ac>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4618      	mov	r0, r3
 800c97c:	f7f3 fde4 	bl	8000548 <__aeabi_f2d>
 800c980:	4604      	mov	r4, r0
 800c982:	460d      	mov	r5, r1
 800c984:	4b12      	ldr	r3, [pc, #72]	; (800c9d0 <tune+0x5c0>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4618      	mov	r0, r3
 800c98a:	f7f3 fddd 	bl	8000548 <__aeabi_f2d>
 800c98e:	4602      	mov	r2, r0
 800c990:	460b      	mov	r3, r1
 800c992:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c996:	e9cd 4500 	strd	r4, r5, [sp]
 800c99a:	4642      	mov	r2, r8
 800c99c:	464b      	mov	r3, r9
 800c99e:	2131      	movs	r1, #49	; 0x31
 800c9a0:	480f      	ldr	r0, [pc, #60]	; (800c9e0 <tune+0x5d0>)
 800c9a2:	f7fc feab 	bl	80096fc <RNSSet>
			break;
 800c9a6:	e044      	b.n	800ca32 <tune+0x622>
 800c9a8:	eb1c432d 	.word	0xeb1c432d
 800c9ac:	3f1a36e2 	.word	0x3f1a36e2
 800c9b0:	88e368f1 	.word	0x88e368f1
 800c9b4:	3ee4f8b5 	.word	0x3ee4f8b5
 800c9b8:	2000a014 	.word	0x2000a014
 800c9bc:	20009804 	.word	0x20009804
 800c9c0:	20006a60 	.word	0x20006a60
 800c9c4:	200064dc 	.word	0x200064dc
 800c9c8:	2000a2fc 	.word	0x2000a2fc
 800c9cc:	20007204 	.word	0x20007204
 800c9d0:	200064e0 	.word	0x200064e0
 800c9d4:	20009ad4 	.word	0x20009ad4
 800c9d8:	2000a320 	.word	0x2000a320
 800c9dc:	20007208 	.word	0x20007208
 800c9e0:	20008f08 	.word	0x20008f08
 800c9e4:	200075b4 	.word	0x200075b4
 800c9e8:	20009430 	.word	0x20009430
 800c9ec:	2000966c 	.word	0x2000966c

		case 4:
			RNSSet(&rns, RNS_B_RIGHT_VEL_PID, DP, DI, DD);
 800c9f0:	4b12      	ldr	r3, [pc, #72]	; (800ca3c <tune+0x62c>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7f3 fda7 	bl	8000548 <__aeabi_f2d>
 800c9fa:	4680      	mov	r8, r0
 800c9fc:	4689      	mov	r9, r1
 800c9fe:	4b10      	ldr	r3, [pc, #64]	; (800ca40 <tune+0x630>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7f3 fda0 	bl	8000548 <__aeabi_f2d>
 800ca08:	4604      	mov	r4, r0
 800ca0a:	460d      	mov	r5, r1
 800ca0c:	4b0d      	ldr	r3, [pc, #52]	; (800ca44 <tune+0x634>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7f3 fd99 	bl	8000548 <__aeabi_f2d>
 800ca16:	4602      	mov	r2, r0
 800ca18:	460b      	mov	r3, r1
 800ca1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ca1e:	e9cd 4500 	strd	r4, r5, [sp]
 800ca22:	4642      	mov	r2, r8
 800ca24:	464b      	mov	r3, r9
 800ca26:	2132      	movs	r1, #50	; 0x32
 800ca28:	4807      	ldr	r0, [pc, #28]	; (800ca48 <tune+0x638>)
 800ca2a:	f7fc fe67 	bl	80096fc <RNSSet>
			break;
 800ca2e:	e000      	b.n	800ca32 <tune+0x622>
		}
	}
 800ca30:	bf00      	nop
}
 800ca32:	bf00      	nop
 800ca34:	46bd      	mov	sp, r7
 800ca36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ca3a:	bf00      	nop
 800ca3c:	20009db0 	.word	0x20009db0
 800ca40:	20006a60 	.word	0x20006a60
 800ca44:	20009ad4 	.word	0x20009ad4
 800ca48:	20008f08 	.word	0x20008f08

0800ca4c <flywheelStop>:
	VESCPDC(leftU / 19999.00, &vesc1);
	VESCPDC(rightU / 19999.00, &vesc2);
}

void flywheelStop()
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	af00      	add	r7, sp, #0
	vesc_speed = 0;
 800ca50:	4b0c      	ldr	r3, [pc, #48]	; (800ca84 <flywheelStop+0x38>)
 800ca52:	f04f 0200 	mov.w	r2, #0
 800ca56:	601a      	str	r2, [r3, #0]

	PIDDelayInit(&left_PID);
 800ca58:	480b      	ldr	r0, [pc, #44]	; (800ca88 <flywheelStop+0x3c>)
 800ca5a:	f7f8 fd1e 	bl	800549a <PIDDelayInit>
	PIDDelayInit(&right_PID);
 800ca5e:	480b      	ldr	r0, [pc, #44]	; (800ca8c <flywheelStop+0x40>)
 800ca60:	f7f8 fd1b 	bl	800549a <PIDDelayInit>

	leftU = 0;
 800ca64:	4b0a      	ldr	r3, [pc, #40]	; (800ca90 <flywheelStop+0x44>)
 800ca66:	f04f 0200 	mov.w	r2, #0
 800ca6a:	601a      	str	r2, [r3, #0]
	rightU = 0;
 800ca6c:	4b09      	ldr	r3, [pc, #36]	; (800ca94 <flywheelStop+0x48>)
 800ca6e:	f04f 0200 	mov.w	r2, #0
 800ca72:	601a      	str	r2, [r3, #0]

	VESCStop(&vesc1);
 800ca74:	4808      	ldr	r0, [pc, #32]	; (800ca98 <flywheelStop+0x4c>)
 800ca76:	f000 fe5d 	bl	800d734 <VESCStop>
	VESCStop(&vesc2);
 800ca7a:	4808      	ldr	r0, [pc, #32]	; (800ca9c <flywheelStop+0x50>)
 800ca7c:	f000 fe5a 	bl	800d734 <VESCStop>
}
 800ca80:	bf00      	nop
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	2000659c 	.word	0x2000659c
 800ca88:	20008eb4 	.word	0x20008eb4
 800ca8c:	20009f58 	.word	0x20009f58
 800ca90:	20006880 	.word	0x20006880
 800ca94:	20006b00 	.word	0x20006b00
 800ca98:	20006b04 	.word	0x20006b04
 800ca9c:	2000997c 	.word	0x2000997c

0800caa0 <DMA1_Stream0_IRQHandler>:
#include "dma.h"

/*I2C*/

void DMA1_Stream0_IRQHandler(void)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
 800caa4:	4802      	ldr	r0, [pc, #8]	; (800cab0 <DMA1_Stream0_IRQHandler+0x10>)
 800caa6:	f004 ff37 	bl	8011918 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_uart5_rx);

}
 800caaa:	bf00      	nop
 800caac:	bd80      	pop	{r7, pc}
 800caae:	bf00      	nop
 800cab0:	20009fac 	.word	0x20009fac

0800cab4 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hdma_usart3_rx);
	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
 800cab8:	4802      	ldr	r0, [pc, #8]	; (800cac4 <DMA1_Stream3_IRQHandler+0x10>)
 800caba:	f004 ff2d 	bl	8011918 <HAL_DMA_IRQHandler>
}
 800cabe:	bf00      	nop
 800cac0:	bd80      	pop	{r7, pc}
 800cac2:	bf00      	nop
 800cac4:	2000653c 	.word	0x2000653c

0800cac8 <DMA1_Stream2_IRQHandler>:

void DMA1_Stream2_IRQHandler(void)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800cacc:	4802      	ldr	r0, [pc, #8]	; (800cad8 <DMA1_Stream2_IRQHandler+0x10>)
 800cace:	f004 ff23 	bl	8011918 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
//	HAL_DMA_IRQHandler(&hi2c3_rx_dma);
}
 800cad2:	bf00      	nop
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop
 800cad8:	20005a20 	.word	0x20005a20

0800cadc <DMA1_Stream1_IRQHandler>:

/*UART*/
void DMA1_Stream1_IRQHandler(void)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800cae0:	4802      	ldr	r0, [pc, #8]	; (800caec <DMA1_Stream1_IRQHandler+0x10>)
 800cae2:	f004 ff19 	bl	8011918 <HAL_DMA_IRQHandler>
}
 800cae6:	bf00      	nop
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop
 800caec:	20005b64 	.word	0x20005b64

0800caf0 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800caf4:	4802      	ldr	r0, [pc, #8]	; (800cb00 <DMA1_Stream4_IRQHandler+0x10>)
 800caf6:	f004 ff0f 	bl	8011918 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_usart3_tx);
//	HAL_DMA_IRQHandler(&hi2c3_tx_dma);
}
 800cafa:	bf00      	nop
 800cafc:	bd80      	pop	{r7, pc}
 800cafe:	bf00      	nop
 800cb00:	200061d8 	.word	0x200061d8

0800cb04 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800cb08:	4802      	ldr	r0, [pc, #8]	; (800cb14 <DMA1_Stream5_IRQHandler+0x10>)
 800cb0a:	f004 ff05 	bl	8011918 <HAL_DMA_IRQHandler>
}
 800cb0e:	bf00      	nop
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	bf00      	nop
 800cb14:	20005a80 	.word	0x20005a80

0800cb18 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	af00      	add	r7, sp, #0

//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800cb1c:	4802      	ldr	r0, [pc, #8]	; (800cb28 <DMA1_Stream6_IRQHandler+0x10>)
 800cb1e:	f004 fefb 	bl	8011918 <HAL_DMA_IRQHandler>
}
 800cb22:	bf00      	nop
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	20005d6c 	.word	0x20005d6c

0800cb2c <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void){
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
//	HAL_DMA_IRQHandler(&hi2c2_tx_dma);
	HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800cb30:	4802      	ldr	r0, [pc, #8]	; (800cb3c <DMA1_Stream7_IRQHandler+0x10>)
 800cb32:	f004 fef1 	bl	8011918 <HAL_DMA_IRQHandler>
}
 800cb36:	bf00      	nop
 800cb38:	bd80      	pop	{r7, pc}
 800cb3a:	bf00      	nop
 800cb3c:	20006238 	.word	0x20006238

0800cb40 <DMA2_Stream0_IRQHandler>:


void DMA2_Stream0_IRQHandler(void)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc1);
 800cb44:	4802      	ldr	r0, [pc, #8]	; (800cb50 <DMA2_Stream0_IRQHandler+0x10>)
 800cb46:	f004 fee7 	bl	8011918 <HAL_DMA_IRQHandler>
}
 800cb4a:	bf00      	nop
 800cb4c:	bd80      	pop	{r7, pc}
 800cb4e:	bf00      	nop
 800cb50:	200063d0 	.word	0x200063d0

0800cb54 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc3);
 800cb58:	4802      	ldr	r0, [pc, #8]	; (800cb64 <DMA2_Stream1_IRQHandler+0x10>)
 800cb5a:	f004 fedd 	bl	8011918 <HAL_DMA_IRQHandler>
}
 800cb5e:	bf00      	nop
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	200062e0 	.word	0x200062e0

0800cb68 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800cb6c:	4802      	ldr	r0, [pc, #8]	; (800cb78 <DMA2_Stream2_IRQHandler+0x10>)
 800cb6e:	f004 fed3 	bl	8011918 <HAL_DMA_IRQHandler>
}
 800cb72:	bf00      	nop
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	20009ed0 	.word	0x20009ed0

0800cb7c <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc2);
 800cb80:	4802      	ldr	r0, [pc, #8]	; (800cb8c <DMA2_Stream3_IRQHandler+0x10>)
 800cb82:	f004 fec9 	bl	8011918 <HAL_DMA_IRQHandler>
}
 800cb86:	bf00      	nop
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	20006430 	.word	0x20006430

0800cb90 <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler(void)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800cb94:	4802      	ldr	r0, [pc, #8]	; (800cba0 <DMA2_Stream5_IRQHandler+0x10>)
 800cb96:	f004 febf 	bl	8011918 <HAL_DMA_IRQHandler>
}
 800cb9a:	bf00      	nop
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	2000a328 	.word	0x2000a328

0800cba4 <NMI_Handler>:
int _counter = 0;
/**
 * * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800cba4:	b480      	push	{r7}
 800cba6:	af00      	add	r7, sp, #0

}
 800cba8:	bf00      	nop
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr

0800cbb2 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800cbb2:	b480      	push	{r7}
 800cbb4:	af00      	add	r7, sp, #0

}
 800cbb6:	bf00      	nop
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	af00      	add	r7, sp, #0

	while(1){
 800cbc4:	e7fe      	b.n	800cbc4 <MemManage_Handler+0x4>

0800cbc6 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800cbc6:	b480      	push	{r7}
 800cbc8:	af00      	add	r7, sp, #0

}
 800cbca:	bf00      	nop
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr

0800cbd4 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	af00      	add	r7, sp, #0

}
 800cbd8:	bf00      	nop
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe0:	4770      	bx	lr

0800cbe2 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800cbe2:	b480      	push	{r7}
 800cbe4:	af00      	add	r7, sp, #0

}
 800cbe6:	bf00      	nop
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr

0800cbf0 <TIM1_UP_TIM10_IRQHandler>:
//
//}


void TIM1_UP_TIM10_IRQHandler(void)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	af00      	add	r7, sp, #0
#ifdef USED_QEI1
	if (htim1.Instance -> CR1 == 129)
 800cbf4:	4b14      	ldr	r3, [pc, #80]	; (800cc48 <TIM1_UP_TIM10_IRQHandler+0x58>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	2b81      	cmp	r3, #129	; 0x81
 800cbfc:	d109      	bne.n	800cc12 <TIM1_UP_TIM10_IRQHandler+0x22>
	{
		BIOS_QEI1.signbit += 1;
 800cbfe:	4b13      	ldr	r3, [pc, #76]	; (800cc4c <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800cc00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	3301      	adds	r3, #1
 800cc08:	b29b      	uxth	r3, r3
 800cc0a:	b21a      	sxth	r2, r3
 800cc0c:	4b0f      	ldr	r3, [pc, #60]	; (800cc4c <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800cc0e:	805a      	strh	r2, [r3, #2]
 800cc10:	e00d      	b.n	800cc2e <TIM1_UP_TIM10_IRQHandler+0x3e>
	}
	else if (htim1.Instance ->CR1 == 145)
 800cc12:	4b0d      	ldr	r3, [pc, #52]	; (800cc48 <TIM1_UP_TIM10_IRQHandler+0x58>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	2b91      	cmp	r3, #145	; 0x91
 800cc1a:	d108      	bne.n	800cc2e <TIM1_UP_TIM10_IRQHandler+0x3e>
	{
		BIOS_QEI1.signbit -= 1;
 800cc1c:	4b0b      	ldr	r3, [pc, #44]	; (800cc4c <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800cc1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cc22:	b29b      	uxth	r3, r3
 800cc24:	3b01      	subs	r3, #1
 800cc26:	b29b      	uxth	r3, r3
 800cc28:	b21a      	sxth	r2, r3
 800cc2a:	4b08      	ldr	r3, [pc, #32]	; (800cc4c <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800cc2c:	805a      	strh	r2, [r3, #2]
	}
	htim1.Instance -> SR = 0;
 800cc2e:	4b06      	ldr	r3, [pc, #24]	; (800cc48 <TIM1_UP_TIM10_IRQHandler+0x58>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	2200      	movs	r2, #0
 800cc34:	611a      	str	r2, [r3, #16]
	QEIDelay(200);
 800cc36:	20c8      	movs	r0, #200	; 0xc8
 800cc38:	f7f5 f82c 	bl	8001c94 <QEIDelay>
#else
	HAL_TIM_IRQHandler(&htim1);
#endif
	HAL_TIM_IRQHandler(&htim10);
 800cc3c:	4804      	ldr	r0, [pc, #16]	; (800cc50 <TIM1_UP_TIM10_IRQHandler+0x60>)
 800cc3e:	f008 fb6f 	bl	8015320 <HAL_TIM_IRQHandler>
	return;
 800cc42:	bf00      	nop
}
 800cc44:	bd80      	pop	{r7, pc}
 800cc46:	bf00      	nop
 800cc48:	20005f34 	.word	0x20005f34
 800cc4c:	20006494 	.word	0x20006494
 800cc50:	20005c04 	.word	0x20005c04

0800cc54 <TIM4_IRQHandler>:



void TIM4_IRQHandler(void)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	af00      	add	r7, sp, #0

#ifdef USED_QEI4
	if (htim4.Instance -> CR1 == 129)
 800cc58:	4b12      	ldr	r3, [pc, #72]	; (800cca4 <TIM4_IRQHandler+0x50>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	2b81      	cmp	r3, #129	; 0x81
 800cc60:	d109      	bne.n	800cc76 <TIM4_IRQHandler+0x22>
	{
		BIOS_QEI4.signbit += 1;
 800cc62:	4b11      	ldr	r3, [pc, #68]	; (800cca8 <TIM4_IRQHandler+0x54>)
 800cc64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cc68:	b29b      	uxth	r3, r3
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	b29b      	uxth	r3, r3
 800cc6e:	b21a      	sxth	r2, r3
 800cc70:	4b0d      	ldr	r3, [pc, #52]	; (800cca8 <TIM4_IRQHandler+0x54>)
 800cc72:	805a      	strh	r2, [r3, #2]
 800cc74:	e00d      	b.n	800cc92 <TIM4_IRQHandler+0x3e>
	}
	else if (htim4.Instance ->CR1 == 145)
 800cc76:	4b0b      	ldr	r3, [pc, #44]	; (800cca4 <TIM4_IRQHandler+0x50>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	2b91      	cmp	r3, #145	; 0x91
 800cc7e:	d108      	bne.n	800cc92 <TIM4_IRQHandler+0x3e>
	{
		BIOS_QEI4.signbit -= 1;
 800cc80:	4b09      	ldr	r3, [pc, #36]	; (800cca8 <TIM4_IRQHandler+0x54>)
 800cc82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cc86:	b29b      	uxth	r3, r3
 800cc88:	3b01      	subs	r3, #1
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	b21a      	sxth	r2, r3
 800cc8e:	4b06      	ldr	r3, [pc, #24]	; (800cca8 <TIM4_IRQHandler+0x54>)
 800cc90:	805a      	strh	r2, [r3, #2]
	}
	htim4.Instance -> SR = 0;
 800cc92:	4b04      	ldr	r3, [pc, #16]	; (800cca4 <TIM4_IRQHandler+0x50>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2200      	movs	r2, #0
 800cc98:	611a      	str	r2, [r3, #16]
	QEIDelay(100);
 800cc9a:	2064      	movs	r0, #100	; 0x64
 800cc9c:	f7f4 fffa 	bl	8001c94 <QEIDelay>
	HAL_TIM_IRQHandler(&htim4);

	return;
#endif

}
 800cca0:	bf00      	nop
 800cca2:	bd80      	pop	{r7, pc}
 800cca4:	20005b24 	.word	0x20005b24
 800cca8:	200064b8 	.word	0x200064b8

0800ccac <TIM8_UP_TIM13_IRQHandler>:



void TIM8_UP_TIM13_IRQHandler(void)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	af00      	add	r7, sp, #0
		BIOS_QEI6.signbit -= 1;
	}
	htim8.Instance -> SR = 0;
	QEIDelay(200);
#else
	HAL_TIM_IRQHandler(&htim8);
 800ccb0:	4803      	ldr	r0, [pc, #12]	; (800ccc0 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800ccb2:	f008 fb35 	bl	8015320 <HAL_TIM_IRQHandler>
#endif
	HAL_TIM_IRQHandler(&htim13);
 800ccb6:	4803      	ldr	r0, [pc, #12]	; (800ccc4 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800ccb8:	f008 fb32 	bl	8015320 <HAL_TIM_IRQHandler>
	return;
 800ccbc:	bf00      	nop
}
 800ccbe:	bd80      	pop	{r7, pc}
 800ccc0:	20005ae4 	.word	0x20005ae4
 800ccc4:	20005dcc 	.word	0x20005dcc

0800ccc8 <TIM2_IRQHandler>:



void TIM2_IRQHandler(void)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 800cccc:	4802      	ldr	r0, [pc, #8]	; (800ccd8 <TIM2_IRQHandler+0x10>)
 800ccce:	f008 fb27 	bl	8015320 <HAL_TIM_IRQHandler>
}
 800ccd2:	bf00      	nop
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	20006038 	.word	0x20006038

0800ccdc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccec:	d109      	bne.n	800cd02 <HAL_TIM_PeriodElapsedCallback+0x26>
		HAL_IncTick();
 800ccee:	f003 fc9f 	bl	8010630 <HAL_IncTick>
		//		MUXUpdate(&MUX);
		SHIFTREGShift(&SR);
 800ccf2:	4806      	ldr	r0, [pc, #24]	; (800cd0c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800ccf4:	f7f5 f899 	bl	8001e2a <SHIFTREGShift>
		counter++;
 800ccf8:	4b05      	ldr	r3, [pc, #20]	; (800cd10 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	3301      	adds	r3, #1
 800ccfe:	4a04      	ldr	r2, [pc, #16]	; (800cd10 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800cd00:	6013      	str	r3, [r2, #0]
	}
}
 800cd02:	bf00      	nop
 800cd04:	3708      	adds	r7, #8
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	2000959c 	.word	0x2000959c
 800cd10:	200096f0 	.word	0x200096f0

0800cd14 <HAL_I2C_MasterRxCpltCallback>:


//Callback for I2C RXBuffer
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b082      	sub	sp, #8
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
	if(hi2c == ps4.hi2cps4){
 800cd1c:	4b05      	ldr	r3, [pc, #20]	; (800cd34 <HAL_I2C_MasterRxCpltCallback+0x20>)
 800cd1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d102      	bne.n	800cd2c <HAL_I2C_MasterRxCpltCallback+0x18>
		PSxConnectDMA(&ps4);
 800cd26:	4803      	ldr	r0, [pc, #12]	; (800cd34 <HAL_I2C_MasterRxCpltCallback+0x20>)
 800cd28:	f7fb ff60 	bl	8008bec <PSxConnectDMA>

//	if(hi2c == PITCH_IMU.hi2cimu)
//	{
//		IMU_I2CHandle(&PITCH_IMU);
//	}
}
 800cd2c:	bf00      	nop
 800cd2e:	3708      	adds	r7, #8
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}
 800cd34:	2000a014 	.word	0x2000a014

0800cd38 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void){
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	af00      	add	r7, sp, #0
	HAL_I2C_EV_IRQHandler(&hi2c1);
 800cd3c:	4802      	ldr	r0, [pc, #8]	; (800cd48 <I2C1_EV_IRQHandler+0x10>)
 800cd3e:	f005 fdc3 	bl	80128c8 <HAL_I2C_EV_IRQHandler>

}
 800cd42:	bf00      	nop
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	20006b88 	.word	0x20006b88

0800cd4c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void){
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	af00      	add	r7, sp, #0
	HAL_I2C_ER_IRQHandler(&hi2c1);
 800cd50:	480a      	ldr	r0, [pc, #40]	; (800cd7c <I2C1_ER_IRQHandler+0x30>)
 800cd52:	f005 ff26 	bl	8012ba2 <HAL_I2C_ER_IRQHandler>
	HAL_DMA_DeInit(&hi2c1_rx_dma);
 800cd56:	480a      	ldr	r0, [pc, #40]	; (800cd80 <I2C1_ER_IRQHandler+0x34>)
 800cd58:	f004 fd06 	bl	8011768 <HAL_DMA_DeInit>
	HAL_I2C_DeInit(&hi2c1);
 800cd5c:	4807      	ldr	r0, [pc, #28]	; (800cd7c <I2C1_ER_IRQHandler+0x30>)
 800cd5e:	f005 fc6d 	bl	801263c <HAL_I2C_DeInit>

	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 800cd62:	4b08      	ldr	r3, [pc, #32]	; (800cd84 <I2C1_ER_IRQHandler+0x38>)
 800cd64:	2208      	movs	r2, #8
 800cd66:	4906      	ldr	r1, [pc, #24]	; (800cd80 <I2C1_ER_IRQHandler+0x34>)
 800cd68:	4804      	ldr	r0, [pc, #16]	; (800cd7c <I2C1_ER_IRQHandler+0x30>)
 800cd6a:	f7f6 ff7b 	bl	8003c64 <I2CX_DMA_RX_Init>
//
//
//
	PSxInitDMA(&ps4, &hi2c1);
 800cd6e:	4903      	ldr	r1, [pc, #12]	; (800cd7c <I2C1_ER_IRQHandler+0x30>)
 800cd70:	4805      	ldr	r0, [pc, #20]	; (800cd88 <I2C1_ER_IRQHandler+0x3c>)
 800cd72:	f7fb ff4e 	bl	8008c12 <PSxInitDMA>

}
 800cd76:	bf00      	nop
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	20006b88 	.word	0x20006b88
 800cd80:	20009fac 	.word	0x20009fac
 800cd84:	00061a80 	.word	0x00061a80
 800cd88:	2000a014 	.word	0x2000a014

0800cd8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b08c      	sub	sp, #48	; 0x30
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800cd94:	2300      	movs	r3, #0
 800cd96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	6879      	ldr	r1, [r7, #4]
 800cda0:	201c      	movs	r0, #28
 800cda2:	f004 fbed 	bl	8011580 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800cda6:	201c      	movs	r0, #28
 800cda8:	f004 fc06 	bl	80115b8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800cdac:	2300      	movs	r3, #0
 800cdae:	60fb      	str	r3, [r7, #12]
 800cdb0:	4b20      	ldr	r3, [pc, #128]	; (800ce34 <HAL_InitTick+0xa8>)
 800cdb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdb4:	4a1f      	ldr	r2, [pc, #124]	; (800ce34 <HAL_InitTick+0xa8>)
 800cdb6:	f043 0301 	orr.w	r3, r3, #1
 800cdba:	6413      	str	r3, [r2, #64]	; 0x40
 800cdbc:	4b1d      	ldr	r3, [pc, #116]	; (800ce34 <HAL_InitTick+0xa8>)
 800cdbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdc0:	f003 0301 	and.w	r3, r3, #1
 800cdc4:	60fb      	str	r3, [r7, #12]
 800cdc6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800cdc8:	f107 0210 	add.w	r2, r7, #16
 800cdcc:	f107 0314 	add.w	r3, r7, #20
 800cdd0:	4611      	mov	r1, r2
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f007 ffae 	bl	8014d34 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800cdd8:	f007 ff84 	bl	8014ce4 <HAL_RCC_GetPCLK1Freq>
 800cddc:	4603      	mov	r3, r0
 800cdde:	005b      	lsls	r3, r3, #1
 800cde0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800cde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde4:	4a14      	ldr	r2, [pc, #80]	; (800ce38 <HAL_InitTick+0xac>)
 800cde6:	fba2 2303 	umull	r2, r3, r2, r3
 800cdea:	0c9b      	lsrs	r3, r3, #18
 800cdec:	3b01      	subs	r3, #1
 800cdee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800cdf0:	4b12      	ldr	r3, [pc, #72]	; (800ce3c <HAL_InitTick+0xb0>)
 800cdf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cdf6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800cdf8:	4b10      	ldr	r3, [pc, #64]	; (800ce3c <HAL_InitTick+0xb0>)
 800cdfa:	f240 32e7 	movw	r2, #999	; 0x3e7
 800cdfe:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800ce00:	4a0e      	ldr	r2, [pc, #56]	; (800ce3c <HAL_InitTick+0xb0>)
 800ce02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce04:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800ce06:	4b0d      	ldr	r3, [pc, #52]	; (800ce3c <HAL_InitTick+0xb0>)
 800ce08:	2200      	movs	r2, #0
 800ce0a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ce0c:	4b0b      	ldr	r3, [pc, #44]	; (800ce3c <HAL_InitTick+0xb0>)
 800ce0e:	2200      	movs	r2, #0
 800ce10:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800ce12:	480a      	ldr	r0, [pc, #40]	; (800ce3c <HAL_InitTick+0xb0>)
 800ce14:	f008 f8de 	bl	8014fd4 <HAL_TIM_Base_Init>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d104      	bne.n	800ce28 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800ce1e:	4807      	ldr	r0, [pc, #28]	; (800ce3c <HAL_InitTick+0xb0>)
 800ce20:	f008 f927 	bl	8015072 <HAL_TIM_Base_Start_IT>
 800ce24:	4603      	mov	r3, r0
 800ce26:	e000      	b.n	800ce2a <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800ce28:	2301      	movs	r3, #1
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3730      	adds	r7, #48	; 0x30
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop
 800ce34:	40023800 	.word	0x40023800
 800ce38:	431bde83 	.word	0x431bde83
 800ce3c:	20006038 	.word	0x20006038

0800ce40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ce40:	b480      	push	{r7}
 800ce42:	af00      	add	r7, sp, #0
	return 1;
 800ce44:	2301      	movs	r3, #1
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr

0800ce50 <_kill>:

int _kill(int pid, int sig)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800ce5a:	f00c feaf 	bl	8019bbc <__errno>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	2216      	movs	r2, #22
 800ce62:	601a      	str	r2, [r3, #0]
	return -1;
 800ce64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3708      	adds	r7, #8
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <_exit>:

void _exit (int status)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800ce78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f7ff ffe7 	bl	800ce50 <_kill>
	while (1) {}		/* Make sure we hang here */
 800ce82:	e7fe      	b.n	800ce82 <_exit+0x12>

0800ce84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b086      	sub	sp, #24
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	60f8      	str	r0, [r7, #12]
 800ce8c:	60b9      	str	r1, [r7, #8]
 800ce8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ce90:	2300      	movs	r3, #0
 800ce92:	617b      	str	r3, [r7, #20]
 800ce94:	e00a      	b.n	800ceac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800ce96:	f3af 8000 	nop.w
 800ce9a:	4601      	mov	r1, r0
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	1c5a      	adds	r2, r3, #1
 800cea0:	60ba      	str	r2, [r7, #8]
 800cea2:	b2ca      	uxtb	r2, r1
 800cea4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	3301      	adds	r3, #1
 800ceaa:	617b      	str	r3, [r7, #20]
 800ceac:	697a      	ldr	r2, [r7, #20]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	dbf0      	blt.n	800ce96 <_read+0x12>
	}

return len;
 800ceb4:	687b      	ldr	r3, [r7, #4]
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3718      	adds	r7, #24
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}

0800cebe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800cebe:	b580      	push	{r7, lr}
 800cec0:	b086      	sub	sp, #24
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	60f8      	str	r0, [r7, #12]
 800cec6:	60b9      	str	r1, [r7, #8]
 800cec8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ceca:	2300      	movs	r3, #0
 800cecc:	617b      	str	r3, [r7, #20]
 800cece:	e009      	b.n	800cee4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	1c5a      	adds	r2, r3, #1
 800ced4:	60ba      	str	r2, [r7, #8]
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	4618      	mov	r0, r3
 800ceda:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	3301      	adds	r3, #1
 800cee2:	617b      	str	r3, [r7, #20]
 800cee4:	697a      	ldr	r2, [r7, #20]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	429a      	cmp	r2, r3
 800ceea:	dbf1      	blt.n	800ced0 <_write+0x12>
	}
	return len;
 800ceec:	687b      	ldr	r3, [r7, #4]
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3718      	adds	r7, #24
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <_close>:

int _close(int file)
{
 800cef6:	b480      	push	{r7}
 800cef8:	b083      	sub	sp, #12
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
	return -1;
 800cefe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	370c      	adds	r7, #12
 800cf06:	46bd      	mov	sp, r7
 800cf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0c:	4770      	bx	lr

0800cf0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800cf0e:	b480      	push	{r7}
 800cf10:	b083      	sub	sp, #12
 800cf12:	af00      	add	r7, sp, #0
 800cf14:	6078      	str	r0, [r7, #4]
 800cf16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cf1e:	605a      	str	r2, [r3, #4]
	return 0;
 800cf20:	2300      	movs	r3, #0
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	370c      	adds	r7, #12
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr

0800cf2e <_isatty>:

int _isatty(int file)
{
 800cf2e:	b480      	push	{r7}
 800cf30:	b083      	sub	sp, #12
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	6078      	str	r0, [r7, #4]
	return 1;
 800cf36:	2301      	movs	r3, #1
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	370c      	adds	r7, #12
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr

0800cf44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b085      	sub	sp, #20
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	60f8      	str	r0, [r7, #12]
 800cf4c:	60b9      	str	r1, [r7, #8]
 800cf4e:	607a      	str	r2, [r7, #4]
	return 0;
 800cf50:	2300      	movs	r3, #0
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3714      	adds	r7, #20
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr
	...

0800cf60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b086      	sub	sp, #24
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800cf68:	4a14      	ldr	r2, [pc, #80]	; (800cfbc <_sbrk+0x5c>)
 800cf6a:	4b15      	ldr	r3, [pc, #84]	; (800cfc0 <_sbrk+0x60>)
 800cf6c:	1ad3      	subs	r3, r2, r3
 800cf6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800cf74:	4b13      	ldr	r3, [pc, #76]	; (800cfc4 <_sbrk+0x64>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d102      	bne.n	800cf82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800cf7c:	4b11      	ldr	r3, [pc, #68]	; (800cfc4 <_sbrk+0x64>)
 800cf7e:	4a12      	ldr	r2, [pc, #72]	; (800cfc8 <_sbrk+0x68>)
 800cf80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800cf82:	4b10      	ldr	r3, [pc, #64]	; (800cfc4 <_sbrk+0x64>)
 800cf84:	681a      	ldr	r2, [r3, #0]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	4413      	add	r3, r2
 800cf8a:	693a      	ldr	r2, [r7, #16]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d207      	bcs.n	800cfa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800cf90:	f00c fe14 	bl	8019bbc <__errno>
 800cf94:	4603      	mov	r3, r0
 800cf96:	220c      	movs	r2, #12
 800cf98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800cf9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf9e:	e009      	b.n	800cfb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800cfa0:	4b08      	ldr	r3, [pc, #32]	; (800cfc4 <_sbrk+0x64>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800cfa6:	4b07      	ldr	r3, [pc, #28]	; (800cfc4 <_sbrk+0x64>)
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	4413      	add	r3, r2
 800cfae:	4a05      	ldr	r2, [pc, #20]	; (800cfc4 <_sbrk+0x64>)
 800cfb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3718      	adds	r7, #24
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}
 800cfbc:	20020000 	.word	0x20020000
 800cfc0:	00000400 	.word	0x00000400
 800cfc4:	200002e8 	.word	0x200002e8
 800cfc8:	2000a6e8 	.word	0x2000a6e8

0800cfcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800cfd0:	4b08      	ldr	r3, [pc, #32]	; (800cff4 <SystemInit+0x28>)
 800cfd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfd6:	4a07      	ldr	r2, [pc, #28]	; (800cff4 <SystemInit+0x28>)
 800cfd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cfdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800cfe0:	4b04      	ldr	r3, [pc, #16]	; (800cff4 <SystemInit+0x28>)
 800cfe2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cfe6:	609a      	str	r2, [r3, #8]
#endif
}
 800cfe8:	bf00      	nop
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr
 800cff2:	bf00      	nop
 800cff4:	e000ed00 	.word	0xe000ed00

0800cff8 <bldc_interface_init>:
static void(*rx_mcconf_received_func)(void) = 0;
static void(*rx_appconf_received_func)(void) = 0;
static void(*motor_control_set_func)(uint32_t controller_id, motor_control_mode mode, float value) = 0;
static void(*values_requested_func)(uint32_t controller_id) = 0;

void bldc_interface_init(void(*func)(uint32_t controller_id, unsigned char *data, unsigned int len)) {
 800cff8:	b480      	push	{r7}
 800cffa:	b083      	sub	sp, #12
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
	send_func = func;
 800d000:	4a04      	ldr	r2, [pc, #16]	; (800d014 <bldc_interface_init+0x1c>)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6013      	str	r3, [r2, #0]
}
 800d006:	bf00      	nop
 800d008:	370c      	adds	r7, #12
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr
 800d012:	bf00      	nop
 800d014:	200002ec 	.word	0x200002ec

0800d018 <buffer_append_int32>:
void buffer_append_uint16(uint8_t* buffer, uint16_t number, int32_t *index) {
	buffer[(*index)++] = number >> 8;
	buffer[(*index)++] = number;
}

void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t *index) {
 800d018:	b480      	push	{r7}
 800d01a:	b085      	sub	sp, #20
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	60f8      	str	r0, [r7, #12]
 800d020:	60b9      	str	r1, [r7, #8]
 800d022:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	1618      	asrs	r0, r3, #24
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	1c59      	adds	r1, r3, #1
 800d02e:	687a      	ldr	r2, [r7, #4]
 800d030:	6011      	str	r1, [r2, #0]
 800d032:	461a      	mov	r2, r3
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	4413      	add	r3, r2
 800d038:	b2c2      	uxtb	r2, r0
 800d03a:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	1418      	asrs	r0, r3, #16
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	1c59      	adds	r1, r3, #1
 800d046:	687a      	ldr	r2, [r7, #4]
 800d048:	6011      	str	r1, [r2, #0]
 800d04a:	461a      	mov	r2, r3
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	4413      	add	r3, r2
 800d050:	b2c2      	uxtb	r2, r0
 800d052:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	1218      	asrs	r0, r3, #8
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	1c59      	adds	r1, r3, #1
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	6011      	str	r1, [r2, #0]
 800d062:	461a      	mov	r2, r3
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	4413      	add	r3, r2
 800d068:	b2c2      	uxtb	r2, r0
 800d06a:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	1c59      	adds	r1, r3, #1
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	6011      	str	r1, [r2, #0]
 800d076:	461a      	mov	r2, r3
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	4413      	add	r3, r2
 800d07c:	68ba      	ldr	r2, [r7, #8]
 800d07e:	b2d2      	uxtb	r2, r2
 800d080:	701a      	strb	r2, [r3, #0]
}
 800d082:	bf00      	nop
 800d084:	3714      	adds	r7, #20
 800d086:	46bd      	mov	sp, r7
 800d088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08c:	4770      	bx	lr

0800d08e <buffer_get_int16>:
	}

	buffer_append_uint32(buffer, res, index);
}

int16_t buffer_get_int16(const uint8_t *buffer, int32_t *index) {
 800d08e:	b480      	push	{r7}
 800d090:	b085      	sub	sp, #20
 800d092:	af00      	add	r7, sp, #0
 800d094:	6078      	str	r0, [r7, #4]
 800d096:	6039      	str	r1, [r7, #0]
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	461a      	mov	r2, r3
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	4413      	add	r3, r2
 800d0a2:	781b      	ldrb	r3, [r3, #0]
 800d0a4:	021b      	lsls	r3, r3, #8
 800d0a6:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	6879      	ldr	r1, [r7, #4]
 800d0b0:	440b      	add	r3, r1
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	b21b      	sxth	r3, r3
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800d0b6:	4313      	orrs	r3, r2
 800d0b8:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	1c9a      	adds	r2, r3, #2
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	601a      	str	r2, [r3, #0]
	return res;
 800d0c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3714      	adds	r7, #20
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr

0800d0d4 <buffer_get_int32>:
					((uint16_t) buffer[*index + 1]);
	*index += 2;
	return res;
}

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 800d0d4:	b480      	push	{r7}
 800d0d6:	b085      	sub	sp, #20
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
 800d0dc:	6039      	str	r1, [r7, #0]
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	4413      	add	r3, r2
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	6879      	ldr	r1, [r7, #4]
 800d0f4:	440b      	add	r3, r1
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	041b      	lsls	r3, r3, #16
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800d0fa:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	3302      	adds	r3, #2
 800d102:	6879      	ldr	r1, [r7, #4]
 800d104:	440b      	add	r3, r1
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 800d10a:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 800d10c:	683a      	ldr	r2, [r7, #0]
 800d10e:	6812      	ldr	r2, [r2, #0]
 800d110:	3203      	adds	r2, #3
 800d112:	6879      	ldr	r1, [r7, #4]
 800d114:	440a      	add	r2, r1
 800d116:	7812      	ldrb	r2, [r2, #0]
					((uint32_t) buffer[*index + 2]) << 8 |
 800d118:	4313      	orrs	r3, r2
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800d11a:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	1d1a      	adds	r2, r3, #4
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	601a      	str	r2, [r3, #0]
	return res;
 800d126:	68fb      	ldr	r3, [r7, #12]
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3714      	adds	r7, #20
 800d12c:	46bd      	mov	sp, r7
 800d12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d132:	4770      	bx	lr

0800d134 <buffer_get_float16>:
					((uint64_t) buffer[*index + 7]);
	*index += 8;
	return res;
}

float buffer_get_float16(const uint8_t *buffer, float scale, int32_t *index) {
 800d134:	b580      	push	{r7, lr}
 800d136:	b084      	sub	sp, #16
 800d138:	af00      	add	r7, sp, #0
 800d13a:	60f8      	str	r0, [r7, #12]
 800d13c:	ed87 0a02 	vstr	s0, [r7, #8]
 800d140:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int16(buffer, index) / scale;
 800d142:	6879      	ldr	r1, [r7, #4]
 800d144:	68f8      	ldr	r0, [r7, #12]
 800d146:	f7ff ffa2 	bl	800d08e <buffer_get_int16>
 800d14a:	4603      	mov	r3, r0
 800d14c:	ee07 3a90 	vmov	s15, r3
 800d150:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d154:	edd7 7a02 	vldr	s15, [r7, #8]
 800d158:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d15c:	eef0 7a66 	vmov.f32	s15, s13
}
 800d160:	eeb0 0a67 	vmov.f32	s0, s15
 800d164:	3710      	adds	r7, #16
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}

0800d16a <buffer_get_float32>:

float buffer_get_float32(const uint8_t *buffer, float scale, int32_t *index) {
 800d16a:	b580      	push	{r7, lr}
 800d16c:	b084      	sub	sp, #16
 800d16e:	af00      	add	r7, sp, #0
 800d170:	60f8      	str	r0, [r7, #12]
 800d172:	ed87 0a02 	vstr	s0, [r7, #8]
 800d176:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int32(buffer, index) / scale;
 800d178:	6879      	ldr	r1, [r7, #4]
 800d17a:	68f8      	ldr	r0, [r7, #12]
 800d17c:	f7ff ffaa 	bl	800d0d4 <buffer_get_int32>
 800d180:	ee07 0a90 	vmov	s15, r0
 800d184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d188:	edd7 7a02 	vldr	s15, [r7, #8]
 800d18c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d190:	eef0 7a66 	vmov.f32	s15, s13
}
 800d194:	eeb0 0a67 	vmov.f32	s0, s15
 800d198:	3710      	adds	r7, #16
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
	...

0800d1a0 <crc16>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
 800d1a0:	b480      	push	{r7}
 800d1a2:	b085      	sub	sp, #20
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	6039      	str	r1, [r7, #0]
	unsigned int i;
	unsigned short cksum = 0;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	60fb      	str	r3, [r7, #12]
 800d1b2:	e016      	b.n	800d1e2 <crc16+0x42>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 800d1b4:	897b      	ldrh	r3, [r7, #10]
 800d1b6:	0a1b      	lsrs	r3, r3, #8
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	1c5a      	adds	r2, r3, #1
 800d1c0:	607a      	str	r2, [r7, #4]
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	404b      	eors	r3, r1
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	4a0b      	ldr	r2, [pc, #44]	; (800d1f8 <crc16+0x58>)
 800d1ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1ce:	b21a      	sxth	r2, r3
 800d1d0:	897b      	ldrh	r3, [r7, #10]
 800d1d2:	021b      	lsls	r3, r3, #8
 800d1d4:	b21b      	sxth	r3, r3
 800d1d6:	4053      	eors	r3, r2
 800d1d8:	b21b      	sxth	r3, r3
 800d1da:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	3301      	adds	r3, #1
 800d1e0:	60fb      	str	r3, [r7, #12]
 800d1e2:	68fa      	ldr	r2, [r7, #12]
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d3e4      	bcc.n	800d1b4 <crc16+0x14>
	}
	return cksum;
 800d1ea:	897b      	ldrh	r3, [r7, #10]
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3714      	adds	r7, #20
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f6:	4770      	bx	lr
 800d1f8:	080200b8 	.word	0x080200b8

0800d1fc <comm_can_send_buffer>:
 * 0: Packet goes to commands_process_packet of receiver
 * 1: Packet goes to commands_send_packet of receiver --> can use to send to other board?
 * 2: Packet goes to commands_process and send function is set to null
 *    so that no reply is sent back.
 */
void comm_can_send_buffer(uint8_t controller_id, uint8_t *data, unsigned int len, uint8_t send) {
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b08e      	sub	sp, #56	; 0x38
 800d200:	af00      	add	r7, sp, #0
 800d202:	60b9      	str	r1, [r7, #8]
 800d204:	607a      	str	r2, [r7, #4]
 800d206:	461a      	mov	r2, r3
 800d208:	4603      	mov	r3, r0
 800d20a:	73fb      	strb	r3, [r7, #15]
 800d20c:	4613      	mov	r3, r2
 800d20e:	73bb      	strb	r3, [r7, #14]
	uint8_t send_buffer[8];

	if (len <= 6) {
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2b06      	cmp	r3, #6
 800d214:	d82b      	bhi.n	800d26e <comm_can_send_buffer+0x72>
		uint32_t ind = 0;
 800d216:	2300      	movs	r3, #0
 800d218:	61bb      	str	r3, [r7, #24]
		send_buffer[ind++] = (uint8_t)RNS_TO_VESC;
 800d21a:	69bb      	ldr	r3, [r7, #24]
 800d21c:	1c5a      	adds	r2, r3, #1
 800d21e:	61ba      	str	r2, [r7, #24]
 800d220:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d224:	4413      	add	r3, r2
 800d226:	221e      	movs	r2, #30
 800d228:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = send;
 800d22c:	69bb      	ldr	r3, [r7, #24]
 800d22e:	1c5a      	adds	r2, r3, #1
 800d230:	61ba      	str	r2, [r7, #24]
 800d232:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d236:	4413      	add	r3, r2
 800d238:	7bba      	ldrb	r2, [r7, #14]
 800d23a:	f803 2c28 	strb.w	r2, [r3, #-40]
		memcpy(send_buffer + ind, data, len);
 800d23e:	f107 0210 	add.w	r2, r7, #16
 800d242:	69bb      	ldr	r3, [r7, #24]
 800d244:	4413      	add	r3, r2
 800d246:	687a      	ldr	r2, [r7, #4]
 800d248:	68b9      	ldr	r1, [r7, #8]
 800d24a:	4618      	mov	r0, r3
 800d24c:	f00c fce8 	bl	8019c20 <memcpy>
		ind += len;
 800d250:	69ba      	ldr	r2, [r7, #24]
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	4413      	add	r3, r2
 800d256:	61bb      	str	r3, [r7, #24]
#if defined USED_CAN1
			CAN_TxMsgEID(&hcan1, controller_id |
					((uint32_t)CAN_PACKET_PROCESS_SHORT_BUFFER << 8), send_buffer, ind);
#elif defined USED_CAN2
			CAN_TxMsgEID(&hcan2, controller_id |
 800d258:	7bfb      	ldrb	r3, [r7, #15]
 800d25a:	f443 6100 	orr.w	r1, r3, #2048	; 0x800
 800d25e:	69bb      	ldr	r3, [r7, #24]
 800d260:	b2db      	uxtb	r3, r3
 800d262:	f107 0210 	add.w	r2, r7, #16
 800d266:	4872      	ldr	r0, [pc, #456]	; (800d430 <comm_can_send_buffer+0x234>)
 800d268:	f7f6 fade 	bl	8003828 <CAN_TxMsgEID>
#elif defined USED_CAN2
			CAN_TxMsgEID(&hcan2, controller_id |
								((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
#endif
	}
}
 800d26c:	e0dc      	b.n	800d428 <comm_can_send_buffer+0x22c>
		unsigned int end_a = 0;
 800d26e:	2300      	movs	r3, #0
 800d270:	637b      	str	r3, [r7, #52]	; 0x34
		for (unsigned int i = 0;i < len;i += 7) {
 800d272:	2300      	movs	r3, #0
 800d274:	633b      	str	r3, [r7, #48]	; 0x30
 800d276:	e03d      	b.n	800d2f4 <comm_can_send_buffer+0xf8>
			if (i > 255) {
 800d278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d27a:	2bff      	cmp	r3, #255	; 0xff
 800d27c:	d83f      	bhi.n	800d2fe <comm_can_send_buffer+0x102>
			end_a = i + 7;
 800d27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d280:	3307      	adds	r3, #7
 800d282:	637b      	str	r3, [r7, #52]	; 0x34
			uint8_t send_len = 7;
 800d284:	2307      	movs	r3, #7
 800d286:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			send_buffer[0] = i;
 800d28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d28c:	b2db      	uxtb	r3, r3
 800d28e:	743b      	strb	r3, [r7, #16]
			if ((i + 7) <= len) {
 800d290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d292:	3307      	adds	r3, #7
 800d294:	687a      	ldr	r2, [r7, #4]
 800d296:	429a      	cmp	r2, r3
 800d298:	d30b      	bcc.n	800d2b2 <comm_can_send_buffer+0xb6>
				memcpy(send_buffer + 1, data + i, send_len);
 800d29a:	f107 0310 	add.w	r3, r7, #16
 800d29e:	3301      	adds	r3, #1
 800d2a0:	68b9      	ldr	r1, [r7, #8]
 800d2a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2a4:	4411      	add	r1, r2
 800d2a6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f00c fcb8 	bl	8019c20 <memcpy>
 800d2b0:	e011      	b.n	800d2d6 <comm_can_send_buffer+0xda>
				send_len = len - i;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	b2da      	uxtb	r2, r3
 800d2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b8:	b2db      	uxtb	r3, r3
 800d2ba:	1ad3      	subs	r3, r2, r3
 800d2bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				memcpy(send_buffer + 1, data + i, send_len);
 800d2c0:	f107 0310 	add.w	r3, r7, #16
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	68b9      	ldr	r1, [r7, #8]
 800d2c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2ca:	4411      	add	r1, r2
 800d2cc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f00c fca5 	bl	8019c20 <memcpy>
			CAN_TxMsgEID(&hcan2, controller_id |
 800d2d6:	7bfb      	ldrb	r3, [r7, #15]
 800d2d8:	f443 61a0 	orr.w	r1, r3, #1280	; 0x500
 800d2dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d2e0:	3301      	adds	r3, #1
 800d2e2:	b2db      	uxtb	r3, r3
 800d2e4:	f107 0210 	add.w	r2, r7, #16
 800d2e8:	4851      	ldr	r0, [pc, #324]	; (800d430 <comm_can_send_buffer+0x234>)
 800d2ea:	f7f6 fa9d 	bl	8003828 <CAN_TxMsgEID>
		for (unsigned int i = 0;i < len;i += 7) {
 800d2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f0:	3307      	adds	r3, #7
 800d2f2:	633b      	str	r3, [r7, #48]	; 0x30
 800d2f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d3bd      	bcc.n	800d278 <comm_can_send_buffer+0x7c>
 800d2fc:	e000      	b.n	800d300 <comm_can_send_buffer+0x104>
				break;
 800d2fe:	bf00      	nop
		for (unsigned int i = end_a;i < len;i += 6) {
 800d300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d302:	62bb      	str	r3, [r7, #40]	; 0x28
 800d304:	e03b      	b.n	800d37e <comm_can_send_buffer+0x182>
			uint8_t send_len = 6;
 800d306:	2306      	movs	r3, #6
 800d308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			send_buffer[0] = i >> 8;
 800d30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30e:	0a1b      	lsrs	r3, r3, #8
 800d310:	b2db      	uxtb	r3, r3
 800d312:	743b      	strb	r3, [r7, #16]
			send_buffer[1] = i & 0xFF;
 800d314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d316:	b2db      	uxtb	r3, r3
 800d318:	747b      	strb	r3, [r7, #17]
			if ((i + 6) <= len) {
 800d31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31c:	3306      	adds	r3, #6
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	429a      	cmp	r2, r3
 800d322:	d30b      	bcc.n	800d33c <comm_can_send_buffer+0x140>
				memcpy(send_buffer + 2, data + i, send_len);
 800d324:	f107 0310 	add.w	r3, r7, #16
 800d328:	3302      	adds	r3, #2
 800d32a:	68b9      	ldr	r1, [r7, #8]
 800d32c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d32e:	4411      	add	r1, r2
 800d330:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d334:	4618      	mov	r0, r3
 800d336:	f00c fc73 	bl	8019c20 <memcpy>
 800d33a:	e011      	b.n	800d360 <comm_can_send_buffer+0x164>
				send_len = len - i;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	b2da      	uxtb	r2, r3
 800d340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d342:	b2db      	uxtb	r3, r3
 800d344:	1ad3      	subs	r3, r2, r3
 800d346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				memcpy(send_buffer + 2, data + i, send_len);
 800d34a:	f107 0310 	add.w	r3, r7, #16
 800d34e:	3302      	adds	r3, #2
 800d350:	68b9      	ldr	r1, [r7, #8]
 800d352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d354:	4411      	add	r1, r2
 800d356:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d35a:	4618      	mov	r0, r3
 800d35c:	f00c fc60 	bl	8019c20 <memcpy>
			CAN_TxMsgEID(&hcan2, controller_id |
 800d360:	7bfb      	ldrb	r3, [r7, #15]
 800d362:	f443 61c0 	orr.w	r1, r3, #1536	; 0x600
 800d366:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d36a:	3302      	adds	r3, #2
 800d36c:	b2db      	uxtb	r3, r3
 800d36e:	f107 0210 	add.w	r2, r7, #16
 800d372:	482f      	ldr	r0, [pc, #188]	; (800d430 <comm_can_send_buffer+0x234>)
 800d374:	f7f6 fa58 	bl	8003828 <CAN_TxMsgEID>
		for (unsigned int i = end_a;i < len;i += 6) {
 800d378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d37a:	3306      	adds	r3, #6
 800d37c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d37e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	429a      	cmp	r2, r3
 800d384:	d3bf      	bcc.n	800d306 <comm_can_send_buffer+0x10a>
		uint32_t ind = 0;
 800d386:	2300      	movs	r3, #0
 800d388:	623b      	str	r3, [r7, #32]
		send_buffer[ind++] = (uint8_t)RNS_TO_VESC;
 800d38a:	6a3b      	ldr	r3, [r7, #32]
 800d38c:	1c5a      	adds	r2, r3, #1
 800d38e:	623a      	str	r2, [r7, #32]
 800d390:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d394:	4413      	add	r3, r2
 800d396:	221e      	movs	r2, #30
 800d398:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = send;
 800d39c:	6a3b      	ldr	r3, [r7, #32]
 800d39e:	1c5a      	adds	r2, r3, #1
 800d3a0:	623a      	str	r2, [r7, #32]
 800d3a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d3a6:	4413      	add	r3, r2
 800d3a8:	7bba      	ldrb	r2, [r7, #14]
 800d3aa:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = len >> 8;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	0a19      	lsrs	r1, r3, #8
 800d3b2:	6a3b      	ldr	r3, [r7, #32]
 800d3b4:	1c5a      	adds	r2, r3, #1
 800d3b6:	623a      	str	r2, [r7, #32]
 800d3b8:	b2ca      	uxtb	r2, r1
 800d3ba:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d3be:	440b      	add	r3, r1
 800d3c0:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = len & 0xFF;
 800d3c4:	6a3b      	ldr	r3, [r7, #32]
 800d3c6:	1c5a      	adds	r2, r3, #1
 800d3c8:	623a      	str	r2, [r7, #32]
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	b2d2      	uxtb	r2, r2
 800d3ce:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d3d2:	440b      	add	r3, r1
 800d3d4:	f803 2c28 	strb.w	r2, [r3, #-40]
		unsigned short crc = crc16(data, len);
 800d3d8:	6879      	ldr	r1, [r7, #4]
 800d3da:	68b8      	ldr	r0, [r7, #8]
 800d3dc:	f7ff fee0 	bl	800d1a0 <crc16>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	83fb      	strh	r3, [r7, #30]
		send_buffer[ind++] = (uint8_t)(crc >> 8);
 800d3e4:	8bfb      	ldrh	r3, [r7, #30]
 800d3e6:	0a1b      	lsrs	r3, r3, #8
 800d3e8:	b299      	uxth	r1, r3
 800d3ea:	6a3b      	ldr	r3, [r7, #32]
 800d3ec:	1c5a      	adds	r2, r3, #1
 800d3ee:	623a      	str	r2, [r7, #32]
 800d3f0:	b2ca      	uxtb	r2, r1
 800d3f2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d3f6:	440b      	add	r3, r1
 800d3f8:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = (uint8_t)(crc & 0xFF);
 800d3fc:	6a3b      	ldr	r3, [r7, #32]
 800d3fe:	1c5a      	adds	r2, r3, #1
 800d400:	623a      	str	r2, [r7, #32]
 800d402:	8bfa      	ldrh	r2, [r7, #30]
 800d404:	b2d2      	uxtb	r2, r2
 800d406:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d40a:	440b      	add	r3, r1
 800d40c:	f803 2c28 	strb.w	r2, [r3, #-40]
			CAN_TxMsgEID(&hcan2, controller_id |
 800d410:	7bfb      	ldrb	r3, [r7, #15]
 800d412:	f443 61e0 	orr.w	r1, r3, #1792	; 0x700
								((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
 800d416:	6a3b      	ldr	r3, [r7, #32]
 800d418:	1c5a      	adds	r2, r3, #1
 800d41a:	623a      	str	r2, [r7, #32]
			CAN_TxMsgEID(&hcan2, controller_id |
 800d41c:	b2db      	uxtb	r3, r3
 800d41e:	f107 0210 	add.w	r2, r7, #16
 800d422:	4803      	ldr	r0, [pc, #12]	; (800d430 <comm_can_send_buffer+0x234>)
 800d424:	f7f6 fa00 	bl	8003828 <CAN_TxMsgEID>
}
 800d428:	bf00      	nop
 800d42a:	3738      	adds	r7, #56	; 0x38
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	20009000 	.word	0x20009000
 800d434:	00000000 	.word	0x00000000

0800d438 <comm_can_set_duty>:

void comm_can_set_duty(uint8_t controller_id, float duty) {
 800d438:	b580      	push	{r7, lr}
 800d43a:	b084      	sub	sp, #16
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	4603      	mov	r3, r0
 800d440:	ed87 0a00 	vstr	s0, [r7]
 800d444:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800d446:	2300      	movs	r3, #0
 800d448:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)(duty * 100000.0), &send_index);
 800d44a:	6838      	ldr	r0, [r7, #0]
 800d44c:	f7f3 f87c 	bl	8000548 <__aeabi_f2d>
 800d450:	a310      	add	r3, pc, #64	; (adr r3, 800d494 <comm_can_set_duty+0x5c>)
 800d452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d456:	f7f3 f8cf 	bl	80005f8 <__aeabi_dmul>
 800d45a:	4602      	mov	r2, r0
 800d45c:	460b      	mov	r3, r1
 800d45e:	4610      	mov	r0, r2
 800d460:	4619      	mov	r1, r3
 800d462:	f7f3 fb79 	bl	8000b58 <__aeabi_d2iz>
 800d466:	4601      	mov	r1, r0
 800d468:	f107 020c 	add.w	r2, r7, #12
 800d46c:	f107 0308 	add.w	r3, r7, #8
 800d470:	4618      	mov	r0, r3
 800d472:	f7ff fdd1 	bl	800d018 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
			((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
 800d476:	79f9      	ldrb	r1, [r7, #7]
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	b2db      	uxtb	r3, r3
 800d47c:	f107 0208 	add.w	r2, r7, #8
 800d480:	4803      	ldr	r0, [pc, #12]	; (800d490 <comm_can_set_duty+0x58>)
 800d482:	f7f6 f9d1 	bl	8003828 <CAN_TxMsgEID>
				((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
#endif
}
 800d486:	bf00      	nop
 800d488:	3710      	adds	r7, #16
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}
 800d48e:	bf00      	nop
 800d490:	20009000 	.word	0x20009000
 800d494:	00000000 	.word	0x00000000
 800d498:	40f86a00 	.word	0x40f86a00

0800d49c <comm_can_set_current>:

void comm_can_set_current(uint8_t controller_id, float current) {
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b084      	sub	sp, #16
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	ed87 0a00 	vstr	s0, [r7]
 800d4a8:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)(current * 1000.0), &send_index);
 800d4ae:	6838      	ldr	r0, [r7, #0]
 800d4b0:	f7f3 f84a 	bl	8000548 <__aeabi_f2d>
 800d4b4:	f04f 0200 	mov.w	r2, #0
 800d4b8:	4b0f      	ldr	r3, [pc, #60]	; (800d4f8 <comm_can_set_current+0x5c>)
 800d4ba:	f7f3 f89d 	bl	80005f8 <__aeabi_dmul>
 800d4be:	4602      	mov	r2, r0
 800d4c0:	460b      	mov	r3, r1
 800d4c2:	4610      	mov	r0, r2
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	f7f3 fb47 	bl	8000b58 <__aeabi_d2iz>
 800d4ca:	4601      	mov	r1, r0
 800d4cc:	f107 020c 	add.w	r2, r7, #12
 800d4d0:	f107 0308 	add.w	r3, r7, #8
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7ff fd9f 	bl	800d018 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
			((uint32_t)CAN_PACKET_SET_CURRENT << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
 800d4da:	79fb      	ldrb	r3, [r7, #7]
 800d4dc:	f443 7180 	orr.w	r1, r3, #256	; 0x100
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	b2db      	uxtb	r3, r3
 800d4e4:	f107 0208 	add.w	r2, r7, #8
 800d4e8:	4804      	ldr	r0, [pc, #16]	; (800d4fc <comm_can_set_current+0x60>)
 800d4ea:	f7f6 f99d 	bl	8003828 <CAN_TxMsgEID>
				((uint32_t)CAN_PACKET_SET_CURRENT << 8), buffer, send_index);
#endif
}
 800d4ee:	bf00      	nop
 800d4f0:	3710      	adds	r7, #16
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}
 800d4f6:	bf00      	nop
 800d4f8:	408f4000 	.word	0x408f4000
 800d4fc:	20009000 	.word	0x20009000

0800d500 <comm_can_set_rpm>:
				((uint32_t)CAN_PACKET_SET_CURRENT_BRAKE << 8), buffer, send_index);
#endif

}

void comm_can_set_rpm(uint8_t controller_id, float rpm) {
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
 800d506:	4603      	mov	r3, r0
 800d508:	ed87 0a00 	vstr	s0, [r7]
 800d50c:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800d50e:	2300      	movs	r3, #0
 800d510:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)rpm, &send_index);
 800d512:	edd7 7a00 	vldr	s15, [r7]
 800d516:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d51a:	f107 020c 	add.w	r2, r7, #12
 800d51e:	f107 0308 	add.w	r3, r7, #8
 800d522:	ee17 1a90 	vmov	r1, s15
 800d526:	4618      	mov	r0, r3
 800d528:	f7ff fd76 	bl	800d018 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
			((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
 800d52c:	79fb      	ldrb	r3, [r7, #7]
 800d52e:	f443 7140 	orr.w	r1, r3, #768	; 0x300
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	b2db      	uxtb	r3, r3
 800d536:	f107 0208 	add.w	r2, r7, #8
 800d53a:	4803      	ldr	r0, [pc, #12]	; (800d548 <comm_can_set_rpm+0x48>)
 800d53c:	f7f6 f974 	bl	8003828 <CAN_TxMsgEID>
				((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
#endif
}
 800d540:	bf00      	nop
 800d542:	3710      	adds	r7, #16
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}
 800d548:	20009000 	.word	0x20009000

0800d54c <decode_VESC>:
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_CURRENT_HANDBRAKE_REL<< 8), buffer, send_index);
#endif
}

void decode_VESC(void){
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
	int32_t ind = 0;
 800d552:	2300      	movs	r3, #0
 800d554:	603b      	str	r3, [r7, #0]
//
//	Vescmsg *rxmsg_tmp;
//	while ((rxmsg_tmp = get_rx_frame()) != 0) {
//		Vescmsg rxmsg = *rxmsg_tmp;

		if (vescmsg.Rxmsg.IDE == CAN_ID_EXT) {
 800d556:	4b30      	ldr	r3, [pc, #192]	; (800d618 <decode_VESC+0xcc>)
 800d558:	689b      	ldr	r3, [r3, #8]
 800d55a:	2b04      	cmp	r3, #4
 800d55c:	d158      	bne.n	800d610 <decode_VESC+0xc4>
			uint8_t id = vescmsg.Rxmsg.ExtId & 0xFF;
 800d55e:	4b2e      	ldr	r3, [pc, #184]	; (800d618 <decode_VESC+0xcc>)
 800d560:	685b      	ldr	r3, [r3, #4]
 800d562:	71fb      	strb	r3, [r7, #7]
			CAN_PACKET_ID cmd = vescmsg.Rxmsg.ExtId >> 8;
 800d564:	4b2c      	ldr	r3, [pc, #176]	; (800d618 <decode_VESC+0xcc>)
 800d566:	685b      	ldr	r3, [r3, #4]
 800d568:	0a1b      	lsrs	r3, r3, #8
 800d56a:	71bb      	strb	r3, [r7, #6]
//
//				default:
//					break;
//				}
//			}
			if(cmd == CAN_PACKET_STATUS)
 800d56c:	79bb      	ldrb	r3, [r7, #6]
 800d56e:	2b09      	cmp	r3, #9
 800d570:	d14e      	bne.n	800d610 <decode_VESC+0xc4>
			{
				if(id == 111)
 800d572:	79fb      	ldrb	r3, [r7, #7]
 800d574:	2b6f      	cmp	r3, #111	; 0x6f
 800d576:	d124      	bne.n	800d5c2 <decode_VESC+0x76>
				{
					vesc1.Info.rpm = buffer_get_float32((uint8_t*)&vescmsg.Data, 1.0, &ind);
 800d578:	463b      	mov	r3, r7
 800d57a:	4619      	mov	r1, r3
 800d57c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d580:	4826      	ldr	r0, [pc, #152]	; (800d61c <decode_VESC+0xd0>)
 800d582:	f7ff fdf2 	bl	800d16a <buffer_get_float32>
 800d586:	eef0 7a40 	vmov.f32	s15, s0
 800d58a:	4b25      	ldr	r3, [pc, #148]	; (800d620 <decode_VESC+0xd4>)
 800d58c:	edc3 7a04 	vstr	s15, [r3, #16]
					vesc1.Info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d590:	463b      	mov	r3, r7
 800d592:	4619      	mov	r1, r3
 800d594:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d598:	4820      	ldr	r0, [pc, #128]	; (800d61c <decode_VESC+0xd0>)
 800d59a:	f7ff fdcb 	bl	800d134 <buffer_get_float16>
 800d59e:	eef0 7a40 	vmov.f32	s15, s0
 800d5a2:	4b1f      	ldr	r3, [pc, #124]	; (800d620 <decode_VESC+0xd4>)
 800d5a4:	edc3 7a06 	vstr	s15, [r3, #24]
					vesc1.Info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d5a8:	463b      	mov	r3, r7
 800d5aa:	4619      	mov	r1, r3
 800d5ac:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d5b0:	481a      	ldr	r0, [pc, #104]	; (800d61c <decode_VESC+0xd0>)
 800d5b2:	f7ff fdbf 	bl	800d134 <buffer_get_float16>
 800d5b6:	eef0 7a40 	vmov.f32	s15, s0
 800d5ba:	4b19      	ldr	r3, [pc, #100]	; (800d620 <decode_VESC+0xd4>)
 800d5bc:	edc3 7a05 	vstr	s15, [r3, #20]
					vesc2.Info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
					vesc2.Info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
				}
			}
		}
	}
 800d5c0:	e026      	b.n	800d610 <decode_VESC+0xc4>
				else if(id == 112)
 800d5c2:	79fb      	ldrb	r3, [r7, #7]
 800d5c4:	2b70      	cmp	r3, #112	; 0x70
 800d5c6:	d123      	bne.n	800d610 <decode_VESC+0xc4>
					vesc2.Info.rpm = buffer_get_float32((uint8_t*)&vescmsg.Data, 1.0, &ind);
 800d5c8:	463b      	mov	r3, r7
 800d5ca:	4619      	mov	r1, r3
 800d5cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d5d0:	4812      	ldr	r0, [pc, #72]	; (800d61c <decode_VESC+0xd0>)
 800d5d2:	f7ff fdca 	bl	800d16a <buffer_get_float32>
 800d5d6:	eef0 7a40 	vmov.f32	s15, s0
 800d5da:	4b12      	ldr	r3, [pc, #72]	; (800d624 <decode_VESC+0xd8>)
 800d5dc:	edc3 7a04 	vstr	s15, [r3, #16]
					vesc2.Info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d5e0:	463b      	mov	r3, r7
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d5e8:	480c      	ldr	r0, [pc, #48]	; (800d61c <decode_VESC+0xd0>)
 800d5ea:	f7ff fda3 	bl	800d134 <buffer_get_float16>
 800d5ee:	eef0 7a40 	vmov.f32	s15, s0
 800d5f2:	4b0c      	ldr	r3, [pc, #48]	; (800d624 <decode_VESC+0xd8>)
 800d5f4:	edc3 7a06 	vstr	s15, [r3, #24]
					vesc2.Info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d5f8:	463b      	mov	r3, r7
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d600:	4806      	ldr	r0, [pc, #24]	; (800d61c <decode_VESC+0xd0>)
 800d602:	f7ff fd97 	bl	800d134 <buffer_get_float16>
 800d606:	eef0 7a40 	vmov.f32	s15, s0
 800d60a:	4b06      	ldr	r3, [pc, #24]	; (800d624 <decode_VESC+0xd8>)
 800d60c:	edc3 7a05 	vstr	s15, [r3, #20]
	}
 800d610:	bf00      	nop
 800d612:	3708      	adds	r7, #8
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}
 800d618:	200096c4 	.word	0x200096c4
 800d61c:	200096e0 	.word	0x200096e0
 800d620:	20006b04 	.word	0x20006b04
 800d624:	2000997c 	.word	0x2000997c

0800d628 <set_rx_frames>:
		return res;
	} else
		return 0;
}

uint8_t set_rx_frames(Vescmsg* CANRxFrame) {
 800d628:	b4b0      	push	{r4, r5, r7}
 800d62a:	b085      	sub	sp, #20
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
	uint32_t cmd;

	rx_frames[rx_frame_write++] = *CANRxFrame;
 800d630:	4b16      	ldr	r3, [pc, #88]	; (800d68c <set_rx_frames+0x64>)
 800d632:	681a      	ldr	r2, [r3, #0]
 800d634:	1c53      	adds	r3, r2, #1
 800d636:	4915      	ldr	r1, [pc, #84]	; (800d68c <set_rx_frames+0x64>)
 800d638:	600b      	str	r3, [r1, #0]
 800d63a:	4915      	ldr	r1, [pc, #84]	; (800d690 <set_rx_frames+0x68>)
 800d63c:	4613      	mov	r3, r2
 800d63e:	00db      	lsls	r3, r3, #3
 800d640:	4413      	add	r3, r2
 800d642:	009b      	lsls	r3, r3, #2
 800d644:	18ca      	adds	r2, r1, r3
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	4614      	mov	r4, r2
 800d64a:	461d      	mov	r5, r3
 800d64c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d64e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d654:	682b      	ldr	r3, [r5, #0]
 800d656:	6023      	str	r3, [r4, #0]
	if (rx_frame_write == RX_FRAMES_SIZE) {
 800d658:	4b0c      	ldr	r3, [pc, #48]	; (800d68c <set_rx_frames+0x64>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	2b64      	cmp	r3, #100	; 0x64
 800d65e:	d102      	bne.n	800d666 <set_rx_frames+0x3e>
		rx_frame_write = 0;
 800d660:	4b0a      	ldr	r3, [pc, #40]	; (800d68c <set_rx_frames+0x64>)
 800d662:	2200      	movs	r2, #0
 800d664:	601a      	str	r2, [r3, #0]
	}

	cmd = CANRxFrame->Rxmsg.ExtId >> 8;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	685b      	ldr	r3, [r3, #4]
 800d66a:	0a1b      	lsrs	r3, r3, #8
 800d66c:	60fb      	str	r3, [r7, #12]
	if(cmd == (uint32_t)CAN_PACKET_PROCESS_RX_BUFFER || cmd == (uint32_t)CAN_PACKET_PROCESS_SHORT_BUFFER)
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	2b07      	cmp	r3, #7
 800d672:	d002      	beq.n	800d67a <set_rx_frames+0x52>
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	2b08      	cmp	r3, #8
 800d678:	d101      	bne.n	800d67e <set_rx_frames+0x56>
		return 112;
 800d67a:	2370      	movs	r3, #112	; 0x70
 800d67c:	e000      	b.n	800d680 <set_rx_frames+0x58>
	else
		return 0;
 800d67e:	2300      	movs	r3, #0
}
 800d680:	4618      	mov	r0, r3
 800d682:	3714      	adds	r7, #20
 800d684:	46bd      	mov	sp, r7
 800d686:	bcb0      	pop	{r4, r5, r7}
 800d688:	4770      	bx	lr
 800d68a:	bf00      	nop
 800d68c:	20001100 	.word	0x20001100
 800d690:	200002f0 	.word	0x200002f0

0800d694 <VESCInit>:
 * 						  wheel_diameter 	wheel diameter
 * 						  vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCInit(40000,1,0.0037,&csev);
 */
void VESCInit(float max_rpm, float pole_pairs, float wheel_diameter,uint16_t Instance, VESC_t* vesc){
 800d694:	b580      	push	{r7, lr}
 800d696:	b086      	sub	sp, #24
 800d698:	af00      	add	r7, sp, #0
 800d69a:	ed87 0a05 	vstr	s0, [r7, #20]
 800d69e:	edc7 0a04 	vstr	s1, [r7, #16]
 800d6a2:	ed87 1a03 	vstr	s2, [r7, #12]
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	6079      	str	r1, [r7, #4]
 800d6aa:	817b      	strh	r3, [r7, #10]
	bldc_interface_init(bldc_send_packet);
 800d6ac:	4809      	ldr	r0, [pc, #36]	; (800d6d4 <VESCInit+0x40>)
 800d6ae:	f7ff fca3 	bl	800cff8 <bldc_interface_init>
//	bldc_interface_set_rx_value_selective_func(bldc_val_selective_received_cb);

	vesc->max_rpm = max_rpm;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	697a      	ldr	r2, [r7, #20]
 800d6b6:	601a      	str	r2, [r3, #0]
	vesc->pole_pairs = pole_pairs;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	693a      	ldr	r2, [r7, #16]
 800d6bc:	605a      	str	r2, [r3, #4]
	vesc->wheel_diameter = wheel_diameter;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	68fa      	ldr	r2, [r7, #12]
 800d6c2:	609a      	str	r2, [r3, #8]
	vesc->Instance = Instance;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	897a      	ldrh	r2, [r7, #10]
 800d6c8:	819a      	strh	r2, [r3, #12]
}
 800d6ca:	bf00      	nop
 800d6cc:	3718      	adds	r7, #24
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}
 800d6d2:	bf00      	nop
 800d6d4:	0800d7b1 	.word	0x0800d7b1

0800d6d8 <VESCPDC>:
 * 						  BRightPDC		duty cycle of back right motor
 * 						  vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCPDC(0.5, 0.5, 0.5, 0.5);
 */
void VESCPDC(float Duty, VESC_t* vesc) {
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b082      	sub	sp, #8
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	ed87 0a01 	vstr	s0, [r7, #4]
 800d6e2:	6038      	str	r0, [r7, #0]

	if(Duty > 0.9){
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f7f2 ff2f 	bl	8000548 <__aeabi_f2d>
 800d6ea:	a310      	add	r3, pc, #64	; (adr r3, 800d72c <VESCPDC+0x54>)
 800d6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f0:	f7f3 fa12 	bl	8000b18 <__aeabi_dcmpgt>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d001      	beq.n	800d6fe <VESCPDC+0x26>
		Duty = 0.9;
 800d6fa:	4b0b      	ldr	r3, [pc, #44]	; (800d728 <VESCPDC+0x50>)
 800d6fc:	607b      	str	r3, [r7, #4]
	}

	comm_can_set_duty(vesc->Instance, Duty);
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	899b      	ldrh	r3, [r3, #12]
 800d702:	b2db      	uxtb	r3, r3
 800d704:	ed97 0a01 	vldr	s0, [r7, #4]
 800d708:	4618      	mov	r0, r3
 800d70a:	f7ff fe95 	bl	800d438 <comm_can_set_duty>

	vesc->pdc_flag = 1;
 800d70e:	683a      	ldr	r2, [r7, #0]
 800d710:	f892 3020 	ldrb.w	r3, [r2, #32]
 800d714:	f043 0304 	orr.w	r3, r3, #4
 800d718:	f882 3020 	strb.w	r3, [r2, #32]
}
 800d71c:	bf00      	nop
 800d71e:	3708      	adds	r7, #8
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}
 800d724:	f3af 8000 	nop.w
 800d728:	3f666666 	.word	0x3f666666
 800d72c:	cccccccd 	.word	0xcccccccd
 800d730:	3feccccc 	.word	0x3feccccc

0800d734 <VESCStop>:
 * Function Remarks		: NONE
 * Function Arguments	: vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCStop(&csev);
 */
void VESCStop(VESC_t* vesc) {
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]

	if(vesc->pdc_flag) {
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d742:	f003 0304 	and.w	r3, r3, #4
 800d746:	b2db      	uxtb	r3, r3
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d007      	beq.n	800d75c <VESCStop+0x28>
		comm_can_set_duty(vesc->Instance, 0.0);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	899b      	ldrh	r3, [r3, #12]
 800d750:	b2db      	uxtb	r3, r3
 800d752:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800d7ac <VESCStop+0x78>
 800d756:	4618      	mov	r0, r3
 800d758:	f7ff fe6e 	bl	800d438 <comm_can_set_duty>
	}

	if(vesc->rpm_flag) {
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d762:	f003 0302 	and.w	r3, r3, #2
 800d766:	b2db      	uxtb	r3, r3
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d007      	beq.n	800d77c <VESCStop+0x48>
		comm_can_set_rpm(vesc->Instance, 0.0);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	899b      	ldrh	r3, [r3, #12]
 800d770:	b2db      	uxtb	r3, r3
 800d772:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800d7ac <VESCStop+0x78>
 800d776:	4618      	mov	r0, r3
 800d778:	f7ff fec2 	bl	800d500 <comm_can_set_rpm>
	}

	if(vesc->current_flag){
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d782:	f003 0301 	and.w	r3, r3, #1
 800d786:	b2db      	uxtb	r3, r3
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d007      	beq.n	800d79c <VESCStop+0x68>
		comm_can_set_current(vesc->Instance, 0.0);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	899b      	ldrh	r3, [r3, #12]
 800d790:	b2db      	uxtb	r3, r3
 800d792:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800d7ac <VESCStop+0x78>
 800d796:	4618      	mov	r0, r3
 800d798:	f7ff fe80 	bl	800d49c <comm_can_set_current>
	}

	vesc->flags = 0;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	f883 2020 	strb.w	r2, [r3, #32]
}
 800d7a4:	bf00      	nop
 800d7a6:	3708      	adds	r7, #8
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}
 800d7ac:	00000000 	.word	0x00000000

0800d7b0 <bldc_send_packet>:
//	rx_value_complete = false;
	return rx_value_buf;
}

/*	Private Function	*/
void bldc_send_packet(uint8_t controller_id, uint8_t *data, unsigned int len) {
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	607a      	str	r2, [r7, #4]
 800d7bc:	73fb      	strb	r3, [r7, #15]
	comm_can_send_buffer(controller_id, data, len, 0);
 800d7be:	7bf8      	ldrb	r0, [r7, #15]
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	687a      	ldr	r2, [r7, #4]
 800d7c4:	68b9      	ldr	r1, [r7, #8]
 800d7c6:	f7ff fd19 	bl	800d1fc <comm_can_send_buffer>
}
 800d7ca:	bf00      	nop
 800d7cc:	3710      	adds	r7, #16
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
	...

0800d7d4 <LidarInit>:
float Lidar_Shoot_Angles[10] = {0, -90.0, -135, -45, 0, 0, 0, 0, 0, 0}; // The angles should be absolute, try not to reset the angle every path plan
float Lidar_Center_Offsets[8] = {-0.19, 0.94, 1.23, 0.96, -1.38, 0.89, -0.21, 0.91};  // Offsets for center positions
float Lidar_Adjust_Lim[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

void LidarInit(UART_HandleTypeDef* lidarUART, MODE_t mode, Lidar_t* lidar)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	60f8      	str	r0, [r7, #12]
 800d7dc:	460b      	mov	r3, r1
 800d7de:	607a      	str	r2, [r7, #4]
 800d7e0:	72fb      	strb	r3, [r7, #11]
	lidar->lidar_UART = lidarUART;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	68fa      	ldr	r2, [r7, #12]
 800d7e6:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	lidar->mode = mode;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	7afa      	ldrb	r2, [r7, #11]
 800d7ee:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
	lidar->start = 0;
 800d7f2:	687a      	ldr	r2, [r7, #4]
 800d7f4:	f892 3294 	ldrb.w	r3, [r2, #660]	; 0x294
 800d7f8:	f36f 0382 	bfc	r3, #2, #1
 800d7fc:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294

	if(lidar->mode == CONTINUOUS)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 800d806:	2b00      	cmp	r3, #0
 800d808:	d110      	bne.n	800d82c <LidarInit+0x58>
	{
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 5);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	33c9      	adds	r3, #201	; 0xc9
 800d814:	2205      	movs	r2, #5
 800d816:	4619      	mov	r1, r3
 800d818:	f008 fcc2 	bl	80161a0 <HAL_UART_Receive_IT>
		lidar->new = 0;
 800d81c:	687a      	ldr	r2, [r7, #4]
 800d81e:	f892 3294 	ldrb.w	r3, [r2, #660]	; 0x294
 800d822:	f36f 0300 	bfc	r3, #0, #1
 800d826:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
		lidar->angle = B;
		lidar->angle_counter = 2;
		lidar->AdjEnb = 0;
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 2);
	}
}
 800d82a:	e099      	b.n	800d960 <LidarInit+0x18c>
		LidarAnglesInit(Lidar_Shoot_Angles[0], Lidar_Shoot_Angles[1], Lidar_Shoot_Angles[2], Lidar_Shoot_Angles[3],
 800d82c:	4b4e      	ldr	r3, [pc, #312]	; (800d968 <LidarInit+0x194>)
 800d82e:	edd3 7a00 	vldr	s15, [r3]
 800d832:	4b4d      	ldr	r3, [pc, #308]	; (800d968 <LidarInit+0x194>)
 800d834:	ed93 7a01 	vldr	s14, [r3, #4]
 800d838:	4b4b      	ldr	r3, [pc, #300]	; (800d968 <LidarInit+0x194>)
 800d83a:	edd3 6a02 	vldr	s13, [r3, #8]
 800d83e:	4b4a      	ldr	r3, [pc, #296]	; (800d968 <LidarInit+0x194>)
 800d840:	ed93 6a03 	vldr	s12, [r3, #12]
 800d844:	4b48      	ldr	r3, [pc, #288]	; (800d968 <LidarInit+0x194>)
 800d846:	edd3 5a04 	vldr	s11, [r3, #16]
 800d84a:	4b47      	ldr	r3, [pc, #284]	; (800d968 <LidarInit+0x194>)
 800d84c:	ed93 5a05 	vldr	s10, [r3, #20]
 800d850:	4b45      	ldr	r3, [pc, #276]	; (800d968 <LidarInit+0x194>)
 800d852:	ed93 3a06 	vldr	s6, [r3, #24]
 800d856:	4b44      	ldr	r3, [pc, #272]	; (800d968 <LidarInit+0x194>)
 800d858:	edd3 3a07 	vldr	s7, [r3, #28]
 800d85c:	4b42      	ldr	r3, [pc, #264]	; (800d968 <LidarInit+0x194>)
 800d85e:	ed93 4a08 	vldr	s8, [r3, #32]
 800d862:	4b41      	ldr	r3, [pc, #260]	; (800d968 <LidarInit+0x194>)
 800d864:	edd3 4a09 	vldr	s9, [r3, #36]	; 0x24
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	eef0 2a45 	vmov.f32	s5, s10
 800d86e:	eeb0 2a65 	vmov.f32	s4, s11
 800d872:	eef0 1a46 	vmov.f32	s3, s12
 800d876:	eeb0 1a66 	vmov.f32	s2, s13
 800d87a:	eef0 0a47 	vmov.f32	s1, s14
 800d87e:	eeb0 0a67 	vmov.f32	s0, s15
 800d882:	f000 f8df 	bl	800da44 <LidarAnglesInit>
		LidarOffsetInit(Lidar_Offsets[0], Lidar_Offsets[1], Lidar_Offsets[2], Lidar_Offsets[3], Lidar_Offsets[4], Lidar_Offsets[5], lidar);
 800d886:	4b39      	ldr	r3, [pc, #228]	; (800d96c <LidarInit+0x198>)
 800d888:	edd3 7a00 	vldr	s15, [r3]
 800d88c:	4b37      	ldr	r3, [pc, #220]	; (800d96c <LidarInit+0x198>)
 800d88e:	ed93 7a01 	vldr	s14, [r3, #4]
 800d892:	4b36      	ldr	r3, [pc, #216]	; (800d96c <LidarInit+0x198>)
 800d894:	edd3 6a02 	vldr	s13, [r3, #8]
 800d898:	4b34      	ldr	r3, [pc, #208]	; (800d96c <LidarInit+0x198>)
 800d89a:	ed93 6a03 	vldr	s12, [r3, #12]
 800d89e:	4b33      	ldr	r3, [pc, #204]	; (800d96c <LidarInit+0x198>)
 800d8a0:	edd3 5a04 	vldr	s11, [r3, #16]
 800d8a4:	4b31      	ldr	r3, [pc, #196]	; (800d96c <LidarInit+0x198>)
 800d8a6:	ed93 5a05 	vldr	s10, [r3, #20]
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	eef0 2a45 	vmov.f32	s5, s10
 800d8b0:	eeb0 2a65 	vmov.f32	s4, s11
 800d8b4:	eef0 1a46 	vmov.f32	s3, s12
 800d8b8:	eeb0 1a66 	vmov.f32	s2, s13
 800d8bc:	eef0 0a47 	vmov.f32	s1, s14
 800d8c0:	eeb0 0a67 	vmov.f32	s0, s15
 800d8c4:	f000 f856 	bl	800d974 <LidarOffsetInit>
		LidarCenterOffsetInit(Lidar_Center_Offsets[0], Lidar_Center_Offsets[1], Lidar_Center_Offsets[2], Lidar_Center_Offsets[3], Lidar_Center_Offsets[4],
 800d8c8:	4b29      	ldr	r3, [pc, #164]	; (800d970 <LidarInit+0x19c>)
 800d8ca:	edd3 7a00 	vldr	s15, [r3]
 800d8ce:	4b28      	ldr	r3, [pc, #160]	; (800d970 <LidarInit+0x19c>)
 800d8d0:	ed93 7a01 	vldr	s14, [r3, #4]
 800d8d4:	4b26      	ldr	r3, [pc, #152]	; (800d970 <LidarInit+0x19c>)
 800d8d6:	edd3 6a02 	vldr	s13, [r3, #8]
 800d8da:	4b25      	ldr	r3, [pc, #148]	; (800d970 <LidarInit+0x19c>)
 800d8dc:	ed93 6a03 	vldr	s12, [r3, #12]
 800d8e0:	4b23      	ldr	r3, [pc, #140]	; (800d970 <LidarInit+0x19c>)
 800d8e2:	edd3 5a04 	vldr	s11, [r3, #16]
 800d8e6:	4b22      	ldr	r3, [pc, #136]	; (800d970 <LidarInit+0x19c>)
 800d8e8:	ed93 5a05 	vldr	s10, [r3, #20]
 800d8ec:	4b20      	ldr	r3, [pc, #128]	; (800d970 <LidarInit+0x19c>)
 800d8ee:	edd3 4a06 	vldr	s9, [r3, #24]
 800d8f2:	4b1f      	ldr	r3, [pc, #124]	; (800d970 <LidarInit+0x19c>)
 800d8f4:	ed93 4a07 	vldr	s8, [r3, #28]
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	eef0 3a44 	vmov.f32	s7, s8
 800d8fe:	eeb0 3a64 	vmov.f32	s6, s9
 800d902:	eef0 2a45 	vmov.f32	s5, s10
 800d906:	eeb0 2a65 	vmov.f32	s4, s11
 800d90a:	eef0 1a46 	vmov.f32	s3, s12
 800d90e:	eeb0 1a66 	vmov.f32	s2, s13
 800d912:	eef0 0a47 	vmov.f32	s1, s14
 800d916:	eeb0 0a67 	vmov.f32	s0, s15
 800d91a:	f000 f859 	bl	800d9d0 <LidarCenterOffsetInit>
		lidar->response = NO;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2201      	movs	r2, #1
 800d922:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
		lidar->pos = PICK_LEFT;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2201      	movs	r2, #1
 800d92a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar->pos_counter = 1;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2201      	movs	r2, #1
 800d932:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		lidar->angle = B;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2202      	movs	r2, #2
 800d93a:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
		lidar->angle_counter = 2;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2202      	movs	r2, #2
 800d942:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
		lidar->AdjEnb = 0;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2200      	movs	r2, #0
 800d94a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 2);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	33c9      	adds	r3, #201	; 0xc9
 800d958:	2202      	movs	r2, #2
 800d95a:	4619      	mov	r1, r3
 800d95c:	f008 fc20 	bl	80161a0 <HAL_UART_Receive_IT>
}
 800d960:	bf00      	nop
 800d962:	3710      	adds	r7, #16
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}
 800d968:	20000070 	.word	0x20000070
 800d96c:	20000058 	.word	0x20000058
 800d970:	20000098 	.word	0x20000098

0800d974 <LidarOffsetInit>:

void LidarOffsetInit(float left_offset_x, float left_offset_y, float right_offset_x, float right_offset_y, float center_offset_x,
		float center_offset_y, Lidar_t* lidar)
{
 800d974:	b480      	push	{r7}
 800d976:	b089      	sub	sp, #36	; 0x24
 800d978:	af00      	add	r7, sp, #0
 800d97a:	ed87 0a07 	vstr	s0, [r7, #28]
 800d97e:	edc7 0a06 	vstr	s1, [r7, #24]
 800d982:	ed87 1a05 	vstr	s2, [r7, #20]
 800d986:	edc7 1a04 	vstr	s3, [r7, #16]
 800d98a:	ed87 2a03 	vstr	s4, [r7, #12]
 800d98e:	edc7 2a02 	vstr	s5, [r7, #8]
 800d992:	6078      	str	r0, [r7, #4]
	lidar->left_offset_x = left_offset_x;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	69fa      	ldr	r2, [r7, #28]
 800d998:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	lidar->left_offset_y = left_offset_y;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	69ba      	ldr	r2, [r7, #24]
 800d9a0:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	lidar->right_offset_x = right_offset_x;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	697a      	ldr	r2, [r7, #20]
 800d9a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	lidar->right_offset_y = right_offset_y;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	693a      	ldr	r2, [r7, #16]
 800d9b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	lidar->center_offset_x = center_offset_x;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	68fa      	ldr	r2, [r7, #12]
 800d9b8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	lidar->center_offset_y = center_offset_y;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	68ba      	ldr	r2, [r7, #8]
 800d9c0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
}
 800d9c4:	bf00      	nop
 800d9c6:	3724      	adds	r7, #36	; 0x24
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr

0800d9d0 <LidarCenterOffsetInit>:

void LidarCenterOffsetInit(float center_1_offset_x, float center_1_offset_y, float center_2_offset_x, float center_2_offset_y,
		float center_3_offset_x, float center_3_offset_y, float center_4_offset_x, float center_4_offset_y, Lidar_t* lidar)
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b08b      	sub	sp, #44	; 0x2c
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800d9da:	edc7 0a08 	vstr	s1, [r7, #32]
 800d9de:	ed87 1a07 	vstr	s2, [r7, #28]
 800d9e2:	edc7 1a06 	vstr	s3, [r7, #24]
 800d9e6:	ed87 2a05 	vstr	s4, [r7, #20]
 800d9ea:	edc7 2a04 	vstr	s5, [r7, #16]
 800d9ee:	ed87 3a03 	vstr	s6, [r7, #12]
 800d9f2:	edc7 3a02 	vstr	s7, [r7, #8]
 800d9f6:	6078      	str	r0, [r7, #4]
	lidar->center_1_offset_x = center_1_offset_x;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9fc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	lidar->center_1_offset_y = center_1_offset_y;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6a3a      	ldr	r2, [r7, #32]
 800da04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	lidar->center_2_offset_x = center_2_offset_x;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	69fa      	ldr	r2, [r7, #28]
 800da0c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	lidar->center_2_offset_y = center_2_offset_y;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	69ba      	ldr	r2, [r7, #24]
 800da14:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	lidar->center_3_offset_x = center_3_offset_x;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	697a      	ldr	r2, [r7, #20]
 800da1c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	lidar->center_3_offset_y = center_3_offset_y;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	693a      	ldr	r2, [r7, #16]
 800da24:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	lidar->center_4_offset_x = center_4_offset_x;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	68fa      	ldr	r2, [r7, #12]
 800da2c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	lidar->center_4_offset_y = center_4_offset_y;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	68ba      	ldr	r2, [r7, #8]
 800da34:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c

}
 800da38:	bf00      	nop
 800da3a:	372c      	adds	r7, #44	; 0x2c
 800da3c:	46bd      	mov	sp, r7
 800da3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da42:	4770      	bx	lr

0800da44 <LidarAnglesInit>:

// Will be shooting based on sequence A-> B -> C -> D
void LidarAnglesInit(float left_angle_A, float left_angle_B, float left_angle_C, float left_angle_D,
					 float right_angle_A, float right_angle_B, float right_angle_C, float right_angle_D,
					 float center_angle_A, float center_angle_B, Lidar_t* lidar)
{
 800da44:	b480      	push	{r7}
 800da46:	b08d      	sub	sp, #52	; 0x34
 800da48:	af00      	add	r7, sp, #0
 800da4a:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 800da4e:	edc7 0a0a 	vstr	s1, [r7, #40]	; 0x28
 800da52:	ed87 1a09 	vstr	s2, [r7, #36]	; 0x24
 800da56:	edc7 1a08 	vstr	s3, [r7, #32]
 800da5a:	ed87 2a07 	vstr	s4, [r7, #28]
 800da5e:	edc7 2a06 	vstr	s5, [r7, #24]
 800da62:	ed87 3a05 	vstr	s6, [r7, #20]
 800da66:	edc7 3a04 	vstr	s7, [r7, #16]
 800da6a:	ed87 4a03 	vstr	s8, [r7, #12]
 800da6e:	edc7 4a02 	vstr	s9, [r7, #8]
 800da72:	6078      	str	r0, [r7, #4]
	lidar->left_angle_A = left_angle_A;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da78:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	lidar->left_angle_B = left_angle_B;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da80:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
	lidar->left_angle_C = left_angle_C;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da88:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	lidar->left_angle_D = left_angle_D;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6a3a      	ldr	r2, [r7, #32]
 800da90:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc

	lidar->right_angle_A = right_angle_A;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	69fa      	ldr	r2, [r7, #28]
 800da98:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	lidar->right_angle_B = right_angle_B;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	69ba      	ldr	r2, [r7, #24]
 800daa0:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	lidar->right_angle_C = right_angle_C;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	697a      	ldr	r2, [r7, #20]
 800daa8:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	lidar->right_angle_D = right_angle_D;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	693a      	ldr	r2, [r7, #16]
 800dab0:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec

	lidar->center_angle_A = center_angle_A;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	68fa      	ldr	r2, [r7, #12]
 800dab8:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	lidar->center_angle_B = center_angle_B;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	68ba      	ldr	r2, [r7, #8]
 800dac0:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
}
 800dac4:	bf00      	nop
 800dac6:	3734      	adds	r7, #52	; 0x34
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr

0800dad0 <LidarSetPos>:

void LidarSetPos(Pos_t pose, Lidar_t* lidar)
{
 800dad0:	b5b0      	push	{r4, r5, r7, lr}
 800dad2:	f5ad 7d78 	sub.w	sp, sp, #992	; 0x3e0
 800dad6:	af00      	add	r7, sp, #0
 800dad8:	4602      	mov	r2, r0
 800dada:	463b      	mov	r3, r7
 800dadc:	6019      	str	r1, [r3, #0]
 800dade:	1dfb      	adds	r3, r7, #7
 800dae0:	701a      	strb	r2, [r3, #0]
	// Pick Left
	float pick_left_adjust[1][7] = {{3.5, 1.8, 0.6, -90.0, 0, 0, 0}};
 800dae2:	4bc4      	ldr	r3, [pc, #784]	; (800ddf4 <LidarSetPos+0x324>)
 800dae4:	f507 7471 	add.w	r4, r7, #964	; 0x3c4
 800dae8:	461d      	mov	r5, r3
 800daea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800daec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800daee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800daf2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float bang_fence[1][7] = {{0.5, 0, 10, -90, 0, 0, 0}};
 800daf6:	4bc0      	ldr	r3, [pc, #768]	; (800ddf8 <LidarSetPos+0x328>)
 800daf8:	f507 746a 	add.w	r4, r7, #936	; 0x3a8
 800dafc:	461d      	mov	r5, r3
 800dafe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800db06:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// Only offset 1 pole
	float pick_left_to_center_1[1][7] = {{0.75, 0, 10, -90, 0, 0, 0}};
 800db0a:	4bbc      	ldr	r3, [pc, #752]	; (800ddfc <LidarSetPos+0x32c>)
 800db0c:	f507 7463 	add.w	r4, r7, #908	; 0x38c
 800db10:	461d      	mov	r5, r3
 800db12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800db1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_1_to_center_2[1][7] = {{PoleSpeed, 1.3, 0.1, pp.real_z, 1, 0, 0}};
 800db1e:	4bb8      	ldr	r3, [pc, #736]	; (800de00 <LidarSetPos+0x330>)
 800db20:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 800db24:	4bb7      	ldr	r3, [pc, #732]	; (800de04 <LidarSetPos+0x334>)
 800db26:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 800db2a:	4bb7      	ldr	r3, [pc, #732]	; (800de08 <LidarSetPos+0x338>)
 800db2c:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 800db30:	4bb6      	ldr	r3, [pc, #728]	; (800de0c <LidarSetPos+0x33c>)
 800db32:	691b      	ldr	r3, [r3, #16]
 800db34:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 800db38:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800db3c:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 800db40:	f04f 0300 	mov.w	r3, #0
 800db44:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 800db48:	f04f 0300 	mov.w	r3, #0
 800db4c:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
	float center_2_to_center_1[1][7] = {{PoleSpeed, -1.30, 0.1, pp.real_z, 1, 0, 0}};
 800db50:	4bab      	ldr	r3, [pc, #684]	; (800de00 <LidarSetPos+0x330>)
 800db52:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800db56:	4bae      	ldr	r3, [pc, #696]	; (800de10 <LidarSetPos+0x340>)
 800db58:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 800db5c:	4baa      	ldr	r3, [pc, #680]	; (800de08 <LidarSetPos+0x338>)
 800db5e:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 800db62:	4baa      	ldr	r3, [pc, #680]	; (800de0c <LidarSetPos+0x33c>)
 800db64:	691b      	ldr	r3, [r3, #16]
 800db66:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 800db6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800db6e:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800db72:	f04f 0300 	mov.w	r3, #0
 800db76:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 800db7a:	f04f 0300 	mov.w	r3, #0
 800db7e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
	float center_2_to_center[1][7] = {{PoleSpeed, 1.1, 0.1, pp.real_z, 1, 0, 0}};
 800db82:	4b9f      	ldr	r3, [pc, #636]	; (800de00 <LidarSetPos+0x330>)
 800db84:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 800db88:	4ba2      	ldr	r3, [pc, #648]	; (800de14 <LidarSetPos+0x344>)
 800db8a:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800db8e:	4b9e      	ldr	r3, [pc, #632]	; (800de08 <LidarSetPos+0x338>)
 800db90:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 800db94:	4b9d      	ldr	r3, [pc, #628]	; (800de0c <LidarSetPos+0x33c>)
 800db96:	691b      	ldr	r3, [r3, #16]
 800db98:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 800db9c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800dba0:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 800dba4:	f04f 0300 	mov.w	r3, #0
 800dba8:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800dbac:	f04f 0300 	mov.w	r3, #0
 800dbb0:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
	float center_to_center_2[1][7] = {{PoleSpeed, -1.1, 0.1, pp.real_z, 1, 0, 0}};
 800dbb4:	4b92      	ldr	r3, [pc, #584]	; (800de00 <LidarSetPos+0x330>)
 800dbb6:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 800dbba:	4b97      	ldr	r3, [pc, #604]	; (800de18 <LidarSetPos+0x348>)
 800dbbc:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 800dbc0:	4b91      	ldr	r3, [pc, #580]	; (800de08 <LidarSetPos+0x338>)
 800dbc2:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 800dbc6:	4b91      	ldr	r3, [pc, #580]	; (800de0c <LidarSetPos+0x33c>)
 800dbc8:	691b      	ldr	r3, [r3, #16]
 800dbca:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 800dbce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800dbd2:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 800dbd6:	f04f 0300 	mov.w	r3, #0
 800dbda:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
 800dbde:	f04f 0300 	mov.w	r3, #0
 800dbe2:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
	float center_to_center_3[1][7] = {{PoleSpeed, 0.9, 0.1, pp.real_z, 1, 0, 0}};
 800dbe6:	4b86      	ldr	r3, [pc, #536]	; (800de00 <LidarSetPos+0x330>)
 800dbe8:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 800dbec:	4b8b      	ldr	r3, [pc, #556]	; (800de1c <LidarSetPos+0x34c>)
 800dbee:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 800dbf2:	4b85      	ldr	r3, [pc, #532]	; (800de08 <LidarSetPos+0x338>)
 800dbf4:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 800dbf8:	4b84      	ldr	r3, [pc, #528]	; (800de0c <LidarSetPos+0x33c>)
 800dbfa:	691b      	ldr	r3, [r3, #16]
 800dbfc:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 800dc00:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800dc04:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 800dc08:	f04f 0300 	mov.w	r3, #0
 800dc0c:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 800dc10:	f04f 0300 	mov.w	r3, #0
 800dc14:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
	float center_3_to_center[1][7] = {{PoleSpeed, -0.7, 0.1, pp.real_z, 1, 0, 0}};
 800dc18:	4b79      	ldr	r3, [pc, #484]	; (800de00 <LidarSetPos+0x330>)
 800dc1a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800dc1e:	4b80      	ldr	r3, [pc, #512]	; (800de20 <LidarSetPos+0x350>)
 800dc20:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 800dc24:	4b78      	ldr	r3, [pc, #480]	; (800de08 <LidarSetPos+0x338>)
 800dc26:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800dc2a:	4b78      	ldr	r3, [pc, #480]	; (800de0c <LidarSetPos+0x33c>)
 800dc2c:	691b      	ldr	r3, [r3, #16]
 800dc2e:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 800dc32:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800dc36:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800dc3a:	f04f 0300 	mov.w	r3, #0
 800dc3e:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 800dc42:	f04f 0300 	mov.w	r3, #0
 800dc46:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
	float center_3_to_center_4[1][7] = {{PoleSpeed, 1.6, 0.1, pp.real_z, 1, 0, 0}};
 800dc4a:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800dc4e:	4a6c      	ldr	r2, [pc, #432]	; (800de00 <LidarSetPos+0x330>)
 800dc50:	601a      	str	r2, [r3, #0]
 800dc52:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800dc56:	4a73      	ldr	r2, [pc, #460]	; (800de24 <LidarSetPos+0x354>)
 800dc58:	605a      	str	r2, [r3, #4]
 800dc5a:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800dc5e:	4a6a      	ldr	r2, [pc, #424]	; (800de08 <LidarSetPos+0x338>)
 800dc60:	609a      	str	r2, [r3, #8]
 800dc62:	4b6a      	ldr	r3, [pc, #424]	; (800de0c <LidarSetPos+0x33c>)
 800dc64:	691a      	ldr	r2, [r3, #16]
 800dc66:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800dc6a:	60da      	str	r2, [r3, #12]
 800dc6c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800dc70:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800dc74:	611a      	str	r2, [r3, #16]
 800dc76:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800dc7a:	f04f 0200 	mov.w	r2, #0
 800dc7e:	615a      	str	r2, [r3, #20]
 800dc80:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800dc84:	f04f 0200 	mov.w	r2, #0
 800dc88:	619a      	str	r2, [r3, #24]
	float center_4_to_center_3[1][7] = {{PoleSpeed, -1.6, 0.1, pp.real_z, 1, 0, 0}};
 800dc8a:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800dc8e:	4a5c      	ldr	r2, [pc, #368]	; (800de00 <LidarSetPos+0x330>)
 800dc90:	601a      	str	r2, [r3, #0]
 800dc92:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800dc96:	4a64      	ldr	r2, [pc, #400]	; (800de28 <LidarSetPos+0x358>)
 800dc98:	605a      	str	r2, [r3, #4]
 800dc9a:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800dc9e:	4a5a      	ldr	r2, [pc, #360]	; (800de08 <LidarSetPos+0x338>)
 800dca0:	609a      	str	r2, [r3, #8]
 800dca2:	4b5a      	ldr	r3, [pc, #360]	; (800de0c <LidarSetPos+0x33c>)
 800dca4:	691a      	ldr	r2, [r3, #16]
 800dca6:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800dcaa:	60da      	str	r2, [r3, #12]
 800dcac:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800dcb0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800dcb4:	611a      	str	r2, [r3, #16]
 800dcb6:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800dcba:	f04f 0200 	mov.w	r2, #0
 800dcbe:	615a      	str	r2, [r3, #20]
 800dcc0:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800dcc4:	f04f 0200 	mov.w	r2, #0
 800dcc8:	619a      	str	r2, [r3, #24]
	float center_4_to_upper_right[1][7] = {{PoleSpeed, 1.55, 0.0, pp.real_z, 0, 0, 0}};
 800dcca:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800dcce:	4a4c      	ldr	r2, [pc, #304]	; (800de00 <LidarSetPos+0x330>)
 800dcd0:	601a      	str	r2, [r3, #0]
 800dcd2:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800dcd6:	4a55      	ldr	r2, [pc, #340]	; (800de2c <LidarSetPos+0x35c>)
 800dcd8:	605a      	str	r2, [r3, #4]
 800dcda:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800dcde:	f04f 0200 	mov.w	r2, #0
 800dce2:	609a      	str	r2, [r3, #8]
 800dce4:	4b49      	ldr	r3, [pc, #292]	; (800de0c <LidarSetPos+0x33c>)
 800dce6:	691a      	ldr	r2, [r3, #16]
 800dce8:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800dcec:	60da      	str	r2, [r3, #12]
 800dcee:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800dcf2:	f04f 0200 	mov.w	r2, #0
 800dcf6:	611a      	str	r2, [r3, #16]
 800dcf8:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800dcfc:	f04f 0200 	mov.w	r2, #0
 800dd00:	615a      	str	r2, [r3, #20]
 800dd02:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800dd06:	f04f 0200 	mov.w	r2, #0
 800dd0a:	619a      	str	r2, [r3, #24]
	float center_4_to_upper_right_2[1][7] = {{PoleSpeed, 0.3, 6.0, -178.0, 0, 0, 0}};
 800dd0c:	f507 731d 	add.w	r3, r7, #628	; 0x274
 800dd10:	4a47      	ldr	r2, [pc, #284]	; (800de30 <LidarSetPos+0x360>)
 800dd12:	461c      	mov	r4, r3
 800dd14:	4615      	mov	r5, r2
 800dd16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dd1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float upper_right_to_center_4[1][7] = {{PoleSpeed, 0.5, -4.1, -90, 0, 0, 0}};
 800dd22:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800dd26:	4a43      	ldr	r2, [pc, #268]	; (800de34 <LidarSetPos+0x364>)
 800dd28:	461c      	mov	r4, r3
 800dd2a:	4615      	mov	r5, r2
 800dd2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dd34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float upper_right_to_center_4_2[1][7] = {{PoleSpeed, -1.3, 0.0, -90.0, 0, 0, 0}};
 800dd38:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 800dd3c:	4a3e      	ldr	r2, [pc, #248]	; (800de38 <LidarSetPos+0x368>)
 800dd3e:	461c      	mov	r4, r3
 800dd40:	4615      	mov	r5, r2
 800dd42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dd4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float upper_right_to_pick_right[1][7] = {{PoleSpeed, 0.5, -4.35, -180.0, 0, 0, 0}};
 800dd4e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800dd52:	4a3a      	ldr	r2, [pc, #232]	; (800de3c <LidarSetPos+0x36c>)
 800dd54:	461c      	mov	r4, r3
 800dd56:	4615      	mov	r5, r2
 800dd58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dd60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float pick_right_to_upper_right[1][7] = {{PoleSpeed, -0.2, 0.5, -90, 0, 0, 0}};
 800dd64:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800dd68:	4a35      	ldr	r2, [pc, #212]	; (800de40 <LidarSetPos+0x370>)
 800dd6a:	461c      	mov	r4, r3
 800dd6c:	4615      	mov	r5, r2
 800dd6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dd76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float pick_right_to_upper_right_2[1][7] = {{PoleSpeed, 0.2, 6, -178.0, 0, 0, 0}};
 800dd7a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800dd7e:	4a31      	ldr	r2, [pc, #196]	; (800de44 <LidarSetPos+0x374>)
 800dd80:	461c      	mov	r4, r3
 800dd82:	4615      	mov	r5, r2
 800dd84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dd8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// Offset 2 poles
	float center_1_to_center[1][7] = {{PoleSpeed, 2.7, 0.1, pp.real_z, 1, 0, 0}};
 800dd90:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800dd94:	4a1a      	ldr	r2, [pc, #104]	; (800de00 <LidarSetPos+0x330>)
 800dd96:	601a      	str	r2, [r3, #0]
 800dd98:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800dd9c:	4a2a      	ldr	r2, [pc, #168]	; (800de48 <LidarSetPos+0x378>)
 800dd9e:	605a      	str	r2, [r3, #4]
 800dda0:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800dda4:	4a18      	ldr	r2, [pc, #96]	; (800de08 <LidarSetPos+0x338>)
 800dda6:	609a      	str	r2, [r3, #8]
 800dda8:	4b18      	ldr	r3, [pc, #96]	; (800de0c <LidarSetPos+0x33c>)
 800ddaa:	691a      	ldr	r2, [r3, #16]
 800ddac:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800ddb0:	60da      	str	r2, [r3, #12]
 800ddb2:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800ddb6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ddba:	611a      	str	r2, [r3, #16]
 800ddbc:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800ddc0:	f04f 0200 	mov.w	r2, #0
 800ddc4:	615a      	str	r2, [r3, #20]
 800ddc6:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800ddca:	f04f 0200 	mov.w	r2, #0
 800ddce:	619a      	str	r2, [r3, #24]
	float center_to_center_1[1][7] = {{PoleSpeed, -2.7, 0.1, pp.real_z, 1, 0, 0}};
 800ddd0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800ddd4:	4a0a      	ldr	r2, [pc, #40]	; (800de00 <LidarSetPos+0x330>)
 800ddd6:	601a      	str	r2, [r3, #0]
 800ddd8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dddc:	4a1b      	ldr	r2, [pc, #108]	; (800de4c <LidarSetPos+0x37c>)
 800ddde:	605a      	str	r2, [r3, #4]
 800dde0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dde4:	4a08      	ldr	r2, [pc, #32]	; (800de08 <LidarSetPos+0x338>)
 800dde6:	609a      	str	r2, [r3, #8]
 800dde8:	4b08      	ldr	r3, [pc, #32]	; (800de0c <LidarSetPos+0x33c>)
 800ddea:	691a      	ldr	r2, [r3, #16]
 800ddec:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800ddf0:	60da      	str	r2, [r3, #12]
 800ddf2:	e02d      	b.n	800de50 <LidarSetPos+0x380>
 800ddf4:	0801fe74 	.word	0x0801fe74
 800ddf8:	0801fe90 	.word	0x0801fe90
 800ddfc:	0801feac 	.word	0x0801feac
 800de00:	40d00000 	.word	0x40d00000
 800de04:	3fa66666 	.word	0x3fa66666
 800de08:	3dcccccd 	.word	0x3dcccccd
 800de0c:	20006cc4 	.word	0x20006cc4
 800de10:	bfa66666 	.word	0xbfa66666
 800de14:	3f8ccccd 	.word	0x3f8ccccd
 800de18:	bf8ccccd 	.word	0xbf8ccccd
 800de1c:	3f666666 	.word	0x3f666666
 800de20:	bf333333 	.word	0xbf333333
 800de24:	3fcccccd 	.word	0x3fcccccd
 800de28:	bfcccccd 	.word	0xbfcccccd
 800de2c:	3fc66666 	.word	0x3fc66666
 800de30:	0801fec8 	.word	0x0801fec8
 800de34:	0801fee4 	.word	0x0801fee4
 800de38:	0801ff00 	.word	0x0801ff00
 800de3c:	0801ff1c 	.word	0x0801ff1c
 800de40:	0801ff38 	.word	0x0801ff38
 800de44:	0801ff54 	.word	0x0801ff54
 800de48:	402ccccd 	.word	0x402ccccd
 800de4c:	c02ccccd 	.word	0xc02ccccd
 800de50:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800de54:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800de58:	611a      	str	r2, [r3, #16]
 800de5a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800de5e:	f04f 0200 	mov.w	r2, #0
 800de62:	615a      	str	r2, [r3, #20]
 800de64:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800de68:	f04f 0200 	mov.w	r2, #0
 800de6c:	619a      	str	r2, [r3, #24]
	float center_to_center_4[1][7] = {{PoleSpeed, 2.35, 0.1, pp.real_z, 1, 0, 0}};
 800de6e:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800de72:	4abd      	ldr	r2, [pc, #756]	; (800e168 <LidarSetPos+0x698>)
 800de74:	601a      	str	r2, [r3, #0]
 800de76:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800de7a:	4abc      	ldr	r2, [pc, #752]	; (800e16c <LidarSetPos+0x69c>)
 800de7c:	605a      	str	r2, [r3, #4]
 800de7e:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800de82:	4abb      	ldr	r2, [pc, #748]	; (800e170 <LidarSetPos+0x6a0>)
 800de84:	609a      	str	r2, [r3, #8]
 800de86:	4bbb      	ldr	r3, [pc, #748]	; (800e174 <LidarSetPos+0x6a4>)
 800de88:	691a      	ldr	r2, [r3, #16]
 800de8a:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800de8e:	60da      	str	r2, [r3, #12]
 800de90:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800de94:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800de98:	611a      	str	r2, [r3, #16]
 800de9a:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800de9e:	f04f 0200 	mov.w	r2, #0
 800dea2:	615a      	str	r2, [r3, #20]
 800dea4:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800dea8:	f04f 0200 	mov.w	r2, #0
 800deac:	619a      	str	r2, [r3, #24]
	float center_4_to_center[1][7] = {{PoleSpeed, -2.56, 0.1, pp.real_z, 1, 0, 0}};
 800deae:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800deb2:	4aad      	ldr	r2, [pc, #692]	; (800e168 <LidarSetPos+0x698>)
 800deb4:	601a      	str	r2, [r3, #0]
 800deb6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800deba:	4aaf      	ldr	r2, [pc, #700]	; (800e178 <LidarSetPos+0x6a8>)
 800debc:	605a      	str	r2, [r3, #4]
 800debe:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800dec2:	4aab      	ldr	r2, [pc, #684]	; (800e170 <LidarSetPos+0x6a0>)
 800dec4:	609a      	str	r2, [r3, #8]
 800dec6:	4bab      	ldr	r3, [pc, #684]	; (800e174 <LidarSetPos+0x6a4>)
 800dec8:	691a      	ldr	r2, [r3, #16]
 800deca:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800dece:	60da      	str	r2, [r3, #12]
 800ded0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800ded4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ded8:	611a      	str	r2, [r3, #16]
 800deda:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800dede:	f04f 0200 	mov.w	r2, #0
 800dee2:	615a      	str	r2, [r3, #20]
 800dee4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800dee8:	f04f 0200 	mov.w	r2, #0
 800deec:	619a      	str	r2, [r3, #24]
	float center_2_to_center_3[1][7] = {{PoleSpeed, 2.1, 0.1, pp.real_z, 1, 0, 0}};
 800deee:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800def2:	4a9d      	ldr	r2, [pc, #628]	; (800e168 <LidarSetPos+0x698>)
 800def4:	601a      	str	r2, [r3, #0]
 800def6:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800defa:	4aa0      	ldr	r2, [pc, #640]	; (800e17c <LidarSetPos+0x6ac>)
 800defc:	605a      	str	r2, [r3, #4]
 800defe:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800df02:	4a9b      	ldr	r2, [pc, #620]	; (800e170 <LidarSetPos+0x6a0>)
 800df04:	609a      	str	r2, [r3, #8]
 800df06:	4b9b      	ldr	r3, [pc, #620]	; (800e174 <LidarSetPos+0x6a4>)
 800df08:	691a      	ldr	r2, [r3, #16]
 800df0a:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800df0e:	60da      	str	r2, [r3, #12]
 800df10:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800df14:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800df18:	611a      	str	r2, [r3, #16]
 800df1a:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800df1e:	f04f 0200 	mov.w	r2, #0
 800df22:	615a      	str	r2, [r3, #20]
 800df24:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800df28:	f04f 0200 	mov.w	r2, #0
 800df2c:	619a      	str	r2, [r3, #24]
	float center_3_to_center_2[1][7] = {{PoleSpeed, -2.0, 0.1, pp.real_z, 1, 0, 0}};
 800df2e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800df32:	4a8d      	ldr	r2, [pc, #564]	; (800e168 <LidarSetPos+0x698>)
 800df34:	601a      	str	r2, [r3, #0]
 800df36:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800df3a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800df3e:	605a      	str	r2, [r3, #4]
 800df40:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800df44:	4a8a      	ldr	r2, [pc, #552]	; (800e170 <LidarSetPos+0x6a0>)
 800df46:	609a      	str	r2, [r3, #8]
 800df48:	4b8a      	ldr	r3, [pc, #552]	; (800e174 <LidarSetPos+0x6a4>)
 800df4a:	691a      	ldr	r2, [r3, #16]
 800df4c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800df50:	60da      	str	r2, [r3, #12]
 800df52:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800df56:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800df5a:	611a      	str	r2, [r3, #16]
 800df5c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800df60:	f04f 0200 	mov.w	r2, #0
 800df64:	615a      	str	r2, [r3, #20]
 800df66:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800df6a:	f04f 0200 	mov.w	r2, #0
 800df6e:	619a      	str	r2, [r3, #24]
	float center_3_to_upper_right[1][7] = {{PoleSpeed, 3.4, 0.1, pp.real_z, 0, 0, 0}};
 800df70:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800df74:	4a7c      	ldr	r2, [pc, #496]	; (800e168 <LidarSetPos+0x698>)
 800df76:	601a      	str	r2, [r3, #0]
 800df78:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800df7c:	4a80      	ldr	r2, [pc, #512]	; (800e180 <LidarSetPos+0x6b0>)
 800df7e:	605a      	str	r2, [r3, #4]
 800df80:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800df84:	4a7a      	ldr	r2, [pc, #488]	; (800e170 <LidarSetPos+0x6a0>)
 800df86:	609a      	str	r2, [r3, #8]
 800df88:	4b7a      	ldr	r3, [pc, #488]	; (800e174 <LidarSetPos+0x6a4>)
 800df8a:	691a      	ldr	r2, [r3, #16]
 800df8c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800df90:	60da      	str	r2, [r3, #12]
 800df92:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800df96:	f04f 0200 	mov.w	r2, #0
 800df9a:	611a      	str	r2, [r3, #16]
 800df9c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800dfa0:	f04f 0200 	mov.w	r2, #0
 800dfa4:	615a      	str	r2, [r3, #20]
 800dfa6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800dfaa:	f04f 0200 	mov.w	r2, #0
 800dfae:	619a      	str	r2, [r3, #24]
	float center_3_to_upper_right_2[1][7] = {{PoleSpeed, 0.3, 6.0, -178.0, 0, 0, 0}};
 800dfb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfb4:	4a73      	ldr	r2, [pc, #460]	; (800e184 <LidarSetPos+0x6b4>)
 800dfb6:	461c      	mov	r4, r3
 800dfb8:	4615      	mov	r5, r2
 800dfba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dfbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dfbe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dfc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float upper_right_to_center_3[1][7] = {{PoleSpeed, 0.5, -4.2, -90, 0, 0, 0}};
 800dfc6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800dfca:	4a6f      	ldr	r2, [pc, #444]	; (800e188 <LidarSetPos+0x6b8>)
 800dfcc:	461c      	mov	r4, r3
 800dfce:	4615      	mov	r5, r2
 800dfd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dfd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dfd4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dfd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float upper_right_to_center_3_2[1][7] = {{PoleSpeed, -3.3, 0.0, -90, 0, 0, 0}};
 800dfdc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800dfe0:	4a6a      	ldr	r2, [pc, #424]	; (800e18c <LidarSetPos+0x6bc>)
 800dfe2:	461c      	mov	r4, r3
 800dfe4:	4615      	mov	r5, r2
 800dfe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dfe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dfea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dfee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_4_to_pick_right[1][7] = {{PoleSpeed, 1.6, -0.5, -90, 0, 0, 0}};
 800dff2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800dff6:	4a66      	ldr	r2, [pc, #408]	; (800e190 <LidarSetPos+0x6c0>)
 800dff8:	461c      	mov	r4, r3
 800dffa:	4615      	mov	r5, r2
 800dffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e000:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e004:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	float pick_right_to_center_4_servo[1][7] = {{4.0, 0, 0.4, -90, 0, 0, 0}};
 800e008:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e00c:	4a61      	ldr	r2, [pc, #388]	; (800e194 <LidarSetPos+0x6c4>)
 800e00e:	461c      	mov	r4, r3
 800e010:	4615      	mov	r5, r2
 800e012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e016:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e01a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float pick_right_to_center_4[1][7] = {{PoleSpeed, -2.1, 0.3, -90, 1, 0, 0}};
 800e01e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e022:	4a5d      	ldr	r2, [pc, #372]	; (800e198 <LidarSetPos+0x6c8>)
 800e024:	461c      	mov	r4, r3
 800e026:	4615      	mov	r5, r2
 800e028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e02a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e02c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e030:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	float center_3_to_pick_right[1][7] = {{PoleSpeed, 2.7, -0.5, -90, 0, 0, 0}};
 800e034:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e038:	4a58      	ldr	r2, [pc, #352]	; (800e19c <LidarSetPos+0x6cc>)
 800e03a:	461c      	mov	r4, r3
 800e03c:	4615      	mov	r5, r2
 800e03e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e042:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e046:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_to_pick_right[1][7] = {{PoleSpeed, 4.1, -0.5, -90, 0, 0, 0}};
 800e04a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e04e:	4a54      	ldr	r2, [pc, #336]	; (800e1a0 <LidarSetPos+0x6d0>)
 800e050:	461c      	mov	r4, r3
 800e052:	4615      	mov	r5, r2
 800e054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e058:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e05c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_2_to_pick_right[1][7] = {{PoleSpeed, 5.5, -0.5, -90, 0, 0, 0}};
 800e060:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e064:	4a4f      	ldr	r2, [pc, #316]	; (800e1a4 <LidarSetPos+0x6d4>)
 800e066:	461c      	mov	r4, r3
 800e068:	4615      	mov	r5, r2
 800e06a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e06c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e06e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e072:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_1_to_pick_right[1][7] = {{PoleSpeed, 6.8, -0.5, -90, 0, 0, 0}};
 800e076:	f107 030c 	add.w	r3, r7, #12
 800e07a:	4a4b      	ldr	r2, [pc, #300]	; (800e1a8 <LidarSetPos+0x6d8>)
 800e07c:	461c      	mov	r4, r3
 800e07e:	4615      	mov	r5, r2
 800e080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e084:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e088:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	switch(pose) // Target Pose
 800e08c:	1dfb      	adds	r3, r7, #7
 800e08e:	781b      	ldrb	r3, [r3, #0]
 800e090:	3b02      	subs	r3, #2
 800e092:	2b07      	cmp	r3, #7
 800e094:	f201 8554 	bhi.w	800fb40 <LidarSetPos+0x2070>
 800e098:	a201      	add	r2, pc, #4	; (adr r2, 800e0a0 <LidarSetPos+0x5d0>)
 800e09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e09e:	bf00      	nop
 800e0a0:	0800e0c1 	.word	0x0800e0c1
 800e0a4:	0800e12f 	.word	0x0800e12f
 800e0a8:	0800e41d 	.word	0x0800e41d
 800e0ac:	0800e727 	.word	0x0800e727
 800e0b0:	0800eaa9 	.word	0x0800eaa9
 800e0b4:	0800eeaf 	.word	0x0800eeaf
 800e0b8:	0800f2d9 	.word	0x0800f2d9
 800e0bc:	0800f6e5 	.word	0x0800f6e5
	{
		case UPPER_LEFT:
			switch(lidar->pos) // Self Pose
 800e0c0:	463b      	mov	r3, r7
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e0c8:	3b01      	subs	r3, #1
 800e0ca:	2b08      	cmp	r3, #8
 800e0cc:	d82c      	bhi.n	800e128 <LidarSetPos+0x658>
 800e0ce:	a201      	add	r2, pc, #4	; (adr r2, 800e0d4 <LidarSetPos+0x604>)
 800e0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0d4:	0800e0f9 	.word	0x0800e0f9
 800e0d8:	0800e129 	.word	0x0800e129
 800e0dc:	0800e129 	.word	0x0800e129
 800e0e0:	0800e129 	.word	0x0800e129
 800e0e4:	0800e111 	.word	0x0800e111
 800e0e8:	0800e129 	.word	0x0800e129
 800e0ec:	0800e129 	.word	0x0800e129
 800e0f0:	0800e11d 	.word	0x0800e11d
 800e0f4:	0800e105 	.word	0x0800e105
			{
				case PICK_LEFT:
					lidar->pos = UPPER_LEFT;
 800e0f8:	463b      	mov	r3, r7
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	2202      	movs	r2, #2
 800e0fe:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e102:	e012      	b.n	800e12a <LidarSetPos+0x65a>

				case PICK_RIGHT:
					lidar->pos = UPPER_LEFT;
 800e104:	463b      	mov	r3, r7
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	2202      	movs	r2, #2
 800e10a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e10e:	e00c      	b.n	800e12a <LidarSetPos+0x65a>

				case CENTER:
					lidar->pos = UPPER_LEFT;
 800e110:	463b      	mov	r3, r7
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	2202      	movs	r2, #2
 800e116:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e11a:	e006      	b.n	800e12a <LidarSetPos+0x65a>

				case UPPER_RIGHT:
					lidar->pos = UPPER_LEFT;
 800e11c:	463b      	mov	r3, r7
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	2202      	movs	r2, #2
 800e122:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e126:	e000      	b.n	800e12a <LidarSetPos+0x65a>

				default:
					break;
 800e128:	bf00      	nop

			}
			break;
 800e12a:	f001 bd0a 	b.w	800fb42 <LidarSetPos+0x2072>

		case CENTER_1:

			switch(lidar->pos) // Self Pose
 800e12e:	463b      	mov	r3, r7
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e136:	3b01      	subs	r3, #1
 800e138:	2b08      	cmp	r3, #8
 800e13a:	f200 8163 	bhi.w	800e404 <LidarSetPos+0x934>
 800e13e:	a201      	add	r2, pc, #4	; (adr r2, 800e144 <LidarSetPos+0x674>)
 800e140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e144:	0800e1ad 	.word	0x0800e1ad
 800e148:	0800e295 	.word	0x0800e295
 800e14c:	0800e405 	.word	0x0800e405
 800e150:	0800e2ad 	.word	0x0800e2ad
 800e154:	0800e359 	.word	0x0800e359
 800e158:	0800e405 	.word	0x0800e405
 800e15c:	0800e405 	.word	0x0800e405
 800e160:	0800e2a1 	.word	0x0800e2a1
 800e164:	0800e289 	.word	0x0800e289
 800e168:	40d00000 	.word	0x40d00000
 800e16c:	40166666 	.word	0x40166666
 800e170:	3dcccccd 	.word	0x3dcccccd
 800e174:	20006cc4 	.word	0x20006cc4
 800e178:	c023d70a 	.word	0xc023d70a
 800e17c:	40066666 	.word	0x40066666
 800e180:	4059999a 	.word	0x4059999a
 800e184:	0801fec8 	.word	0x0801fec8
 800e188:	0801ff70 	.word	0x0801ff70
 800e18c:	0801ff8c 	.word	0x0801ff8c
 800e190:	0801ffa8 	.word	0x0801ffa8
 800e194:	0801ffc4 	.word	0x0801ffc4
 800e198:	0801ffe0 	.word	0x0801ffe0
 800e19c:	0801fffc 	.word	0x0801fffc
 800e1a0:	08020018 	.word	0x08020018
 800e1a4:	08020034 	.word	0x08020034
 800e1a8:	08020050 	.word	0x08020050
			{
				case PICK_LEFT:
					stick_fence = 0;
 800e1ac:	4bb6      	ldr	r3, [pc, #728]	; (800e488 <LidarSetPos+0x9b8>)
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800e1b2:	4bb6      	ldr	r3, [pc, #728]	; (800e48c <LidarSetPos+0x9bc>)
 800e1b4:	4ab6      	ldr	r2, [pc, #728]	; (800e490 <LidarSetPos+0x9c0>)
 800e1b6:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800e1b8:	4bb6      	ldr	r3, [pc, #728]	; (800e494 <LidarSetPos+0x9c4>)
 800e1ba:	4ab7      	ldr	r2, [pc, #732]	; (800e498 <LidarSetPos+0x9c8>)
 800e1bc:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800e1be:	f7fe f8ed 	bl	800c39c <ResetCoordinate>
					lidar->pos = CENTER_1;
 800e1c2:	463b      	mov	r3, r7
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	2203      	movs	r2, #3
 800e1c8:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
//						{
//							while(ps4.button == SQUARE);
//							PP_stop(&pp);
//						}
//					}
					PP_start(pick_left_adjust, 1, &pp);
 800e1cc:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 800e1d0:	4ab2      	ldr	r2, [pc, #712]	; (800e49c <LidarSetPos+0x9cc>)
 800e1d2:	2101      	movs	r1, #1
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f7f7 fbd6 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800e1da:	e00d      	b.n	800e1f8 <LidarSetPos+0x728>
					{
						if(ps4.button == SQUARE)
 800e1dc:	4bb0      	ldr	r3, [pc, #704]	; (800e4a0 <LidarSetPos+0x9d0>)
 800e1de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1e4:	d108      	bne.n	800e1f8 <LidarSetPos+0x728>
						{
							while(ps4.button == SQUARE);
 800e1e6:	bf00      	nop
 800e1e8:	4bad      	ldr	r3, [pc, #692]	; (800e4a0 <LidarSetPos+0x9d0>)
 800e1ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1f0:	d0fa      	beq.n	800e1e8 <LidarSetPos+0x718>
							PP_stop(&pp);
 800e1f2:	48aa      	ldr	r0, [pc, #680]	; (800e49c <LidarSetPos+0x9cc>)
 800e1f4:	f7f7 fe01 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800e1f8:	4ba8      	ldr	r3, [pc, #672]	; (800e49c <LidarSetPos+0x9cc>)
 800e1fa:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e1fe:	f003 0301 	and.w	r3, r3, #1
 800e202:	b2db      	uxtb	r3, r3
 800e204:	2b00      	cmp	r3, #0
 800e206:	d1e9      	bne.n	800e1dc <LidarSetPos+0x70c>
						}
					}

					// Stick to fence
					PP_start(pick_left_to_center_1, 1, &pp);
 800e208:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800e20c:	4aa3      	ldr	r2, [pc, #652]	; (800e49c <LidarSetPos+0x9cc>)
 800e20e:	2101      	movs	r1, #1
 800e210:	4618      	mov	r0, r3
 800e212:	f7f7 fbb8 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800e216:	e01e      	b.n	800e256 <LidarSetPos+0x786>
					{
						if(ps4.button == SQUARE)
 800e218:	4ba1      	ldr	r3, [pc, #644]	; (800e4a0 <LidarSetPos+0x9d0>)
 800e21a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e21c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e220:	d108      	bne.n	800e234 <LidarSetPos+0x764>
						{
							while(ps4.button == SQUARE);
 800e222:	bf00      	nop
 800e224:	4b9e      	ldr	r3, [pc, #632]	; (800e4a0 <LidarSetPos+0x9d0>)
 800e226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e22c:	d0fa      	beq.n	800e224 <LidarSetPos+0x754>
							PP_stop(&pp);
 800e22e:	489b      	ldr	r0, [pc, #620]	; (800e49c <LidarSetPos+0x9cc>)
 800e230:	f7f7 fde3 	bl	8005dfa <PP_stop>
//							lidar->pos = PICK_LEFT;
//							lidar->pos_counter = PICK_LEFT;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e234:	2108      	movs	r1, #8
 800e236:	489b      	ldr	r0, [pc, #620]	; (800e4a4 <LidarSetPos+0x9d4>)
 800e238:	f004 f88a 	bl	8012350 <HAL_GPIO_ReadPin>
 800e23c:	4603      	mov	r3, r0
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d006      	beq.n	800e250 <LidarSetPos+0x780>
 800e242:	2110      	movs	r1, #16
 800e244:	4897      	ldr	r0, [pc, #604]	; (800e4a4 <LidarSetPos+0x9d4>)
 800e246:	f004 f883 	bl	8012350 <HAL_GPIO_ReadPin>
 800e24a:	4603      	mov	r3, r0
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d102      	bne.n	800e256 <LidarSetPos+0x786>
							PP_stop(&pp);
 800e250:	4892      	ldr	r0, [pc, #584]	; (800e49c <LidarSetPos+0x9cc>)
 800e252:	f7f7 fdd2 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800e256:	4b91      	ldr	r3, [pc, #580]	; (800e49c <LidarSetPos+0x9cc>)
 800e258:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e25c:	f003 0301 	and.w	r3, r3, #1
 800e260:	b2db      	uxtb	r3, r3
 800e262:	2b00      	cmp	r3, #0
 800e264:	d1d8      	bne.n	800e218 <LidarSetPos+0x748>
					}

//					Shot();
					stick_fence = 1;
 800e266:	4b88      	ldr	r3, [pc, #544]	; (800e488 <LidarSetPos+0x9b8>)
 800e268:	2201      	movs	r2, #1
 800e26a:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800e26c:	463b      	mov	r3, r7
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e274:	1dfa      	adds	r2, r7, #7
 800e276:	7812      	ldrb	r2, [r2, #0]
 800e278:	429a      	cmp	r2, r3
 800e27a:	f040 80c6 	bne.w	800e40a <LidarSetPos+0x93a>
						LidarAdjust(lidar);
 800e27e:	463b      	mov	r3, r7
 800e280:	6818      	ldr	r0, [r3, #0]
 800e282:	f001 fc7b 	bl	800fb7c <LidarAdjust>
					break;
 800e286:	e0c0      	b.n	800e40a <LidarSetPos+0x93a>

				case PICK_RIGHT:
					lidar->pos = CENTER_1;
 800e288:	463b      	mov	r3, r7
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	2203      	movs	r2, #3
 800e28e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e292:	e0c1      	b.n	800e418 <LidarSetPos+0x948>

				case UPPER_LEFT:
					lidar->pos = CENTER_1;
 800e294:	463b      	mov	r3, r7
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	2203      	movs	r2, #3
 800e29a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e29e:	e0bb      	b.n	800e418 <LidarSetPos+0x948>

				case UPPER_RIGHT:
					lidar->pos = CENTER_1;
 800e2a0:	463b      	mov	r3, r7
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	2203      	movs	r2, #3
 800e2a6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e2aa:	e0b5      	b.n	800e418 <LidarSetPos+0x948>

				case CENTER_2:
					stick_fence = 0;
 800e2ac:	4b76      	ldr	r3, [pc, #472]	; (800e488 <LidarSetPos+0x9b8>)
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800e2b2:	4b76      	ldr	r3, [pc, #472]	; (800e48c <LidarSetPos+0x9bc>)
 800e2b4:	4a76      	ldr	r2, [pc, #472]	; (800e490 <LidarSetPos+0x9c0>)
 800e2b6:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800e2b8:	4b76      	ldr	r3, [pc, #472]	; (800e494 <LidarSetPos+0x9c4>)
 800e2ba:	4a77      	ldr	r2, [pc, #476]	; (800e498 <LidarSetPos+0x9c8>)
 800e2bc:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800e2be:	f7fe f86d 	bl	800c39c <ResetCoordinate>
					lidar->pos = CENTER_1;
 800e2c2:	463b      	mov	r3, r7
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	2203      	movs	r2, #3
 800e2c8:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_2_to_center_1, 1, &pp);
 800e2cc:	f507 7355 	add.w	r3, r7, #852	; 0x354
 800e2d0:	4a72      	ldr	r2, [pc, #456]	; (800e49c <LidarSetPos+0x9cc>)
 800e2d2:	2101      	movs	r1, #1
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f7f7 fb56 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800e2da:	e025      	b.n	800e328 <LidarSetPos+0x858>
					{
						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e2dc:	2108      	movs	r1, #8
 800e2de:	4871      	ldr	r0, [pc, #452]	; (800e4a4 <LidarSetPos+0x9d4>)
 800e2e0:	f004 f836 	bl	8012350 <HAL_GPIO_ReadPin>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d006      	beq.n	800e2f8 <LidarSetPos+0x828>
 800e2ea:	2110      	movs	r1, #16
 800e2ec:	486d      	ldr	r0, [pc, #436]	; (800e4a4 <LidarSetPos+0x9d4>)
 800e2ee:	f004 f82f 	bl	8012350 <HAL_GPIO_ReadPin>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d109      	bne.n	800e30c <LidarSetPos+0x83c>
						{
							pp.target_y[0] = pp.real_y;
 800e2f8:	4b68      	ldr	r3, [pc, #416]	; (800e49c <LidarSetPos+0x9cc>)
 800e2fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2fc:	4a67      	ldr	r2, [pc, #412]	; (800e49c <LidarSetPos+0x9cc>)
 800e2fe:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800e302:	4b66      	ldr	r3, [pc, #408]	; (800e49c <LidarSetPos+0x9cc>)
 800e304:	f04f 0200 	mov.w	r2, #0
 800e308:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
						}

						if(ps4.button == SQUARE)
 800e30c:	4b64      	ldr	r3, [pc, #400]	; (800e4a0 <LidarSetPos+0x9d0>)
 800e30e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e314:	d108      	bne.n	800e328 <LidarSetPos+0x858>
						{
							while(ps4.button == SQUARE);
 800e316:	bf00      	nop
 800e318:	4b61      	ldr	r3, [pc, #388]	; (800e4a0 <LidarSetPos+0x9d0>)
 800e31a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e31c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e320:	d0fa      	beq.n	800e318 <LidarSetPos+0x848>
							PP_stop(&pp);
 800e322:	485e      	ldr	r0, [pc, #376]	; (800e49c <LidarSetPos+0x9cc>)
 800e324:	f7f7 fd69 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800e328:	4b5c      	ldr	r3, [pc, #368]	; (800e49c <LidarSetPos+0x9cc>)
 800e32a:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e32e:	f003 0301 	and.w	r3, r3, #1
 800e332:	b2db      	uxtb	r3, r3
 800e334:	2b00      	cmp	r3, #0
 800e336:	d1d1      	bne.n	800e2dc <LidarSetPos+0x80c>
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}

					stick_fence = 1;
 800e338:	4b53      	ldr	r3, [pc, #332]	; (800e488 <LidarSetPos+0x9b8>)
 800e33a:	2201      	movs	r2, #1
 800e33c:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800e33e:	463b      	mov	r3, r7
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e346:	1dfa      	adds	r2, r7, #7
 800e348:	7812      	ldrb	r2, [r2, #0]
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d160      	bne.n	800e410 <LidarSetPos+0x940>
						LidarAdjust(lidar);
 800e34e:	463b      	mov	r3, r7
 800e350:	6818      	ldr	r0, [r3, #0]
 800e352:	f001 fc13 	bl	800fb7c <LidarAdjust>
					break;
 800e356:	e05b      	b.n	800e410 <LidarSetPos+0x940>

				case CENTER:
					stick_fence = 0;
 800e358:	4b4b      	ldr	r3, [pc, #300]	; (800e488 <LidarSetPos+0x9b8>)
 800e35a:	2200      	movs	r2, #0
 800e35c:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800e35e:	4b4b      	ldr	r3, [pc, #300]	; (800e48c <LidarSetPos+0x9bc>)
 800e360:	4a4b      	ldr	r2, [pc, #300]	; (800e490 <LidarSetPos+0x9c0>)
 800e362:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800e364:	4b4b      	ldr	r3, [pc, #300]	; (800e494 <LidarSetPos+0x9c4>)
 800e366:	4a4c      	ldr	r2, [pc, #304]	; (800e498 <LidarSetPos+0x9c8>)
 800e368:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800e36a:	f7fe f817 	bl	800c39c <ResetCoordinate>
					lidar->pos = CENTER_1;
 800e36e:	463b      	mov	r3, r7
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	2203      	movs	r2, #3
 800e374:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_to_center_1, 1, &pp);
 800e378:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800e37c:	4a47      	ldr	r2, [pc, #284]	; (800e49c <LidarSetPos+0x9cc>)
 800e37e:	2101      	movs	r1, #1
 800e380:	4618      	mov	r0, r3
 800e382:	f7f7 fb00 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800e386:	e025      	b.n	800e3d4 <LidarSetPos+0x904>
					{
						if(ps4.button == SQUARE)
 800e388:	4b45      	ldr	r3, [pc, #276]	; (800e4a0 <LidarSetPos+0x9d0>)
 800e38a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e38c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e390:	d108      	bne.n	800e3a4 <LidarSetPos+0x8d4>
						{
							while(ps4.button == SQUARE);
 800e392:	bf00      	nop
 800e394:	4b42      	ldr	r3, [pc, #264]	; (800e4a0 <LidarSetPos+0x9d0>)
 800e396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e39c:	d0fa      	beq.n	800e394 <LidarSetPos+0x8c4>
							PP_stop(&pp);
 800e39e:	483f      	ldr	r0, [pc, #252]	; (800e49c <LidarSetPos+0x9cc>)
 800e3a0:	f7f7 fd2b 	bl	8005dfa <PP_stop>
//							lidar->pos = CENTER; // PP Failed
//							lidar->pos_counter = CENTER;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e3a4:	2108      	movs	r1, #8
 800e3a6:	483f      	ldr	r0, [pc, #252]	; (800e4a4 <LidarSetPos+0x9d4>)
 800e3a8:	f003 ffd2 	bl	8012350 <HAL_GPIO_ReadPin>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d006      	beq.n	800e3c0 <LidarSetPos+0x8f0>
 800e3b2:	2110      	movs	r1, #16
 800e3b4:	483b      	ldr	r0, [pc, #236]	; (800e4a4 <LidarSetPos+0x9d4>)
 800e3b6:	f003 ffcb 	bl	8012350 <HAL_GPIO_ReadPin>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d109      	bne.n	800e3d4 <LidarSetPos+0x904>
						{
							pp.target_y[0] = pp.real_y;
 800e3c0:	4b36      	ldr	r3, [pc, #216]	; (800e49c <LidarSetPos+0x9cc>)
 800e3c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3c4:	4a35      	ldr	r2, [pc, #212]	; (800e49c <LidarSetPos+0x9cc>)
 800e3c6:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800e3ca:	4b34      	ldr	r3, [pc, #208]	; (800e49c <LidarSetPos+0x9cc>)
 800e3cc:	f04f 0200 	mov.w	r2, #0
 800e3d0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800e3d4:	4b31      	ldr	r3, [pc, #196]	; (800e49c <LidarSetPos+0x9cc>)
 800e3d6:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e3da:	f003 0301 	and.w	r3, r3, #1
 800e3de:	b2db      	uxtb	r3, r3
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d1d1      	bne.n	800e388 <LidarSetPos+0x8b8>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800e3e4:	4b28      	ldr	r3, [pc, #160]	; (800e488 <LidarSetPos+0x9b8>)
 800e3e6:	2201      	movs	r2, #1
 800e3e8:	601a      	str	r2, [r3, #0]




					// Only adjust after reached destination
					if(lidar->pos == pose)
 800e3ea:	463b      	mov	r3, r7
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e3f2:	1dfa      	adds	r2, r7, #7
 800e3f4:	7812      	ldrb	r2, [r2, #0]
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	d10d      	bne.n	800e416 <LidarSetPos+0x946>
						LidarAdjust(lidar);
 800e3fa:	463b      	mov	r3, r7
 800e3fc:	6818      	ldr	r0, [r3, #0]
 800e3fe:	f001 fbbd 	bl	800fb7c <LidarAdjust>
					break;
 800e402:	e008      	b.n	800e416 <LidarSetPos+0x946>

				default:
					break;
 800e404:	bf00      	nop
 800e406:	f001 bb9c 	b.w	800fb42 <LidarSetPos+0x2072>
					break;
 800e40a:	bf00      	nop
 800e40c:	f001 bb99 	b.w	800fb42 <LidarSetPos+0x2072>
					break;
 800e410:	bf00      	nop
 800e412:	f001 bb96 	b.w	800fb42 <LidarSetPos+0x2072>
					break;
 800e416:	bf00      	nop
			}
			break;
 800e418:	f001 bb93 	b.w	800fb42 <LidarSetPos+0x2072>

		case CENTER_2:
			switch(lidar->pos) // Self Pose
 800e41c:	463b      	mov	r3, r7
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e424:	3b01      	subs	r3, #1
 800e426:	2b08      	cmp	r3, #8
 800e428:	f200 8174 	bhi.w	800e714 <LidarSetPos+0xc44>
 800e42c:	a201      	add	r2, pc, #4	; (adr r2, 800e434 <LidarSetPos+0x964>)
 800e42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e432:	bf00      	nop
 800e434:	0800e459 	.word	0x0800e459
 800e438:	0800e471 	.word	0x0800e471
 800e43c:	0800e4a9 	.word	0x0800e4a9
 800e440:	0800e715 	.word	0x0800e715
 800e444:	0800e56d 	.word	0x0800e56d
 800e448:	0800e655 	.word	0x0800e655
 800e44c:	0800e715 	.word	0x0800e715
 800e450:	0800e47d 	.word	0x0800e47d
 800e454:	0800e465 	.word	0x0800e465
			{
				case PICK_LEFT:
					lidar->pos = CENTER_2;
 800e458:	463b      	mov	r3, r7
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	2204      	movs	r2, #4
 800e45e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e462:	e15e      	b.n	800e722 <LidarSetPos+0xc52>

				case PICK_RIGHT:
					lidar->pos = CENTER_2;
 800e464:	463b      	mov	r3, r7
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2204      	movs	r2, #4
 800e46a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e46e:	e158      	b.n	800e722 <LidarSetPos+0xc52>

				case UPPER_LEFT:
					lidar->pos = CENTER_2;
 800e470:	463b      	mov	r3, r7
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	2204      	movs	r2, #4
 800e476:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e47a:	e152      	b.n	800e722 <LidarSetPos+0xc52>

				case UPPER_RIGHT:
					lidar->pos = CENTER_2;
 800e47c:	463b      	mov	r3, r7
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	2204      	movs	r2, #4
 800e482:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e486:	e14c      	b.n	800e722 <LidarSetPos+0xc52>
 800e488:	200072bc 	.word	0x200072bc
 800e48c:	20007380 	.word	0x20007380
 800e490:	3e2e147b 	.word	0x3e2e147b
 800e494:	2000659c 	.word	0x2000659c
 800e498:	40966666 	.word	0x40966666
 800e49c:	20006cc4 	.word	0x20006cc4
 800e4a0:	2000a014 	.word	0x2000a014
 800e4a4:	40020c00 	.word	0x40020c00

				case CENTER_1:
					stick_fence = 0;
 800e4a8:	4bb0      	ldr	r3, [pc, #704]	; (800e76c <LidarSetPos+0xc9c>)
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	601a      	str	r2, [r3, #0]
					if(blue)
 800e4ae:	4bb0      	ldr	r3, [pc, #704]	; (800e770 <LidarSetPos+0xca0>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d006      	beq.n	800e4c4 <LidarSetPos+0x9f4>
					{
						vesc_speed = BlueType2;
 800e4b6:	4baf      	ldr	r3, [pc, #700]	; (800e774 <LidarSetPos+0xca4>)
 800e4b8:	4aaf      	ldr	r2, [pc, #700]	; (800e778 <LidarSetPos+0xca8>)
 800e4ba:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 800e4bc:	4baf      	ldr	r3, [pc, #700]	; (800e77c <LidarSetPos+0xcac>)
 800e4be:	4ab0      	ldr	r2, [pc, #704]	; (800e780 <LidarSetPos+0xcb0>)
 800e4c0:	601a      	str	r2, [r3, #0]
 800e4c2:	e005      	b.n	800e4d0 <LidarSetPos+0xa00>
					}
					else
					{
						vesc_speed = RedType2;
 800e4c4:	4bab      	ldr	r3, [pc, #684]	; (800e774 <LidarSetPos+0xca4>)
 800e4c6:	4aaf      	ldr	r2, [pc, #700]	; (800e784 <LidarSetPos+0xcb4>)
 800e4c8:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 800e4ca:	4bac      	ldr	r3, [pc, #688]	; (800e77c <LidarSetPos+0xcac>)
 800e4cc:	4aae      	ldr	r2, [pc, #696]	; (800e788 <LidarSetPos+0xcb8>)
 800e4ce:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 800e4d0:	f7fd ff64 	bl	800c39c <ResetCoordinate>
					lidar->pos = CENTER_2;
 800e4d4:	463b      	mov	r3, r7
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	2204      	movs	r2, #4
 800e4da:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_1_to_center_2, 1, &pp);
 800e4de:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800e4e2:	4aaa      	ldr	r2, [pc, #680]	; (800e78c <LidarSetPos+0xcbc>)
 800e4e4:	2101      	movs	r1, #1
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7f7 fa4d 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800e4ec:	e025      	b.n	800e53a <LidarSetPos+0xa6a>
					{
						if(ps4.button == SQUARE)
 800e4ee:	4ba8      	ldr	r3, [pc, #672]	; (800e790 <LidarSetPos+0xcc0>)
 800e4f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e4f6:	d108      	bne.n	800e50a <LidarSetPos+0xa3a>
						{
							while(ps4.button == SQUARE);
 800e4f8:	bf00      	nop
 800e4fa:	4ba5      	ldr	r3, [pc, #660]	; (800e790 <LidarSetPos+0xcc0>)
 800e4fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e502:	d0fa      	beq.n	800e4fa <LidarSetPos+0xa2a>
							PP_stop(&pp);
 800e504:	48a1      	ldr	r0, [pc, #644]	; (800e78c <LidarSetPos+0xcbc>)
 800e506:	f7f7 fc78 	bl	8005dfa <PP_stop>
//							lidar->pos = CENTER_1;
//							lidar->pos_counter = CENTER_1;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e50a:	2108      	movs	r1, #8
 800e50c:	48a1      	ldr	r0, [pc, #644]	; (800e794 <LidarSetPos+0xcc4>)
 800e50e:	f003 ff1f 	bl	8012350 <HAL_GPIO_ReadPin>
 800e512:	4603      	mov	r3, r0
 800e514:	2b00      	cmp	r3, #0
 800e516:	d006      	beq.n	800e526 <LidarSetPos+0xa56>
 800e518:	2110      	movs	r1, #16
 800e51a:	489e      	ldr	r0, [pc, #632]	; (800e794 <LidarSetPos+0xcc4>)
 800e51c:	f003 ff18 	bl	8012350 <HAL_GPIO_ReadPin>
 800e520:	4603      	mov	r3, r0
 800e522:	2b00      	cmp	r3, #0
 800e524:	d109      	bne.n	800e53a <LidarSetPos+0xa6a>
						{
							pp.target_y[0] = pp.real_y;
 800e526:	4b99      	ldr	r3, [pc, #612]	; (800e78c <LidarSetPos+0xcbc>)
 800e528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e52a:	4a98      	ldr	r2, [pc, #608]	; (800e78c <LidarSetPos+0xcbc>)
 800e52c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800e530:	4b96      	ldr	r3, [pc, #600]	; (800e78c <LidarSetPos+0xcbc>)
 800e532:	f04f 0200 	mov.w	r2, #0
 800e536:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800e53a:	4b94      	ldr	r3, [pc, #592]	; (800e78c <LidarSetPos+0xcbc>)
 800e53c:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e540:	f003 0301 	and.w	r3, r3, #1
 800e544:	b2db      	uxtb	r3, r3
 800e546:	2b00      	cmp	r3, #0
 800e548:	d1d1      	bne.n	800e4ee <LidarSetPos+0xa1e>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800e54a:	4b88      	ldr	r3, [pc, #544]	; (800e76c <LidarSetPos+0xc9c>)
 800e54c:	2201      	movs	r2, #1
 800e54e:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800e550:	463b      	mov	r3, r7
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e558:	1dfa      	adds	r2, r7, #7
 800e55a:	7812      	ldrb	r2, [r2, #0]
 800e55c:	429a      	cmp	r2, r3
 800e55e:	f040 80dc 	bne.w	800e71a <LidarSetPos+0xc4a>
						LidarAdjust(lidar);
 800e562:	463b      	mov	r3, r7
 800e564:	6818      	ldr	r0, [r3, #0]
 800e566:	f001 fb09 	bl	800fb7c <LidarAdjust>
					break;
 800e56a:	e0d6      	b.n	800e71a <LidarSetPos+0xc4a>

				case CENTER:
					stick_fence = 0;
 800e56c:	4b7f      	ldr	r3, [pc, #508]	; (800e76c <LidarSetPos+0xc9c>)
 800e56e:	2200      	movs	r2, #0
 800e570:	601a      	str	r2, [r3, #0]
					if(blue)
 800e572:	4b7f      	ldr	r3, [pc, #508]	; (800e770 <LidarSetPos+0xca0>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d006      	beq.n	800e588 <LidarSetPos+0xab8>
					{
						vesc_speed = BlueType2;
 800e57a:	4b7e      	ldr	r3, [pc, #504]	; (800e774 <LidarSetPos+0xca4>)
 800e57c:	4a7e      	ldr	r2, [pc, #504]	; (800e778 <LidarSetPos+0xca8>)
 800e57e:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 800e580:	4b7e      	ldr	r3, [pc, #504]	; (800e77c <LidarSetPos+0xcac>)
 800e582:	4a7f      	ldr	r2, [pc, #508]	; (800e780 <LidarSetPos+0xcb0>)
 800e584:	601a      	str	r2, [r3, #0]
 800e586:	e005      	b.n	800e594 <LidarSetPos+0xac4>
					}
					else
					{
						vesc_speed = RedType2;
 800e588:	4b7a      	ldr	r3, [pc, #488]	; (800e774 <LidarSetPos+0xca4>)
 800e58a:	4a7e      	ldr	r2, [pc, #504]	; (800e784 <LidarSetPos+0xcb4>)
 800e58c:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 800e58e:	4b7b      	ldr	r3, [pc, #492]	; (800e77c <LidarSetPos+0xcac>)
 800e590:	4a7d      	ldr	r2, [pc, #500]	; (800e788 <LidarSetPos+0xcb8>)
 800e592:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 800e594:	f7fd ff02 	bl	800c39c <ResetCoordinate>
					lidar->pos = CENTER_2;
 800e598:	463b      	mov	r3, r7
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	2204      	movs	r2, #4
 800e59e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_to_center_2, 1, &pp);
 800e5a2:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 800e5a6:	4a79      	ldr	r2, [pc, #484]	; (800e78c <LidarSetPos+0xcbc>)
 800e5a8:	2101      	movs	r1, #1
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7f7 f9eb 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800e5b0:	e038      	b.n	800e624 <LidarSetPos+0xb54>
					{
						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e5b2:	2108      	movs	r1, #8
 800e5b4:	4877      	ldr	r0, [pc, #476]	; (800e794 <LidarSetPos+0xcc4>)
 800e5b6:	f003 fecb 	bl	8012350 <HAL_GPIO_ReadPin>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d006      	beq.n	800e5ce <LidarSetPos+0xafe>
 800e5c0:	2110      	movs	r1, #16
 800e5c2:	4874      	ldr	r0, [pc, #464]	; (800e794 <LidarSetPos+0xcc4>)
 800e5c4:	f003 fec4 	bl	8012350 <HAL_GPIO_ReadPin>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d104      	bne.n	800e5d8 <LidarSetPos+0xb08>
							pp.error_y = 0;
 800e5ce:	4b6f      	ldr	r3, [pc, #444]	; (800e78c <LidarSetPos+0xcbc>)
 800e5d0:	f04f 0200 	mov.w	r2, #0
 800e5d4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4

						if(ps4.button == SQUARE)
 800e5d8:	4b6d      	ldr	r3, [pc, #436]	; (800e790 <LidarSetPos+0xcc0>)
 800e5da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e5e0:	d108      	bne.n	800e5f4 <LidarSetPos+0xb24>
						{
							while(ps4.button == SQUARE);
 800e5e2:	bf00      	nop
 800e5e4:	4b6a      	ldr	r3, [pc, #424]	; (800e790 <LidarSetPos+0xcc0>)
 800e5e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e5ec:	d0fa      	beq.n	800e5e4 <LidarSetPos+0xb14>
							PP_stop(&pp);
 800e5ee:	4867      	ldr	r0, [pc, #412]	; (800e78c <LidarSetPos+0xcbc>)
 800e5f0:	f7f7 fc03 	bl	8005dfa <PP_stop>
//							lidar->pos = CENTER;
//							lidar->pos_counter = CENTER;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e5f4:	2108      	movs	r1, #8
 800e5f6:	4867      	ldr	r0, [pc, #412]	; (800e794 <LidarSetPos+0xcc4>)
 800e5f8:	f003 feaa 	bl	8012350 <HAL_GPIO_ReadPin>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d006      	beq.n	800e610 <LidarSetPos+0xb40>
 800e602:	2110      	movs	r1, #16
 800e604:	4863      	ldr	r0, [pc, #396]	; (800e794 <LidarSetPos+0xcc4>)
 800e606:	f003 fea3 	bl	8012350 <HAL_GPIO_ReadPin>
 800e60a:	4603      	mov	r3, r0
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d109      	bne.n	800e624 <LidarSetPos+0xb54>
						{
							pp.target_y[0] = pp.real_y;
 800e610:	4b5e      	ldr	r3, [pc, #376]	; (800e78c <LidarSetPos+0xcbc>)
 800e612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e614:	4a5d      	ldr	r2, [pc, #372]	; (800e78c <LidarSetPos+0xcbc>)
 800e616:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800e61a:	4b5c      	ldr	r3, [pc, #368]	; (800e78c <LidarSetPos+0xcbc>)
 800e61c:	f04f 0200 	mov.w	r2, #0
 800e620:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800e624:	4b59      	ldr	r3, [pc, #356]	; (800e78c <LidarSetPos+0xcbc>)
 800e626:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e62a:	f003 0301 	and.w	r3, r3, #1
 800e62e:	b2db      	uxtb	r3, r3
 800e630:	2b00      	cmp	r3, #0
 800e632:	d1be      	bne.n	800e5b2 <LidarSetPos+0xae2>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800e634:	4b4d      	ldr	r3, [pc, #308]	; (800e76c <LidarSetPos+0xc9c>)
 800e636:	2201      	movs	r2, #1
 800e638:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800e63a:	463b      	mov	r3, r7
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e642:	1dfa      	adds	r2, r7, #7
 800e644:	7812      	ldrb	r2, [r2, #0]
 800e646:	429a      	cmp	r2, r3
 800e648:	d16a      	bne.n	800e720 <LidarSetPos+0xc50>
						LidarAdjust(lidar);
 800e64a:	463b      	mov	r3, r7
 800e64c:	6818      	ldr	r0, [r3, #0]
 800e64e:	f001 fa95 	bl	800fb7c <LidarAdjust>
					break;
 800e652:	e065      	b.n	800e720 <LidarSetPos+0xc50>

				case CENTER_3:
					stick_fence = 0;
 800e654:	4b45      	ldr	r3, [pc, #276]	; (800e76c <LidarSetPos+0xc9c>)
 800e656:	2200      	movs	r2, #0
 800e658:	601a      	str	r2, [r3, #0]
					if(blue)
 800e65a:	4b45      	ldr	r3, [pc, #276]	; (800e770 <LidarSetPos+0xca0>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d006      	beq.n	800e670 <LidarSetPos+0xba0>
					{
						vesc_speed = BlueType2;
 800e662:	4b44      	ldr	r3, [pc, #272]	; (800e774 <LidarSetPos+0xca4>)
 800e664:	4a44      	ldr	r2, [pc, #272]	; (800e778 <LidarSetPos+0xca8>)
 800e666:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 800e668:	4b44      	ldr	r3, [pc, #272]	; (800e77c <LidarSetPos+0xcac>)
 800e66a:	4a45      	ldr	r2, [pc, #276]	; (800e780 <LidarSetPos+0xcb0>)
 800e66c:	601a      	str	r2, [r3, #0]
 800e66e:	e005      	b.n	800e67c <LidarSetPos+0xbac>
					}
					else
					{
						vesc_speed = RedType2;
 800e670:	4b40      	ldr	r3, [pc, #256]	; (800e774 <LidarSetPos+0xca4>)
 800e672:	4a44      	ldr	r2, [pc, #272]	; (800e784 <LidarSetPos+0xcb4>)
 800e674:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 800e676:	4b41      	ldr	r3, [pc, #260]	; (800e77c <LidarSetPos+0xcac>)
 800e678:	4a43      	ldr	r2, [pc, #268]	; (800e788 <LidarSetPos+0xcb8>)
 800e67a:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 800e67c:	f7fd fe8e 	bl	800c39c <ResetCoordinate>
					lidar->pos = CENTER_2;
 800e680:	463b      	mov	r3, r7
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	2204      	movs	r2, #4
 800e686:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_3_to_center_2, 1, &pp);
 800e68a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e68e:	4a3f      	ldr	r2, [pc, #252]	; (800e78c <LidarSetPos+0xcbc>)
 800e690:	2101      	movs	r1, #1
 800e692:	4618      	mov	r0, r3
 800e694:	f7f7 f977 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800e698:	e025      	b.n	800e6e6 <LidarSetPos+0xc16>
					{
						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e69a:	2108      	movs	r1, #8
 800e69c:	483d      	ldr	r0, [pc, #244]	; (800e794 <LidarSetPos+0xcc4>)
 800e69e:	f003 fe57 	bl	8012350 <HAL_GPIO_ReadPin>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d006      	beq.n	800e6b6 <LidarSetPos+0xbe6>
 800e6a8:	2110      	movs	r1, #16
 800e6aa:	483a      	ldr	r0, [pc, #232]	; (800e794 <LidarSetPos+0xcc4>)
 800e6ac:	f003 fe50 	bl	8012350 <HAL_GPIO_ReadPin>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d109      	bne.n	800e6ca <LidarSetPos+0xbfa>
						{
							pp.target_y[0] = pp.real_y;
 800e6b6:	4b35      	ldr	r3, [pc, #212]	; (800e78c <LidarSetPos+0xcbc>)
 800e6b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6ba:	4a34      	ldr	r2, [pc, #208]	; (800e78c <LidarSetPos+0xcbc>)
 800e6bc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800e6c0:	4b32      	ldr	r3, [pc, #200]	; (800e78c <LidarSetPos+0xcbc>)
 800e6c2:	f04f 0200 	mov.w	r2, #0
 800e6c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
						}

						if(ps4.button == SQUARE)
 800e6ca:	4b31      	ldr	r3, [pc, #196]	; (800e790 <LidarSetPos+0xcc0>)
 800e6cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e6d2:	d108      	bne.n	800e6e6 <LidarSetPos+0xc16>
						{
							while(ps4.button == SQUARE);
 800e6d4:	bf00      	nop
 800e6d6:	4b2e      	ldr	r3, [pc, #184]	; (800e790 <LidarSetPos+0xcc0>)
 800e6d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e6de:	d0fa      	beq.n	800e6d6 <LidarSetPos+0xc06>
							PP_stop(&pp);
 800e6e0:	482a      	ldr	r0, [pc, #168]	; (800e78c <LidarSetPos+0xcbc>)
 800e6e2:	f7f7 fb8a 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800e6e6:	4b29      	ldr	r3, [pc, #164]	; (800e78c <LidarSetPos+0xcbc>)
 800e6e8:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e6ec:	f003 0301 	and.w	r3, r3, #1
 800e6f0:	b2db      	uxtb	r3, r3
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d1d1      	bne.n	800e69a <LidarSetPos+0xbca>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800e6f6:	4b1d      	ldr	r3, [pc, #116]	; (800e76c <LidarSetPos+0xc9c>)
 800e6f8:	2201      	movs	r2, #1
 800e6fa:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800e6fc:	463b      	mov	r3, r7
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e704:	1dfa      	adds	r2, r7, #7
 800e706:	7812      	ldrb	r2, [r2, #0]
 800e708:	429a      	cmp	r2, r3
 800e70a:	d103      	bne.n	800e714 <LidarSetPos+0xc44>
						LidarAdjust(lidar);
 800e70c:	463b      	mov	r3, r7
 800e70e:	6818      	ldr	r0, [r3, #0]
 800e710:	f001 fa34 	bl	800fb7c <LidarAdjust>

				default:
					break;
 800e714:	bf00      	nop
 800e716:	f001 ba14 	b.w	800fb42 <LidarSetPos+0x2072>
					break;
 800e71a:	bf00      	nop
 800e71c:	f001 ba11 	b.w	800fb42 <LidarSetPos+0x2072>
					break;
 800e720:	bf00      	nop
			}
			break;
 800e722:	f001 ba0e 	b.w	800fb42 <LidarSetPos+0x2072>

		case CENTER:
			switch(lidar->pos) // Self Pose
 800e726:	463b      	mov	r3, r7
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e72e:	3b01      	subs	r3, #1
 800e730:	2b08      	cmp	r3, #8
 800e732:	f200 819c 	bhi.w	800ea6e <LidarSetPos+0xf9e>
 800e736:	a201      	add	r2, pc, #4	; (adr r2, 800e73c <LidarSetPos+0xc6c>)
 800e738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e73c:	0800e761 	.word	0x0800e761
 800e740:	0800e7a5 	.word	0x0800e7a5
 800e744:	0800e7bd 	.word	0x0800e7bd
 800e748:	0800e86b 	.word	0x0800e86b
 800e74c:	0800ea6f 	.word	0x0800ea6f
 800e750:	0800e919 	.word	0x0800e919
 800e754:	0800e9c5 	.word	0x0800e9c5
 800e758:	0800e7b1 	.word	0x0800e7b1
 800e75c:	0800e799 	.word	0x0800e799
			{
				case PICK_LEFT:
					lidar->pos = CENTER;
 800e760:	463b      	mov	r3, r7
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	2205      	movs	r2, #5
 800e766:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e76a:	e18a      	b.n	800ea82 <LidarSetPos+0xfb2>
 800e76c:	200072bc 	.word	0x200072bc
 800e770:	20006a1c 	.word	0x20006a1c
 800e774:	2000659c 	.word	0x2000659c
 800e778:	41026666 	.word	0x41026666
 800e77c:	20007380 	.word	0x20007380
 800e780:	3e8ccccd 	.word	0x3e8ccccd
 800e784:	41033333 	.word	0x41033333
 800e788:	3e8a3d71 	.word	0x3e8a3d71
 800e78c:	20006cc4 	.word	0x20006cc4
 800e790:	2000a014 	.word	0x2000a014
 800e794:	40020c00 	.word	0x40020c00

				case PICK_RIGHT:
					lidar->pos = CENTER;
 800e798:	463b      	mov	r3, r7
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	2205      	movs	r2, #5
 800e79e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e7a2:	e16e      	b.n	800ea82 <LidarSetPos+0xfb2>

				case UPPER_LEFT:
					lidar->pos = CENTER;
 800e7a4:	463b      	mov	r3, r7
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	2205      	movs	r2, #5
 800e7aa:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e7ae:	e168      	b.n	800ea82 <LidarSetPos+0xfb2>

				case UPPER_RIGHT:
					lidar->pos = CENTER;
 800e7b0:	463b      	mov	r3, r7
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	2205      	movs	r2, #5
 800e7b6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e7ba:	e162      	b.n	800ea82 <LidarSetPos+0xfb2>

				case CENTER_1:
					stick_fence = 0;
 800e7bc:	4bb2      	ldr	r3, [pc, #712]	; (800ea88 <LidarSetPos+0xfb8>)
 800e7be:	2200      	movs	r2, #0
 800e7c0:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800e7c2:	4bb2      	ldr	r3, [pc, #712]	; (800ea8c <LidarSetPos+0xfbc>)
 800e7c4:	4ab2      	ldr	r2, [pc, #712]	; (800ea90 <LidarSetPos+0xfc0>)
 800e7c6:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800e7c8:	4bb2      	ldr	r3, [pc, #712]	; (800ea94 <LidarSetPos+0xfc4>)
 800e7ca:	4ab3      	ldr	r2, [pc, #716]	; (800ea98 <LidarSetPos+0xfc8>)
 800e7cc:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800e7ce:	f7fd fde5 	bl	800c39c <ResetCoordinate>
					lidar->pos = CENTER;
 800e7d2:	463b      	mov	r3, r7
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	2205      	movs	r2, #5
 800e7d8:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_1_to_center, 1, &pp);
 800e7dc:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800e7e0:	4aae      	ldr	r2, [pc, #696]	; (800ea9c <LidarSetPos+0xfcc>)
 800e7e2:	2101      	movs	r1, #1
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f7f7 f8ce 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800e7ea:	e025      	b.n	800e838 <LidarSetPos+0xd68>
					{
						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e7ec:	2108      	movs	r1, #8
 800e7ee:	48ac      	ldr	r0, [pc, #688]	; (800eaa0 <LidarSetPos+0xfd0>)
 800e7f0:	f003 fdae 	bl	8012350 <HAL_GPIO_ReadPin>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d006      	beq.n	800e808 <LidarSetPos+0xd38>
 800e7fa:	2110      	movs	r1, #16
 800e7fc:	48a8      	ldr	r0, [pc, #672]	; (800eaa0 <LidarSetPos+0xfd0>)
 800e7fe:	f003 fda7 	bl	8012350 <HAL_GPIO_ReadPin>
 800e802:	4603      	mov	r3, r0
 800e804:	2b00      	cmp	r3, #0
 800e806:	d109      	bne.n	800e81c <LidarSetPos+0xd4c>
						{
							pp.target_y[0] = pp.real_y;
 800e808:	4ba4      	ldr	r3, [pc, #656]	; (800ea9c <LidarSetPos+0xfcc>)
 800e80a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e80c:	4aa3      	ldr	r2, [pc, #652]	; (800ea9c <LidarSetPos+0xfcc>)
 800e80e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800e812:	4ba2      	ldr	r3, [pc, #648]	; (800ea9c <LidarSetPos+0xfcc>)
 800e814:	f04f 0200 	mov.w	r2, #0
 800e818:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
						}

						if(ps4.button == SQUARE)
 800e81c:	4ba1      	ldr	r3, [pc, #644]	; (800eaa4 <LidarSetPos+0xfd4>)
 800e81e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e824:	d108      	bne.n	800e838 <LidarSetPos+0xd68>
						{
							while(ps4.button == SQUARE);
 800e826:	bf00      	nop
 800e828:	4b9e      	ldr	r3, [pc, #632]	; (800eaa4 <LidarSetPos+0xfd4>)
 800e82a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e82c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e830:	d0fa      	beq.n	800e828 <LidarSetPos+0xd58>
							PP_stop(&pp);
 800e832:	489a      	ldr	r0, [pc, #616]	; (800ea9c <LidarSetPos+0xfcc>)
 800e834:	f7f7 fae1 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800e838:	4b98      	ldr	r3, [pc, #608]	; (800ea9c <LidarSetPos+0xfcc>)
 800e83a:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e83e:	f003 0301 	and.w	r3, r3, #1
 800e842:	b2db      	uxtb	r3, r3
 800e844:	2b00      	cmp	r3, #0
 800e846:	d1d1      	bne.n	800e7ec <LidarSetPos+0xd1c>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800e848:	4b8f      	ldr	r3, [pc, #572]	; (800ea88 <LidarSetPos+0xfb8>)
 800e84a:	2201      	movs	r2, #1
 800e84c:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800e84e:	463b      	mov	r3, r7
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e856:	1dfa      	adds	r2, r7, #7
 800e858:	7812      	ldrb	r2, [r2, #0]
 800e85a:	429a      	cmp	r2, r3
 800e85c:	f040 810a 	bne.w	800ea74 <LidarSetPos+0xfa4>
						LidarAdjust(lidar);
 800e860:	463b      	mov	r3, r7
 800e862:	6818      	ldr	r0, [r3, #0]
 800e864:	f001 f98a 	bl	800fb7c <LidarAdjust>
					break;
 800e868:	e104      	b.n	800ea74 <LidarSetPos+0xfa4>


				case CENTER_2:
					stick_fence = 0;
 800e86a:	4b87      	ldr	r3, [pc, #540]	; (800ea88 <LidarSetPos+0xfb8>)
 800e86c:	2200      	movs	r2, #0
 800e86e:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800e870:	4b86      	ldr	r3, [pc, #536]	; (800ea8c <LidarSetPos+0xfbc>)
 800e872:	4a87      	ldr	r2, [pc, #540]	; (800ea90 <LidarSetPos+0xfc0>)
 800e874:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800e876:	4b87      	ldr	r3, [pc, #540]	; (800ea94 <LidarSetPos+0xfc4>)
 800e878:	4a87      	ldr	r2, [pc, #540]	; (800ea98 <LidarSetPos+0xfc8>)
 800e87a:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800e87c:	f7fd fd8e 	bl	800c39c <ResetCoordinate>
					lidar->pos = CENTER;
 800e880:	463b      	mov	r3, r7
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	2205      	movs	r2, #5
 800e886:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_2_to_center, 1, &pp);
 800e88a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800e88e:	4a83      	ldr	r2, [pc, #524]	; (800ea9c <LidarSetPos+0xfcc>)
 800e890:	2101      	movs	r1, #1
 800e892:	4618      	mov	r0, r3
 800e894:	f7f7 f877 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800e898:	e025      	b.n	800e8e6 <LidarSetPos+0xe16>
					{
						if(ps4.button == SQUARE)
 800e89a:	4b82      	ldr	r3, [pc, #520]	; (800eaa4 <LidarSetPos+0xfd4>)
 800e89c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e89e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8a2:	d108      	bne.n	800e8b6 <LidarSetPos+0xde6>
						{
							while(ps4.button == SQUARE);
 800e8a4:	bf00      	nop
 800e8a6:	4b7f      	ldr	r3, [pc, #508]	; (800eaa4 <LidarSetPos+0xfd4>)
 800e8a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8ae:	d0fa      	beq.n	800e8a6 <LidarSetPos+0xdd6>
							PP_stop(&pp);
 800e8b0:	487a      	ldr	r0, [pc, #488]	; (800ea9c <LidarSetPos+0xfcc>)
 800e8b2:	f7f7 faa2 	bl	8005dfa <PP_stop>
//							lidar->pos = CENTER_2;
//							lidar->pos_counter = CENTER_2;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e8b6:	2108      	movs	r1, #8
 800e8b8:	4879      	ldr	r0, [pc, #484]	; (800eaa0 <LidarSetPos+0xfd0>)
 800e8ba:	f003 fd49 	bl	8012350 <HAL_GPIO_ReadPin>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d006      	beq.n	800e8d2 <LidarSetPos+0xe02>
 800e8c4:	2110      	movs	r1, #16
 800e8c6:	4876      	ldr	r0, [pc, #472]	; (800eaa0 <LidarSetPos+0xfd0>)
 800e8c8:	f003 fd42 	bl	8012350 <HAL_GPIO_ReadPin>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d109      	bne.n	800e8e6 <LidarSetPos+0xe16>
						{
							pp.target_y[0] = pp.real_y;
 800e8d2:	4b72      	ldr	r3, [pc, #456]	; (800ea9c <LidarSetPos+0xfcc>)
 800e8d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8d6:	4a71      	ldr	r2, [pc, #452]	; (800ea9c <LidarSetPos+0xfcc>)
 800e8d8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800e8dc:	4b6f      	ldr	r3, [pc, #444]	; (800ea9c <LidarSetPos+0xfcc>)
 800e8de:	f04f 0200 	mov.w	r2, #0
 800e8e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800e8e6:	4b6d      	ldr	r3, [pc, #436]	; (800ea9c <LidarSetPos+0xfcc>)
 800e8e8:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e8ec:	f003 0301 	and.w	r3, r3, #1
 800e8f0:	b2db      	uxtb	r3, r3
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d1d1      	bne.n	800e89a <LidarSetPos+0xdca>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800e8f6:	4b64      	ldr	r3, [pc, #400]	; (800ea88 <LidarSetPos+0xfb8>)
 800e8f8:	2201      	movs	r2, #1
 800e8fa:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800e8fc:	463b      	mov	r3, r7
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e904:	1dfa      	adds	r2, r7, #7
 800e906:	7812      	ldrb	r2, [r2, #0]
 800e908:	429a      	cmp	r2, r3
 800e90a:	f040 80b6 	bne.w	800ea7a <LidarSetPos+0xfaa>
						LidarAdjust(lidar);
 800e90e:	463b      	mov	r3, r7
 800e910:	6818      	ldr	r0, [r3, #0]
 800e912:	f001 f933 	bl	800fb7c <LidarAdjust>
					break;
 800e916:	e0b0      	b.n	800ea7a <LidarSetPos+0xfaa>

				case CENTER_3:
					stick_fence = 0;
 800e918:	4b5b      	ldr	r3, [pc, #364]	; (800ea88 <LidarSetPos+0xfb8>)
 800e91a:	2200      	movs	r2, #0
 800e91c:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800e91e:	4b5b      	ldr	r3, [pc, #364]	; (800ea8c <LidarSetPos+0xfbc>)
 800e920:	4a5b      	ldr	r2, [pc, #364]	; (800ea90 <LidarSetPos+0xfc0>)
 800e922:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800e924:	4b5b      	ldr	r3, [pc, #364]	; (800ea94 <LidarSetPos+0xfc4>)
 800e926:	4a5c      	ldr	r2, [pc, #368]	; (800ea98 <LidarSetPos+0xfc8>)
 800e928:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800e92a:	f7fd fd37 	bl	800c39c <ResetCoordinate>
					lidar->pos = CENTER;
 800e92e:	463b      	mov	r3, r7
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	2205      	movs	r2, #5
 800e934:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_3_to_center, 1, &pp);
 800e938:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800e93c:	4a57      	ldr	r2, [pc, #348]	; (800ea9c <LidarSetPos+0xfcc>)
 800e93e:	2101      	movs	r1, #1
 800e940:	4618      	mov	r0, r3
 800e942:	f7f7 f820 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800e946:	e025      	b.n	800e994 <LidarSetPos+0xec4>
					{
						if(ps4.button == SQUARE)
 800e948:	4b56      	ldr	r3, [pc, #344]	; (800eaa4 <LidarSetPos+0xfd4>)
 800e94a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e94c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e950:	d108      	bne.n	800e964 <LidarSetPos+0xe94>
						{
							while(ps4.button == SQUARE);
 800e952:	bf00      	nop
 800e954:	4b53      	ldr	r3, [pc, #332]	; (800eaa4 <LidarSetPos+0xfd4>)
 800e956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e95c:	d0fa      	beq.n	800e954 <LidarSetPos+0xe84>
							PP_stop(&pp);
 800e95e:	484f      	ldr	r0, [pc, #316]	; (800ea9c <LidarSetPos+0xfcc>)
 800e960:	f7f7 fa4b 	bl	8005dfa <PP_stop>
//							lidar->pos = CENTER_3;
//							lidar->pos_counter = CENTER_3;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e964:	2108      	movs	r1, #8
 800e966:	484e      	ldr	r0, [pc, #312]	; (800eaa0 <LidarSetPos+0xfd0>)
 800e968:	f003 fcf2 	bl	8012350 <HAL_GPIO_ReadPin>
 800e96c:	4603      	mov	r3, r0
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d006      	beq.n	800e980 <LidarSetPos+0xeb0>
 800e972:	2110      	movs	r1, #16
 800e974:	484a      	ldr	r0, [pc, #296]	; (800eaa0 <LidarSetPos+0xfd0>)
 800e976:	f003 fceb 	bl	8012350 <HAL_GPIO_ReadPin>
 800e97a:	4603      	mov	r3, r0
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d109      	bne.n	800e994 <LidarSetPos+0xec4>
						{
							pp.target_y[0] = pp.real_y;
 800e980:	4b46      	ldr	r3, [pc, #280]	; (800ea9c <LidarSetPos+0xfcc>)
 800e982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e984:	4a45      	ldr	r2, [pc, #276]	; (800ea9c <LidarSetPos+0xfcc>)
 800e986:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800e98a:	4b44      	ldr	r3, [pc, #272]	; (800ea9c <LidarSetPos+0xfcc>)
 800e98c:	f04f 0200 	mov.w	r2, #0
 800e990:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800e994:	4b41      	ldr	r3, [pc, #260]	; (800ea9c <LidarSetPos+0xfcc>)
 800e996:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e99a:	f003 0301 	and.w	r3, r3, #1
 800e99e:	b2db      	uxtb	r3, r3
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d1d1      	bne.n	800e948 <LidarSetPos+0xe78>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800e9a4:	4b38      	ldr	r3, [pc, #224]	; (800ea88 <LidarSetPos+0xfb8>)
 800e9a6:	2201      	movs	r2, #1
 800e9a8:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800e9aa:	463b      	mov	r3, r7
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e9b2:	1dfa      	adds	r2, r7, #7
 800e9b4:	7812      	ldrb	r2, [r2, #0]
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d162      	bne.n	800ea80 <LidarSetPos+0xfb0>
						LidarAdjust(lidar);
 800e9ba:	463b      	mov	r3, r7
 800e9bc:	6818      	ldr	r0, [r3, #0]
 800e9be:	f001 f8dd 	bl	800fb7c <LidarAdjust>
					break;
 800e9c2:	e05d      	b.n	800ea80 <LidarSetPos+0xfb0>

				case CENTER_4:
					stick_fence = 0;
 800e9c4:	4b30      	ldr	r3, [pc, #192]	; (800ea88 <LidarSetPos+0xfb8>)
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800e9ca:	4b30      	ldr	r3, [pc, #192]	; (800ea8c <LidarSetPos+0xfbc>)
 800e9cc:	4a30      	ldr	r2, [pc, #192]	; (800ea90 <LidarSetPos+0xfc0>)
 800e9ce:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800e9d0:	4b30      	ldr	r3, [pc, #192]	; (800ea94 <LidarSetPos+0xfc4>)
 800e9d2:	4a31      	ldr	r2, [pc, #196]	; (800ea98 <LidarSetPos+0xfc8>)
 800e9d4:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800e9d6:	f7fd fce1 	bl	800c39c <ResetCoordinate>
					lidar->pos = CENTER;
 800e9da:	463b      	mov	r3, r7
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	2205      	movs	r2, #5
 800e9e0:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_4_to_center, 1, &pp);
 800e9e4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800e9e8:	4a2c      	ldr	r2, [pc, #176]	; (800ea9c <LidarSetPos+0xfcc>)
 800e9ea:	2101      	movs	r1, #1
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f7f6 ffca 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800e9f2:	e025      	b.n	800ea40 <LidarSetPos+0xf70>
					{
						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e9f4:	2108      	movs	r1, #8
 800e9f6:	482a      	ldr	r0, [pc, #168]	; (800eaa0 <LidarSetPos+0xfd0>)
 800e9f8:	f003 fcaa 	bl	8012350 <HAL_GPIO_ReadPin>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d006      	beq.n	800ea10 <LidarSetPos+0xf40>
 800ea02:	2110      	movs	r1, #16
 800ea04:	4826      	ldr	r0, [pc, #152]	; (800eaa0 <LidarSetPos+0xfd0>)
 800ea06:	f003 fca3 	bl	8012350 <HAL_GPIO_ReadPin>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d109      	bne.n	800ea24 <LidarSetPos+0xf54>
						{
							pp.target_y[0] = pp.real_y;
 800ea10:	4b22      	ldr	r3, [pc, #136]	; (800ea9c <LidarSetPos+0xfcc>)
 800ea12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea14:	4a21      	ldr	r2, [pc, #132]	; (800ea9c <LidarSetPos+0xfcc>)
 800ea16:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800ea1a:	4b20      	ldr	r3, [pc, #128]	; (800ea9c <LidarSetPos+0xfcc>)
 800ea1c:	f04f 0200 	mov.w	r2, #0
 800ea20:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
						}

						if(ps4.button == SQUARE)
 800ea24:	4b1f      	ldr	r3, [pc, #124]	; (800eaa4 <LidarSetPos+0xfd4>)
 800ea26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea2c:	d108      	bne.n	800ea40 <LidarSetPos+0xf70>
						{
							while(ps4.button == SQUARE);
 800ea2e:	bf00      	nop
 800ea30:	4b1c      	ldr	r3, [pc, #112]	; (800eaa4 <LidarSetPos+0xfd4>)
 800ea32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea38:	d0fa      	beq.n	800ea30 <LidarSetPos+0xf60>
							PP_stop(&pp);
 800ea3a:	4818      	ldr	r0, [pc, #96]	; (800ea9c <LidarSetPos+0xfcc>)
 800ea3c:	f7f7 f9dd 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800ea40:	4b16      	ldr	r3, [pc, #88]	; (800ea9c <LidarSetPos+0xfcc>)
 800ea42:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800ea46:	f003 0301 	and.w	r3, r3, #1
 800ea4a:	b2db      	uxtb	r3, r3
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d1d1      	bne.n	800e9f4 <LidarSetPos+0xf24>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800ea50:	4b0d      	ldr	r3, [pc, #52]	; (800ea88 <LidarSetPos+0xfb8>)
 800ea52:	2201      	movs	r2, #1
 800ea54:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800ea56:	463b      	mov	r3, r7
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800ea5e:	1dfa      	adds	r2, r7, #7
 800ea60:	7812      	ldrb	r2, [r2, #0]
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d103      	bne.n	800ea6e <LidarSetPos+0xf9e>
						LidarAdjust(lidar);
 800ea66:	463b      	mov	r3, r7
 800ea68:	6818      	ldr	r0, [r3, #0]
 800ea6a:	f001 f887 	bl	800fb7c <LidarAdjust>

				default:
					break;
 800ea6e:	bf00      	nop
 800ea70:	f001 b867 	b.w	800fb42 <LidarSetPos+0x2072>
					break;
 800ea74:	bf00      	nop
 800ea76:	f001 b864 	b.w	800fb42 <LidarSetPos+0x2072>
					break;
 800ea7a:	bf00      	nop
 800ea7c:	f001 b861 	b.w	800fb42 <LidarSetPos+0x2072>
					break;
 800ea80:	bf00      	nop
			}
			break;
 800ea82:	f001 b85e 	b.w	800fb42 <LidarSetPos+0x2072>
 800ea86:	bf00      	nop
 800ea88:	200072bc 	.word	0x200072bc
 800ea8c:	20007380 	.word	0x20007380
 800ea90:	3e2e147b 	.word	0x3e2e147b
 800ea94:	2000659c 	.word	0x2000659c
 800ea98:	40966666 	.word	0x40966666
 800ea9c:	20006cc4 	.word	0x20006cc4
 800eaa0:	40020c00 	.word	0x40020c00
 800eaa4:	2000a014 	.word	0x2000a014

		case CENTER_3:
			switch(lidar->pos) // Self Pose
 800eaa8:	463b      	mov	r3, r7
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800eab0:	3b01      	subs	r3, #1
 800eab2:	2b08      	cmp	r3, #8
 800eab4:	f200 81ef 	bhi.w	800ee96 <LidarSetPos+0x13c6>
 800eab8:	a201      	add	r2, pc, #4	; (adr r2, 800eac0 <LidarSetPos+0xff0>)
 800eaba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eabe:	bf00      	nop
 800eac0:	0800eae5 	.word	0x0800eae5
 800eac4:	0800eafd 	.word	0x0800eafd
 800eac8:	0800ee97 	.word	0x0800ee97
 800eacc:	0800ecd5 	.word	0x0800ecd5
 800ead0:	0800ec13 	.word	0x0800ec13
 800ead4:	0800ee97 	.word	0x0800ee97
 800ead8:	0800ed99 	.word	0x0800ed99
 800eadc:	0800eb09 	.word	0x0800eb09
 800eae0:	0800eaf1 	.word	0x0800eaf1
			{
				case PICK_LEFT:
					lidar->pos = CENTER_3;
 800eae4:	463b      	mov	r3, r7
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	2206      	movs	r2, #6
 800eaea:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800eaee:	e1dc      	b.n	800eeaa <LidarSetPos+0x13da>

				case PICK_RIGHT:
					lidar->pos = CENTER_3;
 800eaf0:	463b      	mov	r3, r7
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	2206      	movs	r2, #6
 800eaf6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800eafa:	e1d6      	b.n	800eeaa <LidarSetPos+0x13da>

				case UPPER_LEFT:
					lidar->pos = CENTER_3;
 800eafc:	463b      	mov	r3, r7
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	2206      	movs	r2, #6
 800eb02:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800eb06:	e1d0      	b.n	800eeaa <LidarSetPos+0x13da>

				case UPPER_RIGHT:
					lidar->pos = CENTER_3;
 800eb08:	463b      	mov	r3, r7
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	2206      	movs	r2, #6
 800eb0e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					if(blue)
 800eb12:	4bab      	ldr	r3, [pc, #684]	; (800edc0 <LidarSetPos+0x12f0>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d006      	beq.n	800eb28 <LidarSetPos+0x1058>
					{
						vesc_speed = BlueType2;
 800eb1a:	4baa      	ldr	r3, [pc, #680]	; (800edc4 <LidarSetPos+0x12f4>)
 800eb1c:	4aaa      	ldr	r2, [pc, #680]	; (800edc8 <LidarSetPos+0x12f8>)
 800eb1e:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 800eb20:	4baa      	ldr	r3, [pc, #680]	; (800edcc <LidarSetPos+0x12fc>)
 800eb22:	4aab      	ldr	r2, [pc, #684]	; (800edd0 <LidarSetPos+0x1300>)
 800eb24:	601a      	str	r2, [r3, #0]
 800eb26:	e005      	b.n	800eb34 <LidarSetPos+0x1064>
					}
					else
					{
						vesc_speed = RedType2;
 800eb28:	4ba6      	ldr	r3, [pc, #664]	; (800edc4 <LidarSetPos+0x12f4>)
 800eb2a:	4aaa      	ldr	r2, [pc, #680]	; (800edd4 <LidarSetPos+0x1304>)
 800eb2c:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 800eb2e:	4ba7      	ldr	r3, [pc, #668]	; (800edcc <LidarSetPos+0x12fc>)
 800eb30:	4aa9      	ldr	r2, [pc, #676]	; (800edd8 <LidarSetPos+0x1308>)
 800eb32:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 800eb34:	f7fd fc32 	bl	800c39c <ResetCoordinate>
					setOrientationMODN(OPERATOR_TURNED_0_DEGREE);
 800eb38:	2000      	movs	r0, #0
 800eb3a:	f7f6 f849 	bl	8004bd0 <setOrientationMODN>
					PP_start(upper_right_to_center_3, 1, &pp);
 800eb3e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800eb42:	4aa6      	ldr	r2, [pc, #664]	; (800eddc <LidarSetPos+0x130c>)
 800eb44:	2101      	movs	r1, #1
 800eb46:	4618      	mov	r0, r3
 800eb48:	f7f6 ff1d 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800eb4c:	e020      	b.n	800eb90 <LidarSetPos+0x10c0>
					{
						if(ps4.button == SQUARE)
 800eb4e:	4ba4      	ldr	r3, [pc, #656]	; (800ede0 <LidarSetPos+0x1310>)
 800eb50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb56:	d108      	bne.n	800eb6a <LidarSetPos+0x109a>
						{
							while(ps4.button == SQUARE);
 800eb58:	bf00      	nop
 800eb5a:	4ba1      	ldr	r3, [pc, #644]	; (800ede0 <LidarSetPos+0x1310>)
 800eb5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb62:	d0fa      	beq.n	800eb5a <LidarSetPos+0x108a>
							PP_stop(&pp);
 800eb64:	489d      	ldr	r0, [pc, #628]	; (800eddc <LidarSetPos+0x130c>)
 800eb66:	f7f7 f948 	bl	8005dfa <PP_stop>
						}

						if(pp.real_y <= -2.7)
 800eb6a:	4b9c      	ldr	r3, [pc, #624]	; (800eddc <LidarSetPos+0x130c>)
 800eb6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f7f1 fcea 	bl	8000548 <__aeabi_f2d>
 800eb74:	a390      	add	r3, pc, #576	; (adr r3, 800edb8 <LidarSetPos+0x12e8>)
 800eb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb7a:	f7f1 ffb9 	bl	8000af0 <__aeabi_dcmple>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d100      	bne.n	800eb86 <LidarSetPos+0x10b6>
 800eb84:	e004      	b.n	800eb90 <LidarSetPos+0x10c0>
							pp.target_vel[0] = 2.0;
 800eb86:	4b95      	ldr	r3, [pc, #596]	; (800eddc <LidarSetPos+0x130c>)
 800eb88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800eb8c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
					while(pp.pp_start)
 800eb90:	4b92      	ldr	r3, [pc, #584]	; (800eddc <LidarSetPos+0x130c>)
 800eb92:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800eb96:	f003 0301 	and.w	r3, r3, #1
 800eb9a:	b2db      	uxtb	r3, r3
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d1d6      	bne.n	800eb4e <LidarSetPos+0x107e>
					}

					PP_start(upper_right_to_center_3_2, 1, &pp);
 800eba0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800eba4:	4a8d      	ldr	r2, [pc, #564]	; (800eddc <LidarSetPos+0x130c>)
 800eba6:	2101      	movs	r1, #1
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f7f6 feec 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800ebae:	e020      	b.n	800ebf2 <LidarSetPos+0x1122>
					{
						if(ps4.button == SQUARE)
 800ebb0:	4b8b      	ldr	r3, [pc, #556]	; (800ede0 <LidarSetPos+0x1310>)
 800ebb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ebb8:	d108      	bne.n	800ebcc <LidarSetPos+0x10fc>
						{
							while(ps4.button == SQUARE);
 800ebba:	bf00      	nop
 800ebbc:	4b88      	ldr	r3, [pc, #544]	; (800ede0 <LidarSetPos+0x1310>)
 800ebbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ebc4:	d0fa      	beq.n	800ebbc <LidarSetPos+0x10ec>
							PP_stop(&pp);
 800ebc6:	4885      	ldr	r0, [pc, #532]	; (800eddc <LidarSetPos+0x130c>)
 800ebc8:	f7f7 f917 	bl	8005dfa <PP_stop>
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800ebcc:	2108      	movs	r1, #8
 800ebce:	4885      	ldr	r0, [pc, #532]	; (800ede4 <LidarSetPos+0x1314>)
 800ebd0:	f003 fbbe 	bl	8012350 <HAL_GPIO_ReadPin>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d006      	beq.n	800ebe8 <LidarSetPos+0x1118>
 800ebda:	2110      	movs	r1, #16
 800ebdc:	4881      	ldr	r0, [pc, #516]	; (800ede4 <LidarSetPos+0x1314>)
 800ebde:	f003 fbb7 	bl	8012350 <HAL_GPIO_ReadPin>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d104      	bne.n	800ebf2 <LidarSetPos+0x1122>
							pp.error_y = 0;
 800ebe8:	4b7c      	ldr	r3, [pc, #496]	; (800eddc <LidarSetPos+0x130c>)
 800ebea:	f04f 0200 	mov.w	r2, #0
 800ebee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800ebf2:	4b7a      	ldr	r3, [pc, #488]	; (800eddc <LidarSetPos+0x130c>)
 800ebf4:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800ebf8:	f003 0301 	and.w	r3, r3, #1
 800ebfc:	b2db      	uxtb	r3, r3
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d1d6      	bne.n	800ebb0 <LidarSetPos+0x10e0>
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}

					AdjustRings();
 800ec02:	f7fd fb93 	bl	800c32c <AdjustRings>
					adjust_servo;
 800ec06:	f240 31b6 	movw	r1, #950	; 0x3b6
 800ec0a:	4877      	ldr	r0, [pc, #476]	; (800ede8 <LidarSetPos+0x1318>)
 800ec0c:	f7fb f8e8 	bl	8009de0 <ServoSetPulse>

					break;
 800ec10:	e14b      	b.n	800eeaa <LidarSetPos+0x13da>

				case CENTER:
					stick_fence = 0;
 800ec12:	4b76      	ldr	r3, [pc, #472]	; (800edec <LidarSetPos+0x131c>)
 800ec14:	2200      	movs	r2, #0
 800ec16:	601a      	str	r2, [r3, #0]
					if(blue)
 800ec18:	4b69      	ldr	r3, [pc, #420]	; (800edc0 <LidarSetPos+0x12f0>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d006      	beq.n	800ec2e <LidarSetPos+0x115e>
					{
						vesc_speed = BlueType2;
 800ec20:	4b68      	ldr	r3, [pc, #416]	; (800edc4 <LidarSetPos+0x12f4>)
 800ec22:	4a69      	ldr	r2, [pc, #420]	; (800edc8 <LidarSetPos+0x12f8>)
 800ec24:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 800ec26:	4b69      	ldr	r3, [pc, #420]	; (800edcc <LidarSetPos+0x12fc>)
 800ec28:	4a69      	ldr	r2, [pc, #420]	; (800edd0 <LidarSetPos+0x1300>)
 800ec2a:	601a      	str	r2, [r3, #0]
 800ec2c:	e005      	b.n	800ec3a <LidarSetPos+0x116a>
					}
					else
					{
						vesc_speed = RedType2;
 800ec2e:	4b65      	ldr	r3, [pc, #404]	; (800edc4 <LidarSetPos+0x12f4>)
 800ec30:	4a68      	ldr	r2, [pc, #416]	; (800edd4 <LidarSetPos+0x1304>)
 800ec32:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 800ec34:	4b65      	ldr	r3, [pc, #404]	; (800edcc <LidarSetPos+0x12fc>)
 800ec36:	4a68      	ldr	r2, [pc, #416]	; (800edd8 <LidarSetPos+0x1308>)
 800ec38:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 800ec3a:	f7fd fbaf 	bl	800c39c <ResetCoordinate>
					lidar->pos = CENTER_3;
 800ec3e:	463b      	mov	r3, r7
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	2206      	movs	r2, #6
 800ec44:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_to_center_3, 1, &pp);
 800ec48:	f507 7340 	add.w	r3, r7, #768	; 0x300
 800ec4c:	4a63      	ldr	r2, [pc, #396]	; (800eddc <LidarSetPos+0x130c>)
 800ec4e:	2101      	movs	r1, #1
 800ec50:	4618      	mov	r0, r3
 800ec52:	f7f6 fe98 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800ec56:	e024      	b.n	800eca2 <LidarSetPos+0x11d2>
					{
						if(ps4.button == SQUARE)
 800ec58:	4b61      	ldr	r3, [pc, #388]	; (800ede0 <LidarSetPos+0x1310>)
 800ec5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec60:	d107      	bne.n	800ec72 <LidarSetPos+0x11a2>
						{
							while(ps4.button == SQUARE);
 800ec62:	bf00      	nop
 800ec64:	4b5e      	ldr	r3, [pc, #376]	; (800ede0 <LidarSetPos+0x1310>)
 800ec66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec6c:	d0fa      	beq.n	800ec64 <LidarSetPos+0x1194>
							StopAutoPP();
 800ec6e:	f7fd fb2d 	bl	800c2cc <StopAutoPP>
//							lidar->pos = CENTER;
//							lidar->pos_counter = CENTER;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800ec72:	2108      	movs	r1, #8
 800ec74:	485b      	ldr	r0, [pc, #364]	; (800ede4 <LidarSetPos+0x1314>)
 800ec76:	f003 fb6b 	bl	8012350 <HAL_GPIO_ReadPin>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d006      	beq.n	800ec8e <LidarSetPos+0x11be>
 800ec80:	2110      	movs	r1, #16
 800ec82:	4858      	ldr	r0, [pc, #352]	; (800ede4 <LidarSetPos+0x1314>)
 800ec84:	f003 fb64 	bl	8012350 <HAL_GPIO_ReadPin>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d109      	bne.n	800eca2 <LidarSetPos+0x11d2>
						{
							pp.target_y[0] = pp.real_y;
 800ec8e:	4b53      	ldr	r3, [pc, #332]	; (800eddc <LidarSetPos+0x130c>)
 800ec90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec92:	4a52      	ldr	r2, [pc, #328]	; (800eddc <LidarSetPos+0x130c>)
 800ec94:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800ec98:	4b50      	ldr	r3, [pc, #320]	; (800eddc <LidarSetPos+0x130c>)
 800ec9a:	f04f 0200 	mov.w	r2, #0
 800ec9e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800eca2:	4b4e      	ldr	r3, [pc, #312]	; (800eddc <LidarSetPos+0x130c>)
 800eca4:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800eca8:	f003 0301 	and.w	r3, r3, #1
 800ecac:	b2db      	uxtb	r3, r3
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d1d2      	bne.n	800ec58 <LidarSetPos+0x1188>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800ecb2:	4b4e      	ldr	r3, [pc, #312]	; (800edec <LidarSetPos+0x131c>)
 800ecb4:	2201      	movs	r2, #1
 800ecb6:	601a      	str	r2, [r3, #0]



					// Only adjust after reached destination
					if(lidar->pos == pose)
 800ecb8:	463b      	mov	r3, r7
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800ecc0:	1dfa      	adds	r2, r7, #7
 800ecc2:	7812      	ldrb	r2, [r2, #0]
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	f040 80e9 	bne.w	800ee9c <LidarSetPos+0x13cc>
						LidarAdjust(lidar);
 800ecca:	463b      	mov	r3, r7
 800eccc:	6818      	ldr	r0, [r3, #0]
 800ecce:	f000 ff55 	bl	800fb7c <LidarAdjust>
					break;
 800ecd2:	e0e3      	b.n	800ee9c <LidarSetPos+0x13cc>

				case CENTER_2:
					stick_fence = 0;
 800ecd4:	4b45      	ldr	r3, [pc, #276]	; (800edec <LidarSetPos+0x131c>)
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	601a      	str	r2, [r3, #0]
					if(blue)
 800ecda:	4b39      	ldr	r3, [pc, #228]	; (800edc0 <LidarSetPos+0x12f0>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d006      	beq.n	800ecf0 <LidarSetPos+0x1220>
					{
						vesc_speed = BlueType2;
 800ece2:	4b38      	ldr	r3, [pc, #224]	; (800edc4 <LidarSetPos+0x12f4>)
 800ece4:	4a38      	ldr	r2, [pc, #224]	; (800edc8 <LidarSetPos+0x12f8>)
 800ece6:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 800ece8:	4b38      	ldr	r3, [pc, #224]	; (800edcc <LidarSetPos+0x12fc>)
 800ecea:	4a39      	ldr	r2, [pc, #228]	; (800edd0 <LidarSetPos+0x1300>)
 800ecec:	601a      	str	r2, [r3, #0]
 800ecee:	e005      	b.n	800ecfc <LidarSetPos+0x122c>
					}
					else
					{
						vesc_speed = RedType2;
 800ecf0:	4b34      	ldr	r3, [pc, #208]	; (800edc4 <LidarSetPos+0x12f4>)
 800ecf2:	4a38      	ldr	r2, [pc, #224]	; (800edd4 <LidarSetPos+0x1304>)
 800ecf4:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 800ecf6:	4b35      	ldr	r3, [pc, #212]	; (800edcc <LidarSetPos+0x12fc>)
 800ecf8:	4a37      	ldr	r2, [pc, #220]	; (800edd8 <LidarSetPos+0x1308>)
 800ecfa:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 800ecfc:	f7fd fb4e 	bl	800c39c <ResetCoordinate>
					lidar->pos = CENTER_3;
 800ed00:	463b      	mov	r3, r7
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	2206      	movs	r2, #6
 800ed06:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_2_to_center_3, 1, &pp);
 800ed0a:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800ed0e:	4a33      	ldr	r2, [pc, #204]	; (800eddc <LidarSetPos+0x130c>)
 800ed10:	2101      	movs	r1, #1
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7f6 fe37 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800ed18:	e025      	b.n	800ed66 <LidarSetPos+0x1296>
					{
						if(ps4.button == SQUARE)
 800ed1a:	4b31      	ldr	r3, [pc, #196]	; (800ede0 <LidarSetPos+0x1310>)
 800ed1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed22:	d108      	bne.n	800ed36 <LidarSetPos+0x1266>
						{
							while(ps4.button == SQUARE);
 800ed24:	bf00      	nop
 800ed26:	4b2e      	ldr	r3, [pc, #184]	; (800ede0 <LidarSetPos+0x1310>)
 800ed28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed2e:	d0fa      	beq.n	800ed26 <LidarSetPos+0x1256>
							PP_stop(&pp);
 800ed30:	482a      	ldr	r0, [pc, #168]	; (800eddc <LidarSetPos+0x130c>)
 800ed32:	f7f7 f862 	bl	8005dfa <PP_stop>
//							lidar->pos = CENTER_2; // PP Failed
//							lidar->pos_counter = CENTER_2;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800ed36:	2108      	movs	r1, #8
 800ed38:	482a      	ldr	r0, [pc, #168]	; (800ede4 <LidarSetPos+0x1314>)
 800ed3a:	f003 fb09 	bl	8012350 <HAL_GPIO_ReadPin>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d006      	beq.n	800ed52 <LidarSetPos+0x1282>
 800ed44:	2110      	movs	r1, #16
 800ed46:	4827      	ldr	r0, [pc, #156]	; (800ede4 <LidarSetPos+0x1314>)
 800ed48:	f003 fb02 	bl	8012350 <HAL_GPIO_ReadPin>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d109      	bne.n	800ed66 <LidarSetPos+0x1296>
						{
							pp.target_y[0] = pp.real_y;
 800ed52:	4b22      	ldr	r3, [pc, #136]	; (800eddc <LidarSetPos+0x130c>)
 800ed54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed56:	4a21      	ldr	r2, [pc, #132]	; (800eddc <LidarSetPos+0x130c>)
 800ed58:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800ed5c:	4b1f      	ldr	r3, [pc, #124]	; (800eddc <LidarSetPos+0x130c>)
 800ed5e:	f04f 0200 	mov.w	r2, #0
 800ed62:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800ed66:	4b1d      	ldr	r3, [pc, #116]	; (800eddc <LidarSetPos+0x130c>)
 800ed68:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800ed6c:	f003 0301 	and.w	r3, r3, #1
 800ed70:	b2db      	uxtb	r3, r3
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d1d1      	bne.n	800ed1a <LidarSetPos+0x124a>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800ed76:	4b1d      	ldr	r3, [pc, #116]	; (800edec <LidarSetPos+0x131c>)
 800ed78:	2201      	movs	r2, #1
 800ed7a:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800ed7c:	463b      	mov	r3, r7
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800ed84:	1dfa      	adds	r2, r7, #7
 800ed86:	7812      	ldrb	r2, [r2, #0]
 800ed88:	429a      	cmp	r2, r3
 800ed8a:	f040 808a 	bne.w	800eea2 <LidarSetPos+0x13d2>
						LidarAdjust(lidar);
 800ed8e:	463b      	mov	r3, r7
 800ed90:	6818      	ldr	r0, [r3, #0]
 800ed92:	f000 fef3 	bl	800fb7c <LidarAdjust>
					break;
 800ed96:	e084      	b.n	800eea2 <LidarSetPos+0x13d2>


				case CENTER_4:
					stick_fence = 0;
 800ed98:	4b14      	ldr	r3, [pc, #80]	; (800edec <LidarSetPos+0x131c>)
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	601a      	str	r2, [r3, #0]
					if(blue)
 800ed9e:	4b08      	ldr	r3, [pc, #32]	; (800edc0 <LidarSetPos+0x12f0>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d024      	beq.n	800edf0 <LidarSetPos+0x1320>
					{
						vesc_speed = BlueType2;
 800eda6:	4b07      	ldr	r3, [pc, #28]	; (800edc4 <LidarSetPos+0x12f4>)
 800eda8:	4a07      	ldr	r2, [pc, #28]	; (800edc8 <LidarSetPos+0x12f8>)
 800edaa:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 800edac:	4b07      	ldr	r3, [pc, #28]	; (800edcc <LidarSetPos+0x12fc>)
 800edae:	4a08      	ldr	r2, [pc, #32]	; (800edd0 <LidarSetPos+0x1300>)
 800edb0:	601a      	str	r2, [r3, #0]
 800edb2:	e023      	b.n	800edfc <LidarSetPos+0x132c>
 800edb4:	f3af 8000 	nop.w
 800edb8:	9999999a 	.word	0x9999999a
 800edbc:	c0059999 	.word	0xc0059999
 800edc0:	20006a1c 	.word	0x20006a1c
 800edc4:	2000659c 	.word	0x2000659c
 800edc8:	41026666 	.word	0x41026666
 800edcc:	20007380 	.word	0x20007380
 800edd0:	3e8ccccd 	.word	0x3e8ccccd
 800edd4:	41033333 	.word	0x41033333
 800edd8:	3e8a3d71 	.word	0x3e8a3d71
 800eddc:	20006cc4 	.word	0x20006cc4
 800ede0:	2000a014 	.word	0x2000a014
 800ede4:	40020c00 	.word	0x40020c00
 800ede8:	2000786c 	.word	0x2000786c
 800edec:	200072bc 	.word	0x200072bc
					}
					else
					{
						vesc_speed = RedType2;
 800edf0:	4bb6      	ldr	r3, [pc, #728]	; (800f0cc <LidarSetPos+0x15fc>)
 800edf2:	4ab7      	ldr	r2, [pc, #732]	; (800f0d0 <LidarSetPos+0x1600>)
 800edf4:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 800edf6:	4bb7      	ldr	r3, [pc, #732]	; (800f0d4 <LidarSetPos+0x1604>)
 800edf8:	4ab7      	ldr	r2, [pc, #732]	; (800f0d8 <LidarSetPos+0x1608>)
 800edfa:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 800edfc:	f7fd face 	bl	800c39c <ResetCoordinate>
					lidar->pos = CENTER_3;
 800ee00:	463b      	mov	r3, r7
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	2206      	movs	r2, #6
 800ee06:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_4_to_center_3, 1, &pp);
 800ee0a:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800ee0e:	4ab3      	ldr	r2, [pc, #716]	; (800f0dc <LidarSetPos+0x160c>)
 800ee10:	2101      	movs	r1, #1
 800ee12:	4618      	mov	r0, r3
 800ee14:	f7f6 fdb7 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800ee18:	e025      	b.n	800ee66 <LidarSetPos+0x1396>
					{
						if(ps4.button == SQUARE)
 800ee1a:	4bb1      	ldr	r3, [pc, #708]	; (800f0e0 <LidarSetPos+0x1610>)
 800ee1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee22:	d108      	bne.n	800ee36 <LidarSetPos+0x1366>
						{
							while(ps4.button == SQUARE);
 800ee24:	bf00      	nop
 800ee26:	4bae      	ldr	r3, [pc, #696]	; (800f0e0 <LidarSetPos+0x1610>)
 800ee28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee2e:	d0fa      	beq.n	800ee26 <LidarSetPos+0x1356>
							PP_stop(&pp);
 800ee30:	48aa      	ldr	r0, [pc, #680]	; (800f0dc <LidarSetPos+0x160c>)
 800ee32:	f7f6 ffe2 	bl	8005dfa <PP_stop>
//							lidar->pos = CENTER_4;
//							lidar->pos_counter = CENTER_4;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800ee36:	2108      	movs	r1, #8
 800ee38:	48aa      	ldr	r0, [pc, #680]	; (800f0e4 <LidarSetPos+0x1614>)
 800ee3a:	f003 fa89 	bl	8012350 <HAL_GPIO_ReadPin>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d006      	beq.n	800ee52 <LidarSetPos+0x1382>
 800ee44:	2110      	movs	r1, #16
 800ee46:	48a7      	ldr	r0, [pc, #668]	; (800f0e4 <LidarSetPos+0x1614>)
 800ee48:	f003 fa82 	bl	8012350 <HAL_GPIO_ReadPin>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d109      	bne.n	800ee66 <LidarSetPos+0x1396>
						{
							pp.target_y[0] = pp.real_y;
 800ee52:	4ba2      	ldr	r3, [pc, #648]	; (800f0dc <LidarSetPos+0x160c>)
 800ee54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee56:	4aa1      	ldr	r2, [pc, #644]	; (800f0dc <LidarSetPos+0x160c>)
 800ee58:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800ee5c:	4b9f      	ldr	r3, [pc, #636]	; (800f0dc <LidarSetPos+0x160c>)
 800ee5e:	f04f 0200 	mov.w	r2, #0
 800ee62:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800ee66:	4b9d      	ldr	r3, [pc, #628]	; (800f0dc <LidarSetPos+0x160c>)
 800ee68:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800ee6c:	f003 0301 	and.w	r3, r3, #1
 800ee70:	b2db      	uxtb	r3, r3
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d1d1      	bne.n	800ee1a <LidarSetPos+0x134a>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800ee76:	4b9c      	ldr	r3, [pc, #624]	; (800f0e8 <LidarSetPos+0x1618>)
 800ee78:	2201      	movs	r2, #1
 800ee7a:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800ee7c:	463b      	mov	r3, r7
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800ee84:	1dfa      	adds	r2, r7, #7
 800ee86:	7812      	ldrb	r2, [r2, #0]
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d10d      	bne.n	800eea8 <LidarSetPos+0x13d8>
						LidarAdjust(lidar);
 800ee8c:	463b      	mov	r3, r7
 800ee8e:	6818      	ldr	r0, [r3, #0]
 800ee90:	f000 fe74 	bl	800fb7c <LidarAdjust>
					break;
 800ee94:	e008      	b.n	800eea8 <LidarSetPos+0x13d8>
				default:
					break;
 800ee96:	bf00      	nop
 800ee98:	f000 be53 	b.w	800fb42 <LidarSetPos+0x2072>
					break;
 800ee9c:	bf00      	nop
 800ee9e:	f000 be50 	b.w	800fb42 <LidarSetPos+0x2072>
					break;
 800eea2:	bf00      	nop
 800eea4:	f000 be4d 	b.w	800fb42 <LidarSetPos+0x2072>
					break;
 800eea8:	bf00      	nop
			}
			break;
 800eeaa:	f000 be4a 	b.w	800fb42 <LidarSetPos+0x2072>

		case CENTER_4:
			switch(lidar->pos) // Self Pose
 800eeae:	463b      	mov	r3, r7
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800eeb6:	3b01      	subs	r3, #1
 800eeb8:	2b08      	cmp	r3, #8
 800eeba:	f200 8204 	bhi.w	800f2c6 <LidarSetPos+0x17f6>
 800eebe:	a201      	add	r2, pc, #4	; (adr r2, 800eec4 <LidarSetPos+0x13f4>)
 800eec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eec4:	0800eee9 	.word	0x0800eee9
 800eec8:	0800f091 	.word	0x0800f091
 800eecc:	0800f2c7 	.word	0x0800f2c7
 800eed0:	0800f2c7 	.word	0x0800f2c7
 800eed4:	0800eef5 	.word	0x0800eef5
 800eed8:	0800f21b 	.word	0x0800f21b
 800eedc:	0800f2c7 	.word	0x0800f2c7
 800eee0:	0800f09d 	.word	0x0800f09d
 800eee4:	0800ef9f 	.word	0x0800ef9f
			{
				case PICK_LEFT:
					lidar->pos = CENTER_4;
 800eee8:	463b      	mov	r3, r7
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	2207      	movs	r2, #7
 800eeee:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800eef2:	e1ef      	b.n	800f2d4 <LidarSetPos+0x1804>

				case CENTER:
					stick_fence = 0;
 800eef4:	4b7c      	ldr	r3, [pc, #496]	; (800f0e8 <LidarSetPos+0x1618>)
 800eef6:	2200      	movs	r2, #0
 800eef8:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800eefa:	4b76      	ldr	r3, [pc, #472]	; (800f0d4 <LidarSetPos+0x1604>)
 800eefc:	4a7b      	ldr	r2, [pc, #492]	; (800f0ec <LidarSetPos+0x161c>)
 800eefe:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800ef00:	4b72      	ldr	r3, [pc, #456]	; (800f0cc <LidarSetPos+0x15fc>)
 800ef02:	4a7b      	ldr	r2, [pc, #492]	; (800f0f0 <LidarSetPos+0x1620>)
 800ef04:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800ef06:	f7fd fa49 	bl	800c39c <ResetCoordinate>
					lidar->pos = CENTER_4;
 800ef0a:	463b      	mov	r3, r7
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	2207      	movs	r2, #7
 800ef10:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_to_center_4, 1, &pp);
 800ef14:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800ef18:	4a70      	ldr	r2, [pc, #448]	; (800f0dc <LidarSetPos+0x160c>)
 800ef1a:	2101      	movs	r1, #1
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f7f6 fd32 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800ef22:	e025      	b.n	800ef70 <LidarSetPos+0x14a0>
					{
						if(In_LS_Shot_1 || In_LS_Shot_2)
 800ef24:	2108      	movs	r1, #8
 800ef26:	486f      	ldr	r0, [pc, #444]	; (800f0e4 <LidarSetPos+0x1614>)
 800ef28:	f003 fa12 	bl	8012350 <HAL_GPIO_ReadPin>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d006      	beq.n	800ef40 <LidarSetPos+0x1470>
 800ef32:	2110      	movs	r1, #16
 800ef34:	486b      	ldr	r0, [pc, #428]	; (800f0e4 <LidarSetPos+0x1614>)
 800ef36:	f003 fa0b 	bl	8012350 <HAL_GPIO_ReadPin>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d109      	bne.n	800ef54 <LidarSetPos+0x1484>
						{
							pp.target_y[0] = pp.real_y;
 800ef40:	4b66      	ldr	r3, [pc, #408]	; (800f0dc <LidarSetPos+0x160c>)
 800ef42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef44:	4a65      	ldr	r2, [pc, #404]	; (800f0dc <LidarSetPos+0x160c>)
 800ef46:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800ef4a:	4b64      	ldr	r3, [pc, #400]	; (800f0dc <LidarSetPos+0x160c>)
 800ef4c:	f04f 0200 	mov.w	r2, #0
 800ef50:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
						}

						if(ps4.button == SQUARE)
 800ef54:	4b62      	ldr	r3, [pc, #392]	; (800f0e0 <LidarSetPos+0x1610>)
 800ef56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef5c:	d108      	bne.n	800ef70 <LidarSetPos+0x14a0>
						{
							while(ps4.button == SQUARE);
 800ef5e:	bf00      	nop
 800ef60:	4b5f      	ldr	r3, [pc, #380]	; (800f0e0 <LidarSetPos+0x1610>)
 800ef62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef68:	d0fa      	beq.n	800ef60 <LidarSetPos+0x1490>
							PP_stop(&pp);
 800ef6a:	485c      	ldr	r0, [pc, #368]	; (800f0dc <LidarSetPos+0x160c>)
 800ef6c:	f7f6 ff45 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800ef70:	4b5a      	ldr	r3, [pc, #360]	; (800f0dc <LidarSetPos+0x160c>)
 800ef72:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800ef76:	f003 0301 	and.w	r3, r3, #1
 800ef7a:	b2db      	uxtb	r3, r3
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d1d1      	bne.n	800ef24 <LidarSetPos+0x1454>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800ef80:	4b59      	ldr	r3, [pc, #356]	; (800f0e8 <LidarSetPos+0x1618>)
 800ef82:	2201      	movs	r2, #1
 800ef84:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800ef86:	463b      	mov	r3, r7
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800ef8e:	1dfa      	adds	r2, r7, #7
 800ef90:	7812      	ldrb	r2, [r2, #0]
 800ef92:	429a      	cmp	r2, r3
 800ef94:	d103      	bne.n	800ef9e <LidarSetPos+0x14ce>
						LidarAdjust(lidar);
 800ef96:	463b      	mov	r3, r7
 800ef98:	6818      	ldr	r0, [r3, #0]
 800ef9a:	f000 fdef 	bl	800fb7c <LidarAdjust>

				case PICK_RIGHT:
					stick_fence = 0;
 800ef9e:	4b52      	ldr	r3, [pc, #328]	; (800f0e8 <LidarSetPos+0x1618>)
 800efa0:	2200      	movs	r2, #0
 800efa2:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800efa4:	4b4b      	ldr	r3, [pc, #300]	; (800f0d4 <LidarSetPos+0x1604>)
 800efa6:	4a51      	ldr	r2, [pc, #324]	; (800f0ec <LidarSetPos+0x161c>)
 800efa8:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800efaa:	4b48      	ldr	r3, [pc, #288]	; (800f0cc <LidarSetPos+0x15fc>)
 800efac:	4a50      	ldr	r2, [pc, #320]	; (800f0f0 <LidarSetPos+0x1620>)
 800efae:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800efb0:	f7fd f9f4 	bl	800c39c <ResetCoordinate>
					lidar->pos = CENTER_4;
 800efb4:	463b      	mov	r3, r7
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2207      	movs	r2, #7
 800efba:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd

					PP_start(pick_right_to_center_4_servo, 1, &pp);
 800efbe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800efc2:	4a46      	ldr	r2, [pc, #280]	; (800f0dc <LidarSetPos+0x160c>)
 800efc4:	2101      	movs	r1, #1
 800efc6:	4618      	mov	r0, r3
 800efc8:	f7f6 fcdd 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800efcc:	e00d      	b.n	800efea <LidarSetPos+0x151a>
					{
						if(ps4.button == SQUARE)
 800efce:	4b44      	ldr	r3, [pc, #272]	; (800f0e0 <LidarSetPos+0x1610>)
 800efd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800efd6:	d108      	bne.n	800efea <LidarSetPos+0x151a>
						{
							while(ps4.button == SQUARE);
 800efd8:	bf00      	nop
 800efda:	4b41      	ldr	r3, [pc, #260]	; (800f0e0 <LidarSetPos+0x1610>)
 800efdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800efe2:	d0fa      	beq.n	800efda <LidarSetPos+0x150a>
							PP_stop(&pp);
 800efe4:	483d      	ldr	r0, [pc, #244]	; (800f0dc <LidarSetPos+0x160c>)
 800efe6:	f7f6 ff08 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800efea:	4b3c      	ldr	r3, [pc, #240]	; (800f0dc <LidarSetPos+0x160c>)
 800efec:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800eff0:	f003 0301 	and.w	r3, r3, #1
 800eff4:	b2db      	uxtb	r3, r3
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d1e9      	bne.n	800efce <LidarSetPos+0x14fe>
//							lidar->pos = PICK_RIGHT;
//							lidar->pos_counter = PICK_RIGHT;
						}
					}
					LoadRing();
 800effa:	f7fd f951 	bl	800c2a0 <LoadRing>
//					close_servo;

					PP_start(pick_right_to_center_4, 1, &pp);
 800effe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800f002:	4a36      	ldr	r2, [pc, #216]	; (800f0dc <LidarSetPos+0x160c>)
 800f004:	2101      	movs	r1, #1
 800f006:	4618      	mov	r0, r3
 800f008:	f7f6 fcbd 	bl	8005986 <PP_start>

					AdjustRings();
 800f00c:	f7fd f98e 	bl	800c32c <AdjustRings>
					while(pp.pp_start)
 800f010:	e020      	b.n	800f054 <LidarSetPos+0x1584>
					{
						if(ps4.button == SQUARE)
 800f012:	4b33      	ldr	r3, [pc, #204]	; (800f0e0 <LidarSetPos+0x1610>)
 800f014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f01a:	d108      	bne.n	800f02e <LidarSetPos+0x155e>
						{
							while(ps4.button == SQUARE);
 800f01c:	bf00      	nop
 800f01e:	4b30      	ldr	r3, [pc, #192]	; (800f0e0 <LidarSetPos+0x1610>)
 800f020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f026:	d0fa      	beq.n	800f01e <LidarSetPos+0x154e>
							PP_stop(&pp);
 800f028:	482c      	ldr	r0, [pc, #176]	; (800f0dc <LidarSetPos+0x160c>)
 800f02a:	f7f6 fee6 	bl	8005dfa <PP_stop>
//							lidar->pos = PICK_RIGHT;
//							lidar->pos_counter = PICK_RIGHT;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800f02e:	2108      	movs	r1, #8
 800f030:	482c      	ldr	r0, [pc, #176]	; (800f0e4 <LidarSetPos+0x1614>)
 800f032:	f003 f98d 	bl	8012350 <HAL_GPIO_ReadPin>
 800f036:	4603      	mov	r3, r0
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d006      	beq.n	800f04a <LidarSetPos+0x157a>
 800f03c:	2110      	movs	r1, #16
 800f03e:	4829      	ldr	r0, [pc, #164]	; (800f0e4 <LidarSetPos+0x1614>)
 800f040:	f003 f986 	bl	8012350 <HAL_GPIO_ReadPin>
 800f044:	4603      	mov	r3, r0
 800f046:	2b00      	cmp	r3, #0
 800f048:	d104      	bne.n	800f054 <LidarSetPos+0x1584>
							pp.error_y = 0;
 800f04a:	4b24      	ldr	r3, [pc, #144]	; (800f0dc <LidarSetPos+0x160c>)
 800f04c:	f04f 0200 	mov.w	r2, #0
 800f050:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800f054:	4b21      	ldr	r3, [pc, #132]	; (800f0dc <LidarSetPos+0x160c>)
 800f056:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f05a:	f003 0301 	and.w	r3, r3, #1
 800f05e:	b2db      	uxtb	r3, r3
 800f060:	2b00      	cmp	r3, #0
 800f062:	d1d6      	bne.n	800f012 <LidarSetPos+0x1542>
//						load_adjust_servo;
//						osDelay(100);
//						close_servo;
//						osDelay(100);
//					}
					adjust_servo;
 800f064:	f240 31b6 	movw	r1, #950	; 0x3b6
 800f068:	4822      	ldr	r0, [pc, #136]	; (800f0f4 <LidarSetPos+0x1624>)
 800f06a:	f7fa feb9 	bl	8009de0 <ServoSetPulse>

					stick_fence = 1;
 800f06e:	4b1e      	ldr	r3, [pc, #120]	; (800f0e8 <LidarSetPos+0x1618>)
 800f070:	2201      	movs	r2, #1
 800f072:	601a      	str	r2, [r3, #0]
					// Only adjust after reached destination
					if(lidar->pos == pose)
 800f074:	463b      	mov	r3, r7
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f07c:	1dfa      	adds	r2, r7, #7
 800f07e:	7812      	ldrb	r2, [r2, #0]
 800f080:	429a      	cmp	r2, r3
 800f082:	f040 8123 	bne.w	800f2cc <LidarSetPos+0x17fc>
						LidarAdjust(lidar);
 800f086:	463b      	mov	r3, r7
 800f088:	6818      	ldr	r0, [r3, #0]
 800f08a:	f000 fd77 	bl	800fb7c <LidarAdjust>
					break;
 800f08e:	e11d      	b.n	800f2cc <LidarSetPos+0x17fc>

				case UPPER_LEFT:
					lidar->pos = CENTER_4;
 800f090:	463b      	mov	r3, r7
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	2207      	movs	r2, #7
 800f096:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f09a:	e11b      	b.n	800f2d4 <LidarSetPos+0x1804>

				case UPPER_RIGHT:
					lidar->pos = CENTER_4;
 800f09c:	463b      	mov	r3, r7
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	2207      	movs	r2, #7
 800f0a2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					setOrientationMODN(OPERATOR_TURNED_0_DEGREE);
 800f0a6:	2000      	movs	r0, #0
 800f0a8:	f7f5 fd92 	bl	8004bd0 <setOrientationMODN>
					vesc_duty = type1Duty;
 800f0ac:	4b09      	ldr	r3, [pc, #36]	; (800f0d4 <LidarSetPos+0x1604>)
 800f0ae:	4a0f      	ldr	r2, [pc, #60]	; (800f0ec <LidarSetPos+0x161c>)
 800f0b0:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800f0b2:	4b06      	ldr	r3, [pc, #24]	; (800f0cc <LidarSetPos+0x15fc>)
 800f0b4:	4a0e      	ldr	r2, [pc, #56]	; (800f0f0 <LidarSetPos+0x1620>)
 800f0b6:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800f0b8:	f7fd f970 	bl	800c39c <ResetCoordinate>
					PP_start(upper_right_to_center_4, 1, &pp);
 800f0bc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f0c0:	4a06      	ldr	r2, [pc, #24]	; (800f0dc <LidarSetPos+0x160c>)
 800f0c2:	2101      	movs	r1, #1
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f7f6 fc5e 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f0ca:	e036      	b.n	800f13a <LidarSetPos+0x166a>
 800f0cc:	2000659c 	.word	0x2000659c
 800f0d0:	41033333 	.word	0x41033333
 800f0d4:	20007380 	.word	0x20007380
 800f0d8:	3e8a3d71 	.word	0x3e8a3d71
 800f0dc:	20006cc4 	.word	0x20006cc4
 800f0e0:	2000a014 	.word	0x2000a014
 800f0e4:	40020c00 	.word	0x40020c00
 800f0e8:	200072bc 	.word	0x200072bc
 800f0ec:	3e2e147b 	.word	0x3e2e147b
 800f0f0:	40966666 	.word	0x40966666
 800f0f4:	2000786c 	.word	0x2000786c
					{
						if(ps4.button == SQUARE)
 800f0f8:	4baf      	ldr	r3, [pc, #700]	; (800f3b8 <LidarSetPos+0x18e8>)
 800f0fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f100:	d108      	bne.n	800f114 <LidarSetPos+0x1644>
						{
							while(ps4.button == SQUARE);
 800f102:	bf00      	nop
 800f104:	4bac      	ldr	r3, [pc, #688]	; (800f3b8 <LidarSetPos+0x18e8>)
 800f106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f10c:	d0fa      	beq.n	800f104 <LidarSetPos+0x1634>
							PP_stop(&pp);
 800f10e:	48ab      	ldr	r0, [pc, #684]	; (800f3bc <LidarSetPos+0x18ec>)
 800f110:	f7f6 fe73 	bl	8005dfa <PP_stop>
						}

						if(pp.real_y <= -3.1)
 800f114:	4ba9      	ldr	r3, [pc, #676]	; (800f3bc <LidarSetPos+0x18ec>)
 800f116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f118:	4618      	mov	r0, r3
 800f11a:	f7f1 fa15 	bl	8000548 <__aeabi_f2d>
 800f11e:	a3a4      	add	r3, pc, #656	; (adr r3, 800f3b0 <LidarSetPos+0x18e0>)
 800f120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f124:	f7f1 fce4 	bl	8000af0 <__aeabi_dcmple>
 800f128:	4603      	mov	r3, r0
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d100      	bne.n	800f130 <LidarSetPos+0x1660>
 800f12e:	e004      	b.n	800f13a <LidarSetPos+0x166a>
						{
							pp.target_vel[0] = 2.0;
 800f130:	4ba2      	ldr	r3, [pc, #648]	; (800f3bc <LidarSetPos+0x18ec>)
 800f132:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f136:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
					while(pp.pp_start)
 800f13a:	4ba0      	ldr	r3, [pc, #640]	; (800f3bc <LidarSetPos+0x18ec>)
 800f13c:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f140:	f003 0301 	and.w	r3, r3, #1
 800f144:	b2db      	uxtb	r3, r3
 800f146:	2b00      	cmp	r3, #0
 800f148:	d1d6      	bne.n	800f0f8 <LidarSetPos+0x1628>
						}
					}

					PP_start(upper_right_to_center_4_2, 1, &pp);
 800f14a:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 800f14e:	4a9b      	ldr	r2, [pc, #620]	; (800f3bc <LidarSetPos+0x18ec>)
 800f150:	2101      	movs	r1, #1
 800f152:	4618      	mov	r0, r3
 800f154:	f7f6 fc17 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f158:	e020      	b.n	800f19c <LidarSetPos+0x16cc>
					{
						if(ps4.button == SQUARE)
 800f15a:	4b97      	ldr	r3, [pc, #604]	; (800f3b8 <LidarSetPos+0x18e8>)
 800f15c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f15e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f162:	d108      	bne.n	800f176 <LidarSetPos+0x16a6>
						{
							while(ps4.button == SQUARE);
 800f164:	bf00      	nop
 800f166:	4b94      	ldr	r3, [pc, #592]	; (800f3b8 <LidarSetPos+0x18e8>)
 800f168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f16a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f16e:	d0fa      	beq.n	800f166 <LidarSetPos+0x1696>
							PP_stop(&pp);
 800f170:	4892      	ldr	r0, [pc, #584]	; (800f3bc <LidarSetPos+0x18ec>)
 800f172:	f7f6 fe42 	bl	8005dfa <PP_stop>
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800f176:	2108      	movs	r1, #8
 800f178:	4891      	ldr	r0, [pc, #580]	; (800f3c0 <LidarSetPos+0x18f0>)
 800f17a:	f003 f8e9 	bl	8012350 <HAL_GPIO_ReadPin>
 800f17e:	4603      	mov	r3, r0
 800f180:	2b00      	cmp	r3, #0
 800f182:	d006      	beq.n	800f192 <LidarSetPos+0x16c2>
 800f184:	2110      	movs	r1, #16
 800f186:	488e      	ldr	r0, [pc, #568]	; (800f3c0 <LidarSetPos+0x18f0>)
 800f188:	f003 f8e2 	bl	8012350 <HAL_GPIO_ReadPin>
 800f18c:	4603      	mov	r3, r0
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d104      	bne.n	800f19c <LidarSetPos+0x16cc>
							pp.error_y = 0;
 800f192:	4b8a      	ldr	r3, [pc, #552]	; (800f3bc <LidarSetPos+0x18ec>)
 800f194:	f04f 0200 	mov.w	r2, #0
 800f198:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800f19c:	4b87      	ldr	r3, [pc, #540]	; (800f3bc <LidarSetPos+0x18ec>)
 800f19e:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f1a2:	f003 0301 	and.w	r3, r3, #1
 800f1a6:	b2db      	uxtb	r3, r3
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d1d6      	bne.n	800f15a <LidarSetPos+0x168a>
					}

					PP_start(bang_fence, 1, &pp);
 800f1ac:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800f1b0:	4a82      	ldr	r2, [pc, #520]	; (800f3bc <LidarSetPos+0x18ec>)
 800f1b2:	2101      	movs	r1, #1
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f7f6 fbe6 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f1ba:	e01e      	b.n	800f1fa <LidarSetPos+0x172a>
					{
						if(ps4.button == SQUARE)
 800f1bc:	4b7e      	ldr	r3, [pc, #504]	; (800f3b8 <LidarSetPos+0x18e8>)
 800f1be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f1c4:	d108      	bne.n	800f1d8 <LidarSetPos+0x1708>
						{
							while(ps4.button == SQUARE);
 800f1c6:	bf00      	nop
 800f1c8:	4b7b      	ldr	r3, [pc, #492]	; (800f3b8 <LidarSetPos+0x18e8>)
 800f1ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f1d0:	d0fa      	beq.n	800f1c8 <LidarSetPos+0x16f8>
							PP_stop(&pp);
 800f1d2:	487a      	ldr	r0, [pc, #488]	; (800f3bc <LidarSetPos+0x18ec>)
 800f1d4:	f7f6 fe11 	bl	8005dfa <PP_stop>
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800f1d8:	2108      	movs	r1, #8
 800f1da:	4879      	ldr	r0, [pc, #484]	; (800f3c0 <LidarSetPos+0x18f0>)
 800f1dc:	f003 f8b8 	bl	8012350 <HAL_GPIO_ReadPin>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d006      	beq.n	800f1f4 <LidarSetPos+0x1724>
 800f1e6:	2110      	movs	r1, #16
 800f1e8:	4875      	ldr	r0, [pc, #468]	; (800f3c0 <LidarSetPos+0x18f0>)
 800f1ea:	f003 f8b1 	bl	8012350 <HAL_GPIO_ReadPin>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d102      	bne.n	800f1fa <LidarSetPos+0x172a>
							PP_stop(&pp);
 800f1f4:	4871      	ldr	r0, [pc, #452]	; (800f3bc <LidarSetPos+0x18ec>)
 800f1f6:	f7f6 fe00 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800f1fa:	4b70      	ldr	r3, [pc, #448]	; (800f3bc <LidarSetPos+0x18ec>)
 800f1fc:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f200:	f003 0301 	and.w	r3, r3, #1
 800f204:	b2db      	uxtb	r3, r3
 800f206:	2b00      	cmp	r3, #0
 800f208:	d1d8      	bne.n	800f1bc <LidarSetPos+0x16ec>
					}

					AdjustRings();
 800f20a:	f7fd f88f 	bl	800c32c <AdjustRings>
					adjust_servo;
 800f20e:	f240 31b6 	movw	r1, #950	; 0x3b6
 800f212:	486c      	ldr	r0, [pc, #432]	; (800f3c4 <LidarSetPos+0x18f4>)
 800f214:	f7fa fde4 	bl	8009de0 <ServoSetPulse>

					break;
 800f218:	e05c      	b.n	800f2d4 <LidarSetPos+0x1804>

				case CENTER_3:
					stick_fence = 0;
 800f21a:	4b6b      	ldr	r3, [pc, #428]	; (800f3c8 <LidarSetPos+0x18f8>)
 800f21c:	2200      	movs	r2, #0
 800f21e:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800f220:	4b6a      	ldr	r3, [pc, #424]	; (800f3cc <LidarSetPos+0x18fc>)
 800f222:	4a6b      	ldr	r2, [pc, #428]	; (800f3d0 <LidarSetPos+0x1900>)
 800f224:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800f226:	4b6b      	ldr	r3, [pc, #428]	; (800f3d4 <LidarSetPos+0x1904>)
 800f228:	4a6b      	ldr	r2, [pc, #428]	; (800f3d8 <LidarSetPos+0x1908>)
 800f22a:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800f22c:	f7fd f8b6 	bl	800c39c <ResetCoordinate>
					lidar->pos = CENTER_4;
 800f230:	463b      	mov	r3, r7
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	2207      	movs	r2, #7
 800f236:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_3_to_center_4, 1, &pp);
 800f23a:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800f23e:	4a5f      	ldr	r2, [pc, #380]	; (800f3bc <LidarSetPos+0x18ec>)
 800f240:	2101      	movs	r1, #1
 800f242:	4618      	mov	r0, r3
 800f244:	f7f6 fb9f 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f248:	e025      	b.n	800f296 <LidarSetPos+0x17c6>
					{
						if(ps4.button == SQUARE)
 800f24a:	4b5b      	ldr	r3, [pc, #364]	; (800f3b8 <LidarSetPos+0x18e8>)
 800f24c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f24e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f252:	d108      	bne.n	800f266 <LidarSetPos+0x1796>
						{
							while(ps4.button == SQUARE);
 800f254:	bf00      	nop
 800f256:	4b58      	ldr	r3, [pc, #352]	; (800f3b8 <LidarSetPos+0x18e8>)
 800f258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f25a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f25e:	d0fa      	beq.n	800f256 <LidarSetPos+0x1786>
							PP_stop(&pp);
 800f260:	4856      	ldr	r0, [pc, #344]	; (800f3bc <LidarSetPos+0x18ec>)
 800f262:	f7f6 fdca 	bl	8005dfa <PP_stop>
//							lidar->pos = CENTER_3;
//							lidar->pos_counter = CENTER_3;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800f266:	2108      	movs	r1, #8
 800f268:	4855      	ldr	r0, [pc, #340]	; (800f3c0 <LidarSetPos+0x18f0>)
 800f26a:	f003 f871 	bl	8012350 <HAL_GPIO_ReadPin>
 800f26e:	4603      	mov	r3, r0
 800f270:	2b00      	cmp	r3, #0
 800f272:	d006      	beq.n	800f282 <LidarSetPos+0x17b2>
 800f274:	2110      	movs	r1, #16
 800f276:	4852      	ldr	r0, [pc, #328]	; (800f3c0 <LidarSetPos+0x18f0>)
 800f278:	f003 f86a 	bl	8012350 <HAL_GPIO_ReadPin>
 800f27c:	4603      	mov	r3, r0
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d109      	bne.n	800f296 <LidarSetPos+0x17c6>
						{
							pp.target_y[0] = pp.real_y;
 800f282:	4b4e      	ldr	r3, [pc, #312]	; (800f3bc <LidarSetPos+0x18ec>)
 800f284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f286:	4a4d      	ldr	r2, [pc, #308]	; (800f3bc <LidarSetPos+0x18ec>)
 800f288:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800f28c:	4b4b      	ldr	r3, [pc, #300]	; (800f3bc <LidarSetPos+0x18ec>)
 800f28e:	f04f 0200 	mov.w	r2, #0
 800f292:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800f296:	4b49      	ldr	r3, [pc, #292]	; (800f3bc <LidarSetPos+0x18ec>)
 800f298:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f29c:	f003 0301 	and.w	r3, r3, #1
 800f2a0:	b2db      	uxtb	r3, r3
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d1d1      	bne.n	800f24a <LidarSetPos+0x177a>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800f2a6:	4b48      	ldr	r3, [pc, #288]	; (800f3c8 <LidarSetPos+0x18f8>)
 800f2a8:	2201      	movs	r2, #1
 800f2aa:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800f2ac:	463b      	mov	r3, r7
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f2b4:	1dfa      	adds	r2, r7, #7
 800f2b6:	7812      	ldrb	r2, [r2, #0]
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d10a      	bne.n	800f2d2 <LidarSetPos+0x1802>
						LidarAdjust(lidar);
 800f2bc:	463b      	mov	r3, r7
 800f2be:	6818      	ldr	r0, [r3, #0]
 800f2c0:	f000 fc5c 	bl	800fb7c <LidarAdjust>
					break;
 800f2c4:	e005      	b.n	800f2d2 <LidarSetPos+0x1802>

				default:
					break;
 800f2c6:	bf00      	nop
 800f2c8:	f000 bc3b 	b.w	800fb42 <LidarSetPos+0x2072>
					break;
 800f2cc:	bf00      	nop
 800f2ce:	f000 bc38 	b.w	800fb42 <LidarSetPos+0x2072>
					break;
 800f2d2:	bf00      	nop
			}
			break;
 800f2d4:	f000 bc35 	b.w	800fb42 <LidarSetPos+0x2072>


		case UPPER_RIGHT:
			switch(lidar->pos) // Self Pose
 800f2d8:	463b      	mov	r3, r7
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f2e0:	3b01      	subs	r3, #1
 800f2e2:	2b08      	cmp	r3, #8
 800f2e4:	f200 81e8 	bhi.w	800f6b8 <LidarSetPos+0x1be8>
 800f2e8:	a201      	add	r2, pc, #4	; (adr r2, 800f2f0 <LidarSetPos+0x1820>)
 800f2ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2ee:	bf00      	nop
 800f2f0:	0800f315 	.word	0x0800f315
 800f2f4:	0800f495 	.word	0x0800f495
 800f2f8:	0800f6b9 	.word	0x0800f6b9
 800f2fc:	0800f6b9 	.word	0x0800f6b9
 800f300:	0800f4a1 	.word	0x0800f4a1
 800f304:	0800f4ad 	.word	0x0800f4ad
 800f308:	0800f5b3 	.word	0x0800f5b3
 800f30c:	0800f6b9 	.word	0x0800f6b9
 800f310:	0800f321 	.word	0x0800f321
			{
				case PICK_LEFT:
					lidar->pos = UPPER_RIGHT;
 800f314:	463b      	mov	r3, r7
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	2208      	movs	r2, #8
 800f31a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f31e:	e1cc      	b.n	800f6ba <LidarSetPos+0x1bea>

				case PICK_RIGHT:
					lidar->pos = UPPER_RIGHT;
 800f320:	463b      	mov	r3, r7
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	2208      	movs	r2, #8
 800f326:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					if(blue)
 800f32a:	4b2c      	ldr	r3, [pc, #176]	; (800f3dc <LidarSetPos+0x190c>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d007      	beq.n	800f342 <LidarSetPos+0x1872>
					{
						vesc_speed = BlueType3;
 800f332:	4b28      	ldr	r3, [pc, #160]	; (800f3d4 <LidarSetPos+0x1904>)
 800f334:	4a2a      	ldr	r2, [pc, #168]	; (800f3e0 <LidarSetPos+0x1910>)
 800f336:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType3Duty;
 800f338:	4b24      	ldr	r3, [pc, #144]	; (800f3cc <LidarSetPos+0x18fc>)
 800f33a:	f04f 527b 	mov.w	r2, #1052770304	; 0x3ec00000
 800f33e:	601a      	str	r2, [r3, #0]
 800f340:	e006      	b.n	800f350 <LidarSetPos+0x1880>
					}
					else
					{
						vesc_speed = RedType3;
 800f342:	4b24      	ldr	r3, [pc, #144]	; (800f3d4 <LidarSetPos+0x1904>)
 800f344:	4a27      	ldr	r2, [pc, #156]	; (800f3e4 <LidarSetPos+0x1914>)
 800f346:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType3Duty;
 800f348:	4b20      	ldr	r3, [pc, #128]	; (800f3cc <LidarSetPos+0x18fc>)
 800f34a:	f04f 527b 	mov.w	r2, #1052770304	; 0x3ec00000
 800f34e:	601a      	str	r2, [r3, #0]
					}
					setOrientationMODN(OPERATOR_TURNED_90_DEGREES_ANTICLOCKWISE);
 800f350:	2003      	movs	r0, #3
 800f352:	f7f5 fc3d 	bl	8004bd0 <setOrientationMODN>
					ResetCoordinate();
 800f356:	f7fd f821 	bl	800c39c <ResetCoordinate>
					PP_start(pick_right_to_upper_right, 1, &pp);
 800f35a:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800f35e:	4a17      	ldr	r2, [pc, #92]	; (800f3bc <LidarSetPos+0x18ec>)
 800f360:	2101      	movs	r1, #1
 800f362:	4618      	mov	r0, r3
 800f364:	f7f6 fb0f 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f368:	e00d      	b.n	800f386 <LidarSetPos+0x18b6>
					{
						if(ps4.button == SQUARE)
 800f36a:	4b13      	ldr	r3, [pc, #76]	; (800f3b8 <LidarSetPos+0x18e8>)
 800f36c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f36e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f372:	d108      	bne.n	800f386 <LidarSetPos+0x18b6>
						{
							while(ps4.button == SQUARE);
 800f374:	bf00      	nop
 800f376:	4b10      	ldr	r3, [pc, #64]	; (800f3b8 <LidarSetPos+0x18e8>)
 800f378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f37a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f37e:	d0fa      	beq.n	800f376 <LidarSetPos+0x18a6>
							PP_stop(&pp);
 800f380:	480e      	ldr	r0, [pc, #56]	; (800f3bc <LidarSetPos+0x18ec>)
 800f382:	f7f6 fd3a 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800f386:	4b0d      	ldr	r3, [pc, #52]	; (800f3bc <LidarSetPos+0x18ec>)
 800f388:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f38c:	f003 0301 	and.w	r3, r3, #1
 800f390:	b2db      	uxtb	r3, r3
 800f392:	2b00      	cmp	r3, #0
 800f394:	d1e9      	bne.n	800f36a <LidarSetPos+0x189a>
						}
					}
					LoadRing();
 800f396:	f7fc ff83 	bl	800c2a0 <LoadRing>
//					close_servo;

					PP_start(pick_right_to_upper_right_2, 1, &pp);
 800f39a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800f39e:	4a07      	ldr	r2, [pc, #28]	; (800f3bc <LidarSetPos+0x18ec>)
 800f3a0:	2101      	movs	r1, #1
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f7f6 faef 	bl	8005986 <PP_start>
					AdjustRings();
 800f3a8:	f7fc ffc0 	bl	800c32c <AdjustRings>
					while(pp.pp_start)
 800f3ac:	e062      	b.n	800f474 <LidarSetPos+0x19a4>
 800f3ae:	bf00      	nop
 800f3b0:	cccccccd 	.word	0xcccccccd
 800f3b4:	c008cccc 	.word	0xc008cccc
 800f3b8:	2000a014 	.word	0x2000a014
 800f3bc:	20006cc4 	.word	0x20006cc4
 800f3c0:	40020c00 	.word	0x40020c00
 800f3c4:	2000786c 	.word	0x2000786c
 800f3c8:	200072bc 	.word	0x200072bc
 800f3cc:	20007380 	.word	0x20007380
 800f3d0:	3e2e147b 	.word	0x3e2e147b
 800f3d4:	2000659c 	.word	0x2000659c
 800f3d8:	40966666 	.word	0x40966666
 800f3dc:	20006a1c 	.word	0x20006a1c
 800f3e0:	413c0000 	.word	0x413c0000
 800f3e4:	413b3333 	.word	0x413b3333
					{
						if(ps4.button == SQUARE)
 800f3e8:	4bb4      	ldr	r3, [pc, #720]	; (800f6bc <LidarSetPos+0x1bec>)
 800f3ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3f0:	d108      	bne.n	800f404 <LidarSetPos+0x1934>
						{
							while(ps4.button == SQUARE);
 800f3f2:	bf00      	nop
 800f3f4:	4bb1      	ldr	r3, [pc, #708]	; (800f6bc <LidarSetPos+0x1bec>)
 800f3f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3fc:	d0fa      	beq.n	800f3f4 <LidarSetPos+0x1924>
							PP_stop(&pp);
 800f3fe:	48b0      	ldr	r0, [pc, #704]	; (800f6c0 <LidarSetPos+0x1bf0>)
 800f400:	f7f6 fcfb 	bl	8005dfa <PP_stop>
						}

						if(pp.real_y >= 3.0)
 800f404:	4bae      	ldr	r3, [pc, #696]	; (800f6c0 <LidarSetPos+0x1bf0>)
 800f406:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800f40a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800f40e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f416:	db04      	blt.n	800f422 <LidarSetPos+0x1952>
							pp.target_vel[0] = 1.0;
 800f418:	4ba9      	ldr	r3, [pc, #676]	; (800f6c0 <LidarSetPos+0x1bf0>)
 800f41a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f41e:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

						if(In_LS_Left_1 && In_LS_Left_2 && pp.real_z < -150 && pp.real_y > 3)
 800f422:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f426:	48a7      	ldr	r0, [pc, #668]	; (800f6c4 <LidarSetPos+0x1bf4>)
 800f428:	f002 ff92 	bl	8012350 <HAL_GPIO_ReadPin>
 800f42c:	4603      	mov	r3, r0
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d120      	bne.n	800f474 <LidarSetPos+0x19a4>
 800f432:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f436:	48a3      	ldr	r0, [pc, #652]	; (800f6c4 <LidarSetPos+0x1bf4>)
 800f438:	f002 ff8a 	bl	8012350 <HAL_GPIO_ReadPin>
 800f43c:	4603      	mov	r3, r0
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d118      	bne.n	800f474 <LidarSetPos+0x19a4>
 800f442:	4b9f      	ldr	r3, [pc, #636]	; (800f6c0 <LidarSetPos+0x1bf0>)
 800f444:	edd3 7a04 	vldr	s15, [r3, #16]
 800f448:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800f6c8 <LidarSetPos+0x1bf8>
 800f44c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f454:	d400      	bmi.n	800f458 <LidarSetPos+0x1988>
 800f456:	e00d      	b.n	800f474 <LidarSetPos+0x19a4>
 800f458:	4b99      	ldr	r3, [pc, #612]	; (800f6c0 <LidarSetPos+0x1bf0>)
 800f45a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800f45e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800f462:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f46a:	dc00      	bgt.n	800f46e <LidarSetPos+0x199e>
 800f46c:	e002      	b.n	800f474 <LidarSetPos+0x19a4>
							PP_stop(&pp);
 800f46e:	4894      	ldr	r0, [pc, #592]	; (800f6c0 <LidarSetPos+0x1bf0>)
 800f470:	f7f6 fcc3 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800f474:	4b92      	ldr	r3, [pc, #584]	; (800f6c0 <LidarSetPos+0x1bf0>)
 800f476:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f47a:	f003 0301 	and.w	r3, r3, #1
 800f47e:	b2db      	uxtb	r3, r3
 800f480:	2b00      	cmp	r3, #0
 800f482:	d1b1      	bne.n	800f3e8 <LidarSetPos+0x1918>
					}

					AdjustRings();
 800f484:	f7fc ff52 	bl	800c32c <AdjustRings>
					adjust_servo;
 800f488:	f240 31b6 	movw	r1, #950	; 0x3b6
 800f48c:	488f      	ldr	r0, [pc, #572]	; (800f6cc <LidarSetPos+0x1bfc>)
 800f48e:	f7fa fca7 	bl	8009de0 <ServoSetPulse>
					break;
 800f492:	e112      	b.n	800f6ba <LidarSetPos+0x1bea>

				case UPPER_LEFT:
					lidar->pos = UPPER_RIGHT;
 800f494:	463b      	mov	r3, r7
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	2208      	movs	r2, #8
 800f49a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f49e:	e10c      	b.n	800f6ba <LidarSetPos+0x1bea>

				case CENTER:
					lidar->pos = UPPER_RIGHT;
 800f4a0:	463b      	mov	r3, r7
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	2208      	movs	r2, #8
 800f4a6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f4aa:	e106      	b.n	800f6ba <LidarSetPos+0x1bea>

				case CENTER_3:
					lidar->pos = UPPER_RIGHT;
 800f4ac:	463b      	mov	r3, r7
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	2208      	movs	r2, #8
 800f4b2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					if(blue)
 800f4b6:	4b86      	ldr	r3, [pc, #536]	; (800f6d0 <LidarSetPos+0x1c00>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d007      	beq.n	800f4ce <LidarSetPos+0x19fe>
					{
						vesc_speed = BlueType3;
 800f4be:	4b85      	ldr	r3, [pc, #532]	; (800f6d4 <LidarSetPos+0x1c04>)
 800f4c0:	4a85      	ldr	r2, [pc, #532]	; (800f6d8 <LidarSetPos+0x1c08>)
 800f4c2:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType3Duty;
 800f4c4:	4b85      	ldr	r3, [pc, #532]	; (800f6dc <LidarSetPos+0x1c0c>)
 800f4c6:	f04f 527b 	mov.w	r2, #1052770304	; 0x3ec00000
 800f4ca:	601a      	str	r2, [r3, #0]
 800f4cc:	e006      	b.n	800f4dc <LidarSetPos+0x1a0c>
					}
					else
					{
						vesc_speed = RedType3;
 800f4ce:	4b81      	ldr	r3, [pc, #516]	; (800f6d4 <LidarSetPos+0x1c04>)
 800f4d0:	4a83      	ldr	r2, [pc, #524]	; (800f6e0 <LidarSetPos+0x1c10>)
 800f4d2:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType3Duty;
 800f4d4:	4b81      	ldr	r3, [pc, #516]	; (800f6dc <LidarSetPos+0x1c0c>)
 800f4d6:	f04f 527b 	mov.w	r2, #1052770304	; 0x3ec00000
 800f4da:	601a      	str	r2, [r3, #0]
					}
					setOrientationMODN(OPERATOR_TURNED_90_DEGREES_ANTICLOCKWISE);
 800f4dc:	2003      	movs	r0, #3
 800f4de:	f7f5 fb77 	bl	8004bd0 <setOrientationMODN>
					ResetCoordinate();
 800f4e2:	f7fc ff5b 	bl	800c39c <ResetCoordinate>
					PP_start(center_3_to_upper_right, 1, &pp);
 800f4e6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800f4ea:	4a75      	ldr	r2, [pc, #468]	; (800f6c0 <LidarSetPos+0x1bf0>)
 800f4ec:	2101      	movs	r1, #1
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7f6 fa49 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f4f4:	e00d      	b.n	800f512 <LidarSetPos+0x1a42>
					{
						if(ps4.button == SQUARE)
 800f4f6:	4b71      	ldr	r3, [pc, #452]	; (800f6bc <LidarSetPos+0x1bec>)
 800f4f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f4fe:	d108      	bne.n	800f512 <LidarSetPos+0x1a42>
						{
							while(ps4.button == SQUARE);
 800f500:	bf00      	nop
 800f502:	4b6e      	ldr	r3, [pc, #440]	; (800f6bc <LidarSetPos+0x1bec>)
 800f504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f50a:	d0fa      	beq.n	800f502 <LidarSetPos+0x1a32>
							PP_stop(&pp);
 800f50c:	486c      	ldr	r0, [pc, #432]	; (800f6c0 <LidarSetPos+0x1bf0>)
 800f50e:	f7f6 fc74 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800f512:	4b6b      	ldr	r3, [pc, #428]	; (800f6c0 <LidarSetPos+0x1bf0>)
 800f514:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f518:	f003 0301 	and.w	r3, r3, #1
 800f51c:	b2db      	uxtb	r3, r3
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d1e9      	bne.n	800f4f6 <LidarSetPos+0x1a26>
//							lidar->pos = CENTER_4;
//							lidar->pos_counter = CENTER_4;
						}
					}

					PP_start(center_3_to_upper_right_2, 1, &pp);
 800f522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f526:	4a66      	ldr	r2, [pc, #408]	; (800f6c0 <LidarSetPos+0x1bf0>)
 800f528:	2101      	movs	r1, #1
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7f6 fa2b 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f530:	e02f      	b.n	800f592 <LidarSetPos+0x1ac2>
					{
						if(ps4.button == SQUARE)
 800f532:	4b62      	ldr	r3, [pc, #392]	; (800f6bc <LidarSetPos+0x1bec>)
 800f534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f53a:	d108      	bne.n	800f54e <LidarSetPos+0x1a7e>
						{
							while(ps4.button == SQUARE);
 800f53c:	bf00      	nop
 800f53e:	4b5f      	ldr	r3, [pc, #380]	; (800f6bc <LidarSetPos+0x1bec>)
 800f540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f546:	d0fa      	beq.n	800f53e <LidarSetPos+0x1a6e>
							PP_stop(&pp);
 800f548:	485d      	ldr	r0, [pc, #372]	; (800f6c0 <LidarSetPos+0x1bf0>)
 800f54a:	f7f6 fc56 	bl	8005dfa <PP_stop>
						}

						if(pp.real_y >= 2.0)
 800f54e:	4b5c      	ldr	r3, [pc, #368]	; (800f6c0 <LidarSetPos+0x1bf0>)
 800f550:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800f554:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800f558:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f560:	db04      	blt.n	800f56c <LidarSetPos+0x1a9c>
							pp.target_vel[0] = 1.0;
 800f562:	4b57      	ldr	r3, [pc, #348]	; (800f6c0 <LidarSetPos+0x1bf0>)
 800f564:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f568:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

						if(In_LS_Left_1 && In_LS_Left_2)
 800f56c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f570:	4854      	ldr	r0, [pc, #336]	; (800f6c4 <LidarSetPos+0x1bf4>)
 800f572:	f002 feed 	bl	8012350 <HAL_GPIO_ReadPin>
 800f576:	4603      	mov	r3, r0
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d10a      	bne.n	800f592 <LidarSetPos+0x1ac2>
 800f57c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f580:	4850      	ldr	r0, [pc, #320]	; (800f6c4 <LidarSetPos+0x1bf4>)
 800f582:	f002 fee5 	bl	8012350 <HAL_GPIO_ReadPin>
 800f586:	4603      	mov	r3, r0
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d102      	bne.n	800f592 <LidarSetPos+0x1ac2>
							PP_stop(&pp);
 800f58c:	484c      	ldr	r0, [pc, #304]	; (800f6c0 <LidarSetPos+0x1bf0>)
 800f58e:	f7f6 fc34 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800f592:	4b4b      	ldr	r3, [pc, #300]	; (800f6c0 <LidarSetPos+0x1bf0>)
 800f594:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f598:	f003 0301 	and.w	r3, r3, #1
 800f59c:	b2db      	uxtb	r3, r3
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d1c7      	bne.n	800f532 <LidarSetPos+0x1a62>
					}

					AdjustRings();
 800f5a2:	f7fc fec3 	bl	800c32c <AdjustRings>
					adjust_servo;
 800f5a6:	f240 31b6 	movw	r1, #950	; 0x3b6
 800f5aa:	4848      	ldr	r0, [pc, #288]	; (800f6cc <LidarSetPos+0x1bfc>)
 800f5ac:	f7fa fc18 	bl	8009de0 <ServoSetPulse>


					break;
 800f5b0:	e083      	b.n	800f6ba <LidarSetPos+0x1bea>

				case CENTER_4:
					lidar->pos = UPPER_RIGHT;
 800f5b2:	463b      	mov	r3, r7
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	2208      	movs	r2, #8
 800f5b8:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					if(blue)
 800f5bc:	4b44      	ldr	r3, [pc, #272]	; (800f6d0 <LidarSetPos+0x1c00>)
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d007      	beq.n	800f5d4 <LidarSetPos+0x1b04>
					{
						vesc_speed = BlueType3;
 800f5c4:	4b43      	ldr	r3, [pc, #268]	; (800f6d4 <LidarSetPos+0x1c04>)
 800f5c6:	4a44      	ldr	r2, [pc, #272]	; (800f6d8 <LidarSetPos+0x1c08>)
 800f5c8:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType3Duty;
 800f5ca:	4b44      	ldr	r3, [pc, #272]	; (800f6dc <LidarSetPos+0x1c0c>)
 800f5cc:	f04f 527b 	mov.w	r2, #1052770304	; 0x3ec00000
 800f5d0:	601a      	str	r2, [r3, #0]
 800f5d2:	e006      	b.n	800f5e2 <LidarSetPos+0x1b12>
					}
					else
					{
						vesc_speed = RedType3;
 800f5d4:	4b3f      	ldr	r3, [pc, #252]	; (800f6d4 <LidarSetPos+0x1c04>)
 800f5d6:	4a42      	ldr	r2, [pc, #264]	; (800f6e0 <LidarSetPos+0x1c10>)
 800f5d8:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType3Duty;
 800f5da:	4b40      	ldr	r3, [pc, #256]	; (800f6dc <LidarSetPos+0x1c0c>)
 800f5dc:	f04f 527b 	mov.w	r2, #1052770304	; 0x3ec00000
 800f5e0:	601a      	str	r2, [r3, #0]
					}
					setOrientationMODN(OPERATOR_TURNED_90_DEGREES_ANTICLOCKWISE);
 800f5e2:	2003      	movs	r0, #3
 800f5e4:	f7f5 faf4 	bl	8004bd0 <setOrientationMODN>
					ResetCoordinate();
 800f5e8:	f7fc fed8 	bl	800c39c <ResetCoordinate>
					PP_start(center_4_to_upper_right, 1, &pp);
 800f5ec:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800f5f0:	4a33      	ldr	r2, [pc, #204]	; (800f6c0 <LidarSetPos+0x1bf0>)
 800f5f2:	2101      	movs	r1, #1
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f7f6 f9c6 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f5fa:	e00d      	b.n	800f618 <LidarSetPos+0x1b48>
					{
						if(ps4.button == SQUARE)
 800f5fc:	4b2f      	ldr	r3, [pc, #188]	; (800f6bc <LidarSetPos+0x1bec>)
 800f5fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f604:	d108      	bne.n	800f618 <LidarSetPos+0x1b48>
						{
							while(ps4.button == SQUARE);
 800f606:	bf00      	nop
 800f608:	4b2c      	ldr	r3, [pc, #176]	; (800f6bc <LidarSetPos+0x1bec>)
 800f60a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f60c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f610:	d0fa      	beq.n	800f608 <LidarSetPos+0x1b38>
							PP_stop(&pp);
 800f612:	482b      	ldr	r0, [pc, #172]	; (800f6c0 <LidarSetPos+0x1bf0>)
 800f614:	f7f6 fbf1 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800f618:	4b29      	ldr	r3, [pc, #164]	; (800f6c0 <LidarSetPos+0x1bf0>)
 800f61a:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f61e:	f003 0301 	and.w	r3, r3, #1
 800f622:	b2db      	uxtb	r3, r3
 800f624:	2b00      	cmp	r3, #0
 800f626:	d1e9      	bne.n	800f5fc <LidarSetPos+0x1b2c>
//							lidar->pos = CENTER_4;
//							lidar->pos_counter = CENTER_4;
						}
					}

					PP_start(center_4_to_upper_right_2, 1, &pp);
 800f628:	f507 731d 	add.w	r3, r7, #628	; 0x274
 800f62c:	4a24      	ldr	r2, [pc, #144]	; (800f6c0 <LidarSetPos+0x1bf0>)
 800f62e:	2101      	movs	r1, #1
 800f630:	4618      	mov	r0, r3
 800f632:	f7f6 f9a8 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f636:	e02f      	b.n	800f698 <LidarSetPos+0x1bc8>
					{
						if(ps4.button == SQUARE)
 800f638:	4b20      	ldr	r3, [pc, #128]	; (800f6bc <LidarSetPos+0x1bec>)
 800f63a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f63c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f640:	d108      	bne.n	800f654 <LidarSetPos+0x1b84>
						{
							while(ps4.button == SQUARE)
 800f642:	e002      	b.n	800f64a <LidarSetPos+0x1b7a>
							PP_stop(&pp);
 800f644:	481e      	ldr	r0, [pc, #120]	; (800f6c0 <LidarSetPos+0x1bf0>)
 800f646:	f7f6 fbd8 	bl	8005dfa <PP_stop>
							while(ps4.button == SQUARE)
 800f64a:	4b1c      	ldr	r3, [pc, #112]	; (800f6bc <LidarSetPos+0x1bec>)
 800f64c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f64e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f652:	d0f7      	beq.n	800f644 <LidarSetPos+0x1b74>
						}

						if(pp.real_y >= 2.0)
 800f654:	4b1a      	ldr	r3, [pc, #104]	; (800f6c0 <LidarSetPos+0x1bf0>)
 800f656:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800f65a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800f65e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f666:	db04      	blt.n	800f672 <LidarSetPos+0x1ba2>
							pp.target_vel[0] = 1.0;
 800f668:	4b15      	ldr	r3, [pc, #84]	; (800f6c0 <LidarSetPos+0x1bf0>)
 800f66a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f66e:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

						if(In_LS_Left_1 && In_LS_Left_2)
 800f672:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f676:	4813      	ldr	r0, [pc, #76]	; (800f6c4 <LidarSetPos+0x1bf4>)
 800f678:	f002 fe6a 	bl	8012350 <HAL_GPIO_ReadPin>
 800f67c:	4603      	mov	r3, r0
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d10a      	bne.n	800f698 <LidarSetPos+0x1bc8>
 800f682:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f686:	480f      	ldr	r0, [pc, #60]	; (800f6c4 <LidarSetPos+0x1bf4>)
 800f688:	f002 fe62 	bl	8012350 <HAL_GPIO_ReadPin>
 800f68c:	4603      	mov	r3, r0
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d102      	bne.n	800f698 <LidarSetPos+0x1bc8>
							PP_stop(&pp);
 800f692:	480b      	ldr	r0, [pc, #44]	; (800f6c0 <LidarSetPos+0x1bf0>)
 800f694:	f7f6 fbb1 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800f698:	4b09      	ldr	r3, [pc, #36]	; (800f6c0 <LidarSetPos+0x1bf0>)
 800f69a:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f69e:	f003 0301 	and.w	r3, r3, #1
 800f6a2:	b2db      	uxtb	r3, r3
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d1c7      	bne.n	800f638 <LidarSetPos+0x1b68>
					}

					AdjustRings();
 800f6a8:	f7fc fe40 	bl	800c32c <AdjustRings>
					adjust_servo;
 800f6ac:	f240 31b6 	movw	r1, #950	; 0x3b6
 800f6b0:	4806      	ldr	r0, [pc, #24]	; (800f6cc <LidarSetPos+0x1bfc>)
 800f6b2:	f7fa fb95 	bl	8009de0 <ServoSetPulse>

					break;
 800f6b6:	e000      	b.n	800f6ba <LidarSetPos+0x1bea>

				default:
					break;
 800f6b8:	bf00      	nop
			}
			break;
 800f6ba:	e242      	b.n	800fb42 <LidarSetPos+0x2072>
 800f6bc:	2000a014 	.word	0x2000a014
 800f6c0:	20006cc4 	.word	0x20006cc4
 800f6c4:	40020c00 	.word	0x40020c00
 800f6c8:	c3160000 	.word	0xc3160000
 800f6cc:	2000786c 	.word	0x2000786c
 800f6d0:	20006a1c 	.word	0x20006a1c
 800f6d4:	2000659c 	.word	0x2000659c
 800f6d8:	413c0000 	.word	0x413c0000
 800f6dc:	20007380 	.word	0x20007380
 800f6e0:	413b3333 	.word	0x413b3333

		case PICK_RIGHT:
			switch(lidar->pos)
 800f6e4:	463b      	mov	r3, r7
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f6ec:	3b03      	subs	r3, #3
 800f6ee:	2b05      	cmp	r3, #5
 800f6f0:	f200 8225 	bhi.w	800fb3e <LidarSetPos+0x206e>
 800f6f4:	a201      	add	r2, pc, #4	; (adr r2, 800f6fc <LidarSetPos+0x1c2c>)
 800f6f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6fa:	bf00      	nop
 800f6fc:	0800f7c5 	.word	0x0800f7c5
 800f700:	0800f86d 	.word	0x0800f86d
 800f704:	0800f90f 	.word	0x0800f90f
 800f708:	0800f9f5 	.word	0x0800f9f5
 800f70c:	0800fa9d 	.word	0x0800fa9d
 800f710:	0800f715 	.word	0x0800f715
			{
				case UPPER_RIGHT:
					lidar->pos = PICK_RIGHT;
 800f714:	463b      	mov	r3, r7
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	2209      	movs	r2, #9
 800f71a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 800f71e:	f7fc fe3d 	bl	800c39c <ResetCoordinate>
					setOrientationMODN(OPERATOR_TURNED_0_DEGREE);
 800f722:	2000      	movs	r0, #0
 800f724:	f7f5 fa54 	bl	8004bd0 <setOrientationMODN>
					loaded = 0;
 800f728:	4ba9      	ldr	r3, [pc, #676]	; (800f9d0 <LidarSetPos+0x1f00>)
 800f72a:	2200      	movs	r2, #0
 800f72c:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 800f72e:	4ba9      	ldr	r3, [pc, #676]	; (800f9d4 <LidarSetPos+0x1f04>)
 800f730:	f04f 0200 	mov.w	r2, #0
 800f734:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 800f736:	4ba8      	ldr	r3, [pc, #672]	; (800f9d8 <LidarSetPos+0x1f08>)
 800f738:	f04f 0200 	mov.w	r2, #0
 800f73c:	601a      	str	r2, [r3, #0]
					setPick(1000);
 800f73e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f742:	f7fc f965 	bl	800ba10 <setPick>
					open_servo;
 800f746:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800f74a:	48a4      	ldr	r0, [pc, #656]	; (800f9dc <LidarSetPos+0x1f0c>)
 800f74c:	f7fa fb48 	bl	8009de0 <ServoSetPulse>
					cylinder_retract;
 800f750:	4aa3      	ldr	r2, [pc, #652]	; (800f9e0 <LidarSetPos+0x1f10>)
 800f752:	7f13      	ldrb	r3, [r2, #28]
 800f754:	f36f 1386 	bfc	r3, #6, #1
 800f758:	7713      	strb	r3, [r2, #28]
					PP_start(upper_right_to_pick_right, 1, &pp);
 800f75a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800f75e:	4aa1      	ldr	r2, [pc, #644]	; (800f9e4 <LidarSetPos+0x1f14>)
 800f760:	2101      	movs	r1, #1
 800f762:	4618      	mov	r0, r3
 800f764:	f7f6 f90f 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f768:	e020      	b.n	800f7ac <LidarSetPos+0x1cdc>
					{
						if(ps4.button == SQUARE)
 800f76a:	4b9f      	ldr	r3, [pc, #636]	; (800f9e8 <LidarSetPos+0x1f18>)
 800f76c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f76e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f772:	d108      	bne.n	800f786 <LidarSetPos+0x1cb6>
						{
							while(ps4.button == SQUARE);
 800f774:	bf00      	nop
 800f776:	4b9c      	ldr	r3, [pc, #624]	; (800f9e8 <LidarSetPos+0x1f18>)
 800f778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f77a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f77e:	d0fa      	beq.n	800f776 <LidarSetPos+0x1ca6>
							PP_stop(&pp);
 800f780:	4898      	ldr	r0, [pc, #608]	; (800f9e4 <LidarSetPos+0x1f14>)
 800f782:	f7f6 fb3a 	bl	8005dfa <PP_stop>
						}

						if(pp.real_y <= -2.7)
 800f786:	4b97      	ldr	r3, [pc, #604]	; (800f9e4 <LidarSetPos+0x1f14>)
 800f788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f78a:	4618      	mov	r0, r3
 800f78c:	f7f0 fedc 	bl	8000548 <__aeabi_f2d>
 800f790:	a389      	add	r3, pc, #548	; (adr r3, 800f9b8 <LidarSetPos+0x1ee8>)
 800f792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f796:	f7f1 f9ab 	bl	8000af0 <__aeabi_dcmple>
 800f79a:	4603      	mov	r3, r0
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d100      	bne.n	800f7a2 <LidarSetPos+0x1cd2>
 800f7a0:	e004      	b.n	800f7ac <LidarSetPos+0x1cdc>
							pp.target_vel[0] = 1.5;
 800f7a2:	4b90      	ldr	r3, [pc, #576]	; (800f9e4 <LidarSetPos+0x1f14>)
 800f7a4:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800f7a8:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
					while(pp.pp_start)
 800f7ac:	4b8d      	ldr	r3, [pc, #564]	; (800f9e4 <LidarSetPos+0x1f14>)
 800f7ae:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f7b2:	f003 0301 	and.w	r3, r3, #1
 800f7b6:	b2db      	uxtb	r3, r3
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d1d6      	bne.n	800f76a <LidarSetPos+0x1c9a>
					}
					pick_right = 1;
 800f7bc:	4b8b      	ldr	r3, [pc, #556]	; (800f9ec <LidarSetPos+0x1f1c>)
 800f7be:	2201      	movs	r2, #1
 800f7c0:	601a      	str	r2, [r3, #0]
					break;
 800f7c2:	e1bd      	b.n	800fb40 <LidarSetPos+0x2070>

				case CENTER_1:
					lidar->pos = PICK_RIGHT;
 800f7c4:	463b      	mov	r3, r7
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	2209      	movs	r2, #9
 800f7ca:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 800f7ce:	f7fc fde5 	bl	800c39c <ResetCoordinate>
					loaded = 0;
 800f7d2:	4b7f      	ldr	r3, [pc, #508]	; (800f9d0 <LidarSetPos+0x1f00>)
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 800f7d8:	4b7e      	ldr	r3, [pc, #504]	; (800f9d4 <LidarSetPos+0x1f04>)
 800f7da:	f04f 0200 	mov.w	r2, #0
 800f7de:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 800f7e0:	4b7d      	ldr	r3, [pc, #500]	; (800f9d8 <LidarSetPos+0x1f08>)
 800f7e2:	f04f 0200 	mov.w	r2, #0
 800f7e6:	601a      	str	r2, [r3, #0]
					setPick(1000);
 800f7e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f7ec:	f7fc f910 	bl	800ba10 <setPick>
					open_servo;
 800f7f0:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800f7f4:	4879      	ldr	r0, [pc, #484]	; (800f9dc <LidarSetPos+0x1f0c>)
 800f7f6:	f7fa faf3 	bl	8009de0 <ServoSetPulse>
					cylinder_retract;
 800f7fa:	4a79      	ldr	r2, [pc, #484]	; (800f9e0 <LidarSetPos+0x1f10>)
 800f7fc:	7f13      	ldrb	r3, [r2, #28]
 800f7fe:	f36f 1386 	bfc	r3, #6, #1
 800f802:	7713      	strb	r3, [r2, #28]
					PP_start(center_1_to_pick_right, 1, &pp);
 800f804:	f107 030c 	add.w	r3, r7, #12
 800f808:	4a76      	ldr	r2, [pc, #472]	; (800f9e4 <LidarSetPos+0x1f14>)
 800f80a:	2101      	movs	r1, #1
 800f80c:	4618      	mov	r0, r3
 800f80e:	f7f6 f8ba 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f812:	e01f      	b.n	800f854 <LidarSetPos+0x1d84>
					{
						if(ps4.button == SQUARE)
 800f814:	4b74      	ldr	r3, [pc, #464]	; (800f9e8 <LidarSetPos+0x1f18>)
 800f816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f81c:	d108      	bne.n	800f830 <LidarSetPos+0x1d60>
						{
							while(ps4.button == SQUARE);
 800f81e:	bf00      	nop
 800f820:	4b71      	ldr	r3, [pc, #452]	; (800f9e8 <LidarSetPos+0x1f18>)
 800f822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f828:	d0fa      	beq.n	800f820 <LidarSetPos+0x1d50>
							PP_stop(&pp);
 800f82a:	486e      	ldr	r0, [pc, #440]	; (800f9e4 <LidarSetPos+0x1f14>)
 800f82c:	f7f6 fae5 	bl	8005dfa <PP_stop>
						}

						if(pp.real_x >= 5.2)
 800f830:	4b6c      	ldr	r3, [pc, #432]	; (800f9e4 <LidarSetPos+0x1f14>)
 800f832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f834:	4618      	mov	r0, r3
 800f836:	f7f0 fe87 	bl	8000548 <__aeabi_f2d>
 800f83a:	a361      	add	r3, pc, #388	; (adr r3, 800f9c0 <LidarSetPos+0x1ef0>)
 800f83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f840:	f7f1 f960 	bl	8000b04 <__aeabi_dcmpge>
 800f844:	4603      	mov	r3, r0
 800f846:	2b00      	cmp	r3, #0
 800f848:	d100      	bne.n	800f84c <LidarSetPos+0x1d7c>
 800f84a:	e003      	b.n	800f854 <LidarSetPos+0x1d84>
							pp.target_vel[0] = 1.7;
 800f84c:	4b65      	ldr	r3, [pc, #404]	; (800f9e4 <LidarSetPos+0x1f14>)
 800f84e:	4a68      	ldr	r2, [pc, #416]	; (800f9f0 <LidarSetPos+0x1f20>)
 800f850:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
					while(pp.pp_start)
 800f854:	4b63      	ldr	r3, [pc, #396]	; (800f9e4 <LidarSetPos+0x1f14>)
 800f856:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f85a:	f003 0301 	and.w	r3, r3, #1
 800f85e:	b2db      	uxtb	r3, r3
 800f860:	2b00      	cmp	r3, #0
 800f862:	d1d7      	bne.n	800f814 <LidarSetPos+0x1d44>
					}
					pick_right = 1;
 800f864:	4b61      	ldr	r3, [pc, #388]	; (800f9ec <LidarSetPos+0x1f1c>)
 800f866:	2201      	movs	r2, #1
 800f868:	601a      	str	r2, [r3, #0]
					break;
 800f86a:	e169      	b.n	800fb40 <LidarSetPos+0x2070>

				case CENTER_2:
					lidar->pos = PICK_RIGHT;
 800f86c:	463b      	mov	r3, r7
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	2209      	movs	r2, #9
 800f872:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 800f876:	f7fc fd91 	bl	800c39c <ResetCoordinate>
					loaded = 0;
 800f87a:	4b55      	ldr	r3, [pc, #340]	; (800f9d0 <LidarSetPos+0x1f00>)
 800f87c:	2200      	movs	r2, #0
 800f87e:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 800f880:	4b54      	ldr	r3, [pc, #336]	; (800f9d4 <LidarSetPos+0x1f04>)
 800f882:	f04f 0200 	mov.w	r2, #0
 800f886:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 800f888:	4b53      	ldr	r3, [pc, #332]	; (800f9d8 <LidarSetPos+0x1f08>)
 800f88a:	f04f 0200 	mov.w	r2, #0
 800f88e:	601a      	str	r2, [r3, #0]
					setPick(1000);
 800f890:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f894:	f7fc f8bc 	bl	800ba10 <setPick>
					open_servo;
 800f898:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800f89c:	484f      	ldr	r0, [pc, #316]	; (800f9dc <LidarSetPos+0x1f0c>)
 800f89e:	f7fa fa9f 	bl	8009de0 <ServoSetPulse>
					cylinder_retract;
 800f8a2:	4a4f      	ldr	r2, [pc, #316]	; (800f9e0 <LidarSetPos+0x1f10>)
 800f8a4:	7f13      	ldrb	r3, [r2, #28]
 800f8a6:	f36f 1386 	bfc	r3, #6, #1
 800f8aa:	7713      	strb	r3, [r2, #28]
					PP_start(center_2_to_pick_right, 1, &pp);
 800f8ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f8b0:	4a4c      	ldr	r2, [pc, #304]	; (800f9e4 <LidarSetPos+0x1f14>)
 800f8b2:	2101      	movs	r1, #1
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7f6 f866 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f8ba:	e01c      	b.n	800f8f6 <LidarSetPos+0x1e26>
					{
						if(ps4.button == SQUARE)
 800f8bc:	4b4a      	ldr	r3, [pc, #296]	; (800f9e8 <LidarSetPos+0x1f18>)
 800f8be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f8c4:	d108      	bne.n	800f8d8 <LidarSetPos+0x1e08>
						{
							while(ps4.button == SQUARE);
 800f8c6:	bf00      	nop
 800f8c8:	4b47      	ldr	r3, [pc, #284]	; (800f9e8 <LidarSetPos+0x1f18>)
 800f8ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f8d0:	d0fa      	beq.n	800f8c8 <LidarSetPos+0x1df8>
							PP_stop(&pp);
 800f8d2:	4844      	ldr	r0, [pc, #272]	; (800f9e4 <LidarSetPos+0x1f14>)
 800f8d4:	f7f6 fa91 	bl	8005dfa <PP_stop>
						}

						if(pp.real_x >= 4.5)
 800f8d8:	4b42      	ldr	r3, [pc, #264]	; (800f9e4 <LidarSetPos+0x1f14>)
 800f8da:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800f8de:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 800f8e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ea:	da00      	bge.n	800f8ee <LidarSetPos+0x1e1e>
 800f8ec:	e003      	b.n	800f8f6 <LidarSetPos+0x1e26>
							pp.target_vel[0] = 1.7;
 800f8ee:	4b3d      	ldr	r3, [pc, #244]	; (800f9e4 <LidarSetPos+0x1f14>)
 800f8f0:	4a3f      	ldr	r2, [pc, #252]	; (800f9f0 <LidarSetPos+0x1f20>)
 800f8f2:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
					while(pp.pp_start)
 800f8f6:	4b3b      	ldr	r3, [pc, #236]	; (800f9e4 <LidarSetPos+0x1f14>)
 800f8f8:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f8fc:	f003 0301 	and.w	r3, r3, #1
 800f900:	b2db      	uxtb	r3, r3
 800f902:	2b00      	cmp	r3, #0
 800f904:	d1da      	bne.n	800f8bc <LidarSetPos+0x1dec>
					}
					pick_right = 1;
 800f906:	4b39      	ldr	r3, [pc, #228]	; (800f9ec <LidarSetPos+0x1f1c>)
 800f908:	2201      	movs	r2, #1
 800f90a:	601a      	str	r2, [r3, #0]
					break;
 800f90c:	e118      	b.n	800fb40 <LidarSetPos+0x2070>

				case CENTER:
					lidar->pos = PICK_RIGHT;
 800f90e:	463b      	mov	r3, r7
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	2209      	movs	r2, #9
 800f914:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 800f918:	f7fc fd40 	bl	800c39c <ResetCoordinate>
					loaded = 0;
 800f91c:	4b2c      	ldr	r3, [pc, #176]	; (800f9d0 <LidarSetPos+0x1f00>)
 800f91e:	2200      	movs	r2, #0
 800f920:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 800f922:	4b2c      	ldr	r3, [pc, #176]	; (800f9d4 <LidarSetPos+0x1f04>)
 800f924:	f04f 0200 	mov.w	r2, #0
 800f928:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 800f92a:	4b2b      	ldr	r3, [pc, #172]	; (800f9d8 <LidarSetPos+0x1f08>)
 800f92c:	f04f 0200 	mov.w	r2, #0
 800f930:	601a      	str	r2, [r3, #0]
					setPick(1000);
 800f932:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f936:	f7fc f86b 	bl	800ba10 <setPick>
					open_servo;
 800f93a:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800f93e:	4827      	ldr	r0, [pc, #156]	; (800f9dc <LidarSetPos+0x1f0c>)
 800f940:	f7fa fa4e 	bl	8009de0 <ServoSetPulse>
					cylinder_retract;
 800f944:	4a26      	ldr	r2, [pc, #152]	; (800f9e0 <LidarSetPos+0x1f10>)
 800f946:	7f13      	ldrb	r3, [r2, #28]
 800f948:	f36f 1386 	bfc	r3, #6, #1
 800f94c:	7713      	strb	r3, [r2, #28]
					PP_start(center_to_pick_right, 1, &pp);
 800f94e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f952:	4a24      	ldr	r2, [pc, #144]	; (800f9e4 <LidarSetPos+0x1f14>)
 800f954:	2101      	movs	r1, #1
 800f956:	4618      	mov	r0, r3
 800f958:	f7f6 f815 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f95c:	e01f      	b.n	800f99e <LidarSetPos+0x1ece>
					{
						if(ps4.button == SQUARE)
 800f95e:	4b22      	ldr	r3, [pc, #136]	; (800f9e8 <LidarSetPos+0x1f18>)
 800f960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f966:	d108      	bne.n	800f97a <LidarSetPos+0x1eaa>
						{
							while(ps4.button == SQUARE);
 800f968:	bf00      	nop
 800f96a:	4b1f      	ldr	r3, [pc, #124]	; (800f9e8 <LidarSetPos+0x1f18>)
 800f96c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f96e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f972:	d0fa      	beq.n	800f96a <LidarSetPos+0x1e9a>
							PP_stop(&pp);
 800f974:	481b      	ldr	r0, [pc, #108]	; (800f9e4 <LidarSetPos+0x1f14>)
 800f976:	f7f6 fa40 	bl	8005dfa <PP_stop>
						}

						if(pp.real_x >= 3.7)
 800f97a:	4b1a      	ldr	r3, [pc, #104]	; (800f9e4 <LidarSetPos+0x1f14>)
 800f97c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f97e:	4618      	mov	r0, r3
 800f980:	f7f0 fde2 	bl	8000548 <__aeabi_f2d>
 800f984:	a310      	add	r3, pc, #64	; (adr r3, 800f9c8 <LidarSetPos+0x1ef8>)
 800f986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f98a:	f7f1 f8bb 	bl	8000b04 <__aeabi_dcmpge>
 800f98e:	4603      	mov	r3, r0
 800f990:	2b00      	cmp	r3, #0
 800f992:	d100      	bne.n	800f996 <LidarSetPos+0x1ec6>
 800f994:	e003      	b.n	800f99e <LidarSetPos+0x1ece>
							pp.target_vel[0] = 1.7;
 800f996:	4b13      	ldr	r3, [pc, #76]	; (800f9e4 <LidarSetPos+0x1f14>)
 800f998:	4a15      	ldr	r2, [pc, #84]	; (800f9f0 <LidarSetPos+0x1f20>)
 800f99a:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
					while(pp.pp_start)
 800f99e:	4b11      	ldr	r3, [pc, #68]	; (800f9e4 <LidarSetPos+0x1f14>)
 800f9a0:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f9a4:	f003 0301 	and.w	r3, r3, #1
 800f9a8:	b2db      	uxtb	r3, r3
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d1d7      	bne.n	800f95e <LidarSetPos+0x1e8e>
					}
					pick_right = 1;
 800f9ae:	4b0f      	ldr	r3, [pc, #60]	; (800f9ec <LidarSetPos+0x1f1c>)
 800f9b0:	2201      	movs	r2, #1
 800f9b2:	601a      	str	r2, [r3, #0]
					break;
 800f9b4:	e0c4      	b.n	800fb40 <LidarSetPos+0x2070>
 800f9b6:	bf00      	nop
 800f9b8:	9999999a 	.word	0x9999999a
 800f9bc:	c0059999 	.word	0xc0059999
 800f9c0:	cccccccd 	.word	0xcccccccd
 800f9c4:	4014cccc 	.word	0x4014cccc
 800f9c8:	9999999a 	.word	0x9999999a
 800f9cc:	400d9999 	.word	0x400d9999
 800f9d0:	20009428 	.word	0x20009428
 800f9d4:	20007380 	.word	0x20007380
 800f9d8:	2000659c 	.word	0x2000659c
 800f9dc:	2000786c 	.word	0x2000786c
 800f9e0:	2000959c 	.word	0x2000959c
 800f9e4:	20006cc4 	.word	0x20006cc4
 800f9e8:	2000a014 	.word	0x2000a014
 800f9ec:	2000a624 	.word	0x2000a624
 800f9f0:	3fd9999a 	.word	0x3fd9999a

				case CENTER_3:
					lidar->pos =  PICK_RIGHT;
 800f9f4:	463b      	mov	r3, r7
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	2209      	movs	r2, #9
 800f9fa:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 800f9fe:	f7fc fccd 	bl	800c39c <ResetCoordinate>
					loaded = 0;
 800fa02:	4b55      	ldr	r3, [pc, #340]	; (800fb58 <LidarSetPos+0x2088>)
 800fa04:	2200      	movs	r2, #0
 800fa06:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 800fa08:	4b54      	ldr	r3, [pc, #336]	; (800fb5c <LidarSetPos+0x208c>)
 800fa0a:	f04f 0200 	mov.w	r2, #0
 800fa0e:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 800fa10:	4b53      	ldr	r3, [pc, #332]	; (800fb60 <LidarSetPos+0x2090>)
 800fa12:	f04f 0200 	mov.w	r2, #0
 800fa16:	601a      	str	r2, [r3, #0]
					setPick(1000);
 800fa18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800fa1c:	f7fb fff8 	bl	800ba10 <setPick>
					open_servo;
 800fa20:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800fa24:	484f      	ldr	r0, [pc, #316]	; (800fb64 <LidarSetPos+0x2094>)
 800fa26:	f7fa f9db 	bl	8009de0 <ServoSetPulse>
					cylinder_retract;
 800fa2a:	4a4f      	ldr	r2, [pc, #316]	; (800fb68 <LidarSetPos+0x2098>)
 800fa2c:	7f13      	ldrb	r3, [r2, #28]
 800fa2e:	f36f 1386 	bfc	r3, #6, #1
 800fa32:	7713      	strb	r3, [r2, #28]
					PP_start(center_3_to_pick_right, 1, &pp);
 800fa34:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fa38:	4a4c      	ldr	r2, [pc, #304]	; (800fb6c <LidarSetPos+0x209c>)
 800fa3a:	2101      	movs	r1, #1
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f7f5 ffa2 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800fa42:	e01f      	b.n	800fa84 <LidarSetPos+0x1fb4>
					{
						if(ps4.button == SQUARE)
 800fa44:	4b4a      	ldr	r3, [pc, #296]	; (800fb70 <LidarSetPos+0x20a0>)
 800fa46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa4c:	d108      	bne.n	800fa60 <LidarSetPos+0x1f90>
						{
							while(ps4.button == SQUARE);
 800fa4e:	bf00      	nop
 800fa50:	4b47      	ldr	r3, [pc, #284]	; (800fb70 <LidarSetPos+0x20a0>)
 800fa52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa58:	d0fa      	beq.n	800fa50 <LidarSetPos+0x1f80>
							PP_stop(&pp);
 800fa5a:	4844      	ldr	r0, [pc, #272]	; (800fb6c <LidarSetPos+0x209c>)
 800fa5c:	f7f6 f9cd 	bl	8005dfa <PP_stop>
						}

						if(pp.real_x >= 2.4)
 800fa60:	4b42      	ldr	r3, [pc, #264]	; (800fb6c <LidarSetPos+0x209c>)
 800fa62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7f0 fd6f 	bl	8000548 <__aeabi_f2d>
 800fa6a:	a339      	add	r3, pc, #228	; (adr r3, 800fb50 <LidarSetPos+0x2080>)
 800fa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa70:	f7f1 f848 	bl	8000b04 <__aeabi_dcmpge>
 800fa74:	4603      	mov	r3, r0
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d100      	bne.n	800fa7c <LidarSetPos+0x1fac>
 800fa7a:	e003      	b.n	800fa84 <LidarSetPos+0x1fb4>
							pp.target_vel[0] = 1.7;
 800fa7c:	4b3b      	ldr	r3, [pc, #236]	; (800fb6c <LidarSetPos+0x209c>)
 800fa7e:	4a3d      	ldr	r2, [pc, #244]	; (800fb74 <LidarSetPos+0x20a4>)
 800fa80:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
					while(pp.pp_start)
 800fa84:	4b39      	ldr	r3, [pc, #228]	; (800fb6c <LidarSetPos+0x209c>)
 800fa86:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800fa8a:	f003 0301 	and.w	r3, r3, #1
 800fa8e:	b2db      	uxtb	r3, r3
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d1d7      	bne.n	800fa44 <LidarSetPos+0x1f74>
					}
					pick_right = 1;
 800fa94:	4b38      	ldr	r3, [pc, #224]	; (800fb78 <LidarSetPos+0x20a8>)
 800fa96:	2201      	movs	r2, #1
 800fa98:	601a      	str	r2, [r3, #0]

					break;
 800fa9a:	e051      	b.n	800fb40 <LidarSetPos+0x2070>

				case CENTER_4:
					lidar->pos = PICK_RIGHT;
 800fa9c:	463b      	mov	r3, r7
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	2209      	movs	r2, #9
 800faa2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 800faa6:	f7fc fc79 	bl	800c39c <ResetCoordinate>
					loaded = 0;
 800faaa:	4b2b      	ldr	r3, [pc, #172]	; (800fb58 <LidarSetPos+0x2088>)
 800faac:	2200      	movs	r2, #0
 800faae:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 800fab0:	4b2a      	ldr	r3, [pc, #168]	; (800fb5c <LidarSetPos+0x208c>)
 800fab2:	f04f 0200 	mov.w	r2, #0
 800fab6:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 800fab8:	4b29      	ldr	r3, [pc, #164]	; (800fb60 <LidarSetPos+0x2090>)
 800faba:	f04f 0200 	mov.w	r2, #0
 800fabe:	601a      	str	r2, [r3, #0]
					setPick(1000);
 800fac0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800fac4:	f7fb ffa4 	bl	800ba10 <setPick>
					open_servo;
 800fac8:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800facc:	4825      	ldr	r0, [pc, #148]	; (800fb64 <LidarSetPos+0x2094>)
 800face:	f7fa f987 	bl	8009de0 <ServoSetPulse>
					cylinder_retract;
 800fad2:	4a25      	ldr	r2, [pc, #148]	; (800fb68 <LidarSetPos+0x2098>)
 800fad4:	7f13      	ldrb	r3, [r2, #28]
 800fad6:	f36f 1386 	bfc	r3, #6, #1
 800fada:	7713      	strb	r3, [r2, #28]
					PP_start(center_4_to_pick_right, 1, &pp);
 800fadc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800fae0:	4a22      	ldr	r2, [pc, #136]	; (800fb6c <LidarSetPos+0x209c>)
 800fae2:	2101      	movs	r1, #1
 800fae4:	4618      	mov	r0, r3
 800fae6:	f7f5 ff4e 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800faea:	e01c      	b.n	800fb26 <LidarSetPos+0x2056>
					{
						if(ps4.button == SQUARE)
 800faec:	4b20      	ldr	r3, [pc, #128]	; (800fb70 <LidarSetPos+0x20a0>)
 800faee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800faf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800faf4:	d108      	bne.n	800fb08 <LidarSetPos+0x2038>
						{
							while(ps4.button == SQUARE);
 800faf6:	bf00      	nop
 800faf8:	4b1d      	ldr	r3, [pc, #116]	; (800fb70 <LidarSetPos+0x20a0>)
 800fafa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fafc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb00:	d0fa      	beq.n	800faf8 <LidarSetPos+0x2028>
							PP_stop(&pp);
 800fb02:	481a      	ldr	r0, [pc, #104]	; (800fb6c <LidarSetPos+0x209c>)
 800fb04:	f7f6 f979 	bl	8005dfa <PP_stop>
						}

						if(pp.real_x >= 1.5)
 800fb08:	4b18      	ldr	r3, [pc, #96]	; (800fb6c <LidarSetPos+0x209c>)
 800fb0a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800fb0e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800fb12:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fb16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb1a:	da00      	bge.n	800fb1e <LidarSetPos+0x204e>
 800fb1c:	e003      	b.n	800fb26 <LidarSetPos+0x2056>
							pp.target_vel[0] = 1.7;
 800fb1e:	4b13      	ldr	r3, [pc, #76]	; (800fb6c <LidarSetPos+0x209c>)
 800fb20:	4a14      	ldr	r2, [pc, #80]	; (800fb74 <LidarSetPos+0x20a4>)
 800fb22:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
					while(pp.pp_start)
 800fb26:	4b11      	ldr	r3, [pc, #68]	; (800fb6c <LidarSetPos+0x209c>)
 800fb28:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800fb2c:	f003 0301 	and.w	r3, r3, #1
 800fb30:	b2db      	uxtb	r3, r3
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d1da      	bne.n	800faec <LidarSetPos+0x201c>
					}

					pick_right = 1;
 800fb36:	4b10      	ldr	r3, [pc, #64]	; (800fb78 <LidarSetPos+0x20a8>)
 800fb38:	2201      	movs	r2, #1
 800fb3a:	601a      	str	r2, [r3, #0]
					break;
 800fb3c:	e000      	b.n	800fb40 <LidarSetPos+0x2070>

				default:
					break;
 800fb3e:	bf00      	nop
			}

		default:
			break;
 800fb40:	bf00      	nop
		}
}
 800fb42:	bf00      	nop
 800fb44:	f507 7778 	add.w	r7, r7, #992	; 0x3e0
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bdb0      	pop	{r4, r5, r7, pc}
 800fb4c:	f3af 8000 	nop.w
 800fb50:	33333333 	.word	0x33333333
 800fb54:	40033333 	.word	0x40033333
 800fb58:	20009428 	.word	0x20009428
 800fb5c:	20007380 	.word	0x20007380
 800fb60:	2000659c 	.word	0x2000659c
 800fb64:	2000786c 	.word	0x2000786c
 800fb68:	2000959c 	.word	0x2000959c
 800fb6c:	20006cc4 	.word	0x20006cc4
 800fb70:	2000a014 	.word	0x2000a014
 800fb74:	3fd9999a 	.word	0x3fd9999a
 800fb78:	2000a624 	.word	0x2000a624

0800fb7c <LidarAdjust>:
			break;
	}
}

void LidarAdjust(Lidar_t* lidar)
{
 800fb7c:	b5b0      	push	{r4, r5, r7, lr}
 800fb7e:	b08a      	sub	sp, #40	; 0x28
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
	if(lidar->AdjEnb)
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	f000 81c3 	beq.w	800ff16 <LidarAdjust+0x39a>
//				PP_stop(&pp);
//			}
//		}

		// Ensure robot sticking fence
		float stick_fence_point[1][7] = {{2.0, 0, 5, -90, 0, 0, 0}};
 800fb90:	4bb8      	ldr	r3, [pc, #736]	; (800fe74 <LidarAdjust+0x2f8>)
 800fb92:	f107 040c 	add.w	r4, r7, #12
 800fb96:	461d      	mov	r5, r3
 800fb98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fba0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(stick_fence_point, 1, &pp);
 800fba4:	f107 030c 	add.w	r3, r7, #12
 800fba8:	4ab3      	ldr	r2, [pc, #716]	; (800fe78 <LidarAdjust+0x2fc>)
 800fbaa:	2101      	movs	r1, #1
 800fbac:	4618      	mov	r0, r3
 800fbae:	f7f5 feea 	bl	8005986 <PP_start>
		while(pp.pp_start)
 800fbb2:	e01e      	b.n	800fbf2 <LidarAdjust+0x76>
		{
			if(ps4.button == SQUARE)
 800fbb4:	4bb1      	ldr	r3, [pc, #708]	; (800fe7c <LidarAdjust+0x300>)
 800fbb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fbbc:	d108      	bne.n	800fbd0 <LidarAdjust+0x54>
			{
				while(ps4.button == SQUARE);
 800fbbe:	bf00      	nop
 800fbc0:	4bae      	ldr	r3, [pc, #696]	; (800fe7c <LidarAdjust+0x300>)
 800fbc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fbc8:	d0fa      	beq.n	800fbc0 <LidarAdjust+0x44>
				PP_stop(&pp);
 800fbca:	48ab      	ldr	r0, [pc, #684]	; (800fe78 <LidarAdjust+0x2fc>)
 800fbcc:	f7f6 f915 	bl	8005dfa <PP_stop>
			}

			if(In_LS_Shot_1 || In_LS_Shot_2)
 800fbd0:	2108      	movs	r1, #8
 800fbd2:	48ab      	ldr	r0, [pc, #684]	; (800fe80 <LidarAdjust+0x304>)
 800fbd4:	f002 fbbc 	bl	8012350 <HAL_GPIO_ReadPin>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d006      	beq.n	800fbec <LidarAdjust+0x70>
 800fbde:	2110      	movs	r1, #16
 800fbe0:	48a7      	ldr	r0, [pc, #668]	; (800fe80 <LidarAdjust+0x304>)
 800fbe2:	f002 fbb5 	bl	8012350 <HAL_GPIO_ReadPin>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d102      	bne.n	800fbf2 <LidarAdjust+0x76>
				PP_stop(&pp);
 800fbec:	48a2      	ldr	r0, [pc, #648]	; (800fe78 <LidarAdjust+0x2fc>)
 800fbee:	f7f6 f904 	bl	8005dfa <PP_stop>
		while(pp.pp_start)
 800fbf2:	4ba1      	ldr	r3, [pc, #644]	; (800fe78 <LidarAdjust+0x2fc>)
 800fbf4:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800fbf8:	f003 0301 	and.w	r3, r3, #1
 800fbfc:	b2db      	uxtb	r3, r3
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d1d8      	bne.n	800fbb4 <LidarAdjust+0x38>
		}

		// Only adjust after reached destination
		switch(lidar->pos)
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800fc08:	3b02      	subs	r3, #2
 800fc0a:	2b06      	cmp	r3, #6
 800fc0c:	f200 8182 	bhi.w	800ff14 <LidarAdjust+0x398>
 800fc10:	a201      	add	r2, pc, #4	; (adr r2, 800fc18 <LidarAdjust+0x9c>)
 800fc12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc16:	bf00      	nop
 800fc18:	0800ff15 	.word	0x0800ff15
 800fc1c:	0800fc35 	.word	0x0800fc35
 800fc20:	0800fcc5 	.word	0x0800fcc5
 800fc24:	0800fd55 	.word	0x0800fd55
 800fc28:	0800fde5 	.word	0x0800fde5
 800fc2c:	0800fe85 	.word	0x0800fe85
 800fc30:	0800ff15 	.word	0x0800ff15
				 * Path plan to desired position
				 */
				break;

			case CENTER_1:
				LidarSendIns(NEAR, lidar);
 800fc34:	6879      	ldr	r1, [r7, #4]
 800fc36:	2001      	movs	r0, #1
 800fc38:	f000 fa68 	bl	801010c <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_1_offset_x;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f7f0 fc7d 	bl	8000548 <__aeabi_f2d>
 800fc4e:	4602      	mov	r2, r0
 800fc50:	460b      	mov	r3, r1
 800fc52:	4620      	mov	r0, r4
 800fc54:	4629      	mov	r1, r5
 800fc56:	f7f0 fb17 	bl	8000288 <__aeabi_dsub>
 800fc5a:	4602      	mov	r2, r0
 800fc5c:	460b      	mov	r3, r1
 800fc5e:	4610      	mov	r0, r2
 800fc60:	4619      	mov	r1, r3
 800fc62:	f7f0 ffc1 	bl	8000be8 <__aeabi_d2f>
 800fc66:	4602      	mov	r2, r0
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_1_offset_y;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	f7f0 fc64 	bl	8000548 <__aeabi_f2d>
 800fc80:	4602      	mov	r2, r0
 800fc82:	460b      	mov	r3, r1
 800fc84:	4620      	mov	r0, r4
 800fc86:	4629      	mov	r1, r5
 800fc88:	f7f0 fafe 	bl	8000288 <__aeabi_dsub>
 800fc8c:	4602      	mov	r2, r0
 800fc8e:	460b      	mov	r3, r1
 800fc90:	4610      	mov	r0, r2
 800fc92:	4619      	mov	r1, r3
 800fc94:	f7f0 ffa8 	bl	8000be8 <__aeabi_d2f>
 800fc98:	4602      	mov	r2, r0
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, pp.real_z);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 800fcac:	4b72      	ldr	r3, [pc, #456]	; (800fe78 <LidarAdjust+0x2fc>)
 800fcae:	edd3 6a04 	vldr	s13, [r3, #16]
 800fcb2:	eeb0 1a66 	vmov.f32	s2, s13
 800fcb6:	eef0 0a47 	vmov.f32	s1, s14
 800fcba:	eeb0 0a67 	vmov.f32	s0, s15
 800fcbe:	f000 f931 	bl	800ff24 <LidarAdjustPP>
				break;
 800fcc2:	e128      	b.n	800ff16 <LidarAdjust+0x39a>

			case CENTER_2:
				LidarSendIns(NEAR, lidar);
 800fcc4:	6879      	ldr	r1, [r7, #4]
 800fcc6:	2001      	movs	r0, #1
 800fcc8:	f000 fa20 	bl	801010c <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_2_offset_x;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f7f0 fc35 	bl	8000548 <__aeabi_f2d>
 800fcde:	4602      	mov	r2, r0
 800fce0:	460b      	mov	r3, r1
 800fce2:	4620      	mov	r0, r4
 800fce4:	4629      	mov	r1, r5
 800fce6:	f7f0 facf 	bl	8000288 <__aeabi_dsub>
 800fcea:	4602      	mov	r2, r0
 800fcec:	460b      	mov	r3, r1
 800fcee:	4610      	mov	r0, r2
 800fcf0:	4619      	mov	r1, r3
 800fcf2:	f7f0 ff79 	bl	8000be8 <__aeabi_d2f>
 800fcf6:	4602      	mov	r2, r0
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_2_offset_y;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f7f0 fc1c 	bl	8000548 <__aeabi_f2d>
 800fd10:	4602      	mov	r2, r0
 800fd12:	460b      	mov	r3, r1
 800fd14:	4620      	mov	r0, r4
 800fd16:	4629      	mov	r1, r5
 800fd18:	f7f0 fab6 	bl	8000288 <__aeabi_dsub>
 800fd1c:	4602      	mov	r2, r0
 800fd1e:	460b      	mov	r3, r1
 800fd20:	4610      	mov	r0, r2
 800fd22:	4619      	mov	r1, r3
 800fd24:	f7f0 ff60 	bl	8000be8 <__aeabi_d2f>
 800fd28:	4602      	mov	r2, r0
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, pp.real_z);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 800fd3c:	4b4e      	ldr	r3, [pc, #312]	; (800fe78 <LidarAdjust+0x2fc>)
 800fd3e:	edd3 6a04 	vldr	s13, [r3, #16]
 800fd42:	eeb0 1a66 	vmov.f32	s2, s13
 800fd46:	eef0 0a47 	vmov.f32	s1, s14
 800fd4a:	eeb0 0a67 	vmov.f32	s0, s15
 800fd4e:	f000 f8e9 	bl	800ff24 <LidarAdjustPP>
				break;
 800fd52:	e0e0      	b.n	800ff16 <LidarAdjust+0x39a>

			case CENTER:
				LidarSendIns(NEAR, lidar);
 800fd54:	6879      	ldr	r1, [r7, #4]
 800fd56:	2001      	movs	r0, #1
 800fd58:	f000 f9d8 	bl	801010c <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_offset_x;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f7f0 fbed 	bl	8000548 <__aeabi_f2d>
 800fd6e:	4602      	mov	r2, r0
 800fd70:	460b      	mov	r3, r1
 800fd72:	4620      	mov	r0, r4
 800fd74:	4629      	mov	r1, r5
 800fd76:	f7f0 fa87 	bl	8000288 <__aeabi_dsub>
 800fd7a:	4602      	mov	r2, r0
 800fd7c:	460b      	mov	r3, r1
 800fd7e:	4610      	mov	r0, r2
 800fd80:	4619      	mov	r1, r3
 800fd82:	f7f0 ff31 	bl	8000be8 <__aeabi_d2f>
 800fd86:	4602      	mov	r2, r0
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_offset_y;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f7f0 fbd4 	bl	8000548 <__aeabi_f2d>
 800fda0:	4602      	mov	r2, r0
 800fda2:	460b      	mov	r3, r1
 800fda4:	4620      	mov	r0, r4
 800fda6:	4629      	mov	r1, r5
 800fda8:	f7f0 fa6e 	bl	8000288 <__aeabi_dsub>
 800fdac:	4602      	mov	r2, r0
 800fdae:	460b      	mov	r3, r1
 800fdb0:	4610      	mov	r0, r2
 800fdb2:	4619      	mov	r1, r3
 800fdb4:	f7f0 ff18 	bl	8000be8 <__aeabi_d2f>
 800fdb8:	4602      	mov	r2, r0
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, pp.real_z);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 800fdcc:	4b2a      	ldr	r3, [pc, #168]	; (800fe78 <LidarAdjust+0x2fc>)
 800fdce:	edd3 6a04 	vldr	s13, [r3, #16]
 800fdd2:	eeb0 1a66 	vmov.f32	s2, s13
 800fdd6:	eef0 0a47 	vmov.f32	s1, s14
 800fdda:	eeb0 0a67 	vmov.f32	s0, s15
 800fdde:	f000 f8a1 	bl	800ff24 <LidarAdjustPP>
				break;
 800fde2:	e098      	b.n	800ff16 <LidarAdjust+0x39a>

			case CENTER_3:
				LidarSendIns(NEAR, lidar);
 800fde4:	6879      	ldr	r1, [r7, #4]
 800fde6:	2001      	movs	r0, #1
 800fde8:	f000 f990 	bl	801010c <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_3_offset_x;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7f0 fba5 	bl	8000548 <__aeabi_f2d>
 800fdfe:	4602      	mov	r2, r0
 800fe00:	460b      	mov	r3, r1
 800fe02:	4620      	mov	r0, r4
 800fe04:	4629      	mov	r1, r5
 800fe06:	f7f0 fa3f 	bl	8000288 <__aeabi_dsub>
 800fe0a:	4602      	mov	r2, r0
 800fe0c:	460b      	mov	r3, r1
 800fe0e:	4610      	mov	r0, r2
 800fe10:	4619      	mov	r1, r3
 800fe12:	f7f0 fee9 	bl	8000be8 <__aeabi_d2f>
 800fe16:	4602      	mov	r2, r0
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_3_offset_y;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f7f0 fb8c 	bl	8000548 <__aeabi_f2d>
 800fe30:	4602      	mov	r2, r0
 800fe32:	460b      	mov	r3, r1
 800fe34:	4620      	mov	r0, r4
 800fe36:	4629      	mov	r1, r5
 800fe38:	f7f0 fa26 	bl	8000288 <__aeabi_dsub>
 800fe3c:	4602      	mov	r2, r0
 800fe3e:	460b      	mov	r3, r1
 800fe40:	4610      	mov	r0, r2
 800fe42:	4619      	mov	r1, r3
 800fe44:	f7f0 fed0 	bl	8000be8 <__aeabi_d2f>
 800fe48:	4602      	mov	r2, r0
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, pp.real_z);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 800fe5c:	4b06      	ldr	r3, [pc, #24]	; (800fe78 <LidarAdjust+0x2fc>)
 800fe5e:	edd3 6a04 	vldr	s13, [r3, #16]
 800fe62:	eeb0 1a66 	vmov.f32	s2, s13
 800fe66:	eef0 0a47 	vmov.f32	s1, s14
 800fe6a:	eeb0 0a67 	vmov.f32	s0, s15
 800fe6e:	f000 f859 	bl	800ff24 <LidarAdjustPP>
				break;
 800fe72:	e050      	b.n	800ff16 <LidarAdjust+0x39a>
 800fe74:	0802006c 	.word	0x0802006c
 800fe78:	20006cc4 	.word	0x20006cc4
 800fe7c:	2000a014 	.word	0x2000a014
 800fe80:	40020c00 	.word	0x40020c00

			case CENTER_4:
				LidarSendIns(NEAR, lidar);
 800fe84:	6879      	ldr	r1, [r7, #4]
 800fe86:	2001      	movs	r0, #1
 800fe88:	f000 f940 	bl	801010c <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_4_offset_x;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f7f0 fb55 	bl	8000548 <__aeabi_f2d>
 800fe9e:	4602      	mov	r2, r0
 800fea0:	460b      	mov	r3, r1
 800fea2:	4620      	mov	r0, r4
 800fea4:	4629      	mov	r1, r5
 800fea6:	f7f0 f9ef 	bl	8000288 <__aeabi_dsub>
 800feaa:	4602      	mov	r2, r0
 800feac:	460b      	mov	r3, r1
 800feae:	4610      	mov	r0, r2
 800feb0:	4619      	mov	r1, r3
 800feb2:	f7f0 fe99 	bl	8000be8 <__aeabi_d2f>
 800feb6:	4602      	mov	r2, r0
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_4_offset_y;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800feca:	4618      	mov	r0, r3
 800fecc:	f7f0 fb3c 	bl	8000548 <__aeabi_f2d>
 800fed0:	4602      	mov	r2, r0
 800fed2:	460b      	mov	r3, r1
 800fed4:	4620      	mov	r0, r4
 800fed6:	4629      	mov	r1, r5
 800fed8:	f7f0 f9d6 	bl	8000288 <__aeabi_dsub>
 800fedc:	4602      	mov	r2, r0
 800fede:	460b      	mov	r3, r1
 800fee0:	4610      	mov	r0, r2
 800fee2:	4619      	mov	r1, r3
 800fee4:	f7f0 fe80 	bl	8000be8 <__aeabi_d2f>
 800fee8:	4602      	mov	r2, r0
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, pp.real_z);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 800fefc:	4b08      	ldr	r3, [pc, #32]	; (800ff20 <LidarAdjust+0x3a4>)
 800fefe:	edd3 6a04 	vldr	s13, [r3, #16]
 800ff02:	eeb0 1a66 	vmov.f32	s2, s13
 800ff06:	eef0 0a47 	vmov.f32	s1, s14
 800ff0a:	eeb0 0a67 	vmov.f32	s0, s15
 800ff0e:	f000 f809 	bl	800ff24 <LidarAdjustPP>
				break;
 800ff12:	e000      	b.n	800ff16 <LidarAdjust+0x39a>

			case UPPER_RIGHT:
				break;

			default:
				break;
 800ff14:	bf00      	nop
		}
	}
}
 800ff16:	bf00      	nop
 800ff18:	3728      	adds	r7, #40	; 0x28
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bdb0      	pop	{r4, r5, r7, pc}
 800ff1e:	bf00      	nop
 800ff20:	20006cc4 	.word	0x20006cc4

0800ff24 <LidarAdjustPP>:

void LidarAdjustPP(float adj_x, float adj_y, float z)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b08c      	sub	sp, #48	; 0x30
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	ed87 0a03 	vstr	s0, [r7, #12]
 800ff2e:	edc7 0a02 	vstr	s1, [r7, #8]
 800ff32:	ed87 1a01 	vstr	s2, [r7, #4]
	ResetCoordinate();
 800ff36:	f7fc fa31 	bl	800c39c <ResetCoordinate>

	float adj_point[1][7] = {{1.0, adj_x, adj_y, z, 0, 1, 0}};
 800ff3a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ff3e:	617b      	str	r3, [r7, #20]
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	61bb      	str	r3, [r7, #24]
 800ff44:	68bb      	ldr	r3, [r7, #8]
 800ff46:	61fb      	str	r3, [r7, #28]
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	623b      	str	r3, [r7, #32]
 800ff4c:	f04f 0300 	mov.w	r3, #0
 800ff50:	627b      	str	r3, [r7, #36]	; 0x24
 800ff52:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ff56:	62bb      	str	r3, [r7, #40]	; 0x28
 800ff58:	f04f 0300 	mov.w	r3, #0
 800ff5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	PP_start(adj_point, 1, &pp);
 800ff5e:	f107 0314 	add.w	r3, r7, #20
 800ff62:	4a1a      	ldr	r2, [pc, #104]	; (800ffcc <LidarAdjustPP+0xa8>)
 800ff64:	2101      	movs	r1, #1
 800ff66:	4618      	mov	r0, r3
 800ff68:	f7f5 fd0d 	bl	8005986 <PP_start>

	while(pp.pp_start)
 800ff6c:	e020      	b.n	800ffb0 <LidarAdjustPP+0x8c>
	{
		if(ps4.button == SQUARE)
 800ff6e:	4b18      	ldr	r3, [pc, #96]	; (800ffd0 <LidarAdjustPP+0xac>)
 800ff70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff76:	d108      	bne.n	800ff8a <LidarAdjustPP+0x66>
		{
			while(ps4.button == SQUARE);
 800ff78:	bf00      	nop
 800ff7a:	4b15      	ldr	r3, [pc, #84]	; (800ffd0 <LidarAdjustPP+0xac>)
 800ff7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff82:	d0fa      	beq.n	800ff7a <LidarAdjustPP+0x56>
			PP_stop(&pp);
 800ff84:	4811      	ldr	r0, [pc, #68]	; (800ffcc <LidarAdjustPP+0xa8>)
 800ff86:	f7f5 ff38 	bl	8005dfa <PP_stop>
		}

		if(In_LS_Shot_1 || In_LS_Shot_2)
 800ff8a:	2108      	movs	r1, #8
 800ff8c:	4811      	ldr	r0, [pc, #68]	; (800ffd4 <LidarAdjustPP+0xb0>)
 800ff8e:	f002 f9df 	bl	8012350 <HAL_GPIO_ReadPin>
 800ff92:	4603      	mov	r3, r0
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d006      	beq.n	800ffa6 <LidarAdjustPP+0x82>
 800ff98:	2110      	movs	r1, #16
 800ff9a:	480e      	ldr	r0, [pc, #56]	; (800ffd4 <LidarAdjustPP+0xb0>)
 800ff9c:	f002 f9d8 	bl	8012350 <HAL_GPIO_ReadPin>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d104      	bne.n	800ffb0 <LidarAdjustPP+0x8c>
			pp.error_y = 0;
 800ffa6:	4b09      	ldr	r3, [pc, #36]	; (800ffcc <LidarAdjustPP+0xa8>)
 800ffa8:	f04f 0200 	mov.w	r2, #0
 800ffac:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
	while(pp.pp_start)
 800ffb0:	4b06      	ldr	r3, [pc, #24]	; (800ffcc <LidarAdjustPP+0xa8>)
 800ffb2:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800ffb6:	f003 0301 	and.w	r3, r3, #1
 800ffba:	b2db      	uxtb	r3, r3
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d1d6      	bne.n	800ff6e <LidarAdjustPP+0x4a>
	}
}
 800ffc0:	bf00      	nop
 800ffc2:	bf00      	nop
 800ffc4:	3730      	adds	r7, #48	; 0x30
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	20006cc4 	.word	0x20006cc4
 800ffd0:	2000a014 	.word	0x2000a014
 800ffd4:	40020c00 	.word	0x40020c00

0800ffd8 <LidarControl>:
/* Call this inside a task
 *   <- -> Will be used to change position
 *   UP DOWN will be used to change angle
 */
void LidarControl(Lidar_t* lidar)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b082      	sub	sp, #8
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
	if(ps4.button == LEFT)
 800ffe0:	4b23      	ldr	r3, [pc, #140]	; (8010070 <LidarControl+0x98>)
 800ffe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffe4:	2b80      	cmp	r3, #128	; 0x80
 800ffe6:	d10b      	bne.n	8010000 <LidarControl+0x28>
	{
		while(ps4.button == LEFT);
 800ffe8:	bf00      	nop
 800ffea:	4b21      	ldr	r3, [pc, #132]	; (8010070 <LidarControl+0x98>)
 800ffec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffee:	2b80      	cmp	r3, #128	; 0x80
 800fff0:	d0fb      	beq.n	800ffea <LidarControl+0x12>
		lidar->pos_counter--;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800fff8:	1e5a      	subs	r2, r3, #1
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	}

	if(ps4.button == RIGHT)
 8010000:	4b1b      	ldr	r3, [pc, #108]	; (8010070 <LidarControl+0x98>)
 8010002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010004:	2b20      	cmp	r3, #32
 8010006:	d10b      	bne.n	8010020 <LidarControl+0x48>
	{
		while(ps4.button == RIGHT);
 8010008:	bf00      	nop
 801000a:	4b19      	ldr	r3, [pc, #100]	; (8010070 <LidarControl+0x98>)
 801000c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801000e:	2b20      	cmp	r3, #32
 8010010:	d0fb      	beq.n	801000a <LidarControl+0x32>
		lidar->pos_counter++;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010018:	1c5a      	adds	r2, r3, #1
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	}

	if(ps4.button == UP)
 8010020:	4b13      	ldr	r3, [pc, #76]	; (8010070 <LidarControl+0x98>)
 8010022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010024:	2b10      	cmp	r3, #16
 8010026:	d10b      	bne.n	8010040 <LidarControl+0x68>
	{
		while(ps4.button == UP);
 8010028:	bf00      	nop
 801002a:	4b11      	ldr	r3, [pc, #68]	; (8010070 <LidarControl+0x98>)
 801002c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801002e:	2b10      	cmp	r3, #16
 8010030:	d0fb      	beq.n	801002a <LidarControl+0x52>
		lidar->pos_counter += 2;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010038:	1c9a      	adds	r2, r3, #2
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	}

	if(ps4.button == DOWN)
 8010040:	4b0b      	ldr	r3, [pc, #44]	; (8010070 <LidarControl+0x98>)
 8010042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010044:	2b40      	cmp	r3, #64	; 0x40
 8010046:	d10b      	bne.n	8010060 <LidarControl+0x88>
	{
		while(ps4.button == DOWN);
 8010048:	bf00      	nop
 801004a:	4b09      	ldr	r3, [pc, #36]	; (8010070 <LidarControl+0x98>)
 801004c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801004e:	2b40      	cmp	r3, #64	; 0x40
 8010050:	d0fb      	beq.n	801004a <LidarControl+0x72>
		lidar->pos_counter -= 2;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010058:	1e9a      	subs	r2, r3, #2
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	}

	LidarCheckPos(lidar);
 8010060:	6878      	ldr	r0, [r7, #4]
 8010062:	f000 f807 	bl	8010074 <LidarCheckPos>
//	LidarCheckAngle(lidar);
}
 8010066:	bf00      	nop
 8010068:	3708      	adds	r7, #8
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}
 801006e:	bf00      	nop
 8010070:	2000a014 	.word	0x2000a014

08010074 <LidarCheckPos>:
			break;
	}
}

void LidarCheckPos(Lidar_t* lidar)
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b082      	sub	sp, #8
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
	switch(lidar->pos_counter)
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010082:	3b02      	subs	r3, #2
 8010084:	2b07      	cmp	r3, #7
 8010086:	d83b      	bhi.n	8010100 <LidarCheckPos+0x8c>
 8010088:	a201      	add	r2, pc, #4	; (adr r2, 8010090 <LidarCheckPos+0x1c>)
 801008a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801008e:	bf00      	nop
 8010090:	080100bb 	.word	0x080100bb
 8010094:	080100c5 	.word	0x080100c5
 8010098:	080100cf 	.word	0x080100cf
 801009c:	080100d9 	.word	0x080100d9
 80100a0:	080100e3 	.word	0x080100e3
 80100a4:	080100ed 	.word	0x080100ed
 80100a8:	080100f7 	.word	0x080100f7
 80100ac:	080100b1 	.word	0x080100b1
	{
		case PICK_RIGHT:
			LidarSetPos(PICK_RIGHT, lidar);
 80100b0:	6879      	ldr	r1, [r7, #4]
 80100b2:	2009      	movs	r0, #9
 80100b4:	f7fd fd0c 	bl	800dad0 <LidarSetPos>
			break;
 80100b8:	e023      	b.n	8010102 <LidarCheckPos+0x8e>

		case UPPER_LEFT:
			LidarSetPos(UPPER_LEFT, lidar);
 80100ba:	6879      	ldr	r1, [r7, #4]
 80100bc:	2002      	movs	r0, #2
 80100be:	f7fd fd07 	bl	800dad0 <LidarSetPos>
			break;
 80100c2:	e01e      	b.n	8010102 <LidarCheckPos+0x8e>

		case CENTER_1:
			LidarSetPos(CENTER_1, lidar);
 80100c4:	6879      	ldr	r1, [r7, #4]
 80100c6:	2003      	movs	r0, #3
 80100c8:	f7fd fd02 	bl	800dad0 <LidarSetPos>
			break;
 80100cc:	e019      	b.n	8010102 <LidarCheckPos+0x8e>

		case CENTER_2:
			LidarSetPos(CENTER_2, lidar);
 80100ce:	6879      	ldr	r1, [r7, #4]
 80100d0:	2004      	movs	r0, #4
 80100d2:	f7fd fcfd 	bl	800dad0 <LidarSetPos>
			break;
 80100d6:	e014      	b.n	8010102 <LidarCheckPos+0x8e>

		case CENTER:
			LidarSetPos(CENTER, lidar);
 80100d8:	6879      	ldr	r1, [r7, #4]
 80100da:	2005      	movs	r0, #5
 80100dc:	f7fd fcf8 	bl	800dad0 <LidarSetPos>
			break;
 80100e0:	e00f      	b.n	8010102 <LidarCheckPos+0x8e>

		case CENTER_3:
			LidarSetPos(CENTER_3, lidar);
 80100e2:	6879      	ldr	r1, [r7, #4]
 80100e4:	2006      	movs	r0, #6
 80100e6:	f7fd fcf3 	bl	800dad0 <LidarSetPos>
			break;
 80100ea:	e00a      	b.n	8010102 <LidarCheckPos+0x8e>

		case CENTER_4:
			LidarSetPos(CENTER_4, lidar);
 80100ec:	6879      	ldr	r1, [r7, #4]
 80100ee:	2007      	movs	r0, #7
 80100f0:	f7fd fcee 	bl	800dad0 <LidarSetPos>
			break;
 80100f4:	e005      	b.n	8010102 <LidarCheckPos+0x8e>

		case UPPER_RIGHT:
			LidarSetPos(UPPER_RIGHT, lidar);
 80100f6:	6879      	ldr	r1, [r7, #4]
 80100f8:	2008      	movs	r0, #8
 80100fa:	f7fd fce9 	bl	800dad0 <LidarSetPos>
			break;
 80100fe:	e000      	b.n	8010102 <LidarCheckPos+0x8e>

		default:
			break;
 8010100:	bf00      	nop
	}
}
 8010102:	bf00      	nop
 8010104:	3708      	adds	r7, #8
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}
 801010a:	bf00      	nop

0801010c <LidarSendIns>:

// Send Instruction to pi/pc
void LidarSendIns(Instruction_t ins, Lidar_t* lidar)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b082      	sub	sp, #8
 8010110:	af00      	add	r7, sp, #0
 8010112:	4603      	mov	r3, r0
 8010114:	6039      	str	r1, [r7, #0]
 8010116:	71fb      	strb	r3, [r7, #7]
	lidar->response = NO; // After user got the data, response will be OK
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	2201      	movs	r2, #1
 801011c:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
	lidar->inst = ins;
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	79fa      	ldrb	r2, [r7, #7]
 8010124:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	lidar->obstacle_send[0] = 0x01;
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	2201      	movs	r2, #1
 801012c:	705a      	strb	r2, [r3, #1]
	memcpy(&lidar->obstacle_send[1], &lidar->inst, 1);
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	3302      	adds	r3, #2
 8010132:	683a      	ldr	r2, [r7, #0]
 8010134:	f502 72cc 	add.w	r2, r2, #408	; 0x198
 8010138:	7812      	ldrb	r2, [r2, #0]
 801013a:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(lidar->lidar_UART, lidar->obstacle_send, 2, HAL_MAX_DELAY);
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	1c59      	adds	r1, r3, #1
 8010146:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801014a:	2202      	movs	r2, #2
 801014c:	f005 ff8f 	bl	801606e <HAL_UART_Transmit>
	HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 25);
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	33c9      	adds	r3, #201	; 0xc9
 801015a:	2219      	movs	r2, #25
 801015c:	4619      	mov	r1, r3
 801015e:	f006 f81f 	bl	80161a0 <HAL_UART_Receive_IT>

	while(lidar->response == NO) // Poll the user after got new data
 8010162:	e004      	b.n	801016e <LidarSendIns+0x62>
	{
		if(ps4.button == SQUARE)
 8010164:	4b07      	ldr	r3, [pc, #28]	; (8010184 <LidarSendIns+0x78>)
 8010166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801016c:	d005      	beq.n	801017a <LidarSendIns+0x6e>
	while(lidar->response == NO) // Poll the user after got new data
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8010174:	2b01      	cmp	r3, #1
 8010176:	d0f5      	beq.n	8010164 <LidarSendIns+0x58>
			break;
	}
}
 8010178:	e000      	b.n	801017c <LidarSendIns+0x70>
			break;
 801017a:	bf00      	nop
}
 801017c:	bf00      	nop
 801017e:	3708      	adds	r7, #8
 8010180:	46bd      	mov	sp, r7
 8010182:	bd80      	pop	{r7, pc}
 8010184:	2000a014 	.word	0x2000a014

08010188 <ObstacleHandler>:

// Call this in UART Callback
void ObstacleHandler(Lidar_t* lidar)
{
 8010188:	b5b0      	push	{r4, r5, r7, lr}
 801018a:	b086      	sub	sp, #24
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
	if(lidar->mode == CONTINUOUS)
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 8010196:	2b00      	cmp	r3, #0
 8010198:	f040 8115 	bne.w	80103c6 <ObstacleHandler+0x23e>
	{
		static int mode = 0;
		switch(mode)
 801019c:	4baa      	ldr	r3, [pc, #680]	; (8010448 <ObstacleHandler+0x2c0>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d002      	beq.n	80101aa <ObstacleHandler+0x22>
 80101a4:	2b01      	cmp	r3, #1
 80101a6:	d061      	beq.n	801026c <ObstacleHandler+0xe4>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.x, 8, HAL_MAX_DELAY);
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.y, 8, HAL_MAX_DELAY);
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.distance, 8, HAL_MAX_DELAY);
		}
	}
}
 80101a8:	e1f1      	b.n	801058e <ObstacleHandler+0x406>
				if(lidar->obstacle_receive[0] == 0x01)
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80101b0:	2b01      	cmp	r3, #1
 80101b2:	f040 81eb 	bne.w	801058c <ObstacleHandler+0x404>
					memcpy(&lidar->obstacle_count, &lidar->obstacle_receive[1], 4);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80101bc:	687a      	ldr	r2, [r7, #4]
 80101be:	32ca      	adds	r2, #202	; 0xca
 80101c0:	6812      	ldr	r2, [r2, #0]
 80101c2:	601a      	str	r2, [r3, #0]
					if(lidar->new == 0)
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 80101ca:	f003 0301 	and.w	r3, r3, #1
 80101ce:	b2db      	uxtb	r3, r3
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d110      	bne.n	80101f6 <ObstacleHandler+0x6e>
							lidar->Polelist = (Pole*)malloc(lidar->obstacle_count * 3 * sizeof(float));
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80101da:	461a      	mov	r2, r3
 80101dc:	4613      	mov	r3, r2
 80101de:	005b      	lsls	r3, r3, #1
 80101e0:	4413      	add	r3, r2
 80101e2:	009b      	lsls	r3, r3, #2
 80101e4:	4618      	mov	r0, r3
 80101e6:	f009 fd13 	bl	8019c10 <malloc>
 80101ea:	4603      	mov	r3, r0
 80101ec:	461a      	mov	r2, r3
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
 80101f4:	e012      	b.n	801021c <ObstacleHandler+0x94>
							lidar->Polelist = (Pole*)realloc(lidar->Polelist, lidar->obstacle_count * 3 * sizeof(float));
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8010202:	4619      	mov	r1, r3
 8010204:	460b      	mov	r3, r1
 8010206:	005b      	lsls	r3, r3, #1
 8010208:	440b      	add	r3, r1
 801020a:	009b      	lsls	r3, r3, #2
 801020c:	4619      	mov	r1, r3
 801020e:	4610      	mov	r0, r2
 8010210:	f00a fc40 	bl	801aa94 <realloc>
 8010214:	4602      	mov	r2, r0
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->obstacle_count, 4, HAL_MAX_DELAY);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	f503 71ca 	add.w	r1, r3, #404	; 0x194
 8010228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801022c:	2204      	movs	r2, #4
 801022e:	f005 ff1e 	bl	801606e <HAL_UART_Transmit>
					HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, lidar->obstacle_count * 3 * 4);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f103 01c9 	add.w	r1, r3, #201	; 0xc9
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8010244:	b29b      	uxth	r3, r3
 8010246:	461a      	mov	r2, r3
 8010248:	0052      	lsls	r2, r2, #1
 801024a:	4413      	add	r3, r2
 801024c:	009b      	lsls	r3, r3, #2
 801024e:	b29b      	uxth	r3, r3
 8010250:	461a      	mov	r2, r3
 8010252:	f005 ffa5 	bl	80161a0 <HAL_UART_Receive_IT>
					mode = 1;
 8010256:	4b7c      	ldr	r3, [pc, #496]	; (8010448 <ObstacleHandler+0x2c0>)
 8010258:	2201      	movs	r2, #1
 801025a:	601a      	str	r2, [r3, #0]
					lidar->new = 1;
 801025c:	687a      	ldr	r2, [r7, #4]
 801025e:	f892 3294 	ldrb.w	r3, [r2, #660]	; 0x294
 8010262:	f043 0301 	orr.w	r3, r3, #1
 8010266:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
				break;
 801026a:	e18f      	b.n	801058c <ObstacleHandler+0x404>
				for(int i = 0; i < lidar->obstacle_count; i++)
 801026c:	2300      	movs	r3, #0
 801026e:	617b      	str	r3, [r7, #20]
 8010270:	e05b      	b.n	801032a <ObstacleHandler+0x1a2>
					memcpy(&lidar->pole.x, &lidar->obstacle_receive[i * 12], 4);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f503 71d4 	add.w	r1, r3, #424	; 0x1a8
 8010278:	697a      	ldr	r2, [r7, #20]
 801027a:	4613      	mov	r3, r2
 801027c:	005b      	lsls	r3, r3, #1
 801027e:	4413      	add	r3, r2
 8010280:	009b      	lsls	r3, r3, #2
 8010282:	33c8      	adds	r3, #200	; 0xc8
 8010284:	687a      	ldr	r2, [r7, #4]
 8010286:	4413      	add	r3, r2
 8010288:	3301      	adds	r3, #1
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	600b      	str	r3, [r1, #0]
					memcpy(&lidar->pole.y, &lidar->obstacle_receive[i * 12 + 4], 4);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f503 71d8 	add.w	r1, r3, #432	; 0x1b0
 8010294:	697a      	ldr	r2, [r7, #20]
 8010296:	4613      	mov	r3, r2
 8010298:	005b      	lsls	r3, r3, #1
 801029a:	4413      	add	r3, r2
 801029c:	009b      	lsls	r3, r3, #2
 801029e:	3304      	adds	r3, #4
 80102a0:	33c8      	adds	r3, #200	; 0xc8
 80102a2:	687a      	ldr	r2, [r7, #4]
 80102a4:	4413      	add	r3, r2
 80102a6:	3301      	adds	r3, #1
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	600b      	str	r3, [r1, #0]
					memcpy(&lidar->pole.distance, &lidar->obstacle_receive[i * 12 + 8], 4);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 80102b2:	697a      	ldr	r2, [r7, #20]
 80102b4:	4613      	mov	r3, r2
 80102b6:	005b      	lsls	r3, r3, #1
 80102b8:	4413      	add	r3, r2
 80102ba:	009b      	lsls	r3, r3, #2
 80102bc:	3308      	adds	r3, #8
 80102be:	33c8      	adds	r3, #200	; 0xc8
 80102c0:	687a      	ldr	r2, [r7, #4]
 80102c2:	4413      	add	r3, r2
 80102c4:	3301      	adds	r3, #1
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	600b      	str	r3, [r1, #0]
					lidar->pole.angle = atanf(lidar->pole.y / lidar->pole.x);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	e9d3 016c 	ldrd	r0, r1, [r3, #432]	; 0x1b0
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 80102d6:	f7f0 fab9 	bl	800084c <__aeabi_ddiv>
 80102da:	4602      	mov	r2, r0
 80102dc:	460b      	mov	r3, r1
 80102de:	4610      	mov	r0, r2
 80102e0:	4619      	mov	r1, r3
 80102e2:	f7f0 fc81 	bl	8000be8 <__aeabi_d2f>
 80102e6:	4603      	mov	r3, r0
 80102e8:	ee00 3a10 	vmov	s0, r3
 80102ec:	f00e f950 	bl	801e590 <atanf>
 80102f0:	ee10 3a10 	vmov	r3, s0
 80102f4:	4618      	mov	r0, r3
 80102f6:	f7f0 f927 	bl	8000548 <__aeabi_f2d>
 80102fa:	4602      	mov	r2, r0
 80102fc:	460b      	mov	r3, r1
 80102fe:	6879      	ldr	r1, [r7, #4]
 8010300:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
					lidar->Polelist[i] = lidar->pole;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	015b      	lsls	r3, r3, #5
 801030e:	441a      	add	r2, r3
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	4615      	mov	r5, r2
 8010314:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8010318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801031a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801031c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010320:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
				for(int i = 0; i < lidar->obstacle_count; i++)
 8010324:	697b      	ldr	r3, [r7, #20]
 8010326:	3301      	adds	r3, #1
 8010328:	617b      	str	r3, [r7, #20]
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8010330:	697a      	ldr	r2, [r7, #20]
 8010332:	429a      	cmp	r2, r3
 8010334:	db9d      	blt.n	8010272 <ObstacleHandler+0xea>
				for(int i = 0; i < lidar->obstacle_count; i++)
 8010336:	2300      	movs	r3, #0
 8010338:	613b      	str	r3, [r7, #16]
 801033a:	e031      	b.n	80103a0 <ObstacleHandler+0x218>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].x, 4, HAL_MAX_DELAY);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8010348:	693b      	ldr	r3, [r7, #16]
 801034a:	015b      	lsls	r3, r3, #5
 801034c:	4413      	add	r3, r2
 801034e:	4619      	mov	r1, r3
 8010350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010354:	2204      	movs	r2, #4
 8010356:	f005 fe8a 	bl	801606e <HAL_UART_Transmit>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].y, 4, HAL_MAX_DELAY);
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8010366:	693b      	ldr	r3, [r7, #16]
 8010368:	015b      	lsls	r3, r3, #5
 801036a:	4413      	add	r3, r2
 801036c:	f103 0108 	add.w	r1, r3, #8
 8010370:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010374:	2204      	movs	r2, #4
 8010376:	f005 fe7a 	bl	801606e <HAL_UART_Transmit>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].distance, 4, HAL_MAX_DELAY);
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8010386:	693b      	ldr	r3, [r7, #16]
 8010388:	015b      	lsls	r3, r3, #5
 801038a:	4413      	add	r3, r2
 801038c:	f103 0110 	add.w	r1, r3, #16
 8010390:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010394:	2204      	movs	r2, #4
 8010396:	f005 fe6a 	bl	801606e <HAL_UART_Transmit>
				for(int i = 0; i < lidar->obstacle_count; i++)
 801039a:	693b      	ldr	r3, [r7, #16]
 801039c:	3301      	adds	r3, #1
 801039e:	613b      	str	r3, [r7, #16]
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80103a6:	693a      	ldr	r2, [r7, #16]
 80103a8:	429a      	cmp	r2, r3
 80103aa:	dbc7      	blt.n	801033c <ObstacleHandler+0x1b4>
				mode = 0;
 80103ac:	4b26      	ldr	r3, [pc, #152]	; (8010448 <ObstacleHandler+0x2c0>)
 80103ae:	2200      	movs	r2, #0
 80103b0:	601a      	str	r2, [r3, #0]
				HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 5);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	33c9      	adds	r3, #201	; 0xc9
 80103bc:	2205      	movs	r2, #5
 80103be:	4619      	mov	r1, r3
 80103c0:	f005 feee 	bl	80161a0 <HAL_UART_Receive_IT>
				break;
 80103c4:	e0e3      	b.n	801058e <ObstacleHandler+0x406>
		if(lidar->start == 0) // Start booting
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 80103cc:	f003 0304 	and.w	r3, r3, #4
 80103d0:	b2db      	uxtb	r3, r3
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d13a      	bne.n	801044c <ObstacleHandler+0x2c4>
			if(lidar->obstacle_receive[0] == 0x01)
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80103dc:	2b01      	cmp	r3, #1
 80103de:	f040 80d6 	bne.w	801058e <ObstacleHandler+0x406>
				memcpy(&lidar->res, &lidar->obstacle_receive[1], 1);
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	f203 1399 	addw	r3, r3, #409	; 0x199
 80103e8:	687a      	ldr	r2, [r7, #4]
 80103ea:	32ca      	adds	r2, #202	; 0xca
 80103ec:	7812      	ldrb	r2, [r2, #0]
 80103ee:	701a      	strb	r2, [r3, #0]
				lidar->response = lidar->res;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	f893 2199 	ldrb.w	r2, [r3, #409]	; 0x199
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
				if(lidar->response == OK)
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8010402:	2b00      	cmp	r3, #0
 8010404:	f040 80c3 	bne.w	801058e <ObstacleHandler+0x406>
					HAL_UART_Transmit(lidar->lidar_UART, &lidar->res, 1, HAL_MAX_DELAY);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	f203 1199 	addw	r1, r3, #409	; 0x199
 8010414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010418:	2201      	movs	r2, #1
 801041a:	f005 fe28 	bl	801606e <HAL_UART_Transmit>
					lidar->start = 1;
 801041e:	687a      	ldr	r2, [r7, #4]
 8010420:	f892 3294 	ldrb.w	r3, [r2, #660]	; 0x294
 8010424:	f043 0304 	orr.w	r3, r3, #4
 8010428:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
					lidar->response = NO;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2201      	movs	r2, #1
 8010430:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
					HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 25);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	33c9      	adds	r3, #201	; 0xc9
 801043e:	2219      	movs	r2, #25
 8010440:	4619      	mov	r1, r3
 8010442:	f005 fead 	bl	80161a0 <HAL_UART_Receive_IT>
}
 8010446:	e0a2      	b.n	801058e <ObstacleHandler+0x406>
 8010448:	20001104 	.word	0x20001104
			memcpy(&lidar->res, &lidar->obstacle_receive[0], 1);
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f203 1399 	addw	r3, r3, #409	; 0x199
 8010452:	687a      	ldr	r2, [r7, #4]
 8010454:	32c9      	adds	r2, #201	; 0xc9
 8010456:	7812      	ldrb	r2, [r2, #0]
 8010458:	701a      	strb	r2, [r3, #0]
			lidar->response = lidar->res;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	f893 2199 	ldrb.w	r2, [r3, #409]	; 0x199
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
			if(lidar->response == OK)
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 801046c:	2b00      	cmp	r3, #0
 801046e:	d152      	bne.n	8010516 <ObstacleHandler+0x38e>
				memcpy(&lidar->pole.x, &lidar->obstacle_receive[1], 8);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	33ca      	adds	r3, #202	; 0xca
 801047a:	2208      	movs	r2, #8
 801047c:	4619      	mov	r1, r3
 801047e:	f009 fbcf 	bl	8019c20 <memcpy>
				memcpy(&lidar->pole.y, &lidar->obstacle_receive[9], 8);
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	33d2      	adds	r3, #210	; 0xd2
 801048c:	2208      	movs	r2, #8
 801048e:	4619      	mov	r1, r3
 8010490:	f009 fbc6 	bl	8019c20 <memcpy>
				memcpy(&lidar->pole.distance, &lidar->obstacle_receive[17], 8);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	f503 70dc 	add.w	r0, r3, #440	; 0x1b8
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	33da      	adds	r3, #218	; 0xda
 801049e:	2208      	movs	r2, #8
 80104a0:	4619      	mov	r1, r3
 80104a2:	f009 fbbd 	bl	8019c20 <memcpy>
				float temp = lidar->pole.x;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 80104ac:	4610      	mov	r0, r2
 80104ae:	4619      	mov	r1, r3
 80104b0:	f7f0 fb9a 	bl	8000be8 <__aeabi_d2f>
 80104b4:	4603      	mov	r3, r0
 80104b6:	60fb      	str	r3, [r7, #12]
				lidar->pole.x = -lidar->pole.y;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	e9d3 236c 	ldrd	r2, r3, [r3, #432]	; 0x1b0
 80104be:	4614      	mov	r4, r2
 80104c0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	e9c3 456a 	strd	r4, r5, [r3, #424]	; 0x1a8
				lidar->pole.y = temp;
 80104ca:	68f8      	ldr	r0, [r7, #12]
 80104cc:	f7f0 f83c 	bl	8000548 <__aeabi_f2d>
 80104d0:	4602      	mov	r2, r0
 80104d2:	460b      	mov	r3, r1
 80104d4:	6879      	ldr	r1, [r7, #4]
 80104d6:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
				lidar->pole.angle = atanf(lidar->pole.y / lidar->pole.x);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	e9d3 016c 	ldrd	r0, r1, [r3, #432]	; 0x1b0
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 80104e6:	f7f0 f9b1 	bl	800084c <__aeabi_ddiv>
 80104ea:	4602      	mov	r2, r0
 80104ec:	460b      	mov	r3, r1
 80104ee:	4610      	mov	r0, r2
 80104f0:	4619      	mov	r1, r3
 80104f2:	f7f0 fb79 	bl	8000be8 <__aeabi_d2f>
 80104f6:	4603      	mov	r3, r0
 80104f8:	ee00 3a10 	vmov	s0, r3
 80104fc:	f00e f848 	bl	801e590 <atanf>
 8010500:	ee10 3a10 	vmov	r3, s0
 8010504:	4618      	mov	r0, r3
 8010506:	f7f0 f81f 	bl	8000548 <__aeabi_f2d>
 801050a:	4602      	mov	r2, r0
 801050c:	460b      	mov	r3, r1
 801050e:	6879      	ldr	r1, [r7, #4]
 8010510:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
 8010514:	e00d      	b.n	8010532 <ObstacleHandler+0x3aa>
				lidar->reject = 1;
 8010516:	687a      	ldr	r2, [r7, #4]
 8010518:	f892 3294 	ldrb.w	r3, [r2, #660]	; 0x294
 801051c:	f043 0302 	orr.w	r3, r3, #2
 8010520:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
				LidarSendIns(lidar->inst, lidar);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 801052a:	6879      	ldr	r1, [r7, #4]
 801052c:	4618      	mov	r0, r3
 801052e:	f7ff fded 	bl	801010c <LidarSendIns>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->res, 1, HAL_MAX_DELAY);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f203 1199 	addw	r1, r3, #409	; 0x199
 801053e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010542:	2201      	movs	r2, #1
 8010544:	f005 fd93 	bl	801606e <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.x, 8, HAL_MAX_DELAY);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f503 71d4 	add.w	r1, r3, #424	; 0x1a8
 8010554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010558:	2208      	movs	r2, #8
 801055a:	f005 fd88 	bl	801606e <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.y, 8, HAL_MAX_DELAY);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f503 71d8 	add.w	r1, r3, #432	; 0x1b0
 801056a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801056e:	2208      	movs	r2, #8
 8010570:	f005 fd7d 	bl	801606e <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.distance, 8, HAL_MAX_DELAY);
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 8010580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010584:	2208      	movs	r2, #8
 8010586:	f005 fd72 	bl	801606e <HAL_UART_Transmit>
}
 801058a:	e000      	b.n	801058e <ObstacleHandler+0x406>
				break;
 801058c:	bf00      	nop
}
 801058e:	bf00      	nop
 8010590:	3718      	adds	r7, #24
 8010592:	46bd      	mov	sp, r7
 8010594:	bdb0      	pop	{r4, r5, r7, pc}
 8010596:	bf00      	nop

08010598 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8010598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80105d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 801059c:	480d      	ldr	r0, [pc, #52]	; (80105d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801059e:	490e      	ldr	r1, [pc, #56]	; (80105d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80105a0:	4a0e      	ldr	r2, [pc, #56]	; (80105dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80105a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80105a4:	e002      	b.n	80105ac <LoopCopyDataInit>

080105a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80105a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80105a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80105aa:	3304      	adds	r3, #4

080105ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80105ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80105ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80105b0:	d3f9      	bcc.n	80105a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80105b2:	4a0b      	ldr	r2, [pc, #44]	; (80105e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80105b4:	4c0b      	ldr	r4, [pc, #44]	; (80105e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80105b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80105b8:	e001      	b.n	80105be <LoopFillZerobss>

080105ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80105ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80105bc:	3204      	adds	r2, #4

080105be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80105be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80105c0:	d3fb      	bcc.n	80105ba <FillZerobss>


/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80105c2:	f7fc fd03 	bl	800cfcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80105c6:	f009 faff 	bl	8019bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80105ca:	f7f3 fcc3 	bl	8003f54 <main>
  bx  lr    
 80105ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80105d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80105d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80105d8:	2000029c 	.word	0x2000029c
  ldr r2, =_sidata
 80105dc:	08020bac 	.word	0x08020bac
  ldr r2, =_sbss
 80105e0:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 80105e4:	2000a6e4 	.word	0x2000a6e4

080105e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80105e8:	e7fe      	b.n	80105e8 <ADC_IRQHandler>
	...

080105ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80105f0:	4b0e      	ldr	r3, [pc, #56]	; (801062c <HAL_Init+0x40>)
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	4a0d      	ldr	r2, [pc, #52]	; (801062c <HAL_Init+0x40>)
 80105f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80105fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80105fc:	4b0b      	ldr	r3, [pc, #44]	; (801062c <HAL_Init+0x40>)
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	4a0a      	ldr	r2, [pc, #40]	; (801062c <HAL_Init+0x40>)
 8010602:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010606:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010608:	4b08      	ldr	r3, [pc, #32]	; (801062c <HAL_Init+0x40>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	4a07      	ldr	r2, [pc, #28]	; (801062c <HAL_Init+0x40>)
 801060e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010612:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010614:	2003      	movs	r0, #3
 8010616:	f000 ffa8 	bl	801156a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801061a:	2000      	movs	r0, #0
 801061c:	f7fc fbb6 	bl	800cd8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010620:	f7f1 fc6a 	bl	8001ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010624:	2300      	movs	r3, #0
}
 8010626:	4618      	mov	r0, r3
 8010628:	bd80      	pop	{r7, pc}
 801062a:	bf00      	nop
 801062c:	40023c00 	.word	0x40023c00

08010630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010630:	b480      	push	{r7}
 8010632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010634:	4b06      	ldr	r3, [pc, #24]	; (8010650 <HAL_IncTick+0x20>)
 8010636:	781b      	ldrb	r3, [r3, #0]
 8010638:	461a      	mov	r2, r3
 801063a:	4b06      	ldr	r3, [pc, #24]	; (8010654 <HAL_IncTick+0x24>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	4413      	add	r3, r2
 8010640:	4a04      	ldr	r2, [pc, #16]	; (8010654 <HAL_IncTick+0x24>)
 8010642:	6013      	str	r3, [r2, #0]
}
 8010644:	bf00      	nop
 8010646:	46bd      	mov	sp, r7
 8010648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064c:	4770      	bx	lr
 801064e:	bf00      	nop
 8010650:	200000bc 	.word	0x200000bc
 8010654:	2000a690 	.word	0x2000a690

08010658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010658:	b480      	push	{r7}
 801065a:	af00      	add	r7, sp, #0
  return uwTick;
 801065c:	4b03      	ldr	r3, [pc, #12]	; (801066c <HAL_GetTick+0x14>)
 801065e:	681b      	ldr	r3, [r3, #0]
}
 8010660:	4618      	mov	r0, r3
 8010662:	46bd      	mov	sp, r7
 8010664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010668:	4770      	bx	lr
 801066a:	bf00      	nop
 801066c:	2000a690 	.word	0x2000a690

08010670 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b084      	sub	sp, #16
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d101      	bne.n	8010682 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 801067e:	2301      	movs	r3, #1
 8010680:	e0ed      	b.n	801085e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010688:	b2db      	uxtb	r3, r3
 801068a:	2b00      	cmp	r3, #0
 801068c:	d102      	bne.n	8010694 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f7f1 fc5e 	bl	8001f50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	681a      	ldr	r2, [r3, #0]
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	f022 0202 	bic.w	r2, r2, #2
 80106a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80106a4:	f7ff ffd8 	bl	8010658 <HAL_GetTick>
 80106a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80106aa:	e012      	b.n	80106d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80106ac:	f7ff ffd4 	bl	8010658 <HAL_GetTick>
 80106b0:	4602      	mov	r2, r0
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	1ad3      	subs	r3, r2, r3
 80106b6:	2b0a      	cmp	r3, #10
 80106b8:	d90b      	bls.n	80106d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	2205      	movs	r2, #5
 80106ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80106ce:	2301      	movs	r3, #1
 80106d0:	e0c5      	b.n	801085e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	685b      	ldr	r3, [r3, #4]
 80106d8:	f003 0302 	and.w	r3, r3, #2
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d1e5      	bne.n	80106ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	681a      	ldr	r2, [r3, #0]
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	f042 0201 	orr.w	r2, r2, #1
 80106ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80106f0:	f7ff ffb2 	bl	8010658 <HAL_GetTick>
 80106f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80106f6:	e012      	b.n	801071e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80106f8:	f7ff ffae 	bl	8010658 <HAL_GetTick>
 80106fc:	4602      	mov	r2, r0
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	1ad3      	subs	r3, r2, r3
 8010702:	2b0a      	cmp	r3, #10
 8010704:	d90b      	bls.n	801071e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801070a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	2205      	movs	r2, #5
 8010716:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 801071a:	2301      	movs	r3, #1
 801071c:	e09f      	b.n	801085e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	685b      	ldr	r3, [r3, #4]
 8010724:	f003 0301 	and.w	r3, r3, #1
 8010728:	2b00      	cmp	r3, #0
 801072a:	d0e5      	beq.n	80106f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	7e1b      	ldrb	r3, [r3, #24]
 8010730:	2b01      	cmp	r3, #1
 8010732:	d108      	bne.n	8010746 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	681a      	ldr	r2, [r3, #0]
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010742:	601a      	str	r2, [r3, #0]
 8010744:	e007      	b.n	8010756 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	681a      	ldr	r2, [r3, #0]
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010754:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	7e5b      	ldrb	r3, [r3, #25]
 801075a:	2b01      	cmp	r3, #1
 801075c:	d108      	bne.n	8010770 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	681a      	ldr	r2, [r3, #0]
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801076c:	601a      	str	r2, [r3, #0]
 801076e:	e007      	b.n	8010780 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	681a      	ldr	r2, [r3, #0]
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801077e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	7e9b      	ldrb	r3, [r3, #26]
 8010784:	2b01      	cmp	r3, #1
 8010786:	d108      	bne.n	801079a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	681a      	ldr	r2, [r3, #0]
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	f042 0220 	orr.w	r2, r2, #32
 8010796:	601a      	str	r2, [r3, #0]
 8010798:	e007      	b.n	80107aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	681a      	ldr	r2, [r3, #0]
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	f022 0220 	bic.w	r2, r2, #32
 80107a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	7edb      	ldrb	r3, [r3, #27]
 80107ae:	2b01      	cmp	r3, #1
 80107b0:	d108      	bne.n	80107c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	681a      	ldr	r2, [r3, #0]
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	f022 0210 	bic.w	r2, r2, #16
 80107c0:	601a      	str	r2, [r3, #0]
 80107c2:	e007      	b.n	80107d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	681a      	ldr	r2, [r3, #0]
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	f042 0210 	orr.w	r2, r2, #16
 80107d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	7f1b      	ldrb	r3, [r3, #28]
 80107d8:	2b01      	cmp	r3, #1
 80107da:	d108      	bne.n	80107ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	681a      	ldr	r2, [r3, #0]
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	f042 0208 	orr.w	r2, r2, #8
 80107ea:	601a      	str	r2, [r3, #0]
 80107ec:	e007      	b.n	80107fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	681a      	ldr	r2, [r3, #0]
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	f022 0208 	bic.w	r2, r2, #8
 80107fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	7f5b      	ldrb	r3, [r3, #29]
 8010802:	2b01      	cmp	r3, #1
 8010804:	d108      	bne.n	8010818 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	681a      	ldr	r2, [r3, #0]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	f042 0204 	orr.w	r2, r2, #4
 8010814:	601a      	str	r2, [r3, #0]
 8010816:	e007      	b.n	8010828 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	681a      	ldr	r2, [r3, #0]
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	f022 0204 	bic.w	r2, r2, #4
 8010826:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	689a      	ldr	r2, [r3, #8]
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	68db      	ldr	r3, [r3, #12]
 8010830:	431a      	orrs	r2, r3
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	691b      	ldr	r3, [r3, #16]
 8010836:	431a      	orrs	r2, r3
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	695b      	ldr	r3, [r3, #20]
 801083c:	ea42 0103 	orr.w	r1, r2, r3
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	685b      	ldr	r3, [r3, #4]
 8010844:	1e5a      	subs	r2, r3, #1
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	430a      	orrs	r2, r1
 801084c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	2200      	movs	r2, #0
 8010852:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2201      	movs	r2, #1
 8010858:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 801085c:	2300      	movs	r3, #0
}
 801085e:	4618      	mov	r0, r3
 8010860:	3710      	adds	r7, #16
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}
	...

08010868 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8010868:	b480      	push	{r7}
 801086a:	b087      	sub	sp, #28
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
 8010870:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801087e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8010880:	7cfb      	ldrb	r3, [r7, #19]
 8010882:	2b01      	cmp	r3, #1
 8010884:	d003      	beq.n	801088e <HAL_CAN_ConfigFilter+0x26>
 8010886:	7cfb      	ldrb	r3, [r7, #19]
 8010888:	2b02      	cmp	r3, #2
 801088a:	f040 80be 	bne.w	8010a0a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 801088e:	4b65      	ldr	r3, [pc, #404]	; (8010a24 <HAL_CAN_ConfigFilter+0x1bc>)
 8010890:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8010892:	697b      	ldr	r3, [r7, #20]
 8010894:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010898:	f043 0201 	orr.w	r2, r3, #1
 801089c:	697b      	ldr	r3, [r7, #20]
 801089e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80108a8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80108ac:	697b      	ldr	r3, [r7, #20]
 80108ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108bc:	021b      	lsls	r3, r3, #8
 80108be:	431a      	orrs	r2, r3
 80108c0:	697b      	ldr	r3, [r7, #20]
 80108c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80108c6:	683b      	ldr	r3, [r7, #0]
 80108c8:	695b      	ldr	r3, [r3, #20]
 80108ca:	f003 031f 	and.w	r3, r3, #31
 80108ce:	2201      	movs	r2, #1
 80108d0:	fa02 f303 	lsl.w	r3, r2, r3
 80108d4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80108d6:	697b      	ldr	r3, [r7, #20]
 80108d8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	43db      	mvns	r3, r3
 80108e0:	401a      	ands	r2, r3
 80108e2:	697b      	ldr	r3, [r7, #20]
 80108e4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	69db      	ldr	r3, [r3, #28]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d123      	bne.n	8010938 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80108f0:	697b      	ldr	r3, [r7, #20]
 80108f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	43db      	mvns	r3, r3
 80108fa:	401a      	ands	r2, r3
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	68db      	ldr	r3, [r3, #12]
 8010906:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	685b      	ldr	r3, [r3, #4]
 801090c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 801090e:	683a      	ldr	r2, [r7, #0]
 8010910:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8010912:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8010914:	697b      	ldr	r3, [r7, #20]
 8010916:	3248      	adds	r2, #72	; 0x48
 8010918:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	689b      	ldr	r3, [r3, #8]
 8010920:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8010922:	683b      	ldr	r3, [r7, #0]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 801092c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 801092e:	6979      	ldr	r1, [r7, #20]
 8010930:	3348      	adds	r3, #72	; 0x48
 8010932:	00db      	lsls	r3, r3, #3
 8010934:	440b      	add	r3, r1
 8010936:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8010938:	683b      	ldr	r3, [r7, #0]
 801093a:	69db      	ldr	r3, [r3, #28]
 801093c:	2b01      	cmp	r3, #1
 801093e:	d122      	bne.n	8010986 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8010940:	697b      	ldr	r3, [r7, #20]
 8010942:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	431a      	orrs	r2, r3
 801094a:	697b      	ldr	r3, [r7, #20]
 801094c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8010956:	683b      	ldr	r3, [r7, #0]
 8010958:	685b      	ldr	r3, [r3, #4]
 801095a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 801095c:	683a      	ldr	r2, [r7, #0]
 801095e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8010960:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	3248      	adds	r2, #72	; 0x48
 8010966:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	689b      	ldr	r3, [r3, #8]
 801096e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	68db      	ldr	r3, [r3, #12]
 8010974:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 801097a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 801097c:	6979      	ldr	r1, [r7, #20]
 801097e:	3348      	adds	r3, #72	; 0x48
 8010980:	00db      	lsls	r3, r3, #3
 8010982:	440b      	add	r3, r1
 8010984:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	699b      	ldr	r3, [r3, #24]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d109      	bne.n	80109a2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 801098e:	697b      	ldr	r3, [r7, #20]
 8010990:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	43db      	mvns	r3, r3
 8010998:	401a      	ands	r2, r3
 801099a:	697b      	ldr	r3, [r7, #20]
 801099c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80109a0:	e007      	b.n	80109b2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80109a2:	697b      	ldr	r3, [r7, #20]
 80109a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	431a      	orrs	r2, r3
 80109ac:	697b      	ldr	r3, [r7, #20]
 80109ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80109b2:	683b      	ldr	r3, [r7, #0]
 80109b4:	691b      	ldr	r3, [r3, #16]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d109      	bne.n	80109ce <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80109ba:	697b      	ldr	r3, [r7, #20]
 80109bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	43db      	mvns	r3, r3
 80109c4:	401a      	ands	r2, r3
 80109c6:	697b      	ldr	r3, [r7, #20]
 80109c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80109cc:	e007      	b.n	80109de <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	431a      	orrs	r2, r3
 80109d8:	697b      	ldr	r3, [r7, #20]
 80109da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	6a1b      	ldr	r3, [r3, #32]
 80109e2:	2b01      	cmp	r3, #1
 80109e4:	d107      	bne.n	80109f6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	431a      	orrs	r2, r3
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80109f6:	697b      	ldr	r3, [r7, #20]
 80109f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80109fc:	f023 0201 	bic.w	r2, r3, #1
 8010a00:	697b      	ldr	r3, [r7, #20]
 8010a02:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8010a06:	2300      	movs	r3, #0
 8010a08:	e006      	b.n	8010a18 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a0e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8010a16:	2301      	movs	r3, #1
  }
}
 8010a18:	4618      	mov	r0, r3
 8010a1a:	371c      	adds	r7, #28
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a22:	4770      	bx	lr
 8010a24:	40006400 	.word	0x40006400

08010a28 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b084      	sub	sp, #16
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010a36:	b2db      	uxtb	r3, r3
 8010a38:	2b01      	cmp	r3, #1
 8010a3a:	d12e      	bne.n	8010a9a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2202      	movs	r2, #2
 8010a40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	681a      	ldr	r2, [r3, #0]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	f022 0201 	bic.w	r2, r2, #1
 8010a52:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8010a54:	f7ff fe00 	bl	8010658 <HAL_GetTick>
 8010a58:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8010a5a:	e012      	b.n	8010a82 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8010a5c:	f7ff fdfc 	bl	8010658 <HAL_GetTick>
 8010a60:	4602      	mov	r2, r0
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	1ad3      	subs	r3, r2, r3
 8010a66:	2b0a      	cmp	r3, #10
 8010a68:	d90b      	bls.n	8010a82 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	2205      	movs	r2, #5
 8010a7a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8010a7e:	2301      	movs	r3, #1
 8010a80:	e012      	b.n	8010aa8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	685b      	ldr	r3, [r3, #4]
 8010a88:	f003 0301 	and.w	r3, r3, #1
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d1e5      	bne.n	8010a5c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2200      	movs	r2, #0
 8010a94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8010a96:	2300      	movs	r3, #0
 8010a98:	e006      	b.n	8010aa8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a9e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8010aa6:	2301      	movs	r3, #1
  }
}
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3710      	adds	r7, #16
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}

08010ab0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8010ab0:	b480      	push	{r7}
 8010ab2:	b089      	sub	sp, #36	; 0x24
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	60f8      	str	r0, [r7, #12]
 8010ab8:	60b9      	str	r1, [r7, #8]
 8010aba:	607a      	str	r2, [r7, #4]
 8010abc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010ac4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	689b      	ldr	r3, [r3, #8]
 8010acc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8010ace:	7ffb      	ldrb	r3, [r7, #31]
 8010ad0:	2b01      	cmp	r3, #1
 8010ad2:	d003      	beq.n	8010adc <HAL_CAN_AddTxMessage+0x2c>
 8010ad4:	7ffb      	ldrb	r3, [r7, #31]
 8010ad6:	2b02      	cmp	r3, #2
 8010ad8:	f040 80b8 	bne.w	8010c4c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8010adc:	69bb      	ldr	r3, [r7, #24]
 8010ade:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d10a      	bne.n	8010afc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8010ae6:	69bb      	ldr	r3, [r7, #24]
 8010ae8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d105      	bne.n	8010afc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8010af0:	69bb      	ldr	r3, [r7, #24]
 8010af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	f000 80a0 	beq.w	8010c3c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8010afc:	69bb      	ldr	r3, [r7, #24]
 8010afe:	0e1b      	lsrs	r3, r3, #24
 8010b00:	f003 0303 	and.w	r3, r3, #3
 8010b04:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	2b02      	cmp	r3, #2
 8010b0a:	d907      	bls.n	8010b1c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b10:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8010b18:	2301      	movs	r3, #1
 8010b1a:	e09e      	b.n	8010c5a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8010b1c:	2201      	movs	r2, #1
 8010b1e:	697b      	ldr	r3, [r7, #20]
 8010b20:	409a      	lsls	r2, r3
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8010b26:	68bb      	ldr	r3, [r7, #8]
 8010b28:	689b      	ldr	r3, [r3, #8]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d10d      	bne.n	8010b4a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8010b2e:	68bb      	ldr	r3, [r7, #8]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8010b34:	68bb      	ldr	r3, [r7, #8]
 8010b36:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8010b38:	68f9      	ldr	r1, [r7, #12]
 8010b3a:	6809      	ldr	r1, [r1, #0]
 8010b3c:	431a      	orrs	r2, r3
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	3318      	adds	r3, #24
 8010b42:	011b      	lsls	r3, r3, #4
 8010b44:	440b      	add	r3, r1
 8010b46:	601a      	str	r2, [r3, #0]
 8010b48:	e00f      	b.n	8010b6a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8010b4a:	68bb      	ldr	r3, [r7, #8]
 8010b4c:	685b      	ldr	r3, [r3, #4]
 8010b4e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8010b50:	68bb      	ldr	r3, [r7, #8]
 8010b52:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8010b54:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8010b56:	68bb      	ldr	r3, [r7, #8]
 8010b58:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8010b5a:	68f9      	ldr	r1, [r7, #12]
 8010b5c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8010b5e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8010b60:	697b      	ldr	r3, [r7, #20]
 8010b62:	3318      	adds	r3, #24
 8010b64:	011b      	lsls	r3, r3, #4
 8010b66:	440b      	add	r3, r1
 8010b68:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	6819      	ldr	r1, [r3, #0]
 8010b6e:	68bb      	ldr	r3, [r7, #8]
 8010b70:	691a      	ldr	r2, [r3, #16]
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	3318      	adds	r3, #24
 8010b76:	011b      	lsls	r3, r3, #4
 8010b78:	440b      	add	r3, r1
 8010b7a:	3304      	adds	r3, #4
 8010b7c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8010b7e:	68bb      	ldr	r3, [r7, #8]
 8010b80:	7d1b      	ldrb	r3, [r3, #20]
 8010b82:	2b01      	cmp	r3, #1
 8010b84:	d111      	bne.n	8010baa <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	681a      	ldr	r2, [r3, #0]
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	3318      	adds	r3, #24
 8010b8e:	011b      	lsls	r3, r3, #4
 8010b90:	4413      	add	r3, r2
 8010b92:	3304      	adds	r3, #4
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	68fa      	ldr	r2, [r7, #12]
 8010b98:	6811      	ldr	r1, [r2, #0]
 8010b9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010b9e:	697b      	ldr	r3, [r7, #20]
 8010ba0:	3318      	adds	r3, #24
 8010ba2:	011b      	lsls	r3, r3, #4
 8010ba4:	440b      	add	r3, r1
 8010ba6:	3304      	adds	r3, #4
 8010ba8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	3307      	adds	r3, #7
 8010bae:	781b      	ldrb	r3, [r3, #0]
 8010bb0:	061a      	lsls	r2, r3, #24
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	3306      	adds	r3, #6
 8010bb6:	781b      	ldrb	r3, [r3, #0]
 8010bb8:	041b      	lsls	r3, r3, #16
 8010bba:	431a      	orrs	r2, r3
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	3305      	adds	r3, #5
 8010bc0:	781b      	ldrb	r3, [r3, #0]
 8010bc2:	021b      	lsls	r3, r3, #8
 8010bc4:	4313      	orrs	r3, r2
 8010bc6:	687a      	ldr	r2, [r7, #4]
 8010bc8:	3204      	adds	r2, #4
 8010bca:	7812      	ldrb	r2, [r2, #0]
 8010bcc:	4610      	mov	r0, r2
 8010bce:	68fa      	ldr	r2, [r7, #12]
 8010bd0:	6811      	ldr	r1, [r2, #0]
 8010bd2:	ea43 0200 	orr.w	r2, r3, r0
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	011b      	lsls	r3, r3, #4
 8010bda:	440b      	add	r3, r1
 8010bdc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8010be0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	3303      	adds	r3, #3
 8010be6:	781b      	ldrb	r3, [r3, #0]
 8010be8:	061a      	lsls	r2, r3, #24
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	3302      	adds	r3, #2
 8010bee:	781b      	ldrb	r3, [r3, #0]
 8010bf0:	041b      	lsls	r3, r3, #16
 8010bf2:	431a      	orrs	r2, r3
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	3301      	adds	r3, #1
 8010bf8:	781b      	ldrb	r3, [r3, #0]
 8010bfa:	021b      	lsls	r3, r3, #8
 8010bfc:	4313      	orrs	r3, r2
 8010bfe:	687a      	ldr	r2, [r7, #4]
 8010c00:	7812      	ldrb	r2, [r2, #0]
 8010c02:	4610      	mov	r0, r2
 8010c04:	68fa      	ldr	r2, [r7, #12]
 8010c06:	6811      	ldr	r1, [r2, #0]
 8010c08:	ea43 0200 	orr.w	r2, r3, r0
 8010c0c:	697b      	ldr	r3, [r7, #20]
 8010c0e:	011b      	lsls	r3, r3, #4
 8010c10:	440b      	add	r3, r1
 8010c12:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8010c16:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	681a      	ldr	r2, [r3, #0]
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	3318      	adds	r3, #24
 8010c20:	011b      	lsls	r3, r3, #4
 8010c22:	4413      	add	r3, r2
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	68fa      	ldr	r2, [r7, #12]
 8010c28:	6811      	ldr	r1, [r2, #0]
 8010c2a:	f043 0201 	orr.w	r2, r3, #1
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	3318      	adds	r3, #24
 8010c32:	011b      	lsls	r3, r3, #4
 8010c34:	440b      	add	r3, r1
 8010c36:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8010c38:	2300      	movs	r3, #0
 8010c3a:	e00e      	b.n	8010c5a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8010c48:	2301      	movs	r3, #1
 8010c4a:	e006      	b.n	8010c5a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c50:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8010c58:	2301      	movs	r3, #1
  }
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3724      	adds	r7, #36	; 0x24
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c64:	4770      	bx	lr

08010c66 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8010c66:	b480      	push	{r7}
 8010c68:	b085      	sub	sp, #20
 8010c6a:	af00      	add	r7, sp, #0
 8010c6c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010c78:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8010c7a:	7afb      	ldrb	r3, [r7, #11]
 8010c7c:	2b01      	cmp	r3, #1
 8010c7e:	d002      	beq.n	8010c86 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8010c80:	7afb      	ldrb	r3, [r7, #11]
 8010c82:	2b02      	cmp	r3, #2
 8010c84:	d11d      	bne.n	8010cc2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	689b      	ldr	r3, [r3, #8]
 8010c8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d002      	beq.n	8010c9a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	3301      	adds	r3, #1
 8010c98:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	689b      	ldr	r3, [r3, #8]
 8010ca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d002      	beq.n	8010cae <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	3301      	adds	r3, #1
 8010cac:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	689b      	ldr	r3, [r3, #8]
 8010cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d002      	beq.n	8010cc2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	3301      	adds	r3, #1
 8010cc0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8010cc2:	68fb      	ldr	r3, [r7, #12]
}
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	3714      	adds	r7, #20
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cce:	4770      	bx	lr

08010cd0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8010cd0:	b480      	push	{r7}
 8010cd2:	b087      	sub	sp, #28
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	60f8      	str	r0, [r7, #12]
 8010cd8:	60b9      	str	r1, [r7, #8]
 8010cda:	607a      	str	r2, [r7, #4]
 8010cdc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010ce4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8010ce6:	7dfb      	ldrb	r3, [r7, #23]
 8010ce8:	2b01      	cmp	r3, #1
 8010cea:	d003      	beq.n	8010cf4 <HAL_CAN_GetRxMessage+0x24>
 8010cec:	7dfb      	ldrb	r3, [r7, #23]
 8010cee:	2b02      	cmp	r3, #2
 8010cf0:	f040 80f3 	bne.w	8010eda <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8010cf4:	68bb      	ldr	r3, [r7, #8]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d10e      	bne.n	8010d18 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	68db      	ldr	r3, [r3, #12]
 8010d00:	f003 0303 	and.w	r3, r3, #3
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d116      	bne.n	8010d36 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8010d14:	2301      	movs	r3, #1
 8010d16:	e0e7      	b.n	8010ee8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	691b      	ldr	r3, [r3, #16]
 8010d1e:	f003 0303 	and.w	r3, r3, #3
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d107      	bne.n	8010d36 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8010d32:	2301      	movs	r3, #1
 8010d34:	e0d8      	b.n	8010ee8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	681a      	ldr	r2, [r3, #0]
 8010d3a:	68bb      	ldr	r3, [r7, #8]
 8010d3c:	331b      	adds	r3, #27
 8010d3e:	011b      	lsls	r3, r3, #4
 8010d40:	4413      	add	r3, r2
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	f003 0204 	and.w	r2, r3, #4
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	689b      	ldr	r3, [r3, #8]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d10c      	bne.n	8010d6e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	681a      	ldr	r2, [r3, #0]
 8010d58:	68bb      	ldr	r3, [r7, #8]
 8010d5a:	331b      	adds	r3, #27
 8010d5c:	011b      	lsls	r3, r3, #4
 8010d5e:	4413      	add	r3, r2
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	0d5b      	lsrs	r3, r3, #21
 8010d64:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	601a      	str	r2, [r3, #0]
 8010d6c:	e00b      	b.n	8010d86 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	681a      	ldr	r2, [r3, #0]
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	331b      	adds	r3, #27
 8010d76:	011b      	lsls	r3, r3, #4
 8010d78:	4413      	add	r3, r2
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	08db      	lsrs	r3, r3, #3
 8010d7e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	681a      	ldr	r2, [r3, #0]
 8010d8a:	68bb      	ldr	r3, [r7, #8]
 8010d8c:	331b      	adds	r3, #27
 8010d8e:	011b      	lsls	r3, r3, #4
 8010d90:	4413      	add	r3, r2
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	f003 0202 	and.w	r2, r3, #2
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	681a      	ldr	r2, [r3, #0]
 8010da0:	68bb      	ldr	r3, [r7, #8]
 8010da2:	331b      	adds	r3, #27
 8010da4:	011b      	lsls	r3, r3, #4
 8010da6:	4413      	add	r3, r2
 8010da8:	3304      	adds	r3, #4
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	f003 020f 	and.w	r2, r3, #15
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	681a      	ldr	r2, [r3, #0]
 8010db8:	68bb      	ldr	r3, [r7, #8]
 8010dba:	331b      	adds	r3, #27
 8010dbc:	011b      	lsls	r3, r3, #4
 8010dbe:	4413      	add	r3, r2
 8010dc0:	3304      	adds	r3, #4
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	0a1b      	lsrs	r3, r3, #8
 8010dc6:	b2da      	uxtb	r2, r3
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	681a      	ldr	r2, [r3, #0]
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	331b      	adds	r3, #27
 8010dd4:	011b      	lsls	r3, r3, #4
 8010dd6:	4413      	add	r3, r2
 8010dd8:	3304      	adds	r3, #4
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	0c1b      	lsrs	r3, r3, #16
 8010dde:	b29a      	uxth	r2, r3
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	681a      	ldr	r2, [r3, #0]
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	011b      	lsls	r3, r3, #4
 8010dec:	4413      	add	r3, r2
 8010dee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	b2da      	uxtb	r2, r3
 8010df6:	683b      	ldr	r3, [r7, #0]
 8010df8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	681a      	ldr	r2, [r3, #0]
 8010dfe:	68bb      	ldr	r3, [r7, #8]
 8010e00:	011b      	lsls	r3, r3, #4
 8010e02:	4413      	add	r3, r2
 8010e04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	0a1a      	lsrs	r2, r3, #8
 8010e0c:	683b      	ldr	r3, [r7, #0]
 8010e0e:	3301      	adds	r3, #1
 8010e10:	b2d2      	uxtb	r2, r2
 8010e12:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	681a      	ldr	r2, [r3, #0]
 8010e18:	68bb      	ldr	r3, [r7, #8]
 8010e1a:	011b      	lsls	r3, r3, #4
 8010e1c:	4413      	add	r3, r2
 8010e1e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	0c1a      	lsrs	r2, r3, #16
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	3302      	adds	r3, #2
 8010e2a:	b2d2      	uxtb	r2, r2
 8010e2c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	681a      	ldr	r2, [r3, #0]
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	011b      	lsls	r3, r3, #4
 8010e36:	4413      	add	r3, r2
 8010e38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	0e1a      	lsrs	r2, r3, #24
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	3303      	adds	r3, #3
 8010e44:	b2d2      	uxtb	r2, r2
 8010e46:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	681a      	ldr	r2, [r3, #0]
 8010e4c:	68bb      	ldr	r3, [r7, #8]
 8010e4e:	011b      	lsls	r3, r3, #4
 8010e50:	4413      	add	r3, r2
 8010e52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8010e56:	681a      	ldr	r2, [r3, #0]
 8010e58:	683b      	ldr	r3, [r7, #0]
 8010e5a:	3304      	adds	r3, #4
 8010e5c:	b2d2      	uxtb	r2, r2
 8010e5e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	681a      	ldr	r2, [r3, #0]
 8010e64:	68bb      	ldr	r3, [r7, #8]
 8010e66:	011b      	lsls	r3, r3, #4
 8010e68:	4413      	add	r3, r2
 8010e6a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	0a1a      	lsrs	r2, r3, #8
 8010e72:	683b      	ldr	r3, [r7, #0]
 8010e74:	3305      	adds	r3, #5
 8010e76:	b2d2      	uxtb	r2, r2
 8010e78:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	681a      	ldr	r2, [r3, #0]
 8010e7e:	68bb      	ldr	r3, [r7, #8]
 8010e80:	011b      	lsls	r3, r3, #4
 8010e82:	4413      	add	r3, r2
 8010e84:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	0c1a      	lsrs	r2, r3, #16
 8010e8c:	683b      	ldr	r3, [r7, #0]
 8010e8e:	3306      	adds	r3, #6
 8010e90:	b2d2      	uxtb	r2, r2
 8010e92:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	681a      	ldr	r2, [r3, #0]
 8010e98:	68bb      	ldr	r3, [r7, #8]
 8010e9a:	011b      	lsls	r3, r3, #4
 8010e9c:	4413      	add	r3, r2
 8010e9e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	0e1a      	lsrs	r2, r3, #24
 8010ea6:	683b      	ldr	r3, [r7, #0]
 8010ea8:	3307      	adds	r3, #7
 8010eaa:	b2d2      	uxtb	r2, r2
 8010eac:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8010eae:	68bb      	ldr	r3, [r7, #8]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d108      	bne.n	8010ec6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	68da      	ldr	r2, [r3, #12]
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	f042 0220 	orr.w	r2, r2, #32
 8010ec2:	60da      	str	r2, [r3, #12]
 8010ec4:	e007      	b.n	8010ed6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	691a      	ldr	r2, [r3, #16]
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	f042 0220 	orr.w	r2, r2, #32
 8010ed4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	e006      	b.n	8010ee8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ede:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8010ee6:	2301      	movs	r3, #1
  }
}
 8010ee8:	4618      	mov	r0, r3
 8010eea:	371c      	adds	r7, #28
 8010eec:	46bd      	mov	sp, r7
 8010eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef2:	4770      	bx	lr

08010ef4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8010ef4:	b480      	push	{r7}
 8010ef6:	b085      	sub	sp, #20
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
 8010efc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010f04:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8010f06:	7bfb      	ldrb	r3, [r7, #15]
 8010f08:	2b01      	cmp	r3, #1
 8010f0a:	d002      	beq.n	8010f12 <HAL_CAN_ActivateNotification+0x1e>
 8010f0c:	7bfb      	ldrb	r3, [r7, #15]
 8010f0e:	2b02      	cmp	r3, #2
 8010f10:	d109      	bne.n	8010f26 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	6959      	ldr	r1, [r3, #20]
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	683a      	ldr	r2, [r7, #0]
 8010f1e:	430a      	orrs	r2, r1
 8010f20:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8010f22:	2300      	movs	r3, #0
 8010f24:	e006      	b.n	8010f34 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f2a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8010f32:	2301      	movs	r3, #1
  }
}
 8010f34:	4618      	mov	r0, r3
 8010f36:	3714      	adds	r7, #20
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3e:	4770      	bx	lr

08010f40 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b08a      	sub	sp, #40	; 0x28
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8010f48:	2300      	movs	r3, #0
 8010f4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	695b      	ldr	r3, [r3, #20]
 8010f52:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	685b      	ldr	r3, [r3, #4]
 8010f5a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	689b      	ldr	r3, [r3, #8]
 8010f62:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	68db      	ldr	r3, [r3, #12]
 8010f6a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	691b      	ldr	r3, [r3, #16]
 8010f72:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	699b      	ldr	r3, [r3, #24]
 8010f7a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8010f7c:	6a3b      	ldr	r3, [r7, #32]
 8010f7e:	f003 0301 	and.w	r3, r3, #1
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d07c      	beq.n	8011080 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8010f86:	69bb      	ldr	r3, [r7, #24]
 8010f88:	f003 0301 	and.w	r3, r3, #1
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d023      	beq.n	8010fd8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	2201      	movs	r2, #1
 8010f96:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8010f98:	69bb      	ldr	r3, [r7, #24]
 8010f9a:	f003 0302 	and.w	r3, r3, #2
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d003      	beq.n	8010faa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8010fa2:	6878      	ldr	r0, [r7, #4]
 8010fa4:	f000 f983 	bl	80112ae <HAL_CAN_TxMailbox0CompleteCallback>
 8010fa8:	e016      	b.n	8010fd8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8010faa:	69bb      	ldr	r3, [r7, #24]
 8010fac:	f003 0304 	and.w	r3, r3, #4
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d004      	beq.n	8010fbe <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8010fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010fba:	627b      	str	r3, [r7, #36]	; 0x24
 8010fbc:	e00c      	b.n	8010fd8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8010fbe:	69bb      	ldr	r3, [r7, #24]
 8010fc0:	f003 0308 	and.w	r3, r3, #8
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d004      	beq.n	8010fd2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8010fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010fce:	627b      	str	r3, [r7, #36]	; 0x24
 8010fd0:	e002      	b.n	8010fd8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f000 f989 	bl	80112ea <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8010fd8:	69bb      	ldr	r3, [r7, #24]
 8010fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d024      	beq.n	801102c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010fea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8010fec:	69bb      	ldr	r3, [r7, #24]
 8010fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d003      	beq.n	8010ffe <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f000 f963 	bl	80112c2 <HAL_CAN_TxMailbox1CompleteCallback>
 8010ffc:	e016      	b.n	801102c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8010ffe:	69bb      	ldr	r3, [r7, #24]
 8011000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011004:	2b00      	cmp	r3, #0
 8011006:	d004      	beq.n	8011012 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8011008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801100a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801100e:	627b      	str	r3, [r7, #36]	; 0x24
 8011010:	e00c      	b.n	801102c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8011012:	69bb      	ldr	r3, [r7, #24]
 8011014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011018:	2b00      	cmp	r3, #0
 801101a:	d004      	beq.n	8011026 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 801101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801101e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011022:	627b      	str	r3, [r7, #36]	; 0x24
 8011024:	e002      	b.n	801102c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8011026:	6878      	ldr	r0, [r7, #4]
 8011028:	f000 f969 	bl	80112fe <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 801102c:	69bb      	ldr	r3, [r7, #24]
 801102e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011032:	2b00      	cmp	r3, #0
 8011034:	d024      	beq.n	8011080 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801103e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8011040:	69bb      	ldr	r3, [r7, #24]
 8011042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011046:	2b00      	cmp	r3, #0
 8011048:	d003      	beq.n	8011052 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f000 f943 	bl	80112d6 <HAL_CAN_TxMailbox2CompleteCallback>
 8011050:	e016      	b.n	8011080 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8011052:	69bb      	ldr	r3, [r7, #24]
 8011054:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011058:	2b00      	cmp	r3, #0
 801105a:	d004      	beq.n	8011066 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 801105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801105e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011062:	627b      	str	r3, [r7, #36]	; 0x24
 8011064:	e00c      	b.n	8011080 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8011066:	69bb      	ldr	r3, [r7, #24]
 8011068:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801106c:	2b00      	cmp	r3, #0
 801106e:	d004      	beq.n	801107a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8011070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011076:	627b      	str	r3, [r7, #36]	; 0x24
 8011078:	e002      	b.n	8011080 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 801107a:	6878      	ldr	r0, [r7, #4]
 801107c:	f000 f949 	bl	8011312 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8011080:	6a3b      	ldr	r3, [r7, #32]
 8011082:	f003 0308 	and.w	r3, r3, #8
 8011086:	2b00      	cmp	r3, #0
 8011088:	d00c      	beq.n	80110a4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 801108a:	697b      	ldr	r3, [r7, #20]
 801108c:	f003 0310 	and.w	r3, r3, #16
 8011090:	2b00      	cmp	r3, #0
 8011092:	d007      	beq.n	80110a4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8011094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801109a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	2210      	movs	r2, #16
 80110a2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80110a4:	6a3b      	ldr	r3, [r7, #32]
 80110a6:	f003 0304 	and.w	r3, r3, #4
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d00b      	beq.n	80110c6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80110ae:	697b      	ldr	r3, [r7, #20]
 80110b0:	f003 0308 	and.w	r3, r3, #8
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d006      	beq.n	80110c6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	2208      	movs	r2, #8
 80110be:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80110c0:	6878      	ldr	r0, [r7, #4]
 80110c2:	f000 f930 	bl	8011326 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80110c6:	6a3b      	ldr	r3, [r7, #32]
 80110c8:	f003 0302 	and.w	r3, r3, #2
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d009      	beq.n	80110e4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	68db      	ldr	r3, [r3, #12]
 80110d6:	f003 0303 	and.w	r3, r3, #3
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d002      	beq.n	80110e4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f7f9 f988 	bl	800a3f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80110e4:	6a3b      	ldr	r3, [r7, #32]
 80110e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d00c      	beq.n	8011108 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80110ee:	693b      	ldr	r3, [r7, #16]
 80110f0:	f003 0310 	and.w	r3, r3, #16
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d007      	beq.n	8011108 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80110f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80110fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	2210      	movs	r2, #16
 8011106:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8011108:	6a3b      	ldr	r3, [r7, #32]
 801110a:	f003 0320 	and.w	r3, r3, #32
 801110e:	2b00      	cmp	r3, #0
 8011110:	d00b      	beq.n	801112a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8011112:	693b      	ldr	r3, [r7, #16]
 8011114:	f003 0308 	and.w	r3, r3, #8
 8011118:	2b00      	cmp	r3, #0
 801111a:	d006      	beq.n	801112a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	2208      	movs	r2, #8
 8011122:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8011124:	6878      	ldr	r0, [r7, #4]
 8011126:	f000 f908 	bl	801133a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 801112a:	6a3b      	ldr	r3, [r7, #32]
 801112c:	f003 0310 	and.w	r3, r3, #16
 8011130:	2b00      	cmp	r3, #0
 8011132:	d009      	beq.n	8011148 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	691b      	ldr	r3, [r3, #16]
 801113a:	f003 0303 	and.w	r3, r3, #3
 801113e:	2b00      	cmp	r3, #0
 8011140:	d002      	beq.n	8011148 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8011142:	6878      	ldr	r0, [r7, #4]
 8011144:	f7f9 fae6 	bl	800a714 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8011148:	6a3b      	ldr	r3, [r7, #32]
 801114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801114e:	2b00      	cmp	r3, #0
 8011150:	d00b      	beq.n	801116a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8011152:	69fb      	ldr	r3, [r7, #28]
 8011154:	f003 0310 	and.w	r3, r3, #16
 8011158:	2b00      	cmp	r3, #0
 801115a:	d006      	beq.n	801116a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	2210      	movs	r2, #16
 8011162:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f000 f8f2 	bl	801134e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 801116a:	6a3b      	ldr	r3, [r7, #32]
 801116c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011170:	2b00      	cmp	r3, #0
 8011172:	d00b      	beq.n	801118c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8011174:	69fb      	ldr	r3, [r7, #28]
 8011176:	f003 0308 	and.w	r3, r3, #8
 801117a:	2b00      	cmp	r3, #0
 801117c:	d006      	beq.n	801118c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	2208      	movs	r2, #8
 8011184:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	f000 f8eb 	bl	8011362 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 801118c:	6a3b      	ldr	r3, [r7, #32]
 801118e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011192:	2b00      	cmp	r3, #0
 8011194:	d07b      	beq.n	801128e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8011196:	69fb      	ldr	r3, [r7, #28]
 8011198:	f003 0304 	and.w	r3, r3, #4
 801119c:	2b00      	cmp	r3, #0
 801119e:	d072      	beq.n	8011286 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80111a0:	6a3b      	ldr	r3, [r7, #32]
 80111a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d008      	beq.n	80111bc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d003      	beq.n	80111bc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80111b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b6:	f043 0301 	orr.w	r3, r3, #1
 80111ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80111bc:	6a3b      	ldr	r3, [r7, #32]
 80111be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d008      	beq.n	80111d8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d003      	beq.n	80111d8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80111d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111d2:	f043 0302 	orr.w	r3, r3, #2
 80111d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80111d8:	6a3b      	ldr	r3, [r7, #32]
 80111da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d008      	beq.n	80111f4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d003      	beq.n	80111f4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80111ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ee:	f043 0304 	orr.w	r3, r3, #4
 80111f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80111f4:	6a3b      	ldr	r3, [r7, #32]
 80111f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d043      	beq.n	8011286 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8011204:	2b00      	cmp	r3, #0
 8011206:	d03e      	beq.n	8011286 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801120e:	2b60      	cmp	r3, #96	; 0x60
 8011210:	d02b      	beq.n	801126a <HAL_CAN_IRQHandler+0x32a>
 8011212:	2b60      	cmp	r3, #96	; 0x60
 8011214:	d82e      	bhi.n	8011274 <HAL_CAN_IRQHandler+0x334>
 8011216:	2b50      	cmp	r3, #80	; 0x50
 8011218:	d022      	beq.n	8011260 <HAL_CAN_IRQHandler+0x320>
 801121a:	2b50      	cmp	r3, #80	; 0x50
 801121c:	d82a      	bhi.n	8011274 <HAL_CAN_IRQHandler+0x334>
 801121e:	2b40      	cmp	r3, #64	; 0x40
 8011220:	d019      	beq.n	8011256 <HAL_CAN_IRQHandler+0x316>
 8011222:	2b40      	cmp	r3, #64	; 0x40
 8011224:	d826      	bhi.n	8011274 <HAL_CAN_IRQHandler+0x334>
 8011226:	2b30      	cmp	r3, #48	; 0x30
 8011228:	d010      	beq.n	801124c <HAL_CAN_IRQHandler+0x30c>
 801122a:	2b30      	cmp	r3, #48	; 0x30
 801122c:	d822      	bhi.n	8011274 <HAL_CAN_IRQHandler+0x334>
 801122e:	2b10      	cmp	r3, #16
 8011230:	d002      	beq.n	8011238 <HAL_CAN_IRQHandler+0x2f8>
 8011232:	2b20      	cmp	r3, #32
 8011234:	d005      	beq.n	8011242 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8011236:	e01d      	b.n	8011274 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8011238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801123a:	f043 0308 	orr.w	r3, r3, #8
 801123e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011240:	e019      	b.n	8011276 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8011242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011244:	f043 0310 	orr.w	r3, r3, #16
 8011248:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801124a:	e014      	b.n	8011276 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 801124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801124e:	f043 0320 	orr.w	r3, r3, #32
 8011252:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011254:	e00f      	b.n	8011276 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8011256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801125c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801125e:	e00a      	b.n	8011276 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8011260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011266:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011268:	e005      	b.n	8011276 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 801126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801126c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011270:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011272:	e000      	b.n	8011276 <HAL_CAN_IRQHandler+0x336>
            break;
 8011274:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	699a      	ldr	r2, [r3, #24]
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8011284:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	2204      	movs	r2, #4
 801128c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 801128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011290:	2b00      	cmp	r3, #0
 8011292:	d008      	beq.n	80112a6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801129a:	431a      	orrs	r2, r3
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80112a0:	6878      	ldr	r0, [r7, #4]
 80112a2:	f000 f868 	bl	8011376 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80112a6:	bf00      	nop
 80112a8:	3728      	adds	r7, #40	; 0x28
 80112aa:	46bd      	mov	sp, r7
 80112ac:	bd80      	pop	{r7, pc}

080112ae <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80112ae:	b480      	push	{r7}
 80112b0:	b083      	sub	sp, #12
 80112b2:	af00      	add	r7, sp, #0
 80112b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80112b6:	bf00      	nop
 80112b8:	370c      	adds	r7, #12
 80112ba:	46bd      	mov	sp, r7
 80112bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c0:	4770      	bx	lr

080112c2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80112c2:	b480      	push	{r7}
 80112c4:	b083      	sub	sp, #12
 80112c6:	af00      	add	r7, sp, #0
 80112c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80112ca:	bf00      	nop
 80112cc:	370c      	adds	r7, #12
 80112ce:	46bd      	mov	sp, r7
 80112d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d4:	4770      	bx	lr

080112d6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80112d6:	b480      	push	{r7}
 80112d8:	b083      	sub	sp, #12
 80112da:	af00      	add	r7, sp, #0
 80112dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80112de:	bf00      	nop
 80112e0:	370c      	adds	r7, #12
 80112e2:	46bd      	mov	sp, r7
 80112e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e8:	4770      	bx	lr

080112ea <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80112ea:	b480      	push	{r7}
 80112ec:	b083      	sub	sp, #12
 80112ee:	af00      	add	r7, sp, #0
 80112f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80112f2:	bf00      	nop
 80112f4:	370c      	adds	r7, #12
 80112f6:	46bd      	mov	sp, r7
 80112f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fc:	4770      	bx	lr

080112fe <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80112fe:	b480      	push	{r7}
 8011300:	b083      	sub	sp, #12
 8011302:	af00      	add	r7, sp, #0
 8011304:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8011306:	bf00      	nop
 8011308:	370c      	adds	r7, #12
 801130a:	46bd      	mov	sp, r7
 801130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011310:	4770      	bx	lr

08011312 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8011312:	b480      	push	{r7}
 8011314:	b083      	sub	sp, #12
 8011316:	af00      	add	r7, sp, #0
 8011318:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 801131a:	bf00      	nop
 801131c:	370c      	adds	r7, #12
 801131e:	46bd      	mov	sp, r7
 8011320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011324:	4770      	bx	lr

08011326 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8011326:	b480      	push	{r7}
 8011328:	b083      	sub	sp, #12
 801132a:	af00      	add	r7, sp, #0
 801132c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 801132e:	bf00      	nop
 8011330:	370c      	adds	r7, #12
 8011332:	46bd      	mov	sp, r7
 8011334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011338:	4770      	bx	lr

0801133a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 801133a:	b480      	push	{r7}
 801133c:	b083      	sub	sp, #12
 801133e:	af00      	add	r7, sp, #0
 8011340:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8011342:	bf00      	nop
 8011344:	370c      	adds	r7, #12
 8011346:	46bd      	mov	sp, r7
 8011348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134c:	4770      	bx	lr

0801134e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 801134e:	b480      	push	{r7}
 8011350:	b083      	sub	sp, #12
 8011352:	af00      	add	r7, sp, #0
 8011354:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8011356:	bf00      	nop
 8011358:	370c      	adds	r7, #12
 801135a:	46bd      	mov	sp, r7
 801135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011360:	4770      	bx	lr

08011362 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8011362:	b480      	push	{r7}
 8011364:	b083      	sub	sp, #12
 8011366:	af00      	add	r7, sp, #0
 8011368:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 801136a:	bf00      	nop
 801136c:	370c      	adds	r7, #12
 801136e:	46bd      	mov	sp, r7
 8011370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011374:	4770      	bx	lr

08011376 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8011376:	b480      	push	{r7}
 8011378:	b083      	sub	sp, #12
 801137a:	af00      	add	r7, sp, #0
 801137c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 801137e:	bf00      	nop
 8011380:	370c      	adds	r7, #12
 8011382:	46bd      	mov	sp, r7
 8011384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011388:	4770      	bx	lr
	...

0801138c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801138c:	b480      	push	{r7}
 801138e:	b085      	sub	sp, #20
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	f003 0307 	and.w	r3, r3, #7
 801139a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801139c:	4b0c      	ldr	r3, [pc, #48]	; (80113d0 <__NVIC_SetPriorityGrouping+0x44>)
 801139e:	68db      	ldr	r3, [r3, #12]
 80113a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80113a2:	68ba      	ldr	r2, [r7, #8]
 80113a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80113a8:	4013      	ands	r3, r2
 80113aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80113b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80113b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80113bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80113be:	4a04      	ldr	r2, [pc, #16]	; (80113d0 <__NVIC_SetPriorityGrouping+0x44>)
 80113c0:	68bb      	ldr	r3, [r7, #8]
 80113c2:	60d3      	str	r3, [r2, #12]
}
 80113c4:	bf00      	nop
 80113c6:	3714      	adds	r7, #20
 80113c8:	46bd      	mov	sp, r7
 80113ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ce:	4770      	bx	lr
 80113d0:	e000ed00 	.word	0xe000ed00

080113d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80113d4:	b480      	push	{r7}
 80113d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80113d8:	4b04      	ldr	r3, [pc, #16]	; (80113ec <__NVIC_GetPriorityGrouping+0x18>)
 80113da:	68db      	ldr	r3, [r3, #12]
 80113dc:	0a1b      	lsrs	r3, r3, #8
 80113de:	f003 0307 	and.w	r3, r3, #7
}
 80113e2:	4618      	mov	r0, r3
 80113e4:	46bd      	mov	sp, r7
 80113e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ea:	4770      	bx	lr
 80113ec:	e000ed00 	.word	0xe000ed00

080113f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80113f0:	b480      	push	{r7}
 80113f2:	b083      	sub	sp, #12
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	4603      	mov	r3, r0
 80113f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80113fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	db0b      	blt.n	801141a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011402:	79fb      	ldrb	r3, [r7, #7]
 8011404:	f003 021f 	and.w	r2, r3, #31
 8011408:	4907      	ldr	r1, [pc, #28]	; (8011428 <__NVIC_EnableIRQ+0x38>)
 801140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801140e:	095b      	lsrs	r3, r3, #5
 8011410:	2001      	movs	r0, #1
 8011412:	fa00 f202 	lsl.w	r2, r0, r2
 8011416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801141a:	bf00      	nop
 801141c:	370c      	adds	r7, #12
 801141e:	46bd      	mov	sp, r7
 8011420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011424:	4770      	bx	lr
 8011426:	bf00      	nop
 8011428:	e000e100 	.word	0xe000e100

0801142c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801142c:	b480      	push	{r7}
 801142e:	b083      	sub	sp, #12
 8011430:	af00      	add	r7, sp, #0
 8011432:	4603      	mov	r3, r0
 8011434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801143a:	2b00      	cmp	r3, #0
 801143c:	db12      	blt.n	8011464 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801143e:	79fb      	ldrb	r3, [r7, #7]
 8011440:	f003 021f 	and.w	r2, r3, #31
 8011444:	490a      	ldr	r1, [pc, #40]	; (8011470 <__NVIC_DisableIRQ+0x44>)
 8011446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801144a:	095b      	lsrs	r3, r3, #5
 801144c:	2001      	movs	r0, #1
 801144e:	fa00 f202 	lsl.w	r2, r0, r2
 8011452:	3320      	adds	r3, #32
 8011454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8011458:	f3bf 8f4f 	dsb	sy
}
 801145c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801145e:	f3bf 8f6f 	isb	sy
}
 8011462:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8011464:	bf00      	nop
 8011466:	370c      	adds	r7, #12
 8011468:	46bd      	mov	sp, r7
 801146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146e:	4770      	bx	lr
 8011470:	e000e100 	.word	0xe000e100

08011474 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8011474:	b480      	push	{r7}
 8011476:	b083      	sub	sp, #12
 8011478:	af00      	add	r7, sp, #0
 801147a:	4603      	mov	r3, r0
 801147c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011482:	2b00      	cmp	r3, #0
 8011484:	db0c      	blt.n	80114a0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011486:	79fb      	ldrb	r3, [r7, #7]
 8011488:	f003 021f 	and.w	r2, r3, #31
 801148c:	4907      	ldr	r1, [pc, #28]	; (80114ac <__NVIC_ClearPendingIRQ+0x38>)
 801148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011492:	095b      	lsrs	r3, r3, #5
 8011494:	2001      	movs	r0, #1
 8011496:	fa00 f202 	lsl.w	r2, r0, r2
 801149a:	3360      	adds	r3, #96	; 0x60
 801149c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80114a0:	bf00      	nop
 80114a2:	370c      	adds	r7, #12
 80114a4:	46bd      	mov	sp, r7
 80114a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114aa:	4770      	bx	lr
 80114ac:	e000e100 	.word	0xe000e100

080114b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80114b0:	b480      	push	{r7}
 80114b2:	b083      	sub	sp, #12
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	4603      	mov	r3, r0
 80114b8:	6039      	str	r1, [r7, #0]
 80114ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80114bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	db0a      	blt.n	80114da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80114c4:	683b      	ldr	r3, [r7, #0]
 80114c6:	b2da      	uxtb	r2, r3
 80114c8:	490c      	ldr	r1, [pc, #48]	; (80114fc <__NVIC_SetPriority+0x4c>)
 80114ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80114ce:	0112      	lsls	r2, r2, #4
 80114d0:	b2d2      	uxtb	r2, r2
 80114d2:	440b      	add	r3, r1
 80114d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80114d8:	e00a      	b.n	80114f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80114da:	683b      	ldr	r3, [r7, #0]
 80114dc:	b2da      	uxtb	r2, r3
 80114de:	4908      	ldr	r1, [pc, #32]	; (8011500 <__NVIC_SetPriority+0x50>)
 80114e0:	79fb      	ldrb	r3, [r7, #7]
 80114e2:	f003 030f 	and.w	r3, r3, #15
 80114e6:	3b04      	subs	r3, #4
 80114e8:	0112      	lsls	r2, r2, #4
 80114ea:	b2d2      	uxtb	r2, r2
 80114ec:	440b      	add	r3, r1
 80114ee:	761a      	strb	r2, [r3, #24]
}
 80114f0:	bf00      	nop
 80114f2:	370c      	adds	r7, #12
 80114f4:	46bd      	mov	sp, r7
 80114f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fa:	4770      	bx	lr
 80114fc:	e000e100 	.word	0xe000e100
 8011500:	e000ed00 	.word	0xe000ed00

08011504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011504:	b480      	push	{r7}
 8011506:	b089      	sub	sp, #36	; 0x24
 8011508:	af00      	add	r7, sp, #0
 801150a:	60f8      	str	r0, [r7, #12]
 801150c:	60b9      	str	r1, [r7, #8]
 801150e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	f003 0307 	and.w	r3, r3, #7
 8011516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011518:	69fb      	ldr	r3, [r7, #28]
 801151a:	f1c3 0307 	rsb	r3, r3, #7
 801151e:	2b04      	cmp	r3, #4
 8011520:	bf28      	it	cs
 8011522:	2304      	movcs	r3, #4
 8011524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011526:	69fb      	ldr	r3, [r7, #28]
 8011528:	3304      	adds	r3, #4
 801152a:	2b06      	cmp	r3, #6
 801152c:	d902      	bls.n	8011534 <NVIC_EncodePriority+0x30>
 801152e:	69fb      	ldr	r3, [r7, #28]
 8011530:	3b03      	subs	r3, #3
 8011532:	e000      	b.n	8011536 <NVIC_EncodePriority+0x32>
 8011534:	2300      	movs	r3, #0
 8011536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801153c:	69bb      	ldr	r3, [r7, #24]
 801153e:	fa02 f303 	lsl.w	r3, r2, r3
 8011542:	43da      	mvns	r2, r3
 8011544:	68bb      	ldr	r3, [r7, #8]
 8011546:	401a      	ands	r2, r3
 8011548:	697b      	ldr	r3, [r7, #20]
 801154a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801154c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011550:	697b      	ldr	r3, [r7, #20]
 8011552:	fa01 f303 	lsl.w	r3, r1, r3
 8011556:	43d9      	mvns	r1, r3
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801155c:	4313      	orrs	r3, r2
         );
}
 801155e:	4618      	mov	r0, r3
 8011560:	3724      	adds	r7, #36	; 0x24
 8011562:	46bd      	mov	sp, r7
 8011564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011568:	4770      	bx	lr

0801156a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801156a:	b580      	push	{r7, lr}
 801156c:	b082      	sub	sp, #8
 801156e:	af00      	add	r7, sp, #0
 8011570:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011572:	6878      	ldr	r0, [r7, #4]
 8011574:	f7ff ff0a 	bl	801138c <__NVIC_SetPriorityGrouping>
}
 8011578:	bf00      	nop
 801157a:	3708      	adds	r7, #8
 801157c:	46bd      	mov	sp, r7
 801157e:	bd80      	pop	{r7, pc}

08011580 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011580:	b580      	push	{r7, lr}
 8011582:	b086      	sub	sp, #24
 8011584:	af00      	add	r7, sp, #0
 8011586:	4603      	mov	r3, r0
 8011588:	60b9      	str	r1, [r7, #8]
 801158a:	607a      	str	r2, [r7, #4]
 801158c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801158e:	2300      	movs	r3, #0
 8011590:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8011592:	f7ff ff1f 	bl	80113d4 <__NVIC_GetPriorityGrouping>
 8011596:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011598:	687a      	ldr	r2, [r7, #4]
 801159a:	68b9      	ldr	r1, [r7, #8]
 801159c:	6978      	ldr	r0, [r7, #20]
 801159e:	f7ff ffb1 	bl	8011504 <NVIC_EncodePriority>
 80115a2:	4602      	mov	r2, r0
 80115a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80115a8:	4611      	mov	r1, r2
 80115aa:	4618      	mov	r0, r3
 80115ac:	f7ff ff80 	bl	80114b0 <__NVIC_SetPriority>
}
 80115b0:	bf00      	nop
 80115b2:	3718      	adds	r7, #24
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}

080115b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b082      	sub	sp, #8
 80115bc:	af00      	add	r7, sp, #0
 80115be:	4603      	mov	r3, r0
 80115c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80115c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80115c6:	4618      	mov	r0, r3
 80115c8:	f7ff ff12 	bl	80113f0 <__NVIC_EnableIRQ>
}
 80115cc:	bf00      	nop
 80115ce:	3708      	adds	r7, #8
 80115d0:	46bd      	mov	sp, r7
 80115d2:	bd80      	pop	{r7, pc}

080115d4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b082      	sub	sp, #8
 80115d8:	af00      	add	r7, sp, #0
 80115da:	4603      	mov	r3, r0
 80115dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80115de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80115e2:	4618      	mov	r0, r3
 80115e4:	f7ff ff22 	bl	801142c <__NVIC_DisableIRQ>
}
 80115e8:	bf00      	nop
 80115ea:	3708      	adds	r7, #8
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}

080115f0 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b082      	sub	sp, #8
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	4603      	mov	r3, r0
 80115f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80115fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80115fe:	4618      	mov	r0, r3
 8011600:	f7ff ff38 	bl	8011474 <__NVIC_ClearPendingIRQ>
}
 8011604:	bf00      	nop
 8011606:	3708      	adds	r7, #8
 8011608:	46bd      	mov	sp, r7
 801160a:	bd80      	pop	{r7, pc}

0801160c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b086      	sub	sp, #24
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8011614:	2300      	movs	r3, #0
 8011616:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8011618:	f7ff f81e 	bl	8010658 <HAL_GetTick>
 801161c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d101      	bne.n	8011628 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8011624:	2301      	movs	r3, #1
 8011626:	e099      	b.n	801175c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	2200      	movs	r2, #0
 801162c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	2202      	movs	r2, #2
 8011634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	681a      	ldr	r2, [r3, #0]
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	f022 0201 	bic.w	r2, r2, #1
 8011646:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011648:	e00f      	b.n	801166a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801164a:	f7ff f805 	bl	8010658 <HAL_GetTick>
 801164e:	4602      	mov	r2, r0
 8011650:	693b      	ldr	r3, [r7, #16]
 8011652:	1ad3      	subs	r3, r2, r3
 8011654:	2b05      	cmp	r3, #5
 8011656:	d908      	bls.n	801166a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	2220      	movs	r2, #32
 801165c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	2203      	movs	r2, #3
 8011662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8011666:	2303      	movs	r3, #3
 8011668:	e078      	b.n	801175c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	f003 0301 	and.w	r3, r3, #1
 8011674:	2b00      	cmp	r3, #0
 8011676:	d1e8      	bne.n	801164a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8011680:	697a      	ldr	r2, [r7, #20]
 8011682:	4b38      	ldr	r3, [pc, #224]	; (8011764 <HAL_DMA_Init+0x158>)
 8011684:	4013      	ands	r3, r2
 8011686:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	685a      	ldr	r2, [r3, #4]
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	689b      	ldr	r3, [r3, #8]
 8011690:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011696:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	691b      	ldr	r3, [r3, #16]
 801169c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80116a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	699b      	ldr	r3, [r3, #24]
 80116a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80116ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	6a1b      	ldr	r3, [r3, #32]
 80116b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80116b6:	697a      	ldr	r2, [r7, #20]
 80116b8:	4313      	orrs	r3, r2
 80116ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116c0:	2b04      	cmp	r3, #4
 80116c2:	d107      	bne.n	80116d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116cc:	4313      	orrs	r3, r2
 80116ce:	697a      	ldr	r2, [r7, #20]
 80116d0:	4313      	orrs	r3, r2
 80116d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	697a      	ldr	r2, [r7, #20]
 80116da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	695b      	ldr	r3, [r3, #20]
 80116e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80116e4:	697b      	ldr	r3, [r7, #20]
 80116e6:	f023 0307 	bic.w	r3, r3, #7
 80116ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116f0:	697a      	ldr	r2, [r7, #20]
 80116f2:	4313      	orrs	r3, r2
 80116f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116fa:	2b04      	cmp	r3, #4
 80116fc:	d117      	bne.n	801172e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011702:	697a      	ldr	r2, [r7, #20]
 8011704:	4313      	orrs	r3, r2
 8011706:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801170c:	2b00      	cmp	r3, #0
 801170e:	d00e      	beq.n	801172e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8011710:	6878      	ldr	r0, [r7, #4]
 8011712:	f000 fb09 	bl	8011d28 <DMA_CheckFifoParam>
 8011716:	4603      	mov	r3, r0
 8011718:	2b00      	cmp	r3, #0
 801171a:	d008      	beq.n	801172e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	2240      	movs	r2, #64	; 0x40
 8011720:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	2201      	movs	r2, #1
 8011726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801172a:	2301      	movs	r3, #1
 801172c:	e016      	b.n	801175c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	697a      	ldr	r2, [r7, #20]
 8011734:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8011736:	6878      	ldr	r0, [r7, #4]
 8011738:	f000 fac0 	bl	8011cbc <DMA_CalcBaseAndBitshift>
 801173c:	4603      	mov	r3, r0
 801173e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011744:	223f      	movs	r2, #63	; 0x3f
 8011746:	409a      	lsls	r2, r3
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	2200      	movs	r2, #0
 8011750:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	2201      	movs	r2, #1
 8011756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801175a:	2300      	movs	r3, #0
}
 801175c:	4618      	mov	r0, r3
 801175e:	3718      	adds	r7, #24
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}
 8011764:	f010803f 	.word	0xf010803f

08011768 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b084      	sub	sp, #16
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d101      	bne.n	801177a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8011776:	2301      	movs	r3, #1
 8011778:	e050      	b.n	801181c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011780:	b2db      	uxtb	r3, r3
 8011782:	2b02      	cmp	r3, #2
 8011784:	d101      	bne.n	801178a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8011786:	2302      	movs	r3, #2
 8011788:	e048      	b.n	801181c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	681a      	ldr	r2, [r3, #0]
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	f022 0201 	bic.w	r2, r2, #1
 8011798:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	2200      	movs	r2, #0
 80117a0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	2200      	movs	r2, #0
 80117a8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	2200      	movs	r2, #0
 80117b0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	2200      	movs	r2, #0
 80117b8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	2200      	movs	r2, #0
 80117c0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	2221      	movs	r2, #33	; 0x21
 80117c8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80117ca:	6878      	ldr	r0, [r7, #4]
 80117cc:	f000 fa76 	bl	8011cbc <DMA_CalcBaseAndBitshift>
 80117d0:	4603      	mov	r3, r0
 80117d2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	2200      	movs	r2, #0
 80117d8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	2200      	movs	r2, #0
 80117de:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2200      	movs	r2, #0
 80117e4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	2200      	movs	r2, #0
 80117ea:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	2200      	movs	r2, #0
 80117f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	2200      	movs	r2, #0
 80117f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80117fc:	223f      	movs	r2, #63	; 0x3f
 80117fe:	409a      	lsls	r2, r3
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2200      	movs	r2, #0
 8011808:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2200      	movs	r2, #0
 801180e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	2200      	movs	r2, #0
 8011816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 801181a:	2300      	movs	r3, #0
}
 801181c:	4618      	mov	r0, r3
 801181e:	3710      	adds	r7, #16
 8011820:	46bd      	mov	sp, r7
 8011822:	bd80      	pop	{r7, pc}

08011824 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b086      	sub	sp, #24
 8011828:	af00      	add	r7, sp, #0
 801182a:	60f8      	str	r0, [r7, #12]
 801182c:	60b9      	str	r1, [r7, #8]
 801182e:	607a      	str	r2, [r7, #4]
 8011830:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011832:	2300      	movs	r3, #0
 8011834:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801183a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011842:	2b01      	cmp	r3, #1
 8011844:	d101      	bne.n	801184a <HAL_DMA_Start_IT+0x26>
 8011846:	2302      	movs	r3, #2
 8011848:	e040      	b.n	80118cc <HAL_DMA_Start_IT+0xa8>
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	2201      	movs	r2, #1
 801184e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  

  if(HAL_DMA_STATE_READY == hdma->State)
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011858:	b2db      	uxtb	r3, r3
 801185a:	2b01      	cmp	r3, #1
 801185c:	d12f      	bne.n	80118be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	2202      	movs	r2, #2
 8011862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	2200      	movs	r2, #0
 801186a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	687a      	ldr	r2, [r7, #4]
 8011870:	68b9      	ldr	r1, [r7, #8]
 8011872:	68f8      	ldr	r0, [r7, #12]
 8011874:	f000 f9f4 	bl	8011c60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801187c:	223f      	movs	r2, #63	; 0x3f
 801187e:	409a      	lsls	r2, r3
 8011880:	693b      	ldr	r3, [r7, #16]
 8011882:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	681a      	ldr	r2, [r3, #0]
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	f042 0216 	orr.w	r2, r2, #22
 8011892:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011898:	2b00      	cmp	r3, #0
 801189a:	d007      	beq.n	80118ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	681a      	ldr	r2, [r3, #0]
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	f042 0208 	orr.w	r2, r2, #8
 80118aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	681a      	ldr	r2, [r3, #0]
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	f042 0201 	orr.w	r2, r2, #1
 80118ba:	601a      	str	r2, [r3, #0]
 80118bc:	e005      	b.n	80118ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	2200      	movs	r2, #0
 80118c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 80118c6:	2302      	movs	r3, #2
 80118c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80118ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80118cc:	4618      	mov	r0, r3
 80118ce:	3718      	adds	r7, #24
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bd80      	pop	{r7, pc}

080118d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80118d4:	b480      	push	{r7}
 80118d6:	b083      	sub	sp, #12
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80118e2:	b2db      	uxtb	r3, r3
 80118e4:	2b02      	cmp	r3, #2
 80118e6:	d004      	beq.n	80118f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2280      	movs	r2, #128	; 0x80
 80118ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80118ee:	2301      	movs	r3, #1
 80118f0:	e00c      	b.n	801190c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	2205      	movs	r2, #5
 80118f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	681a      	ldr	r2, [r3, #0]
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	f022 0201 	bic.w	r2, r2, #1
 8011908:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801190a:	2300      	movs	r3, #0
}
 801190c:	4618      	mov	r0, r3
 801190e:	370c      	adds	r7, #12
 8011910:	46bd      	mov	sp, r7
 8011912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011916:	4770      	bx	lr

08011918 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b086      	sub	sp, #24
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8011920:	2300      	movs	r3, #0
 8011922:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8011924:	4b92      	ldr	r3, [pc, #584]	; (8011b70 <HAL_DMA_IRQHandler+0x258>)
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	4a92      	ldr	r2, [pc, #584]	; (8011b74 <HAL_DMA_IRQHandler+0x25c>)
 801192a:	fba2 2303 	umull	r2, r3, r2, r3
 801192e:	0a9b      	lsrs	r3, r3, #10
 8011930:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011936:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8011938:	693b      	ldr	r3, [r7, #16]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011942:	2208      	movs	r2, #8
 8011944:	409a      	lsls	r2, r3
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	4013      	ands	r3, r2
 801194a:	2b00      	cmp	r3, #0
 801194c:	d01a      	beq.n	8011984 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	f003 0304 	and.w	r3, r3, #4
 8011958:	2b00      	cmp	r3, #0
 801195a:	d013      	beq.n	8011984 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	681a      	ldr	r2, [r3, #0]
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	f022 0204 	bic.w	r2, r2, #4
 801196a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011970:	2208      	movs	r2, #8
 8011972:	409a      	lsls	r2, r3
 8011974:	693b      	ldr	r3, [r7, #16]
 8011976:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801197c:	f043 0201 	orr.w	r2, r3, #1
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011988:	2201      	movs	r2, #1
 801198a:	409a      	lsls	r2, r3
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	4013      	ands	r3, r2
 8011990:	2b00      	cmp	r3, #0
 8011992:	d012      	beq.n	80119ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	695b      	ldr	r3, [r3, #20]
 801199a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d00b      	beq.n	80119ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80119a6:	2201      	movs	r2, #1
 80119a8:	409a      	lsls	r2, r3
 80119aa:	693b      	ldr	r3, [r7, #16]
 80119ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119b2:	f043 0202 	orr.w	r2, r3, #2
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80119be:	2204      	movs	r2, #4
 80119c0:	409a      	lsls	r2, r3
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	4013      	ands	r3, r2
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d012      	beq.n	80119f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	f003 0302 	and.w	r3, r3, #2
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d00b      	beq.n	80119f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80119dc:	2204      	movs	r2, #4
 80119de:	409a      	lsls	r2, r3
 80119e0:	693b      	ldr	r3, [r7, #16]
 80119e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119e8:	f043 0204 	orr.w	r2, r3, #4
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80119f4:	2210      	movs	r2, #16
 80119f6:	409a      	lsls	r2, r3
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	4013      	ands	r3, r2
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d043      	beq.n	8011a88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	f003 0308 	and.w	r3, r3, #8
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d03c      	beq.n	8011a88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011a12:	2210      	movs	r2, #16
 8011a14:	409a      	lsls	r2, r3
 8011a16:	693b      	ldr	r3, [r7, #16]
 8011a18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d018      	beq.n	8011a5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d108      	bne.n	8011a48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d024      	beq.n	8011a88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	4798      	blx	r3
 8011a46:	e01f      	b.n	8011a88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d01b      	beq.n	8011a88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011a54:	6878      	ldr	r0, [r7, #4]
 8011a56:	4798      	blx	r3
 8011a58:	e016      	b.n	8011a88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d107      	bne.n	8011a78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	681a      	ldr	r2, [r3, #0]
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	f022 0208 	bic.w	r2, r2, #8
 8011a76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d003      	beq.n	8011a88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a84:	6878      	ldr	r0, [r7, #4]
 8011a86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011a8c:	2220      	movs	r2, #32
 8011a8e:	409a      	lsls	r2, r3
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	4013      	ands	r3, r2
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	f000 808e 	beq.w	8011bb6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	f003 0310 	and.w	r3, r3, #16
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	f000 8086 	beq.w	8011bb6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011aae:	2220      	movs	r2, #32
 8011ab0:	409a      	lsls	r2, r3
 8011ab2:	693b      	ldr	r3, [r7, #16]
 8011ab4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011abc:	b2db      	uxtb	r3, r3
 8011abe:	2b05      	cmp	r3, #5
 8011ac0:	d136      	bne.n	8011b30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	681a      	ldr	r2, [r3, #0]
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	f022 0216 	bic.w	r2, r2, #22
 8011ad0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	695a      	ldr	r2, [r3, #20]
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011ae0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d103      	bne.n	8011af2 <HAL_DMA_IRQHandler+0x1da>
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d007      	beq.n	8011b02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	681a      	ldr	r2, [r3, #0]
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	f022 0208 	bic.w	r2, r2, #8
 8011b00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011b06:	223f      	movs	r2, #63	; 0x3f
 8011b08:	409a      	lsls	r2, r3
 8011b0a:	693b      	ldr	r3, [r7, #16]
 8011b0c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2200      	movs	r2, #0
 8011b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	2201      	movs	r2, #1
 8011b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d07d      	beq.n	8011c22 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	4798      	blx	r3
        }
        return;
 8011b2e:	e078      	b.n	8011c22 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d01c      	beq.n	8011b78 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d108      	bne.n	8011b5e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d030      	beq.n	8011bb6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	4798      	blx	r3
 8011b5c:	e02b      	b.n	8011bb6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d027      	beq.n	8011bb6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b6a:	6878      	ldr	r0, [r7, #4]
 8011b6c:	4798      	blx	r3
 8011b6e:	e022      	b.n	8011bb6 <HAL_DMA_IRQHandler+0x29e>
 8011b70:	20000054 	.word	0x20000054
 8011b74:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d10f      	bne.n	8011ba6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	681a      	ldr	r2, [r3, #0]
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	f022 0210 	bic.w	r2, r2, #16
 8011b94:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	2200      	movs	r2, #0
 8011b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	2201      	movs	r2, #1
 8011ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d003      	beq.n	8011bb6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011bb2:	6878      	ldr	r0, [r7, #4]
 8011bb4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d032      	beq.n	8011c24 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bc2:	f003 0301 	and.w	r3, r3, #1
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d022      	beq.n	8011c10 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	2205      	movs	r2, #5
 8011bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	681a      	ldr	r2, [r3, #0]
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	f022 0201 	bic.w	r2, r2, #1
 8011be0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8011be2:	68bb      	ldr	r3, [r7, #8]
 8011be4:	3301      	adds	r3, #1
 8011be6:	60bb      	str	r3, [r7, #8]
 8011be8:	697a      	ldr	r2, [r7, #20]
 8011bea:	429a      	cmp	r2, r3
 8011bec:	d307      	bcc.n	8011bfe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	f003 0301 	and.w	r3, r3, #1
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d1f2      	bne.n	8011be2 <HAL_DMA_IRQHandler+0x2ca>
 8011bfc:	e000      	b.n	8011c00 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8011bfe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	2200      	movs	r2, #0
 8011c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	2201      	movs	r2, #1
 8011c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d005      	beq.n	8011c24 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011c1c:	6878      	ldr	r0, [r7, #4]
 8011c1e:	4798      	blx	r3
 8011c20:	e000      	b.n	8011c24 <HAL_DMA_IRQHandler+0x30c>
        return;
 8011c22:	bf00      	nop
    }
  }
}
 8011c24:	3718      	adds	r7, #24
 8011c26:	46bd      	mov	sp, r7
 8011c28:	bd80      	pop	{r7, pc}
 8011c2a:	bf00      	nop

08011c2c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8011c2c:	b480      	push	{r7}
 8011c2e:	b083      	sub	sp, #12
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011c3a:	b2db      	uxtb	r3, r3
}
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	370c      	adds	r7, #12
 8011c40:	46bd      	mov	sp, r7
 8011c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c46:	4770      	bx	lr

08011c48 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8011c48:	b480      	push	{r7}
 8011c4a:	b083      	sub	sp, #12
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8011c54:	4618      	mov	r0, r3
 8011c56:	370c      	adds	r7, #12
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5e:	4770      	bx	lr

08011c60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011c60:	b480      	push	{r7}
 8011c62:	b085      	sub	sp, #20
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	60f8      	str	r0, [r7, #12]
 8011c68:	60b9      	str	r1, [r7, #8]
 8011c6a:	607a      	str	r2, [r7, #4]
 8011c6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	681a      	ldr	r2, [r3, #0]
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011c7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	683a      	ldr	r2, [r7, #0]
 8011c84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	689b      	ldr	r3, [r3, #8]
 8011c8a:	2b40      	cmp	r3, #64	; 0x40
 8011c8c:	d108      	bne.n	8011ca0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	687a      	ldr	r2, [r7, #4]
 8011c94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	68ba      	ldr	r2, [r7, #8]
 8011c9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8011c9e:	e007      	b.n	8011cb0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	68ba      	ldr	r2, [r7, #8]
 8011ca6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	687a      	ldr	r2, [r7, #4]
 8011cae:	60da      	str	r2, [r3, #12]
}
 8011cb0:	bf00      	nop
 8011cb2:	3714      	adds	r7, #20
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cba:	4770      	bx	lr

08011cbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8011cbc:	b480      	push	{r7}
 8011cbe:	b085      	sub	sp, #20
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	b2db      	uxtb	r3, r3
 8011cca:	3b10      	subs	r3, #16
 8011ccc:	4a14      	ldr	r2, [pc, #80]	; (8011d20 <DMA_CalcBaseAndBitshift+0x64>)
 8011cce:	fba2 2303 	umull	r2, r3, r2, r3
 8011cd2:	091b      	lsrs	r3, r3, #4
 8011cd4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8011cd6:	4a13      	ldr	r2, [pc, #76]	; (8011d24 <DMA_CalcBaseAndBitshift+0x68>)
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	4413      	add	r3, r2
 8011cdc:	781b      	ldrb	r3, [r3, #0]
 8011cde:	461a      	mov	r2, r3
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	2b03      	cmp	r3, #3
 8011ce8:	d909      	bls.n	8011cfe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8011cf2:	f023 0303 	bic.w	r3, r3, #3
 8011cf6:	1d1a      	adds	r2, r3, #4
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	659a      	str	r2, [r3, #88]	; 0x58
 8011cfc:	e007      	b.n	8011d0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8011d06:	f023 0303 	bic.w	r3, r3, #3
 8011d0a:	687a      	ldr	r2, [r7, #4]
 8011d0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8011d12:	4618      	mov	r0, r3
 8011d14:	3714      	adds	r7, #20
 8011d16:	46bd      	mov	sp, r7
 8011d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1c:	4770      	bx	lr
 8011d1e:	bf00      	nop
 8011d20:	aaaaaaab 	.word	0xaaaaaaab
 8011d24:	080202b8 	.word	0x080202b8

08011d28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8011d28:	b480      	push	{r7}
 8011d2a:	b085      	sub	sp, #20
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011d30:	2300      	movs	r3, #0
 8011d32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	699b      	ldr	r3, [r3, #24]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d11f      	bne.n	8011d82 <DMA_CheckFifoParam+0x5a>
 8011d42:	68bb      	ldr	r3, [r7, #8]
 8011d44:	2b03      	cmp	r3, #3
 8011d46:	d856      	bhi.n	8011df6 <DMA_CheckFifoParam+0xce>
 8011d48:	a201      	add	r2, pc, #4	; (adr r2, 8011d50 <DMA_CheckFifoParam+0x28>)
 8011d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d4e:	bf00      	nop
 8011d50:	08011d61 	.word	0x08011d61
 8011d54:	08011d73 	.word	0x08011d73
 8011d58:	08011d61 	.word	0x08011d61
 8011d5c:	08011df7 	.word	0x08011df7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d046      	beq.n	8011dfa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8011d6c:	2301      	movs	r3, #1
 8011d6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011d70:	e043      	b.n	8011dfa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8011d7a:	d140      	bne.n	8011dfe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8011d7c:	2301      	movs	r3, #1
 8011d7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011d80:	e03d      	b.n	8011dfe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	699b      	ldr	r3, [r3, #24]
 8011d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011d8a:	d121      	bne.n	8011dd0 <DMA_CheckFifoParam+0xa8>
 8011d8c:	68bb      	ldr	r3, [r7, #8]
 8011d8e:	2b03      	cmp	r3, #3
 8011d90:	d837      	bhi.n	8011e02 <DMA_CheckFifoParam+0xda>
 8011d92:	a201      	add	r2, pc, #4	; (adr r2, 8011d98 <DMA_CheckFifoParam+0x70>)
 8011d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d98:	08011da9 	.word	0x08011da9
 8011d9c:	08011daf 	.word	0x08011daf
 8011da0:	08011da9 	.word	0x08011da9
 8011da4:	08011dc1 	.word	0x08011dc1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8011da8:	2301      	movs	r3, #1
 8011daa:	73fb      	strb	r3, [r7, #15]
      break;
 8011dac:	e030      	b.n	8011e10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011db2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d025      	beq.n	8011e06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8011dba:	2301      	movs	r3, #1
 8011dbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011dbe:	e022      	b.n	8011e06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8011dc8:	d11f      	bne.n	8011e0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8011dca:	2301      	movs	r3, #1
 8011dcc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8011dce:	e01c      	b.n	8011e0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	2b02      	cmp	r3, #2
 8011dd4:	d903      	bls.n	8011dde <DMA_CheckFifoParam+0xb6>
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	2b03      	cmp	r3, #3
 8011dda:	d003      	beq.n	8011de4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8011ddc:	e018      	b.n	8011e10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8011dde:	2301      	movs	r3, #1
 8011de0:	73fb      	strb	r3, [r7, #15]
      break;
 8011de2:	e015      	b.n	8011e10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011de8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d00e      	beq.n	8011e0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8011df0:	2301      	movs	r3, #1
 8011df2:	73fb      	strb	r3, [r7, #15]
      break;
 8011df4:	e00b      	b.n	8011e0e <DMA_CheckFifoParam+0xe6>
      break;
 8011df6:	bf00      	nop
 8011df8:	e00a      	b.n	8011e10 <DMA_CheckFifoParam+0xe8>
      break;
 8011dfa:	bf00      	nop
 8011dfc:	e008      	b.n	8011e10 <DMA_CheckFifoParam+0xe8>
      break;
 8011dfe:	bf00      	nop
 8011e00:	e006      	b.n	8011e10 <DMA_CheckFifoParam+0xe8>
      break;
 8011e02:	bf00      	nop
 8011e04:	e004      	b.n	8011e10 <DMA_CheckFifoParam+0xe8>
      break;
 8011e06:	bf00      	nop
 8011e08:	e002      	b.n	8011e10 <DMA_CheckFifoParam+0xe8>
      break;   
 8011e0a:	bf00      	nop
 8011e0c:	e000      	b.n	8011e10 <DMA_CheckFifoParam+0xe8>
      break;
 8011e0e:	bf00      	nop
    }
  } 
  
  return status; 
 8011e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e12:	4618      	mov	r0, r3
 8011e14:	3714      	adds	r7, #20
 8011e16:	46bd      	mov	sp, r7
 8011e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1c:	4770      	bx	lr
 8011e1e:	bf00      	nop

08011e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011e20:	b480      	push	{r7}
 8011e22:	b089      	sub	sp, #36	; 0x24
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
 8011e28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8011e2e:	2300      	movs	r3, #0
 8011e30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8011e32:	2300      	movs	r3, #0
 8011e34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011e36:	2300      	movs	r3, #0
 8011e38:	61fb      	str	r3, [r7, #28]
 8011e3a:	e16b      	b.n	8012114 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011e3c:	2201      	movs	r2, #1
 8011e3e:	69fb      	ldr	r3, [r7, #28]
 8011e40:	fa02 f303 	lsl.w	r3, r2, r3
 8011e44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8011e46:	683b      	ldr	r3, [r7, #0]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	697a      	ldr	r2, [r7, #20]
 8011e4c:	4013      	ands	r3, r2
 8011e4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8011e50:	693a      	ldr	r2, [r7, #16]
 8011e52:	697b      	ldr	r3, [r7, #20]
 8011e54:	429a      	cmp	r2, r3
 8011e56:	f040 815a 	bne.w	801210e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	685b      	ldr	r3, [r3, #4]
 8011e5e:	2b01      	cmp	r3, #1
 8011e60:	d00b      	beq.n	8011e7a <HAL_GPIO_Init+0x5a>
 8011e62:	683b      	ldr	r3, [r7, #0]
 8011e64:	685b      	ldr	r3, [r3, #4]
 8011e66:	2b02      	cmp	r3, #2
 8011e68:	d007      	beq.n	8011e7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011e6a:	683b      	ldr	r3, [r7, #0]
 8011e6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011e6e:	2b11      	cmp	r3, #17
 8011e70:	d003      	beq.n	8011e7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011e72:	683b      	ldr	r3, [r7, #0]
 8011e74:	685b      	ldr	r3, [r3, #4]
 8011e76:	2b12      	cmp	r3, #18
 8011e78:	d130      	bne.n	8011edc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	689b      	ldr	r3, [r3, #8]
 8011e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8011e80:	69fb      	ldr	r3, [r7, #28]
 8011e82:	005b      	lsls	r3, r3, #1
 8011e84:	2203      	movs	r2, #3
 8011e86:	fa02 f303 	lsl.w	r3, r2, r3
 8011e8a:	43db      	mvns	r3, r3
 8011e8c:	69ba      	ldr	r2, [r7, #24]
 8011e8e:	4013      	ands	r3, r2
 8011e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	68da      	ldr	r2, [r3, #12]
 8011e96:	69fb      	ldr	r3, [r7, #28]
 8011e98:	005b      	lsls	r3, r3, #1
 8011e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8011e9e:	69ba      	ldr	r2, [r7, #24]
 8011ea0:	4313      	orrs	r3, r2
 8011ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	69ba      	ldr	r2, [r7, #24]
 8011ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	685b      	ldr	r3, [r3, #4]
 8011eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8011eb0:	2201      	movs	r2, #1
 8011eb2:	69fb      	ldr	r3, [r7, #28]
 8011eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8011eb8:	43db      	mvns	r3, r3
 8011eba:	69ba      	ldr	r2, [r7, #24]
 8011ebc:	4013      	ands	r3, r2
 8011ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	685b      	ldr	r3, [r3, #4]
 8011ec4:	091b      	lsrs	r3, r3, #4
 8011ec6:	f003 0201 	and.w	r2, r3, #1
 8011eca:	69fb      	ldr	r3, [r7, #28]
 8011ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8011ed0:	69ba      	ldr	r2, [r7, #24]
 8011ed2:	4313      	orrs	r3, r2
 8011ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	69ba      	ldr	r2, [r7, #24]
 8011eda:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	68db      	ldr	r3, [r3, #12]
 8011ee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8011ee2:	69fb      	ldr	r3, [r7, #28]
 8011ee4:	005b      	lsls	r3, r3, #1
 8011ee6:	2203      	movs	r2, #3
 8011ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8011eec:	43db      	mvns	r3, r3
 8011eee:	69ba      	ldr	r2, [r7, #24]
 8011ef0:	4013      	ands	r3, r2
 8011ef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	689a      	ldr	r2, [r3, #8]
 8011ef8:	69fb      	ldr	r3, [r7, #28]
 8011efa:	005b      	lsls	r3, r3, #1
 8011efc:	fa02 f303 	lsl.w	r3, r2, r3
 8011f00:	69ba      	ldr	r2, [r7, #24]
 8011f02:	4313      	orrs	r3, r2
 8011f04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	69ba      	ldr	r2, [r7, #24]
 8011f0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011f0c:	683b      	ldr	r3, [r7, #0]
 8011f0e:	685b      	ldr	r3, [r3, #4]
 8011f10:	2b02      	cmp	r3, #2
 8011f12:	d003      	beq.n	8011f1c <HAL_GPIO_Init+0xfc>
 8011f14:	683b      	ldr	r3, [r7, #0]
 8011f16:	685b      	ldr	r3, [r3, #4]
 8011f18:	2b12      	cmp	r3, #18
 8011f1a:	d123      	bne.n	8011f64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8011f1c:	69fb      	ldr	r3, [r7, #28]
 8011f1e:	08da      	lsrs	r2, r3, #3
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	3208      	adds	r2, #8
 8011f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8011f2a:	69fb      	ldr	r3, [r7, #28]
 8011f2c:	f003 0307 	and.w	r3, r3, #7
 8011f30:	009b      	lsls	r3, r3, #2
 8011f32:	220f      	movs	r2, #15
 8011f34:	fa02 f303 	lsl.w	r3, r2, r3
 8011f38:	43db      	mvns	r3, r3
 8011f3a:	69ba      	ldr	r2, [r7, #24]
 8011f3c:	4013      	ands	r3, r2
 8011f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	691a      	ldr	r2, [r3, #16]
 8011f44:	69fb      	ldr	r3, [r7, #28]
 8011f46:	f003 0307 	and.w	r3, r3, #7
 8011f4a:	009b      	lsls	r3, r3, #2
 8011f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8011f50:	69ba      	ldr	r2, [r7, #24]
 8011f52:	4313      	orrs	r3, r2
 8011f54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8011f56:	69fb      	ldr	r3, [r7, #28]
 8011f58:	08da      	lsrs	r2, r3, #3
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	3208      	adds	r2, #8
 8011f5e:	69b9      	ldr	r1, [r7, #24]
 8011f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8011f6a:	69fb      	ldr	r3, [r7, #28]
 8011f6c:	005b      	lsls	r3, r3, #1
 8011f6e:	2203      	movs	r2, #3
 8011f70:	fa02 f303 	lsl.w	r3, r2, r3
 8011f74:	43db      	mvns	r3, r3
 8011f76:	69ba      	ldr	r2, [r7, #24]
 8011f78:	4013      	ands	r3, r2
 8011f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	685b      	ldr	r3, [r3, #4]
 8011f80:	f003 0203 	and.w	r2, r3, #3
 8011f84:	69fb      	ldr	r3, [r7, #28]
 8011f86:	005b      	lsls	r3, r3, #1
 8011f88:	fa02 f303 	lsl.w	r3, r2, r3
 8011f8c:	69ba      	ldr	r2, [r7, #24]
 8011f8e:	4313      	orrs	r3, r2
 8011f90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	69ba      	ldr	r2, [r7, #24]
 8011f96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	685b      	ldr	r3, [r3, #4]
 8011f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	f000 80b4 	beq.w	801210e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	60fb      	str	r3, [r7, #12]
 8011faa:	4b60      	ldr	r3, [pc, #384]	; (801212c <HAL_GPIO_Init+0x30c>)
 8011fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fae:	4a5f      	ldr	r2, [pc, #380]	; (801212c <HAL_GPIO_Init+0x30c>)
 8011fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8011fb6:	4b5d      	ldr	r3, [pc, #372]	; (801212c <HAL_GPIO_Init+0x30c>)
 8011fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011fbe:	60fb      	str	r3, [r7, #12]
 8011fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8011fc2:	4a5b      	ldr	r2, [pc, #364]	; (8012130 <HAL_GPIO_Init+0x310>)
 8011fc4:	69fb      	ldr	r3, [r7, #28]
 8011fc6:	089b      	lsrs	r3, r3, #2
 8011fc8:	3302      	adds	r3, #2
 8011fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8011fd0:	69fb      	ldr	r3, [r7, #28]
 8011fd2:	f003 0303 	and.w	r3, r3, #3
 8011fd6:	009b      	lsls	r3, r3, #2
 8011fd8:	220f      	movs	r2, #15
 8011fda:	fa02 f303 	lsl.w	r3, r2, r3
 8011fde:	43db      	mvns	r3, r3
 8011fe0:	69ba      	ldr	r2, [r7, #24]
 8011fe2:	4013      	ands	r3, r2
 8011fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	4a52      	ldr	r2, [pc, #328]	; (8012134 <HAL_GPIO_Init+0x314>)
 8011fea:	4293      	cmp	r3, r2
 8011fec:	d02b      	beq.n	8012046 <HAL_GPIO_Init+0x226>
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	4a51      	ldr	r2, [pc, #324]	; (8012138 <HAL_GPIO_Init+0x318>)
 8011ff2:	4293      	cmp	r3, r2
 8011ff4:	d025      	beq.n	8012042 <HAL_GPIO_Init+0x222>
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	4a50      	ldr	r2, [pc, #320]	; (801213c <HAL_GPIO_Init+0x31c>)
 8011ffa:	4293      	cmp	r3, r2
 8011ffc:	d01f      	beq.n	801203e <HAL_GPIO_Init+0x21e>
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	4a4f      	ldr	r2, [pc, #316]	; (8012140 <HAL_GPIO_Init+0x320>)
 8012002:	4293      	cmp	r3, r2
 8012004:	d019      	beq.n	801203a <HAL_GPIO_Init+0x21a>
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	4a4e      	ldr	r2, [pc, #312]	; (8012144 <HAL_GPIO_Init+0x324>)
 801200a:	4293      	cmp	r3, r2
 801200c:	d013      	beq.n	8012036 <HAL_GPIO_Init+0x216>
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	4a4d      	ldr	r2, [pc, #308]	; (8012148 <HAL_GPIO_Init+0x328>)
 8012012:	4293      	cmp	r3, r2
 8012014:	d00d      	beq.n	8012032 <HAL_GPIO_Init+0x212>
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	4a4c      	ldr	r2, [pc, #304]	; (801214c <HAL_GPIO_Init+0x32c>)
 801201a:	4293      	cmp	r3, r2
 801201c:	d007      	beq.n	801202e <HAL_GPIO_Init+0x20e>
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	4a4b      	ldr	r2, [pc, #300]	; (8012150 <HAL_GPIO_Init+0x330>)
 8012022:	4293      	cmp	r3, r2
 8012024:	d101      	bne.n	801202a <HAL_GPIO_Init+0x20a>
 8012026:	2307      	movs	r3, #7
 8012028:	e00e      	b.n	8012048 <HAL_GPIO_Init+0x228>
 801202a:	2308      	movs	r3, #8
 801202c:	e00c      	b.n	8012048 <HAL_GPIO_Init+0x228>
 801202e:	2306      	movs	r3, #6
 8012030:	e00a      	b.n	8012048 <HAL_GPIO_Init+0x228>
 8012032:	2305      	movs	r3, #5
 8012034:	e008      	b.n	8012048 <HAL_GPIO_Init+0x228>
 8012036:	2304      	movs	r3, #4
 8012038:	e006      	b.n	8012048 <HAL_GPIO_Init+0x228>
 801203a:	2303      	movs	r3, #3
 801203c:	e004      	b.n	8012048 <HAL_GPIO_Init+0x228>
 801203e:	2302      	movs	r3, #2
 8012040:	e002      	b.n	8012048 <HAL_GPIO_Init+0x228>
 8012042:	2301      	movs	r3, #1
 8012044:	e000      	b.n	8012048 <HAL_GPIO_Init+0x228>
 8012046:	2300      	movs	r3, #0
 8012048:	69fa      	ldr	r2, [r7, #28]
 801204a:	f002 0203 	and.w	r2, r2, #3
 801204e:	0092      	lsls	r2, r2, #2
 8012050:	4093      	lsls	r3, r2
 8012052:	69ba      	ldr	r2, [r7, #24]
 8012054:	4313      	orrs	r3, r2
 8012056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8012058:	4935      	ldr	r1, [pc, #212]	; (8012130 <HAL_GPIO_Init+0x310>)
 801205a:	69fb      	ldr	r3, [r7, #28]
 801205c:	089b      	lsrs	r3, r3, #2
 801205e:	3302      	adds	r3, #2
 8012060:	69ba      	ldr	r2, [r7, #24]
 8012062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8012066:	4b3b      	ldr	r3, [pc, #236]	; (8012154 <HAL_GPIO_Init+0x334>)
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801206c:	693b      	ldr	r3, [r7, #16]
 801206e:	43db      	mvns	r3, r3
 8012070:	69ba      	ldr	r2, [r7, #24]
 8012072:	4013      	ands	r3, r2
 8012074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8012076:	683b      	ldr	r3, [r7, #0]
 8012078:	685b      	ldr	r3, [r3, #4]
 801207a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801207e:	2b00      	cmp	r3, #0
 8012080:	d003      	beq.n	801208a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8012082:	69ba      	ldr	r2, [r7, #24]
 8012084:	693b      	ldr	r3, [r7, #16]
 8012086:	4313      	orrs	r3, r2
 8012088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801208a:	4a32      	ldr	r2, [pc, #200]	; (8012154 <HAL_GPIO_Init+0x334>)
 801208c:	69bb      	ldr	r3, [r7, #24]
 801208e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8012090:	4b30      	ldr	r3, [pc, #192]	; (8012154 <HAL_GPIO_Init+0x334>)
 8012092:	685b      	ldr	r3, [r3, #4]
 8012094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012096:	693b      	ldr	r3, [r7, #16]
 8012098:	43db      	mvns	r3, r3
 801209a:	69ba      	ldr	r2, [r7, #24]
 801209c:	4013      	ands	r3, r2
 801209e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80120a0:	683b      	ldr	r3, [r7, #0]
 80120a2:	685b      	ldr	r3, [r3, #4]
 80120a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d003      	beq.n	80120b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80120ac:	69ba      	ldr	r2, [r7, #24]
 80120ae:	693b      	ldr	r3, [r7, #16]
 80120b0:	4313      	orrs	r3, r2
 80120b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80120b4:	4a27      	ldr	r2, [pc, #156]	; (8012154 <HAL_GPIO_Init+0x334>)
 80120b6:	69bb      	ldr	r3, [r7, #24]
 80120b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80120ba:	4b26      	ldr	r3, [pc, #152]	; (8012154 <HAL_GPIO_Init+0x334>)
 80120bc:	689b      	ldr	r3, [r3, #8]
 80120be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80120c0:	693b      	ldr	r3, [r7, #16]
 80120c2:	43db      	mvns	r3, r3
 80120c4:	69ba      	ldr	r2, [r7, #24]
 80120c6:	4013      	ands	r3, r2
 80120c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80120ca:	683b      	ldr	r3, [r7, #0]
 80120cc:	685b      	ldr	r3, [r3, #4]
 80120ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d003      	beq.n	80120de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80120d6:	69ba      	ldr	r2, [r7, #24]
 80120d8:	693b      	ldr	r3, [r7, #16]
 80120da:	4313      	orrs	r3, r2
 80120dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80120de:	4a1d      	ldr	r2, [pc, #116]	; (8012154 <HAL_GPIO_Init+0x334>)
 80120e0:	69bb      	ldr	r3, [r7, #24]
 80120e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80120e4:	4b1b      	ldr	r3, [pc, #108]	; (8012154 <HAL_GPIO_Init+0x334>)
 80120e6:	68db      	ldr	r3, [r3, #12]
 80120e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80120ea:	693b      	ldr	r3, [r7, #16]
 80120ec:	43db      	mvns	r3, r3
 80120ee:	69ba      	ldr	r2, [r7, #24]
 80120f0:	4013      	ands	r3, r2
 80120f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	685b      	ldr	r3, [r3, #4]
 80120f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d003      	beq.n	8012108 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8012100:	69ba      	ldr	r2, [r7, #24]
 8012102:	693b      	ldr	r3, [r7, #16]
 8012104:	4313      	orrs	r3, r2
 8012106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8012108:	4a12      	ldr	r2, [pc, #72]	; (8012154 <HAL_GPIO_Init+0x334>)
 801210a:	69bb      	ldr	r3, [r7, #24]
 801210c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801210e:	69fb      	ldr	r3, [r7, #28]
 8012110:	3301      	adds	r3, #1
 8012112:	61fb      	str	r3, [r7, #28]
 8012114:	69fb      	ldr	r3, [r7, #28]
 8012116:	2b0f      	cmp	r3, #15
 8012118:	f67f ae90 	bls.w	8011e3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801211c:	bf00      	nop
 801211e:	bf00      	nop
 8012120:	3724      	adds	r7, #36	; 0x24
 8012122:	46bd      	mov	sp, r7
 8012124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012128:	4770      	bx	lr
 801212a:	bf00      	nop
 801212c:	40023800 	.word	0x40023800
 8012130:	40013800 	.word	0x40013800
 8012134:	40020000 	.word	0x40020000
 8012138:	40020400 	.word	0x40020400
 801213c:	40020800 	.word	0x40020800
 8012140:	40020c00 	.word	0x40020c00
 8012144:	40021000 	.word	0x40021000
 8012148:	40021400 	.word	0x40021400
 801214c:	40021800 	.word	0x40021800
 8012150:	40021c00 	.word	0x40021c00
 8012154:	40013c00 	.word	0x40013c00

08012158 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8012158:	b480      	push	{r7}
 801215a:	b087      	sub	sp, #28
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
 8012160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8012162:	2300      	movs	r3, #0
 8012164:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8012166:	2300      	movs	r3, #0
 8012168:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 801216a:	2300      	movs	r3, #0
 801216c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801216e:	2300      	movs	r3, #0
 8012170:	617b      	str	r3, [r7, #20]
 8012172:	e0cd      	b.n	8012310 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012174:	2201      	movs	r2, #1
 8012176:	697b      	ldr	r3, [r7, #20]
 8012178:	fa02 f303 	lsl.w	r3, r2, r3
 801217c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 801217e:	683a      	ldr	r2, [r7, #0]
 8012180:	693b      	ldr	r3, [r7, #16]
 8012182:	4013      	ands	r3, r2
 8012184:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8012186:	68fa      	ldr	r2, [r7, #12]
 8012188:	693b      	ldr	r3, [r7, #16]
 801218a:	429a      	cmp	r2, r3
 801218c:	f040 80bd 	bne.w	801230a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8012190:	4a65      	ldr	r2, [pc, #404]	; (8012328 <HAL_GPIO_DeInit+0x1d0>)
 8012192:	697b      	ldr	r3, [r7, #20]
 8012194:	089b      	lsrs	r3, r3, #2
 8012196:	3302      	adds	r3, #2
 8012198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801219c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 801219e:	697b      	ldr	r3, [r7, #20]
 80121a0:	f003 0303 	and.w	r3, r3, #3
 80121a4:	009b      	lsls	r3, r3, #2
 80121a6:	220f      	movs	r2, #15
 80121a8:	fa02 f303 	lsl.w	r3, r2, r3
 80121ac:	68ba      	ldr	r2, [r7, #8]
 80121ae:	4013      	ands	r3, r2
 80121b0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	4a5d      	ldr	r2, [pc, #372]	; (801232c <HAL_GPIO_DeInit+0x1d4>)
 80121b6:	4293      	cmp	r3, r2
 80121b8:	d02b      	beq.n	8012212 <HAL_GPIO_DeInit+0xba>
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	4a5c      	ldr	r2, [pc, #368]	; (8012330 <HAL_GPIO_DeInit+0x1d8>)
 80121be:	4293      	cmp	r3, r2
 80121c0:	d025      	beq.n	801220e <HAL_GPIO_DeInit+0xb6>
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	4a5b      	ldr	r2, [pc, #364]	; (8012334 <HAL_GPIO_DeInit+0x1dc>)
 80121c6:	4293      	cmp	r3, r2
 80121c8:	d01f      	beq.n	801220a <HAL_GPIO_DeInit+0xb2>
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	4a5a      	ldr	r2, [pc, #360]	; (8012338 <HAL_GPIO_DeInit+0x1e0>)
 80121ce:	4293      	cmp	r3, r2
 80121d0:	d019      	beq.n	8012206 <HAL_GPIO_DeInit+0xae>
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	4a59      	ldr	r2, [pc, #356]	; (801233c <HAL_GPIO_DeInit+0x1e4>)
 80121d6:	4293      	cmp	r3, r2
 80121d8:	d013      	beq.n	8012202 <HAL_GPIO_DeInit+0xaa>
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	4a58      	ldr	r2, [pc, #352]	; (8012340 <HAL_GPIO_DeInit+0x1e8>)
 80121de:	4293      	cmp	r3, r2
 80121e0:	d00d      	beq.n	80121fe <HAL_GPIO_DeInit+0xa6>
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	4a57      	ldr	r2, [pc, #348]	; (8012344 <HAL_GPIO_DeInit+0x1ec>)
 80121e6:	4293      	cmp	r3, r2
 80121e8:	d007      	beq.n	80121fa <HAL_GPIO_DeInit+0xa2>
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	4a56      	ldr	r2, [pc, #344]	; (8012348 <HAL_GPIO_DeInit+0x1f0>)
 80121ee:	4293      	cmp	r3, r2
 80121f0:	d101      	bne.n	80121f6 <HAL_GPIO_DeInit+0x9e>
 80121f2:	2307      	movs	r3, #7
 80121f4:	e00e      	b.n	8012214 <HAL_GPIO_DeInit+0xbc>
 80121f6:	2308      	movs	r3, #8
 80121f8:	e00c      	b.n	8012214 <HAL_GPIO_DeInit+0xbc>
 80121fa:	2306      	movs	r3, #6
 80121fc:	e00a      	b.n	8012214 <HAL_GPIO_DeInit+0xbc>
 80121fe:	2305      	movs	r3, #5
 8012200:	e008      	b.n	8012214 <HAL_GPIO_DeInit+0xbc>
 8012202:	2304      	movs	r3, #4
 8012204:	e006      	b.n	8012214 <HAL_GPIO_DeInit+0xbc>
 8012206:	2303      	movs	r3, #3
 8012208:	e004      	b.n	8012214 <HAL_GPIO_DeInit+0xbc>
 801220a:	2302      	movs	r3, #2
 801220c:	e002      	b.n	8012214 <HAL_GPIO_DeInit+0xbc>
 801220e:	2301      	movs	r3, #1
 8012210:	e000      	b.n	8012214 <HAL_GPIO_DeInit+0xbc>
 8012212:	2300      	movs	r3, #0
 8012214:	697a      	ldr	r2, [r7, #20]
 8012216:	f002 0203 	and.w	r2, r2, #3
 801221a:	0092      	lsls	r2, r2, #2
 801221c:	4093      	lsls	r3, r2
 801221e:	68ba      	ldr	r2, [r7, #8]
 8012220:	429a      	cmp	r2, r3
 8012222:	d132      	bne.n	801228a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8012224:	4b49      	ldr	r3, [pc, #292]	; (801234c <HAL_GPIO_DeInit+0x1f4>)
 8012226:	681a      	ldr	r2, [r3, #0]
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	43db      	mvns	r3, r3
 801222c:	4947      	ldr	r1, [pc, #284]	; (801234c <HAL_GPIO_DeInit+0x1f4>)
 801222e:	4013      	ands	r3, r2
 8012230:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8012232:	4b46      	ldr	r3, [pc, #280]	; (801234c <HAL_GPIO_DeInit+0x1f4>)
 8012234:	685a      	ldr	r2, [r3, #4]
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	43db      	mvns	r3, r3
 801223a:	4944      	ldr	r1, [pc, #272]	; (801234c <HAL_GPIO_DeInit+0x1f4>)
 801223c:	4013      	ands	r3, r2
 801223e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8012240:	4b42      	ldr	r3, [pc, #264]	; (801234c <HAL_GPIO_DeInit+0x1f4>)
 8012242:	689a      	ldr	r2, [r3, #8]
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	43db      	mvns	r3, r3
 8012248:	4940      	ldr	r1, [pc, #256]	; (801234c <HAL_GPIO_DeInit+0x1f4>)
 801224a:	4013      	ands	r3, r2
 801224c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 801224e:	4b3f      	ldr	r3, [pc, #252]	; (801234c <HAL_GPIO_DeInit+0x1f4>)
 8012250:	68da      	ldr	r2, [r3, #12]
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	43db      	mvns	r3, r3
 8012256:	493d      	ldr	r1, [pc, #244]	; (801234c <HAL_GPIO_DeInit+0x1f4>)
 8012258:	4013      	ands	r3, r2
 801225a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 801225c:	697b      	ldr	r3, [r7, #20]
 801225e:	f003 0303 	and.w	r3, r3, #3
 8012262:	009b      	lsls	r3, r3, #2
 8012264:	220f      	movs	r2, #15
 8012266:	fa02 f303 	lsl.w	r3, r2, r3
 801226a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 801226c:	4a2e      	ldr	r2, [pc, #184]	; (8012328 <HAL_GPIO_DeInit+0x1d0>)
 801226e:	697b      	ldr	r3, [r7, #20]
 8012270:	089b      	lsrs	r3, r3, #2
 8012272:	3302      	adds	r3, #2
 8012274:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8012278:	68bb      	ldr	r3, [r7, #8]
 801227a:	43da      	mvns	r2, r3
 801227c:	482a      	ldr	r0, [pc, #168]	; (8012328 <HAL_GPIO_DeInit+0x1d0>)
 801227e:	697b      	ldr	r3, [r7, #20]
 8012280:	089b      	lsrs	r3, r3, #2
 8012282:	400a      	ands	r2, r1
 8012284:	3302      	adds	r3, #2
 8012286:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	681a      	ldr	r2, [r3, #0]
 801228e:	697b      	ldr	r3, [r7, #20]
 8012290:	005b      	lsls	r3, r3, #1
 8012292:	2103      	movs	r1, #3
 8012294:	fa01 f303 	lsl.w	r3, r1, r3
 8012298:	43db      	mvns	r3, r3
 801229a:	401a      	ands	r2, r3
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80122a0:	697b      	ldr	r3, [r7, #20]
 80122a2:	08da      	lsrs	r2, r3, #3
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	3208      	adds	r2, #8
 80122a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80122ac:	697b      	ldr	r3, [r7, #20]
 80122ae:	f003 0307 	and.w	r3, r3, #7
 80122b2:	009b      	lsls	r3, r3, #2
 80122b4:	220f      	movs	r2, #15
 80122b6:	fa02 f303 	lsl.w	r3, r2, r3
 80122ba:	43db      	mvns	r3, r3
 80122bc:	697a      	ldr	r2, [r7, #20]
 80122be:	08d2      	lsrs	r2, r2, #3
 80122c0:	4019      	ands	r1, r3
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	3208      	adds	r2, #8
 80122c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	68da      	ldr	r2, [r3, #12]
 80122ce:	697b      	ldr	r3, [r7, #20]
 80122d0:	005b      	lsls	r3, r3, #1
 80122d2:	2103      	movs	r1, #3
 80122d4:	fa01 f303 	lsl.w	r3, r1, r3
 80122d8:	43db      	mvns	r3, r3
 80122da:	401a      	ands	r2, r3
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	685a      	ldr	r2, [r3, #4]
 80122e4:	2101      	movs	r1, #1
 80122e6:	697b      	ldr	r3, [r7, #20]
 80122e8:	fa01 f303 	lsl.w	r3, r1, r3
 80122ec:	43db      	mvns	r3, r3
 80122ee:	401a      	ands	r2, r3
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	689a      	ldr	r2, [r3, #8]
 80122f8:	697b      	ldr	r3, [r7, #20]
 80122fa:	005b      	lsls	r3, r3, #1
 80122fc:	2103      	movs	r1, #3
 80122fe:	fa01 f303 	lsl.w	r3, r1, r3
 8012302:	43db      	mvns	r3, r3
 8012304:	401a      	ands	r2, r3
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801230a:	697b      	ldr	r3, [r7, #20]
 801230c:	3301      	adds	r3, #1
 801230e:	617b      	str	r3, [r7, #20]
 8012310:	697b      	ldr	r3, [r7, #20]
 8012312:	2b0f      	cmp	r3, #15
 8012314:	f67f af2e 	bls.w	8012174 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8012318:	bf00      	nop
 801231a:	bf00      	nop
 801231c:	371c      	adds	r7, #28
 801231e:	46bd      	mov	sp, r7
 8012320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012324:	4770      	bx	lr
 8012326:	bf00      	nop
 8012328:	40013800 	.word	0x40013800
 801232c:	40020000 	.word	0x40020000
 8012330:	40020400 	.word	0x40020400
 8012334:	40020800 	.word	0x40020800
 8012338:	40020c00 	.word	0x40020c00
 801233c:	40021000 	.word	0x40021000
 8012340:	40021400 	.word	0x40021400
 8012344:	40021800 	.word	0x40021800
 8012348:	40021c00 	.word	0x40021c00
 801234c:	40013c00 	.word	0x40013c00

08012350 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8012350:	b480      	push	{r7}
 8012352:	b085      	sub	sp, #20
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
 8012358:	460b      	mov	r3, r1
 801235a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	691a      	ldr	r2, [r3, #16]
 8012360:	887b      	ldrh	r3, [r7, #2]
 8012362:	4013      	ands	r3, r2
 8012364:	2b00      	cmp	r3, #0
 8012366:	d002      	beq.n	801236e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8012368:	2301      	movs	r3, #1
 801236a:	73fb      	strb	r3, [r7, #15]
 801236c:	e001      	b.n	8012372 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801236e:	2300      	movs	r3, #0
 8012370:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8012372:	7bfb      	ldrb	r3, [r7, #15]
}
 8012374:	4618      	mov	r0, r3
 8012376:	3714      	adds	r7, #20
 8012378:	46bd      	mov	sp, r7
 801237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237e:	4770      	bx	lr

08012380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012380:	b480      	push	{r7}
 8012382:	b083      	sub	sp, #12
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
 8012388:	460b      	mov	r3, r1
 801238a:	807b      	strh	r3, [r7, #2]
 801238c:	4613      	mov	r3, r2
 801238e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8012390:	787b      	ldrb	r3, [r7, #1]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d003      	beq.n	801239e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8012396:	887a      	ldrh	r2, [r7, #2]
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801239c:	e003      	b.n	80123a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801239e:	887b      	ldrh	r3, [r7, #2]
 80123a0:	041a      	lsls	r2, r3, #16
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	619a      	str	r2, [r3, #24]
}
 80123a6:	bf00      	nop
 80123a8:	370c      	adds	r7, #12
 80123aa:	46bd      	mov	sp, r7
 80123ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b0:	4770      	bx	lr
	...

080123b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b084      	sub	sp, #16
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d101      	bne.n	80123c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80123c2:	2301      	movs	r3, #1
 80123c4:	e12b      	b.n	801261e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80123cc:	b2db      	uxtb	r3, r3
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d106      	bne.n	80123e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	2200      	movs	r2, #0
 80123d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80123da:	6878      	ldr	r0, [r7, #4]
 80123dc:	f7ef fe58 	bl	8002090 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	2224      	movs	r2, #36	; 0x24
 80123e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	681a      	ldr	r2, [r3, #0]
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	f022 0201 	bic.w	r2, r2, #1
 80123f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	681a      	ldr	r2, [r3, #0]
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012406:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	681a      	ldr	r2, [r3, #0]
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012416:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8012418:	f002 fc64 	bl	8014ce4 <HAL_RCC_GetPCLK1Freq>
 801241c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	685b      	ldr	r3, [r3, #4]
 8012422:	4a81      	ldr	r2, [pc, #516]	; (8012628 <HAL_I2C_Init+0x274>)
 8012424:	4293      	cmp	r3, r2
 8012426:	d807      	bhi.n	8012438 <HAL_I2C_Init+0x84>
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	4a80      	ldr	r2, [pc, #512]	; (801262c <HAL_I2C_Init+0x278>)
 801242c:	4293      	cmp	r3, r2
 801242e:	bf94      	ite	ls
 8012430:	2301      	movls	r3, #1
 8012432:	2300      	movhi	r3, #0
 8012434:	b2db      	uxtb	r3, r3
 8012436:	e006      	b.n	8012446 <HAL_I2C_Init+0x92>
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	4a7d      	ldr	r2, [pc, #500]	; (8012630 <HAL_I2C_Init+0x27c>)
 801243c:	4293      	cmp	r3, r2
 801243e:	bf94      	ite	ls
 8012440:	2301      	movls	r3, #1
 8012442:	2300      	movhi	r3, #0
 8012444:	b2db      	uxtb	r3, r3
 8012446:	2b00      	cmp	r3, #0
 8012448:	d001      	beq.n	801244e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801244a:	2301      	movs	r3, #1
 801244c:	e0e7      	b.n	801261e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	4a78      	ldr	r2, [pc, #480]	; (8012634 <HAL_I2C_Init+0x280>)
 8012452:	fba2 2303 	umull	r2, r3, r2, r3
 8012456:	0c9b      	lsrs	r3, r3, #18
 8012458:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	685b      	ldr	r3, [r3, #4]
 8012460:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	68ba      	ldr	r2, [r7, #8]
 801246a:	430a      	orrs	r2, r1
 801246c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	6a1b      	ldr	r3, [r3, #32]
 8012474:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	685b      	ldr	r3, [r3, #4]
 801247c:	4a6a      	ldr	r2, [pc, #424]	; (8012628 <HAL_I2C_Init+0x274>)
 801247e:	4293      	cmp	r3, r2
 8012480:	d802      	bhi.n	8012488 <HAL_I2C_Init+0xd4>
 8012482:	68bb      	ldr	r3, [r7, #8]
 8012484:	3301      	adds	r3, #1
 8012486:	e009      	b.n	801249c <HAL_I2C_Init+0xe8>
 8012488:	68bb      	ldr	r3, [r7, #8]
 801248a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801248e:	fb02 f303 	mul.w	r3, r2, r3
 8012492:	4a69      	ldr	r2, [pc, #420]	; (8012638 <HAL_I2C_Init+0x284>)
 8012494:	fba2 2303 	umull	r2, r3, r2, r3
 8012498:	099b      	lsrs	r3, r3, #6
 801249a:	3301      	adds	r3, #1
 801249c:	687a      	ldr	r2, [r7, #4]
 801249e:	6812      	ldr	r2, [r2, #0]
 80124a0:	430b      	orrs	r3, r1
 80124a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	69db      	ldr	r3, [r3, #28]
 80124aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80124ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	685b      	ldr	r3, [r3, #4]
 80124b6:	495c      	ldr	r1, [pc, #368]	; (8012628 <HAL_I2C_Init+0x274>)
 80124b8:	428b      	cmp	r3, r1
 80124ba:	d819      	bhi.n	80124f0 <HAL_I2C_Init+0x13c>
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	1e59      	subs	r1, r3, #1
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	685b      	ldr	r3, [r3, #4]
 80124c4:	005b      	lsls	r3, r3, #1
 80124c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80124ca:	1c59      	adds	r1, r3, #1
 80124cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80124d0:	400b      	ands	r3, r1
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d00a      	beq.n	80124ec <HAL_I2C_Init+0x138>
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	1e59      	subs	r1, r3, #1
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	685b      	ldr	r3, [r3, #4]
 80124de:	005b      	lsls	r3, r3, #1
 80124e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80124e4:	3301      	adds	r3, #1
 80124e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80124ea:	e051      	b.n	8012590 <HAL_I2C_Init+0x1dc>
 80124ec:	2304      	movs	r3, #4
 80124ee:	e04f      	b.n	8012590 <HAL_I2C_Init+0x1dc>
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	689b      	ldr	r3, [r3, #8]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d111      	bne.n	801251c <HAL_I2C_Init+0x168>
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	1e58      	subs	r0, r3, #1
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	6859      	ldr	r1, [r3, #4]
 8012500:	460b      	mov	r3, r1
 8012502:	005b      	lsls	r3, r3, #1
 8012504:	440b      	add	r3, r1
 8012506:	fbb0 f3f3 	udiv	r3, r0, r3
 801250a:	3301      	adds	r3, #1
 801250c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012510:	2b00      	cmp	r3, #0
 8012512:	bf0c      	ite	eq
 8012514:	2301      	moveq	r3, #1
 8012516:	2300      	movne	r3, #0
 8012518:	b2db      	uxtb	r3, r3
 801251a:	e012      	b.n	8012542 <HAL_I2C_Init+0x18e>
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	1e58      	subs	r0, r3, #1
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	6859      	ldr	r1, [r3, #4]
 8012524:	460b      	mov	r3, r1
 8012526:	009b      	lsls	r3, r3, #2
 8012528:	440b      	add	r3, r1
 801252a:	0099      	lsls	r1, r3, #2
 801252c:	440b      	add	r3, r1
 801252e:	fbb0 f3f3 	udiv	r3, r0, r3
 8012532:	3301      	adds	r3, #1
 8012534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012538:	2b00      	cmp	r3, #0
 801253a:	bf0c      	ite	eq
 801253c:	2301      	moveq	r3, #1
 801253e:	2300      	movne	r3, #0
 8012540:	b2db      	uxtb	r3, r3
 8012542:	2b00      	cmp	r3, #0
 8012544:	d001      	beq.n	801254a <HAL_I2C_Init+0x196>
 8012546:	2301      	movs	r3, #1
 8012548:	e022      	b.n	8012590 <HAL_I2C_Init+0x1dc>
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	689b      	ldr	r3, [r3, #8]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d10e      	bne.n	8012570 <HAL_I2C_Init+0x1bc>
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	1e58      	subs	r0, r3, #1
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	6859      	ldr	r1, [r3, #4]
 801255a:	460b      	mov	r3, r1
 801255c:	005b      	lsls	r3, r3, #1
 801255e:	440b      	add	r3, r1
 8012560:	fbb0 f3f3 	udiv	r3, r0, r3
 8012564:	3301      	adds	r3, #1
 8012566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801256a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801256e:	e00f      	b.n	8012590 <HAL_I2C_Init+0x1dc>
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	1e58      	subs	r0, r3, #1
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	6859      	ldr	r1, [r3, #4]
 8012578:	460b      	mov	r3, r1
 801257a:	009b      	lsls	r3, r3, #2
 801257c:	440b      	add	r3, r1
 801257e:	0099      	lsls	r1, r3, #2
 8012580:	440b      	add	r3, r1
 8012582:	fbb0 f3f3 	udiv	r3, r0, r3
 8012586:	3301      	adds	r3, #1
 8012588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801258c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012590:	6879      	ldr	r1, [r7, #4]
 8012592:	6809      	ldr	r1, [r1, #0]
 8012594:	4313      	orrs	r3, r2
 8012596:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	69da      	ldr	r2, [r3, #28]
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	6a1b      	ldr	r3, [r3, #32]
 80125aa:	431a      	orrs	r2, r3
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	430a      	orrs	r2, r1
 80125b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	689b      	ldr	r3, [r3, #8]
 80125ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80125be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80125c2:	687a      	ldr	r2, [r7, #4]
 80125c4:	6911      	ldr	r1, [r2, #16]
 80125c6:	687a      	ldr	r2, [r7, #4]
 80125c8:	68d2      	ldr	r2, [r2, #12]
 80125ca:	4311      	orrs	r1, r2
 80125cc:	687a      	ldr	r2, [r7, #4]
 80125ce:	6812      	ldr	r2, [r2, #0]
 80125d0:	430b      	orrs	r3, r1
 80125d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	68db      	ldr	r3, [r3, #12]
 80125da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	695a      	ldr	r2, [r3, #20]
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	699b      	ldr	r3, [r3, #24]
 80125e6:	431a      	orrs	r2, r3
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	430a      	orrs	r2, r1
 80125ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	681a      	ldr	r2, [r3, #0]
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	f042 0201 	orr.w	r2, r2, #1
 80125fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	2200      	movs	r2, #0
 8012604:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	2220      	movs	r2, #32
 801260a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	2200      	movs	r2, #0
 8012612:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	2200      	movs	r2, #0
 8012618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801261c:	2300      	movs	r3, #0
}
 801261e:	4618      	mov	r0, r3
 8012620:	3710      	adds	r7, #16
 8012622:	46bd      	mov	sp, r7
 8012624:	bd80      	pop	{r7, pc}
 8012626:	bf00      	nop
 8012628:	000186a0 	.word	0x000186a0
 801262c:	001e847f 	.word	0x001e847f
 8012630:	003d08ff 	.word	0x003d08ff
 8012634:	431bde83 	.word	0x431bde83
 8012638:	10624dd3 	.word	0x10624dd3

0801263c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b082      	sub	sp, #8
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d101      	bne.n	801264e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 801264a:	2301      	movs	r3, #1
 801264c:	e021      	b.n	8012692 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	2224      	movs	r2, #36	; 0x24
 8012652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	681a      	ldr	r2, [r3, #0]
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	f022 0201 	bic.w	r2, r2, #1
 8012664:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8012666:	6878      	ldr	r0, [r7, #4]
 8012668:	f7ef fde8 	bl	800223c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	2200      	movs	r2, #0
 8012670:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	2200      	movs	r2, #0
 8012676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	2200      	movs	r2, #0
 801267e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	2200      	movs	r2, #0
 8012684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	2200      	movs	r2, #0
 801268c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012690:	2300      	movs	r3, #0
}
 8012692:	4618      	mov	r0, r3
 8012694:	3708      	adds	r7, #8
 8012696:	46bd      	mov	sp, r7
 8012698:	bd80      	pop	{r7, pc}
	...

0801269c <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b086      	sub	sp, #24
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	60f8      	str	r0, [r7, #12]
 80126a4:	607a      	str	r2, [r7, #4]
 80126a6:	461a      	mov	r2, r3
 80126a8:	460b      	mov	r3, r1
 80126aa:	817b      	strh	r3, [r7, #10]
 80126ac:	4613      	mov	r3, r2
 80126ae:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80126b0:	2300      	movs	r3, #0
 80126b2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80126ba:	b2db      	uxtb	r3, r3
 80126bc:	2b20      	cmp	r3, #32
 80126be:	f040 80f4 	bne.w	80128aa <HAL_I2C_Master_Receive_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80126c2:	4b7c      	ldr	r3, [pc, #496]	; (80128b4 <HAL_I2C_Master_Receive_DMA+0x218>)
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	08db      	lsrs	r3, r3, #3
 80126c8:	4a7b      	ldr	r2, [pc, #492]	; (80128b8 <HAL_I2C_Master_Receive_DMA+0x21c>)
 80126ca:	fba2 2303 	umull	r2, r3, r2, r3
 80126ce:	0a1a      	lsrs	r2, r3, #8
 80126d0:	4613      	mov	r3, r2
 80126d2:	009b      	lsls	r3, r3, #2
 80126d4:	4413      	add	r3, r2
 80126d6:	009a      	lsls	r2, r3, #2
 80126d8:	4413      	add	r3, r2
 80126da:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 80126dc:	693b      	ldr	r3, [r7, #16]
 80126de:	3b01      	subs	r3, #1
 80126e0:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 80126e2:	693b      	ldr	r3, [r7, #16]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d116      	bne.n	8012716 <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	2200      	movs	r2, #0
 80126ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	2220      	movs	r2, #32
 80126f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	2200      	movs	r2, #0
 80126fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012702:	f043 0220 	orr.w	r2, r3, #32
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	2200      	movs	r2, #0
 801270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8012712:	2301      	movs	r3, #1
 8012714:	e0ca      	b.n	80128ac <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	699b      	ldr	r3, [r3, #24]
 801271c:	f003 0302 	and.w	r3, r3, #2
 8012720:	2b02      	cmp	r3, #2
 8012722:	d0db      	beq.n	80126dc <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801272a:	2b01      	cmp	r3, #1
 801272c:	d101      	bne.n	8012732 <HAL_I2C_Master_Receive_DMA+0x96>
 801272e:	2302      	movs	r3, #2
 8012730:	e0bc      	b.n	80128ac <HAL_I2C_Master_Receive_DMA+0x210>
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	2201      	movs	r2, #1
 8012736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	f003 0301 	and.w	r3, r3, #1
 8012744:	2b01      	cmp	r3, #1
 8012746:	d007      	beq.n	8012758 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	681a      	ldr	r2, [r3, #0]
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	f042 0201 	orr.w	r2, r2, #1
 8012756:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	681a      	ldr	r2, [r3, #0]
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012766:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	2222      	movs	r2, #34	; 0x22
 801276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	2210      	movs	r2, #16
 8012774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	2200      	movs	r2, #0
 801277c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	687a      	ldr	r2, [r7, #4]
 8012782:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	893a      	ldrh	r2, [r7, #8]
 8012788:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801278e:	b29a      	uxth	r2, r3
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	4a49      	ldr	r2, [pc, #292]	; (80128bc <HAL_I2C_Master_Receive_DMA+0x220>)
 8012798:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801279a:	897a      	ldrh	r2, [r7, #10]
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d062      	beq.n	801286e <HAL_I2C_Master_Receive_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127ac:	4a44      	ldr	r2, [pc, #272]	; (80128c0 <HAL_I2C_Master_Receive_DMA+0x224>)
 80127ae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127b4:	4a43      	ldr	r2, [pc, #268]	; (80128c4 <HAL_I2C_Master_Receive_DMA+0x228>)
 80127b6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127bc:	2200      	movs	r2, #0
 80127be:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127c4:	2200      	movs	r2, #0
 80127c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127cc:	2200      	movs	r2, #0
 80127ce:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127d4:	2200      	movs	r2, #0
 80127d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	3310      	adds	r3, #16
 80127e2:	4619      	mov	r1, r3
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127e8:	461a      	mov	r2, r3
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80127ee:	f7ff f819 	bl	8011824 <HAL_DMA_Start_IT>
 80127f2:	4603      	mov	r3, r0
 80127f4:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 80127f6:	7dfb      	ldrb	r3, [r7, #23]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d124      	bne.n	8012846 <HAL_I2C_Master_Receive_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	681a      	ldr	r2, [r3, #0]
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801280a:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	681a      	ldr	r2, [r3, #0]
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801281a:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	2200      	movs	r2, #0
 8012820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	685a      	ldr	r2, [r3, #4]
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8012832:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	685a      	ldr	r2, [r3, #4]
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012842:	605a      	str	r2, [r3, #4]
 8012844:	e02f      	b.n	80128a6 <HAL_I2C_Master_Receive_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	2220      	movs	r2, #32
 801284a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	2200      	movs	r2, #0
 8012852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801285a:	f043 0210 	orr.w	r2, r3, #16
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	2200      	movs	r2, #0
 8012866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801286a:	2301      	movs	r3, #1
 801286c:	e01e      	b.n	80128ac <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	681a      	ldr	r2, [r3, #0]
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801287c:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	681a      	ldr	r2, [r3, #0]
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801288c:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	2200      	movs	r2, #0
 8012892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	685a      	ldr	r2, [r3, #4]
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80128a4:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80128a6:	2300      	movs	r3, #0
 80128a8:	e000      	b.n	80128ac <HAL_I2C_Master_Receive_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 80128aa:	2302      	movs	r3, #2
  }
}
 80128ac:	4618      	mov	r0, r3
 80128ae:	3718      	adds	r7, #24
 80128b0:	46bd      	mov	sp, r7
 80128b2:	bd80      	pop	{r7, pc}
 80128b4:	20000054 	.word	0x20000054
 80128b8:	14f8b589 	.word	0x14f8b589
 80128bc:	ffff0000 	.word	0xffff0000
 80128c0:	08014035 	.word	0x08014035
 80128c4:	080141df 	.word	0x080141df

080128c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b088      	sub	sp, #32
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80128d0:	2300      	movs	r3, #0
 80128d2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	685b      	ldr	r3, [r3, #4]
 80128da:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128e0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80128e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80128f0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80128f2:	7bfb      	ldrb	r3, [r7, #15]
 80128f4:	2b10      	cmp	r3, #16
 80128f6:	d003      	beq.n	8012900 <HAL_I2C_EV_IRQHandler+0x38>
 80128f8:	7bfb      	ldrb	r3, [r7, #15]
 80128fa:	2b40      	cmp	r3, #64	; 0x40
 80128fc:	f040 80bd 	bne.w	8012a7a <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	699b      	ldr	r3, [r3, #24]
 8012906:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	695b      	ldr	r3, [r3, #20]
 801290e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8012910:	69fb      	ldr	r3, [r7, #28]
 8012912:	f003 0301 	and.w	r3, r3, #1
 8012916:	2b00      	cmp	r3, #0
 8012918:	d10d      	bne.n	8012936 <HAL_I2C_EV_IRQHandler+0x6e>
 801291a:	693b      	ldr	r3, [r7, #16]
 801291c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8012920:	d003      	beq.n	801292a <HAL_I2C_EV_IRQHandler+0x62>
 8012922:	693b      	ldr	r3, [r7, #16]
 8012924:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8012928:	d101      	bne.n	801292e <HAL_I2C_EV_IRQHandler+0x66>
 801292a:	2301      	movs	r3, #1
 801292c:	e000      	b.n	8012930 <HAL_I2C_EV_IRQHandler+0x68>
 801292e:	2300      	movs	r3, #0
 8012930:	2b01      	cmp	r3, #1
 8012932:	f000 812e 	beq.w	8012b92 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8012936:	69fb      	ldr	r3, [r7, #28]
 8012938:	f003 0301 	and.w	r3, r3, #1
 801293c:	2b00      	cmp	r3, #0
 801293e:	d00c      	beq.n	801295a <HAL_I2C_EV_IRQHandler+0x92>
 8012940:	697b      	ldr	r3, [r7, #20]
 8012942:	0a5b      	lsrs	r3, r3, #9
 8012944:	f003 0301 	and.w	r3, r3, #1
 8012948:	2b00      	cmp	r3, #0
 801294a:	d006      	beq.n	801295a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 801294c:	6878      	ldr	r0, [r7, #4]
 801294e:	f001 fd5d 	bl	801440c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8012952:	6878      	ldr	r0, [r7, #4]
 8012954:	f000 fd58 	bl	8013408 <I2C_Master_SB>
 8012958:	e08e      	b.n	8012a78 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801295a:	69fb      	ldr	r3, [r7, #28]
 801295c:	08db      	lsrs	r3, r3, #3
 801295e:	f003 0301 	and.w	r3, r3, #1
 8012962:	2b00      	cmp	r3, #0
 8012964:	d009      	beq.n	801297a <HAL_I2C_EV_IRQHandler+0xb2>
 8012966:	697b      	ldr	r3, [r7, #20]
 8012968:	0a5b      	lsrs	r3, r3, #9
 801296a:	f003 0301 	and.w	r3, r3, #1
 801296e:	2b00      	cmp	r3, #0
 8012970:	d003      	beq.n	801297a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8012972:	6878      	ldr	r0, [r7, #4]
 8012974:	f000 fdce 	bl	8013514 <I2C_Master_ADD10>
 8012978:	e07e      	b.n	8012a78 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801297a:	69fb      	ldr	r3, [r7, #28]
 801297c:	085b      	lsrs	r3, r3, #1
 801297e:	f003 0301 	and.w	r3, r3, #1
 8012982:	2b00      	cmp	r3, #0
 8012984:	d009      	beq.n	801299a <HAL_I2C_EV_IRQHandler+0xd2>
 8012986:	697b      	ldr	r3, [r7, #20]
 8012988:	0a5b      	lsrs	r3, r3, #9
 801298a:	f003 0301 	and.w	r3, r3, #1
 801298e:	2b00      	cmp	r3, #0
 8012990:	d003      	beq.n	801299a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	f000 fde8 	bl	8013568 <I2C_Master_ADDR>
 8012998:	e06e      	b.n	8012a78 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 801299a:	69bb      	ldr	r3, [r7, #24]
 801299c:	089b      	lsrs	r3, r3, #2
 801299e:	f003 0301 	and.w	r3, r3, #1
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d037      	beq.n	8012a16 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	685b      	ldr	r3, [r3, #4]
 80129ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80129b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80129b4:	f000 80ef 	beq.w	8012b96 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80129b8:	69fb      	ldr	r3, [r7, #28]
 80129ba:	09db      	lsrs	r3, r3, #7
 80129bc:	f003 0301 	and.w	r3, r3, #1
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d00f      	beq.n	80129e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80129c4:	697b      	ldr	r3, [r7, #20]
 80129c6:	0a9b      	lsrs	r3, r3, #10
 80129c8:	f003 0301 	and.w	r3, r3, #1
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d009      	beq.n	80129e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80129d0:	69fb      	ldr	r3, [r7, #28]
 80129d2:	089b      	lsrs	r3, r3, #2
 80129d4:	f003 0301 	and.w	r3, r3, #1
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d103      	bne.n	80129e4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80129dc:	6878      	ldr	r0, [r7, #4]
 80129de:	f000 f9e5 	bl	8012dac <I2C_MasterTransmit_TXE>
 80129e2:	e049      	b.n	8012a78 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80129e4:	69fb      	ldr	r3, [r7, #28]
 80129e6:	089b      	lsrs	r3, r3, #2
 80129e8:	f003 0301 	and.w	r3, r3, #1
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	f000 80d2 	beq.w	8012b96 <HAL_I2C_EV_IRQHandler+0x2ce>
 80129f2:	697b      	ldr	r3, [r7, #20]
 80129f4:	0a5b      	lsrs	r3, r3, #9
 80129f6:	f003 0301 	and.w	r3, r3, #1
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	f000 80cb 	beq.w	8012b96 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8012a00:	7bfb      	ldrb	r3, [r7, #15]
 8012a02:	2b10      	cmp	r3, #16
 8012a04:	d103      	bne.n	8012a0e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8012a06:	6878      	ldr	r0, [r7, #4]
 8012a08:	f000 fa6c 	bl	8012ee4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8012a0c:	e0c3      	b.n	8012b96 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8012a0e:	6878      	ldr	r0, [r7, #4]
 8012a10:	f000 fad0 	bl	8012fb4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8012a14:	e0bf      	b.n	8012b96 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	685b      	ldr	r3, [r3, #4]
 8012a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012a24:	f000 80b7 	beq.w	8012b96 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8012a28:	69fb      	ldr	r3, [r7, #28]
 8012a2a:	099b      	lsrs	r3, r3, #6
 8012a2c:	f003 0301 	and.w	r3, r3, #1
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d00f      	beq.n	8012a54 <HAL_I2C_EV_IRQHandler+0x18c>
 8012a34:	697b      	ldr	r3, [r7, #20]
 8012a36:	0a9b      	lsrs	r3, r3, #10
 8012a38:	f003 0301 	and.w	r3, r3, #1
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d009      	beq.n	8012a54 <HAL_I2C_EV_IRQHandler+0x18c>
 8012a40:	69fb      	ldr	r3, [r7, #28]
 8012a42:	089b      	lsrs	r3, r3, #2
 8012a44:	f003 0301 	and.w	r3, r3, #1
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d103      	bne.n	8012a54 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8012a4c:	6878      	ldr	r0, [r7, #4]
 8012a4e:	f000 fb40 	bl	80130d2 <I2C_MasterReceive_RXNE>
 8012a52:	e011      	b.n	8012a78 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8012a54:	69fb      	ldr	r3, [r7, #28]
 8012a56:	089b      	lsrs	r3, r3, #2
 8012a58:	f003 0301 	and.w	r3, r3, #1
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	f000 809a 	beq.w	8012b96 <HAL_I2C_EV_IRQHandler+0x2ce>
 8012a62:	697b      	ldr	r3, [r7, #20]
 8012a64:	0a5b      	lsrs	r3, r3, #9
 8012a66:	f003 0301 	and.w	r3, r3, #1
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	f000 8093 	beq.w	8012b96 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8012a70:	6878      	ldr	r0, [r7, #4]
 8012a72:	f000 fbdf 	bl	8013234 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8012a76:	e08e      	b.n	8012b96 <HAL_I2C_EV_IRQHandler+0x2ce>
 8012a78:	e08d      	b.n	8012b96 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d004      	beq.n	8012a8c <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	695b      	ldr	r3, [r3, #20]
 8012a88:	61fb      	str	r3, [r7, #28]
 8012a8a:	e007      	b.n	8012a9c <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	699b      	ldr	r3, [r3, #24]
 8012a92:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	695b      	ldr	r3, [r3, #20]
 8012a9a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8012a9c:	69fb      	ldr	r3, [r7, #28]
 8012a9e:	085b      	lsrs	r3, r3, #1
 8012aa0:	f003 0301 	and.w	r3, r3, #1
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d012      	beq.n	8012ace <HAL_I2C_EV_IRQHandler+0x206>
 8012aa8:	697b      	ldr	r3, [r7, #20]
 8012aaa:	0a5b      	lsrs	r3, r3, #9
 8012aac:	f003 0301 	and.w	r3, r3, #1
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d00c      	beq.n	8012ace <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d003      	beq.n	8012ac4 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	699b      	ldr	r3, [r3, #24]
 8012ac2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8012ac4:	69b9      	ldr	r1, [r7, #24]
 8012ac6:	6878      	ldr	r0, [r7, #4]
 8012ac8:	f000 ff9d 	bl	8013a06 <I2C_Slave_ADDR>
 8012acc:	e066      	b.n	8012b9c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8012ace:	69fb      	ldr	r3, [r7, #28]
 8012ad0:	091b      	lsrs	r3, r3, #4
 8012ad2:	f003 0301 	and.w	r3, r3, #1
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d009      	beq.n	8012aee <HAL_I2C_EV_IRQHandler+0x226>
 8012ada:	697b      	ldr	r3, [r7, #20]
 8012adc:	0a5b      	lsrs	r3, r3, #9
 8012ade:	f003 0301 	and.w	r3, r3, #1
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d003      	beq.n	8012aee <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8012ae6:	6878      	ldr	r0, [r7, #4]
 8012ae8:	f000 ffd2 	bl	8013a90 <I2C_Slave_STOPF>
 8012aec:	e056      	b.n	8012b9c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8012aee:	7bbb      	ldrb	r3, [r7, #14]
 8012af0:	2b21      	cmp	r3, #33	; 0x21
 8012af2:	d002      	beq.n	8012afa <HAL_I2C_EV_IRQHandler+0x232>
 8012af4:	7bbb      	ldrb	r3, [r7, #14]
 8012af6:	2b29      	cmp	r3, #41	; 0x29
 8012af8:	d125      	bne.n	8012b46 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8012afa:	69fb      	ldr	r3, [r7, #28]
 8012afc:	09db      	lsrs	r3, r3, #7
 8012afe:	f003 0301 	and.w	r3, r3, #1
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d00f      	beq.n	8012b26 <HAL_I2C_EV_IRQHandler+0x25e>
 8012b06:	697b      	ldr	r3, [r7, #20]
 8012b08:	0a9b      	lsrs	r3, r3, #10
 8012b0a:	f003 0301 	and.w	r3, r3, #1
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d009      	beq.n	8012b26 <HAL_I2C_EV_IRQHandler+0x25e>
 8012b12:	69fb      	ldr	r3, [r7, #28]
 8012b14:	089b      	lsrs	r3, r3, #2
 8012b16:	f003 0301 	and.w	r3, r3, #1
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d103      	bne.n	8012b26 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8012b1e:	6878      	ldr	r0, [r7, #4]
 8012b20:	f000 feb3 	bl	801388a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8012b24:	e039      	b.n	8012b9a <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8012b26:	69fb      	ldr	r3, [r7, #28]
 8012b28:	089b      	lsrs	r3, r3, #2
 8012b2a:	f003 0301 	and.w	r3, r3, #1
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d033      	beq.n	8012b9a <HAL_I2C_EV_IRQHandler+0x2d2>
 8012b32:	697b      	ldr	r3, [r7, #20]
 8012b34:	0a5b      	lsrs	r3, r3, #9
 8012b36:	f003 0301 	and.w	r3, r3, #1
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d02d      	beq.n	8012b9a <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8012b3e:	6878      	ldr	r0, [r7, #4]
 8012b40:	f000 fee0 	bl	8013904 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8012b44:	e029      	b.n	8012b9a <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8012b46:	69fb      	ldr	r3, [r7, #28]
 8012b48:	099b      	lsrs	r3, r3, #6
 8012b4a:	f003 0301 	and.w	r3, r3, #1
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d00f      	beq.n	8012b72 <HAL_I2C_EV_IRQHandler+0x2aa>
 8012b52:	697b      	ldr	r3, [r7, #20]
 8012b54:	0a9b      	lsrs	r3, r3, #10
 8012b56:	f003 0301 	and.w	r3, r3, #1
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d009      	beq.n	8012b72 <HAL_I2C_EV_IRQHandler+0x2aa>
 8012b5e:	69fb      	ldr	r3, [r7, #28]
 8012b60:	089b      	lsrs	r3, r3, #2
 8012b62:	f003 0301 	and.w	r3, r3, #1
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d103      	bne.n	8012b72 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8012b6a:	6878      	ldr	r0, [r7, #4]
 8012b6c:	f000 feeb 	bl	8013946 <I2C_SlaveReceive_RXNE>
 8012b70:	e014      	b.n	8012b9c <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8012b72:	69fb      	ldr	r3, [r7, #28]
 8012b74:	089b      	lsrs	r3, r3, #2
 8012b76:	f003 0301 	and.w	r3, r3, #1
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d00e      	beq.n	8012b9c <HAL_I2C_EV_IRQHandler+0x2d4>
 8012b7e:	697b      	ldr	r3, [r7, #20]
 8012b80:	0a5b      	lsrs	r3, r3, #9
 8012b82:	f003 0301 	and.w	r3, r3, #1
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d008      	beq.n	8012b9c <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8012b8a:	6878      	ldr	r0, [r7, #4]
 8012b8c:	f000 ff19 	bl	80139c2 <I2C_SlaveReceive_BTF>
 8012b90:	e004      	b.n	8012b9c <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8012b92:	bf00      	nop
 8012b94:	e002      	b.n	8012b9c <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8012b96:	bf00      	nop
 8012b98:	e000      	b.n	8012b9c <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8012b9a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8012b9c:	3720      	adds	r7, #32
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	bd80      	pop	{r7, pc}

08012ba2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8012ba2:	b580      	push	{r7, lr}
 8012ba4:	b08a      	sub	sp, #40	; 0x28
 8012ba6:	af00      	add	r7, sp, #0
 8012ba8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	695b      	ldr	r3, [r3, #20]
 8012bb0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	685b      	ldr	r3, [r3, #4]
 8012bb8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8012bba:	2300      	movs	r3, #0
 8012bbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012bc4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8012bc6:	6a3b      	ldr	r3, [r7, #32]
 8012bc8:	0a1b      	lsrs	r3, r3, #8
 8012bca:	f003 0301 	and.w	r3, r3, #1
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d00e      	beq.n	8012bf0 <HAL_I2C_ER_IRQHandler+0x4e>
 8012bd2:	69fb      	ldr	r3, [r7, #28]
 8012bd4:	0a1b      	lsrs	r3, r3, #8
 8012bd6:	f003 0301 	and.w	r3, r3, #1
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d008      	beq.n	8012bf0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8012bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be0:	f043 0301 	orr.w	r3, r3, #1
 8012be4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8012bee:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8012bf0:	6a3b      	ldr	r3, [r7, #32]
 8012bf2:	0a5b      	lsrs	r3, r3, #9
 8012bf4:	f003 0301 	and.w	r3, r3, #1
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d00e      	beq.n	8012c1a <HAL_I2C_ER_IRQHandler+0x78>
 8012bfc:	69fb      	ldr	r3, [r7, #28]
 8012bfe:	0a1b      	lsrs	r3, r3, #8
 8012c00:	f003 0301 	and.w	r3, r3, #1
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d008      	beq.n	8012c1a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8012c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c0a:	f043 0302 	orr.w	r3, r3, #2
 8012c0e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8012c18:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8012c1a:	6a3b      	ldr	r3, [r7, #32]
 8012c1c:	0a9b      	lsrs	r3, r3, #10
 8012c1e:	f003 0301 	and.w	r3, r3, #1
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d03f      	beq.n	8012ca6 <HAL_I2C_ER_IRQHandler+0x104>
 8012c26:	69fb      	ldr	r3, [r7, #28]
 8012c28:	0a1b      	lsrs	r3, r3, #8
 8012c2a:	f003 0301 	and.w	r3, r3, #1
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d039      	beq.n	8012ca6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8012c32:	7efb      	ldrb	r3, [r7, #27]
 8012c34:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012c3a:	b29b      	uxth	r3, r3
 8012c3c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012c44:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c4a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8012c4c:	7ebb      	ldrb	r3, [r7, #26]
 8012c4e:	2b20      	cmp	r3, #32
 8012c50:	d112      	bne.n	8012c78 <HAL_I2C_ER_IRQHandler+0xd6>
 8012c52:	697b      	ldr	r3, [r7, #20]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d10f      	bne.n	8012c78 <HAL_I2C_ER_IRQHandler+0xd6>
 8012c58:	7cfb      	ldrb	r3, [r7, #19]
 8012c5a:	2b21      	cmp	r3, #33	; 0x21
 8012c5c:	d008      	beq.n	8012c70 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8012c5e:	7cfb      	ldrb	r3, [r7, #19]
 8012c60:	2b29      	cmp	r3, #41	; 0x29
 8012c62:	d005      	beq.n	8012c70 <HAL_I2C_ER_IRQHandler+0xce>
 8012c64:	7cfb      	ldrb	r3, [r7, #19]
 8012c66:	2b28      	cmp	r3, #40	; 0x28
 8012c68:	d106      	bne.n	8012c78 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	2b21      	cmp	r3, #33	; 0x21
 8012c6e:	d103      	bne.n	8012c78 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8012c70:	6878      	ldr	r0, [r7, #4]
 8012c72:	f001 f83d 	bl	8013cf0 <I2C_Slave_AF>
 8012c76:	e016      	b.n	8012ca6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8012c80:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8012c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c84:	f043 0304 	orr.w	r3, r3, #4
 8012c88:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8012c8a:	7efb      	ldrb	r3, [r7, #27]
 8012c8c:	2b10      	cmp	r3, #16
 8012c8e:	d002      	beq.n	8012c96 <HAL_I2C_ER_IRQHandler+0xf4>
 8012c90:	7efb      	ldrb	r3, [r7, #27]
 8012c92:	2b40      	cmp	r3, #64	; 0x40
 8012c94:	d107      	bne.n	8012ca6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	681a      	ldr	r2, [r3, #0]
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012ca4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8012ca6:	6a3b      	ldr	r3, [r7, #32]
 8012ca8:	0adb      	lsrs	r3, r3, #11
 8012caa:	f003 0301 	and.w	r3, r3, #1
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d00e      	beq.n	8012cd0 <HAL_I2C_ER_IRQHandler+0x12e>
 8012cb2:	69fb      	ldr	r3, [r7, #28]
 8012cb4:	0a1b      	lsrs	r3, r3, #8
 8012cb6:	f003 0301 	and.w	r3, r3, #1
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d008      	beq.n	8012cd0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8012cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc0:	f043 0308 	orr.w	r3, r3, #8
 8012cc4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8012cce:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8012cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d008      	beq.n	8012ce8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cdc:	431a      	orrs	r2, r3
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8012ce2:	6878      	ldr	r0, [r7, #4]
 8012ce4:	f001 f874 	bl	8013dd0 <I2C_ITError>
  }
}
 8012ce8:	bf00      	nop
 8012cea:	3728      	adds	r7, #40	; 0x28
 8012cec:	46bd      	mov	sp, r7
 8012cee:	bd80      	pop	{r7, pc}

08012cf0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8012cf0:	b480      	push	{r7}
 8012cf2:	b083      	sub	sp, #12
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8012cf8:	bf00      	nop
 8012cfa:	370c      	adds	r7, #12
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d02:	4770      	bx	lr

08012d04 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8012d04:	b480      	push	{r7}
 8012d06:	b083      	sub	sp, #12
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8012d0c:	bf00      	nop
 8012d0e:	370c      	adds	r7, #12
 8012d10:	46bd      	mov	sp, r7
 8012d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d16:	4770      	bx	lr

08012d18 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8012d18:	b480      	push	{r7}
 8012d1a:	b083      	sub	sp, #12
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8012d20:	bf00      	nop
 8012d22:	370c      	adds	r7, #12
 8012d24:	46bd      	mov	sp, r7
 8012d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2a:	4770      	bx	lr

08012d2c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8012d2c:	b480      	push	{r7}
 8012d2e:	b083      	sub	sp, #12
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
 8012d34:	460b      	mov	r3, r1
 8012d36:	70fb      	strb	r3, [r7, #3]
 8012d38:	4613      	mov	r3, r2
 8012d3a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8012d3c:	bf00      	nop
 8012d3e:	370c      	adds	r7, #12
 8012d40:	46bd      	mov	sp, r7
 8012d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d46:	4770      	bx	lr

08012d48 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8012d48:	b480      	push	{r7}
 8012d4a:	b083      	sub	sp, #12
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8012d50:	bf00      	nop
 8012d52:	370c      	adds	r7, #12
 8012d54:	46bd      	mov	sp, r7
 8012d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5a:	4770      	bx	lr

08012d5c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8012d5c:	b480      	push	{r7}
 8012d5e:	b083      	sub	sp, #12
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8012d64:	bf00      	nop
 8012d66:	370c      	adds	r7, #12
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6e:	4770      	bx	lr

08012d70 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8012d70:	b480      	push	{r7}
 8012d72:	b083      	sub	sp, #12
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8012d78:	bf00      	nop
 8012d7a:	370c      	adds	r7, #12
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d82:	4770      	bx	lr

08012d84 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8012d84:	b480      	push	{r7}
 8012d86:	b083      	sub	sp, #12
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8012d8c:	bf00      	nop
 8012d8e:	370c      	adds	r7, #12
 8012d90:	46bd      	mov	sp, r7
 8012d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d96:	4770      	bx	lr

08012d98 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8012d98:	b480      	push	{r7}
 8012d9a:	b083      	sub	sp, #12
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8012da0:	bf00      	nop
 8012da2:	370c      	adds	r7, #12
 8012da4:	46bd      	mov	sp, r7
 8012da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012daa:	4770      	bx	lr

08012dac <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b084      	sub	sp, #16
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012dba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012dc2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dc8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d150      	bne.n	8012e74 <I2C_MasterTransmit_TXE+0xc8>
 8012dd2:	7bfb      	ldrb	r3, [r7, #15]
 8012dd4:	2b21      	cmp	r3, #33	; 0x21
 8012dd6:	d14d      	bne.n	8012e74 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8012dd8:	68bb      	ldr	r3, [r7, #8]
 8012dda:	2b08      	cmp	r3, #8
 8012ddc:	d01d      	beq.n	8012e1a <I2C_MasterTransmit_TXE+0x6e>
 8012dde:	68bb      	ldr	r3, [r7, #8]
 8012de0:	2b20      	cmp	r3, #32
 8012de2:	d01a      	beq.n	8012e1a <I2C_MasterTransmit_TXE+0x6e>
 8012de4:	68bb      	ldr	r3, [r7, #8]
 8012de6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8012dea:	d016      	beq.n	8012e1a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	685a      	ldr	r2, [r3, #4]
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8012dfa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	2211      	movs	r2, #17
 8012e00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	2200      	movs	r2, #0
 8012e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	2220      	movs	r2, #32
 8012e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8012e12:	6878      	ldr	r0, [r7, #4]
 8012e14:	f7ff ff6c 	bl	8012cf0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8012e18:	e060      	b.n	8012edc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	685a      	ldr	r2, [r3, #4]
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8012e28:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	681a      	ldr	r2, [r3, #0]
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012e38:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	2220      	movs	r2, #32
 8012e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012e4e:	b2db      	uxtb	r3, r3
 8012e50:	2b40      	cmp	r3, #64	; 0x40
 8012e52:	d107      	bne.n	8012e64 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	2200      	movs	r2, #0
 8012e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8012e5c:	6878      	ldr	r0, [r7, #4]
 8012e5e:	f7ff ff7d 	bl	8012d5c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8012e62:	e03b      	b.n	8012edc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	2200      	movs	r2, #0
 8012e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8012e6c:	6878      	ldr	r0, [r7, #4]
 8012e6e:	f7ff ff3f 	bl	8012cf0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8012e72:	e033      	b.n	8012edc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8012e74:	7bfb      	ldrb	r3, [r7, #15]
 8012e76:	2b21      	cmp	r3, #33	; 0x21
 8012e78:	d005      	beq.n	8012e86 <I2C_MasterTransmit_TXE+0xda>
 8012e7a:	7bbb      	ldrb	r3, [r7, #14]
 8012e7c:	2b40      	cmp	r3, #64	; 0x40
 8012e7e:	d12d      	bne.n	8012edc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8012e80:	7bfb      	ldrb	r3, [r7, #15]
 8012e82:	2b22      	cmp	r3, #34	; 0x22
 8012e84:	d12a      	bne.n	8012edc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012e8a:	b29b      	uxth	r3, r3
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d108      	bne.n	8012ea2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	685a      	ldr	r2, [r3, #4]
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012e9e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8012ea0:	e01c      	b.n	8012edc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012ea8:	b2db      	uxtb	r3, r3
 8012eaa:	2b40      	cmp	r3, #64	; 0x40
 8012eac:	d103      	bne.n	8012eb6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8012eae:	6878      	ldr	r0, [r7, #4]
 8012eb0:	f000 f880 	bl	8012fb4 <I2C_MemoryTransmit_TXE_BTF>
}
 8012eb4:	e012      	b.n	8012edc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eba:	781a      	ldrb	r2, [r3, #0]
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ec6:	1c5a      	adds	r2, r3, #1
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012ed0:	b29b      	uxth	r3, r3
 8012ed2:	3b01      	subs	r3, #1
 8012ed4:	b29a      	uxth	r2, r3
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8012eda:	e7ff      	b.n	8012edc <I2C_MasterTransmit_TXE+0x130>
 8012edc:	bf00      	nop
 8012ede:	3710      	adds	r7, #16
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	bd80      	pop	{r7, pc}

08012ee4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	b084      	sub	sp, #16
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ef0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012ef8:	b2db      	uxtb	r3, r3
 8012efa:	2b21      	cmp	r3, #33	; 0x21
 8012efc:	d156      	bne.n	8012fac <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012f02:	b29b      	uxth	r3, r3
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d012      	beq.n	8012f2e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f0c:	781a      	ldrb	r2, [r3, #0]
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f18:	1c5a      	adds	r2, r3, #1
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012f22:	b29b      	uxth	r3, r3
 8012f24:	3b01      	subs	r3, #1
 8012f26:	b29a      	uxth	r2, r3
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8012f2c:	e03e      	b.n	8012fac <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	2b08      	cmp	r3, #8
 8012f32:	d01d      	beq.n	8012f70 <I2C_MasterTransmit_BTF+0x8c>
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	2b20      	cmp	r3, #32
 8012f38:	d01a      	beq.n	8012f70 <I2C_MasterTransmit_BTF+0x8c>
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8012f40:	d016      	beq.n	8012f70 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	685a      	ldr	r2, [r3, #4]
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8012f50:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	2211      	movs	r2, #17
 8012f56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	2220      	movs	r2, #32
 8012f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8012f68:	6878      	ldr	r0, [r7, #4]
 8012f6a:	f7ff fec1 	bl	8012cf0 <HAL_I2C_MasterTxCpltCallback>
}
 8012f6e:	e01d      	b.n	8012fac <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	685a      	ldr	r2, [r3, #4]
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8012f7e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	681a      	ldr	r2, [r3, #0]
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012f8e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	2200      	movs	r2, #0
 8012f94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	2220      	movs	r2, #32
 8012f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8012fa6:	6878      	ldr	r0, [r7, #4]
 8012fa8:	f7ff fea2 	bl	8012cf0 <HAL_I2C_MasterTxCpltCallback>
}
 8012fac:	bf00      	nop
 8012fae:	3710      	adds	r7, #16
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	bd80      	pop	{r7, pc}

08012fb4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b084      	sub	sp, #16
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012fc2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d11d      	bne.n	8013008 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012fd0:	2b01      	cmp	r3, #1
 8012fd2:	d10b      	bne.n	8012fec <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012fd8:	b2da      	uxtb	r2, r3
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012fe4:	1c9a      	adds	r2, r3, #2
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8012fea:	e06e      	b.n	80130ca <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012ff0:	b29b      	uxth	r3, r3
 8012ff2:	121b      	asrs	r3, r3, #8
 8012ff4:	b2da      	uxtb	r2, r3
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013000:	1c5a      	adds	r2, r3, #1
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	651a      	str	r2, [r3, #80]	; 0x50
}
 8013006:	e060      	b.n	80130ca <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801300c:	2b01      	cmp	r3, #1
 801300e:	d10b      	bne.n	8013028 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013014:	b2da      	uxtb	r2, r3
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013020:	1c5a      	adds	r2, r3, #1
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	651a      	str	r2, [r3, #80]	; 0x50
}
 8013026:	e050      	b.n	80130ca <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801302c:	2b02      	cmp	r3, #2
 801302e:	d14c      	bne.n	80130ca <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8013030:	7bfb      	ldrb	r3, [r7, #15]
 8013032:	2b22      	cmp	r3, #34	; 0x22
 8013034:	d108      	bne.n	8013048 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	681a      	ldr	r2, [r3, #0]
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013044:	601a      	str	r2, [r3, #0]
}
 8013046:	e040      	b.n	80130ca <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801304c:	b29b      	uxth	r3, r3
 801304e:	2b00      	cmp	r3, #0
 8013050:	d015      	beq.n	801307e <I2C_MemoryTransmit_TXE_BTF+0xca>
 8013052:	7bfb      	ldrb	r3, [r7, #15]
 8013054:	2b21      	cmp	r3, #33	; 0x21
 8013056:	d112      	bne.n	801307e <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801305c:	781a      	ldrb	r2, [r3, #0]
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013068:	1c5a      	adds	r2, r3, #1
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013072:	b29b      	uxth	r3, r3
 8013074:	3b01      	subs	r3, #1
 8013076:	b29a      	uxth	r2, r3
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801307c:	e025      	b.n	80130ca <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013082:	b29b      	uxth	r3, r3
 8013084:	2b00      	cmp	r3, #0
 8013086:	d120      	bne.n	80130ca <I2C_MemoryTransmit_TXE_BTF+0x116>
 8013088:	7bfb      	ldrb	r3, [r7, #15]
 801308a:	2b21      	cmp	r3, #33	; 0x21
 801308c:	d11d      	bne.n	80130ca <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	685a      	ldr	r2, [r3, #4]
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801309c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	681a      	ldr	r2, [r3, #0]
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80130ac:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	2200      	movs	r2, #0
 80130b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	2220      	movs	r2, #32
 80130b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	2200      	movs	r2, #0
 80130c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80130c4:	6878      	ldr	r0, [r7, #4]
 80130c6:	f7ff fe49 	bl	8012d5c <HAL_I2C_MemTxCpltCallback>
}
 80130ca:	bf00      	nop
 80130cc:	3710      	adds	r7, #16
 80130ce:	46bd      	mov	sp, r7
 80130d0:	bd80      	pop	{r7, pc}

080130d2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80130d2:	b580      	push	{r7, lr}
 80130d4:	b084      	sub	sp, #16
 80130d6:	af00      	add	r7, sp, #0
 80130d8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80130e0:	b2db      	uxtb	r3, r3
 80130e2:	2b22      	cmp	r3, #34	; 0x22
 80130e4:	f040 80a2 	bne.w	801322c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80130ec:	b29b      	uxth	r3, r3
 80130ee:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	2b03      	cmp	r3, #3
 80130f4:	d921      	bls.n	801313a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	691a      	ldr	r2, [r3, #16]
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013100:	b2d2      	uxtb	r2, r2
 8013102:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013108:	1c5a      	adds	r2, r3, #1
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013112:	b29b      	uxth	r3, r3
 8013114:	3b01      	subs	r3, #1
 8013116:	b29a      	uxth	r2, r3
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013120:	b29b      	uxth	r3, r3
 8013122:	2b03      	cmp	r3, #3
 8013124:	f040 8082 	bne.w	801322c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	685a      	ldr	r2, [r3, #4]
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013136:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8013138:	e078      	b.n	801322c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801313e:	2b02      	cmp	r3, #2
 8013140:	d074      	beq.n	801322c <I2C_MasterReceive_RXNE+0x15a>
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	2b01      	cmp	r3, #1
 8013146:	d002      	beq.n	801314e <I2C_MasterReceive_RXNE+0x7c>
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d16e      	bne.n	801322c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801314e:	6878      	ldr	r0, [r7, #4]
 8013150:	f001 f92a 	bl	80143a8 <I2C_WaitOnSTOPRequestThroughIT>
 8013154:	4603      	mov	r3, r0
 8013156:	2b00      	cmp	r3, #0
 8013158:	d142      	bne.n	80131e0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	681a      	ldr	r2, [r3, #0]
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013168:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	685a      	ldr	r2, [r3, #4]
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8013178:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	691a      	ldr	r2, [r3, #16]
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013184:	b2d2      	uxtb	r2, r2
 8013186:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801318c:	1c5a      	adds	r2, r3, #1
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013196:	b29b      	uxth	r3, r3
 8013198:	3b01      	subs	r3, #1
 801319a:	b29a      	uxth	r2, r3
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	2220      	movs	r2, #32
 80131a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80131ae:	b2db      	uxtb	r3, r3
 80131b0:	2b40      	cmp	r3, #64	; 0x40
 80131b2:	d10a      	bne.n	80131ca <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	2200      	movs	r2, #0
 80131b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	2200      	movs	r2, #0
 80131c0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80131c2:	6878      	ldr	r0, [r7, #4]
 80131c4:	f7ff fdd4 	bl	8012d70 <HAL_I2C_MemRxCpltCallback>
}
 80131c8:	e030      	b.n	801322c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	2200      	movs	r2, #0
 80131ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	2212      	movs	r2, #18
 80131d6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80131d8:	6878      	ldr	r0, [r7, #4]
 80131da:	f7f9 fd9b 	bl	800cd14 <HAL_I2C_MasterRxCpltCallback>
}
 80131de:	e025      	b.n	801322c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	685a      	ldr	r2, [r3, #4]
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80131ee:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	691a      	ldr	r2, [r3, #16]
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131fa:	b2d2      	uxtb	r2, r2
 80131fc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013202:	1c5a      	adds	r2, r3, #1
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801320c:	b29b      	uxth	r3, r3
 801320e:	3b01      	subs	r3, #1
 8013210:	b29a      	uxth	r2, r3
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	2220      	movs	r2, #32
 801321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	2200      	movs	r2, #0
 8013222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8013226:	6878      	ldr	r0, [r7, #4]
 8013228:	f7ff fdac 	bl	8012d84 <HAL_I2C_ErrorCallback>
}
 801322c:	bf00      	nop
 801322e:	3710      	adds	r7, #16
 8013230:	46bd      	mov	sp, r7
 8013232:	bd80      	pop	{r7, pc}

08013234 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b084      	sub	sp, #16
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013240:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013246:	b29b      	uxth	r3, r3
 8013248:	2b04      	cmp	r3, #4
 801324a:	d11b      	bne.n	8013284 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	685a      	ldr	r2, [r3, #4]
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801325a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	691a      	ldr	r2, [r3, #16]
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013266:	b2d2      	uxtb	r2, r2
 8013268:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801326e:	1c5a      	adds	r2, r3, #1
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013278:	b29b      	uxth	r3, r3
 801327a:	3b01      	subs	r3, #1
 801327c:	b29a      	uxth	r2, r3
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8013282:	e0bd      	b.n	8013400 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013288:	b29b      	uxth	r3, r3
 801328a:	2b03      	cmp	r3, #3
 801328c:	d129      	bne.n	80132e2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	685a      	ldr	r2, [r3, #4]
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801329c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	2b04      	cmp	r3, #4
 80132a2:	d00a      	beq.n	80132ba <I2C_MasterReceive_BTF+0x86>
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	2b02      	cmp	r3, #2
 80132a8:	d007      	beq.n	80132ba <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	681a      	ldr	r2, [r3, #0]
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80132b8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	691a      	ldr	r2, [r3, #16]
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132c4:	b2d2      	uxtb	r2, r2
 80132c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132cc:	1c5a      	adds	r2, r3, #1
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80132d6:	b29b      	uxth	r3, r3
 80132d8:	3b01      	subs	r3, #1
 80132da:	b29a      	uxth	r2, r3
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80132e0:	e08e      	b.n	8013400 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80132e6:	b29b      	uxth	r3, r3
 80132e8:	2b02      	cmp	r3, #2
 80132ea:	d176      	bne.n	80133da <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	2b01      	cmp	r3, #1
 80132f0:	d002      	beq.n	80132f8 <I2C_MasterReceive_BTF+0xc4>
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	2b10      	cmp	r3, #16
 80132f6:	d108      	bne.n	801330a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	681a      	ldr	r2, [r3, #0]
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013306:	601a      	str	r2, [r3, #0]
 8013308:	e019      	b.n	801333e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	2b04      	cmp	r3, #4
 801330e:	d002      	beq.n	8013316 <I2C_MasterReceive_BTF+0xe2>
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	2b02      	cmp	r3, #2
 8013314:	d108      	bne.n	8013328 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	681a      	ldr	r2, [r3, #0]
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013324:	601a      	str	r2, [r3, #0]
 8013326:	e00a      	b.n	801333e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	2b10      	cmp	r3, #16
 801332c:	d007      	beq.n	801333e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	681a      	ldr	r2, [r3, #0]
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801333c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	691a      	ldr	r2, [r3, #16]
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013348:	b2d2      	uxtb	r2, r2
 801334a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013350:	1c5a      	adds	r2, r3, #1
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801335a:	b29b      	uxth	r3, r3
 801335c:	3b01      	subs	r3, #1
 801335e:	b29a      	uxth	r2, r3
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	691a      	ldr	r2, [r3, #16]
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801336e:	b2d2      	uxtb	r2, r2
 8013370:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013376:	1c5a      	adds	r2, r3, #1
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013380:	b29b      	uxth	r3, r3
 8013382:	3b01      	subs	r3, #1
 8013384:	b29a      	uxth	r2, r3
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	685a      	ldr	r2, [r3, #4]
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8013398:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	2220      	movs	r2, #32
 801339e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80133a8:	b2db      	uxtb	r3, r3
 80133aa:	2b40      	cmp	r3, #64	; 0x40
 80133ac:	d10a      	bne.n	80133c4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	2200      	movs	r2, #0
 80133b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	2200      	movs	r2, #0
 80133ba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80133bc:	6878      	ldr	r0, [r7, #4]
 80133be:	f7ff fcd7 	bl	8012d70 <HAL_I2C_MemRxCpltCallback>
}
 80133c2:	e01d      	b.n	8013400 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	2200      	movs	r2, #0
 80133c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	2212      	movs	r2, #18
 80133d0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80133d2:	6878      	ldr	r0, [r7, #4]
 80133d4:	f7f9 fc9e 	bl	800cd14 <HAL_I2C_MasterRxCpltCallback>
}
 80133d8:	e012      	b.n	8013400 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	691a      	ldr	r2, [r3, #16]
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133e4:	b2d2      	uxtb	r2, r2
 80133e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133ec:	1c5a      	adds	r2, r3, #1
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80133f6:	b29b      	uxth	r3, r3
 80133f8:	3b01      	subs	r3, #1
 80133fa:	b29a      	uxth	r2, r3
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8013400:	bf00      	nop
 8013402:	3710      	adds	r7, #16
 8013404:	46bd      	mov	sp, r7
 8013406:	bd80      	pop	{r7, pc}

08013408 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8013408:	b480      	push	{r7}
 801340a:	b083      	sub	sp, #12
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013416:	b2db      	uxtb	r3, r3
 8013418:	2b40      	cmp	r3, #64	; 0x40
 801341a:	d117      	bne.n	801344c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013420:	2b00      	cmp	r3, #0
 8013422:	d109      	bne.n	8013438 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013428:	b2db      	uxtb	r3, r3
 801342a:	461a      	mov	r2, r3
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8013434:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8013436:	e067      	b.n	8013508 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801343c:	b2db      	uxtb	r3, r3
 801343e:	f043 0301 	orr.w	r3, r3, #1
 8013442:	b2da      	uxtb	r2, r3
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	611a      	str	r2, [r3, #16]
}
 801344a:	e05d      	b.n	8013508 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	691b      	ldr	r3, [r3, #16]
 8013450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013454:	d133      	bne.n	80134be <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801345c:	b2db      	uxtb	r3, r3
 801345e:	2b21      	cmp	r3, #33	; 0x21
 8013460:	d109      	bne.n	8013476 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013466:	b2db      	uxtb	r3, r3
 8013468:	461a      	mov	r2, r3
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8013472:	611a      	str	r2, [r3, #16]
 8013474:	e008      	b.n	8013488 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801347a:	b2db      	uxtb	r3, r3
 801347c:	f043 0301 	orr.w	r3, r3, #1
 8013480:	b2da      	uxtb	r2, r3
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801348c:	2b00      	cmp	r3, #0
 801348e:	d004      	beq.n	801349a <I2C_Master_SB+0x92>
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013496:	2b00      	cmp	r3, #0
 8013498:	d108      	bne.n	80134ac <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d032      	beq.n	8013508 <I2C_Master_SB+0x100>
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d02d      	beq.n	8013508 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	685a      	ldr	r2, [r3, #4]
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80134ba:	605a      	str	r2, [r3, #4]
}
 80134bc:	e024      	b.n	8013508 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d10e      	bne.n	80134e4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80134ca:	b29b      	uxth	r3, r3
 80134cc:	11db      	asrs	r3, r3, #7
 80134ce:	b2db      	uxtb	r3, r3
 80134d0:	f003 0306 	and.w	r3, r3, #6
 80134d4:	b2db      	uxtb	r3, r3
 80134d6:	f063 030f 	orn	r3, r3, #15
 80134da:	b2da      	uxtb	r2, r3
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	611a      	str	r2, [r3, #16]
}
 80134e2:	e011      	b.n	8013508 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80134e8:	2b01      	cmp	r3, #1
 80134ea:	d10d      	bne.n	8013508 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80134f0:	b29b      	uxth	r3, r3
 80134f2:	11db      	asrs	r3, r3, #7
 80134f4:	b2db      	uxtb	r3, r3
 80134f6:	f003 0306 	and.w	r3, r3, #6
 80134fa:	b2db      	uxtb	r3, r3
 80134fc:	f063 030e 	orn	r3, r3, #14
 8013500:	b2da      	uxtb	r2, r3
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	611a      	str	r2, [r3, #16]
}
 8013508:	bf00      	nop
 801350a:	370c      	adds	r7, #12
 801350c:	46bd      	mov	sp, r7
 801350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013512:	4770      	bx	lr

08013514 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8013514:	b480      	push	{r7}
 8013516:	b083      	sub	sp, #12
 8013518:	af00      	add	r7, sp, #0
 801351a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013520:	b2da      	uxtb	r2, r3
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801352c:	2b00      	cmp	r3, #0
 801352e:	d103      	bne.n	8013538 <I2C_Master_ADD10+0x24>
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013534:	2b00      	cmp	r3, #0
 8013536:	d011      	beq.n	801355c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801353c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801353e:	2b00      	cmp	r3, #0
 8013540:	d104      	bne.n	801354c <I2C_Master_ADD10+0x38>
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013548:	2b00      	cmp	r3, #0
 801354a:	d007      	beq.n	801355c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	685a      	ldr	r2, [r3, #4]
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801355a:	605a      	str	r2, [r3, #4]
    }
  }
}
 801355c:	bf00      	nop
 801355e:	370c      	adds	r7, #12
 8013560:	46bd      	mov	sp, r7
 8013562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013566:	4770      	bx	lr

08013568 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8013568:	b480      	push	{r7}
 801356a:	b091      	sub	sp, #68	; 0x44
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013576:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801357e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013584:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801358c:	b2db      	uxtb	r3, r3
 801358e:	2b22      	cmp	r3, #34	; 0x22
 8013590:	f040 8169 	bne.w	8013866 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013598:	2b00      	cmp	r3, #0
 801359a:	d10f      	bne.n	80135bc <I2C_Master_ADDR+0x54>
 801359c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80135a0:	2b40      	cmp	r3, #64	; 0x40
 80135a2:	d10b      	bne.n	80135bc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80135a4:	2300      	movs	r3, #0
 80135a6:	633b      	str	r3, [r7, #48]	; 0x30
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	695b      	ldr	r3, [r3, #20]
 80135ae:	633b      	str	r3, [r7, #48]	; 0x30
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	699b      	ldr	r3, [r3, #24]
 80135b6:	633b      	str	r3, [r7, #48]	; 0x30
 80135b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ba:	e160      	b.n	801387e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d11d      	bne.n	8013600 <I2C_Master_ADDR+0x98>
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	691b      	ldr	r3, [r3, #16]
 80135c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80135cc:	d118      	bne.n	8013600 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80135ce:	2300      	movs	r3, #0
 80135d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	695b      	ldr	r3, [r3, #20]
 80135d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	699b      	ldr	r3, [r3, #24]
 80135e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80135e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	681a      	ldr	r2, [r3, #0]
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80135f2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135f8:	1c5a      	adds	r2, r3, #1
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	651a      	str	r2, [r3, #80]	; 0x50
 80135fe:	e13e      	b.n	801387e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013604:	b29b      	uxth	r3, r3
 8013606:	2b00      	cmp	r3, #0
 8013608:	d113      	bne.n	8013632 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801360a:	2300      	movs	r3, #0
 801360c:	62bb      	str	r3, [r7, #40]	; 0x28
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	695b      	ldr	r3, [r3, #20]
 8013614:	62bb      	str	r3, [r7, #40]	; 0x28
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	699b      	ldr	r3, [r3, #24]
 801361c:	62bb      	str	r3, [r7, #40]	; 0x28
 801361e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	681a      	ldr	r2, [r3, #0]
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801362e:	601a      	str	r2, [r3, #0]
 8013630:	e115      	b.n	801385e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013636:	b29b      	uxth	r3, r3
 8013638:	2b01      	cmp	r3, #1
 801363a:	f040 808a 	bne.w	8013752 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 801363e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013640:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8013644:	d137      	bne.n	80136b6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	681a      	ldr	r2, [r3, #0]
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013654:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	685b      	ldr	r3, [r3, #4]
 801365c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013660:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013664:	d113      	bne.n	801368e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	681a      	ldr	r2, [r3, #0]
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013674:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013676:	2300      	movs	r3, #0
 8013678:	627b      	str	r3, [r7, #36]	; 0x24
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	695b      	ldr	r3, [r3, #20]
 8013680:	627b      	str	r3, [r7, #36]	; 0x24
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	699b      	ldr	r3, [r3, #24]
 8013688:	627b      	str	r3, [r7, #36]	; 0x24
 801368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801368c:	e0e7      	b.n	801385e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801368e:	2300      	movs	r3, #0
 8013690:	623b      	str	r3, [r7, #32]
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	695b      	ldr	r3, [r3, #20]
 8013698:	623b      	str	r3, [r7, #32]
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	699b      	ldr	r3, [r3, #24]
 80136a0:	623b      	str	r3, [r7, #32]
 80136a2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	681a      	ldr	r2, [r3, #0]
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80136b2:	601a      	str	r2, [r3, #0]
 80136b4:	e0d3      	b.n	801385e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80136b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136b8:	2b08      	cmp	r3, #8
 80136ba:	d02e      	beq.n	801371a <I2C_Master_ADDR+0x1b2>
 80136bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136be:	2b20      	cmp	r3, #32
 80136c0:	d02b      	beq.n	801371a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80136c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136c4:	2b12      	cmp	r3, #18
 80136c6:	d102      	bne.n	80136ce <I2C_Master_ADDR+0x166>
 80136c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136ca:	2b01      	cmp	r3, #1
 80136cc:	d125      	bne.n	801371a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80136ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136d0:	2b04      	cmp	r3, #4
 80136d2:	d00e      	beq.n	80136f2 <I2C_Master_ADDR+0x18a>
 80136d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136d6:	2b02      	cmp	r3, #2
 80136d8:	d00b      	beq.n	80136f2 <I2C_Master_ADDR+0x18a>
 80136da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136dc:	2b10      	cmp	r3, #16
 80136de:	d008      	beq.n	80136f2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	681a      	ldr	r2, [r3, #0]
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80136ee:	601a      	str	r2, [r3, #0]
 80136f0:	e007      	b.n	8013702 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	681a      	ldr	r2, [r3, #0]
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013700:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013702:	2300      	movs	r3, #0
 8013704:	61fb      	str	r3, [r7, #28]
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	695b      	ldr	r3, [r3, #20]
 801370c:	61fb      	str	r3, [r7, #28]
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	699b      	ldr	r3, [r3, #24]
 8013714:	61fb      	str	r3, [r7, #28]
 8013716:	69fb      	ldr	r3, [r7, #28]
 8013718:	e0a1      	b.n	801385e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	681a      	ldr	r2, [r3, #0]
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013728:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801372a:	2300      	movs	r3, #0
 801372c:	61bb      	str	r3, [r7, #24]
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	695b      	ldr	r3, [r3, #20]
 8013734:	61bb      	str	r3, [r7, #24]
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	699b      	ldr	r3, [r3, #24]
 801373c:	61bb      	str	r3, [r7, #24]
 801373e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	681a      	ldr	r2, [r3, #0]
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801374e:	601a      	str	r2, [r3, #0]
 8013750:	e085      	b.n	801385e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013756:	b29b      	uxth	r3, r3
 8013758:	2b02      	cmp	r3, #2
 801375a:	d14d      	bne.n	80137f8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801375c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801375e:	2b04      	cmp	r3, #4
 8013760:	d016      	beq.n	8013790 <I2C_Master_ADDR+0x228>
 8013762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013764:	2b02      	cmp	r3, #2
 8013766:	d013      	beq.n	8013790 <I2C_Master_ADDR+0x228>
 8013768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801376a:	2b10      	cmp	r3, #16
 801376c:	d010      	beq.n	8013790 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	681a      	ldr	r2, [r3, #0]
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801377c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	681a      	ldr	r2, [r3, #0]
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801378c:	601a      	str	r2, [r3, #0]
 801378e:	e007      	b.n	80137a0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	681a      	ldr	r2, [r3, #0]
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801379e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	685b      	ldr	r3, [r3, #4]
 80137a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80137aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80137ae:	d117      	bne.n	80137e0 <I2C_Master_ADDR+0x278>
 80137b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80137b6:	d00b      	beq.n	80137d0 <I2C_Master_ADDR+0x268>
 80137b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137ba:	2b01      	cmp	r3, #1
 80137bc:	d008      	beq.n	80137d0 <I2C_Master_ADDR+0x268>
 80137be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137c0:	2b08      	cmp	r3, #8
 80137c2:	d005      	beq.n	80137d0 <I2C_Master_ADDR+0x268>
 80137c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137c6:	2b10      	cmp	r3, #16
 80137c8:	d002      	beq.n	80137d0 <I2C_Master_ADDR+0x268>
 80137ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137cc:	2b20      	cmp	r3, #32
 80137ce:	d107      	bne.n	80137e0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	685a      	ldr	r2, [r3, #4]
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80137de:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80137e0:	2300      	movs	r3, #0
 80137e2:	617b      	str	r3, [r7, #20]
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	695b      	ldr	r3, [r3, #20]
 80137ea:	617b      	str	r3, [r7, #20]
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	699b      	ldr	r3, [r3, #24]
 80137f2:	617b      	str	r3, [r7, #20]
 80137f4:	697b      	ldr	r3, [r7, #20]
 80137f6:	e032      	b.n	801385e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	681a      	ldr	r2, [r3, #0]
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013806:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	685b      	ldr	r3, [r3, #4]
 801380e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013816:	d117      	bne.n	8013848 <I2C_Master_ADDR+0x2e0>
 8013818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801381a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801381e:	d00b      	beq.n	8013838 <I2C_Master_ADDR+0x2d0>
 8013820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013822:	2b01      	cmp	r3, #1
 8013824:	d008      	beq.n	8013838 <I2C_Master_ADDR+0x2d0>
 8013826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013828:	2b08      	cmp	r3, #8
 801382a:	d005      	beq.n	8013838 <I2C_Master_ADDR+0x2d0>
 801382c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801382e:	2b10      	cmp	r3, #16
 8013830:	d002      	beq.n	8013838 <I2C_Master_ADDR+0x2d0>
 8013832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013834:	2b20      	cmp	r3, #32
 8013836:	d107      	bne.n	8013848 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	685a      	ldr	r2, [r3, #4]
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8013846:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013848:	2300      	movs	r3, #0
 801384a:	613b      	str	r3, [r7, #16]
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	695b      	ldr	r3, [r3, #20]
 8013852:	613b      	str	r3, [r7, #16]
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	699b      	ldr	r3, [r3, #24]
 801385a:	613b      	str	r3, [r7, #16]
 801385c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	2200      	movs	r2, #0
 8013862:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8013864:	e00b      	b.n	801387e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013866:	2300      	movs	r3, #0
 8013868:	60fb      	str	r3, [r7, #12]
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	695b      	ldr	r3, [r3, #20]
 8013870:	60fb      	str	r3, [r7, #12]
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	699b      	ldr	r3, [r3, #24]
 8013878:	60fb      	str	r3, [r7, #12]
 801387a:	68fb      	ldr	r3, [r7, #12]
}
 801387c:	e7ff      	b.n	801387e <I2C_Master_ADDR+0x316>
 801387e:	bf00      	nop
 8013880:	3744      	adds	r7, #68	; 0x44
 8013882:	46bd      	mov	sp, r7
 8013884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013888:	4770      	bx	lr

0801388a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801388a:	b580      	push	{r7, lr}
 801388c:	b084      	sub	sp, #16
 801388e:	af00      	add	r7, sp, #0
 8013890:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013898:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801389e:	b29b      	uxth	r3, r3
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d02b      	beq.n	80138fc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138a8:	781a      	ldrb	r2, [r3, #0]
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138b4:	1c5a      	adds	r2, r3, #1
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80138be:	b29b      	uxth	r3, r3
 80138c0:	3b01      	subs	r3, #1
 80138c2:	b29a      	uxth	r2, r3
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80138cc:	b29b      	uxth	r3, r3
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d114      	bne.n	80138fc <I2C_SlaveTransmit_TXE+0x72>
 80138d2:	7bfb      	ldrb	r3, [r7, #15]
 80138d4:	2b29      	cmp	r3, #41	; 0x29
 80138d6:	d111      	bne.n	80138fc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	685a      	ldr	r2, [r3, #4]
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80138e6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	2221      	movs	r2, #33	; 0x21
 80138ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	2228      	movs	r2, #40	; 0x28
 80138f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80138f6:	6878      	ldr	r0, [r7, #4]
 80138f8:	f7ff fa04 	bl	8012d04 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80138fc:	bf00      	nop
 80138fe:	3710      	adds	r7, #16
 8013900:	46bd      	mov	sp, r7
 8013902:	bd80      	pop	{r7, pc}

08013904 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8013904:	b480      	push	{r7}
 8013906:	b083      	sub	sp, #12
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013910:	b29b      	uxth	r3, r3
 8013912:	2b00      	cmp	r3, #0
 8013914:	d011      	beq.n	801393a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801391a:	781a      	ldrb	r2, [r3, #0]
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013926:	1c5a      	adds	r2, r3, #1
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013930:	b29b      	uxth	r3, r3
 8013932:	3b01      	subs	r3, #1
 8013934:	b29a      	uxth	r2, r3
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801393a:	bf00      	nop
 801393c:	370c      	adds	r7, #12
 801393e:	46bd      	mov	sp, r7
 8013940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013944:	4770      	bx	lr

08013946 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8013946:	b580      	push	{r7, lr}
 8013948:	b084      	sub	sp, #16
 801394a:	af00      	add	r7, sp, #0
 801394c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013954:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801395a:	b29b      	uxth	r3, r3
 801395c:	2b00      	cmp	r3, #0
 801395e:	d02c      	beq.n	80139ba <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	691a      	ldr	r2, [r3, #16]
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801396a:	b2d2      	uxtb	r2, r2
 801396c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013972:	1c5a      	adds	r2, r3, #1
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801397c:	b29b      	uxth	r3, r3
 801397e:	3b01      	subs	r3, #1
 8013980:	b29a      	uxth	r2, r3
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801398a:	b29b      	uxth	r3, r3
 801398c:	2b00      	cmp	r3, #0
 801398e:	d114      	bne.n	80139ba <I2C_SlaveReceive_RXNE+0x74>
 8013990:	7bfb      	ldrb	r3, [r7, #15]
 8013992:	2b2a      	cmp	r3, #42	; 0x2a
 8013994:	d111      	bne.n	80139ba <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	685a      	ldr	r2, [r3, #4]
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80139a4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	2222      	movs	r2, #34	; 0x22
 80139aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	2228      	movs	r2, #40	; 0x28
 80139b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80139b4:	6878      	ldr	r0, [r7, #4]
 80139b6:	f7ff f9af 	bl	8012d18 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80139ba:	bf00      	nop
 80139bc:	3710      	adds	r7, #16
 80139be:	46bd      	mov	sp, r7
 80139c0:	bd80      	pop	{r7, pc}

080139c2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80139c2:	b480      	push	{r7}
 80139c4:	b083      	sub	sp, #12
 80139c6:	af00      	add	r7, sp, #0
 80139c8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80139ce:	b29b      	uxth	r3, r3
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d012      	beq.n	80139fa <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	691a      	ldr	r2, [r3, #16]
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139de:	b2d2      	uxtb	r2, r2
 80139e0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139e6:	1c5a      	adds	r2, r3, #1
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80139f0:	b29b      	uxth	r3, r3
 80139f2:	3b01      	subs	r3, #1
 80139f4:	b29a      	uxth	r2, r3
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80139fa:	bf00      	nop
 80139fc:	370c      	adds	r7, #12
 80139fe:	46bd      	mov	sp, r7
 8013a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a04:	4770      	bx	lr

08013a06 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8013a06:	b580      	push	{r7, lr}
 8013a08:	b084      	sub	sp, #16
 8013a0a:	af00      	add	r7, sp, #0
 8013a0c:	6078      	str	r0, [r7, #4]
 8013a0e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8013a10:	2300      	movs	r3, #0
 8013a12:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013a1a:	b2db      	uxtb	r3, r3
 8013a1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8013a20:	2b28      	cmp	r3, #40	; 0x28
 8013a22:	d127      	bne.n	8013a74 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	685a      	ldr	r2, [r3, #4]
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013a32:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8013a34:	683b      	ldr	r3, [r7, #0]
 8013a36:	089b      	lsrs	r3, r3, #2
 8013a38:	f003 0301 	and.w	r3, r3, #1
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d101      	bne.n	8013a44 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8013a40:	2301      	movs	r3, #1
 8013a42:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8013a44:	683b      	ldr	r3, [r7, #0]
 8013a46:	09db      	lsrs	r3, r3, #7
 8013a48:	f003 0301 	and.w	r3, r3, #1
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d103      	bne.n	8013a58 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	68db      	ldr	r3, [r3, #12]
 8013a54:	81bb      	strh	r3, [r7, #12]
 8013a56:	e002      	b.n	8013a5e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	699b      	ldr	r3, [r3, #24]
 8013a5c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	2200      	movs	r2, #0
 8013a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8013a66:	89ba      	ldrh	r2, [r7, #12]
 8013a68:	7bfb      	ldrb	r3, [r7, #15]
 8013a6a:	4619      	mov	r1, r3
 8013a6c:	6878      	ldr	r0, [r7, #4]
 8013a6e:	f7ff f95d 	bl	8012d2c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8013a72:	e008      	b.n	8013a86 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	f06f 0202 	mvn.w	r2, #2
 8013a7c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	2200      	movs	r2, #0
 8013a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8013a86:	bf00      	nop
 8013a88:	3710      	adds	r7, #16
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	bd80      	pop	{r7, pc}
	...

08013a90 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b084      	sub	sp, #16
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013a9e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	685a      	ldr	r2, [r3, #4]
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8013aae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	60bb      	str	r3, [r7, #8]
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	695b      	ldr	r3, [r3, #20]
 8013aba:	60bb      	str	r3, [r7, #8]
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	681a      	ldr	r2, [r3, #0]
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	f042 0201 	orr.w	r2, r2, #1
 8013aca:	601a      	str	r2, [r3, #0]
 8013acc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	681a      	ldr	r2, [r3, #0]
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013adc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	685b      	ldr	r3, [r3, #4]
 8013ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013aec:	d172      	bne.n	8013bd4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8013aee:	7bfb      	ldrb	r3, [r7, #15]
 8013af0:	2b22      	cmp	r3, #34	; 0x22
 8013af2:	d002      	beq.n	8013afa <I2C_Slave_STOPF+0x6a>
 8013af4:	7bfb      	ldrb	r3, [r7, #15]
 8013af6:	2b2a      	cmp	r3, #42	; 0x2a
 8013af8:	d135      	bne.n	8013b66 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	685b      	ldr	r3, [r3, #4]
 8013b02:	b29a      	uxth	r2, r3
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013b0c:	b29b      	uxth	r3, r3
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d005      	beq.n	8013b1e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b16:	f043 0204 	orr.w	r2, r3, #4
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	685a      	ldr	r2, [r3, #4]
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013b2c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b32:	4618      	mov	r0, r3
 8013b34:	f7fe f87a 	bl	8011c2c <HAL_DMA_GetState>
 8013b38:	4603      	mov	r3, r0
 8013b3a:	2b01      	cmp	r3, #1
 8013b3c:	d049      	beq.n	8013bd2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b42:	4a69      	ldr	r2, [pc, #420]	; (8013ce8 <I2C_Slave_STOPF+0x258>)
 8013b44:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f7fd fec2 	bl	80118d4 <HAL_DMA_Abort_IT>
 8013b50:	4603      	mov	r3, r0
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d03d      	beq.n	8013bd2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013b5c:	687a      	ldr	r2, [r7, #4]
 8013b5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8013b60:	4610      	mov	r0, r2
 8013b62:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8013b64:	e035      	b.n	8013bd2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	685b      	ldr	r3, [r3, #4]
 8013b6e:	b29a      	uxth	r2, r3
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013b78:	b29b      	uxth	r3, r3
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d005      	beq.n	8013b8a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b82:	f043 0204 	orr.w	r2, r3, #4
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	685a      	ldr	r2, [r3, #4]
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013b98:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f7fe f844 	bl	8011c2c <HAL_DMA_GetState>
 8013ba4:	4603      	mov	r3, r0
 8013ba6:	2b01      	cmp	r3, #1
 8013ba8:	d014      	beq.n	8013bd4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013bae:	4a4e      	ldr	r2, [pc, #312]	; (8013ce8 <I2C_Slave_STOPF+0x258>)
 8013bb0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	f7fd fe8c 	bl	80118d4 <HAL_DMA_Abort_IT>
 8013bbc:	4603      	mov	r3, r0
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d008      	beq.n	8013bd4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013bc8:	687a      	ldr	r2, [r7, #4]
 8013bca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013bcc:	4610      	mov	r0, r2
 8013bce:	4798      	blx	r3
 8013bd0:	e000      	b.n	8013bd4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8013bd2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013bd8:	b29b      	uxth	r3, r3
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d03e      	beq.n	8013c5c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	695b      	ldr	r3, [r3, #20]
 8013be4:	f003 0304 	and.w	r3, r3, #4
 8013be8:	2b04      	cmp	r3, #4
 8013bea:	d112      	bne.n	8013c12 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	691a      	ldr	r2, [r3, #16]
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bf6:	b2d2      	uxtb	r2, r2
 8013bf8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bfe:	1c5a      	adds	r2, r3, #1
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013c08:	b29b      	uxth	r3, r3
 8013c0a:	3b01      	subs	r3, #1
 8013c0c:	b29a      	uxth	r2, r3
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	695b      	ldr	r3, [r3, #20]
 8013c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c1c:	2b40      	cmp	r3, #64	; 0x40
 8013c1e:	d112      	bne.n	8013c46 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	691a      	ldr	r2, [r3, #16]
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c2a:	b2d2      	uxtb	r2, r2
 8013c2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c32:	1c5a      	adds	r2, r3, #1
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013c3c:	b29b      	uxth	r3, r3
 8013c3e:	3b01      	subs	r3, #1
 8013c40:	b29a      	uxth	r2, r3
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013c4a:	b29b      	uxth	r3, r3
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d005      	beq.n	8013c5c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c54:	f043 0204 	orr.w	r2, r3, #4
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d003      	beq.n	8013c6c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8013c64:	6878      	ldr	r0, [r7, #4]
 8013c66:	f000 f8b3 	bl	8013dd0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8013c6a:	e039      	b.n	8013ce0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8013c6c:	7bfb      	ldrb	r3, [r7, #15]
 8013c6e:	2b2a      	cmp	r3, #42	; 0x2a
 8013c70:	d109      	bne.n	8013c86 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	2200      	movs	r2, #0
 8013c76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	2228      	movs	r2, #40	; 0x28
 8013c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8013c80:	6878      	ldr	r0, [r7, #4]
 8013c82:	f7ff f849 	bl	8012d18 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013c8c:	b2db      	uxtb	r3, r3
 8013c8e:	2b28      	cmp	r3, #40	; 0x28
 8013c90:	d111      	bne.n	8013cb6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	4a15      	ldr	r2, [pc, #84]	; (8013cec <I2C_Slave_STOPF+0x25c>)
 8013c96:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	2220      	movs	r2, #32
 8013ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	2200      	movs	r2, #0
 8013caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8013cae:	6878      	ldr	r0, [r7, #4]
 8013cb0:	f7ff f84a 	bl	8012d48 <HAL_I2C_ListenCpltCallback>
}
 8013cb4:	e014      	b.n	8013ce0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013cba:	2b22      	cmp	r3, #34	; 0x22
 8013cbc:	d002      	beq.n	8013cc4 <I2C_Slave_STOPF+0x234>
 8013cbe:	7bfb      	ldrb	r3, [r7, #15]
 8013cc0:	2b22      	cmp	r3, #34	; 0x22
 8013cc2:	d10d      	bne.n	8013ce0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	2220      	movs	r2, #32
 8013cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8013cda:	6878      	ldr	r0, [r7, #4]
 8013cdc:	f7ff f81c 	bl	8012d18 <HAL_I2C_SlaveRxCpltCallback>
}
 8013ce0:	bf00      	nop
 8013ce2:	3710      	adds	r7, #16
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}
 8013ce8:	08014259 	.word	0x08014259
 8013cec:	ffff0000 	.word	0xffff0000

08013cf0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b084      	sub	sp, #16
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d04:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8013d06:	68bb      	ldr	r3, [r7, #8]
 8013d08:	2b08      	cmp	r3, #8
 8013d0a:	d002      	beq.n	8013d12 <I2C_Slave_AF+0x22>
 8013d0c:	68bb      	ldr	r3, [r7, #8]
 8013d0e:	2b20      	cmp	r3, #32
 8013d10:	d129      	bne.n	8013d66 <I2C_Slave_AF+0x76>
 8013d12:	7bfb      	ldrb	r3, [r7, #15]
 8013d14:	2b28      	cmp	r3, #40	; 0x28
 8013d16:	d126      	bne.n	8013d66 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	4a2c      	ldr	r2, [pc, #176]	; (8013dcc <I2C_Slave_AF+0xdc>)
 8013d1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	685a      	ldr	r2, [r3, #4]
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8013d2c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8013d36:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	681a      	ldr	r2, [r3, #0]
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013d46:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	2220      	movs	r2, #32
 8013d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	2200      	movs	r2, #0
 8013d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8013d5e:	6878      	ldr	r0, [r7, #4]
 8013d60:	f7fe fff2 	bl	8012d48 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8013d64:	e02e      	b.n	8013dc4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8013d66:	7bfb      	ldrb	r3, [r7, #15]
 8013d68:	2b21      	cmp	r3, #33	; 0x21
 8013d6a:	d126      	bne.n	8013dba <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	4a17      	ldr	r2, [pc, #92]	; (8013dcc <I2C_Slave_AF+0xdc>)
 8013d70:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	2221      	movs	r2, #33	; 0x21
 8013d76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	2220      	movs	r2, #32
 8013d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	2200      	movs	r2, #0
 8013d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	685a      	ldr	r2, [r3, #4]
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8013d96:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8013da0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	681a      	ldr	r2, [r3, #0]
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013db0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8013db2:	6878      	ldr	r0, [r7, #4]
 8013db4:	f7fe ffa6 	bl	8012d04 <HAL_I2C_SlaveTxCpltCallback>
}
 8013db8:	e004      	b.n	8013dc4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8013dc2:	615a      	str	r2, [r3, #20]
}
 8013dc4:	bf00      	nop
 8013dc6:	3710      	adds	r7, #16
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bd80      	pop	{r7, pc}
 8013dcc:	ffff0000 	.word	0xffff0000

08013dd0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b084      	sub	sp, #16
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013dde:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013de6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8013de8:	7bbb      	ldrb	r3, [r7, #14]
 8013dea:	2b10      	cmp	r3, #16
 8013dec:	d002      	beq.n	8013df4 <I2C_ITError+0x24>
 8013dee:	7bbb      	ldrb	r3, [r7, #14]
 8013df0:	2b40      	cmp	r3, #64	; 0x40
 8013df2:	d10a      	bne.n	8013e0a <I2C_ITError+0x3a>
 8013df4:	7bfb      	ldrb	r3, [r7, #15]
 8013df6:	2b22      	cmp	r3, #34	; 0x22
 8013df8:	d107      	bne.n	8013e0a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	681a      	ldr	r2, [r3, #0]
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013e08:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8013e0a:	7bfb      	ldrb	r3, [r7, #15]
 8013e0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8013e10:	2b28      	cmp	r3, #40	; 0x28
 8013e12:	d107      	bne.n	8013e24 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	2200      	movs	r2, #0
 8013e18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	2228      	movs	r2, #40	; 0x28
 8013e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8013e22:	e015      	b.n	8013e50 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	685b      	ldr	r3, [r3, #4]
 8013e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013e32:	d00a      	beq.n	8013e4a <I2C_ITError+0x7a>
 8013e34:	7bfb      	ldrb	r3, [r7, #15]
 8013e36:	2b60      	cmp	r3, #96	; 0x60
 8013e38:	d007      	beq.n	8013e4a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	2220      	movs	r2, #32
 8013e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	2200      	movs	r2, #0
 8013e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	2200      	movs	r2, #0
 8013e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	685b      	ldr	r3, [r3, #4]
 8013e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013e5e:	d162      	bne.n	8013f26 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	685a      	ldr	r2, [r3, #4]
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013e6e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8013e78:	b2db      	uxtb	r3, r3
 8013e7a:	2b01      	cmp	r3, #1
 8013e7c:	d020      	beq.n	8013ec0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e82:	4a6a      	ldr	r2, [pc, #424]	; (801402c <I2C_ITError+0x25c>)
 8013e84:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	f7fd fd22 	bl	80118d4 <HAL_DMA_Abort_IT>
 8013e90:	4603      	mov	r3, r0
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	f000 8089 	beq.w	8013faa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	681a      	ldr	r2, [r3, #0]
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	f022 0201 	bic.w	r2, r2, #1
 8013ea6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	2220      	movs	r2, #32
 8013eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013eb6:	687a      	ldr	r2, [r7, #4]
 8013eb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013eba:	4610      	mov	r0, r2
 8013ebc:	4798      	blx	r3
 8013ebe:	e074      	b.n	8013faa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ec4:	4a59      	ldr	r2, [pc, #356]	; (801402c <I2C_ITError+0x25c>)
 8013ec6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ecc:	4618      	mov	r0, r3
 8013ece:	f7fd fd01 	bl	80118d4 <HAL_DMA_Abort_IT>
 8013ed2:	4603      	mov	r3, r0
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d068      	beq.n	8013faa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	695b      	ldr	r3, [r3, #20]
 8013ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ee2:	2b40      	cmp	r3, #64	; 0x40
 8013ee4:	d10b      	bne.n	8013efe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	691a      	ldr	r2, [r3, #16]
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ef0:	b2d2      	uxtb	r2, r2
 8013ef2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ef8:	1c5a      	adds	r2, r3, #1
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	681a      	ldr	r2, [r3, #0]
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	f022 0201 	bic.w	r2, r2, #1
 8013f0c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	2220      	movs	r2, #32
 8013f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013f1c:	687a      	ldr	r2, [r7, #4]
 8013f1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8013f20:	4610      	mov	r0, r2
 8013f22:	4798      	blx	r3
 8013f24:	e041      	b.n	8013faa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013f2c:	b2db      	uxtb	r3, r3
 8013f2e:	2b60      	cmp	r3, #96	; 0x60
 8013f30:	d125      	bne.n	8013f7e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	2220      	movs	r2, #32
 8013f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	695b      	ldr	r3, [r3, #20]
 8013f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f4a:	2b40      	cmp	r3, #64	; 0x40
 8013f4c:	d10b      	bne.n	8013f66 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	691a      	ldr	r2, [r3, #16]
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f58:	b2d2      	uxtb	r2, r2
 8013f5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f60:	1c5a      	adds	r2, r3, #1
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	681a      	ldr	r2, [r3, #0]
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	f022 0201 	bic.w	r2, r2, #1
 8013f74:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8013f76:	6878      	ldr	r0, [r7, #4]
 8013f78:	f7fe ff0e 	bl	8012d98 <HAL_I2C_AbortCpltCallback>
 8013f7c:	e015      	b.n	8013faa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	695b      	ldr	r3, [r3, #20]
 8013f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f88:	2b40      	cmp	r3, #64	; 0x40
 8013f8a:	d10b      	bne.n	8013fa4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	691a      	ldr	r2, [r3, #16]
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f96:	b2d2      	uxtb	r2, r2
 8013f98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f9e:	1c5a      	adds	r2, r3, #1
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8013fa4:	6878      	ldr	r0, [r7, #4]
 8013fa6:	f7fe feed 	bl	8012d84 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fae:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8013fb0:	68bb      	ldr	r3, [r7, #8]
 8013fb2:	f003 0301 	and.w	r3, r3, #1
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d10e      	bne.n	8013fd8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8013fba:	68bb      	ldr	r3, [r7, #8]
 8013fbc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d109      	bne.n	8013fd8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8013fc4:	68bb      	ldr	r3, [r7, #8]
 8013fc6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d104      	bne.n	8013fd8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8013fce:	68bb      	ldr	r3, [r7, #8]
 8013fd0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d007      	beq.n	8013fe8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	685a      	ldr	r2, [r3, #4]
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8013fe6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013fee:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ff4:	f003 0304 	and.w	r3, r3, #4
 8013ff8:	2b04      	cmp	r3, #4
 8013ffa:	d113      	bne.n	8014024 <I2C_ITError+0x254>
 8013ffc:	7bfb      	ldrb	r3, [r7, #15]
 8013ffe:	2b28      	cmp	r3, #40	; 0x28
 8014000:	d110      	bne.n	8014024 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	4a0a      	ldr	r2, [pc, #40]	; (8014030 <I2C_ITError+0x260>)
 8014006:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	2200      	movs	r2, #0
 801400c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	2220      	movs	r2, #32
 8014012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	2200      	movs	r2, #0
 801401a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801401e:	6878      	ldr	r0, [r7, #4]
 8014020:	f7fe fe92 	bl	8012d48 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8014024:	bf00      	nop
 8014026:	3710      	adds	r7, #16
 8014028:	46bd      	mov	sp, r7
 801402a:	bd80      	pop	{r7, pc}
 801402c:	08014259 	.word	0x08014259
 8014030:	ffff0000 	.word	0xffff0000

08014034 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b086      	sub	sp, #24
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014040:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8014042:	697b      	ldr	r3, [r7, #20]
 8014044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014048:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801404a:	697b      	ldr	r3, [r7, #20]
 801404c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8014050:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8014052:	697b      	ldr	r3, [r7, #20]
 8014054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014056:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8014058:	697b      	ldr	r3, [r7, #20]
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	685a      	ldr	r2, [r3, #4]
 801405e:	697b      	ldr	r3, [r7, #20]
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8014066:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8014068:	697b      	ldr	r3, [r7, #20]
 801406a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801406c:	2b00      	cmp	r3, #0
 801406e:	d003      	beq.n	8014078 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8014070:	697b      	ldr	r3, [r7, #20]
 8014072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014074:	2200      	movs	r2, #0
 8014076:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8014078:	697b      	ldr	r3, [r7, #20]
 801407a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801407c:	2b00      	cmp	r3, #0
 801407e:	d003      	beq.n	8014088 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8014080:	697b      	ldr	r3, [r7, #20]
 8014082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014084:	2200      	movs	r2, #0
 8014086:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8014088:	7cfb      	ldrb	r3, [r7, #19]
 801408a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 801408e:	2b21      	cmp	r3, #33	; 0x21
 8014090:	d007      	beq.n	80140a2 <I2C_DMAXferCplt+0x6e>
 8014092:	7cfb      	ldrb	r3, [r7, #19]
 8014094:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8014098:	2b22      	cmp	r3, #34	; 0x22
 801409a:	d131      	bne.n	8014100 <I2C_DMAXferCplt+0xcc>
 801409c:	7cbb      	ldrb	r3, [r7, #18]
 801409e:	2b20      	cmp	r3, #32
 80140a0:	d12e      	bne.n	8014100 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80140a2:	697b      	ldr	r3, [r7, #20]
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	685a      	ldr	r2, [r3, #4]
 80140a8:	697b      	ldr	r3, [r7, #20]
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80140b0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80140b2:	697b      	ldr	r3, [r7, #20]
 80140b4:	2200      	movs	r2, #0
 80140b6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80140b8:	7cfb      	ldrb	r3, [r7, #19]
 80140ba:	2b29      	cmp	r3, #41	; 0x29
 80140bc:	d10a      	bne.n	80140d4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80140be:	697b      	ldr	r3, [r7, #20]
 80140c0:	2221      	movs	r2, #33	; 0x21
 80140c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80140c4:	697b      	ldr	r3, [r7, #20]
 80140c6:	2228      	movs	r2, #40	; 0x28
 80140c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80140cc:	6978      	ldr	r0, [r7, #20]
 80140ce:	f7fe fe19 	bl	8012d04 <HAL_I2C_SlaveTxCpltCallback>
 80140d2:	e00c      	b.n	80140ee <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80140d4:	7cfb      	ldrb	r3, [r7, #19]
 80140d6:	2b2a      	cmp	r3, #42	; 0x2a
 80140d8:	d109      	bne.n	80140ee <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80140da:	697b      	ldr	r3, [r7, #20]
 80140dc:	2222      	movs	r2, #34	; 0x22
 80140de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80140e0:	697b      	ldr	r3, [r7, #20]
 80140e2:	2228      	movs	r2, #40	; 0x28
 80140e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80140e8:	6978      	ldr	r0, [r7, #20]
 80140ea:	f7fe fe15 	bl	8012d18 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80140ee:	697b      	ldr	r3, [r7, #20]
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	685a      	ldr	r2, [r3, #4]
 80140f4:	697b      	ldr	r3, [r7, #20]
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80140fc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80140fe:	e06a      	b.n	80141d6 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8014100:	697b      	ldr	r3, [r7, #20]
 8014102:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8014106:	b2db      	uxtb	r3, r3
 8014108:	2b00      	cmp	r3, #0
 801410a:	d064      	beq.n	80141d6 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 801410c:	697b      	ldr	r3, [r7, #20]
 801410e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014110:	b29b      	uxth	r3, r3
 8014112:	2b01      	cmp	r3, #1
 8014114:	d107      	bne.n	8014126 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014116:	697b      	ldr	r3, [r7, #20]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	681a      	ldr	r2, [r3, #0]
 801411c:	697b      	ldr	r3, [r7, #20]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014124:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8014126:	697b      	ldr	r3, [r7, #20]
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	685a      	ldr	r2, [r3, #4]
 801412c:	697b      	ldr	r3, [r7, #20]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8014134:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801413c:	d009      	beq.n	8014152 <I2C_DMAXferCplt+0x11e>
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	2b08      	cmp	r3, #8
 8014142:	d006      	beq.n	8014152 <I2C_DMAXferCplt+0x11e>
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801414a:	d002      	beq.n	8014152 <I2C_DMAXferCplt+0x11e>
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	2b20      	cmp	r3, #32
 8014150:	d107      	bne.n	8014162 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014152:	697b      	ldr	r3, [r7, #20]
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	681a      	ldr	r2, [r3, #0]
 8014158:	697b      	ldr	r3, [r7, #20]
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014160:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8014162:	697b      	ldr	r3, [r7, #20]
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	685a      	ldr	r2, [r3, #4]
 8014168:	697b      	ldr	r3, [r7, #20]
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8014170:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8014172:	697b      	ldr	r3, [r7, #20]
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	685a      	ldr	r2, [r3, #4]
 8014178:	697b      	ldr	r3, [r7, #20]
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014180:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8014182:	697b      	ldr	r3, [r7, #20]
 8014184:	2200      	movs	r2, #0
 8014186:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8014188:	697b      	ldr	r3, [r7, #20]
 801418a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801418c:	2b00      	cmp	r3, #0
 801418e:	d003      	beq.n	8014198 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8014190:	6978      	ldr	r0, [r7, #20]
 8014192:	f7fe fdf7 	bl	8012d84 <HAL_I2C_ErrorCallback>
}
 8014196:	e01e      	b.n	80141d6 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8014198:	697b      	ldr	r3, [r7, #20]
 801419a:	2220      	movs	r2, #32
 801419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80141a0:	697b      	ldr	r3, [r7, #20]
 80141a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80141a6:	b2db      	uxtb	r3, r3
 80141a8:	2b40      	cmp	r3, #64	; 0x40
 80141aa:	d10a      	bne.n	80141c2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80141ac:	697b      	ldr	r3, [r7, #20]
 80141ae:	2200      	movs	r2, #0
 80141b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80141b4:	697b      	ldr	r3, [r7, #20]
 80141b6:	2200      	movs	r2, #0
 80141b8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80141ba:	6978      	ldr	r0, [r7, #20]
 80141bc:	f7fe fdd8 	bl	8012d70 <HAL_I2C_MemRxCpltCallback>
}
 80141c0:	e009      	b.n	80141d6 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80141c2:	697b      	ldr	r3, [r7, #20]
 80141c4:	2200      	movs	r2, #0
 80141c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80141ca:	697b      	ldr	r3, [r7, #20]
 80141cc:	2212      	movs	r2, #18
 80141ce:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80141d0:	6978      	ldr	r0, [r7, #20]
 80141d2:	f7f8 fd9f 	bl	800cd14 <HAL_I2C_MasterRxCpltCallback>
}
 80141d6:	bf00      	nop
 80141d8:	3718      	adds	r7, #24
 80141da:	46bd      	mov	sp, r7
 80141dc:	bd80      	pop	{r7, pc}

080141de <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80141de:	b580      	push	{r7, lr}
 80141e0:	b084      	sub	sp, #16
 80141e2:	af00      	add	r7, sp, #0
 80141e4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141ea:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d003      	beq.n	80141fc <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80141f8:	2200      	movs	r2, #0
 80141fa:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014200:	2b00      	cmp	r3, #0
 8014202:	d003      	beq.n	801420c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014208:	2200      	movs	r2, #0
 801420a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 801420c:	6878      	ldr	r0, [r7, #4]
 801420e:	f7fd fd1b 	bl	8011c48 <HAL_DMA_GetError>
 8014212:	4603      	mov	r3, r0
 8014214:	2b02      	cmp	r3, #2
 8014216:	d01b      	beq.n	8014250 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	681a      	ldr	r2, [r3, #0]
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014226:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	2200      	movs	r2, #0
 801422c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	2220      	movs	r2, #32
 8014232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	2200      	movs	r2, #0
 801423a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014242:	f043 0210 	orr.w	r2, r3, #16
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801424a:	68f8      	ldr	r0, [r7, #12]
 801424c:	f7fe fd9a 	bl	8012d84 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8014250:	bf00      	nop
 8014252:	3710      	adds	r7, #16
 8014254:	46bd      	mov	sp, r7
 8014256:	bd80      	pop	{r7, pc}

08014258 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b086      	sub	sp, #24
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014260:	2300      	movs	r3, #0
 8014262:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014268:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801426a:	697b      	ldr	r3, [r7, #20]
 801426c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014270:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8014272:	4b4b      	ldr	r3, [pc, #300]	; (80143a0 <I2C_DMAAbort+0x148>)
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	08db      	lsrs	r3, r3, #3
 8014278:	4a4a      	ldr	r2, [pc, #296]	; (80143a4 <I2C_DMAAbort+0x14c>)
 801427a:	fba2 2303 	umull	r2, r3, r2, r3
 801427e:	0a1a      	lsrs	r2, r3, #8
 8014280:	4613      	mov	r3, r2
 8014282:	009b      	lsls	r3, r3, #2
 8014284:	4413      	add	r3, r2
 8014286:	00da      	lsls	r2, r3, #3
 8014288:	1ad3      	subs	r3, r2, r3
 801428a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d106      	bne.n	80142a0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014292:	697b      	ldr	r3, [r7, #20]
 8014294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014296:	f043 0220 	orr.w	r2, r3, #32
 801429a:	697b      	ldr	r3, [r7, #20]
 801429c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 801429e:	e00a      	b.n	80142b6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	3b01      	subs	r3, #1
 80142a4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80142a6:	697b      	ldr	r3, [r7, #20]
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80142b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80142b4:	d0ea      	beq.n	801428c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80142b6:	697b      	ldr	r3, [r7, #20]
 80142b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d003      	beq.n	80142c6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80142be:	697b      	ldr	r3, [r7, #20]
 80142c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80142c2:	2200      	movs	r2, #0
 80142c4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80142c6:	697b      	ldr	r3, [r7, #20]
 80142c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d003      	beq.n	80142d6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80142ce:	697b      	ldr	r3, [r7, #20]
 80142d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142d2:	2200      	movs	r2, #0
 80142d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80142d6:	697b      	ldr	r3, [r7, #20]
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	681a      	ldr	r2, [r3, #0]
 80142dc:	697b      	ldr	r3, [r7, #20]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80142e4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80142e6:	697b      	ldr	r3, [r7, #20]
 80142e8:	2200      	movs	r2, #0
 80142ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80142ec:	697b      	ldr	r3, [r7, #20]
 80142ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d003      	beq.n	80142fc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80142f4:	697b      	ldr	r3, [r7, #20]
 80142f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80142f8:	2200      	movs	r2, #0
 80142fa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80142fc:	697b      	ldr	r3, [r7, #20]
 80142fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014300:	2b00      	cmp	r3, #0
 8014302:	d003      	beq.n	801430c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8014304:	697b      	ldr	r3, [r7, #20]
 8014306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014308:	2200      	movs	r2, #0
 801430a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 801430c:	697b      	ldr	r3, [r7, #20]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	681a      	ldr	r2, [r3, #0]
 8014312:	697b      	ldr	r3, [r7, #20]
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	f022 0201 	bic.w	r2, r2, #1
 801431a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 801431c:	697b      	ldr	r3, [r7, #20]
 801431e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014322:	b2db      	uxtb	r3, r3
 8014324:	2b60      	cmp	r3, #96	; 0x60
 8014326:	d10e      	bne.n	8014346 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8014328:	697b      	ldr	r3, [r7, #20]
 801432a:	2220      	movs	r2, #32
 801432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8014330:	697b      	ldr	r3, [r7, #20]
 8014332:	2200      	movs	r2, #0
 8014334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8014338:	697b      	ldr	r3, [r7, #20]
 801433a:	2200      	movs	r2, #0
 801433c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801433e:	6978      	ldr	r0, [r7, #20]
 8014340:	f7fe fd2a 	bl	8012d98 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8014344:	e027      	b.n	8014396 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8014346:	7cfb      	ldrb	r3, [r7, #19]
 8014348:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801434c:	2b28      	cmp	r3, #40	; 0x28
 801434e:	d117      	bne.n	8014380 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8014350:	697b      	ldr	r3, [r7, #20]
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	681a      	ldr	r2, [r3, #0]
 8014356:	697b      	ldr	r3, [r7, #20]
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	f042 0201 	orr.w	r2, r2, #1
 801435e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014360:	697b      	ldr	r3, [r7, #20]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	681a      	ldr	r2, [r3, #0]
 8014366:	697b      	ldr	r3, [r7, #20]
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801436e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8014370:	697b      	ldr	r3, [r7, #20]
 8014372:	2200      	movs	r2, #0
 8014374:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8014376:	697b      	ldr	r3, [r7, #20]
 8014378:	2228      	movs	r2, #40	; 0x28
 801437a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801437e:	e007      	b.n	8014390 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8014380:	697b      	ldr	r3, [r7, #20]
 8014382:	2220      	movs	r2, #32
 8014384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014388:	697b      	ldr	r3, [r7, #20]
 801438a:	2200      	movs	r2, #0
 801438c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8014390:	6978      	ldr	r0, [r7, #20]
 8014392:	f7fe fcf7 	bl	8012d84 <HAL_I2C_ErrorCallback>
}
 8014396:	bf00      	nop
 8014398:	3718      	adds	r7, #24
 801439a:	46bd      	mov	sp, r7
 801439c:	bd80      	pop	{r7, pc}
 801439e:	bf00      	nop
 80143a0:	20000054 	.word	0x20000054
 80143a4:	14f8b589 	.word	0x14f8b589

080143a8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80143a8:	b480      	push	{r7}
 80143aa:	b085      	sub	sp, #20
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80143b0:	2300      	movs	r3, #0
 80143b2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80143b4:	4b13      	ldr	r3, [pc, #76]	; (8014404 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	08db      	lsrs	r3, r3, #3
 80143ba:	4a13      	ldr	r2, [pc, #76]	; (8014408 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80143bc:	fba2 2303 	umull	r2, r3, r2, r3
 80143c0:	0a1a      	lsrs	r2, r3, #8
 80143c2:	4613      	mov	r3, r2
 80143c4:	009b      	lsls	r3, r3, #2
 80143c6:	4413      	add	r3, r2
 80143c8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	3b01      	subs	r3, #1
 80143ce:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d107      	bne.n	80143e6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143da:	f043 0220 	orr.w	r2, r3, #32
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80143e2:	2301      	movs	r3, #1
 80143e4:	e008      	b.n	80143f8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80143f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80143f4:	d0e9      	beq.n	80143ca <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80143f6:	2300      	movs	r3, #0
}
 80143f8:	4618      	mov	r0, r3
 80143fa:	3714      	adds	r7, #20
 80143fc:	46bd      	mov	sp, r7
 80143fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014402:	4770      	bx	lr
 8014404:	20000054 	.word	0x20000054
 8014408:	14f8b589 	.word	0x14f8b589

0801440c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 801440c:	b480      	push	{r7}
 801440e:	b083      	sub	sp, #12
 8014410:	af00      	add	r7, sp, #0
 8014412:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014418:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801441c:	d103      	bne.n	8014426 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	2201      	movs	r2, #1
 8014422:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8014424:	e007      	b.n	8014436 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801442a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801442e:	d102      	bne.n	8014436 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	2208      	movs	r2, #8
 8014434:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8014436:	bf00      	nop
 8014438:	370c      	adds	r7, #12
 801443a:	46bd      	mov	sp, r7
 801443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014440:	4770      	bx	lr
	...

08014444 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014444:	b580      	push	{r7, lr}
 8014446:	b086      	sub	sp, #24
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d101      	bne.n	8014456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8014452:	2301      	movs	r3, #1
 8014454:	e25b      	b.n	801490e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	f003 0301 	and.w	r3, r3, #1
 801445e:	2b00      	cmp	r3, #0
 8014460:	d075      	beq.n	801454e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8014462:	4ba3      	ldr	r3, [pc, #652]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 8014464:	689b      	ldr	r3, [r3, #8]
 8014466:	f003 030c 	and.w	r3, r3, #12
 801446a:	2b04      	cmp	r3, #4
 801446c:	d00c      	beq.n	8014488 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801446e:	4ba0      	ldr	r3, [pc, #640]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 8014470:	689b      	ldr	r3, [r3, #8]
 8014472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8014476:	2b08      	cmp	r3, #8
 8014478:	d112      	bne.n	80144a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801447a:	4b9d      	ldr	r3, [pc, #628]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 801447c:	685b      	ldr	r3, [r3, #4]
 801447e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014486:	d10b      	bne.n	80144a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014488:	4b99      	ldr	r3, [pc, #612]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014490:	2b00      	cmp	r3, #0
 8014492:	d05b      	beq.n	801454c <HAL_RCC_OscConfig+0x108>
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	685b      	ldr	r3, [r3, #4]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d157      	bne.n	801454c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801449c:	2301      	movs	r3, #1
 801449e:	e236      	b.n	801490e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	685b      	ldr	r3, [r3, #4]
 80144a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80144a8:	d106      	bne.n	80144b8 <HAL_RCC_OscConfig+0x74>
 80144aa:	4b91      	ldr	r3, [pc, #580]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	4a90      	ldr	r2, [pc, #576]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 80144b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80144b4:	6013      	str	r3, [r2, #0]
 80144b6:	e01d      	b.n	80144f4 <HAL_RCC_OscConfig+0xb0>
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	685b      	ldr	r3, [r3, #4]
 80144bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80144c0:	d10c      	bne.n	80144dc <HAL_RCC_OscConfig+0x98>
 80144c2:	4b8b      	ldr	r3, [pc, #556]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	4a8a      	ldr	r2, [pc, #552]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 80144c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80144cc:	6013      	str	r3, [r2, #0]
 80144ce:	4b88      	ldr	r3, [pc, #544]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	4a87      	ldr	r2, [pc, #540]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 80144d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80144d8:	6013      	str	r3, [r2, #0]
 80144da:	e00b      	b.n	80144f4 <HAL_RCC_OscConfig+0xb0>
 80144dc:	4b84      	ldr	r3, [pc, #528]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	4a83      	ldr	r2, [pc, #524]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 80144e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80144e6:	6013      	str	r3, [r2, #0]
 80144e8:	4b81      	ldr	r3, [pc, #516]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	4a80      	ldr	r2, [pc, #512]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 80144ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80144f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	685b      	ldr	r3, [r3, #4]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d013      	beq.n	8014524 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80144fc:	f7fc f8ac 	bl	8010658 <HAL_GetTick>
 8014500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8014502:	e008      	b.n	8014516 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014504:	f7fc f8a8 	bl	8010658 <HAL_GetTick>
 8014508:	4602      	mov	r2, r0
 801450a:	693b      	ldr	r3, [r7, #16]
 801450c:	1ad3      	subs	r3, r2, r3
 801450e:	2b64      	cmp	r3, #100	; 0x64
 8014510:	d901      	bls.n	8014516 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8014512:	2303      	movs	r3, #3
 8014514:	e1fb      	b.n	801490e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8014516:	4b76      	ldr	r3, [pc, #472]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801451e:	2b00      	cmp	r3, #0
 8014520:	d0f0      	beq.n	8014504 <HAL_RCC_OscConfig+0xc0>
 8014522:	e014      	b.n	801454e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014524:	f7fc f898 	bl	8010658 <HAL_GetTick>
 8014528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801452a:	e008      	b.n	801453e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801452c:	f7fc f894 	bl	8010658 <HAL_GetTick>
 8014530:	4602      	mov	r2, r0
 8014532:	693b      	ldr	r3, [r7, #16]
 8014534:	1ad3      	subs	r3, r2, r3
 8014536:	2b64      	cmp	r3, #100	; 0x64
 8014538:	d901      	bls.n	801453e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801453a:	2303      	movs	r3, #3
 801453c:	e1e7      	b.n	801490e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801453e:	4b6c      	ldr	r3, [pc, #432]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014546:	2b00      	cmp	r3, #0
 8014548:	d1f0      	bne.n	801452c <HAL_RCC_OscConfig+0xe8>
 801454a:	e000      	b.n	801454e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801454c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	f003 0302 	and.w	r3, r3, #2
 8014556:	2b00      	cmp	r3, #0
 8014558:	d063      	beq.n	8014622 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801455a:	4b65      	ldr	r3, [pc, #404]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 801455c:	689b      	ldr	r3, [r3, #8]
 801455e:	f003 030c 	and.w	r3, r3, #12
 8014562:	2b00      	cmp	r3, #0
 8014564:	d00b      	beq.n	801457e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8014566:	4b62      	ldr	r3, [pc, #392]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 8014568:	689b      	ldr	r3, [r3, #8]
 801456a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801456e:	2b08      	cmp	r3, #8
 8014570:	d11c      	bne.n	80145ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8014572:	4b5f      	ldr	r3, [pc, #380]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 8014574:	685b      	ldr	r3, [r3, #4]
 8014576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801457a:	2b00      	cmp	r3, #0
 801457c:	d116      	bne.n	80145ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801457e:	4b5c      	ldr	r3, [pc, #368]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	f003 0302 	and.w	r3, r3, #2
 8014586:	2b00      	cmp	r3, #0
 8014588:	d005      	beq.n	8014596 <HAL_RCC_OscConfig+0x152>
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	68db      	ldr	r3, [r3, #12]
 801458e:	2b01      	cmp	r3, #1
 8014590:	d001      	beq.n	8014596 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8014592:	2301      	movs	r3, #1
 8014594:	e1bb      	b.n	801490e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014596:	4b56      	ldr	r3, [pc, #344]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	691b      	ldr	r3, [r3, #16]
 80145a2:	00db      	lsls	r3, r3, #3
 80145a4:	4952      	ldr	r1, [pc, #328]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 80145a6:	4313      	orrs	r3, r2
 80145a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80145aa:	e03a      	b.n	8014622 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	68db      	ldr	r3, [r3, #12]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d020      	beq.n	80145f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80145b4:	4b4f      	ldr	r3, [pc, #316]	; (80146f4 <HAL_RCC_OscConfig+0x2b0>)
 80145b6:	2201      	movs	r2, #1
 80145b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80145ba:	f7fc f84d 	bl	8010658 <HAL_GetTick>
 80145be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80145c0:	e008      	b.n	80145d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80145c2:	f7fc f849 	bl	8010658 <HAL_GetTick>
 80145c6:	4602      	mov	r2, r0
 80145c8:	693b      	ldr	r3, [r7, #16]
 80145ca:	1ad3      	subs	r3, r2, r3
 80145cc:	2b02      	cmp	r3, #2
 80145ce:	d901      	bls.n	80145d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80145d0:	2303      	movs	r3, #3
 80145d2:	e19c      	b.n	801490e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80145d4:	4b46      	ldr	r3, [pc, #280]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	f003 0302 	and.w	r3, r3, #2
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d0f0      	beq.n	80145c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80145e0:	4b43      	ldr	r3, [pc, #268]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	691b      	ldr	r3, [r3, #16]
 80145ec:	00db      	lsls	r3, r3, #3
 80145ee:	4940      	ldr	r1, [pc, #256]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 80145f0:	4313      	orrs	r3, r2
 80145f2:	600b      	str	r3, [r1, #0]
 80145f4:	e015      	b.n	8014622 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80145f6:	4b3f      	ldr	r3, [pc, #252]	; (80146f4 <HAL_RCC_OscConfig+0x2b0>)
 80145f8:	2200      	movs	r2, #0
 80145fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80145fc:	f7fc f82c 	bl	8010658 <HAL_GetTick>
 8014600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8014602:	e008      	b.n	8014616 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014604:	f7fc f828 	bl	8010658 <HAL_GetTick>
 8014608:	4602      	mov	r2, r0
 801460a:	693b      	ldr	r3, [r7, #16]
 801460c:	1ad3      	subs	r3, r2, r3
 801460e:	2b02      	cmp	r3, #2
 8014610:	d901      	bls.n	8014616 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8014612:	2303      	movs	r3, #3
 8014614:	e17b      	b.n	801490e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8014616:	4b36      	ldr	r3, [pc, #216]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	f003 0302 	and.w	r3, r3, #2
 801461e:	2b00      	cmp	r3, #0
 8014620:	d1f0      	bne.n	8014604 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	f003 0308 	and.w	r3, r3, #8
 801462a:	2b00      	cmp	r3, #0
 801462c:	d030      	beq.n	8014690 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	695b      	ldr	r3, [r3, #20]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d016      	beq.n	8014664 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8014636:	4b30      	ldr	r3, [pc, #192]	; (80146f8 <HAL_RCC_OscConfig+0x2b4>)
 8014638:	2201      	movs	r2, #1
 801463a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801463c:	f7fc f80c 	bl	8010658 <HAL_GetTick>
 8014640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8014642:	e008      	b.n	8014656 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014644:	f7fc f808 	bl	8010658 <HAL_GetTick>
 8014648:	4602      	mov	r2, r0
 801464a:	693b      	ldr	r3, [r7, #16]
 801464c:	1ad3      	subs	r3, r2, r3
 801464e:	2b02      	cmp	r3, #2
 8014650:	d901      	bls.n	8014656 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8014652:	2303      	movs	r3, #3
 8014654:	e15b      	b.n	801490e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8014656:	4b26      	ldr	r3, [pc, #152]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 8014658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801465a:	f003 0302 	and.w	r3, r3, #2
 801465e:	2b00      	cmp	r3, #0
 8014660:	d0f0      	beq.n	8014644 <HAL_RCC_OscConfig+0x200>
 8014662:	e015      	b.n	8014690 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014664:	4b24      	ldr	r3, [pc, #144]	; (80146f8 <HAL_RCC_OscConfig+0x2b4>)
 8014666:	2200      	movs	r2, #0
 8014668:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801466a:	f7fb fff5 	bl	8010658 <HAL_GetTick>
 801466e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8014670:	e008      	b.n	8014684 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014672:	f7fb fff1 	bl	8010658 <HAL_GetTick>
 8014676:	4602      	mov	r2, r0
 8014678:	693b      	ldr	r3, [r7, #16]
 801467a:	1ad3      	subs	r3, r2, r3
 801467c:	2b02      	cmp	r3, #2
 801467e:	d901      	bls.n	8014684 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8014680:	2303      	movs	r3, #3
 8014682:	e144      	b.n	801490e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8014684:	4b1a      	ldr	r3, [pc, #104]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 8014686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014688:	f003 0302 	and.w	r3, r3, #2
 801468c:	2b00      	cmp	r3, #0
 801468e:	d1f0      	bne.n	8014672 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	f003 0304 	and.w	r3, r3, #4
 8014698:	2b00      	cmp	r3, #0
 801469a:	f000 80a0 	beq.w	80147de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 801469e:	2300      	movs	r3, #0
 80146a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80146a2:	4b13      	ldr	r3, [pc, #76]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 80146a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d10f      	bne.n	80146ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80146ae:	2300      	movs	r3, #0
 80146b0:	60bb      	str	r3, [r7, #8]
 80146b2:	4b0f      	ldr	r3, [pc, #60]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 80146b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146b6:	4a0e      	ldr	r2, [pc, #56]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 80146b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80146bc:	6413      	str	r3, [r2, #64]	; 0x40
 80146be:	4b0c      	ldr	r3, [pc, #48]	; (80146f0 <HAL_RCC_OscConfig+0x2ac>)
 80146c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80146c6:	60bb      	str	r3, [r7, #8]
 80146c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80146ca:	2301      	movs	r3, #1
 80146cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80146ce:	4b0b      	ldr	r3, [pc, #44]	; (80146fc <HAL_RCC_OscConfig+0x2b8>)
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d121      	bne.n	801471e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80146da:	4b08      	ldr	r3, [pc, #32]	; (80146fc <HAL_RCC_OscConfig+0x2b8>)
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	4a07      	ldr	r2, [pc, #28]	; (80146fc <HAL_RCC_OscConfig+0x2b8>)
 80146e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80146e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80146e6:	f7fb ffb7 	bl	8010658 <HAL_GetTick>
 80146ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80146ec:	e011      	b.n	8014712 <HAL_RCC_OscConfig+0x2ce>
 80146ee:	bf00      	nop
 80146f0:	40023800 	.word	0x40023800
 80146f4:	42470000 	.word	0x42470000
 80146f8:	42470e80 	.word	0x42470e80
 80146fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014700:	f7fb ffaa 	bl	8010658 <HAL_GetTick>
 8014704:	4602      	mov	r2, r0
 8014706:	693b      	ldr	r3, [r7, #16]
 8014708:	1ad3      	subs	r3, r2, r3
 801470a:	2b02      	cmp	r3, #2
 801470c:	d901      	bls.n	8014712 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801470e:	2303      	movs	r3, #3
 8014710:	e0fd      	b.n	801490e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014712:	4b81      	ldr	r3, [pc, #516]	; (8014918 <HAL_RCC_OscConfig+0x4d4>)
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801471a:	2b00      	cmp	r3, #0
 801471c:	d0f0      	beq.n	8014700 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	689b      	ldr	r3, [r3, #8]
 8014722:	2b01      	cmp	r3, #1
 8014724:	d106      	bne.n	8014734 <HAL_RCC_OscConfig+0x2f0>
 8014726:	4b7d      	ldr	r3, [pc, #500]	; (801491c <HAL_RCC_OscConfig+0x4d8>)
 8014728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801472a:	4a7c      	ldr	r2, [pc, #496]	; (801491c <HAL_RCC_OscConfig+0x4d8>)
 801472c:	f043 0301 	orr.w	r3, r3, #1
 8014730:	6713      	str	r3, [r2, #112]	; 0x70
 8014732:	e01c      	b.n	801476e <HAL_RCC_OscConfig+0x32a>
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	689b      	ldr	r3, [r3, #8]
 8014738:	2b05      	cmp	r3, #5
 801473a:	d10c      	bne.n	8014756 <HAL_RCC_OscConfig+0x312>
 801473c:	4b77      	ldr	r3, [pc, #476]	; (801491c <HAL_RCC_OscConfig+0x4d8>)
 801473e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014740:	4a76      	ldr	r2, [pc, #472]	; (801491c <HAL_RCC_OscConfig+0x4d8>)
 8014742:	f043 0304 	orr.w	r3, r3, #4
 8014746:	6713      	str	r3, [r2, #112]	; 0x70
 8014748:	4b74      	ldr	r3, [pc, #464]	; (801491c <HAL_RCC_OscConfig+0x4d8>)
 801474a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801474c:	4a73      	ldr	r2, [pc, #460]	; (801491c <HAL_RCC_OscConfig+0x4d8>)
 801474e:	f043 0301 	orr.w	r3, r3, #1
 8014752:	6713      	str	r3, [r2, #112]	; 0x70
 8014754:	e00b      	b.n	801476e <HAL_RCC_OscConfig+0x32a>
 8014756:	4b71      	ldr	r3, [pc, #452]	; (801491c <HAL_RCC_OscConfig+0x4d8>)
 8014758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801475a:	4a70      	ldr	r2, [pc, #448]	; (801491c <HAL_RCC_OscConfig+0x4d8>)
 801475c:	f023 0301 	bic.w	r3, r3, #1
 8014760:	6713      	str	r3, [r2, #112]	; 0x70
 8014762:	4b6e      	ldr	r3, [pc, #440]	; (801491c <HAL_RCC_OscConfig+0x4d8>)
 8014764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014766:	4a6d      	ldr	r2, [pc, #436]	; (801491c <HAL_RCC_OscConfig+0x4d8>)
 8014768:	f023 0304 	bic.w	r3, r3, #4
 801476c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	689b      	ldr	r3, [r3, #8]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d015      	beq.n	80147a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014776:	f7fb ff6f 	bl	8010658 <HAL_GetTick>
 801477a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801477c:	e00a      	b.n	8014794 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801477e:	f7fb ff6b 	bl	8010658 <HAL_GetTick>
 8014782:	4602      	mov	r2, r0
 8014784:	693b      	ldr	r3, [r7, #16]
 8014786:	1ad3      	subs	r3, r2, r3
 8014788:	f241 3288 	movw	r2, #5000	; 0x1388
 801478c:	4293      	cmp	r3, r2
 801478e:	d901      	bls.n	8014794 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8014790:	2303      	movs	r3, #3
 8014792:	e0bc      	b.n	801490e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8014794:	4b61      	ldr	r3, [pc, #388]	; (801491c <HAL_RCC_OscConfig+0x4d8>)
 8014796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014798:	f003 0302 	and.w	r3, r3, #2
 801479c:	2b00      	cmp	r3, #0
 801479e:	d0ee      	beq.n	801477e <HAL_RCC_OscConfig+0x33a>
 80147a0:	e014      	b.n	80147cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80147a2:	f7fb ff59 	bl	8010658 <HAL_GetTick>
 80147a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80147a8:	e00a      	b.n	80147c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80147aa:	f7fb ff55 	bl	8010658 <HAL_GetTick>
 80147ae:	4602      	mov	r2, r0
 80147b0:	693b      	ldr	r3, [r7, #16]
 80147b2:	1ad3      	subs	r3, r2, r3
 80147b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80147b8:	4293      	cmp	r3, r2
 80147ba:	d901      	bls.n	80147c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80147bc:	2303      	movs	r3, #3
 80147be:	e0a6      	b.n	801490e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80147c0:	4b56      	ldr	r3, [pc, #344]	; (801491c <HAL_RCC_OscConfig+0x4d8>)
 80147c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147c4:	f003 0302 	and.w	r3, r3, #2
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d1ee      	bne.n	80147aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80147cc:	7dfb      	ldrb	r3, [r7, #23]
 80147ce:	2b01      	cmp	r3, #1
 80147d0:	d105      	bne.n	80147de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80147d2:	4b52      	ldr	r3, [pc, #328]	; (801491c <HAL_RCC_OscConfig+0x4d8>)
 80147d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147d6:	4a51      	ldr	r2, [pc, #324]	; (801491c <HAL_RCC_OscConfig+0x4d8>)
 80147d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80147dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	699b      	ldr	r3, [r3, #24]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	f000 8092 	beq.w	801490c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80147e8:	4b4c      	ldr	r3, [pc, #304]	; (801491c <HAL_RCC_OscConfig+0x4d8>)
 80147ea:	689b      	ldr	r3, [r3, #8]
 80147ec:	f003 030c 	and.w	r3, r3, #12
 80147f0:	2b08      	cmp	r3, #8
 80147f2:	d05c      	beq.n	80148ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	699b      	ldr	r3, [r3, #24]
 80147f8:	2b02      	cmp	r3, #2
 80147fa:	d141      	bne.n	8014880 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80147fc:	4b48      	ldr	r3, [pc, #288]	; (8014920 <HAL_RCC_OscConfig+0x4dc>)
 80147fe:	2200      	movs	r2, #0
 8014800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014802:	f7fb ff29 	bl	8010658 <HAL_GetTick>
 8014806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014808:	e008      	b.n	801481c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801480a:	f7fb ff25 	bl	8010658 <HAL_GetTick>
 801480e:	4602      	mov	r2, r0
 8014810:	693b      	ldr	r3, [r7, #16]
 8014812:	1ad3      	subs	r3, r2, r3
 8014814:	2b02      	cmp	r3, #2
 8014816:	d901      	bls.n	801481c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8014818:	2303      	movs	r3, #3
 801481a:	e078      	b.n	801490e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801481c:	4b3f      	ldr	r3, [pc, #252]	; (801491c <HAL_RCC_OscConfig+0x4d8>)
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014824:	2b00      	cmp	r3, #0
 8014826:	d1f0      	bne.n	801480a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	69da      	ldr	r2, [r3, #28]
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	6a1b      	ldr	r3, [r3, #32]
 8014830:	431a      	orrs	r2, r3
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014836:	019b      	lsls	r3, r3, #6
 8014838:	431a      	orrs	r2, r3
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801483e:	085b      	lsrs	r3, r3, #1
 8014840:	3b01      	subs	r3, #1
 8014842:	041b      	lsls	r3, r3, #16
 8014844:	431a      	orrs	r2, r3
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801484a:	061b      	lsls	r3, r3, #24
 801484c:	4933      	ldr	r1, [pc, #204]	; (801491c <HAL_RCC_OscConfig+0x4d8>)
 801484e:	4313      	orrs	r3, r2
 8014850:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8014852:	4b33      	ldr	r3, [pc, #204]	; (8014920 <HAL_RCC_OscConfig+0x4dc>)
 8014854:	2201      	movs	r2, #1
 8014856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014858:	f7fb fefe 	bl	8010658 <HAL_GetTick>
 801485c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801485e:	e008      	b.n	8014872 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014860:	f7fb fefa 	bl	8010658 <HAL_GetTick>
 8014864:	4602      	mov	r2, r0
 8014866:	693b      	ldr	r3, [r7, #16]
 8014868:	1ad3      	subs	r3, r2, r3
 801486a:	2b02      	cmp	r3, #2
 801486c:	d901      	bls.n	8014872 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 801486e:	2303      	movs	r3, #3
 8014870:	e04d      	b.n	801490e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8014872:	4b2a      	ldr	r3, [pc, #168]	; (801491c <HAL_RCC_OscConfig+0x4d8>)
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801487a:	2b00      	cmp	r3, #0
 801487c:	d0f0      	beq.n	8014860 <HAL_RCC_OscConfig+0x41c>
 801487e:	e045      	b.n	801490c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014880:	4b27      	ldr	r3, [pc, #156]	; (8014920 <HAL_RCC_OscConfig+0x4dc>)
 8014882:	2200      	movs	r2, #0
 8014884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014886:	f7fb fee7 	bl	8010658 <HAL_GetTick>
 801488a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801488c:	e008      	b.n	80148a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801488e:	f7fb fee3 	bl	8010658 <HAL_GetTick>
 8014892:	4602      	mov	r2, r0
 8014894:	693b      	ldr	r3, [r7, #16]
 8014896:	1ad3      	subs	r3, r2, r3
 8014898:	2b02      	cmp	r3, #2
 801489a:	d901      	bls.n	80148a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 801489c:	2303      	movs	r3, #3
 801489e:	e036      	b.n	801490e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80148a0:	4b1e      	ldr	r3, [pc, #120]	; (801491c <HAL_RCC_OscConfig+0x4d8>)
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d1f0      	bne.n	801488e <HAL_RCC_OscConfig+0x44a>
 80148ac:	e02e      	b.n	801490c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	699b      	ldr	r3, [r3, #24]
 80148b2:	2b01      	cmp	r3, #1
 80148b4:	d101      	bne.n	80148ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80148b6:	2301      	movs	r3, #1
 80148b8:	e029      	b.n	801490e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80148ba:	4b18      	ldr	r3, [pc, #96]	; (801491c <HAL_RCC_OscConfig+0x4d8>)
 80148bc:	685b      	ldr	r3, [r3, #4]
 80148be:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	69db      	ldr	r3, [r3, #28]
 80148ca:	429a      	cmp	r2, r3
 80148cc:	d11c      	bne.n	8014908 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80148d8:	429a      	cmp	r2, r3
 80148da:	d115      	bne.n	8014908 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80148dc:	68fa      	ldr	r2, [r7, #12]
 80148de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80148e2:	4013      	ands	r3, r2
 80148e4:	687a      	ldr	r2, [r7, #4]
 80148e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80148e8:	4293      	cmp	r3, r2
 80148ea:	d10d      	bne.n	8014908 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80148f6:	429a      	cmp	r2, r3
 80148f8:	d106      	bne.n	8014908 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8014904:	429a      	cmp	r2, r3
 8014906:	d001      	beq.n	801490c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8014908:	2301      	movs	r3, #1
 801490a:	e000      	b.n	801490e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 801490c:	2300      	movs	r3, #0
}
 801490e:	4618      	mov	r0, r3
 8014910:	3718      	adds	r7, #24
 8014912:	46bd      	mov	sp, r7
 8014914:	bd80      	pop	{r7, pc}
 8014916:	bf00      	nop
 8014918:	40007000 	.word	0x40007000
 801491c:	40023800 	.word	0x40023800
 8014920:	42470060 	.word	0x42470060

08014924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014924:	b580      	push	{r7, lr}
 8014926:	b084      	sub	sp, #16
 8014928:	af00      	add	r7, sp, #0
 801492a:	6078      	str	r0, [r7, #4]
 801492c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d101      	bne.n	8014938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014934:	2301      	movs	r3, #1
 8014936:	e0cc      	b.n	8014ad2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8014938:	4b68      	ldr	r3, [pc, #416]	; (8014adc <HAL_RCC_ClockConfig+0x1b8>)
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	f003 030f 	and.w	r3, r3, #15
 8014940:	683a      	ldr	r2, [r7, #0]
 8014942:	429a      	cmp	r2, r3
 8014944:	d90c      	bls.n	8014960 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014946:	4b65      	ldr	r3, [pc, #404]	; (8014adc <HAL_RCC_ClockConfig+0x1b8>)
 8014948:	683a      	ldr	r2, [r7, #0]
 801494a:	b2d2      	uxtb	r2, r2
 801494c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801494e:	4b63      	ldr	r3, [pc, #396]	; (8014adc <HAL_RCC_ClockConfig+0x1b8>)
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	f003 030f 	and.w	r3, r3, #15
 8014956:	683a      	ldr	r2, [r7, #0]
 8014958:	429a      	cmp	r2, r3
 801495a:	d001      	beq.n	8014960 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801495c:	2301      	movs	r3, #1
 801495e:	e0b8      	b.n	8014ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	f003 0302 	and.w	r3, r3, #2
 8014968:	2b00      	cmp	r3, #0
 801496a:	d020      	beq.n	80149ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	f003 0304 	and.w	r3, r3, #4
 8014974:	2b00      	cmp	r3, #0
 8014976:	d005      	beq.n	8014984 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8014978:	4b59      	ldr	r3, [pc, #356]	; (8014ae0 <HAL_RCC_ClockConfig+0x1bc>)
 801497a:	689b      	ldr	r3, [r3, #8]
 801497c:	4a58      	ldr	r2, [pc, #352]	; (8014ae0 <HAL_RCC_ClockConfig+0x1bc>)
 801497e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8014982:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	f003 0308 	and.w	r3, r3, #8
 801498c:	2b00      	cmp	r3, #0
 801498e:	d005      	beq.n	801499c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8014990:	4b53      	ldr	r3, [pc, #332]	; (8014ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8014992:	689b      	ldr	r3, [r3, #8]
 8014994:	4a52      	ldr	r2, [pc, #328]	; (8014ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8014996:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801499a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801499c:	4b50      	ldr	r3, [pc, #320]	; (8014ae0 <HAL_RCC_ClockConfig+0x1bc>)
 801499e:	689b      	ldr	r3, [r3, #8]
 80149a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	689b      	ldr	r3, [r3, #8]
 80149a8:	494d      	ldr	r1, [pc, #308]	; (8014ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80149aa:	4313      	orrs	r3, r2
 80149ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	f003 0301 	and.w	r3, r3, #1
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d044      	beq.n	8014a44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	685b      	ldr	r3, [r3, #4]
 80149be:	2b01      	cmp	r3, #1
 80149c0:	d107      	bne.n	80149d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80149c2:	4b47      	ldr	r3, [pc, #284]	; (8014ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d119      	bne.n	8014a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80149ce:	2301      	movs	r3, #1
 80149d0:	e07f      	b.n	8014ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	685b      	ldr	r3, [r3, #4]
 80149d6:	2b02      	cmp	r3, #2
 80149d8:	d003      	beq.n	80149e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80149de:	2b03      	cmp	r3, #3
 80149e0:	d107      	bne.n	80149f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80149e2:	4b3f      	ldr	r3, [pc, #252]	; (8014ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d109      	bne.n	8014a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80149ee:	2301      	movs	r3, #1
 80149f0:	e06f      	b.n	8014ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80149f2:	4b3b      	ldr	r3, [pc, #236]	; (8014ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	f003 0302 	and.w	r3, r3, #2
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d101      	bne.n	8014a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80149fe:	2301      	movs	r3, #1
 8014a00:	e067      	b.n	8014ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8014a02:	4b37      	ldr	r3, [pc, #220]	; (8014ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8014a04:	689b      	ldr	r3, [r3, #8]
 8014a06:	f023 0203 	bic.w	r2, r3, #3
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	685b      	ldr	r3, [r3, #4]
 8014a0e:	4934      	ldr	r1, [pc, #208]	; (8014ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8014a10:	4313      	orrs	r3, r2
 8014a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8014a14:	f7fb fe20 	bl	8010658 <HAL_GetTick>
 8014a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014a1a:	e00a      	b.n	8014a32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014a1c:	f7fb fe1c 	bl	8010658 <HAL_GetTick>
 8014a20:	4602      	mov	r2, r0
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	1ad3      	subs	r3, r2, r3
 8014a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8014a2a:	4293      	cmp	r3, r2
 8014a2c:	d901      	bls.n	8014a32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8014a2e:	2303      	movs	r3, #3
 8014a30:	e04f      	b.n	8014ad2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014a32:	4b2b      	ldr	r3, [pc, #172]	; (8014ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8014a34:	689b      	ldr	r3, [r3, #8]
 8014a36:	f003 020c 	and.w	r2, r3, #12
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	685b      	ldr	r3, [r3, #4]
 8014a3e:	009b      	lsls	r3, r3, #2
 8014a40:	429a      	cmp	r2, r3
 8014a42:	d1eb      	bne.n	8014a1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8014a44:	4b25      	ldr	r3, [pc, #148]	; (8014adc <HAL_RCC_ClockConfig+0x1b8>)
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	f003 030f 	and.w	r3, r3, #15
 8014a4c:	683a      	ldr	r2, [r7, #0]
 8014a4e:	429a      	cmp	r2, r3
 8014a50:	d20c      	bcs.n	8014a6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014a52:	4b22      	ldr	r3, [pc, #136]	; (8014adc <HAL_RCC_ClockConfig+0x1b8>)
 8014a54:	683a      	ldr	r2, [r7, #0]
 8014a56:	b2d2      	uxtb	r2, r2
 8014a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8014a5a:	4b20      	ldr	r3, [pc, #128]	; (8014adc <HAL_RCC_ClockConfig+0x1b8>)
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	f003 030f 	and.w	r3, r3, #15
 8014a62:	683a      	ldr	r2, [r7, #0]
 8014a64:	429a      	cmp	r2, r3
 8014a66:	d001      	beq.n	8014a6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8014a68:	2301      	movs	r3, #1
 8014a6a:	e032      	b.n	8014ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	f003 0304 	and.w	r3, r3, #4
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d008      	beq.n	8014a8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8014a78:	4b19      	ldr	r3, [pc, #100]	; (8014ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8014a7a:	689b      	ldr	r3, [r3, #8]
 8014a7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	68db      	ldr	r3, [r3, #12]
 8014a84:	4916      	ldr	r1, [pc, #88]	; (8014ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8014a86:	4313      	orrs	r3, r2
 8014a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	f003 0308 	and.w	r3, r3, #8
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d009      	beq.n	8014aaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8014a96:	4b12      	ldr	r3, [pc, #72]	; (8014ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8014a98:	689b      	ldr	r3, [r3, #8]
 8014a9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	691b      	ldr	r3, [r3, #16]
 8014aa2:	00db      	lsls	r3, r3, #3
 8014aa4:	490e      	ldr	r1, [pc, #56]	; (8014ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8014aa6:	4313      	orrs	r3, r2
 8014aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8014aaa:	f000 f82d 	bl	8014b08 <HAL_RCC_GetSysClockFreq>
 8014aae:	4602      	mov	r2, r0
 8014ab0:	4b0b      	ldr	r3, [pc, #44]	; (8014ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8014ab2:	689b      	ldr	r3, [r3, #8]
 8014ab4:	091b      	lsrs	r3, r3, #4
 8014ab6:	f003 030f 	and.w	r3, r3, #15
 8014aba:	490a      	ldr	r1, [pc, #40]	; (8014ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8014abc:	5ccb      	ldrb	r3, [r1, r3]
 8014abe:	fa22 f303 	lsr.w	r3, r2, r3
 8014ac2:	4a09      	ldr	r2, [pc, #36]	; (8014ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8014ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8014ac6:	4b09      	ldr	r3, [pc, #36]	; (8014aec <HAL_RCC_ClockConfig+0x1c8>)
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	4618      	mov	r0, r3
 8014acc:	f7f8 f95e 	bl	800cd8c <HAL_InitTick>

  return HAL_OK;
 8014ad0:	2300      	movs	r3, #0
}
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	3710      	adds	r7, #16
 8014ad6:	46bd      	mov	sp, r7
 8014ad8:	bd80      	pop	{r7, pc}
 8014ada:	bf00      	nop
 8014adc:	40023c00 	.word	0x40023c00
 8014ae0:	40023800 	.word	0x40023800
 8014ae4:	080200a0 	.word	0x080200a0
 8014ae8:	20000054 	.word	0x20000054
 8014aec:	200000b8 	.word	0x200000b8

08014af0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8014af0:	b480      	push	{r7}
 8014af2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8014af4:	4b03      	ldr	r3, [pc, #12]	; (8014b04 <HAL_RCC_EnableCSS+0x14>)
 8014af6:	2201      	movs	r2, #1
 8014af8:	601a      	str	r2, [r3, #0]
}
 8014afa:	bf00      	nop
 8014afc:	46bd      	mov	sp, r7
 8014afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b02:	4770      	bx	lr
 8014b04:	4247004c 	.word	0x4247004c

08014b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014b08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8014b0c:	b084      	sub	sp, #16
 8014b0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8014b10:	2300      	movs	r3, #0
 8014b12:	607b      	str	r3, [r7, #4]
 8014b14:	2300      	movs	r3, #0
 8014b16:	60fb      	str	r3, [r7, #12]
 8014b18:	2300      	movs	r3, #0
 8014b1a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8014b20:	4b67      	ldr	r3, [pc, #412]	; (8014cc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8014b22:	689b      	ldr	r3, [r3, #8]
 8014b24:	f003 030c 	and.w	r3, r3, #12
 8014b28:	2b08      	cmp	r3, #8
 8014b2a:	d00d      	beq.n	8014b48 <HAL_RCC_GetSysClockFreq+0x40>
 8014b2c:	2b08      	cmp	r3, #8
 8014b2e:	f200 80bd 	bhi.w	8014cac <HAL_RCC_GetSysClockFreq+0x1a4>
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d002      	beq.n	8014b3c <HAL_RCC_GetSysClockFreq+0x34>
 8014b36:	2b04      	cmp	r3, #4
 8014b38:	d003      	beq.n	8014b42 <HAL_RCC_GetSysClockFreq+0x3a>
 8014b3a:	e0b7      	b.n	8014cac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8014b3c:	4b61      	ldr	r3, [pc, #388]	; (8014cc4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8014b3e:	60bb      	str	r3, [r7, #8]
       break;
 8014b40:	e0b7      	b.n	8014cb2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8014b42:	4b61      	ldr	r3, [pc, #388]	; (8014cc8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8014b44:	60bb      	str	r3, [r7, #8]
      break;
 8014b46:	e0b4      	b.n	8014cb2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8014b48:	4b5d      	ldr	r3, [pc, #372]	; (8014cc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8014b4a:	685b      	ldr	r3, [r3, #4]
 8014b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014b50:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8014b52:	4b5b      	ldr	r3, [pc, #364]	; (8014cc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8014b54:	685b      	ldr	r3, [r3, #4]
 8014b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d04d      	beq.n	8014bfa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8014b5e:	4b58      	ldr	r3, [pc, #352]	; (8014cc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8014b60:	685b      	ldr	r3, [r3, #4]
 8014b62:	099b      	lsrs	r3, r3, #6
 8014b64:	461a      	mov	r2, r3
 8014b66:	f04f 0300 	mov.w	r3, #0
 8014b6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8014b6e:	f04f 0100 	mov.w	r1, #0
 8014b72:	ea02 0800 	and.w	r8, r2, r0
 8014b76:	ea03 0901 	and.w	r9, r3, r1
 8014b7a:	4640      	mov	r0, r8
 8014b7c:	4649      	mov	r1, r9
 8014b7e:	f04f 0200 	mov.w	r2, #0
 8014b82:	f04f 0300 	mov.w	r3, #0
 8014b86:	014b      	lsls	r3, r1, #5
 8014b88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8014b8c:	0142      	lsls	r2, r0, #5
 8014b8e:	4610      	mov	r0, r2
 8014b90:	4619      	mov	r1, r3
 8014b92:	ebb0 0008 	subs.w	r0, r0, r8
 8014b96:	eb61 0109 	sbc.w	r1, r1, r9
 8014b9a:	f04f 0200 	mov.w	r2, #0
 8014b9e:	f04f 0300 	mov.w	r3, #0
 8014ba2:	018b      	lsls	r3, r1, #6
 8014ba4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8014ba8:	0182      	lsls	r2, r0, #6
 8014baa:	1a12      	subs	r2, r2, r0
 8014bac:	eb63 0301 	sbc.w	r3, r3, r1
 8014bb0:	f04f 0000 	mov.w	r0, #0
 8014bb4:	f04f 0100 	mov.w	r1, #0
 8014bb8:	00d9      	lsls	r1, r3, #3
 8014bba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014bbe:	00d0      	lsls	r0, r2, #3
 8014bc0:	4602      	mov	r2, r0
 8014bc2:	460b      	mov	r3, r1
 8014bc4:	eb12 0208 	adds.w	r2, r2, r8
 8014bc8:	eb43 0309 	adc.w	r3, r3, r9
 8014bcc:	f04f 0000 	mov.w	r0, #0
 8014bd0:	f04f 0100 	mov.w	r1, #0
 8014bd4:	0259      	lsls	r1, r3, #9
 8014bd6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8014bda:	0250      	lsls	r0, r2, #9
 8014bdc:	4602      	mov	r2, r0
 8014bde:	460b      	mov	r3, r1
 8014be0:	4610      	mov	r0, r2
 8014be2:	4619      	mov	r1, r3
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	461a      	mov	r2, r3
 8014be8:	f04f 0300 	mov.w	r3, #0
 8014bec:	f7ec f84c 	bl	8000c88 <__aeabi_uldivmod>
 8014bf0:	4602      	mov	r2, r0
 8014bf2:	460b      	mov	r3, r1
 8014bf4:	4613      	mov	r3, r2
 8014bf6:	60fb      	str	r3, [r7, #12]
 8014bf8:	e04a      	b.n	8014c90 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8014bfa:	4b31      	ldr	r3, [pc, #196]	; (8014cc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8014bfc:	685b      	ldr	r3, [r3, #4]
 8014bfe:	099b      	lsrs	r3, r3, #6
 8014c00:	461a      	mov	r2, r3
 8014c02:	f04f 0300 	mov.w	r3, #0
 8014c06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8014c0a:	f04f 0100 	mov.w	r1, #0
 8014c0e:	ea02 0400 	and.w	r4, r2, r0
 8014c12:	ea03 0501 	and.w	r5, r3, r1
 8014c16:	4620      	mov	r0, r4
 8014c18:	4629      	mov	r1, r5
 8014c1a:	f04f 0200 	mov.w	r2, #0
 8014c1e:	f04f 0300 	mov.w	r3, #0
 8014c22:	014b      	lsls	r3, r1, #5
 8014c24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8014c28:	0142      	lsls	r2, r0, #5
 8014c2a:	4610      	mov	r0, r2
 8014c2c:	4619      	mov	r1, r3
 8014c2e:	1b00      	subs	r0, r0, r4
 8014c30:	eb61 0105 	sbc.w	r1, r1, r5
 8014c34:	f04f 0200 	mov.w	r2, #0
 8014c38:	f04f 0300 	mov.w	r3, #0
 8014c3c:	018b      	lsls	r3, r1, #6
 8014c3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8014c42:	0182      	lsls	r2, r0, #6
 8014c44:	1a12      	subs	r2, r2, r0
 8014c46:	eb63 0301 	sbc.w	r3, r3, r1
 8014c4a:	f04f 0000 	mov.w	r0, #0
 8014c4e:	f04f 0100 	mov.w	r1, #0
 8014c52:	00d9      	lsls	r1, r3, #3
 8014c54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014c58:	00d0      	lsls	r0, r2, #3
 8014c5a:	4602      	mov	r2, r0
 8014c5c:	460b      	mov	r3, r1
 8014c5e:	1912      	adds	r2, r2, r4
 8014c60:	eb45 0303 	adc.w	r3, r5, r3
 8014c64:	f04f 0000 	mov.w	r0, #0
 8014c68:	f04f 0100 	mov.w	r1, #0
 8014c6c:	0299      	lsls	r1, r3, #10
 8014c6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8014c72:	0290      	lsls	r0, r2, #10
 8014c74:	4602      	mov	r2, r0
 8014c76:	460b      	mov	r3, r1
 8014c78:	4610      	mov	r0, r2
 8014c7a:	4619      	mov	r1, r3
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	461a      	mov	r2, r3
 8014c80:	f04f 0300 	mov.w	r3, #0
 8014c84:	f7ec f800 	bl	8000c88 <__aeabi_uldivmod>
 8014c88:	4602      	mov	r2, r0
 8014c8a:	460b      	mov	r3, r1
 8014c8c:	4613      	mov	r3, r2
 8014c8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8014c90:	4b0b      	ldr	r3, [pc, #44]	; (8014cc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8014c92:	685b      	ldr	r3, [r3, #4]
 8014c94:	0c1b      	lsrs	r3, r3, #16
 8014c96:	f003 0303 	and.w	r3, r3, #3
 8014c9a:	3301      	adds	r3, #1
 8014c9c:	005b      	lsls	r3, r3, #1
 8014c9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8014ca0:	68fa      	ldr	r2, [r7, #12]
 8014ca2:	683b      	ldr	r3, [r7, #0]
 8014ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8014ca8:	60bb      	str	r3, [r7, #8]
      break;
 8014caa:	e002      	b.n	8014cb2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8014cac:	4b05      	ldr	r3, [pc, #20]	; (8014cc4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8014cae:	60bb      	str	r3, [r7, #8]
      break;
 8014cb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8014cb2:	68bb      	ldr	r3, [r7, #8]
}
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	3710      	adds	r7, #16
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8014cbe:	bf00      	nop
 8014cc0:	40023800 	.word	0x40023800
 8014cc4:	00f42400 	.word	0x00f42400
 8014cc8:	007a1200 	.word	0x007a1200

08014ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014ccc:	b480      	push	{r7}
 8014cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8014cd0:	4b03      	ldr	r3, [pc, #12]	; (8014ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8014cd2:	681b      	ldr	r3, [r3, #0]
}
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cdc:	4770      	bx	lr
 8014cde:	bf00      	nop
 8014ce0:	20000054 	.word	0x20000054

08014ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8014ce8:	f7ff fff0 	bl	8014ccc <HAL_RCC_GetHCLKFreq>
 8014cec:	4602      	mov	r2, r0
 8014cee:	4b05      	ldr	r3, [pc, #20]	; (8014d04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8014cf0:	689b      	ldr	r3, [r3, #8]
 8014cf2:	0a9b      	lsrs	r3, r3, #10
 8014cf4:	f003 0307 	and.w	r3, r3, #7
 8014cf8:	4903      	ldr	r1, [pc, #12]	; (8014d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8014cfa:	5ccb      	ldrb	r3, [r1, r3]
 8014cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014d00:	4618      	mov	r0, r3
 8014d02:	bd80      	pop	{r7, pc}
 8014d04:	40023800 	.word	0x40023800
 8014d08:	080200b0 	.word	0x080200b0

08014d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8014d10:	f7ff ffdc 	bl	8014ccc <HAL_RCC_GetHCLKFreq>
 8014d14:	4602      	mov	r2, r0
 8014d16:	4b05      	ldr	r3, [pc, #20]	; (8014d2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8014d18:	689b      	ldr	r3, [r3, #8]
 8014d1a:	0b5b      	lsrs	r3, r3, #13
 8014d1c:	f003 0307 	and.w	r3, r3, #7
 8014d20:	4903      	ldr	r1, [pc, #12]	; (8014d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8014d22:	5ccb      	ldrb	r3, [r1, r3]
 8014d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014d28:	4618      	mov	r0, r3
 8014d2a:	bd80      	pop	{r7, pc}
 8014d2c:	40023800 	.word	0x40023800
 8014d30:	080200b0 	.word	0x080200b0

08014d34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8014d34:	b480      	push	{r7}
 8014d36:	b083      	sub	sp, #12
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	6078      	str	r0, [r7, #4]
 8014d3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	220f      	movs	r2, #15
 8014d42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8014d44:	4b12      	ldr	r3, [pc, #72]	; (8014d90 <HAL_RCC_GetClockConfig+0x5c>)
 8014d46:	689b      	ldr	r3, [r3, #8]
 8014d48:	f003 0203 	and.w	r2, r3, #3
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8014d50:	4b0f      	ldr	r3, [pc, #60]	; (8014d90 <HAL_RCC_GetClockConfig+0x5c>)
 8014d52:	689b      	ldr	r3, [r3, #8]
 8014d54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8014d5c:	4b0c      	ldr	r3, [pc, #48]	; (8014d90 <HAL_RCC_GetClockConfig+0x5c>)
 8014d5e:	689b      	ldr	r3, [r3, #8]
 8014d60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8014d68:	4b09      	ldr	r3, [pc, #36]	; (8014d90 <HAL_RCC_GetClockConfig+0x5c>)
 8014d6a:	689b      	ldr	r3, [r3, #8]
 8014d6c:	08db      	lsrs	r3, r3, #3
 8014d6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8014d76:	4b07      	ldr	r3, [pc, #28]	; (8014d94 <HAL_RCC_GetClockConfig+0x60>)
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	f003 020f 	and.w	r2, r3, #15
 8014d7e:	683b      	ldr	r3, [r7, #0]
 8014d80:	601a      	str	r2, [r3, #0]
}
 8014d82:	bf00      	nop
 8014d84:	370c      	adds	r7, #12
 8014d86:	46bd      	mov	sp, r7
 8014d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8c:	4770      	bx	lr
 8014d8e:	bf00      	nop
 8014d90:	40023800 	.word	0x40023800
 8014d94:	40023c00 	.word	0x40023c00

08014d98 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b088      	sub	sp, #32
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	685b      	ldr	r3, [r3, #4]
 8014da6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	689b      	ldr	r3, [r3, #8]
 8014dae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8014db0:	69bb      	ldr	r3, [r7, #24]
 8014db2:	099b      	lsrs	r3, r3, #6
 8014db4:	f003 0301 	and.w	r3, r3, #1
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d10f      	bne.n	8014ddc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8014dbc:	69bb      	ldr	r3, [r7, #24]
 8014dbe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d00a      	beq.n	8014ddc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8014dc6:	69fb      	ldr	r3, [r7, #28]
 8014dc8:	099b      	lsrs	r3, r3, #6
 8014dca:	f003 0301 	and.w	r3, r3, #1
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d004      	beq.n	8014ddc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014dd6:	6878      	ldr	r0, [r7, #4]
 8014dd8:	4798      	blx	r3
    return;
 8014dda:	e0d7      	b.n	8014f8c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8014ddc:	69bb      	ldr	r3, [r7, #24]
 8014dde:	085b      	lsrs	r3, r3, #1
 8014de0:	f003 0301 	and.w	r3, r3, #1
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d00a      	beq.n	8014dfe <HAL_SPI_IRQHandler+0x66>
 8014de8:	69fb      	ldr	r3, [r7, #28]
 8014dea:	09db      	lsrs	r3, r3, #7
 8014dec:	f003 0301 	and.w	r3, r3, #1
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d004      	beq.n	8014dfe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014df8:	6878      	ldr	r0, [r7, #4]
 8014dfa:	4798      	blx	r3
    return;
 8014dfc:	e0c6      	b.n	8014f8c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8014dfe:	69bb      	ldr	r3, [r7, #24]
 8014e00:	095b      	lsrs	r3, r3, #5
 8014e02:	f003 0301 	and.w	r3, r3, #1
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d10c      	bne.n	8014e24 <HAL_SPI_IRQHandler+0x8c>
 8014e0a:	69bb      	ldr	r3, [r7, #24]
 8014e0c:	099b      	lsrs	r3, r3, #6
 8014e0e:	f003 0301 	and.w	r3, r3, #1
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d106      	bne.n	8014e24 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8014e16:	69bb      	ldr	r3, [r7, #24]
 8014e18:	0a1b      	lsrs	r3, r3, #8
 8014e1a:	f003 0301 	and.w	r3, r3, #1
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	f000 80b4 	beq.w	8014f8c <HAL_SPI_IRQHandler+0x1f4>
 8014e24:	69fb      	ldr	r3, [r7, #28]
 8014e26:	095b      	lsrs	r3, r3, #5
 8014e28:	f003 0301 	and.w	r3, r3, #1
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	f000 80ad 	beq.w	8014f8c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8014e32:	69bb      	ldr	r3, [r7, #24]
 8014e34:	099b      	lsrs	r3, r3, #6
 8014e36:	f003 0301 	and.w	r3, r3, #1
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d023      	beq.n	8014e86 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014e44:	b2db      	uxtb	r3, r3
 8014e46:	2b03      	cmp	r3, #3
 8014e48:	d011      	beq.n	8014e6e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e4e:	f043 0204 	orr.w	r2, r3, #4
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014e56:	2300      	movs	r3, #0
 8014e58:	617b      	str	r3, [r7, #20]
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	68db      	ldr	r3, [r3, #12]
 8014e60:	617b      	str	r3, [r7, #20]
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	689b      	ldr	r3, [r3, #8]
 8014e68:	617b      	str	r3, [r7, #20]
 8014e6a:	697b      	ldr	r3, [r7, #20]
 8014e6c:	e00b      	b.n	8014e86 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014e6e:	2300      	movs	r3, #0
 8014e70:	613b      	str	r3, [r7, #16]
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	68db      	ldr	r3, [r3, #12]
 8014e78:	613b      	str	r3, [r7, #16]
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	689b      	ldr	r3, [r3, #8]
 8014e80:	613b      	str	r3, [r7, #16]
 8014e82:	693b      	ldr	r3, [r7, #16]
        return;
 8014e84:	e082      	b.n	8014f8c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8014e86:	69bb      	ldr	r3, [r7, #24]
 8014e88:	095b      	lsrs	r3, r3, #5
 8014e8a:	f003 0301 	and.w	r3, r3, #1
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d014      	beq.n	8014ebc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e96:	f043 0201 	orr.w	r2, r3, #1
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	60fb      	str	r3, [r7, #12]
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	689b      	ldr	r3, [r3, #8]
 8014ea8:	60fb      	str	r3, [r7, #12]
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	681a      	ldr	r2, [r3, #0]
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014eb8:	601a      	str	r2, [r3, #0]
 8014eba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8014ebc:	69bb      	ldr	r3, [r7, #24]
 8014ebe:	0a1b      	lsrs	r3, r3, #8
 8014ec0:	f003 0301 	and.w	r3, r3, #1
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d00c      	beq.n	8014ee2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ecc:	f043 0208 	orr.w	r2, r3, #8
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	60bb      	str	r3, [r7, #8]
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	689b      	ldr	r3, [r3, #8]
 8014ede:	60bb      	str	r3, [r7, #8]
 8014ee0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d04f      	beq.n	8014f8a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	685a      	ldr	r2, [r3, #4]
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014ef8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	2201      	movs	r2, #1
 8014efe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8014f02:	69fb      	ldr	r3, [r7, #28]
 8014f04:	f003 0302 	and.w	r3, r3, #2
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d104      	bne.n	8014f16 <HAL_SPI_IRQHandler+0x17e>
 8014f0c:	69fb      	ldr	r3, [r7, #28]
 8014f0e:	f003 0301 	and.w	r3, r3, #1
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d034      	beq.n	8014f80 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	685a      	ldr	r2, [r3, #4]
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	f022 0203 	bic.w	r2, r2, #3
 8014f24:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d011      	beq.n	8014f52 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014f32:	4a18      	ldr	r2, [pc, #96]	; (8014f94 <HAL_SPI_IRQHandler+0x1fc>)
 8014f34:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	f7fc fcca 	bl	80118d4 <HAL_DMA_Abort_IT>
 8014f40:	4603      	mov	r3, r0
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d005      	beq.n	8014f52 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014f4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d016      	beq.n	8014f88 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014f5e:	4a0d      	ldr	r2, [pc, #52]	; (8014f94 <HAL_SPI_IRQHandler+0x1fc>)
 8014f60:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014f66:	4618      	mov	r0, r3
 8014f68:	f7fc fcb4 	bl	80118d4 <HAL_DMA_Abort_IT>
 8014f6c:	4603      	mov	r3, r0
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d00a      	beq.n	8014f88 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014f76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8014f7e:	e003      	b.n	8014f88 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8014f80:	6878      	ldr	r0, [r7, #4]
 8014f82:	f000 f809 	bl	8014f98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8014f86:	e000      	b.n	8014f8a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8014f88:	bf00      	nop
    return;
 8014f8a:	bf00      	nop
  }
}
 8014f8c:	3720      	adds	r7, #32
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	bd80      	pop	{r7, pc}
 8014f92:	bf00      	nop
 8014f94:	08014fad 	.word	0x08014fad

08014f98 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8014f98:	b480      	push	{r7}
 8014f9a:	b083      	sub	sp, #12
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8014fa0:	bf00      	nop
 8014fa2:	370c      	adds	r7, #12
 8014fa4:	46bd      	mov	sp, r7
 8014fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014faa:	4770      	bx	lr

08014fac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014fac:	b580      	push	{r7, lr}
 8014fae:	b084      	sub	sp, #16
 8014fb0:	af00      	add	r7, sp, #0
 8014fb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014fb8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	2200      	movs	r2, #0
 8014fbe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	2200      	movs	r2, #0
 8014fc4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8014fc6:	68f8      	ldr	r0, [r7, #12]
 8014fc8:	f7ff ffe6 	bl	8014f98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014fcc:	bf00      	nop
 8014fce:	3710      	adds	r7, #16
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	bd80      	pop	{r7, pc}

08014fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b082      	sub	sp, #8
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d101      	bne.n	8014fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8014fe2:	2301      	movs	r3, #1
 8014fe4:	e01d      	b.n	8015022 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014fec:	b2db      	uxtb	r3, r3
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d106      	bne.n	8015000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8014ffa:	6878      	ldr	r0, [r7, #4]
 8014ffc:	f7ed fac6 	bl	800258c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	2202      	movs	r2, #2
 8015004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	681a      	ldr	r2, [r3, #0]
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	3304      	adds	r3, #4
 8015010:	4619      	mov	r1, r3
 8015012:	4610      	mov	r0, r2
 8015014:	f000 fc3e 	bl	8015894 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	2201      	movs	r2, #1
 801501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015020:	2300      	movs	r3, #0
}
 8015022:	4618      	mov	r0, r3
 8015024:	3708      	adds	r7, #8
 8015026:	46bd      	mov	sp, r7
 8015028:	bd80      	pop	{r7, pc}

0801502a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801502a:	b480      	push	{r7}
 801502c:	b085      	sub	sp, #20
 801502e:	af00      	add	r7, sp, #0
 8015030:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	2202      	movs	r2, #2
 8015036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	689b      	ldr	r3, [r3, #8]
 8015040:	f003 0307 	and.w	r3, r3, #7
 8015044:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	2b06      	cmp	r3, #6
 801504a:	d007      	beq.n	801505c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	681a      	ldr	r2, [r3, #0]
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	f042 0201 	orr.w	r2, r2, #1
 801505a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	2201      	movs	r2, #1
 8015060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8015064:	2300      	movs	r3, #0
}
 8015066:	4618      	mov	r0, r3
 8015068:	3714      	adds	r7, #20
 801506a:	46bd      	mov	sp, r7
 801506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015070:	4770      	bx	lr

08015072 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8015072:	b480      	push	{r7}
 8015074:	b085      	sub	sp, #20
 8015076:	af00      	add	r7, sp, #0
 8015078:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	68da      	ldr	r2, [r3, #12]
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	f042 0201 	orr.w	r2, r2, #1
 8015088:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	689b      	ldr	r3, [r3, #8]
 8015090:	f003 0307 	and.w	r3, r3, #7
 8015094:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	2b06      	cmp	r3, #6
 801509a:	d007      	beq.n	80150ac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	681a      	ldr	r2, [r3, #0]
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	f042 0201 	orr.w	r2, r2, #1
 80150aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80150ac:	2300      	movs	r3, #0
}
 80150ae:	4618      	mov	r0, r3
 80150b0:	3714      	adds	r7, #20
 80150b2:	46bd      	mov	sp, r7
 80150b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b8:	4770      	bx	lr

080150ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80150ba:	b580      	push	{r7, lr}
 80150bc:	b082      	sub	sp, #8
 80150be:	af00      	add	r7, sp, #0
 80150c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d101      	bne.n	80150cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80150c8:	2301      	movs	r3, #1
 80150ca:	e01d      	b.n	8015108 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80150d2:	b2db      	uxtb	r3, r3
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d106      	bne.n	80150e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	2200      	movs	r2, #0
 80150dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80150e0:	6878      	ldr	r0, [r7, #4]
 80150e2:	f7ed f915 	bl	8002310 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	2202      	movs	r2, #2
 80150ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	681a      	ldr	r2, [r3, #0]
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	3304      	adds	r3, #4
 80150f6:	4619      	mov	r1, r3
 80150f8:	4610      	mov	r0, r2
 80150fa:	f000 fbcb 	bl	8015894 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	2201      	movs	r2, #1
 8015102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015106:	2300      	movs	r3, #0
}
 8015108:	4618      	mov	r0, r3
 801510a:	3708      	adds	r7, #8
 801510c:	46bd      	mov	sp, r7
 801510e:	bd80      	pop	{r7, pc}

08015110 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015110:	b580      	push	{r7, lr}
 8015112:	b084      	sub	sp, #16
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
 8015118:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	2201      	movs	r2, #1
 8015120:	6839      	ldr	r1, [r7, #0]
 8015122:	4618      	mov	r0, r3
 8015124:	f000 fea0 	bl	8015e68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	4a15      	ldr	r2, [pc, #84]	; (8015184 <HAL_TIM_PWM_Start+0x74>)
 801512e:	4293      	cmp	r3, r2
 8015130:	d004      	beq.n	801513c <HAL_TIM_PWM_Start+0x2c>
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	4a14      	ldr	r2, [pc, #80]	; (8015188 <HAL_TIM_PWM_Start+0x78>)
 8015138:	4293      	cmp	r3, r2
 801513a:	d101      	bne.n	8015140 <HAL_TIM_PWM_Start+0x30>
 801513c:	2301      	movs	r3, #1
 801513e:	e000      	b.n	8015142 <HAL_TIM_PWM_Start+0x32>
 8015140:	2300      	movs	r3, #0
 8015142:	2b00      	cmp	r3, #0
 8015144:	d007      	beq.n	8015156 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8015154:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	689b      	ldr	r3, [r3, #8]
 801515c:	f003 0307 	and.w	r3, r3, #7
 8015160:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	2b06      	cmp	r3, #6
 8015166:	d007      	beq.n	8015178 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	681a      	ldr	r2, [r3, #0]
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	f042 0201 	orr.w	r2, r2, #1
 8015176:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8015178:	2300      	movs	r3, #0
}
 801517a:	4618      	mov	r0, r3
 801517c:	3710      	adds	r7, #16
 801517e:	46bd      	mov	sp, r7
 8015180:	bd80      	pop	{r7, pc}
 8015182:	bf00      	nop
 8015184:	40010000 	.word	0x40010000
 8015188:	40010400 	.word	0x40010400

0801518c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 801518c:	b580      	push	{r7, lr}
 801518e:	b086      	sub	sp, #24
 8015190:	af00      	add	r7, sp, #0
 8015192:	6078      	str	r0, [r7, #4]
 8015194:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	2b00      	cmp	r3, #0
 801519a:	d101      	bne.n	80151a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 801519c:	2301      	movs	r3, #1
 801519e:	e083      	b.n	80152a8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80151a6:	b2db      	uxtb	r3, r3
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d106      	bne.n	80151ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	2200      	movs	r2, #0
 80151b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80151b4:	6878      	ldr	r0, [r7, #4]
 80151b6:	f7ed fc9d 	bl	8002af4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	2202      	movs	r2, #2
 80151be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	689b      	ldr	r3, [r3, #8]
 80151c8:	687a      	ldr	r2, [r7, #4]
 80151ca:	6812      	ldr	r2, [r2, #0]
 80151cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80151d0:	f023 0307 	bic.w	r3, r3, #7
 80151d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	681a      	ldr	r2, [r3, #0]
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	3304      	adds	r3, #4
 80151de:	4619      	mov	r1, r3
 80151e0:	4610      	mov	r0, r2
 80151e2:	f000 fb57 	bl	8015894 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	689b      	ldr	r3, [r3, #8]
 80151ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	699b      	ldr	r3, [r3, #24]
 80151f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	681b      	ldr	r3, [r3, #0]
 80151fa:	6a1b      	ldr	r3, [r3, #32]
 80151fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80151fe:	683b      	ldr	r3, [r7, #0]
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	697a      	ldr	r2, [r7, #20]
 8015204:	4313      	orrs	r3, r2
 8015206:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8015208:	693b      	ldr	r3, [r7, #16]
 801520a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801520e:	f023 0303 	bic.w	r3, r3, #3
 8015212:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8015214:	683b      	ldr	r3, [r7, #0]
 8015216:	689a      	ldr	r2, [r3, #8]
 8015218:	683b      	ldr	r3, [r7, #0]
 801521a:	699b      	ldr	r3, [r3, #24]
 801521c:	021b      	lsls	r3, r3, #8
 801521e:	4313      	orrs	r3, r2
 8015220:	693a      	ldr	r2, [r7, #16]
 8015222:	4313      	orrs	r3, r2
 8015224:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8015226:	693b      	ldr	r3, [r7, #16]
 8015228:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 801522c:	f023 030c 	bic.w	r3, r3, #12
 8015230:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8015232:	693b      	ldr	r3, [r7, #16]
 8015234:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015238:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801523c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 801523e:	683b      	ldr	r3, [r7, #0]
 8015240:	68da      	ldr	r2, [r3, #12]
 8015242:	683b      	ldr	r3, [r7, #0]
 8015244:	69db      	ldr	r3, [r3, #28]
 8015246:	021b      	lsls	r3, r3, #8
 8015248:	4313      	orrs	r3, r2
 801524a:	693a      	ldr	r2, [r7, #16]
 801524c:	4313      	orrs	r3, r2
 801524e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8015250:	683b      	ldr	r3, [r7, #0]
 8015252:	691b      	ldr	r3, [r3, #16]
 8015254:	011a      	lsls	r2, r3, #4
 8015256:	683b      	ldr	r3, [r7, #0]
 8015258:	6a1b      	ldr	r3, [r3, #32]
 801525a:	031b      	lsls	r3, r3, #12
 801525c:	4313      	orrs	r3, r2
 801525e:	693a      	ldr	r2, [r7, #16]
 8015260:	4313      	orrs	r3, r2
 8015262:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 801526a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8015272:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8015274:	683b      	ldr	r3, [r7, #0]
 8015276:	685a      	ldr	r2, [r3, #4]
 8015278:	683b      	ldr	r3, [r7, #0]
 801527a:	695b      	ldr	r3, [r3, #20]
 801527c:	011b      	lsls	r3, r3, #4
 801527e:	4313      	orrs	r3, r2
 8015280:	68fa      	ldr	r2, [r7, #12]
 8015282:	4313      	orrs	r3, r2
 8015284:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	697a      	ldr	r2, [r7, #20]
 801528c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	693a      	ldr	r2, [r7, #16]
 8015294:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	68fa      	ldr	r2, [r7, #12]
 801529c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	2201      	movs	r2, #1
 80152a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80152a6:	2300      	movs	r3, #0
}
 80152a8:	4618      	mov	r0, r3
 80152aa:	3718      	adds	r7, #24
 80152ac:	46bd      	mov	sp, r7
 80152ae:	bd80      	pop	{r7, pc}

080152b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b082      	sub	sp, #8
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
 80152b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80152ba:	683b      	ldr	r3, [r7, #0]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d003      	beq.n	80152c8 <HAL_TIM_Encoder_Start+0x18>
 80152c0:	683b      	ldr	r3, [r7, #0]
 80152c2:	2b04      	cmp	r3, #4
 80152c4:	d008      	beq.n	80152d8 <HAL_TIM_Encoder_Start+0x28>
 80152c6:	e00f      	b.n	80152e8 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	2201      	movs	r2, #1
 80152ce:	2100      	movs	r1, #0
 80152d0:	4618      	mov	r0, r3
 80152d2:	f000 fdc9 	bl	8015e68 <TIM_CCxChannelCmd>
      break;
 80152d6:	e016      	b.n	8015306 <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	2201      	movs	r2, #1
 80152de:	2104      	movs	r1, #4
 80152e0:	4618      	mov	r0, r3
 80152e2:	f000 fdc1 	bl	8015e68 <TIM_CCxChannelCmd>
      break;
 80152e6:	e00e      	b.n	8015306 <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	2201      	movs	r2, #1
 80152ee:	2100      	movs	r1, #0
 80152f0:	4618      	mov	r0, r3
 80152f2:	f000 fdb9 	bl	8015e68 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	2201      	movs	r2, #1
 80152fc:	2104      	movs	r1, #4
 80152fe:	4618      	mov	r0, r3
 8015300:	f000 fdb2 	bl	8015e68 <TIM_CCxChannelCmd>
      break;
 8015304:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	681a      	ldr	r2, [r3, #0]
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	f042 0201 	orr.w	r2, r2, #1
 8015314:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8015316:	2300      	movs	r3, #0
}
 8015318:	4618      	mov	r0, r3
 801531a:	3708      	adds	r7, #8
 801531c:	46bd      	mov	sp, r7
 801531e:	bd80      	pop	{r7, pc}

08015320 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8015320:	b580      	push	{r7, lr}
 8015322:	b082      	sub	sp, #8
 8015324:	af00      	add	r7, sp, #0
 8015326:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	691b      	ldr	r3, [r3, #16]
 801532e:	f003 0302 	and.w	r3, r3, #2
 8015332:	2b02      	cmp	r3, #2
 8015334:	d122      	bne.n	801537c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	68db      	ldr	r3, [r3, #12]
 801533c:	f003 0302 	and.w	r3, r3, #2
 8015340:	2b02      	cmp	r3, #2
 8015342:	d11b      	bne.n	801537c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	f06f 0202 	mvn.w	r2, #2
 801534c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	2201      	movs	r2, #1
 8015352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	699b      	ldr	r3, [r3, #24]
 801535a:	f003 0303 	and.w	r3, r3, #3
 801535e:	2b00      	cmp	r3, #0
 8015360:	d003      	beq.n	801536a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8015362:	6878      	ldr	r0, [r7, #4]
 8015364:	f000 fa78 	bl	8015858 <HAL_TIM_IC_CaptureCallback>
 8015368:	e005      	b.n	8015376 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801536a:	6878      	ldr	r0, [r7, #4]
 801536c:	f000 fa6a 	bl	8015844 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015370:	6878      	ldr	r0, [r7, #4]
 8015372:	f000 fa7b 	bl	801586c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	2200      	movs	r2, #0
 801537a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	691b      	ldr	r3, [r3, #16]
 8015382:	f003 0304 	and.w	r3, r3, #4
 8015386:	2b04      	cmp	r3, #4
 8015388:	d122      	bne.n	80153d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	68db      	ldr	r3, [r3, #12]
 8015390:	f003 0304 	and.w	r3, r3, #4
 8015394:	2b04      	cmp	r3, #4
 8015396:	d11b      	bne.n	80153d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	f06f 0204 	mvn.w	r2, #4
 80153a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	2202      	movs	r2, #2
 80153a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	699b      	ldr	r3, [r3, #24]
 80153ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d003      	beq.n	80153be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80153b6:	6878      	ldr	r0, [r7, #4]
 80153b8:	f000 fa4e 	bl	8015858 <HAL_TIM_IC_CaptureCallback>
 80153bc:	e005      	b.n	80153ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80153be:	6878      	ldr	r0, [r7, #4]
 80153c0:	f000 fa40 	bl	8015844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80153c4:	6878      	ldr	r0, [r7, #4]
 80153c6:	f000 fa51 	bl	801586c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	2200      	movs	r2, #0
 80153ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	691b      	ldr	r3, [r3, #16]
 80153d6:	f003 0308 	and.w	r3, r3, #8
 80153da:	2b08      	cmp	r3, #8
 80153dc:	d122      	bne.n	8015424 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	68db      	ldr	r3, [r3, #12]
 80153e4:	f003 0308 	and.w	r3, r3, #8
 80153e8:	2b08      	cmp	r3, #8
 80153ea:	d11b      	bne.n	8015424 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	f06f 0208 	mvn.w	r2, #8
 80153f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	2204      	movs	r2, #4
 80153fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	69db      	ldr	r3, [r3, #28]
 8015402:	f003 0303 	and.w	r3, r3, #3
 8015406:	2b00      	cmp	r3, #0
 8015408:	d003      	beq.n	8015412 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801540a:	6878      	ldr	r0, [r7, #4]
 801540c:	f000 fa24 	bl	8015858 <HAL_TIM_IC_CaptureCallback>
 8015410:	e005      	b.n	801541e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015412:	6878      	ldr	r0, [r7, #4]
 8015414:	f000 fa16 	bl	8015844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015418:	6878      	ldr	r0, [r7, #4]
 801541a:	f000 fa27 	bl	801586c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	2200      	movs	r2, #0
 8015422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	691b      	ldr	r3, [r3, #16]
 801542a:	f003 0310 	and.w	r3, r3, #16
 801542e:	2b10      	cmp	r3, #16
 8015430:	d122      	bne.n	8015478 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	68db      	ldr	r3, [r3, #12]
 8015438:	f003 0310 	and.w	r3, r3, #16
 801543c:	2b10      	cmp	r3, #16
 801543e:	d11b      	bne.n	8015478 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	f06f 0210 	mvn.w	r2, #16
 8015448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	2208      	movs	r2, #8
 801544e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	69db      	ldr	r3, [r3, #28]
 8015456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801545a:	2b00      	cmp	r3, #0
 801545c:	d003      	beq.n	8015466 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801545e:	6878      	ldr	r0, [r7, #4]
 8015460:	f000 f9fa 	bl	8015858 <HAL_TIM_IC_CaptureCallback>
 8015464:	e005      	b.n	8015472 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015466:	6878      	ldr	r0, [r7, #4]
 8015468:	f000 f9ec 	bl	8015844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801546c:	6878      	ldr	r0, [r7, #4]
 801546e:	f000 f9fd 	bl	801586c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	2200      	movs	r2, #0
 8015476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	691b      	ldr	r3, [r3, #16]
 801547e:	f003 0301 	and.w	r3, r3, #1
 8015482:	2b01      	cmp	r3, #1
 8015484:	d10e      	bne.n	80154a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	68db      	ldr	r3, [r3, #12]
 801548c:	f003 0301 	and.w	r3, r3, #1
 8015490:	2b01      	cmp	r3, #1
 8015492:	d107      	bne.n	80154a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	f06f 0201 	mvn.w	r2, #1
 801549c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801549e:	6878      	ldr	r0, [r7, #4]
 80154a0:	f7f7 fc1c 	bl	800ccdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	691b      	ldr	r3, [r3, #16]
 80154aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80154ae:	2b80      	cmp	r3, #128	; 0x80
 80154b0:	d10e      	bne.n	80154d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	68db      	ldr	r3, [r3, #12]
 80154b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80154bc:	2b80      	cmp	r3, #128	; 0x80
 80154be:	d107      	bne.n	80154d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80154c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80154ca:	6878      	ldr	r0, [r7, #4]
 80154cc:	f000 fd78 	bl	8015fc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	691b      	ldr	r3, [r3, #16]
 80154d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80154da:	2b40      	cmp	r3, #64	; 0x40
 80154dc:	d10e      	bne.n	80154fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	68db      	ldr	r3, [r3, #12]
 80154e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80154e8:	2b40      	cmp	r3, #64	; 0x40
 80154ea:	d107      	bne.n	80154fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80154f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80154f6:	6878      	ldr	r0, [r7, #4]
 80154f8:	f000 f9c2 	bl	8015880 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	691b      	ldr	r3, [r3, #16]
 8015502:	f003 0320 	and.w	r3, r3, #32
 8015506:	2b20      	cmp	r3, #32
 8015508:	d10e      	bne.n	8015528 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	68db      	ldr	r3, [r3, #12]
 8015510:	f003 0320 	and.w	r3, r3, #32
 8015514:	2b20      	cmp	r3, #32
 8015516:	d107      	bne.n	8015528 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	f06f 0220 	mvn.w	r2, #32
 8015520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8015522:	6878      	ldr	r0, [r7, #4]
 8015524:	f000 fd42 	bl	8015fac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8015528:	bf00      	nop
 801552a:	3708      	adds	r7, #8
 801552c:	46bd      	mov	sp, r7
 801552e:	bd80      	pop	{r7, pc}

08015530 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8015530:	b580      	push	{r7, lr}
 8015532:	b084      	sub	sp, #16
 8015534:	af00      	add	r7, sp, #0
 8015536:	60f8      	str	r0, [r7, #12]
 8015538:	60b9      	str	r1, [r7, #8]
 801553a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015542:	2b01      	cmp	r3, #1
 8015544:	d101      	bne.n	801554a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8015546:	2302      	movs	r3, #2
 8015548:	e0b4      	b.n	80156b4 <HAL_TIM_PWM_ConfigChannel+0x184>
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	2201      	movs	r2, #1
 801554e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	2202      	movs	r2, #2
 8015556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	2b0c      	cmp	r3, #12
 801555e:	f200 809f 	bhi.w	80156a0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8015562:	a201      	add	r2, pc, #4	; (adr r2, 8015568 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8015564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015568:	0801559d 	.word	0x0801559d
 801556c:	080156a1 	.word	0x080156a1
 8015570:	080156a1 	.word	0x080156a1
 8015574:	080156a1 	.word	0x080156a1
 8015578:	080155dd 	.word	0x080155dd
 801557c:	080156a1 	.word	0x080156a1
 8015580:	080156a1 	.word	0x080156a1
 8015584:	080156a1 	.word	0x080156a1
 8015588:	0801561f 	.word	0x0801561f
 801558c:	080156a1 	.word	0x080156a1
 8015590:	080156a1 	.word	0x080156a1
 8015594:	080156a1 	.word	0x080156a1
 8015598:	0801565f 	.word	0x0801565f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	68b9      	ldr	r1, [r7, #8]
 80155a2:	4618      	mov	r0, r3
 80155a4:	f000 fa16 	bl	80159d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	699a      	ldr	r2, [r3, #24]
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	f042 0208 	orr.w	r2, r2, #8
 80155b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	699a      	ldr	r2, [r3, #24]
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	f022 0204 	bic.w	r2, r2, #4
 80155c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	6999      	ldr	r1, [r3, #24]
 80155ce:	68bb      	ldr	r3, [r7, #8]
 80155d0:	691a      	ldr	r2, [r3, #16]
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	430a      	orrs	r2, r1
 80155d8:	619a      	str	r2, [r3, #24]
      break;
 80155da:	e062      	b.n	80156a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	68b9      	ldr	r1, [r7, #8]
 80155e2:	4618      	mov	r0, r3
 80155e4:	f000 fa66 	bl	8015ab4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	699a      	ldr	r2, [r3, #24]
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80155f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	699a      	ldr	r2, [r3, #24]
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	6999      	ldr	r1, [r3, #24]
 801560e:	68bb      	ldr	r3, [r7, #8]
 8015610:	691b      	ldr	r3, [r3, #16]
 8015612:	021a      	lsls	r2, r3, #8
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	430a      	orrs	r2, r1
 801561a:	619a      	str	r2, [r3, #24]
      break;
 801561c:	e041      	b.n	80156a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	68b9      	ldr	r1, [r7, #8]
 8015624:	4618      	mov	r0, r3
 8015626:	f000 fabb 	bl	8015ba0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	69da      	ldr	r2, [r3, #28]
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	f042 0208 	orr.w	r2, r2, #8
 8015638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	69da      	ldr	r2, [r3, #28]
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	f022 0204 	bic.w	r2, r2, #4
 8015648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	69d9      	ldr	r1, [r3, #28]
 8015650:	68bb      	ldr	r3, [r7, #8]
 8015652:	691a      	ldr	r2, [r3, #16]
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	430a      	orrs	r2, r1
 801565a:	61da      	str	r2, [r3, #28]
      break;
 801565c:	e021      	b.n	80156a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	68b9      	ldr	r1, [r7, #8]
 8015664:	4618      	mov	r0, r3
 8015666:	f000 fb0f 	bl	8015c88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	69da      	ldr	r2, [r3, #28]
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8015678:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	69da      	ldr	r2, [r3, #28]
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	69d9      	ldr	r1, [r3, #28]
 8015690:	68bb      	ldr	r3, [r7, #8]
 8015692:	691b      	ldr	r3, [r3, #16]
 8015694:	021a      	lsls	r2, r3, #8
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	430a      	orrs	r2, r1
 801569c:	61da      	str	r2, [r3, #28]
      break;
 801569e:	e000      	b.n	80156a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80156a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	2201      	movs	r2, #1
 80156a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	2200      	movs	r2, #0
 80156ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80156b2:	2300      	movs	r3, #0
}
 80156b4:	4618      	mov	r0, r3
 80156b6:	3710      	adds	r7, #16
 80156b8:	46bd      	mov	sp, r7
 80156ba:	bd80      	pop	{r7, pc}

080156bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b084      	sub	sp, #16
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	6078      	str	r0, [r7, #4]
 80156c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80156cc:	2b01      	cmp	r3, #1
 80156ce:	d101      	bne.n	80156d4 <HAL_TIM_ConfigClockSource+0x18>
 80156d0:	2302      	movs	r3, #2
 80156d2:	e0b3      	b.n	801583c <HAL_TIM_ConfigClockSource+0x180>
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	2201      	movs	r2, #1
 80156d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	2202      	movs	r2, #2
 80156e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	689b      	ldr	r3, [r3, #8]
 80156ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80156f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80156fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	68fa      	ldr	r2, [r7, #12]
 8015702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8015704:	683b      	ldr	r3, [r7, #0]
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801570c:	d03e      	beq.n	801578c <HAL_TIM_ConfigClockSource+0xd0>
 801570e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015712:	f200 8087 	bhi.w	8015824 <HAL_TIM_ConfigClockSource+0x168>
 8015716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801571a:	f000 8085 	beq.w	8015828 <HAL_TIM_ConfigClockSource+0x16c>
 801571e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015722:	d87f      	bhi.n	8015824 <HAL_TIM_ConfigClockSource+0x168>
 8015724:	2b70      	cmp	r3, #112	; 0x70
 8015726:	d01a      	beq.n	801575e <HAL_TIM_ConfigClockSource+0xa2>
 8015728:	2b70      	cmp	r3, #112	; 0x70
 801572a:	d87b      	bhi.n	8015824 <HAL_TIM_ConfigClockSource+0x168>
 801572c:	2b60      	cmp	r3, #96	; 0x60
 801572e:	d050      	beq.n	80157d2 <HAL_TIM_ConfigClockSource+0x116>
 8015730:	2b60      	cmp	r3, #96	; 0x60
 8015732:	d877      	bhi.n	8015824 <HAL_TIM_ConfigClockSource+0x168>
 8015734:	2b50      	cmp	r3, #80	; 0x50
 8015736:	d03c      	beq.n	80157b2 <HAL_TIM_ConfigClockSource+0xf6>
 8015738:	2b50      	cmp	r3, #80	; 0x50
 801573a:	d873      	bhi.n	8015824 <HAL_TIM_ConfigClockSource+0x168>
 801573c:	2b40      	cmp	r3, #64	; 0x40
 801573e:	d058      	beq.n	80157f2 <HAL_TIM_ConfigClockSource+0x136>
 8015740:	2b40      	cmp	r3, #64	; 0x40
 8015742:	d86f      	bhi.n	8015824 <HAL_TIM_ConfigClockSource+0x168>
 8015744:	2b30      	cmp	r3, #48	; 0x30
 8015746:	d064      	beq.n	8015812 <HAL_TIM_ConfigClockSource+0x156>
 8015748:	2b30      	cmp	r3, #48	; 0x30
 801574a:	d86b      	bhi.n	8015824 <HAL_TIM_ConfigClockSource+0x168>
 801574c:	2b20      	cmp	r3, #32
 801574e:	d060      	beq.n	8015812 <HAL_TIM_ConfigClockSource+0x156>
 8015750:	2b20      	cmp	r3, #32
 8015752:	d867      	bhi.n	8015824 <HAL_TIM_ConfigClockSource+0x168>
 8015754:	2b00      	cmp	r3, #0
 8015756:	d05c      	beq.n	8015812 <HAL_TIM_ConfigClockSource+0x156>
 8015758:	2b10      	cmp	r3, #16
 801575a:	d05a      	beq.n	8015812 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 801575c:	e062      	b.n	8015824 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	6818      	ldr	r0, [r3, #0]
 8015762:	683b      	ldr	r3, [r7, #0]
 8015764:	6899      	ldr	r1, [r3, #8]
 8015766:	683b      	ldr	r3, [r7, #0]
 8015768:	685a      	ldr	r2, [r3, #4]
 801576a:	683b      	ldr	r3, [r7, #0]
 801576c:	68db      	ldr	r3, [r3, #12]
 801576e:	f000 fb5b 	bl	8015e28 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	689b      	ldr	r3, [r3, #8]
 8015778:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8015780:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	68fa      	ldr	r2, [r7, #12]
 8015788:	609a      	str	r2, [r3, #8]
      break;
 801578a:	e04e      	b.n	801582a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	6818      	ldr	r0, [r3, #0]
 8015790:	683b      	ldr	r3, [r7, #0]
 8015792:	6899      	ldr	r1, [r3, #8]
 8015794:	683b      	ldr	r3, [r7, #0]
 8015796:	685a      	ldr	r2, [r3, #4]
 8015798:	683b      	ldr	r3, [r7, #0]
 801579a:	68db      	ldr	r3, [r3, #12]
 801579c:	f000 fb44 	bl	8015e28 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	689a      	ldr	r2, [r3, #8]
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80157ae:	609a      	str	r2, [r3, #8]
      break;
 80157b0:	e03b      	b.n	801582a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	6818      	ldr	r0, [r3, #0]
 80157b6:	683b      	ldr	r3, [r7, #0]
 80157b8:	6859      	ldr	r1, [r3, #4]
 80157ba:	683b      	ldr	r3, [r7, #0]
 80157bc:	68db      	ldr	r3, [r3, #12]
 80157be:	461a      	mov	r2, r3
 80157c0:	f000 fab8 	bl	8015d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	2150      	movs	r1, #80	; 0x50
 80157ca:	4618      	mov	r0, r3
 80157cc:	f000 fb11 	bl	8015df2 <TIM_ITRx_SetConfig>
      break;
 80157d0:	e02b      	b.n	801582a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	6818      	ldr	r0, [r3, #0]
 80157d6:	683b      	ldr	r3, [r7, #0]
 80157d8:	6859      	ldr	r1, [r3, #4]
 80157da:	683b      	ldr	r3, [r7, #0]
 80157dc:	68db      	ldr	r3, [r3, #12]
 80157de:	461a      	mov	r2, r3
 80157e0:	f000 fad7 	bl	8015d92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	2160      	movs	r1, #96	; 0x60
 80157ea:	4618      	mov	r0, r3
 80157ec:	f000 fb01 	bl	8015df2 <TIM_ITRx_SetConfig>
      break;
 80157f0:	e01b      	b.n	801582a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	6818      	ldr	r0, [r3, #0]
 80157f6:	683b      	ldr	r3, [r7, #0]
 80157f8:	6859      	ldr	r1, [r3, #4]
 80157fa:	683b      	ldr	r3, [r7, #0]
 80157fc:	68db      	ldr	r3, [r3, #12]
 80157fe:	461a      	mov	r2, r3
 8015800:	f000 fa98 	bl	8015d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	2140      	movs	r1, #64	; 0x40
 801580a:	4618      	mov	r0, r3
 801580c:	f000 faf1 	bl	8015df2 <TIM_ITRx_SetConfig>
      break;
 8015810:	e00b      	b.n	801582a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	681a      	ldr	r2, [r3, #0]
 8015816:	683b      	ldr	r3, [r7, #0]
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	4619      	mov	r1, r3
 801581c:	4610      	mov	r0, r2
 801581e:	f000 fae8 	bl	8015df2 <TIM_ITRx_SetConfig>
      break;
 8015822:	e002      	b.n	801582a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8015824:	bf00      	nop
 8015826:	e000      	b.n	801582a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8015828:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	2201      	movs	r2, #1
 801582e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	2200      	movs	r2, #0
 8015836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801583a:	2300      	movs	r3, #0
}
 801583c:	4618      	mov	r0, r3
 801583e:	3710      	adds	r7, #16
 8015840:	46bd      	mov	sp, r7
 8015842:	bd80      	pop	{r7, pc}

08015844 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015844:	b480      	push	{r7}
 8015846:	b083      	sub	sp, #12
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801584c:	bf00      	nop
 801584e:	370c      	adds	r7, #12
 8015850:	46bd      	mov	sp, r7
 8015852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015856:	4770      	bx	lr

08015858 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8015858:	b480      	push	{r7}
 801585a:	b083      	sub	sp, #12
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8015860:	bf00      	nop
 8015862:	370c      	adds	r7, #12
 8015864:	46bd      	mov	sp, r7
 8015866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801586a:	4770      	bx	lr

0801586c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801586c:	b480      	push	{r7}
 801586e:	b083      	sub	sp, #12
 8015870:	af00      	add	r7, sp, #0
 8015872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8015874:	bf00      	nop
 8015876:	370c      	adds	r7, #12
 8015878:	46bd      	mov	sp, r7
 801587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801587e:	4770      	bx	lr

08015880 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8015880:	b480      	push	{r7}
 8015882:	b083      	sub	sp, #12
 8015884:	af00      	add	r7, sp, #0
 8015886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8015888:	bf00      	nop
 801588a:	370c      	adds	r7, #12
 801588c:	46bd      	mov	sp, r7
 801588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015892:	4770      	bx	lr

08015894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8015894:	b480      	push	{r7}
 8015896:	b085      	sub	sp, #20
 8015898:	af00      	add	r7, sp, #0
 801589a:	6078      	str	r0, [r7, #4]
 801589c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	4a40      	ldr	r2, [pc, #256]	; (80159a8 <TIM_Base_SetConfig+0x114>)
 80158a8:	4293      	cmp	r3, r2
 80158aa:	d013      	beq.n	80158d4 <TIM_Base_SetConfig+0x40>
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80158b2:	d00f      	beq.n	80158d4 <TIM_Base_SetConfig+0x40>
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	4a3d      	ldr	r2, [pc, #244]	; (80159ac <TIM_Base_SetConfig+0x118>)
 80158b8:	4293      	cmp	r3, r2
 80158ba:	d00b      	beq.n	80158d4 <TIM_Base_SetConfig+0x40>
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	4a3c      	ldr	r2, [pc, #240]	; (80159b0 <TIM_Base_SetConfig+0x11c>)
 80158c0:	4293      	cmp	r3, r2
 80158c2:	d007      	beq.n	80158d4 <TIM_Base_SetConfig+0x40>
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	4a3b      	ldr	r2, [pc, #236]	; (80159b4 <TIM_Base_SetConfig+0x120>)
 80158c8:	4293      	cmp	r3, r2
 80158ca:	d003      	beq.n	80158d4 <TIM_Base_SetConfig+0x40>
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	4a3a      	ldr	r2, [pc, #232]	; (80159b8 <TIM_Base_SetConfig+0x124>)
 80158d0:	4293      	cmp	r3, r2
 80158d2:	d108      	bne.n	80158e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80158da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80158dc:	683b      	ldr	r3, [r7, #0]
 80158de:	685b      	ldr	r3, [r3, #4]
 80158e0:	68fa      	ldr	r2, [r7, #12]
 80158e2:	4313      	orrs	r3, r2
 80158e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	4a2f      	ldr	r2, [pc, #188]	; (80159a8 <TIM_Base_SetConfig+0x114>)
 80158ea:	4293      	cmp	r3, r2
 80158ec:	d02b      	beq.n	8015946 <TIM_Base_SetConfig+0xb2>
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80158f4:	d027      	beq.n	8015946 <TIM_Base_SetConfig+0xb2>
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	4a2c      	ldr	r2, [pc, #176]	; (80159ac <TIM_Base_SetConfig+0x118>)
 80158fa:	4293      	cmp	r3, r2
 80158fc:	d023      	beq.n	8015946 <TIM_Base_SetConfig+0xb2>
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	4a2b      	ldr	r2, [pc, #172]	; (80159b0 <TIM_Base_SetConfig+0x11c>)
 8015902:	4293      	cmp	r3, r2
 8015904:	d01f      	beq.n	8015946 <TIM_Base_SetConfig+0xb2>
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	4a2a      	ldr	r2, [pc, #168]	; (80159b4 <TIM_Base_SetConfig+0x120>)
 801590a:	4293      	cmp	r3, r2
 801590c:	d01b      	beq.n	8015946 <TIM_Base_SetConfig+0xb2>
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	4a29      	ldr	r2, [pc, #164]	; (80159b8 <TIM_Base_SetConfig+0x124>)
 8015912:	4293      	cmp	r3, r2
 8015914:	d017      	beq.n	8015946 <TIM_Base_SetConfig+0xb2>
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	4a28      	ldr	r2, [pc, #160]	; (80159bc <TIM_Base_SetConfig+0x128>)
 801591a:	4293      	cmp	r3, r2
 801591c:	d013      	beq.n	8015946 <TIM_Base_SetConfig+0xb2>
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	4a27      	ldr	r2, [pc, #156]	; (80159c0 <TIM_Base_SetConfig+0x12c>)
 8015922:	4293      	cmp	r3, r2
 8015924:	d00f      	beq.n	8015946 <TIM_Base_SetConfig+0xb2>
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	4a26      	ldr	r2, [pc, #152]	; (80159c4 <TIM_Base_SetConfig+0x130>)
 801592a:	4293      	cmp	r3, r2
 801592c:	d00b      	beq.n	8015946 <TIM_Base_SetConfig+0xb2>
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	4a25      	ldr	r2, [pc, #148]	; (80159c8 <TIM_Base_SetConfig+0x134>)
 8015932:	4293      	cmp	r3, r2
 8015934:	d007      	beq.n	8015946 <TIM_Base_SetConfig+0xb2>
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	4a24      	ldr	r2, [pc, #144]	; (80159cc <TIM_Base_SetConfig+0x138>)
 801593a:	4293      	cmp	r3, r2
 801593c:	d003      	beq.n	8015946 <TIM_Base_SetConfig+0xb2>
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	4a23      	ldr	r2, [pc, #140]	; (80159d0 <TIM_Base_SetConfig+0x13c>)
 8015942:	4293      	cmp	r3, r2
 8015944:	d108      	bne.n	8015958 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801594c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801594e:	683b      	ldr	r3, [r7, #0]
 8015950:	68db      	ldr	r3, [r3, #12]
 8015952:	68fa      	ldr	r2, [r7, #12]
 8015954:	4313      	orrs	r3, r2
 8015956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801595e:	683b      	ldr	r3, [r7, #0]
 8015960:	695b      	ldr	r3, [r3, #20]
 8015962:	4313      	orrs	r3, r2
 8015964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	68fa      	ldr	r2, [r7, #12]
 801596a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801596c:	683b      	ldr	r3, [r7, #0]
 801596e:	689a      	ldr	r2, [r3, #8]
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015974:	683b      	ldr	r3, [r7, #0]
 8015976:	681a      	ldr	r2, [r3, #0]
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	4a0a      	ldr	r2, [pc, #40]	; (80159a8 <TIM_Base_SetConfig+0x114>)
 8015980:	4293      	cmp	r3, r2
 8015982:	d003      	beq.n	801598c <TIM_Base_SetConfig+0xf8>
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	4a0c      	ldr	r2, [pc, #48]	; (80159b8 <TIM_Base_SetConfig+0x124>)
 8015988:	4293      	cmp	r3, r2
 801598a:	d103      	bne.n	8015994 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801598c:	683b      	ldr	r3, [r7, #0]
 801598e:	691a      	ldr	r2, [r3, #16]
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	2201      	movs	r2, #1
 8015998:	615a      	str	r2, [r3, #20]
}
 801599a:	bf00      	nop
 801599c:	3714      	adds	r7, #20
 801599e:	46bd      	mov	sp, r7
 80159a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159a4:	4770      	bx	lr
 80159a6:	bf00      	nop
 80159a8:	40010000 	.word	0x40010000
 80159ac:	40000400 	.word	0x40000400
 80159b0:	40000800 	.word	0x40000800
 80159b4:	40000c00 	.word	0x40000c00
 80159b8:	40010400 	.word	0x40010400
 80159bc:	40014000 	.word	0x40014000
 80159c0:	40014400 	.word	0x40014400
 80159c4:	40014800 	.word	0x40014800
 80159c8:	40001800 	.word	0x40001800
 80159cc:	40001c00 	.word	0x40001c00
 80159d0:	40002000 	.word	0x40002000

080159d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80159d4:	b480      	push	{r7}
 80159d6:	b087      	sub	sp, #28
 80159d8:	af00      	add	r7, sp, #0
 80159da:	6078      	str	r0, [r7, #4]
 80159dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	6a1b      	ldr	r3, [r3, #32]
 80159e2:	f023 0201 	bic.w	r2, r3, #1
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	6a1b      	ldr	r3, [r3, #32]
 80159ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	685b      	ldr	r3, [r3, #4]
 80159f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	699b      	ldr	r3, [r3, #24]
 80159fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	f023 0303 	bic.w	r3, r3, #3
 8015a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015a0c:	683b      	ldr	r3, [r7, #0]
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	68fa      	ldr	r2, [r7, #12]
 8015a12:	4313      	orrs	r3, r2
 8015a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8015a16:	697b      	ldr	r3, [r7, #20]
 8015a18:	f023 0302 	bic.w	r3, r3, #2
 8015a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8015a1e:	683b      	ldr	r3, [r7, #0]
 8015a20:	689b      	ldr	r3, [r3, #8]
 8015a22:	697a      	ldr	r2, [r7, #20]
 8015a24:	4313      	orrs	r3, r2
 8015a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	4a20      	ldr	r2, [pc, #128]	; (8015aac <TIM_OC1_SetConfig+0xd8>)
 8015a2c:	4293      	cmp	r3, r2
 8015a2e:	d003      	beq.n	8015a38 <TIM_OC1_SetConfig+0x64>
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	4a1f      	ldr	r2, [pc, #124]	; (8015ab0 <TIM_OC1_SetConfig+0xdc>)
 8015a34:	4293      	cmp	r3, r2
 8015a36:	d10c      	bne.n	8015a52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8015a38:	697b      	ldr	r3, [r7, #20]
 8015a3a:	f023 0308 	bic.w	r3, r3, #8
 8015a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8015a40:	683b      	ldr	r3, [r7, #0]
 8015a42:	68db      	ldr	r3, [r3, #12]
 8015a44:	697a      	ldr	r2, [r7, #20]
 8015a46:	4313      	orrs	r3, r2
 8015a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8015a4a:	697b      	ldr	r3, [r7, #20]
 8015a4c:	f023 0304 	bic.w	r3, r3, #4
 8015a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	4a15      	ldr	r2, [pc, #84]	; (8015aac <TIM_OC1_SetConfig+0xd8>)
 8015a56:	4293      	cmp	r3, r2
 8015a58:	d003      	beq.n	8015a62 <TIM_OC1_SetConfig+0x8e>
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	4a14      	ldr	r2, [pc, #80]	; (8015ab0 <TIM_OC1_SetConfig+0xdc>)
 8015a5e:	4293      	cmp	r3, r2
 8015a60:	d111      	bne.n	8015a86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8015a62:	693b      	ldr	r3, [r7, #16]
 8015a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8015a6a:	693b      	ldr	r3, [r7, #16]
 8015a6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8015a72:	683b      	ldr	r3, [r7, #0]
 8015a74:	695b      	ldr	r3, [r3, #20]
 8015a76:	693a      	ldr	r2, [r7, #16]
 8015a78:	4313      	orrs	r3, r2
 8015a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8015a7c:	683b      	ldr	r3, [r7, #0]
 8015a7e:	699b      	ldr	r3, [r3, #24]
 8015a80:	693a      	ldr	r2, [r7, #16]
 8015a82:	4313      	orrs	r3, r2
 8015a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	693a      	ldr	r2, [r7, #16]
 8015a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	68fa      	ldr	r2, [r7, #12]
 8015a90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8015a92:	683b      	ldr	r3, [r7, #0]
 8015a94:	685a      	ldr	r2, [r3, #4]
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	697a      	ldr	r2, [r7, #20]
 8015a9e:	621a      	str	r2, [r3, #32]
}
 8015aa0:	bf00      	nop
 8015aa2:	371c      	adds	r7, #28
 8015aa4:	46bd      	mov	sp, r7
 8015aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aaa:	4770      	bx	lr
 8015aac:	40010000 	.word	0x40010000
 8015ab0:	40010400 	.word	0x40010400

08015ab4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015ab4:	b480      	push	{r7}
 8015ab6:	b087      	sub	sp, #28
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6078      	str	r0, [r7, #4]
 8015abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	6a1b      	ldr	r3, [r3, #32]
 8015ac2:	f023 0210 	bic.w	r2, r3, #16
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	6a1b      	ldr	r3, [r3, #32]
 8015ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	685b      	ldr	r3, [r3, #4]
 8015ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	699b      	ldr	r3, [r3, #24]
 8015ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015aec:	683b      	ldr	r3, [r7, #0]
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	021b      	lsls	r3, r3, #8
 8015af2:	68fa      	ldr	r2, [r7, #12]
 8015af4:	4313      	orrs	r3, r2
 8015af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8015af8:	697b      	ldr	r3, [r7, #20]
 8015afa:	f023 0320 	bic.w	r3, r3, #32
 8015afe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8015b00:	683b      	ldr	r3, [r7, #0]
 8015b02:	689b      	ldr	r3, [r3, #8]
 8015b04:	011b      	lsls	r3, r3, #4
 8015b06:	697a      	ldr	r2, [r7, #20]
 8015b08:	4313      	orrs	r3, r2
 8015b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	4a22      	ldr	r2, [pc, #136]	; (8015b98 <TIM_OC2_SetConfig+0xe4>)
 8015b10:	4293      	cmp	r3, r2
 8015b12:	d003      	beq.n	8015b1c <TIM_OC2_SetConfig+0x68>
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	4a21      	ldr	r2, [pc, #132]	; (8015b9c <TIM_OC2_SetConfig+0xe8>)
 8015b18:	4293      	cmp	r3, r2
 8015b1a:	d10d      	bne.n	8015b38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8015b1c:	697b      	ldr	r3, [r7, #20]
 8015b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8015b24:	683b      	ldr	r3, [r7, #0]
 8015b26:	68db      	ldr	r3, [r3, #12]
 8015b28:	011b      	lsls	r3, r3, #4
 8015b2a:	697a      	ldr	r2, [r7, #20]
 8015b2c:	4313      	orrs	r3, r2
 8015b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8015b30:	697b      	ldr	r3, [r7, #20]
 8015b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015b36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	4a17      	ldr	r2, [pc, #92]	; (8015b98 <TIM_OC2_SetConfig+0xe4>)
 8015b3c:	4293      	cmp	r3, r2
 8015b3e:	d003      	beq.n	8015b48 <TIM_OC2_SetConfig+0x94>
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	4a16      	ldr	r2, [pc, #88]	; (8015b9c <TIM_OC2_SetConfig+0xe8>)
 8015b44:	4293      	cmp	r3, r2
 8015b46:	d113      	bne.n	8015b70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8015b48:	693b      	ldr	r3, [r7, #16]
 8015b4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015b4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8015b50:	693b      	ldr	r3, [r7, #16]
 8015b52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015b56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8015b58:	683b      	ldr	r3, [r7, #0]
 8015b5a:	695b      	ldr	r3, [r3, #20]
 8015b5c:	009b      	lsls	r3, r3, #2
 8015b5e:	693a      	ldr	r2, [r7, #16]
 8015b60:	4313      	orrs	r3, r2
 8015b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8015b64:	683b      	ldr	r3, [r7, #0]
 8015b66:	699b      	ldr	r3, [r3, #24]
 8015b68:	009b      	lsls	r3, r3, #2
 8015b6a:	693a      	ldr	r2, [r7, #16]
 8015b6c:	4313      	orrs	r3, r2
 8015b6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	693a      	ldr	r2, [r7, #16]
 8015b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	68fa      	ldr	r2, [r7, #12]
 8015b7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8015b7c:	683b      	ldr	r3, [r7, #0]
 8015b7e:	685a      	ldr	r2, [r3, #4]
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	697a      	ldr	r2, [r7, #20]
 8015b88:	621a      	str	r2, [r3, #32]
}
 8015b8a:	bf00      	nop
 8015b8c:	371c      	adds	r7, #28
 8015b8e:	46bd      	mov	sp, r7
 8015b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b94:	4770      	bx	lr
 8015b96:	bf00      	nop
 8015b98:	40010000 	.word	0x40010000
 8015b9c:	40010400 	.word	0x40010400

08015ba0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015ba0:	b480      	push	{r7}
 8015ba2:	b087      	sub	sp, #28
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]
 8015ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	6a1b      	ldr	r3, [r3, #32]
 8015bae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	6a1b      	ldr	r3, [r3, #32]
 8015bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	685b      	ldr	r3, [r3, #4]
 8015bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	69db      	ldr	r3, [r3, #28]
 8015bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	f023 0303 	bic.w	r3, r3, #3
 8015bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015bd8:	683b      	ldr	r3, [r7, #0]
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	68fa      	ldr	r2, [r7, #12]
 8015bde:	4313      	orrs	r3, r2
 8015be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8015be2:	697b      	ldr	r3, [r7, #20]
 8015be4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8015bea:	683b      	ldr	r3, [r7, #0]
 8015bec:	689b      	ldr	r3, [r3, #8]
 8015bee:	021b      	lsls	r3, r3, #8
 8015bf0:	697a      	ldr	r2, [r7, #20]
 8015bf2:	4313      	orrs	r3, r2
 8015bf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	4a21      	ldr	r2, [pc, #132]	; (8015c80 <TIM_OC3_SetConfig+0xe0>)
 8015bfa:	4293      	cmp	r3, r2
 8015bfc:	d003      	beq.n	8015c06 <TIM_OC3_SetConfig+0x66>
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	4a20      	ldr	r2, [pc, #128]	; (8015c84 <TIM_OC3_SetConfig+0xe4>)
 8015c02:	4293      	cmp	r3, r2
 8015c04:	d10d      	bne.n	8015c22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8015c06:	697b      	ldr	r3, [r7, #20]
 8015c08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015c0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8015c0e:	683b      	ldr	r3, [r7, #0]
 8015c10:	68db      	ldr	r3, [r3, #12]
 8015c12:	021b      	lsls	r3, r3, #8
 8015c14:	697a      	ldr	r2, [r7, #20]
 8015c16:	4313      	orrs	r3, r2
 8015c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8015c1a:	697b      	ldr	r3, [r7, #20]
 8015c1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	4a16      	ldr	r2, [pc, #88]	; (8015c80 <TIM_OC3_SetConfig+0xe0>)
 8015c26:	4293      	cmp	r3, r2
 8015c28:	d003      	beq.n	8015c32 <TIM_OC3_SetConfig+0x92>
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	4a15      	ldr	r2, [pc, #84]	; (8015c84 <TIM_OC3_SetConfig+0xe4>)
 8015c2e:	4293      	cmp	r3, r2
 8015c30:	d113      	bne.n	8015c5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8015c32:	693b      	ldr	r3, [r7, #16]
 8015c34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8015c3a:	693b      	ldr	r3, [r7, #16]
 8015c3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8015c42:	683b      	ldr	r3, [r7, #0]
 8015c44:	695b      	ldr	r3, [r3, #20]
 8015c46:	011b      	lsls	r3, r3, #4
 8015c48:	693a      	ldr	r2, [r7, #16]
 8015c4a:	4313      	orrs	r3, r2
 8015c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8015c4e:	683b      	ldr	r3, [r7, #0]
 8015c50:	699b      	ldr	r3, [r3, #24]
 8015c52:	011b      	lsls	r3, r3, #4
 8015c54:	693a      	ldr	r2, [r7, #16]
 8015c56:	4313      	orrs	r3, r2
 8015c58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	693a      	ldr	r2, [r7, #16]
 8015c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	68fa      	ldr	r2, [r7, #12]
 8015c64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8015c66:	683b      	ldr	r3, [r7, #0]
 8015c68:	685a      	ldr	r2, [r3, #4]
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	697a      	ldr	r2, [r7, #20]
 8015c72:	621a      	str	r2, [r3, #32]
}
 8015c74:	bf00      	nop
 8015c76:	371c      	adds	r7, #28
 8015c78:	46bd      	mov	sp, r7
 8015c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c7e:	4770      	bx	lr
 8015c80:	40010000 	.word	0x40010000
 8015c84:	40010400 	.word	0x40010400

08015c88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015c88:	b480      	push	{r7}
 8015c8a:	b087      	sub	sp, #28
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	6078      	str	r0, [r7, #4]
 8015c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	6a1b      	ldr	r3, [r3, #32]
 8015c96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	6a1b      	ldr	r3, [r3, #32]
 8015ca2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	685b      	ldr	r3, [r3, #4]
 8015ca8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	69db      	ldr	r3, [r3, #28]
 8015cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015cc0:	683b      	ldr	r3, [r7, #0]
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	021b      	lsls	r3, r3, #8
 8015cc6:	68fa      	ldr	r2, [r7, #12]
 8015cc8:	4313      	orrs	r3, r2
 8015cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8015ccc:	693b      	ldr	r3, [r7, #16]
 8015cce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015cd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8015cd4:	683b      	ldr	r3, [r7, #0]
 8015cd6:	689b      	ldr	r3, [r3, #8]
 8015cd8:	031b      	lsls	r3, r3, #12
 8015cda:	693a      	ldr	r2, [r7, #16]
 8015cdc:	4313      	orrs	r3, r2
 8015cde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	4a12      	ldr	r2, [pc, #72]	; (8015d2c <TIM_OC4_SetConfig+0xa4>)
 8015ce4:	4293      	cmp	r3, r2
 8015ce6:	d003      	beq.n	8015cf0 <TIM_OC4_SetConfig+0x68>
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	4a11      	ldr	r2, [pc, #68]	; (8015d30 <TIM_OC4_SetConfig+0xa8>)
 8015cec:	4293      	cmp	r3, r2
 8015cee:	d109      	bne.n	8015d04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8015cf0:	697b      	ldr	r3, [r7, #20]
 8015cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015cf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8015cf8:	683b      	ldr	r3, [r7, #0]
 8015cfa:	695b      	ldr	r3, [r3, #20]
 8015cfc:	019b      	lsls	r3, r3, #6
 8015cfe:	697a      	ldr	r2, [r7, #20]
 8015d00:	4313      	orrs	r3, r2
 8015d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	697a      	ldr	r2, [r7, #20]
 8015d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	68fa      	ldr	r2, [r7, #12]
 8015d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8015d10:	683b      	ldr	r3, [r7, #0]
 8015d12:	685a      	ldr	r2, [r3, #4]
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	693a      	ldr	r2, [r7, #16]
 8015d1c:	621a      	str	r2, [r3, #32]
}
 8015d1e:	bf00      	nop
 8015d20:	371c      	adds	r7, #28
 8015d22:	46bd      	mov	sp, r7
 8015d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d28:	4770      	bx	lr
 8015d2a:	bf00      	nop
 8015d2c:	40010000 	.word	0x40010000
 8015d30:	40010400 	.word	0x40010400

08015d34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015d34:	b480      	push	{r7}
 8015d36:	b087      	sub	sp, #28
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	60f8      	str	r0, [r7, #12]
 8015d3c:	60b9      	str	r1, [r7, #8]
 8015d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	6a1b      	ldr	r3, [r3, #32]
 8015d44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	6a1b      	ldr	r3, [r3, #32]
 8015d4a:	f023 0201 	bic.w	r2, r3, #1
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	699b      	ldr	r3, [r3, #24]
 8015d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8015d58:	693b      	ldr	r3, [r7, #16]
 8015d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	011b      	lsls	r3, r3, #4
 8015d64:	693a      	ldr	r2, [r7, #16]
 8015d66:	4313      	orrs	r3, r2
 8015d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8015d6a:	697b      	ldr	r3, [r7, #20]
 8015d6c:	f023 030a 	bic.w	r3, r3, #10
 8015d70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8015d72:	697a      	ldr	r2, [r7, #20]
 8015d74:	68bb      	ldr	r3, [r7, #8]
 8015d76:	4313      	orrs	r3, r2
 8015d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	693a      	ldr	r2, [r7, #16]
 8015d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	697a      	ldr	r2, [r7, #20]
 8015d84:	621a      	str	r2, [r3, #32]
}
 8015d86:	bf00      	nop
 8015d88:	371c      	adds	r7, #28
 8015d8a:	46bd      	mov	sp, r7
 8015d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d90:	4770      	bx	lr

08015d92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015d92:	b480      	push	{r7}
 8015d94:	b087      	sub	sp, #28
 8015d96:	af00      	add	r7, sp, #0
 8015d98:	60f8      	str	r0, [r7, #12]
 8015d9a:	60b9      	str	r1, [r7, #8]
 8015d9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	6a1b      	ldr	r3, [r3, #32]
 8015da2:	f023 0210 	bic.w	r2, r3, #16
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	699b      	ldr	r3, [r3, #24]
 8015dae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	6a1b      	ldr	r3, [r3, #32]
 8015db4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8015db6:	697b      	ldr	r3, [r7, #20]
 8015db8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015dbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	031b      	lsls	r3, r3, #12
 8015dc2:	697a      	ldr	r2, [r7, #20]
 8015dc4:	4313      	orrs	r3, r2
 8015dc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8015dc8:	693b      	ldr	r3, [r7, #16]
 8015dca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8015dce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8015dd0:	68bb      	ldr	r3, [r7, #8]
 8015dd2:	011b      	lsls	r3, r3, #4
 8015dd4:	693a      	ldr	r2, [r7, #16]
 8015dd6:	4313      	orrs	r3, r2
 8015dd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	697a      	ldr	r2, [r7, #20]
 8015dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	693a      	ldr	r2, [r7, #16]
 8015de4:	621a      	str	r2, [r3, #32]
}
 8015de6:	bf00      	nop
 8015de8:	371c      	adds	r7, #28
 8015dea:	46bd      	mov	sp, r7
 8015dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015df0:	4770      	bx	lr

08015df2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8015df2:	b480      	push	{r7}
 8015df4:	b085      	sub	sp, #20
 8015df6:	af00      	add	r7, sp, #0
 8015df8:	6078      	str	r0, [r7, #4]
 8015dfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	689b      	ldr	r3, [r3, #8]
 8015e00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015e08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8015e0a:	683a      	ldr	r2, [r7, #0]
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	4313      	orrs	r3, r2
 8015e10:	f043 0307 	orr.w	r3, r3, #7
 8015e14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	68fa      	ldr	r2, [r7, #12]
 8015e1a:	609a      	str	r2, [r3, #8]
}
 8015e1c:	bf00      	nop
 8015e1e:	3714      	adds	r7, #20
 8015e20:	46bd      	mov	sp, r7
 8015e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e26:	4770      	bx	lr

08015e28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8015e28:	b480      	push	{r7}
 8015e2a:	b087      	sub	sp, #28
 8015e2c:	af00      	add	r7, sp, #0
 8015e2e:	60f8      	str	r0, [r7, #12]
 8015e30:	60b9      	str	r1, [r7, #8]
 8015e32:	607a      	str	r2, [r7, #4]
 8015e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	689b      	ldr	r3, [r3, #8]
 8015e3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015e3c:	697b      	ldr	r3, [r7, #20]
 8015e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015e42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8015e44:	683b      	ldr	r3, [r7, #0]
 8015e46:	021a      	lsls	r2, r3, #8
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	431a      	orrs	r2, r3
 8015e4c:	68bb      	ldr	r3, [r7, #8]
 8015e4e:	4313      	orrs	r3, r2
 8015e50:	697a      	ldr	r2, [r7, #20]
 8015e52:	4313      	orrs	r3, r2
 8015e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	697a      	ldr	r2, [r7, #20]
 8015e5a:	609a      	str	r2, [r3, #8]
}
 8015e5c:	bf00      	nop
 8015e5e:	371c      	adds	r7, #28
 8015e60:	46bd      	mov	sp, r7
 8015e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e66:	4770      	bx	lr

08015e68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8015e68:	b480      	push	{r7}
 8015e6a:	b087      	sub	sp, #28
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	60f8      	str	r0, [r7, #12]
 8015e70:	60b9      	str	r1, [r7, #8]
 8015e72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8015e74:	68bb      	ldr	r3, [r7, #8]
 8015e76:	f003 031f 	and.w	r3, r3, #31
 8015e7a:	2201      	movs	r2, #1
 8015e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8015e80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	6a1a      	ldr	r2, [r3, #32]
 8015e86:	697b      	ldr	r3, [r7, #20]
 8015e88:	43db      	mvns	r3, r3
 8015e8a:	401a      	ands	r2, r3
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	6a1a      	ldr	r2, [r3, #32]
 8015e94:	68bb      	ldr	r3, [r7, #8]
 8015e96:	f003 031f 	and.w	r3, r3, #31
 8015e9a:	6879      	ldr	r1, [r7, #4]
 8015e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8015ea0:	431a      	orrs	r2, r3
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	621a      	str	r2, [r3, #32]
}
 8015ea6:	bf00      	nop
 8015ea8:	371c      	adds	r7, #28
 8015eaa:	46bd      	mov	sp, r7
 8015eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eb0:	4770      	bx	lr
	...

08015eb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015eb4:	b480      	push	{r7}
 8015eb6:	b085      	sub	sp, #20
 8015eb8:	af00      	add	r7, sp, #0
 8015eba:	6078      	str	r0, [r7, #4]
 8015ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015ec4:	2b01      	cmp	r3, #1
 8015ec6:	d101      	bne.n	8015ecc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015ec8:	2302      	movs	r3, #2
 8015eca:	e05a      	b.n	8015f82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	2201      	movs	r2, #1
 8015ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	2202      	movs	r2, #2
 8015ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	685b      	ldr	r3, [r3, #4]
 8015ee2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	689b      	ldr	r3, [r3, #8]
 8015eea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015ef2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015ef4:	683b      	ldr	r3, [r7, #0]
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	68fa      	ldr	r2, [r7, #12]
 8015efa:	4313      	orrs	r3, r2
 8015efc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	68fa      	ldr	r2, [r7, #12]
 8015f04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	4a21      	ldr	r2, [pc, #132]	; (8015f90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8015f0c:	4293      	cmp	r3, r2
 8015f0e:	d022      	beq.n	8015f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015f18:	d01d      	beq.n	8015f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	4a1d      	ldr	r2, [pc, #116]	; (8015f94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8015f20:	4293      	cmp	r3, r2
 8015f22:	d018      	beq.n	8015f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	4a1b      	ldr	r2, [pc, #108]	; (8015f98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8015f2a:	4293      	cmp	r3, r2
 8015f2c:	d013      	beq.n	8015f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	4a1a      	ldr	r2, [pc, #104]	; (8015f9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8015f34:	4293      	cmp	r3, r2
 8015f36:	d00e      	beq.n	8015f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	4a18      	ldr	r2, [pc, #96]	; (8015fa0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8015f3e:	4293      	cmp	r3, r2
 8015f40:	d009      	beq.n	8015f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	4a17      	ldr	r2, [pc, #92]	; (8015fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8015f48:	4293      	cmp	r3, r2
 8015f4a:	d004      	beq.n	8015f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	4a15      	ldr	r2, [pc, #84]	; (8015fa8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8015f52:	4293      	cmp	r3, r2
 8015f54:	d10c      	bne.n	8015f70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8015f56:	68bb      	ldr	r3, [r7, #8]
 8015f58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015f5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8015f5e:	683b      	ldr	r3, [r7, #0]
 8015f60:	685b      	ldr	r3, [r3, #4]
 8015f62:	68ba      	ldr	r2, [r7, #8]
 8015f64:	4313      	orrs	r3, r2
 8015f66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	68ba      	ldr	r2, [r7, #8]
 8015f6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	2201      	movs	r2, #1
 8015f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	2200      	movs	r2, #0
 8015f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015f80:	2300      	movs	r3, #0
}
 8015f82:	4618      	mov	r0, r3
 8015f84:	3714      	adds	r7, #20
 8015f86:	46bd      	mov	sp, r7
 8015f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f8c:	4770      	bx	lr
 8015f8e:	bf00      	nop
 8015f90:	40010000 	.word	0x40010000
 8015f94:	40000400 	.word	0x40000400
 8015f98:	40000800 	.word	0x40000800
 8015f9c:	40000c00 	.word	0x40000c00
 8015fa0:	40010400 	.word	0x40010400
 8015fa4:	40014000 	.word	0x40014000
 8015fa8:	40001800 	.word	0x40001800

08015fac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015fac:	b480      	push	{r7}
 8015fae:	b083      	sub	sp, #12
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8015fb4:	bf00      	nop
 8015fb6:	370c      	adds	r7, #12
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fbe:	4770      	bx	lr

08015fc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8015fc0:	b480      	push	{r7}
 8015fc2:	b083      	sub	sp, #12
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015fc8:	bf00      	nop
 8015fca:	370c      	adds	r7, #12
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd2:	4770      	bx	lr

08015fd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015fd4:	b580      	push	{r7, lr}
 8015fd6:	b082      	sub	sp, #8
 8015fd8:	af00      	add	r7, sp, #0
 8015fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d101      	bne.n	8015fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015fe2:	2301      	movs	r3, #1
 8015fe4:	e03f      	b.n	8016066 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8015fec:	b2db      	uxtb	r3, r3
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d106      	bne.n	8016000 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015ffa:	6878      	ldr	r0, [r7, #4]
 8015ffc:	f7ec fc04 	bl	8002808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	2224      	movs	r2, #36	; 0x24
 8016004:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	68da      	ldr	r2, [r3, #12]
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8016016:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8016018:	6878      	ldr	r0, [r7, #4]
 801601a:	f000 fb97 	bl	801674c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	691a      	ldr	r2, [r3, #16]
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801602c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	695a      	ldr	r2, [r3, #20]
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801603c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	68da      	ldr	r2, [r3, #12]
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801604c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	2200      	movs	r2, #0
 8016052:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	2220      	movs	r2, #32
 8016058:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	2220      	movs	r2, #32
 8016060:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8016064:	2300      	movs	r3, #0
}
 8016066:	4618      	mov	r0, r3
 8016068:	3708      	adds	r7, #8
 801606a:	46bd      	mov	sp, r7
 801606c:	bd80      	pop	{r7, pc}

0801606e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801606e:	b580      	push	{r7, lr}
 8016070:	b088      	sub	sp, #32
 8016072:	af02      	add	r7, sp, #8
 8016074:	60f8      	str	r0, [r7, #12]
 8016076:	60b9      	str	r1, [r7, #8]
 8016078:	603b      	str	r3, [r7, #0]
 801607a:	4613      	mov	r3, r2
 801607c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 801607e:	2300      	movs	r3, #0
 8016080:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8016088:	b2db      	uxtb	r3, r3
 801608a:	2b20      	cmp	r3, #32
 801608c:	f040 8083 	bne.w	8016196 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8016090:	68bb      	ldr	r3, [r7, #8]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d002      	beq.n	801609c <HAL_UART_Transmit+0x2e>
 8016096:	88fb      	ldrh	r3, [r7, #6]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d101      	bne.n	80160a0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 801609c:	2301      	movs	r3, #1
 801609e:	e07b      	b.n	8016198 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80160a6:	2b01      	cmp	r3, #1
 80160a8:	d101      	bne.n	80160ae <HAL_UART_Transmit+0x40>
 80160aa:	2302      	movs	r3, #2
 80160ac:	e074      	b.n	8016198 <HAL_UART_Transmit+0x12a>
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	2201      	movs	r2, #1
 80160b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	2200      	movs	r2, #0
 80160ba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	2221      	movs	r2, #33	; 0x21
 80160c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80160c4:	f7fa fac8 	bl	8010658 <HAL_GetTick>
 80160c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	88fa      	ldrh	r2, [r7, #6]
 80160ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	88fa      	ldrh	r2, [r7, #6]
 80160d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	2200      	movs	r2, #0
 80160da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80160de:	e042      	b.n	8016166 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80160e4:	b29b      	uxth	r3, r3
 80160e6:	3b01      	subs	r3, #1
 80160e8:	b29a      	uxth	r2, r3
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	689b      	ldr	r3, [r3, #8]
 80160f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80160f6:	d122      	bne.n	801613e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80160f8:	683b      	ldr	r3, [r7, #0]
 80160fa:	9300      	str	r3, [sp, #0]
 80160fc:	697b      	ldr	r3, [r7, #20]
 80160fe:	2200      	movs	r2, #0
 8016100:	2180      	movs	r1, #128	; 0x80
 8016102:	68f8      	ldr	r0, [r7, #12]
 8016104:	f000 f9b6 	bl	8016474 <UART_WaitOnFlagUntilTimeout>
 8016108:	4603      	mov	r3, r0
 801610a:	2b00      	cmp	r3, #0
 801610c:	d001      	beq.n	8016112 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 801610e:	2303      	movs	r3, #3
 8016110:	e042      	b.n	8016198 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8016112:	68bb      	ldr	r3, [r7, #8]
 8016114:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8016116:	693b      	ldr	r3, [r7, #16]
 8016118:	881b      	ldrh	r3, [r3, #0]
 801611a:	461a      	mov	r2, r3
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8016124:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	691b      	ldr	r3, [r3, #16]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d103      	bne.n	8016136 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 801612e:	68bb      	ldr	r3, [r7, #8]
 8016130:	3302      	adds	r3, #2
 8016132:	60bb      	str	r3, [r7, #8]
 8016134:	e017      	b.n	8016166 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8016136:	68bb      	ldr	r3, [r7, #8]
 8016138:	3301      	adds	r3, #1
 801613a:	60bb      	str	r3, [r7, #8]
 801613c:	e013      	b.n	8016166 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801613e:	683b      	ldr	r3, [r7, #0]
 8016140:	9300      	str	r3, [sp, #0]
 8016142:	697b      	ldr	r3, [r7, #20]
 8016144:	2200      	movs	r2, #0
 8016146:	2180      	movs	r1, #128	; 0x80
 8016148:	68f8      	ldr	r0, [r7, #12]
 801614a:	f000 f993 	bl	8016474 <UART_WaitOnFlagUntilTimeout>
 801614e:	4603      	mov	r3, r0
 8016150:	2b00      	cmp	r3, #0
 8016152:	d001      	beq.n	8016158 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8016154:	2303      	movs	r3, #3
 8016156:	e01f      	b.n	8016198 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8016158:	68bb      	ldr	r3, [r7, #8]
 801615a:	1c5a      	adds	r2, r3, #1
 801615c:	60ba      	str	r2, [r7, #8]
 801615e:	781a      	ldrb	r2, [r3, #0]
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801616a:	b29b      	uxth	r3, r3
 801616c:	2b00      	cmp	r3, #0
 801616e:	d1b7      	bne.n	80160e0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8016170:	683b      	ldr	r3, [r7, #0]
 8016172:	9300      	str	r3, [sp, #0]
 8016174:	697b      	ldr	r3, [r7, #20]
 8016176:	2200      	movs	r2, #0
 8016178:	2140      	movs	r1, #64	; 0x40
 801617a:	68f8      	ldr	r0, [r7, #12]
 801617c:	f000 f97a 	bl	8016474 <UART_WaitOnFlagUntilTimeout>
 8016180:	4603      	mov	r3, r0
 8016182:	2b00      	cmp	r3, #0
 8016184:	d001      	beq.n	801618a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8016186:	2303      	movs	r3, #3
 8016188:	e006      	b.n	8016198 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	2220      	movs	r2, #32
 801618e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8016192:	2300      	movs	r3, #0
 8016194:	e000      	b.n	8016198 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8016196:	2302      	movs	r3, #2
  }
}
 8016198:	4618      	mov	r0, r3
 801619a:	3718      	adds	r7, #24
 801619c:	46bd      	mov	sp, r7
 801619e:	bd80      	pop	{r7, pc}

080161a0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80161a0:	b480      	push	{r7}
 80161a2:	b085      	sub	sp, #20
 80161a4:	af00      	add	r7, sp, #0
 80161a6:	60f8      	str	r0, [r7, #12]
 80161a8:	60b9      	str	r1, [r7, #8]
 80161aa:	4613      	mov	r3, r2
 80161ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80161b4:	b2db      	uxtb	r3, r3
 80161b6:	2b20      	cmp	r3, #32
 80161b8:	d140      	bne.n	801623c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80161ba:	68bb      	ldr	r3, [r7, #8]
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d002      	beq.n	80161c6 <HAL_UART_Receive_IT+0x26>
 80161c0:	88fb      	ldrh	r3, [r7, #6]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d101      	bne.n	80161ca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80161c6:	2301      	movs	r3, #1
 80161c8:	e039      	b.n	801623e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80161d0:	2b01      	cmp	r3, #1
 80161d2:	d101      	bne.n	80161d8 <HAL_UART_Receive_IT+0x38>
 80161d4:	2302      	movs	r3, #2
 80161d6:	e032      	b.n	801623e <HAL_UART_Receive_IT+0x9e>
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	2201      	movs	r2, #1
 80161dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	68ba      	ldr	r2, [r7, #8]
 80161e4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	88fa      	ldrh	r2, [r7, #6]
 80161ea:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	88fa      	ldrh	r2, [r7, #6]
 80161f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	2200      	movs	r2, #0
 80161f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	2222      	movs	r2, #34	; 0x22
 80161fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	2200      	movs	r2, #0
 8016204:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	68da      	ldr	r2, [r3, #12]
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016216:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	695a      	ldr	r2, [r3, #20]
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	f042 0201 	orr.w	r2, r2, #1
 8016226:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	68da      	ldr	r2, [r3, #12]
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	f042 0220 	orr.w	r2, r2, #32
 8016236:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8016238:	2300      	movs	r3, #0
 801623a:	e000      	b.n	801623e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 801623c:	2302      	movs	r3, #2
  }
}
 801623e:	4618      	mov	r0, r3
 8016240:	3714      	adds	r7, #20
 8016242:	46bd      	mov	sp, r7
 8016244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016248:	4770      	bx	lr
	...

0801624c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801624c:	b580      	push	{r7, lr}
 801624e:	b088      	sub	sp, #32
 8016250:	af00      	add	r7, sp, #0
 8016252:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	68db      	ldr	r3, [r3, #12]
 8016262:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	695b      	ldr	r3, [r3, #20]
 801626a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 801626c:	2300      	movs	r3, #0
 801626e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8016270:	2300      	movs	r3, #0
 8016272:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8016274:	69fb      	ldr	r3, [r7, #28]
 8016276:	f003 030f 	and.w	r3, r3, #15
 801627a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 801627c:	693b      	ldr	r3, [r7, #16]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d10d      	bne.n	801629e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8016282:	69fb      	ldr	r3, [r7, #28]
 8016284:	f003 0320 	and.w	r3, r3, #32
 8016288:	2b00      	cmp	r3, #0
 801628a:	d008      	beq.n	801629e <HAL_UART_IRQHandler+0x52>
 801628c:	69bb      	ldr	r3, [r7, #24]
 801628e:	f003 0320 	and.w	r3, r3, #32
 8016292:	2b00      	cmp	r3, #0
 8016294:	d003      	beq.n	801629e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8016296:	6878      	ldr	r0, [r7, #4]
 8016298:	f000 f9d6 	bl	8016648 <UART_Receive_IT>
      return;
 801629c:	e0d0      	b.n	8016440 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801629e:	693b      	ldr	r3, [r7, #16]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	f000 80b0 	beq.w	8016406 <HAL_UART_IRQHandler+0x1ba>
 80162a6:	697b      	ldr	r3, [r7, #20]
 80162a8:	f003 0301 	and.w	r3, r3, #1
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d105      	bne.n	80162bc <HAL_UART_IRQHandler+0x70>
 80162b0:	69bb      	ldr	r3, [r7, #24]
 80162b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	f000 80a5 	beq.w	8016406 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80162bc:	69fb      	ldr	r3, [r7, #28]
 80162be:	f003 0301 	and.w	r3, r3, #1
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d00a      	beq.n	80162dc <HAL_UART_IRQHandler+0x90>
 80162c6:	69bb      	ldr	r3, [r7, #24]
 80162c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d005      	beq.n	80162dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80162d4:	f043 0201 	orr.w	r2, r3, #1
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80162dc:	69fb      	ldr	r3, [r7, #28]
 80162de:	f003 0304 	and.w	r3, r3, #4
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d00a      	beq.n	80162fc <HAL_UART_IRQHandler+0xb0>
 80162e6:	697b      	ldr	r3, [r7, #20]
 80162e8:	f003 0301 	and.w	r3, r3, #1
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d005      	beq.n	80162fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80162f4:	f043 0202 	orr.w	r2, r3, #2
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80162fc:	69fb      	ldr	r3, [r7, #28]
 80162fe:	f003 0302 	and.w	r3, r3, #2
 8016302:	2b00      	cmp	r3, #0
 8016304:	d00a      	beq.n	801631c <HAL_UART_IRQHandler+0xd0>
 8016306:	697b      	ldr	r3, [r7, #20]
 8016308:	f003 0301 	and.w	r3, r3, #1
 801630c:	2b00      	cmp	r3, #0
 801630e:	d005      	beq.n	801631c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016314:	f043 0204 	orr.w	r2, r3, #4
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 801631c:	69fb      	ldr	r3, [r7, #28]
 801631e:	f003 0308 	and.w	r3, r3, #8
 8016322:	2b00      	cmp	r3, #0
 8016324:	d00f      	beq.n	8016346 <HAL_UART_IRQHandler+0xfa>
 8016326:	69bb      	ldr	r3, [r7, #24]
 8016328:	f003 0320 	and.w	r3, r3, #32
 801632c:	2b00      	cmp	r3, #0
 801632e:	d104      	bne.n	801633a <HAL_UART_IRQHandler+0xee>
 8016330:	697b      	ldr	r3, [r7, #20]
 8016332:	f003 0301 	and.w	r3, r3, #1
 8016336:	2b00      	cmp	r3, #0
 8016338:	d005      	beq.n	8016346 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801633e:	f043 0208 	orr.w	r2, r3, #8
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801634a:	2b00      	cmp	r3, #0
 801634c:	d077      	beq.n	801643e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801634e:	69fb      	ldr	r3, [r7, #28]
 8016350:	f003 0320 	and.w	r3, r3, #32
 8016354:	2b00      	cmp	r3, #0
 8016356:	d007      	beq.n	8016368 <HAL_UART_IRQHandler+0x11c>
 8016358:	69bb      	ldr	r3, [r7, #24]
 801635a:	f003 0320 	and.w	r3, r3, #32
 801635e:	2b00      	cmp	r3, #0
 8016360:	d002      	beq.n	8016368 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8016362:	6878      	ldr	r0, [r7, #4]
 8016364:	f000 f970 	bl	8016648 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	695b      	ldr	r3, [r3, #20]
 801636e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016372:	2b40      	cmp	r3, #64	; 0x40
 8016374:	bf0c      	ite	eq
 8016376:	2301      	moveq	r3, #1
 8016378:	2300      	movne	r3, #0
 801637a:	b2db      	uxtb	r3, r3
 801637c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016382:	f003 0308 	and.w	r3, r3, #8
 8016386:	2b00      	cmp	r3, #0
 8016388:	d102      	bne.n	8016390 <HAL_UART_IRQHandler+0x144>
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d031      	beq.n	80163f4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8016390:	6878      	ldr	r0, [r7, #4]
 8016392:	f000 f8b9 	bl	8016508 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	695b      	ldr	r3, [r3, #20]
 801639c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80163a0:	2b40      	cmp	r3, #64	; 0x40
 80163a2:	d123      	bne.n	80163ec <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	695a      	ldr	r2, [r3, #20]
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80163b2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d013      	beq.n	80163e4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80163c0:	4a21      	ldr	r2, [pc, #132]	; (8016448 <HAL_UART_IRQHandler+0x1fc>)
 80163c2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80163c8:	4618      	mov	r0, r3
 80163ca:	f7fb fa83 	bl	80118d4 <HAL_DMA_Abort_IT>
 80163ce:	4603      	mov	r3, r0
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d016      	beq.n	8016402 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80163d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80163da:	687a      	ldr	r2, [r7, #4]
 80163dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80163de:	4610      	mov	r0, r2
 80163e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80163e2:	e00e      	b.n	8016402 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80163e4:	6878      	ldr	r0, [r7, #4]
 80163e6:	f000 f83b 	bl	8016460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80163ea:	e00a      	b.n	8016402 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80163ec:	6878      	ldr	r0, [r7, #4]
 80163ee:	f000 f837 	bl	8016460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80163f2:	e006      	b.n	8016402 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80163f4:	6878      	ldr	r0, [r7, #4]
 80163f6:	f000 f833 	bl	8016460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	2200      	movs	r2, #0
 80163fe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8016400:	e01d      	b.n	801643e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016402:	bf00      	nop
    return;
 8016404:	e01b      	b.n	801643e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8016406:	69fb      	ldr	r3, [r7, #28]
 8016408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801640c:	2b00      	cmp	r3, #0
 801640e:	d008      	beq.n	8016422 <HAL_UART_IRQHandler+0x1d6>
 8016410:	69bb      	ldr	r3, [r7, #24]
 8016412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016416:	2b00      	cmp	r3, #0
 8016418:	d003      	beq.n	8016422 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 801641a:	6878      	ldr	r0, [r7, #4]
 801641c:	f000 f8a6 	bl	801656c <UART_Transmit_IT>
    return;
 8016420:	e00e      	b.n	8016440 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8016422:	69fb      	ldr	r3, [r7, #28]
 8016424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016428:	2b00      	cmp	r3, #0
 801642a:	d009      	beq.n	8016440 <HAL_UART_IRQHandler+0x1f4>
 801642c:	69bb      	ldr	r3, [r7, #24]
 801642e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016432:	2b00      	cmp	r3, #0
 8016434:	d004      	beq.n	8016440 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8016436:	6878      	ldr	r0, [r7, #4]
 8016438:	f000 f8ee 	bl	8016618 <UART_EndTransmit_IT>
    return;
 801643c:	e000      	b.n	8016440 <HAL_UART_IRQHandler+0x1f4>
    return;
 801643e:	bf00      	nop
  }
}
 8016440:	3720      	adds	r7, #32
 8016442:	46bd      	mov	sp, r7
 8016444:	bd80      	pop	{r7, pc}
 8016446:	bf00      	nop
 8016448:	08016545 	.word	0x08016545

0801644c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801644c:	b480      	push	{r7}
 801644e:	b083      	sub	sp, #12
 8016450:	af00      	add	r7, sp, #0
 8016452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8016454:	bf00      	nop
 8016456:	370c      	adds	r7, #12
 8016458:	46bd      	mov	sp, r7
 801645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801645e:	4770      	bx	lr

08016460 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8016460:	b480      	push	{r7}
 8016462:	b083      	sub	sp, #12
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8016468:	bf00      	nop
 801646a:	370c      	adds	r7, #12
 801646c:	46bd      	mov	sp, r7
 801646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016472:	4770      	bx	lr

08016474 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b084      	sub	sp, #16
 8016478:	af00      	add	r7, sp, #0
 801647a:	60f8      	str	r0, [r7, #12]
 801647c:	60b9      	str	r1, [r7, #8]
 801647e:	603b      	str	r3, [r7, #0]
 8016480:	4613      	mov	r3, r2
 8016482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016484:	e02c      	b.n	80164e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016486:	69bb      	ldr	r3, [r7, #24]
 8016488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801648c:	d028      	beq.n	80164e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801648e:	69bb      	ldr	r3, [r7, #24]
 8016490:	2b00      	cmp	r3, #0
 8016492:	d007      	beq.n	80164a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8016494:	f7fa f8e0 	bl	8010658 <HAL_GetTick>
 8016498:	4602      	mov	r2, r0
 801649a:	683b      	ldr	r3, [r7, #0]
 801649c:	1ad3      	subs	r3, r2, r3
 801649e:	69ba      	ldr	r2, [r7, #24]
 80164a0:	429a      	cmp	r2, r3
 80164a2:	d21d      	bcs.n	80164e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	68da      	ldr	r2, [r3, #12]
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80164b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	695a      	ldr	r2, [r3, #20]
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	f022 0201 	bic.w	r2, r2, #1
 80164c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	2220      	movs	r2, #32
 80164c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	2220      	movs	r2, #32
 80164d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	2200      	movs	r2, #0
 80164d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80164dc:	2303      	movs	r3, #3
 80164de:	e00f      	b.n	8016500 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	681a      	ldr	r2, [r3, #0]
 80164e6:	68bb      	ldr	r3, [r7, #8]
 80164e8:	4013      	ands	r3, r2
 80164ea:	68ba      	ldr	r2, [r7, #8]
 80164ec:	429a      	cmp	r2, r3
 80164ee:	bf0c      	ite	eq
 80164f0:	2301      	moveq	r3, #1
 80164f2:	2300      	movne	r3, #0
 80164f4:	b2db      	uxtb	r3, r3
 80164f6:	461a      	mov	r2, r3
 80164f8:	79fb      	ldrb	r3, [r7, #7]
 80164fa:	429a      	cmp	r2, r3
 80164fc:	d0c3      	beq.n	8016486 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80164fe:	2300      	movs	r3, #0
}
 8016500:	4618      	mov	r0, r3
 8016502:	3710      	adds	r7, #16
 8016504:	46bd      	mov	sp, r7
 8016506:	bd80      	pop	{r7, pc}

08016508 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8016508:	b480      	push	{r7}
 801650a:	b083      	sub	sp, #12
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	68da      	ldr	r2, [r3, #12]
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801651e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	695a      	ldr	r2, [r3, #20]
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	f022 0201 	bic.w	r2, r2, #1
 801652e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	2220      	movs	r2, #32
 8016534:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8016538:	bf00      	nop
 801653a:	370c      	adds	r7, #12
 801653c:	46bd      	mov	sp, r7
 801653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016542:	4770      	bx	lr

08016544 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8016544:	b580      	push	{r7, lr}
 8016546:	b084      	sub	sp, #16
 8016548:	af00      	add	r7, sp, #0
 801654a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016550:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	2200      	movs	r2, #0
 8016556:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	2200      	movs	r2, #0
 801655c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801655e:	68f8      	ldr	r0, [r7, #12]
 8016560:	f7ff ff7e 	bl	8016460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016564:	bf00      	nop
 8016566:	3710      	adds	r7, #16
 8016568:	46bd      	mov	sp, r7
 801656a:	bd80      	pop	{r7, pc}

0801656c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801656c:	b480      	push	{r7}
 801656e:	b085      	sub	sp, #20
 8016570:	af00      	add	r7, sp, #0
 8016572:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801657a:	b2db      	uxtb	r3, r3
 801657c:	2b21      	cmp	r3, #33	; 0x21
 801657e:	d144      	bne.n	801660a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	689b      	ldr	r3, [r3, #8]
 8016584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016588:	d11a      	bne.n	80165c0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	6a1b      	ldr	r3, [r3, #32]
 801658e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	881b      	ldrh	r3, [r3, #0]
 8016594:	461a      	mov	r2, r3
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801659e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	691b      	ldr	r3, [r3, #16]
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d105      	bne.n	80165b4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	6a1b      	ldr	r3, [r3, #32]
 80165ac:	1c9a      	adds	r2, r3, #2
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	621a      	str	r2, [r3, #32]
 80165b2:	e00e      	b.n	80165d2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	6a1b      	ldr	r3, [r3, #32]
 80165b8:	1c5a      	adds	r2, r3, #1
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	621a      	str	r2, [r3, #32]
 80165be:	e008      	b.n	80165d2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	6a1b      	ldr	r3, [r3, #32]
 80165c4:	1c59      	adds	r1, r3, #1
 80165c6:	687a      	ldr	r2, [r7, #4]
 80165c8:	6211      	str	r1, [r2, #32]
 80165ca:	781a      	ldrb	r2, [r3, #0]
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80165d6:	b29b      	uxth	r3, r3
 80165d8:	3b01      	subs	r3, #1
 80165da:	b29b      	uxth	r3, r3
 80165dc:	687a      	ldr	r2, [r7, #4]
 80165de:	4619      	mov	r1, r3
 80165e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d10f      	bne.n	8016606 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	68da      	ldr	r2, [r3, #12]
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80165f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	68da      	ldr	r2, [r3, #12]
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016604:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8016606:	2300      	movs	r3, #0
 8016608:	e000      	b.n	801660c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801660a:	2302      	movs	r3, #2
  }
}
 801660c:	4618      	mov	r0, r3
 801660e:	3714      	adds	r7, #20
 8016610:	46bd      	mov	sp, r7
 8016612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016616:	4770      	bx	lr

08016618 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8016618:	b580      	push	{r7, lr}
 801661a:	b082      	sub	sp, #8
 801661c:	af00      	add	r7, sp, #0
 801661e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	68da      	ldr	r2, [r3, #12]
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801662e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	2220      	movs	r2, #32
 8016634:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8016638:	6878      	ldr	r0, [r7, #4]
 801663a:	f7ff ff07 	bl	801644c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801663e:	2300      	movs	r3, #0
}
 8016640:	4618      	mov	r0, r3
 8016642:	3708      	adds	r7, #8
 8016644:	46bd      	mov	sp, r7
 8016646:	bd80      	pop	{r7, pc}

08016648 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8016648:	b580      	push	{r7, lr}
 801664a:	b084      	sub	sp, #16
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8016656:	b2db      	uxtb	r3, r3
 8016658:	2b22      	cmp	r3, #34	; 0x22
 801665a:	d171      	bne.n	8016740 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	689b      	ldr	r3, [r3, #8]
 8016660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016664:	d123      	bne.n	80166ae <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801666a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	691b      	ldr	r3, [r3, #16]
 8016670:	2b00      	cmp	r3, #0
 8016672:	d10e      	bne.n	8016692 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	685b      	ldr	r3, [r3, #4]
 801667a:	b29b      	uxth	r3, r3
 801667c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016680:	b29a      	uxth	r2, r3
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801668a:	1c9a      	adds	r2, r3, #2
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	629a      	str	r2, [r3, #40]	; 0x28
 8016690:	e029      	b.n	80166e6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	685b      	ldr	r3, [r3, #4]
 8016698:	b29b      	uxth	r3, r3
 801669a:	b2db      	uxtb	r3, r3
 801669c:	b29a      	uxth	r2, r3
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166a6:	1c5a      	adds	r2, r3, #1
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	629a      	str	r2, [r3, #40]	; 0x28
 80166ac:	e01b      	b.n	80166e6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	691b      	ldr	r3, [r3, #16]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d10a      	bne.n	80166cc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	6858      	ldr	r0, [r3, #4]
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166c0:	1c59      	adds	r1, r3, #1
 80166c2:	687a      	ldr	r2, [r7, #4]
 80166c4:	6291      	str	r1, [r2, #40]	; 0x28
 80166c6:	b2c2      	uxtb	r2, r0
 80166c8:	701a      	strb	r2, [r3, #0]
 80166ca:	e00c      	b.n	80166e6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	685b      	ldr	r3, [r3, #4]
 80166d2:	b2da      	uxtb	r2, r3
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166d8:	1c58      	adds	r0, r3, #1
 80166da:	6879      	ldr	r1, [r7, #4]
 80166dc:	6288      	str	r0, [r1, #40]	; 0x28
 80166de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80166e2:	b2d2      	uxtb	r2, r2
 80166e4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80166ea:	b29b      	uxth	r3, r3
 80166ec:	3b01      	subs	r3, #1
 80166ee:	b29b      	uxth	r3, r3
 80166f0:	687a      	ldr	r2, [r7, #4]
 80166f2:	4619      	mov	r1, r3
 80166f4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d120      	bne.n	801673c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	68da      	ldr	r2, [r3, #12]
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	f022 0220 	bic.w	r2, r2, #32
 8016708:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	68da      	ldr	r2, [r3, #12]
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8016718:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	695a      	ldr	r2, [r3, #20]
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	f022 0201 	bic.w	r2, r2, #1
 8016728:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	2220      	movs	r2, #32
 801672e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8016732:	6878      	ldr	r0, [r7, #4]
 8016734:	f7ed feea 	bl	800450c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8016738:	2300      	movs	r3, #0
 801673a:	e002      	b.n	8016742 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 801673c:	2300      	movs	r3, #0
 801673e:	e000      	b.n	8016742 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8016740:	2302      	movs	r3, #2
  }
}
 8016742:	4618      	mov	r0, r3
 8016744:	3710      	adds	r7, #16
 8016746:	46bd      	mov	sp, r7
 8016748:	bd80      	pop	{r7, pc}
	...

0801674c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801674c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016750:	b0bd      	sub	sp, #244	; 0xf4
 8016752:	af00      	add	r7, sp, #0
 8016754:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8016758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	691b      	ldr	r3, [r3, #16]
 8016760:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8016764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016768:	68d9      	ldr	r1, [r3, #12]
 801676a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801676e:	681a      	ldr	r2, [r3, #0]
 8016770:	ea40 0301 	orr.w	r3, r0, r1
 8016774:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8016776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801677a:	689a      	ldr	r2, [r3, #8]
 801677c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016780:	691b      	ldr	r3, [r3, #16]
 8016782:	431a      	orrs	r2, r3
 8016784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016788:	695b      	ldr	r3, [r3, #20]
 801678a:	431a      	orrs	r2, r3
 801678c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016790:	69db      	ldr	r3, [r3, #28]
 8016792:	4313      	orrs	r3, r2
 8016794:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8016798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	68db      	ldr	r3, [r3, #12]
 80167a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80167a4:	f021 010c 	bic.w	r1, r1, #12
 80167a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80167ac:	681a      	ldr	r2, [r3, #0]
 80167ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80167b2:	430b      	orrs	r3, r1
 80167b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80167b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	695b      	ldr	r3, [r3, #20]
 80167be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80167c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80167c6:	6999      	ldr	r1, [r3, #24]
 80167c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80167cc:	681a      	ldr	r2, [r3, #0]
 80167ce:	ea40 0301 	orr.w	r3, r0, r1
 80167d2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80167d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80167d8:	69db      	ldr	r3, [r3, #28]
 80167da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80167de:	f040 81a5 	bne.w	8016b2c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80167e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80167e6:	681a      	ldr	r2, [r3, #0]
 80167e8:	4bcd      	ldr	r3, [pc, #820]	; (8016b20 <UART_SetConfig+0x3d4>)
 80167ea:	429a      	cmp	r2, r3
 80167ec:	d006      	beq.n	80167fc <UART_SetConfig+0xb0>
 80167ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80167f2:	681a      	ldr	r2, [r3, #0]
 80167f4:	4bcb      	ldr	r3, [pc, #812]	; (8016b24 <UART_SetConfig+0x3d8>)
 80167f6:	429a      	cmp	r2, r3
 80167f8:	f040 80cb 	bne.w	8016992 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80167fc:	f7fe fa86 	bl	8014d0c <HAL_RCC_GetPCLK2Freq>
 8016800:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8016804:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016808:	461c      	mov	r4, r3
 801680a:	f04f 0500 	mov.w	r5, #0
 801680e:	4622      	mov	r2, r4
 8016810:	462b      	mov	r3, r5
 8016812:	1891      	adds	r1, r2, r2
 8016814:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8016818:	415b      	adcs	r3, r3
 801681a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801681e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8016822:	1912      	adds	r2, r2, r4
 8016824:	eb45 0303 	adc.w	r3, r5, r3
 8016828:	f04f 0000 	mov.w	r0, #0
 801682c:	f04f 0100 	mov.w	r1, #0
 8016830:	00d9      	lsls	r1, r3, #3
 8016832:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8016836:	00d0      	lsls	r0, r2, #3
 8016838:	4602      	mov	r2, r0
 801683a:	460b      	mov	r3, r1
 801683c:	1911      	adds	r1, r2, r4
 801683e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8016842:	416b      	adcs	r3, r5
 8016844:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8016848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801684c:	685b      	ldr	r3, [r3, #4]
 801684e:	461a      	mov	r2, r3
 8016850:	f04f 0300 	mov.w	r3, #0
 8016854:	1891      	adds	r1, r2, r2
 8016856:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 801685a:	415b      	adcs	r3, r3
 801685c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016860:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8016864:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8016868:	f7ea fa0e 	bl	8000c88 <__aeabi_uldivmod>
 801686c:	4602      	mov	r2, r0
 801686e:	460b      	mov	r3, r1
 8016870:	4bad      	ldr	r3, [pc, #692]	; (8016b28 <UART_SetConfig+0x3dc>)
 8016872:	fba3 2302 	umull	r2, r3, r3, r2
 8016876:	095b      	lsrs	r3, r3, #5
 8016878:	011e      	lsls	r6, r3, #4
 801687a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801687e:	461c      	mov	r4, r3
 8016880:	f04f 0500 	mov.w	r5, #0
 8016884:	4622      	mov	r2, r4
 8016886:	462b      	mov	r3, r5
 8016888:	1891      	adds	r1, r2, r2
 801688a:	67b9      	str	r1, [r7, #120]	; 0x78
 801688c:	415b      	adcs	r3, r3
 801688e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016890:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8016894:	1912      	adds	r2, r2, r4
 8016896:	eb45 0303 	adc.w	r3, r5, r3
 801689a:	f04f 0000 	mov.w	r0, #0
 801689e:	f04f 0100 	mov.w	r1, #0
 80168a2:	00d9      	lsls	r1, r3, #3
 80168a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80168a8:	00d0      	lsls	r0, r2, #3
 80168aa:	4602      	mov	r2, r0
 80168ac:	460b      	mov	r3, r1
 80168ae:	1911      	adds	r1, r2, r4
 80168b0:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80168b4:	416b      	adcs	r3, r5
 80168b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80168ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80168be:	685b      	ldr	r3, [r3, #4]
 80168c0:	461a      	mov	r2, r3
 80168c2:	f04f 0300 	mov.w	r3, #0
 80168c6:	1891      	adds	r1, r2, r2
 80168c8:	6739      	str	r1, [r7, #112]	; 0x70
 80168ca:	415b      	adcs	r3, r3
 80168cc:	677b      	str	r3, [r7, #116]	; 0x74
 80168ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80168d2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80168d6:	f7ea f9d7 	bl	8000c88 <__aeabi_uldivmod>
 80168da:	4602      	mov	r2, r0
 80168dc:	460b      	mov	r3, r1
 80168de:	4b92      	ldr	r3, [pc, #584]	; (8016b28 <UART_SetConfig+0x3dc>)
 80168e0:	fba3 1302 	umull	r1, r3, r3, r2
 80168e4:	095b      	lsrs	r3, r3, #5
 80168e6:	2164      	movs	r1, #100	; 0x64
 80168e8:	fb01 f303 	mul.w	r3, r1, r3
 80168ec:	1ad3      	subs	r3, r2, r3
 80168ee:	00db      	lsls	r3, r3, #3
 80168f0:	3332      	adds	r3, #50	; 0x32
 80168f2:	4a8d      	ldr	r2, [pc, #564]	; (8016b28 <UART_SetConfig+0x3dc>)
 80168f4:	fba2 2303 	umull	r2, r3, r2, r3
 80168f8:	095b      	lsrs	r3, r3, #5
 80168fa:	005b      	lsls	r3, r3, #1
 80168fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8016900:	441e      	add	r6, r3
 8016902:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016906:	4618      	mov	r0, r3
 8016908:	f04f 0100 	mov.w	r1, #0
 801690c:	4602      	mov	r2, r0
 801690e:	460b      	mov	r3, r1
 8016910:	1894      	adds	r4, r2, r2
 8016912:	66bc      	str	r4, [r7, #104]	; 0x68
 8016914:	415b      	adcs	r3, r3
 8016916:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016918:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801691c:	1812      	adds	r2, r2, r0
 801691e:	eb41 0303 	adc.w	r3, r1, r3
 8016922:	f04f 0400 	mov.w	r4, #0
 8016926:	f04f 0500 	mov.w	r5, #0
 801692a:	00dd      	lsls	r5, r3, #3
 801692c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8016930:	00d4      	lsls	r4, r2, #3
 8016932:	4622      	mov	r2, r4
 8016934:	462b      	mov	r3, r5
 8016936:	1814      	adds	r4, r2, r0
 8016938:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 801693c:	414b      	adcs	r3, r1
 801693e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8016942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016946:	685b      	ldr	r3, [r3, #4]
 8016948:	461a      	mov	r2, r3
 801694a:	f04f 0300 	mov.w	r3, #0
 801694e:	1891      	adds	r1, r2, r2
 8016950:	6639      	str	r1, [r7, #96]	; 0x60
 8016952:	415b      	adcs	r3, r3
 8016954:	667b      	str	r3, [r7, #100]	; 0x64
 8016956:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801695a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801695e:	f7ea f993 	bl	8000c88 <__aeabi_uldivmod>
 8016962:	4602      	mov	r2, r0
 8016964:	460b      	mov	r3, r1
 8016966:	4b70      	ldr	r3, [pc, #448]	; (8016b28 <UART_SetConfig+0x3dc>)
 8016968:	fba3 1302 	umull	r1, r3, r3, r2
 801696c:	095b      	lsrs	r3, r3, #5
 801696e:	2164      	movs	r1, #100	; 0x64
 8016970:	fb01 f303 	mul.w	r3, r1, r3
 8016974:	1ad3      	subs	r3, r2, r3
 8016976:	00db      	lsls	r3, r3, #3
 8016978:	3332      	adds	r3, #50	; 0x32
 801697a:	4a6b      	ldr	r2, [pc, #428]	; (8016b28 <UART_SetConfig+0x3dc>)
 801697c:	fba2 2303 	umull	r2, r3, r2, r3
 8016980:	095b      	lsrs	r3, r3, #5
 8016982:	f003 0207 	and.w	r2, r3, #7
 8016986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	4432      	add	r2, r6
 801698e:	609a      	str	r2, [r3, #8]
 8016990:	e26d      	b.n	8016e6e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8016992:	f7fe f9a7 	bl	8014ce4 <HAL_RCC_GetPCLK1Freq>
 8016996:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801699a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801699e:	461c      	mov	r4, r3
 80169a0:	f04f 0500 	mov.w	r5, #0
 80169a4:	4622      	mov	r2, r4
 80169a6:	462b      	mov	r3, r5
 80169a8:	1891      	adds	r1, r2, r2
 80169aa:	65b9      	str	r1, [r7, #88]	; 0x58
 80169ac:	415b      	adcs	r3, r3
 80169ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80169b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80169b4:	1912      	adds	r2, r2, r4
 80169b6:	eb45 0303 	adc.w	r3, r5, r3
 80169ba:	f04f 0000 	mov.w	r0, #0
 80169be:	f04f 0100 	mov.w	r1, #0
 80169c2:	00d9      	lsls	r1, r3, #3
 80169c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80169c8:	00d0      	lsls	r0, r2, #3
 80169ca:	4602      	mov	r2, r0
 80169cc:	460b      	mov	r3, r1
 80169ce:	1911      	adds	r1, r2, r4
 80169d0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80169d4:	416b      	adcs	r3, r5
 80169d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80169da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80169de:	685b      	ldr	r3, [r3, #4]
 80169e0:	461a      	mov	r2, r3
 80169e2:	f04f 0300 	mov.w	r3, #0
 80169e6:	1891      	adds	r1, r2, r2
 80169e8:	6539      	str	r1, [r7, #80]	; 0x50
 80169ea:	415b      	adcs	r3, r3
 80169ec:	657b      	str	r3, [r7, #84]	; 0x54
 80169ee:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80169f2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80169f6:	f7ea f947 	bl	8000c88 <__aeabi_uldivmod>
 80169fa:	4602      	mov	r2, r0
 80169fc:	460b      	mov	r3, r1
 80169fe:	4b4a      	ldr	r3, [pc, #296]	; (8016b28 <UART_SetConfig+0x3dc>)
 8016a00:	fba3 2302 	umull	r2, r3, r3, r2
 8016a04:	095b      	lsrs	r3, r3, #5
 8016a06:	011e      	lsls	r6, r3, #4
 8016a08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016a0c:	461c      	mov	r4, r3
 8016a0e:	f04f 0500 	mov.w	r5, #0
 8016a12:	4622      	mov	r2, r4
 8016a14:	462b      	mov	r3, r5
 8016a16:	1891      	adds	r1, r2, r2
 8016a18:	64b9      	str	r1, [r7, #72]	; 0x48
 8016a1a:	415b      	adcs	r3, r3
 8016a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016a1e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8016a22:	1912      	adds	r2, r2, r4
 8016a24:	eb45 0303 	adc.w	r3, r5, r3
 8016a28:	f04f 0000 	mov.w	r0, #0
 8016a2c:	f04f 0100 	mov.w	r1, #0
 8016a30:	00d9      	lsls	r1, r3, #3
 8016a32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8016a36:	00d0      	lsls	r0, r2, #3
 8016a38:	4602      	mov	r2, r0
 8016a3a:	460b      	mov	r3, r1
 8016a3c:	1911      	adds	r1, r2, r4
 8016a3e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8016a42:	416b      	adcs	r3, r5
 8016a44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8016a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016a4c:	685b      	ldr	r3, [r3, #4]
 8016a4e:	461a      	mov	r2, r3
 8016a50:	f04f 0300 	mov.w	r3, #0
 8016a54:	1891      	adds	r1, r2, r2
 8016a56:	6439      	str	r1, [r7, #64]	; 0x40
 8016a58:	415b      	adcs	r3, r3
 8016a5a:	647b      	str	r3, [r7, #68]	; 0x44
 8016a5c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8016a60:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8016a64:	f7ea f910 	bl	8000c88 <__aeabi_uldivmod>
 8016a68:	4602      	mov	r2, r0
 8016a6a:	460b      	mov	r3, r1
 8016a6c:	4b2e      	ldr	r3, [pc, #184]	; (8016b28 <UART_SetConfig+0x3dc>)
 8016a6e:	fba3 1302 	umull	r1, r3, r3, r2
 8016a72:	095b      	lsrs	r3, r3, #5
 8016a74:	2164      	movs	r1, #100	; 0x64
 8016a76:	fb01 f303 	mul.w	r3, r1, r3
 8016a7a:	1ad3      	subs	r3, r2, r3
 8016a7c:	00db      	lsls	r3, r3, #3
 8016a7e:	3332      	adds	r3, #50	; 0x32
 8016a80:	4a29      	ldr	r2, [pc, #164]	; (8016b28 <UART_SetConfig+0x3dc>)
 8016a82:	fba2 2303 	umull	r2, r3, r2, r3
 8016a86:	095b      	lsrs	r3, r3, #5
 8016a88:	005b      	lsls	r3, r3, #1
 8016a8a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8016a8e:	441e      	add	r6, r3
 8016a90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016a94:	4618      	mov	r0, r3
 8016a96:	f04f 0100 	mov.w	r1, #0
 8016a9a:	4602      	mov	r2, r0
 8016a9c:	460b      	mov	r3, r1
 8016a9e:	1894      	adds	r4, r2, r2
 8016aa0:	63bc      	str	r4, [r7, #56]	; 0x38
 8016aa2:	415b      	adcs	r3, r3
 8016aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016aa6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8016aaa:	1812      	adds	r2, r2, r0
 8016aac:	eb41 0303 	adc.w	r3, r1, r3
 8016ab0:	f04f 0400 	mov.w	r4, #0
 8016ab4:	f04f 0500 	mov.w	r5, #0
 8016ab8:	00dd      	lsls	r5, r3, #3
 8016aba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8016abe:	00d4      	lsls	r4, r2, #3
 8016ac0:	4622      	mov	r2, r4
 8016ac2:	462b      	mov	r3, r5
 8016ac4:	1814      	adds	r4, r2, r0
 8016ac6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8016aca:	414b      	adcs	r3, r1
 8016acc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8016ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016ad4:	685b      	ldr	r3, [r3, #4]
 8016ad6:	461a      	mov	r2, r3
 8016ad8:	f04f 0300 	mov.w	r3, #0
 8016adc:	1891      	adds	r1, r2, r2
 8016ade:	6339      	str	r1, [r7, #48]	; 0x30
 8016ae0:	415b      	adcs	r3, r3
 8016ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8016ae4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8016ae8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8016aec:	f7ea f8cc 	bl	8000c88 <__aeabi_uldivmod>
 8016af0:	4602      	mov	r2, r0
 8016af2:	460b      	mov	r3, r1
 8016af4:	4b0c      	ldr	r3, [pc, #48]	; (8016b28 <UART_SetConfig+0x3dc>)
 8016af6:	fba3 1302 	umull	r1, r3, r3, r2
 8016afa:	095b      	lsrs	r3, r3, #5
 8016afc:	2164      	movs	r1, #100	; 0x64
 8016afe:	fb01 f303 	mul.w	r3, r1, r3
 8016b02:	1ad3      	subs	r3, r2, r3
 8016b04:	00db      	lsls	r3, r3, #3
 8016b06:	3332      	adds	r3, #50	; 0x32
 8016b08:	4a07      	ldr	r2, [pc, #28]	; (8016b28 <UART_SetConfig+0x3dc>)
 8016b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8016b0e:	095b      	lsrs	r3, r3, #5
 8016b10:	f003 0207 	and.w	r2, r3, #7
 8016b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	4432      	add	r2, r6
 8016b1c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8016b1e:	e1a6      	b.n	8016e6e <UART_SetConfig+0x722>
 8016b20:	40011000 	.word	0x40011000
 8016b24:	40011400 	.word	0x40011400
 8016b28:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8016b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016b30:	681a      	ldr	r2, [r3, #0]
 8016b32:	4bd1      	ldr	r3, [pc, #836]	; (8016e78 <UART_SetConfig+0x72c>)
 8016b34:	429a      	cmp	r2, r3
 8016b36:	d006      	beq.n	8016b46 <UART_SetConfig+0x3fa>
 8016b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016b3c:	681a      	ldr	r2, [r3, #0]
 8016b3e:	4bcf      	ldr	r3, [pc, #828]	; (8016e7c <UART_SetConfig+0x730>)
 8016b40:	429a      	cmp	r2, r3
 8016b42:	f040 80ca 	bne.w	8016cda <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8016b46:	f7fe f8e1 	bl	8014d0c <HAL_RCC_GetPCLK2Freq>
 8016b4a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8016b4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016b52:	461c      	mov	r4, r3
 8016b54:	f04f 0500 	mov.w	r5, #0
 8016b58:	4622      	mov	r2, r4
 8016b5a:	462b      	mov	r3, r5
 8016b5c:	1891      	adds	r1, r2, r2
 8016b5e:	62b9      	str	r1, [r7, #40]	; 0x28
 8016b60:	415b      	adcs	r3, r3
 8016b62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016b64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8016b68:	1912      	adds	r2, r2, r4
 8016b6a:	eb45 0303 	adc.w	r3, r5, r3
 8016b6e:	f04f 0000 	mov.w	r0, #0
 8016b72:	f04f 0100 	mov.w	r1, #0
 8016b76:	00d9      	lsls	r1, r3, #3
 8016b78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8016b7c:	00d0      	lsls	r0, r2, #3
 8016b7e:	4602      	mov	r2, r0
 8016b80:	460b      	mov	r3, r1
 8016b82:	eb12 0a04 	adds.w	sl, r2, r4
 8016b86:	eb43 0b05 	adc.w	fp, r3, r5
 8016b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016b8e:	685b      	ldr	r3, [r3, #4]
 8016b90:	4618      	mov	r0, r3
 8016b92:	f04f 0100 	mov.w	r1, #0
 8016b96:	f04f 0200 	mov.w	r2, #0
 8016b9a:	f04f 0300 	mov.w	r3, #0
 8016b9e:	008b      	lsls	r3, r1, #2
 8016ba0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016ba4:	0082      	lsls	r2, r0, #2
 8016ba6:	4650      	mov	r0, sl
 8016ba8:	4659      	mov	r1, fp
 8016baa:	f7ea f86d 	bl	8000c88 <__aeabi_uldivmod>
 8016bae:	4602      	mov	r2, r0
 8016bb0:	460b      	mov	r3, r1
 8016bb2:	4bb3      	ldr	r3, [pc, #716]	; (8016e80 <UART_SetConfig+0x734>)
 8016bb4:	fba3 2302 	umull	r2, r3, r3, r2
 8016bb8:	095b      	lsrs	r3, r3, #5
 8016bba:	011e      	lsls	r6, r3, #4
 8016bbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016bc0:	4618      	mov	r0, r3
 8016bc2:	f04f 0100 	mov.w	r1, #0
 8016bc6:	4602      	mov	r2, r0
 8016bc8:	460b      	mov	r3, r1
 8016bca:	1894      	adds	r4, r2, r2
 8016bcc:	623c      	str	r4, [r7, #32]
 8016bce:	415b      	adcs	r3, r3
 8016bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8016bd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8016bd6:	1812      	adds	r2, r2, r0
 8016bd8:	eb41 0303 	adc.w	r3, r1, r3
 8016bdc:	f04f 0400 	mov.w	r4, #0
 8016be0:	f04f 0500 	mov.w	r5, #0
 8016be4:	00dd      	lsls	r5, r3, #3
 8016be6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8016bea:	00d4      	lsls	r4, r2, #3
 8016bec:	4622      	mov	r2, r4
 8016bee:	462b      	mov	r3, r5
 8016bf0:	1814      	adds	r4, r2, r0
 8016bf2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8016bf6:	414b      	adcs	r3, r1
 8016bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8016bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016c00:	685b      	ldr	r3, [r3, #4]
 8016c02:	4618      	mov	r0, r3
 8016c04:	f04f 0100 	mov.w	r1, #0
 8016c08:	f04f 0200 	mov.w	r2, #0
 8016c0c:	f04f 0300 	mov.w	r3, #0
 8016c10:	008b      	lsls	r3, r1, #2
 8016c12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016c16:	0082      	lsls	r2, r0, #2
 8016c18:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8016c1c:	f7ea f834 	bl	8000c88 <__aeabi_uldivmod>
 8016c20:	4602      	mov	r2, r0
 8016c22:	460b      	mov	r3, r1
 8016c24:	4b96      	ldr	r3, [pc, #600]	; (8016e80 <UART_SetConfig+0x734>)
 8016c26:	fba3 1302 	umull	r1, r3, r3, r2
 8016c2a:	095b      	lsrs	r3, r3, #5
 8016c2c:	2164      	movs	r1, #100	; 0x64
 8016c2e:	fb01 f303 	mul.w	r3, r1, r3
 8016c32:	1ad3      	subs	r3, r2, r3
 8016c34:	011b      	lsls	r3, r3, #4
 8016c36:	3332      	adds	r3, #50	; 0x32
 8016c38:	4a91      	ldr	r2, [pc, #580]	; (8016e80 <UART_SetConfig+0x734>)
 8016c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8016c3e:	095b      	lsrs	r3, r3, #5
 8016c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016c44:	441e      	add	r6, r3
 8016c46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	f04f 0100 	mov.w	r1, #0
 8016c50:	4602      	mov	r2, r0
 8016c52:	460b      	mov	r3, r1
 8016c54:	1894      	adds	r4, r2, r2
 8016c56:	61bc      	str	r4, [r7, #24]
 8016c58:	415b      	adcs	r3, r3
 8016c5a:	61fb      	str	r3, [r7, #28]
 8016c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016c60:	1812      	adds	r2, r2, r0
 8016c62:	eb41 0303 	adc.w	r3, r1, r3
 8016c66:	f04f 0400 	mov.w	r4, #0
 8016c6a:	f04f 0500 	mov.w	r5, #0
 8016c6e:	00dd      	lsls	r5, r3, #3
 8016c70:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8016c74:	00d4      	lsls	r4, r2, #3
 8016c76:	4622      	mov	r2, r4
 8016c78:	462b      	mov	r3, r5
 8016c7a:	1814      	adds	r4, r2, r0
 8016c7c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8016c80:	414b      	adcs	r3, r1
 8016c82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8016c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016c8a:	685b      	ldr	r3, [r3, #4]
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	f04f 0100 	mov.w	r1, #0
 8016c92:	f04f 0200 	mov.w	r2, #0
 8016c96:	f04f 0300 	mov.w	r3, #0
 8016c9a:	008b      	lsls	r3, r1, #2
 8016c9c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016ca0:	0082      	lsls	r2, r0, #2
 8016ca2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8016ca6:	f7e9 ffef 	bl	8000c88 <__aeabi_uldivmod>
 8016caa:	4602      	mov	r2, r0
 8016cac:	460b      	mov	r3, r1
 8016cae:	4b74      	ldr	r3, [pc, #464]	; (8016e80 <UART_SetConfig+0x734>)
 8016cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8016cb4:	095b      	lsrs	r3, r3, #5
 8016cb6:	2164      	movs	r1, #100	; 0x64
 8016cb8:	fb01 f303 	mul.w	r3, r1, r3
 8016cbc:	1ad3      	subs	r3, r2, r3
 8016cbe:	011b      	lsls	r3, r3, #4
 8016cc0:	3332      	adds	r3, #50	; 0x32
 8016cc2:	4a6f      	ldr	r2, [pc, #444]	; (8016e80 <UART_SetConfig+0x734>)
 8016cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8016cc8:	095b      	lsrs	r3, r3, #5
 8016cca:	f003 020f 	and.w	r2, r3, #15
 8016cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	4432      	add	r2, r6
 8016cd6:	609a      	str	r2, [r3, #8]
 8016cd8:	e0c9      	b.n	8016e6e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8016cda:	f7fe f803 	bl	8014ce4 <HAL_RCC_GetPCLK1Freq>
 8016cde:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8016ce2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016ce6:	461c      	mov	r4, r3
 8016ce8:	f04f 0500 	mov.w	r5, #0
 8016cec:	4622      	mov	r2, r4
 8016cee:	462b      	mov	r3, r5
 8016cf0:	1891      	adds	r1, r2, r2
 8016cf2:	6139      	str	r1, [r7, #16]
 8016cf4:	415b      	adcs	r3, r3
 8016cf6:	617b      	str	r3, [r7, #20]
 8016cf8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8016cfc:	1912      	adds	r2, r2, r4
 8016cfe:	eb45 0303 	adc.w	r3, r5, r3
 8016d02:	f04f 0000 	mov.w	r0, #0
 8016d06:	f04f 0100 	mov.w	r1, #0
 8016d0a:	00d9      	lsls	r1, r3, #3
 8016d0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8016d10:	00d0      	lsls	r0, r2, #3
 8016d12:	4602      	mov	r2, r0
 8016d14:	460b      	mov	r3, r1
 8016d16:	eb12 0804 	adds.w	r8, r2, r4
 8016d1a:	eb43 0905 	adc.w	r9, r3, r5
 8016d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016d22:	685b      	ldr	r3, [r3, #4]
 8016d24:	4618      	mov	r0, r3
 8016d26:	f04f 0100 	mov.w	r1, #0
 8016d2a:	f04f 0200 	mov.w	r2, #0
 8016d2e:	f04f 0300 	mov.w	r3, #0
 8016d32:	008b      	lsls	r3, r1, #2
 8016d34:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016d38:	0082      	lsls	r2, r0, #2
 8016d3a:	4640      	mov	r0, r8
 8016d3c:	4649      	mov	r1, r9
 8016d3e:	f7e9 ffa3 	bl	8000c88 <__aeabi_uldivmod>
 8016d42:	4602      	mov	r2, r0
 8016d44:	460b      	mov	r3, r1
 8016d46:	4b4e      	ldr	r3, [pc, #312]	; (8016e80 <UART_SetConfig+0x734>)
 8016d48:	fba3 2302 	umull	r2, r3, r3, r2
 8016d4c:	095b      	lsrs	r3, r3, #5
 8016d4e:	011e      	lsls	r6, r3, #4
 8016d50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016d54:	4618      	mov	r0, r3
 8016d56:	f04f 0100 	mov.w	r1, #0
 8016d5a:	4602      	mov	r2, r0
 8016d5c:	460b      	mov	r3, r1
 8016d5e:	1894      	adds	r4, r2, r2
 8016d60:	60bc      	str	r4, [r7, #8]
 8016d62:	415b      	adcs	r3, r3
 8016d64:	60fb      	str	r3, [r7, #12]
 8016d66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8016d6a:	1812      	adds	r2, r2, r0
 8016d6c:	eb41 0303 	adc.w	r3, r1, r3
 8016d70:	f04f 0400 	mov.w	r4, #0
 8016d74:	f04f 0500 	mov.w	r5, #0
 8016d78:	00dd      	lsls	r5, r3, #3
 8016d7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8016d7e:	00d4      	lsls	r4, r2, #3
 8016d80:	4622      	mov	r2, r4
 8016d82:	462b      	mov	r3, r5
 8016d84:	1814      	adds	r4, r2, r0
 8016d86:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8016d8a:	414b      	adcs	r3, r1
 8016d8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8016d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016d94:	685b      	ldr	r3, [r3, #4]
 8016d96:	4618      	mov	r0, r3
 8016d98:	f04f 0100 	mov.w	r1, #0
 8016d9c:	f04f 0200 	mov.w	r2, #0
 8016da0:	f04f 0300 	mov.w	r3, #0
 8016da4:	008b      	lsls	r3, r1, #2
 8016da6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016daa:	0082      	lsls	r2, r0, #2
 8016dac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8016db0:	f7e9 ff6a 	bl	8000c88 <__aeabi_uldivmod>
 8016db4:	4602      	mov	r2, r0
 8016db6:	460b      	mov	r3, r1
 8016db8:	4b31      	ldr	r3, [pc, #196]	; (8016e80 <UART_SetConfig+0x734>)
 8016dba:	fba3 1302 	umull	r1, r3, r3, r2
 8016dbe:	095b      	lsrs	r3, r3, #5
 8016dc0:	2164      	movs	r1, #100	; 0x64
 8016dc2:	fb01 f303 	mul.w	r3, r1, r3
 8016dc6:	1ad3      	subs	r3, r2, r3
 8016dc8:	011b      	lsls	r3, r3, #4
 8016dca:	3332      	adds	r3, #50	; 0x32
 8016dcc:	4a2c      	ldr	r2, [pc, #176]	; (8016e80 <UART_SetConfig+0x734>)
 8016dce:	fba2 2303 	umull	r2, r3, r2, r3
 8016dd2:	095b      	lsrs	r3, r3, #5
 8016dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016dd8:	441e      	add	r6, r3
 8016dda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016dde:	4618      	mov	r0, r3
 8016de0:	f04f 0100 	mov.w	r1, #0
 8016de4:	4602      	mov	r2, r0
 8016de6:	460b      	mov	r3, r1
 8016de8:	1894      	adds	r4, r2, r2
 8016dea:	603c      	str	r4, [r7, #0]
 8016dec:	415b      	adcs	r3, r3
 8016dee:	607b      	str	r3, [r7, #4]
 8016df0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016df4:	1812      	adds	r2, r2, r0
 8016df6:	eb41 0303 	adc.w	r3, r1, r3
 8016dfa:	f04f 0400 	mov.w	r4, #0
 8016dfe:	f04f 0500 	mov.w	r5, #0
 8016e02:	00dd      	lsls	r5, r3, #3
 8016e04:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8016e08:	00d4      	lsls	r4, r2, #3
 8016e0a:	4622      	mov	r2, r4
 8016e0c:	462b      	mov	r3, r5
 8016e0e:	1814      	adds	r4, r2, r0
 8016e10:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8016e14:	414b      	adcs	r3, r1
 8016e16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016e1e:	685b      	ldr	r3, [r3, #4]
 8016e20:	4618      	mov	r0, r3
 8016e22:	f04f 0100 	mov.w	r1, #0
 8016e26:	f04f 0200 	mov.w	r2, #0
 8016e2a:	f04f 0300 	mov.w	r3, #0
 8016e2e:	008b      	lsls	r3, r1, #2
 8016e30:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016e34:	0082      	lsls	r2, r0, #2
 8016e36:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8016e3a:	f7e9 ff25 	bl	8000c88 <__aeabi_uldivmod>
 8016e3e:	4602      	mov	r2, r0
 8016e40:	460b      	mov	r3, r1
 8016e42:	4b0f      	ldr	r3, [pc, #60]	; (8016e80 <UART_SetConfig+0x734>)
 8016e44:	fba3 1302 	umull	r1, r3, r3, r2
 8016e48:	095b      	lsrs	r3, r3, #5
 8016e4a:	2164      	movs	r1, #100	; 0x64
 8016e4c:	fb01 f303 	mul.w	r3, r1, r3
 8016e50:	1ad3      	subs	r3, r2, r3
 8016e52:	011b      	lsls	r3, r3, #4
 8016e54:	3332      	adds	r3, #50	; 0x32
 8016e56:	4a0a      	ldr	r2, [pc, #40]	; (8016e80 <UART_SetConfig+0x734>)
 8016e58:	fba2 2303 	umull	r2, r3, r2, r3
 8016e5c:	095b      	lsrs	r3, r3, #5
 8016e5e:	f003 020f 	and.w	r2, r3, #15
 8016e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	4432      	add	r2, r6
 8016e6a:	609a      	str	r2, [r3, #8]
}
 8016e6c:	e7ff      	b.n	8016e6e <UART_SetConfig+0x722>
 8016e6e:	bf00      	nop
 8016e70:	37f4      	adds	r7, #244	; 0xf4
 8016e72:	46bd      	mov	sp, r7
 8016e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e78:	40011000 	.word	0x40011000
 8016e7c:	40011400 	.word	0x40011400
 8016e80:	51eb851f 	.word	0x51eb851f

08016e84 <__NVIC_SetPriority>:
{
 8016e84:	b480      	push	{r7}
 8016e86:	b083      	sub	sp, #12
 8016e88:	af00      	add	r7, sp, #0
 8016e8a:	4603      	mov	r3, r0
 8016e8c:	6039      	str	r1, [r7, #0]
 8016e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	db0a      	blt.n	8016eae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016e98:	683b      	ldr	r3, [r7, #0]
 8016e9a:	b2da      	uxtb	r2, r3
 8016e9c:	490c      	ldr	r1, [pc, #48]	; (8016ed0 <__NVIC_SetPriority+0x4c>)
 8016e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016ea2:	0112      	lsls	r2, r2, #4
 8016ea4:	b2d2      	uxtb	r2, r2
 8016ea6:	440b      	add	r3, r1
 8016ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016eac:	e00a      	b.n	8016ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016eae:	683b      	ldr	r3, [r7, #0]
 8016eb0:	b2da      	uxtb	r2, r3
 8016eb2:	4908      	ldr	r1, [pc, #32]	; (8016ed4 <__NVIC_SetPriority+0x50>)
 8016eb4:	79fb      	ldrb	r3, [r7, #7]
 8016eb6:	f003 030f 	and.w	r3, r3, #15
 8016eba:	3b04      	subs	r3, #4
 8016ebc:	0112      	lsls	r2, r2, #4
 8016ebe:	b2d2      	uxtb	r2, r2
 8016ec0:	440b      	add	r3, r1
 8016ec2:	761a      	strb	r2, [r3, #24]
}
 8016ec4:	bf00      	nop
 8016ec6:	370c      	adds	r7, #12
 8016ec8:	46bd      	mov	sp, r7
 8016eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ece:	4770      	bx	lr
 8016ed0:	e000e100 	.word	0xe000e100
 8016ed4:	e000ed00 	.word	0xe000ed00

08016ed8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8016ed8:	b580      	push	{r7, lr}
 8016eda:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8016edc:	4b05      	ldr	r3, [pc, #20]	; (8016ef4 <SysTick_Handler+0x1c>)
 8016ede:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8016ee0:	f001 fe02 	bl	8018ae8 <xTaskGetSchedulerState>
 8016ee4:	4603      	mov	r3, r0
 8016ee6:	2b01      	cmp	r3, #1
 8016ee8:	d001      	beq.n	8016eee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8016eea:	f002 fbed 	bl	80196c8 <xPortSysTickHandler>
  }
}
 8016eee:	bf00      	nop
 8016ef0:	bd80      	pop	{r7, pc}
 8016ef2:	bf00      	nop
 8016ef4:	e000e010 	.word	0xe000e010

08016ef8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8016ef8:	b580      	push	{r7, lr}
 8016efa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8016efc:	2100      	movs	r1, #0
 8016efe:	f06f 0004 	mvn.w	r0, #4
 8016f02:	f7ff ffbf 	bl	8016e84 <__NVIC_SetPriority>
#endif
}
 8016f06:	bf00      	nop
 8016f08:	bd80      	pop	{r7, pc}
	...

08016f0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8016f0c:	b480      	push	{r7}
 8016f0e:	b083      	sub	sp, #12
 8016f10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016f12:	f3ef 8305 	mrs	r3, IPSR
 8016f16:	603b      	str	r3, [r7, #0]
  return(result);
 8016f18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d003      	beq.n	8016f26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8016f1e:	f06f 0305 	mvn.w	r3, #5
 8016f22:	607b      	str	r3, [r7, #4]
 8016f24:	e00c      	b.n	8016f40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8016f26:	4b0a      	ldr	r3, [pc, #40]	; (8016f50 <osKernelInitialize+0x44>)
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d105      	bne.n	8016f3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8016f2e:	4b08      	ldr	r3, [pc, #32]	; (8016f50 <osKernelInitialize+0x44>)
 8016f30:	2201      	movs	r2, #1
 8016f32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8016f34:	2300      	movs	r3, #0
 8016f36:	607b      	str	r3, [r7, #4]
 8016f38:	e002      	b.n	8016f40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8016f3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016f40:	687b      	ldr	r3, [r7, #4]
}
 8016f42:	4618      	mov	r0, r3
 8016f44:	370c      	adds	r7, #12
 8016f46:	46bd      	mov	sp, r7
 8016f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f4c:	4770      	bx	lr
 8016f4e:	bf00      	nop
 8016f50:	20001108 	.word	0x20001108

08016f54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8016f54:	b580      	push	{r7, lr}
 8016f56:	b082      	sub	sp, #8
 8016f58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016f5a:	f3ef 8305 	mrs	r3, IPSR
 8016f5e:	603b      	str	r3, [r7, #0]
  return(result);
 8016f60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d003      	beq.n	8016f6e <osKernelStart+0x1a>
    stat = osErrorISR;
 8016f66:	f06f 0305 	mvn.w	r3, #5
 8016f6a:	607b      	str	r3, [r7, #4]
 8016f6c:	e010      	b.n	8016f90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8016f6e:	4b0b      	ldr	r3, [pc, #44]	; (8016f9c <osKernelStart+0x48>)
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	2b01      	cmp	r3, #1
 8016f74:	d109      	bne.n	8016f8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8016f76:	f7ff ffbf 	bl	8016ef8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8016f7a:	4b08      	ldr	r3, [pc, #32]	; (8016f9c <osKernelStart+0x48>)
 8016f7c:	2202      	movs	r2, #2
 8016f7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8016f80:	f001 f96a 	bl	8018258 <vTaskStartScheduler>
      stat = osOK;
 8016f84:	2300      	movs	r3, #0
 8016f86:	607b      	str	r3, [r7, #4]
 8016f88:	e002      	b.n	8016f90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8016f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016f90:	687b      	ldr	r3, [r7, #4]
}
 8016f92:	4618      	mov	r0, r3
 8016f94:	3708      	adds	r7, #8
 8016f96:	46bd      	mov	sp, r7
 8016f98:	bd80      	pop	{r7, pc}
 8016f9a:	bf00      	nop
 8016f9c:	20001108 	.word	0x20001108

08016fa0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8016fa0:	b580      	push	{r7, lr}
 8016fa2:	b08e      	sub	sp, #56	; 0x38
 8016fa4:	af04      	add	r7, sp, #16
 8016fa6:	60f8      	str	r0, [r7, #12]
 8016fa8:	60b9      	str	r1, [r7, #8]
 8016faa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016fac:	2300      	movs	r3, #0
 8016fae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016fb0:	f3ef 8305 	mrs	r3, IPSR
 8016fb4:	617b      	str	r3, [r7, #20]
  return(result);
 8016fb6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d17e      	bne.n	80170ba <osThreadNew+0x11a>
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d07b      	beq.n	80170ba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8016fc2:	2380      	movs	r3, #128	; 0x80
 8016fc4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8016fc6:	2318      	movs	r3, #24
 8016fc8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8016fca:	2300      	movs	r3, #0
 8016fcc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8016fce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016fd2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d045      	beq.n	8017066 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d002      	beq.n	8016fe8 <osThreadNew+0x48>
        name = attr->name;
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	681b      	ldr	r3, [r3, #0]
 8016fe6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	699b      	ldr	r3, [r3, #24]
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d002      	beq.n	8016ff6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	699b      	ldr	r3, [r3, #24]
 8016ff4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016ff6:	69fb      	ldr	r3, [r7, #28]
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d008      	beq.n	801700e <osThreadNew+0x6e>
 8016ffc:	69fb      	ldr	r3, [r7, #28]
 8016ffe:	2b38      	cmp	r3, #56	; 0x38
 8017000:	d805      	bhi.n	801700e <osThreadNew+0x6e>
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	685b      	ldr	r3, [r3, #4]
 8017006:	f003 0301 	and.w	r3, r3, #1
 801700a:	2b00      	cmp	r3, #0
 801700c:	d001      	beq.n	8017012 <osThreadNew+0x72>
        return (NULL);
 801700e:	2300      	movs	r3, #0
 8017010:	e054      	b.n	80170bc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	695b      	ldr	r3, [r3, #20]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d003      	beq.n	8017022 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	695b      	ldr	r3, [r3, #20]
 801701e:	089b      	lsrs	r3, r3, #2
 8017020:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	689b      	ldr	r3, [r3, #8]
 8017026:	2b00      	cmp	r3, #0
 8017028:	d00e      	beq.n	8017048 <osThreadNew+0xa8>
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	68db      	ldr	r3, [r3, #12]
 801702e:	2b5b      	cmp	r3, #91	; 0x5b
 8017030:	d90a      	bls.n	8017048 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017036:	2b00      	cmp	r3, #0
 8017038:	d006      	beq.n	8017048 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	695b      	ldr	r3, [r3, #20]
 801703e:	2b00      	cmp	r3, #0
 8017040:	d002      	beq.n	8017048 <osThreadNew+0xa8>
        mem = 1;
 8017042:	2301      	movs	r3, #1
 8017044:	61bb      	str	r3, [r7, #24]
 8017046:	e010      	b.n	801706a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	689b      	ldr	r3, [r3, #8]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d10c      	bne.n	801706a <osThreadNew+0xca>
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	68db      	ldr	r3, [r3, #12]
 8017054:	2b00      	cmp	r3, #0
 8017056:	d108      	bne.n	801706a <osThreadNew+0xca>
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	691b      	ldr	r3, [r3, #16]
 801705c:	2b00      	cmp	r3, #0
 801705e:	d104      	bne.n	801706a <osThreadNew+0xca>
          mem = 0;
 8017060:	2300      	movs	r3, #0
 8017062:	61bb      	str	r3, [r7, #24]
 8017064:	e001      	b.n	801706a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8017066:	2300      	movs	r3, #0
 8017068:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801706a:	69bb      	ldr	r3, [r7, #24]
 801706c:	2b01      	cmp	r3, #1
 801706e:	d110      	bne.n	8017092 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8017074:	687a      	ldr	r2, [r7, #4]
 8017076:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017078:	9202      	str	r2, [sp, #8]
 801707a:	9301      	str	r3, [sp, #4]
 801707c:	69fb      	ldr	r3, [r7, #28]
 801707e:	9300      	str	r3, [sp, #0]
 8017080:	68bb      	ldr	r3, [r7, #8]
 8017082:	6a3a      	ldr	r2, [r7, #32]
 8017084:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017086:	68f8      	ldr	r0, [r7, #12]
 8017088:	f000 fe38 	bl	8017cfc <xTaskCreateStatic>
 801708c:	4603      	mov	r3, r0
 801708e:	613b      	str	r3, [r7, #16]
 8017090:	e013      	b.n	80170ba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8017092:	69bb      	ldr	r3, [r7, #24]
 8017094:	2b00      	cmp	r3, #0
 8017096:	d110      	bne.n	80170ba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8017098:	6a3b      	ldr	r3, [r7, #32]
 801709a:	b29a      	uxth	r2, r3
 801709c:	f107 0310 	add.w	r3, r7, #16
 80170a0:	9301      	str	r3, [sp, #4]
 80170a2:	69fb      	ldr	r3, [r7, #28]
 80170a4:	9300      	str	r3, [sp, #0]
 80170a6:	68bb      	ldr	r3, [r7, #8]
 80170a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80170aa:	68f8      	ldr	r0, [r7, #12]
 80170ac:	f000 fe83 	bl	8017db6 <xTaskCreate>
 80170b0:	4603      	mov	r3, r0
 80170b2:	2b01      	cmp	r3, #1
 80170b4:	d001      	beq.n	80170ba <osThreadNew+0x11a>
            hTask = NULL;
 80170b6:	2300      	movs	r3, #0
 80170b8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80170ba:	693b      	ldr	r3, [r7, #16]
}
 80170bc:	4618      	mov	r0, r3
 80170be:	3728      	adds	r7, #40	; 0x28
 80170c0:	46bd      	mov	sp, r7
 80170c2:	bd80      	pop	{r7, pc}

080170c4 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b086      	sub	sp, #24
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80170d0:	f3ef 8305 	mrs	r3, IPSR
 80170d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80170d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d003      	beq.n	80170e4 <osThreadTerminate+0x20>
    stat = osErrorISR;
 80170dc:	f06f 0305 	mvn.w	r3, #5
 80170e0:	617b      	str	r3, [r7, #20]
 80170e2:	e017      	b.n	8017114 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 80170e4:	693b      	ldr	r3, [r7, #16]
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d103      	bne.n	80170f2 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 80170ea:	f06f 0303 	mvn.w	r3, #3
 80170ee:	617b      	str	r3, [r7, #20]
 80170f0:	e010      	b.n	8017114 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 80170f2:	6938      	ldr	r0, [r7, #16]
 80170f4:	f001 f84a 	bl	801818c <eTaskGetState>
 80170f8:	4603      	mov	r3, r0
 80170fa:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 80170fc:	7bfb      	ldrb	r3, [r7, #15]
 80170fe:	2b04      	cmp	r3, #4
 8017100:	d005      	beq.n	801710e <osThreadTerminate+0x4a>
      stat = osOK;
 8017102:	2300      	movs	r3, #0
 8017104:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8017106:	6938      	ldr	r0, [r7, #16]
 8017108:	f000 ff9a 	bl	8018040 <vTaskDelete>
 801710c:	e002      	b.n	8017114 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 801710e:	f06f 0302 	mvn.w	r3, #2
 8017112:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8017114:	697b      	ldr	r3, [r7, #20]
}
 8017116:	4618      	mov	r0, r3
 8017118:	3718      	adds	r7, #24
 801711a:	46bd      	mov	sp, r7
 801711c:	bd80      	pop	{r7, pc}

0801711e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801711e:	b580      	push	{r7, lr}
 8017120:	b084      	sub	sp, #16
 8017122:	af00      	add	r7, sp, #0
 8017124:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017126:	f3ef 8305 	mrs	r3, IPSR
 801712a:	60bb      	str	r3, [r7, #8]
  return(result);
 801712c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801712e:	2b00      	cmp	r3, #0
 8017130:	d003      	beq.n	801713a <osDelay+0x1c>
    stat = osErrorISR;
 8017132:	f06f 0305 	mvn.w	r3, #5
 8017136:	60fb      	str	r3, [r7, #12]
 8017138:	e007      	b.n	801714a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801713a:	2300      	movs	r3, #0
 801713c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	2b00      	cmp	r3, #0
 8017142:	d002      	beq.n	801714a <osDelay+0x2c>
      vTaskDelay(ticks);
 8017144:	6878      	ldr	r0, [r7, #4]
 8017146:	f000 ffed 	bl	8018124 <vTaskDelay>
    }
  }

  return (stat);
 801714a:	68fb      	ldr	r3, [r7, #12]
}
 801714c:	4618      	mov	r0, r3
 801714e:	3710      	adds	r7, #16
 8017150:	46bd      	mov	sp, r7
 8017152:	bd80      	pop	{r7, pc}

08017154 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8017154:	b480      	push	{r7}
 8017156:	b085      	sub	sp, #20
 8017158:	af00      	add	r7, sp, #0
 801715a:	60f8      	str	r0, [r7, #12]
 801715c:	60b9      	str	r1, [r7, #8]
 801715e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	4a07      	ldr	r2, [pc, #28]	; (8017180 <vApplicationGetIdleTaskMemory+0x2c>)
 8017164:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8017166:	68bb      	ldr	r3, [r7, #8]
 8017168:	4a06      	ldr	r2, [pc, #24]	; (8017184 <vApplicationGetIdleTaskMemory+0x30>)
 801716a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	2280      	movs	r2, #128	; 0x80
 8017170:	601a      	str	r2, [r3, #0]
}
 8017172:	bf00      	nop
 8017174:	3714      	adds	r7, #20
 8017176:	46bd      	mov	sp, r7
 8017178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801717c:	4770      	bx	lr
 801717e:	bf00      	nop
 8017180:	2000110c 	.word	0x2000110c
 8017184:	20001168 	.word	0x20001168

08017188 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8017188:	b480      	push	{r7}
 801718a:	b085      	sub	sp, #20
 801718c:	af00      	add	r7, sp, #0
 801718e:	60f8      	str	r0, [r7, #12]
 8017190:	60b9      	str	r1, [r7, #8]
 8017192:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	4a07      	ldr	r2, [pc, #28]	; (80171b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8017198:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801719a:	68bb      	ldr	r3, [r7, #8]
 801719c:	4a06      	ldr	r2, [pc, #24]	; (80171b8 <vApplicationGetTimerTaskMemory+0x30>)
 801719e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80171a6:	601a      	str	r2, [r3, #0]
}
 80171a8:	bf00      	nop
 80171aa:	3714      	adds	r7, #20
 80171ac:	46bd      	mov	sp, r7
 80171ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b2:	4770      	bx	lr
 80171b4:	20001368 	.word	0x20001368
 80171b8:	200013c4 	.word	0x200013c4

080171bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80171bc:	b480      	push	{r7}
 80171be:	b083      	sub	sp, #12
 80171c0:	af00      	add	r7, sp, #0
 80171c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	f103 0208 	add.w	r2, r3, #8
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80171d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	f103 0208 	add.w	r2, r3, #8
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	f103 0208 	add.w	r2, r3, #8
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	2200      	movs	r2, #0
 80171ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80171f0:	bf00      	nop
 80171f2:	370c      	adds	r7, #12
 80171f4:	46bd      	mov	sp, r7
 80171f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171fa:	4770      	bx	lr

080171fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80171fc:	b480      	push	{r7}
 80171fe:	b083      	sub	sp, #12
 8017200:	af00      	add	r7, sp, #0
 8017202:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	2200      	movs	r2, #0
 8017208:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801720a:	bf00      	nop
 801720c:	370c      	adds	r7, #12
 801720e:	46bd      	mov	sp, r7
 8017210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017214:	4770      	bx	lr

08017216 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017216:	b480      	push	{r7}
 8017218:	b085      	sub	sp, #20
 801721a:	af00      	add	r7, sp, #0
 801721c:	6078      	str	r0, [r7, #4]
 801721e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	685b      	ldr	r3, [r3, #4]
 8017224:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017226:	683b      	ldr	r3, [r7, #0]
 8017228:	68fa      	ldr	r2, [r7, #12]
 801722a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801722c:	68fb      	ldr	r3, [r7, #12]
 801722e:	689a      	ldr	r2, [r3, #8]
 8017230:	683b      	ldr	r3, [r7, #0]
 8017232:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	689b      	ldr	r3, [r3, #8]
 8017238:	683a      	ldr	r2, [r7, #0]
 801723a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	683a      	ldr	r2, [r7, #0]
 8017240:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8017242:	683b      	ldr	r3, [r7, #0]
 8017244:	687a      	ldr	r2, [r7, #4]
 8017246:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	681b      	ldr	r3, [r3, #0]
 801724c:	1c5a      	adds	r2, r3, #1
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	601a      	str	r2, [r3, #0]
}
 8017252:	bf00      	nop
 8017254:	3714      	adds	r7, #20
 8017256:	46bd      	mov	sp, r7
 8017258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801725c:	4770      	bx	lr

0801725e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801725e:	b480      	push	{r7}
 8017260:	b085      	sub	sp, #20
 8017262:	af00      	add	r7, sp, #0
 8017264:	6078      	str	r0, [r7, #4]
 8017266:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017268:	683b      	ldr	r3, [r7, #0]
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801726e:	68bb      	ldr	r3, [r7, #8]
 8017270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017274:	d103      	bne.n	801727e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	691b      	ldr	r3, [r3, #16]
 801727a:	60fb      	str	r3, [r7, #12]
 801727c:	e00c      	b.n	8017298 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	3308      	adds	r3, #8
 8017282:	60fb      	str	r3, [r7, #12]
 8017284:	e002      	b.n	801728c <vListInsert+0x2e>
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	685b      	ldr	r3, [r3, #4]
 801728a:	60fb      	str	r3, [r7, #12]
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	685b      	ldr	r3, [r3, #4]
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	68ba      	ldr	r2, [r7, #8]
 8017294:	429a      	cmp	r2, r3
 8017296:	d2f6      	bcs.n	8017286 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	685a      	ldr	r2, [r3, #4]
 801729c:	683b      	ldr	r3, [r7, #0]
 801729e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80172a0:	683b      	ldr	r3, [r7, #0]
 80172a2:	685b      	ldr	r3, [r3, #4]
 80172a4:	683a      	ldr	r2, [r7, #0]
 80172a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80172a8:	683b      	ldr	r3, [r7, #0]
 80172aa:	68fa      	ldr	r2, [r7, #12]
 80172ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	683a      	ldr	r2, [r7, #0]
 80172b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80172b4:	683b      	ldr	r3, [r7, #0]
 80172b6:	687a      	ldr	r2, [r7, #4]
 80172b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	1c5a      	adds	r2, r3, #1
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	601a      	str	r2, [r3, #0]
}
 80172c4:	bf00      	nop
 80172c6:	3714      	adds	r7, #20
 80172c8:	46bd      	mov	sp, r7
 80172ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ce:	4770      	bx	lr

080172d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80172d0:	b480      	push	{r7}
 80172d2:	b085      	sub	sp, #20
 80172d4:	af00      	add	r7, sp, #0
 80172d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	691b      	ldr	r3, [r3, #16]
 80172dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	685b      	ldr	r3, [r3, #4]
 80172e2:	687a      	ldr	r2, [r7, #4]
 80172e4:	6892      	ldr	r2, [r2, #8]
 80172e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	689b      	ldr	r3, [r3, #8]
 80172ec:	687a      	ldr	r2, [r7, #4]
 80172ee:	6852      	ldr	r2, [r2, #4]
 80172f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	685b      	ldr	r3, [r3, #4]
 80172f6:	687a      	ldr	r2, [r7, #4]
 80172f8:	429a      	cmp	r2, r3
 80172fa:	d103      	bne.n	8017304 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	689a      	ldr	r2, [r3, #8]
 8017300:	68fb      	ldr	r3, [r7, #12]
 8017302:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	2200      	movs	r2, #0
 8017308:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	1e5a      	subs	r2, r3, #1
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	681b      	ldr	r3, [r3, #0]
}
 8017318:	4618      	mov	r0, r3
 801731a:	3714      	adds	r7, #20
 801731c:	46bd      	mov	sp, r7
 801731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017322:	4770      	bx	lr

08017324 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017324:	b580      	push	{r7, lr}
 8017326:	b084      	sub	sp, #16
 8017328:	af00      	add	r7, sp, #0
 801732a:	6078      	str	r0, [r7, #4]
 801732c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	2b00      	cmp	r3, #0
 8017336:	d10a      	bne.n	801734e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8017338:	f04f 0350 	mov.w	r3, #80	; 0x50
 801733c:	f383 8811 	msr	BASEPRI, r3
 8017340:	f3bf 8f6f 	isb	sy
 8017344:	f3bf 8f4f 	dsb	sy
 8017348:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801734a:	bf00      	nop
 801734c:	e7fe      	b.n	801734c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801734e:	f002 f929 	bl	80195a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	681a      	ldr	r2, [r3, #0]
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801735a:	68f9      	ldr	r1, [r7, #12]
 801735c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801735e:	fb01 f303 	mul.w	r3, r1, r3
 8017362:	441a      	add	r2, r3
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8017368:	68fb      	ldr	r3, [r7, #12]
 801736a:	2200      	movs	r2, #0
 801736c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801736e:	68fb      	ldr	r3, [r7, #12]
 8017370:	681a      	ldr	r2, [r3, #0]
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	681a      	ldr	r2, [r3, #0]
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801737e:	3b01      	subs	r3, #1
 8017380:	68f9      	ldr	r1, [r7, #12]
 8017382:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017384:	fb01 f303 	mul.w	r3, r1, r3
 8017388:	441a      	add	r2, r3
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	22ff      	movs	r2, #255	; 0xff
 8017392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8017396:	68fb      	ldr	r3, [r7, #12]
 8017398:	22ff      	movs	r2, #255	; 0xff
 801739a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801739e:	683b      	ldr	r3, [r7, #0]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d114      	bne.n	80173ce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	691b      	ldr	r3, [r3, #16]
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d01a      	beq.n	80173e2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	3310      	adds	r3, #16
 80173b0:	4618      	mov	r0, r3
 80173b2:	f001 f9db 	bl	801876c <xTaskRemoveFromEventList>
 80173b6:	4603      	mov	r3, r0
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d012      	beq.n	80173e2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80173bc:	4b0c      	ldr	r3, [pc, #48]	; (80173f0 <xQueueGenericReset+0xcc>)
 80173be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80173c2:	601a      	str	r2, [r3, #0]
 80173c4:	f3bf 8f4f 	dsb	sy
 80173c8:	f3bf 8f6f 	isb	sy
 80173cc:	e009      	b.n	80173e2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	3310      	adds	r3, #16
 80173d2:	4618      	mov	r0, r3
 80173d4:	f7ff fef2 	bl	80171bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	3324      	adds	r3, #36	; 0x24
 80173dc:	4618      	mov	r0, r3
 80173de:	f7ff feed 	bl	80171bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80173e2:	f002 f90f 	bl	8019604 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80173e6:	2301      	movs	r3, #1
}
 80173e8:	4618      	mov	r0, r3
 80173ea:	3710      	adds	r7, #16
 80173ec:	46bd      	mov	sp, r7
 80173ee:	bd80      	pop	{r7, pc}
 80173f0:	e000ed04 	.word	0xe000ed04

080173f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80173f4:	b580      	push	{r7, lr}
 80173f6:	b08e      	sub	sp, #56	; 0x38
 80173f8:	af02      	add	r7, sp, #8
 80173fa:	60f8      	str	r0, [r7, #12]
 80173fc:	60b9      	str	r1, [r7, #8]
 80173fe:	607a      	str	r2, [r7, #4]
 8017400:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d10a      	bne.n	801741e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8017408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801740c:	f383 8811 	msr	BASEPRI, r3
 8017410:	f3bf 8f6f 	isb	sy
 8017414:	f3bf 8f4f 	dsb	sy
 8017418:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801741a:	bf00      	nop
 801741c:	e7fe      	b.n	801741c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801741e:	683b      	ldr	r3, [r7, #0]
 8017420:	2b00      	cmp	r3, #0
 8017422:	d10a      	bne.n	801743a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8017424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017428:	f383 8811 	msr	BASEPRI, r3
 801742c:	f3bf 8f6f 	isb	sy
 8017430:	f3bf 8f4f 	dsb	sy
 8017434:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017436:	bf00      	nop
 8017438:	e7fe      	b.n	8017438 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	2b00      	cmp	r3, #0
 801743e:	d002      	beq.n	8017446 <xQueueGenericCreateStatic+0x52>
 8017440:	68bb      	ldr	r3, [r7, #8]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d001      	beq.n	801744a <xQueueGenericCreateStatic+0x56>
 8017446:	2301      	movs	r3, #1
 8017448:	e000      	b.n	801744c <xQueueGenericCreateStatic+0x58>
 801744a:	2300      	movs	r3, #0
 801744c:	2b00      	cmp	r3, #0
 801744e:	d10a      	bne.n	8017466 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8017450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017454:	f383 8811 	msr	BASEPRI, r3
 8017458:	f3bf 8f6f 	isb	sy
 801745c:	f3bf 8f4f 	dsb	sy
 8017460:	623b      	str	r3, [r7, #32]
}
 8017462:	bf00      	nop
 8017464:	e7fe      	b.n	8017464 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	2b00      	cmp	r3, #0
 801746a:	d102      	bne.n	8017472 <xQueueGenericCreateStatic+0x7e>
 801746c:	68bb      	ldr	r3, [r7, #8]
 801746e:	2b00      	cmp	r3, #0
 8017470:	d101      	bne.n	8017476 <xQueueGenericCreateStatic+0x82>
 8017472:	2301      	movs	r3, #1
 8017474:	e000      	b.n	8017478 <xQueueGenericCreateStatic+0x84>
 8017476:	2300      	movs	r3, #0
 8017478:	2b00      	cmp	r3, #0
 801747a:	d10a      	bne.n	8017492 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801747c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017480:	f383 8811 	msr	BASEPRI, r3
 8017484:	f3bf 8f6f 	isb	sy
 8017488:	f3bf 8f4f 	dsb	sy
 801748c:	61fb      	str	r3, [r7, #28]
}
 801748e:	bf00      	nop
 8017490:	e7fe      	b.n	8017490 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8017492:	2350      	movs	r3, #80	; 0x50
 8017494:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8017496:	697b      	ldr	r3, [r7, #20]
 8017498:	2b50      	cmp	r3, #80	; 0x50
 801749a:	d00a      	beq.n	80174b2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801749c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174a0:	f383 8811 	msr	BASEPRI, r3
 80174a4:	f3bf 8f6f 	isb	sy
 80174a8:	f3bf 8f4f 	dsb	sy
 80174ac:	61bb      	str	r3, [r7, #24]
}
 80174ae:	bf00      	nop
 80174b0:	e7fe      	b.n	80174b0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80174b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80174b4:	683b      	ldr	r3, [r7, #0]
 80174b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80174b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d00d      	beq.n	80174da <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80174be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174c0:	2201      	movs	r2, #1
 80174c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80174c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80174ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174cc:	9300      	str	r3, [sp, #0]
 80174ce:	4613      	mov	r3, r2
 80174d0:	687a      	ldr	r2, [r7, #4]
 80174d2:	68b9      	ldr	r1, [r7, #8]
 80174d4:	68f8      	ldr	r0, [r7, #12]
 80174d6:	f000 f805 	bl	80174e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80174da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80174dc:	4618      	mov	r0, r3
 80174de:	3730      	adds	r7, #48	; 0x30
 80174e0:	46bd      	mov	sp, r7
 80174e2:	bd80      	pop	{r7, pc}

080174e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b084      	sub	sp, #16
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	60f8      	str	r0, [r7, #12]
 80174ec:	60b9      	str	r1, [r7, #8]
 80174ee:	607a      	str	r2, [r7, #4]
 80174f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80174f2:	68bb      	ldr	r3, [r7, #8]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d103      	bne.n	8017500 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80174f8:	69bb      	ldr	r3, [r7, #24]
 80174fa:	69ba      	ldr	r2, [r7, #24]
 80174fc:	601a      	str	r2, [r3, #0]
 80174fe:	e002      	b.n	8017506 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8017500:	69bb      	ldr	r3, [r7, #24]
 8017502:	687a      	ldr	r2, [r7, #4]
 8017504:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8017506:	69bb      	ldr	r3, [r7, #24]
 8017508:	68fa      	ldr	r2, [r7, #12]
 801750a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801750c:	69bb      	ldr	r3, [r7, #24]
 801750e:	68ba      	ldr	r2, [r7, #8]
 8017510:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8017512:	2101      	movs	r1, #1
 8017514:	69b8      	ldr	r0, [r7, #24]
 8017516:	f7ff ff05 	bl	8017324 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801751a:	69bb      	ldr	r3, [r7, #24]
 801751c:	78fa      	ldrb	r2, [r7, #3]
 801751e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8017522:	bf00      	nop
 8017524:	3710      	adds	r7, #16
 8017526:	46bd      	mov	sp, r7
 8017528:	bd80      	pop	{r7, pc}
	...

0801752c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801752c:	b580      	push	{r7, lr}
 801752e:	b08e      	sub	sp, #56	; 0x38
 8017530:	af00      	add	r7, sp, #0
 8017532:	60f8      	str	r0, [r7, #12]
 8017534:	60b9      	str	r1, [r7, #8]
 8017536:	607a      	str	r2, [r7, #4]
 8017538:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801753a:	2300      	movs	r3, #0
 801753c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801753e:	68fb      	ldr	r3, [r7, #12]
 8017540:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017544:	2b00      	cmp	r3, #0
 8017546:	d10a      	bne.n	801755e <xQueueGenericSend+0x32>
	__asm volatile
 8017548:	f04f 0350 	mov.w	r3, #80	; 0x50
 801754c:	f383 8811 	msr	BASEPRI, r3
 8017550:	f3bf 8f6f 	isb	sy
 8017554:	f3bf 8f4f 	dsb	sy
 8017558:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801755a:	bf00      	nop
 801755c:	e7fe      	b.n	801755c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801755e:	68bb      	ldr	r3, [r7, #8]
 8017560:	2b00      	cmp	r3, #0
 8017562:	d103      	bne.n	801756c <xQueueGenericSend+0x40>
 8017564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017568:	2b00      	cmp	r3, #0
 801756a:	d101      	bne.n	8017570 <xQueueGenericSend+0x44>
 801756c:	2301      	movs	r3, #1
 801756e:	e000      	b.n	8017572 <xQueueGenericSend+0x46>
 8017570:	2300      	movs	r3, #0
 8017572:	2b00      	cmp	r3, #0
 8017574:	d10a      	bne.n	801758c <xQueueGenericSend+0x60>
	__asm volatile
 8017576:	f04f 0350 	mov.w	r3, #80	; 0x50
 801757a:	f383 8811 	msr	BASEPRI, r3
 801757e:	f3bf 8f6f 	isb	sy
 8017582:	f3bf 8f4f 	dsb	sy
 8017586:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017588:	bf00      	nop
 801758a:	e7fe      	b.n	801758a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801758c:	683b      	ldr	r3, [r7, #0]
 801758e:	2b02      	cmp	r3, #2
 8017590:	d103      	bne.n	801759a <xQueueGenericSend+0x6e>
 8017592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017596:	2b01      	cmp	r3, #1
 8017598:	d101      	bne.n	801759e <xQueueGenericSend+0x72>
 801759a:	2301      	movs	r3, #1
 801759c:	e000      	b.n	80175a0 <xQueueGenericSend+0x74>
 801759e:	2300      	movs	r3, #0
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d10a      	bne.n	80175ba <xQueueGenericSend+0x8e>
	__asm volatile
 80175a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175a8:	f383 8811 	msr	BASEPRI, r3
 80175ac:	f3bf 8f6f 	isb	sy
 80175b0:	f3bf 8f4f 	dsb	sy
 80175b4:	623b      	str	r3, [r7, #32]
}
 80175b6:	bf00      	nop
 80175b8:	e7fe      	b.n	80175b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80175ba:	f001 fa95 	bl	8018ae8 <xTaskGetSchedulerState>
 80175be:	4603      	mov	r3, r0
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d102      	bne.n	80175ca <xQueueGenericSend+0x9e>
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d101      	bne.n	80175ce <xQueueGenericSend+0xa2>
 80175ca:	2301      	movs	r3, #1
 80175cc:	e000      	b.n	80175d0 <xQueueGenericSend+0xa4>
 80175ce:	2300      	movs	r3, #0
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d10a      	bne.n	80175ea <xQueueGenericSend+0xbe>
	__asm volatile
 80175d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175d8:	f383 8811 	msr	BASEPRI, r3
 80175dc:	f3bf 8f6f 	isb	sy
 80175e0:	f3bf 8f4f 	dsb	sy
 80175e4:	61fb      	str	r3, [r7, #28]
}
 80175e6:	bf00      	nop
 80175e8:	e7fe      	b.n	80175e8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80175ea:	f001 ffdb 	bl	80195a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80175ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80175f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80175f6:	429a      	cmp	r2, r3
 80175f8:	d302      	bcc.n	8017600 <xQueueGenericSend+0xd4>
 80175fa:	683b      	ldr	r3, [r7, #0]
 80175fc:	2b02      	cmp	r3, #2
 80175fe:	d129      	bne.n	8017654 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017600:	683a      	ldr	r2, [r7, #0]
 8017602:	68b9      	ldr	r1, [r7, #8]
 8017604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017606:	f000 fa0b 	bl	8017a20 <prvCopyDataToQueue>
 801760a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801760c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801760e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017610:	2b00      	cmp	r3, #0
 8017612:	d010      	beq.n	8017636 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017616:	3324      	adds	r3, #36	; 0x24
 8017618:	4618      	mov	r0, r3
 801761a:	f001 f8a7 	bl	801876c <xTaskRemoveFromEventList>
 801761e:	4603      	mov	r3, r0
 8017620:	2b00      	cmp	r3, #0
 8017622:	d013      	beq.n	801764c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017624:	4b3f      	ldr	r3, [pc, #252]	; (8017724 <xQueueGenericSend+0x1f8>)
 8017626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801762a:	601a      	str	r2, [r3, #0]
 801762c:	f3bf 8f4f 	dsb	sy
 8017630:	f3bf 8f6f 	isb	sy
 8017634:	e00a      	b.n	801764c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8017636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017638:	2b00      	cmp	r3, #0
 801763a:	d007      	beq.n	801764c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801763c:	4b39      	ldr	r3, [pc, #228]	; (8017724 <xQueueGenericSend+0x1f8>)
 801763e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017642:	601a      	str	r2, [r3, #0]
 8017644:	f3bf 8f4f 	dsb	sy
 8017648:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801764c:	f001 ffda 	bl	8019604 <vPortExitCritical>
				return pdPASS;
 8017650:	2301      	movs	r3, #1
 8017652:	e063      	b.n	801771c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d103      	bne.n	8017662 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801765a:	f001 ffd3 	bl	8019604 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801765e:	2300      	movs	r3, #0
 8017660:	e05c      	b.n	801771c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017664:	2b00      	cmp	r3, #0
 8017666:	d106      	bne.n	8017676 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017668:	f107 0314 	add.w	r3, r7, #20
 801766c:	4618      	mov	r0, r3
 801766e:	f001 f8e1 	bl	8018834 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017672:	2301      	movs	r3, #1
 8017674:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017676:	f001 ffc5 	bl	8019604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801767a:	f000 fe53 	bl	8018324 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801767e:	f001 ff91 	bl	80195a4 <vPortEnterCritical>
 8017682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017684:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017688:	b25b      	sxtb	r3, r3
 801768a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801768e:	d103      	bne.n	8017698 <xQueueGenericSend+0x16c>
 8017690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017692:	2200      	movs	r2, #0
 8017694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801769a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801769e:	b25b      	sxtb	r3, r3
 80176a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80176a4:	d103      	bne.n	80176ae <xQueueGenericSend+0x182>
 80176a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176a8:	2200      	movs	r2, #0
 80176aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80176ae:	f001 ffa9 	bl	8019604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80176b2:	1d3a      	adds	r2, r7, #4
 80176b4:	f107 0314 	add.w	r3, r7, #20
 80176b8:	4611      	mov	r1, r2
 80176ba:	4618      	mov	r0, r3
 80176bc:	f001 f8d0 	bl	8018860 <xTaskCheckForTimeOut>
 80176c0:	4603      	mov	r3, r0
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d124      	bne.n	8017710 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80176c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80176c8:	f000 faa2 	bl	8017c10 <prvIsQueueFull>
 80176cc:	4603      	mov	r3, r0
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d018      	beq.n	8017704 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80176d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176d4:	3310      	adds	r3, #16
 80176d6:	687a      	ldr	r2, [r7, #4]
 80176d8:	4611      	mov	r1, r2
 80176da:	4618      	mov	r0, r3
 80176dc:	f000 fff6 	bl	80186cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80176e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80176e2:	f000 fa2d 	bl	8017b40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80176e6:	f000 fe2b 	bl	8018340 <xTaskResumeAll>
 80176ea:	4603      	mov	r3, r0
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	f47f af7c 	bne.w	80175ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80176f2:	4b0c      	ldr	r3, [pc, #48]	; (8017724 <xQueueGenericSend+0x1f8>)
 80176f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80176f8:	601a      	str	r2, [r3, #0]
 80176fa:	f3bf 8f4f 	dsb	sy
 80176fe:	f3bf 8f6f 	isb	sy
 8017702:	e772      	b.n	80175ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017706:	f000 fa1b 	bl	8017b40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801770a:	f000 fe19 	bl	8018340 <xTaskResumeAll>
 801770e:	e76c      	b.n	80175ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017712:	f000 fa15 	bl	8017b40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017716:	f000 fe13 	bl	8018340 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801771a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801771c:	4618      	mov	r0, r3
 801771e:	3738      	adds	r7, #56	; 0x38
 8017720:	46bd      	mov	sp, r7
 8017722:	bd80      	pop	{r7, pc}
 8017724:	e000ed04 	.word	0xe000ed04

08017728 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017728:	b580      	push	{r7, lr}
 801772a:	b090      	sub	sp, #64	; 0x40
 801772c:	af00      	add	r7, sp, #0
 801772e:	60f8      	str	r0, [r7, #12]
 8017730:	60b9      	str	r1, [r7, #8]
 8017732:	607a      	str	r2, [r7, #4]
 8017734:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017736:	68fb      	ldr	r3, [r7, #12]
 8017738:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801773a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801773c:	2b00      	cmp	r3, #0
 801773e:	d10a      	bne.n	8017756 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8017740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017744:	f383 8811 	msr	BASEPRI, r3
 8017748:	f3bf 8f6f 	isb	sy
 801774c:	f3bf 8f4f 	dsb	sy
 8017750:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017752:	bf00      	nop
 8017754:	e7fe      	b.n	8017754 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017756:	68bb      	ldr	r3, [r7, #8]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d103      	bne.n	8017764 <xQueueGenericSendFromISR+0x3c>
 801775c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801775e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017760:	2b00      	cmp	r3, #0
 8017762:	d101      	bne.n	8017768 <xQueueGenericSendFromISR+0x40>
 8017764:	2301      	movs	r3, #1
 8017766:	e000      	b.n	801776a <xQueueGenericSendFromISR+0x42>
 8017768:	2300      	movs	r3, #0
 801776a:	2b00      	cmp	r3, #0
 801776c:	d10a      	bne.n	8017784 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017772:	f383 8811 	msr	BASEPRI, r3
 8017776:	f3bf 8f6f 	isb	sy
 801777a:	f3bf 8f4f 	dsb	sy
 801777e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017780:	bf00      	nop
 8017782:	e7fe      	b.n	8017782 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017784:	683b      	ldr	r3, [r7, #0]
 8017786:	2b02      	cmp	r3, #2
 8017788:	d103      	bne.n	8017792 <xQueueGenericSendFromISR+0x6a>
 801778a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801778c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801778e:	2b01      	cmp	r3, #1
 8017790:	d101      	bne.n	8017796 <xQueueGenericSendFromISR+0x6e>
 8017792:	2301      	movs	r3, #1
 8017794:	e000      	b.n	8017798 <xQueueGenericSendFromISR+0x70>
 8017796:	2300      	movs	r3, #0
 8017798:	2b00      	cmp	r3, #0
 801779a:	d10a      	bne.n	80177b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801779c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177a0:	f383 8811 	msr	BASEPRI, r3
 80177a4:	f3bf 8f6f 	isb	sy
 80177a8:	f3bf 8f4f 	dsb	sy
 80177ac:	623b      	str	r3, [r7, #32]
}
 80177ae:	bf00      	nop
 80177b0:	e7fe      	b.n	80177b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80177b2:	f001 ffd9 	bl	8019768 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80177b6:	f3ef 8211 	mrs	r2, BASEPRI
 80177ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177be:	f383 8811 	msr	BASEPRI, r3
 80177c2:	f3bf 8f6f 	isb	sy
 80177c6:	f3bf 8f4f 	dsb	sy
 80177ca:	61fa      	str	r2, [r7, #28]
 80177cc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80177ce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80177d0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80177d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80177d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80177da:	429a      	cmp	r2, r3
 80177dc:	d302      	bcc.n	80177e4 <xQueueGenericSendFromISR+0xbc>
 80177de:	683b      	ldr	r3, [r7, #0]
 80177e0:	2b02      	cmp	r3, #2
 80177e2:	d12f      	bne.n	8017844 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80177e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80177ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80177ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80177f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80177f4:	683a      	ldr	r2, [r7, #0]
 80177f6:	68b9      	ldr	r1, [r7, #8]
 80177f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80177fa:	f000 f911 	bl	8017a20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80177fe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8017802:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017806:	d112      	bne.n	801782e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801780a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801780c:	2b00      	cmp	r3, #0
 801780e:	d016      	beq.n	801783e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017812:	3324      	adds	r3, #36	; 0x24
 8017814:	4618      	mov	r0, r3
 8017816:	f000 ffa9 	bl	801876c <xTaskRemoveFromEventList>
 801781a:	4603      	mov	r3, r0
 801781c:	2b00      	cmp	r3, #0
 801781e:	d00e      	beq.n	801783e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	2b00      	cmp	r3, #0
 8017824:	d00b      	beq.n	801783e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	2201      	movs	r2, #1
 801782a:	601a      	str	r2, [r3, #0]
 801782c:	e007      	b.n	801783e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801782e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017832:	3301      	adds	r3, #1
 8017834:	b2db      	uxtb	r3, r3
 8017836:	b25a      	sxtb	r2, r3
 8017838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801783a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801783e:	2301      	movs	r3, #1
 8017840:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8017842:	e001      	b.n	8017848 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017844:	2300      	movs	r3, #0
 8017846:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801784a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801784c:	697b      	ldr	r3, [r7, #20]
 801784e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8017852:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017856:	4618      	mov	r0, r3
 8017858:	3740      	adds	r7, #64	; 0x40
 801785a:	46bd      	mov	sp, r7
 801785c:	bd80      	pop	{r7, pc}
	...

08017860 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017860:	b580      	push	{r7, lr}
 8017862:	b08c      	sub	sp, #48	; 0x30
 8017864:	af00      	add	r7, sp, #0
 8017866:	60f8      	str	r0, [r7, #12]
 8017868:	60b9      	str	r1, [r7, #8]
 801786a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801786c:	2300      	movs	r3, #0
 801786e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017876:	2b00      	cmp	r3, #0
 8017878:	d10a      	bne.n	8017890 <xQueueReceive+0x30>
	__asm volatile
 801787a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801787e:	f383 8811 	msr	BASEPRI, r3
 8017882:	f3bf 8f6f 	isb	sy
 8017886:	f3bf 8f4f 	dsb	sy
 801788a:	623b      	str	r3, [r7, #32]
}
 801788c:	bf00      	nop
 801788e:	e7fe      	b.n	801788e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017890:	68bb      	ldr	r3, [r7, #8]
 8017892:	2b00      	cmp	r3, #0
 8017894:	d103      	bne.n	801789e <xQueueReceive+0x3e>
 8017896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801789a:	2b00      	cmp	r3, #0
 801789c:	d101      	bne.n	80178a2 <xQueueReceive+0x42>
 801789e:	2301      	movs	r3, #1
 80178a0:	e000      	b.n	80178a4 <xQueueReceive+0x44>
 80178a2:	2300      	movs	r3, #0
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d10a      	bne.n	80178be <xQueueReceive+0x5e>
	__asm volatile
 80178a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178ac:	f383 8811 	msr	BASEPRI, r3
 80178b0:	f3bf 8f6f 	isb	sy
 80178b4:	f3bf 8f4f 	dsb	sy
 80178b8:	61fb      	str	r3, [r7, #28]
}
 80178ba:	bf00      	nop
 80178bc:	e7fe      	b.n	80178bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80178be:	f001 f913 	bl	8018ae8 <xTaskGetSchedulerState>
 80178c2:	4603      	mov	r3, r0
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d102      	bne.n	80178ce <xQueueReceive+0x6e>
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d101      	bne.n	80178d2 <xQueueReceive+0x72>
 80178ce:	2301      	movs	r3, #1
 80178d0:	e000      	b.n	80178d4 <xQueueReceive+0x74>
 80178d2:	2300      	movs	r3, #0
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d10a      	bne.n	80178ee <xQueueReceive+0x8e>
	__asm volatile
 80178d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178dc:	f383 8811 	msr	BASEPRI, r3
 80178e0:	f3bf 8f6f 	isb	sy
 80178e4:	f3bf 8f4f 	dsb	sy
 80178e8:	61bb      	str	r3, [r7, #24]
}
 80178ea:	bf00      	nop
 80178ec:	e7fe      	b.n	80178ec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80178ee:	f001 fe59 	bl	80195a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80178f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80178f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d01f      	beq.n	801793e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80178fe:	68b9      	ldr	r1, [r7, #8]
 8017900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017902:	f000 f8f7 	bl	8017af4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017908:	1e5a      	subs	r2, r3, #1
 801790a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801790c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801790e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017910:	691b      	ldr	r3, [r3, #16]
 8017912:	2b00      	cmp	r3, #0
 8017914:	d00f      	beq.n	8017936 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017918:	3310      	adds	r3, #16
 801791a:	4618      	mov	r0, r3
 801791c:	f000 ff26 	bl	801876c <xTaskRemoveFromEventList>
 8017920:	4603      	mov	r3, r0
 8017922:	2b00      	cmp	r3, #0
 8017924:	d007      	beq.n	8017936 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017926:	4b3d      	ldr	r3, [pc, #244]	; (8017a1c <xQueueReceive+0x1bc>)
 8017928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801792c:	601a      	str	r2, [r3, #0]
 801792e:	f3bf 8f4f 	dsb	sy
 8017932:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017936:	f001 fe65 	bl	8019604 <vPortExitCritical>
				return pdPASS;
 801793a:	2301      	movs	r3, #1
 801793c:	e069      	b.n	8017a12 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	2b00      	cmp	r3, #0
 8017942:	d103      	bne.n	801794c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017944:	f001 fe5e 	bl	8019604 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017948:	2300      	movs	r3, #0
 801794a:	e062      	b.n	8017a12 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801794c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801794e:	2b00      	cmp	r3, #0
 8017950:	d106      	bne.n	8017960 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017952:	f107 0310 	add.w	r3, r7, #16
 8017956:	4618      	mov	r0, r3
 8017958:	f000 ff6c 	bl	8018834 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801795c:	2301      	movs	r3, #1
 801795e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017960:	f001 fe50 	bl	8019604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017964:	f000 fcde 	bl	8018324 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017968:	f001 fe1c 	bl	80195a4 <vPortEnterCritical>
 801796c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801796e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017972:	b25b      	sxtb	r3, r3
 8017974:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017978:	d103      	bne.n	8017982 <xQueueReceive+0x122>
 801797a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801797c:	2200      	movs	r2, #0
 801797e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017984:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017988:	b25b      	sxtb	r3, r3
 801798a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801798e:	d103      	bne.n	8017998 <xQueueReceive+0x138>
 8017990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017992:	2200      	movs	r2, #0
 8017994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017998:	f001 fe34 	bl	8019604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801799c:	1d3a      	adds	r2, r7, #4
 801799e:	f107 0310 	add.w	r3, r7, #16
 80179a2:	4611      	mov	r1, r2
 80179a4:	4618      	mov	r0, r3
 80179a6:	f000 ff5b 	bl	8018860 <xTaskCheckForTimeOut>
 80179aa:	4603      	mov	r3, r0
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d123      	bne.n	80179f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80179b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80179b2:	f000 f917 	bl	8017be4 <prvIsQueueEmpty>
 80179b6:	4603      	mov	r3, r0
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d017      	beq.n	80179ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80179bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179be:	3324      	adds	r3, #36	; 0x24
 80179c0:	687a      	ldr	r2, [r7, #4]
 80179c2:	4611      	mov	r1, r2
 80179c4:	4618      	mov	r0, r3
 80179c6:	f000 fe81 	bl	80186cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80179ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80179cc:	f000 f8b8 	bl	8017b40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80179d0:	f000 fcb6 	bl	8018340 <xTaskResumeAll>
 80179d4:	4603      	mov	r3, r0
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d189      	bne.n	80178ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80179da:	4b10      	ldr	r3, [pc, #64]	; (8017a1c <xQueueReceive+0x1bc>)
 80179dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80179e0:	601a      	str	r2, [r3, #0]
 80179e2:	f3bf 8f4f 	dsb	sy
 80179e6:	f3bf 8f6f 	isb	sy
 80179ea:	e780      	b.n	80178ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80179ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80179ee:	f000 f8a7 	bl	8017b40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80179f2:	f000 fca5 	bl	8018340 <xTaskResumeAll>
 80179f6:	e77a      	b.n	80178ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80179f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80179fa:	f000 f8a1 	bl	8017b40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80179fe:	f000 fc9f 	bl	8018340 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017a02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017a04:	f000 f8ee 	bl	8017be4 <prvIsQueueEmpty>
 8017a08:	4603      	mov	r3, r0
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	f43f af6f 	beq.w	80178ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017a10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017a12:	4618      	mov	r0, r3
 8017a14:	3730      	adds	r7, #48	; 0x30
 8017a16:	46bd      	mov	sp, r7
 8017a18:	bd80      	pop	{r7, pc}
 8017a1a:	bf00      	nop
 8017a1c:	e000ed04 	.word	0xe000ed04

08017a20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017a20:	b580      	push	{r7, lr}
 8017a22:	b086      	sub	sp, #24
 8017a24:	af00      	add	r7, sp, #0
 8017a26:	60f8      	str	r0, [r7, #12]
 8017a28:	60b9      	str	r1, [r7, #8]
 8017a2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017a2c:	2300      	movs	r3, #0
 8017a2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017a30:	68fb      	ldr	r3, [r7, #12]
 8017a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d10d      	bne.n	8017a5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017a3e:	68fb      	ldr	r3, [r7, #12]
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d14d      	bne.n	8017ae2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	689b      	ldr	r3, [r3, #8]
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	f001 f86a 	bl	8018b24 <xTaskPriorityDisinherit>
 8017a50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017a52:	68fb      	ldr	r3, [r7, #12]
 8017a54:	2200      	movs	r2, #0
 8017a56:	609a      	str	r2, [r3, #8]
 8017a58:	e043      	b.n	8017ae2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d119      	bne.n	8017a94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	6858      	ldr	r0, [r3, #4]
 8017a64:	68fb      	ldr	r3, [r7, #12]
 8017a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a68:	461a      	mov	r2, r3
 8017a6a:	68b9      	ldr	r1, [r7, #8]
 8017a6c:	f002 f8d8 	bl	8019c20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	685a      	ldr	r2, [r3, #4]
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a78:	441a      	add	r2, r3
 8017a7a:	68fb      	ldr	r3, [r7, #12]
 8017a7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017a7e:	68fb      	ldr	r3, [r7, #12]
 8017a80:	685a      	ldr	r2, [r3, #4]
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	689b      	ldr	r3, [r3, #8]
 8017a86:	429a      	cmp	r2, r3
 8017a88:	d32b      	bcc.n	8017ae2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	681a      	ldr	r2, [r3, #0]
 8017a8e:	68fb      	ldr	r3, [r7, #12]
 8017a90:	605a      	str	r2, [r3, #4]
 8017a92:	e026      	b.n	8017ae2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	68d8      	ldr	r0, [r3, #12]
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a9c:	461a      	mov	r2, r3
 8017a9e:	68b9      	ldr	r1, [r7, #8]
 8017aa0:	f002 f8be 	bl	8019c20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	68da      	ldr	r2, [r3, #12]
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017aac:	425b      	negs	r3, r3
 8017aae:	441a      	add	r2, r3
 8017ab0:	68fb      	ldr	r3, [r7, #12]
 8017ab2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017ab4:	68fb      	ldr	r3, [r7, #12]
 8017ab6:	68da      	ldr	r2, [r3, #12]
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	429a      	cmp	r2, r3
 8017abe:	d207      	bcs.n	8017ad0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	689a      	ldr	r2, [r3, #8]
 8017ac4:	68fb      	ldr	r3, [r7, #12]
 8017ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ac8:	425b      	negs	r3, r3
 8017aca:	441a      	add	r2, r3
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	2b02      	cmp	r3, #2
 8017ad4:	d105      	bne.n	8017ae2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017ad6:	693b      	ldr	r3, [r7, #16]
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d002      	beq.n	8017ae2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017adc:	693b      	ldr	r3, [r7, #16]
 8017ade:	3b01      	subs	r3, #1
 8017ae0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017ae2:	693b      	ldr	r3, [r7, #16]
 8017ae4:	1c5a      	adds	r2, r3, #1
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017aea:	697b      	ldr	r3, [r7, #20]
}
 8017aec:	4618      	mov	r0, r3
 8017aee:	3718      	adds	r7, #24
 8017af0:	46bd      	mov	sp, r7
 8017af2:	bd80      	pop	{r7, pc}

08017af4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017af4:	b580      	push	{r7, lr}
 8017af6:	b082      	sub	sp, #8
 8017af8:	af00      	add	r7, sp, #0
 8017afa:	6078      	str	r0, [r7, #4]
 8017afc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d018      	beq.n	8017b38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	68da      	ldr	r2, [r3, #12]
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b0e:	441a      	add	r2, r3
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	68da      	ldr	r2, [r3, #12]
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	689b      	ldr	r3, [r3, #8]
 8017b1c:	429a      	cmp	r2, r3
 8017b1e:	d303      	bcc.n	8017b28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	681a      	ldr	r2, [r3, #0]
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	68d9      	ldr	r1, [r3, #12]
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b30:	461a      	mov	r2, r3
 8017b32:	6838      	ldr	r0, [r7, #0]
 8017b34:	f002 f874 	bl	8019c20 <memcpy>
	}
}
 8017b38:	bf00      	nop
 8017b3a:	3708      	adds	r7, #8
 8017b3c:	46bd      	mov	sp, r7
 8017b3e:	bd80      	pop	{r7, pc}

08017b40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017b40:	b580      	push	{r7, lr}
 8017b42:	b084      	sub	sp, #16
 8017b44:	af00      	add	r7, sp, #0
 8017b46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017b48:	f001 fd2c 	bl	80195a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017b52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017b54:	e011      	b.n	8017b7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d012      	beq.n	8017b84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	3324      	adds	r3, #36	; 0x24
 8017b62:	4618      	mov	r0, r3
 8017b64:	f000 fe02 	bl	801876c <xTaskRemoveFromEventList>
 8017b68:	4603      	mov	r3, r0
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d001      	beq.n	8017b72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017b6e:	f000 fed9 	bl	8018924 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017b72:	7bfb      	ldrb	r3, [r7, #15]
 8017b74:	3b01      	subs	r3, #1
 8017b76:	b2db      	uxtb	r3, r3
 8017b78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	dce9      	bgt.n	8017b56 <prvUnlockQueue+0x16>
 8017b82:	e000      	b.n	8017b86 <prvUnlockQueue+0x46>
					break;
 8017b84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	22ff      	movs	r2, #255	; 0xff
 8017b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017b8e:	f001 fd39 	bl	8019604 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017b92:	f001 fd07 	bl	80195a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017b9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017b9e:	e011      	b.n	8017bc4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	691b      	ldr	r3, [r3, #16]
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d012      	beq.n	8017bce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	3310      	adds	r3, #16
 8017bac:	4618      	mov	r0, r3
 8017bae:	f000 fddd 	bl	801876c <xTaskRemoveFromEventList>
 8017bb2:	4603      	mov	r3, r0
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d001      	beq.n	8017bbc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017bb8:	f000 feb4 	bl	8018924 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017bbc:	7bbb      	ldrb	r3, [r7, #14]
 8017bbe:	3b01      	subs	r3, #1
 8017bc0:	b2db      	uxtb	r3, r3
 8017bc2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017bc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	dce9      	bgt.n	8017ba0 <prvUnlockQueue+0x60>
 8017bcc:	e000      	b.n	8017bd0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017bce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	22ff      	movs	r2, #255	; 0xff
 8017bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017bd8:	f001 fd14 	bl	8019604 <vPortExitCritical>
}
 8017bdc:	bf00      	nop
 8017bde:	3710      	adds	r7, #16
 8017be0:	46bd      	mov	sp, r7
 8017be2:	bd80      	pop	{r7, pc}

08017be4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017be4:	b580      	push	{r7, lr}
 8017be6:	b084      	sub	sp, #16
 8017be8:	af00      	add	r7, sp, #0
 8017bea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017bec:	f001 fcda 	bl	80195a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d102      	bne.n	8017bfe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017bf8:	2301      	movs	r3, #1
 8017bfa:	60fb      	str	r3, [r7, #12]
 8017bfc:	e001      	b.n	8017c02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017bfe:	2300      	movs	r3, #0
 8017c00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017c02:	f001 fcff 	bl	8019604 <vPortExitCritical>

	return xReturn;
 8017c06:	68fb      	ldr	r3, [r7, #12]
}
 8017c08:	4618      	mov	r0, r3
 8017c0a:	3710      	adds	r7, #16
 8017c0c:	46bd      	mov	sp, r7
 8017c0e:	bd80      	pop	{r7, pc}

08017c10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017c10:	b580      	push	{r7, lr}
 8017c12:	b084      	sub	sp, #16
 8017c14:	af00      	add	r7, sp, #0
 8017c16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017c18:	f001 fcc4 	bl	80195a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c24:	429a      	cmp	r2, r3
 8017c26:	d102      	bne.n	8017c2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017c28:	2301      	movs	r3, #1
 8017c2a:	60fb      	str	r3, [r7, #12]
 8017c2c:	e001      	b.n	8017c32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017c2e:	2300      	movs	r3, #0
 8017c30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017c32:	f001 fce7 	bl	8019604 <vPortExitCritical>

	return xReturn;
 8017c36:	68fb      	ldr	r3, [r7, #12]
}
 8017c38:	4618      	mov	r0, r3
 8017c3a:	3710      	adds	r7, #16
 8017c3c:	46bd      	mov	sp, r7
 8017c3e:	bd80      	pop	{r7, pc}

08017c40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017c40:	b480      	push	{r7}
 8017c42:	b085      	sub	sp, #20
 8017c44:	af00      	add	r7, sp, #0
 8017c46:	6078      	str	r0, [r7, #4]
 8017c48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017c4a:	2300      	movs	r3, #0
 8017c4c:	60fb      	str	r3, [r7, #12]
 8017c4e:	e014      	b.n	8017c7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017c50:	4a0f      	ldr	r2, [pc, #60]	; (8017c90 <vQueueAddToRegistry+0x50>)
 8017c52:	68fb      	ldr	r3, [r7, #12]
 8017c54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d10b      	bne.n	8017c74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017c5c:	490c      	ldr	r1, [pc, #48]	; (8017c90 <vQueueAddToRegistry+0x50>)
 8017c5e:	68fb      	ldr	r3, [r7, #12]
 8017c60:	683a      	ldr	r2, [r7, #0]
 8017c62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017c66:	4a0a      	ldr	r2, [pc, #40]	; (8017c90 <vQueueAddToRegistry+0x50>)
 8017c68:	68fb      	ldr	r3, [r7, #12]
 8017c6a:	00db      	lsls	r3, r3, #3
 8017c6c:	4413      	add	r3, r2
 8017c6e:	687a      	ldr	r2, [r7, #4]
 8017c70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017c72:	e006      	b.n	8017c82 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017c74:	68fb      	ldr	r3, [r7, #12]
 8017c76:	3301      	adds	r3, #1
 8017c78:	60fb      	str	r3, [r7, #12]
 8017c7a:	68fb      	ldr	r3, [r7, #12]
 8017c7c:	2b07      	cmp	r3, #7
 8017c7e:	d9e7      	bls.n	8017c50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017c80:	bf00      	nop
 8017c82:	bf00      	nop
 8017c84:	3714      	adds	r7, #20
 8017c86:	46bd      	mov	sp, r7
 8017c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c8c:	4770      	bx	lr
 8017c8e:	bf00      	nop
 8017c90:	2000a694 	.word	0x2000a694

08017c94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017c94:	b580      	push	{r7, lr}
 8017c96:	b086      	sub	sp, #24
 8017c98:	af00      	add	r7, sp, #0
 8017c9a:	60f8      	str	r0, [r7, #12]
 8017c9c:	60b9      	str	r1, [r7, #8]
 8017c9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017ca4:	f001 fc7e 	bl	80195a4 <vPortEnterCritical>
 8017ca8:	697b      	ldr	r3, [r7, #20]
 8017caa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017cae:	b25b      	sxtb	r3, r3
 8017cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017cb4:	d103      	bne.n	8017cbe <vQueueWaitForMessageRestricted+0x2a>
 8017cb6:	697b      	ldr	r3, [r7, #20]
 8017cb8:	2200      	movs	r2, #0
 8017cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017cbe:	697b      	ldr	r3, [r7, #20]
 8017cc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017cc4:	b25b      	sxtb	r3, r3
 8017cc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017cca:	d103      	bne.n	8017cd4 <vQueueWaitForMessageRestricted+0x40>
 8017ccc:	697b      	ldr	r3, [r7, #20]
 8017cce:	2200      	movs	r2, #0
 8017cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017cd4:	f001 fc96 	bl	8019604 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017cd8:	697b      	ldr	r3, [r7, #20]
 8017cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d106      	bne.n	8017cee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017ce0:	697b      	ldr	r3, [r7, #20]
 8017ce2:	3324      	adds	r3, #36	; 0x24
 8017ce4:	687a      	ldr	r2, [r7, #4]
 8017ce6:	68b9      	ldr	r1, [r7, #8]
 8017ce8:	4618      	mov	r0, r3
 8017cea:	f000 fd13 	bl	8018714 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8017cee:	6978      	ldr	r0, [r7, #20]
 8017cf0:	f7ff ff26 	bl	8017b40 <prvUnlockQueue>
	}
 8017cf4:	bf00      	nop
 8017cf6:	3718      	adds	r7, #24
 8017cf8:	46bd      	mov	sp, r7
 8017cfa:	bd80      	pop	{r7, pc}

08017cfc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017cfc:	b580      	push	{r7, lr}
 8017cfe:	b08e      	sub	sp, #56	; 0x38
 8017d00:	af04      	add	r7, sp, #16
 8017d02:	60f8      	str	r0, [r7, #12]
 8017d04:	60b9      	str	r1, [r7, #8]
 8017d06:	607a      	str	r2, [r7, #4]
 8017d08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d10a      	bne.n	8017d26 <xTaskCreateStatic+0x2a>
	__asm volatile
 8017d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d14:	f383 8811 	msr	BASEPRI, r3
 8017d18:	f3bf 8f6f 	isb	sy
 8017d1c:	f3bf 8f4f 	dsb	sy
 8017d20:	623b      	str	r3, [r7, #32]
}
 8017d22:	bf00      	nop
 8017d24:	e7fe      	b.n	8017d24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8017d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d10a      	bne.n	8017d42 <xTaskCreateStatic+0x46>
	__asm volatile
 8017d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d30:	f383 8811 	msr	BASEPRI, r3
 8017d34:	f3bf 8f6f 	isb	sy
 8017d38:	f3bf 8f4f 	dsb	sy
 8017d3c:	61fb      	str	r3, [r7, #28]
}
 8017d3e:	bf00      	nop
 8017d40:	e7fe      	b.n	8017d40 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017d42:	235c      	movs	r3, #92	; 0x5c
 8017d44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017d46:	693b      	ldr	r3, [r7, #16]
 8017d48:	2b5c      	cmp	r3, #92	; 0x5c
 8017d4a:	d00a      	beq.n	8017d62 <xTaskCreateStatic+0x66>
	__asm volatile
 8017d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d50:	f383 8811 	msr	BASEPRI, r3
 8017d54:	f3bf 8f6f 	isb	sy
 8017d58:	f3bf 8f4f 	dsb	sy
 8017d5c:	61bb      	str	r3, [r7, #24]
}
 8017d5e:	bf00      	nop
 8017d60:	e7fe      	b.n	8017d60 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017d62:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d01e      	beq.n	8017da8 <xTaskCreateStatic+0xac>
 8017d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d01b      	beq.n	8017da8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017d78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d7c:	2202      	movs	r2, #2
 8017d7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017d82:	2300      	movs	r3, #0
 8017d84:	9303      	str	r3, [sp, #12]
 8017d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d88:	9302      	str	r3, [sp, #8]
 8017d8a:	f107 0314 	add.w	r3, r7, #20
 8017d8e:	9301      	str	r3, [sp, #4]
 8017d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d92:	9300      	str	r3, [sp, #0]
 8017d94:	683b      	ldr	r3, [r7, #0]
 8017d96:	687a      	ldr	r2, [r7, #4]
 8017d98:	68b9      	ldr	r1, [r7, #8]
 8017d9a:	68f8      	ldr	r0, [r7, #12]
 8017d9c:	f000 f850 	bl	8017e40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017da0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017da2:	f000 f8dd 	bl	8017f60 <prvAddNewTaskToReadyList>
 8017da6:	e001      	b.n	8017dac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8017da8:	2300      	movs	r3, #0
 8017daa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017dac:	697b      	ldr	r3, [r7, #20]
	}
 8017dae:	4618      	mov	r0, r3
 8017db0:	3728      	adds	r7, #40	; 0x28
 8017db2:	46bd      	mov	sp, r7
 8017db4:	bd80      	pop	{r7, pc}

08017db6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017db6:	b580      	push	{r7, lr}
 8017db8:	b08c      	sub	sp, #48	; 0x30
 8017dba:	af04      	add	r7, sp, #16
 8017dbc:	60f8      	str	r0, [r7, #12]
 8017dbe:	60b9      	str	r1, [r7, #8]
 8017dc0:	603b      	str	r3, [r7, #0]
 8017dc2:	4613      	mov	r3, r2
 8017dc4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017dc6:	88fb      	ldrh	r3, [r7, #6]
 8017dc8:	009b      	lsls	r3, r3, #2
 8017dca:	4618      	mov	r0, r3
 8017dcc:	f001 fd0c 	bl	80197e8 <pvPortMalloc>
 8017dd0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017dd2:	697b      	ldr	r3, [r7, #20]
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d00e      	beq.n	8017df6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017dd8:	205c      	movs	r0, #92	; 0x5c
 8017dda:	f001 fd05 	bl	80197e8 <pvPortMalloc>
 8017dde:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017de0:	69fb      	ldr	r3, [r7, #28]
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d003      	beq.n	8017dee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017de6:	69fb      	ldr	r3, [r7, #28]
 8017de8:	697a      	ldr	r2, [r7, #20]
 8017dea:	631a      	str	r2, [r3, #48]	; 0x30
 8017dec:	e005      	b.n	8017dfa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017dee:	6978      	ldr	r0, [r7, #20]
 8017df0:	f001 fdc6 	bl	8019980 <vPortFree>
 8017df4:	e001      	b.n	8017dfa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017df6:	2300      	movs	r3, #0
 8017df8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017dfa:	69fb      	ldr	r3, [r7, #28]
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d017      	beq.n	8017e30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017e00:	69fb      	ldr	r3, [r7, #28]
 8017e02:	2200      	movs	r2, #0
 8017e04:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017e08:	88fa      	ldrh	r2, [r7, #6]
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	9303      	str	r3, [sp, #12]
 8017e0e:	69fb      	ldr	r3, [r7, #28]
 8017e10:	9302      	str	r3, [sp, #8]
 8017e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e14:	9301      	str	r3, [sp, #4]
 8017e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e18:	9300      	str	r3, [sp, #0]
 8017e1a:	683b      	ldr	r3, [r7, #0]
 8017e1c:	68b9      	ldr	r1, [r7, #8]
 8017e1e:	68f8      	ldr	r0, [r7, #12]
 8017e20:	f000 f80e 	bl	8017e40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017e24:	69f8      	ldr	r0, [r7, #28]
 8017e26:	f000 f89b 	bl	8017f60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017e2a:	2301      	movs	r3, #1
 8017e2c:	61bb      	str	r3, [r7, #24]
 8017e2e:	e002      	b.n	8017e36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017e30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017e34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017e36:	69bb      	ldr	r3, [r7, #24]
	}
 8017e38:	4618      	mov	r0, r3
 8017e3a:	3720      	adds	r7, #32
 8017e3c:	46bd      	mov	sp, r7
 8017e3e:	bd80      	pop	{r7, pc}

08017e40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017e40:	b580      	push	{r7, lr}
 8017e42:	b088      	sub	sp, #32
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	60f8      	str	r0, [r7, #12]
 8017e48:	60b9      	str	r1, [r7, #8]
 8017e4a:	607a      	str	r2, [r7, #4]
 8017e4c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	009b      	lsls	r3, r3, #2
 8017e56:	461a      	mov	r2, r3
 8017e58:	21a5      	movs	r1, #165	; 0xa5
 8017e5a:	f001 feef 	bl	8019c3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017e68:	3b01      	subs	r3, #1
 8017e6a:	009b      	lsls	r3, r3, #2
 8017e6c:	4413      	add	r3, r2
 8017e6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017e70:	69bb      	ldr	r3, [r7, #24]
 8017e72:	f023 0307 	bic.w	r3, r3, #7
 8017e76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017e78:	69bb      	ldr	r3, [r7, #24]
 8017e7a:	f003 0307 	and.w	r3, r3, #7
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d00a      	beq.n	8017e98 <prvInitialiseNewTask+0x58>
	__asm volatile
 8017e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e86:	f383 8811 	msr	BASEPRI, r3
 8017e8a:	f3bf 8f6f 	isb	sy
 8017e8e:	f3bf 8f4f 	dsb	sy
 8017e92:	617b      	str	r3, [r7, #20]
}
 8017e94:	bf00      	nop
 8017e96:	e7fe      	b.n	8017e96 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017e98:	68bb      	ldr	r3, [r7, #8]
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d01f      	beq.n	8017ede <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017e9e:	2300      	movs	r3, #0
 8017ea0:	61fb      	str	r3, [r7, #28]
 8017ea2:	e012      	b.n	8017eca <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017ea4:	68ba      	ldr	r2, [r7, #8]
 8017ea6:	69fb      	ldr	r3, [r7, #28]
 8017ea8:	4413      	add	r3, r2
 8017eaa:	7819      	ldrb	r1, [r3, #0]
 8017eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017eae:	69fb      	ldr	r3, [r7, #28]
 8017eb0:	4413      	add	r3, r2
 8017eb2:	3334      	adds	r3, #52	; 0x34
 8017eb4:	460a      	mov	r2, r1
 8017eb6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017eb8:	68ba      	ldr	r2, [r7, #8]
 8017eba:	69fb      	ldr	r3, [r7, #28]
 8017ebc:	4413      	add	r3, r2
 8017ebe:	781b      	ldrb	r3, [r3, #0]
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d006      	beq.n	8017ed2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017ec4:	69fb      	ldr	r3, [r7, #28]
 8017ec6:	3301      	adds	r3, #1
 8017ec8:	61fb      	str	r3, [r7, #28]
 8017eca:	69fb      	ldr	r3, [r7, #28]
 8017ecc:	2b0f      	cmp	r3, #15
 8017ece:	d9e9      	bls.n	8017ea4 <prvInitialiseNewTask+0x64>
 8017ed0:	e000      	b.n	8017ed4 <prvInitialiseNewTask+0x94>
			{
				break;
 8017ed2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ed6:	2200      	movs	r2, #0
 8017ed8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017edc:	e003      	b.n	8017ee6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ee0:	2200      	movs	r2, #0
 8017ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ee8:	2b37      	cmp	r3, #55	; 0x37
 8017eea:	d901      	bls.n	8017ef0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017eec:	2337      	movs	r3, #55	; 0x37
 8017eee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017ef4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017efa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017efe:	2200      	movs	r2, #0
 8017f00:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f04:	3304      	adds	r3, #4
 8017f06:	4618      	mov	r0, r3
 8017f08:	f7ff f978 	bl	80171fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f0e:	3318      	adds	r3, #24
 8017f10:	4618      	mov	r0, r3
 8017f12:	f7ff f973 	bl	80171fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017f1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017f2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f2e:	2200      	movs	r2, #0
 8017f30:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f34:	2200      	movs	r2, #0
 8017f36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017f3a:	683a      	ldr	r2, [r7, #0]
 8017f3c:	68f9      	ldr	r1, [r7, #12]
 8017f3e:	69b8      	ldr	r0, [r7, #24]
 8017f40:	f001 fa00 	bl	8019344 <pxPortInitialiseStack>
 8017f44:	4602      	mov	r2, r0
 8017f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f48:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d002      	beq.n	8017f56 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017f54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017f56:	bf00      	nop
 8017f58:	3720      	adds	r7, #32
 8017f5a:	46bd      	mov	sp, r7
 8017f5c:	bd80      	pop	{r7, pc}
	...

08017f60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017f60:	b580      	push	{r7, lr}
 8017f62:	b082      	sub	sp, #8
 8017f64:	af00      	add	r7, sp, #0
 8017f66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017f68:	f001 fb1c 	bl	80195a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017f6c:	4b2d      	ldr	r3, [pc, #180]	; (8018024 <prvAddNewTaskToReadyList+0xc4>)
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	3301      	adds	r3, #1
 8017f72:	4a2c      	ldr	r2, [pc, #176]	; (8018024 <prvAddNewTaskToReadyList+0xc4>)
 8017f74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017f76:	4b2c      	ldr	r3, [pc, #176]	; (8018028 <prvAddNewTaskToReadyList+0xc8>)
 8017f78:	681b      	ldr	r3, [r3, #0]
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d109      	bne.n	8017f92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017f7e:	4a2a      	ldr	r2, [pc, #168]	; (8018028 <prvAddNewTaskToReadyList+0xc8>)
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017f84:	4b27      	ldr	r3, [pc, #156]	; (8018024 <prvAddNewTaskToReadyList+0xc4>)
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	2b01      	cmp	r3, #1
 8017f8a:	d110      	bne.n	8017fae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017f8c:	f000 fcee 	bl	801896c <prvInitialiseTaskLists>
 8017f90:	e00d      	b.n	8017fae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017f92:	4b26      	ldr	r3, [pc, #152]	; (801802c <prvAddNewTaskToReadyList+0xcc>)
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d109      	bne.n	8017fae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017f9a:	4b23      	ldr	r3, [pc, #140]	; (8018028 <prvAddNewTaskToReadyList+0xc8>)
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fa4:	429a      	cmp	r2, r3
 8017fa6:	d802      	bhi.n	8017fae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017fa8:	4a1f      	ldr	r2, [pc, #124]	; (8018028 <prvAddNewTaskToReadyList+0xc8>)
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017fae:	4b20      	ldr	r3, [pc, #128]	; (8018030 <prvAddNewTaskToReadyList+0xd0>)
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	3301      	adds	r3, #1
 8017fb4:	4a1e      	ldr	r2, [pc, #120]	; (8018030 <prvAddNewTaskToReadyList+0xd0>)
 8017fb6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017fb8:	4b1d      	ldr	r3, [pc, #116]	; (8018030 <prvAddNewTaskToReadyList+0xd0>)
 8017fba:	681a      	ldr	r2, [r3, #0]
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017fc4:	4b1b      	ldr	r3, [pc, #108]	; (8018034 <prvAddNewTaskToReadyList+0xd4>)
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	429a      	cmp	r2, r3
 8017fca:	d903      	bls.n	8017fd4 <prvAddNewTaskToReadyList+0x74>
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fd0:	4a18      	ldr	r2, [pc, #96]	; (8018034 <prvAddNewTaskToReadyList+0xd4>)
 8017fd2:	6013      	str	r3, [r2, #0]
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017fd8:	4613      	mov	r3, r2
 8017fda:	009b      	lsls	r3, r3, #2
 8017fdc:	4413      	add	r3, r2
 8017fde:	009b      	lsls	r3, r3, #2
 8017fe0:	4a15      	ldr	r2, [pc, #84]	; (8018038 <prvAddNewTaskToReadyList+0xd8>)
 8017fe2:	441a      	add	r2, r3
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	3304      	adds	r3, #4
 8017fe8:	4619      	mov	r1, r3
 8017fea:	4610      	mov	r0, r2
 8017fec:	f7ff f913 	bl	8017216 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017ff0:	f001 fb08 	bl	8019604 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017ff4:	4b0d      	ldr	r3, [pc, #52]	; (801802c <prvAddNewTaskToReadyList+0xcc>)
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	d00e      	beq.n	801801a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017ffc:	4b0a      	ldr	r3, [pc, #40]	; (8018028 <prvAddNewTaskToReadyList+0xc8>)
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018006:	429a      	cmp	r2, r3
 8018008:	d207      	bcs.n	801801a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801800a:	4b0c      	ldr	r3, [pc, #48]	; (801803c <prvAddNewTaskToReadyList+0xdc>)
 801800c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018010:	601a      	str	r2, [r3, #0]
 8018012:	f3bf 8f4f 	dsb	sy
 8018016:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801801a:	bf00      	nop
 801801c:	3708      	adds	r7, #8
 801801e:	46bd      	mov	sp, r7
 8018020:	bd80      	pop	{r7, pc}
 8018022:	bf00      	nop
 8018024:	20001c98 	.word	0x20001c98
 8018028:	200017c4 	.word	0x200017c4
 801802c:	20001ca4 	.word	0x20001ca4
 8018030:	20001cb4 	.word	0x20001cb4
 8018034:	20001ca0 	.word	0x20001ca0
 8018038:	200017c8 	.word	0x200017c8
 801803c:	e000ed04 	.word	0xe000ed04

08018040 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8018040:	b580      	push	{r7, lr}
 8018042:	b084      	sub	sp, #16
 8018044:	af00      	add	r7, sp, #0
 8018046:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8018048:	f001 faac 	bl	80195a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	2b00      	cmp	r3, #0
 8018050:	d102      	bne.n	8018058 <vTaskDelete+0x18>
 8018052:	4b2c      	ldr	r3, [pc, #176]	; (8018104 <vTaskDelete+0xc4>)
 8018054:	681b      	ldr	r3, [r3, #0]
 8018056:	e000      	b.n	801805a <vTaskDelete+0x1a>
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	3304      	adds	r3, #4
 8018060:	4618      	mov	r0, r3
 8018062:	f7ff f935 	bl	80172d0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801806a:	2b00      	cmp	r3, #0
 801806c:	d004      	beq.n	8018078 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801806e:	68fb      	ldr	r3, [r7, #12]
 8018070:	3318      	adds	r3, #24
 8018072:	4618      	mov	r0, r3
 8018074:	f7ff f92c 	bl	80172d0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8018078:	4b23      	ldr	r3, [pc, #140]	; (8018108 <vTaskDelete+0xc8>)
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	3301      	adds	r3, #1
 801807e:	4a22      	ldr	r2, [pc, #136]	; (8018108 <vTaskDelete+0xc8>)
 8018080:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8018082:	4b20      	ldr	r3, [pc, #128]	; (8018104 <vTaskDelete+0xc4>)
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	68fa      	ldr	r2, [r7, #12]
 8018088:	429a      	cmp	r2, r3
 801808a:	d10b      	bne.n	80180a4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801808c:	68fb      	ldr	r3, [r7, #12]
 801808e:	3304      	adds	r3, #4
 8018090:	4619      	mov	r1, r3
 8018092:	481e      	ldr	r0, [pc, #120]	; (801810c <vTaskDelete+0xcc>)
 8018094:	f7ff f8bf 	bl	8017216 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8018098:	4b1d      	ldr	r3, [pc, #116]	; (8018110 <vTaskDelete+0xd0>)
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	3301      	adds	r3, #1
 801809e:	4a1c      	ldr	r2, [pc, #112]	; (8018110 <vTaskDelete+0xd0>)
 80180a0:	6013      	str	r3, [r2, #0]
 80180a2:	e009      	b.n	80180b8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80180a4:	4b1b      	ldr	r3, [pc, #108]	; (8018114 <vTaskDelete+0xd4>)
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	3b01      	subs	r3, #1
 80180aa:	4a1a      	ldr	r2, [pc, #104]	; (8018114 <vTaskDelete+0xd4>)
 80180ac:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80180ae:	68f8      	ldr	r0, [r7, #12]
 80180b0:	f000 fcca 	bl	8018a48 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80180b4:	f000 fcf8 	bl	8018aa8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80180b8:	f001 faa4 	bl	8019604 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80180bc:	4b16      	ldr	r3, [pc, #88]	; (8018118 <vTaskDelete+0xd8>)
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d01b      	beq.n	80180fc <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80180c4:	4b0f      	ldr	r3, [pc, #60]	; (8018104 <vTaskDelete+0xc4>)
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	68fa      	ldr	r2, [r7, #12]
 80180ca:	429a      	cmp	r2, r3
 80180cc:	d116      	bne.n	80180fc <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80180ce:	4b13      	ldr	r3, [pc, #76]	; (801811c <vTaskDelete+0xdc>)
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d00a      	beq.n	80180ec <vTaskDelete+0xac>
	__asm volatile
 80180d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180da:	f383 8811 	msr	BASEPRI, r3
 80180de:	f3bf 8f6f 	isb	sy
 80180e2:	f3bf 8f4f 	dsb	sy
 80180e6:	60bb      	str	r3, [r7, #8]
}
 80180e8:	bf00      	nop
 80180ea:	e7fe      	b.n	80180ea <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80180ec:	4b0c      	ldr	r3, [pc, #48]	; (8018120 <vTaskDelete+0xe0>)
 80180ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80180f2:	601a      	str	r2, [r3, #0]
 80180f4:	f3bf 8f4f 	dsb	sy
 80180f8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80180fc:	bf00      	nop
 80180fe:	3710      	adds	r7, #16
 8018100:	46bd      	mov	sp, r7
 8018102:	bd80      	pop	{r7, pc}
 8018104:	200017c4 	.word	0x200017c4
 8018108:	20001cb4 	.word	0x20001cb4
 801810c:	20001c6c 	.word	0x20001c6c
 8018110:	20001c80 	.word	0x20001c80
 8018114:	20001c98 	.word	0x20001c98
 8018118:	20001ca4 	.word	0x20001ca4
 801811c:	20001cc0 	.word	0x20001cc0
 8018120:	e000ed04 	.word	0xe000ed04

08018124 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8018124:	b580      	push	{r7, lr}
 8018126:	b084      	sub	sp, #16
 8018128:	af00      	add	r7, sp, #0
 801812a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801812c:	2300      	movs	r3, #0
 801812e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	2b00      	cmp	r3, #0
 8018134:	d017      	beq.n	8018166 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8018136:	4b13      	ldr	r3, [pc, #76]	; (8018184 <vTaskDelay+0x60>)
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d00a      	beq.n	8018154 <vTaskDelay+0x30>
	__asm volatile
 801813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018142:	f383 8811 	msr	BASEPRI, r3
 8018146:	f3bf 8f6f 	isb	sy
 801814a:	f3bf 8f4f 	dsb	sy
 801814e:	60bb      	str	r3, [r7, #8]
}
 8018150:	bf00      	nop
 8018152:	e7fe      	b.n	8018152 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8018154:	f000 f8e6 	bl	8018324 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8018158:	2100      	movs	r1, #0
 801815a:	6878      	ldr	r0, [r7, #4]
 801815c:	f000 fd50 	bl	8018c00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8018160:	f000 f8ee 	bl	8018340 <xTaskResumeAll>
 8018164:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8018166:	68fb      	ldr	r3, [r7, #12]
 8018168:	2b00      	cmp	r3, #0
 801816a:	d107      	bne.n	801817c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801816c:	4b06      	ldr	r3, [pc, #24]	; (8018188 <vTaskDelay+0x64>)
 801816e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018172:	601a      	str	r2, [r3, #0]
 8018174:	f3bf 8f4f 	dsb	sy
 8018178:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801817c:	bf00      	nop
 801817e:	3710      	adds	r7, #16
 8018180:	46bd      	mov	sp, r7
 8018182:	bd80      	pop	{r7, pc}
 8018184:	20001cc0 	.word	0x20001cc0
 8018188:	e000ed04 	.word	0xe000ed04

0801818c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 801818c:	b580      	push	{r7, lr}
 801818e:	b088      	sub	sp, #32
 8018190:	af00      	add	r7, sp, #0
 8018192:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8018198:	69bb      	ldr	r3, [r7, #24]
 801819a:	2b00      	cmp	r3, #0
 801819c:	d10a      	bne.n	80181b4 <eTaskGetState+0x28>
	__asm volatile
 801819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181a2:	f383 8811 	msr	BASEPRI, r3
 80181a6:	f3bf 8f6f 	isb	sy
 80181aa:	f3bf 8f4f 	dsb	sy
 80181ae:	60bb      	str	r3, [r7, #8]
}
 80181b0:	bf00      	nop
 80181b2:	e7fe      	b.n	80181b2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80181b4:	4b23      	ldr	r3, [pc, #140]	; (8018244 <eTaskGetState+0xb8>)
 80181b6:	681b      	ldr	r3, [r3, #0]
 80181b8:	69ba      	ldr	r2, [r7, #24]
 80181ba:	429a      	cmp	r2, r3
 80181bc:	d102      	bne.n	80181c4 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80181be:	2300      	movs	r3, #0
 80181c0:	77fb      	strb	r3, [r7, #31]
 80181c2:	e03a      	b.n	801823a <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80181c4:	f001 f9ee 	bl	80195a4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80181c8:	69bb      	ldr	r3, [r7, #24]
 80181ca:	695b      	ldr	r3, [r3, #20]
 80181cc:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80181ce:	4b1e      	ldr	r3, [pc, #120]	; (8018248 <eTaskGetState+0xbc>)
 80181d0:	681b      	ldr	r3, [r3, #0]
 80181d2:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80181d4:	4b1d      	ldr	r3, [pc, #116]	; (801824c <eTaskGetState+0xc0>)
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80181da:	f001 fa13 	bl	8019604 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80181de:	697a      	ldr	r2, [r7, #20]
 80181e0:	693b      	ldr	r3, [r7, #16]
 80181e2:	429a      	cmp	r2, r3
 80181e4:	d003      	beq.n	80181ee <eTaskGetState+0x62>
 80181e6:	697a      	ldr	r2, [r7, #20]
 80181e8:	68fb      	ldr	r3, [r7, #12]
 80181ea:	429a      	cmp	r2, r3
 80181ec:	d102      	bne.n	80181f4 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80181ee:	2302      	movs	r3, #2
 80181f0:	77fb      	strb	r3, [r7, #31]
 80181f2:	e022      	b.n	801823a <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80181f4:	697b      	ldr	r3, [r7, #20]
 80181f6:	4a16      	ldr	r2, [pc, #88]	; (8018250 <eTaskGetState+0xc4>)
 80181f8:	4293      	cmp	r3, r2
 80181fa:	d112      	bne.n	8018222 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80181fc:	69bb      	ldr	r3, [r7, #24]
 80181fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018200:	2b00      	cmp	r3, #0
 8018202:	d10b      	bne.n	801821c <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8018204:	69bb      	ldr	r3, [r7, #24]
 8018206:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801820a:	b2db      	uxtb	r3, r3
 801820c:	2b01      	cmp	r3, #1
 801820e:	d102      	bne.n	8018216 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8018210:	2302      	movs	r3, #2
 8018212:	77fb      	strb	r3, [r7, #31]
 8018214:	e011      	b.n	801823a <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8018216:	2303      	movs	r3, #3
 8018218:	77fb      	strb	r3, [r7, #31]
 801821a:	e00e      	b.n	801823a <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 801821c:	2302      	movs	r3, #2
 801821e:	77fb      	strb	r3, [r7, #31]
 8018220:	e00b      	b.n	801823a <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8018222:	697b      	ldr	r3, [r7, #20]
 8018224:	4a0b      	ldr	r2, [pc, #44]	; (8018254 <eTaskGetState+0xc8>)
 8018226:	4293      	cmp	r3, r2
 8018228:	d002      	beq.n	8018230 <eTaskGetState+0xa4>
 801822a:	697b      	ldr	r3, [r7, #20]
 801822c:	2b00      	cmp	r3, #0
 801822e:	d102      	bne.n	8018236 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8018230:	2304      	movs	r3, #4
 8018232:	77fb      	strb	r3, [r7, #31]
 8018234:	e001      	b.n	801823a <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8018236:	2301      	movs	r3, #1
 8018238:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 801823a:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801823c:	4618      	mov	r0, r3
 801823e:	3720      	adds	r7, #32
 8018240:	46bd      	mov	sp, r7
 8018242:	bd80      	pop	{r7, pc}
 8018244:	200017c4 	.word	0x200017c4
 8018248:	20001c50 	.word	0x20001c50
 801824c:	20001c54 	.word	0x20001c54
 8018250:	20001c84 	.word	0x20001c84
 8018254:	20001c6c 	.word	0x20001c6c

08018258 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018258:	b580      	push	{r7, lr}
 801825a:	b08a      	sub	sp, #40	; 0x28
 801825c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801825e:	2300      	movs	r3, #0
 8018260:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8018262:	2300      	movs	r3, #0
 8018264:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8018266:	463a      	mov	r2, r7
 8018268:	1d39      	adds	r1, r7, #4
 801826a:	f107 0308 	add.w	r3, r7, #8
 801826e:	4618      	mov	r0, r3
 8018270:	f7fe ff70 	bl	8017154 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8018274:	6839      	ldr	r1, [r7, #0]
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	68ba      	ldr	r2, [r7, #8]
 801827a:	9202      	str	r2, [sp, #8]
 801827c:	9301      	str	r3, [sp, #4]
 801827e:	2300      	movs	r3, #0
 8018280:	9300      	str	r3, [sp, #0]
 8018282:	2300      	movs	r3, #0
 8018284:	460a      	mov	r2, r1
 8018286:	4921      	ldr	r1, [pc, #132]	; (801830c <vTaskStartScheduler+0xb4>)
 8018288:	4821      	ldr	r0, [pc, #132]	; (8018310 <vTaskStartScheduler+0xb8>)
 801828a:	f7ff fd37 	bl	8017cfc <xTaskCreateStatic>
 801828e:	4603      	mov	r3, r0
 8018290:	4a20      	ldr	r2, [pc, #128]	; (8018314 <vTaskStartScheduler+0xbc>)
 8018292:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8018294:	4b1f      	ldr	r3, [pc, #124]	; (8018314 <vTaskStartScheduler+0xbc>)
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	2b00      	cmp	r3, #0
 801829a:	d002      	beq.n	80182a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801829c:	2301      	movs	r3, #1
 801829e:	617b      	str	r3, [r7, #20]
 80182a0:	e001      	b.n	80182a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80182a2:	2300      	movs	r3, #0
 80182a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80182a6:	697b      	ldr	r3, [r7, #20]
 80182a8:	2b01      	cmp	r3, #1
 80182aa:	d102      	bne.n	80182b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80182ac:	f000 fcfc 	bl	8018ca8 <xTimerCreateTimerTask>
 80182b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80182b2:	697b      	ldr	r3, [r7, #20]
 80182b4:	2b01      	cmp	r3, #1
 80182b6:	d116      	bne.n	80182e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80182b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182bc:	f383 8811 	msr	BASEPRI, r3
 80182c0:	f3bf 8f6f 	isb	sy
 80182c4:	f3bf 8f4f 	dsb	sy
 80182c8:	613b      	str	r3, [r7, #16]
}
 80182ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80182cc:	4b12      	ldr	r3, [pc, #72]	; (8018318 <vTaskStartScheduler+0xc0>)
 80182ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80182d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80182d4:	4b11      	ldr	r3, [pc, #68]	; (801831c <vTaskStartScheduler+0xc4>)
 80182d6:	2201      	movs	r2, #1
 80182d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80182da:	4b11      	ldr	r3, [pc, #68]	; (8018320 <vTaskStartScheduler+0xc8>)
 80182dc:	2200      	movs	r2, #0
 80182de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80182e0:	f001 f8be 	bl	8019460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80182e4:	e00e      	b.n	8018304 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80182e6:	697b      	ldr	r3, [r7, #20]
 80182e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80182ec:	d10a      	bne.n	8018304 <vTaskStartScheduler+0xac>
	__asm volatile
 80182ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182f2:	f383 8811 	msr	BASEPRI, r3
 80182f6:	f3bf 8f6f 	isb	sy
 80182fa:	f3bf 8f4f 	dsb	sy
 80182fe:	60fb      	str	r3, [r7, #12]
}
 8018300:	bf00      	nop
 8018302:	e7fe      	b.n	8018302 <vTaskStartScheduler+0xaa>
}
 8018304:	bf00      	nop
 8018306:	3718      	adds	r7, #24
 8018308:	46bd      	mov	sp, r7
 801830a:	bd80      	pop	{r7, pc}
 801830c:	08020088 	.word	0x08020088
 8018310:	0801893d 	.word	0x0801893d
 8018314:	20001cbc 	.word	0x20001cbc
 8018318:	20001cb8 	.word	0x20001cb8
 801831c:	20001ca4 	.word	0x20001ca4
 8018320:	20001c9c 	.word	0x20001c9c

08018324 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018324:	b480      	push	{r7}
 8018326:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8018328:	4b04      	ldr	r3, [pc, #16]	; (801833c <vTaskSuspendAll+0x18>)
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	3301      	adds	r3, #1
 801832e:	4a03      	ldr	r2, [pc, #12]	; (801833c <vTaskSuspendAll+0x18>)
 8018330:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8018332:	bf00      	nop
 8018334:	46bd      	mov	sp, r7
 8018336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801833a:	4770      	bx	lr
 801833c:	20001cc0 	.word	0x20001cc0

08018340 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018340:	b580      	push	{r7, lr}
 8018342:	b084      	sub	sp, #16
 8018344:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018346:	2300      	movs	r3, #0
 8018348:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801834a:	2300      	movs	r3, #0
 801834c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801834e:	4b42      	ldr	r3, [pc, #264]	; (8018458 <xTaskResumeAll+0x118>)
 8018350:	681b      	ldr	r3, [r3, #0]
 8018352:	2b00      	cmp	r3, #0
 8018354:	d10a      	bne.n	801836c <xTaskResumeAll+0x2c>
	__asm volatile
 8018356:	f04f 0350 	mov.w	r3, #80	; 0x50
 801835a:	f383 8811 	msr	BASEPRI, r3
 801835e:	f3bf 8f6f 	isb	sy
 8018362:	f3bf 8f4f 	dsb	sy
 8018366:	603b      	str	r3, [r7, #0]
}
 8018368:	bf00      	nop
 801836a:	e7fe      	b.n	801836a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801836c:	f001 f91a 	bl	80195a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018370:	4b39      	ldr	r3, [pc, #228]	; (8018458 <xTaskResumeAll+0x118>)
 8018372:	681b      	ldr	r3, [r3, #0]
 8018374:	3b01      	subs	r3, #1
 8018376:	4a38      	ldr	r2, [pc, #224]	; (8018458 <xTaskResumeAll+0x118>)
 8018378:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801837a:	4b37      	ldr	r3, [pc, #220]	; (8018458 <xTaskResumeAll+0x118>)
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	2b00      	cmp	r3, #0
 8018380:	d162      	bne.n	8018448 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8018382:	4b36      	ldr	r3, [pc, #216]	; (801845c <xTaskResumeAll+0x11c>)
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	2b00      	cmp	r3, #0
 8018388:	d05e      	beq.n	8018448 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801838a:	e02f      	b.n	80183ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801838c:	4b34      	ldr	r3, [pc, #208]	; (8018460 <xTaskResumeAll+0x120>)
 801838e:	68db      	ldr	r3, [r3, #12]
 8018390:	68db      	ldr	r3, [r3, #12]
 8018392:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018394:	68fb      	ldr	r3, [r7, #12]
 8018396:	3318      	adds	r3, #24
 8018398:	4618      	mov	r0, r3
 801839a:	f7fe ff99 	bl	80172d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801839e:	68fb      	ldr	r3, [r7, #12]
 80183a0:	3304      	adds	r3, #4
 80183a2:	4618      	mov	r0, r3
 80183a4:	f7fe ff94 	bl	80172d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80183a8:	68fb      	ldr	r3, [r7, #12]
 80183aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183ac:	4b2d      	ldr	r3, [pc, #180]	; (8018464 <xTaskResumeAll+0x124>)
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	429a      	cmp	r2, r3
 80183b2:	d903      	bls.n	80183bc <xTaskResumeAll+0x7c>
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183b8:	4a2a      	ldr	r2, [pc, #168]	; (8018464 <xTaskResumeAll+0x124>)
 80183ba:	6013      	str	r3, [r2, #0]
 80183bc:	68fb      	ldr	r3, [r7, #12]
 80183be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183c0:	4613      	mov	r3, r2
 80183c2:	009b      	lsls	r3, r3, #2
 80183c4:	4413      	add	r3, r2
 80183c6:	009b      	lsls	r3, r3, #2
 80183c8:	4a27      	ldr	r2, [pc, #156]	; (8018468 <xTaskResumeAll+0x128>)
 80183ca:	441a      	add	r2, r3
 80183cc:	68fb      	ldr	r3, [r7, #12]
 80183ce:	3304      	adds	r3, #4
 80183d0:	4619      	mov	r1, r3
 80183d2:	4610      	mov	r0, r2
 80183d4:	f7fe ff1f 	bl	8017216 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183dc:	4b23      	ldr	r3, [pc, #140]	; (801846c <xTaskResumeAll+0x12c>)
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183e2:	429a      	cmp	r2, r3
 80183e4:	d302      	bcc.n	80183ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80183e6:	4b22      	ldr	r3, [pc, #136]	; (8018470 <xTaskResumeAll+0x130>)
 80183e8:	2201      	movs	r2, #1
 80183ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80183ec:	4b1c      	ldr	r3, [pc, #112]	; (8018460 <xTaskResumeAll+0x120>)
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d1cb      	bne.n	801838c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80183f4:	68fb      	ldr	r3, [r7, #12]
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d001      	beq.n	80183fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80183fa:	f000 fb55 	bl	8018aa8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80183fe:	4b1d      	ldr	r3, [pc, #116]	; (8018474 <xTaskResumeAll+0x134>)
 8018400:	681b      	ldr	r3, [r3, #0]
 8018402:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	2b00      	cmp	r3, #0
 8018408:	d010      	beq.n	801842c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801840a:	f000 f847 	bl	801849c <xTaskIncrementTick>
 801840e:	4603      	mov	r3, r0
 8018410:	2b00      	cmp	r3, #0
 8018412:	d002      	beq.n	801841a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8018414:	4b16      	ldr	r3, [pc, #88]	; (8018470 <xTaskResumeAll+0x130>)
 8018416:	2201      	movs	r2, #1
 8018418:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	3b01      	subs	r3, #1
 801841e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	2b00      	cmp	r3, #0
 8018424:	d1f1      	bne.n	801840a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8018426:	4b13      	ldr	r3, [pc, #76]	; (8018474 <xTaskResumeAll+0x134>)
 8018428:	2200      	movs	r2, #0
 801842a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801842c:	4b10      	ldr	r3, [pc, #64]	; (8018470 <xTaskResumeAll+0x130>)
 801842e:	681b      	ldr	r3, [r3, #0]
 8018430:	2b00      	cmp	r3, #0
 8018432:	d009      	beq.n	8018448 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018434:	2301      	movs	r3, #1
 8018436:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018438:	4b0f      	ldr	r3, [pc, #60]	; (8018478 <xTaskResumeAll+0x138>)
 801843a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801843e:	601a      	str	r2, [r3, #0]
 8018440:	f3bf 8f4f 	dsb	sy
 8018444:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018448:	f001 f8dc 	bl	8019604 <vPortExitCritical>

	return xAlreadyYielded;
 801844c:	68bb      	ldr	r3, [r7, #8]
}
 801844e:	4618      	mov	r0, r3
 8018450:	3710      	adds	r7, #16
 8018452:	46bd      	mov	sp, r7
 8018454:	bd80      	pop	{r7, pc}
 8018456:	bf00      	nop
 8018458:	20001cc0 	.word	0x20001cc0
 801845c:	20001c98 	.word	0x20001c98
 8018460:	20001c58 	.word	0x20001c58
 8018464:	20001ca0 	.word	0x20001ca0
 8018468:	200017c8 	.word	0x200017c8
 801846c:	200017c4 	.word	0x200017c4
 8018470:	20001cac 	.word	0x20001cac
 8018474:	20001ca8 	.word	0x20001ca8
 8018478:	e000ed04 	.word	0xe000ed04

0801847c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801847c:	b480      	push	{r7}
 801847e:	b083      	sub	sp, #12
 8018480:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8018482:	4b05      	ldr	r3, [pc, #20]	; (8018498 <xTaskGetTickCount+0x1c>)
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018488:	687b      	ldr	r3, [r7, #4]
}
 801848a:	4618      	mov	r0, r3
 801848c:	370c      	adds	r7, #12
 801848e:	46bd      	mov	sp, r7
 8018490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018494:	4770      	bx	lr
 8018496:	bf00      	nop
 8018498:	20001c9c 	.word	0x20001c9c

0801849c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801849c:	b580      	push	{r7, lr}
 801849e:	b086      	sub	sp, #24
 80184a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80184a2:	2300      	movs	r3, #0
 80184a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80184a6:	4b4f      	ldr	r3, [pc, #316]	; (80185e4 <xTaskIncrementTick+0x148>)
 80184a8:	681b      	ldr	r3, [r3, #0]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	f040 808f 	bne.w	80185ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80184b0:	4b4d      	ldr	r3, [pc, #308]	; (80185e8 <xTaskIncrementTick+0x14c>)
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	3301      	adds	r3, #1
 80184b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80184b8:	4a4b      	ldr	r2, [pc, #300]	; (80185e8 <xTaskIncrementTick+0x14c>)
 80184ba:	693b      	ldr	r3, [r7, #16]
 80184bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80184be:	693b      	ldr	r3, [r7, #16]
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	d120      	bne.n	8018506 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80184c4:	4b49      	ldr	r3, [pc, #292]	; (80185ec <xTaskIncrementTick+0x150>)
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d00a      	beq.n	80184e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80184ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184d2:	f383 8811 	msr	BASEPRI, r3
 80184d6:	f3bf 8f6f 	isb	sy
 80184da:	f3bf 8f4f 	dsb	sy
 80184de:	603b      	str	r3, [r7, #0]
}
 80184e0:	bf00      	nop
 80184e2:	e7fe      	b.n	80184e2 <xTaskIncrementTick+0x46>
 80184e4:	4b41      	ldr	r3, [pc, #260]	; (80185ec <xTaskIncrementTick+0x150>)
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	60fb      	str	r3, [r7, #12]
 80184ea:	4b41      	ldr	r3, [pc, #260]	; (80185f0 <xTaskIncrementTick+0x154>)
 80184ec:	681b      	ldr	r3, [r3, #0]
 80184ee:	4a3f      	ldr	r2, [pc, #252]	; (80185ec <xTaskIncrementTick+0x150>)
 80184f0:	6013      	str	r3, [r2, #0]
 80184f2:	4a3f      	ldr	r2, [pc, #252]	; (80185f0 <xTaskIncrementTick+0x154>)
 80184f4:	68fb      	ldr	r3, [r7, #12]
 80184f6:	6013      	str	r3, [r2, #0]
 80184f8:	4b3e      	ldr	r3, [pc, #248]	; (80185f4 <xTaskIncrementTick+0x158>)
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	3301      	adds	r3, #1
 80184fe:	4a3d      	ldr	r2, [pc, #244]	; (80185f4 <xTaskIncrementTick+0x158>)
 8018500:	6013      	str	r3, [r2, #0]
 8018502:	f000 fad1 	bl	8018aa8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018506:	4b3c      	ldr	r3, [pc, #240]	; (80185f8 <xTaskIncrementTick+0x15c>)
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	693a      	ldr	r2, [r7, #16]
 801850c:	429a      	cmp	r2, r3
 801850e:	d349      	bcc.n	80185a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018510:	4b36      	ldr	r3, [pc, #216]	; (80185ec <xTaskIncrementTick+0x150>)
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	2b00      	cmp	r3, #0
 8018518:	d104      	bne.n	8018524 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801851a:	4b37      	ldr	r3, [pc, #220]	; (80185f8 <xTaskIncrementTick+0x15c>)
 801851c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018520:	601a      	str	r2, [r3, #0]
					break;
 8018522:	e03f      	b.n	80185a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018524:	4b31      	ldr	r3, [pc, #196]	; (80185ec <xTaskIncrementTick+0x150>)
 8018526:	681b      	ldr	r3, [r3, #0]
 8018528:	68db      	ldr	r3, [r3, #12]
 801852a:	68db      	ldr	r3, [r3, #12]
 801852c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801852e:	68bb      	ldr	r3, [r7, #8]
 8018530:	685b      	ldr	r3, [r3, #4]
 8018532:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018534:	693a      	ldr	r2, [r7, #16]
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	429a      	cmp	r2, r3
 801853a:	d203      	bcs.n	8018544 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801853c:	4a2e      	ldr	r2, [pc, #184]	; (80185f8 <xTaskIncrementTick+0x15c>)
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018542:	e02f      	b.n	80185a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018544:	68bb      	ldr	r3, [r7, #8]
 8018546:	3304      	adds	r3, #4
 8018548:	4618      	mov	r0, r3
 801854a:	f7fe fec1 	bl	80172d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801854e:	68bb      	ldr	r3, [r7, #8]
 8018550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018552:	2b00      	cmp	r3, #0
 8018554:	d004      	beq.n	8018560 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018556:	68bb      	ldr	r3, [r7, #8]
 8018558:	3318      	adds	r3, #24
 801855a:	4618      	mov	r0, r3
 801855c:	f7fe feb8 	bl	80172d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018560:	68bb      	ldr	r3, [r7, #8]
 8018562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018564:	4b25      	ldr	r3, [pc, #148]	; (80185fc <xTaskIncrementTick+0x160>)
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	429a      	cmp	r2, r3
 801856a:	d903      	bls.n	8018574 <xTaskIncrementTick+0xd8>
 801856c:	68bb      	ldr	r3, [r7, #8]
 801856e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018570:	4a22      	ldr	r2, [pc, #136]	; (80185fc <xTaskIncrementTick+0x160>)
 8018572:	6013      	str	r3, [r2, #0]
 8018574:	68bb      	ldr	r3, [r7, #8]
 8018576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018578:	4613      	mov	r3, r2
 801857a:	009b      	lsls	r3, r3, #2
 801857c:	4413      	add	r3, r2
 801857e:	009b      	lsls	r3, r3, #2
 8018580:	4a1f      	ldr	r2, [pc, #124]	; (8018600 <xTaskIncrementTick+0x164>)
 8018582:	441a      	add	r2, r3
 8018584:	68bb      	ldr	r3, [r7, #8]
 8018586:	3304      	adds	r3, #4
 8018588:	4619      	mov	r1, r3
 801858a:	4610      	mov	r0, r2
 801858c:	f7fe fe43 	bl	8017216 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018590:	68bb      	ldr	r3, [r7, #8]
 8018592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018594:	4b1b      	ldr	r3, [pc, #108]	; (8018604 <xTaskIncrementTick+0x168>)
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801859a:	429a      	cmp	r2, r3
 801859c:	d3b8      	bcc.n	8018510 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801859e:	2301      	movs	r3, #1
 80185a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80185a2:	e7b5      	b.n	8018510 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80185a4:	4b17      	ldr	r3, [pc, #92]	; (8018604 <xTaskIncrementTick+0x168>)
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185aa:	4915      	ldr	r1, [pc, #84]	; (8018600 <xTaskIncrementTick+0x164>)
 80185ac:	4613      	mov	r3, r2
 80185ae:	009b      	lsls	r3, r3, #2
 80185b0:	4413      	add	r3, r2
 80185b2:	009b      	lsls	r3, r3, #2
 80185b4:	440b      	add	r3, r1
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	2b01      	cmp	r3, #1
 80185ba:	d901      	bls.n	80185c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80185bc:	2301      	movs	r3, #1
 80185be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80185c0:	4b11      	ldr	r3, [pc, #68]	; (8018608 <xTaskIncrementTick+0x16c>)
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d007      	beq.n	80185d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80185c8:	2301      	movs	r3, #1
 80185ca:	617b      	str	r3, [r7, #20]
 80185cc:	e004      	b.n	80185d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80185ce:	4b0f      	ldr	r3, [pc, #60]	; (801860c <xTaskIncrementTick+0x170>)
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	3301      	adds	r3, #1
 80185d4:	4a0d      	ldr	r2, [pc, #52]	; (801860c <xTaskIncrementTick+0x170>)
 80185d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80185d8:	697b      	ldr	r3, [r7, #20]
}
 80185da:	4618      	mov	r0, r3
 80185dc:	3718      	adds	r7, #24
 80185de:	46bd      	mov	sp, r7
 80185e0:	bd80      	pop	{r7, pc}
 80185e2:	bf00      	nop
 80185e4:	20001cc0 	.word	0x20001cc0
 80185e8:	20001c9c 	.word	0x20001c9c
 80185ec:	20001c50 	.word	0x20001c50
 80185f0:	20001c54 	.word	0x20001c54
 80185f4:	20001cb0 	.word	0x20001cb0
 80185f8:	20001cb8 	.word	0x20001cb8
 80185fc:	20001ca0 	.word	0x20001ca0
 8018600:	200017c8 	.word	0x200017c8
 8018604:	200017c4 	.word	0x200017c4
 8018608:	20001cac 	.word	0x20001cac
 801860c:	20001ca8 	.word	0x20001ca8

08018610 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018610:	b480      	push	{r7}
 8018612:	b085      	sub	sp, #20
 8018614:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018616:	4b28      	ldr	r3, [pc, #160]	; (80186b8 <vTaskSwitchContext+0xa8>)
 8018618:	681b      	ldr	r3, [r3, #0]
 801861a:	2b00      	cmp	r3, #0
 801861c:	d003      	beq.n	8018626 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801861e:	4b27      	ldr	r3, [pc, #156]	; (80186bc <vTaskSwitchContext+0xac>)
 8018620:	2201      	movs	r2, #1
 8018622:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018624:	e041      	b.n	80186aa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8018626:	4b25      	ldr	r3, [pc, #148]	; (80186bc <vTaskSwitchContext+0xac>)
 8018628:	2200      	movs	r2, #0
 801862a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801862c:	4b24      	ldr	r3, [pc, #144]	; (80186c0 <vTaskSwitchContext+0xb0>)
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	60fb      	str	r3, [r7, #12]
 8018632:	e010      	b.n	8018656 <vTaskSwitchContext+0x46>
 8018634:	68fb      	ldr	r3, [r7, #12]
 8018636:	2b00      	cmp	r3, #0
 8018638:	d10a      	bne.n	8018650 <vTaskSwitchContext+0x40>
	__asm volatile
 801863a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801863e:	f383 8811 	msr	BASEPRI, r3
 8018642:	f3bf 8f6f 	isb	sy
 8018646:	f3bf 8f4f 	dsb	sy
 801864a:	607b      	str	r3, [r7, #4]
}
 801864c:	bf00      	nop
 801864e:	e7fe      	b.n	801864e <vTaskSwitchContext+0x3e>
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	3b01      	subs	r3, #1
 8018654:	60fb      	str	r3, [r7, #12]
 8018656:	491b      	ldr	r1, [pc, #108]	; (80186c4 <vTaskSwitchContext+0xb4>)
 8018658:	68fa      	ldr	r2, [r7, #12]
 801865a:	4613      	mov	r3, r2
 801865c:	009b      	lsls	r3, r3, #2
 801865e:	4413      	add	r3, r2
 8018660:	009b      	lsls	r3, r3, #2
 8018662:	440b      	add	r3, r1
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	2b00      	cmp	r3, #0
 8018668:	d0e4      	beq.n	8018634 <vTaskSwitchContext+0x24>
 801866a:	68fa      	ldr	r2, [r7, #12]
 801866c:	4613      	mov	r3, r2
 801866e:	009b      	lsls	r3, r3, #2
 8018670:	4413      	add	r3, r2
 8018672:	009b      	lsls	r3, r3, #2
 8018674:	4a13      	ldr	r2, [pc, #76]	; (80186c4 <vTaskSwitchContext+0xb4>)
 8018676:	4413      	add	r3, r2
 8018678:	60bb      	str	r3, [r7, #8]
 801867a:	68bb      	ldr	r3, [r7, #8]
 801867c:	685b      	ldr	r3, [r3, #4]
 801867e:	685a      	ldr	r2, [r3, #4]
 8018680:	68bb      	ldr	r3, [r7, #8]
 8018682:	605a      	str	r2, [r3, #4]
 8018684:	68bb      	ldr	r3, [r7, #8]
 8018686:	685a      	ldr	r2, [r3, #4]
 8018688:	68bb      	ldr	r3, [r7, #8]
 801868a:	3308      	adds	r3, #8
 801868c:	429a      	cmp	r2, r3
 801868e:	d104      	bne.n	801869a <vTaskSwitchContext+0x8a>
 8018690:	68bb      	ldr	r3, [r7, #8]
 8018692:	685b      	ldr	r3, [r3, #4]
 8018694:	685a      	ldr	r2, [r3, #4]
 8018696:	68bb      	ldr	r3, [r7, #8]
 8018698:	605a      	str	r2, [r3, #4]
 801869a:	68bb      	ldr	r3, [r7, #8]
 801869c:	685b      	ldr	r3, [r3, #4]
 801869e:	68db      	ldr	r3, [r3, #12]
 80186a0:	4a09      	ldr	r2, [pc, #36]	; (80186c8 <vTaskSwitchContext+0xb8>)
 80186a2:	6013      	str	r3, [r2, #0]
 80186a4:	4a06      	ldr	r2, [pc, #24]	; (80186c0 <vTaskSwitchContext+0xb0>)
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	6013      	str	r3, [r2, #0]
}
 80186aa:	bf00      	nop
 80186ac:	3714      	adds	r7, #20
 80186ae:	46bd      	mov	sp, r7
 80186b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186b4:	4770      	bx	lr
 80186b6:	bf00      	nop
 80186b8:	20001cc0 	.word	0x20001cc0
 80186bc:	20001cac 	.word	0x20001cac
 80186c0:	20001ca0 	.word	0x20001ca0
 80186c4:	200017c8 	.word	0x200017c8
 80186c8:	200017c4 	.word	0x200017c4

080186cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80186cc:	b580      	push	{r7, lr}
 80186ce:	b084      	sub	sp, #16
 80186d0:	af00      	add	r7, sp, #0
 80186d2:	6078      	str	r0, [r7, #4]
 80186d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d10a      	bne.n	80186f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80186dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186e0:	f383 8811 	msr	BASEPRI, r3
 80186e4:	f3bf 8f6f 	isb	sy
 80186e8:	f3bf 8f4f 	dsb	sy
 80186ec:	60fb      	str	r3, [r7, #12]
}
 80186ee:	bf00      	nop
 80186f0:	e7fe      	b.n	80186f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80186f2:	4b07      	ldr	r3, [pc, #28]	; (8018710 <vTaskPlaceOnEventList+0x44>)
 80186f4:	681b      	ldr	r3, [r3, #0]
 80186f6:	3318      	adds	r3, #24
 80186f8:	4619      	mov	r1, r3
 80186fa:	6878      	ldr	r0, [r7, #4]
 80186fc:	f7fe fdaf 	bl	801725e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018700:	2101      	movs	r1, #1
 8018702:	6838      	ldr	r0, [r7, #0]
 8018704:	f000 fa7c 	bl	8018c00 <prvAddCurrentTaskToDelayedList>
}
 8018708:	bf00      	nop
 801870a:	3710      	adds	r7, #16
 801870c:	46bd      	mov	sp, r7
 801870e:	bd80      	pop	{r7, pc}
 8018710:	200017c4 	.word	0x200017c4

08018714 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018714:	b580      	push	{r7, lr}
 8018716:	b086      	sub	sp, #24
 8018718:	af00      	add	r7, sp, #0
 801871a:	60f8      	str	r0, [r7, #12]
 801871c:	60b9      	str	r1, [r7, #8]
 801871e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018720:	68fb      	ldr	r3, [r7, #12]
 8018722:	2b00      	cmp	r3, #0
 8018724:	d10a      	bne.n	801873c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8018726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801872a:	f383 8811 	msr	BASEPRI, r3
 801872e:	f3bf 8f6f 	isb	sy
 8018732:	f3bf 8f4f 	dsb	sy
 8018736:	617b      	str	r3, [r7, #20]
}
 8018738:	bf00      	nop
 801873a:	e7fe      	b.n	801873a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801873c:	4b0a      	ldr	r3, [pc, #40]	; (8018768 <vTaskPlaceOnEventListRestricted+0x54>)
 801873e:	681b      	ldr	r3, [r3, #0]
 8018740:	3318      	adds	r3, #24
 8018742:	4619      	mov	r1, r3
 8018744:	68f8      	ldr	r0, [r7, #12]
 8018746:	f7fe fd66 	bl	8017216 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	2b00      	cmp	r3, #0
 801874e:	d002      	beq.n	8018756 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8018750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018754:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8018756:	6879      	ldr	r1, [r7, #4]
 8018758:	68b8      	ldr	r0, [r7, #8]
 801875a:	f000 fa51 	bl	8018c00 <prvAddCurrentTaskToDelayedList>
	}
 801875e:	bf00      	nop
 8018760:	3718      	adds	r7, #24
 8018762:	46bd      	mov	sp, r7
 8018764:	bd80      	pop	{r7, pc}
 8018766:	bf00      	nop
 8018768:	200017c4 	.word	0x200017c4

0801876c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801876c:	b580      	push	{r7, lr}
 801876e:	b086      	sub	sp, #24
 8018770:	af00      	add	r7, sp, #0
 8018772:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	68db      	ldr	r3, [r3, #12]
 8018778:	68db      	ldr	r3, [r3, #12]
 801877a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801877c:	693b      	ldr	r3, [r7, #16]
 801877e:	2b00      	cmp	r3, #0
 8018780:	d10a      	bne.n	8018798 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8018782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018786:	f383 8811 	msr	BASEPRI, r3
 801878a:	f3bf 8f6f 	isb	sy
 801878e:	f3bf 8f4f 	dsb	sy
 8018792:	60fb      	str	r3, [r7, #12]
}
 8018794:	bf00      	nop
 8018796:	e7fe      	b.n	8018796 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018798:	693b      	ldr	r3, [r7, #16]
 801879a:	3318      	adds	r3, #24
 801879c:	4618      	mov	r0, r3
 801879e:	f7fe fd97 	bl	80172d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80187a2:	4b1e      	ldr	r3, [pc, #120]	; (801881c <xTaskRemoveFromEventList+0xb0>)
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d11d      	bne.n	80187e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80187aa:	693b      	ldr	r3, [r7, #16]
 80187ac:	3304      	adds	r3, #4
 80187ae:	4618      	mov	r0, r3
 80187b0:	f7fe fd8e 	bl	80172d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80187b4:	693b      	ldr	r3, [r7, #16]
 80187b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187b8:	4b19      	ldr	r3, [pc, #100]	; (8018820 <xTaskRemoveFromEventList+0xb4>)
 80187ba:	681b      	ldr	r3, [r3, #0]
 80187bc:	429a      	cmp	r2, r3
 80187be:	d903      	bls.n	80187c8 <xTaskRemoveFromEventList+0x5c>
 80187c0:	693b      	ldr	r3, [r7, #16]
 80187c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187c4:	4a16      	ldr	r2, [pc, #88]	; (8018820 <xTaskRemoveFromEventList+0xb4>)
 80187c6:	6013      	str	r3, [r2, #0]
 80187c8:	693b      	ldr	r3, [r7, #16]
 80187ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187cc:	4613      	mov	r3, r2
 80187ce:	009b      	lsls	r3, r3, #2
 80187d0:	4413      	add	r3, r2
 80187d2:	009b      	lsls	r3, r3, #2
 80187d4:	4a13      	ldr	r2, [pc, #76]	; (8018824 <xTaskRemoveFromEventList+0xb8>)
 80187d6:	441a      	add	r2, r3
 80187d8:	693b      	ldr	r3, [r7, #16]
 80187da:	3304      	adds	r3, #4
 80187dc:	4619      	mov	r1, r3
 80187de:	4610      	mov	r0, r2
 80187e0:	f7fe fd19 	bl	8017216 <vListInsertEnd>
 80187e4:	e005      	b.n	80187f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80187e6:	693b      	ldr	r3, [r7, #16]
 80187e8:	3318      	adds	r3, #24
 80187ea:	4619      	mov	r1, r3
 80187ec:	480e      	ldr	r0, [pc, #56]	; (8018828 <xTaskRemoveFromEventList+0xbc>)
 80187ee:	f7fe fd12 	bl	8017216 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80187f2:	693b      	ldr	r3, [r7, #16]
 80187f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187f6:	4b0d      	ldr	r3, [pc, #52]	; (801882c <xTaskRemoveFromEventList+0xc0>)
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187fc:	429a      	cmp	r2, r3
 80187fe:	d905      	bls.n	801880c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018800:	2301      	movs	r3, #1
 8018802:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018804:	4b0a      	ldr	r3, [pc, #40]	; (8018830 <xTaskRemoveFromEventList+0xc4>)
 8018806:	2201      	movs	r2, #1
 8018808:	601a      	str	r2, [r3, #0]
 801880a:	e001      	b.n	8018810 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801880c:	2300      	movs	r3, #0
 801880e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018810:	697b      	ldr	r3, [r7, #20]
}
 8018812:	4618      	mov	r0, r3
 8018814:	3718      	adds	r7, #24
 8018816:	46bd      	mov	sp, r7
 8018818:	bd80      	pop	{r7, pc}
 801881a:	bf00      	nop
 801881c:	20001cc0 	.word	0x20001cc0
 8018820:	20001ca0 	.word	0x20001ca0
 8018824:	200017c8 	.word	0x200017c8
 8018828:	20001c58 	.word	0x20001c58
 801882c:	200017c4 	.word	0x200017c4
 8018830:	20001cac 	.word	0x20001cac

08018834 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018834:	b480      	push	{r7}
 8018836:	b083      	sub	sp, #12
 8018838:	af00      	add	r7, sp, #0
 801883a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801883c:	4b06      	ldr	r3, [pc, #24]	; (8018858 <vTaskInternalSetTimeOutState+0x24>)
 801883e:	681a      	ldr	r2, [r3, #0]
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018844:	4b05      	ldr	r3, [pc, #20]	; (801885c <vTaskInternalSetTimeOutState+0x28>)
 8018846:	681a      	ldr	r2, [r3, #0]
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	605a      	str	r2, [r3, #4]
}
 801884c:	bf00      	nop
 801884e:	370c      	adds	r7, #12
 8018850:	46bd      	mov	sp, r7
 8018852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018856:	4770      	bx	lr
 8018858:	20001cb0 	.word	0x20001cb0
 801885c:	20001c9c 	.word	0x20001c9c

08018860 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018860:	b580      	push	{r7, lr}
 8018862:	b088      	sub	sp, #32
 8018864:	af00      	add	r7, sp, #0
 8018866:	6078      	str	r0, [r7, #4]
 8018868:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	2b00      	cmp	r3, #0
 801886e:	d10a      	bne.n	8018886 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8018870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018874:	f383 8811 	msr	BASEPRI, r3
 8018878:	f3bf 8f6f 	isb	sy
 801887c:	f3bf 8f4f 	dsb	sy
 8018880:	613b      	str	r3, [r7, #16]
}
 8018882:	bf00      	nop
 8018884:	e7fe      	b.n	8018884 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8018886:	683b      	ldr	r3, [r7, #0]
 8018888:	2b00      	cmp	r3, #0
 801888a:	d10a      	bne.n	80188a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801888c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018890:	f383 8811 	msr	BASEPRI, r3
 8018894:	f3bf 8f6f 	isb	sy
 8018898:	f3bf 8f4f 	dsb	sy
 801889c:	60fb      	str	r3, [r7, #12]
}
 801889e:	bf00      	nop
 80188a0:	e7fe      	b.n	80188a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80188a2:	f000 fe7f 	bl	80195a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80188a6:	4b1d      	ldr	r3, [pc, #116]	; (801891c <xTaskCheckForTimeOut+0xbc>)
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	685b      	ldr	r3, [r3, #4]
 80188b0:	69ba      	ldr	r2, [r7, #24]
 80188b2:	1ad3      	subs	r3, r2, r3
 80188b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80188b6:	683b      	ldr	r3, [r7, #0]
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80188be:	d102      	bne.n	80188c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80188c0:	2300      	movs	r3, #0
 80188c2:	61fb      	str	r3, [r7, #28]
 80188c4:	e023      	b.n	801890e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	681a      	ldr	r2, [r3, #0]
 80188ca:	4b15      	ldr	r3, [pc, #84]	; (8018920 <xTaskCheckForTimeOut+0xc0>)
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	429a      	cmp	r2, r3
 80188d0:	d007      	beq.n	80188e2 <xTaskCheckForTimeOut+0x82>
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	685b      	ldr	r3, [r3, #4]
 80188d6:	69ba      	ldr	r2, [r7, #24]
 80188d8:	429a      	cmp	r2, r3
 80188da:	d302      	bcc.n	80188e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80188dc:	2301      	movs	r3, #1
 80188de:	61fb      	str	r3, [r7, #28]
 80188e0:	e015      	b.n	801890e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80188e2:	683b      	ldr	r3, [r7, #0]
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	697a      	ldr	r2, [r7, #20]
 80188e8:	429a      	cmp	r2, r3
 80188ea:	d20b      	bcs.n	8018904 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80188ec:	683b      	ldr	r3, [r7, #0]
 80188ee:	681a      	ldr	r2, [r3, #0]
 80188f0:	697b      	ldr	r3, [r7, #20]
 80188f2:	1ad2      	subs	r2, r2, r3
 80188f4:	683b      	ldr	r3, [r7, #0]
 80188f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80188f8:	6878      	ldr	r0, [r7, #4]
 80188fa:	f7ff ff9b 	bl	8018834 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80188fe:	2300      	movs	r3, #0
 8018900:	61fb      	str	r3, [r7, #28]
 8018902:	e004      	b.n	801890e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8018904:	683b      	ldr	r3, [r7, #0]
 8018906:	2200      	movs	r2, #0
 8018908:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801890a:	2301      	movs	r3, #1
 801890c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801890e:	f000 fe79 	bl	8019604 <vPortExitCritical>

	return xReturn;
 8018912:	69fb      	ldr	r3, [r7, #28]
}
 8018914:	4618      	mov	r0, r3
 8018916:	3720      	adds	r7, #32
 8018918:	46bd      	mov	sp, r7
 801891a:	bd80      	pop	{r7, pc}
 801891c:	20001c9c 	.word	0x20001c9c
 8018920:	20001cb0 	.word	0x20001cb0

08018924 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018924:	b480      	push	{r7}
 8018926:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018928:	4b03      	ldr	r3, [pc, #12]	; (8018938 <vTaskMissedYield+0x14>)
 801892a:	2201      	movs	r2, #1
 801892c:	601a      	str	r2, [r3, #0]
}
 801892e:	bf00      	nop
 8018930:	46bd      	mov	sp, r7
 8018932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018936:	4770      	bx	lr
 8018938:	20001cac 	.word	0x20001cac

0801893c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801893c:	b580      	push	{r7, lr}
 801893e:	b082      	sub	sp, #8
 8018940:	af00      	add	r7, sp, #0
 8018942:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018944:	f000 f852 	bl	80189ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018948:	4b06      	ldr	r3, [pc, #24]	; (8018964 <prvIdleTask+0x28>)
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	2b01      	cmp	r3, #1
 801894e:	d9f9      	bls.n	8018944 <prvIdleTask+0x8>
			{
				taskYIELD();
 8018950:	4b05      	ldr	r3, [pc, #20]	; (8018968 <prvIdleTask+0x2c>)
 8018952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018956:	601a      	str	r2, [r3, #0]
 8018958:	f3bf 8f4f 	dsb	sy
 801895c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018960:	e7f0      	b.n	8018944 <prvIdleTask+0x8>
 8018962:	bf00      	nop
 8018964:	200017c8 	.word	0x200017c8
 8018968:	e000ed04 	.word	0xe000ed04

0801896c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801896c:	b580      	push	{r7, lr}
 801896e:	b082      	sub	sp, #8
 8018970:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018972:	2300      	movs	r3, #0
 8018974:	607b      	str	r3, [r7, #4]
 8018976:	e00c      	b.n	8018992 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018978:	687a      	ldr	r2, [r7, #4]
 801897a:	4613      	mov	r3, r2
 801897c:	009b      	lsls	r3, r3, #2
 801897e:	4413      	add	r3, r2
 8018980:	009b      	lsls	r3, r3, #2
 8018982:	4a12      	ldr	r2, [pc, #72]	; (80189cc <prvInitialiseTaskLists+0x60>)
 8018984:	4413      	add	r3, r2
 8018986:	4618      	mov	r0, r3
 8018988:	f7fe fc18 	bl	80171bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	3301      	adds	r3, #1
 8018990:	607b      	str	r3, [r7, #4]
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	2b37      	cmp	r3, #55	; 0x37
 8018996:	d9ef      	bls.n	8018978 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018998:	480d      	ldr	r0, [pc, #52]	; (80189d0 <prvInitialiseTaskLists+0x64>)
 801899a:	f7fe fc0f 	bl	80171bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801899e:	480d      	ldr	r0, [pc, #52]	; (80189d4 <prvInitialiseTaskLists+0x68>)
 80189a0:	f7fe fc0c 	bl	80171bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80189a4:	480c      	ldr	r0, [pc, #48]	; (80189d8 <prvInitialiseTaskLists+0x6c>)
 80189a6:	f7fe fc09 	bl	80171bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80189aa:	480c      	ldr	r0, [pc, #48]	; (80189dc <prvInitialiseTaskLists+0x70>)
 80189ac:	f7fe fc06 	bl	80171bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80189b0:	480b      	ldr	r0, [pc, #44]	; (80189e0 <prvInitialiseTaskLists+0x74>)
 80189b2:	f7fe fc03 	bl	80171bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80189b6:	4b0b      	ldr	r3, [pc, #44]	; (80189e4 <prvInitialiseTaskLists+0x78>)
 80189b8:	4a05      	ldr	r2, [pc, #20]	; (80189d0 <prvInitialiseTaskLists+0x64>)
 80189ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80189bc:	4b0a      	ldr	r3, [pc, #40]	; (80189e8 <prvInitialiseTaskLists+0x7c>)
 80189be:	4a05      	ldr	r2, [pc, #20]	; (80189d4 <prvInitialiseTaskLists+0x68>)
 80189c0:	601a      	str	r2, [r3, #0]
}
 80189c2:	bf00      	nop
 80189c4:	3708      	adds	r7, #8
 80189c6:	46bd      	mov	sp, r7
 80189c8:	bd80      	pop	{r7, pc}
 80189ca:	bf00      	nop
 80189cc:	200017c8 	.word	0x200017c8
 80189d0:	20001c28 	.word	0x20001c28
 80189d4:	20001c3c 	.word	0x20001c3c
 80189d8:	20001c58 	.word	0x20001c58
 80189dc:	20001c6c 	.word	0x20001c6c
 80189e0:	20001c84 	.word	0x20001c84
 80189e4:	20001c50 	.word	0x20001c50
 80189e8:	20001c54 	.word	0x20001c54

080189ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80189ec:	b580      	push	{r7, lr}
 80189ee:	b082      	sub	sp, #8
 80189f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80189f2:	e019      	b.n	8018a28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80189f4:	f000 fdd6 	bl	80195a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80189f8:	4b10      	ldr	r3, [pc, #64]	; (8018a3c <prvCheckTasksWaitingTermination+0x50>)
 80189fa:	68db      	ldr	r3, [r3, #12]
 80189fc:	68db      	ldr	r3, [r3, #12]
 80189fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	3304      	adds	r3, #4
 8018a04:	4618      	mov	r0, r3
 8018a06:	f7fe fc63 	bl	80172d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018a0a:	4b0d      	ldr	r3, [pc, #52]	; (8018a40 <prvCheckTasksWaitingTermination+0x54>)
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	3b01      	subs	r3, #1
 8018a10:	4a0b      	ldr	r2, [pc, #44]	; (8018a40 <prvCheckTasksWaitingTermination+0x54>)
 8018a12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018a14:	4b0b      	ldr	r3, [pc, #44]	; (8018a44 <prvCheckTasksWaitingTermination+0x58>)
 8018a16:	681b      	ldr	r3, [r3, #0]
 8018a18:	3b01      	subs	r3, #1
 8018a1a:	4a0a      	ldr	r2, [pc, #40]	; (8018a44 <prvCheckTasksWaitingTermination+0x58>)
 8018a1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018a1e:	f000 fdf1 	bl	8019604 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018a22:	6878      	ldr	r0, [r7, #4]
 8018a24:	f000 f810 	bl	8018a48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018a28:	4b06      	ldr	r3, [pc, #24]	; (8018a44 <prvCheckTasksWaitingTermination+0x58>)
 8018a2a:	681b      	ldr	r3, [r3, #0]
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d1e1      	bne.n	80189f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018a30:	bf00      	nop
 8018a32:	bf00      	nop
 8018a34:	3708      	adds	r7, #8
 8018a36:	46bd      	mov	sp, r7
 8018a38:	bd80      	pop	{r7, pc}
 8018a3a:	bf00      	nop
 8018a3c:	20001c6c 	.word	0x20001c6c
 8018a40:	20001c98 	.word	0x20001c98
 8018a44:	20001c80 	.word	0x20001c80

08018a48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018a48:	b580      	push	{r7, lr}
 8018a4a:	b084      	sub	sp, #16
 8018a4c:	af00      	add	r7, sp, #0
 8018a4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d108      	bne.n	8018a6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a5e:	4618      	mov	r0, r3
 8018a60:	f000 ff8e 	bl	8019980 <vPortFree>
				vPortFree( pxTCB );
 8018a64:	6878      	ldr	r0, [r7, #4]
 8018a66:	f000 ff8b 	bl	8019980 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018a6a:	e018      	b.n	8018a9e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018a72:	2b01      	cmp	r3, #1
 8018a74:	d103      	bne.n	8018a7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8018a76:	6878      	ldr	r0, [r7, #4]
 8018a78:	f000 ff82 	bl	8019980 <vPortFree>
	}
 8018a7c:	e00f      	b.n	8018a9e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018a84:	2b02      	cmp	r3, #2
 8018a86:	d00a      	beq.n	8018a9e <prvDeleteTCB+0x56>
	__asm volatile
 8018a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a8c:	f383 8811 	msr	BASEPRI, r3
 8018a90:	f3bf 8f6f 	isb	sy
 8018a94:	f3bf 8f4f 	dsb	sy
 8018a98:	60fb      	str	r3, [r7, #12]
}
 8018a9a:	bf00      	nop
 8018a9c:	e7fe      	b.n	8018a9c <prvDeleteTCB+0x54>
	}
 8018a9e:	bf00      	nop
 8018aa0:	3710      	adds	r7, #16
 8018aa2:	46bd      	mov	sp, r7
 8018aa4:	bd80      	pop	{r7, pc}
	...

08018aa8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018aa8:	b480      	push	{r7}
 8018aaa:	b083      	sub	sp, #12
 8018aac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018aae:	4b0c      	ldr	r3, [pc, #48]	; (8018ae0 <prvResetNextTaskUnblockTime+0x38>)
 8018ab0:	681b      	ldr	r3, [r3, #0]
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d104      	bne.n	8018ac2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018ab8:	4b0a      	ldr	r3, [pc, #40]	; (8018ae4 <prvResetNextTaskUnblockTime+0x3c>)
 8018aba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018abe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018ac0:	e008      	b.n	8018ad4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018ac2:	4b07      	ldr	r3, [pc, #28]	; (8018ae0 <prvResetNextTaskUnblockTime+0x38>)
 8018ac4:	681b      	ldr	r3, [r3, #0]
 8018ac6:	68db      	ldr	r3, [r3, #12]
 8018ac8:	68db      	ldr	r3, [r3, #12]
 8018aca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	685b      	ldr	r3, [r3, #4]
 8018ad0:	4a04      	ldr	r2, [pc, #16]	; (8018ae4 <prvResetNextTaskUnblockTime+0x3c>)
 8018ad2:	6013      	str	r3, [r2, #0]
}
 8018ad4:	bf00      	nop
 8018ad6:	370c      	adds	r7, #12
 8018ad8:	46bd      	mov	sp, r7
 8018ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ade:	4770      	bx	lr
 8018ae0:	20001c50 	.word	0x20001c50
 8018ae4:	20001cb8 	.word	0x20001cb8

08018ae8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018ae8:	b480      	push	{r7}
 8018aea:	b083      	sub	sp, #12
 8018aec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018aee:	4b0b      	ldr	r3, [pc, #44]	; (8018b1c <xTaskGetSchedulerState+0x34>)
 8018af0:	681b      	ldr	r3, [r3, #0]
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d102      	bne.n	8018afc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018af6:	2301      	movs	r3, #1
 8018af8:	607b      	str	r3, [r7, #4]
 8018afa:	e008      	b.n	8018b0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018afc:	4b08      	ldr	r3, [pc, #32]	; (8018b20 <xTaskGetSchedulerState+0x38>)
 8018afe:	681b      	ldr	r3, [r3, #0]
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d102      	bne.n	8018b0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018b04:	2302      	movs	r3, #2
 8018b06:	607b      	str	r3, [r7, #4]
 8018b08:	e001      	b.n	8018b0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018b0a:	2300      	movs	r3, #0
 8018b0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018b0e:	687b      	ldr	r3, [r7, #4]
	}
 8018b10:	4618      	mov	r0, r3
 8018b12:	370c      	adds	r7, #12
 8018b14:	46bd      	mov	sp, r7
 8018b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b1a:	4770      	bx	lr
 8018b1c:	20001ca4 	.word	0x20001ca4
 8018b20:	20001cc0 	.word	0x20001cc0

08018b24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018b24:	b580      	push	{r7, lr}
 8018b26:	b086      	sub	sp, #24
 8018b28:	af00      	add	r7, sp, #0
 8018b2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018b30:	2300      	movs	r3, #0
 8018b32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d056      	beq.n	8018be8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018b3a:	4b2e      	ldr	r3, [pc, #184]	; (8018bf4 <xTaskPriorityDisinherit+0xd0>)
 8018b3c:	681b      	ldr	r3, [r3, #0]
 8018b3e:	693a      	ldr	r2, [r7, #16]
 8018b40:	429a      	cmp	r2, r3
 8018b42:	d00a      	beq.n	8018b5a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b48:	f383 8811 	msr	BASEPRI, r3
 8018b4c:	f3bf 8f6f 	isb	sy
 8018b50:	f3bf 8f4f 	dsb	sy
 8018b54:	60fb      	str	r3, [r7, #12]
}
 8018b56:	bf00      	nop
 8018b58:	e7fe      	b.n	8018b58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018b5a:	693b      	ldr	r3, [r7, #16]
 8018b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d10a      	bne.n	8018b78 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8018b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b66:	f383 8811 	msr	BASEPRI, r3
 8018b6a:	f3bf 8f6f 	isb	sy
 8018b6e:	f3bf 8f4f 	dsb	sy
 8018b72:	60bb      	str	r3, [r7, #8]
}
 8018b74:	bf00      	nop
 8018b76:	e7fe      	b.n	8018b76 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8018b78:	693b      	ldr	r3, [r7, #16]
 8018b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b7c:	1e5a      	subs	r2, r3, #1
 8018b7e:	693b      	ldr	r3, [r7, #16]
 8018b80:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018b82:	693b      	ldr	r3, [r7, #16]
 8018b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b86:	693b      	ldr	r3, [r7, #16]
 8018b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018b8a:	429a      	cmp	r2, r3
 8018b8c:	d02c      	beq.n	8018be8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018b8e:	693b      	ldr	r3, [r7, #16]
 8018b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d128      	bne.n	8018be8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018b96:	693b      	ldr	r3, [r7, #16]
 8018b98:	3304      	adds	r3, #4
 8018b9a:	4618      	mov	r0, r3
 8018b9c:	f7fe fb98 	bl	80172d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018ba0:	693b      	ldr	r3, [r7, #16]
 8018ba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018ba4:	693b      	ldr	r3, [r7, #16]
 8018ba6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018ba8:	693b      	ldr	r3, [r7, #16]
 8018baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018bb0:	693b      	ldr	r3, [r7, #16]
 8018bb2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018bb4:	693b      	ldr	r3, [r7, #16]
 8018bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018bb8:	4b0f      	ldr	r3, [pc, #60]	; (8018bf8 <xTaskPriorityDisinherit+0xd4>)
 8018bba:	681b      	ldr	r3, [r3, #0]
 8018bbc:	429a      	cmp	r2, r3
 8018bbe:	d903      	bls.n	8018bc8 <xTaskPriorityDisinherit+0xa4>
 8018bc0:	693b      	ldr	r3, [r7, #16]
 8018bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bc4:	4a0c      	ldr	r2, [pc, #48]	; (8018bf8 <xTaskPriorityDisinherit+0xd4>)
 8018bc6:	6013      	str	r3, [r2, #0]
 8018bc8:	693b      	ldr	r3, [r7, #16]
 8018bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018bcc:	4613      	mov	r3, r2
 8018bce:	009b      	lsls	r3, r3, #2
 8018bd0:	4413      	add	r3, r2
 8018bd2:	009b      	lsls	r3, r3, #2
 8018bd4:	4a09      	ldr	r2, [pc, #36]	; (8018bfc <xTaskPriorityDisinherit+0xd8>)
 8018bd6:	441a      	add	r2, r3
 8018bd8:	693b      	ldr	r3, [r7, #16]
 8018bda:	3304      	adds	r3, #4
 8018bdc:	4619      	mov	r1, r3
 8018bde:	4610      	mov	r0, r2
 8018be0:	f7fe fb19 	bl	8017216 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018be4:	2301      	movs	r3, #1
 8018be6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018be8:	697b      	ldr	r3, [r7, #20]
	}
 8018bea:	4618      	mov	r0, r3
 8018bec:	3718      	adds	r7, #24
 8018bee:	46bd      	mov	sp, r7
 8018bf0:	bd80      	pop	{r7, pc}
 8018bf2:	bf00      	nop
 8018bf4:	200017c4 	.word	0x200017c4
 8018bf8:	20001ca0 	.word	0x20001ca0
 8018bfc:	200017c8 	.word	0x200017c8

08018c00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018c00:	b580      	push	{r7, lr}
 8018c02:	b084      	sub	sp, #16
 8018c04:	af00      	add	r7, sp, #0
 8018c06:	6078      	str	r0, [r7, #4]
 8018c08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018c0a:	4b21      	ldr	r3, [pc, #132]	; (8018c90 <prvAddCurrentTaskToDelayedList+0x90>)
 8018c0c:	681b      	ldr	r3, [r3, #0]
 8018c0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018c10:	4b20      	ldr	r3, [pc, #128]	; (8018c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8018c12:	681b      	ldr	r3, [r3, #0]
 8018c14:	3304      	adds	r3, #4
 8018c16:	4618      	mov	r0, r3
 8018c18:	f7fe fb5a 	bl	80172d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018c22:	d10a      	bne.n	8018c3a <prvAddCurrentTaskToDelayedList+0x3a>
 8018c24:	683b      	ldr	r3, [r7, #0]
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d007      	beq.n	8018c3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018c2a:	4b1a      	ldr	r3, [pc, #104]	; (8018c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	3304      	adds	r3, #4
 8018c30:	4619      	mov	r1, r3
 8018c32:	4819      	ldr	r0, [pc, #100]	; (8018c98 <prvAddCurrentTaskToDelayedList+0x98>)
 8018c34:	f7fe faef 	bl	8017216 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018c38:	e026      	b.n	8018c88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018c3a:	68fa      	ldr	r2, [r7, #12]
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	4413      	add	r3, r2
 8018c40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018c42:	4b14      	ldr	r3, [pc, #80]	; (8018c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	68ba      	ldr	r2, [r7, #8]
 8018c48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018c4a:	68ba      	ldr	r2, [r7, #8]
 8018c4c:	68fb      	ldr	r3, [r7, #12]
 8018c4e:	429a      	cmp	r2, r3
 8018c50:	d209      	bcs.n	8018c66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018c52:	4b12      	ldr	r3, [pc, #72]	; (8018c9c <prvAddCurrentTaskToDelayedList+0x9c>)
 8018c54:	681a      	ldr	r2, [r3, #0]
 8018c56:	4b0f      	ldr	r3, [pc, #60]	; (8018c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8018c58:	681b      	ldr	r3, [r3, #0]
 8018c5a:	3304      	adds	r3, #4
 8018c5c:	4619      	mov	r1, r3
 8018c5e:	4610      	mov	r0, r2
 8018c60:	f7fe fafd 	bl	801725e <vListInsert>
}
 8018c64:	e010      	b.n	8018c88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018c66:	4b0e      	ldr	r3, [pc, #56]	; (8018ca0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018c68:	681a      	ldr	r2, [r3, #0]
 8018c6a:	4b0a      	ldr	r3, [pc, #40]	; (8018c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	3304      	adds	r3, #4
 8018c70:	4619      	mov	r1, r3
 8018c72:	4610      	mov	r0, r2
 8018c74:	f7fe faf3 	bl	801725e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018c78:	4b0a      	ldr	r3, [pc, #40]	; (8018ca4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	68ba      	ldr	r2, [r7, #8]
 8018c7e:	429a      	cmp	r2, r3
 8018c80:	d202      	bcs.n	8018c88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018c82:	4a08      	ldr	r2, [pc, #32]	; (8018ca4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018c84:	68bb      	ldr	r3, [r7, #8]
 8018c86:	6013      	str	r3, [r2, #0]
}
 8018c88:	bf00      	nop
 8018c8a:	3710      	adds	r7, #16
 8018c8c:	46bd      	mov	sp, r7
 8018c8e:	bd80      	pop	{r7, pc}
 8018c90:	20001c9c 	.word	0x20001c9c
 8018c94:	200017c4 	.word	0x200017c4
 8018c98:	20001c84 	.word	0x20001c84
 8018c9c:	20001c54 	.word	0x20001c54
 8018ca0:	20001c50 	.word	0x20001c50
 8018ca4:	20001cb8 	.word	0x20001cb8

08018ca8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018ca8:	b580      	push	{r7, lr}
 8018caa:	b08a      	sub	sp, #40	; 0x28
 8018cac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018cae:	2300      	movs	r3, #0
 8018cb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018cb2:	f000 fb07 	bl	80192c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018cb6:	4b1c      	ldr	r3, [pc, #112]	; (8018d28 <xTimerCreateTimerTask+0x80>)
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d021      	beq.n	8018d02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018cbe:	2300      	movs	r3, #0
 8018cc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018cc2:	2300      	movs	r3, #0
 8018cc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018cc6:	1d3a      	adds	r2, r7, #4
 8018cc8:	f107 0108 	add.w	r1, r7, #8
 8018ccc:	f107 030c 	add.w	r3, r7, #12
 8018cd0:	4618      	mov	r0, r3
 8018cd2:	f7fe fa59 	bl	8017188 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018cd6:	6879      	ldr	r1, [r7, #4]
 8018cd8:	68bb      	ldr	r3, [r7, #8]
 8018cda:	68fa      	ldr	r2, [r7, #12]
 8018cdc:	9202      	str	r2, [sp, #8]
 8018cde:	9301      	str	r3, [sp, #4]
 8018ce0:	2302      	movs	r3, #2
 8018ce2:	9300      	str	r3, [sp, #0]
 8018ce4:	2300      	movs	r3, #0
 8018ce6:	460a      	mov	r2, r1
 8018ce8:	4910      	ldr	r1, [pc, #64]	; (8018d2c <xTimerCreateTimerTask+0x84>)
 8018cea:	4811      	ldr	r0, [pc, #68]	; (8018d30 <xTimerCreateTimerTask+0x88>)
 8018cec:	f7ff f806 	bl	8017cfc <xTaskCreateStatic>
 8018cf0:	4603      	mov	r3, r0
 8018cf2:	4a10      	ldr	r2, [pc, #64]	; (8018d34 <xTimerCreateTimerTask+0x8c>)
 8018cf4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018cf6:	4b0f      	ldr	r3, [pc, #60]	; (8018d34 <xTimerCreateTimerTask+0x8c>)
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d001      	beq.n	8018d02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018cfe:	2301      	movs	r3, #1
 8018d00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018d02:	697b      	ldr	r3, [r7, #20]
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d10a      	bne.n	8018d1e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d0c:	f383 8811 	msr	BASEPRI, r3
 8018d10:	f3bf 8f6f 	isb	sy
 8018d14:	f3bf 8f4f 	dsb	sy
 8018d18:	613b      	str	r3, [r7, #16]
}
 8018d1a:	bf00      	nop
 8018d1c:	e7fe      	b.n	8018d1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018d1e:	697b      	ldr	r3, [r7, #20]
}
 8018d20:	4618      	mov	r0, r3
 8018d22:	3718      	adds	r7, #24
 8018d24:	46bd      	mov	sp, r7
 8018d26:	bd80      	pop	{r7, pc}
 8018d28:	20001cf4 	.word	0x20001cf4
 8018d2c:	08020090 	.word	0x08020090
 8018d30:	08018e6d 	.word	0x08018e6d
 8018d34:	20001cf8 	.word	0x20001cf8

08018d38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018d38:	b580      	push	{r7, lr}
 8018d3a:	b08a      	sub	sp, #40	; 0x28
 8018d3c:	af00      	add	r7, sp, #0
 8018d3e:	60f8      	str	r0, [r7, #12]
 8018d40:	60b9      	str	r1, [r7, #8]
 8018d42:	607a      	str	r2, [r7, #4]
 8018d44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018d46:	2300      	movs	r3, #0
 8018d48:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018d4a:	68fb      	ldr	r3, [r7, #12]
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d10a      	bne.n	8018d66 <xTimerGenericCommand+0x2e>
	__asm volatile
 8018d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d54:	f383 8811 	msr	BASEPRI, r3
 8018d58:	f3bf 8f6f 	isb	sy
 8018d5c:	f3bf 8f4f 	dsb	sy
 8018d60:	623b      	str	r3, [r7, #32]
}
 8018d62:	bf00      	nop
 8018d64:	e7fe      	b.n	8018d64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018d66:	4b1a      	ldr	r3, [pc, #104]	; (8018dd0 <xTimerGenericCommand+0x98>)
 8018d68:	681b      	ldr	r3, [r3, #0]
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d02a      	beq.n	8018dc4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018d6e:	68bb      	ldr	r3, [r7, #8]
 8018d70:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018d76:	68fb      	ldr	r3, [r7, #12]
 8018d78:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018d7a:	68bb      	ldr	r3, [r7, #8]
 8018d7c:	2b05      	cmp	r3, #5
 8018d7e:	dc18      	bgt.n	8018db2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018d80:	f7ff feb2 	bl	8018ae8 <xTaskGetSchedulerState>
 8018d84:	4603      	mov	r3, r0
 8018d86:	2b02      	cmp	r3, #2
 8018d88:	d109      	bne.n	8018d9e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018d8a:	4b11      	ldr	r3, [pc, #68]	; (8018dd0 <xTimerGenericCommand+0x98>)
 8018d8c:	6818      	ldr	r0, [r3, #0]
 8018d8e:	f107 0110 	add.w	r1, r7, #16
 8018d92:	2300      	movs	r3, #0
 8018d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018d96:	f7fe fbc9 	bl	801752c <xQueueGenericSend>
 8018d9a:	6278      	str	r0, [r7, #36]	; 0x24
 8018d9c:	e012      	b.n	8018dc4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018d9e:	4b0c      	ldr	r3, [pc, #48]	; (8018dd0 <xTimerGenericCommand+0x98>)
 8018da0:	6818      	ldr	r0, [r3, #0]
 8018da2:	f107 0110 	add.w	r1, r7, #16
 8018da6:	2300      	movs	r3, #0
 8018da8:	2200      	movs	r2, #0
 8018daa:	f7fe fbbf 	bl	801752c <xQueueGenericSend>
 8018dae:	6278      	str	r0, [r7, #36]	; 0x24
 8018db0:	e008      	b.n	8018dc4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018db2:	4b07      	ldr	r3, [pc, #28]	; (8018dd0 <xTimerGenericCommand+0x98>)
 8018db4:	6818      	ldr	r0, [r3, #0]
 8018db6:	f107 0110 	add.w	r1, r7, #16
 8018dba:	2300      	movs	r3, #0
 8018dbc:	683a      	ldr	r2, [r7, #0]
 8018dbe:	f7fe fcb3 	bl	8017728 <xQueueGenericSendFromISR>
 8018dc2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	3728      	adds	r7, #40	; 0x28
 8018dca:	46bd      	mov	sp, r7
 8018dcc:	bd80      	pop	{r7, pc}
 8018dce:	bf00      	nop
 8018dd0:	20001cf4 	.word	0x20001cf4

08018dd4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018dd4:	b580      	push	{r7, lr}
 8018dd6:	b088      	sub	sp, #32
 8018dd8:	af02      	add	r7, sp, #8
 8018dda:	6078      	str	r0, [r7, #4]
 8018ddc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018dde:	4b22      	ldr	r3, [pc, #136]	; (8018e68 <prvProcessExpiredTimer+0x94>)
 8018de0:	681b      	ldr	r3, [r3, #0]
 8018de2:	68db      	ldr	r3, [r3, #12]
 8018de4:	68db      	ldr	r3, [r3, #12]
 8018de6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018de8:	697b      	ldr	r3, [r7, #20]
 8018dea:	3304      	adds	r3, #4
 8018dec:	4618      	mov	r0, r3
 8018dee:	f7fe fa6f 	bl	80172d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018df2:	697b      	ldr	r3, [r7, #20]
 8018df4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018df8:	f003 0304 	and.w	r3, r3, #4
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	d022      	beq.n	8018e46 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018e00:	697b      	ldr	r3, [r7, #20]
 8018e02:	699a      	ldr	r2, [r3, #24]
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	18d1      	adds	r1, r2, r3
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	683a      	ldr	r2, [r7, #0]
 8018e0c:	6978      	ldr	r0, [r7, #20]
 8018e0e:	f000 f8d1 	bl	8018fb4 <prvInsertTimerInActiveList>
 8018e12:	4603      	mov	r3, r0
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d01f      	beq.n	8018e58 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018e18:	2300      	movs	r3, #0
 8018e1a:	9300      	str	r3, [sp, #0]
 8018e1c:	2300      	movs	r3, #0
 8018e1e:	687a      	ldr	r2, [r7, #4]
 8018e20:	2100      	movs	r1, #0
 8018e22:	6978      	ldr	r0, [r7, #20]
 8018e24:	f7ff ff88 	bl	8018d38 <xTimerGenericCommand>
 8018e28:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018e2a:	693b      	ldr	r3, [r7, #16]
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d113      	bne.n	8018e58 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e34:	f383 8811 	msr	BASEPRI, r3
 8018e38:	f3bf 8f6f 	isb	sy
 8018e3c:	f3bf 8f4f 	dsb	sy
 8018e40:	60fb      	str	r3, [r7, #12]
}
 8018e42:	bf00      	nop
 8018e44:	e7fe      	b.n	8018e44 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018e46:	697b      	ldr	r3, [r7, #20]
 8018e48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018e4c:	f023 0301 	bic.w	r3, r3, #1
 8018e50:	b2da      	uxtb	r2, r3
 8018e52:	697b      	ldr	r3, [r7, #20]
 8018e54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018e58:	697b      	ldr	r3, [r7, #20]
 8018e5a:	6a1b      	ldr	r3, [r3, #32]
 8018e5c:	6978      	ldr	r0, [r7, #20]
 8018e5e:	4798      	blx	r3
}
 8018e60:	bf00      	nop
 8018e62:	3718      	adds	r7, #24
 8018e64:	46bd      	mov	sp, r7
 8018e66:	bd80      	pop	{r7, pc}
 8018e68:	20001cec 	.word	0x20001cec

08018e6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018e6c:	b580      	push	{r7, lr}
 8018e6e:	b084      	sub	sp, #16
 8018e70:	af00      	add	r7, sp, #0
 8018e72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018e74:	f107 0308 	add.w	r3, r7, #8
 8018e78:	4618      	mov	r0, r3
 8018e7a:	f000 f857 	bl	8018f2c <prvGetNextExpireTime>
 8018e7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018e80:	68bb      	ldr	r3, [r7, #8]
 8018e82:	4619      	mov	r1, r3
 8018e84:	68f8      	ldr	r0, [r7, #12]
 8018e86:	f000 f803 	bl	8018e90 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018e8a:	f000 f8d5 	bl	8019038 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018e8e:	e7f1      	b.n	8018e74 <prvTimerTask+0x8>

08018e90 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018e90:	b580      	push	{r7, lr}
 8018e92:	b084      	sub	sp, #16
 8018e94:	af00      	add	r7, sp, #0
 8018e96:	6078      	str	r0, [r7, #4]
 8018e98:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018e9a:	f7ff fa43 	bl	8018324 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018e9e:	f107 0308 	add.w	r3, r7, #8
 8018ea2:	4618      	mov	r0, r3
 8018ea4:	f000 f866 	bl	8018f74 <prvSampleTimeNow>
 8018ea8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018eaa:	68bb      	ldr	r3, [r7, #8]
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d130      	bne.n	8018f12 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018eb0:	683b      	ldr	r3, [r7, #0]
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d10a      	bne.n	8018ecc <prvProcessTimerOrBlockTask+0x3c>
 8018eb6:	687a      	ldr	r2, [r7, #4]
 8018eb8:	68fb      	ldr	r3, [r7, #12]
 8018eba:	429a      	cmp	r2, r3
 8018ebc:	d806      	bhi.n	8018ecc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018ebe:	f7ff fa3f 	bl	8018340 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018ec2:	68f9      	ldr	r1, [r7, #12]
 8018ec4:	6878      	ldr	r0, [r7, #4]
 8018ec6:	f7ff ff85 	bl	8018dd4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018eca:	e024      	b.n	8018f16 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018ecc:	683b      	ldr	r3, [r7, #0]
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d008      	beq.n	8018ee4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018ed2:	4b13      	ldr	r3, [pc, #76]	; (8018f20 <prvProcessTimerOrBlockTask+0x90>)
 8018ed4:	681b      	ldr	r3, [r3, #0]
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d101      	bne.n	8018ee0 <prvProcessTimerOrBlockTask+0x50>
 8018edc:	2301      	movs	r3, #1
 8018ede:	e000      	b.n	8018ee2 <prvProcessTimerOrBlockTask+0x52>
 8018ee0:	2300      	movs	r3, #0
 8018ee2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018ee4:	4b0f      	ldr	r3, [pc, #60]	; (8018f24 <prvProcessTimerOrBlockTask+0x94>)
 8018ee6:	6818      	ldr	r0, [r3, #0]
 8018ee8:	687a      	ldr	r2, [r7, #4]
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	1ad3      	subs	r3, r2, r3
 8018eee:	683a      	ldr	r2, [r7, #0]
 8018ef0:	4619      	mov	r1, r3
 8018ef2:	f7fe fecf 	bl	8017c94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018ef6:	f7ff fa23 	bl	8018340 <xTaskResumeAll>
 8018efa:	4603      	mov	r3, r0
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d10a      	bne.n	8018f16 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018f00:	4b09      	ldr	r3, [pc, #36]	; (8018f28 <prvProcessTimerOrBlockTask+0x98>)
 8018f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018f06:	601a      	str	r2, [r3, #0]
 8018f08:	f3bf 8f4f 	dsb	sy
 8018f0c:	f3bf 8f6f 	isb	sy
}
 8018f10:	e001      	b.n	8018f16 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018f12:	f7ff fa15 	bl	8018340 <xTaskResumeAll>
}
 8018f16:	bf00      	nop
 8018f18:	3710      	adds	r7, #16
 8018f1a:	46bd      	mov	sp, r7
 8018f1c:	bd80      	pop	{r7, pc}
 8018f1e:	bf00      	nop
 8018f20:	20001cf0 	.word	0x20001cf0
 8018f24:	20001cf4 	.word	0x20001cf4
 8018f28:	e000ed04 	.word	0xe000ed04

08018f2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018f2c:	b480      	push	{r7}
 8018f2e:	b085      	sub	sp, #20
 8018f30:	af00      	add	r7, sp, #0
 8018f32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018f34:	4b0e      	ldr	r3, [pc, #56]	; (8018f70 <prvGetNextExpireTime+0x44>)
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	681b      	ldr	r3, [r3, #0]
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	d101      	bne.n	8018f42 <prvGetNextExpireTime+0x16>
 8018f3e:	2201      	movs	r2, #1
 8018f40:	e000      	b.n	8018f44 <prvGetNextExpireTime+0x18>
 8018f42:	2200      	movs	r2, #0
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	d105      	bne.n	8018f5c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018f50:	4b07      	ldr	r3, [pc, #28]	; (8018f70 <prvGetNextExpireTime+0x44>)
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	68db      	ldr	r3, [r3, #12]
 8018f56:	681b      	ldr	r3, [r3, #0]
 8018f58:	60fb      	str	r3, [r7, #12]
 8018f5a:	e001      	b.n	8018f60 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018f5c:	2300      	movs	r3, #0
 8018f5e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018f60:	68fb      	ldr	r3, [r7, #12]
}
 8018f62:	4618      	mov	r0, r3
 8018f64:	3714      	adds	r7, #20
 8018f66:	46bd      	mov	sp, r7
 8018f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f6c:	4770      	bx	lr
 8018f6e:	bf00      	nop
 8018f70:	20001cec 	.word	0x20001cec

08018f74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018f74:	b580      	push	{r7, lr}
 8018f76:	b084      	sub	sp, #16
 8018f78:	af00      	add	r7, sp, #0
 8018f7a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018f7c:	f7ff fa7e 	bl	801847c <xTaskGetTickCount>
 8018f80:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018f82:	4b0b      	ldr	r3, [pc, #44]	; (8018fb0 <prvSampleTimeNow+0x3c>)
 8018f84:	681b      	ldr	r3, [r3, #0]
 8018f86:	68fa      	ldr	r2, [r7, #12]
 8018f88:	429a      	cmp	r2, r3
 8018f8a:	d205      	bcs.n	8018f98 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018f8c:	f000 f936 	bl	80191fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	2201      	movs	r2, #1
 8018f94:	601a      	str	r2, [r3, #0]
 8018f96:	e002      	b.n	8018f9e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	2200      	movs	r2, #0
 8018f9c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018f9e:	4a04      	ldr	r2, [pc, #16]	; (8018fb0 <prvSampleTimeNow+0x3c>)
 8018fa0:	68fb      	ldr	r3, [r7, #12]
 8018fa2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018fa4:	68fb      	ldr	r3, [r7, #12]
}
 8018fa6:	4618      	mov	r0, r3
 8018fa8:	3710      	adds	r7, #16
 8018faa:	46bd      	mov	sp, r7
 8018fac:	bd80      	pop	{r7, pc}
 8018fae:	bf00      	nop
 8018fb0:	20001cfc 	.word	0x20001cfc

08018fb4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018fb4:	b580      	push	{r7, lr}
 8018fb6:	b086      	sub	sp, #24
 8018fb8:	af00      	add	r7, sp, #0
 8018fba:	60f8      	str	r0, [r7, #12]
 8018fbc:	60b9      	str	r1, [r7, #8]
 8018fbe:	607a      	str	r2, [r7, #4]
 8018fc0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8018fc2:	2300      	movs	r3, #0
 8018fc4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018fc6:	68fb      	ldr	r3, [r7, #12]
 8018fc8:	68ba      	ldr	r2, [r7, #8]
 8018fca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018fcc:	68fb      	ldr	r3, [r7, #12]
 8018fce:	68fa      	ldr	r2, [r7, #12]
 8018fd0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8018fd2:	68ba      	ldr	r2, [r7, #8]
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	429a      	cmp	r2, r3
 8018fd8:	d812      	bhi.n	8019000 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018fda:	687a      	ldr	r2, [r7, #4]
 8018fdc:	683b      	ldr	r3, [r7, #0]
 8018fde:	1ad2      	subs	r2, r2, r3
 8018fe0:	68fb      	ldr	r3, [r7, #12]
 8018fe2:	699b      	ldr	r3, [r3, #24]
 8018fe4:	429a      	cmp	r2, r3
 8018fe6:	d302      	bcc.n	8018fee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018fe8:	2301      	movs	r3, #1
 8018fea:	617b      	str	r3, [r7, #20]
 8018fec:	e01b      	b.n	8019026 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018fee:	4b10      	ldr	r3, [pc, #64]	; (8019030 <prvInsertTimerInActiveList+0x7c>)
 8018ff0:	681a      	ldr	r2, [r3, #0]
 8018ff2:	68fb      	ldr	r3, [r7, #12]
 8018ff4:	3304      	adds	r3, #4
 8018ff6:	4619      	mov	r1, r3
 8018ff8:	4610      	mov	r0, r2
 8018ffa:	f7fe f930 	bl	801725e <vListInsert>
 8018ffe:	e012      	b.n	8019026 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019000:	687a      	ldr	r2, [r7, #4]
 8019002:	683b      	ldr	r3, [r7, #0]
 8019004:	429a      	cmp	r2, r3
 8019006:	d206      	bcs.n	8019016 <prvInsertTimerInActiveList+0x62>
 8019008:	68ba      	ldr	r2, [r7, #8]
 801900a:	683b      	ldr	r3, [r7, #0]
 801900c:	429a      	cmp	r2, r3
 801900e:	d302      	bcc.n	8019016 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019010:	2301      	movs	r3, #1
 8019012:	617b      	str	r3, [r7, #20]
 8019014:	e007      	b.n	8019026 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019016:	4b07      	ldr	r3, [pc, #28]	; (8019034 <prvInsertTimerInActiveList+0x80>)
 8019018:	681a      	ldr	r2, [r3, #0]
 801901a:	68fb      	ldr	r3, [r7, #12]
 801901c:	3304      	adds	r3, #4
 801901e:	4619      	mov	r1, r3
 8019020:	4610      	mov	r0, r2
 8019022:	f7fe f91c 	bl	801725e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8019026:	697b      	ldr	r3, [r7, #20]
}
 8019028:	4618      	mov	r0, r3
 801902a:	3718      	adds	r7, #24
 801902c:	46bd      	mov	sp, r7
 801902e:	bd80      	pop	{r7, pc}
 8019030:	20001cf0 	.word	0x20001cf0
 8019034:	20001cec 	.word	0x20001cec

08019038 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019038:	b580      	push	{r7, lr}
 801903a:	b08e      	sub	sp, #56	; 0x38
 801903c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801903e:	e0ca      	b.n	80191d6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	2b00      	cmp	r3, #0
 8019044:	da18      	bge.n	8019078 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8019046:	1d3b      	adds	r3, r7, #4
 8019048:	3304      	adds	r3, #4
 801904a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801904c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801904e:	2b00      	cmp	r3, #0
 8019050:	d10a      	bne.n	8019068 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8019052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019056:	f383 8811 	msr	BASEPRI, r3
 801905a:	f3bf 8f6f 	isb	sy
 801905e:	f3bf 8f4f 	dsb	sy
 8019062:	61fb      	str	r3, [r7, #28]
}
 8019064:	bf00      	nop
 8019066:	e7fe      	b.n	8019066 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8019068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801906e:	6850      	ldr	r0, [r2, #4]
 8019070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019072:	6892      	ldr	r2, [r2, #8]
 8019074:	4611      	mov	r1, r2
 8019076:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	2b00      	cmp	r3, #0
 801907c:	f2c0 80aa 	blt.w	80191d4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019080:	68fb      	ldr	r3, [r7, #12]
 8019082:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019086:	695b      	ldr	r3, [r3, #20]
 8019088:	2b00      	cmp	r3, #0
 801908a:	d004      	beq.n	8019096 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801908c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801908e:	3304      	adds	r3, #4
 8019090:	4618      	mov	r0, r3
 8019092:	f7fe f91d 	bl	80172d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019096:	463b      	mov	r3, r7
 8019098:	4618      	mov	r0, r3
 801909a:	f7ff ff6b 	bl	8018f74 <prvSampleTimeNow>
 801909e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	2b09      	cmp	r3, #9
 80190a4:	f200 8097 	bhi.w	80191d6 <prvProcessReceivedCommands+0x19e>
 80190a8:	a201      	add	r2, pc, #4	; (adr r2, 80190b0 <prvProcessReceivedCommands+0x78>)
 80190aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190ae:	bf00      	nop
 80190b0:	080190d9 	.word	0x080190d9
 80190b4:	080190d9 	.word	0x080190d9
 80190b8:	080190d9 	.word	0x080190d9
 80190bc:	0801914d 	.word	0x0801914d
 80190c0:	08019161 	.word	0x08019161
 80190c4:	080191ab 	.word	0x080191ab
 80190c8:	080190d9 	.word	0x080190d9
 80190cc:	080190d9 	.word	0x080190d9
 80190d0:	0801914d 	.word	0x0801914d
 80190d4:	08019161 	.word	0x08019161
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80190d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80190de:	f043 0301 	orr.w	r3, r3, #1
 80190e2:	b2da      	uxtb	r2, r3
 80190e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80190ea:	68ba      	ldr	r2, [r7, #8]
 80190ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190ee:	699b      	ldr	r3, [r3, #24]
 80190f0:	18d1      	adds	r1, r2, r3
 80190f2:	68bb      	ldr	r3, [r7, #8]
 80190f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80190f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80190f8:	f7ff ff5c 	bl	8018fb4 <prvInsertTimerInActiveList>
 80190fc:	4603      	mov	r3, r0
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d069      	beq.n	80191d6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019104:	6a1b      	ldr	r3, [r3, #32]
 8019106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019108:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801910a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801910c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019110:	f003 0304 	and.w	r3, r3, #4
 8019114:	2b00      	cmp	r3, #0
 8019116:	d05e      	beq.n	80191d6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019118:	68ba      	ldr	r2, [r7, #8]
 801911a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801911c:	699b      	ldr	r3, [r3, #24]
 801911e:	441a      	add	r2, r3
 8019120:	2300      	movs	r3, #0
 8019122:	9300      	str	r3, [sp, #0]
 8019124:	2300      	movs	r3, #0
 8019126:	2100      	movs	r1, #0
 8019128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801912a:	f7ff fe05 	bl	8018d38 <xTimerGenericCommand>
 801912e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019130:	6a3b      	ldr	r3, [r7, #32]
 8019132:	2b00      	cmp	r3, #0
 8019134:	d14f      	bne.n	80191d6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8019136:	f04f 0350 	mov.w	r3, #80	; 0x50
 801913a:	f383 8811 	msr	BASEPRI, r3
 801913e:	f3bf 8f6f 	isb	sy
 8019142:	f3bf 8f4f 	dsb	sy
 8019146:	61bb      	str	r3, [r7, #24]
}
 8019148:	bf00      	nop
 801914a:	e7fe      	b.n	801914a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801914c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801914e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019152:	f023 0301 	bic.w	r3, r3, #1
 8019156:	b2da      	uxtb	r2, r3
 8019158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801915a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801915e:	e03a      	b.n	80191d6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019166:	f043 0301 	orr.w	r3, r3, #1
 801916a:	b2da      	uxtb	r2, r3
 801916c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801916e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019172:	68ba      	ldr	r2, [r7, #8]
 8019174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019176:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801917a:	699b      	ldr	r3, [r3, #24]
 801917c:	2b00      	cmp	r3, #0
 801917e:	d10a      	bne.n	8019196 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8019180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019184:	f383 8811 	msr	BASEPRI, r3
 8019188:	f3bf 8f6f 	isb	sy
 801918c:	f3bf 8f4f 	dsb	sy
 8019190:	617b      	str	r3, [r7, #20]
}
 8019192:	bf00      	nop
 8019194:	e7fe      	b.n	8019194 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8019196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019198:	699a      	ldr	r2, [r3, #24]
 801919a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801919c:	18d1      	adds	r1, r2, r3
 801919e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80191a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80191a4:	f7ff ff06 	bl	8018fb4 <prvInsertTimerInActiveList>
					break;
 80191a8:	e015      	b.n	80191d6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80191aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80191b0:	f003 0302 	and.w	r3, r3, #2
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	d103      	bne.n	80191c0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80191b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80191ba:	f000 fbe1 	bl	8019980 <vPortFree>
 80191be:	e00a      	b.n	80191d6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80191c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80191c6:	f023 0301 	bic.w	r3, r3, #1
 80191ca:	b2da      	uxtb	r2, r3
 80191cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80191d2:	e000      	b.n	80191d6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80191d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80191d6:	4b08      	ldr	r3, [pc, #32]	; (80191f8 <prvProcessReceivedCommands+0x1c0>)
 80191d8:	681b      	ldr	r3, [r3, #0]
 80191da:	1d39      	adds	r1, r7, #4
 80191dc:	2200      	movs	r2, #0
 80191de:	4618      	mov	r0, r3
 80191e0:	f7fe fb3e 	bl	8017860 <xQueueReceive>
 80191e4:	4603      	mov	r3, r0
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	f47f af2a 	bne.w	8019040 <prvProcessReceivedCommands+0x8>
	}
}
 80191ec:	bf00      	nop
 80191ee:	bf00      	nop
 80191f0:	3730      	adds	r7, #48	; 0x30
 80191f2:	46bd      	mov	sp, r7
 80191f4:	bd80      	pop	{r7, pc}
 80191f6:	bf00      	nop
 80191f8:	20001cf4 	.word	0x20001cf4

080191fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80191fc:	b580      	push	{r7, lr}
 80191fe:	b088      	sub	sp, #32
 8019200:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019202:	e048      	b.n	8019296 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019204:	4b2d      	ldr	r3, [pc, #180]	; (80192bc <prvSwitchTimerLists+0xc0>)
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	68db      	ldr	r3, [r3, #12]
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801920e:	4b2b      	ldr	r3, [pc, #172]	; (80192bc <prvSwitchTimerLists+0xc0>)
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	68db      	ldr	r3, [r3, #12]
 8019214:	68db      	ldr	r3, [r3, #12]
 8019216:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019218:	68fb      	ldr	r3, [r7, #12]
 801921a:	3304      	adds	r3, #4
 801921c:	4618      	mov	r0, r3
 801921e:	f7fe f857 	bl	80172d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019222:	68fb      	ldr	r3, [r7, #12]
 8019224:	6a1b      	ldr	r3, [r3, #32]
 8019226:	68f8      	ldr	r0, [r7, #12]
 8019228:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801922a:	68fb      	ldr	r3, [r7, #12]
 801922c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019230:	f003 0304 	and.w	r3, r3, #4
 8019234:	2b00      	cmp	r3, #0
 8019236:	d02e      	beq.n	8019296 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019238:	68fb      	ldr	r3, [r7, #12]
 801923a:	699b      	ldr	r3, [r3, #24]
 801923c:	693a      	ldr	r2, [r7, #16]
 801923e:	4413      	add	r3, r2
 8019240:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019242:	68ba      	ldr	r2, [r7, #8]
 8019244:	693b      	ldr	r3, [r7, #16]
 8019246:	429a      	cmp	r2, r3
 8019248:	d90e      	bls.n	8019268 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	68ba      	ldr	r2, [r7, #8]
 801924e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019250:	68fb      	ldr	r3, [r7, #12]
 8019252:	68fa      	ldr	r2, [r7, #12]
 8019254:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019256:	4b19      	ldr	r3, [pc, #100]	; (80192bc <prvSwitchTimerLists+0xc0>)
 8019258:	681a      	ldr	r2, [r3, #0]
 801925a:	68fb      	ldr	r3, [r7, #12]
 801925c:	3304      	adds	r3, #4
 801925e:	4619      	mov	r1, r3
 8019260:	4610      	mov	r0, r2
 8019262:	f7fd fffc 	bl	801725e <vListInsert>
 8019266:	e016      	b.n	8019296 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019268:	2300      	movs	r3, #0
 801926a:	9300      	str	r3, [sp, #0]
 801926c:	2300      	movs	r3, #0
 801926e:	693a      	ldr	r2, [r7, #16]
 8019270:	2100      	movs	r1, #0
 8019272:	68f8      	ldr	r0, [r7, #12]
 8019274:	f7ff fd60 	bl	8018d38 <xTimerGenericCommand>
 8019278:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	2b00      	cmp	r3, #0
 801927e:	d10a      	bne.n	8019296 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019284:	f383 8811 	msr	BASEPRI, r3
 8019288:	f3bf 8f6f 	isb	sy
 801928c:	f3bf 8f4f 	dsb	sy
 8019290:	603b      	str	r3, [r7, #0]
}
 8019292:	bf00      	nop
 8019294:	e7fe      	b.n	8019294 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019296:	4b09      	ldr	r3, [pc, #36]	; (80192bc <prvSwitchTimerLists+0xc0>)
 8019298:	681b      	ldr	r3, [r3, #0]
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	2b00      	cmp	r3, #0
 801929e:	d1b1      	bne.n	8019204 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80192a0:	4b06      	ldr	r3, [pc, #24]	; (80192bc <prvSwitchTimerLists+0xc0>)
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80192a6:	4b06      	ldr	r3, [pc, #24]	; (80192c0 <prvSwitchTimerLists+0xc4>)
 80192a8:	681b      	ldr	r3, [r3, #0]
 80192aa:	4a04      	ldr	r2, [pc, #16]	; (80192bc <prvSwitchTimerLists+0xc0>)
 80192ac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80192ae:	4a04      	ldr	r2, [pc, #16]	; (80192c0 <prvSwitchTimerLists+0xc4>)
 80192b0:	697b      	ldr	r3, [r7, #20]
 80192b2:	6013      	str	r3, [r2, #0]
}
 80192b4:	bf00      	nop
 80192b6:	3718      	adds	r7, #24
 80192b8:	46bd      	mov	sp, r7
 80192ba:	bd80      	pop	{r7, pc}
 80192bc:	20001cec 	.word	0x20001cec
 80192c0:	20001cf0 	.word	0x20001cf0

080192c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80192c4:	b580      	push	{r7, lr}
 80192c6:	b082      	sub	sp, #8
 80192c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80192ca:	f000 f96b 	bl	80195a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80192ce:	4b15      	ldr	r3, [pc, #84]	; (8019324 <prvCheckForValidListAndQueue+0x60>)
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	d120      	bne.n	8019318 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80192d6:	4814      	ldr	r0, [pc, #80]	; (8019328 <prvCheckForValidListAndQueue+0x64>)
 80192d8:	f7fd ff70 	bl	80171bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80192dc:	4813      	ldr	r0, [pc, #76]	; (801932c <prvCheckForValidListAndQueue+0x68>)
 80192de:	f7fd ff6d 	bl	80171bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80192e2:	4b13      	ldr	r3, [pc, #76]	; (8019330 <prvCheckForValidListAndQueue+0x6c>)
 80192e4:	4a10      	ldr	r2, [pc, #64]	; (8019328 <prvCheckForValidListAndQueue+0x64>)
 80192e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80192e8:	4b12      	ldr	r3, [pc, #72]	; (8019334 <prvCheckForValidListAndQueue+0x70>)
 80192ea:	4a10      	ldr	r2, [pc, #64]	; (801932c <prvCheckForValidListAndQueue+0x68>)
 80192ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80192ee:	2300      	movs	r3, #0
 80192f0:	9300      	str	r3, [sp, #0]
 80192f2:	4b11      	ldr	r3, [pc, #68]	; (8019338 <prvCheckForValidListAndQueue+0x74>)
 80192f4:	4a11      	ldr	r2, [pc, #68]	; (801933c <prvCheckForValidListAndQueue+0x78>)
 80192f6:	2110      	movs	r1, #16
 80192f8:	200a      	movs	r0, #10
 80192fa:	f7fe f87b 	bl	80173f4 <xQueueGenericCreateStatic>
 80192fe:	4603      	mov	r3, r0
 8019300:	4a08      	ldr	r2, [pc, #32]	; (8019324 <prvCheckForValidListAndQueue+0x60>)
 8019302:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019304:	4b07      	ldr	r3, [pc, #28]	; (8019324 <prvCheckForValidListAndQueue+0x60>)
 8019306:	681b      	ldr	r3, [r3, #0]
 8019308:	2b00      	cmp	r3, #0
 801930a:	d005      	beq.n	8019318 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801930c:	4b05      	ldr	r3, [pc, #20]	; (8019324 <prvCheckForValidListAndQueue+0x60>)
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	490b      	ldr	r1, [pc, #44]	; (8019340 <prvCheckForValidListAndQueue+0x7c>)
 8019312:	4618      	mov	r0, r3
 8019314:	f7fe fc94 	bl	8017c40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019318:	f000 f974 	bl	8019604 <vPortExitCritical>
}
 801931c:	bf00      	nop
 801931e:	46bd      	mov	sp, r7
 8019320:	bd80      	pop	{r7, pc}
 8019322:	bf00      	nop
 8019324:	20001cf4 	.word	0x20001cf4
 8019328:	20001cc4 	.word	0x20001cc4
 801932c:	20001cd8 	.word	0x20001cd8
 8019330:	20001cec 	.word	0x20001cec
 8019334:	20001cf0 	.word	0x20001cf0
 8019338:	20001da0 	.word	0x20001da0
 801933c:	20001d00 	.word	0x20001d00
 8019340:	08020098 	.word	0x08020098

08019344 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019344:	b480      	push	{r7}
 8019346:	b085      	sub	sp, #20
 8019348:	af00      	add	r7, sp, #0
 801934a:	60f8      	str	r0, [r7, #12]
 801934c:	60b9      	str	r1, [r7, #8]
 801934e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019350:	68fb      	ldr	r3, [r7, #12]
 8019352:	3b04      	subs	r3, #4
 8019354:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8019356:	68fb      	ldr	r3, [r7, #12]
 8019358:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801935c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801935e:	68fb      	ldr	r3, [r7, #12]
 8019360:	3b04      	subs	r3, #4
 8019362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019364:	68bb      	ldr	r3, [r7, #8]
 8019366:	f023 0201 	bic.w	r2, r3, #1
 801936a:	68fb      	ldr	r3, [r7, #12]
 801936c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801936e:	68fb      	ldr	r3, [r7, #12]
 8019370:	3b04      	subs	r3, #4
 8019372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019374:	4a0c      	ldr	r2, [pc, #48]	; (80193a8 <pxPortInitialiseStack+0x64>)
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801937a:	68fb      	ldr	r3, [r7, #12]
 801937c:	3b14      	subs	r3, #20
 801937e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019380:	687a      	ldr	r2, [r7, #4]
 8019382:	68fb      	ldr	r3, [r7, #12]
 8019384:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8019386:	68fb      	ldr	r3, [r7, #12]
 8019388:	3b04      	subs	r3, #4
 801938a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801938c:	68fb      	ldr	r3, [r7, #12]
 801938e:	f06f 0202 	mvn.w	r2, #2
 8019392:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019394:	68fb      	ldr	r3, [r7, #12]
 8019396:	3b20      	subs	r3, #32
 8019398:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801939a:	68fb      	ldr	r3, [r7, #12]
}
 801939c:	4618      	mov	r0, r3
 801939e:	3714      	adds	r7, #20
 80193a0:	46bd      	mov	sp, r7
 80193a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193a6:	4770      	bx	lr
 80193a8:	080193ad 	.word	0x080193ad

080193ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80193ac:	b480      	push	{r7}
 80193ae:	b085      	sub	sp, #20
 80193b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80193b2:	2300      	movs	r3, #0
 80193b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80193b6:	4b12      	ldr	r3, [pc, #72]	; (8019400 <prvTaskExitError+0x54>)
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80193be:	d00a      	beq.n	80193d6 <prvTaskExitError+0x2a>
	__asm volatile
 80193c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193c4:	f383 8811 	msr	BASEPRI, r3
 80193c8:	f3bf 8f6f 	isb	sy
 80193cc:	f3bf 8f4f 	dsb	sy
 80193d0:	60fb      	str	r3, [r7, #12]
}
 80193d2:	bf00      	nop
 80193d4:	e7fe      	b.n	80193d4 <prvTaskExitError+0x28>
	__asm volatile
 80193d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193da:	f383 8811 	msr	BASEPRI, r3
 80193de:	f3bf 8f6f 	isb	sy
 80193e2:	f3bf 8f4f 	dsb	sy
 80193e6:	60bb      	str	r3, [r7, #8]
}
 80193e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80193ea:	bf00      	nop
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d0fc      	beq.n	80193ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80193f2:	bf00      	nop
 80193f4:	bf00      	nop
 80193f6:	3714      	adds	r7, #20
 80193f8:	46bd      	mov	sp, r7
 80193fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193fe:	4770      	bx	lr
 8019400:	200000c0 	.word	0x200000c0
	...

08019410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019410:	4b07      	ldr	r3, [pc, #28]	; (8019430 <pxCurrentTCBConst2>)
 8019412:	6819      	ldr	r1, [r3, #0]
 8019414:	6808      	ldr	r0, [r1, #0]
 8019416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801941a:	f380 8809 	msr	PSP, r0
 801941e:	f3bf 8f6f 	isb	sy
 8019422:	f04f 0000 	mov.w	r0, #0
 8019426:	f380 8811 	msr	BASEPRI, r0
 801942a:	4770      	bx	lr
 801942c:	f3af 8000 	nop.w

08019430 <pxCurrentTCBConst2>:
 8019430:	200017c4 	.word	0x200017c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019434:	bf00      	nop
 8019436:	bf00      	nop

08019438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019438:	4808      	ldr	r0, [pc, #32]	; (801945c <prvPortStartFirstTask+0x24>)
 801943a:	6800      	ldr	r0, [r0, #0]
 801943c:	6800      	ldr	r0, [r0, #0]
 801943e:	f380 8808 	msr	MSP, r0
 8019442:	f04f 0000 	mov.w	r0, #0
 8019446:	f380 8814 	msr	CONTROL, r0
 801944a:	b662      	cpsie	i
 801944c:	b661      	cpsie	f
 801944e:	f3bf 8f4f 	dsb	sy
 8019452:	f3bf 8f6f 	isb	sy
 8019456:	df00      	svc	0
 8019458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801945a:	bf00      	nop
 801945c:	e000ed08 	.word	0xe000ed08

08019460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019460:	b580      	push	{r7, lr}
 8019462:	b086      	sub	sp, #24
 8019464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019466:	4b46      	ldr	r3, [pc, #280]	; (8019580 <xPortStartScheduler+0x120>)
 8019468:	681b      	ldr	r3, [r3, #0]
 801946a:	4a46      	ldr	r2, [pc, #280]	; (8019584 <xPortStartScheduler+0x124>)
 801946c:	4293      	cmp	r3, r2
 801946e:	d10a      	bne.n	8019486 <xPortStartScheduler+0x26>
	__asm volatile
 8019470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019474:	f383 8811 	msr	BASEPRI, r3
 8019478:	f3bf 8f6f 	isb	sy
 801947c:	f3bf 8f4f 	dsb	sy
 8019480:	613b      	str	r3, [r7, #16]
}
 8019482:	bf00      	nop
 8019484:	e7fe      	b.n	8019484 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019486:	4b3e      	ldr	r3, [pc, #248]	; (8019580 <xPortStartScheduler+0x120>)
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	4a3f      	ldr	r2, [pc, #252]	; (8019588 <xPortStartScheduler+0x128>)
 801948c:	4293      	cmp	r3, r2
 801948e:	d10a      	bne.n	80194a6 <xPortStartScheduler+0x46>
	__asm volatile
 8019490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019494:	f383 8811 	msr	BASEPRI, r3
 8019498:	f3bf 8f6f 	isb	sy
 801949c:	f3bf 8f4f 	dsb	sy
 80194a0:	60fb      	str	r3, [r7, #12]
}
 80194a2:	bf00      	nop
 80194a4:	e7fe      	b.n	80194a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80194a6:	4b39      	ldr	r3, [pc, #228]	; (801958c <xPortStartScheduler+0x12c>)
 80194a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80194aa:	697b      	ldr	r3, [r7, #20]
 80194ac:	781b      	ldrb	r3, [r3, #0]
 80194ae:	b2db      	uxtb	r3, r3
 80194b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80194b2:	697b      	ldr	r3, [r7, #20]
 80194b4:	22ff      	movs	r2, #255	; 0xff
 80194b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80194b8:	697b      	ldr	r3, [r7, #20]
 80194ba:	781b      	ldrb	r3, [r3, #0]
 80194bc:	b2db      	uxtb	r3, r3
 80194be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80194c0:	78fb      	ldrb	r3, [r7, #3]
 80194c2:	b2db      	uxtb	r3, r3
 80194c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80194c8:	b2da      	uxtb	r2, r3
 80194ca:	4b31      	ldr	r3, [pc, #196]	; (8019590 <xPortStartScheduler+0x130>)
 80194cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80194ce:	4b31      	ldr	r3, [pc, #196]	; (8019594 <xPortStartScheduler+0x134>)
 80194d0:	2207      	movs	r2, #7
 80194d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80194d4:	e009      	b.n	80194ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80194d6:	4b2f      	ldr	r3, [pc, #188]	; (8019594 <xPortStartScheduler+0x134>)
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	3b01      	subs	r3, #1
 80194dc:	4a2d      	ldr	r2, [pc, #180]	; (8019594 <xPortStartScheduler+0x134>)
 80194de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80194e0:	78fb      	ldrb	r3, [r7, #3]
 80194e2:	b2db      	uxtb	r3, r3
 80194e4:	005b      	lsls	r3, r3, #1
 80194e6:	b2db      	uxtb	r3, r3
 80194e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80194ea:	78fb      	ldrb	r3, [r7, #3]
 80194ec:	b2db      	uxtb	r3, r3
 80194ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80194f2:	2b80      	cmp	r3, #128	; 0x80
 80194f4:	d0ef      	beq.n	80194d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80194f6:	4b27      	ldr	r3, [pc, #156]	; (8019594 <xPortStartScheduler+0x134>)
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	f1c3 0307 	rsb	r3, r3, #7
 80194fe:	2b04      	cmp	r3, #4
 8019500:	d00a      	beq.n	8019518 <xPortStartScheduler+0xb8>
	__asm volatile
 8019502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019506:	f383 8811 	msr	BASEPRI, r3
 801950a:	f3bf 8f6f 	isb	sy
 801950e:	f3bf 8f4f 	dsb	sy
 8019512:	60bb      	str	r3, [r7, #8]
}
 8019514:	bf00      	nop
 8019516:	e7fe      	b.n	8019516 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019518:	4b1e      	ldr	r3, [pc, #120]	; (8019594 <xPortStartScheduler+0x134>)
 801951a:	681b      	ldr	r3, [r3, #0]
 801951c:	021b      	lsls	r3, r3, #8
 801951e:	4a1d      	ldr	r2, [pc, #116]	; (8019594 <xPortStartScheduler+0x134>)
 8019520:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019522:	4b1c      	ldr	r3, [pc, #112]	; (8019594 <xPortStartScheduler+0x134>)
 8019524:	681b      	ldr	r3, [r3, #0]
 8019526:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801952a:	4a1a      	ldr	r2, [pc, #104]	; (8019594 <xPortStartScheduler+0x134>)
 801952c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	b2da      	uxtb	r2, r3
 8019532:	697b      	ldr	r3, [r7, #20]
 8019534:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8019536:	4b18      	ldr	r3, [pc, #96]	; (8019598 <xPortStartScheduler+0x138>)
 8019538:	681b      	ldr	r3, [r3, #0]
 801953a:	4a17      	ldr	r2, [pc, #92]	; (8019598 <xPortStartScheduler+0x138>)
 801953c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019540:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019542:	4b15      	ldr	r3, [pc, #84]	; (8019598 <xPortStartScheduler+0x138>)
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	4a14      	ldr	r2, [pc, #80]	; (8019598 <xPortStartScheduler+0x138>)
 8019548:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801954c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801954e:	f000 f8dd 	bl	801970c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8019552:	4b12      	ldr	r3, [pc, #72]	; (801959c <xPortStartScheduler+0x13c>)
 8019554:	2200      	movs	r2, #0
 8019556:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8019558:	f000 f8fc 	bl	8019754 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801955c:	4b10      	ldr	r3, [pc, #64]	; (80195a0 <xPortStartScheduler+0x140>)
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	4a0f      	ldr	r2, [pc, #60]	; (80195a0 <xPortStartScheduler+0x140>)
 8019562:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8019566:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8019568:	f7ff ff66 	bl	8019438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801956c:	f7ff f850 	bl	8018610 <vTaskSwitchContext>
	prvTaskExitError();
 8019570:	f7ff ff1c 	bl	80193ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8019574:	2300      	movs	r3, #0
}
 8019576:	4618      	mov	r0, r3
 8019578:	3718      	adds	r7, #24
 801957a:	46bd      	mov	sp, r7
 801957c:	bd80      	pop	{r7, pc}
 801957e:	bf00      	nop
 8019580:	e000ed00 	.word	0xe000ed00
 8019584:	410fc271 	.word	0x410fc271
 8019588:	410fc270 	.word	0x410fc270
 801958c:	e000e400 	.word	0xe000e400
 8019590:	20001df0 	.word	0x20001df0
 8019594:	20001df4 	.word	0x20001df4
 8019598:	e000ed20 	.word	0xe000ed20
 801959c:	200000c0 	.word	0x200000c0
 80195a0:	e000ef34 	.word	0xe000ef34

080195a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80195a4:	b480      	push	{r7}
 80195a6:	b083      	sub	sp, #12
 80195a8:	af00      	add	r7, sp, #0
	__asm volatile
 80195aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195ae:	f383 8811 	msr	BASEPRI, r3
 80195b2:	f3bf 8f6f 	isb	sy
 80195b6:	f3bf 8f4f 	dsb	sy
 80195ba:	607b      	str	r3, [r7, #4]
}
 80195bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80195be:	4b0f      	ldr	r3, [pc, #60]	; (80195fc <vPortEnterCritical+0x58>)
 80195c0:	681b      	ldr	r3, [r3, #0]
 80195c2:	3301      	adds	r3, #1
 80195c4:	4a0d      	ldr	r2, [pc, #52]	; (80195fc <vPortEnterCritical+0x58>)
 80195c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80195c8:	4b0c      	ldr	r3, [pc, #48]	; (80195fc <vPortEnterCritical+0x58>)
 80195ca:	681b      	ldr	r3, [r3, #0]
 80195cc:	2b01      	cmp	r3, #1
 80195ce:	d10f      	bne.n	80195f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80195d0:	4b0b      	ldr	r3, [pc, #44]	; (8019600 <vPortEnterCritical+0x5c>)
 80195d2:	681b      	ldr	r3, [r3, #0]
 80195d4:	b2db      	uxtb	r3, r3
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d00a      	beq.n	80195f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80195da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195de:	f383 8811 	msr	BASEPRI, r3
 80195e2:	f3bf 8f6f 	isb	sy
 80195e6:	f3bf 8f4f 	dsb	sy
 80195ea:	603b      	str	r3, [r7, #0]
}
 80195ec:	bf00      	nop
 80195ee:	e7fe      	b.n	80195ee <vPortEnterCritical+0x4a>
	}
}
 80195f0:	bf00      	nop
 80195f2:	370c      	adds	r7, #12
 80195f4:	46bd      	mov	sp, r7
 80195f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195fa:	4770      	bx	lr
 80195fc:	200000c0 	.word	0x200000c0
 8019600:	e000ed04 	.word	0xe000ed04

08019604 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019604:	b480      	push	{r7}
 8019606:	b083      	sub	sp, #12
 8019608:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801960a:	4b12      	ldr	r3, [pc, #72]	; (8019654 <vPortExitCritical+0x50>)
 801960c:	681b      	ldr	r3, [r3, #0]
 801960e:	2b00      	cmp	r3, #0
 8019610:	d10a      	bne.n	8019628 <vPortExitCritical+0x24>
	__asm volatile
 8019612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019616:	f383 8811 	msr	BASEPRI, r3
 801961a:	f3bf 8f6f 	isb	sy
 801961e:	f3bf 8f4f 	dsb	sy
 8019622:	607b      	str	r3, [r7, #4]
}
 8019624:	bf00      	nop
 8019626:	e7fe      	b.n	8019626 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019628:	4b0a      	ldr	r3, [pc, #40]	; (8019654 <vPortExitCritical+0x50>)
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	3b01      	subs	r3, #1
 801962e:	4a09      	ldr	r2, [pc, #36]	; (8019654 <vPortExitCritical+0x50>)
 8019630:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019632:	4b08      	ldr	r3, [pc, #32]	; (8019654 <vPortExitCritical+0x50>)
 8019634:	681b      	ldr	r3, [r3, #0]
 8019636:	2b00      	cmp	r3, #0
 8019638:	d105      	bne.n	8019646 <vPortExitCritical+0x42>
 801963a:	2300      	movs	r3, #0
 801963c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801963e:	683b      	ldr	r3, [r7, #0]
 8019640:	f383 8811 	msr	BASEPRI, r3
}
 8019644:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019646:	bf00      	nop
 8019648:	370c      	adds	r7, #12
 801964a:	46bd      	mov	sp, r7
 801964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019650:	4770      	bx	lr
 8019652:	bf00      	nop
 8019654:	200000c0 	.word	0x200000c0
	...

08019660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019660:	f3ef 8009 	mrs	r0, PSP
 8019664:	f3bf 8f6f 	isb	sy
 8019668:	4b15      	ldr	r3, [pc, #84]	; (80196c0 <pxCurrentTCBConst>)
 801966a:	681a      	ldr	r2, [r3, #0]
 801966c:	f01e 0f10 	tst.w	lr, #16
 8019670:	bf08      	it	eq
 8019672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801967a:	6010      	str	r0, [r2, #0]
 801967c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019680:	f04f 0050 	mov.w	r0, #80	; 0x50
 8019684:	f380 8811 	msr	BASEPRI, r0
 8019688:	f3bf 8f4f 	dsb	sy
 801968c:	f3bf 8f6f 	isb	sy
 8019690:	f7fe ffbe 	bl	8018610 <vTaskSwitchContext>
 8019694:	f04f 0000 	mov.w	r0, #0
 8019698:	f380 8811 	msr	BASEPRI, r0
 801969c:	bc09      	pop	{r0, r3}
 801969e:	6819      	ldr	r1, [r3, #0]
 80196a0:	6808      	ldr	r0, [r1, #0]
 80196a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196a6:	f01e 0f10 	tst.w	lr, #16
 80196aa:	bf08      	it	eq
 80196ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80196b0:	f380 8809 	msr	PSP, r0
 80196b4:	f3bf 8f6f 	isb	sy
 80196b8:	4770      	bx	lr
 80196ba:	bf00      	nop
 80196bc:	f3af 8000 	nop.w

080196c0 <pxCurrentTCBConst>:
 80196c0:	200017c4 	.word	0x200017c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80196c4:	bf00      	nop
 80196c6:	bf00      	nop

080196c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80196c8:	b580      	push	{r7, lr}
 80196ca:	b082      	sub	sp, #8
 80196cc:	af00      	add	r7, sp, #0
	__asm volatile
 80196ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196d2:	f383 8811 	msr	BASEPRI, r3
 80196d6:	f3bf 8f6f 	isb	sy
 80196da:	f3bf 8f4f 	dsb	sy
 80196de:	607b      	str	r3, [r7, #4]
}
 80196e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80196e2:	f7fe fedb 	bl	801849c <xTaskIncrementTick>
 80196e6:	4603      	mov	r3, r0
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	d003      	beq.n	80196f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80196ec:	4b06      	ldr	r3, [pc, #24]	; (8019708 <xPortSysTickHandler+0x40>)
 80196ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80196f2:	601a      	str	r2, [r3, #0]
 80196f4:	2300      	movs	r3, #0
 80196f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80196f8:	683b      	ldr	r3, [r7, #0]
 80196fa:	f383 8811 	msr	BASEPRI, r3
}
 80196fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019700:	bf00      	nop
 8019702:	3708      	adds	r7, #8
 8019704:	46bd      	mov	sp, r7
 8019706:	bd80      	pop	{r7, pc}
 8019708:	e000ed04 	.word	0xe000ed04

0801970c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801970c:	b480      	push	{r7}
 801970e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019710:	4b0b      	ldr	r3, [pc, #44]	; (8019740 <vPortSetupTimerInterrupt+0x34>)
 8019712:	2200      	movs	r2, #0
 8019714:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019716:	4b0b      	ldr	r3, [pc, #44]	; (8019744 <vPortSetupTimerInterrupt+0x38>)
 8019718:	2200      	movs	r2, #0
 801971a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801971c:	4b0a      	ldr	r3, [pc, #40]	; (8019748 <vPortSetupTimerInterrupt+0x3c>)
 801971e:	681b      	ldr	r3, [r3, #0]
 8019720:	4a0a      	ldr	r2, [pc, #40]	; (801974c <vPortSetupTimerInterrupt+0x40>)
 8019722:	fba2 2303 	umull	r2, r3, r2, r3
 8019726:	099b      	lsrs	r3, r3, #6
 8019728:	4a09      	ldr	r2, [pc, #36]	; (8019750 <vPortSetupTimerInterrupt+0x44>)
 801972a:	3b01      	subs	r3, #1
 801972c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801972e:	4b04      	ldr	r3, [pc, #16]	; (8019740 <vPortSetupTimerInterrupt+0x34>)
 8019730:	2207      	movs	r2, #7
 8019732:	601a      	str	r2, [r3, #0]
}
 8019734:	bf00      	nop
 8019736:	46bd      	mov	sp, r7
 8019738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801973c:	4770      	bx	lr
 801973e:	bf00      	nop
 8019740:	e000e010 	.word	0xe000e010
 8019744:	e000e018 	.word	0xe000e018
 8019748:	20000054 	.word	0x20000054
 801974c:	10624dd3 	.word	0x10624dd3
 8019750:	e000e014 	.word	0xe000e014

08019754 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019754:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019764 <vPortEnableVFP+0x10>
 8019758:	6801      	ldr	r1, [r0, #0]
 801975a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801975e:	6001      	str	r1, [r0, #0]
 8019760:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019762:	bf00      	nop
 8019764:	e000ed88 	.word	0xe000ed88

08019768 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019768:	b480      	push	{r7}
 801976a:	b085      	sub	sp, #20
 801976c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801976e:	f3ef 8305 	mrs	r3, IPSR
 8019772:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019774:	68fb      	ldr	r3, [r7, #12]
 8019776:	2b0f      	cmp	r3, #15
 8019778:	d914      	bls.n	80197a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801977a:	4a17      	ldr	r2, [pc, #92]	; (80197d8 <vPortValidateInterruptPriority+0x70>)
 801977c:	68fb      	ldr	r3, [r7, #12]
 801977e:	4413      	add	r3, r2
 8019780:	781b      	ldrb	r3, [r3, #0]
 8019782:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019784:	4b15      	ldr	r3, [pc, #84]	; (80197dc <vPortValidateInterruptPriority+0x74>)
 8019786:	781b      	ldrb	r3, [r3, #0]
 8019788:	7afa      	ldrb	r2, [r7, #11]
 801978a:	429a      	cmp	r2, r3
 801978c:	d20a      	bcs.n	80197a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801978e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019792:	f383 8811 	msr	BASEPRI, r3
 8019796:	f3bf 8f6f 	isb	sy
 801979a:	f3bf 8f4f 	dsb	sy
 801979e:	607b      	str	r3, [r7, #4]
}
 80197a0:	bf00      	nop
 80197a2:	e7fe      	b.n	80197a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80197a4:	4b0e      	ldr	r3, [pc, #56]	; (80197e0 <vPortValidateInterruptPriority+0x78>)
 80197a6:	681b      	ldr	r3, [r3, #0]
 80197a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80197ac:	4b0d      	ldr	r3, [pc, #52]	; (80197e4 <vPortValidateInterruptPriority+0x7c>)
 80197ae:	681b      	ldr	r3, [r3, #0]
 80197b0:	429a      	cmp	r2, r3
 80197b2:	d90a      	bls.n	80197ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80197b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197b8:	f383 8811 	msr	BASEPRI, r3
 80197bc:	f3bf 8f6f 	isb	sy
 80197c0:	f3bf 8f4f 	dsb	sy
 80197c4:	603b      	str	r3, [r7, #0]
}
 80197c6:	bf00      	nop
 80197c8:	e7fe      	b.n	80197c8 <vPortValidateInterruptPriority+0x60>
	}
 80197ca:	bf00      	nop
 80197cc:	3714      	adds	r7, #20
 80197ce:	46bd      	mov	sp, r7
 80197d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197d4:	4770      	bx	lr
 80197d6:	bf00      	nop
 80197d8:	e000e3f0 	.word	0xe000e3f0
 80197dc:	20001df0 	.word	0x20001df0
 80197e0:	e000ed0c 	.word	0xe000ed0c
 80197e4:	20001df4 	.word	0x20001df4

080197e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80197e8:	b580      	push	{r7, lr}
 80197ea:	b08a      	sub	sp, #40	; 0x28
 80197ec:	af00      	add	r7, sp, #0
 80197ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80197f0:	2300      	movs	r3, #0
 80197f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80197f4:	f7fe fd96 	bl	8018324 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80197f8:	4b5b      	ldr	r3, [pc, #364]	; (8019968 <pvPortMalloc+0x180>)
 80197fa:	681b      	ldr	r3, [r3, #0]
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	d101      	bne.n	8019804 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019800:	f000 f920 	bl	8019a44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019804:	4b59      	ldr	r3, [pc, #356]	; (801996c <pvPortMalloc+0x184>)
 8019806:	681a      	ldr	r2, [r3, #0]
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	4013      	ands	r3, r2
 801980c:	2b00      	cmp	r3, #0
 801980e:	f040 8093 	bne.w	8019938 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	2b00      	cmp	r3, #0
 8019816:	d01d      	beq.n	8019854 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8019818:	2208      	movs	r2, #8
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	4413      	add	r3, r2
 801981e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	f003 0307 	and.w	r3, r3, #7
 8019826:	2b00      	cmp	r3, #0
 8019828:	d014      	beq.n	8019854 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	f023 0307 	bic.w	r3, r3, #7
 8019830:	3308      	adds	r3, #8
 8019832:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	f003 0307 	and.w	r3, r3, #7
 801983a:	2b00      	cmp	r3, #0
 801983c:	d00a      	beq.n	8019854 <pvPortMalloc+0x6c>
	__asm volatile
 801983e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019842:	f383 8811 	msr	BASEPRI, r3
 8019846:	f3bf 8f6f 	isb	sy
 801984a:	f3bf 8f4f 	dsb	sy
 801984e:	617b      	str	r3, [r7, #20]
}
 8019850:	bf00      	nop
 8019852:	e7fe      	b.n	8019852 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	2b00      	cmp	r3, #0
 8019858:	d06e      	beq.n	8019938 <pvPortMalloc+0x150>
 801985a:	4b45      	ldr	r3, [pc, #276]	; (8019970 <pvPortMalloc+0x188>)
 801985c:	681b      	ldr	r3, [r3, #0]
 801985e:	687a      	ldr	r2, [r7, #4]
 8019860:	429a      	cmp	r2, r3
 8019862:	d869      	bhi.n	8019938 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019864:	4b43      	ldr	r3, [pc, #268]	; (8019974 <pvPortMalloc+0x18c>)
 8019866:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019868:	4b42      	ldr	r3, [pc, #264]	; (8019974 <pvPortMalloc+0x18c>)
 801986a:	681b      	ldr	r3, [r3, #0]
 801986c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801986e:	e004      	b.n	801987a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8019870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019872:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019876:	681b      	ldr	r3, [r3, #0]
 8019878:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801987a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801987c:	685b      	ldr	r3, [r3, #4]
 801987e:	687a      	ldr	r2, [r7, #4]
 8019880:	429a      	cmp	r2, r3
 8019882:	d903      	bls.n	801988c <pvPortMalloc+0xa4>
 8019884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019886:	681b      	ldr	r3, [r3, #0]
 8019888:	2b00      	cmp	r3, #0
 801988a:	d1f1      	bne.n	8019870 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801988c:	4b36      	ldr	r3, [pc, #216]	; (8019968 <pvPortMalloc+0x180>)
 801988e:	681b      	ldr	r3, [r3, #0]
 8019890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019892:	429a      	cmp	r2, r3
 8019894:	d050      	beq.n	8019938 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019896:	6a3b      	ldr	r3, [r7, #32]
 8019898:	681b      	ldr	r3, [r3, #0]
 801989a:	2208      	movs	r2, #8
 801989c:	4413      	add	r3, r2
 801989e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80198a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198a2:	681a      	ldr	r2, [r3, #0]
 80198a4:	6a3b      	ldr	r3, [r7, #32]
 80198a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80198a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198aa:	685a      	ldr	r2, [r3, #4]
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	1ad2      	subs	r2, r2, r3
 80198b0:	2308      	movs	r3, #8
 80198b2:	005b      	lsls	r3, r3, #1
 80198b4:	429a      	cmp	r2, r3
 80198b6:	d91f      	bls.n	80198f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80198b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	4413      	add	r3, r2
 80198be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80198c0:	69bb      	ldr	r3, [r7, #24]
 80198c2:	f003 0307 	and.w	r3, r3, #7
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d00a      	beq.n	80198e0 <pvPortMalloc+0xf8>
	__asm volatile
 80198ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198ce:	f383 8811 	msr	BASEPRI, r3
 80198d2:	f3bf 8f6f 	isb	sy
 80198d6:	f3bf 8f4f 	dsb	sy
 80198da:	613b      	str	r3, [r7, #16]
}
 80198dc:	bf00      	nop
 80198de:	e7fe      	b.n	80198de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80198e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198e2:	685a      	ldr	r2, [r3, #4]
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	1ad2      	subs	r2, r2, r3
 80198e8:	69bb      	ldr	r3, [r7, #24]
 80198ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80198ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198ee:	687a      	ldr	r2, [r7, #4]
 80198f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80198f2:	69b8      	ldr	r0, [r7, #24]
 80198f4:	f000 f908 	bl	8019b08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80198f8:	4b1d      	ldr	r3, [pc, #116]	; (8019970 <pvPortMalloc+0x188>)
 80198fa:	681a      	ldr	r2, [r3, #0]
 80198fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198fe:	685b      	ldr	r3, [r3, #4]
 8019900:	1ad3      	subs	r3, r2, r3
 8019902:	4a1b      	ldr	r2, [pc, #108]	; (8019970 <pvPortMalloc+0x188>)
 8019904:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019906:	4b1a      	ldr	r3, [pc, #104]	; (8019970 <pvPortMalloc+0x188>)
 8019908:	681a      	ldr	r2, [r3, #0]
 801990a:	4b1b      	ldr	r3, [pc, #108]	; (8019978 <pvPortMalloc+0x190>)
 801990c:	681b      	ldr	r3, [r3, #0]
 801990e:	429a      	cmp	r2, r3
 8019910:	d203      	bcs.n	801991a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019912:	4b17      	ldr	r3, [pc, #92]	; (8019970 <pvPortMalloc+0x188>)
 8019914:	681b      	ldr	r3, [r3, #0]
 8019916:	4a18      	ldr	r2, [pc, #96]	; (8019978 <pvPortMalloc+0x190>)
 8019918:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801991a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801991c:	685a      	ldr	r2, [r3, #4]
 801991e:	4b13      	ldr	r3, [pc, #76]	; (801996c <pvPortMalloc+0x184>)
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	431a      	orrs	r2, r3
 8019924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019926:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801992a:	2200      	movs	r2, #0
 801992c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801992e:	4b13      	ldr	r3, [pc, #76]	; (801997c <pvPortMalloc+0x194>)
 8019930:	681b      	ldr	r3, [r3, #0]
 8019932:	3301      	adds	r3, #1
 8019934:	4a11      	ldr	r2, [pc, #68]	; (801997c <pvPortMalloc+0x194>)
 8019936:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019938:	f7fe fd02 	bl	8018340 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801993c:	69fb      	ldr	r3, [r7, #28]
 801993e:	f003 0307 	and.w	r3, r3, #7
 8019942:	2b00      	cmp	r3, #0
 8019944:	d00a      	beq.n	801995c <pvPortMalloc+0x174>
	__asm volatile
 8019946:	f04f 0350 	mov.w	r3, #80	; 0x50
 801994a:	f383 8811 	msr	BASEPRI, r3
 801994e:	f3bf 8f6f 	isb	sy
 8019952:	f3bf 8f4f 	dsb	sy
 8019956:	60fb      	str	r3, [r7, #12]
}
 8019958:	bf00      	nop
 801995a:	e7fe      	b.n	801995a <pvPortMalloc+0x172>
	return pvReturn;
 801995c:	69fb      	ldr	r3, [r7, #28]
}
 801995e:	4618      	mov	r0, r3
 8019960:	3728      	adds	r7, #40	; 0x28
 8019962:	46bd      	mov	sp, r7
 8019964:	bd80      	pop	{r7, pc}
 8019966:	bf00      	nop
 8019968:	20005a00 	.word	0x20005a00
 801996c:	20005a14 	.word	0x20005a14
 8019970:	20005a04 	.word	0x20005a04
 8019974:	200059f8 	.word	0x200059f8
 8019978:	20005a08 	.word	0x20005a08
 801997c:	20005a0c 	.word	0x20005a0c

08019980 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019980:	b580      	push	{r7, lr}
 8019982:	b086      	sub	sp, #24
 8019984:	af00      	add	r7, sp, #0
 8019986:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	2b00      	cmp	r3, #0
 8019990:	d04d      	beq.n	8019a2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019992:	2308      	movs	r3, #8
 8019994:	425b      	negs	r3, r3
 8019996:	697a      	ldr	r2, [r7, #20]
 8019998:	4413      	add	r3, r2
 801999a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801999c:	697b      	ldr	r3, [r7, #20]
 801999e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80199a0:	693b      	ldr	r3, [r7, #16]
 80199a2:	685a      	ldr	r2, [r3, #4]
 80199a4:	4b24      	ldr	r3, [pc, #144]	; (8019a38 <vPortFree+0xb8>)
 80199a6:	681b      	ldr	r3, [r3, #0]
 80199a8:	4013      	ands	r3, r2
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d10a      	bne.n	80199c4 <vPortFree+0x44>
	__asm volatile
 80199ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199b2:	f383 8811 	msr	BASEPRI, r3
 80199b6:	f3bf 8f6f 	isb	sy
 80199ba:	f3bf 8f4f 	dsb	sy
 80199be:	60fb      	str	r3, [r7, #12]
}
 80199c0:	bf00      	nop
 80199c2:	e7fe      	b.n	80199c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80199c4:	693b      	ldr	r3, [r7, #16]
 80199c6:	681b      	ldr	r3, [r3, #0]
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	d00a      	beq.n	80199e2 <vPortFree+0x62>
	__asm volatile
 80199cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199d0:	f383 8811 	msr	BASEPRI, r3
 80199d4:	f3bf 8f6f 	isb	sy
 80199d8:	f3bf 8f4f 	dsb	sy
 80199dc:	60bb      	str	r3, [r7, #8]
}
 80199de:	bf00      	nop
 80199e0:	e7fe      	b.n	80199e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80199e2:	693b      	ldr	r3, [r7, #16]
 80199e4:	685a      	ldr	r2, [r3, #4]
 80199e6:	4b14      	ldr	r3, [pc, #80]	; (8019a38 <vPortFree+0xb8>)
 80199e8:	681b      	ldr	r3, [r3, #0]
 80199ea:	4013      	ands	r3, r2
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d01e      	beq.n	8019a2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80199f0:	693b      	ldr	r3, [r7, #16]
 80199f2:	681b      	ldr	r3, [r3, #0]
 80199f4:	2b00      	cmp	r3, #0
 80199f6:	d11a      	bne.n	8019a2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80199f8:	693b      	ldr	r3, [r7, #16]
 80199fa:	685a      	ldr	r2, [r3, #4]
 80199fc:	4b0e      	ldr	r3, [pc, #56]	; (8019a38 <vPortFree+0xb8>)
 80199fe:	681b      	ldr	r3, [r3, #0]
 8019a00:	43db      	mvns	r3, r3
 8019a02:	401a      	ands	r2, r3
 8019a04:	693b      	ldr	r3, [r7, #16]
 8019a06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019a08:	f7fe fc8c 	bl	8018324 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019a0c:	693b      	ldr	r3, [r7, #16]
 8019a0e:	685a      	ldr	r2, [r3, #4]
 8019a10:	4b0a      	ldr	r3, [pc, #40]	; (8019a3c <vPortFree+0xbc>)
 8019a12:	681b      	ldr	r3, [r3, #0]
 8019a14:	4413      	add	r3, r2
 8019a16:	4a09      	ldr	r2, [pc, #36]	; (8019a3c <vPortFree+0xbc>)
 8019a18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019a1a:	6938      	ldr	r0, [r7, #16]
 8019a1c:	f000 f874 	bl	8019b08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019a20:	4b07      	ldr	r3, [pc, #28]	; (8019a40 <vPortFree+0xc0>)
 8019a22:	681b      	ldr	r3, [r3, #0]
 8019a24:	3301      	adds	r3, #1
 8019a26:	4a06      	ldr	r2, [pc, #24]	; (8019a40 <vPortFree+0xc0>)
 8019a28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8019a2a:	f7fe fc89 	bl	8018340 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8019a2e:	bf00      	nop
 8019a30:	3718      	adds	r7, #24
 8019a32:	46bd      	mov	sp, r7
 8019a34:	bd80      	pop	{r7, pc}
 8019a36:	bf00      	nop
 8019a38:	20005a14 	.word	0x20005a14
 8019a3c:	20005a04 	.word	0x20005a04
 8019a40:	20005a10 	.word	0x20005a10

08019a44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019a44:	b480      	push	{r7}
 8019a46:	b085      	sub	sp, #20
 8019a48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019a4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8019a4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019a50:	4b27      	ldr	r3, [pc, #156]	; (8019af0 <prvHeapInit+0xac>)
 8019a52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019a54:	68fb      	ldr	r3, [r7, #12]
 8019a56:	f003 0307 	and.w	r3, r3, #7
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d00c      	beq.n	8019a78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8019a5e:	68fb      	ldr	r3, [r7, #12]
 8019a60:	3307      	adds	r3, #7
 8019a62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019a64:	68fb      	ldr	r3, [r7, #12]
 8019a66:	f023 0307 	bic.w	r3, r3, #7
 8019a6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019a6c:	68ba      	ldr	r2, [r7, #8]
 8019a6e:	68fb      	ldr	r3, [r7, #12]
 8019a70:	1ad3      	subs	r3, r2, r3
 8019a72:	4a1f      	ldr	r2, [pc, #124]	; (8019af0 <prvHeapInit+0xac>)
 8019a74:	4413      	add	r3, r2
 8019a76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019a78:	68fb      	ldr	r3, [r7, #12]
 8019a7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019a7c:	4a1d      	ldr	r2, [pc, #116]	; (8019af4 <prvHeapInit+0xb0>)
 8019a7e:	687b      	ldr	r3, [r7, #4]
 8019a80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019a82:	4b1c      	ldr	r3, [pc, #112]	; (8019af4 <prvHeapInit+0xb0>)
 8019a84:	2200      	movs	r2, #0
 8019a86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019a88:	687b      	ldr	r3, [r7, #4]
 8019a8a:	68ba      	ldr	r2, [r7, #8]
 8019a8c:	4413      	add	r3, r2
 8019a8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019a90:	2208      	movs	r2, #8
 8019a92:	68fb      	ldr	r3, [r7, #12]
 8019a94:	1a9b      	subs	r3, r3, r2
 8019a96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019a98:	68fb      	ldr	r3, [r7, #12]
 8019a9a:	f023 0307 	bic.w	r3, r3, #7
 8019a9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019aa0:	68fb      	ldr	r3, [r7, #12]
 8019aa2:	4a15      	ldr	r2, [pc, #84]	; (8019af8 <prvHeapInit+0xb4>)
 8019aa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019aa6:	4b14      	ldr	r3, [pc, #80]	; (8019af8 <prvHeapInit+0xb4>)
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	2200      	movs	r2, #0
 8019aac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019aae:	4b12      	ldr	r3, [pc, #72]	; (8019af8 <prvHeapInit+0xb4>)
 8019ab0:	681b      	ldr	r3, [r3, #0]
 8019ab2:	2200      	movs	r2, #0
 8019ab4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019aba:	683b      	ldr	r3, [r7, #0]
 8019abc:	68fa      	ldr	r2, [r7, #12]
 8019abe:	1ad2      	subs	r2, r2, r3
 8019ac0:	683b      	ldr	r3, [r7, #0]
 8019ac2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019ac4:	4b0c      	ldr	r3, [pc, #48]	; (8019af8 <prvHeapInit+0xb4>)
 8019ac6:	681a      	ldr	r2, [r3, #0]
 8019ac8:	683b      	ldr	r3, [r7, #0]
 8019aca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019acc:	683b      	ldr	r3, [r7, #0]
 8019ace:	685b      	ldr	r3, [r3, #4]
 8019ad0:	4a0a      	ldr	r2, [pc, #40]	; (8019afc <prvHeapInit+0xb8>)
 8019ad2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019ad4:	683b      	ldr	r3, [r7, #0]
 8019ad6:	685b      	ldr	r3, [r3, #4]
 8019ad8:	4a09      	ldr	r2, [pc, #36]	; (8019b00 <prvHeapInit+0xbc>)
 8019ada:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019adc:	4b09      	ldr	r3, [pc, #36]	; (8019b04 <prvHeapInit+0xc0>)
 8019ade:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019ae2:	601a      	str	r2, [r3, #0]
}
 8019ae4:	bf00      	nop
 8019ae6:	3714      	adds	r7, #20
 8019ae8:	46bd      	mov	sp, r7
 8019aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aee:	4770      	bx	lr
 8019af0:	20001df8 	.word	0x20001df8
 8019af4:	200059f8 	.word	0x200059f8
 8019af8:	20005a00 	.word	0x20005a00
 8019afc:	20005a08 	.word	0x20005a08
 8019b00:	20005a04 	.word	0x20005a04
 8019b04:	20005a14 	.word	0x20005a14

08019b08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019b08:	b480      	push	{r7}
 8019b0a:	b085      	sub	sp, #20
 8019b0c:	af00      	add	r7, sp, #0
 8019b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019b10:	4b28      	ldr	r3, [pc, #160]	; (8019bb4 <prvInsertBlockIntoFreeList+0xac>)
 8019b12:	60fb      	str	r3, [r7, #12]
 8019b14:	e002      	b.n	8019b1c <prvInsertBlockIntoFreeList+0x14>
 8019b16:	68fb      	ldr	r3, [r7, #12]
 8019b18:	681b      	ldr	r3, [r3, #0]
 8019b1a:	60fb      	str	r3, [r7, #12]
 8019b1c:	68fb      	ldr	r3, [r7, #12]
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	687a      	ldr	r2, [r7, #4]
 8019b22:	429a      	cmp	r2, r3
 8019b24:	d8f7      	bhi.n	8019b16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019b26:	68fb      	ldr	r3, [r7, #12]
 8019b28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019b2a:	68fb      	ldr	r3, [r7, #12]
 8019b2c:	685b      	ldr	r3, [r3, #4]
 8019b2e:	68ba      	ldr	r2, [r7, #8]
 8019b30:	4413      	add	r3, r2
 8019b32:	687a      	ldr	r2, [r7, #4]
 8019b34:	429a      	cmp	r2, r3
 8019b36:	d108      	bne.n	8019b4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019b38:	68fb      	ldr	r3, [r7, #12]
 8019b3a:	685a      	ldr	r2, [r3, #4]
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	685b      	ldr	r3, [r3, #4]
 8019b40:	441a      	add	r2, r3
 8019b42:	68fb      	ldr	r3, [r7, #12]
 8019b44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019b46:	68fb      	ldr	r3, [r7, #12]
 8019b48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	685b      	ldr	r3, [r3, #4]
 8019b52:	68ba      	ldr	r2, [r7, #8]
 8019b54:	441a      	add	r2, r3
 8019b56:	68fb      	ldr	r3, [r7, #12]
 8019b58:	681b      	ldr	r3, [r3, #0]
 8019b5a:	429a      	cmp	r2, r3
 8019b5c:	d118      	bne.n	8019b90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019b5e:	68fb      	ldr	r3, [r7, #12]
 8019b60:	681a      	ldr	r2, [r3, #0]
 8019b62:	4b15      	ldr	r3, [pc, #84]	; (8019bb8 <prvInsertBlockIntoFreeList+0xb0>)
 8019b64:	681b      	ldr	r3, [r3, #0]
 8019b66:	429a      	cmp	r2, r3
 8019b68:	d00d      	beq.n	8019b86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	685a      	ldr	r2, [r3, #4]
 8019b6e:	68fb      	ldr	r3, [r7, #12]
 8019b70:	681b      	ldr	r3, [r3, #0]
 8019b72:	685b      	ldr	r3, [r3, #4]
 8019b74:	441a      	add	r2, r3
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019b7a:	68fb      	ldr	r3, [r7, #12]
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	681a      	ldr	r2, [r3, #0]
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	601a      	str	r2, [r3, #0]
 8019b84:	e008      	b.n	8019b98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019b86:	4b0c      	ldr	r3, [pc, #48]	; (8019bb8 <prvInsertBlockIntoFreeList+0xb0>)
 8019b88:	681a      	ldr	r2, [r3, #0]
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	601a      	str	r2, [r3, #0]
 8019b8e:	e003      	b.n	8019b98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019b90:	68fb      	ldr	r3, [r7, #12]
 8019b92:	681a      	ldr	r2, [r3, #0]
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019b98:	68fa      	ldr	r2, [r7, #12]
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	429a      	cmp	r2, r3
 8019b9e:	d002      	beq.n	8019ba6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019ba0:	68fb      	ldr	r3, [r7, #12]
 8019ba2:	687a      	ldr	r2, [r7, #4]
 8019ba4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019ba6:	bf00      	nop
 8019ba8:	3714      	adds	r7, #20
 8019baa:	46bd      	mov	sp, r7
 8019bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bb0:	4770      	bx	lr
 8019bb2:	bf00      	nop
 8019bb4:	200059f8 	.word	0x200059f8
 8019bb8:	20005a00 	.word	0x20005a00

08019bbc <__errno>:
 8019bbc:	4b01      	ldr	r3, [pc, #4]	; (8019bc4 <__errno+0x8>)
 8019bbe:	6818      	ldr	r0, [r3, #0]
 8019bc0:	4770      	bx	lr
 8019bc2:	bf00      	nop
 8019bc4:	200000c4 	.word	0x200000c4

08019bc8 <__libc_init_array>:
 8019bc8:	b570      	push	{r4, r5, r6, lr}
 8019bca:	4d0d      	ldr	r5, [pc, #52]	; (8019c00 <__libc_init_array+0x38>)
 8019bcc:	4c0d      	ldr	r4, [pc, #52]	; (8019c04 <__libc_init_array+0x3c>)
 8019bce:	1b64      	subs	r4, r4, r5
 8019bd0:	10a4      	asrs	r4, r4, #2
 8019bd2:	2600      	movs	r6, #0
 8019bd4:	42a6      	cmp	r6, r4
 8019bd6:	d109      	bne.n	8019bec <__libc_init_array+0x24>
 8019bd8:	4d0b      	ldr	r5, [pc, #44]	; (8019c08 <__libc_init_array+0x40>)
 8019bda:	4c0c      	ldr	r4, [pc, #48]	; (8019c0c <__libc_init_array+0x44>)
 8019bdc:	f005 ff40 	bl	801fa60 <_init>
 8019be0:	1b64      	subs	r4, r4, r5
 8019be2:	10a4      	asrs	r4, r4, #2
 8019be4:	2600      	movs	r6, #0
 8019be6:	42a6      	cmp	r6, r4
 8019be8:	d105      	bne.n	8019bf6 <__libc_init_array+0x2e>
 8019bea:	bd70      	pop	{r4, r5, r6, pc}
 8019bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8019bf0:	4798      	blx	r3
 8019bf2:	3601      	adds	r6, #1
 8019bf4:	e7ee      	b.n	8019bd4 <__libc_init_array+0xc>
 8019bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8019bfa:	4798      	blx	r3
 8019bfc:	3601      	adds	r6, #1
 8019bfe:	e7f2      	b.n	8019be6 <__libc_init_array+0x1e>
 8019c00:	08020ba4 	.word	0x08020ba4
 8019c04:	08020ba4 	.word	0x08020ba4
 8019c08:	08020ba4 	.word	0x08020ba4
 8019c0c:	08020ba8 	.word	0x08020ba8

08019c10 <malloc>:
 8019c10:	4b02      	ldr	r3, [pc, #8]	; (8019c1c <malloc+0xc>)
 8019c12:	4601      	mov	r1, r0
 8019c14:	6818      	ldr	r0, [r3, #0]
 8019c16:	f000 b869 	b.w	8019cec <_malloc_r>
 8019c1a:	bf00      	nop
 8019c1c:	200000c4 	.word	0x200000c4

08019c20 <memcpy>:
 8019c20:	440a      	add	r2, r1
 8019c22:	4291      	cmp	r1, r2
 8019c24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019c28:	d100      	bne.n	8019c2c <memcpy+0xc>
 8019c2a:	4770      	bx	lr
 8019c2c:	b510      	push	{r4, lr}
 8019c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019c32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019c36:	4291      	cmp	r1, r2
 8019c38:	d1f9      	bne.n	8019c2e <memcpy+0xe>
 8019c3a:	bd10      	pop	{r4, pc}

08019c3c <memset>:
 8019c3c:	4402      	add	r2, r0
 8019c3e:	4603      	mov	r3, r0
 8019c40:	4293      	cmp	r3, r2
 8019c42:	d100      	bne.n	8019c46 <memset+0xa>
 8019c44:	4770      	bx	lr
 8019c46:	f803 1b01 	strb.w	r1, [r3], #1
 8019c4a:	e7f9      	b.n	8019c40 <memset+0x4>

08019c4c <_free_r>:
 8019c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019c4e:	2900      	cmp	r1, #0
 8019c50:	d048      	beq.n	8019ce4 <_free_r+0x98>
 8019c52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019c56:	9001      	str	r0, [sp, #4]
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	f1a1 0404 	sub.w	r4, r1, #4
 8019c5e:	bfb8      	it	lt
 8019c60:	18e4      	addlt	r4, r4, r3
 8019c62:	f003 f8fd 	bl	801ce60 <__malloc_lock>
 8019c66:	4a20      	ldr	r2, [pc, #128]	; (8019ce8 <_free_r+0x9c>)
 8019c68:	9801      	ldr	r0, [sp, #4]
 8019c6a:	6813      	ldr	r3, [r2, #0]
 8019c6c:	4615      	mov	r5, r2
 8019c6e:	b933      	cbnz	r3, 8019c7e <_free_r+0x32>
 8019c70:	6063      	str	r3, [r4, #4]
 8019c72:	6014      	str	r4, [r2, #0]
 8019c74:	b003      	add	sp, #12
 8019c76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019c7a:	f003 b8f7 	b.w	801ce6c <__malloc_unlock>
 8019c7e:	42a3      	cmp	r3, r4
 8019c80:	d90b      	bls.n	8019c9a <_free_r+0x4e>
 8019c82:	6821      	ldr	r1, [r4, #0]
 8019c84:	1862      	adds	r2, r4, r1
 8019c86:	4293      	cmp	r3, r2
 8019c88:	bf04      	itt	eq
 8019c8a:	681a      	ldreq	r2, [r3, #0]
 8019c8c:	685b      	ldreq	r3, [r3, #4]
 8019c8e:	6063      	str	r3, [r4, #4]
 8019c90:	bf04      	itt	eq
 8019c92:	1852      	addeq	r2, r2, r1
 8019c94:	6022      	streq	r2, [r4, #0]
 8019c96:	602c      	str	r4, [r5, #0]
 8019c98:	e7ec      	b.n	8019c74 <_free_r+0x28>
 8019c9a:	461a      	mov	r2, r3
 8019c9c:	685b      	ldr	r3, [r3, #4]
 8019c9e:	b10b      	cbz	r3, 8019ca4 <_free_r+0x58>
 8019ca0:	42a3      	cmp	r3, r4
 8019ca2:	d9fa      	bls.n	8019c9a <_free_r+0x4e>
 8019ca4:	6811      	ldr	r1, [r2, #0]
 8019ca6:	1855      	adds	r5, r2, r1
 8019ca8:	42a5      	cmp	r5, r4
 8019caa:	d10b      	bne.n	8019cc4 <_free_r+0x78>
 8019cac:	6824      	ldr	r4, [r4, #0]
 8019cae:	4421      	add	r1, r4
 8019cb0:	1854      	adds	r4, r2, r1
 8019cb2:	42a3      	cmp	r3, r4
 8019cb4:	6011      	str	r1, [r2, #0]
 8019cb6:	d1dd      	bne.n	8019c74 <_free_r+0x28>
 8019cb8:	681c      	ldr	r4, [r3, #0]
 8019cba:	685b      	ldr	r3, [r3, #4]
 8019cbc:	6053      	str	r3, [r2, #4]
 8019cbe:	4421      	add	r1, r4
 8019cc0:	6011      	str	r1, [r2, #0]
 8019cc2:	e7d7      	b.n	8019c74 <_free_r+0x28>
 8019cc4:	d902      	bls.n	8019ccc <_free_r+0x80>
 8019cc6:	230c      	movs	r3, #12
 8019cc8:	6003      	str	r3, [r0, #0]
 8019cca:	e7d3      	b.n	8019c74 <_free_r+0x28>
 8019ccc:	6825      	ldr	r5, [r4, #0]
 8019cce:	1961      	adds	r1, r4, r5
 8019cd0:	428b      	cmp	r3, r1
 8019cd2:	bf04      	itt	eq
 8019cd4:	6819      	ldreq	r1, [r3, #0]
 8019cd6:	685b      	ldreq	r3, [r3, #4]
 8019cd8:	6063      	str	r3, [r4, #4]
 8019cda:	bf04      	itt	eq
 8019cdc:	1949      	addeq	r1, r1, r5
 8019cde:	6021      	streq	r1, [r4, #0]
 8019ce0:	6054      	str	r4, [r2, #4]
 8019ce2:	e7c7      	b.n	8019c74 <_free_r+0x28>
 8019ce4:	b003      	add	sp, #12
 8019ce6:	bd30      	pop	{r4, r5, pc}
 8019ce8:	20005a18 	.word	0x20005a18

08019cec <_malloc_r>:
 8019cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cee:	1ccd      	adds	r5, r1, #3
 8019cf0:	f025 0503 	bic.w	r5, r5, #3
 8019cf4:	3508      	adds	r5, #8
 8019cf6:	2d0c      	cmp	r5, #12
 8019cf8:	bf38      	it	cc
 8019cfa:	250c      	movcc	r5, #12
 8019cfc:	2d00      	cmp	r5, #0
 8019cfe:	4606      	mov	r6, r0
 8019d00:	db01      	blt.n	8019d06 <_malloc_r+0x1a>
 8019d02:	42a9      	cmp	r1, r5
 8019d04:	d903      	bls.n	8019d0e <_malloc_r+0x22>
 8019d06:	230c      	movs	r3, #12
 8019d08:	6033      	str	r3, [r6, #0]
 8019d0a:	2000      	movs	r0, #0
 8019d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d0e:	f003 f8a7 	bl	801ce60 <__malloc_lock>
 8019d12:	4921      	ldr	r1, [pc, #132]	; (8019d98 <_malloc_r+0xac>)
 8019d14:	680a      	ldr	r2, [r1, #0]
 8019d16:	4614      	mov	r4, r2
 8019d18:	b99c      	cbnz	r4, 8019d42 <_malloc_r+0x56>
 8019d1a:	4f20      	ldr	r7, [pc, #128]	; (8019d9c <_malloc_r+0xb0>)
 8019d1c:	683b      	ldr	r3, [r7, #0]
 8019d1e:	b923      	cbnz	r3, 8019d2a <_malloc_r+0x3e>
 8019d20:	4621      	mov	r1, r4
 8019d22:	4630      	mov	r0, r6
 8019d24:	f000 febe 	bl	801aaa4 <_sbrk_r>
 8019d28:	6038      	str	r0, [r7, #0]
 8019d2a:	4629      	mov	r1, r5
 8019d2c:	4630      	mov	r0, r6
 8019d2e:	f000 feb9 	bl	801aaa4 <_sbrk_r>
 8019d32:	1c43      	adds	r3, r0, #1
 8019d34:	d123      	bne.n	8019d7e <_malloc_r+0x92>
 8019d36:	230c      	movs	r3, #12
 8019d38:	6033      	str	r3, [r6, #0]
 8019d3a:	4630      	mov	r0, r6
 8019d3c:	f003 f896 	bl	801ce6c <__malloc_unlock>
 8019d40:	e7e3      	b.n	8019d0a <_malloc_r+0x1e>
 8019d42:	6823      	ldr	r3, [r4, #0]
 8019d44:	1b5b      	subs	r3, r3, r5
 8019d46:	d417      	bmi.n	8019d78 <_malloc_r+0x8c>
 8019d48:	2b0b      	cmp	r3, #11
 8019d4a:	d903      	bls.n	8019d54 <_malloc_r+0x68>
 8019d4c:	6023      	str	r3, [r4, #0]
 8019d4e:	441c      	add	r4, r3
 8019d50:	6025      	str	r5, [r4, #0]
 8019d52:	e004      	b.n	8019d5e <_malloc_r+0x72>
 8019d54:	6863      	ldr	r3, [r4, #4]
 8019d56:	42a2      	cmp	r2, r4
 8019d58:	bf0c      	ite	eq
 8019d5a:	600b      	streq	r3, [r1, #0]
 8019d5c:	6053      	strne	r3, [r2, #4]
 8019d5e:	4630      	mov	r0, r6
 8019d60:	f003 f884 	bl	801ce6c <__malloc_unlock>
 8019d64:	f104 000b 	add.w	r0, r4, #11
 8019d68:	1d23      	adds	r3, r4, #4
 8019d6a:	f020 0007 	bic.w	r0, r0, #7
 8019d6e:	1ac2      	subs	r2, r0, r3
 8019d70:	d0cc      	beq.n	8019d0c <_malloc_r+0x20>
 8019d72:	1a1b      	subs	r3, r3, r0
 8019d74:	50a3      	str	r3, [r4, r2]
 8019d76:	e7c9      	b.n	8019d0c <_malloc_r+0x20>
 8019d78:	4622      	mov	r2, r4
 8019d7a:	6864      	ldr	r4, [r4, #4]
 8019d7c:	e7cc      	b.n	8019d18 <_malloc_r+0x2c>
 8019d7e:	1cc4      	adds	r4, r0, #3
 8019d80:	f024 0403 	bic.w	r4, r4, #3
 8019d84:	42a0      	cmp	r0, r4
 8019d86:	d0e3      	beq.n	8019d50 <_malloc_r+0x64>
 8019d88:	1a21      	subs	r1, r4, r0
 8019d8a:	4630      	mov	r0, r6
 8019d8c:	f000 fe8a 	bl	801aaa4 <_sbrk_r>
 8019d90:	3001      	adds	r0, #1
 8019d92:	d1dd      	bne.n	8019d50 <_malloc_r+0x64>
 8019d94:	e7cf      	b.n	8019d36 <_malloc_r+0x4a>
 8019d96:	bf00      	nop
 8019d98:	20005a18 	.word	0x20005a18
 8019d9c:	20005a1c 	.word	0x20005a1c

08019da0 <__cvt>:
 8019da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019da4:	ec55 4b10 	vmov	r4, r5, d0
 8019da8:	2d00      	cmp	r5, #0
 8019daa:	460e      	mov	r6, r1
 8019dac:	4619      	mov	r1, r3
 8019dae:	462b      	mov	r3, r5
 8019db0:	bfbb      	ittet	lt
 8019db2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8019db6:	461d      	movlt	r5, r3
 8019db8:	2300      	movge	r3, #0
 8019dba:	232d      	movlt	r3, #45	; 0x2d
 8019dbc:	700b      	strb	r3, [r1, #0]
 8019dbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019dc0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019dc4:	4691      	mov	r9, r2
 8019dc6:	f023 0820 	bic.w	r8, r3, #32
 8019dca:	bfbc      	itt	lt
 8019dcc:	4622      	movlt	r2, r4
 8019dce:	4614      	movlt	r4, r2
 8019dd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019dd4:	d005      	beq.n	8019de2 <__cvt+0x42>
 8019dd6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019dda:	d100      	bne.n	8019dde <__cvt+0x3e>
 8019ddc:	3601      	adds	r6, #1
 8019dde:	2102      	movs	r1, #2
 8019de0:	e000      	b.n	8019de4 <__cvt+0x44>
 8019de2:	2103      	movs	r1, #3
 8019de4:	ab03      	add	r3, sp, #12
 8019de6:	9301      	str	r3, [sp, #4]
 8019de8:	ab02      	add	r3, sp, #8
 8019dea:	9300      	str	r3, [sp, #0]
 8019dec:	ec45 4b10 	vmov	d0, r4, r5
 8019df0:	4653      	mov	r3, sl
 8019df2:	4632      	mov	r2, r6
 8019df4:	f001 feb0 	bl	801bb58 <_dtoa_r>
 8019df8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019dfc:	4607      	mov	r7, r0
 8019dfe:	d102      	bne.n	8019e06 <__cvt+0x66>
 8019e00:	f019 0f01 	tst.w	r9, #1
 8019e04:	d022      	beq.n	8019e4c <__cvt+0xac>
 8019e06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019e0a:	eb07 0906 	add.w	r9, r7, r6
 8019e0e:	d110      	bne.n	8019e32 <__cvt+0x92>
 8019e10:	783b      	ldrb	r3, [r7, #0]
 8019e12:	2b30      	cmp	r3, #48	; 0x30
 8019e14:	d10a      	bne.n	8019e2c <__cvt+0x8c>
 8019e16:	2200      	movs	r2, #0
 8019e18:	2300      	movs	r3, #0
 8019e1a:	4620      	mov	r0, r4
 8019e1c:	4629      	mov	r1, r5
 8019e1e:	f7e6 fe53 	bl	8000ac8 <__aeabi_dcmpeq>
 8019e22:	b918      	cbnz	r0, 8019e2c <__cvt+0x8c>
 8019e24:	f1c6 0601 	rsb	r6, r6, #1
 8019e28:	f8ca 6000 	str.w	r6, [sl]
 8019e2c:	f8da 3000 	ldr.w	r3, [sl]
 8019e30:	4499      	add	r9, r3
 8019e32:	2200      	movs	r2, #0
 8019e34:	2300      	movs	r3, #0
 8019e36:	4620      	mov	r0, r4
 8019e38:	4629      	mov	r1, r5
 8019e3a:	f7e6 fe45 	bl	8000ac8 <__aeabi_dcmpeq>
 8019e3e:	b108      	cbz	r0, 8019e44 <__cvt+0xa4>
 8019e40:	f8cd 900c 	str.w	r9, [sp, #12]
 8019e44:	2230      	movs	r2, #48	; 0x30
 8019e46:	9b03      	ldr	r3, [sp, #12]
 8019e48:	454b      	cmp	r3, r9
 8019e4a:	d307      	bcc.n	8019e5c <__cvt+0xbc>
 8019e4c:	9b03      	ldr	r3, [sp, #12]
 8019e4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019e50:	1bdb      	subs	r3, r3, r7
 8019e52:	4638      	mov	r0, r7
 8019e54:	6013      	str	r3, [r2, #0]
 8019e56:	b004      	add	sp, #16
 8019e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e5c:	1c59      	adds	r1, r3, #1
 8019e5e:	9103      	str	r1, [sp, #12]
 8019e60:	701a      	strb	r2, [r3, #0]
 8019e62:	e7f0      	b.n	8019e46 <__cvt+0xa6>

08019e64 <__exponent>:
 8019e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019e66:	4603      	mov	r3, r0
 8019e68:	2900      	cmp	r1, #0
 8019e6a:	bfb8      	it	lt
 8019e6c:	4249      	neglt	r1, r1
 8019e6e:	f803 2b02 	strb.w	r2, [r3], #2
 8019e72:	bfb4      	ite	lt
 8019e74:	222d      	movlt	r2, #45	; 0x2d
 8019e76:	222b      	movge	r2, #43	; 0x2b
 8019e78:	2909      	cmp	r1, #9
 8019e7a:	7042      	strb	r2, [r0, #1]
 8019e7c:	dd2a      	ble.n	8019ed4 <__exponent+0x70>
 8019e7e:	f10d 0407 	add.w	r4, sp, #7
 8019e82:	46a4      	mov	ip, r4
 8019e84:	270a      	movs	r7, #10
 8019e86:	46a6      	mov	lr, r4
 8019e88:	460a      	mov	r2, r1
 8019e8a:	fb91 f6f7 	sdiv	r6, r1, r7
 8019e8e:	fb07 1516 	mls	r5, r7, r6, r1
 8019e92:	3530      	adds	r5, #48	; 0x30
 8019e94:	2a63      	cmp	r2, #99	; 0x63
 8019e96:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8019e9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019e9e:	4631      	mov	r1, r6
 8019ea0:	dcf1      	bgt.n	8019e86 <__exponent+0x22>
 8019ea2:	3130      	adds	r1, #48	; 0x30
 8019ea4:	f1ae 0502 	sub.w	r5, lr, #2
 8019ea8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8019eac:	1c44      	adds	r4, r0, #1
 8019eae:	4629      	mov	r1, r5
 8019eb0:	4561      	cmp	r1, ip
 8019eb2:	d30a      	bcc.n	8019eca <__exponent+0x66>
 8019eb4:	f10d 0209 	add.w	r2, sp, #9
 8019eb8:	eba2 020e 	sub.w	r2, r2, lr
 8019ebc:	4565      	cmp	r5, ip
 8019ebe:	bf88      	it	hi
 8019ec0:	2200      	movhi	r2, #0
 8019ec2:	4413      	add	r3, r2
 8019ec4:	1a18      	subs	r0, r3, r0
 8019ec6:	b003      	add	sp, #12
 8019ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019eca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019ece:	f804 2f01 	strb.w	r2, [r4, #1]!
 8019ed2:	e7ed      	b.n	8019eb0 <__exponent+0x4c>
 8019ed4:	2330      	movs	r3, #48	; 0x30
 8019ed6:	3130      	adds	r1, #48	; 0x30
 8019ed8:	7083      	strb	r3, [r0, #2]
 8019eda:	70c1      	strb	r1, [r0, #3]
 8019edc:	1d03      	adds	r3, r0, #4
 8019ede:	e7f1      	b.n	8019ec4 <__exponent+0x60>

08019ee0 <_printf_float>:
 8019ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ee4:	ed2d 8b02 	vpush	{d8}
 8019ee8:	b08d      	sub	sp, #52	; 0x34
 8019eea:	460c      	mov	r4, r1
 8019eec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019ef0:	4616      	mov	r6, r2
 8019ef2:	461f      	mov	r7, r3
 8019ef4:	4605      	mov	r5, r0
 8019ef6:	f002 ff8b 	bl	801ce10 <_localeconv_r>
 8019efa:	f8d0 a000 	ldr.w	sl, [r0]
 8019efe:	4650      	mov	r0, sl
 8019f00:	f7e6 f966 	bl	80001d0 <strlen>
 8019f04:	2300      	movs	r3, #0
 8019f06:	930a      	str	r3, [sp, #40]	; 0x28
 8019f08:	6823      	ldr	r3, [r4, #0]
 8019f0a:	9305      	str	r3, [sp, #20]
 8019f0c:	f8d8 3000 	ldr.w	r3, [r8]
 8019f10:	f894 b018 	ldrb.w	fp, [r4, #24]
 8019f14:	3307      	adds	r3, #7
 8019f16:	f023 0307 	bic.w	r3, r3, #7
 8019f1a:	f103 0208 	add.w	r2, r3, #8
 8019f1e:	f8c8 2000 	str.w	r2, [r8]
 8019f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f26:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019f2a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019f2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019f32:	9307      	str	r3, [sp, #28]
 8019f34:	f8cd 8018 	str.w	r8, [sp, #24]
 8019f38:	ee08 0a10 	vmov	s16, r0
 8019f3c:	4b9f      	ldr	r3, [pc, #636]	; (801a1bc <_printf_float+0x2dc>)
 8019f3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019f42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019f46:	f7e6 fdf1 	bl	8000b2c <__aeabi_dcmpun>
 8019f4a:	bb88      	cbnz	r0, 8019fb0 <_printf_float+0xd0>
 8019f4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019f50:	4b9a      	ldr	r3, [pc, #616]	; (801a1bc <_printf_float+0x2dc>)
 8019f52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019f56:	f7e6 fdcb 	bl	8000af0 <__aeabi_dcmple>
 8019f5a:	bb48      	cbnz	r0, 8019fb0 <_printf_float+0xd0>
 8019f5c:	2200      	movs	r2, #0
 8019f5e:	2300      	movs	r3, #0
 8019f60:	4640      	mov	r0, r8
 8019f62:	4649      	mov	r1, r9
 8019f64:	f7e6 fdba 	bl	8000adc <__aeabi_dcmplt>
 8019f68:	b110      	cbz	r0, 8019f70 <_printf_float+0x90>
 8019f6a:	232d      	movs	r3, #45	; 0x2d
 8019f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019f70:	4b93      	ldr	r3, [pc, #588]	; (801a1c0 <_printf_float+0x2e0>)
 8019f72:	4894      	ldr	r0, [pc, #592]	; (801a1c4 <_printf_float+0x2e4>)
 8019f74:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019f78:	bf94      	ite	ls
 8019f7a:	4698      	movls	r8, r3
 8019f7c:	4680      	movhi	r8, r0
 8019f7e:	2303      	movs	r3, #3
 8019f80:	6123      	str	r3, [r4, #16]
 8019f82:	9b05      	ldr	r3, [sp, #20]
 8019f84:	f023 0204 	bic.w	r2, r3, #4
 8019f88:	6022      	str	r2, [r4, #0]
 8019f8a:	f04f 0900 	mov.w	r9, #0
 8019f8e:	9700      	str	r7, [sp, #0]
 8019f90:	4633      	mov	r3, r6
 8019f92:	aa0b      	add	r2, sp, #44	; 0x2c
 8019f94:	4621      	mov	r1, r4
 8019f96:	4628      	mov	r0, r5
 8019f98:	f000 f9d8 	bl	801a34c <_printf_common>
 8019f9c:	3001      	adds	r0, #1
 8019f9e:	f040 8090 	bne.w	801a0c2 <_printf_float+0x1e2>
 8019fa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019fa6:	b00d      	add	sp, #52	; 0x34
 8019fa8:	ecbd 8b02 	vpop	{d8}
 8019fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fb0:	4642      	mov	r2, r8
 8019fb2:	464b      	mov	r3, r9
 8019fb4:	4640      	mov	r0, r8
 8019fb6:	4649      	mov	r1, r9
 8019fb8:	f7e6 fdb8 	bl	8000b2c <__aeabi_dcmpun>
 8019fbc:	b140      	cbz	r0, 8019fd0 <_printf_float+0xf0>
 8019fbe:	464b      	mov	r3, r9
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	bfbc      	itt	lt
 8019fc4:	232d      	movlt	r3, #45	; 0x2d
 8019fc6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019fca:	487f      	ldr	r0, [pc, #508]	; (801a1c8 <_printf_float+0x2e8>)
 8019fcc:	4b7f      	ldr	r3, [pc, #508]	; (801a1cc <_printf_float+0x2ec>)
 8019fce:	e7d1      	b.n	8019f74 <_printf_float+0x94>
 8019fd0:	6863      	ldr	r3, [r4, #4]
 8019fd2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8019fd6:	9206      	str	r2, [sp, #24]
 8019fd8:	1c5a      	adds	r2, r3, #1
 8019fda:	d13f      	bne.n	801a05c <_printf_float+0x17c>
 8019fdc:	2306      	movs	r3, #6
 8019fde:	6063      	str	r3, [r4, #4]
 8019fe0:	9b05      	ldr	r3, [sp, #20]
 8019fe2:	6861      	ldr	r1, [r4, #4]
 8019fe4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019fe8:	2300      	movs	r3, #0
 8019fea:	9303      	str	r3, [sp, #12]
 8019fec:	ab0a      	add	r3, sp, #40	; 0x28
 8019fee:	e9cd b301 	strd	fp, r3, [sp, #4]
 8019ff2:	ab09      	add	r3, sp, #36	; 0x24
 8019ff4:	ec49 8b10 	vmov	d0, r8, r9
 8019ff8:	9300      	str	r3, [sp, #0]
 8019ffa:	6022      	str	r2, [r4, #0]
 8019ffc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a000:	4628      	mov	r0, r5
 801a002:	f7ff fecd 	bl	8019da0 <__cvt>
 801a006:	9b06      	ldr	r3, [sp, #24]
 801a008:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a00a:	2b47      	cmp	r3, #71	; 0x47
 801a00c:	4680      	mov	r8, r0
 801a00e:	d108      	bne.n	801a022 <_printf_float+0x142>
 801a010:	1cc8      	adds	r0, r1, #3
 801a012:	db02      	blt.n	801a01a <_printf_float+0x13a>
 801a014:	6863      	ldr	r3, [r4, #4]
 801a016:	4299      	cmp	r1, r3
 801a018:	dd41      	ble.n	801a09e <_printf_float+0x1be>
 801a01a:	f1ab 0b02 	sub.w	fp, fp, #2
 801a01e:	fa5f fb8b 	uxtb.w	fp, fp
 801a022:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a026:	d820      	bhi.n	801a06a <_printf_float+0x18a>
 801a028:	3901      	subs	r1, #1
 801a02a:	465a      	mov	r2, fp
 801a02c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a030:	9109      	str	r1, [sp, #36]	; 0x24
 801a032:	f7ff ff17 	bl	8019e64 <__exponent>
 801a036:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a038:	1813      	adds	r3, r2, r0
 801a03a:	2a01      	cmp	r2, #1
 801a03c:	4681      	mov	r9, r0
 801a03e:	6123      	str	r3, [r4, #16]
 801a040:	dc02      	bgt.n	801a048 <_printf_float+0x168>
 801a042:	6822      	ldr	r2, [r4, #0]
 801a044:	07d2      	lsls	r2, r2, #31
 801a046:	d501      	bpl.n	801a04c <_printf_float+0x16c>
 801a048:	3301      	adds	r3, #1
 801a04a:	6123      	str	r3, [r4, #16]
 801a04c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801a050:	2b00      	cmp	r3, #0
 801a052:	d09c      	beq.n	8019f8e <_printf_float+0xae>
 801a054:	232d      	movs	r3, #45	; 0x2d
 801a056:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a05a:	e798      	b.n	8019f8e <_printf_float+0xae>
 801a05c:	9a06      	ldr	r2, [sp, #24]
 801a05e:	2a47      	cmp	r2, #71	; 0x47
 801a060:	d1be      	bne.n	8019fe0 <_printf_float+0x100>
 801a062:	2b00      	cmp	r3, #0
 801a064:	d1bc      	bne.n	8019fe0 <_printf_float+0x100>
 801a066:	2301      	movs	r3, #1
 801a068:	e7b9      	b.n	8019fde <_printf_float+0xfe>
 801a06a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801a06e:	d118      	bne.n	801a0a2 <_printf_float+0x1c2>
 801a070:	2900      	cmp	r1, #0
 801a072:	6863      	ldr	r3, [r4, #4]
 801a074:	dd0b      	ble.n	801a08e <_printf_float+0x1ae>
 801a076:	6121      	str	r1, [r4, #16]
 801a078:	b913      	cbnz	r3, 801a080 <_printf_float+0x1a0>
 801a07a:	6822      	ldr	r2, [r4, #0]
 801a07c:	07d0      	lsls	r0, r2, #31
 801a07e:	d502      	bpl.n	801a086 <_printf_float+0x1a6>
 801a080:	3301      	adds	r3, #1
 801a082:	440b      	add	r3, r1
 801a084:	6123      	str	r3, [r4, #16]
 801a086:	65a1      	str	r1, [r4, #88]	; 0x58
 801a088:	f04f 0900 	mov.w	r9, #0
 801a08c:	e7de      	b.n	801a04c <_printf_float+0x16c>
 801a08e:	b913      	cbnz	r3, 801a096 <_printf_float+0x1b6>
 801a090:	6822      	ldr	r2, [r4, #0]
 801a092:	07d2      	lsls	r2, r2, #31
 801a094:	d501      	bpl.n	801a09a <_printf_float+0x1ba>
 801a096:	3302      	adds	r3, #2
 801a098:	e7f4      	b.n	801a084 <_printf_float+0x1a4>
 801a09a:	2301      	movs	r3, #1
 801a09c:	e7f2      	b.n	801a084 <_printf_float+0x1a4>
 801a09e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801a0a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a0a4:	4299      	cmp	r1, r3
 801a0a6:	db05      	blt.n	801a0b4 <_printf_float+0x1d4>
 801a0a8:	6823      	ldr	r3, [r4, #0]
 801a0aa:	6121      	str	r1, [r4, #16]
 801a0ac:	07d8      	lsls	r0, r3, #31
 801a0ae:	d5ea      	bpl.n	801a086 <_printf_float+0x1a6>
 801a0b0:	1c4b      	adds	r3, r1, #1
 801a0b2:	e7e7      	b.n	801a084 <_printf_float+0x1a4>
 801a0b4:	2900      	cmp	r1, #0
 801a0b6:	bfd4      	ite	le
 801a0b8:	f1c1 0202 	rsble	r2, r1, #2
 801a0bc:	2201      	movgt	r2, #1
 801a0be:	4413      	add	r3, r2
 801a0c0:	e7e0      	b.n	801a084 <_printf_float+0x1a4>
 801a0c2:	6823      	ldr	r3, [r4, #0]
 801a0c4:	055a      	lsls	r2, r3, #21
 801a0c6:	d407      	bmi.n	801a0d8 <_printf_float+0x1f8>
 801a0c8:	6923      	ldr	r3, [r4, #16]
 801a0ca:	4642      	mov	r2, r8
 801a0cc:	4631      	mov	r1, r6
 801a0ce:	4628      	mov	r0, r5
 801a0d0:	47b8      	blx	r7
 801a0d2:	3001      	adds	r0, #1
 801a0d4:	d12c      	bne.n	801a130 <_printf_float+0x250>
 801a0d6:	e764      	b.n	8019fa2 <_printf_float+0xc2>
 801a0d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a0dc:	f240 80e0 	bls.w	801a2a0 <_printf_float+0x3c0>
 801a0e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a0e4:	2200      	movs	r2, #0
 801a0e6:	2300      	movs	r3, #0
 801a0e8:	f7e6 fcee 	bl	8000ac8 <__aeabi_dcmpeq>
 801a0ec:	2800      	cmp	r0, #0
 801a0ee:	d034      	beq.n	801a15a <_printf_float+0x27a>
 801a0f0:	4a37      	ldr	r2, [pc, #220]	; (801a1d0 <_printf_float+0x2f0>)
 801a0f2:	2301      	movs	r3, #1
 801a0f4:	4631      	mov	r1, r6
 801a0f6:	4628      	mov	r0, r5
 801a0f8:	47b8      	blx	r7
 801a0fa:	3001      	adds	r0, #1
 801a0fc:	f43f af51 	beq.w	8019fa2 <_printf_float+0xc2>
 801a100:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a104:	429a      	cmp	r2, r3
 801a106:	db02      	blt.n	801a10e <_printf_float+0x22e>
 801a108:	6823      	ldr	r3, [r4, #0]
 801a10a:	07d8      	lsls	r0, r3, #31
 801a10c:	d510      	bpl.n	801a130 <_printf_float+0x250>
 801a10e:	ee18 3a10 	vmov	r3, s16
 801a112:	4652      	mov	r2, sl
 801a114:	4631      	mov	r1, r6
 801a116:	4628      	mov	r0, r5
 801a118:	47b8      	blx	r7
 801a11a:	3001      	adds	r0, #1
 801a11c:	f43f af41 	beq.w	8019fa2 <_printf_float+0xc2>
 801a120:	f04f 0800 	mov.w	r8, #0
 801a124:	f104 091a 	add.w	r9, r4, #26
 801a128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a12a:	3b01      	subs	r3, #1
 801a12c:	4543      	cmp	r3, r8
 801a12e:	dc09      	bgt.n	801a144 <_printf_float+0x264>
 801a130:	6823      	ldr	r3, [r4, #0]
 801a132:	079b      	lsls	r3, r3, #30
 801a134:	f100 8105 	bmi.w	801a342 <_printf_float+0x462>
 801a138:	68e0      	ldr	r0, [r4, #12]
 801a13a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a13c:	4298      	cmp	r0, r3
 801a13e:	bfb8      	it	lt
 801a140:	4618      	movlt	r0, r3
 801a142:	e730      	b.n	8019fa6 <_printf_float+0xc6>
 801a144:	2301      	movs	r3, #1
 801a146:	464a      	mov	r2, r9
 801a148:	4631      	mov	r1, r6
 801a14a:	4628      	mov	r0, r5
 801a14c:	47b8      	blx	r7
 801a14e:	3001      	adds	r0, #1
 801a150:	f43f af27 	beq.w	8019fa2 <_printf_float+0xc2>
 801a154:	f108 0801 	add.w	r8, r8, #1
 801a158:	e7e6      	b.n	801a128 <_printf_float+0x248>
 801a15a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	dc39      	bgt.n	801a1d4 <_printf_float+0x2f4>
 801a160:	4a1b      	ldr	r2, [pc, #108]	; (801a1d0 <_printf_float+0x2f0>)
 801a162:	2301      	movs	r3, #1
 801a164:	4631      	mov	r1, r6
 801a166:	4628      	mov	r0, r5
 801a168:	47b8      	blx	r7
 801a16a:	3001      	adds	r0, #1
 801a16c:	f43f af19 	beq.w	8019fa2 <_printf_float+0xc2>
 801a170:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a174:	4313      	orrs	r3, r2
 801a176:	d102      	bne.n	801a17e <_printf_float+0x29e>
 801a178:	6823      	ldr	r3, [r4, #0]
 801a17a:	07d9      	lsls	r1, r3, #31
 801a17c:	d5d8      	bpl.n	801a130 <_printf_float+0x250>
 801a17e:	ee18 3a10 	vmov	r3, s16
 801a182:	4652      	mov	r2, sl
 801a184:	4631      	mov	r1, r6
 801a186:	4628      	mov	r0, r5
 801a188:	47b8      	blx	r7
 801a18a:	3001      	adds	r0, #1
 801a18c:	f43f af09 	beq.w	8019fa2 <_printf_float+0xc2>
 801a190:	f04f 0900 	mov.w	r9, #0
 801a194:	f104 0a1a 	add.w	sl, r4, #26
 801a198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a19a:	425b      	negs	r3, r3
 801a19c:	454b      	cmp	r3, r9
 801a19e:	dc01      	bgt.n	801a1a4 <_printf_float+0x2c4>
 801a1a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a1a2:	e792      	b.n	801a0ca <_printf_float+0x1ea>
 801a1a4:	2301      	movs	r3, #1
 801a1a6:	4652      	mov	r2, sl
 801a1a8:	4631      	mov	r1, r6
 801a1aa:	4628      	mov	r0, r5
 801a1ac:	47b8      	blx	r7
 801a1ae:	3001      	adds	r0, #1
 801a1b0:	f43f aef7 	beq.w	8019fa2 <_printf_float+0xc2>
 801a1b4:	f109 0901 	add.w	r9, r9, #1
 801a1b8:	e7ee      	b.n	801a198 <_printf_float+0x2b8>
 801a1ba:	bf00      	nop
 801a1bc:	7fefffff 	.word	0x7fefffff
 801a1c0:	080202c4 	.word	0x080202c4
 801a1c4:	080202c8 	.word	0x080202c8
 801a1c8:	080202d0 	.word	0x080202d0
 801a1cc:	080202cc 	.word	0x080202cc
 801a1d0:	080202d4 	.word	0x080202d4
 801a1d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a1d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a1d8:	429a      	cmp	r2, r3
 801a1da:	bfa8      	it	ge
 801a1dc:	461a      	movge	r2, r3
 801a1de:	2a00      	cmp	r2, #0
 801a1e0:	4691      	mov	r9, r2
 801a1e2:	dc37      	bgt.n	801a254 <_printf_float+0x374>
 801a1e4:	f04f 0b00 	mov.w	fp, #0
 801a1e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a1ec:	f104 021a 	add.w	r2, r4, #26
 801a1f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a1f2:	9305      	str	r3, [sp, #20]
 801a1f4:	eba3 0309 	sub.w	r3, r3, r9
 801a1f8:	455b      	cmp	r3, fp
 801a1fa:	dc33      	bgt.n	801a264 <_printf_float+0x384>
 801a1fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a200:	429a      	cmp	r2, r3
 801a202:	db3b      	blt.n	801a27c <_printf_float+0x39c>
 801a204:	6823      	ldr	r3, [r4, #0]
 801a206:	07da      	lsls	r2, r3, #31
 801a208:	d438      	bmi.n	801a27c <_printf_float+0x39c>
 801a20a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a20c:	9b05      	ldr	r3, [sp, #20]
 801a20e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a210:	1ad3      	subs	r3, r2, r3
 801a212:	eba2 0901 	sub.w	r9, r2, r1
 801a216:	4599      	cmp	r9, r3
 801a218:	bfa8      	it	ge
 801a21a:	4699      	movge	r9, r3
 801a21c:	f1b9 0f00 	cmp.w	r9, #0
 801a220:	dc35      	bgt.n	801a28e <_printf_float+0x3ae>
 801a222:	f04f 0800 	mov.w	r8, #0
 801a226:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a22a:	f104 0a1a 	add.w	sl, r4, #26
 801a22e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a232:	1a9b      	subs	r3, r3, r2
 801a234:	eba3 0309 	sub.w	r3, r3, r9
 801a238:	4543      	cmp	r3, r8
 801a23a:	f77f af79 	ble.w	801a130 <_printf_float+0x250>
 801a23e:	2301      	movs	r3, #1
 801a240:	4652      	mov	r2, sl
 801a242:	4631      	mov	r1, r6
 801a244:	4628      	mov	r0, r5
 801a246:	47b8      	blx	r7
 801a248:	3001      	adds	r0, #1
 801a24a:	f43f aeaa 	beq.w	8019fa2 <_printf_float+0xc2>
 801a24e:	f108 0801 	add.w	r8, r8, #1
 801a252:	e7ec      	b.n	801a22e <_printf_float+0x34e>
 801a254:	4613      	mov	r3, r2
 801a256:	4631      	mov	r1, r6
 801a258:	4642      	mov	r2, r8
 801a25a:	4628      	mov	r0, r5
 801a25c:	47b8      	blx	r7
 801a25e:	3001      	adds	r0, #1
 801a260:	d1c0      	bne.n	801a1e4 <_printf_float+0x304>
 801a262:	e69e      	b.n	8019fa2 <_printf_float+0xc2>
 801a264:	2301      	movs	r3, #1
 801a266:	4631      	mov	r1, r6
 801a268:	4628      	mov	r0, r5
 801a26a:	9205      	str	r2, [sp, #20]
 801a26c:	47b8      	blx	r7
 801a26e:	3001      	adds	r0, #1
 801a270:	f43f ae97 	beq.w	8019fa2 <_printf_float+0xc2>
 801a274:	9a05      	ldr	r2, [sp, #20]
 801a276:	f10b 0b01 	add.w	fp, fp, #1
 801a27a:	e7b9      	b.n	801a1f0 <_printf_float+0x310>
 801a27c:	ee18 3a10 	vmov	r3, s16
 801a280:	4652      	mov	r2, sl
 801a282:	4631      	mov	r1, r6
 801a284:	4628      	mov	r0, r5
 801a286:	47b8      	blx	r7
 801a288:	3001      	adds	r0, #1
 801a28a:	d1be      	bne.n	801a20a <_printf_float+0x32a>
 801a28c:	e689      	b.n	8019fa2 <_printf_float+0xc2>
 801a28e:	9a05      	ldr	r2, [sp, #20]
 801a290:	464b      	mov	r3, r9
 801a292:	4442      	add	r2, r8
 801a294:	4631      	mov	r1, r6
 801a296:	4628      	mov	r0, r5
 801a298:	47b8      	blx	r7
 801a29a:	3001      	adds	r0, #1
 801a29c:	d1c1      	bne.n	801a222 <_printf_float+0x342>
 801a29e:	e680      	b.n	8019fa2 <_printf_float+0xc2>
 801a2a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a2a2:	2a01      	cmp	r2, #1
 801a2a4:	dc01      	bgt.n	801a2aa <_printf_float+0x3ca>
 801a2a6:	07db      	lsls	r3, r3, #31
 801a2a8:	d538      	bpl.n	801a31c <_printf_float+0x43c>
 801a2aa:	2301      	movs	r3, #1
 801a2ac:	4642      	mov	r2, r8
 801a2ae:	4631      	mov	r1, r6
 801a2b0:	4628      	mov	r0, r5
 801a2b2:	47b8      	blx	r7
 801a2b4:	3001      	adds	r0, #1
 801a2b6:	f43f ae74 	beq.w	8019fa2 <_printf_float+0xc2>
 801a2ba:	ee18 3a10 	vmov	r3, s16
 801a2be:	4652      	mov	r2, sl
 801a2c0:	4631      	mov	r1, r6
 801a2c2:	4628      	mov	r0, r5
 801a2c4:	47b8      	blx	r7
 801a2c6:	3001      	adds	r0, #1
 801a2c8:	f43f ae6b 	beq.w	8019fa2 <_printf_float+0xc2>
 801a2cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a2d0:	2200      	movs	r2, #0
 801a2d2:	2300      	movs	r3, #0
 801a2d4:	f7e6 fbf8 	bl	8000ac8 <__aeabi_dcmpeq>
 801a2d8:	b9d8      	cbnz	r0, 801a312 <_printf_float+0x432>
 801a2da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a2dc:	f108 0201 	add.w	r2, r8, #1
 801a2e0:	3b01      	subs	r3, #1
 801a2e2:	4631      	mov	r1, r6
 801a2e4:	4628      	mov	r0, r5
 801a2e6:	47b8      	blx	r7
 801a2e8:	3001      	adds	r0, #1
 801a2ea:	d10e      	bne.n	801a30a <_printf_float+0x42a>
 801a2ec:	e659      	b.n	8019fa2 <_printf_float+0xc2>
 801a2ee:	2301      	movs	r3, #1
 801a2f0:	4652      	mov	r2, sl
 801a2f2:	4631      	mov	r1, r6
 801a2f4:	4628      	mov	r0, r5
 801a2f6:	47b8      	blx	r7
 801a2f8:	3001      	adds	r0, #1
 801a2fa:	f43f ae52 	beq.w	8019fa2 <_printf_float+0xc2>
 801a2fe:	f108 0801 	add.w	r8, r8, #1
 801a302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a304:	3b01      	subs	r3, #1
 801a306:	4543      	cmp	r3, r8
 801a308:	dcf1      	bgt.n	801a2ee <_printf_float+0x40e>
 801a30a:	464b      	mov	r3, r9
 801a30c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a310:	e6dc      	b.n	801a0cc <_printf_float+0x1ec>
 801a312:	f04f 0800 	mov.w	r8, #0
 801a316:	f104 0a1a 	add.w	sl, r4, #26
 801a31a:	e7f2      	b.n	801a302 <_printf_float+0x422>
 801a31c:	2301      	movs	r3, #1
 801a31e:	4642      	mov	r2, r8
 801a320:	e7df      	b.n	801a2e2 <_printf_float+0x402>
 801a322:	2301      	movs	r3, #1
 801a324:	464a      	mov	r2, r9
 801a326:	4631      	mov	r1, r6
 801a328:	4628      	mov	r0, r5
 801a32a:	47b8      	blx	r7
 801a32c:	3001      	adds	r0, #1
 801a32e:	f43f ae38 	beq.w	8019fa2 <_printf_float+0xc2>
 801a332:	f108 0801 	add.w	r8, r8, #1
 801a336:	68e3      	ldr	r3, [r4, #12]
 801a338:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a33a:	1a5b      	subs	r3, r3, r1
 801a33c:	4543      	cmp	r3, r8
 801a33e:	dcf0      	bgt.n	801a322 <_printf_float+0x442>
 801a340:	e6fa      	b.n	801a138 <_printf_float+0x258>
 801a342:	f04f 0800 	mov.w	r8, #0
 801a346:	f104 0919 	add.w	r9, r4, #25
 801a34a:	e7f4      	b.n	801a336 <_printf_float+0x456>

0801a34c <_printf_common>:
 801a34c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a350:	4616      	mov	r6, r2
 801a352:	4699      	mov	r9, r3
 801a354:	688a      	ldr	r2, [r1, #8]
 801a356:	690b      	ldr	r3, [r1, #16]
 801a358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a35c:	4293      	cmp	r3, r2
 801a35e:	bfb8      	it	lt
 801a360:	4613      	movlt	r3, r2
 801a362:	6033      	str	r3, [r6, #0]
 801a364:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a368:	4607      	mov	r7, r0
 801a36a:	460c      	mov	r4, r1
 801a36c:	b10a      	cbz	r2, 801a372 <_printf_common+0x26>
 801a36e:	3301      	adds	r3, #1
 801a370:	6033      	str	r3, [r6, #0]
 801a372:	6823      	ldr	r3, [r4, #0]
 801a374:	0699      	lsls	r1, r3, #26
 801a376:	bf42      	ittt	mi
 801a378:	6833      	ldrmi	r3, [r6, #0]
 801a37a:	3302      	addmi	r3, #2
 801a37c:	6033      	strmi	r3, [r6, #0]
 801a37e:	6825      	ldr	r5, [r4, #0]
 801a380:	f015 0506 	ands.w	r5, r5, #6
 801a384:	d106      	bne.n	801a394 <_printf_common+0x48>
 801a386:	f104 0a19 	add.w	sl, r4, #25
 801a38a:	68e3      	ldr	r3, [r4, #12]
 801a38c:	6832      	ldr	r2, [r6, #0]
 801a38e:	1a9b      	subs	r3, r3, r2
 801a390:	42ab      	cmp	r3, r5
 801a392:	dc26      	bgt.n	801a3e2 <_printf_common+0x96>
 801a394:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a398:	1e13      	subs	r3, r2, #0
 801a39a:	6822      	ldr	r2, [r4, #0]
 801a39c:	bf18      	it	ne
 801a39e:	2301      	movne	r3, #1
 801a3a0:	0692      	lsls	r2, r2, #26
 801a3a2:	d42b      	bmi.n	801a3fc <_printf_common+0xb0>
 801a3a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a3a8:	4649      	mov	r1, r9
 801a3aa:	4638      	mov	r0, r7
 801a3ac:	47c0      	blx	r8
 801a3ae:	3001      	adds	r0, #1
 801a3b0:	d01e      	beq.n	801a3f0 <_printf_common+0xa4>
 801a3b2:	6823      	ldr	r3, [r4, #0]
 801a3b4:	68e5      	ldr	r5, [r4, #12]
 801a3b6:	6832      	ldr	r2, [r6, #0]
 801a3b8:	f003 0306 	and.w	r3, r3, #6
 801a3bc:	2b04      	cmp	r3, #4
 801a3be:	bf08      	it	eq
 801a3c0:	1aad      	subeq	r5, r5, r2
 801a3c2:	68a3      	ldr	r3, [r4, #8]
 801a3c4:	6922      	ldr	r2, [r4, #16]
 801a3c6:	bf0c      	ite	eq
 801a3c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a3cc:	2500      	movne	r5, #0
 801a3ce:	4293      	cmp	r3, r2
 801a3d0:	bfc4      	itt	gt
 801a3d2:	1a9b      	subgt	r3, r3, r2
 801a3d4:	18ed      	addgt	r5, r5, r3
 801a3d6:	2600      	movs	r6, #0
 801a3d8:	341a      	adds	r4, #26
 801a3da:	42b5      	cmp	r5, r6
 801a3dc:	d11a      	bne.n	801a414 <_printf_common+0xc8>
 801a3de:	2000      	movs	r0, #0
 801a3e0:	e008      	b.n	801a3f4 <_printf_common+0xa8>
 801a3e2:	2301      	movs	r3, #1
 801a3e4:	4652      	mov	r2, sl
 801a3e6:	4649      	mov	r1, r9
 801a3e8:	4638      	mov	r0, r7
 801a3ea:	47c0      	blx	r8
 801a3ec:	3001      	adds	r0, #1
 801a3ee:	d103      	bne.n	801a3f8 <_printf_common+0xac>
 801a3f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a3f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3f8:	3501      	adds	r5, #1
 801a3fa:	e7c6      	b.n	801a38a <_printf_common+0x3e>
 801a3fc:	18e1      	adds	r1, r4, r3
 801a3fe:	1c5a      	adds	r2, r3, #1
 801a400:	2030      	movs	r0, #48	; 0x30
 801a402:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a406:	4422      	add	r2, r4
 801a408:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a40c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a410:	3302      	adds	r3, #2
 801a412:	e7c7      	b.n	801a3a4 <_printf_common+0x58>
 801a414:	2301      	movs	r3, #1
 801a416:	4622      	mov	r2, r4
 801a418:	4649      	mov	r1, r9
 801a41a:	4638      	mov	r0, r7
 801a41c:	47c0      	blx	r8
 801a41e:	3001      	adds	r0, #1
 801a420:	d0e6      	beq.n	801a3f0 <_printf_common+0xa4>
 801a422:	3601      	adds	r6, #1
 801a424:	e7d9      	b.n	801a3da <_printf_common+0x8e>
	...

0801a428 <_printf_i>:
 801a428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a42c:	460c      	mov	r4, r1
 801a42e:	4691      	mov	r9, r2
 801a430:	7e27      	ldrb	r7, [r4, #24]
 801a432:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a434:	2f78      	cmp	r7, #120	; 0x78
 801a436:	4680      	mov	r8, r0
 801a438:	469a      	mov	sl, r3
 801a43a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a43e:	d807      	bhi.n	801a450 <_printf_i+0x28>
 801a440:	2f62      	cmp	r7, #98	; 0x62
 801a442:	d80a      	bhi.n	801a45a <_printf_i+0x32>
 801a444:	2f00      	cmp	r7, #0
 801a446:	f000 80d8 	beq.w	801a5fa <_printf_i+0x1d2>
 801a44a:	2f58      	cmp	r7, #88	; 0x58
 801a44c:	f000 80a3 	beq.w	801a596 <_printf_i+0x16e>
 801a450:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a454:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a458:	e03a      	b.n	801a4d0 <_printf_i+0xa8>
 801a45a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a45e:	2b15      	cmp	r3, #21
 801a460:	d8f6      	bhi.n	801a450 <_printf_i+0x28>
 801a462:	a001      	add	r0, pc, #4	; (adr r0, 801a468 <_printf_i+0x40>)
 801a464:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801a468:	0801a4c1 	.word	0x0801a4c1
 801a46c:	0801a4d5 	.word	0x0801a4d5
 801a470:	0801a451 	.word	0x0801a451
 801a474:	0801a451 	.word	0x0801a451
 801a478:	0801a451 	.word	0x0801a451
 801a47c:	0801a451 	.word	0x0801a451
 801a480:	0801a4d5 	.word	0x0801a4d5
 801a484:	0801a451 	.word	0x0801a451
 801a488:	0801a451 	.word	0x0801a451
 801a48c:	0801a451 	.word	0x0801a451
 801a490:	0801a451 	.word	0x0801a451
 801a494:	0801a5e1 	.word	0x0801a5e1
 801a498:	0801a505 	.word	0x0801a505
 801a49c:	0801a5c3 	.word	0x0801a5c3
 801a4a0:	0801a451 	.word	0x0801a451
 801a4a4:	0801a451 	.word	0x0801a451
 801a4a8:	0801a603 	.word	0x0801a603
 801a4ac:	0801a451 	.word	0x0801a451
 801a4b0:	0801a505 	.word	0x0801a505
 801a4b4:	0801a451 	.word	0x0801a451
 801a4b8:	0801a451 	.word	0x0801a451
 801a4bc:	0801a5cb 	.word	0x0801a5cb
 801a4c0:	680b      	ldr	r3, [r1, #0]
 801a4c2:	1d1a      	adds	r2, r3, #4
 801a4c4:	681b      	ldr	r3, [r3, #0]
 801a4c6:	600a      	str	r2, [r1, #0]
 801a4c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a4cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a4d0:	2301      	movs	r3, #1
 801a4d2:	e0a3      	b.n	801a61c <_printf_i+0x1f4>
 801a4d4:	6825      	ldr	r5, [r4, #0]
 801a4d6:	6808      	ldr	r0, [r1, #0]
 801a4d8:	062e      	lsls	r6, r5, #24
 801a4da:	f100 0304 	add.w	r3, r0, #4
 801a4de:	d50a      	bpl.n	801a4f6 <_printf_i+0xce>
 801a4e0:	6805      	ldr	r5, [r0, #0]
 801a4e2:	600b      	str	r3, [r1, #0]
 801a4e4:	2d00      	cmp	r5, #0
 801a4e6:	da03      	bge.n	801a4f0 <_printf_i+0xc8>
 801a4e8:	232d      	movs	r3, #45	; 0x2d
 801a4ea:	426d      	negs	r5, r5
 801a4ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a4f0:	485e      	ldr	r0, [pc, #376]	; (801a66c <_printf_i+0x244>)
 801a4f2:	230a      	movs	r3, #10
 801a4f4:	e019      	b.n	801a52a <_printf_i+0x102>
 801a4f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 801a4fa:	6805      	ldr	r5, [r0, #0]
 801a4fc:	600b      	str	r3, [r1, #0]
 801a4fe:	bf18      	it	ne
 801a500:	b22d      	sxthne	r5, r5
 801a502:	e7ef      	b.n	801a4e4 <_printf_i+0xbc>
 801a504:	680b      	ldr	r3, [r1, #0]
 801a506:	6825      	ldr	r5, [r4, #0]
 801a508:	1d18      	adds	r0, r3, #4
 801a50a:	6008      	str	r0, [r1, #0]
 801a50c:	0628      	lsls	r0, r5, #24
 801a50e:	d501      	bpl.n	801a514 <_printf_i+0xec>
 801a510:	681d      	ldr	r5, [r3, #0]
 801a512:	e002      	b.n	801a51a <_printf_i+0xf2>
 801a514:	0669      	lsls	r1, r5, #25
 801a516:	d5fb      	bpl.n	801a510 <_printf_i+0xe8>
 801a518:	881d      	ldrh	r5, [r3, #0]
 801a51a:	4854      	ldr	r0, [pc, #336]	; (801a66c <_printf_i+0x244>)
 801a51c:	2f6f      	cmp	r7, #111	; 0x6f
 801a51e:	bf0c      	ite	eq
 801a520:	2308      	moveq	r3, #8
 801a522:	230a      	movne	r3, #10
 801a524:	2100      	movs	r1, #0
 801a526:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a52a:	6866      	ldr	r6, [r4, #4]
 801a52c:	60a6      	str	r6, [r4, #8]
 801a52e:	2e00      	cmp	r6, #0
 801a530:	bfa2      	ittt	ge
 801a532:	6821      	ldrge	r1, [r4, #0]
 801a534:	f021 0104 	bicge.w	r1, r1, #4
 801a538:	6021      	strge	r1, [r4, #0]
 801a53a:	b90d      	cbnz	r5, 801a540 <_printf_i+0x118>
 801a53c:	2e00      	cmp	r6, #0
 801a53e:	d04d      	beq.n	801a5dc <_printf_i+0x1b4>
 801a540:	4616      	mov	r6, r2
 801a542:	fbb5 f1f3 	udiv	r1, r5, r3
 801a546:	fb03 5711 	mls	r7, r3, r1, r5
 801a54a:	5dc7      	ldrb	r7, [r0, r7]
 801a54c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a550:	462f      	mov	r7, r5
 801a552:	42bb      	cmp	r3, r7
 801a554:	460d      	mov	r5, r1
 801a556:	d9f4      	bls.n	801a542 <_printf_i+0x11a>
 801a558:	2b08      	cmp	r3, #8
 801a55a:	d10b      	bne.n	801a574 <_printf_i+0x14c>
 801a55c:	6823      	ldr	r3, [r4, #0]
 801a55e:	07df      	lsls	r7, r3, #31
 801a560:	d508      	bpl.n	801a574 <_printf_i+0x14c>
 801a562:	6923      	ldr	r3, [r4, #16]
 801a564:	6861      	ldr	r1, [r4, #4]
 801a566:	4299      	cmp	r1, r3
 801a568:	bfde      	ittt	le
 801a56a:	2330      	movle	r3, #48	; 0x30
 801a56c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a570:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801a574:	1b92      	subs	r2, r2, r6
 801a576:	6122      	str	r2, [r4, #16]
 801a578:	f8cd a000 	str.w	sl, [sp]
 801a57c:	464b      	mov	r3, r9
 801a57e:	aa03      	add	r2, sp, #12
 801a580:	4621      	mov	r1, r4
 801a582:	4640      	mov	r0, r8
 801a584:	f7ff fee2 	bl	801a34c <_printf_common>
 801a588:	3001      	adds	r0, #1
 801a58a:	d14c      	bne.n	801a626 <_printf_i+0x1fe>
 801a58c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a590:	b004      	add	sp, #16
 801a592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a596:	4835      	ldr	r0, [pc, #212]	; (801a66c <_printf_i+0x244>)
 801a598:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a59c:	6823      	ldr	r3, [r4, #0]
 801a59e:	680e      	ldr	r6, [r1, #0]
 801a5a0:	061f      	lsls	r7, r3, #24
 801a5a2:	f856 5b04 	ldr.w	r5, [r6], #4
 801a5a6:	600e      	str	r6, [r1, #0]
 801a5a8:	d514      	bpl.n	801a5d4 <_printf_i+0x1ac>
 801a5aa:	07d9      	lsls	r1, r3, #31
 801a5ac:	bf44      	itt	mi
 801a5ae:	f043 0320 	orrmi.w	r3, r3, #32
 801a5b2:	6023      	strmi	r3, [r4, #0]
 801a5b4:	b91d      	cbnz	r5, 801a5be <_printf_i+0x196>
 801a5b6:	6823      	ldr	r3, [r4, #0]
 801a5b8:	f023 0320 	bic.w	r3, r3, #32
 801a5bc:	6023      	str	r3, [r4, #0]
 801a5be:	2310      	movs	r3, #16
 801a5c0:	e7b0      	b.n	801a524 <_printf_i+0xfc>
 801a5c2:	6823      	ldr	r3, [r4, #0]
 801a5c4:	f043 0320 	orr.w	r3, r3, #32
 801a5c8:	6023      	str	r3, [r4, #0]
 801a5ca:	2378      	movs	r3, #120	; 0x78
 801a5cc:	4828      	ldr	r0, [pc, #160]	; (801a670 <_printf_i+0x248>)
 801a5ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a5d2:	e7e3      	b.n	801a59c <_printf_i+0x174>
 801a5d4:	065e      	lsls	r6, r3, #25
 801a5d6:	bf48      	it	mi
 801a5d8:	b2ad      	uxthmi	r5, r5
 801a5da:	e7e6      	b.n	801a5aa <_printf_i+0x182>
 801a5dc:	4616      	mov	r6, r2
 801a5de:	e7bb      	b.n	801a558 <_printf_i+0x130>
 801a5e0:	680b      	ldr	r3, [r1, #0]
 801a5e2:	6826      	ldr	r6, [r4, #0]
 801a5e4:	6960      	ldr	r0, [r4, #20]
 801a5e6:	1d1d      	adds	r5, r3, #4
 801a5e8:	600d      	str	r5, [r1, #0]
 801a5ea:	0635      	lsls	r5, r6, #24
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	d501      	bpl.n	801a5f4 <_printf_i+0x1cc>
 801a5f0:	6018      	str	r0, [r3, #0]
 801a5f2:	e002      	b.n	801a5fa <_printf_i+0x1d2>
 801a5f4:	0671      	lsls	r1, r6, #25
 801a5f6:	d5fb      	bpl.n	801a5f0 <_printf_i+0x1c8>
 801a5f8:	8018      	strh	r0, [r3, #0]
 801a5fa:	2300      	movs	r3, #0
 801a5fc:	6123      	str	r3, [r4, #16]
 801a5fe:	4616      	mov	r6, r2
 801a600:	e7ba      	b.n	801a578 <_printf_i+0x150>
 801a602:	680b      	ldr	r3, [r1, #0]
 801a604:	1d1a      	adds	r2, r3, #4
 801a606:	600a      	str	r2, [r1, #0]
 801a608:	681e      	ldr	r6, [r3, #0]
 801a60a:	6862      	ldr	r2, [r4, #4]
 801a60c:	2100      	movs	r1, #0
 801a60e:	4630      	mov	r0, r6
 801a610:	f7e5 fde6 	bl	80001e0 <memchr>
 801a614:	b108      	cbz	r0, 801a61a <_printf_i+0x1f2>
 801a616:	1b80      	subs	r0, r0, r6
 801a618:	6060      	str	r0, [r4, #4]
 801a61a:	6863      	ldr	r3, [r4, #4]
 801a61c:	6123      	str	r3, [r4, #16]
 801a61e:	2300      	movs	r3, #0
 801a620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a624:	e7a8      	b.n	801a578 <_printf_i+0x150>
 801a626:	6923      	ldr	r3, [r4, #16]
 801a628:	4632      	mov	r2, r6
 801a62a:	4649      	mov	r1, r9
 801a62c:	4640      	mov	r0, r8
 801a62e:	47d0      	blx	sl
 801a630:	3001      	adds	r0, #1
 801a632:	d0ab      	beq.n	801a58c <_printf_i+0x164>
 801a634:	6823      	ldr	r3, [r4, #0]
 801a636:	079b      	lsls	r3, r3, #30
 801a638:	d413      	bmi.n	801a662 <_printf_i+0x23a>
 801a63a:	68e0      	ldr	r0, [r4, #12]
 801a63c:	9b03      	ldr	r3, [sp, #12]
 801a63e:	4298      	cmp	r0, r3
 801a640:	bfb8      	it	lt
 801a642:	4618      	movlt	r0, r3
 801a644:	e7a4      	b.n	801a590 <_printf_i+0x168>
 801a646:	2301      	movs	r3, #1
 801a648:	4632      	mov	r2, r6
 801a64a:	4649      	mov	r1, r9
 801a64c:	4640      	mov	r0, r8
 801a64e:	47d0      	blx	sl
 801a650:	3001      	adds	r0, #1
 801a652:	d09b      	beq.n	801a58c <_printf_i+0x164>
 801a654:	3501      	adds	r5, #1
 801a656:	68e3      	ldr	r3, [r4, #12]
 801a658:	9903      	ldr	r1, [sp, #12]
 801a65a:	1a5b      	subs	r3, r3, r1
 801a65c:	42ab      	cmp	r3, r5
 801a65e:	dcf2      	bgt.n	801a646 <_printf_i+0x21e>
 801a660:	e7eb      	b.n	801a63a <_printf_i+0x212>
 801a662:	2500      	movs	r5, #0
 801a664:	f104 0619 	add.w	r6, r4, #25
 801a668:	e7f5      	b.n	801a656 <_printf_i+0x22e>
 801a66a:	bf00      	nop
 801a66c:	080202d6 	.word	0x080202d6
 801a670:	080202e7 	.word	0x080202e7

0801a674 <_scanf_float>:
 801a674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a678:	b087      	sub	sp, #28
 801a67a:	4617      	mov	r7, r2
 801a67c:	9303      	str	r3, [sp, #12]
 801a67e:	688b      	ldr	r3, [r1, #8]
 801a680:	1e5a      	subs	r2, r3, #1
 801a682:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a686:	bf83      	ittte	hi
 801a688:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a68c:	195b      	addhi	r3, r3, r5
 801a68e:	9302      	strhi	r3, [sp, #8]
 801a690:	2300      	movls	r3, #0
 801a692:	bf86      	itte	hi
 801a694:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a698:	608b      	strhi	r3, [r1, #8]
 801a69a:	9302      	strls	r3, [sp, #8]
 801a69c:	680b      	ldr	r3, [r1, #0]
 801a69e:	468b      	mov	fp, r1
 801a6a0:	2500      	movs	r5, #0
 801a6a2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801a6a6:	f84b 3b1c 	str.w	r3, [fp], #28
 801a6aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a6ae:	4680      	mov	r8, r0
 801a6b0:	460c      	mov	r4, r1
 801a6b2:	465e      	mov	r6, fp
 801a6b4:	46aa      	mov	sl, r5
 801a6b6:	46a9      	mov	r9, r5
 801a6b8:	9501      	str	r5, [sp, #4]
 801a6ba:	68a2      	ldr	r2, [r4, #8]
 801a6bc:	b152      	cbz	r2, 801a6d4 <_scanf_float+0x60>
 801a6be:	683b      	ldr	r3, [r7, #0]
 801a6c0:	781b      	ldrb	r3, [r3, #0]
 801a6c2:	2b4e      	cmp	r3, #78	; 0x4e
 801a6c4:	d864      	bhi.n	801a790 <_scanf_float+0x11c>
 801a6c6:	2b40      	cmp	r3, #64	; 0x40
 801a6c8:	d83c      	bhi.n	801a744 <_scanf_float+0xd0>
 801a6ca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801a6ce:	b2c8      	uxtb	r0, r1
 801a6d0:	280e      	cmp	r0, #14
 801a6d2:	d93a      	bls.n	801a74a <_scanf_float+0xd6>
 801a6d4:	f1b9 0f00 	cmp.w	r9, #0
 801a6d8:	d003      	beq.n	801a6e2 <_scanf_float+0x6e>
 801a6da:	6823      	ldr	r3, [r4, #0]
 801a6dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a6e0:	6023      	str	r3, [r4, #0]
 801a6e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801a6e6:	f1ba 0f01 	cmp.w	sl, #1
 801a6ea:	f200 8113 	bhi.w	801a914 <_scanf_float+0x2a0>
 801a6ee:	455e      	cmp	r6, fp
 801a6f0:	f200 8105 	bhi.w	801a8fe <_scanf_float+0x28a>
 801a6f4:	2501      	movs	r5, #1
 801a6f6:	4628      	mov	r0, r5
 801a6f8:	b007      	add	sp, #28
 801a6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6fe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801a702:	2a0d      	cmp	r2, #13
 801a704:	d8e6      	bhi.n	801a6d4 <_scanf_float+0x60>
 801a706:	a101      	add	r1, pc, #4	; (adr r1, 801a70c <_scanf_float+0x98>)
 801a708:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a70c:	0801a84b 	.word	0x0801a84b
 801a710:	0801a6d5 	.word	0x0801a6d5
 801a714:	0801a6d5 	.word	0x0801a6d5
 801a718:	0801a6d5 	.word	0x0801a6d5
 801a71c:	0801a8ab 	.word	0x0801a8ab
 801a720:	0801a883 	.word	0x0801a883
 801a724:	0801a6d5 	.word	0x0801a6d5
 801a728:	0801a6d5 	.word	0x0801a6d5
 801a72c:	0801a859 	.word	0x0801a859
 801a730:	0801a6d5 	.word	0x0801a6d5
 801a734:	0801a6d5 	.word	0x0801a6d5
 801a738:	0801a6d5 	.word	0x0801a6d5
 801a73c:	0801a6d5 	.word	0x0801a6d5
 801a740:	0801a811 	.word	0x0801a811
 801a744:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801a748:	e7db      	b.n	801a702 <_scanf_float+0x8e>
 801a74a:	290e      	cmp	r1, #14
 801a74c:	d8c2      	bhi.n	801a6d4 <_scanf_float+0x60>
 801a74e:	a001      	add	r0, pc, #4	; (adr r0, 801a754 <_scanf_float+0xe0>)
 801a750:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a754:	0801a803 	.word	0x0801a803
 801a758:	0801a6d5 	.word	0x0801a6d5
 801a75c:	0801a803 	.word	0x0801a803
 801a760:	0801a897 	.word	0x0801a897
 801a764:	0801a6d5 	.word	0x0801a6d5
 801a768:	0801a7b1 	.word	0x0801a7b1
 801a76c:	0801a7ed 	.word	0x0801a7ed
 801a770:	0801a7ed 	.word	0x0801a7ed
 801a774:	0801a7ed 	.word	0x0801a7ed
 801a778:	0801a7ed 	.word	0x0801a7ed
 801a77c:	0801a7ed 	.word	0x0801a7ed
 801a780:	0801a7ed 	.word	0x0801a7ed
 801a784:	0801a7ed 	.word	0x0801a7ed
 801a788:	0801a7ed 	.word	0x0801a7ed
 801a78c:	0801a7ed 	.word	0x0801a7ed
 801a790:	2b6e      	cmp	r3, #110	; 0x6e
 801a792:	d809      	bhi.n	801a7a8 <_scanf_float+0x134>
 801a794:	2b60      	cmp	r3, #96	; 0x60
 801a796:	d8b2      	bhi.n	801a6fe <_scanf_float+0x8a>
 801a798:	2b54      	cmp	r3, #84	; 0x54
 801a79a:	d077      	beq.n	801a88c <_scanf_float+0x218>
 801a79c:	2b59      	cmp	r3, #89	; 0x59
 801a79e:	d199      	bne.n	801a6d4 <_scanf_float+0x60>
 801a7a0:	2d07      	cmp	r5, #7
 801a7a2:	d197      	bne.n	801a6d4 <_scanf_float+0x60>
 801a7a4:	2508      	movs	r5, #8
 801a7a6:	e029      	b.n	801a7fc <_scanf_float+0x188>
 801a7a8:	2b74      	cmp	r3, #116	; 0x74
 801a7aa:	d06f      	beq.n	801a88c <_scanf_float+0x218>
 801a7ac:	2b79      	cmp	r3, #121	; 0x79
 801a7ae:	e7f6      	b.n	801a79e <_scanf_float+0x12a>
 801a7b0:	6821      	ldr	r1, [r4, #0]
 801a7b2:	05c8      	lsls	r0, r1, #23
 801a7b4:	d51a      	bpl.n	801a7ec <_scanf_float+0x178>
 801a7b6:	9b02      	ldr	r3, [sp, #8]
 801a7b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a7bc:	6021      	str	r1, [r4, #0]
 801a7be:	f109 0901 	add.w	r9, r9, #1
 801a7c2:	b11b      	cbz	r3, 801a7cc <_scanf_float+0x158>
 801a7c4:	3b01      	subs	r3, #1
 801a7c6:	3201      	adds	r2, #1
 801a7c8:	9302      	str	r3, [sp, #8]
 801a7ca:	60a2      	str	r2, [r4, #8]
 801a7cc:	68a3      	ldr	r3, [r4, #8]
 801a7ce:	3b01      	subs	r3, #1
 801a7d0:	60a3      	str	r3, [r4, #8]
 801a7d2:	6923      	ldr	r3, [r4, #16]
 801a7d4:	3301      	adds	r3, #1
 801a7d6:	6123      	str	r3, [r4, #16]
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	3b01      	subs	r3, #1
 801a7dc:	2b00      	cmp	r3, #0
 801a7de:	607b      	str	r3, [r7, #4]
 801a7e0:	f340 8084 	ble.w	801a8ec <_scanf_float+0x278>
 801a7e4:	683b      	ldr	r3, [r7, #0]
 801a7e6:	3301      	adds	r3, #1
 801a7e8:	603b      	str	r3, [r7, #0]
 801a7ea:	e766      	b.n	801a6ba <_scanf_float+0x46>
 801a7ec:	eb1a 0f05 	cmn.w	sl, r5
 801a7f0:	f47f af70 	bne.w	801a6d4 <_scanf_float+0x60>
 801a7f4:	6822      	ldr	r2, [r4, #0]
 801a7f6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801a7fa:	6022      	str	r2, [r4, #0]
 801a7fc:	f806 3b01 	strb.w	r3, [r6], #1
 801a800:	e7e4      	b.n	801a7cc <_scanf_float+0x158>
 801a802:	6822      	ldr	r2, [r4, #0]
 801a804:	0610      	lsls	r0, r2, #24
 801a806:	f57f af65 	bpl.w	801a6d4 <_scanf_float+0x60>
 801a80a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a80e:	e7f4      	b.n	801a7fa <_scanf_float+0x186>
 801a810:	f1ba 0f00 	cmp.w	sl, #0
 801a814:	d10e      	bne.n	801a834 <_scanf_float+0x1c0>
 801a816:	f1b9 0f00 	cmp.w	r9, #0
 801a81a:	d10e      	bne.n	801a83a <_scanf_float+0x1c6>
 801a81c:	6822      	ldr	r2, [r4, #0]
 801a81e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a822:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a826:	d108      	bne.n	801a83a <_scanf_float+0x1c6>
 801a828:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a82c:	6022      	str	r2, [r4, #0]
 801a82e:	f04f 0a01 	mov.w	sl, #1
 801a832:	e7e3      	b.n	801a7fc <_scanf_float+0x188>
 801a834:	f1ba 0f02 	cmp.w	sl, #2
 801a838:	d055      	beq.n	801a8e6 <_scanf_float+0x272>
 801a83a:	2d01      	cmp	r5, #1
 801a83c:	d002      	beq.n	801a844 <_scanf_float+0x1d0>
 801a83e:	2d04      	cmp	r5, #4
 801a840:	f47f af48 	bne.w	801a6d4 <_scanf_float+0x60>
 801a844:	3501      	adds	r5, #1
 801a846:	b2ed      	uxtb	r5, r5
 801a848:	e7d8      	b.n	801a7fc <_scanf_float+0x188>
 801a84a:	f1ba 0f01 	cmp.w	sl, #1
 801a84e:	f47f af41 	bne.w	801a6d4 <_scanf_float+0x60>
 801a852:	f04f 0a02 	mov.w	sl, #2
 801a856:	e7d1      	b.n	801a7fc <_scanf_float+0x188>
 801a858:	b97d      	cbnz	r5, 801a87a <_scanf_float+0x206>
 801a85a:	f1b9 0f00 	cmp.w	r9, #0
 801a85e:	f47f af3c 	bne.w	801a6da <_scanf_float+0x66>
 801a862:	6822      	ldr	r2, [r4, #0]
 801a864:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a868:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a86c:	f47f af39 	bne.w	801a6e2 <_scanf_float+0x6e>
 801a870:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a874:	6022      	str	r2, [r4, #0]
 801a876:	2501      	movs	r5, #1
 801a878:	e7c0      	b.n	801a7fc <_scanf_float+0x188>
 801a87a:	2d03      	cmp	r5, #3
 801a87c:	d0e2      	beq.n	801a844 <_scanf_float+0x1d0>
 801a87e:	2d05      	cmp	r5, #5
 801a880:	e7de      	b.n	801a840 <_scanf_float+0x1cc>
 801a882:	2d02      	cmp	r5, #2
 801a884:	f47f af26 	bne.w	801a6d4 <_scanf_float+0x60>
 801a888:	2503      	movs	r5, #3
 801a88a:	e7b7      	b.n	801a7fc <_scanf_float+0x188>
 801a88c:	2d06      	cmp	r5, #6
 801a88e:	f47f af21 	bne.w	801a6d4 <_scanf_float+0x60>
 801a892:	2507      	movs	r5, #7
 801a894:	e7b2      	b.n	801a7fc <_scanf_float+0x188>
 801a896:	6822      	ldr	r2, [r4, #0]
 801a898:	0591      	lsls	r1, r2, #22
 801a89a:	f57f af1b 	bpl.w	801a6d4 <_scanf_float+0x60>
 801a89e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801a8a2:	6022      	str	r2, [r4, #0]
 801a8a4:	f8cd 9004 	str.w	r9, [sp, #4]
 801a8a8:	e7a8      	b.n	801a7fc <_scanf_float+0x188>
 801a8aa:	6822      	ldr	r2, [r4, #0]
 801a8ac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801a8b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801a8b4:	d006      	beq.n	801a8c4 <_scanf_float+0x250>
 801a8b6:	0550      	lsls	r0, r2, #21
 801a8b8:	f57f af0c 	bpl.w	801a6d4 <_scanf_float+0x60>
 801a8bc:	f1b9 0f00 	cmp.w	r9, #0
 801a8c0:	f43f af0f 	beq.w	801a6e2 <_scanf_float+0x6e>
 801a8c4:	0591      	lsls	r1, r2, #22
 801a8c6:	bf58      	it	pl
 801a8c8:	9901      	ldrpl	r1, [sp, #4]
 801a8ca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a8ce:	bf58      	it	pl
 801a8d0:	eba9 0101 	subpl.w	r1, r9, r1
 801a8d4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801a8d8:	bf58      	it	pl
 801a8da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a8de:	6022      	str	r2, [r4, #0]
 801a8e0:	f04f 0900 	mov.w	r9, #0
 801a8e4:	e78a      	b.n	801a7fc <_scanf_float+0x188>
 801a8e6:	f04f 0a03 	mov.w	sl, #3
 801a8ea:	e787      	b.n	801a7fc <_scanf_float+0x188>
 801a8ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a8f0:	4639      	mov	r1, r7
 801a8f2:	4640      	mov	r0, r8
 801a8f4:	4798      	blx	r3
 801a8f6:	2800      	cmp	r0, #0
 801a8f8:	f43f aedf 	beq.w	801a6ba <_scanf_float+0x46>
 801a8fc:	e6ea      	b.n	801a6d4 <_scanf_float+0x60>
 801a8fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a902:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a906:	463a      	mov	r2, r7
 801a908:	4640      	mov	r0, r8
 801a90a:	4798      	blx	r3
 801a90c:	6923      	ldr	r3, [r4, #16]
 801a90e:	3b01      	subs	r3, #1
 801a910:	6123      	str	r3, [r4, #16]
 801a912:	e6ec      	b.n	801a6ee <_scanf_float+0x7a>
 801a914:	1e6b      	subs	r3, r5, #1
 801a916:	2b06      	cmp	r3, #6
 801a918:	d825      	bhi.n	801a966 <_scanf_float+0x2f2>
 801a91a:	2d02      	cmp	r5, #2
 801a91c:	d836      	bhi.n	801a98c <_scanf_float+0x318>
 801a91e:	455e      	cmp	r6, fp
 801a920:	f67f aee8 	bls.w	801a6f4 <_scanf_float+0x80>
 801a924:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a928:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a92c:	463a      	mov	r2, r7
 801a92e:	4640      	mov	r0, r8
 801a930:	4798      	blx	r3
 801a932:	6923      	ldr	r3, [r4, #16]
 801a934:	3b01      	subs	r3, #1
 801a936:	6123      	str	r3, [r4, #16]
 801a938:	e7f1      	b.n	801a91e <_scanf_float+0x2aa>
 801a93a:	9802      	ldr	r0, [sp, #8]
 801a93c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a940:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801a944:	9002      	str	r0, [sp, #8]
 801a946:	463a      	mov	r2, r7
 801a948:	4640      	mov	r0, r8
 801a94a:	4798      	blx	r3
 801a94c:	6923      	ldr	r3, [r4, #16]
 801a94e:	3b01      	subs	r3, #1
 801a950:	6123      	str	r3, [r4, #16]
 801a952:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801a956:	fa5f fa8a 	uxtb.w	sl, sl
 801a95a:	f1ba 0f02 	cmp.w	sl, #2
 801a95e:	d1ec      	bne.n	801a93a <_scanf_float+0x2c6>
 801a960:	3d03      	subs	r5, #3
 801a962:	b2ed      	uxtb	r5, r5
 801a964:	1b76      	subs	r6, r6, r5
 801a966:	6823      	ldr	r3, [r4, #0]
 801a968:	05da      	lsls	r2, r3, #23
 801a96a:	d52f      	bpl.n	801a9cc <_scanf_float+0x358>
 801a96c:	055b      	lsls	r3, r3, #21
 801a96e:	d510      	bpl.n	801a992 <_scanf_float+0x31e>
 801a970:	455e      	cmp	r6, fp
 801a972:	f67f aebf 	bls.w	801a6f4 <_scanf_float+0x80>
 801a976:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a97a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a97e:	463a      	mov	r2, r7
 801a980:	4640      	mov	r0, r8
 801a982:	4798      	blx	r3
 801a984:	6923      	ldr	r3, [r4, #16]
 801a986:	3b01      	subs	r3, #1
 801a988:	6123      	str	r3, [r4, #16]
 801a98a:	e7f1      	b.n	801a970 <_scanf_float+0x2fc>
 801a98c:	46aa      	mov	sl, r5
 801a98e:	9602      	str	r6, [sp, #8]
 801a990:	e7df      	b.n	801a952 <_scanf_float+0x2de>
 801a992:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a996:	6923      	ldr	r3, [r4, #16]
 801a998:	2965      	cmp	r1, #101	; 0x65
 801a99a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801a99e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801a9a2:	6123      	str	r3, [r4, #16]
 801a9a4:	d00c      	beq.n	801a9c0 <_scanf_float+0x34c>
 801a9a6:	2945      	cmp	r1, #69	; 0x45
 801a9a8:	d00a      	beq.n	801a9c0 <_scanf_float+0x34c>
 801a9aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a9ae:	463a      	mov	r2, r7
 801a9b0:	4640      	mov	r0, r8
 801a9b2:	4798      	blx	r3
 801a9b4:	6923      	ldr	r3, [r4, #16]
 801a9b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a9ba:	3b01      	subs	r3, #1
 801a9bc:	1eb5      	subs	r5, r6, #2
 801a9be:	6123      	str	r3, [r4, #16]
 801a9c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a9c4:	463a      	mov	r2, r7
 801a9c6:	4640      	mov	r0, r8
 801a9c8:	4798      	blx	r3
 801a9ca:	462e      	mov	r6, r5
 801a9cc:	6825      	ldr	r5, [r4, #0]
 801a9ce:	f015 0510 	ands.w	r5, r5, #16
 801a9d2:	d158      	bne.n	801aa86 <_scanf_float+0x412>
 801a9d4:	7035      	strb	r5, [r6, #0]
 801a9d6:	6823      	ldr	r3, [r4, #0]
 801a9d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801a9dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a9e0:	d11c      	bne.n	801aa1c <_scanf_float+0x3a8>
 801a9e2:	9b01      	ldr	r3, [sp, #4]
 801a9e4:	454b      	cmp	r3, r9
 801a9e6:	eba3 0209 	sub.w	r2, r3, r9
 801a9ea:	d124      	bne.n	801aa36 <_scanf_float+0x3c2>
 801a9ec:	2200      	movs	r2, #0
 801a9ee:	4659      	mov	r1, fp
 801a9f0:	4640      	mov	r0, r8
 801a9f2:	f000 ff77 	bl	801b8e4 <_strtod_r>
 801a9f6:	9b03      	ldr	r3, [sp, #12]
 801a9f8:	6821      	ldr	r1, [r4, #0]
 801a9fa:	681b      	ldr	r3, [r3, #0]
 801a9fc:	f011 0f02 	tst.w	r1, #2
 801aa00:	ec57 6b10 	vmov	r6, r7, d0
 801aa04:	f103 0204 	add.w	r2, r3, #4
 801aa08:	d020      	beq.n	801aa4c <_scanf_float+0x3d8>
 801aa0a:	9903      	ldr	r1, [sp, #12]
 801aa0c:	600a      	str	r2, [r1, #0]
 801aa0e:	681b      	ldr	r3, [r3, #0]
 801aa10:	e9c3 6700 	strd	r6, r7, [r3]
 801aa14:	68e3      	ldr	r3, [r4, #12]
 801aa16:	3301      	adds	r3, #1
 801aa18:	60e3      	str	r3, [r4, #12]
 801aa1a:	e66c      	b.n	801a6f6 <_scanf_float+0x82>
 801aa1c:	9b04      	ldr	r3, [sp, #16]
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	d0e4      	beq.n	801a9ec <_scanf_float+0x378>
 801aa22:	9905      	ldr	r1, [sp, #20]
 801aa24:	230a      	movs	r3, #10
 801aa26:	462a      	mov	r2, r5
 801aa28:	3101      	adds	r1, #1
 801aa2a:	4640      	mov	r0, r8
 801aa2c:	f000 ffe4 	bl	801b9f8 <_strtol_r>
 801aa30:	9b04      	ldr	r3, [sp, #16]
 801aa32:	9e05      	ldr	r6, [sp, #20]
 801aa34:	1ac2      	subs	r2, r0, r3
 801aa36:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801aa3a:	429e      	cmp	r6, r3
 801aa3c:	bf28      	it	cs
 801aa3e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801aa42:	4912      	ldr	r1, [pc, #72]	; (801aa8c <_scanf_float+0x418>)
 801aa44:	4630      	mov	r0, r6
 801aa46:	f000 f8b5 	bl	801abb4 <siprintf>
 801aa4a:	e7cf      	b.n	801a9ec <_scanf_float+0x378>
 801aa4c:	f011 0f04 	tst.w	r1, #4
 801aa50:	9903      	ldr	r1, [sp, #12]
 801aa52:	600a      	str	r2, [r1, #0]
 801aa54:	d1db      	bne.n	801aa0e <_scanf_float+0x39a>
 801aa56:	f8d3 8000 	ldr.w	r8, [r3]
 801aa5a:	ee10 2a10 	vmov	r2, s0
 801aa5e:	ee10 0a10 	vmov	r0, s0
 801aa62:	463b      	mov	r3, r7
 801aa64:	4639      	mov	r1, r7
 801aa66:	f7e6 f861 	bl	8000b2c <__aeabi_dcmpun>
 801aa6a:	b128      	cbz	r0, 801aa78 <_scanf_float+0x404>
 801aa6c:	4808      	ldr	r0, [pc, #32]	; (801aa90 <_scanf_float+0x41c>)
 801aa6e:	f000 f829 	bl	801aac4 <nanf>
 801aa72:	ed88 0a00 	vstr	s0, [r8]
 801aa76:	e7cd      	b.n	801aa14 <_scanf_float+0x3a0>
 801aa78:	4630      	mov	r0, r6
 801aa7a:	4639      	mov	r1, r7
 801aa7c:	f7e6 f8b4 	bl	8000be8 <__aeabi_d2f>
 801aa80:	f8c8 0000 	str.w	r0, [r8]
 801aa84:	e7c6      	b.n	801aa14 <_scanf_float+0x3a0>
 801aa86:	2500      	movs	r5, #0
 801aa88:	e635      	b.n	801a6f6 <_scanf_float+0x82>
 801aa8a:	bf00      	nop
 801aa8c:	080202f8 	.word	0x080202f8
 801aa90:	08020710 	.word	0x08020710

0801aa94 <realloc>:
 801aa94:	4b02      	ldr	r3, [pc, #8]	; (801aaa0 <realloc+0xc>)
 801aa96:	460a      	mov	r2, r1
 801aa98:	4601      	mov	r1, r0
 801aa9a:	6818      	ldr	r0, [r3, #0]
 801aa9c:	f002 beb6 	b.w	801d80c <_realloc_r>
 801aaa0:	200000c4 	.word	0x200000c4

0801aaa4 <_sbrk_r>:
 801aaa4:	b538      	push	{r3, r4, r5, lr}
 801aaa6:	4d06      	ldr	r5, [pc, #24]	; (801aac0 <_sbrk_r+0x1c>)
 801aaa8:	2300      	movs	r3, #0
 801aaaa:	4604      	mov	r4, r0
 801aaac:	4608      	mov	r0, r1
 801aaae:	602b      	str	r3, [r5, #0]
 801aab0:	f7f2 fa56 	bl	800cf60 <_sbrk>
 801aab4:	1c43      	adds	r3, r0, #1
 801aab6:	d102      	bne.n	801aabe <_sbrk_r+0x1a>
 801aab8:	682b      	ldr	r3, [r5, #0]
 801aaba:	b103      	cbz	r3, 801aabe <_sbrk_r+0x1a>
 801aabc:	6023      	str	r3, [r4, #0]
 801aabe:	bd38      	pop	{r3, r4, r5, pc}
 801aac0:	2000a6d4 	.word	0x2000a6d4

0801aac4 <nanf>:
 801aac4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801aacc <nanf+0x8>
 801aac8:	4770      	bx	lr
 801aaca:	bf00      	nop
 801aacc:	7fc00000 	.word	0x7fc00000

0801aad0 <scalbnf>:
 801aad0:	ee10 3a10 	vmov	r3, s0
 801aad4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801aad8:	d025      	beq.n	801ab26 <scalbnf+0x56>
 801aada:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801aade:	d302      	bcc.n	801aae6 <scalbnf+0x16>
 801aae0:	ee30 0a00 	vadd.f32	s0, s0, s0
 801aae4:	4770      	bx	lr
 801aae6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801aaea:	d122      	bne.n	801ab32 <scalbnf+0x62>
 801aaec:	4b2a      	ldr	r3, [pc, #168]	; (801ab98 <scalbnf+0xc8>)
 801aaee:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801ab9c <scalbnf+0xcc>
 801aaf2:	4298      	cmp	r0, r3
 801aaf4:	ee20 0a27 	vmul.f32	s0, s0, s15
 801aaf8:	db16      	blt.n	801ab28 <scalbnf+0x58>
 801aafa:	ee10 3a10 	vmov	r3, s0
 801aafe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ab02:	3a19      	subs	r2, #25
 801ab04:	4402      	add	r2, r0
 801ab06:	2afe      	cmp	r2, #254	; 0xfe
 801ab08:	dd15      	ble.n	801ab36 <scalbnf+0x66>
 801ab0a:	ee10 3a10 	vmov	r3, s0
 801ab0e:	eddf 7a24 	vldr	s15, [pc, #144]	; 801aba0 <scalbnf+0xd0>
 801ab12:	eddf 6a24 	vldr	s13, [pc, #144]	; 801aba4 <scalbnf+0xd4>
 801ab16:	2b00      	cmp	r3, #0
 801ab18:	eeb0 7a67 	vmov.f32	s14, s15
 801ab1c:	bfb8      	it	lt
 801ab1e:	eef0 7a66 	vmovlt.f32	s15, s13
 801ab22:	ee27 0a27 	vmul.f32	s0, s14, s15
 801ab26:	4770      	bx	lr
 801ab28:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801aba8 <scalbnf+0xd8>
 801ab2c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801ab30:	4770      	bx	lr
 801ab32:	0dd2      	lsrs	r2, r2, #23
 801ab34:	e7e6      	b.n	801ab04 <scalbnf+0x34>
 801ab36:	2a00      	cmp	r2, #0
 801ab38:	dd06      	ble.n	801ab48 <scalbnf+0x78>
 801ab3a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ab3e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801ab42:	ee00 3a10 	vmov	s0, r3
 801ab46:	4770      	bx	lr
 801ab48:	f112 0f16 	cmn.w	r2, #22
 801ab4c:	da1a      	bge.n	801ab84 <scalbnf+0xb4>
 801ab4e:	f24c 3350 	movw	r3, #50000	; 0xc350
 801ab52:	4298      	cmp	r0, r3
 801ab54:	ee10 3a10 	vmov	r3, s0
 801ab58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ab5c:	dd0a      	ble.n	801ab74 <scalbnf+0xa4>
 801ab5e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801aba0 <scalbnf+0xd0>
 801ab62:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801aba4 <scalbnf+0xd4>
 801ab66:	eef0 7a40 	vmov.f32	s15, s0
 801ab6a:	2b00      	cmp	r3, #0
 801ab6c:	bf18      	it	ne
 801ab6e:	eeb0 0a47 	vmovne.f32	s0, s14
 801ab72:	e7db      	b.n	801ab2c <scalbnf+0x5c>
 801ab74:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801aba8 <scalbnf+0xd8>
 801ab78:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801abac <scalbnf+0xdc>
 801ab7c:	eef0 7a40 	vmov.f32	s15, s0
 801ab80:	2b00      	cmp	r3, #0
 801ab82:	e7f3      	b.n	801ab6c <scalbnf+0x9c>
 801ab84:	3219      	adds	r2, #25
 801ab86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ab8a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801ab8e:	eddf 7a08 	vldr	s15, [pc, #32]	; 801abb0 <scalbnf+0xe0>
 801ab92:	ee07 3a10 	vmov	s14, r3
 801ab96:	e7c4      	b.n	801ab22 <scalbnf+0x52>
 801ab98:	ffff3cb0 	.word	0xffff3cb0
 801ab9c:	4c000000 	.word	0x4c000000
 801aba0:	7149f2ca 	.word	0x7149f2ca
 801aba4:	f149f2ca 	.word	0xf149f2ca
 801aba8:	0da24260 	.word	0x0da24260
 801abac:	8da24260 	.word	0x8da24260
 801abb0:	33000000 	.word	0x33000000

0801abb4 <siprintf>:
 801abb4:	b40e      	push	{r1, r2, r3}
 801abb6:	b500      	push	{lr}
 801abb8:	b09c      	sub	sp, #112	; 0x70
 801abba:	ab1d      	add	r3, sp, #116	; 0x74
 801abbc:	9002      	str	r0, [sp, #8]
 801abbe:	9006      	str	r0, [sp, #24]
 801abc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801abc4:	4809      	ldr	r0, [pc, #36]	; (801abec <siprintf+0x38>)
 801abc6:	9107      	str	r1, [sp, #28]
 801abc8:	9104      	str	r1, [sp, #16]
 801abca:	4909      	ldr	r1, [pc, #36]	; (801abf0 <siprintf+0x3c>)
 801abcc:	f853 2b04 	ldr.w	r2, [r3], #4
 801abd0:	9105      	str	r1, [sp, #20]
 801abd2:	6800      	ldr	r0, [r0, #0]
 801abd4:	9301      	str	r3, [sp, #4]
 801abd6:	a902      	add	r1, sp, #8
 801abd8:	f002 fe9a 	bl	801d910 <_svfiprintf_r>
 801abdc:	9b02      	ldr	r3, [sp, #8]
 801abde:	2200      	movs	r2, #0
 801abe0:	701a      	strb	r2, [r3, #0]
 801abe2:	b01c      	add	sp, #112	; 0x70
 801abe4:	f85d eb04 	ldr.w	lr, [sp], #4
 801abe8:	b003      	add	sp, #12
 801abea:	4770      	bx	lr
 801abec:	200000c4 	.word	0x200000c4
 801abf0:	ffff0208 	.word	0xffff0208

0801abf4 <__sread>:
 801abf4:	b510      	push	{r4, lr}
 801abf6:	460c      	mov	r4, r1
 801abf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801abfc:	f002 ff88 	bl	801db10 <_read_r>
 801ac00:	2800      	cmp	r0, #0
 801ac02:	bfab      	itete	ge
 801ac04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ac06:	89a3      	ldrhlt	r3, [r4, #12]
 801ac08:	181b      	addge	r3, r3, r0
 801ac0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ac0e:	bfac      	ite	ge
 801ac10:	6563      	strge	r3, [r4, #84]	; 0x54
 801ac12:	81a3      	strhlt	r3, [r4, #12]
 801ac14:	bd10      	pop	{r4, pc}

0801ac16 <__swrite>:
 801ac16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac1a:	461f      	mov	r7, r3
 801ac1c:	898b      	ldrh	r3, [r1, #12]
 801ac1e:	05db      	lsls	r3, r3, #23
 801ac20:	4605      	mov	r5, r0
 801ac22:	460c      	mov	r4, r1
 801ac24:	4616      	mov	r6, r2
 801ac26:	d505      	bpl.n	801ac34 <__swrite+0x1e>
 801ac28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac2c:	2302      	movs	r3, #2
 801ac2e:	2200      	movs	r2, #0
 801ac30:	f002 f8f2 	bl	801ce18 <_lseek_r>
 801ac34:	89a3      	ldrh	r3, [r4, #12]
 801ac36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ac3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ac3e:	81a3      	strh	r3, [r4, #12]
 801ac40:	4632      	mov	r2, r6
 801ac42:	463b      	mov	r3, r7
 801ac44:	4628      	mov	r0, r5
 801ac46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ac4a:	f000 bed7 	b.w	801b9fc <_write_r>

0801ac4e <__sseek>:
 801ac4e:	b510      	push	{r4, lr}
 801ac50:	460c      	mov	r4, r1
 801ac52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac56:	f002 f8df 	bl	801ce18 <_lseek_r>
 801ac5a:	1c43      	adds	r3, r0, #1
 801ac5c:	89a3      	ldrh	r3, [r4, #12]
 801ac5e:	bf15      	itete	ne
 801ac60:	6560      	strne	r0, [r4, #84]	; 0x54
 801ac62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ac66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ac6a:	81a3      	strheq	r3, [r4, #12]
 801ac6c:	bf18      	it	ne
 801ac6e:	81a3      	strhne	r3, [r4, #12]
 801ac70:	bd10      	pop	{r4, pc}

0801ac72 <__sclose>:
 801ac72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac76:	f000 bed3 	b.w	801ba20 <_close_r>

0801ac7a <strcat>:
 801ac7a:	b510      	push	{r4, lr}
 801ac7c:	4602      	mov	r2, r0
 801ac7e:	7814      	ldrb	r4, [r2, #0]
 801ac80:	4613      	mov	r3, r2
 801ac82:	3201      	adds	r2, #1
 801ac84:	2c00      	cmp	r4, #0
 801ac86:	d1fa      	bne.n	801ac7e <strcat+0x4>
 801ac88:	3b01      	subs	r3, #1
 801ac8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ac8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ac92:	2a00      	cmp	r2, #0
 801ac94:	d1f9      	bne.n	801ac8a <strcat+0x10>
 801ac96:	bd10      	pop	{r4, pc}

0801ac98 <sulp>:
 801ac98:	b570      	push	{r4, r5, r6, lr}
 801ac9a:	4604      	mov	r4, r0
 801ac9c:	460d      	mov	r5, r1
 801ac9e:	ec45 4b10 	vmov	d0, r4, r5
 801aca2:	4616      	mov	r6, r2
 801aca4:	f002 fc54 	bl	801d550 <__ulp>
 801aca8:	ec51 0b10 	vmov	r0, r1, d0
 801acac:	b17e      	cbz	r6, 801acce <sulp+0x36>
 801acae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801acb2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	dd09      	ble.n	801acce <sulp+0x36>
 801acba:	051b      	lsls	r3, r3, #20
 801acbc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801acc0:	2400      	movs	r4, #0
 801acc2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801acc6:	4622      	mov	r2, r4
 801acc8:	462b      	mov	r3, r5
 801acca:	f7e5 fc95 	bl	80005f8 <__aeabi_dmul>
 801acce:	bd70      	pop	{r4, r5, r6, pc}

0801acd0 <_strtod_l>:
 801acd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acd4:	b0a3      	sub	sp, #140	; 0x8c
 801acd6:	461f      	mov	r7, r3
 801acd8:	2300      	movs	r3, #0
 801acda:	931e      	str	r3, [sp, #120]	; 0x78
 801acdc:	4ba4      	ldr	r3, [pc, #656]	; (801af70 <_strtod_l+0x2a0>)
 801acde:	9219      	str	r2, [sp, #100]	; 0x64
 801ace0:	681b      	ldr	r3, [r3, #0]
 801ace2:	9307      	str	r3, [sp, #28]
 801ace4:	4604      	mov	r4, r0
 801ace6:	4618      	mov	r0, r3
 801ace8:	4688      	mov	r8, r1
 801acea:	f7e5 fa71 	bl	80001d0 <strlen>
 801acee:	f04f 0a00 	mov.w	sl, #0
 801acf2:	4605      	mov	r5, r0
 801acf4:	f04f 0b00 	mov.w	fp, #0
 801acf8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801acfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801acfe:	781a      	ldrb	r2, [r3, #0]
 801ad00:	2a2b      	cmp	r2, #43	; 0x2b
 801ad02:	d04c      	beq.n	801ad9e <_strtod_l+0xce>
 801ad04:	d839      	bhi.n	801ad7a <_strtod_l+0xaa>
 801ad06:	2a0d      	cmp	r2, #13
 801ad08:	d832      	bhi.n	801ad70 <_strtod_l+0xa0>
 801ad0a:	2a08      	cmp	r2, #8
 801ad0c:	d832      	bhi.n	801ad74 <_strtod_l+0xa4>
 801ad0e:	2a00      	cmp	r2, #0
 801ad10:	d03c      	beq.n	801ad8c <_strtod_l+0xbc>
 801ad12:	2300      	movs	r3, #0
 801ad14:	930e      	str	r3, [sp, #56]	; 0x38
 801ad16:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801ad18:	7833      	ldrb	r3, [r6, #0]
 801ad1a:	2b30      	cmp	r3, #48	; 0x30
 801ad1c:	f040 80b4 	bne.w	801ae88 <_strtod_l+0x1b8>
 801ad20:	7873      	ldrb	r3, [r6, #1]
 801ad22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ad26:	2b58      	cmp	r3, #88	; 0x58
 801ad28:	d16c      	bne.n	801ae04 <_strtod_l+0x134>
 801ad2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad2c:	9301      	str	r3, [sp, #4]
 801ad2e:	ab1e      	add	r3, sp, #120	; 0x78
 801ad30:	9702      	str	r7, [sp, #8]
 801ad32:	9300      	str	r3, [sp, #0]
 801ad34:	4a8f      	ldr	r2, [pc, #572]	; (801af74 <_strtod_l+0x2a4>)
 801ad36:	ab1f      	add	r3, sp, #124	; 0x7c
 801ad38:	a91d      	add	r1, sp, #116	; 0x74
 801ad3a:	4620      	mov	r0, r4
 801ad3c:	f001 fd60 	bl	801c800 <__gethex>
 801ad40:	f010 0707 	ands.w	r7, r0, #7
 801ad44:	4605      	mov	r5, r0
 801ad46:	d005      	beq.n	801ad54 <_strtod_l+0x84>
 801ad48:	2f06      	cmp	r7, #6
 801ad4a:	d12a      	bne.n	801ada2 <_strtod_l+0xd2>
 801ad4c:	3601      	adds	r6, #1
 801ad4e:	2300      	movs	r3, #0
 801ad50:	961d      	str	r6, [sp, #116]	; 0x74
 801ad52:	930e      	str	r3, [sp, #56]	; 0x38
 801ad54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ad56:	2b00      	cmp	r3, #0
 801ad58:	f040 8596 	bne.w	801b888 <_strtod_l+0xbb8>
 801ad5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad5e:	b1db      	cbz	r3, 801ad98 <_strtod_l+0xc8>
 801ad60:	4652      	mov	r2, sl
 801ad62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801ad66:	ec43 2b10 	vmov	d0, r2, r3
 801ad6a:	b023      	add	sp, #140	; 0x8c
 801ad6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad70:	2a20      	cmp	r2, #32
 801ad72:	d1ce      	bne.n	801ad12 <_strtod_l+0x42>
 801ad74:	3301      	adds	r3, #1
 801ad76:	931d      	str	r3, [sp, #116]	; 0x74
 801ad78:	e7c0      	b.n	801acfc <_strtod_l+0x2c>
 801ad7a:	2a2d      	cmp	r2, #45	; 0x2d
 801ad7c:	d1c9      	bne.n	801ad12 <_strtod_l+0x42>
 801ad7e:	2201      	movs	r2, #1
 801ad80:	920e      	str	r2, [sp, #56]	; 0x38
 801ad82:	1c5a      	adds	r2, r3, #1
 801ad84:	921d      	str	r2, [sp, #116]	; 0x74
 801ad86:	785b      	ldrb	r3, [r3, #1]
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	d1c4      	bne.n	801ad16 <_strtod_l+0x46>
 801ad8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ad8e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801ad92:	2b00      	cmp	r3, #0
 801ad94:	f040 8576 	bne.w	801b884 <_strtod_l+0xbb4>
 801ad98:	4652      	mov	r2, sl
 801ad9a:	465b      	mov	r3, fp
 801ad9c:	e7e3      	b.n	801ad66 <_strtod_l+0x96>
 801ad9e:	2200      	movs	r2, #0
 801ada0:	e7ee      	b.n	801ad80 <_strtod_l+0xb0>
 801ada2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801ada4:	b13a      	cbz	r2, 801adb6 <_strtod_l+0xe6>
 801ada6:	2135      	movs	r1, #53	; 0x35
 801ada8:	a820      	add	r0, sp, #128	; 0x80
 801adaa:	f002 fcdc 	bl	801d766 <__copybits>
 801adae:	991e      	ldr	r1, [sp, #120]	; 0x78
 801adb0:	4620      	mov	r0, r4
 801adb2:	f002 f8a1 	bl	801cef8 <_Bfree>
 801adb6:	3f01      	subs	r7, #1
 801adb8:	2f05      	cmp	r7, #5
 801adba:	d807      	bhi.n	801adcc <_strtod_l+0xfc>
 801adbc:	e8df f007 	tbb	[pc, r7]
 801adc0:	1d180b0e 	.word	0x1d180b0e
 801adc4:	030e      	.short	0x030e
 801adc6:	f04f 0b00 	mov.w	fp, #0
 801adca:	46da      	mov	sl, fp
 801adcc:	0728      	lsls	r0, r5, #28
 801adce:	d5c1      	bpl.n	801ad54 <_strtod_l+0x84>
 801add0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801add4:	e7be      	b.n	801ad54 <_strtod_l+0x84>
 801add6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801adda:	e7f7      	b.n	801adcc <_strtod_l+0xfc>
 801addc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801ade0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ade2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801ade6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801adea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801adee:	e7ed      	b.n	801adcc <_strtod_l+0xfc>
 801adf0:	f8df b184 	ldr.w	fp, [pc, #388]	; 801af78 <_strtod_l+0x2a8>
 801adf4:	f04f 0a00 	mov.w	sl, #0
 801adf8:	e7e8      	b.n	801adcc <_strtod_l+0xfc>
 801adfa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801adfe:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801ae02:	e7e3      	b.n	801adcc <_strtod_l+0xfc>
 801ae04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ae06:	1c5a      	adds	r2, r3, #1
 801ae08:	921d      	str	r2, [sp, #116]	; 0x74
 801ae0a:	785b      	ldrb	r3, [r3, #1]
 801ae0c:	2b30      	cmp	r3, #48	; 0x30
 801ae0e:	d0f9      	beq.n	801ae04 <_strtod_l+0x134>
 801ae10:	2b00      	cmp	r3, #0
 801ae12:	d09f      	beq.n	801ad54 <_strtod_l+0x84>
 801ae14:	2301      	movs	r3, #1
 801ae16:	f04f 0900 	mov.w	r9, #0
 801ae1a:	9304      	str	r3, [sp, #16]
 801ae1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ae1e:	930a      	str	r3, [sp, #40]	; 0x28
 801ae20:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801ae24:	464f      	mov	r7, r9
 801ae26:	220a      	movs	r2, #10
 801ae28:	981d      	ldr	r0, [sp, #116]	; 0x74
 801ae2a:	7806      	ldrb	r6, [r0, #0]
 801ae2c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801ae30:	b2d9      	uxtb	r1, r3
 801ae32:	2909      	cmp	r1, #9
 801ae34:	d92a      	bls.n	801ae8c <_strtod_l+0x1bc>
 801ae36:	9907      	ldr	r1, [sp, #28]
 801ae38:	462a      	mov	r2, r5
 801ae3a:	f002 fe92 	bl	801db62 <strncmp>
 801ae3e:	b398      	cbz	r0, 801aea8 <_strtod_l+0x1d8>
 801ae40:	2000      	movs	r0, #0
 801ae42:	4633      	mov	r3, r6
 801ae44:	463d      	mov	r5, r7
 801ae46:	9007      	str	r0, [sp, #28]
 801ae48:	4602      	mov	r2, r0
 801ae4a:	2b65      	cmp	r3, #101	; 0x65
 801ae4c:	d001      	beq.n	801ae52 <_strtod_l+0x182>
 801ae4e:	2b45      	cmp	r3, #69	; 0x45
 801ae50:	d118      	bne.n	801ae84 <_strtod_l+0x1b4>
 801ae52:	b91d      	cbnz	r5, 801ae5c <_strtod_l+0x18c>
 801ae54:	9b04      	ldr	r3, [sp, #16]
 801ae56:	4303      	orrs	r3, r0
 801ae58:	d098      	beq.n	801ad8c <_strtod_l+0xbc>
 801ae5a:	2500      	movs	r5, #0
 801ae5c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801ae60:	f108 0301 	add.w	r3, r8, #1
 801ae64:	931d      	str	r3, [sp, #116]	; 0x74
 801ae66:	f898 3001 	ldrb.w	r3, [r8, #1]
 801ae6a:	2b2b      	cmp	r3, #43	; 0x2b
 801ae6c:	d075      	beq.n	801af5a <_strtod_l+0x28a>
 801ae6e:	2b2d      	cmp	r3, #45	; 0x2d
 801ae70:	d07b      	beq.n	801af6a <_strtod_l+0x29a>
 801ae72:	f04f 0c00 	mov.w	ip, #0
 801ae76:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801ae7a:	2909      	cmp	r1, #9
 801ae7c:	f240 8082 	bls.w	801af84 <_strtod_l+0x2b4>
 801ae80:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801ae84:	2600      	movs	r6, #0
 801ae86:	e09d      	b.n	801afc4 <_strtod_l+0x2f4>
 801ae88:	2300      	movs	r3, #0
 801ae8a:	e7c4      	b.n	801ae16 <_strtod_l+0x146>
 801ae8c:	2f08      	cmp	r7, #8
 801ae8e:	bfd8      	it	le
 801ae90:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801ae92:	f100 0001 	add.w	r0, r0, #1
 801ae96:	bfda      	itte	le
 801ae98:	fb02 3301 	mlale	r3, r2, r1, r3
 801ae9c:	9309      	strle	r3, [sp, #36]	; 0x24
 801ae9e:	fb02 3909 	mlagt	r9, r2, r9, r3
 801aea2:	3701      	adds	r7, #1
 801aea4:	901d      	str	r0, [sp, #116]	; 0x74
 801aea6:	e7bf      	b.n	801ae28 <_strtod_l+0x158>
 801aea8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801aeaa:	195a      	adds	r2, r3, r5
 801aeac:	921d      	str	r2, [sp, #116]	; 0x74
 801aeae:	5d5b      	ldrb	r3, [r3, r5]
 801aeb0:	2f00      	cmp	r7, #0
 801aeb2:	d037      	beq.n	801af24 <_strtod_l+0x254>
 801aeb4:	9007      	str	r0, [sp, #28]
 801aeb6:	463d      	mov	r5, r7
 801aeb8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801aebc:	2a09      	cmp	r2, #9
 801aebe:	d912      	bls.n	801aee6 <_strtod_l+0x216>
 801aec0:	2201      	movs	r2, #1
 801aec2:	e7c2      	b.n	801ae4a <_strtod_l+0x17a>
 801aec4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801aec6:	1c5a      	adds	r2, r3, #1
 801aec8:	921d      	str	r2, [sp, #116]	; 0x74
 801aeca:	785b      	ldrb	r3, [r3, #1]
 801aecc:	3001      	adds	r0, #1
 801aece:	2b30      	cmp	r3, #48	; 0x30
 801aed0:	d0f8      	beq.n	801aec4 <_strtod_l+0x1f4>
 801aed2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801aed6:	2a08      	cmp	r2, #8
 801aed8:	f200 84db 	bhi.w	801b892 <_strtod_l+0xbc2>
 801aedc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801aede:	9007      	str	r0, [sp, #28]
 801aee0:	2000      	movs	r0, #0
 801aee2:	920a      	str	r2, [sp, #40]	; 0x28
 801aee4:	4605      	mov	r5, r0
 801aee6:	3b30      	subs	r3, #48	; 0x30
 801aee8:	f100 0201 	add.w	r2, r0, #1
 801aeec:	d014      	beq.n	801af18 <_strtod_l+0x248>
 801aeee:	9907      	ldr	r1, [sp, #28]
 801aef0:	4411      	add	r1, r2
 801aef2:	9107      	str	r1, [sp, #28]
 801aef4:	462a      	mov	r2, r5
 801aef6:	eb00 0e05 	add.w	lr, r0, r5
 801aefa:	210a      	movs	r1, #10
 801aefc:	4572      	cmp	r2, lr
 801aefe:	d113      	bne.n	801af28 <_strtod_l+0x258>
 801af00:	182a      	adds	r2, r5, r0
 801af02:	2a08      	cmp	r2, #8
 801af04:	f105 0501 	add.w	r5, r5, #1
 801af08:	4405      	add	r5, r0
 801af0a:	dc1c      	bgt.n	801af46 <_strtod_l+0x276>
 801af0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801af0e:	220a      	movs	r2, #10
 801af10:	fb02 3301 	mla	r3, r2, r1, r3
 801af14:	9309      	str	r3, [sp, #36]	; 0x24
 801af16:	2200      	movs	r2, #0
 801af18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801af1a:	1c59      	adds	r1, r3, #1
 801af1c:	911d      	str	r1, [sp, #116]	; 0x74
 801af1e:	785b      	ldrb	r3, [r3, #1]
 801af20:	4610      	mov	r0, r2
 801af22:	e7c9      	b.n	801aeb8 <_strtod_l+0x1e8>
 801af24:	4638      	mov	r0, r7
 801af26:	e7d2      	b.n	801aece <_strtod_l+0x1fe>
 801af28:	2a08      	cmp	r2, #8
 801af2a:	dc04      	bgt.n	801af36 <_strtod_l+0x266>
 801af2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801af2e:	434e      	muls	r6, r1
 801af30:	9609      	str	r6, [sp, #36]	; 0x24
 801af32:	3201      	adds	r2, #1
 801af34:	e7e2      	b.n	801aefc <_strtod_l+0x22c>
 801af36:	f102 0c01 	add.w	ip, r2, #1
 801af3a:	f1bc 0f10 	cmp.w	ip, #16
 801af3e:	bfd8      	it	le
 801af40:	fb01 f909 	mulle.w	r9, r1, r9
 801af44:	e7f5      	b.n	801af32 <_strtod_l+0x262>
 801af46:	2d10      	cmp	r5, #16
 801af48:	bfdc      	itt	le
 801af4a:	220a      	movle	r2, #10
 801af4c:	fb02 3909 	mlale	r9, r2, r9, r3
 801af50:	e7e1      	b.n	801af16 <_strtod_l+0x246>
 801af52:	2300      	movs	r3, #0
 801af54:	9307      	str	r3, [sp, #28]
 801af56:	2201      	movs	r2, #1
 801af58:	e77c      	b.n	801ae54 <_strtod_l+0x184>
 801af5a:	f04f 0c00 	mov.w	ip, #0
 801af5e:	f108 0302 	add.w	r3, r8, #2
 801af62:	931d      	str	r3, [sp, #116]	; 0x74
 801af64:	f898 3002 	ldrb.w	r3, [r8, #2]
 801af68:	e785      	b.n	801ae76 <_strtod_l+0x1a6>
 801af6a:	f04f 0c01 	mov.w	ip, #1
 801af6e:	e7f6      	b.n	801af5e <_strtod_l+0x28e>
 801af70:	08020550 	.word	0x08020550
 801af74:	08020300 	.word	0x08020300
 801af78:	7ff00000 	.word	0x7ff00000
 801af7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801af7e:	1c59      	adds	r1, r3, #1
 801af80:	911d      	str	r1, [sp, #116]	; 0x74
 801af82:	785b      	ldrb	r3, [r3, #1]
 801af84:	2b30      	cmp	r3, #48	; 0x30
 801af86:	d0f9      	beq.n	801af7c <_strtod_l+0x2ac>
 801af88:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801af8c:	2908      	cmp	r1, #8
 801af8e:	f63f af79 	bhi.w	801ae84 <_strtod_l+0x1b4>
 801af92:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801af96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801af98:	9308      	str	r3, [sp, #32]
 801af9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801af9c:	1c59      	adds	r1, r3, #1
 801af9e:	911d      	str	r1, [sp, #116]	; 0x74
 801afa0:	785b      	ldrb	r3, [r3, #1]
 801afa2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801afa6:	2e09      	cmp	r6, #9
 801afa8:	d937      	bls.n	801b01a <_strtod_l+0x34a>
 801afaa:	9e08      	ldr	r6, [sp, #32]
 801afac:	1b89      	subs	r1, r1, r6
 801afae:	2908      	cmp	r1, #8
 801afb0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801afb4:	dc02      	bgt.n	801afbc <_strtod_l+0x2ec>
 801afb6:	4576      	cmp	r6, lr
 801afb8:	bfa8      	it	ge
 801afba:	4676      	movge	r6, lr
 801afbc:	f1bc 0f00 	cmp.w	ip, #0
 801afc0:	d000      	beq.n	801afc4 <_strtod_l+0x2f4>
 801afc2:	4276      	negs	r6, r6
 801afc4:	2d00      	cmp	r5, #0
 801afc6:	d14f      	bne.n	801b068 <_strtod_l+0x398>
 801afc8:	9904      	ldr	r1, [sp, #16]
 801afca:	4301      	orrs	r1, r0
 801afcc:	f47f aec2 	bne.w	801ad54 <_strtod_l+0x84>
 801afd0:	2a00      	cmp	r2, #0
 801afd2:	f47f aedb 	bne.w	801ad8c <_strtod_l+0xbc>
 801afd6:	2b69      	cmp	r3, #105	; 0x69
 801afd8:	d027      	beq.n	801b02a <_strtod_l+0x35a>
 801afda:	dc24      	bgt.n	801b026 <_strtod_l+0x356>
 801afdc:	2b49      	cmp	r3, #73	; 0x49
 801afde:	d024      	beq.n	801b02a <_strtod_l+0x35a>
 801afe0:	2b4e      	cmp	r3, #78	; 0x4e
 801afe2:	f47f aed3 	bne.w	801ad8c <_strtod_l+0xbc>
 801afe6:	499e      	ldr	r1, [pc, #632]	; (801b260 <_strtod_l+0x590>)
 801afe8:	a81d      	add	r0, sp, #116	; 0x74
 801afea:	f001 fe61 	bl	801ccb0 <__match>
 801afee:	2800      	cmp	r0, #0
 801aff0:	f43f aecc 	beq.w	801ad8c <_strtod_l+0xbc>
 801aff4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801aff6:	781b      	ldrb	r3, [r3, #0]
 801aff8:	2b28      	cmp	r3, #40	; 0x28
 801affa:	d12d      	bne.n	801b058 <_strtod_l+0x388>
 801affc:	4999      	ldr	r1, [pc, #612]	; (801b264 <_strtod_l+0x594>)
 801affe:	aa20      	add	r2, sp, #128	; 0x80
 801b000:	a81d      	add	r0, sp, #116	; 0x74
 801b002:	f001 fe69 	bl	801ccd8 <__hexnan>
 801b006:	2805      	cmp	r0, #5
 801b008:	d126      	bne.n	801b058 <_strtod_l+0x388>
 801b00a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b00c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801b010:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801b014:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801b018:	e69c      	b.n	801ad54 <_strtod_l+0x84>
 801b01a:	210a      	movs	r1, #10
 801b01c:	fb01 3e0e 	mla	lr, r1, lr, r3
 801b020:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801b024:	e7b9      	b.n	801af9a <_strtod_l+0x2ca>
 801b026:	2b6e      	cmp	r3, #110	; 0x6e
 801b028:	e7db      	b.n	801afe2 <_strtod_l+0x312>
 801b02a:	498f      	ldr	r1, [pc, #572]	; (801b268 <_strtod_l+0x598>)
 801b02c:	a81d      	add	r0, sp, #116	; 0x74
 801b02e:	f001 fe3f 	bl	801ccb0 <__match>
 801b032:	2800      	cmp	r0, #0
 801b034:	f43f aeaa 	beq.w	801ad8c <_strtod_l+0xbc>
 801b038:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b03a:	498c      	ldr	r1, [pc, #560]	; (801b26c <_strtod_l+0x59c>)
 801b03c:	3b01      	subs	r3, #1
 801b03e:	a81d      	add	r0, sp, #116	; 0x74
 801b040:	931d      	str	r3, [sp, #116]	; 0x74
 801b042:	f001 fe35 	bl	801ccb0 <__match>
 801b046:	b910      	cbnz	r0, 801b04e <_strtod_l+0x37e>
 801b048:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b04a:	3301      	adds	r3, #1
 801b04c:	931d      	str	r3, [sp, #116]	; 0x74
 801b04e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801b27c <_strtod_l+0x5ac>
 801b052:	f04f 0a00 	mov.w	sl, #0
 801b056:	e67d      	b.n	801ad54 <_strtod_l+0x84>
 801b058:	4885      	ldr	r0, [pc, #532]	; (801b270 <_strtod_l+0x5a0>)
 801b05a:	f002 fd6d 	bl	801db38 <nan>
 801b05e:	ed8d 0b04 	vstr	d0, [sp, #16]
 801b062:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801b066:	e675      	b.n	801ad54 <_strtod_l+0x84>
 801b068:	9b07      	ldr	r3, [sp, #28]
 801b06a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b06c:	1af3      	subs	r3, r6, r3
 801b06e:	2f00      	cmp	r7, #0
 801b070:	bf08      	it	eq
 801b072:	462f      	moveq	r7, r5
 801b074:	2d10      	cmp	r5, #16
 801b076:	9308      	str	r3, [sp, #32]
 801b078:	46a8      	mov	r8, r5
 801b07a:	bfa8      	it	ge
 801b07c:	f04f 0810 	movge.w	r8, #16
 801b080:	f7e5 fa40 	bl	8000504 <__aeabi_ui2d>
 801b084:	2d09      	cmp	r5, #9
 801b086:	4682      	mov	sl, r0
 801b088:	468b      	mov	fp, r1
 801b08a:	dd13      	ble.n	801b0b4 <_strtod_l+0x3e4>
 801b08c:	4b79      	ldr	r3, [pc, #484]	; (801b274 <_strtod_l+0x5a4>)
 801b08e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801b092:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801b096:	f7e5 faaf 	bl	80005f8 <__aeabi_dmul>
 801b09a:	4682      	mov	sl, r0
 801b09c:	4648      	mov	r0, r9
 801b09e:	468b      	mov	fp, r1
 801b0a0:	f7e5 fa30 	bl	8000504 <__aeabi_ui2d>
 801b0a4:	4602      	mov	r2, r0
 801b0a6:	460b      	mov	r3, r1
 801b0a8:	4650      	mov	r0, sl
 801b0aa:	4659      	mov	r1, fp
 801b0ac:	f7e5 f8ee 	bl	800028c <__adddf3>
 801b0b0:	4682      	mov	sl, r0
 801b0b2:	468b      	mov	fp, r1
 801b0b4:	2d0f      	cmp	r5, #15
 801b0b6:	dc38      	bgt.n	801b12a <_strtod_l+0x45a>
 801b0b8:	9b08      	ldr	r3, [sp, #32]
 801b0ba:	2b00      	cmp	r3, #0
 801b0bc:	f43f ae4a 	beq.w	801ad54 <_strtod_l+0x84>
 801b0c0:	dd24      	ble.n	801b10c <_strtod_l+0x43c>
 801b0c2:	2b16      	cmp	r3, #22
 801b0c4:	dc0b      	bgt.n	801b0de <_strtod_l+0x40e>
 801b0c6:	4d6b      	ldr	r5, [pc, #428]	; (801b274 <_strtod_l+0x5a4>)
 801b0c8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801b0cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 801b0d0:	4652      	mov	r2, sl
 801b0d2:	465b      	mov	r3, fp
 801b0d4:	f7e5 fa90 	bl	80005f8 <__aeabi_dmul>
 801b0d8:	4682      	mov	sl, r0
 801b0da:	468b      	mov	fp, r1
 801b0dc:	e63a      	b.n	801ad54 <_strtod_l+0x84>
 801b0de:	9a08      	ldr	r2, [sp, #32]
 801b0e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801b0e4:	4293      	cmp	r3, r2
 801b0e6:	db20      	blt.n	801b12a <_strtod_l+0x45a>
 801b0e8:	4c62      	ldr	r4, [pc, #392]	; (801b274 <_strtod_l+0x5a4>)
 801b0ea:	f1c5 050f 	rsb	r5, r5, #15
 801b0ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801b0f2:	4652      	mov	r2, sl
 801b0f4:	465b      	mov	r3, fp
 801b0f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b0fa:	f7e5 fa7d 	bl	80005f8 <__aeabi_dmul>
 801b0fe:	9b08      	ldr	r3, [sp, #32]
 801b100:	1b5d      	subs	r5, r3, r5
 801b102:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801b106:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b10a:	e7e3      	b.n	801b0d4 <_strtod_l+0x404>
 801b10c:	9b08      	ldr	r3, [sp, #32]
 801b10e:	3316      	adds	r3, #22
 801b110:	db0b      	blt.n	801b12a <_strtod_l+0x45a>
 801b112:	9b07      	ldr	r3, [sp, #28]
 801b114:	4a57      	ldr	r2, [pc, #348]	; (801b274 <_strtod_l+0x5a4>)
 801b116:	1b9e      	subs	r6, r3, r6
 801b118:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801b11c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b120:	4650      	mov	r0, sl
 801b122:	4659      	mov	r1, fp
 801b124:	f7e5 fb92 	bl	800084c <__aeabi_ddiv>
 801b128:	e7d6      	b.n	801b0d8 <_strtod_l+0x408>
 801b12a:	9b08      	ldr	r3, [sp, #32]
 801b12c:	eba5 0808 	sub.w	r8, r5, r8
 801b130:	4498      	add	r8, r3
 801b132:	f1b8 0f00 	cmp.w	r8, #0
 801b136:	dd71      	ble.n	801b21c <_strtod_l+0x54c>
 801b138:	f018 030f 	ands.w	r3, r8, #15
 801b13c:	d00a      	beq.n	801b154 <_strtod_l+0x484>
 801b13e:	494d      	ldr	r1, [pc, #308]	; (801b274 <_strtod_l+0x5a4>)
 801b140:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801b144:	4652      	mov	r2, sl
 801b146:	465b      	mov	r3, fp
 801b148:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b14c:	f7e5 fa54 	bl	80005f8 <__aeabi_dmul>
 801b150:	4682      	mov	sl, r0
 801b152:	468b      	mov	fp, r1
 801b154:	f038 080f 	bics.w	r8, r8, #15
 801b158:	d04d      	beq.n	801b1f6 <_strtod_l+0x526>
 801b15a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801b15e:	dd22      	ble.n	801b1a6 <_strtod_l+0x4d6>
 801b160:	2500      	movs	r5, #0
 801b162:	462e      	mov	r6, r5
 801b164:	9509      	str	r5, [sp, #36]	; 0x24
 801b166:	9507      	str	r5, [sp, #28]
 801b168:	2322      	movs	r3, #34	; 0x22
 801b16a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801b27c <_strtod_l+0x5ac>
 801b16e:	6023      	str	r3, [r4, #0]
 801b170:	f04f 0a00 	mov.w	sl, #0
 801b174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b176:	2b00      	cmp	r3, #0
 801b178:	f43f adec 	beq.w	801ad54 <_strtod_l+0x84>
 801b17c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b17e:	4620      	mov	r0, r4
 801b180:	f001 feba 	bl	801cef8 <_Bfree>
 801b184:	9907      	ldr	r1, [sp, #28]
 801b186:	4620      	mov	r0, r4
 801b188:	f001 feb6 	bl	801cef8 <_Bfree>
 801b18c:	4631      	mov	r1, r6
 801b18e:	4620      	mov	r0, r4
 801b190:	f001 feb2 	bl	801cef8 <_Bfree>
 801b194:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b196:	4620      	mov	r0, r4
 801b198:	f001 feae 	bl	801cef8 <_Bfree>
 801b19c:	4629      	mov	r1, r5
 801b19e:	4620      	mov	r0, r4
 801b1a0:	f001 feaa 	bl	801cef8 <_Bfree>
 801b1a4:	e5d6      	b.n	801ad54 <_strtod_l+0x84>
 801b1a6:	2300      	movs	r3, #0
 801b1a8:	ea4f 1828 	mov.w	r8, r8, asr #4
 801b1ac:	4650      	mov	r0, sl
 801b1ae:	4659      	mov	r1, fp
 801b1b0:	4699      	mov	r9, r3
 801b1b2:	f1b8 0f01 	cmp.w	r8, #1
 801b1b6:	dc21      	bgt.n	801b1fc <_strtod_l+0x52c>
 801b1b8:	b10b      	cbz	r3, 801b1be <_strtod_l+0x4ee>
 801b1ba:	4682      	mov	sl, r0
 801b1bc:	468b      	mov	fp, r1
 801b1be:	4b2e      	ldr	r3, [pc, #184]	; (801b278 <_strtod_l+0x5a8>)
 801b1c0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801b1c4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801b1c8:	4652      	mov	r2, sl
 801b1ca:	465b      	mov	r3, fp
 801b1cc:	e9d9 0100 	ldrd	r0, r1, [r9]
 801b1d0:	f7e5 fa12 	bl	80005f8 <__aeabi_dmul>
 801b1d4:	4b29      	ldr	r3, [pc, #164]	; (801b27c <_strtod_l+0x5ac>)
 801b1d6:	460a      	mov	r2, r1
 801b1d8:	400b      	ands	r3, r1
 801b1da:	4929      	ldr	r1, [pc, #164]	; (801b280 <_strtod_l+0x5b0>)
 801b1dc:	428b      	cmp	r3, r1
 801b1de:	4682      	mov	sl, r0
 801b1e0:	d8be      	bhi.n	801b160 <_strtod_l+0x490>
 801b1e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801b1e6:	428b      	cmp	r3, r1
 801b1e8:	bf86      	itte	hi
 801b1ea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801b284 <_strtod_l+0x5b4>
 801b1ee:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801b1f2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801b1f6:	2300      	movs	r3, #0
 801b1f8:	9304      	str	r3, [sp, #16]
 801b1fa:	e081      	b.n	801b300 <_strtod_l+0x630>
 801b1fc:	f018 0f01 	tst.w	r8, #1
 801b200:	d007      	beq.n	801b212 <_strtod_l+0x542>
 801b202:	4b1d      	ldr	r3, [pc, #116]	; (801b278 <_strtod_l+0x5a8>)
 801b204:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801b208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b20c:	f7e5 f9f4 	bl	80005f8 <__aeabi_dmul>
 801b210:	2301      	movs	r3, #1
 801b212:	f109 0901 	add.w	r9, r9, #1
 801b216:	ea4f 0868 	mov.w	r8, r8, asr #1
 801b21a:	e7ca      	b.n	801b1b2 <_strtod_l+0x4e2>
 801b21c:	d0eb      	beq.n	801b1f6 <_strtod_l+0x526>
 801b21e:	f1c8 0800 	rsb	r8, r8, #0
 801b222:	f018 020f 	ands.w	r2, r8, #15
 801b226:	d00a      	beq.n	801b23e <_strtod_l+0x56e>
 801b228:	4b12      	ldr	r3, [pc, #72]	; (801b274 <_strtod_l+0x5a4>)
 801b22a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b22e:	4650      	mov	r0, sl
 801b230:	4659      	mov	r1, fp
 801b232:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b236:	f7e5 fb09 	bl	800084c <__aeabi_ddiv>
 801b23a:	4682      	mov	sl, r0
 801b23c:	468b      	mov	fp, r1
 801b23e:	ea5f 1828 	movs.w	r8, r8, asr #4
 801b242:	d0d8      	beq.n	801b1f6 <_strtod_l+0x526>
 801b244:	f1b8 0f1f 	cmp.w	r8, #31
 801b248:	dd1e      	ble.n	801b288 <_strtod_l+0x5b8>
 801b24a:	2500      	movs	r5, #0
 801b24c:	462e      	mov	r6, r5
 801b24e:	9509      	str	r5, [sp, #36]	; 0x24
 801b250:	9507      	str	r5, [sp, #28]
 801b252:	2322      	movs	r3, #34	; 0x22
 801b254:	f04f 0a00 	mov.w	sl, #0
 801b258:	f04f 0b00 	mov.w	fp, #0
 801b25c:	6023      	str	r3, [r4, #0]
 801b25e:	e789      	b.n	801b174 <_strtod_l+0x4a4>
 801b260:	080202d1 	.word	0x080202d1
 801b264:	08020314 	.word	0x08020314
 801b268:	080202c9 	.word	0x080202c9
 801b26c:	08020454 	.word	0x08020454
 801b270:	08020710 	.word	0x08020710
 801b274:	080205f0 	.word	0x080205f0
 801b278:	080205c8 	.word	0x080205c8
 801b27c:	7ff00000 	.word	0x7ff00000
 801b280:	7ca00000 	.word	0x7ca00000
 801b284:	7fefffff 	.word	0x7fefffff
 801b288:	f018 0310 	ands.w	r3, r8, #16
 801b28c:	bf18      	it	ne
 801b28e:	236a      	movne	r3, #106	; 0x6a
 801b290:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801b648 <_strtod_l+0x978>
 801b294:	9304      	str	r3, [sp, #16]
 801b296:	4650      	mov	r0, sl
 801b298:	4659      	mov	r1, fp
 801b29a:	2300      	movs	r3, #0
 801b29c:	f018 0f01 	tst.w	r8, #1
 801b2a0:	d004      	beq.n	801b2ac <_strtod_l+0x5dc>
 801b2a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 801b2a6:	f7e5 f9a7 	bl	80005f8 <__aeabi_dmul>
 801b2aa:	2301      	movs	r3, #1
 801b2ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 801b2b0:	f109 0908 	add.w	r9, r9, #8
 801b2b4:	d1f2      	bne.n	801b29c <_strtod_l+0x5cc>
 801b2b6:	b10b      	cbz	r3, 801b2bc <_strtod_l+0x5ec>
 801b2b8:	4682      	mov	sl, r0
 801b2ba:	468b      	mov	fp, r1
 801b2bc:	9b04      	ldr	r3, [sp, #16]
 801b2be:	b1bb      	cbz	r3, 801b2f0 <_strtod_l+0x620>
 801b2c0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801b2c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	4659      	mov	r1, fp
 801b2cc:	dd10      	ble.n	801b2f0 <_strtod_l+0x620>
 801b2ce:	2b1f      	cmp	r3, #31
 801b2d0:	f340 8128 	ble.w	801b524 <_strtod_l+0x854>
 801b2d4:	2b34      	cmp	r3, #52	; 0x34
 801b2d6:	bfde      	ittt	le
 801b2d8:	3b20      	suble	r3, #32
 801b2da:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 801b2de:	fa02 f303 	lslle.w	r3, r2, r3
 801b2e2:	f04f 0a00 	mov.w	sl, #0
 801b2e6:	bfcc      	ite	gt
 801b2e8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801b2ec:	ea03 0b01 	andle.w	fp, r3, r1
 801b2f0:	2200      	movs	r2, #0
 801b2f2:	2300      	movs	r3, #0
 801b2f4:	4650      	mov	r0, sl
 801b2f6:	4659      	mov	r1, fp
 801b2f8:	f7e5 fbe6 	bl	8000ac8 <__aeabi_dcmpeq>
 801b2fc:	2800      	cmp	r0, #0
 801b2fe:	d1a4      	bne.n	801b24a <_strtod_l+0x57a>
 801b300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b302:	9300      	str	r3, [sp, #0]
 801b304:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b306:	462b      	mov	r3, r5
 801b308:	463a      	mov	r2, r7
 801b30a:	4620      	mov	r0, r4
 801b30c:	f001 fe60 	bl	801cfd0 <__s2b>
 801b310:	9009      	str	r0, [sp, #36]	; 0x24
 801b312:	2800      	cmp	r0, #0
 801b314:	f43f af24 	beq.w	801b160 <_strtod_l+0x490>
 801b318:	9b07      	ldr	r3, [sp, #28]
 801b31a:	1b9e      	subs	r6, r3, r6
 801b31c:	9b08      	ldr	r3, [sp, #32]
 801b31e:	2b00      	cmp	r3, #0
 801b320:	bfb4      	ite	lt
 801b322:	4633      	movlt	r3, r6
 801b324:	2300      	movge	r3, #0
 801b326:	9310      	str	r3, [sp, #64]	; 0x40
 801b328:	9b08      	ldr	r3, [sp, #32]
 801b32a:	2500      	movs	r5, #0
 801b32c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b330:	9318      	str	r3, [sp, #96]	; 0x60
 801b332:	462e      	mov	r6, r5
 801b334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b336:	4620      	mov	r0, r4
 801b338:	6859      	ldr	r1, [r3, #4]
 801b33a:	f001 fd9d 	bl	801ce78 <_Balloc>
 801b33e:	9007      	str	r0, [sp, #28]
 801b340:	2800      	cmp	r0, #0
 801b342:	f43f af11 	beq.w	801b168 <_strtod_l+0x498>
 801b346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b348:	691a      	ldr	r2, [r3, #16]
 801b34a:	3202      	adds	r2, #2
 801b34c:	f103 010c 	add.w	r1, r3, #12
 801b350:	0092      	lsls	r2, r2, #2
 801b352:	300c      	adds	r0, #12
 801b354:	f7fe fc64 	bl	8019c20 <memcpy>
 801b358:	ec4b ab10 	vmov	d0, sl, fp
 801b35c:	aa20      	add	r2, sp, #128	; 0x80
 801b35e:	a91f      	add	r1, sp, #124	; 0x7c
 801b360:	4620      	mov	r0, r4
 801b362:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801b366:	f002 f96f 	bl	801d648 <__d2b>
 801b36a:	901e      	str	r0, [sp, #120]	; 0x78
 801b36c:	2800      	cmp	r0, #0
 801b36e:	f43f aefb 	beq.w	801b168 <_strtod_l+0x498>
 801b372:	2101      	movs	r1, #1
 801b374:	4620      	mov	r0, r4
 801b376:	f001 fec5 	bl	801d104 <__i2b>
 801b37a:	4606      	mov	r6, r0
 801b37c:	2800      	cmp	r0, #0
 801b37e:	f43f aef3 	beq.w	801b168 <_strtod_l+0x498>
 801b382:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b384:	9904      	ldr	r1, [sp, #16]
 801b386:	2b00      	cmp	r3, #0
 801b388:	bfab      	itete	ge
 801b38a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801b38c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801b38e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801b390:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801b394:	bfac      	ite	ge
 801b396:	eb03 0902 	addge.w	r9, r3, r2
 801b39a:	1ad7      	sublt	r7, r2, r3
 801b39c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b39e:	eba3 0801 	sub.w	r8, r3, r1
 801b3a2:	4490      	add	r8, r2
 801b3a4:	4ba3      	ldr	r3, [pc, #652]	; (801b634 <_strtod_l+0x964>)
 801b3a6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801b3aa:	4598      	cmp	r8, r3
 801b3ac:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801b3b0:	f280 80cc 	bge.w	801b54c <_strtod_l+0x87c>
 801b3b4:	eba3 0308 	sub.w	r3, r3, r8
 801b3b8:	2b1f      	cmp	r3, #31
 801b3ba:	eba2 0203 	sub.w	r2, r2, r3
 801b3be:	f04f 0101 	mov.w	r1, #1
 801b3c2:	f300 80b6 	bgt.w	801b532 <_strtod_l+0x862>
 801b3c6:	fa01 f303 	lsl.w	r3, r1, r3
 801b3ca:	9311      	str	r3, [sp, #68]	; 0x44
 801b3cc:	2300      	movs	r3, #0
 801b3ce:	930c      	str	r3, [sp, #48]	; 0x30
 801b3d0:	eb09 0802 	add.w	r8, r9, r2
 801b3d4:	9b04      	ldr	r3, [sp, #16]
 801b3d6:	45c1      	cmp	r9, r8
 801b3d8:	4417      	add	r7, r2
 801b3da:	441f      	add	r7, r3
 801b3dc:	464b      	mov	r3, r9
 801b3de:	bfa8      	it	ge
 801b3e0:	4643      	movge	r3, r8
 801b3e2:	42bb      	cmp	r3, r7
 801b3e4:	bfa8      	it	ge
 801b3e6:	463b      	movge	r3, r7
 801b3e8:	2b00      	cmp	r3, #0
 801b3ea:	bfc2      	ittt	gt
 801b3ec:	eba8 0803 	subgt.w	r8, r8, r3
 801b3f0:	1aff      	subgt	r7, r7, r3
 801b3f2:	eba9 0903 	subgt.w	r9, r9, r3
 801b3f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b3f8:	2b00      	cmp	r3, #0
 801b3fa:	dd17      	ble.n	801b42c <_strtod_l+0x75c>
 801b3fc:	4631      	mov	r1, r6
 801b3fe:	461a      	mov	r2, r3
 801b400:	4620      	mov	r0, r4
 801b402:	f001 ff3b 	bl	801d27c <__pow5mult>
 801b406:	4606      	mov	r6, r0
 801b408:	2800      	cmp	r0, #0
 801b40a:	f43f aead 	beq.w	801b168 <_strtod_l+0x498>
 801b40e:	4601      	mov	r1, r0
 801b410:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801b412:	4620      	mov	r0, r4
 801b414:	f001 fe8c 	bl	801d130 <__multiply>
 801b418:	900f      	str	r0, [sp, #60]	; 0x3c
 801b41a:	2800      	cmp	r0, #0
 801b41c:	f43f aea4 	beq.w	801b168 <_strtod_l+0x498>
 801b420:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b422:	4620      	mov	r0, r4
 801b424:	f001 fd68 	bl	801cef8 <_Bfree>
 801b428:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b42a:	931e      	str	r3, [sp, #120]	; 0x78
 801b42c:	f1b8 0f00 	cmp.w	r8, #0
 801b430:	f300 8091 	bgt.w	801b556 <_strtod_l+0x886>
 801b434:	9b08      	ldr	r3, [sp, #32]
 801b436:	2b00      	cmp	r3, #0
 801b438:	dd08      	ble.n	801b44c <_strtod_l+0x77c>
 801b43a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b43c:	9907      	ldr	r1, [sp, #28]
 801b43e:	4620      	mov	r0, r4
 801b440:	f001 ff1c 	bl	801d27c <__pow5mult>
 801b444:	9007      	str	r0, [sp, #28]
 801b446:	2800      	cmp	r0, #0
 801b448:	f43f ae8e 	beq.w	801b168 <_strtod_l+0x498>
 801b44c:	2f00      	cmp	r7, #0
 801b44e:	dd08      	ble.n	801b462 <_strtod_l+0x792>
 801b450:	9907      	ldr	r1, [sp, #28]
 801b452:	463a      	mov	r2, r7
 801b454:	4620      	mov	r0, r4
 801b456:	f001 ff6b 	bl	801d330 <__lshift>
 801b45a:	9007      	str	r0, [sp, #28]
 801b45c:	2800      	cmp	r0, #0
 801b45e:	f43f ae83 	beq.w	801b168 <_strtod_l+0x498>
 801b462:	f1b9 0f00 	cmp.w	r9, #0
 801b466:	dd08      	ble.n	801b47a <_strtod_l+0x7aa>
 801b468:	4631      	mov	r1, r6
 801b46a:	464a      	mov	r2, r9
 801b46c:	4620      	mov	r0, r4
 801b46e:	f001 ff5f 	bl	801d330 <__lshift>
 801b472:	4606      	mov	r6, r0
 801b474:	2800      	cmp	r0, #0
 801b476:	f43f ae77 	beq.w	801b168 <_strtod_l+0x498>
 801b47a:	9a07      	ldr	r2, [sp, #28]
 801b47c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b47e:	4620      	mov	r0, r4
 801b480:	f001 ffde 	bl	801d440 <__mdiff>
 801b484:	4605      	mov	r5, r0
 801b486:	2800      	cmp	r0, #0
 801b488:	f43f ae6e 	beq.w	801b168 <_strtod_l+0x498>
 801b48c:	68c3      	ldr	r3, [r0, #12]
 801b48e:	930f      	str	r3, [sp, #60]	; 0x3c
 801b490:	2300      	movs	r3, #0
 801b492:	60c3      	str	r3, [r0, #12]
 801b494:	4631      	mov	r1, r6
 801b496:	f001 ffb7 	bl	801d408 <__mcmp>
 801b49a:	2800      	cmp	r0, #0
 801b49c:	da65      	bge.n	801b56a <_strtod_l+0x89a>
 801b49e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b4a0:	ea53 030a 	orrs.w	r3, r3, sl
 801b4a4:	f040 8087 	bne.w	801b5b6 <_strtod_l+0x8e6>
 801b4a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b4ac:	2b00      	cmp	r3, #0
 801b4ae:	f040 8082 	bne.w	801b5b6 <_strtod_l+0x8e6>
 801b4b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b4b6:	0d1b      	lsrs	r3, r3, #20
 801b4b8:	051b      	lsls	r3, r3, #20
 801b4ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801b4be:	d97a      	bls.n	801b5b6 <_strtod_l+0x8e6>
 801b4c0:	696b      	ldr	r3, [r5, #20]
 801b4c2:	b913      	cbnz	r3, 801b4ca <_strtod_l+0x7fa>
 801b4c4:	692b      	ldr	r3, [r5, #16]
 801b4c6:	2b01      	cmp	r3, #1
 801b4c8:	dd75      	ble.n	801b5b6 <_strtod_l+0x8e6>
 801b4ca:	4629      	mov	r1, r5
 801b4cc:	2201      	movs	r2, #1
 801b4ce:	4620      	mov	r0, r4
 801b4d0:	f001 ff2e 	bl	801d330 <__lshift>
 801b4d4:	4631      	mov	r1, r6
 801b4d6:	4605      	mov	r5, r0
 801b4d8:	f001 ff96 	bl	801d408 <__mcmp>
 801b4dc:	2800      	cmp	r0, #0
 801b4de:	dd6a      	ble.n	801b5b6 <_strtod_l+0x8e6>
 801b4e0:	9904      	ldr	r1, [sp, #16]
 801b4e2:	4a55      	ldr	r2, [pc, #340]	; (801b638 <_strtod_l+0x968>)
 801b4e4:	465b      	mov	r3, fp
 801b4e6:	2900      	cmp	r1, #0
 801b4e8:	f000 8085 	beq.w	801b5f6 <_strtod_l+0x926>
 801b4ec:	ea02 010b 	and.w	r1, r2, fp
 801b4f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801b4f4:	dc7f      	bgt.n	801b5f6 <_strtod_l+0x926>
 801b4f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801b4fa:	f77f aeaa 	ble.w	801b252 <_strtod_l+0x582>
 801b4fe:	4a4f      	ldr	r2, [pc, #316]	; (801b63c <_strtod_l+0x96c>)
 801b500:	2300      	movs	r3, #0
 801b502:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801b506:	4650      	mov	r0, sl
 801b508:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801b50c:	4659      	mov	r1, fp
 801b50e:	f7e5 f873 	bl	80005f8 <__aeabi_dmul>
 801b512:	460b      	mov	r3, r1
 801b514:	4303      	orrs	r3, r0
 801b516:	bf08      	it	eq
 801b518:	2322      	moveq	r3, #34	; 0x22
 801b51a:	4682      	mov	sl, r0
 801b51c:	468b      	mov	fp, r1
 801b51e:	bf08      	it	eq
 801b520:	6023      	streq	r3, [r4, #0]
 801b522:	e62b      	b.n	801b17c <_strtod_l+0x4ac>
 801b524:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b528:	fa02 f303 	lsl.w	r3, r2, r3
 801b52c:	ea03 0a0a 	and.w	sl, r3, sl
 801b530:	e6de      	b.n	801b2f0 <_strtod_l+0x620>
 801b532:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801b536:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801b53a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801b53e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801b542:	fa01 f308 	lsl.w	r3, r1, r8
 801b546:	930c      	str	r3, [sp, #48]	; 0x30
 801b548:	9111      	str	r1, [sp, #68]	; 0x44
 801b54a:	e741      	b.n	801b3d0 <_strtod_l+0x700>
 801b54c:	2300      	movs	r3, #0
 801b54e:	930c      	str	r3, [sp, #48]	; 0x30
 801b550:	2301      	movs	r3, #1
 801b552:	9311      	str	r3, [sp, #68]	; 0x44
 801b554:	e73c      	b.n	801b3d0 <_strtod_l+0x700>
 801b556:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b558:	4642      	mov	r2, r8
 801b55a:	4620      	mov	r0, r4
 801b55c:	f001 fee8 	bl	801d330 <__lshift>
 801b560:	901e      	str	r0, [sp, #120]	; 0x78
 801b562:	2800      	cmp	r0, #0
 801b564:	f47f af66 	bne.w	801b434 <_strtod_l+0x764>
 801b568:	e5fe      	b.n	801b168 <_strtod_l+0x498>
 801b56a:	465f      	mov	r7, fp
 801b56c:	d16e      	bne.n	801b64c <_strtod_l+0x97c>
 801b56e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b570:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b574:	b342      	cbz	r2, 801b5c8 <_strtod_l+0x8f8>
 801b576:	4a32      	ldr	r2, [pc, #200]	; (801b640 <_strtod_l+0x970>)
 801b578:	4293      	cmp	r3, r2
 801b57a:	d128      	bne.n	801b5ce <_strtod_l+0x8fe>
 801b57c:	9b04      	ldr	r3, [sp, #16]
 801b57e:	4650      	mov	r0, sl
 801b580:	b1eb      	cbz	r3, 801b5be <_strtod_l+0x8ee>
 801b582:	4a2d      	ldr	r2, [pc, #180]	; (801b638 <_strtod_l+0x968>)
 801b584:	403a      	ands	r2, r7
 801b586:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801b58a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801b58e:	d819      	bhi.n	801b5c4 <_strtod_l+0x8f4>
 801b590:	0d12      	lsrs	r2, r2, #20
 801b592:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801b596:	fa01 f303 	lsl.w	r3, r1, r3
 801b59a:	4298      	cmp	r0, r3
 801b59c:	d117      	bne.n	801b5ce <_strtod_l+0x8fe>
 801b59e:	4b29      	ldr	r3, [pc, #164]	; (801b644 <_strtod_l+0x974>)
 801b5a0:	429f      	cmp	r7, r3
 801b5a2:	d102      	bne.n	801b5aa <_strtod_l+0x8da>
 801b5a4:	3001      	adds	r0, #1
 801b5a6:	f43f addf 	beq.w	801b168 <_strtod_l+0x498>
 801b5aa:	4b23      	ldr	r3, [pc, #140]	; (801b638 <_strtod_l+0x968>)
 801b5ac:	403b      	ands	r3, r7
 801b5ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801b5b2:	f04f 0a00 	mov.w	sl, #0
 801b5b6:	9b04      	ldr	r3, [sp, #16]
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	d1a0      	bne.n	801b4fe <_strtod_l+0x82e>
 801b5bc:	e5de      	b.n	801b17c <_strtod_l+0x4ac>
 801b5be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b5c2:	e7ea      	b.n	801b59a <_strtod_l+0x8ca>
 801b5c4:	460b      	mov	r3, r1
 801b5c6:	e7e8      	b.n	801b59a <_strtod_l+0x8ca>
 801b5c8:	ea53 030a 	orrs.w	r3, r3, sl
 801b5cc:	d088      	beq.n	801b4e0 <_strtod_l+0x810>
 801b5ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b5d0:	b1db      	cbz	r3, 801b60a <_strtod_l+0x93a>
 801b5d2:	423b      	tst	r3, r7
 801b5d4:	d0ef      	beq.n	801b5b6 <_strtod_l+0x8e6>
 801b5d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b5d8:	9a04      	ldr	r2, [sp, #16]
 801b5da:	4650      	mov	r0, sl
 801b5dc:	4659      	mov	r1, fp
 801b5de:	b1c3      	cbz	r3, 801b612 <_strtod_l+0x942>
 801b5e0:	f7ff fb5a 	bl	801ac98 <sulp>
 801b5e4:	4602      	mov	r2, r0
 801b5e6:	460b      	mov	r3, r1
 801b5e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b5ec:	f7e4 fe4e 	bl	800028c <__adddf3>
 801b5f0:	4682      	mov	sl, r0
 801b5f2:	468b      	mov	fp, r1
 801b5f4:	e7df      	b.n	801b5b6 <_strtod_l+0x8e6>
 801b5f6:	4013      	ands	r3, r2
 801b5f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801b5fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801b600:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801b604:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801b608:	e7d5      	b.n	801b5b6 <_strtod_l+0x8e6>
 801b60a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b60c:	ea13 0f0a 	tst.w	r3, sl
 801b610:	e7e0      	b.n	801b5d4 <_strtod_l+0x904>
 801b612:	f7ff fb41 	bl	801ac98 <sulp>
 801b616:	4602      	mov	r2, r0
 801b618:	460b      	mov	r3, r1
 801b61a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b61e:	f7e4 fe33 	bl	8000288 <__aeabi_dsub>
 801b622:	2200      	movs	r2, #0
 801b624:	2300      	movs	r3, #0
 801b626:	4682      	mov	sl, r0
 801b628:	468b      	mov	fp, r1
 801b62a:	f7e5 fa4d 	bl	8000ac8 <__aeabi_dcmpeq>
 801b62e:	2800      	cmp	r0, #0
 801b630:	d0c1      	beq.n	801b5b6 <_strtod_l+0x8e6>
 801b632:	e60e      	b.n	801b252 <_strtod_l+0x582>
 801b634:	fffffc02 	.word	0xfffffc02
 801b638:	7ff00000 	.word	0x7ff00000
 801b63c:	39500000 	.word	0x39500000
 801b640:	000fffff 	.word	0x000fffff
 801b644:	7fefffff 	.word	0x7fefffff
 801b648:	08020328 	.word	0x08020328
 801b64c:	4631      	mov	r1, r6
 801b64e:	4628      	mov	r0, r5
 801b650:	f002 f856 	bl	801d700 <__ratio>
 801b654:	ec59 8b10 	vmov	r8, r9, d0
 801b658:	ee10 0a10 	vmov	r0, s0
 801b65c:	2200      	movs	r2, #0
 801b65e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b662:	4649      	mov	r1, r9
 801b664:	f7e5 fa44 	bl	8000af0 <__aeabi_dcmple>
 801b668:	2800      	cmp	r0, #0
 801b66a:	d07c      	beq.n	801b766 <_strtod_l+0xa96>
 801b66c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b66e:	2b00      	cmp	r3, #0
 801b670:	d04c      	beq.n	801b70c <_strtod_l+0xa3c>
 801b672:	4b95      	ldr	r3, [pc, #596]	; (801b8c8 <_strtod_l+0xbf8>)
 801b674:	2200      	movs	r2, #0
 801b676:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801b67a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801b8c8 <_strtod_l+0xbf8>
 801b67e:	f04f 0800 	mov.w	r8, #0
 801b682:	4b92      	ldr	r3, [pc, #584]	; (801b8cc <_strtod_l+0xbfc>)
 801b684:	403b      	ands	r3, r7
 801b686:	9311      	str	r3, [sp, #68]	; 0x44
 801b688:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b68a:	4b91      	ldr	r3, [pc, #580]	; (801b8d0 <_strtod_l+0xc00>)
 801b68c:	429a      	cmp	r2, r3
 801b68e:	f040 80b2 	bne.w	801b7f6 <_strtod_l+0xb26>
 801b692:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b696:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b69a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801b69e:	ec4b ab10 	vmov	d0, sl, fp
 801b6a2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801b6a6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801b6aa:	f001 ff51 	bl	801d550 <__ulp>
 801b6ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b6b2:	ec53 2b10 	vmov	r2, r3, d0
 801b6b6:	f7e4 ff9f 	bl	80005f8 <__aeabi_dmul>
 801b6ba:	4652      	mov	r2, sl
 801b6bc:	465b      	mov	r3, fp
 801b6be:	f7e4 fde5 	bl	800028c <__adddf3>
 801b6c2:	460b      	mov	r3, r1
 801b6c4:	4981      	ldr	r1, [pc, #516]	; (801b8cc <_strtod_l+0xbfc>)
 801b6c6:	4a83      	ldr	r2, [pc, #524]	; (801b8d4 <_strtod_l+0xc04>)
 801b6c8:	4019      	ands	r1, r3
 801b6ca:	4291      	cmp	r1, r2
 801b6cc:	4682      	mov	sl, r0
 801b6ce:	d95e      	bls.n	801b78e <_strtod_l+0xabe>
 801b6d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b6d2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801b6d6:	4293      	cmp	r3, r2
 801b6d8:	d103      	bne.n	801b6e2 <_strtod_l+0xa12>
 801b6da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b6dc:	3301      	adds	r3, #1
 801b6de:	f43f ad43 	beq.w	801b168 <_strtod_l+0x498>
 801b6e2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801b8e0 <_strtod_l+0xc10>
 801b6e6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801b6ea:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b6ec:	4620      	mov	r0, r4
 801b6ee:	f001 fc03 	bl	801cef8 <_Bfree>
 801b6f2:	9907      	ldr	r1, [sp, #28]
 801b6f4:	4620      	mov	r0, r4
 801b6f6:	f001 fbff 	bl	801cef8 <_Bfree>
 801b6fa:	4631      	mov	r1, r6
 801b6fc:	4620      	mov	r0, r4
 801b6fe:	f001 fbfb 	bl	801cef8 <_Bfree>
 801b702:	4629      	mov	r1, r5
 801b704:	4620      	mov	r0, r4
 801b706:	f001 fbf7 	bl	801cef8 <_Bfree>
 801b70a:	e613      	b.n	801b334 <_strtod_l+0x664>
 801b70c:	f1ba 0f00 	cmp.w	sl, #0
 801b710:	d11b      	bne.n	801b74a <_strtod_l+0xa7a>
 801b712:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b716:	b9f3      	cbnz	r3, 801b756 <_strtod_l+0xa86>
 801b718:	4b6b      	ldr	r3, [pc, #428]	; (801b8c8 <_strtod_l+0xbf8>)
 801b71a:	2200      	movs	r2, #0
 801b71c:	4640      	mov	r0, r8
 801b71e:	4649      	mov	r1, r9
 801b720:	f7e5 f9dc 	bl	8000adc <__aeabi_dcmplt>
 801b724:	b9d0      	cbnz	r0, 801b75c <_strtod_l+0xa8c>
 801b726:	4640      	mov	r0, r8
 801b728:	4649      	mov	r1, r9
 801b72a:	4b6b      	ldr	r3, [pc, #428]	; (801b8d8 <_strtod_l+0xc08>)
 801b72c:	2200      	movs	r2, #0
 801b72e:	f7e4 ff63 	bl	80005f8 <__aeabi_dmul>
 801b732:	4680      	mov	r8, r0
 801b734:	4689      	mov	r9, r1
 801b736:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b73a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801b73e:	931b      	str	r3, [sp, #108]	; 0x6c
 801b740:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801b744:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801b748:	e79b      	b.n	801b682 <_strtod_l+0x9b2>
 801b74a:	f1ba 0f01 	cmp.w	sl, #1
 801b74e:	d102      	bne.n	801b756 <_strtod_l+0xa86>
 801b750:	2f00      	cmp	r7, #0
 801b752:	f43f ad7e 	beq.w	801b252 <_strtod_l+0x582>
 801b756:	4b61      	ldr	r3, [pc, #388]	; (801b8dc <_strtod_l+0xc0c>)
 801b758:	2200      	movs	r2, #0
 801b75a:	e78c      	b.n	801b676 <_strtod_l+0x9a6>
 801b75c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801b8d8 <_strtod_l+0xc08>
 801b760:	f04f 0800 	mov.w	r8, #0
 801b764:	e7e7      	b.n	801b736 <_strtod_l+0xa66>
 801b766:	4b5c      	ldr	r3, [pc, #368]	; (801b8d8 <_strtod_l+0xc08>)
 801b768:	4640      	mov	r0, r8
 801b76a:	4649      	mov	r1, r9
 801b76c:	2200      	movs	r2, #0
 801b76e:	f7e4 ff43 	bl	80005f8 <__aeabi_dmul>
 801b772:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b774:	4680      	mov	r8, r0
 801b776:	4689      	mov	r9, r1
 801b778:	b933      	cbnz	r3, 801b788 <_strtod_l+0xab8>
 801b77a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b77e:	9012      	str	r0, [sp, #72]	; 0x48
 801b780:	9313      	str	r3, [sp, #76]	; 0x4c
 801b782:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801b786:	e7dd      	b.n	801b744 <_strtod_l+0xa74>
 801b788:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801b78c:	e7f9      	b.n	801b782 <_strtod_l+0xab2>
 801b78e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801b792:	9b04      	ldr	r3, [sp, #16]
 801b794:	2b00      	cmp	r3, #0
 801b796:	d1a8      	bne.n	801b6ea <_strtod_l+0xa1a>
 801b798:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b79c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b79e:	0d1b      	lsrs	r3, r3, #20
 801b7a0:	051b      	lsls	r3, r3, #20
 801b7a2:	429a      	cmp	r2, r3
 801b7a4:	d1a1      	bne.n	801b6ea <_strtod_l+0xa1a>
 801b7a6:	4640      	mov	r0, r8
 801b7a8:	4649      	mov	r1, r9
 801b7aa:	f7e5 fa85 	bl	8000cb8 <__aeabi_d2lz>
 801b7ae:	f7e4 fef5 	bl	800059c <__aeabi_l2d>
 801b7b2:	4602      	mov	r2, r0
 801b7b4:	460b      	mov	r3, r1
 801b7b6:	4640      	mov	r0, r8
 801b7b8:	4649      	mov	r1, r9
 801b7ba:	f7e4 fd65 	bl	8000288 <__aeabi_dsub>
 801b7be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b7c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b7c4:	ea43 030a 	orr.w	r3, r3, sl
 801b7c8:	4313      	orrs	r3, r2
 801b7ca:	4680      	mov	r8, r0
 801b7cc:	4689      	mov	r9, r1
 801b7ce:	d053      	beq.n	801b878 <_strtod_l+0xba8>
 801b7d0:	a335      	add	r3, pc, #212	; (adr r3, 801b8a8 <_strtod_l+0xbd8>)
 801b7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7d6:	f7e5 f981 	bl	8000adc <__aeabi_dcmplt>
 801b7da:	2800      	cmp	r0, #0
 801b7dc:	f47f acce 	bne.w	801b17c <_strtod_l+0x4ac>
 801b7e0:	a333      	add	r3, pc, #204	; (adr r3, 801b8b0 <_strtod_l+0xbe0>)
 801b7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7e6:	4640      	mov	r0, r8
 801b7e8:	4649      	mov	r1, r9
 801b7ea:	f7e5 f995 	bl	8000b18 <__aeabi_dcmpgt>
 801b7ee:	2800      	cmp	r0, #0
 801b7f0:	f43f af7b 	beq.w	801b6ea <_strtod_l+0xa1a>
 801b7f4:	e4c2      	b.n	801b17c <_strtod_l+0x4ac>
 801b7f6:	9b04      	ldr	r3, [sp, #16]
 801b7f8:	b333      	cbz	r3, 801b848 <_strtod_l+0xb78>
 801b7fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b7fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b800:	d822      	bhi.n	801b848 <_strtod_l+0xb78>
 801b802:	a32d      	add	r3, pc, #180	; (adr r3, 801b8b8 <_strtod_l+0xbe8>)
 801b804:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b808:	4640      	mov	r0, r8
 801b80a:	4649      	mov	r1, r9
 801b80c:	f7e5 f970 	bl	8000af0 <__aeabi_dcmple>
 801b810:	b1a0      	cbz	r0, 801b83c <_strtod_l+0xb6c>
 801b812:	4649      	mov	r1, r9
 801b814:	4640      	mov	r0, r8
 801b816:	f7e5 f9c7 	bl	8000ba8 <__aeabi_d2uiz>
 801b81a:	2801      	cmp	r0, #1
 801b81c:	bf38      	it	cc
 801b81e:	2001      	movcc	r0, #1
 801b820:	f7e4 fe70 	bl	8000504 <__aeabi_ui2d>
 801b824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b826:	4680      	mov	r8, r0
 801b828:	4689      	mov	r9, r1
 801b82a:	bb13      	cbnz	r3, 801b872 <_strtod_l+0xba2>
 801b82c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b830:	9014      	str	r0, [sp, #80]	; 0x50
 801b832:	9315      	str	r3, [sp, #84]	; 0x54
 801b834:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801b838:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801b83c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b83e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b840:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801b844:	1a9b      	subs	r3, r3, r2
 801b846:	930d      	str	r3, [sp, #52]	; 0x34
 801b848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b84c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801b850:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801b854:	f001 fe7c 	bl	801d550 <__ulp>
 801b858:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b85c:	ec53 2b10 	vmov	r2, r3, d0
 801b860:	f7e4 feca 	bl	80005f8 <__aeabi_dmul>
 801b864:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b868:	f7e4 fd10 	bl	800028c <__adddf3>
 801b86c:	4682      	mov	sl, r0
 801b86e:	468b      	mov	fp, r1
 801b870:	e78f      	b.n	801b792 <_strtod_l+0xac2>
 801b872:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801b876:	e7dd      	b.n	801b834 <_strtod_l+0xb64>
 801b878:	a311      	add	r3, pc, #68	; (adr r3, 801b8c0 <_strtod_l+0xbf0>)
 801b87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b87e:	f7e5 f92d 	bl	8000adc <__aeabi_dcmplt>
 801b882:	e7b4      	b.n	801b7ee <_strtod_l+0xb1e>
 801b884:	2300      	movs	r3, #0
 801b886:	930e      	str	r3, [sp, #56]	; 0x38
 801b888:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801b88a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b88c:	6013      	str	r3, [r2, #0]
 801b88e:	f7ff ba65 	b.w	801ad5c <_strtod_l+0x8c>
 801b892:	2b65      	cmp	r3, #101	; 0x65
 801b894:	f43f ab5d 	beq.w	801af52 <_strtod_l+0x282>
 801b898:	2b45      	cmp	r3, #69	; 0x45
 801b89a:	f43f ab5a 	beq.w	801af52 <_strtod_l+0x282>
 801b89e:	2201      	movs	r2, #1
 801b8a0:	f7ff bb92 	b.w	801afc8 <_strtod_l+0x2f8>
 801b8a4:	f3af 8000 	nop.w
 801b8a8:	94a03595 	.word	0x94a03595
 801b8ac:	3fdfffff 	.word	0x3fdfffff
 801b8b0:	35afe535 	.word	0x35afe535
 801b8b4:	3fe00000 	.word	0x3fe00000
 801b8b8:	ffc00000 	.word	0xffc00000
 801b8bc:	41dfffff 	.word	0x41dfffff
 801b8c0:	94a03595 	.word	0x94a03595
 801b8c4:	3fcfffff 	.word	0x3fcfffff
 801b8c8:	3ff00000 	.word	0x3ff00000
 801b8cc:	7ff00000 	.word	0x7ff00000
 801b8d0:	7fe00000 	.word	0x7fe00000
 801b8d4:	7c9fffff 	.word	0x7c9fffff
 801b8d8:	3fe00000 	.word	0x3fe00000
 801b8dc:	bff00000 	.word	0xbff00000
 801b8e0:	7fefffff 	.word	0x7fefffff

0801b8e4 <_strtod_r>:
 801b8e4:	4b01      	ldr	r3, [pc, #4]	; (801b8ec <_strtod_r+0x8>)
 801b8e6:	f7ff b9f3 	b.w	801acd0 <_strtod_l>
 801b8ea:	bf00      	nop
 801b8ec:	2000012c 	.word	0x2000012c

0801b8f0 <_strtol_l.isra.0>:
 801b8f0:	2b01      	cmp	r3, #1
 801b8f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b8f6:	d001      	beq.n	801b8fc <_strtol_l.isra.0+0xc>
 801b8f8:	2b24      	cmp	r3, #36	; 0x24
 801b8fa:	d906      	bls.n	801b90a <_strtol_l.isra.0+0x1a>
 801b8fc:	f7fe f95e 	bl	8019bbc <__errno>
 801b900:	2316      	movs	r3, #22
 801b902:	6003      	str	r3, [r0, #0]
 801b904:	2000      	movs	r0, #0
 801b906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b90a:	4f3a      	ldr	r7, [pc, #232]	; (801b9f4 <_strtol_l.isra.0+0x104>)
 801b90c:	468e      	mov	lr, r1
 801b90e:	4676      	mov	r6, lr
 801b910:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801b914:	5de5      	ldrb	r5, [r4, r7]
 801b916:	f015 0508 	ands.w	r5, r5, #8
 801b91a:	d1f8      	bne.n	801b90e <_strtol_l.isra.0+0x1e>
 801b91c:	2c2d      	cmp	r4, #45	; 0x2d
 801b91e:	d134      	bne.n	801b98a <_strtol_l.isra.0+0x9a>
 801b920:	f89e 4000 	ldrb.w	r4, [lr]
 801b924:	f04f 0801 	mov.w	r8, #1
 801b928:	f106 0e02 	add.w	lr, r6, #2
 801b92c:	2b00      	cmp	r3, #0
 801b92e:	d05c      	beq.n	801b9ea <_strtol_l.isra.0+0xfa>
 801b930:	2b10      	cmp	r3, #16
 801b932:	d10c      	bne.n	801b94e <_strtol_l.isra.0+0x5e>
 801b934:	2c30      	cmp	r4, #48	; 0x30
 801b936:	d10a      	bne.n	801b94e <_strtol_l.isra.0+0x5e>
 801b938:	f89e 4000 	ldrb.w	r4, [lr]
 801b93c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b940:	2c58      	cmp	r4, #88	; 0x58
 801b942:	d14d      	bne.n	801b9e0 <_strtol_l.isra.0+0xf0>
 801b944:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801b948:	2310      	movs	r3, #16
 801b94a:	f10e 0e02 	add.w	lr, lr, #2
 801b94e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801b952:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801b956:	2600      	movs	r6, #0
 801b958:	fbbc f9f3 	udiv	r9, ip, r3
 801b95c:	4635      	mov	r5, r6
 801b95e:	fb03 ca19 	mls	sl, r3, r9, ip
 801b962:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801b966:	2f09      	cmp	r7, #9
 801b968:	d818      	bhi.n	801b99c <_strtol_l.isra.0+0xac>
 801b96a:	463c      	mov	r4, r7
 801b96c:	42a3      	cmp	r3, r4
 801b96e:	dd24      	ble.n	801b9ba <_strtol_l.isra.0+0xca>
 801b970:	2e00      	cmp	r6, #0
 801b972:	db1f      	blt.n	801b9b4 <_strtol_l.isra.0+0xc4>
 801b974:	45a9      	cmp	r9, r5
 801b976:	d31d      	bcc.n	801b9b4 <_strtol_l.isra.0+0xc4>
 801b978:	d101      	bne.n	801b97e <_strtol_l.isra.0+0x8e>
 801b97a:	45a2      	cmp	sl, r4
 801b97c:	db1a      	blt.n	801b9b4 <_strtol_l.isra.0+0xc4>
 801b97e:	fb05 4503 	mla	r5, r5, r3, r4
 801b982:	2601      	movs	r6, #1
 801b984:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801b988:	e7eb      	b.n	801b962 <_strtol_l.isra.0+0x72>
 801b98a:	2c2b      	cmp	r4, #43	; 0x2b
 801b98c:	bf08      	it	eq
 801b98e:	f89e 4000 	ldrbeq.w	r4, [lr]
 801b992:	46a8      	mov	r8, r5
 801b994:	bf08      	it	eq
 801b996:	f106 0e02 	addeq.w	lr, r6, #2
 801b99a:	e7c7      	b.n	801b92c <_strtol_l.isra.0+0x3c>
 801b99c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801b9a0:	2f19      	cmp	r7, #25
 801b9a2:	d801      	bhi.n	801b9a8 <_strtol_l.isra.0+0xb8>
 801b9a4:	3c37      	subs	r4, #55	; 0x37
 801b9a6:	e7e1      	b.n	801b96c <_strtol_l.isra.0+0x7c>
 801b9a8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801b9ac:	2f19      	cmp	r7, #25
 801b9ae:	d804      	bhi.n	801b9ba <_strtol_l.isra.0+0xca>
 801b9b0:	3c57      	subs	r4, #87	; 0x57
 801b9b2:	e7db      	b.n	801b96c <_strtol_l.isra.0+0x7c>
 801b9b4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801b9b8:	e7e4      	b.n	801b984 <_strtol_l.isra.0+0x94>
 801b9ba:	2e00      	cmp	r6, #0
 801b9bc:	da05      	bge.n	801b9ca <_strtol_l.isra.0+0xda>
 801b9be:	2322      	movs	r3, #34	; 0x22
 801b9c0:	6003      	str	r3, [r0, #0]
 801b9c2:	4665      	mov	r5, ip
 801b9c4:	b942      	cbnz	r2, 801b9d8 <_strtol_l.isra.0+0xe8>
 801b9c6:	4628      	mov	r0, r5
 801b9c8:	e79d      	b.n	801b906 <_strtol_l.isra.0+0x16>
 801b9ca:	f1b8 0f00 	cmp.w	r8, #0
 801b9ce:	d000      	beq.n	801b9d2 <_strtol_l.isra.0+0xe2>
 801b9d0:	426d      	negs	r5, r5
 801b9d2:	2a00      	cmp	r2, #0
 801b9d4:	d0f7      	beq.n	801b9c6 <_strtol_l.isra.0+0xd6>
 801b9d6:	b10e      	cbz	r6, 801b9dc <_strtol_l.isra.0+0xec>
 801b9d8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 801b9dc:	6011      	str	r1, [r2, #0]
 801b9de:	e7f2      	b.n	801b9c6 <_strtol_l.isra.0+0xd6>
 801b9e0:	2430      	movs	r4, #48	; 0x30
 801b9e2:	2b00      	cmp	r3, #0
 801b9e4:	d1b3      	bne.n	801b94e <_strtol_l.isra.0+0x5e>
 801b9e6:	2308      	movs	r3, #8
 801b9e8:	e7b1      	b.n	801b94e <_strtol_l.isra.0+0x5e>
 801b9ea:	2c30      	cmp	r4, #48	; 0x30
 801b9ec:	d0a4      	beq.n	801b938 <_strtol_l.isra.0+0x48>
 801b9ee:	230a      	movs	r3, #10
 801b9f0:	e7ad      	b.n	801b94e <_strtol_l.isra.0+0x5e>
 801b9f2:	bf00      	nop
 801b9f4:	08020351 	.word	0x08020351

0801b9f8 <_strtol_r>:
 801b9f8:	f7ff bf7a 	b.w	801b8f0 <_strtol_l.isra.0>

0801b9fc <_write_r>:
 801b9fc:	b538      	push	{r3, r4, r5, lr}
 801b9fe:	4d07      	ldr	r5, [pc, #28]	; (801ba1c <_write_r+0x20>)
 801ba00:	4604      	mov	r4, r0
 801ba02:	4608      	mov	r0, r1
 801ba04:	4611      	mov	r1, r2
 801ba06:	2200      	movs	r2, #0
 801ba08:	602a      	str	r2, [r5, #0]
 801ba0a:	461a      	mov	r2, r3
 801ba0c:	f7f1 fa57 	bl	800cebe <_write>
 801ba10:	1c43      	adds	r3, r0, #1
 801ba12:	d102      	bne.n	801ba1a <_write_r+0x1e>
 801ba14:	682b      	ldr	r3, [r5, #0]
 801ba16:	b103      	cbz	r3, 801ba1a <_write_r+0x1e>
 801ba18:	6023      	str	r3, [r4, #0]
 801ba1a:	bd38      	pop	{r3, r4, r5, pc}
 801ba1c:	2000a6d4 	.word	0x2000a6d4

0801ba20 <_close_r>:
 801ba20:	b538      	push	{r3, r4, r5, lr}
 801ba22:	4d06      	ldr	r5, [pc, #24]	; (801ba3c <_close_r+0x1c>)
 801ba24:	2300      	movs	r3, #0
 801ba26:	4604      	mov	r4, r0
 801ba28:	4608      	mov	r0, r1
 801ba2a:	602b      	str	r3, [r5, #0]
 801ba2c:	f7f1 fa63 	bl	800cef6 <_close>
 801ba30:	1c43      	adds	r3, r0, #1
 801ba32:	d102      	bne.n	801ba3a <_close_r+0x1a>
 801ba34:	682b      	ldr	r3, [r5, #0]
 801ba36:	b103      	cbz	r3, 801ba3a <_close_r+0x1a>
 801ba38:	6023      	str	r3, [r4, #0]
 801ba3a:	bd38      	pop	{r3, r4, r5, pc}
 801ba3c:	2000a6d4 	.word	0x2000a6d4

0801ba40 <quorem>:
 801ba40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba44:	6903      	ldr	r3, [r0, #16]
 801ba46:	690c      	ldr	r4, [r1, #16]
 801ba48:	42a3      	cmp	r3, r4
 801ba4a:	4607      	mov	r7, r0
 801ba4c:	f2c0 8081 	blt.w	801bb52 <quorem+0x112>
 801ba50:	3c01      	subs	r4, #1
 801ba52:	f101 0814 	add.w	r8, r1, #20
 801ba56:	f100 0514 	add.w	r5, r0, #20
 801ba5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ba5e:	9301      	str	r3, [sp, #4]
 801ba60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ba64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ba68:	3301      	adds	r3, #1
 801ba6a:	429a      	cmp	r2, r3
 801ba6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801ba70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ba74:	fbb2 f6f3 	udiv	r6, r2, r3
 801ba78:	d331      	bcc.n	801bade <quorem+0x9e>
 801ba7a:	f04f 0e00 	mov.w	lr, #0
 801ba7e:	4640      	mov	r0, r8
 801ba80:	46ac      	mov	ip, r5
 801ba82:	46f2      	mov	sl, lr
 801ba84:	f850 2b04 	ldr.w	r2, [r0], #4
 801ba88:	b293      	uxth	r3, r2
 801ba8a:	fb06 e303 	mla	r3, r6, r3, lr
 801ba8e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801ba92:	b29b      	uxth	r3, r3
 801ba94:	ebaa 0303 	sub.w	r3, sl, r3
 801ba98:	0c12      	lsrs	r2, r2, #16
 801ba9a:	f8dc a000 	ldr.w	sl, [ip]
 801ba9e:	fb06 e202 	mla	r2, r6, r2, lr
 801baa2:	fa13 f38a 	uxtah	r3, r3, sl
 801baa6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801baaa:	fa1f fa82 	uxth.w	sl, r2
 801baae:	f8dc 2000 	ldr.w	r2, [ip]
 801bab2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801bab6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801baba:	b29b      	uxth	r3, r3
 801babc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bac0:	4581      	cmp	r9, r0
 801bac2:	f84c 3b04 	str.w	r3, [ip], #4
 801bac6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801baca:	d2db      	bcs.n	801ba84 <quorem+0x44>
 801bacc:	f855 300b 	ldr.w	r3, [r5, fp]
 801bad0:	b92b      	cbnz	r3, 801bade <quorem+0x9e>
 801bad2:	9b01      	ldr	r3, [sp, #4]
 801bad4:	3b04      	subs	r3, #4
 801bad6:	429d      	cmp	r5, r3
 801bad8:	461a      	mov	r2, r3
 801bada:	d32e      	bcc.n	801bb3a <quorem+0xfa>
 801badc:	613c      	str	r4, [r7, #16]
 801bade:	4638      	mov	r0, r7
 801bae0:	f001 fc92 	bl	801d408 <__mcmp>
 801bae4:	2800      	cmp	r0, #0
 801bae6:	db24      	blt.n	801bb32 <quorem+0xf2>
 801bae8:	3601      	adds	r6, #1
 801baea:	4628      	mov	r0, r5
 801baec:	f04f 0c00 	mov.w	ip, #0
 801baf0:	f858 2b04 	ldr.w	r2, [r8], #4
 801baf4:	f8d0 e000 	ldr.w	lr, [r0]
 801baf8:	b293      	uxth	r3, r2
 801bafa:	ebac 0303 	sub.w	r3, ip, r3
 801bafe:	0c12      	lsrs	r2, r2, #16
 801bb00:	fa13 f38e 	uxtah	r3, r3, lr
 801bb04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801bb08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801bb0c:	b29b      	uxth	r3, r3
 801bb0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bb12:	45c1      	cmp	r9, r8
 801bb14:	f840 3b04 	str.w	r3, [r0], #4
 801bb18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801bb1c:	d2e8      	bcs.n	801baf0 <quorem+0xb0>
 801bb1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801bb22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bb26:	b922      	cbnz	r2, 801bb32 <quorem+0xf2>
 801bb28:	3b04      	subs	r3, #4
 801bb2a:	429d      	cmp	r5, r3
 801bb2c:	461a      	mov	r2, r3
 801bb2e:	d30a      	bcc.n	801bb46 <quorem+0x106>
 801bb30:	613c      	str	r4, [r7, #16]
 801bb32:	4630      	mov	r0, r6
 801bb34:	b003      	add	sp, #12
 801bb36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb3a:	6812      	ldr	r2, [r2, #0]
 801bb3c:	3b04      	subs	r3, #4
 801bb3e:	2a00      	cmp	r2, #0
 801bb40:	d1cc      	bne.n	801badc <quorem+0x9c>
 801bb42:	3c01      	subs	r4, #1
 801bb44:	e7c7      	b.n	801bad6 <quorem+0x96>
 801bb46:	6812      	ldr	r2, [r2, #0]
 801bb48:	3b04      	subs	r3, #4
 801bb4a:	2a00      	cmp	r2, #0
 801bb4c:	d1f0      	bne.n	801bb30 <quorem+0xf0>
 801bb4e:	3c01      	subs	r4, #1
 801bb50:	e7eb      	b.n	801bb2a <quorem+0xea>
 801bb52:	2000      	movs	r0, #0
 801bb54:	e7ee      	b.n	801bb34 <quorem+0xf4>
	...

0801bb58 <_dtoa_r>:
 801bb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb5c:	ed2d 8b02 	vpush	{d8}
 801bb60:	ec57 6b10 	vmov	r6, r7, d0
 801bb64:	b095      	sub	sp, #84	; 0x54
 801bb66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801bb68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801bb6c:	9105      	str	r1, [sp, #20]
 801bb6e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801bb72:	4604      	mov	r4, r0
 801bb74:	9209      	str	r2, [sp, #36]	; 0x24
 801bb76:	930f      	str	r3, [sp, #60]	; 0x3c
 801bb78:	b975      	cbnz	r5, 801bb98 <_dtoa_r+0x40>
 801bb7a:	2010      	movs	r0, #16
 801bb7c:	f7fe f848 	bl	8019c10 <malloc>
 801bb80:	4602      	mov	r2, r0
 801bb82:	6260      	str	r0, [r4, #36]	; 0x24
 801bb84:	b920      	cbnz	r0, 801bb90 <_dtoa_r+0x38>
 801bb86:	4bb2      	ldr	r3, [pc, #712]	; (801be50 <_dtoa_r+0x2f8>)
 801bb88:	21ea      	movs	r1, #234	; 0xea
 801bb8a:	48b2      	ldr	r0, [pc, #712]	; (801be54 <_dtoa_r+0x2fc>)
 801bb8c:	f002 f808 	bl	801dba0 <__assert_func>
 801bb90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801bb94:	6005      	str	r5, [r0, #0]
 801bb96:	60c5      	str	r5, [r0, #12]
 801bb98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bb9a:	6819      	ldr	r1, [r3, #0]
 801bb9c:	b151      	cbz	r1, 801bbb4 <_dtoa_r+0x5c>
 801bb9e:	685a      	ldr	r2, [r3, #4]
 801bba0:	604a      	str	r2, [r1, #4]
 801bba2:	2301      	movs	r3, #1
 801bba4:	4093      	lsls	r3, r2
 801bba6:	608b      	str	r3, [r1, #8]
 801bba8:	4620      	mov	r0, r4
 801bbaa:	f001 f9a5 	bl	801cef8 <_Bfree>
 801bbae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bbb0:	2200      	movs	r2, #0
 801bbb2:	601a      	str	r2, [r3, #0]
 801bbb4:	1e3b      	subs	r3, r7, #0
 801bbb6:	bfb9      	ittee	lt
 801bbb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801bbbc:	9303      	strlt	r3, [sp, #12]
 801bbbe:	2300      	movge	r3, #0
 801bbc0:	f8c8 3000 	strge.w	r3, [r8]
 801bbc4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801bbc8:	4ba3      	ldr	r3, [pc, #652]	; (801be58 <_dtoa_r+0x300>)
 801bbca:	bfbc      	itt	lt
 801bbcc:	2201      	movlt	r2, #1
 801bbce:	f8c8 2000 	strlt.w	r2, [r8]
 801bbd2:	ea33 0309 	bics.w	r3, r3, r9
 801bbd6:	d11b      	bne.n	801bc10 <_dtoa_r+0xb8>
 801bbd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bbda:	f242 730f 	movw	r3, #9999	; 0x270f
 801bbde:	6013      	str	r3, [r2, #0]
 801bbe0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801bbe4:	4333      	orrs	r3, r6
 801bbe6:	f000 857a 	beq.w	801c6de <_dtoa_r+0xb86>
 801bbea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bbec:	b963      	cbnz	r3, 801bc08 <_dtoa_r+0xb0>
 801bbee:	4b9b      	ldr	r3, [pc, #620]	; (801be5c <_dtoa_r+0x304>)
 801bbf0:	e024      	b.n	801bc3c <_dtoa_r+0xe4>
 801bbf2:	4b9b      	ldr	r3, [pc, #620]	; (801be60 <_dtoa_r+0x308>)
 801bbf4:	9300      	str	r3, [sp, #0]
 801bbf6:	3308      	adds	r3, #8
 801bbf8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bbfa:	6013      	str	r3, [r2, #0]
 801bbfc:	9800      	ldr	r0, [sp, #0]
 801bbfe:	b015      	add	sp, #84	; 0x54
 801bc00:	ecbd 8b02 	vpop	{d8}
 801bc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc08:	4b94      	ldr	r3, [pc, #592]	; (801be5c <_dtoa_r+0x304>)
 801bc0a:	9300      	str	r3, [sp, #0]
 801bc0c:	3303      	adds	r3, #3
 801bc0e:	e7f3      	b.n	801bbf8 <_dtoa_r+0xa0>
 801bc10:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bc14:	2200      	movs	r2, #0
 801bc16:	ec51 0b17 	vmov	r0, r1, d7
 801bc1a:	2300      	movs	r3, #0
 801bc1c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801bc20:	f7e4 ff52 	bl	8000ac8 <__aeabi_dcmpeq>
 801bc24:	4680      	mov	r8, r0
 801bc26:	b158      	cbz	r0, 801bc40 <_dtoa_r+0xe8>
 801bc28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bc2a:	2301      	movs	r3, #1
 801bc2c:	6013      	str	r3, [r2, #0]
 801bc2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	f000 8551 	beq.w	801c6d8 <_dtoa_r+0xb80>
 801bc36:	488b      	ldr	r0, [pc, #556]	; (801be64 <_dtoa_r+0x30c>)
 801bc38:	6018      	str	r0, [r3, #0]
 801bc3a:	1e43      	subs	r3, r0, #1
 801bc3c:	9300      	str	r3, [sp, #0]
 801bc3e:	e7dd      	b.n	801bbfc <_dtoa_r+0xa4>
 801bc40:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801bc44:	aa12      	add	r2, sp, #72	; 0x48
 801bc46:	a913      	add	r1, sp, #76	; 0x4c
 801bc48:	4620      	mov	r0, r4
 801bc4a:	f001 fcfd 	bl	801d648 <__d2b>
 801bc4e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801bc52:	4683      	mov	fp, r0
 801bc54:	2d00      	cmp	r5, #0
 801bc56:	d07c      	beq.n	801bd52 <_dtoa_r+0x1fa>
 801bc58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bc5a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801bc5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bc62:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801bc66:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801bc6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801bc6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801bc72:	4b7d      	ldr	r3, [pc, #500]	; (801be68 <_dtoa_r+0x310>)
 801bc74:	2200      	movs	r2, #0
 801bc76:	4630      	mov	r0, r6
 801bc78:	4639      	mov	r1, r7
 801bc7a:	f7e4 fb05 	bl	8000288 <__aeabi_dsub>
 801bc7e:	a36e      	add	r3, pc, #440	; (adr r3, 801be38 <_dtoa_r+0x2e0>)
 801bc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc84:	f7e4 fcb8 	bl	80005f8 <__aeabi_dmul>
 801bc88:	a36d      	add	r3, pc, #436	; (adr r3, 801be40 <_dtoa_r+0x2e8>)
 801bc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc8e:	f7e4 fafd 	bl	800028c <__adddf3>
 801bc92:	4606      	mov	r6, r0
 801bc94:	4628      	mov	r0, r5
 801bc96:	460f      	mov	r7, r1
 801bc98:	f7e4 fc44 	bl	8000524 <__aeabi_i2d>
 801bc9c:	a36a      	add	r3, pc, #424	; (adr r3, 801be48 <_dtoa_r+0x2f0>)
 801bc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bca2:	f7e4 fca9 	bl	80005f8 <__aeabi_dmul>
 801bca6:	4602      	mov	r2, r0
 801bca8:	460b      	mov	r3, r1
 801bcaa:	4630      	mov	r0, r6
 801bcac:	4639      	mov	r1, r7
 801bcae:	f7e4 faed 	bl	800028c <__adddf3>
 801bcb2:	4606      	mov	r6, r0
 801bcb4:	460f      	mov	r7, r1
 801bcb6:	f7e4 ff4f 	bl	8000b58 <__aeabi_d2iz>
 801bcba:	2200      	movs	r2, #0
 801bcbc:	4682      	mov	sl, r0
 801bcbe:	2300      	movs	r3, #0
 801bcc0:	4630      	mov	r0, r6
 801bcc2:	4639      	mov	r1, r7
 801bcc4:	f7e4 ff0a 	bl	8000adc <__aeabi_dcmplt>
 801bcc8:	b148      	cbz	r0, 801bcde <_dtoa_r+0x186>
 801bcca:	4650      	mov	r0, sl
 801bccc:	f7e4 fc2a 	bl	8000524 <__aeabi_i2d>
 801bcd0:	4632      	mov	r2, r6
 801bcd2:	463b      	mov	r3, r7
 801bcd4:	f7e4 fef8 	bl	8000ac8 <__aeabi_dcmpeq>
 801bcd8:	b908      	cbnz	r0, 801bcde <_dtoa_r+0x186>
 801bcda:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801bcde:	f1ba 0f16 	cmp.w	sl, #22
 801bce2:	d854      	bhi.n	801bd8e <_dtoa_r+0x236>
 801bce4:	4b61      	ldr	r3, [pc, #388]	; (801be6c <_dtoa_r+0x314>)
 801bce6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801bcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bcf2:	f7e4 fef3 	bl	8000adc <__aeabi_dcmplt>
 801bcf6:	2800      	cmp	r0, #0
 801bcf8:	d04b      	beq.n	801bd92 <_dtoa_r+0x23a>
 801bcfa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801bcfe:	2300      	movs	r3, #0
 801bd00:	930e      	str	r3, [sp, #56]	; 0x38
 801bd02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801bd04:	1b5d      	subs	r5, r3, r5
 801bd06:	1e6b      	subs	r3, r5, #1
 801bd08:	9304      	str	r3, [sp, #16]
 801bd0a:	bf43      	ittte	mi
 801bd0c:	2300      	movmi	r3, #0
 801bd0e:	f1c5 0801 	rsbmi	r8, r5, #1
 801bd12:	9304      	strmi	r3, [sp, #16]
 801bd14:	f04f 0800 	movpl.w	r8, #0
 801bd18:	f1ba 0f00 	cmp.w	sl, #0
 801bd1c:	db3b      	blt.n	801bd96 <_dtoa_r+0x23e>
 801bd1e:	9b04      	ldr	r3, [sp, #16]
 801bd20:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801bd24:	4453      	add	r3, sl
 801bd26:	9304      	str	r3, [sp, #16]
 801bd28:	2300      	movs	r3, #0
 801bd2a:	9306      	str	r3, [sp, #24]
 801bd2c:	9b05      	ldr	r3, [sp, #20]
 801bd2e:	2b09      	cmp	r3, #9
 801bd30:	d869      	bhi.n	801be06 <_dtoa_r+0x2ae>
 801bd32:	2b05      	cmp	r3, #5
 801bd34:	bfc4      	itt	gt
 801bd36:	3b04      	subgt	r3, #4
 801bd38:	9305      	strgt	r3, [sp, #20]
 801bd3a:	9b05      	ldr	r3, [sp, #20]
 801bd3c:	f1a3 0302 	sub.w	r3, r3, #2
 801bd40:	bfcc      	ite	gt
 801bd42:	2500      	movgt	r5, #0
 801bd44:	2501      	movle	r5, #1
 801bd46:	2b03      	cmp	r3, #3
 801bd48:	d869      	bhi.n	801be1e <_dtoa_r+0x2c6>
 801bd4a:	e8df f003 	tbb	[pc, r3]
 801bd4e:	4e2c      	.short	0x4e2c
 801bd50:	5a4c      	.short	0x5a4c
 801bd52:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801bd56:	441d      	add	r5, r3
 801bd58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801bd5c:	2b20      	cmp	r3, #32
 801bd5e:	bfc1      	itttt	gt
 801bd60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801bd64:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801bd68:	fa09 f303 	lslgt.w	r3, r9, r3
 801bd6c:	fa26 f000 	lsrgt.w	r0, r6, r0
 801bd70:	bfda      	itte	le
 801bd72:	f1c3 0320 	rsble	r3, r3, #32
 801bd76:	fa06 f003 	lslle.w	r0, r6, r3
 801bd7a:	4318      	orrgt	r0, r3
 801bd7c:	f7e4 fbc2 	bl	8000504 <__aeabi_ui2d>
 801bd80:	2301      	movs	r3, #1
 801bd82:	4606      	mov	r6, r0
 801bd84:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801bd88:	3d01      	subs	r5, #1
 801bd8a:	9310      	str	r3, [sp, #64]	; 0x40
 801bd8c:	e771      	b.n	801bc72 <_dtoa_r+0x11a>
 801bd8e:	2301      	movs	r3, #1
 801bd90:	e7b6      	b.n	801bd00 <_dtoa_r+0x1a8>
 801bd92:	900e      	str	r0, [sp, #56]	; 0x38
 801bd94:	e7b5      	b.n	801bd02 <_dtoa_r+0x1aa>
 801bd96:	f1ca 0300 	rsb	r3, sl, #0
 801bd9a:	9306      	str	r3, [sp, #24]
 801bd9c:	2300      	movs	r3, #0
 801bd9e:	eba8 080a 	sub.w	r8, r8, sl
 801bda2:	930d      	str	r3, [sp, #52]	; 0x34
 801bda4:	e7c2      	b.n	801bd2c <_dtoa_r+0x1d4>
 801bda6:	2300      	movs	r3, #0
 801bda8:	9308      	str	r3, [sp, #32]
 801bdaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	dc39      	bgt.n	801be24 <_dtoa_r+0x2cc>
 801bdb0:	f04f 0901 	mov.w	r9, #1
 801bdb4:	f8cd 9004 	str.w	r9, [sp, #4]
 801bdb8:	464b      	mov	r3, r9
 801bdba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801bdbe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bdc0:	2200      	movs	r2, #0
 801bdc2:	6042      	str	r2, [r0, #4]
 801bdc4:	2204      	movs	r2, #4
 801bdc6:	f102 0614 	add.w	r6, r2, #20
 801bdca:	429e      	cmp	r6, r3
 801bdcc:	6841      	ldr	r1, [r0, #4]
 801bdce:	d92f      	bls.n	801be30 <_dtoa_r+0x2d8>
 801bdd0:	4620      	mov	r0, r4
 801bdd2:	f001 f851 	bl	801ce78 <_Balloc>
 801bdd6:	9000      	str	r0, [sp, #0]
 801bdd8:	2800      	cmp	r0, #0
 801bdda:	d14b      	bne.n	801be74 <_dtoa_r+0x31c>
 801bddc:	4b24      	ldr	r3, [pc, #144]	; (801be70 <_dtoa_r+0x318>)
 801bdde:	4602      	mov	r2, r0
 801bde0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801bde4:	e6d1      	b.n	801bb8a <_dtoa_r+0x32>
 801bde6:	2301      	movs	r3, #1
 801bde8:	e7de      	b.n	801bda8 <_dtoa_r+0x250>
 801bdea:	2300      	movs	r3, #0
 801bdec:	9308      	str	r3, [sp, #32]
 801bdee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bdf0:	eb0a 0903 	add.w	r9, sl, r3
 801bdf4:	f109 0301 	add.w	r3, r9, #1
 801bdf8:	2b01      	cmp	r3, #1
 801bdfa:	9301      	str	r3, [sp, #4]
 801bdfc:	bfb8      	it	lt
 801bdfe:	2301      	movlt	r3, #1
 801be00:	e7dd      	b.n	801bdbe <_dtoa_r+0x266>
 801be02:	2301      	movs	r3, #1
 801be04:	e7f2      	b.n	801bdec <_dtoa_r+0x294>
 801be06:	2501      	movs	r5, #1
 801be08:	2300      	movs	r3, #0
 801be0a:	9305      	str	r3, [sp, #20]
 801be0c:	9508      	str	r5, [sp, #32]
 801be0e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801be12:	2200      	movs	r2, #0
 801be14:	f8cd 9004 	str.w	r9, [sp, #4]
 801be18:	2312      	movs	r3, #18
 801be1a:	9209      	str	r2, [sp, #36]	; 0x24
 801be1c:	e7cf      	b.n	801bdbe <_dtoa_r+0x266>
 801be1e:	2301      	movs	r3, #1
 801be20:	9308      	str	r3, [sp, #32]
 801be22:	e7f4      	b.n	801be0e <_dtoa_r+0x2b6>
 801be24:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801be28:	f8cd 9004 	str.w	r9, [sp, #4]
 801be2c:	464b      	mov	r3, r9
 801be2e:	e7c6      	b.n	801bdbe <_dtoa_r+0x266>
 801be30:	3101      	adds	r1, #1
 801be32:	6041      	str	r1, [r0, #4]
 801be34:	0052      	lsls	r2, r2, #1
 801be36:	e7c6      	b.n	801bdc6 <_dtoa_r+0x26e>
 801be38:	636f4361 	.word	0x636f4361
 801be3c:	3fd287a7 	.word	0x3fd287a7
 801be40:	8b60c8b3 	.word	0x8b60c8b3
 801be44:	3fc68a28 	.word	0x3fc68a28
 801be48:	509f79fb 	.word	0x509f79fb
 801be4c:	3fd34413 	.word	0x3fd34413
 801be50:	0802045e 	.word	0x0802045e
 801be54:	08020475 	.word	0x08020475
 801be58:	7ff00000 	.word	0x7ff00000
 801be5c:	0802045a 	.word	0x0802045a
 801be60:	08020451 	.word	0x08020451
 801be64:	080202d5 	.word	0x080202d5
 801be68:	3ff80000 	.word	0x3ff80000
 801be6c:	080205f0 	.word	0x080205f0
 801be70:	080204d4 	.word	0x080204d4
 801be74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801be76:	9a00      	ldr	r2, [sp, #0]
 801be78:	601a      	str	r2, [r3, #0]
 801be7a:	9b01      	ldr	r3, [sp, #4]
 801be7c:	2b0e      	cmp	r3, #14
 801be7e:	f200 80ad 	bhi.w	801bfdc <_dtoa_r+0x484>
 801be82:	2d00      	cmp	r5, #0
 801be84:	f000 80aa 	beq.w	801bfdc <_dtoa_r+0x484>
 801be88:	f1ba 0f00 	cmp.w	sl, #0
 801be8c:	dd36      	ble.n	801befc <_dtoa_r+0x3a4>
 801be8e:	4ac3      	ldr	r2, [pc, #780]	; (801c19c <_dtoa_r+0x644>)
 801be90:	f00a 030f 	and.w	r3, sl, #15
 801be94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801be98:	ed93 7b00 	vldr	d7, [r3]
 801be9c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801bea0:	ea4f 172a 	mov.w	r7, sl, asr #4
 801bea4:	eeb0 8a47 	vmov.f32	s16, s14
 801bea8:	eef0 8a67 	vmov.f32	s17, s15
 801beac:	d016      	beq.n	801bedc <_dtoa_r+0x384>
 801beae:	4bbc      	ldr	r3, [pc, #752]	; (801c1a0 <_dtoa_r+0x648>)
 801beb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801beb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801beb8:	f7e4 fcc8 	bl	800084c <__aeabi_ddiv>
 801bebc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bec0:	f007 070f 	and.w	r7, r7, #15
 801bec4:	2503      	movs	r5, #3
 801bec6:	4eb6      	ldr	r6, [pc, #728]	; (801c1a0 <_dtoa_r+0x648>)
 801bec8:	b957      	cbnz	r7, 801bee0 <_dtoa_r+0x388>
 801beca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bece:	ec53 2b18 	vmov	r2, r3, d8
 801bed2:	f7e4 fcbb 	bl	800084c <__aeabi_ddiv>
 801bed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801beda:	e029      	b.n	801bf30 <_dtoa_r+0x3d8>
 801bedc:	2502      	movs	r5, #2
 801bede:	e7f2      	b.n	801bec6 <_dtoa_r+0x36e>
 801bee0:	07f9      	lsls	r1, r7, #31
 801bee2:	d508      	bpl.n	801bef6 <_dtoa_r+0x39e>
 801bee4:	ec51 0b18 	vmov	r0, r1, d8
 801bee8:	e9d6 2300 	ldrd	r2, r3, [r6]
 801beec:	f7e4 fb84 	bl	80005f8 <__aeabi_dmul>
 801bef0:	ec41 0b18 	vmov	d8, r0, r1
 801bef4:	3501      	adds	r5, #1
 801bef6:	107f      	asrs	r7, r7, #1
 801bef8:	3608      	adds	r6, #8
 801befa:	e7e5      	b.n	801bec8 <_dtoa_r+0x370>
 801befc:	f000 80a6 	beq.w	801c04c <_dtoa_r+0x4f4>
 801bf00:	f1ca 0600 	rsb	r6, sl, #0
 801bf04:	4ba5      	ldr	r3, [pc, #660]	; (801c19c <_dtoa_r+0x644>)
 801bf06:	4fa6      	ldr	r7, [pc, #664]	; (801c1a0 <_dtoa_r+0x648>)
 801bf08:	f006 020f 	and.w	r2, r6, #15
 801bf0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bf18:	f7e4 fb6e 	bl	80005f8 <__aeabi_dmul>
 801bf1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bf20:	1136      	asrs	r6, r6, #4
 801bf22:	2300      	movs	r3, #0
 801bf24:	2502      	movs	r5, #2
 801bf26:	2e00      	cmp	r6, #0
 801bf28:	f040 8085 	bne.w	801c036 <_dtoa_r+0x4de>
 801bf2c:	2b00      	cmp	r3, #0
 801bf2e:	d1d2      	bne.n	801bed6 <_dtoa_r+0x37e>
 801bf30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	f000 808c 	beq.w	801c050 <_dtoa_r+0x4f8>
 801bf38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801bf3c:	4b99      	ldr	r3, [pc, #612]	; (801c1a4 <_dtoa_r+0x64c>)
 801bf3e:	2200      	movs	r2, #0
 801bf40:	4630      	mov	r0, r6
 801bf42:	4639      	mov	r1, r7
 801bf44:	f7e4 fdca 	bl	8000adc <__aeabi_dcmplt>
 801bf48:	2800      	cmp	r0, #0
 801bf4a:	f000 8081 	beq.w	801c050 <_dtoa_r+0x4f8>
 801bf4e:	9b01      	ldr	r3, [sp, #4]
 801bf50:	2b00      	cmp	r3, #0
 801bf52:	d07d      	beq.n	801c050 <_dtoa_r+0x4f8>
 801bf54:	f1b9 0f00 	cmp.w	r9, #0
 801bf58:	dd3c      	ble.n	801bfd4 <_dtoa_r+0x47c>
 801bf5a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801bf5e:	9307      	str	r3, [sp, #28]
 801bf60:	2200      	movs	r2, #0
 801bf62:	4b91      	ldr	r3, [pc, #580]	; (801c1a8 <_dtoa_r+0x650>)
 801bf64:	4630      	mov	r0, r6
 801bf66:	4639      	mov	r1, r7
 801bf68:	f7e4 fb46 	bl	80005f8 <__aeabi_dmul>
 801bf6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bf70:	3501      	adds	r5, #1
 801bf72:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801bf76:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801bf7a:	4628      	mov	r0, r5
 801bf7c:	f7e4 fad2 	bl	8000524 <__aeabi_i2d>
 801bf80:	4632      	mov	r2, r6
 801bf82:	463b      	mov	r3, r7
 801bf84:	f7e4 fb38 	bl	80005f8 <__aeabi_dmul>
 801bf88:	4b88      	ldr	r3, [pc, #544]	; (801c1ac <_dtoa_r+0x654>)
 801bf8a:	2200      	movs	r2, #0
 801bf8c:	f7e4 f97e 	bl	800028c <__adddf3>
 801bf90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801bf94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bf98:	9303      	str	r3, [sp, #12]
 801bf9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	d15c      	bne.n	801c05a <_dtoa_r+0x502>
 801bfa0:	4b83      	ldr	r3, [pc, #524]	; (801c1b0 <_dtoa_r+0x658>)
 801bfa2:	2200      	movs	r2, #0
 801bfa4:	4630      	mov	r0, r6
 801bfa6:	4639      	mov	r1, r7
 801bfa8:	f7e4 f96e 	bl	8000288 <__aeabi_dsub>
 801bfac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bfb0:	4606      	mov	r6, r0
 801bfb2:	460f      	mov	r7, r1
 801bfb4:	f7e4 fdb0 	bl	8000b18 <__aeabi_dcmpgt>
 801bfb8:	2800      	cmp	r0, #0
 801bfba:	f040 8296 	bne.w	801c4ea <_dtoa_r+0x992>
 801bfbe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801bfc2:	4630      	mov	r0, r6
 801bfc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bfc8:	4639      	mov	r1, r7
 801bfca:	f7e4 fd87 	bl	8000adc <__aeabi_dcmplt>
 801bfce:	2800      	cmp	r0, #0
 801bfd0:	f040 8288 	bne.w	801c4e4 <_dtoa_r+0x98c>
 801bfd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bfd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bfdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	f2c0 8158 	blt.w	801c294 <_dtoa_r+0x73c>
 801bfe4:	f1ba 0f0e 	cmp.w	sl, #14
 801bfe8:	f300 8154 	bgt.w	801c294 <_dtoa_r+0x73c>
 801bfec:	4b6b      	ldr	r3, [pc, #428]	; (801c19c <_dtoa_r+0x644>)
 801bfee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801bff2:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bff8:	2b00      	cmp	r3, #0
 801bffa:	f280 80e3 	bge.w	801c1c4 <_dtoa_r+0x66c>
 801bffe:	9b01      	ldr	r3, [sp, #4]
 801c000:	2b00      	cmp	r3, #0
 801c002:	f300 80df 	bgt.w	801c1c4 <_dtoa_r+0x66c>
 801c006:	f040 826d 	bne.w	801c4e4 <_dtoa_r+0x98c>
 801c00a:	4b69      	ldr	r3, [pc, #420]	; (801c1b0 <_dtoa_r+0x658>)
 801c00c:	2200      	movs	r2, #0
 801c00e:	4640      	mov	r0, r8
 801c010:	4649      	mov	r1, r9
 801c012:	f7e4 faf1 	bl	80005f8 <__aeabi_dmul>
 801c016:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c01a:	f7e4 fd73 	bl	8000b04 <__aeabi_dcmpge>
 801c01e:	9e01      	ldr	r6, [sp, #4]
 801c020:	4637      	mov	r7, r6
 801c022:	2800      	cmp	r0, #0
 801c024:	f040 8243 	bne.w	801c4ae <_dtoa_r+0x956>
 801c028:	9d00      	ldr	r5, [sp, #0]
 801c02a:	2331      	movs	r3, #49	; 0x31
 801c02c:	f805 3b01 	strb.w	r3, [r5], #1
 801c030:	f10a 0a01 	add.w	sl, sl, #1
 801c034:	e23f      	b.n	801c4b6 <_dtoa_r+0x95e>
 801c036:	07f2      	lsls	r2, r6, #31
 801c038:	d505      	bpl.n	801c046 <_dtoa_r+0x4ee>
 801c03a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c03e:	f7e4 fadb 	bl	80005f8 <__aeabi_dmul>
 801c042:	3501      	adds	r5, #1
 801c044:	2301      	movs	r3, #1
 801c046:	1076      	asrs	r6, r6, #1
 801c048:	3708      	adds	r7, #8
 801c04a:	e76c      	b.n	801bf26 <_dtoa_r+0x3ce>
 801c04c:	2502      	movs	r5, #2
 801c04e:	e76f      	b.n	801bf30 <_dtoa_r+0x3d8>
 801c050:	9b01      	ldr	r3, [sp, #4]
 801c052:	f8cd a01c 	str.w	sl, [sp, #28]
 801c056:	930c      	str	r3, [sp, #48]	; 0x30
 801c058:	e78d      	b.n	801bf76 <_dtoa_r+0x41e>
 801c05a:	9900      	ldr	r1, [sp, #0]
 801c05c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801c05e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c060:	4b4e      	ldr	r3, [pc, #312]	; (801c19c <_dtoa_r+0x644>)
 801c062:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c066:	4401      	add	r1, r0
 801c068:	9102      	str	r1, [sp, #8]
 801c06a:	9908      	ldr	r1, [sp, #32]
 801c06c:	eeb0 8a47 	vmov.f32	s16, s14
 801c070:	eef0 8a67 	vmov.f32	s17, s15
 801c074:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c078:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c07c:	2900      	cmp	r1, #0
 801c07e:	d045      	beq.n	801c10c <_dtoa_r+0x5b4>
 801c080:	494c      	ldr	r1, [pc, #304]	; (801c1b4 <_dtoa_r+0x65c>)
 801c082:	2000      	movs	r0, #0
 801c084:	f7e4 fbe2 	bl	800084c <__aeabi_ddiv>
 801c088:	ec53 2b18 	vmov	r2, r3, d8
 801c08c:	f7e4 f8fc 	bl	8000288 <__aeabi_dsub>
 801c090:	9d00      	ldr	r5, [sp, #0]
 801c092:	ec41 0b18 	vmov	d8, r0, r1
 801c096:	4639      	mov	r1, r7
 801c098:	4630      	mov	r0, r6
 801c09a:	f7e4 fd5d 	bl	8000b58 <__aeabi_d2iz>
 801c09e:	900c      	str	r0, [sp, #48]	; 0x30
 801c0a0:	f7e4 fa40 	bl	8000524 <__aeabi_i2d>
 801c0a4:	4602      	mov	r2, r0
 801c0a6:	460b      	mov	r3, r1
 801c0a8:	4630      	mov	r0, r6
 801c0aa:	4639      	mov	r1, r7
 801c0ac:	f7e4 f8ec 	bl	8000288 <__aeabi_dsub>
 801c0b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c0b2:	3330      	adds	r3, #48	; 0x30
 801c0b4:	f805 3b01 	strb.w	r3, [r5], #1
 801c0b8:	ec53 2b18 	vmov	r2, r3, d8
 801c0bc:	4606      	mov	r6, r0
 801c0be:	460f      	mov	r7, r1
 801c0c0:	f7e4 fd0c 	bl	8000adc <__aeabi_dcmplt>
 801c0c4:	2800      	cmp	r0, #0
 801c0c6:	d165      	bne.n	801c194 <_dtoa_r+0x63c>
 801c0c8:	4632      	mov	r2, r6
 801c0ca:	463b      	mov	r3, r7
 801c0cc:	4935      	ldr	r1, [pc, #212]	; (801c1a4 <_dtoa_r+0x64c>)
 801c0ce:	2000      	movs	r0, #0
 801c0d0:	f7e4 f8da 	bl	8000288 <__aeabi_dsub>
 801c0d4:	ec53 2b18 	vmov	r2, r3, d8
 801c0d8:	f7e4 fd00 	bl	8000adc <__aeabi_dcmplt>
 801c0dc:	2800      	cmp	r0, #0
 801c0de:	f040 80b9 	bne.w	801c254 <_dtoa_r+0x6fc>
 801c0e2:	9b02      	ldr	r3, [sp, #8]
 801c0e4:	429d      	cmp	r5, r3
 801c0e6:	f43f af75 	beq.w	801bfd4 <_dtoa_r+0x47c>
 801c0ea:	4b2f      	ldr	r3, [pc, #188]	; (801c1a8 <_dtoa_r+0x650>)
 801c0ec:	ec51 0b18 	vmov	r0, r1, d8
 801c0f0:	2200      	movs	r2, #0
 801c0f2:	f7e4 fa81 	bl	80005f8 <__aeabi_dmul>
 801c0f6:	4b2c      	ldr	r3, [pc, #176]	; (801c1a8 <_dtoa_r+0x650>)
 801c0f8:	ec41 0b18 	vmov	d8, r0, r1
 801c0fc:	2200      	movs	r2, #0
 801c0fe:	4630      	mov	r0, r6
 801c100:	4639      	mov	r1, r7
 801c102:	f7e4 fa79 	bl	80005f8 <__aeabi_dmul>
 801c106:	4606      	mov	r6, r0
 801c108:	460f      	mov	r7, r1
 801c10a:	e7c4      	b.n	801c096 <_dtoa_r+0x53e>
 801c10c:	ec51 0b17 	vmov	r0, r1, d7
 801c110:	f7e4 fa72 	bl	80005f8 <__aeabi_dmul>
 801c114:	9b02      	ldr	r3, [sp, #8]
 801c116:	9d00      	ldr	r5, [sp, #0]
 801c118:	930c      	str	r3, [sp, #48]	; 0x30
 801c11a:	ec41 0b18 	vmov	d8, r0, r1
 801c11e:	4639      	mov	r1, r7
 801c120:	4630      	mov	r0, r6
 801c122:	f7e4 fd19 	bl	8000b58 <__aeabi_d2iz>
 801c126:	9011      	str	r0, [sp, #68]	; 0x44
 801c128:	f7e4 f9fc 	bl	8000524 <__aeabi_i2d>
 801c12c:	4602      	mov	r2, r0
 801c12e:	460b      	mov	r3, r1
 801c130:	4630      	mov	r0, r6
 801c132:	4639      	mov	r1, r7
 801c134:	f7e4 f8a8 	bl	8000288 <__aeabi_dsub>
 801c138:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c13a:	3330      	adds	r3, #48	; 0x30
 801c13c:	f805 3b01 	strb.w	r3, [r5], #1
 801c140:	9b02      	ldr	r3, [sp, #8]
 801c142:	429d      	cmp	r5, r3
 801c144:	4606      	mov	r6, r0
 801c146:	460f      	mov	r7, r1
 801c148:	f04f 0200 	mov.w	r2, #0
 801c14c:	d134      	bne.n	801c1b8 <_dtoa_r+0x660>
 801c14e:	4b19      	ldr	r3, [pc, #100]	; (801c1b4 <_dtoa_r+0x65c>)
 801c150:	ec51 0b18 	vmov	r0, r1, d8
 801c154:	f7e4 f89a 	bl	800028c <__adddf3>
 801c158:	4602      	mov	r2, r0
 801c15a:	460b      	mov	r3, r1
 801c15c:	4630      	mov	r0, r6
 801c15e:	4639      	mov	r1, r7
 801c160:	f7e4 fcda 	bl	8000b18 <__aeabi_dcmpgt>
 801c164:	2800      	cmp	r0, #0
 801c166:	d175      	bne.n	801c254 <_dtoa_r+0x6fc>
 801c168:	ec53 2b18 	vmov	r2, r3, d8
 801c16c:	4911      	ldr	r1, [pc, #68]	; (801c1b4 <_dtoa_r+0x65c>)
 801c16e:	2000      	movs	r0, #0
 801c170:	f7e4 f88a 	bl	8000288 <__aeabi_dsub>
 801c174:	4602      	mov	r2, r0
 801c176:	460b      	mov	r3, r1
 801c178:	4630      	mov	r0, r6
 801c17a:	4639      	mov	r1, r7
 801c17c:	f7e4 fcae 	bl	8000adc <__aeabi_dcmplt>
 801c180:	2800      	cmp	r0, #0
 801c182:	f43f af27 	beq.w	801bfd4 <_dtoa_r+0x47c>
 801c186:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c188:	1e6b      	subs	r3, r5, #1
 801c18a:	930c      	str	r3, [sp, #48]	; 0x30
 801c18c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c190:	2b30      	cmp	r3, #48	; 0x30
 801c192:	d0f8      	beq.n	801c186 <_dtoa_r+0x62e>
 801c194:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801c198:	e04a      	b.n	801c230 <_dtoa_r+0x6d8>
 801c19a:	bf00      	nop
 801c19c:	080205f0 	.word	0x080205f0
 801c1a0:	080205c8 	.word	0x080205c8
 801c1a4:	3ff00000 	.word	0x3ff00000
 801c1a8:	40240000 	.word	0x40240000
 801c1ac:	401c0000 	.word	0x401c0000
 801c1b0:	40140000 	.word	0x40140000
 801c1b4:	3fe00000 	.word	0x3fe00000
 801c1b8:	4baf      	ldr	r3, [pc, #700]	; (801c478 <_dtoa_r+0x920>)
 801c1ba:	f7e4 fa1d 	bl	80005f8 <__aeabi_dmul>
 801c1be:	4606      	mov	r6, r0
 801c1c0:	460f      	mov	r7, r1
 801c1c2:	e7ac      	b.n	801c11e <_dtoa_r+0x5c6>
 801c1c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801c1c8:	9d00      	ldr	r5, [sp, #0]
 801c1ca:	4642      	mov	r2, r8
 801c1cc:	464b      	mov	r3, r9
 801c1ce:	4630      	mov	r0, r6
 801c1d0:	4639      	mov	r1, r7
 801c1d2:	f7e4 fb3b 	bl	800084c <__aeabi_ddiv>
 801c1d6:	f7e4 fcbf 	bl	8000b58 <__aeabi_d2iz>
 801c1da:	9002      	str	r0, [sp, #8]
 801c1dc:	f7e4 f9a2 	bl	8000524 <__aeabi_i2d>
 801c1e0:	4642      	mov	r2, r8
 801c1e2:	464b      	mov	r3, r9
 801c1e4:	f7e4 fa08 	bl	80005f8 <__aeabi_dmul>
 801c1e8:	4602      	mov	r2, r0
 801c1ea:	460b      	mov	r3, r1
 801c1ec:	4630      	mov	r0, r6
 801c1ee:	4639      	mov	r1, r7
 801c1f0:	f7e4 f84a 	bl	8000288 <__aeabi_dsub>
 801c1f4:	9e02      	ldr	r6, [sp, #8]
 801c1f6:	9f01      	ldr	r7, [sp, #4]
 801c1f8:	3630      	adds	r6, #48	; 0x30
 801c1fa:	f805 6b01 	strb.w	r6, [r5], #1
 801c1fe:	9e00      	ldr	r6, [sp, #0]
 801c200:	1bae      	subs	r6, r5, r6
 801c202:	42b7      	cmp	r7, r6
 801c204:	4602      	mov	r2, r0
 801c206:	460b      	mov	r3, r1
 801c208:	d137      	bne.n	801c27a <_dtoa_r+0x722>
 801c20a:	f7e4 f83f 	bl	800028c <__adddf3>
 801c20e:	4642      	mov	r2, r8
 801c210:	464b      	mov	r3, r9
 801c212:	4606      	mov	r6, r0
 801c214:	460f      	mov	r7, r1
 801c216:	f7e4 fc7f 	bl	8000b18 <__aeabi_dcmpgt>
 801c21a:	b9c8      	cbnz	r0, 801c250 <_dtoa_r+0x6f8>
 801c21c:	4642      	mov	r2, r8
 801c21e:	464b      	mov	r3, r9
 801c220:	4630      	mov	r0, r6
 801c222:	4639      	mov	r1, r7
 801c224:	f7e4 fc50 	bl	8000ac8 <__aeabi_dcmpeq>
 801c228:	b110      	cbz	r0, 801c230 <_dtoa_r+0x6d8>
 801c22a:	9b02      	ldr	r3, [sp, #8]
 801c22c:	07d9      	lsls	r1, r3, #31
 801c22e:	d40f      	bmi.n	801c250 <_dtoa_r+0x6f8>
 801c230:	4620      	mov	r0, r4
 801c232:	4659      	mov	r1, fp
 801c234:	f000 fe60 	bl	801cef8 <_Bfree>
 801c238:	2300      	movs	r3, #0
 801c23a:	702b      	strb	r3, [r5, #0]
 801c23c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c23e:	f10a 0001 	add.w	r0, sl, #1
 801c242:	6018      	str	r0, [r3, #0]
 801c244:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c246:	2b00      	cmp	r3, #0
 801c248:	f43f acd8 	beq.w	801bbfc <_dtoa_r+0xa4>
 801c24c:	601d      	str	r5, [r3, #0]
 801c24e:	e4d5      	b.n	801bbfc <_dtoa_r+0xa4>
 801c250:	f8cd a01c 	str.w	sl, [sp, #28]
 801c254:	462b      	mov	r3, r5
 801c256:	461d      	mov	r5, r3
 801c258:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c25c:	2a39      	cmp	r2, #57	; 0x39
 801c25e:	d108      	bne.n	801c272 <_dtoa_r+0x71a>
 801c260:	9a00      	ldr	r2, [sp, #0]
 801c262:	429a      	cmp	r2, r3
 801c264:	d1f7      	bne.n	801c256 <_dtoa_r+0x6fe>
 801c266:	9a07      	ldr	r2, [sp, #28]
 801c268:	9900      	ldr	r1, [sp, #0]
 801c26a:	3201      	adds	r2, #1
 801c26c:	9207      	str	r2, [sp, #28]
 801c26e:	2230      	movs	r2, #48	; 0x30
 801c270:	700a      	strb	r2, [r1, #0]
 801c272:	781a      	ldrb	r2, [r3, #0]
 801c274:	3201      	adds	r2, #1
 801c276:	701a      	strb	r2, [r3, #0]
 801c278:	e78c      	b.n	801c194 <_dtoa_r+0x63c>
 801c27a:	4b7f      	ldr	r3, [pc, #508]	; (801c478 <_dtoa_r+0x920>)
 801c27c:	2200      	movs	r2, #0
 801c27e:	f7e4 f9bb 	bl	80005f8 <__aeabi_dmul>
 801c282:	2200      	movs	r2, #0
 801c284:	2300      	movs	r3, #0
 801c286:	4606      	mov	r6, r0
 801c288:	460f      	mov	r7, r1
 801c28a:	f7e4 fc1d 	bl	8000ac8 <__aeabi_dcmpeq>
 801c28e:	2800      	cmp	r0, #0
 801c290:	d09b      	beq.n	801c1ca <_dtoa_r+0x672>
 801c292:	e7cd      	b.n	801c230 <_dtoa_r+0x6d8>
 801c294:	9a08      	ldr	r2, [sp, #32]
 801c296:	2a00      	cmp	r2, #0
 801c298:	f000 80c4 	beq.w	801c424 <_dtoa_r+0x8cc>
 801c29c:	9a05      	ldr	r2, [sp, #20]
 801c29e:	2a01      	cmp	r2, #1
 801c2a0:	f300 80a8 	bgt.w	801c3f4 <_dtoa_r+0x89c>
 801c2a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c2a6:	2a00      	cmp	r2, #0
 801c2a8:	f000 80a0 	beq.w	801c3ec <_dtoa_r+0x894>
 801c2ac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c2b0:	9e06      	ldr	r6, [sp, #24]
 801c2b2:	4645      	mov	r5, r8
 801c2b4:	9a04      	ldr	r2, [sp, #16]
 801c2b6:	2101      	movs	r1, #1
 801c2b8:	441a      	add	r2, r3
 801c2ba:	4620      	mov	r0, r4
 801c2bc:	4498      	add	r8, r3
 801c2be:	9204      	str	r2, [sp, #16]
 801c2c0:	f000 ff20 	bl	801d104 <__i2b>
 801c2c4:	4607      	mov	r7, r0
 801c2c6:	2d00      	cmp	r5, #0
 801c2c8:	dd0b      	ble.n	801c2e2 <_dtoa_r+0x78a>
 801c2ca:	9b04      	ldr	r3, [sp, #16]
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	dd08      	ble.n	801c2e2 <_dtoa_r+0x78a>
 801c2d0:	42ab      	cmp	r3, r5
 801c2d2:	9a04      	ldr	r2, [sp, #16]
 801c2d4:	bfa8      	it	ge
 801c2d6:	462b      	movge	r3, r5
 801c2d8:	eba8 0803 	sub.w	r8, r8, r3
 801c2dc:	1aed      	subs	r5, r5, r3
 801c2de:	1ad3      	subs	r3, r2, r3
 801c2e0:	9304      	str	r3, [sp, #16]
 801c2e2:	9b06      	ldr	r3, [sp, #24]
 801c2e4:	b1fb      	cbz	r3, 801c326 <_dtoa_r+0x7ce>
 801c2e6:	9b08      	ldr	r3, [sp, #32]
 801c2e8:	2b00      	cmp	r3, #0
 801c2ea:	f000 809f 	beq.w	801c42c <_dtoa_r+0x8d4>
 801c2ee:	2e00      	cmp	r6, #0
 801c2f0:	dd11      	ble.n	801c316 <_dtoa_r+0x7be>
 801c2f2:	4639      	mov	r1, r7
 801c2f4:	4632      	mov	r2, r6
 801c2f6:	4620      	mov	r0, r4
 801c2f8:	f000 ffc0 	bl	801d27c <__pow5mult>
 801c2fc:	465a      	mov	r2, fp
 801c2fe:	4601      	mov	r1, r0
 801c300:	4607      	mov	r7, r0
 801c302:	4620      	mov	r0, r4
 801c304:	f000 ff14 	bl	801d130 <__multiply>
 801c308:	4659      	mov	r1, fp
 801c30a:	9007      	str	r0, [sp, #28]
 801c30c:	4620      	mov	r0, r4
 801c30e:	f000 fdf3 	bl	801cef8 <_Bfree>
 801c312:	9b07      	ldr	r3, [sp, #28]
 801c314:	469b      	mov	fp, r3
 801c316:	9b06      	ldr	r3, [sp, #24]
 801c318:	1b9a      	subs	r2, r3, r6
 801c31a:	d004      	beq.n	801c326 <_dtoa_r+0x7ce>
 801c31c:	4659      	mov	r1, fp
 801c31e:	4620      	mov	r0, r4
 801c320:	f000 ffac 	bl	801d27c <__pow5mult>
 801c324:	4683      	mov	fp, r0
 801c326:	2101      	movs	r1, #1
 801c328:	4620      	mov	r0, r4
 801c32a:	f000 feeb 	bl	801d104 <__i2b>
 801c32e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c330:	2b00      	cmp	r3, #0
 801c332:	4606      	mov	r6, r0
 801c334:	dd7c      	ble.n	801c430 <_dtoa_r+0x8d8>
 801c336:	461a      	mov	r2, r3
 801c338:	4601      	mov	r1, r0
 801c33a:	4620      	mov	r0, r4
 801c33c:	f000 ff9e 	bl	801d27c <__pow5mult>
 801c340:	9b05      	ldr	r3, [sp, #20]
 801c342:	2b01      	cmp	r3, #1
 801c344:	4606      	mov	r6, r0
 801c346:	dd76      	ble.n	801c436 <_dtoa_r+0x8de>
 801c348:	2300      	movs	r3, #0
 801c34a:	9306      	str	r3, [sp, #24]
 801c34c:	6933      	ldr	r3, [r6, #16]
 801c34e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801c352:	6918      	ldr	r0, [r3, #16]
 801c354:	f000 fe86 	bl	801d064 <__hi0bits>
 801c358:	f1c0 0020 	rsb	r0, r0, #32
 801c35c:	9b04      	ldr	r3, [sp, #16]
 801c35e:	4418      	add	r0, r3
 801c360:	f010 001f 	ands.w	r0, r0, #31
 801c364:	f000 8086 	beq.w	801c474 <_dtoa_r+0x91c>
 801c368:	f1c0 0320 	rsb	r3, r0, #32
 801c36c:	2b04      	cmp	r3, #4
 801c36e:	dd7f      	ble.n	801c470 <_dtoa_r+0x918>
 801c370:	f1c0 001c 	rsb	r0, r0, #28
 801c374:	9b04      	ldr	r3, [sp, #16]
 801c376:	4403      	add	r3, r0
 801c378:	4480      	add	r8, r0
 801c37a:	4405      	add	r5, r0
 801c37c:	9304      	str	r3, [sp, #16]
 801c37e:	f1b8 0f00 	cmp.w	r8, #0
 801c382:	dd05      	ble.n	801c390 <_dtoa_r+0x838>
 801c384:	4659      	mov	r1, fp
 801c386:	4642      	mov	r2, r8
 801c388:	4620      	mov	r0, r4
 801c38a:	f000 ffd1 	bl	801d330 <__lshift>
 801c38e:	4683      	mov	fp, r0
 801c390:	9b04      	ldr	r3, [sp, #16]
 801c392:	2b00      	cmp	r3, #0
 801c394:	dd05      	ble.n	801c3a2 <_dtoa_r+0x84a>
 801c396:	4631      	mov	r1, r6
 801c398:	461a      	mov	r2, r3
 801c39a:	4620      	mov	r0, r4
 801c39c:	f000 ffc8 	bl	801d330 <__lshift>
 801c3a0:	4606      	mov	r6, r0
 801c3a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c3a4:	2b00      	cmp	r3, #0
 801c3a6:	d069      	beq.n	801c47c <_dtoa_r+0x924>
 801c3a8:	4631      	mov	r1, r6
 801c3aa:	4658      	mov	r0, fp
 801c3ac:	f001 f82c 	bl	801d408 <__mcmp>
 801c3b0:	2800      	cmp	r0, #0
 801c3b2:	da63      	bge.n	801c47c <_dtoa_r+0x924>
 801c3b4:	2300      	movs	r3, #0
 801c3b6:	4659      	mov	r1, fp
 801c3b8:	220a      	movs	r2, #10
 801c3ba:	4620      	mov	r0, r4
 801c3bc:	f000 fdbe 	bl	801cf3c <__multadd>
 801c3c0:	9b08      	ldr	r3, [sp, #32]
 801c3c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801c3c6:	4683      	mov	fp, r0
 801c3c8:	2b00      	cmp	r3, #0
 801c3ca:	f000 818f 	beq.w	801c6ec <_dtoa_r+0xb94>
 801c3ce:	4639      	mov	r1, r7
 801c3d0:	2300      	movs	r3, #0
 801c3d2:	220a      	movs	r2, #10
 801c3d4:	4620      	mov	r0, r4
 801c3d6:	f000 fdb1 	bl	801cf3c <__multadd>
 801c3da:	f1b9 0f00 	cmp.w	r9, #0
 801c3de:	4607      	mov	r7, r0
 801c3e0:	f300 808e 	bgt.w	801c500 <_dtoa_r+0x9a8>
 801c3e4:	9b05      	ldr	r3, [sp, #20]
 801c3e6:	2b02      	cmp	r3, #2
 801c3e8:	dc50      	bgt.n	801c48c <_dtoa_r+0x934>
 801c3ea:	e089      	b.n	801c500 <_dtoa_r+0x9a8>
 801c3ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c3ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801c3f2:	e75d      	b.n	801c2b0 <_dtoa_r+0x758>
 801c3f4:	9b01      	ldr	r3, [sp, #4]
 801c3f6:	1e5e      	subs	r6, r3, #1
 801c3f8:	9b06      	ldr	r3, [sp, #24]
 801c3fa:	42b3      	cmp	r3, r6
 801c3fc:	bfbf      	itttt	lt
 801c3fe:	9b06      	ldrlt	r3, [sp, #24]
 801c400:	9606      	strlt	r6, [sp, #24]
 801c402:	1af2      	sublt	r2, r6, r3
 801c404:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801c406:	bfb6      	itet	lt
 801c408:	189b      	addlt	r3, r3, r2
 801c40a:	1b9e      	subge	r6, r3, r6
 801c40c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801c40e:	9b01      	ldr	r3, [sp, #4]
 801c410:	bfb8      	it	lt
 801c412:	2600      	movlt	r6, #0
 801c414:	2b00      	cmp	r3, #0
 801c416:	bfb5      	itete	lt
 801c418:	eba8 0503 	sublt.w	r5, r8, r3
 801c41c:	9b01      	ldrge	r3, [sp, #4]
 801c41e:	2300      	movlt	r3, #0
 801c420:	4645      	movge	r5, r8
 801c422:	e747      	b.n	801c2b4 <_dtoa_r+0x75c>
 801c424:	9e06      	ldr	r6, [sp, #24]
 801c426:	9f08      	ldr	r7, [sp, #32]
 801c428:	4645      	mov	r5, r8
 801c42a:	e74c      	b.n	801c2c6 <_dtoa_r+0x76e>
 801c42c:	9a06      	ldr	r2, [sp, #24]
 801c42e:	e775      	b.n	801c31c <_dtoa_r+0x7c4>
 801c430:	9b05      	ldr	r3, [sp, #20]
 801c432:	2b01      	cmp	r3, #1
 801c434:	dc18      	bgt.n	801c468 <_dtoa_r+0x910>
 801c436:	9b02      	ldr	r3, [sp, #8]
 801c438:	b9b3      	cbnz	r3, 801c468 <_dtoa_r+0x910>
 801c43a:	9b03      	ldr	r3, [sp, #12]
 801c43c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c440:	b9a3      	cbnz	r3, 801c46c <_dtoa_r+0x914>
 801c442:	9b03      	ldr	r3, [sp, #12]
 801c444:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c448:	0d1b      	lsrs	r3, r3, #20
 801c44a:	051b      	lsls	r3, r3, #20
 801c44c:	b12b      	cbz	r3, 801c45a <_dtoa_r+0x902>
 801c44e:	9b04      	ldr	r3, [sp, #16]
 801c450:	3301      	adds	r3, #1
 801c452:	9304      	str	r3, [sp, #16]
 801c454:	f108 0801 	add.w	r8, r8, #1
 801c458:	2301      	movs	r3, #1
 801c45a:	9306      	str	r3, [sp, #24]
 801c45c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c45e:	2b00      	cmp	r3, #0
 801c460:	f47f af74 	bne.w	801c34c <_dtoa_r+0x7f4>
 801c464:	2001      	movs	r0, #1
 801c466:	e779      	b.n	801c35c <_dtoa_r+0x804>
 801c468:	2300      	movs	r3, #0
 801c46a:	e7f6      	b.n	801c45a <_dtoa_r+0x902>
 801c46c:	9b02      	ldr	r3, [sp, #8]
 801c46e:	e7f4      	b.n	801c45a <_dtoa_r+0x902>
 801c470:	d085      	beq.n	801c37e <_dtoa_r+0x826>
 801c472:	4618      	mov	r0, r3
 801c474:	301c      	adds	r0, #28
 801c476:	e77d      	b.n	801c374 <_dtoa_r+0x81c>
 801c478:	40240000 	.word	0x40240000
 801c47c:	9b01      	ldr	r3, [sp, #4]
 801c47e:	2b00      	cmp	r3, #0
 801c480:	dc38      	bgt.n	801c4f4 <_dtoa_r+0x99c>
 801c482:	9b05      	ldr	r3, [sp, #20]
 801c484:	2b02      	cmp	r3, #2
 801c486:	dd35      	ble.n	801c4f4 <_dtoa_r+0x99c>
 801c488:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801c48c:	f1b9 0f00 	cmp.w	r9, #0
 801c490:	d10d      	bne.n	801c4ae <_dtoa_r+0x956>
 801c492:	4631      	mov	r1, r6
 801c494:	464b      	mov	r3, r9
 801c496:	2205      	movs	r2, #5
 801c498:	4620      	mov	r0, r4
 801c49a:	f000 fd4f 	bl	801cf3c <__multadd>
 801c49e:	4601      	mov	r1, r0
 801c4a0:	4606      	mov	r6, r0
 801c4a2:	4658      	mov	r0, fp
 801c4a4:	f000 ffb0 	bl	801d408 <__mcmp>
 801c4a8:	2800      	cmp	r0, #0
 801c4aa:	f73f adbd 	bgt.w	801c028 <_dtoa_r+0x4d0>
 801c4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c4b0:	9d00      	ldr	r5, [sp, #0]
 801c4b2:	ea6f 0a03 	mvn.w	sl, r3
 801c4b6:	f04f 0800 	mov.w	r8, #0
 801c4ba:	4631      	mov	r1, r6
 801c4bc:	4620      	mov	r0, r4
 801c4be:	f000 fd1b 	bl	801cef8 <_Bfree>
 801c4c2:	2f00      	cmp	r7, #0
 801c4c4:	f43f aeb4 	beq.w	801c230 <_dtoa_r+0x6d8>
 801c4c8:	f1b8 0f00 	cmp.w	r8, #0
 801c4cc:	d005      	beq.n	801c4da <_dtoa_r+0x982>
 801c4ce:	45b8      	cmp	r8, r7
 801c4d0:	d003      	beq.n	801c4da <_dtoa_r+0x982>
 801c4d2:	4641      	mov	r1, r8
 801c4d4:	4620      	mov	r0, r4
 801c4d6:	f000 fd0f 	bl	801cef8 <_Bfree>
 801c4da:	4639      	mov	r1, r7
 801c4dc:	4620      	mov	r0, r4
 801c4de:	f000 fd0b 	bl	801cef8 <_Bfree>
 801c4e2:	e6a5      	b.n	801c230 <_dtoa_r+0x6d8>
 801c4e4:	2600      	movs	r6, #0
 801c4e6:	4637      	mov	r7, r6
 801c4e8:	e7e1      	b.n	801c4ae <_dtoa_r+0x956>
 801c4ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801c4ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801c4f0:	4637      	mov	r7, r6
 801c4f2:	e599      	b.n	801c028 <_dtoa_r+0x4d0>
 801c4f4:	9b08      	ldr	r3, [sp, #32]
 801c4f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801c4fa:	2b00      	cmp	r3, #0
 801c4fc:	f000 80fd 	beq.w	801c6fa <_dtoa_r+0xba2>
 801c500:	2d00      	cmp	r5, #0
 801c502:	dd05      	ble.n	801c510 <_dtoa_r+0x9b8>
 801c504:	4639      	mov	r1, r7
 801c506:	462a      	mov	r2, r5
 801c508:	4620      	mov	r0, r4
 801c50a:	f000 ff11 	bl	801d330 <__lshift>
 801c50e:	4607      	mov	r7, r0
 801c510:	9b06      	ldr	r3, [sp, #24]
 801c512:	2b00      	cmp	r3, #0
 801c514:	d05c      	beq.n	801c5d0 <_dtoa_r+0xa78>
 801c516:	6879      	ldr	r1, [r7, #4]
 801c518:	4620      	mov	r0, r4
 801c51a:	f000 fcad 	bl	801ce78 <_Balloc>
 801c51e:	4605      	mov	r5, r0
 801c520:	b928      	cbnz	r0, 801c52e <_dtoa_r+0x9d6>
 801c522:	4b80      	ldr	r3, [pc, #512]	; (801c724 <_dtoa_r+0xbcc>)
 801c524:	4602      	mov	r2, r0
 801c526:	f240 21ea 	movw	r1, #746	; 0x2ea
 801c52a:	f7ff bb2e 	b.w	801bb8a <_dtoa_r+0x32>
 801c52e:	693a      	ldr	r2, [r7, #16]
 801c530:	3202      	adds	r2, #2
 801c532:	0092      	lsls	r2, r2, #2
 801c534:	f107 010c 	add.w	r1, r7, #12
 801c538:	300c      	adds	r0, #12
 801c53a:	f7fd fb71 	bl	8019c20 <memcpy>
 801c53e:	2201      	movs	r2, #1
 801c540:	4629      	mov	r1, r5
 801c542:	4620      	mov	r0, r4
 801c544:	f000 fef4 	bl	801d330 <__lshift>
 801c548:	9b00      	ldr	r3, [sp, #0]
 801c54a:	3301      	adds	r3, #1
 801c54c:	9301      	str	r3, [sp, #4]
 801c54e:	9b00      	ldr	r3, [sp, #0]
 801c550:	444b      	add	r3, r9
 801c552:	9307      	str	r3, [sp, #28]
 801c554:	9b02      	ldr	r3, [sp, #8]
 801c556:	f003 0301 	and.w	r3, r3, #1
 801c55a:	46b8      	mov	r8, r7
 801c55c:	9306      	str	r3, [sp, #24]
 801c55e:	4607      	mov	r7, r0
 801c560:	9b01      	ldr	r3, [sp, #4]
 801c562:	4631      	mov	r1, r6
 801c564:	3b01      	subs	r3, #1
 801c566:	4658      	mov	r0, fp
 801c568:	9302      	str	r3, [sp, #8]
 801c56a:	f7ff fa69 	bl	801ba40 <quorem>
 801c56e:	4603      	mov	r3, r0
 801c570:	3330      	adds	r3, #48	; 0x30
 801c572:	9004      	str	r0, [sp, #16]
 801c574:	4641      	mov	r1, r8
 801c576:	4658      	mov	r0, fp
 801c578:	9308      	str	r3, [sp, #32]
 801c57a:	f000 ff45 	bl	801d408 <__mcmp>
 801c57e:	463a      	mov	r2, r7
 801c580:	4681      	mov	r9, r0
 801c582:	4631      	mov	r1, r6
 801c584:	4620      	mov	r0, r4
 801c586:	f000 ff5b 	bl	801d440 <__mdiff>
 801c58a:	68c2      	ldr	r2, [r0, #12]
 801c58c:	9b08      	ldr	r3, [sp, #32]
 801c58e:	4605      	mov	r5, r0
 801c590:	bb02      	cbnz	r2, 801c5d4 <_dtoa_r+0xa7c>
 801c592:	4601      	mov	r1, r0
 801c594:	4658      	mov	r0, fp
 801c596:	f000 ff37 	bl	801d408 <__mcmp>
 801c59a:	9b08      	ldr	r3, [sp, #32]
 801c59c:	4602      	mov	r2, r0
 801c59e:	4629      	mov	r1, r5
 801c5a0:	4620      	mov	r0, r4
 801c5a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801c5a6:	f000 fca7 	bl	801cef8 <_Bfree>
 801c5aa:	9b05      	ldr	r3, [sp, #20]
 801c5ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c5ae:	9d01      	ldr	r5, [sp, #4]
 801c5b0:	ea43 0102 	orr.w	r1, r3, r2
 801c5b4:	9b06      	ldr	r3, [sp, #24]
 801c5b6:	430b      	orrs	r3, r1
 801c5b8:	9b08      	ldr	r3, [sp, #32]
 801c5ba:	d10d      	bne.n	801c5d8 <_dtoa_r+0xa80>
 801c5bc:	2b39      	cmp	r3, #57	; 0x39
 801c5be:	d029      	beq.n	801c614 <_dtoa_r+0xabc>
 801c5c0:	f1b9 0f00 	cmp.w	r9, #0
 801c5c4:	dd01      	ble.n	801c5ca <_dtoa_r+0xa72>
 801c5c6:	9b04      	ldr	r3, [sp, #16]
 801c5c8:	3331      	adds	r3, #49	; 0x31
 801c5ca:	9a02      	ldr	r2, [sp, #8]
 801c5cc:	7013      	strb	r3, [r2, #0]
 801c5ce:	e774      	b.n	801c4ba <_dtoa_r+0x962>
 801c5d0:	4638      	mov	r0, r7
 801c5d2:	e7b9      	b.n	801c548 <_dtoa_r+0x9f0>
 801c5d4:	2201      	movs	r2, #1
 801c5d6:	e7e2      	b.n	801c59e <_dtoa_r+0xa46>
 801c5d8:	f1b9 0f00 	cmp.w	r9, #0
 801c5dc:	db06      	blt.n	801c5ec <_dtoa_r+0xa94>
 801c5de:	9905      	ldr	r1, [sp, #20]
 801c5e0:	ea41 0909 	orr.w	r9, r1, r9
 801c5e4:	9906      	ldr	r1, [sp, #24]
 801c5e6:	ea59 0101 	orrs.w	r1, r9, r1
 801c5ea:	d120      	bne.n	801c62e <_dtoa_r+0xad6>
 801c5ec:	2a00      	cmp	r2, #0
 801c5ee:	ddec      	ble.n	801c5ca <_dtoa_r+0xa72>
 801c5f0:	4659      	mov	r1, fp
 801c5f2:	2201      	movs	r2, #1
 801c5f4:	4620      	mov	r0, r4
 801c5f6:	9301      	str	r3, [sp, #4]
 801c5f8:	f000 fe9a 	bl	801d330 <__lshift>
 801c5fc:	4631      	mov	r1, r6
 801c5fe:	4683      	mov	fp, r0
 801c600:	f000 ff02 	bl	801d408 <__mcmp>
 801c604:	2800      	cmp	r0, #0
 801c606:	9b01      	ldr	r3, [sp, #4]
 801c608:	dc02      	bgt.n	801c610 <_dtoa_r+0xab8>
 801c60a:	d1de      	bne.n	801c5ca <_dtoa_r+0xa72>
 801c60c:	07da      	lsls	r2, r3, #31
 801c60e:	d5dc      	bpl.n	801c5ca <_dtoa_r+0xa72>
 801c610:	2b39      	cmp	r3, #57	; 0x39
 801c612:	d1d8      	bne.n	801c5c6 <_dtoa_r+0xa6e>
 801c614:	9a02      	ldr	r2, [sp, #8]
 801c616:	2339      	movs	r3, #57	; 0x39
 801c618:	7013      	strb	r3, [r2, #0]
 801c61a:	462b      	mov	r3, r5
 801c61c:	461d      	mov	r5, r3
 801c61e:	3b01      	subs	r3, #1
 801c620:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c624:	2a39      	cmp	r2, #57	; 0x39
 801c626:	d050      	beq.n	801c6ca <_dtoa_r+0xb72>
 801c628:	3201      	adds	r2, #1
 801c62a:	701a      	strb	r2, [r3, #0]
 801c62c:	e745      	b.n	801c4ba <_dtoa_r+0x962>
 801c62e:	2a00      	cmp	r2, #0
 801c630:	dd03      	ble.n	801c63a <_dtoa_r+0xae2>
 801c632:	2b39      	cmp	r3, #57	; 0x39
 801c634:	d0ee      	beq.n	801c614 <_dtoa_r+0xabc>
 801c636:	3301      	adds	r3, #1
 801c638:	e7c7      	b.n	801c5ca <_dtoa_r+0xa72>
 801c63a:	9a01      	ldr	r2, [sp, #4]
 801c63c:	9907      	ldr	r1, [sp, #28]
 801c63e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801c642:	428a      	cmp	r2, r1
 801c644:	d02a      	beq.n	801c69c <_dtoa_r+0xb44>
 801c646:	4659      	mov	r1, fp
 801c648:	2300      	movs	r3, #0
 801c64a:	220a      	movs	r2, #10
 801c64c:	4620      	mov	r0, r4
 801c64e:	f000 fc75 	bl	801cf3c <__multadd>
 801c652:	45b8      	cmp	r8, r7
 801c654:	4683      	mov	fp, r0
 801c656:	f04f 0300 	mov.w	r3, #0
 801c65a:	f04f 020a 	mov.w	r2, #10
 801c65e:	4641      	mov	r1, r8
 801c660:	4620      	mov	r0, r4
 801c662:	d107      	bne.n	801c674 <_dtoa_r+0xb1c>
 801c664:	f000 fc6a 	bl	801cf3c <__multadd>
 801c668:	4680      	mov	r8, r0
 801c66a:	4607      	mov	r7, r0
 801c66c:	9b01      	ldr	r3, [sp, #4]
 801c66e:	3301      	adds	r3, #1
 801c670:	9301      	str	r3, [sp, #4]
 801c672:	e775      	b.n	801c560 <_dtoa_r+0xa08>
 801c674:	f000 fc62 	bl	801cf3c <__multadd>
 801c678:	4639      	mov	r1, r7
 801c67a:	4680      	mov	r8, r0
 801c67c:	2300      	movs	r3, #0
 801c67e:	220a      	movs	r2, #10
 801c680:	4620      	mov	r0, r4
 801c682:	f000 fc5b 	bl	801cf3c <__multadd>
 801c686:	4607      	mov	r7, r0
 801c688:	e7f0      	b.n	801c66c <_dtoa_r+0xb14>
 801c68a:	f1b9 0f00 	cmp.w	r9, #0
 801c68e:	9a00      	ldr	r2, [sp, #0]
 801c690:	bfcc      	ite	gt
 801c692:	464d      	movgt	r5, r9
 801c694:	2501      	movle	r5, #1
 801c696:	4415      	add	r5, r2
 801c698:	f04f 0800 	mov.w	r8, #0
 801c69c:	4659      	mov	r1, fp
 801c69e:	2201      	movs	r2, #1
 801c6a0:	4620      	mov	r0, r4
 801c6a2:	9301      	str	r3, [sp, #4]
 801c6a4:	f000 fe44 	bl	801d330 <__lshift>
 801c6a8:	4631      	mov	r1, r6
 801c6aa:	4683      	mov	fp, r0
 801c6ac:	f000 feac 	bl	801d408 <__mcmp>
 801c6b0:	2800      	cmp	r0, #0
 801c6b2:	dcb2      	bgt.n	801c61a <_dtoa_r+0xac2>
 801c6b4:	d102      	bne.n	801c6bc <_dtoa_r+0xb64>
 801c6b6:	9b01      	ldr	r3, [sp, #4]
 801c6b8:	07db      	lsls	r3, r3, #31
 801c6ba:	d4ae      	bmi.n	801c61a <_dtoa_r+0xac2>
 801c6bc:	462b      	mov	r3, r5
 801c6be:	461d      	mov	r5, r3
 801c6c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c6c4:	2a30      	cmp	r2, #48	; 0x30
 801c6c6:	d0fa      	beq.n	801c6be <_dtoa_r+0xb66>
 801c6c8:	e6f7      	b.n	801c4ba <_dtoa_r+0x962>
 801c6ca:	9a00      	ldr	r2, [sp, #0]
 801c6cc:	429a      	cmp	r2, r3
 801c6ce:	d1a5      	bne.n	801c61c <_dtoa_r+0xac4>
 801c6d0:	f10a 0a01 	add.w	sl, sl, #1
 801c6d4:	2331      	movs	r3, #49	; 0x31
 801c6d6:	e779      	b.n	801c5cc <_dtoa_r+0xa74>
 801c6d8:	4b13      	ldr	r3, [pc, #76]	; (801c728 <_dtoa_r+0xbd0>)
 801c6da:	f7ff baaf 	b.w	801bc3c <_dtoa_r+0xe4>
 801c6de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c6e0:	2b00      	cmp	r3, #0
 801c6e2:	f47f aa86 	bne.w	801bbf2 <_dtoa_r+0x9a>
 801c6e6:	4b11      	ldr	r3, [pc, #68]	; (801c72c <_dtoa_r+0xbd4>)
 801c6e8:	f7ff baa8 	b.w	801bc3c <_dtoa_r+0xe4>
 801c6ec:	f1b9 0f00 	cmp.w	r9, #0
 801c6f0:	dc03      	bgt.n	801c6fa <_dtoa_r+0xba2>
 801c6f2:	9b05      	ldr	r3, [sp, #20]
 801c6f4:	2b02      	cmp	r3, #2
 801c6f6:	f73f aec9 	bgt.w	801c48c <_dtoa_r+0x934>
 801c6fa:	9d00      	ldr	r5, [sp, #0]
 801c6fc:	4631      	mov	r1, r6
 801c6fe:	4658      	mov	r0, fp
 801c700:	f7ff f99e 	bl	801ba40 <quorem>
 801c704:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801c708:	f805 3b01 	strb.w	r3, [r5], #1
 801c70c:	9a00      	ldr	r2, [sp, #0]
 801c70e:	1aaa      	subs	r2, r5, r2
 801c710:	4591      	cmp	r9, r2
 801c712:	ddba      	ble.n	801c68a <_dtoa_r+0xb32>
 801c714:	4659      	mov	r1, fp
 801c716:	2300      	movs	r3, #0
 801c718:	220a      	movs	r2, #10
 801c71a:	4620      	mov	r0, r4
 801c71c:	f000 fc0e 	bl	801cf3c <__multadd>
 801c720:	4683      	mov	fp, r0
 801c722:	e7eb      	b.n	801c6fc <_dtoa_r+0xba4>
 801c724:	080204d4 	.word	0x080204d4
 801c728:	080202d4 	.word	0x080202d4
 801c72c:	08020451 	.word	0x08020451

0801c730 <rshift>:
 801c730:	6903      	ldr	r3, [r0, #16]
 801c732:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c736:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c73a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c73e:	f100 0414 	add.w	r4, r0, #20
 801c742:	dd45      	ble.n	801c7d0 <rshift+0xa0>
 801c744:	f011 011f 	ands.w	r1, r1, #31
 801c748:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c74c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c750:	d10c      	bne.n	801c76c <rshift+0x3c>
 801c752:	f100 0710 	add.w	r7, r0, #16
 801c756:	4629      	mov	r1, r5
 801c758:	42b1      	cmp	r1, r6
 801c75a:	d334      	bcc.n	801c7c6 <rshift+0x96>
 801c75c:	1a9b      	subs	r3, r3, r2
 801c75e:	009b      	lsls	r3, r3, #2
 801c760:	1eea      	subs	r2, r5, #3
 801c762:	4296      	cmp	r6, r2
 801c764:	bf38      	it	cc
 801c766:	2300      	movcc	r3, #0
 801c768:	4423      	add	r3, r4
 801c76a:	e015      	b.n	801c798 <rshift+0x68>
 801c76c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c770:	f1c1 0820 	rsb	r8, r1, #32
 801c774:	40cf      	lsrs	r7, r1
 801c776:	f105 0e04 	add.w	lr, r5, #4
 801c77a:	46a1      	mov	r9, r4
 801c77c:	4576      	cmp	r6, lr
 801c77e:	46f4      	mov	ip, lr
 801c780:	d815      	bhi.n	801c7ae <rshift+0x7e>
 801c782:	1a9b      	subs	r3, r3, r2
 801c784:	009a      	lsls	r2, r3, #2
 801c786:	3a04      	subs	r2, #4
 801c788:	3501      	adds	r5, #1
 801c78a:	42ae      	cmp	r6, r5
 801c78c:	bf38      	it	cc
 801c78e:	2200      	movcc	r2, #0
 801c790:	18a3      	adds	r3, r4, r2
 801c792:	50a7      	str	r7, [r4, r2]
 801c794:	b107      	cbz	r7, 801c798 <rshift+0x68>
 801c796:	3304      	adds	r3, #4
 801c798:	1b1a      	subs	r2, r3, r4
 801c79a:	42a3      	cmp	r3, r4
 801c79c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c7a0:	bf08      	it	eq
 801c7a2:	2300      	moveq	r3, #0
 801c7a4:	6102      	str	r2, [r0, #16]
 801c7a6:	bf08      	it	eq
 801c7a8:	6143      	streq	r3, [r0, #20]
 801c7aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c7ae:	f8dc c000 	ldr.w	ip, [ip]
 801c7b2:	fa0c fc08 	lsl.w	ip, ip, r8
 801c7b6:	ea4c 0707 	orr.w	r7, ip, r7
 801c7ba:	f849 7b04 	str.w	r7, [r9], #4
 801c7be:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c7c2:	40cf      	lsrs	r7, r1
 801c7c4:	e7da      	b.n	801c77c <rshift+0x4c>
 801c7c6:	f851 cb04 	ldr.w	ip, [r1], #4
 801c7ca:	f847 cf04 	str.w	ip, [r7, #4]!
 801c7ce:	e7c3      	b.n	801c758 <rshift+0x28>
 801c7d0:	4623      	mov	r3, r4
 801c7d2:	e7e1      	b.n	801c798 <rshift+0x68>

0801c7d4 <__hexdig_fun>:
 801c7d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c7d8:	2b09      	cmp	r3, #9
 801c7da:	d802      	bhi.n	801c7e2 <__hexdig_fun+0xe>
 801c7dc:	3820      	subs	r0, #32
 801c7de:	b2c0      	uxtb	r0, r0
 801c7e0:	4770      	bx	lr
 801c7e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c7e6:	2b05      	cmp	r3, #5
 801c7e8:	d801      	bhi.n	801c7ee <__hexdig_fun+0x1a>
 801c7ea:	3847      	subs	r0, #71	; 0x47
 801c7ec:	e7f7      	b.n	801c7de <__hexdig_fun+0xa>
 801c7ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c7f2:	2b05      	cmp	r3, #5
 801c7f4:	d801      	bhi.n	801c7fa <__hexdig_fun+0x26>
 801c7f6:	3827      	subs	r0, #39	; 0x27
 801c7f8:	e7f1      	b.n	801c7de <__hexdig_fun+0xa>
 801c7fa:	2000      	movs	r0, #0
 801c7fc:	4770      	bx	lr
	...

0801c800 <__gethex>:
 801c800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c804:	ed2d 8b02 	vpush	{d8}
 801c808:	b089      	sub	sp, #36	; 0x24
 801c80a:	ee08 0a10 	vmov	s16, r0
 801c80e:	9304      	str	r3, [sp, #16]
 801c810:	4bbc      	ldr	r3, [pc, #752]	; (801cb04 <__gethex+0x304>)
 801c812:	681b      	ldr	r3, [r3, #0]
 801c814:	9301      	str	r3, [sp, #4]
 801c816:	4618      	mov	r0, r3
 801c818:	468b      	mov	fp, r1
 801c81a:	4690      	mov	r8, r2
 801c81c:	f7e3 fcd8 	bl	80001d0 <strlen>
 801c820:	9b01      	ldr	r3, [sp, #4]
 801c822:	f8db 2000 	ldr.w	r2, [fp]
 801c826:	4403      	add	r3, r0
 801c828:	4682      	mov	sl, r0
 801c82a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801c82e:	9305      	str	r3, [sp, #20]
 801c830:	1c93      	adds	r3, r2, #2
 801c832:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801c836:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801c83a:	32fe      	adds	r2, #254	; 0xfe
 801c83c:	18d1      	adds	r1, r2, r3
 801c83e:	461f      	mov	r7, r3
 801c840:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c844:	9100      	str	r1, [sp, #0]
 801c846:	2830      	cmp	r0, #48	; 0x30
 801c848:	d0f8      	beq.n	801c83c <__gethex+0x3c>
 801c84a:	f7ff ffc3 	bl	801c7d4 <__hexdig_fun>
 801c84e:	4604      	mov	r4, r0
 801c850:	2800      	cmp	r0, #0
 801c852:	d13a      	bne.n	801c8ca <__gethex+0xca>
 801c854:	9901      	ldr	r1, [sp, #4]
 801c856:	4652      	mov	r2, sl
 801c858:	4638      	mov	r0, r7
 801c85a:	f001 f982 	bl	801db62 <strncmp>
 801c85e:	4605      	mov	r5, r0
 801c860:	2800      	cmp	r0, #0
 801c862:	d168      	bne.n	801c936 <__gethex+0x136>
 801c864:	f817 000a 	ldrb.w	r0, [r7, sl]
 801c868:	eb07 060a 	add.w	r6, r7, sl
 801c86c:	f7ff ffb2 	bl	801c7d4 <__hexdig_fun>
 801c870:	2800      	cmp	r0, #0
 801c872:	d062      	beq.n	801c93a <__gethex+0x13a>
 801c874:	4633      	mov	r3, r6
 801c876:	7818      	ldrb	r0, [r3, #0]
 801c878:	2830      	cmp	r0, #48	; 0x30
 801c87a:	461f      	mov	r7, r3
 801c87c:	f103 0301 	add.w	r3, r3, #1
 801c880:	d0f9      	beq.n	801c876 <__gethex+0x76>
 801c882:	f7ff ffa7 	bl	801c7d4 <__hexdig_fun>
 801c886:	2301      	movs	r3, #1
 801c888:	fab0 f480 	clz	r4, r0
 801c88c:	0964      	lsrs	r4, r4, #5
 801c88e:	4635      	mov	r5, r6
 801c890:	9300      	str	r3, [sp, #0]
 801c892:	463a      	mov	r2, r7
 801c894:	4616      	mov	r6, r2
 801c896:	3201      	adds	r2, #1
 801c898:	7830      	ldrb	r0, [r6, #0]
 801c89a:	f7ff ff9b 	bl	801c7d4 <__hexdig_fun>
 801c89e:	2800      	cmp	r0, #0
 801c8a0:	d1f8      	bne.n	801c894 <__gethex+0x94>
 801c8a2:	9901      	ldr	r1, [sp, #4]
 801c8a4:	4652      	mov	r2, sl
 801c8a6:	4630      	mov	r0, r6
 801c8a8:	f001 f95b 	bl	801db62 <strncmp>
 801c8ac:	b980      	cbnz	r0, 801c8d0 <__gethex+0xd0>
 801c8ae:	b94d      	cbnz	r5, 801c8c4 <__gethex+0xc4>
 801c8b0:	eb06 050a 	add.w	r5, r6, sl
 801c8b4:	462a      	mov	r2, r5
 801c8b6:	4616      	mov	r6, r2
 801c8b8:	3201      	adds	r2, #1
 801c8ba:	7830      	ldrb	r0, [r6, #0]
 801c8bc:	f7ff ff8a 	bl	801c7d4 <__hexdig_fun>
 801c8c0:	2800      	cmp	r0, #0
 801c8c2:	d1f8      	bne.n	801c8b6 <__gethex+0xb6>
 801c8c4:	1bad      	subs	r5, r5, r6
 801c8c6:	00ad      	lsls	r5, r5, #2
 801c8c8:	e004      	b.n	801c8d4 <__gethex+0xd4>
 801c8ca:	2400      	movs	r4, #0
 801c8cc:	4625      	mov	r5, r4
 801c8ce:	e7e0      	b.n	801c892 <__gethex+0x92>
 801c8d0:	2d00      	cmp	r5, #0
 801c8d2:	d1f7      	bne.n	801c8c4 <__gethex+0xc4>
 801c8d4:	7833      	ldrb	r3, [r6, #0]
 801c8d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c8da:	2b50      	cmp	r3, #80	; 0x50
 801c8dc:	d13b      	bne.n	801c956 <__gethex+0x156>
 801c8de:	7873      	ldrb	r3, [r6, #1]
 801c8e0:	2b2b      	cmp	r3, #43	; 0x2b
 801c8e2:	d02c      	beq.n	801c93e <__gethex+0x13e>
 801c8e4:	2b2d      	cmp	r3, #45	; 0x2d
 801c8e6:	d02e      	beq.n	801c946 <__gethex+0x146>
 801c8e8:	1c71      	adds	r1, r6, #1
 801c8ea:	f04f 0900 	mov.w	r9, #0
 801c8ee:	7808      	ldrb	r0, [r1, #0]
 801c8f0:	f7ff ff70 	bl	801c7d4 <__hexdig_fun>
 801c8f4:	1e43      	subs	r3, r0, #1
 801c8f6:	b2db      	uxtb	r3, r3
 801c8f8:	2b18      	cmp	r3, #24
 801c8fa:	d82c      	bhi.n	801c956 <__gethex+0x156>
 801c8fc:	f1a0 0210 	sub.w	r2, r0, #16
 801c900:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c904:	f7ff ff66 	bl	801c7d4 <__hexdig_fun>
 801c908:	1e43      	subs	r3, r0, #1
 801c90a:	b2db      	uxtb	r3, r3
 801c90c:	2b18      	cmp	r3, #24
 801c90e:	d91d      	bls.n	801c94c <__gethex+0x14c>
 801c910:	f1b9 0f00 	cmp.w	r9, #0
 801c914:	d000      	beq.n	801c918 <__gethex+0x118>
 801c916:	4252      	negs	r2, r2
 801c918:	4415      	add	r5, r2
 801c91a:	f8cb 1000 	str.w	r1, [fp]
 801c91e:	b1e4      	cbz	r4, 801c95a <__gethex+0x15a>
 801c920:	9b00      	ldr	r3, [sp, #0]
 801c922:	2b00      	cmp	r3, #0
 801c924:	bf14      	ite	ne
 801c926:	2700      	movne	r7, #0
 801c928:	2706      	moveq	r7, #6
 801c92a:	4638      	mov	r0, r7
 801c92c:	b009      	add	sp, #36	; 0x24
 801c92e:	ecbd 8b02 	vpop	{d8}
 801c932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c936:	463e      	mov	r6, r7
 801c938:	4625      	mov	r5, r4
 801c93a:	2401      	movs	r4, #1
 801c93c:	e7ca      	b.n	801c8d4 <__gethex+0xd4>
 801c93e:	f04f 0900 	mov.w	r9, #0
 801c942:	1cb1      	adds	r1, r6, #2
 801c944:	e7d3      	b.n	801c8ee <__gethex+0xee>
 801c946:	f04f 0901 	mov.w	r9, #1
 801c94a:	e7fa      	b.n	801c942 <__gethex+0x142>
 801c94c:	230a      	movs	r3, #10
 801c94e:	fb03 0202 	mla	r2, r3, r2, r0
 801c952:	3a10      	subs	r2, #16
 801c954:	e7d4      	b.n	801c900 <__gethex+0x100>
 801c956:	4631      	mov	r1, r6
 801c958:	e7df      	b.n	801c91a <__gethex+0x11a>
 801c95a:	1bf3      	subs	r3, r6, r7
 801c95c:	3b01      	subs	r3, #1
 801c95e:	4621      	mov	r1, r4
 801c960:	2b07      	cmp	r3, #7
 801c962:	dc0b      	bgt.n	801c97c <__gethex+0x17c>
 801c964:	ee18 0a10 	vmov	r0, s16
 801c968:	f000 fa86 	bl	801ce78 <_Balloc>
 801c96c:	4604      	mov	r4, r0
 801c96e:	b940      	cbnz	r0, 801c982 <__gethex+0x182>
 801c970:	4b65      	ldr	r3, [pc, #404]	; (801cb08 <__gethex+0x308>)
 801c972:	4602      	mov	r2, r0
 801c974:	21de      	movs	r1, #222	; 0xde
 801c976:	4865      	ldr	r0, [pc, #404]	; (801cb0c <__gethex+0x30c>)
 801c978:	f001 f912 	bl	801dba0 <__assert_func>
 801c97c:	3101      	adds	r1, #1
 801c97e:	105b      	asrs	r3, r3, #1
 801c980:	e7ee      	b.n	801c960 <__gethex+0x160>
 801c982:	f100 0914 	add.w	r9, r0, #20
 801c986:	f04f 0b00 	mov.w	fp, #0
 801c98a:	f1ca 0301 	rsb	r3, sl, #1
 801c98e:	f8cd 9008 	str.w	r9, [sp, #8]
 801c992:	f8cd b000 	str.w	fp, [sp]
 801c996:	9306      	str	r3, [sp, #24]
 801c998:	42b7      	cmp	r7, r6
 801c99a:	d340      	bcc.n	801ca1e <__gethex+0x21e>
 801c99c:	9802      	ldr	r0, [sp, #8]
 801c99e:	9b00      	ldr	r3, [sp, #0]
 801c9a0:	f840 3b04 	str.w	r3, [r0], #4
 801c9a4:	eba0 0009 	sub.w	r0, r0, r9
 801c9a8:	1080      	asrs	r0, r0, #2
 801c9aa:	0146      	lsls	r6, r0, #5
 801c9ac:	6120      	str	r0, [r4, #16]
 801c9ae:	4618      	mov	r0, r3
 801c9b0:	f000 fb58 	bl	801d064 <__hi0bits>
 801c9b4:	1a30      	subs	r0, r6, r0
 801c9b6:	f8d8 6000 	ldr.w	r6, [r8]
 801c9ba:	42b0      	cmp	r0, r6
 801c9bc:	dd63      	ble.n	801ca86 <__gethex+0x286>
 801c9be:	1b87      	subs	r7, r0, r6
 801c9c0:	4639      	mov	r1, r7
 801c9c2:	4620      	mov	r0, r4
 801c9c4:	f000 fef2 	bl	801d7ac <__any_on>
 801c9c8:	4682      	mov	sl, r0
 801c9ca:	b1a8      	cbz	r0, 801c9f8 <__gethex+0x1f8>
 801c9cc:	1e7b      	subs	r3, r7, #1
 801c9ce:	1159      	asrs	r1, r3, #5
 801c9d0:	f003 021f 	and.w	r2, r3, #31
 801c9d4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801c9d8:	f04f 0a01 	mov.w	sl, #1
 801c9dc:	fa0a f202 	lsl.w	r2, sl, r2
 801c9e0:	420a      	tst	r2, r1
 801c9e2:	d009      	beq.n	801c9f8 <__gethex+0x1f8>
 801c9e4:	4553      	cmp	r3, sl
 801c9e6:	dd05      	ble.n	801c9f4 <__gethex+0x1f4>
 801c9e8:	1eb9      	subs	r1, r7, #2
 801c9ea:	4620      	mov	r0, r4
 801c9ec:	f000 fede 	bl	801d7ac <__any_on>
 801c9f0:	2800      	cmp	r0, #0
 801c9f2:	d145      	bne.n	801ca80 <__gethex+0x280>
 801c9f4:	f04f 0a02 	mov.w	sl, #2
 801c9f8:	4639      	mov	r1, r7
 801c9fa:	4620      	mov	r0, r4
 801c9fc:	f7ff fe98 	bl	801c730 <rshift>
 801ca00:	443d      	add	r5, r7
 801ca02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ca06:	42ab      	cmp	r3, r5
 801ca08:	da4c      	bge.n	801caa4 <__gethex+0x2a4>
 801ca0a:	ee18 0a10 	vmov	r0, s16
 801ca0e:	4621      	mov	r1, r4
 801ca10:	f000 fa72 	bl	801cef8 <_Bfree>
 801ca14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ca16:	2300      	movs	r3, #0
 801ca18:	6013      	str	r3, [r2, #0]
 801ca1a:	27a3      	movs	r7, #163	; 0xa3
 801ca1c:	e785      	b.n	801c92a <__gethex+0x12a>
 801ca1e:	1e73      	subs	r3, r6, #1
 801ca20:	9a05      	ldr	r2, [sp, #20]
 801ca22:	9303      	str	r3, [sp, #12]
 801ca24:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801ca28:	4293      	cmp	r3, r2
 801ca2a:	d019      	beq.n	801ca60 <__gethex+0x260>
 801ca2c:	f1bb 0f20 	cmp.w	fp, #32
 801ca30:	d107      	bne.n	801ca42 <__gethex+0x242>
 801ca32:	9b02      	ldr	r3, [sp, #8]
 801ca34:	9a00      	ldr	r2, [sp, #0]
 801ca36:	f843 2b04 	str.w	r2, [r3], #4
 801ca3a:	9302      	str	r3, [sp, #8]
 801ca3c:	2300      	movs	r3, #0
 801ca3e:	9300      	str	r3, [sp, #0]
 801ca40:	469b      	mov	fp, r3
 801ca42:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801ca46:	f7ff fec5 	bl	801c7d4 <__hexdig_fun>
 801ca4a:	9b00      	ldr	r3, [sp, #0]
 801ca4c:	f000 000f 	and.w	r0, r0, #15
 801ca50:	fa00 f00b 	lsl.w	r0, r0, fp
 801ca54:	4303      	orrs	r3, r0
 801ca56:	9300      	str	r3, [sp, #0]
 801ca58:	f10b 0b04 	add.w	fp, fp, #4
 801ca5c:	9b03      	ldr	r3, [sp, #12]
 801ca5e:	e00d      	b.n	801ca7c <__gethex+0x27c>
 801ca60:	9b03      	ldr	r3, [sp, #12]
 801ca62:	9a06      	ldr	r2, [sp, #24]
 801ca64:	4413      	add	r3, r2
 801ca66:	42bb      	cmp	r3, r7
 801ca68:	d3e0      	bcc.n	801ca2c <__gethex+0x22c>
 801ca6a:	4618      	mov	r0, r3
 801ca6c:	9901      	ldr	r1, [sp, #4]
 801ca6e:	9307      	str	r3, [sp, #28]
 801ca70:	4652      	mov	r2, sl
 801ca72:	f001 f876 	bl	801db62 <strncmp>
 801ca76:	9b07      	ldr	r3, [sp, #28]
 801ca78:	2800      	cmp	r0, #0
 801ca7a:	d1d7      	bne.n	801ca2c <__gethex+0x22c>
 801ca7c:	461e      	mov	r6, r3
 801ca7e:	e78b      	b.n	801c998 <__gethex+0x198>
 801ca80:	f04f 0a03 	mov.w	sl, #3
 801ca84:	e7b8      	b.n	801c9f8 <__gethex+0x1f8>
 801ca86:	da0a      	bge.n	801ca9e <__gethex+0x29e>
 801ca88:	1a37      	subs	r7, r6, r0
 801ca8a:	4621      	mov	r1, r4
 801ca8c:	ee18 0a10 	vmov	r0, s16
 801ca90:	463a      	mov	r2, r7
 801ca92:	f000 fc4d 	bl	801d330 <__lshift>
 801ca96:	1bed      	subs	r5, r5, r7
 801ca98:	4604      	mov	r4, r0
 801ca9a:	f100 0914 	add.w	r9, r0, #20
 801ca9e:	f04f 0a00 	mov.w	sl, #0
 801caa2:	e7ae      	b.n	801ca02 <__gethex+0x202>
 801caa4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801caa8:	42a8      	cmp	r0, r5
 801caaa:	dd72      	ble.n	801cb92 <__gethex+0x392>
 801caac:	1b45      	subs	r5, r0, r5
 801caae:	42ae      	cmp	r6, r5
 801cab0:	dc36      	bgt.n	801cb20 <__gethex+0x320>
 801cab2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801cab6:	2b02      	cmp	r3, #2
 801cab8:	d02a      	beq.n	801cb10 <__gethex+0x310>
 801caba:	2b03      	cmp	r3, #3
 801cabc:	d02c      	beq.n	801cb18 <__gethex+0x318>
 801cabe:	2b01      	cmp	r3, #1
 801cac0:	d115      	bne.n	801caee <__gethex+0x2ee>
 801cac2:	42ae      	cmp	r6, r5
 801cac4:	d113      	bne.n	801caee <__gethex+0x2ee>
 801cac6:	2e01      	cmp	r6, #1
 801cac8:	d10b      	bne.n	801cae2 <__gethex+0x2e2>
 801caca:	9a04      	ldr	r2, [sp, #16]
 801cacc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801cad0:	6013      	str	r3, [r2, #0]
 801cad2:	2301      	movs	r3, #1
 801cad4:	6123      	str	r3, [r4, #16]
 801cad6:	f8c9 3000 	str.w	r3, [r9]
 801cada:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cadc:	2762      	movs	r7, #98	; 0x62
 801cade:	601c      	str	r4, [r3, #0]
 801cae0:	e723      	b.n	801c92a <__gethex+0x12a>
 801cae2:	1e71      	subs	r1, r6, #1
 801cae4:	4620      	mov	r0, r4
 801cae6:	f000 fe61 	bl	801d7ac <__any_on>
 801caea:	2800      	cmp	r0, #0
 801caec:	d1ed      	bne.n	801caca <__gethex+0x2ca>
 801caee:	ee18 0a10 	vmov	r0, s16
 801caf2:	4621      	mov	r1, r4
 801caf4:	f000 fa00 	bl	801cef8 <_Bfree>
 801caf8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cafa:	2300      	movs	r3, #0
 801cafc:	6013      	str	r3, [r2, #0]
 801cafe:	2750      	movs	r7, #80	; 0x50
 801cb00:	e713      	b.n	801c92a <__gethex+0x12a>
 801cb02:	bf00      	nop
 801cb04:	08020550 	.word	0x08020550
 801cb08:	080204d4 	.word	0x080204d4
 801cb0c:	080204e5 	.word	0x080204e5
 801cb10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cb12:	2b00      	cmp	r3, #0
 801cb14:	d1eb      	bne.n	801caee <__gethex+0x2ee>
 801cb16:	e7d8      	b.n	801caca <__gethex+0x2ca>
 801cb18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cb1a:	2b00      	cmp	r3, #0
 801cb1c:	d1d5      	bne.n	801caca <__gethex+0x2ca>
 801cb1e:	e7e6      	b.n	801caee <__gethex+0x2ee>
 801cb20:	1e6f      	subs	r7, r5, #1
 801cb22:	f1ba 0f00 	cmp.w	sl, #0
 801cb26:	d131      	bne.n	801cb8c <__gethex+0x38c>
 801cb28:	b127      	cbz	r7, 801cb34 <__gethex+0x334>
 801cb2a:	4639      	mov	r1, r7
 801cb2c:	4620      	mov	r0, r4
 801cb2e:	f000 fe3d 	bl	801d7ac <__any_on>
 801cb32:	4682      	mov	sl, r0
 801cb34:	117b      	asrs	r3, r7, #5
 801cb36:	2101      	movs	r1, #1
 801cb38:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801cb3c:	f007 071f 	and.w	r7, r7, #31
 801cb40:	fa01 f707 	lsl.w	r7, r1, r7
 801cb44:	421f      	tst	r7, r3
 801cb46:	4629      	mov	r1, r5
 801cb48:	4620      	mov	r0, r4
 801cb4a:	bf18      	it	ne
 801cb4c:	f04a 0a02 	orrne.w	sl, sl, #2
 801cb50:	1b76      	subs	r6, r6, r5
 801cb52:	f7ff fded 	bl	801c730 <rshift>
 801cb56:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801cb5a:	2702      	movs	r7, #2
 801cb5c:	f1ba 0f00 	cmp.w	sl, #0
 801cb60:	d048      	beq.n	801cbf4 <__gethex+0x3f4>
 801cb62:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801cb66:	2b02      	cmp	r3, #2
 801cb68:	d015      	beq.n	801cb96 <__gethex+0x396>
 801cb6a:	2b03      	cmp	r3, #3
 801cb6c:	d017      	beq.n	801cb9e <__gethex+0x39e>
 801cb6e:	2b01      	cmp	r3, #1
 801cb70:	d109      	bne.n	801cb86 <__gethex+0x386>
 801cb72:	f01a 0f02 	tst.w	sl, #2
 801cb76:	d006      	beq.n	801cb86 <__gethex+0x386>
 801cb78:	f8d9 0000 	ldr.w	r0, [r9]
 801cb7c:	ea4a 0a00 	orr.w	sl, sl, r0
 801cb80:	f01a 0f01 	tst.w	sl, #1
 801cb84:	d10e      	bne.n	801cba4 <__gethex+0x3a4>
 801cb86:	f047 0710 	orr.w	r7, r7, #16
 801cb8a:	e033      	b.n	801cbf4 <__gethex+0x3f4>
 801cb8c:	f04f 0a01 	mov.w	sl, #1
 801cb90:	e7d0      	b.n	801cb34 <__gethex+0x334>
 801cb92:	2701      	movs	r7, #1
 801cb94:	e7e2      	b.n	801cb5c <__gethex+0x35c>
 801cb96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cb98:	f1c3 0301 	rsb	r3, r3, #1
 801cb9c:	9315      	str	r3, [sp, #84]	; 0x54
 801cb9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	d0f0      	beq.n	801cb86 <__gethex+0x386>
 801cba4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801cba8:	f104 0314 	add.w	r3, r4, #20
 801cbac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801cbb0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801cbb4:	f04f 0c00 	mov.w	ip, #0
 801cbb8:	4618      	mov	r0, r3
 801cbba:	f853 2b04 	ldr.w	r2, [r3], #4
 801cbbe:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801cbc2:	d01c      	beq.n	801cbfe <__gethex+0x3fe>
 801cbc4:	3201      	adds	r2, #1
 801cbc6:	6002      	str	r2, [r0, #0]
 801cbc8:	2f02      	cmp	r7, #2
 801cbca:	f104 0314 	add.w	r3, r4, #20
 801cbce:	d13f      	bne.n	801cc50 <__gethex+0x450>
 801cbd0:	f8d8 2000 	ldr.w	r2, [r8]
 801cbd4:	3a01      	subs	r2, #1
 801cbd6:	42b2      	cmp	r2, r6
 801cbd8:	d10a      	bne.n	801cbf0 <__gethex+0x3f0>
 801cbda:	1171      	asrs	r1, r6, #5
 801cbdc:	2201      	movs	r2, #1
 801cbde:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801cbe2:	f006 061f 	and.w	r6, r6, #31
 801cbe6:	fa02 f606 	lsl.w	r6, r2, r6
 801cbea:	421e      	tst	r6, r3
 801cbec:	bf18      	it	ne
 801cbee:	4617      	movne	r7, r2
 801cbf0:	f047 0720 	orr.w	r7, r7, #32
 801cbf4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cbf6:	601c      	str	r4, [r3, #0]
 801cbf8:	9b04      	ldr	r3, [sp, #16]
 801cbfa:	601d      	str	r5, [r3, #0]
 801cbfc:	e695      	b.n	801c92a <__gethex+0x12a>
 801cbfe:	4299      	cmp	r1, r3
 801cc00:	f843 cc04 	str.w	ip, [r3, #-4]
 801cc04:	d8d8      	bhi.n	801cbb8 <__gethex+0x3b8>
 801cc06:	68a3      	ldr	r3, [r4, #8]
 801cc08:	459b      	cmp	fp, r3
 801cc0a:	db19      	blt.n	801cc40 <__gethex+0x440>
 801cc0c:	6861      	ldr	r1, [r4, #4]
 801cc0e:	ee18 0a10 	vmov	r0, s16
 801cc12:	3101      	adds	r1, #1
 801cc14:	f000 f930 	bl	801ce78 <_Balloc>
 801cc18:	4681      	mov	r9, r0
 801cc1a:	b918      	cbnz	r0, 801cc24 <__gethex+0x424>
 801cc1c:	4b1a      	ldr	r3, [pc, #104]	; (801cc88 <__gethex+0x488>)
 801cc1e:	4602      	mov	r2, r0
 801cc20:	2184      	movs	r1, #132	; 0x84
 801cc22:	e6a8      	b.n	801c976 <__gethex+0x176>
 801cc24:	6922      	ldr	r2, [r4, #16]
 801cc26:	3202      	adds	r2, #2
 801cc28:	f104 010c 	add.w	r1, r4, #12
 801cc2c:	0092      	lsls	r2, r2, #2
 801cc2e:	300c      	adds	r0, #12
 801cc30:	f7fc fff6 	bl	8019c20 <memcpy>
 801cc34:	4621      	mov	r1, r4
 801cc36:	ee18 0a10 	vmov	r0, s16
 801cc3a:	f000 f95d 	bl	801cef8 <_Bfree>
 801cc3e:	464c      	mov	r4, r9
 801cc40:	6923      	ldr	r3, [r4, #16]
 801cc42:	1c5a      	adds	r2, r3, #1
 801cc44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801cc48:	6122      	str	r2, [r4, #16]
 801cc4a:	2201      	movs	r2, #1
 801cc4c:	615a      	str	r2, [r3, #20]
 801cc4e:	e7bb      	b.n	801cbc8 <__gethex+0x3c8>
 801cc50:	6922      	ldr	r2, [r4, #16]
 801cc52:	455a      	cmp	r2, fp
 801cc54:	dd0b      	ble.n	801cc6e <__gethex+0x46e>
 801cc56:	2101      	movs	r1, #1
 801cc58:	4620      	mov	r0, r4
 801cc5a:	f7ff fd69 	bl	801c730 <rshift>
 801cc5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801cc62:	3501      	adds	r5, #1
 801cc64:	42ab      	cmp	r3, r5
 801cc66:	f6ff aed0 	blt.w	801ca0a <__gethex+0x20a>
 801cc6a:	2701      	movs	r7, #1
 801cc6c:	e7c0      	b.n	801cbf0 <__gethex+0x3f0>
 801cc6e:	f016 061f 	ands.w	r6, r6, #31
 801cc72:	d0fa      	beq.n	801cc6a <__gethex+0x46a>
 801cc74:	449a      	add	sl, r3
 801cc76:	f1c6 0620 	rsb	r6, r6, #32
 801cc7a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801cc7e:	f000 f9f1 	bl	801d064 <__hi0bits>
 801cc82:	42b0      	cmp	r0, r6
 801cc84:	dbe7      	blt.n	801cc56 <__gethex+0x456>
 801cc86:	e7f0      	b.n	801cc6a <__gethex+0x46a>
 801cc88:	080204d4 	.word	0x080204d4

0801cc8c <L_shift>:
 801cc8c:	f1c2 0208 	rsb	r2, r2, #8
 801cc90:	0092      	lsls	r2, r2, #2
 801cc92:	b570      	push	{r4, r5, r6, lr}
 801cc94:	f1c2 0620 	rsb	r6, r2, #32
 801cc98:	6843      	ldr	r3, [r0, #4]
 801cc9a:	6804      	ldr	r4, [r0, #0]
 801cc9c:	fa03 f506 	lsl.w	r5, r3, r6
 801cca0:	432c      	orrs	r4, r5
 801cca2:	40d3      	lsrs	r3, r2
 801cca4:	6004      	str	r4, [r0, #0]
 801cca6:	f840 3f04 	str.w	r3, [r0, #4]!
 801ccaa:	4288      	cmp	r0, r1
 801ccac:	d3f4      	bcc.n	801cc98 <L_shift+0xc>
 801ccae:	bd70      	pop	{r4, r5, r6, pc}

0801ccb0 <__match>:
 801ccb0:	b530      	push	{r4, r5, lr}
 801ccb2:	6803      	ldr	r3, [r0, #0]
 801ccb4:	3301      	adds	r3, #1
 801ccb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ccba:	b914      	cbnz	r4, 801ccc2 <__match+0x12>
 801ccbc:	6003      	str	r3, [r0, #0]
 801ccbe:	2001      	movs	r0, #1
 801ccc0:	bd30      	pop	{r4, r5, pc}
 801ccc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ccc6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801ccca:	2d19      	cmp	r5, #25
 801cccc:	bf98      	it	ls
 801ccce:	3220      	addls	r2, #32
 801ccd0:	42a2      	cmp	r2, r4
 801ccd2:	d0f0      	beq.n	801ccb6 <__match+0x6>
 801ccd4:	2000      	movs	r0, #0
 801ccd6:	e7f3      	b.n	801ccc0 <__match+0x10>

0801ccd8 <__hexnan>:
 801ccd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccdc:	680b      	ldr	r3, [r1, #0]
 801ccde:	6801      	ldr	r1, [r0, #0]
 801cce0:	115e      	asrs	r6, r3, #5
 801cce2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801cce6:	f013 031f 	ands.w	r3, r3, #31
 801ccea:	b087      	sub	sp, #28
 801ccec:	bf18      	it	ne
 801ccee:	3604      	addne	r6, #4
 801ccf0:	2500      	movs	r5, #0
 801ccf2:	1f37      	subs	r7, r6, #4
 801ccf4:	4682      	mov	sl, r0
 801ccf6:	4690      	mov	r8, r2
 801ccf8:	9301      	str	r3, [sp, #4]
 801ccfa:	f846 5c04 	str.w	r5, [r6, #-4]
 801ccfe:	46b9      	mov	r9, r7
 801cd00:	463c      	mov	r4, r7
 801cd02:	9502      	str	r5, [sp, #8]
 801cd04:	46ab      	mov	fp, r5
 801cd06:	784a      	ldrb	r2, [r1, #1]
 801cd08:	1c4b      	adds	r3, r1, #1
 801cd0a:	9303      	str	r3, [sp, #12]
 801cd0c:	b342      	cbz	r2, 801cd60 <__hexnan+0x88>
 801cd0e:	4610      	mov	r0, r2
 801cd10:	9105      	str	r1, [sp, #20]
 801cd12:	9204      	str	r2, [sp, #16]
 801cd14:	f7ff fd5e 	bl	801c7d4 <__hexdig_fun>
 801cd18:	2800      	cmp	r0, #0
 801cd1a:	d14f      	bne.n	801cdbc <__hexnan+0xe4>
 801cd1c:	9a04      	ldr	r2, [sp, #16]
 801cd1e:	9905      	ldr	r1, [sp, #20]
 801cd20:	2a20      	cmp	r2, #32
 801cd22:	d818      	bhi.n	801cd56 <__hexnan+0x7e>
 801cd24:	9b02      	ldr	r3, [sp, #8]
 801cd26:	459b      	cmp	fp, r3
 801cd28:	dd13      	ble.n	801cd52 <__hexnan+0x7a>
 801cd2a:	454c      	cmp	r4, r9
 801cd2c:	d206      	bcs.n	801cd3c <__hexnan+0x64>
 801cd2e:	2d07      	cmp	r5, #7
 801cd30:	dc04      	bgt.n	801cd3c <__hexnan+0x64>
 801cd32:	462a      	mov	r2, r5
 801cd34:	4649      	mov	r1, r9
 801cd36:	4620      	mov	r0, r4
 801cd38:	f7ff ffa8 	bl	801cc8c <L_shift>
 801cd3c:	4544      	cmp	r4, r8
 801cd3e:	d950      	bls.n	801cde2 <__hexnan+0x10a>
 801cd40:	2300      	movs	r3, #0
 801cd42:	f1a4 0904 	sub.w	r9, r4, #4
 801cd46:	f844 3c04 	str.w	r3, [r4, #-4]
 801cd4a:	f8cd b008 	str.w	fp, [sp, #8]
 801cd4e:	464c      	mov	r4, r9
 801cd50:	461d      	mov	r5, r3
 801cd52:	9903      	ldr	r1, [sp, #12]
 801cd54:	e7d7      	b.n	801cd06 <__hexnan+0x2e>
 801cd56:	2a29      	cmp	r2, #41	; 0x29
 801cd58:	d156      	bne.n	801ce08 <__hexnan+0x130>
 801cd5a:	3102      	adds	r1, #2
 801cd5c:	f8ca 1000 	str.w	r1, [sl]
 801cd60:	f1bb 0f00 	cmp.w	fp, #0
 801cd64:	d050      	beq.n	801ce08 <__hexnan+0x130>
 801cd66:	454c      	cmp	r4, r9
 801cd68:	d206      	bcs.n	801cd78 <__hexnan+0xa0>
 801cd6a:	2d07      	cmp	r5, #7
 801cd6c:	dc04      	bgt.n	801cd78 <__hexnan+0xa0>
 801cd6e:	462a      	mov	r2, r5
 801cd70:	4649      	mov	r1, r9
 801cd72:	4620      	mov	r0, r4
 801cd74:	f7ff ff8a 	bl	801cc8c <L_shift>
 801cd78:	4544      	cmp	r4, r8
 801cd7a:	d934      	bls.n	801cde6 <__hexnan+0x10e>
 801cd7c:	f1a8 0204 	sub.w	r2, r8, #4
 801cd80:	4623      	mov	r3, r4
 801cd82:	f853 1b04 	ldr.w	r1, [r3], #4
 801cd86:	f842 1f04 	str.w	r1, [r2, #4]!
 801cd8a:	429f      	cmp	r7, r3
 801cd8c:	d2f9      	bcs.n	801cd82 <__hexnan+0xaa>
 801cd8e:	1b3b      	subs	r3, r7, r4
 801cd90:	f023 0303 	bic.w	r3, r3, #3
 801cd94:	3304      	adds	r3, #4
 801cd96:	3401      	adds	r4, #1
 801cd98:	3e03      	subs	r6, #3
 801cd9a:	42b4      	cmp	r4, r6
 801cd9c:	bf88      	it	hi
 801cd9e:	2304      	movhi	r3, #4
 801cda0:	4443      	add	r3, r8
 801cda2:	2200      	movs	r2, #0
 801cda4:	f843 2b04 	str.w	r2, [r3], #4
 801cda8:	429f      	cmp	r7, r3
 801cdaa:	d2fb      	bcs.n	801cda4 <__hexnan+0xcc>
 801cdac:	683b      	ldr	r3, [r7, #0]
 801cdae:	b91b      	cbnz	r3, 801cdb8 <__hexnan+0xe0>
 801cdb0:	4547      	cmp	r7, r8
 801cdb2:	d127      	bne.n	801ce04 <__hexnan+0x12c>
 801cdb4:	2301      	movs	r3, #1
 801cdb6:	603b      	str	r3, [r7, #0]
 801cdb8:	2005      	movs	r0, #5
 801cdba:	e026      	b.n	801ce0a <__hexnan+0x132>
 801cdbc:	3501      	adds	r5, #1
 801cdbe:	2d08      	cmp	r5, #8
 801cdc0:	f10b 0b01 	add.w	fp, fp, #1
 801cdc4:	dd06      	ble.n	801cdd4 <__hexnan+0xfc>
 801cdc6:	4544      	cmp	r4, r8
 801cdc8:	d9c3      	bls.n	801cd52 <__hexnan+0x7a>
 801cdca:	2300      	movs	r3, #0
 801cdcc:	f844 3c04 	str.w	r3, [r4, #-4]
 801cdd0:	2501      	movs	r5, #1
 801cdd2:	3c04      	subs	r4, #4
 801cdd4:	6822      	ldr	r2, [r4, #0]
 801cdd6:	f000 000f 	and.w	r0, r0, #15
 801cdda:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801cdde:	6022      	str	r2, [r4, #0]
 801cde0:	e7b7      	b.n	801cd52 <__hexnan+0x7a>
 801cde2:	2508      	movs	r5, #8
 801cde4:	e7b5      	b.n	801cd52 <__hexnan+0x7a>
 801cde6:	9b01      	ldr	r3, [sp, #4]
 801cde8:	2b00      	cmp	r3, #0
 801cdea:	d0df      	beq.n	801cdac <__hexnan+0xd4>
 801cdec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cdf0:	f1c3 0320 	rsb	r3, r3, #32
 801cdf4:	fa22 f303 	lsr.w	r3, r2, r3
 801cdf8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801cdfc:	401a      	ands	r2, r3
 801cdfe:	f846 2c04 	str.w	r2, [r6, #-4]
 801ce02:	e7d3      	b.n	801cdac <__hexnan+0xd4>
 801ce04:	3f04      	subs	r7, #4
 801ce06:	e7d1      	b.n	801cdac <__hexnan+0xd4>
 801ce08:	2004      	movs	r0, #4
 801ce0a:	b007      	add	sp, #28
 801ce0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ce10 <_localeconv_r>:
 801ce10:	4800      	ldr	r0, [pc, #0]	; (801ce14 <_localeconv_r+0x4>)
 801ce12:	4770      	bx	lr
 801ce14:	2000021c 	.word	0x2000021c

0801ce18 <_lseek_r>:
 801ce18:	b538      	push	{r3, r4, r5, lr}
 801ce1a:	4d07      	ldr	r5, [pc, #28]	; (801ce38 <_lseek_r+0x20>)
 801ce1c:	4604      	mov	r4, r0
 801ce1e:	4608      	mov	r0, r1
 801ce20:	4611      	mov	r1, r2
 801ce22:	2200      	movs	r2, #0
 801ce24:	602a      	str	r2, [r5, #0]
 801ce26:	461a      	mov	r2, r3
 801ce28:	f7f0 f88c 	bl	800cf44 <_lseek>
 801ce2c:	1c43      	adds	r3, r0, #1
 801ce2e:	d102      	bne.n	801ce36 <_lseek_r+0x1e>
 801ce30:	682b      	ldr	r3, [r5, #0]
 801ce32:	b103      	cbz	r3, 801ce36 <_lseek_r+0x1e>
 801ce34:	6023      	str	r3, [r4, #0]
 801ce36:	bd38      	pop	{r3, r4, r5, pc}
 801ce38:	2000a6d4 	.word	0x2000a6d4

0801ce3c <__ascii_mbtowc>:
 801ce3c:	b082      	sub	sp, #8
 801ce3e:	b901      	cbnz	r1, 801ce42 <__ascii_mbtowc+0x6>
 801ce40:	a901      	add	r1, sp, #4
 801ce42:	b142      	cbz	r2, 801ce56 <__ascii_mbtowc+0x1a>
 801ce44:	b14b      	cbz	r3, 801ce5a <__ascii_mbtowc+0x1e>
 801ce46:	7813      	ldrb	r3, [r2, #0]
 801ce48:	600b      	str	r3, [r1, #0]
 801ce4a:	7812      	ldrb	r2, [r2, #0]
 801ce4c:	1e10      	subs	r0, r2, #0
 801ce4e:	bf18      	it	ne
 801ce50:	2001      	movne	r0, #1
 801ce52:	b002      	add	sp, #8
 801ce54:	4770      	bx	lr
 801ce56:	4610      	mov	r0, r2
 801ce58:	e7fb      	b.n	801ce52 <__ascii_mbtowc+0x16>
 801ce5a:	f06f 0001 	mvn.w	r0, #1
 801ce5e:	e7f8      	b.n	801ce52 <__ascii_mbtowc+0x16>

0801ce60 <__malloc_lock>:
 801ce60:	4801      	ldr	r0, [pc, #4]	; (801ce68 <__malloc_lock+0x8>)
 801ce62:	f001 b885 	b.w	801df70 <__retarget_lock_acquire_recursive>
 801ce66:	bf00      	nop
 801ce68:	2000a6dc 	.word	0x2000a6dc

0801ce6c <__malloc_unlock>:
 801ce6c:	4801      	ldr	r0, [pc, #4]	; (801ce74 <__malloc_unlock+0x8>)
 801ce6e:	f001 b880 	b.w	801df72 <__retarget_lock_release_recursive>
 801ce72:	bf00      	nop
 801ce74:	2000a6dc 	.word	0x2000a6dc

0801ce78 <_Balloc>:
 801ce78:	b570      	push	{r4, r5, r6, lr}
 801ce7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801ce7c:	4604      	mov	r4, r0
 801ce7e:	460d      	mov	r5, r1
 801ce80:	b976      	cbnz	r6, 801cea0 <_Balloc+0x28>
 801ce82:	2010      	movs	r0, #16
 801ce84:	f7fc fec4 	bl	8019c10 <malloc>
 801ce88:	4602      	mov	r2, r0
 801ce8a:	6260      	str	r0, [r4, #36]	; 0x24
 801ce8c:	b920      	cbnz	r0, 801ce98 <_Balloc+0x20>
 801ce8e:	4b18      	ldr	r3, [pc, #96]	; (801cef0 <_Balloc+0x78>)
 801ce90:	4818      	ldr	r0, [pc, #96]	; (801cef4 <_Balloc+0x7c>)
 801ce92:	2166      	movs	r1, #102	; 0x66
 801ce94:	f000 fe84 	bl	801dba0 <__assert_func>
 801ce98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ce9c:	6006      	str	r6, [r0, #0]
 801ce9e:	60c6      	str	r6, [r0, #12]
 801cea0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801cea2:	68f3      	ldr	r3, [r6, #12]
 801cea4:	b183      	cbz	r3, 801cec8 <_Balloc+0x50>
 801cea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cea8:	68db      	ldr	r3, [r3, #12]
 801ceaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ceae:	b9b8      	cbnz	r0, 801cee0 <_Balloc+0x68>
 801ceb0:	2101      	movs	r1, #1
 801ceb2:	fa01 f605 	lsl.w	r6, r1, r5
 801ceb6:	1d72      	adds	r2, r6, #5
 801ceb8:	0092      	lsls	r2, r2, #2
 801ceba:	4620      	mov	r0, r4
 801cebc:	f000 fc97 	bl	801d7ee <_calloc_r>
 801cec0:	b160      	cbz	r0, 801cedc <_Balloc+0x64>
 801cec2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801cec6:	e00e      	b.n	801cee6 <_Balloc+0x6e>
 801cec8:	2221      	movs	r2, #33	; 0x21
 801ceca:	2104      	movs	r1, #4
 801cecc:	4620      	mov	r0, r4
 801cece:	f000 fc8e 	bl	801d7ee <_calloc_r>
 801ced2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ced4:	60f0      	str	r0, [r6, #12]
 801ced6:	68db      	ldr	r3, [r3, #12]
 801ced8:	2b00      	cmp	r3, #0
 801ceda:	d1e4      	bne.n	801cea6 <_Balloc+0x2e>
 801cedc:	2000      	movs	r0, #0
 801cede:	bd70      	pop	{r4, r5, r6, pc}
 801cee0:	6802      	ldr	r2, [r0, #0]
 801cee2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cee6:	2300      	movs	r3, #0
 801cee8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ceec:	e7f7      	b.n	801cede <_Balloc+0x66>
 801ceee:	bf00      	nop
 801cef0:	0802045e 	.word	0x0802045e
 801cef4:	08020564 	.word	0x08020564

0801cef8 <_Bfree>:
 801cef8:	b570      	push	{r4, r5, r6, lr}
 801cefa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801cefc:	4605      	mov	r5, r0
 801cefe:	460c      	mov	r4, r1
 801cf00:	b976      	cbnz	r6, 801cf20 <_Bfree+0x28>
 801cf02:	2010      	movs	r0, #16
 801cf04:	f7fc fe84 	bl	8019c10 <malloc>
 801cf08:	4602      	mov	r2, r0
 801cf0a:	6268      	str	r0, [r5, #36]	; 0x24
 801cf0c:	b920      	cbnz	r0, 801cf18 <_Bfree+0x20>
 801cf0e:	4b09      	ldr	r3, [pc, #36]	; (801cf34 <_Bfree+0x3c>)
 801cf10:	4809      	ldr	r0, [pc, #36]	; (801cf38 <_Bfree+0x40>)
 801cf12:	218a      	movs	r1, #138	; 0x8a
 801cf14:	f000 fe44 	bl	801dba0 <__assert_func>
 801cf18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cf1c:	6006      	str	r6, [r0, #0]
 801cf1e:	60c6      	str	r6, [r0, #12]
 801cf20:	b13c      	cbz	r4, 801cf32 <_Bfree+0x3a>
 801cf22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801cf24:	6862      	ldr	r2, [r4, #4]
 801cf26:	68db      	ldr	r3, [r3, #12]
 801cf28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cf2c:	6021      	str	r1, [r4, #0]
 801cf2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801cf32:	bd70      	pop	{r4, r5, r6, pc}
 801cf34:	0802045e 	.word	0x0802045e
 801cf38:	08020564 	.word	0x08020564

0801cf3c <__multadd>:
 801cf3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf40:	690e      	ldr	r6, [r1, #16]
 801cf42:	4607      	mov	r7, r0
 801cf44:	4698      	mov	r8, r3
 801cf46:	460c      	mov	r4, r1
 801cf48:	f101 0014 	add.w	r0, r1, #20
 801cf4c:	2300      	movs	r3, #0
 801cf4e:	6805      	ldr	r5, [r0, #0]
 801cf50:	b2a9      	uxth	r1, r5
 801cf52:	fb02 8101 	mla	r1, r2, r1, r8
 801cf56:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801cf5a:	0c2d      	lsrs	r5, r5, #16
 801cf5c:	fb02 c505 	mla	r5, r2, r5, ip
 801cf60:	b289      	uxth	r1, r1
 801cf62:	3301      	adds	r3, #1
 801cf64:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801cf68:	429e      	cmp	r6, r3
 801cf6a:	f840 1b04 	str.w	r1, [r0], #4
 801cf6e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801cf72:	dcec      	bgt.n	801cf4e <__multadd+0x12>
 801cf74:	f1b8 0f00 	cmp.w	r8, #0
 801cf78:	d022      	beq.n	801cfc0 <__multadd+0x84>
 801cf7a:	68a3      	ldr	r3, [r4, #8]
 801cf7c:	42b3      	cmp	r3, r6
 801cf7e:	dc19      	bgt.n	801cfb4 <__multadd+0x78>
 801cf80:	6861      	ldr	r1, [r4, #4]
 801cf82:	4638      	mov	r0, r7
 801cf84:	3101      	adds	r1, #1
 801cf86:	f7ff ff77 	bl	801ce78 <_Balloc>
 801cf8a:	4605      	mov	r5, r0
 801cf8c:	b928      	cbnz	r0, 801cf9a <__multadd+0x5e>
 801cf8e:	4602      	mov	r2, r0
 801cf90:	4b0d      	ldr	r3, [pc, #52]	; (801cfc8 <__multadd+0x8c>)
 801cf92:	480e      	ldr	r0, [pc, #56]	; (801cfcc <__multadd+0x90>)
 801cf94:	21b5      	movs	r1, #181	; 0xb5
 801cf96:	f000 fe03 	bl	801dba0 <__assert_func>
 801cf9a:	6922      	ldr	r2, [r4, #16]
 801cf9c:	3202      	adds	r2, #2
 801cf9e:	f104 010c 	add.w	r1, r4, #12
 801cfa2:	0092      	lsls	r2, r2, #2
 801cfa4:	300c      	adds	r0, #12
 801cfa6:	f7fc fe3b 	bl	8019c20 <memcpy>
 801cfaa:	4621      	mov	r1, r4
 801cfac:	4638      	mov	r0, r7
 801cfae:	f7ff ffa3 	bl	801cef8 <_Bfree>
 801cfb2:	462c      	mov	r4, r5
 801cfb4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801cfb8:	3601      	adds	r6, #1
 801cfba:	f8c3 8014 	str.w	r8, [r3, #20]
 801cfbe:	6126      	str	r6, [r4, #16]
 801cfc0:	4620      	mov	r0, r4
 801cfc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cfc6:	bf00      	nop
 801cfc8:	080204d4 	.word	0x080204d4
 801cfcc:	08020564 	.word	0x08020564

0801cfd0 <__s2b>:
 801cfd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cfd4:	460c      	mov	r4, r1
 801cfd6:	4615      	mov	r5, r2
 801cfd8:	461f      	mov	r7, r3
 801cfda:	2209      	movs	r2, #9
 801cfdc:	3308      	adds	r3, #8
 801cfde:	4606      	mov	r6, r0
 801cfe0:	fb93 f3f2 	sdiv	r3, r3, r2
 801cfe4:	2100      	movs	r1, #0
 801cfe6:	2201      	movs	r2, #1
 801cfe8:	429a      	cmp	r2, r3
 801cfea:	db09      	blt.n	801d000 <__s2b+0x30>
 801cfec:	4630      	mov	r0, r6
 801cfee:	f7ff ff43 	bl	801ce78 <_Balloc>
 801cff2:	b940      	cbnz	r0, 801d006 <__s2b+0x36>
 801cff4:	4602      	mov	r2, r0
 801cff6:	4b19      	ldr	r3, [pc, #100]	; (801d05c <__s2b+0x8c>)
 801cff8:	4819      	ldr	r0, [pc, #100]	; (801d060 <__s2b+0x90>)
 801cffa:	21ce      	movs	r1, #206	; 0xce
 801cffc:	f000 fdd0 	bl	801dba0 <__assert_func>
 801d000:	0052      	lsls	r2, r2, #1
 801d002:	3101      	adds	r1, #1
 801d004:	e7f0      	b.n	801cfe8 <__s2b+0x18>
 801d006:	9b08      	ldr	r3, [sp, #32]
 801d008:	6143      	str	r3, [r0, #20]
 801d00a:	2d09      	cmp	r5, #9
 801d00c:	f04f 0301 	mov.w	r3, #1
 801d010:	6103      	str	r3, [r0, #16]
 801d012:	dd16      	ble.n	801d042 <__s2b+0x72>
 801d014:	f104 0909 	add.w	r9, r4, #9
 801d018:	46c8      	mov	r8, r9
 801d01a:	442c      	add	r4, r5
 801d01c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801d020:	4601      	mov	r1, r0
 801d022:	3b30      	subs	r3, #48	; 0x30
 801d024:	220a      	movs	r2, #10
 801d026:	4630      	mov	r0, r6
 801d028:	f7ff ff88 	bl	801cf3c <__multadd>
 801d02c:	45a0      	cmp	r8, r4
 801d02e:	d1f5      	bne.n	801d01c <__s2b+0x4c>
 801d030:	f1a5 0408 	sub.w	r4, r5, #8
 801d034:	444c      	add	r4, r9
 801d036:	1b2d      	subs	r5, r5, r4
 801d038:	1963      	adds	r3, r4, r5
 801d03a:	42bb      	cmp	r3, r7
 801d03c:	db04      	blt.n	801d048 <__s2b+0x78>
 801d03e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d042:	340a      	adds	r4, #10
 801d044:	2509      	movs	r5, #9
 801d046:	e7f6      	b.n	801d036 <__s2b+0x66>
 801d048:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d04c:	4601      	mov	r1, r0
 801d04e:	3b30      	subs	r3, #48	; 0x30
 801d050:	220a      	movs	r2, #10
 801d052:	4630      	mov	r0, r6
 801d054:	f7ff ff72 	bl	801cf3c <__multadd>
 801d058:	e7ee      	b.n	801d038 <__s2b+0x68>
 801d05a:	bf00      	nop
 801d05c:	080204d4 	.word	0x080204d4
 801d060:	08020564 	.word	0x08020564

0801d064 <__hi0bits>:
 801d064:	0c03      	lsrs	r3, r0, #16
 801d066:	041b      	lsls	r3, r3, #16
 801d068:	b9d3      	cbnz	r3, 801d0a0 <__hi0bits+0x3c>
 801d06a:	0400      	lsls	r0, r0, #16
 801d06c:	2310      	movs	r3, #16
 801d06e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801d072:	bf04      	itt	eq
 801d074:	0200      	lsleq	r0, r0, #8
 801d076:	3308      	addeq	r3, #8
 801d078:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d07c:	bf04      	itt	eq
 801d07e:	0100      	lsleq	r0, r0, #4
 801d080:	3304      	addeq	r3, #4
 801d082:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d086:	bf04      	itt	eq
 801d088:	0080      	lsleq	r0, r0, #2
 801d08a:	3302      	addeq	r3, #2
 801d08c:	2800      	cmp	r0, #0
 801d08e:	db05      	blt.n	801d09c <__hi0bits+0x38>
 801d090:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801d094:	f103 0301 	add.w	r3, r3, #1
 801d098:	bf08      	it	eq
 801d09a:	2320      	moveq	r3, #32
 801d09c:	4618      	mov	r0, r3
 801d09e:	4770      	bx	lr
 801d0a0:	2300      	movs	r3, #0
 801d0a2:	e7e4      	b.n	801d06e <__hi0bits+0xa>

0801d0a4 <__lo0bits>:
 801d0a4:	6803      	ldr	r3, [r0, #0]
 801d0a6:	f013 0207 	ands.w	r2, r3, #7
 801d0aa:	4601      	mov	r1, r0
 801d0ac:	d00b      	beq.n	801d0c6 <__lo0bits+0x22>
 801d0ae:	07da      	lsls	r2, r3, #31
 801d0b0:	d424      	bmi.n	801d0fc <__lo0bits+0x58>
 801d0b2:	0798      	lsls	r0, r3, #30
 801d0b4:	bf49      	itett	mi
 801d0b6:	085b      	lsrmi	r3, r3, #1
 801d0b8:	089b      	lsrpl	r3, r3, #2
 801d0ba:	2001      	movmi	r0, #1
 801d0bc:	600b      	strmi	r3, [r1, #0]
 801d0be:	bf5c      	itt	pl
 801d0c0:	600b      	strpl	r3, [r1, #0]
 801d0c2:	2002      	movpl	r0, #2
 801d0c4:	4770      	bx	lr
 801d0c6:	b298      	uxth	r0, r3
 801d0c8:	b9b0      	cbnz	r0, 801d0f8 <__lo0bits+0x54>
 801d0ca:	0c1b      	lsrs	r3, r3, #16
 801d0cc:	2010      	movs	r0, #16
 801d0ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 801d0d2:	bf04      	itt	eq
 801d0d4:	0a1b      	lsreq	r3, r3, #8
 801d0d6:	3008      	addeq	r0, #8
 801d0d8:	071a      	lsls	r2, r3, #28
 801d0da:	bf04      	itt	eq
 801d0dc:	091b      	lsreq	r3, r3, #4
 801d0de:	3004      	addeq	r0, #4
 801d0e0:	079a      	lsls	r2, r3, #30
 801d0e2:	bf04      	itt	eq
 801d0e4:	089b      	lsreq	r3, r3, #2
 801d0e6:	3002      	addeq	r0, #2
 801d0e8:	07da      	lsls	r2, r3, #31
 801d0ea:	d403      	bmi.n	801d0f4 <__lo0bits+0x50>
 801d0ec:	085b      	lsrs	r3, r3, #1
 801d0ee:	f100 0001 	add.w	r0, r0, #1
 801d0f2:	d005      	beq.n	801d100 <__lo0bits+0x5c>
 801d0f4:	600b      	str	r3, [r1, #0]
 801d0f6:	4770      	bx	lr
 801d0f8:	4610      	mov	r0, r2
 801d0fa:	e7e8      	b.n	801d0ce <__lo0bits+0x2a>
 801d0fc:	2000      	movs	r0, #0
 801d0fe:	4770      	bx	lr
 801d100:	2020      	movs	r0, #32
 801d102:	4770      	bx	lr

0801d104 <__i2b>:
 801d104:	b510      	push	{r4, lr}
 801d106:	460c      	mov	r4, r1
 801d108:	2101      	movs	r1, #1
 801d10a:	f7ff feb5 	bl	801ce78 <_Balloc>
 801d10e:	4602      	mov	r2, r0
 801d110:	b928      	cbnz	r0, 801d11e <__i2b+0x1a>
 801d112:	4b05      	ldr	r3, [pc, #20]	; (801d128 <__i2b+0x24>)
 801d114:	4805      	ldr	r0, [pc, #20]	; (801d12c <__i2b+0x28>)
 801d116:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801d11a:	f000 fd41 	bl	801dba0 <__assert_func>
 801d11e:	2301      	movs	r3, #1
 801d120:	6144      	str	r4, [r0, #20]
 801d122:	6103      	str	r3, [r0, #16]
 801d124:	bd10      	pop	{r4, pc}
 801d126:	bf00      	nop
 801d128:	080204d4 	.word	0x080204d4
 801d12c:	08020564 	.word	0x08020564

0801d130 <__multiply>:
 801d130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d134:	4614      	mov	r4, r2
 801d136:	690a      	ldr	r2, [r1, #16]
 801d138:	6923      	ldr	r3, [r4, #16]
 801d13a:	429a      	cmp	r2, r3
 801d13c:	bfb8      	it	lt
 801d13e:	460b      	movlt	r3, r1
 801d140:	460d      	mov	r5, r1
 801d142:	bfbc      	itt	lt
 801d144:	4625      	movlt	r5, r4
 801d146:	461c      	movlt	r4, r3
 801d148:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801d14c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801d150:	68ab      	ldr	r3, [r5, #8]
 801d152:	6869      	ldr	r1, [r5, #4]
 801d154:	eb0a 0709 	add.w	r7, sl, r9
 801d158:	42bb      	cmp	r3, r7
 801d15a:	b085      	sub	sp, #20
 801d15c:	bfb8      	it	lt
 801d15e:	3101      	addlt	r1, #1
 801d160:	f7ff fe8a 	bl	801ce78 <_Balloc>
 801d164:	b930      	cbnz	r0, 801d174 <__multiply+0x44>
 801d166:	4602      	mov	r2, r0
 801d168:	4b42      	ldr	r3, [pc, #264]	; (801d274 <__multiply+0x144>)
 801d16a:	4843      	ldr	r0, [pc, #268]	; (801d278 <__multiply+0x148>)
 801d16c:	f240 115d 	movw	r1, #349	; 0x15d
 801d170:	f000 fd16 	bl	801dba0 <__assert_func>
 801d174:	f100 0614 	add.w	r6, r0, #20
 801d178:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801d17c:	4633      	mov	r3, r6
 801d17e:	2200      	movs	r2, #0
 801d180:	4543      	cmp	r3, r8
 801d182:	d31e      	bcc.n	801d1c2 <__multiply+0x92>
 801d184:	f105 0c14 	add.w	ip, r5, #20
 801d188:	f104 0314 	add.w	r3, r4, #20
 801d18c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801d190:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801d194:	9202      	str	r2, [sp, #8]
 801d196:	ebac 0205 	sub.w	r2, ip, r5
 801d19a:	3a15      	subs	r2, #21
 801d19c:	f022 0203 	bic.w	r2, r2, #3
 801d1a0:	3204      	adds	r2, #4
 801d1a2:	f105 0115 	add.w	r1, r5, #21
 801d1a6:	458c      	cmp	ip, r1
 801d1a8:	bf38      	it	cc
 801d1aa:	2204      	movcc	r2, #4
 801d1ac:	9201      	str	r2, [sp, #4]
 801d1ae:	9a02      	ldr	r2, [sp, #8]
 801d1b0:	9303      	str	r3, [sp, #12]
 801d1b2:	429a      	cmp	r2, r3
 801d1b4:	d808      	bhi.n	801d1c8 <__multiply+0x98>
 801d1b6:	2f00      	cmp	r7, #0
 801d1b8:	dc55      	bgt.n	801d266 <__multiply+0x136>
 801d1ba:	6107      	str	r7, [r0, #16]
 801d1bc:	b005      	add	sp, #20
 801d1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1c2:	f843 2b04 	str.w	r2, [r3], #4
 801d1c6:	e7db      	b.n	801d180 <__multiply+0x50>
 801d1c8:	f8b3 a000 	ldrh.w	sl, [r3]
 801d1cc:	f1ba 0f00 	cmp.w	sl, #0
 801d1d0:	d020      	beq.n	801d214 <__multiply+0xe4>
 801d1d2:	f105 0e14 	add.w	lr, r5, #20
 801d1d6:	46b1      	mov	r9, r6
 801d1d8:	2200      	movs	r2, #0
 801d1da:	f85e 4b04 	ldr.w	r4, [lr], #4
 801d1de:	f8d9 b000 	ldr.w	fp, [r9]
 801d1e2:	b2a1      	uxth	r1, r4
 801d1e4:	fa1f fb8b 	uxth.w	fp, fp
 801d1e8:	fb0a b101 	mla	r1, sl, r1, fp
 801d1ec:	4411      	add	r1, r2
 801d1ee:	f8d9 2000 	ldr.w	r2, [r9]
 801d1f2:	0c24      	lsrs	r4, r4, #16
 801d1f4:	0c12      	lsrs	r2, r2, #16
 801d1f6:	fb0a 2404 	mla	r4, sl, r4, r2
 801d1fa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801d1fe:	b289      	uxth	r1, r1
 801d200:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801d204:	45f4      	cmp	ip, lr
 801d206:	f849 1b04 	str.w	r1, [r9], #4
 801d20a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801d20e:	d8e4      	bhi.n	801d1da <__multiply+0xaa>
 801d210:	9901      	ldr	r1, [sp, #4]
 801d212:	5072      	str	r2, [r6, r1]
 801d214:	9a03      	ldr	r2, [sp, #12]
 801d216:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d21a:	3304      	adds	r3, #4
 801d21c:	f1b9 0f00 	cmp.w	r9, #0
 801d220:	d01f      	beq.n	801d262 <__multiply+0x132>
 801d222:	6834      	ldr	r4, [r6, #0]
 801d224:	f105 0114 	add.w	r1, r5, #20
 801d228:	46b6      	mov	lr, r6
 801d22a:	f04f 0a00 	mov.w	sl, #0
 801d22e:	880a      	ldrh	r2, [r1, #0]
 801d230:	f8be b002 	ldrh.w	fp, [lr, #2]
 801d234:	fb09 b202 	mla	r2, r9, r2, fp
 801d238:	4492      	add	sl, r2
 801d23a:	b2a4      	uxth	r4, r4
 801d23c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801d240:	f84e 4b04 	str.w	r4, [lr], #4
 801d244:	f851 4b04 	ldr.w	r4, [r1], #4
 801d248:	f8be 2000 	ldrh.w	r2, [lr]
 801d24c:	0c24      	lsrs	r4, r4, #16
 801d24e:	fb09 2404 	mla	r4, r9, r4, r2
 801d252:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801d256:	458c      	cmp	ip, r1
 801d258:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801d25c:	d8e7      	bhi.n	801d22e <__multiply+0xfe>
 801d25e:	9a01      	ldr	r2, [sp, #4]
 801d260:	50b4      	str	r4, [r6, r2]
 801d262:	3604      	adds	r6, #4
 801d264:	e7a3      	b.n	801d1ae <__multiply+0x7e>
 801d266:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d26a:	2b00      	cmp	r3, #0
 801d26c:	d1a5      	bne.n	801d1ba <__multiply+0x8a>
 801d26e:	3f01      	subs	r7, #1
 801d270:	e7a1      	b.n	801d1b6 <__multiply+0x86>
 801d272:	bf00      	nop
 801d274:	080204d4 	.word	0x080204d4
 801d278:	08020564 	.word	0x08020564

0801d27c <__pow5mult>:
 801d27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d280:	4615      	mov	r5, r2
 801d282:	f012 0203 	ands.w	r2, r2, #3
 801d286:	4606      	mov	r6, r0
 801d288:	460f      	mov	r7, r1
 801d28a:	d007      	beq.n	801d29c <__pow5mult+0x20>
 801d28c:	4c25      	ldr	r4, [pc, #148]	; (801d324 <__pow5mult+0xa8>)
 801d28e:	3a01      	subs	r2, #1
 801d290:	2300      	movs	r3, #0
 801d292:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d296:	f7ff fe51 	bl	801cf3c <__multadd>
 801d29a:	4607      	mov	r7, r0
 801d29c:	10ad      	asrs	r5, r5, #2
 801d29e:	d03d      	beq.n	801d31c <__pow5mult+0xa0>
 801d2a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801d2a2:	b97c      	cbnz	r4, 801d2c4 <__pow5mult+0x48>
 801d2a4:	2010      	movs	r0, #16
 801d2a6:	f7fc fcb3 	bl	8019c10 <malloc>
 801d2aa:	4602      	mov	r2, r0
 801d2ac:	6270      	str	r0, [r6, #36]	; 0x24
 801d2ae:	b928      	cbnz	r0, 801d2bc <__pow5mult+0x40>
 801d2b0:	4b1d      	ldr	r3, [pc, #116]	; (801d328 <__pow5mult+0xac>)
 801d2b2:	481e      	ldr	r0, [pc, #120]	; (801d32c <__pow5mult+0xb0>)
 801d2b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801d2b8:	f000 fc72 	bl	801dba0 <__assert_func>
 801d2bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d2c0:	6004      	str	r4, [r0, #0]
 801d2c2:	60c4      	str	r4, [r0, #12]
 801d2c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801d2c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d2cc:	b94c      	cbnz	r4, 801d2e2 <__pow5mult+0x66>
 801d2ce:	f240 2171 	movw	r1, #625	; 0x271
 801d2d2:	4630      	mov	r0, r6
 801d2d4:	f7ff ff16 	bl	801d104 <__i2b>
 801d2d8:	2300      	movs	r3, #0
 801d2da:	f8c8 0008 	str.w	r0, [r8, #8]
 801d2de:	4604      	mov	r4, r0
 801d2e0:	6003      	str	r3, [r0, #0]
 801d2e2:	f04f 0900 	mov.w	r9, #0
 801d2e6:	07eb      	lsls	r3, r5, #31
 801d2e8:	d50a      	bpl.n	801d300 <__pow5mult+0x84>
 801d2ea:	4639      	mov	r1, r7
 801d2ec:	4622      	mov	r2, r4
 801d2ee:	4630      	mov	r0, r6
 801d2f0:	f7ff ff1e 	bl	801d130 <__multiply>
 801d2f4:	4639      	mov	r1, r7
 801d2f6:	4680      	mov	r8, r0
 801d2f8:	4630      	mov	r0, r6
 801d2fa:	f7ff fdfd 	bl	801cef8 <_Bfree>
 801d2fe:	4647      	mov	r7, r8
 801d300:	106d      	asrs	r5, r5, #1
 801d302:	d00b      	beq.n	801d31c <__pow5mult+0xa0>
 801d304:	6820      	ldr	r0, [r4, #0]
 801d306:	b938      	cbnz	r0, 801d318 <__pow5mult+0x9c>
 801d308:	4622      	mov	r2, r4
 801d30a:	4621      	mov	r1, r4
 801d30c:	4630      	mov	r0, r6
 801d30e:	f7ff ff0f 	bl	801d130 <__multiply>
 801d312:	6020      	str	r0, [r4, #0]
 801d314:	f8c0 9000 	str.w	r9, [r0]
 801d318:	4604      	mov	r4, r0
 801d31a:	e7e4      	b.n	801d2e6 <__pow5mult+0x6a>
 801d31c:	4638      	mov	r0, r7
 801d31e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d322:	bf00      	nop
 801d324:	080206b8 	.word	0x080206b8
 801d328:	0802045e 	.word	0x0802045e
 801d32c:	08020564 	.word	0x08020564

0801d330 <__lshift>:
 801d330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d334:	460c      	mov	r4, r1
 801d336:	6849      	ldr	r1, [r1, #4]
 801d338:	6923      	ldr	r3, [r4, #16]
 801d33a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d33e:	68a3      	ldr	r3, [r4, #8]
 801d340:	4607      	mov	r7, r0
 801d342:	4691      	mov	r9, r2
 801d344:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d348:	f108 0601 	add.w	r6, r8, #1
 801d34c:	42b3      	cmp	r3, r6
 801d34e:	db0b      	blt.n	801d368 <__lshift+0x38>
 801d350:	4638      	mov	r0, r7
 801d352:	f7ff fd91 	bl	801ce78 <_Balloc>
 801d356:	4605      	mov	r5, r0
 801d358:	b948      	cbnz	r0, 801d36e <__lshift+0x3e>
 801d35a:	4602      	mov	r2, r0
 801d35c:	4b28      	ldr	r3, [pc, #160]	; (801d400 <__lshift+0xd0>)
 801d35e:	4829      	ldr	r0, [pc, #164]	; (801d404 <__lshift+0xd4>)
 801d360:	f240 11d9 	movw	r1, #473	; 0x1d9
 801d364:	f000 fc1c 	bl	801dba0 <__assert_func>
 801d368:	3101      	adds	r1, #1
 801d36a:	005b      	lsls	r3, r3, #1
 801d36c:	e7ee      	b.n	801d34c <__lshift+0x1c>
 801d36e:	2300      	movs	r3, #0
 801d370:	f100 0114 	add.w	r1, r0, #20
 801d374:	f100 0210 	add.w	r2, r0, #16
 801d378:	4618      	mov	r0, r3
 801d37a:	4553      	cmp	r3, sl
 801d37c:	db33      	blt.n	801d3e6 <__lshift+0xb6>
 801d37e:	6920      	ldr	r0, [r4, #16]
 801d380:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d384:	f104 0314 	add.w	r3, r4, #20
 801d388:	f019 091f 	ands.w	r9, r9, #31
 801d38c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d390:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d394:	d02b      	beq.n	801d3ee <__lshift+0xbe>
 801d396:	f1c9 0e20 	rsb	lr, r9, #32
 801d39a:	468a      	mov	sl, r1
 801d39c:	2200      	movs	r2, #0
 801d39e:	6818      	ldr	r0, [r3, #0]
 801d3a0:	fa00 f009 	lsl.w	r0, r0, r9
 801d3a4:	4302      	orrs	r2, r0
 801d3a6:	f84a 2b04 	str.w	r2, [sl], #4
 801d3aa:	f853 2b04 	ldr.w	r2, [r3], #4
 801d3ae:	459c      	cmp	ip, r3
 801d3b0:	fa22 f20e 	lsr.w	r2, r2, lr
 801d3b4:	d8f3      	bhi.n	801d39e <__lshift+0x6e>
 801d3b6:	ebac 0304 	sub.w	r3, ip, r4
 801d3ba:	3b15      	subs	r3, #21
 801d3bc:	f023 0303 	bic.w	r3, r3, #3
 801d3c0:	3304      	adds	r3, #4
 801d3c2:	f104 0015 	add.w	r0, r4, #21
 801d3c6:	4584      	cmp	ip, r0
 801d3c8:	bf38      	it	cc
 801d3ca:	2304      	movcc	r3, #4
 801d3cc:	50ca      	str	r2, [r1, r3]
 801d3ce:	b10a      	cbz	r2, 801d3d4 <__lshift+0xa4>
 801d3d0:	f108 0602 	add.w	r6, r8, #2
 801d3d4:	3e01      	subs	r6, #1
 801d3d6:	4638      	mov	r0, r7
 801d3d8:	612e      	str	r6, [r5, #16]
 801d3da:	4621      	mov	r1, r4
 801d3dc:	f7ff fd8c 	bl	801cef8 <_Bfree>
 801d3e0:	4628      	mov	r0, r5
 801d3e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3e6:	f842 0f04 	str.w	r0, [r2, #4]!
 801d3ea:	3301      	adds	r3, #1
 801d3ec:	e7c5      	b.n	801d37a <__lshift+0x4a>
 801d3ee:	3904      	subs	r1, #4
 801d3f0:	f853 2b04 	ldr.w	r2, [r3], #4
 801d3f4:	f841 2f04 	str.w	r2, [r1, #4]!
 801d3f8:	459c      	cmp	ip, r3
 801d3fa:	d8f9      	bhi.n	801d3f0 <__lshift+0xc0>
 801d3fc:	e7ea      	b.n	801d3d4 <__lshift+0xa4>
 801d3fe:	bf00      	nop
 801d400:	080204d4 	.word	0x080204d4
 801d404:	08020564 	.word	0x08020564

0801d408 <__mcmp>:
 801d408:	b530      	push	{r4, r5, lr}
 801d40a:	6902      	ldr	r2, [r0, #16]
 801d40c:	690c      	ldr	r4, [r1, #16]
 801d40e:	1b12      	subs	r2, r2, r4
 801d410:	d10e      	bne.n	801d430 <__mcmp+0x28>
 801d412:	f100 0314 	add.w	r3, r0, #20
 801d416:	3114      	adds	r1, #20
 801d418:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d41c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d420:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d424:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d428:	42a5      	cmp	r5, r4
 801d42a:	d003      	beq.n	801d434 <__mcmp+0x2c>
 801d42c:	d305      	bcc.n	801d43a <__mcmp+0x32>
 801d42e:	2201      	movs	r2, #1
 801d430:	4610      	mov	r0, r2
 801d432:	bd30      	pop	{r4, r5, pc}
 801d434:	4283      	cmp	r3, r0
 801d436:	d3f3      	bcc.n	801d420 <__mcmp+0x18>
 801d438:	e7fa      	b.n	801d430 <__mcmp+0x28>
 801d43a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d43e:	e7f7      	b.n	801d430 <__mcmp+0x28>

0801d440 <__mdiff>:
 801d440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d444:	460c      	mov	r4, r1
 801d446:	4606      	mov	r6, r0
 801d448:	4611      	mov	r1, r2
 801d44a:	4620      	mov	r0, r4
 801d44c:	4617      	mov	r7, r2
 801d44e:	f7ff ffdb 	bl	801d408 <__mcmp>
 801d452:	1e05      	subs	r5, r0, #0
 801d454:	d110      	bne.n	801d478 <__mdiff+0x38>
 801d456:	4629      	mov	r1, r5
 801d458:	4630      	mov	r0, r6
 801d45a:	f7ff fd0d 	bl	801ce78 <_Balloc>
 801d45e:	b930      	cbnz	r0, 801d46e <__mdiff+0x2e>
 801d460:	4b39      	ldr	r3, [pc, #228]	; (801d548 <__mdiff+0x108>)
 801d462:	4602      	mov	r2, r0
 801d464:	f240 2132 	movw	r1, #562	; 0x232
 801d468:	4838      	ldr	r0, [pc, #224]	; (801d54c <__mdiff+0x10c>)
 801d46a:	f000 fb99 	bl	801dba0 <__assert_func>
 801d46e:	2301      	movs	r3, #1
 801d470:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d474:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d478:	bfa4      	itt	ge
 801d47a:	463b      	movge	r3, r7
 801d47c:	4627      	movge	r7, r4
 801d47e:	4630      	mov	r0, r6
 801d480:	6879      	ldr	r1, [r7, #4]
 801d482:	bfa6      	itte	ge
 801d484:	461c      	movge	r4, r3
 801d486:	2500      	movge	r5, #0
 801d488:	2501      	movlt	r5, #1
 801d48a:	f7ff fcf5 	bl	801ce78 <_Balloc>
 801d48e:	b920      	cbnz	r0, 801d49a <__mdiff+0x5a>
 801d490:	4b2d      	ldr	r3, [pc, #180]	; (801d548 <__mdiff+0x108>)
 801d492:	4602      	mov	r2, r0
 801d494:	f44f 7110 	mov.w	r1, #576	; 0x240
 801d498:	e7e6      	b.n	801d468 <__mdiff+0x28>
 801d49a:	693e      	ldr	r6, [r7, #16]
 801d49c:	60c5      	str	r5, [r0, #12]
 801d49e:	6925      	ldr	r5, [r4, #16]
 801d4a0:	f107 0114 	add.w	r1, r7, #20
 801d4a4:	f104 0914 	add.w	r9, r4, #20
 801d4a8:	f100 0e14 	add.w	lr, r0, #20
 801d4ac:	f107 0210 	add.w	r2, r7, #16
 801d4b0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801d4b4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801d4b8:	46f2      	mov	sl, lr
 801d4ba:	2700      	movs	r7, #0
 801d4bc:	f859 3b04 	ldr.w	r3, [r9], #4
 801d4c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d4c4:	fa1f f883 	uxth.w	r8, r3
 801d4c8:	fa17 f78b 	uxtah	r7, r7, fp
 801d4cc:	0c1b      	lsrs	r3, r3, #16
 801d4ce:	eba7 0808 	sub.w	r8, r7, r8
 801d4d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d4d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d4da:	fa1f f888 	uxth.w	r8, r8
 801d4de:	141f      	asrs	r7, r3, #16
 801d4e0:	454d      	cmp	r5, r9
 801d4e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d4e6:	f84a 3b04 	str.w	r3, [sl], #4
 801d4ea:	d8e7      	bhi.n	801d4bc <__mdiff+0x7c>
 801d4ec:	1b2b      	subs	r3, r5, r4
 801d4ee:	3b15      	subs	r3, #21
 801d4f0:	f023 0303 	bic.w	r3, r3, #3
 801d4f4:	3304      	adds	r3, #4
 801d4f6:	3415      	adds	r4, #21
 801d4f8:	42a5      	cmp	r5, r4
 801d4fa:	bf38      	it	cc
 801d4fc:	2304      	movcc	r3, #4
 801d4fe:	4419      	add	r1, r3
 801d500:	4473      	add	r3, lr
 801d502:	469e      	mov	lr, r3
 801d504:	460d      	mov	r5, r1
 801d506:	4565      	cmp	r5, ip
 801d508:	d30e      	bcc.n	801d528 <__mdiff+0xe8>
 801d50a:	f10c 0203 	add.w	r2, ip, #3
 801d50e:	1a52      	subs	r2, r2, r1
 801d510:	f022 0203 	bic.w	r2, r2, #3
 801d514:	3903      	subs	r1, #3
 801d516:	458c      	cmp	ip, r1
 801d518:	bf38      	it	cc
 801d51a:	2200      	movcc	r2, #0
 801d51c:	441a      	add	r2, r3
 801d51e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801d522:	b17b      	cbz	r3, 801d544 <__mdiff+0x104>
 801d524:	6106      	str	r6, [r0, #16]
 801d526:	e7a5      	b.n	801d474 <__mdiff+0x34>
 801d528:	f855 8b04 	ldr.w	r8, [r5], #4
 801d52c:	fa17 f488 	uxtah	r4, r7, r8
 801d530:	1422      	asrs	r2, r4, #16
 801d532:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801d536:	b2a4      	uxth	r4, r4
 801d538:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801d53c:	f84e 4b04 	str.w	r4, [lr], #4
 801d540:	1417      	asrs	r7, r2, #16
 801d542:	e7e0      	b.n	801d506 <__mdiff+0xc6>
 801d544:	3e01      	subs	r6, #1
 801d546:	e7ea      	b.n	801d51e <__mdiff+0xde>
 801d548:	080204d4 	.word	0x080204d4
 801d54c:	08020564 	.word	0x08020564

0801d550 <__ulp>:
 801d550:	b082      	sub	sp, #8
 801d552:	ed8d 0b00 	vstr	d0, [sp]
 801d556:	9b01      	ldr	r3, [sp, #4]
 801d558:	4912      	ldr	r1, [pc, #72]	; (801d5a4 <__ulp+0x54>)
 801d55a:	4019      	ands	r1, r3
 801d55c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801d560:	2900      	cmp	r1, #0
 801d562:	dd05      	ble.n	801d570 <__ulp+0x20>
 801d564:	2200      	movs	r2, #0
 801d566:	460b      	mov	r3, r1
 801d568:	ec43 2b10 	vmov	d0, r2, r3
 801d56c:	b002      	add	sp, #8
 801d56e:	4770      	bx	lr
 801d570:	4249      	negs	r1, r1
 801d572:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801d576:	ea4f 5021 	mov.w	r0, r1, asr #20
 801d57a:	f04f 0200 	mov.w	r2, #0
 801d57e:	f04f 0300 	mov.w	r3, #0
 801d582:	da04      	bge.n	801d58e <__ulp+0x3e>
 801d584:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801d588:	fa41 f300 	asr.w	r3, r1, r0
 801d58c:	e7ec      	b.n	801d568 <__ulp+0x18>
 801d58e:	f1a0 0114 	sub.w	r1, r0, #20
 801d592:	291e      	cmp	r1, #30
 801d594:	bfda      	itte	le
 801d596:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801d59a:	fa20 f101 	lsrle.w	r1, r0, r1
 801d59e:	2101      	movgt	r1, #1
 801d5a0:	460a      	mov	r2, r1
 801d5a2:	e7e1      	b.n	801d568 <__ulp+0x18>
 801d5a4:	7ff00000 	.word	0x7ff00000

0801d5a8 <__b2d>:
 801d5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d5aa:	6905      	ldr	r5, [r0, #16]
 801d5ac:	f100 0714 	add.w	r7, r0, #20
 801d5b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801d5b4:	1f2e      	subs	r6, r5, #4
 801d5b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801d5ba:	4620      	mov	r0, r4
 801d5bc:	f7ff fd52 	bl	801d064 <__hi0bits>
 801d5c0:	f1c0 0320 	rsb	r3, r0, #32
 801d5c4:	280a      	cmp	r0, #10
 801d5c6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801d644 <__b2d+0x9c>
 801d5ca:	600b      	str	r3, [r1, #0]
 801d5cc:	dc14      	bgt.n	801d5f8 <__b2d+0x50>
 801d5ce:	f1c0 0e0b 	rsb	lr, r0, #11
 801d5d2:	fa24 f10e 	lsr.w	r1, r4, lr
 801d5d6:	42b7      	cmp	r7, r6
 801d5d8:	ea41 030c 	orr.w	r3, r1, ip
 801d5dc:	bf34      	ite	cc
 801d5de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d5e2:	2100      	movcs	r1, #0
 801d5e4:	3015      	adds	r0, #21
 801d5e6:	fa04 f000 	lsl.w	r0, r4, r0
 801d5ea:	fa21 f10e 	lsr.w	r1, r1, lr
 801d5ee:	ea40 0201 	orr.w	r2, r0, r1
 801d5f2:	ec43 2b10 	vmov	d0, r2, r3
 801d5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d5f8:	42b7      	cmp	r7, r6
 801d5fa:	bf3a      	itte	cc
 801d5fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d600:	f1a5 0608 	subcc.w	r6, r5, #8
 801d604:	2100      	movcs	r1, #0
 801d606:	380b      	subs	r0, #11
 801d608:	d017      	beq.n	801d63a <__b2d+0x92>
 801d60a:	f1c0 0c20 	rsb	ip, r0, #32
 801d60e:	fa04 f500 	lsl.w	r5, r4, r0
 801d612:	42be      	cmp	r6, r7
 801d614:	fa21 f40c 	lsr.w	r4, r1, ip
 801d618:	ea45 0504 	orr.w	r5, r5, r4
 801d61c:	bf8c      	ite	hi
 801d61e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801d622:	2400      	movls	r4, #0
 801d624:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801d628:	fa01 f000 	lsl.w	r0, r1, r0
 801d62c:	fa24 f40c 	lsr.w	r4, r4, ip
 801d630:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801d634:	ea40 0204 	orr.w	r2, r0, r4
 801d638:	e7db      	b.n	801d5f2 <__b2d+0x4a>
 801d63a:	ea44 030c 	orr.w	r3, r4, ip
 801d63e:	460a      	mov	r2, r1
 801d640:	e7d7      	b.n	801d5f2 <__b2d+0x4a>
 801d642:	bf00      	nop
 801d644:	3ff00000 	.word	0x3ff00000

0801d648 <__d2b>:
 801d648:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d64c:	4689      	mov	r9, r1
 801d64e:	2101      	movs	r1, #1
 801d650:	ec57 6b10 	vmov	r6, r7, d0
 801d654:	4690      	mov	r8, r2
 801d656:	f7ff fc0f 	bl	801ce78 <_Balloc>
 801d65a:	4604      	mov	r4, r0
 801d65c:	b930      	cbnz	r0, 801d66c <__d2b+0x24>
 801d65e:	4602      	mov	r2, r0
 801d660:	4b25      	ldr	r3, [pc, #148]	; (801d6f8 <__d2b+0xb0>)
 801d662:	4826      	ldr	r0, [pc, #152]	; (801d6fc <__d2b+0xb4>)
 801d664:	f240 310a 	movw	r1, #778	; 0x30a
 801d668:	f000 fa9a 	bl	801dba0 <__assert_func>
 801d66c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801d670:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d674:	bb35      	cbnz	r5, 801d6c4 <__d2b+0x7c>
 801d676:	2e00      	cmp	r6, #0
 801d678:	9301      	str	r3, [sp, #4]
 801d67a:	d028      	beq.n	801d6ce <__d2b+0x86>
 801d67c:	4668      	mov	r0, sp
 801d67e:	9600      	str	r6, [sp, #0]
 801d680:	f7ff fd10 	bl	801d0a4 <__lo0bits>
 801d684:	9900      	ldr	r1, [sp, #0]
 801d686:	b300      	cbz	r0, 801d6ca <__d2b+0x82>
 801d688:	9a01      	ldr	r2, [sp, #4]
 801d68a:	f1c0 0320 	rsb	r3, r0, #32
 801d68e:	fa02 f303 	lsl.w	r3, r2, r3
 801d692:	430b      	orrs	r3, r1
 801d694:	40c2      	lsrs	r2, r0
 801d696:	6163      	str	r3, [r4, #20]
 801d698:	9201      	str	r2, [sp, #4]
 801d69a:	9b01      	ldr	r3, [sp, #4]
 801d69c:	61a3      	str	r3, [r4, #24]
 801d69e:	2b00      	cmp	r3, #0
 801d6a0:	bf14      	ite	ne
 801d6a2:	2202      	movne	r2, #2
 801d6a4:	2201      	moveq	r2, #1
 801d6a6:	6122      	str	r2, [r4, #16]
 801d6a8:	b1d5      	cbz	r5, 801d6e0 <__d2b+0x98>
 801d6aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d6ae:	4405      	add	r5, r0
 801d6b0:	f8c9 5000 	str.w	r5, [r9]
 801d6b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d6b8:	f8c8 0000 	str.w	r0, [r8]
 801d6bc:	4620      	mov	r0, r4
 801d6be:	b003      	add	sp, #12
 801d6c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d6c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d6c8:	e7d5      	b.n	801d676 <__d2b+0x2e>
 801d6ca:	6161      	str	r1, [r4, #20]
 801d6cc:	e7e5      	b.n	801d69a <__d2b+0x52>
 801d6ce:	a801      	add	r0, sp, #4
 801d6d0:	f7ff fce8 	bl	801d0a4 <__lo0bits>
 801d6d4:	9b01      	ldr	r3, [sp, #4]
 801d6d6:	6163      	str	r3, [r4, #20]
 801d6d8:	2201      	movs	r2, #1
 801d6da:	6122      	str	r2, [r4, #16]
 801d6dc:	3020      	adds	r0, #32
 801d6de:	e7e3      	b.n	801d6a8 <__d2b+0x60>
 801d6e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d6e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d6e8:	f8c9 0000 	str.w	r0, [r9]
 801d6ec:	6918      	ldr	r0, [r3, #16]
 801d6ee:	f7ff fcb9 	bl	801d064 <__hi0bits>
 801d6f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d6f6:	e7df      	b.n	801d6b8 <__d2b+0x70>
 801d6f8:	080204d4 	.word	0x080204d4
 801d6fc:	08020564 	.word	0x08020564

0801d700 <__ratio>:
 801d700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d704:	4688      	mov	r8, r1
 801d706:	4669      	mov	r1, sp
 801d708:	4681      	mov	r9, r0
 801d70a:	f7ff ff4d 	bl	801d5a8 <__b2d>
 801d70e:	a901      	add	r1, sp, #4
 801d710:	4640      	mov	r0, r8
 801d712:	ec55 4b10 	vmov	r4, r5, d0
 801d716:	f7ff ff47 	bl	801d5a8 <__b2d>
 801d71a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d71e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801d722:	eba3 0c02 	sub.w	ip, r3, r2
 801d726:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d72a:	1a9b      	subs	r3, r3, r2
 801d72c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801d730:	ec51 0b10 	vmov	r0, r1, d0
 801d734:	2b00      	cmp	r3, #0
 801d736:	bfd6      	itet	le
 801d738:	460a      	movle	r2, r1
 801d73a:	462a      	movgt	r2, r5
 801d73c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d740:	468b      	mov	fp, r1
 801d742:	462f      	mov	r7, r5
 801d744:	bfd4      	ite	le
 801d746:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801d74a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d74e:	4620      	mov	r0, r4
 801d750:	ee10 2a10 	vmov	r2, s0
 801d754:	465b      	mov	r3, fp
 801d756:	4639      	mov	r1, r7
 801d758:	f7e3 f878 	bl	800084c <__aeabi_ddiv>
 801d75c:	ec41 0b10 	vmov	d0, r0, r1
 801d760:	b003      	add	sp, #12
 801d762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d766 <__copybits>:
 801d766:	3901      	subs	r1, #1
 801d768:	b570      	push	{r4, r5, r6, lr}
 801d76a:	1149      	asrs	r1, r1, #5
 801d76c:	6914      	ldr	r4, [r2, #16]
 801d76e:	3101      	adds	r1, #1
 801d770:	f102 0314 	add.w	r3, r2, #20
 801d774:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d778:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d77c:	1f05      	subs	r5, r0, #4
 801d77e:	42a3      	cmp	r3, r4
 801d780:	d30c      	bcc.n	801d79c <__copybits+0x36>
 801d782:	1aa3      	subs	r3, r4, r2
 801d784:	3b11      	subs	r3, #17
 801d786:	f023 0303 	bic.w	r3, r3, #3
 801d78a:	3211      	adds	r2, #17
 801d78c:	42a2      	cmp	r2, r4
 801d78e:	bf88      	it	hi
 801d790:	2300      	movhi	r3, #0
 801d792:	4418      	add	r0, r3
 801d794:	2300      	movs	r3, #0
 801d796:	4288      	cmp	r0, r1
 801d798:	d305      	bcc.n	801d7a6 <__copybits+0x40>
 801d79a:	bd70      	pop	{r4, r5, r6, pc}
 801d79c:	f853 6b04 	ldr.w	r6, [r3], #4
 801d7a0:	f845 6f04 	str.w	r6, [r5, #4]!
 801d7a4:	e7eb      	b.n	801d77e <__copybits+0x18>
 801d7a6:	f840 3b04 	str.w	r3, [r0], #4
 801d7aa:	e7f4      	b.n	801d796 <__copybits+0x30>

0801d7ac <__any_on>:
 801d7ac:	f100 0214 	add.w	r2, r0, #20
 801d7b0:	6900      	ldr	r0, [r0, #16]
 801d7b2:	114b      	asrs	r3, r1, #5
 801d7b4:	4298      	cmp	r0, r3
 801d7b6:	b510      	push	{r4, lr}
 801d7b8:	db11      	blt.n	801d7de <__any_on+0x32>
 801d7ba:	dd0a      	ble.n	801d7d2 <__any_on+0x26>
 801d7bc:	f011 011f 	ands.w	r1, r1, #31
 801d7c0:	d007      	beq.n	801d7d2 <__any_on+0x26>
 801d7c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d7c6:	fa24 f001 	lsr.w	r0, r4, r1
 801d7ca:	fa00 f101 	lsl.w	r1, r0, r1
 801d7ce:	428c      	cmp	r4, r1
 801d7d0:	d10b      	bne.n	801d7ea <__any_on+0x3e>
 801d7d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d7d6:	4293      	cmp	r3, r2
 801d7d8:	d803      	bhi.n	801d7e2 <__any_on+0x36>
 801d7da:	2000      	movs	r0, #0
 801d7dc:	bd10      	pop	{r4, pc}
 801d7de:	4603      	mov	r3, r0
 801d7e0:	e7f7      	b.n	801d7d2 <__any_on+0x26>
 801d7e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d7e6:	2900      	cmp	r1, #0
 801d7e8:	d0f5      	beq.n	801d7d6 <__any_on+0x2a>
 801d7ea:	2001      	movs	r0, #1
 801d7ec:	e7f6      	b.n	801d7dc <__any_on+0x30>

0801d7ee <_calloc_r>:
 801d7ee:	b513      	push	{r0, r1, r4, lr}
 801d7f0:	434a      	muls	r2, r1
 801d7f2:	4611      	mov	r1, r2
 801d7f4:	9201      	str	r2, [sp, #4]
 801d7f6:	f7fc fa79 	bl	8019cec <_malloc_r>
 801d7fa:	4604      	mov	r4, r0
 801d7fc:	b118      	cbz	r0, 801d806 <_calloc_r+0x18>
 801d7fe:	9a01      	ldr	r2, [sp, #4]
 801d800:	2100      	movs	r1, #0
 801d802:	f7fc fa1b 	bl	8019c3c <memset>
 801d806:	4620      	mov	r0, r4
 801d808:	b002      	add	sp, #8
 801d80a:	bd10      	pop	{r4, pc}

0801d80c <_realloc_r>:
 801d80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d80e:	4607      	mov	r7, r0
 801d810:	4614      	mov	r4, r2
 801d812:	460e      	mov	r6, r1
 801d814:	b921      	cbnz	r1, 801d820 <_realloc_r+0x14>
 801d816:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801d81a:	4611      	mov	r1, r2
 801d81c:	f7fc ba66 	b.w	8019cec <_malloc_r>
 801d820:	b922      	cbnz	r2, 801d82c <_realloc_r+0x20>
 801d822:	f7fc fa13 	bl	8019c4c <_free_r>
 801d826:	4625      	mov	r5, r4
 801d828:	4628      	mov	r0, r5
 801d82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d82c:	f000 fbbc 	bl	801dfa8 <_malloc_usable_size_r>
 801d830:	42a0      	cmp	r0, r4
 801d832:	d20f      	bcs.n	801d854 <_realloc_r+0x48>
 801d834:	4621      	mov	r1, r4
 801d836:	4638      	mov	r0, r7
 801d838:	f7fc fa58 	bl	8019cec <_malloc_r>
 801d83c:	4605      	mov	r5, r0
 801d83e:	2800      	cmp	r0, #0
 801d840:	d0f2      	beq.n	801d828 <_realloc_r+0x1c>
 801d842:	4631      	mov	r1, r6
 801d844:	4622      	mov	r2, r4
 801d846:	f7fc f9eb 	bl	8019c20 <memcpy>
 801d84a:	4631      	mov	r1, r6
 801d84c:	4638      	mov	r0, r7
 801d84e:	f7fc f9fd 	bl	8019c4c <_free_r>
 801d852:	e7e9      	b.n	801d828 <_realloc_r+0x1c>
 801d854:	4635      	mov	r5, r6
 801d856:	e7e7      	b.n	801d828 <_realloc_r+0x1c>

0801d858 <__ssputs_r>:
 801d858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d85c:	688e      	ldr	r6, [r1, #8]
 801d85e:	429e      	cmp	r6, r3
 801d860:	4682      	mov	sl, r0
 801d862:	460c      	mov	r4, r1
 801d864:	4690      	mov	r8, r2
 801d866:	461f      	mov	r7, r3
 801d868:	d838      	bhi.n	801d8dc <__ssputs_r+0x84>
 801d86a:	898a      	ldrh	r2, [r1, #12]
 801d86c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d870:	d032      	beq.n	801d8d8 <__ssputs_r+0x80>
 801d872:	6825      	ldr	r5, [r4, #0]
 801d874:	6909      	ldr	r1, [r1, #16]
 801d876:	eba5 0901 	sub.w	r9, r5, r1
 801d87a:	6965      	ldr	r5, [r4, #20]
 801d87c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d880:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d884:	3301      	adds	r3, #1
 801d886:	444b      	add	r3, r9
 801d888:	106d      	asrs	r5, r5, #1
 801d88a:	429d      	cmp	r5, r3
 801d88c:	bf38      	it	cc
 801d88e:	461d      	movcc	r5, r3
 801d890:	0553      	lsls	r3, r2, #21
 801d892:	d531      	bpl.n	801d8f8 <__ssputs_r+0xa0>
 801d894:	4629      	mov	r1, r5
 801d896:	f7fc fa29 	bl	8019cec <_malloc_r>
 801d89a:	4606      	mov	r6, r0
 801d89c:	b950      	cbnz	r0, 801d8b4 <__ssputs_r+0x5c>
 801d89e:	230c      	movs	r3, #12
 801d8a0:	f8ca 3000 	str.w	r3, [sl]
 801d8a4:	89a3      	ldrh	r3, [r4, #12]
 801d8a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d8aa:	81a3      	strh	r3, [r4, #12]
 801d8ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d8b4:	6921      	ldr	r1, [r4, #16]
 801d8b6:	464a      	mov	r2, r9
 801d8b8:	f7fc f9b2 	bl	8019c20 <memcpy>
 801d8bc:	89a3      	ldrh	r3, [r4, #12]
 801d8be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d8c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d8c6:	81a3      	strh	r3, [r4, #12]
 801d8c8:	6126      	str	r6, [r4, #16]
 801d8ca:	6165      	str	r5, [r4, #20]
 801d8cc:	444e      	add	r6, r9
 801d8ce:	eba5 0509 	sub.w	r5, r5, r9
 801d8d2:	6026      	str	r6, [r4, #0]
 801d8d4:	60a5      	str	r5, [r4, #8]
 801d8d6:	463e      	mov	r6, r7
 801d8d8:	42be      	cmp	r6, r7
 801d8da:	d900      	bls.n	801d8de <__ssputs_r+0x86>
 801d8dc:	463e      	mov	r6, r7
 801d8de:	4632      	mov	r2, r6
 801d8e0:	6820      	ldr	r0, [r4, #0]
 801d8e2:	4641      	mov	r1, r8
 801d8e4:	f000 fb46 	bl	801df74 <memmove>
 801d8e8:	68a3      	ldr	r3, [r4, #8]
 801d8ea:	6822      	ldr	r2, [r4, #0]
 801d8ec:	1b9b      	subs	r3, r3, r6
 801d8ee:	4432      	add	r2, r6
 801d8f0:	60a3      	str	r3, [r4, #8]
 801d8f2:	6022      	str	r2, [r4, #0]
 801d8f4:	2000      	movs	r0, #0
 801d8f6:	e7db      	b.n	801d8b0 <__ssputs_r+0x58>
 801d8f8:	462a      	mov	r2, r5
 801d8fa:	f7ff ff87 	bl	801d80c <_realloc_r>
 801d8fe:	4606      	mov	r6, r0
 801d900:	2800      	cmp	r0, #0
 801d902:	d1e1      	bne.n	801d8c8 <__ssputs_r+0x70>
 801d904:	6921      	ldr	r1, [r4, #16]
 801d906:	4650      	mov	r0, sl
 801d908:	f7fc f9a0 	bl	8019c4c <_free_r>
 801d90c:	e7c7      	b.n	801d89e <__ssputs_r+0x46>
	...

0801d910 <_svfiprintf_r>:
 801d910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d914:	4698      	mov	r8, r3
 801d916:	898b      	ldrh	r3, [r1, #12]
 801d918:	061b      	lsls	r3, r3, #24
 801d91a:	b09d      	sub	sp, #116	; 0x74
 801d91c:	4607      	mov	r7, r0
 801d91e:	460d      	mov	r5, r1
 801d920:	4614      	mov	r4, r2
 801d922:	d50e      	bpl.n	801d942 <_svfiprintf_r+0x32>
 801d924:	690b      	ldr	r3, [r1, #16]
 801d926:	b963      	cbnz	r3, 801d942 <_svfiprintf_r+0x32>
 801d928:	2140      	movs	r1, #64	; 0x40
 801d92a:	f7fc f9df 	bl	8019cec <_malloc_r>
 801d92e:	6028      	str	r0, [r5, #0]
 801d930:	6128      	str	r0, [r5, #16]
 801d932:	b920      	cbnz	r0, 801d93e <_svfiprintf_r+0x2e>
 801d934:	230c      	movs	r3, #12
 801d936:	603b      	str	r3, [r7, #0]
 801d938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d93c:	e0d1      	b.n	801dae2 <_svfiprintf_r+0x1d2>
 801d93e:	2340      	movs	r3, #64	; 0x40
 801d940:	616b      	str	r3, [r5, #20]
 801d942:	2300      	movs	r3, #0
 801d944:	9309      	str	r3, [sp, #36]	; 0x24
 801d946:	2320      	movs	r3, #32
 801d948:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d94c:	f8cd 800c 	str.w	r8, [sp, #12]
 801d950:	2330      	movs	r3, #48	; 0x30
 801d952:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801dafc <_svfiprintf_r+0x1ec>
 801d956:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d95a:	f04f 0901 	mov.w	r9, #1
 801d95e:	4623      	mov	r3, r4
 801d960:	469a      	mov	sl, r3
 801d962:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d966:	b10a      	cbz	r2, 801d96c <_svfiprintf_r+0x5c>
 801d968:	2a25      	cmp	r2, #37	; 0x25
 801d96a:	d1f9      	bne.n	801d960 <_svfiprintf_r+0x50>
 801d96c:	ebba 0b04 	subs.w	fp, sl, r4
 801d970:	d00b      	beq.n	801d98a <_svfiprintf_r+0x7a>
 801d972:	465b      	mov	r3, fp
 801d974:	4622      	mov	r2, r4
 801d976:	4629      	mov	r1, r5
 801d978:	4638      	mov	r0, r7
 801d97a:	f7ff ff6d 	bl	801d858 <__ssputs_r>
 801d97e:	3001      	adds	r0, #1
 801d980:	f000 80aa 	beq.w	801dad8 <_svfiprintf_r+0x1c8>
 801d984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d986:	445a      	add	r2, fp
 801d988:	9209      	str	r2, [sp, #36]	; 0x24
 801d98a:	f89a 3000 	ldrb.w	r3, [sl]
 801d98e:	2b00      	cmp	r3, #0
 801d990:	f000 80a2 	beq.w	801dad8 <_svfiprintf_r+0x1c8>
 801d994:	2300      	movs	r3, #0
 801d996:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d99a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d99e:	f10a 0a01 	add.w	sl, sl, #1
 801d9a2:	9304      	str	r3, [sp, #16]
 801d9a4:	9307      	str	r3, [sp, #28]
 801d9a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d9aa:	931a      	str	r3, [sp, #104]	; 0x68
 801d9ac:	4654      	mov	r4, sl
 801d9ae:	2205      	movs	r2, #5
 801d9b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d9b4:	4851      	ldr	r0, [pc, #324]	; (801dafc <_svfiprintf_r+0x1ec>)
 801d9b6:	f7e2 fc13 	bl	80001e0 <memchr>
 801d9ba:	9a04      	ldr	r2, [sp, #16]
 801d9bc:	b9d8      	cbnz	r0, 801d9f6 <_svfiprintf_r+0xe6>
 801d9be:	06d0      	lsls	r0, r2, #27
 801d9c0:	bf44      	itt	mi
 801d9c2:	2320      	movmi	r3, #32
 801d9c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d9c8:	0711      	lsls	r1, r2, #28
 801d9ca:	bf44      	itt	mi
 801d9cc:	232b      	movmi	r3, #43	; 0x2b
 801d9ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d9d2:	f89a 3000 	ldrb.w	r3, [sl]
 801d9d6:	2b2a      	cmp	r3, #42	; 0x2a
 801d9d8:	d015      	beq.n	801da06 <_svfiprintf_r+0xf6>
 801d9da:	9a07      	ldr	r2, [sp, #28]
 801d9dc:	4654      	mov	r4, sl
 801d9de:	2000      	movs	r0, #0
 801d9e0:	f04f 0c0a 	mov.w	ip, #10
 801d9e4:	4621      	mov	r1, r4
 801d9e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d9ea:	3b30      	subs	r3, #48	; 0x30
 801d9ec:	2b09      	cmp	r3, #9
 801d9ee:	d94e      	bls.n	801da8e <_svfiprintf_r+0x17e>
 801d9f0:	b1b0      	cbz	r0, 801da20 <_svfiprintf_r+0x110>
 801d9f2:	9207      	str	r2, [sp, #28]
 801d9f4:	e014      	b.n	801da20 <_svfiprintf_r+0x110>
 801d9f6:	eba0 0308 	sub.w	r3, r0, r8
 801d9fa:	fa09 f303 	lsl.w	r3, r9, r3
 801d9fe:	4313      	orrs	r3, r2
 801da00:	9304      	str	r3, [sp, #16]
 801da02:	46a2      	mov	sl, r4
 801da04:	e7d2      	b.n	801d9ac <_svfiprintf_r+0x9c>
 801da06:	9b03      	ldr	r3, [sp, #12]
 801da08:	1d19      	adds	r1, r3, #4
 801da0a:	681b      	ldr	r3, [r3, #0]
 801da0c:	9103      	str	r1, [sp, #12]
 801da0e:	2b00      	cmp	r3, #0
 801da10:	bfbb      	ittet	lt
 801da12:	425b      	neglt	r3, r3
 801da14:	f042 0202 	orrlt.w	r2, r2, #2
 801da18:	9307      	strge	r3, [sp, #28]
 801da1a:	9307      	strlt	r3, [sp, #28]
 801da1c:	bfb8      	it	lt
 801da1e:	9204      	strlt	r2, [sp, #16]
 801da20:	7823      	ldrb	r3, [r4, #0]
 801da22:	2b2e      	cmp	r3, #46	; 0x2e
 801da24:	d10c      	bne.n	801da40 <_svfiprintf_r+0x130>
 801da26:	7863      	ldrb	r3, [r4, #1]
 801da28:	2b2a      	cmp	r3, #42	; 0x2a
 801da2a:	d135      	bne.n	801da98 <_svfiprintf_r+0x188>
 801da2c:	9b03      	ldr	r3, [sp, #12]
 801da2e:	1d1a      	adds	r2, r3, #4
 801da30:	681b      	ldr	r3, [r3, #0]
 801da32:	9203      	str	r2, [sp, #12]
 801da34:	2b00      	cmp	r3, #0
 801da36:	bfb8      	it	lt
 801da38:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801da3c:	3402      	adds	r4, #2
 801da3e:	9305      	str	r3, [sp, #20]
 801da40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801db0c <_svfiprintf_r+0x1fc>
 801da44:	7821      	ldrb	r1, [r4, #0]
 801da46:	2203      	movs	r2, #3
 801da48:	4650      	mov	r0, sl
 801da4a:	f7e2 fbc9 	bl	80001e0 <memchr>
 801da4e:	b140      	cbz	r0, 801da62 <_svfiprintf_r+0x152>
 801da50:	2340      	movs	r3, #64	; 0x40
 801da52:	eba0 000a 	sub.w	r0, r0, sl
 801da56:	fa03 f000 	lsl.w	r0, r3, r0
 801da5a:	9b04      	ldr	r3, [sp, #16]
 801da5c:	4303      	orrs	r3, r0
 801da5e:	3401      	adds	r4, #1
 801da60:	9304      	str	r3, [sp, #16]
 801da62:	f814 1b01 	ldrb.w	r1, [r4], #1
 801da66:	4826      	ldr	r0, [pc, #152]	; (801db00 <_svfiprintf_r+0x1f0>)
 801da68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801da6c:	2206      	movs	r2, #6
 801da6e:	f7e2 fbb7 	bl	80001e0 <memchr>
 801da72:	2800      	cmp	r0, #0
 801da74:	d038      	beq.n	801dae8 <_svfiprintf_r+0x1d8>
 801da76:	4b23      	ldr	r3, [pc, #140]	; (801db04 <_svfiprintf_r+0x1f4>)
 801da78:	bb1b      	cbnz	r3, 801dac2 <_svfiprintf_r+0x1b2>
 801da7a:	9b03      	ldr	r3, [sp, #12]
 801da7c:	3307      	adds	r3, #7
 801da7e:	f023 0307 	bic.w	r3, r3, #7
 801da82:	3308      	adds	r3, #8
 801da84:	9303      	str	r3, [sp, #12]
 801da86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da88:	4433      	add	r3, r6
 801da8a:	9309      	str	r3, [sp, #36]	; 0x24
 801da8c:	e767      	b.n	801d95e <_svfiprintf_r+0x4e>
 801da8e:	fb0c 3202 	mla	r2, ip, r2, r3
 801da92:	460c      	mov	r4, r1
 801da94:	2001      	movs	r0, #1
 801da96:	e7a5      	b.n	801d9e4 <_svfiprintf_r+0xd4>
 801da98:	2300      	movs	r3, #0
 801da9a:	3401      	adds	r4, #1
 801da9c:	9305      	str	r3, [sp, #20]
 801da9e:	4619      	mov	r1, r3
 801daa0:	f04f 0c0a 	mov.w	ip, #10
 801daa4:	4620      	mov	r0, r4
 801daa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801daaa:	3a30      	subs	r2, #48	; 0x30
 801daac:	2a09      	cmp	r2, #9
 801daae:	d903      	bls.n	801dab8 <_svfiprintf_r+0x1a8>
 801dab0:	2b00      	cmp	r3, #0
 801dab2:	d0c5      	beq.n	801da40 <_svfiprintf_r+0x130>
 801dab4:	9105      	str	r1, [sp, #20]
 801dab6:	e7c3      	b.n	801da40 <_svfiprintf_r+0x130>
 801dab8:	fb0c 2101 	mla	r1, ip, r1, r2
 801dabc:	4604      	mov	r4, r0
 801dabe:	2301      	movs	r3, #1
 801dac0:	e7f0      	b.n	801daa4 <_svfiprintf_r+0x194>
 801dac2:	ab03      	add	r3, sp, #12
 801dac4:	9300      	str	r3, [sp, #0]
 801dac6:	462a      	mov	r2, r5
 801dac8:	4b0f      	ldr	r3, [pc, #60]	; (801db08 <_svfiprintf_r+0x1f8>)
 801daca:	a904      	add	r1, sp, #16
 801dacc:	4638      	mov	r0, r7
 801dace:	f7fc fa07 	bl	8019ee0 <_printf_float>
 801dad2:	1c42      	adds	r2, r0, #1
 801dad4:	4606      	mov	r6, r0
 801dad6:	d1d6      	bne.n	801da86 <_svfiprintf_r+0x176>
 801dad8:	89ab      	ldrh	r3, [r5, #12]
 801dada:	065b      	lsls	r3, r3, #25
 801dadc:	f53f af2c 	bmi.w	801d938 <_svfiprintf_r+0x28>
 801dae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dae2:	b01d      	add	sp, #116	; 0x74
 801dae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dae8:	ab03      	add	r3, sp, #12
 801daea:	9300      	str	r3, [sp, #0]
 801daec:	462a      	mov	r2, r5
 801daee:	4b06      	ldr	r3, [pc, #24]	; (801db08 <_svfiprintf_r+0x1f8>)
 801daf0:	a904      	add	r1, sp, #16
 801daf2:	4638      	mov	r0, r7
 801daf4:	f7fc fc98 	bl	801a428 <_printf_i>
 801daf8:	e7eb      	b.n	801dad2 <_svfiprintf_r+0x1c2>
 801dafa:	bf00      	nop
 801dafc:	080206c4 	.word	0x080206c4
 801db00:	080206ce 	.word	0x080206ce
 801db04:	08019ee1 	.word	0x08019ee1
 801db08:	0801d859 	.word	0x0801d859
 801db0c:	080206ca 	.word	0x080206ca

0801db10 <_read_r>:
 801db10:	b538      	push	{r3, r4, r5, lr}
 801db12:	4d07      	ldr	r5, [pc, #28]	; (801db30 <_read_r+0x20>)
 801db14:	4604      	mov	r4, r0
 801db16:	4608      	mov	r0, r1
 801db18:	4611      	mov	r1, r2
 801db1a:	2200      	movs	r2, #0
 801db1c:	602a      	str	r2, [r5, #0]
 801db1e:	461a      	mov	r2, r3
 801db20:	f7ef f9b0 	bl	800ce84 <_read>
 801db24:	1c43      	adds	r3, r0, #1
 801db26:	d102      	bne.n	801db2e <_read_r+0x1e>
 801db28:	682b      	ldr	r3, [r5, #0]
 801db2a:	b103      	cbz	r3, 801db2e <_read_r+0x1e>
 801db2c:	6023      	str	r3, [r4, #0]
 801db2e:	bd38      	pop	{r3, r4, r5, pc}
 801db30:	2000a6d4 	.word	0x2000a6d4
 801db34:	00000000 	.word	0x00000000

0801db38 <nan>:
 801db38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801db40 <nan+0x8>
 801db3c:	4770      	bx	lr
 801db3e:	bf00      	nop
 801db40:	00000000 	.word	0x00000000
 801db44:	7ff80000 	.word	0x7ff80000

0801db48 <finitef>:
 801db48:	b082      	sub	sp, #8
 801db4a:	ed8d 0a01 	vstr	s0, [sp, #4]
 801db4e:	9801      	ldr	r0, [sp, #4]
 801db50:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801db54:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801db58:	bfac      	ite	ge
 801db5a:	2000      	movge	r0, #0
 801db5c:	2001      	movlt	r0, #1
 801db5e:	b002      	add	sp, #8
 801db60:	4770      	bx	lr

0801db62 <strncmp>:
 801db62:	b510      	push	{r4, lr}
 801db64:	b16a      	cbz	r2, 801db82 <strncmp+0x20>
 801db66:	3901      	subs	r1, #1
 801db68:	1884      	adds	r4, r0, r2
 801db6a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801db6e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801db72:	4293      	cmp	r3, r2
 801db74:	d103      	bne.n	801db7e <strncmp+0x1c>
 801db76:	42a0      	cmp	r0, r4
 801db78:	d001      	beq.n	801db7e <strncmp+0x1c>
 801db7a:	2b00      	cmp	r3, #0
 801db7c:	d1f5      	bne.n	801db6a <strncmp+0x8>
 801db7e:	1a98      	subs	r0, r3, r2
 801db80:	bd10      	pop	{r4, pc}
 801db82:	4610      	mov	r0, r2
 801db84:	e7fc      	b.n	801db80 <strncmp+0x1e>

0801db86 <__ascii_wctomb>:
 801db86:	b149      	cbz	r1, 801db9c <__ascii_wctomb+0x16>
 801db88:	2aff      	cmp	r2, #255	; 0xff
 801db8a:	bf85      	ittet	hi
 801db8c:	238a      	movhi	r3, #138	; 0x8a
 801db8e:	6003      	strhi	r3, [r0, #0]
 801db90:	700a      	strbls	r2, [r1, #0]
 801db92:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801db96:	bf98      	it	ls
 801db98:	2001      	movls	r0, #1
 801db9a:	4770      	bx	lr
 801db9c:	4608      	mov	r0, r1
 801db9e:	4770      	bx	lr

0801dba0 <__assert_func>:
 801dba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dba2:	4614      	mov	r4, r2
 801dba4:	461a      	mov	r2, r3
 801dba6:	4b09      	ldr	r3, [pc, #36]	; (801dbcc <__assert_func+0x2c>)
 801dba8:	681b      	ldr	r3, [r3, #0]
 801dbaa:	4605      	mov	r5, r0
 801dbac:	68d8      	ldr	r0, [r3, #12]
 801dbae:	b14c      	cbz	r4, 801dbc4 <__assert_func+0x24>
 801dbb0:	4b07      	ldr	r3, [pc, #28]	; (801dbd0 <__assert_func+0x30>)
 801dbb2:	9100      	str	r1, [sp, #0]
 801dbb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801dbb8:	4906      	ldr	r1, [pc, #24]	; (801dbd4 <__assert_func+0x34>)
 801dbba:	462b      	mov	r3, r5
 801dbbc:	f000 f9a6 	bl	801df0c <fiprintf>
 801dbc0:	f000 fc14 	bl	801e3ec <abort>
 801dbc4:	4b04      	ldr	r3, [pc, #16]	; (801dbd8 <__assert_func+0x38>)
 801dbc6:	461c      	mov	r4, r3
 801dbc8:	e7f3      	b.n	801dbb2 <__assert_func+0x12>
 801dbca:	bf00      	nop
 801dbcc:	200000c4 	.word	0x200000c4
 801dbd0:	080206d5 	.word	0x080206d5
 801dbd4:	080206e2 	.word	0x080206e2
 801dbd8:	08020710 	.word	0x08020710

0801dbdc <__sflush_r>:
 801dbdc:	898a      	ldrh	r2, [r1, #12]
 801dbde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dbe2:	4605      	mov	r5, r0
 801dbe4:	0710      	lsls	r0, r2, #28
 801dbe6:	460c      	mov	r4, r1
 801dbe8:	d458      	bmi.n	801dc9c <__sflush_r+0xc0>
 801dbea:	684b      	ldr	r3, [r1, #4]
 801dbec:	2b00      	cmp	r3, #0
 801dbee:	dc05      	bgt.n	801dbfc <__sflush_r+0x20>
 801dbf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801dbf2:	2b00      	cmp	r3, #0
 801dbf4:	dc02      	bgt.n	801dbfc <__sflush_r+0x20>
 801dbf6:	2000      	movs	r0, #0
 801dbf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dbfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dbfe:	2e00      	cmp	r6, #0
 801dc00:	d0f9      	beq.n	801dbf6 <__sflush_r+0x1a>
 801dc02:	2300      	movs	r3, #0
 801dc04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801dc08:	682f      	ldr	r7, [r5, #0]
 801dc0a:	602b      	str	r3, [r5, #0]
 801dc0c:	d032      	beq.n	801dc74 <__sflush_r+0x98>
 801dc0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801dc10:	89a3      	ldrh	r3, [r4, #12]
 801dc12:	075a      	lsls	r2, r3, #29
 801dc14:	d505      	bpl.n	801dc22 <__sflush_r+0x46>
 801dc16:	6863      	ldr	r3, [r4, #4]
 801dc18:	1ac0      	subs	r0, r0, r3
 801dc1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dc1c:	b10b      	cbz	r3, 801dc22 <__sflush_r+0x46>
 801dc1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dc20:	1ac0      	subs	r0, r0, r3
 801dc22:	2300      	movs	r3, #0
 801dc24:	4602      	mov	r2, r0
 801dc26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dc28:	6a21      	ldr	r1, [r4, #32]
 801dc2a:	4628      	mov	r0, r5
 801dc2c:	47b0      	blx	r6
 801dc2e:	1c43      	adds	r3, r0, #1
 801dc30:	89a3      	ldrh	r3, [r4, #12]
 801dc32:	d106      	bne.n	801dc42 <__sflush_r+0x66>
 801dc34:	6829      	ldr	r1, [r5, #0]
 801dc36:	291d      	cmp	r1, #29
 801dc38:	d82c      	bhi.n	801dc94 <__sflush_r+0xb8>
 801dc3a:	4a2a      	ldr	r2, [pc, #168]	; (801dce4 <__sflush_r+0x108>)
 801dc3c:	40ca      	lsrs	r2, r1
 801dc3e:	07d6      	lsls	r6, r2, #31
 801dc40:	d528      	bpl.n	801dc94 <__sflush_r+0xb8>
 801dc42:	2200      	movs	r2, #0
 801dc44:	6062      	str	r2, [r4, #4]
 801dc46:	04d9      	lsls	r1, r3, #19
 801dc48:	6922      	ldr	r2, [r4, #16]
 801dc4a:	6022      	str	r2, [r4, #0]
 801dc4c:	d504      	bpl.n	801dc58 <__sflush_r+0x7c>
 801dc4e:	1c42      	adds	r2, r0, #1
 801dc50:	d101      	bne.n	801dc56 <__sflush_r+0x7a>
 801dc52:	682b      	ldr	r3, [r5, #0]
 801dc54:	b903      	cbnz	r3, 801dc58 <__sflush_r+0x7c>
 801dc56:	6560      	str	r0, [r4, #84]	; 0x54
 801dc58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dc5a:	602f      	str	r7, [r5, #0]
 801dc5c:	2900      	cmp	r1, #0
 801dc5e:	d0ca      	beq.n	801dbf6 <__sflush_r+0x1a>
 801dc60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dc64:	4299      	cmp	r1, r3
 801dc66:	d002      	beq.n	801dc6e <__sflush_r+0x92>
 801dc68:	4628      	mov	r0, r5
 801dc6a:	f7fb ffef 	bl	8019c4c <_free_r>
 801dc6e:	2000      	movs	r0, #0
 801dc70:	6360      	str	r0, [r4, #52]	; 0x34
 801dc72:	e7c1      	b.n	801dbf8 <__sflush_r+0x1c>
 801dc74:	6a21      	ldr	r1, [r4, #32]
 801dc76:	2301      	movs	r3, #1
 801dc78:	4628      	mov	r0, r5
 801dc7a:	47b0      	blx	r6
 801dc7c:	1c41      	adds	r1, r0, #1
 801dc7e:	d1c7      	bne.n	801dc10 <__sflush_r+0x34>
 801dc80:	682b      	ldr	r3, [r5, #0]
 801dc82:	2b00      	cmp	r3, #0
 801dc84:	d0c4      	beq.n	801dc10 <__sflush_r+0x34>
 801dc86:	2b1d      	cmp	r3, #29
 801dc88:	d001      	beq.n	801dc8e <__sflush_r+0xb2>
 801dc8a:	2b16      	cmp	r3, #22
 801dc8c:	d101      	bne.n	801dc92 <__sflush_r+0xb6>
 801dc8e:	602f      	str	r7, [r5, #0]
 801dc90:	e7b1      	b.n	801dbf6 <__sflush_r+0x1a>
 801dc92:	89a3      	ldrh	r3, [r4, #12]
 801dc94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dc98:	81a3      	strh	r3, [r4, #12]
 801dc9a:	e7ad      	b.n	801dbf8 <__sflush_r+0x1c>
 801dc9c:	690f      	ldr	r7, [r1, #16]
 801dc9e:	2f00      	cmp	r7, #0
 801dca0:	d0a9      	beq.n	801dbf6 <__sflush_r+0x1a>
 801dca2:	0793      	lsls	r3, r2, #30
 801dca4:	680e      	ldr	r6, [r1, #0]
 801dca6:	bf08      	it	eq
 801dca8:	694b      	ldreq	r3, [r1, #20]
 801dcaa:	600f      	str	r7, [r1, #0]
 801dcac:	bf18      	it	ne
 801dcae:	2300      	movne	r3, #0
 801dcb0:	eba6 0807 	sub.w	r8, r6, r7
 801dcb4:	608b      	str	r3, [r1, #8]
 801dcb6:	f1b8 0f00 	cmp.w	r8, #0
 801dcba:	dd9c      	ble.n	801dbf6 <__sflush_r+0x1a>
 801dcbc:	6a21      	ldr	r1, [r4, #32]
 801dcbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dcc0:	4643      	mov	r3, r8
 801dcc2:	463a      	mov	r2, r7
 801dcc4:	4628      	mov	r0, r5
 801dcc6:	47b0      	blx	r6
 801dcc8:	2800      	cmp	r0, #0
 801dcca:	dc06      	bgt.n	801dcda <__sflush_r+0xfe>
 801dccc:	89a3      	ldrh	r3, [r4, #12]
 801dcce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dcd2:	81a3      	strh	r3, [r4, #12]
 801dcd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dcd8:	e78e      	b.n	801dbf8 <__sflush_r+0x1c>
 801dcda:	4407      	add	r7, r0
 801dcdc:	eba8 0800 	sub.w	r8, r8, r0
 801dce0:	e7e9      	b.n	801dcb6 <__sflush_r+0xda>
 801dce2:	bf00      	nop
 801dce4:	20400001 	.word	0x20400001

0801dce8 <_fflush_r>:
 801dce8:	b538      	push	{r3, r4, r5, lr}
 801dcea:	690b      	ldr	r3, [r1, #16]
 801dcec:	4605      	mov	r5, r0
 801dcee:	460c      	mov	r4, r1
 801dcf0:	b913      	cbnz	r3, 801dcf8 <_fflush_r+0x10>
 801dcf2:	2500      	movs	r5, #0
 801dcf4:	4628      	mov	r0, r5
 801dcf6:	bd38      	pop	{r3, r4, r5, pc}
 801dcf8:	b118      	cbz	r0, 801dd02 <_fflush_r+0x1a>
 801dcfa:	6983      	ldr	r3, [r0, #24]
 801dcfc:	b90b      	cbnz	r3, 801dd02 <_fflush_r+0x1a>
 801dcfe:	f000 f887 	bl	801de10 <__sinit>
 801dd02:	4b14      	ldr	r3, [pc, #80]	; (801dd54 <_fflush_r+0x6c>)
 801dd04:	429c      	cmp	r4, r3
 801dd06:	d11b      	bne.n	801dd40 <_fflush_r+0x58>
 801dd08:	686c      	ldr	r4, [r5, #4]
 801dd0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd0e:	2b00      	cmp	r3, #0
 801dd10:	d0ef      	beq.n	801dcf2 <_fflush_r+0xa>
 801dd12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dd14:	07d0      	lsls	r0, r2, #31
 801dd16:	d404      	bmi.n	801dd22 <_fflush_r+0x3a>
 801dd18:	0599      	lsls	r1, r3, #22
 801dd1a:	d402      	bmi.n	801dd22 <_fflush_r+0x3a>
 801dd1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dd1e:	f000 f927 	bl	801df70 <__retarget_lock_acquire_recursive>
 801dd22:	4628      	mov	r0, r5
 801dd24:	4621      	mov	r1, r4
 801dd26:	f7ff ff59 	bl	801dbdc <__sflush_r>
 801dd2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dd2c:	07da      	lsls	r2, r3, #31
 801dd2e:	4605      	mov	r5, r0
 801dd30:	d4e0      	bmi.n	801dcf4 <_fflush_r+0xc>
 801dd32:	89a3      	ldrh	r3, [r4, #12]
 801dd34:	059b      	lsls	r3, r3, #22
 801dd36:	d4dd      	bmi.n	801dcf4 <_fflush_r+0xc>
 801dd38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dd3a:	f000 f91a 	bl	801df72 <__retarget_lock_release_recursive>
 801dd3e:	e7d9      	b.n	801dcf4 <_fflush_r+0xc>
 801dd40:	4b05      	ldr	r3, [pc, #20]	; (801dd58 <_fflush_r+0x70>)
 801dd42:	429c      	cmp	r4, r3
 801dd44:	d101      	bne.n	801dd4a <_fflush_r+0x62>
 801dd46:	68ac      	ldr	r4, [r5, #8]
 801dd48:	e7df      	b.n	801dd0a <_fflush_r+0x22>
 801dd4a:	4b04      	ldr	r3, [pc, #16]	; (801dd5c <_fflush_r+0x74>)
 801dd4c:	429c      	cmp	r4, r3
 801dd4e:	bf08      	it	eq
 801dd50:	68ec      	ldreq	r4, [r5, #12]
 801dd52:	e7da      	b.n	801dd0a <_fflush_r+0x22>
 801dd54:	08020734 	.word	0x08020734
 801dd58:	08020754 	.word	0x08020754
 801dd5c:	08020714 	.word	0x08020714

0801dd60 <std>:
 801dd60:	2300      	movs	r3, #0
 801dd62:	b510      	push	{r4, lr}
 801dd64:	4604      	mov	r4, r0
 801dd66:	e9c0 3300 	strd	r3, r3, [r0]
 801dd6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dd6e:	6083      	str	r3, [r0, #8]
 801dd70:	8181      	strh	r1, [r0, #12]
 801dd72:	6643      	str	r3, [r0, #100]	; 0x64
 801dd74:	81c2      	strh	r2, [r0, #14]
 801dd76:	6183      	str	r3, [r0, #24]
 801dd78:	4619      	mov	r1, r3
 801dd7a:	2208      	movs	r2, #8
 801dd7c:	305c      	adds	r0, #92	; 0x5c
 801dd7e:	f7fb ff5d 	bl	8019c3c <memset>
 801dd82:	4b05      	ldr	r3, [pc, #20]	; (801dd98 <std+0x38>)
 801dd84:	6263      	str	r3, [r4, #36]	; 0x24
 801dd86:	4b05      	ldr	r3, [pc, #20]	; (801dd9c <std+0x3c>)
 801dd88:	62a3      	str	r3, [r4, #40]	; 0x28
 801dd8a:	4b05      	ldr	r3, [pc, #20]	; (801dda0 <std+0x40>)
 801dd8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801dd8e:	4b05      	ldr	r3, [pc, #20]	; (801dda4 <std+0x44>)
 801dd90:	6224      	str	r4, [r4, #32]
 801dd92:	6323      	str	r3, [r4, #48]	; 0x30
 801dd94:	bd10      	pop	{r4, pc}
 801dd96:	bf00      	nop
 801dd98:	0801abf5 	.word	0x0801abf5
 801dd9c:	0801ac17 	.word	0x0801ac17
 801dda0:	0801ac4f 	.word	0x0801ac4f
 801dda4:	0801ac73 	.word	0x0801ac73

0801dda8 <_cleanup_r>:
 801dda8:	4901      	ldr	r1, [pc, #4]	; (801ddb0 <_cleanup_r+0x8>)
 801ddaa:	f000 b8c1 	b.w	801df30 <_fwalk_reent>
 801ddae:	bf00      	nop
 801ddb0:	0801dce9 	.word	0x0801dce9

0801ddb4 <__sfmoreglue>:
 801ddb4:	b570      	push	{r4, r5, r6, lr}
 801ddb6:	1e4a      	subs	r2, r1, #1
 801ddb8:	2568      	movs	r5, #104	; 0x68
 801ddba:	4355      	muls	r5, r2
 801ddbc:	460e      	mov	r6, r1
 801ddbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ddc2:	f7fb ff93 	bl	8019cec <_malloc_r>
 801ddc6:	4604      	mov	r4, r0
 801ddc8:	b140      	cbz	r0, 801dddc <__sfmoreglue+0x28>
 801ddca:	2100      	movs	r1, #0
 801ddcc:	e9c0 1600 	strd	r1, r6, [r0]
 801ddd0:	300c      	adds	r0, #12
 801ddd2:	60a0      	str	r0, [r4, #8]
 801ddd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ddd8:	f7fb ff30 	bl	8019c3c <memset>
 801dddc:	4620      	mov	r0, r4
 801ddde:	bd70      	pop	{r4, r5, r6, pc}

0801dde0 <__sfp_lock_acquire>:
 801dde0:	4801      	ldr	r0, [pc, #4]	; (801dde8 <__sfp_lock_acquire+0x8>)
 801dde2:	f000 b8c5 	b.w	801df70 <__retarget_lock_acquire_recursive>
 801dde6:	bf00      	nop
 801dde8:	2000a6e0 	.word	0x2000a6e0

0801ddec <__sfp_lock_release>:
 801ddec:	4801      	ldr	r0, [pc, #4]	; (801ddf4 <__sfp_lock_release+0x8>)
 801ddee:	f000 b8c0 	b.w	801df72 <__retarget_lock_release_recursive>
 801ddf2:	bf00      	nop
 801ddf4:	2000a6e0 	.word	0x2000a6e0

0801ddf8 <__sinit_lock_acquire>:
 801ddf8:	4801      	ldr	r0, [pc, #4]	; (801de00 <__sinit_lock_acquire+0x8>)
 801ddfa:	f000 b8b9 	b.w	801df70 <__retarget_lock_acquire_recursive>
 801ddfe:	bf00      	nop
 801de00:	2000a6db 	.word	0x2000a6db

0801de04 <__sinit_lock_release>:
 801de04:	4801      	ldr	r0, [pc, #4]	; (801de0c <__sinit_lock_release+0x8>)
 801de06:	f000 b8b4 	b.w	801df72 <__retarget_lock_release_recursive>
 801de0a:	bf00      	nop
 801de0c:	2000a6db 	.word	0x2000a6db

0801de10 <__sinit>:
 801de10:	b510      	push	{r4, lr}
 801de12:	4604      	mov	r4, r0
 801de14:	f7ff fff0 	bl	801ddf8 <__sinit_lock_acquire>
 801de18:	69a3      	ldr	r3, [r4, #24]
 801de1a:	b11b      	cbz	r3, 801de24 <__sinit+0x14>
 801de1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801de20:	f7ff bff0 	b.w	801de04 <__sinit_lock_release>
 801de24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801de28:	6523      	str	r3, [r4, #80]	; 0x50
 801de2a:	4b13      	ldr	r3, [pc, #76]	; (801de78 <__sinit+0x68>)
 801de2c:	4a13      	ldr	r2, [pc, #76]	; (801de7c <__sinit+0x6c>)
 801de2e:	681b      	ldr	r3, [r3, #0]
 801de30:	62a2      	str	r2, [r4, #40]	; 0x28
 801de32:	42a3      	cmp	r3, r4
 801de34:	bf04      	itt	eq
 801de36:	2301      	moveq	r3, #1
 801de38:	61a3      	streq	r3, [r4, #24]
 801de3a:	4620      	mov	r0, r4
 801de3c:	f000 f820 	bl	801de80 <__sfp>
 801de40:	6060      	str	r0, [r4, #4]
 801de42:	4620      	mov	r0, r4
 801de44:	f000 f81c 	bl	801de80 <__sfp>
 801de48:	60a0      	str	r0, [r4, #8]
 801de4a:	4620      	mov	r0, r4
 801de4c:	f000 f818 	bl	801de80 <__sfp>
 801de50:	2200      	movs	r2, #0
 801de52:	60e0      	str	r0, [r4, #12]
 801de54:	2104      	movs	r1, #4
 801de56:	6860      	ldr	r0, [r4, #4]
 801de58:	f7ff ff82 	bl	801dd60 <std>
 801de5c:	68a0      	ldr	r0, [r4, #8]
 801de5e:	2201      	movs	r2, #1
 801de60:	2109      	movs	r1, #9
 801de62:	f7ff ff7d 	bl	801dd60 <std>
 801de66:	68e0      	ldr	r0, [r4, #12]
 801de68:	2202      	movs	r2, #2
 801de6a:	2112      	movs	r1, #18
 801de6c:	f7ff ff78 	bl	801dd60 <std>
 801de70:	2301      	movs	r3, #1
 801de72:	61a3      	str	r3, [r4, #24]
 801de74:	e7d2      	b.n	801de1c <__sinit+0xc>
 801de76:	bf00      	nop
 801de78:	080202c0 	.word	0x080202c0
 801de7c:	0801dda9 	.word	0x0801dda9

0801de80 <__sfp>:
 801de80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de82:	4607      	mov	r7, r0
 801de84:	f7ff ffac 	bl	801dde0 <__sfp_lock_acquire>
 801de88:	4b1e      	ldr	r3, [pc, #120]	; (801df04 <__sfp+0x84>)
 801de8a:	681e      	ldr	r6, [r3, #0]
 801de8c:	69b3      	ldr	r3, [r6, #24]
 801de8e:	b913      	cbnz	r3, 801de96 <__sfp+0x16>
 801de90:	4630      	mov	r0, r6
 801de92:	f7ff ffbd 	bl	801de10 <__sinit>
 801de96:	3648      	adds	r6, #72	; 0x48
 801de98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801de9c:	3b01      	subs	r3, #1
 801de9e:	d503      	bpl.n	801dea8 <__sfp+0x28>
 801dea0:	6833      	ldr	r3, [r6, #0]
 801dea2:	b30b      	cbz	r3, 801dee8 <__sfp+0x68>
 801dea4:	6836      	ldr	r6, [r6, #0]
 801dea6:	e7f7      	b.n	801de98 <__sfp+0x18>
 801dea8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801deac:	b9d5      	cbnz	r5, 801dee4 <__sfp+0x64>
 801deae:	4b16      	ldr	r3, [pc, #88]	; (801df08 <__sfp+0x88>)
 801deb0:	60e3      	str	r3, [r4, #12]
 801deb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801deb6:	6665      	str	r5, [r4, #100]	; 0x64
 801deb8:	f000 f859 	bl	801df6e <__retarget_lock_init_recursive>
 801debc:	f7ff ff96 	bl	801ddec <__sfp_lock_release>
 801dec0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801dec4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801dec8:	6025      	str	r5, [r4, #0]
 801deca:	61a5      	str	r5, [r4, #24]
 801decc:	2208      	movs	r2, #8
 801dece:	4629      	mov	r1, r5
 801ded0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ded4:	f7fb feb2 	bl	8019c3c <memset>
 801ded8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801dedc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801dee0:	4620      	mov	r0, r4
 801dee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dee4:	3468      	adds	r4, #104	; 0x68
 801dee6:	e7d9      	b.n	801de9c <__sfp+0x1c>
 801dee8:	2104      	movs	r1, #4
 801deea:	4638      	mov	r0, r7
 801deec:	f7ff ff62 	bl	801ddb4 <__sfmoreglue>
 801def0:	4604      	mov	r4, r0
 801def2:	6030      	str	r0, [r6, #0]
 801def4:	2800      	cmp	r0, #0
 801def6:	d1d5      	bne.n	801dea4 <__sfp+0x24>
 801def8:	f7ff ff78 	bl	801ddec <__sfp_lock_release>
 801defc:	230c      	movs	r3, #12
 801defe:	603b      	str	r3, [r7, #0]
 801df00:	e7ee      	b.n	801dee0 <__sfp+0x60>
 801df02:	bf00      	nop
 801df04:	080202c0 	.word	0x080202c0
 801df08:	ffff0001 	.word	0xffff0001

0801df0c <fiprintf>:
 801df0c:	b40e      	push	{r1, r2, r3}
 801df0e:	b503      	push	{r0, r1, lr}
 801df10:	4601      	mov	r1, r0
 801df12:	ab03      	add	r3, sp, #12
 801df14:	4805      	ldr	r0, [pc, #20]	; (801df2c <fiprintf+0x20>)
 801df16:	f853 2b04 	ldr.w	r2, [r3], #4
 801df1a:	6800      	ldr	r0, [r0, #0]
 801df1c:	9301      	str	r3, [sp, #4]
 801df1e:	f000 f875 	bl	801e00c <_vfiprintf_r>
 801df22:	b002      	add	sp, #8
 801df24:	f85d eb04 	ldr.w	lr, [sp], #4
 801df28:	b003      	add	sp, #12
 801df2a:	4770      	bx	lr
 801df2c:	200000c4 	.word	0x200000c4

0801df30 <_fwalk_reent>:
 801df30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801df34:	4606      	mov	r6, r0
 801df36:	4688      	mov	r8, r1
 801df38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801df3c:	2700      	movs	r7, #0
 801df3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801df42:	f1b9 0901 	subs.w	r9, r9, #1
 801df46:	d505      	bpl.n	801df54 <_fwalk_reent+0x24>
 801df48:	6824      	ldr	r4, [r4, #0]
 801df4a:	2c00      	cmp	r4, #0
 801df4c:	d1f7      	bne.n	801df3e <_fwalk_reent+0xe>
 801df4e:	4638      	mov	r0, r7
 801df50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801df54:	89ab      	ldrh	r3, [r5, #12]
 801df56:	2b01      	cmp	r3, #1
 801df58:	d907      	bls.n	801df6a <_fwalk_reent+0x3a>
 801df5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801df5e:	3301      	adds	r3, #1
 801df60:	d003      	beq.n	801df6a <_fwalk_reent+0x3a>
 801df62:	4629      	mov	r1, r5
 801df64:	4630      	mov	r0, r6
 801df66:	47c0      	blx	r8
 801df68:	4307      	orrs	r7, r0
 801df6a:	3568      	adds	r5, #104	; 0x68
 801df6c:	e7e9      	b.n	801df42 <_fwalk_reent+0x12>

0801df6e <__retarget_lock_init_recursive>:
 801df6e:	4770      	bx	lr

0801df70 <__retarget_lock_acquire_recursive>:
 801df70:	4770      	bx	lr

0801df72 <__retarget_lock_release_recursive>:
 801df72:	4770      	bx	lr

0801df74 <memmove>:
 801df74:	4288      	cmp	r0, r1
 801df76:	b510      	push	{r4, lr}
 801df78:	eb01 0402 	add.w	r4, r1, r2
 801df7c:	d902      	bls.n	801df84 <memmove+0x10>
 801df7e:	4284      	cmp	r4, r0
 801df80:	4623      	mov	r3, r4
 801df82:	d807      	bhi.n	801df94 <memmove+0x20>
 801df84:	1e43      	subs	r3, r0, #1
 801df86:	42a1      	cmp	r1, r4
 801df88:	d008      	beq.n	801df9c <memmove+0x28>
 801df8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801df8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801df92:	e7f8      	b.n	801df86 <memmove+0x12>
 801df94:	4402      	add	r2, r0
 801df96:	4601      	mov	r1, r0
 801df98:	428a      	cmp	r2, r1
 801df9a:	d100      	bne.n	801df9e <memmove+0x2a>
 801df9c:	bd10      	pop	{r4, pc}
 801df9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801dfa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801dfa6:	e7f7      	b.n	801df98 <memmove+0x24>

0801dfa8 <_malloc_usable_size_r>:
 801dfa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dfac:	1f18      	subs	r0, r3, #4
 801dfae:	2b00      	cmp	r3, #0
 801dfb0:	bfbc      	itt	lt
 801dfb2:	580b      	ldrlt	r3, [r1, r0]
 801dfb4:	18c0      	addlt	r0, r0, r3
 801dfb6:	4770      	bx	lr

0801dfb8 <__sfputc_r>:
 801dfb8:	6893      	ldr	r3, [r2, #8]
 801dfba:	3b01      	subs	r3, #1
 801dfbc:	2b00      	cmp	r3, #0
 801dfbe:	b410      	push	{r4}
 801dfc0:	6093      	str	r3, [r2, #8]
 801dfc2:	da08      	bge.n	801dfd6 <__sfputc_r+0x1e>
 801dfc4:	6994      	ldr	r4, [r2, #24]
 801dfc6:	42a3      	cmp	r3, r4
 801dfc8:	db01      	blt.n	801dfce <__sfputc_r+0x16>
 801dfca:	290a      	cmp	r1, #10
 801dfcc:	d103      	bne.n	801dfd6 <__sfputc_r+0x1e>
 801dfce:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dfd2:	f000 b94b 	b.w	801e26c <__swbuf_r>
 801dfd6:	6813      	ldr	r3, [r2, #0]
 801dfd8:	1c58      	adds	r0, r3, #1
 801dfda:	6010      	str	r0, [r2, #0]
 801dfdc:	7019      	strb	r1, [r3, #0]
 801dfde:	4608      	mov	r0, r1
 801dfe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dfe4:	4770      	bx	lr

0801dfe6 <__sfputs_r>:
 801dfe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfe8:	4606      	mov	r6, r0
 801dfea:	460f      	mov	r7, r1
 801dfec:	4614      	mov	r4, r2
 801dfee:	18d5      	adds	r5, r2, r3
 801dff0:	42ac      	cmp	r4, r5
 801dff2:	d101      	bne.n	801dff8 <__sfputs_r+0x12>
 801dff4:	2000      	movs	r0, #0
 801dff6:	e007      	b.n	801e008 <__sfputs_r+0x22>
 801dff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dffc:	463a      	mov	r2, r7
 801dffe:	4630      	mov	r0, r6
 801e000:	f7ff ffda 	bl	801dfb8 <__sfputc_r>
 801e004:	1c43      	adds	r3, r0, #1
 801e006:	d1f3      	bne.n	801dff0 <__sfputs_r+0xa>
 801e008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e00c <_vfiprintf_r>:
 801e00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e010:	460d      	mov	r5, r1
 801e012:	b09d      	sub	sp, #116	; 0x74
 801e014:	4614      	mov	r4, r2
 801e016:	4698      	mov	r8, r3
 801e018:	4606      	mov	r6, r0
 801e01a:	b118      	cbz	r0, 801e024 <_vfiprintf_r+0x18>
 801e01c:	6983      	ldr	r3, [r0, #24]
 801e01e:	b90b      	cbnz	r3, 801e024 <_vfiprintf_r+0x18>
 801e020:	f7ff fef6 	bl	801de10 <__sinit>
 801e024:	4b89      	ldr	r3, [pc, #548]	; (801e24c <_vfiprintf_r+0x240>)
 801e026:	429d      	cmp	r5, r3
 801e028:	d11b      	bne.n	801e062 <_vfiprintf_r+0x56>
 801e02a:	6875      	ldr	r5, [r6, #4]
 801e02c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e02e:	07d9      	lsls	r1, r3, #31
 801e030:	d405      	bmi.n	801e03e <_vfiprintf_r+0x32>
 801e032:	89ab      	ldrh	r3, [r5, #12]
 801e034:	059a      	lsls	r2, r3, #22
 801e036:	d402      	bmi.n	801e03e <_vfiprintf_r+0x32>
 801e038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e03a:	f7ff ff99 	bl	801df70 <__retarget_lock_acquire_recursive>
 801e03e:	89ab      	ldrh	r3, [r5, #12]
 801e040:	071b      	lsls	r3, r3, #28
 801e042:	d501      	bpl.n	801e048 <_vfiprintf_r+0x3c>
 801e044:	692b      	ldr	r3, [r5, #16]
 801e046:	b9eb      	cbnz	r3, 801e084 <_vfiprintf_r+0x78>
 801e048:	4629      	mov	r1, r5
 801e04a:	4630      	mov	r0, r6
 801e04c:	f000 f960 	bl	801e310 <__swsetup_r>
 801e050:	b1c0      	cbz	r0, 801e084 <_vfiprintf_r+0x78>
 801e052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e054:	07dc      	lsls	r4, r3, #31
 801e056:	d50e      	bpl.n	801e076 <_vfiprintf_r+0x6a>
 801e058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e05c:	b01d      	add	sp, #116	; 0x74
 801e05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e062:	4b7b      	ldr	r3, [pc, #492]	; (801e250 <_vfiprintf_r+0x244>)
 801e064:	429d      	cmp	r5, r3
 801e066:	d101      	bne.n	801e06c <_vfiprintf_r+0x60>
 801e068:	68b5      	ldr	r5, [r6, #8]
 801e06a:	e7df      	b.n	801e02c <_vfiprintf_r+0x20>
 801e06c:	4b79      	ldr	r3, [pc, #484]	; (801e254 <_vfiprintf_r+0x248>)
 801e06e:	429d      	cmp	r5, r3
 801e070:	bf08      	it	eq
 801e072:	68f5      	ldreq	r5, [r6, #12]
 801e074:	e7da      	b.n	801e02c <_vfiprintf_r+0x20>
 801e076:	89ab      	ldrh	r3, [r5, #12]
 801e078:	0598      	lsls	r0, r3, #22
 801e07a:	d4ed      	bmi.n	801e058 <_vfiprintf_r+0x4c>
 801e07c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e07e:	f7ff ff78 	bl	801df72 <__retarget_lock_release_recursive>
 801e082:	e7e9      	b.n	801e058 <_vfiprintf_r+0x4c>
 801e084:	2300      	movs	r3, #0
 801e086:	9309      	str	r3, [sp, #36]	; 0x24
 801e088:	2320      	movs	r3, #32
 801e08a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e08e:	f8cd 800c 	str.w	r8, [sp, #12]
 801e092:	2330      	movs	r3, #48	; 0x30
 801e094:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e258 <_vfiprintf_r+0x24c>
 801e098:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e09c:	f04f 0901 	mov.w	r9, #1
 801e0a0:	4623      	mov	r3, r4
 801e0a2:	469a      	mov	sl, r3
 801e0a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e0a8:	b10a      	cbz	r2, 801e0ae <_vfiprintf_r+0xa2>
 801e0aa:	2a25      	cmp	r2, #37	; 0x25
 801e0ac:	d1f9      	bne.n	801e0a2 <_vfiprintf_r+0x96>
 801e0ae:	ebba 0b04 	subs.w	fp, sl, r4
 801e0b2:	d00b      	beq.n	801e0cc <_vfiprintf_r+0xc0>
 801e0b4:	465b      	mov	r3, fp
 801e0b6:	4622      	mov	r2, r4
 801e0b8:	4629      	mov	r1, r5
 801e0ba:	4630      	mov	r0, r6
 801e0bc:	f7ff ff93 	bl	801dfe6 <__sfputs_r>
 801e0c0:	3001      	adds	r0, #1
 801e0c2:	f000 80aa 	beq.w	801e21a <_vfiprintf_r+0x20e>
 801e0c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e0c8:	445a      	add	r2, fp
 801e0ca:	9209      	str	r2, [sp, #36]	; 0x24
 801e0cc:	f89a 3000 	ldrb.w	r3, [sl]
 801e0d0:	2b00      	cmp	r3, #0
 801e0d2:	f000 80a2 	beq.w	801e21a <_vfiprintf_r+0x20e>
 801e0d6:	2300      	movs	r3, #0
 801e0d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e0dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e0e0:	f10a 0a01 	add.w	sl, sl, #1
 801e0e4:	9304      	str	r3, [sp, #16]
 801e0e6:	9307      	str	r3, [sp, #28]
 801e0e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e0ec:	931a      	str	r3, [sp, #104]	; 0x68
 801e0ee:	4654      	mov	r4, sl
 801e0f0:	2205      	movs	r2, #5
 801e0f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e0f6:	4858      	ldr	r0, [pc, #352]	; (801e258 <_vfiprintf_r+0x24c>)
 801e0f8:	f7e2 f872 	bl	80001e0 <memchr>
 801e0fc:	9a04      	ldr	r2, [sp, #16]
 801e0fe:	b9d8      	cbnz	r0, 801e138 <_vfiprintf_r+0x12c>
 801e100:	06d1      	lsls	r1, r2, #27
 801e102:	bf44      	itt	mi
 801e104:	2320      	movmi	r3, #32
 801e106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e10a:	0713      	lsls	r3, r2, #28
 801e10c:	bf44      	itt	mi
 801e10e:	232b      	movmi	r3, #43	; 0x2b
 801e110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e114:	f89a 3000 	ldrb.w	r3, [sl]
 801e118:	2b2a      	cmp	r3, #42	; 0x2a
 801e11a:	d015      	beq.n	801e148 <_vfiprintf_r+0x13c>
 801e11c:	9a07      	ldr	r2, [sp, #28]
 801e11e:	4654      	mov	r4, sl
 801e120:	2000      	movs	r0, #0
 801e122:	f04f 0c0a 	mov.w	ip, #10
 801e126:	4621      	mov	r1, r4
 801e128:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e12c:	3b30      	subs	r3, #48	; 0x30
 801e12e:	2b09      	cmp	r3, #9
 801e130:	d94e      	bls.n	801e1d0 <_vfiprintf_r+0x1c4>
 801e132:	b1b0      	cbz	r0, 801e162 <_vfiprintf_r+0x156>
 801e134:	9207      	str	r2, [sp, #28]
 801e136:	e014      	b.n	801e162 <_vfiprintf_r+0x156>
 801e138:	eba0 0308 	sub.w	r3, r0, r8
 801e13c:	fa09 f303 	lsl.w	r3, r9, r3
 801e140:	4313      	orrs	r3, r2
 801e142:	9304      	str	r3, [sp, #16]
 801e144:	46a2      	mov	sl, r4
 801e146:	e7d2      	b.n	801e0ee <_vfiprintf_r+0xe2>
 801e148:	9b03      	ldr	r3, [sp, #12]
 801e14a:	1d19      	adds	r1, r3, #4
 801e14c:	681b      	ldr	r3, [r3, #0]
 801e14e:	9103      	str	r1, [sp, #12]
 801e150:	2b00      	cmp	r3, #0
 801e152:	bfbb      	ittet	lt
 801e154:	425b      	neglt	r3, r3
 801e156:	f042 0202 	orrlt.w	r2, r2, #2
 801e15a:	9307      	strge	r3, [sp, #28]
 801e15c:	9307      	strlt	r3, [sp, #28]
 801e15e:	bfb8      	it	lt
 801e160:	9204      	strlt	r2, [sp, #16]
 801e162:	7823      	ldrb	r3, [r4, #0]
 801e164:	2b2e      	cmp	r3, #46	; 0x2e
 801e166:	d10c      	bne.n	801e182 <_vfiprintf_r+0x176>
 801e168:	7863      	ldrb	r3, [r4, #1]
 801e16a:	2b2a      	cmp	r3, #42	; 0x2a
 801e16c:	d135      	bne.n	801e1da <_vfiprintf_r+0x1ce>
 801e16e:	9b03      	ldr	r3, [sp, #12]
 801e170:	1d1a      	adds	r2, r3, #4
 801e172:	681b      	ldr	r3, [r3, #0]
 801e174:	9203      	str	r2, [sp, #12]
 801e176:	2b00      	cmp	r3, #0
 801e178:	bfb8      	it	lt
 801e17a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801e17e:	3402      	adds	r4, #2
 801e180:	9305      	str	r3, [sp, #20]
 801e182:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e268 <_vfiprintf_r+0x25c>
 801e186:	7821      	ldrb	r1, [r4, #0]
 801e188:	2203      	movs	r2, #3
 801e18a:	4650      	mov	r0, sl
 801e18c:	f7e2 f828 	bl	80001e0 <memchr>
 801e190:	b140      	cbz	r0, 801e1a4 <_vfiprintf_r+0x198>
 801e192:	2340      	movs	r3, #64	; 0x40
 801e194:	eba0 000a 	sub.w	r0, r0, sl
 801e198:	fa03 f000 	lsl.w	r0, r3, r0
 801e19c:	9b04      	ldr	r3, [sp, #16]
 801e19e:	4303      	orrs	r3, r0
 801e1a0:	3401      	adds	r4, #1
 801e1a2:	9304      	str	r3, [sp, #16]
 801e1a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e1a8:	482c      	ldr	r0, [pc, #176]	; (801e25c <_vfiprintf_r+0x250>)
 801e1aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e1ae:	2206      	movs	r2, #6
 801e1b0:	f7e2 f816 	bl	80001e0 <memchr>
 801e1b4:	2800      	cmp	r0, #0
 801e1b6:	d03f      	beq.n	801e238 <_vfiprintf_r+0x22c>
 801e1b8:	4b29      	ldr	r3, [pc, #164]	; (801e260 <_vfiprintf_r+0x254>)
 801e1ba:	bb1b      	cbnz	r3, 801e204 <_vfiprintf_r+0x1f8>
 801e1bc:	9b03      	ldr	r3, [sp, #12]
 801e1be:	3307      	adds	r3, #7
 801e1c0:	f023 0307 	bic.w	r3, r3, #7
 801e1c4:	3308      	adds	r3, #8
 801e1c6:	9303      	str	r3, [sp, #12]
 801e1c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e1ca:	443b      	add	r3, r7
 801e1cc:	9309      	str	r3, [sp, #36]	; 0x24
 801e1ce:	e767      	b.n	801e0a0 <_vfiprintf_r+0x94>
 801e1d0:	fb0c 3202 	mla	r2, ip, r2, r3
 801e1d4:	460c      	mov	r4, r1
 801e1d6:	2001      	movs	r0, #1
 801e1d8:	e7a5      	b.n	801e126 <_vfiprintf_r+0x11a>
 801e1da:	2300      	movs	r3, #0
 801e1dc:	3401      	adds	r4, #1
 801e1de:	9305      	str	r3, [sp, #20]
 801e1e0:	4619      	mov	r1, r3
 801e1e2:	f04f 0c0a 	mov.w	ip, #10
 801e1e6:	4620      	mov	r0, r4
 801e1e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e1ec:	3a30      	subs	r2, #48	; 0x30
 801e1ee:	2a09      	cmp	r2, #9
 801e1f0:	d903      	bls.n	801e1fa <_vfiprintf_r+0x1ee>
 801e1f2:	2b00      	cmp	r3, #0
 801e1f4:	d0c5      	beq.n	801e182 <_vfiprintf_r+0x176>
 801e1f6:	9105      	str	r1, [sp, #20]
 801e1f8:	e7c3      	b.n	801e182 <_vfiprintf_r+0x176>
 801e1fa:	fb0c 2101 	mla	r1, ip, r1, r2
 801e1fe:	4604      	mov	r4, r0
 801e200:	2301      	movs	r3, #1
 801e202:	e7f0      	b.n	801e1e6 <_vfiprintf_r+0x1da>
 801e204:	ab03      	add	r3, sp, #12
 801e206:	9300      	str	r3, [sp, #0]
 801e208:	462a      	mov	r2, r5
 801e20a:	4b16      	ldr	r3, [pc, #88]	; (801e264 <_vfiprintf_r+0x258>)
 801e20c:	a904      	add	r1, sp, #16
 801e20e:	4630      	mov	r0, r6
 801e210:	f7fb fe66 	bl	8019ee0 <_printf_float>
 801e214:	4607      	mov	r7, r0
 801e216:	1c78      	adds	r0, r7, #1
 801e218:	d1d6      	bne.n	801e1c8 <_vfiprintf_r+0x1bc>
 801e21a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e21c:	07d9      	lsls	r1, r3, #31
 801e21e:	d405      	bmi.n	801e22c <_vfiprintf_r+0x220>
 801e220:	89ab      	ldrh	r3, [r5, #12]
 801e222:	059a      	lsls	r2, r3, #22
 801e224:	d402      	bmi.n	801e22c <_vfiprintf_r+0x220>
 801e226:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e228:	f7ff fea3 	bl	801df72 <__retarget_lock_release_recursive>
 801e22c:	89ab      	ldrh	r3, [r5, #12]
 801e22e:	065b      	lsls	r3, r3, #25
 801e230:	f53f af12 	bmi.w	801e058 <_vfiprintf_r+0x4c>
 801e234:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e236:	e711      	b.n	801e05c <_vfiprintf_r+0x50>
 801e238:	ab03      	add	r3, sp, #12
 801e23a:	9300      	str	r3, [sp, #0]
 801e23c:	462a      	mov	r2, r5
 801e23e:	4b09      	ldr	r3, [pc, #36]	; (801e264 <_vfiprintf_r+0x258>)
 801e240:	a904      	add	r1, sp, #16
 801e242:	4630      	mov	r0, r6
 801e244:	f7fc f8f0 	bl	801a428 <_printf_i>
 801e248:	e7e4      	b.n	801e214 <_vfiprintf_r+0x208>
 801e24a:	bf00      	nop
 801e24c:	08020734 	.word	0x08020734
 801e250:	08020754 	.word	0x08020754
 801e254:	08020714 	.word	0x08020714
 801e258:	080206c4 	.word	0x080206c4
 801e25c:	080206ce 	.word	0x080206ce
 801e260:	08019ee1 	.word	0x08019ee1
 801e264:	0801dfe7 	.word	0x0801dfe7
 801e268:	080206ca 	.word	0x080206ca

0801e26c <__swbuf_r>:
 801e26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e26e:	460e      	mov	r6, r1
 801e270:	4614      	mov	r4, r2
 801e272:	4605      	mov	r5, r0
 801e274:	b118      	cbz	r0, 801e27e <__swbuf_r+0x12>
 801e276:	6983      	ldr	r3, [r0, #24]
 801e278:	b90b      	cbnz	r3, 801e27e <__swbuf_r+0x12>
 801e27a:	f7ff fdc9 	bl	801de10 <__sinit>
 801e27e:	4b21      	ldr	r3, [pc, #132]	; (801e304 <__swbuf_r+0x98>)
 801e280:	429c      	cmp	r4, r3
 801e282:	d12b      	bne.n	801e2dc <__swbuf_r+0x70>
 801e284:	686c      	ldr	r4, [r5, #4]
 801e286:	69a3      	ldr	r3, [r4, #24]
 801e288:	60a3      	str	r3, [r4, #8]
 801e28a:	89a3      	ldrh	r3, [r4, #12]
 801e28c:	071a      	lsls	r2, r3, #28
 801e28e:	d52f      	bpl.n	801e2f0 <__swbuf_r+0x84>
 801e290:	6923      	ldr	r3, [r4, #16]
 801e292:	b36b      	cbz	r3, 801e2f0 <__swbuf_r+0x84>
 801e294:	6923      	ldr	r3, [r4, #16]
 801e296:	6820      	ldr	r0, [r4, #0]
 801e298:	1ac0      	subs	r0, r0, r3
 801e29a:	6963      	ldr	r3, [r4, #20]
 801e29c:	b2f6      	uxtb	r6, r6
 801e29e:	4283      	cmp	r3, r0
 801e2a0:	4637      	mov	r7, r6
 801e2a2:	dc04      	bgt.n	801e2ae <__swbuf_r+0x42>
 801e2a4:	4621      	mov	r1, r4
 801e2a6:	4628      	mov	r0, r5
 801e2a8:	f7ff fd1e 	bl	801dce8 <_fflush_r>
 801e2ac:	bb30      	cbnz	r0, 801e2fc <__swbuf_r+0x90>
 801e2ae:	68a3      	ldr	r3, [r4, #8]
 801e2b0:	3b01      	subs	r3, #1
 801e2b2:	60a3      	str	r3, [r4, #8]
 801e2b4:	6823      	ldr	r3, [r4, #0]
 801e2b6:	1c5a      	adds	r2, r3, #1
 801e2b8:	6022      	str	r2, [r4, #0]
 801e2ba:	701e      	strb	r6, [r3, #0]
 801e2bc:	6963      	ldr	r3, [r4, #20]
 801e2be:	3001      	adds	r0, #1
 801e2c0:	4283      	cmp	r3, r0
 801e2c2:	d004      	beq.n	801e2ce <__swbuf_r+0x62>
 801e2c4:	89a3      	ldrh	r3, [r4, #12]
 801e2c6:	07db      	lsls	r3, r3, #31
 801e2c8:	d506      	bpl.n	801e2d8 <__swbuf_r+0x6c>
 801e2ca:	2e0a      	cmp	r6, #10
 801e2cc:	d104      	bne.n	801e2d8 <__swbuf_r+0x6c>
 801e2ce:	4621      	mov	r1, r4
 801e2d0:	4628      	mov	r0, r5
 801e2d2:	f7ff fd09 	bl	801dce8 <_fflush_r>
 801e2d6:	b988      	cbnz	r0, 801e2fc <__swbuf_r+0x90>
 801e2d8:	4638      	mov	r0, r7
 801e2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e2dc:	4b0a      	ldr	r3, [pc, #40]	; (801e308 <__swbuf_r+0x9c>)
 801e2de:	429c      	cmp	r4, r3
 801e2e0:	d101      	bne.n	801e2e6 <__swbuf_r+0x7a>
 801e2e2:	68ac      	ldr	r4, [r5, #8]
 801e2e4:	e7cf      	b.n	801e286 <__swbuf_r+0x1a>
 801e2e6:	4b09      	ldr	r3, [pc, #36]	; (801e30c <__swbuf_r+0xa0>)
 801e2e8:	429c      	cmp	r4, r3
 801e2ea:	bf08      	it	eq
 801e2ec:	68ec      	ldreq	r4, [r5, #12]
 801e2ee:	e7ca      	b.n	801e286 <__swbuf_r+0x1a>
 801e2f0:	4621      	mov	r1, r4
 801e2f2:	4628      	mov	r0, r5
 801e2f4:	f000 f80c 	bl	801e310 <__swsetup_r>
 801e2f8:	2800      	cmp	r0, #0
 801e2fa:	d0cb      	beq.n	801e294 <__swbuf_r+0x28>
 801e2fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801e300:	e7ea      	b.n	801e2d8 <__swbuf_r+0x6c>
 801e302:	bf00      	nop
 801e304:	08020734 	.word	0x08020734
 801e308:	08020754 	.word	0x08020754
 801e30c:	08020714 	.word	0x08020714

0801e310 <__swsetup_r>:
 801e310:	4b32      	ldr	r3, [pc, #200]	; (801e3dc <__swsetup_r+0xcc>)
 801e312:	b570      	push	{r4, r5, r6, lr}
 801e314:	681d      	ldr	r5, [r3, #0]
 801e316:	4606      	mov	r6, r0
 801e318:	460c      	mov	r4, r1
 801e31a:	b125      	cbz	r5, 801e326 <__swsetup_r+0x16>
 801e31c:	69ab      	ldr	r3, [r5, #24]
 801e31e:	b913      	cbnz	r3, 801e326 <__swsetup_r+0x16>
 801e320:	4628      	mov	r0, r5
 801e322:	f7ff fd75 	bl	801de10 <__sinit>
 801e326:	4b2e      	ldr	r3, [pc, #184]	; (801e3e0 <__swsetup_r+0xd0>)
 801e328:	429c      	cmp	r4, r3
 801e32a:	d10f      	bne.n	801e34c <__swsetup_r+0x3c>
 801e32c:	686c      	ldr	r4, [r5, #4]
 801e32e:	89a3      	ldrh	r3, [r4, #12]
 801e330:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e334:	0719      	lsls	r1, r3, #28
 801e336:	d42c      	bmi.n	801e392 <__swsetup_r+0x82>
 801e338:	06dd      	lsls	r5, r3, #27
 801e33a:	d411      	bmi.n	801e360 <__swsetup_r+0x50>
 801e33c:	2309      	movs	r3, #9
 801e33e:	6033      	str	r3, [r6, #0]
 801e340:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e344:	81a3      	strh	r3, [r4, #12]
 801e346:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e34a:	e03e      	b.n	801e3ca <__swsetup_r+0xba>
 801e34c:	4b25      	ldr	r3, [pc, #148]	; (801e3e4 <__swsetup_r+0xd4>)
 801e34e:	429c      	cmp	r4, r3
 801e350:	d101      	bne.n	801e356 <__swsetup_r+0x46>
 801e352:	68ac      	ldr	r4, [r5, #8]
 801e354:	e7eb      	b.n	801e32e <__swsetup_r+0x1e>
 801e356:	4b24      	ldr	r3, [pc, #144]	; (801e3e8 <__swsetup_r+0xd8>)
 801e358:	429c      	cmp	r4, r3
 801e35a:	bf08      	it	eq
 801e35c:	68ec      	ldreq	r4, [r5, #12]
 801e35e:	e7e6      	b.n	801e32e <__swsetup_r+0x1e>
 801e360:	0758      	lsls	r0, r3, #29
 801e362:	d512      	bpl.n	801e38a <__swsetup_r+0x7a>
 801e364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e366:	b141      	cbz	r1, 801e37a <__swsetup_r+0x6a>
 801e368:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e36c:	4299      	cmp	r1, r3
 801e36e:	d002      	beq.n	801e376 <__swsetup_r+0x66>
 801e370:	4630      	mov	r0, r6
 801e372:	f7fb fc6b 	bl	8019c4c <_free_r>
 801e376:	2300      	movs	r3, #0
 801e378:	6363      	str	r3, [r4, #52]	; 0x34
 801e37a:	89a3      	ldrh	r3, [r4, #12]
 801e37c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e380:	81a3      	strh	r3, [r4, #12]
 801e382:	2300      	movs	r3, #0
 801e384:	6063      	str	r3, [r4, #4]
 801e386:	6923      	ldr	r3, [r4, #16]
 801e388:	6023      	str	r3, [r4, #0]
 801e38a:	89a3      	ldrh	r3, [r4, #12]
 801e38c:	f043 0308 	orr.w	r3, r3, #8
 801e390:	81a3      	strh	r3, [r4, #12]
 801e392:	6923      	ldr	r3, [r4, #16]
 801e394:	b94b      	cbnz	r3, 801e3aa <__swsetup_r+0x9a>
 801e396:	89a3      	ldrh	r3, [r4, #12]
 801e398:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e39c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e3a0:	d003      	beq.n	801e3aa <__swsetup_r+0x9a>
 801e3a2:	4621      	mov	r1, r4
 801e3a4:	4630      	mov	r0, r6
 801e3a6:	f000 f84d 	bl	801e444 <__smakebuf_r>
 801e3aa:	89a0      	ldrh	r0, [r4, #12]
 801e3ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e3b0:	f010 0301 	ands.w	r3, r0, #1
 801e3b4:	d00a      	beq.n	801e3cc <__swsetup_r+0xbc>
 801e3b6:	2300      	movs	r3, #0
 801e3b8:	60a3      	str	r3, [r4, #8]
 801e3ba:	6963      	ldr	r3, [r4, #20]
 801e3bc:	425b      	negs	r3, r3
 801e3be:	61a3      	str	r3, [r4, #24]
 801e3c0:	6923      	ldr	r3, [r4, #16]
 801e3c2:	b943      	cbnz	r3, 801e3d6 <__swsetup_r+0xc6>
 801e3c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e3c8:	d1ba      	bne.n	801e340 <__swsetup_r+0x30>
 801e3ca:	bd70      	pop	{r4, r5, r6, pc}
 801e3cc:	0781      	lsls	r1, r0, #30
 801e3ce:	bf58      	it	pl
 801e3d0:	6963      	ldrpl	r3, [r4, #20]
 801e3d2:	60a3      	str	r3, [r4, #8]
 801e3d4:	e7f4      	b.n	801e3c0 <__swsetup_r+0xb0>
 801e3d6:	2000      	movs	r0, #0
 801e3d8:	e7f7      	b.n	801e3ca <__swsetup_r+0xba>
 801e3da:	bf00      	nop
 801e3dc:	200000c4 	.word	0x200000c4
 801e3e0:	08020734 	.word	0x08020734
 801e3e4:	08020754 	.word	0x08020754
 801e3e8:	08020714 	.word	0x08020714

0801e3ec <abort>:
 801e3ec:	b508      	push	{r3, lr}
 801e3ee:	2006      	movs	r0, #6
 801e3f0:	f000 f890 	bl	801e514 <raise>
 801e3f4:	2001      	movs	r0, #1
 801e3f6:	f7ee fd3b 	bl	800ce70 <_exit>

0801e3fa <__swhatbuf_r>:
 801e3fa:	b570      	push	{r4, r5, r6, lr}
 801e3fc:	460e      	mov	r6, r1
 801e3fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e402:	2900      	cmp	r1, #0
 801e404:	b096      	sub	sp, #88	; 0x58
 801e406:	4614      	mov	r4, r2
 801e408:	461d      	mov	r5, r3
 801e40a:	da07      	bge.n	801e41c <__swhatbuf_r+0x22>
 801e40c:	2300      	movs	r3, #0
 801e40e:	602b      	str	r3, [r5, #0]
 801e410:	89b3      	ldrh	r3, [r6, #12]
 801e412:	061a      	lsls	r2, r3, #24
 801e414:	d410      	bmi.n	801e438 <__swhatbuf_r+0x3e>
 801e416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e41a:	e00e      	b.n	801e43a <__swhatbuf_r+0x40>
 801e41c:	466a      	mov	r2, sp
 801e41e:	f000 f895 	bl	801e54c <_fstat_r>
 801e422:	2800      	cmp	r0, #0
 801e424:	dbf2      	blt.n	801e40c <__swhatbuf_r+0x12>
 801e426:	9a01      	ldr	r2, [sp, #4]
 801e428:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e42c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e430:	425a      	negs	r2, r3
 801e432:	415a      	adcs	r2, r3
 801e434:	602a      	str	r2, [r5, #0]
 801e436:	e7ee      	b.n	801e416 <__swhatbuf_r+0x1c>
 801e438:	2340      	movs	r3, #64	; 0x40
 801e43a:	2000      	movs	r0, #0
 801e43c:	6023      	str	r3, [r4, #0]
 801e43e:	b016      	add	sp, #88	; 0x58
 801e440:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e444 <__smakebuf_r>:
 801e444:	898b      	ldrh	r3, [r1, #12]
 801e446:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e448:	079d      	lsls	r5, r3, #30
 801e44a:	4606      	mov	r6, r0
 801e44c:	460c      	mov	r4, r1
 801e44e:	d507      	bpl.n	801e460 <__smakebuf_r+0x1c>
 801e450:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e454:	6023      	str	r3, [r4, #0]
 801e456:	6123      	str	r3, [r4, #16]
 801e458:	2301      	movs	r3, #1
 801e45a:	6163      	str	r3, [r4, #20]
 801e45c:	b002      	add	sp, #8
 801e45e:	bd70      	pop	{r4, r5, r6, pc}
 801e460:	ab01      	add	r3, sp, #4
 801e462:	466a      	mov	r2, sp
 801e464:	f7ff ffc9 	bl	801e3fa <__swhatbuf_r>
 801e468:	9900      	ldr	r1, [sp, #0]
 801e46a:	4605      	mov	r5, r0
 801e46c:	4630      	mov	r0, r6
 801e46e:	f7fb fc3d 	bl	8019cec <_malloc_r>
 801e472:	b948      	cbnz	r0, 801e488 <__smakebuf_r+0x44>
 801e474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e478:	059a      	lsls	r2, r3, #22
 801e47a:	d4ef      	bmi.n	801e45c <__smakebuf_r+0x18>
 801e47c:	f023 0303 	bic.w	r3, r3, #3
 801e480:	f043 0302 	orr.w	r3, r3, #2
 801e484:	81a3      	strh	r3, [r4, #12]
 801e486:	e7e3      	b.n	801e450 <__smakebuf_r+0xc>
 801e488:	4b0d      	ldr	r3, [pc, #52]	; (801e4c0 <__smakebuf_r+0x7c>)
 801e48a:	62b3      	str	r3, [r6, #40]	; 0x28
 801e48c:	89a3      	ldrh	r3, [r4, #12]
 801e48e:	6020      	str	r0, [r4, #0]
 801e490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e494:	81a3      	strh	r3, [r4, #12]
 801e496:	9b00      	ldr	r3, [sp, #0]
 801e498:	6163      	str	r3, [r4, #20]
 801e49a:	9b01      	ldr	r3, [sp, #4]
 801e49c:	6120      	str	r0, [r4, #16]
 801e49e:	b15b      	cbz	r3, 801e4b8 <__smakebuf_r+0x74>
 801e4a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e4a4:	4630      	mov	r0, r6
 801e4a6:	f000 f863 	bl	801e570 <_isatty_r>
 801e4aa:	b128      	cbz	r0, 801e4b8 <__smakebuf_r+0x74>
 801e4ac:	89a3      	ldrh	r3, [r4, #12]
 801e4ae:	f023 0303 	bic.w	r3, r3, #3
 801e4b2:	f043 0301 	orr.w	r3, r3, #1
 801e4b6:	81a3      	strh	r3, [r4, #12]
 801e4b8:	89a0      	ldrh	r0, [r4, #12]
 801e4ba:	4305      	orrs	r5, r0
 801e4bc:	81a5      	strh	r5, [r4, #12]
 801e4be:	e7cd      	b.n	801e45c <__smakebuf_r+0x18>
 801e4c0:	0801dda9 	.word	0x0801dda9

0801e4c4 <_raise_r>:
 801e4c4:	291f      	cmp	r1, #31
 801e4c6:	b538      	push	{r3, r4, r5, lr}
 801e4c8:	4604      	mov	r4, r0
 801e4ca:	460d      	mov	r5, r1
 801e4cc:	d904      	bls.n	801e4d8 <_raise_r+0x14>
 801e4ce:	2316      	movs	r3, #22
 801e4d0:	6003      	str	r3, [r0, #0]
 801e4d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e4d6:	bd38      	pop	{r3, r4, r5, pc}
 801e4d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e4da:	b112      	cbz	r2, 801e4e2 <_raise_r+0x1e>
 801e4dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e4e0:	b94b      	cbnz	r3, 801e4f6 <_raise_r+0x32>
 801e4e2:	4620      	mov	r0, r4
 801e4e4:	f000 f830 	bl	801e548 <_getpid_r>
 801e4e8:	462a      	mov	r2, r5
 801e4ea:	4601      	mov	r1, r0
 801e4ec:	4620      	mov	r0, r4
 801e4ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e4f2:	f000 b817 	b.w	801e524 <_kill_r>
 801e4f6:	2b01      	cmp	r3, #1
 801e4f8:	d00a      	beq.n	801e510 <_raise_r+0x4c>
 801e4fa:	1c59      	adds	r1, r3, #1
 801e4fc:	d103      	bne.n	801e506 <_raise_r+0x42>
 801e4fe:	2316      	movs	r3, #22
 801e500:	6003      	str	r3, [r0, #0]
 801e502:	2001      	movs	r0, #1
 801e504:	e7e7      	b.n	801e4d6 <_raise_r+0x12>
 801e506:	2400      	movs	r4, #0
 801e508:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e50c:	4628      	mov	r0, r5
 801e50e:	4798      	blx	r3
 801e510:	2000      	movs	r0, #0
 801e512:	e7e0      	b.n	801e4d6 <_raise_r+0x12>

0801e514 <raise>:
 801e514:	4b02      	ldr	r3, [pc, #8]	; (801e520 <raise+0xc>)
 801e516:	4601      	mov	r1, r0
 801e518:	6818      	ldr	r0, [r3, #0]
 801e51a:	f7ff bfd3 	b.w	801e4c4 <_raise_r>
 801e51e:	bf00      	nop
 801e520:	200000c4 	.word	0x200000c4

0801e524 <_kill_r>:
 801e524:	b538      	push	{r3, r4, r5, lr}
 801e526:	4d07      	ldr	r5, [pc, #28]	; (801e544 <_kill_r+0x20>)
 801e528:	2300      	movs	r3, #0
 801e52a:	4604      	mov	r4, r0
 801e52c:	4608      	mov	r0, r1
 801e52e:	4611      	mov	r1, r2
 801e530:	602b      	str	r3, [r5, #0]
 801e532:	f7ee fc8d 	bl	800ce50 <_kill>
 801e536:	1c43      	adds	r3, r0, #1
 801e538:	d102      	bne.n	801e540 <_kill_r+0x1c>
 801e53a:	682b      	ldr	r3, [r5, #0]
 801e53c:	b103      	cbz	r3, 801e540 <_kill_r+0x1c>
 801e53e:	6023      	str	r3, [r4, #0]
 801e540:	bd38      	pop	{r3, r4, r5, pc}
 801e542:	bf00      	nop
 801e544:	2000a6d4 	.word	0x2000a6d4

0801e548 <_getpid_r>:
 801e548:	f7ee bc7a 	b.w	800ce40 <_getpid>

0801e54c <_fstat_r>:
 801e54c:	b538      	push	{r3, r4, r5, lr}
 801e54e:	4d07      	ldr	r5, [pc, #28]	; (801e56c <_fstat_r+0x20>)
 801e550:	2300      	movs	r3, #0
 801e552:	4604      	mov	r4, r0
 801e554:	4608      	mov	r0, r1
 801e556:	4611      	mov	r1, r2
 801e558:	602b      	str	r3, [r5, #0]
 801e55a:	f7ee fcd8 	bl	800cf0e <_fstat>
 801e55e:	1c43      	adds	r3, r0, #1
 801e560:	d102      	bne.n	801e568 <_fstat_r+0x1c>
 801e562:	682b      	ldr	r3, [r5, #0]
 801e564:	b103      	cbz	r3, 801e568 <_fstat_r+0x1c>
 801e566:	6023      	str	r3, [r4, #0]
 801e568:	bd38      	pop	{r3, r4, r5, pc}
 801e56a:	bf00      	nop
 801e56c:	2000a6d4 	.word	0x2000a6d4

0801e570 <_isatty_r>:
 801e570:	b538      	push	{r3, r4, r5, lr}
 801e572:	4d06      	ldr	r5, [pc, #24]	; (801e58c <_isatty_r+0x1c>)
 801e574:	2300      	movs	r3, #0
 801e576:	4604      	mov	r4, r0
 801e578:	4608      	mov	r0, r1
 801e57a:	602b      	str	r3, [r5, #0]
 801e57c:	f7ee fcd7 	bl	800cf2e <_isatty>
 801e580:	1c43      	adds	r3, r0, #1
 801e582:	d102      	bne.n	801e58a <_isatty_r+0x1a>
 801e584:	682b      	ldr	r3, [r5, #0]
 801e586:	b103      	cbz	r3, 801e58a <_isatty_r+0x1a>
 801e588:	6023      	str	r3, [r4, #0]
 801e58a:	bd38      	pop	{r3, r4, r5, pc}
 801e58c:	2000a6d4 	.word	0x2000a6d4

0801e590 <atanf>:
 801e590:	b538      	push	{r3, r4, r5, lr}
 801e592:	ee10 5a10 	vmov	r5, s0
 801e596:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801e59a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801e59e:	eef0 7a40 	vmov.f32	s15, s0
 801e5a2:	db10      	blt.n	801e5c6 <atanf+0x36>
 801e5a4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801e5a8:	dd04      	ble.n	801e5b4 <atanf+0x24>
 801e5aa:	ee70 7a00 	vadd.f32	s15, s0, s0
 801e5ae:	eeb0 0a67 	vmov.f32	s0, s15
 801e5b2:	bd38      	pop	{r3, r4, r5, pc}
 801e5b4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801e6ec <atanf+0x15c>
 801e5b8:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801e6f0 <atanf+0x160>
 801e5bc:	2d00      	cmp	r5, #0
 801e5be:	bfd8      	it	le
 801e5c0:	eef0 7a40 	vmovle.f32	s15, s0
 801e5c4:	e7f3      	b.n	801e5ae <atanf+0x1e>
 801e5c6:	4b4b      	ldr	r3, [pc, #300]	; (801e6f4 <atanf+0x164>)
 801e5c8:	429c      	cmp	r4, r3
 801e5ca:	dc10      	bgt.n	801e5ee <atanf+0x5e>
 801e5cc:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801e5d0:	da0a      	bge.n	801e5e8 <atanf+0x58>
 801e5d2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801e6f8 <atanf+0x168>
 801e5d6:	ee30 7a07 	vadd.f32	s14, s0, s14
 801e5da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e5de:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801e5e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e5e6:	dce2      	bgt.n	801e5ae <atanf+0x1e>
 801e5e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e5ec:	e013      	b.n	801e616 <atanf+0x86>
 801e5ee:	f000 f8e3 	bl	801e7b8 <fabsf>
 801e5f2:	4b42      	ldr	r3, [pc, #264]	; (801e6fc <atanf+0x16c>)
 801e5f4:	429c      	cmp	r4, r3
 801e5f6:	dc4f      	bgt.n	801e698 <atanf+0x108>
 801e5f8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801e5fc:	429c      	cmp	r4, r3
 801e5fe:	dc41      	bgt.n	801e684 <atanf+0xf4>
 801e600:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801e604:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801e608:	eea0 7a27 	vfma.f32	s14, s0, s15
 801e60c:	2300      	movs	r3, #0
 801e60e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e612:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e616:	1c5a      	adds	r2, r3, #1
 801e618:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801e61c:	eddf 5a38 	vldr	s11, [pc, #224]	; 801e700 <atanf+0x170>
 801e620:	ed9f 6a38 	vldr	s12, [pc, #224]	; 801e704 <atanf+0x174>
 801e624:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801e708 <atanf+0x178>
 801e628:	ed9f 0a38 	vldr	s0, [pc, #224]	; 801e70c <atanf+0x17c>
 801e62c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801e630:	eea7 6a25 	vfma.f32	s12, s14, s11
 801e634:	eddf 5a36 	vldr	s11, [pc, #216]	; 801e710 <atanf+0x180>
 801e638:	eee6 5a07 	vfma.f32	s11, s12, s14
 801e63c:	ed9f 6a35 	vldr	s12, [pc, #212]	; 801e714 <atanf+0x184>
 801e640:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e644:	eddf 5a34 	vldr	s11, [pc, #208]	; 801e718 <atanf+0x188>
 801e648:	eee6 5a07 	vfma.f32	s11, s12, s14
 801e64c:	ed9f 6a33 	vldr	s12, [pc, #204]	; 801e71c <atanf+0x18c>
 801e650:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e654:	eddf 5a32 	vldr	s11, [pc, #200]	; 801e720 <atanf+0x190>
 801e658:	eee7 5a05 	vfma.f32	s11, s14, s10
 801e65c:	ed9f 5a31 	vldr	s10, [pc, #196]	; 801e724 <atanf+0x194>
 801e660:	eea5 5a87 	vfma.f32	s10, s11, s14
 801e664:	eddf 5a30 	vldr	s11, [pc, #192]	; 801e728 <atanf+0x198>
 801e668:	eee5 5a07 	vfma.f32	s11, s10, s14
 801e66c:	eea5 0a87 	vfma.f32	s0, s11, s14
 801e670:	ee20 0a07 	vmul.f32	s0, s0, s14
 801e674:	eea6 0a26 	vfma.f32	s0, s12, s13
 801e678:	ee27 0a80 	vmul.f32	s0, s15, s0
 801e67c:	d121      	bne.n	801e6c2 <atanf+0x132>
 801e67e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801e682:	e794      	b.n	801e5ae <atanf+0x1e>
 801e684:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e688:	ee30 7a67 	vsub.f32	s14, s0, s15
 801e68c:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e690:	2301      	movs	r3, #1
 801e692:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e696:	e7be      	b.n	801e616 <atanf+0x86>
 801e698:	4b24      	ldr	r3, [pc, #144]	; (801e72c <atanf+0x19c>)
 801e69a:	429c      	cmp	r4, r3
 801e69c:	dc0b      	bgt.n	801e6b6 <atanf+0x126>
 801e69e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801e6a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e6a6:	eea0 7a27 	vfma.f32	s14, s0, s15
 801e6aa:	2302      	movs	r3, #2
 801e6ac:	ee70 6a67 	vsub.f32	s13, s0, s15
 801e6b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e6b4:	e7af      	b.n	801e616 <atanf+0x86>
 801e6b6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801e6ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e6be:	2303      	movs	r3, #3
 801e6c0:	e7a9      	b.n	801e616 <atanf+0x86>
 801e6c2:	4a1b      	ldr	r2, [pc, #108]	; (801e730 <atanf+0x1a0>)
 801e6c4:	491b      	ldr	r1, [pc, #108]	; (801e734 <atanf+0x1a4>)
 801e6c6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801e6ca:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e6ce:	ed93 7a00 	vldr	s14, [r3]
 801e6d2:	ee30 0a47 	vsub.f32	s0, s0, s14
 801e6d6:	2d00      	cmp	r5, #0
 801e6d8:	ee70 7a67 	vsub.f32	s15, s0, s15
 801e6dc:	ed92 0a00 	vldr	s0, [r2]
 801e6e0:	ee70 7a67 	vsub.f32	s15, s0, s15
 801e6e4:	bfb8      	it	lt
 801e6e6:	eef1 7a67 	vneglt.f32	s15, s15
 801e6ea:	e760      	b.n	801e5ae <atanf+0x1e>
 801e6ec:	3fc90fdb 	.word	0x3fc90fdb
 801e6f0:	bfc90fdb 	.word	0xbfc90fdb
 801e6f4:	3edfffff 	.word	0x3edfffff
 801e6f8:	7149f2ca 	.word	0x7149f2ca
 801e6fc:	3f97ffff 	.word	0x3f97ffff
 801e700:	3c8569d7 	.word	0x3c8569d7
 801e704:	3d4bda59 	.word	0x3d4bda59
 801e708:	bd15a221 	.word	0xbd15a221
 801e70c:	be4ccccd 	.word	0xbe4ccccd
 801e710:	3d886b35 	.word	0x3d886b35
 801e714:	3dba2e6e 	.word	0x3dba2e6e
 801e718:	3e124925 	.word	0x3e124925
 801e71c:	3eaaaaab 	.word	0x3eaaaaab
 801e720:	bd6ef16b 	.word	0xbd6ef16b
 801e724:	bd9d8795 	.word	0xbd9d8795
 801e728:	bde38e38 	.word	0xbde38e38
 801e72c:	401bffff 	.word	0x401bffff
 801e730:	08020774 	.word	0x08020774
 801e734:	08020784 	.word	0x08020784

0801e738 <cosf>:
 801e738:	ee10 3a10 	vmov	r3, s0
 801e73c:	b507      	push	{r0, r1, r2, lr}
 801e73e:	4a1c      	ldr	r2, [pc, #112]	; (801e7b0 <cosf+0x78>)
 801e740:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e744:	4293      	cmp	r3, r2
 801e746:	dc04      	bgt.n	801e752 <cosf+0x1a>
 801e748:	eddf 0a1a 	vldr	s1, [pc, #104]	; 801e7b4 <cosf+0x7c>
 801e74c:	f000 fdb8 	bl	801f2c0 <__kernel_cosf>
 801e750:	e004      	b.n	801e75c <cosf+0x24>
 801e752:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e756:	db04      	blt.n	801e762 <cosf+0x2a>
 801e758:	ee30 0a40 	vsub.f32	s0, s0, s0
 801e75c:	b003      	add	sp, #12
 801e75e:	f85d fb04 	ldr.w	pc, [sp], #4
 801e762:	4668      	mov	r0, sp
 801e764:	f000 fc6c 	bl	801f040 <__ieee754_rem_pio2f>
 801e768:	f000 0003 	and.w	r0, r0, #3
 801e76c:	2801      	cmp	r0, #1
 801e76e:	d007      	beq.n	801e780 <cosf+0x48>
 801e770:	2802      	cmp	r0, #2
 801e772:	d00e      	beq.n	801e792 <cosf+0x5a>
 801e774:	b9a0      	cbnz	r0, 801e7a0 <cosf+0x68>
 801e776:	eddd 0a01 	vldr	s1, [sp, #4]
 801e77a:	ed9d 0a00 	vldr	s0, [sp]
 801e77e:	e7e5      	b.n	801e74c <cosf+0x14>
 801e780:	eddd 0a01 	vldr	s1, [sp, #4]
 801e784:	ed9d 0a00 	vldr	s0, [sp]
 801e788:	f001 f884 	bl	801f894 <__kernel_sinf>
 801e78c:	eeb1 0a40 	vneg.f32	s0, s0
 801e790:	e7e4      	b.n	801e75c <cosf+0x24>
 801e792:	eddd 0a01 	vldr	s1, [sp, #4]
 801e796:	ed9d 0a00 	vldr	s0, [sp]
 801e79a:	f000 fd91 	bl	801f2c0 <__kernel_cosf>
 801e79e:	e7f5      	b.n	801e78c <cosf+0x54>
 801e7a0:	eddd 0a01 	vldr	s1, [sp, #4]
 801e7a4:	ed9d 0a00 	vldr	s0, [sp]
 801e7a8:	2001      	movs	r0, #1
 801e7aa:	f001 f873 	bl	801f894 <__kernel_sinf>
 801e7ae:	e7d5      	b.n	801e75c <cosf+0x24>
 801e7b0:	3f490fd8 	.word	0x3f490fd8
 801e7b4:	00000000 	.word	0x00000000

0801e7b8 <fabsf>:
 801e7b8:	ee10 3a10 	vmov	r3, s0
 801e7bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e7c0:	ee00 3a10 	vmov	s0, r3
 801e7c4:	4770      	bx	lr
	...

0801e7c8 <sinf>:
 801e7c8:	ee10 3a10 	vmov	r3, s0
 801e7cc:	b507      	push	{r0, r1, r2, lr}
 801e7ce:	4a1d      	ldr	r2, [pc, #116]	; (801e844 <sinf+0x7c>)
 801e7d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e7d4:	4293      	cmp	r3, r2
 801e7d6:	dc05      	bgt.n	801e7e4 <sinf+0x1c>
 801e7d8:	eddf 0a1b 	vldr	s1, [pc, #108]	; 801e848 <sinf+0x80>
 801e7dc:	2000      	movs	r0, #0
 801e7de:	f001 f859 	bl	801f894 <__kernel_sinf>
 801e7e2:	e004      	b.n	801e7ee <sinf+0x26>
 801e7e4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e7e8:	db04      	blt.n	801e7f4 <sinf+0x2c>
 801e7ea:	ee30 0a40 	vsub.f32	s0, s0, s0
 801e7ee:	b003      	add	sp, #12
 801e7f0:	f85d fb04 	ldr.w	pc, [sp], #4
 801e7f4:	4668      	mov	r0, sp
 801e7f6:	f000 fc23 	bl	801f040 <__ieee754_rem_pio2f>
 801e7fa:	f000 0003 	and.w	r0, r0, #3
 801e7fe:	2801      	cmp	r0, #1
 801e800:	d008      	beq.n	801e814 <sinf+0x4c>
 801e802:	2802      	cmp	r0, #2
 801e804:	d00d      	beq.n	801e822 <sinf+0x5a>
 801e806:	b9b0      	cbnz	r0, 801e836 <sinf+0x6e>
 801e808:	eddd 0a01 	vldr	s1, [sp, #4]
 801e80c:	ed9d 0a00 	vldr	s0, [sp]
 801e810:	2001      	movs	r0, #1
 801e812:	e7e4      	b.n	801e7de <sinf+0x16>
 801e814:	eddd 0a01 	vldr	s1, [sp, #4]
 801e818:	ed9d 0a00 	vldr	s0, [sp]
 801e81c:	f000 fd50 	bl	801f2c0 <__kernel_cosf>
 801e820:	e7e5      	b.n	801e7ee <sinf+0x26>
 801e822:	eddd 0a01 	vldr	s1, [sp, #4]
 801e826:	ed9d 0a00 	vldr	s0, [sp]
 801e82a:	2001      	movs	r0, #1
 801e82c:	f001 f832 	bl	801f894 <__kernel_sinf>
 801e830:	eeb1 0a40 	vneg.f32	s0, s0
 801e834:	e7db      	b.n	801e7ee <sinf+0x26>
 801e836:	eddd 0a01 	vldr	s1, [sp, #4]
 801e83a:	ed9d 0a00 	vldr	s0, [sp]
 801e83e:	f000 fd3f 	bl	801f2c0 <__kernel_cosf>
 801e842:	e7f5      	b.n	801e830 <sinf+0x68>
 801e844:	3f490fd8 	.word	0x3f490fd8
 801e848:	00000000 	.word	0x00000000

0801e84c <atan2f>:
 801e84c:	f000 b898 	b.w	801e980 <__ieee754_atan2f>

0801e850 <powf>:
 801e850:	b508      	push	{r3, lr}
 801e852:	ed2d 8b04 	vpush	{d8-d9}
 801e856:	eeb0 9a40 	vmov.f32	s18, s0
 801e85a:	eef0 8a60 	vmov.f32	s17, s1
 801e85e:	f000 f92f 	bl	801eac0 <__ieee754_powf>
 801e862:	4b43      	ldr	r3, [pc, #268]	; (801e970 <powf+0x120>)
 801e864:	f993 3000 	ldrsb.w	r3, [r3]
 801e868:	3301      	adds	r3, #1
 801e86a:	eeb0 8a40 	vmov.f32	s16, s0
 801e86e:	d012      	beq.n	801e896 <powf+0x46>
 801e870:	eef4 8a68 	vcmp.f32	s17, s17
 801e874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e878:	d60d      	bvs.n	801e896 <powf+0x46>
 801e87a:	eeb4 9a49 	vcmp.f32	s18, s18
 801e87e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e882:	d70d      	bvc.n	801e8a0 <powf+0x50>
 801e884:	eef5 8a40 	vcmp.f32	s17, #0.0
 801e888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e88c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e890:	bf08      	it	eq
 801e892:	eeb0 8a67 	vmoveq.f32	s16, s15
 801e896:	eeb0 0a48 	vmov.f32	s0, s16
 801e89a:	ecbd 8b04 	vpop	{d8-d9}
 801e89e:	bd08      	pop	{r3, pc}
 801e8a0:	eddf 9a34 	vldr	s19, [pc, #208]	; 801e974 <powf+0x124>
 801e8a4:	eeb4 9a69 	vcmp.f32	s18, s19
 801e8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8ac:	d116      	bne.n	801e8dc <powf+0x8c>
 801e8ae:	eef4 8a69 	vcmp.f32	s17, s19
 801e8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8b6:	d057      	beq.n	801e968 <powf+0x118>
 801e8b8:	eeb0 0a68 	vmov.f32	s0, s17
 801e8bc:	f7ff f944 	bl	801db48 <finitef>
 801e8c0:	2800      	cmp	r0, #0
 801e8c2:	d0e8      	beq.n	801e896 <powf+0x46>
 801e8c4:	eef4 8ae9 	vcmpe.f32	s17, s19
 801e8c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8cc:	d5e3      	bpl.n	801e896 <powf+0x46>
 801e8ce:	f7fb f975 	bl	8019bbc <__errno>
 801e8d2:	2321      	movs	r3, #33	; 0x21
 801e8d4:	6003      	str	r3, [r0, #0]
 801e8d6:	ed9f 8a28 	vldr	s16, [pc, #160]	; 801e978 <powf+0x128>
 801e8da:	e7dc      	b.n	801e896 <powf+0x46>
 801e8dc:	f7ff f934 	bl	801db48 <finitef>
 801e8e0:	bb50      	cbnz	r0, 801e938 <powf+0xe8>
 801e8e2:	eeb0 0a49 	vmov.f32	s0, s18
 801e8e6:	f7ff f92f 	bl	801db48 <finitef>
 801e8ea:	b328      	cbz	r0, 801e938 <powf+0xe8>
 801e8ec:	eeb0 0a68 	vmov.f32	s0, s17
 801e8f0:	f7ff f92a 	bl	801db48 <finitef>
 801e8f4:	b300      	cbz	r0, 801e938 <powf+0xe8>
 801e8f6:	eeb4 8a48 	vcmp.f32	s16, s16
 801e8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8fe:	d706      	bvc.n	801e90e <powf+0xbe>
 801e900:	f7fb f95c 	bl	8019bbc <__errno>
 801e904:	2321      	movs	r3, #33	; 0x21
 801e906:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 801e90a:	6003      	str	r3, [r0, #0]
 801e90c:	e7c3      	b.n	801e896 <powf+0x46>
 801e90e:	f7fb f955 	bl	8019bbc <__errno>
 801e912:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 801e916:	2322      	movs	r3, #34	; 0x22
 801e918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e91c:	6003      	str	r3, [r0, #0]
 801e91e:	d508      	bpl.n	801e932 <powf+0xe2>
 801e920:	eeb0 0a68 	vmov.f32	s0, s17
 801e924:	f001 f840 	bl	801f9a8 <rintf>
 801e928:	eeb4 0a68 	vcmp.f32	s0, s17
 801e92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e930:	d1d1      	bne.n	801e8d6 <powf+0x86>
 801e932:	ed9f 8a12 	vldr	s16, [pc, #72]	; 801e97c <powf+0x12c>
 801e936:	e7ae      	b.n	801e896 <powf+0x46>
 801e938:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801e93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e940:	d1a9      	bne.n	801e896 <powf+0x46>
 801e942:	eeb0 0a49 	vmov.f32	s0, s18
 801e946:	f7ff f8ff 	bl	801db48 <finitef>
 801e94a:	2800      	cmp	r0, #0
 801e94c:	d0a3      	beq.n	801e896 <powf+0x46>
 801e94e:	eeb0 0a68 	vmov.f32	s0, s17
 801e952:	f7ff f8f9 	bl	801db48 <finitef>
 801e956:	2800      	cmp	r0, #0
 801e958:	d09d      	beq.n	801e896 <powf+0x46>
 801e95a:	f7fb f92f 	bl	8019bbc <__errno>
 801e95e:	2322      	movs	r3, #34	; 0x22
 801e960:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801e974 <powf+0x124>
 801e964:	6003      	str	r3, [r0, #0]
 801e966:	e796      	b.n	801e896 <powf+0x46>
 801e968:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801e96c:	e793      	b.n	801e896 <powf+0x46>
 801e96e:	bf00      	nop
 801e970:	20000298 	.word	0x20000298
 801e974:	00000000 	.word	0x00000000
 801e978:	ff800000 	.word	0xff800000
 801e97c:	7f800000 	.word	0x7f800000

0801e980 <__ieee754_atan2f>:
 801e980:	ee10 2a90 	vmov	r2, s1
 801e984:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801e988:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801e98c:	b510      	push	{r4, lr}
 801e98e:	eef0 7a40 	vmov.f32	s15, s0
 801e992:	dc06      	bgt.n	801e9a2 <__ieee754_atan2f+0x22>
 801e994:	ee10 0a10 	vmov	r0, s0
 801e998:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801e99c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e9a0:	dd04      	ble.n	801e9ac <__ieee754_atan2f+0x2c>
 801e9a2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801e9a6:	eeb0 0a67 	vmov.f32	s0, s15
 801e9aa:	bd10      	pop	{r4, pc}
 801e9ac:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801e9b0:	d103      	bne.n	801e9ba <__ieee754_atan2f+0x3a>
 801e9b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e9b6:	f7ff bdeb 	b.w	801e590 <atanf>
 801e9ba:	1794      	asrs	r4, r2, #30
 801e9bc:	f004 0402 	and.w	r4, r4, #2
 801e9c0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801e9c4:	b943      	cbnz	r3, 801e9d8 <__ieee754_atan2f+0x58>
 801e9c6:	2c02      	cmp	r4, #2
 801e9c8:	d05e      	beq.n	801ea88 <__ieee754_atan2f+0x108>
 801e9ca:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801ea9c <__ieee754_atan2f+0x11c>
 801e9ce:	2c03      	cmp	r4, #3
 801e9d0:	bf08      	it	eq
 801e9d2:	eef0 7a47 	vmoveq.f32	s15, s14
 801e9d6:	e7e6      	b.n	801e9a6 <__ieee754_atan2f+0x26>
 801e9d8:	b941      	cbnz	r1, 801e9ec <__ieee754_atan2f+0x6c>
 801e9da:	eddf 7a31 	vldr	s15, [pc, #196]	; 801eaa0 <__ieee754_atan2f+0x120>
 801e9de:	ed9f 0a31 	vldr	s0, [pc, #196]	; 801eaa4 <__ieee754_atan2f+0x124>
 801e9e2:	2800      	cmp	r0, #0
 801e9e4:	bfb8      	it	lt
 801e9e6:	eef0 7a40 	vmovlt.f32	s15, s0
 801e9ea:	e7dc      	b.n	801e9a6 <__ieee754_atan2f+0x26>
 801e9ec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801e9f0:	d110      	bne.n	801ea14 <__ieee754_atan2f+0x94>
 801e9f2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e9f6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801e9fa:	d107      	bne.n	801ea0c <__ieee754_atan2f+0x8c>
 801e9fc:	2c02      	cmp	r4, #2
 801e9fe:	d846      	bhi.n	801ea8e <__ieee754_atan2f+0x10e>
 801ea00:	4b29      	ldr	r3, [pc, #164]	; (801eaa8 <__ieee754_atan2f+0x128>)
 801ea02:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ea06:	edd4 7a00 	vldr	s15, [r4]
 801ea0a:	e7cc      	b.n	801e9a6 <__ieee754_atan2f+0x26>
 801ea0c:	2c02      	cmp	r4, #2
 801ea0e:	d841      	bhi.n	801ea94 <__ieee754_atan2f+0x114>
 801ea10:	4b26      	ldr	r3, [pc, #152]	; (801eaac <__ieee754_atan2f+0x12c>)
 801ea12:	e7f6      	b.n	801ea02 <__ieee754_atan2f+0x82>
 801ea14:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801ea18:	d0df      	beq.n	801e9da <__ieee754_atan2f+0x5a>
 801ea1a:	1a5b      	subs	r3, r3, r1
 801ea1c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801ea20:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801ea24:	da1a      	bge.n	801ea5c <__ieee754_atan2f+0xdc>
 801ea26:	2a00      	cmp	r2, #0
 801ea28:	da01      	bge.n	801ea2e <__ieee754_atan2f+0xae>
 801ea2a:	313c      	adds	r1, #60	; 0x3c
 801ea2c:	db19      	blt.n	801ea62 <__ieee754_atan2f+0xe2>
 801ea2e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801ea32:	f7ff fec1 	bl	801e7b8 <fabsf>
 801ea36:	f7ff fdab 	bl	801e590 <atanf>
 801ea3a:	eef0 7a40 	vmov.f32	s15, s0
 801ea3e:	2c01      	cmp	r4, #1
 801ea40:	d012      	beq.n	801ea68 <__ieee754_atan2f+0xe8>
 801ea42:	2c02      	cmp	r4, #2
 801ea44:	d017      	beq.n	801ea76 <__ieee754_atan2f+0xf6>
 801ea46:	2c00      	cmp	r4, #0
 801ea48:	d0ad      	beq.n	801e9a6 <__ieee754_atan2f+0x26>
 801ea4a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801eab0 <__ieee754_atan2f+0x130>
 801ea4e:	ee77 7a80 	vadd.f32	s15, s15, s0
 801ea52:	ed9f 0a18 	vldr	s0, [pc, #96]	; 801eab4 <__ieee754_atan2f+0x134>
 801ea56:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801ea5a:	e7a4      	b.n	801e9a6 <__ieee754_atan2f+0x26>
 801ea5c:	eddf 7a10 	vldr	s15, [pc, #64]	; 801eaa0 <__ieee754_atan2f+0x120>
 801ea60:	e7ed      	b.n	801ea3e <__ieee754_atan2f+0xbe>
 801ea62:	eddf 7a15 	vldr	s15, [pc, #84]	; 801eab8 <__ieee754_atan2f+0x138>
 801ea66:	e7ea      	b.n	801ea3e <__ieee754_atan2f+0xbe>
 801ea68:	ee17 3a90 	vmov	r3, s15
 801ea6c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801ea70:	ee07 3a90 	vmov	s15, r3
 801ea74:	e797      	b.n	801e9a6 <__ieee754_atan2f+0x26>
 801ea76:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801eab0 <__ieee754_atan2f+0x130>
 801ea7a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801ea7e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 801eab4 <__ieee754_atan2f+0x134>
 801ea82:	ee70 7a67 	vsub.f32	s15, s0, s15
 801ea86:	e78e      	b.n	801e9a6 <__ieee754_atan2f+0x26>
 801ea88:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801eab4 <__ieee754_atan2f+0x134>
 801ea8c:	e78b      	b.n	801e9a6 <__ieee754_atan2f+0x26>
 801ea8e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801eabc <__ieee754_atan2f+0x13c>
 801ea92:	e788      	b.n	801e9a6 <__ieee754_atan2f+0x26>
 801ea94:	eddf 7a08 	vldr	s15, [pc, #32]	; 801eab8 <__ieee754_atan2f+0x138>
 801ea98:	e785      	b.n	801e9a6 <__ieee754_atan2f+0x26>
 801ea9a:	bf00      	nop
 801ea9c:	c0490fdb 	.word	0xc0490fdb
 801eaa0:	3fc90fdb 	.word	0x3fc90fdb
 801eaa4:	bfc90fdb 	.word	0xbfc90fdb
 801eaa8:	08020794 	.word	0x08020794
 801eaac:	080207a0 	.word	0x080207a0
 801eab0:	33bbbd2e 	.word	0x33bbbd2e
 801eab4:	40490fdb 	.word	0x40490fdb
 801eab8:	00000000 	.word	0x00000000
 801eabc:	3f490fdb 	.word	0x3f490fdb

0801eac0 <__ieee754_powf>:
 801eac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eac4:	ee10 5a90 	vmov	r5, s1
 801eac8:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 801eacc:	ed2d 8b02 	vpush	{d8}
 801ead0:	eeb0 8a40 	vmov.f32	s16, s0
 801ead4:	eef0 8a60 	vmov.f32	s17, s1
 801ead8:	f000 8291 	beq.w	801effe <__ieee754_powf+0x53e>
 801eadc:	ee10 8a10 	vmov	r8, s0
 801eae0:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 801eae4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801eae8:	dc06      	bgt.n	801eaf8 <__ieee754_powf+0x38>
 801eaea:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801eaee:	dd0a      	ble.n	801eb06 <__ieee754_powf+0x46>
 801eaf0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801eaf4:	f000 8283 	beq.w	801effe <__ieee754_powf+0x53e>
 801eaf8:	ecbd 8b02 	vpop	{d8}
 801eafc:	48d8      	ldr	r0, [pc, #864]	; (801ee60 <__ieee754_powf+0x3a0>)
 801eafe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801eb02:	f7fb bfdf 	b.w	801aac4 <nanf>
 801eb06:	f1b8 0f00 	cmp.w	r8, #0
 801eb0a:	da1f      	bge.n	801eb4c <__ieee754_powf+0x8c>
 801eb0c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801eb10:	da2e      	bge.n	801eb70 <__ieee754_powf+0xb0>
 801eb12:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801eb16:	f2c0 827b 	blt.w	801f010 <__ieee754_powf+0x550>
 801eb1a:	15fb      	asrs	r3, r7, #23
 801eb1c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801eb20:	fa47 f603 	asr.w	r6, r7, r3
 801eb24:	fa06 f303 	lsl.w	r3, r6, r3
 801eb28:	42bb      	cmp	r3, r7
 801eb2a:	f040 8271 	bne.w	801f010 <__ieee754_powf+0x550>
 801eb2e:	f006 0601 	and.w	r6, r6, #1
 801eb32:	f1c6 0602 	rsb	r6, r6, #2
 801eb36:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801eb3a:	d120      	bne.n	801eb7e <__ieee754_powf+0xbe>
 801eb3c:	2d00      	cmp	r5, #0
 801eb3e:	f280 8264 	bge.w	801f00a <__ieee754_powf+0x54a>
 801eb42:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801eb46:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801eb4a:	e00d      	b.n	801eb68 <__ieee754_powf+0xa8>
 801eb4c:	2600      	movs	r6, #0
 801eb4e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801eb52:	d1f0      	bne.n	801eb36 <__ieee754_powf+0x76>
 801eb54:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801eb58:	f000 8251 	beq.w	801effe <__ieee754_powf+0x53e>
 801eb5c:	dd0a      	ble.n	801eb74 <__ieee754_powf+0xb4>
 801eb5e:	2d00      	cmp	r5, #0
 801eb60:	f280 8250 	bge.w	801f004 <__ieee754_powf+0x544>
 801eb64:	ed9f 0abf 	vldr	s0, [pc, #764]	; 801ee64 <__ieee754_powf+0x3a4>
 801eb68:	ecbd 8b02 	vpop	{d8}
 801eb6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eb70:	2602      	movs	r6, #2
 801eb72:	e7ec      	b.n	801eb4e <__ieee754_powf+0x8e>
 801eb74:	2d00      	cmp	r5, #0
 801eb76:	daf5      	bge.n	801eb64 <__ieee754_powf+0xa4>
 801eb78:	eeb1 0a68 	vneg.f32	s0, s17
 801eb7c:	e7f4      	b.n	801eb68 <__ieee754_powf+0xa8>
 801eb7e:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801eb82:	d102      	bne.n	801eb8a <__ieee754_powf+0xca>
 801eb84:	ee28 0a08 	vmul.f32	s0, s16, s16
 801eb88:	e7ee      	b.n	801eb68 <__ieee754_powf+0xa8>
 801eb8a:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 801eb8e:	eeb0 0a48 	vmov.f32	s0, s16
 801eb92:	d108      	bne.n	801eba6 <__ieee754_powf+0xe6>
 801eb94:	f1b8 0f00 	cmp.w	r8, #0
 801eb98:	db05      	blt.n	801eba6 <__ieee754_powf+0xe6>
 801eb9a:	ecbd 8b02 	vpop	{d8}
 801eb9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801eba2:	f000 bb89 	b.w	801f2b8 <__ieee754_sqrtf>
 801eba6:	f7ff fe07 	bl	801e7b8 <fabsf>
 801ebaa:	b124      	cbz	r4, 801ebb6 <__ieee754_powf+0xf6>
 801ebac:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 801ebb0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801ebb4:	d117      	bne.n	801ebe6 <__ieee754_powf+0x126>
 801ebb6:	2d00      	cmp	r5, #0
 801ebb8:	bfbc      	itt	lt
 801ebba:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801ebbe:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801ebc2:	f1b8 0f00 	cmp.w	r8, #0
 801ebc6:	dacf      	bge.n	801eb68 <__ieee754_powf+0xa8>
 801ebc8:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 801ebcc:	ea54 0306 	orrs.w	r3, r4, r6
 801ebd0:	d104      	bne.n	801ebdc <__ieee754_powf+0x11c>
 801ebd2:	ee70 7a40 	vsub.f32	s15, s0, s0
 801ebd6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801ebda:	e7c5      	b.n	801eb68 <__ieee754_powf+0xa8>
 801ebdc:	2e01      	cmp	r6, #1
 801ebde:	d1c3      	bne.n	801eb68 <__ieee754_powf+0xa8>
 801ebe0:	eeb1 0a40 	vneg.f32	s0, s0
 801ebe4:	e7c0      	b.n	801eb68 <__ieee754_powf+0xa8>
 801ebe6:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801ebea:	3801      	subs	r0, #1
 801ebec:	ea56 0300 	orrs.w	r3, r6, r0
 801ebf0:	d104      	bne.n	801ebfc <__ieee754_powf+0x13c>
 801ebf2:	ee38 8a48 	vsub.f32	s16, s16, s16
 801ebf6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801ebfa:	e7b5      	b.n	801eb68 <__ieee754_powf+0xa8>
 801ebfc:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 801ec00:	dd6b      	ble.n	801ecda <__ieee754_powf+0x21a>
 801ec02:	4b99      	ldr	r3, [pc, #612]	; (801ee68 <__ieee754_powf+0x3a8>)
 801ec04:	429c      	cmp	r4, r3
 801ec06:	dc06      	bgt.n	801ec16 <__ieee754_powf+0x156>
 801ec08:	2d00      	cmp	r5, #0
 801ec0a:	daab      	bge.n	801eb64 <__ieee754_powf+0xa4>
 801ec0c:	ed9f 0a97 	vldr	s0, [pc, #604]	; 801ee6c <__ieee754_powf+0x3ac>
 801ec10:	ee20 0a00 	vmul.f32	s0, s0, s0
 801ec14:	e7a8      	b.n	801eb68 <__ieee754_powf+0xa8>
 801ec16:	4b96      	ldr	r3, [pc, #600]	; (801ee70 <__ieee754_powf+0x3b0>)
 801ec18:	429c      	cmp	r4, r3
 801ec1a:	dd02      	ble.n	801ec22 <__ieee754_powf+0x162>
 801ec1c:	2d00      	cmp	r5, #0
 801ec1e:	dcf5      	bgt.n	801ec0c <__ieee754_powf+0x14c>
 801ec20:	e7a0      	b.n	801eb64 <__ieee754_powf+0xa4>
 801ec22:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801ec26:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ec2a:	eddf 6a92 	vldr	s13, [pc, #584]	; 801ee74 <__ieee754_powf+0x3b4>
 801ec2e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801ec32:	eee0 6a67 	vfms.f32	s13, s0, s15
 801ec36:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801ec3a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801ec3e:	ee20 7a00 	vmul.f32	s14, s0, s0
 801ec42:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ec46:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 801ee78 <__ieee754_powf+0x3b8>
 801ec4a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801ec4e:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 801ee7c <__ieee754_powf+0x3bc>
 801ec52:	eee0 7a07 	vfma.f32	s15, s0, s14
 801ec56:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801ee80 <__ieee754_powf+0x3c0>
 801ec5a:	eef0 6a67 	vmov.f32	s13, s15
 801ec5e:	eee0 6a07 	vfma.f32	s13, s0, s14
 801ec62:	ee16 3a90 	vmov	r3, s13
 801ec66:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801ec6a:	f023 030f 	bic.w	r3, r3, #15
 801ec6e:	ee00 3a90 	vmov	s1, r3
 801ec72:	eee0 0a47 	vfms.f32	s1, s0, s14
 801ec76:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801ec7a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 801ec7e:	f025 050f 	bic.w	r5, r5, #15
 801ec82:	ee07 5a10 	vmov	s14, r5
 801ec86:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801ec8a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801ec8e:	ee07 3a90 	vmov	s15, r3
 801ec92:	eee7 0a27 	vfma.f32	s1, s14, s15
 801ec96:	3e01      	subs	r6, #1
 801ec98:	ea56 0200 	orrs.w	r2, r6, r0
 801ec9c:	ee07 5a10 	vmov	s14, r5
 801eca0:	ee67 7a87 	vmul.f32	s15, s15, s14
 801eca4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801eca8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801ecac:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801ecb0:	ee17 4a10 	vmov	r4, s14
 801ecb4:	bf08      	it	eq
 801ecb6:	eeb0 8a40 	vmoveq.f32	s16, s0
 801ecba:	2c00      	cmp	r4, #0
 801ecbc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801ecc0:	f340 8184 	ble.w	801efcc <__ieee754_powf+0x50c>
 801ecc4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801ecc8:	f340 80fc 	ble.w	801eec4 <__ieee754_powf+0x404>
 801eccc:	eddf 7a67 	vldr	s15, [pc, #412]	; 801ee6c <__ieee754_powf+0x3ac>
 801ecd0:	ee28 0a27 	vmul.f32	s0, s16, s15
 801ecd4:	ee20 0a27 	vmul.f32	s0, s0, s15
 801ecd8:	e746      	b.n	801eb68 <__ieee754_powf+0xa8>
 801ecda:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 801ecde:	bf01      	itttt	eq
 801ece0:	eddf 7a68 	vldreq	s15, [pc, #416]	; 801ee84 <__ieee754_powf+0x3c4>
 801ece4:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801ece8:	f06f 0217 	mvneq.w	r2, #23
 801ecec:	ee17 4a90 	vmoveq	r4, s15
 801ecf0:	ea4f 53e4 	mov.w	r3, r4, asr #23
 801ecf4:	bf18      	it	ne
 801ecf6:	2200      	movne	r2, #0
 801ecf8:	3b7f      	subs	r3, #127	; 0x7f
 801ecfa:	4413      	add	r3, r2
 801ecfc:	4a62      	ldr	r2, [pc, #392]	; (801ee88 <__ieee754_powf+0x3c8>)
 801ecfe:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801ed02:	4294      	cmp	r4, r2
 801ed04:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 801ed08:	dd06      	ble.n	801ed18 <__ieee754_powf+0x258>
 801ed0a:	4a60      	ldr	r2, [pc, #384]	; (801ee8c <__ieee754_powf+0x3cc>)
 801ed0c:	4294      	cmp	r4, r2
 801ed0e:	f340 80a4 	ble.w	801ee5a <__ieee754_powf+0x39a>
 801ed12:	3301      	adds	r3, #1
 801ed14:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801ed18:	2400      	movs	r4, #0
 801ed1a:	4a5d      	ldr	r2, [pc, #372]	; (801ee90 <__ieee754_powf+0x3d0>)
 801ed1c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801ed20:	ee07 1a90 	vmov	s15, r1
 801ed24:	ed92 7a00 	vldr	s14, [r2]
 801ed28:	4a5a      	ldr	r2, [pc, #360]	; (801ee94 <__ieee754_powf+0x3d4>)
 801ed2a:	ee37 6a27 	vadd.f32	s12, s14, s15
 801ed2e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801ed32:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801ed36:	1049      	asrs	r1, r1, #1
 801ed38:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801ed3c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801ed40:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801ed44:	ee37 5ac7 	vsub.f32	s10, s15, s14
 801ed48:	ee06 1a10 	vmov	s12, r1
 801ed4c:	ee65 4a26 	vmul.f32	s9, s10, s13
 801ed50:	ee36 7a47 	vsub.f32	s14, s12, s14
 801ed54:	ee14 7a90 	vmov	r7, s9
 801ed58:	4017      	ands	r7, r2
 801ed5a:	ee05 7a90 	vmov	s11, r7
 801ed5e:	eea5 5ac6 	vfms.f32	s10, s11, s12
 801ed62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ed66:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 801ee98 <__ieee754_powf+0x3d8>
 801ed6a:	eea5 5ae7 	vfms.f32	s10, s11, s15
 801ed6e:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801ed72:	ee25 6a26 	vmul.f32	s12, s10, s13
 801ed76:	eddf 6a49 	vldr	s13, [pc, #292]	; 801ee9c <__ieee754_powf+0x3dc>
 801ed7a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801ed7e:	eddf 6a48 	vldr	s13, [pc, #288]	; 801eea0 <__ieee754_powf+0x3e0>
 801ed82:	eee7 6a27 	vfma.f32	s13, s14, s15
 801ed86:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 801ee74 <__ieee754_powf+0x3b4>
 801ed8a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801ed8e:	eddf 6a45 	vldr	s13, [pc, #276]	; 801eea4 <__ieee754_powf+0x3e4>
 801ed92:	eee7 6a27 	vfma.f32	s13, s14, s15
 801ed96:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801eea8 <__ieee754_powf+0x3e8>
 801ed9a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801ed9e:	ee74 6aa5 	vadd.f32	s13, s9, s11
 801eda2:	ee27 5aa7 	vmul.f32	s10, s15, s15
 801eda6:	ee66 6a86 	vmul.f32	s13, s13, s12
 801edaa:	eee5 6a07 	vfma.f32	s13, s10, s14
 801edae:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 801edb2:	eef0 7a45 	vmov.f32	s15, s10
 801edb6:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801edba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801edbe:	ee17 1a90 	vmov	r1, s15
 801edc2:	4011      	ands	r1, r2
 801edc4:	ee07 1a90 	vmov	s15, r1
 801edc8:	ee37 7ac5 	vsub.f32	s14, s15, s10
 801edcc:	eea5 7ae5 	vfms.f32	s14, s11, s11
 801edd0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801edd4:	ee27 7a24 	vmul.f32	s14, s14, s9
 801edd8:	eea6 7a27 	vfma.f32	s14, s12, s15
 801eddc:	eeb0 6a47 	vmov.f32	s12, s14
 801ede0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801ede4:	ee16 1a10 	vmov	r1, s12
 801ede8:	4011      	ands	r1, r2
 801edea:	ee06 1a90 	vmov	s13, r1
 801edee:	eee5 6ae7 	vfms.f32	s13, s11, s15
 801edf2:	eddf 7a2e 	vldr	s15, [pc, #184]	; 801eeac <__ieee754_powf+0x3ec>
 801edf6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801eeb0 <__ieee754_powf+0x3f0>
 801edfa:	ee37 7a66 	vsub.f32	s14, s14, s13
 801edfe:	ee06 1a10 	vmov	s12, r1
 801ee02:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ee06:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801eeb4 <__ieee754_powf+0x3f4>
 801ee0a:	492b      	ldr	r1, [pc, #172]	; (801eeb8 <__ieee754_powf+0x3f8>)
 801ee0c:	eea6 7a27 	vfma.f32	s14, s12, s15
 801ee10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801ee14:	edd1 7a00 	vldr	s15, [r1]
 801ee18:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ee1c:	ee07 3a90 	vmov	s15, r3
 801ee20:	4b26      	ldr	r3, [pc, #152]	; (801eebc <__ieee754_powf+0x3fc>)
 801ee22:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801ee26:	eef0 7a47 	vmov.f32	s15, s14
 801ee2a:	eee6 7a25 	vfma.f32	s15, s12, s11
 801ee2e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ee32:	edd4 0a00 	vldr	s1, [r4]
 801ee36:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801ee3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ee3e:	ee17 3a90 	vmov	r3, s15
 801ee42:	4013      	ands	r3, r2
 801ee44:	ee07 3a90 	vmov	s15, r3
 801ee48:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801ee4c:	ee76 6ae0 	vsub.f32	s13, s13, s1
 801ee50:	eee6 6a65 	vfms.f32	s13, s12, s11
 801ee54:	ee77 7a66 	vsub.f32	s15, s14, s13
 801ee58:	e70f      	b.n	801ec7a <__ieee754_powf+0x1ba>
 801ee5a:	2401      	movs	r4, #1
 801ee5c:	e75d      	b.n	801ed1a <__ieee754_powf+0x25a>
 801ee5e:	bf00      	nop
 801ee60:	08020710 	.word	0x08020710
 801ee64:	00000000 	.word	0x00000000
 801ee68:	3f7ffff7 	.word	0x3f7ffff7
 801ee6c:	7149f2ca 	.word	0x7149f2ca
 801ee70:	3f800007 	.word	0x3f800007
 801ee74:	3eaaaaab 	.word	0x3eaaaaab
 801ee78:	3fb8aa3b 	.word	0x3fb8aa3b
 801ee7c:	36eca570 	.word	0x36eca570
 801ee80:	3fb8aa00 	.word	0x3fb8aa00
 801ee84:	4b800000 	.word	0x4b800000
 801ee88:	001cc471 	.word	0x001cc471
 801ee8c:	005db3d6 	.word	0x005db3d6
 801ee90:	080207ac 	.word	0x080207ac
 801ee94:	fffff000 	.word	0xfffff000
 801ee98:	3e6c3255 	.word	0x3e6c3255
 801ee9c:	3e53f142 	.word	0x3e53f142
 801eea0:	3e8ba305 	.word	0x3e8ba305
 801eea4:	3edb6db7 	.word	0x3edb6db7
 801eea8:	3f19999a 	.word	0x3f19999a
 801eeac:	3f76384f 	.word	0x3f76384f
 801eeb0:	3f763800 	.word	0x3f763800
 801eeb4:	369dc3a0 	.word	0x369dc3a0
 801eeb8:	080207bc 	.word	0x080207bc
 801eebc:	080207b4 	.word	0x080207b4
 801eec0:	3338aa3c 	.word	0x3338aa3c
 801eec4:	f040 8092 	bne.w	801efec <__ieee754_powf+0x52c>
 801eec8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801eec0 <__ieee754_powf+0x400>
 801eecc:	ee37 7a67 	vsub.f32	s14, s14, s15
 801eed0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801eed4:	eef4 6ac7 	vcmpe.f32	s13, s14
 801eed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eedc:	f73f aef6 	bgt.w	801eccc <__ieee754_powf+0x20c>
 801eee0:	15db      	asrs	r3, r3, #23
 801eee2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801eee6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801eeea:	4103      	asrs	r3, r0
 801eeec:	4423      	add	r3, r4
 801eeee:	4949      	ldr	r1, [pc, #292]	; (801f014 <__ieee754_powf+0x554>)
 801eef0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801eef4:	3a7f      	subs	r2, #127	; 0x7f
 801eef6:	4111      	asrs	r1, r2
 801eef8:	ea23 0101 	bic.w	r1, r3, r1
 801eefc:	ee07 1a10 	vmov	s14, r1
 801ef00:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801ef04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801ef08:	f1c2 0217 	rsb	r2, r2, #23
 801ef0c:	4110      	asrs	r0, r2
 801ef0e:	2c00      	cmp	r4, #0
 801ef10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ef14:	bfb8      	it	lt
 801ef16:	4240      	neglt	r0, r0
 801ef18:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801ef1c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 801f018 <__ieee754_powf+0x558>
 801ef20:	ee17 3a10 	vmov	r3, s14
 801ef24:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801ef28:	f023 030f 	bic.w	r3, r3, #15
 801ef2c:	ee07 3a10 	vmov	s14, r3
 801ef30:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ef34:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801ef38:	eddf 7a38 	vldr	s15, [pc, #224]	; 801f01c <__ieee754_powf+0x55c>
 801ef3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ef40:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801ef44:	eddf 6a36 	vldr	s13, [pc, #216]	; 801f020 <__ieee754_powf+0x560>
 801ef48:	eeb0 0a67 	vmov.f32	s0, s15
 801ef4c:	eea7 0a26 	vfma.f32	s0, s14, s13
 801ef50:	eeb0 6a40 	vmov.f32	s12, s0
 801ef54:	eea7 6a66 	vfms.f32	s12, s14, s13
 801ef58:	ee20 7a00 	vmul.f32	s14, s0, s0
 801ef5c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801ef60:	eddf 6a30 	vldr	s13, [pc, #192]	; 801f024 <__ieee754_powf+0x564>
 801ef64:	ed9f 6a30 	vldr	s12, [pc, #192]	; 801f028 <__ieee754_powf+0x568>
 801ef68:	eea7 6a26 	vfma.f32	s12, s14, s13
 801ef6c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 801f02c <__ieee754_powf+0x56c>
 801ef70:	eee6 6a07 	vfma.f32	s13, s12, s14
 801ef74:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 801f030 <__ieee754_powf+0x570>
 801ef78:	eea6 6a87 	vfma.f32	s12, s13, s14
 801ef7c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 801f034 <__ieee754_powf+0x574>
 801ef80:	eee6 6a07 	vfma.f32	s13, s12, s14
 801ef84:	eeb0 6a40 	vmov.f32	s12, s0
 801ef88:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801ef8c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801ef90:	eeb0 7a46 	vmov.f32	s14, s12
 801ef94:	ee77 6a66 	vsub.f32	s13, s14, s13
 801ef98:	ee20 6a06 	vmul.f32	s12, s0, s12
 801ef9c:	eee0 7a27 	vfma.f32	s15, s0, s15
 801efa0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801efa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801efa8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801efac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801efb0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801efb4:	ee10 3a10 	vmov	r3, s0
 801efb8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801efbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801efc0:	da1a      	bge.n	801eff8 <__ieee754_powf+0x538>
 801efc2:	f7fb fd85 	bl	801aad0 <scalbnf>
 801efc6:	ee20 0a08 	vmul.f32	s0, s0, s16
 801efca:	e5cd      	b.n	801eb68 <__ieee754_powf+0xa8>
 801efcc:	4a1a      	ldr	r2, [pc, #104]	; (801f038 <__ieee754_powf+0x578>)
 801efce:	4293      	cmp	r3, r2
 801efd0:	dd02      	ble.n	801efd8 <__ieee754_powf+0x518>
 801efd2:	eddf 7a1a 	vldr	s15, [pc, #104]	; 801f03c <__ieee754_powf+0x57c>
 801efd6:	e67b      	b.n	801ecd0 <__ieee754_powf+0x210>
 801efd8:	d108      	bne.n	801efec <__ieee754_powf+0x52c>
 801efda:	ee37 7a67 	vsub.f32	s14, s14, s15
 801efde:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801efe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efe6:	f6ff af7b 	blt.w	801eee0 <__ieee754_powf+0x420>
 801efea:	e7f2      	b.n	801efd2 <__ieee754_powf+0x512>
 801efec:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801eff0:	f73f af76 	bgt.w	801eee0 <__ieee754_powf+0x420>
 801eff4:	2000      	movs	r0, #0
 801eff6:	e78f      	b.n	801ef18 <__ieee754_powf+0x458>
 801eff8:	ee00 3a10 	vmov	s0, r3
 801effc:	e7e3      	b.n	801efc6 <__ieee754_powf+0x506>
 801effe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f002:	e5b1      	b.n	801eb68 <__ieee754_powf+0xa8>
 801f004:	eeb0 0a68 	vmov.f32	s0, s17
 801f008:	e5ae      	b.n	801eb68 <__ieee754_powf+0xa8>
 801f00a:	eeb0 0a48 	vmov.f32	s0, s16
 801f00e:	e5ab      	b.n	801eb68 <__ieee754_powf+0xa8>
 801f010:	2600      	movs	r6, #0
 801f012:	e590      	b.n	801eb36 <__ieee754_powf+0x76>
 801f014:	007fffff 	.word	0x007fffff
 801f018:	3f317218 	.word	0x3f317218
 801f01c:	35bfbe8c 	.word	0x35bfbe8c
 801f020:	3f317200 	.word	0x3f317200
 801f024:	3331bb4c 	.word	0x3331bb4c
 801f028:	b5ddea0e 	.word	0xb5ddea0e
 801f02c:	388ab355 	.word	0x388ab355
 801f030:	bb360b61 	.word	0xbb360b61
 801f034:	3e2aaaab 	.word	0x3e2aaaab
 801f038:	43160000 	.word	0x43160000
 801f03c:	0da24260 	.word	0x0da24260

0801f040 <__ieee754_rem_pio2f>:
 801f040:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f042:	ee10 6a10 	vmov	r6, s0
 801f046:	4b8e      	ldr	r3, [pc, #568]	; (801f280 <__ieee754_rem_pio2f+0x240>)
 801f048:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801f04c:	429d      	cmp	r5, r3
 801f04e:	b087      	sub	sp, #28
 801f050:	eef0 7a40 	vmov.f32	s15, s0
 801f054:	4604      	mov	r4, r0
 801f056:	dc05      	bgt.n	801f064 <__ieee754_rem_pio2f+0x24>
 801f058:	2300      	movs	r3, #0
 801f05a:	ed80 0a00 	vstr	s0, [r0]
 801f05e:	6043      	str	r3, [r0, #4]
 801f060:	2000      	movs	r0, #0
 801f062:	e01a      	b.n	801f09a <__ieee754_rem_pio2f+0x5a>
 801f064:	4b87      	ldr	r3, [pc, #540]	; (801f284 <__ieee754_rem_pio2f+0x244>)
 801f066:	429d      	cmp	r5, r3
 801f068:	dc46      	bgt.n	801f0f8 <__ieee754_rem_pio2f+0xb8>
 801f06a:	2e00      	cmp	r6, #0
 801f06c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801f288 <__ieee754_rem_pio2f+0x248>
 801f070:	4b86      	ldr	r3, [pc, #536]	; (801f28c <__ieee754_rem_pio2f+0x24c>)
 801f072:	f025 050f 	bic.w	r5, r5, #15
 801f076:	dd1f      	ble.n	801f0b8 <__ieee754_rem_pio2f+0x78>
 801f078:	429d      	cmp	r5, r3
 801f07a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f07e:	d00e      	beq.n	801f09e <__ieee754_rem_pio2f+0x5e>
 801f080:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801f290 <__ieee754_rem_pio2f+0x250>
 801f084:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801f088:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f08c:	ed80 0a00 	vstr	s0, [r0]
 801f090:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f094:	2001      	movs	r0, #1
 801f096:	edc4 7a01 	vstr	s15, [r4, #4]
 801f09a:	b007      	add	sp, #28
 801f09c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f09e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801f294 <__ieee754_rem_pio2f+0x254>
 801f0a2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801f298 <__ieee754_rem_pio2f+0x258>
 801f0a6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f0aa:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801f0ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f0b2:	edc0 6a00 	vstr	s13, [r0]
 801f0b6:	e7eb      	b.n	801f090 <__ieee754_rem_pio2f+0x50>
 801f0b8:	429d      	cmp	r5, r3
 801f0ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 801f0be:	d00e      	beq.n	801f0de <__ieee754_rem_pio2f+0x9e>
 801f0c0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801f290 <__ieee754_rem_pio2f+0x250>
 801f0c4:	ee37 0a87 	vadd.f32	s0, s15, s14
 801f0c8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f0cc:	ed80 0a00 	vstr	s0, [r0]
 801f0d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f0d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f0d8:	edc4 7a01 	vstr	s15, [r4, #4]
 801f0dc:	e7dd      	b.n	801f09a <__ieee754_rem_pio2f+0x5a>
 801f0de:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801f294 <__ieee754_rem_pio2f+0x254>
 801f0e2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801f298 <__ieee754_rem_pio2f+0x258>
 801f0e6:	ee77 7a80 	vadd.f32	s15, s15, s0
 801f0ea:	ee77 6a87 	vadd.f32	s13, s15, s14
 801f0ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f0f2:	edc0 6a00 	vstr	s13, [r0]
 801f0f6:	e7eb      	b.n	801f0d0 <__ieee754_rem_pio2f+0x90>
 801f0f8:	4b68      	ldr	r3, [pc, #416]	; (801f29c <__ieee754_rem_pio2f+0x25c>)
 801f0fa:	429d      	cmp	r5, r3
 801f0fc:	dc72      	bgt.n	801f1e4 <__ieee754_rem_pio2f+0x1a4>
 801f0fe:	f7ff fb5b 	bl	801e7b8 <fabsf>
 801f102:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801f2a0 <__ieee754_rem_pio2f+0x260>
 801f106:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f10a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801f10e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f112:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f116:	ee17 0a90 	vmov	r0, s15
 801f11a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801f288 <__ieee754_rem_pio2f+0x248>
 801f11e:	eea7 0a67 	vfms.f32	s0, s14, s15
 801f122:	281f      	cmp	r0, #31
 801f124:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801f290 <__ieee754_rem_pio2f+0x250>
 801f128:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f12c:	eeb1 6a47 	vneg.f32	s12, s14
 801f130:	ee70 6a67 	vsub.f32	s13, s0, s15
 801f134:	ee16 2a90 	vmov	r2, s13
 801f138:	dc1c      	bgt.n	801f174 <__ieee754_rem_pio2f+0x134>
 801f13a:	495a      	ldr	r1, [pc, #360]	; (801f2a4 <__ieee754_rem_pio2f+0x264>)
 801f13c:	1e47      	subs	r7, r0, #1
 801f13e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801f142:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801f146:	428b      	cmp	r3, r1
 801f148:	d014      	beq.n	801f174 <__ieee754_rem_pio2f+0x134>
 801f14a:	6022      	str	r2, [r4, #0]
 801f14c:	ed94 7a00 	vldr	s14, [r4]
 801f150:	ee30 0a47 	vsub.f32	s0, s0, s14
 801f154:	2e00      	cmp	r6, #0
 801f156:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f15a:	ed84 0a01 	vstr	s0, [r4, #4]
 801f15e:	da9c      	bge.n	801f09a <__ieee754_rem_pio2f+0x5a>
 801f160:	eeb1 7a47 	vneg.f32	s14, s14
 801f164:	eeb1 0a40 	vneg.f32	s0, s0
 801f168:	ed84 7a00 	vstr	s14, [r4]
 801f16c:	ed84 0a01 	vstr	s0, [r4, #4]
 801f170:	4240      	negs	r0, r0
 801f172:	e792      	b.n	801f09a <__ieee754_rem_pio2f+0x5a>
 801f174:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801f178:	15eb      	asrs	r3, r5, #23
 801f17a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801f17e:	2d08      	cmp	r5, #8
 801f180:	dde3      	ble.n	801f14a <__ieee754_rem_pio2f+0x10a>
 801f182:	eddf 7a44 	vldr	s15, [pc, #272]	; 801f294 <__ieee754_rem_pio2f+0x254>
 801f186:	eef0 6a40 	vmov.f32	s13, s0
 801f18a:	eee6 6a27 	vfma.f32	s13, s12, s15
 801f18e:	ee30 0a66 	vsub.f32	s0, s0, s13
 801f192:	eea6 0a27 	vfma.f32	s0, s12, s15
 801f196:	eddf 7a40 	vldr	s15, [pc, #256]	; 801f298 <__ieee754_rem_pio2f+0x258>
 801f19a:	ee97 0a27 	vfnms.f32	s0, s14, s15
 801f19e:	ee76 5ac0 	vsub.f32	s11, s13, s0
 801f1a2:	eef0 7a40 	vmov.f32	s15, s0
 801f1a6:	ee15 2a90 	vmov	r2, s11
 801f1aa:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801f1ae:	1a5b      	subs	r3, r3, r1
 801f1b0:	2b19      	cmp	r3, #25
 801f1b2:	dc04      	bgt.n	801f1be <__ieee754_rem_pio2f+0x17e>
 801f1b4:	edc4 5a00 	vstr	s11, [r4]
 801f1b8:	eeb0 0a66 	vmov.f32	s0, s13
 801f1bc:	e7c6      	b.n	801f14c <__ieee754_rem_pio2f+0x10c>
 801f1be:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801f2a8 <__ieee754_rem_pio2f+0x268>
 801f1c2:	eeb0 0a66 	vmov.f32	s0, s13
 801f1c6:	eea6 0a25 	vfma.f32	s0, s12, s11
 801f1ca:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801f1ce:	eddf 6a37 	vldr	s13, [pc, #220]	; 801f2ac <__ieee754_rem_pio2f+0x26c>
 801f1d2:	eee6 7a25 	vfma.f32	s15, s12, s11
 801f1d6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801f1da:	ee30 7a67 	vsub.f32	s14, s0, s15
 801f1de:	ed84 7a00 	vstr	s14, [r4]
 801f1e2:	e7b3      	b.n	801f14c <__ieee754_rem_pio2f+0x10c>
 801f1e4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801f1e8:	db06      	blt.n	801f1f8 <__ieee754_rem_pio2f+0x1b8>
 801f1ea:	ee70 7a40 	vsub.f32	s15, s0, s0
 801f1ee:	edc0 7a01 	vstr	s15, [r0, #4]
 801f1f2:	edc0 7a00 	vstr	s15, [r0]
 801f1f6:	e733      	b.n	801f060 <__ieee754_rem_pio2f+0x20>
 801f1f8:	15ea      	asrs	r2, r5, #23
 801f1fa:	3a86      	subs	r2, #134	; 0x86
 801f1fc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801f200:	ee07 3a90 	vmov	s15, r3
 801f204:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f208:	eddf 6a29 	vldr	s13, [pc, #164]	; 801f2b0 <__ieee754_rem_pio2f+0x270>
 801f20c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f210:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f214:	ed8d 7a03 	vstr	s14, [sp, #12]
 801f218:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f21c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f220:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f224:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f228:	ed8d 7a04 	vstr	s14, [sp, #16]
 801f22c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f230:	eef5 7a40 	vcmp.f32	s15, #0.0
 801f234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f238:	edcd 7a05 	vstr	s15, [sp, #20]
 801f23c:	d11e      	bne.n	801f27c <__ieee754_rem_pio2f+0x23c>
 801f23e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801f242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f246:	bf14      	ite	ne
 801f248:	2302      	movne	r3, #2
 801f24a:	2301      	moveq	r3, #1
 801f24c:	4919      	ldr	r1, [pc, #100]	; (801f2b4 <__ieee754_rem_pio2f+0x274>)
 801f24e:	9101      	str	r1, [sp, #4]
 801f250:	2102      	movs	r1, #2
 801f252:	9100      	str	r1, [sp, #0]
 801f254:	a803      	add	r0, sp, #12
 801f256:	4621      	mov	r1, r4
 801f258:	f000 f892 	bl	801f380 <__kernel_rem_pio2f>
 801f25c:	2e00      	cmp	r6, #0
 801f25e:	f6bf af1c 	bge.w	801f09a <__ieee754_rem_pio2f+0x5a>
 801f262:	edd4 7a00 	vldr	s15, [r4]
 801f266:	eef1 7a67 	vneg.f32	s15, s15
 801f26a:	edc4 7a00 	vstr	s15, [r4]
 801f26e:	edd4 7a01 	vldr	s15, [r4, #4]
 801f272:	eef1 7a67 	vneg.f32	s15, s15
 801f276:	edc4 7a01 	vstr	s15, [r4, #4]
 801f27a:	e779      	b.n	801f170 <__ieee754_rem_pio2f+0x130>
 801f27c:	2303      	movs	r3, #3
 801f27e:	e7e5      	b.n	801f24c <__ieee754_rem_pio2f+0x20c>
 801f280:	3f490fd8 	.word	0x3f490fd8
 801f284:	4016cbe3 	.word	0x4016cbe3
 801f288:	3fc90f80 	.word	0x3fc90f80
 801f28c:	3fc90fd0 	.word	0x3fc90fd0
 801f290:	37354443 	.word	0x37354443
 801f294:	37354400 	.word	0x37354400
 801f298:	2e85a308 	.word	0x2e85a308
 801f29c:	43490f80 	.word	0x43490f80
 801f2a0:	3f22f984 	.word	0x3f22f984
 801f2a4:	080207c4 	.word	0x080207c4
 801f2a8:	2e85a300 	.word	0x2e85a300
 801f2ac:	248d3132 	.word	0x248d3132
 801f2b0:	43800000 	.word	0x43800000
 801f2b4:	08020844 	.word	0x08020844

0801f2b8 <__ieee754_sqrtf>:
 801f2b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801f2bc:	4770      	bx	lr
	...

0801f2c0 <__kernel_cosf>:
 801f2c0:	ee10 3a10 	vmov	r3, s0
 801f2c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f2c8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801f2cc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801f2d0:	da05      	bge.n	801f2de <__kernel_cosf+0x1e>
 801f2d2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801f2d6:	ee17 2a90 	vmov	r2, s15
 801f2da:	2a00      	cmp	r2, #0
 801f2dc:	d03d      	beq.n	801f35a <__kernel_cosf+0x9a>
 801f2de:	ee60 5a00 	vmul.f32	s11, s0, s0
 801f2e2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801f360 <__kernel_cosf+0xa0>
 801f2e6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801f364 <__kernel_cosf+0xa4>
 801f2ea:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801f368 <__kernel_cosf+0xa8>
 801f2ee:	4a1f      	ldr	r2, [pc, #124]	; (801f36c <__kernel_cosf+0xac>)
 801f2f0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801f2f4:	4293      	cmp	r3, r2
 801f2f6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801f370 <__kernel_cosf+0xb0>
 801f2fa:	eee7 7a25 	vfma.f32	s15, s14, s11
 801f2fe:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801f374 <__kernel_cosf+0xb4>
 801f302:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801f306:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801f378 <__kernel_cosf+0xb8>
 801f30a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801f30e:	eeb0 7a66 	vmov.f32	s14, s13
 801f312:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801f316:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801f31a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801f31e:	ee67 6a25 	vmul.f32	s13, s14, s11
 801f322:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801f326:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801f32a:	dc04      	bgt.n	801f336 <__kernel_cosf+0x76>
 801f32c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801f330:	ee36 0a47 	vsub.f32	s0, s12, s14
 801f334:	4770      	bx	lr
 801f336:	4a11      	ldr	r2, [pc, #68]	; (801f37c <__kernel_cosf+0xbc>)
 801f338:	4293      	cmp	r3, r2
 801f33a:	bfda      	itte	le
 801f33c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801f340:	ee06 3a90 	vmovle	s13, r3
 801f344:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801f348:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f34c:	ee36 0a66 	vsub.f32	s0, s12, s13
 801f350:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f354:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f358:	4770      	bx	lr
 801f35a:	eeb0 0a46 	vmov.f32	s0, s12
 801f35e:	4770      	bx	lr
 801f360:	ad47d74e 	.word	0xad47d74e
 801f364:	310f74f6 	.word	0x310f74f6
 801f368:	3d2aaaab 	.word	0x3d2aaaab
 801f36c:	3e999999 	.word	0x3e999999
 801f370:	b493f27c 	.word	0xb493f27c
 801f374:	37d00d01 	.word	0x37d00d01
 801f378:	bab60b61 	.word	0xbab60b61
 801f37c:	3f480000 	.word	0x3f480000

0801f380 <__kernel_rem_pio2f>:
 801f380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f384:	ed2d 8b04 	vpush	{d8-d9}
 801f388:	b0d7      	sub	sp, #348	; 0x15c
 801f38a:	4616      	mov	r6, r2
 801f38c:	4698      	mov	r8, r3
 801f38e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801f390:	4bbb      	ldr	r3, [pc, #748]	; (801f680 <__kernel_rem_pio2f+0x300>)
 801f392:	9001      	str	r0, [sp, #4]
 801f394:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801f398:	1d33      	adds	r3, r6, #4
 801f39a:	460d      	mov	r5, r1
 801f39c:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 801f3a0:	db29      	blt.n	801f3f6 <__kernel_rem_pio2f+0x76>
 801f3a2:	1ef1      	subs	r1, r6, #3
 801f3a4:	bf48      	it	mi
 801f3a6:	1d31      	addmi	r1, r6, #4
 801f3a8:	10c9      	asrs	r1, r1, #3
 801f3aa:	1c4c      	adds	r4, r1, #1
 801f3ac:	00e3      	lsls	r3, r4, #3
 801f3ae:	9302      	str	r3, [sp, #8]
 801f3b0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801f3b2:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 801f690 <__kernel_rem_pio2f+0x310>
 801f3b6:	eba1 0009 	sub.w	r0, r1, r9
 801f3ba:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 801f3be:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 801f3c2:	eb07 0c09 	add.w	ip, r7, r9
 801f3c6:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 801f3ca:	2300      	movs	r3, #0
 801f3cc:	4563      	cmp	r3, ip
 801f3ce:	dd14      	ble.n	801f3fa <__kernel_rem_pio2f+0x7a>
 801f3d0:	ab1a      	add	r3, sp, #104	; 0x68
 801f3d2:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 801f3d6:	46cc      	mov	ip, r9
 801f3d8:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 801f3dc:	f1c8 0b01 	rsb	fp, r8, #1
 801f3e0:	eb0b 020c 	add.w	r2, fp, ip
 801f3e4:	4297      	cmp	r7, r2
 801f3e6:	db27      	blt.n	801f438 <__kernel_rem_pio2f+0xb8>
 801f3e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 801f3ec:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801f690 <__kernel_rem_pio2f+0x310>
 801f3f0:	4618      	mov	r0, r3
 801f3f2:	2200      	movs	r2, #0
 801f3f4:	e016      	b.n	801f424 <__kernel_rem_pio2f+0xa4>
 801f3f6:	2100      	movs	r1, #0
 801f3f8:	e7d7      	b.n	801f3aa <__kernel_rem_pio2f+0x2a>
 801f3fa:	42d8      	cmn	r0, r3
 801f3fc:	bf5d      	ittte	pl
 801f3fe:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 801f402:	ee07 2a90 	vmovpl	s15, r2
 801f406:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801f40a:	eef0 7a47 	vmovmi.f32	s15, s14
 801f40e:	ecea 7a01 	vstmia	sl!, {s15}
 801f412:	3301      	adds	r3, #1
 801f414:	e7da      	b.n	801f3cc <__kernel_rem_pio2f+0x4c>
 801f416:	ecfe 6a01 	vldmia	lr!, {s13}
 801f41a:	ed90 7a00 	vldr	s14, [r0]
 801f41e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f422:	3201      	adds	r2, #1
 801f424:	454a      	cmp	r2, r9
 801f426:	f1a0 0004 	sub.w	r0, r0, #4
 801f42a:	ddf4      	ble.n	801f416 <__kernel_rem_pio2f+0x96>
 801f42c:	ecea 7a01 	vstmia	sl!, {s15}
 801f430:	3304      	adds	r3, #4
 801f432:	f10c 0c01 	add.w	ip, ip, #1
 801f436:	e7d3      	b.n	801f3e0 <__kernel_rem_pio2f+0x60>
 801f438:	ab06      	add	r3, sp, #24
 801f43a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801f43e:	9304      	str	r3, [sp, #16]
 801f440:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801f442:	eddf 8a92 	vldr	s17, [pc, #584]	; 801f68c <__kernel_rem_pio2f+0x30c>
 801f446:	ed9f 9a90 	vldr	s18, [pc, #576]	; 801f688 <__kernel_rem_pio2f+0x308>
 801f44a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801f44e:	9303      	str	r3, [sp, #12]
 801f450:	46ba      	mov	sl, r7
 801f452:	ab56      	add	r3, sp, #344	; 0x158
 801f454:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801f458:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 801f45c:	ab06      	add	r3, sp, #24
 801f45e:	4618      	mov	r0, r3
 801f460:	4652      	mov	r2, sl
 801f462:	2a00      	cmp	r2, #0
 801f464:	dc51      	bgt.n	801f50a <__kernel_rem_pio2f+0x18a>
 801f466:	4620      	mov	r0, r4
 801f468:	9305      	str	r3, [sp, #20]
 801f46a:	f7fb fb31 	bl	801aad0 <scalbnf>
 801f46e:	eeb0 8a40 	vmov.f32	s16, s0
 801f472:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801f476:	ee28 0a00 	vmul.f32	s0, s16, s0
 801f47a:	f000 fa53 	bl	801f924 <floorf>
 801f47e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801f482:	eea0 8a67 	vfms.f32	s16, s0, s15
 801f486:	2c00      	cmp	r4, #0
 801f488:	9b05      	ldr	r3, [sp, #20]
 801f48a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801f48e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801f492:	edcd 7a00 	vstr	s15, [sp]
 801f496:	ee38 8a40 	vsub.f32	s16, s16, s0
 801f49a:	dd4b      	ble.n	801f534 <__kernel_rem_pio2f+0x1b4>
 801f49c:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801f4a0:	aa06      	add	r2, sp, #24
 801f4a2:	f1c4 0e08 	rsb	lr, r4, #8
 801f4a6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801f4aa:	ee17 1a90 	vmov	r1, s15
 801f4ae:	fa42 f00e 	asr.w	r0, r2, lr
 801f4b2:	4401      	add	r1, r0
 801f4b4:	9100      	str	r1, [sp, #0]
 801f4b6:	fa00 f00e 	lsl.w	r0, r0, lr
 801f4ba:	a906      	add	r1, sp, #24
 801f4bc:	1a12      	subs	r2, r2, r0
 801f4be:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801f4c2:	f1c4 0007 	rsb	r0, r4, #7
 801f4c6:	fa42 fb00 	asr.w	fp, r2, r0
 801f4ca:	f1bb 0f00 	cmp.w	fp, #0
 801f4ce:	dd43      	ble.n	801f558 <__kernel_rem_pio2f+0x1d8>
 801f4d0:	9a00      	ldr	r2, [sp, #0]
 801f4d2:	f04f 0e00 	mov.w	lr, #0
 801f4d6:	3201      	adds	r2, #1
 801f4d8:	9200      	str	r2, [sp, #0]
 801f4da:	4670      	mov	r0, lr
 801f4dc:	45f2      	cmp	sl, lr
 801f4de:	dc6c      	bgt.n	801f5ba <__kernel_rem_pio2f+0x23a>
 801f4e0:	2c00      	cmp	r4, #0
 801f4e2:	dd04      	ble.n	801f4ee <__kernel_rem_pio2f+0x16e>
 801f4e4:	2c01      	cmp	r4, #1
 801f4e6:	d079      	beq.n	801f5dc <__kernel_rem_pio2f+0x25c>
 801f4e8:	2c02      	cmp	r4, #2
 801f4ea:	f000 8082 	beq.w	801f5f2 <__kernel_rem_pio2f+0x272>
 801f4ee:	f1bb 0f02 	cmp.w	fp, #2
 801f4f2:	d131      	bne.n	801f558 <__kernel_rem_pio2f+0x1d8>
 801f4f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f4f8:	ee30 8a48 	vsub.f32	s16, s0, s16
 801f4fc:	b360      	cbz	r0, 801f558 <__kernel_rem_pio2f+0x1d8>
 801f4fe:	4620      	mov	r0, r4
 801f500:	f7fb fae6 	bl	801aad0 <scalbnf>
 801f504:	ee38 8a40 	vsub.f32	s16, s16, s0
 801f508:	e026      	b.n	801f558 <__kernel_rem_pio2f+0x1d8>
 801f50a:	ee60 7a28 	vmul.f32	s15, s0, s17
 801f50e:	3a01      	subs	r2, #1
 801f510:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f514:	a942      	add	r1, sp, #264	; 0x108
 801f516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f51a:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801f51e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801f522:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f526:	eca0 0a01 	vstmia	r0!, {s0}
 801f52a:	ed9c 0a00 	vldr	s0, [ip]
 801f52e:	ee37 0a80 	vadd.f32	s0, s15, s0
 801f532:	e796      	b.n	801f462 <__kernel_rem_pio2f+0xe2>
 801f534:	d107      	bne.n	801f546 <__kernel_rem_pio2f+0x1c6>
 801f536:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 801f53a:	a906      	add	r1, sp, #24
 801f53c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801f540:	ea4f 2b22 	mov.w	fp, r2, asr #8
 801f544:	e7c1      	b.n	801f4ca <__kernel_rem_pio2f+0x14a>
 801f546:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f54a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801f54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f552:	da2f      	bge.n	801f5b4 <__kernel_rem_pio2f+0x234>
 801f554:	f04f 0b00 	mov.w	fp, #0
 801f558:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801f55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f560:	f040 8098 	bne.w	801f694 <__kernel_rem_pio2f+0x314>
 801f564:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801f568:	469c      	mov	ip, r3
 801f56a:	2200      	movs	r2, #0
 801f56c:	45bc      	cmp	ip, r7
 801f56e:	da48      	bge.n	801f602 <__kernel_rem_pio2f+0x282>
 801f570:	2a00      	cmp	r2, #0
 801f572:	d05f      	beq.n	801f634 <__kernel_rem_pio2f+0x2b4>
 801f574:	aa06      	add	r2, sp, #24
 801f576:	3c08      	subs	r4, #8
 801f578:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801f57c:	2900      	cmp	r1, #0
 801f57e:	d07d      	beq.n	801f67c <__kernel_rem_pio2f+0x2fc>
 801f580:	4620      	mov	r0, r4
 801f582:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f586:	9301      	str	r3, [sp, #4]
 801f588:	f7fb faa2 	bl	801aad0 <scalbnf>
 801f58c:	9b01      	ldr	r3, [sp, #4]
 801f58e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 801f68c <__kernel_rem_pio2f+0x30c>
 801f592:	4619      	mov	r1, r3
 801f594:	2900      	cmp	r1, #0
 801f596:	f280 80af 	bge.w	801f6f8 <__kernel_rem_pio2f+0x378>
 801f59a:	4618      	mov	r0, r3
 801f59c:	2400      	movs	r4, #0
 801f59e:	2800      	cmp	r0, #0
 801f5a0:	f2c0 80d0 	blt.w	801f744 <__kernel_rem_pio2f+0x3c4>
 801f5a4:	a942      	add	r1, sp, #264	; 0x108
 801f5a6:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 801f5aa:	4a36      	ldr	r2, [pc, #216]	; (801f684 <__kernel_rem_pio2f+0x304>)
 801f5ac:	eddf 7a38 	vldr	s15, [pc, #224]	; 801f690 <__kernel_rem_pio2f+0x310>
 801f5b0:	2100      	movs	r1, #0
 801f5b2:	e0bb      	b.n	801f72c <__kernel_rem_pio2f+0x3ac>
 801f5b4:	f04f 0b02 	mov.w	fp, #2
 801f5b8:	e78a      	b.n	801f4d0 <__kernel_rem_pio2f+0x150>
 801f5ba:	681a      	ldr	r2, [r3, #0]
 801f5bc:	b948      	cbnz	r0, 801f5d2 <__kernel_rem_pio2f+0x252>
 801f5be:	b11a      	cbz	r2, 801f5c8 <__kernel_rem_pio2f+0x248>
 801f5c0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801f5c4:	601a      	str	r2, [r3, #0]
 801f5c6:	2201      	movs	r2, #1
 801f5c8:	f10e 0e01 	add.w	lr, lr, #1
 801f5cc:	3304      	adds	r3, #4
 801f5ce:	4610      	mov	r0, r2
 801f5d0:	e784      	b.n	801f4dc <__kernel_rem_pio2f+0x15c>
 801f5d2:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801f5d6:	601a      	str	r2, [r3, #0]
 801f5d8:	4602      	mov	r2, r0
 801f5da:	e7f5      	b.n	801f5c8 <__kernel_rem_pio2f+0x248>
 801f5dc:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801f5e0:	ab06      	add	r3, sp, #24
 801f5e2:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801f5e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801f5ea:	aa06      	add	r2, sp, #24
 801f5ec:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 801f5f0:	e77d      	b.n	801f4ee <__kernel_rem_pio2f+0x16e>
 801f5f2:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801f5f6:	ab06      	add	r3, sp, #24
 801f5f8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801f5fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f600:	e7f3      	b.n	801f5ea <__kernel_rem_pio2f+0x26a>
 801f602:	a906      	add	r1, sp, #24
 801f604:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 801f608:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801f60c:	4302      	orrs	r2, r0
 801f60e:	e7ad      	b.n	801f56c <__kernel_rem_pio2f+0x1ec>
 801f610:	3001      	adds	r0, #1
 801f612:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801f616:	2a00      	cmp	r2, #0
 801f618:	d0fa      	beq.n	801f610 <__kernel_rem_pio2f+0x290>
 801f61a:	a91a      	add	r1, sp, #104	; 0x68
 801f61c:	eb0a 0208 	add.w	r2, sl, r8
 801f620:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801f624:	f10a 0301 	add.w	r3, sl, #1
 801f628:	eb0a 0100 	add.w	r1, sl, r0
 801f62c:	4299      	cmp	r1, r3
 801f62e:	da04      	bge.n	801f63a <__kernel_rem_pio2f+0x2ba>
 801f630:	468a      	mov	sl, r1
 801f632:	e70e      	b.n	801f452 <__kernel_rem_pio2f+0xd2>
 801f634:	9b04      	ldr	r3, [sp, #16]
 801f636:	2001      	movs	r0, #1
 801f638:	e7eb      	b.n	801f612 <__kernel_rem_pio2f+0x292>
 801f63a:	9803      	ldr	r0, [sp, #12]
 801f63c:	f8dd c004 	ldr.w	ip, [sp, #4]
 801f640:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801f644:	9000      	str	r0, [sp, #0]
 801f646:	ee07 0a90 	vmov	s15, r0
 801f64a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f64e:	2000      	movs	r0, #0
 801f650:	ece2 7a01 	vstmia	r2!, {s15}
 801f654:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801f690 <__kernel_rem_pio2f+0x310>
 801f658:	4696      	mov	lr, r2
 801f65a:	4548      	cmp	r0, r9
 801f65c:	dd06      	ble.n	801f66c <__kernel_rem_pio2f+0x2ec>
 801f65e:	a842      	add	r0, sp, #264	; 0x108
 801f660:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801f664:	edc0 7a00 	vstr	s15, [r0]
 801f668:	3301      	adds	r3, #1
 801f66a:	e7df      	b.n	801f62c <__kernel_rem_pio2f+0x2ac>
 801f66c:	ecfc 6a01 	vldmia	ip!, {s13}
 801f670:	ed3e 7a01 	vldmdb	lr!, {s14}
 801f674:	3001      	adds	r0, #1
 801f676:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f67a:	e7ee      	b.n	801f65a <__kernel_rem_pio2f+0x2da>
 801f67c:	3b01      	subs	r3, #1
 801f67e:	e779      	b.n	801f574 <__kernel_rem_pio2f+0x1f4>
 801f680:	08020b88 	.word	0x08020b88
 801f684:	08020b5c 	.word	0x08020b5c
 801f688:	43800000 	.word	0x43800000
 801f68c:	3b800000 	.word	0x3b800000
 801f690:	00000000 	.word	0x00000000
 801f694:	9b02      	ldr	r3, [sp, #8]
 801f696:	eeb0 0a48 	vmov.f32	s0, s16
 801f69a:	1b98      	subs	r0, r3, r6
 801f69c:	f7fb fa18 	bl	801aad0 <scalbnf>
 801f6a0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801f688 <__kernel_rem_pio2f+0x308>
 801f6a4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801f6a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f6ac:	db1b      	blt.n	801f6e6 <__kernel_rem_pio2f+0x366>
 801f6ae:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801f68c <__kernel_rem_pio2f+0x30c>
 801f6b2:	ee60 7a27 	vmul.f32	s15, s0, s15
 801f6b6:	aa06      	add	r2, sp, #24
 801f6b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f6bc:	a906      	add	r1, sp, #24
 801f6be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f6c2:	3408      	adds	r4, #8
 801f6c4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801f6c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f6cc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f6d0:	ee10 3a10 	vmov	r3, s0
 801f6d4:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801f6d8:	ee17 2a90 	vmov	r2, s15
 801f6dc:	f10a 0301 	add.w	r3, sl, #1
 801f6e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801f6e4:	e74c      	b.n	801f580 <__kernel_rem_pio2f+0x200>
 801f6e6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f6ea:	aa06      	add	r2, sp, #24
 801f6ec:	ee10 3a10 	vmov	r3, s0
 801f6f0:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801f6f4:	4653      	mov	r3, sl
 801f6f6:	e743      	b.n	801f580 <__kernel_rem_pio2f+0x200>
 801f6f8:	aa42      	add	r2, sp, #264	; 0x108
 801f6fa:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801f6fe:	aa06      	add	r2, sp, #24
 801f700:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801f704:	9201      	str	r2, [sp, #4]
 801f706:	ee07 2a90 	vmov	s15, r2
 801f70a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f70e:	3901      	subs	r1, #1
 801f710:	ee67 7a80 	vmul.f32	s15, s15, s0
 801f714:	ee20 0a07 	vmul.f32	s0, s0, s14
 801f718:	edc0 7a00 	vstr	s15, [r0]
 801f71c:	e73a      	b.n	801f594 <__kernel_rem_pio2f+0x214>
 801f71e:	ecf2 6a01 	vldmia	r2!, {s13}
 801f722:	ecb6 7a01 	vldmia	r6!, {s14}
 801f726:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f72a:	3101      	adds	r1, #1
 801f72c:	42b9      	cmp	r1, r7
 801f72e:	dc01      	bgt.n	801f734 <__kernel_rem_pio2f+0x3b4>
 801f730:	428c      	cmp	r4, r1
 801f732:	daf4      	bge.n	801f71e <__kernel_rem_pio2f+0x39e>
 801f734:	aa56      	add	r2, sp, #344	; 0x158
 801f736:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 801f73a:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801f73e:	3801      	subs	r0, #1
 801f740:	3401      	adds	r4, #1
 801f742:	e72c      	b.n	801f59e <__kernel_rem_pio2f+0x21e>
 801f744:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801f746:	2a02      	cmp	r2, #2
 801f748:	dc0a      	bgt.n	801f760 <__kernel_rem_pio2f+0x3e0>
 801f74a:	2a00      	cmp	r2, #0
 801f74c:	dc61      	bgt.n	801f812 <__kernel_rem_pio2f+0x492>
 801f74e:	d03c      	beq.n	801f7ca <__kernel_rem_pio2f+0x44a>
 801f750:	9b00      	ldr	r3, [sp, #0]
 801f752:	f003 0007 	and.w	r0, r3, #7
 801f756:	b057      	add	sp, #348	; 0x15c
 801f758:	ecbd 8b04 	vpop	{d8-d9}
 801f75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f760:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801f762:	2a03      	cmp	r2, #3
 801f764:	d1f4      	bne.n	801f750 <__kernel_rem_pio2f+0x3d0>
 801f766:	aa2e      	add	r2, sp, #184	; 0xb8
 801f768:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801f76c:	4608      	mov	r0, r1
 801f76e:	461c      	mov	r4, r3
 801f770:	2c00      	cmp	r4, #0
 801f772:	f1a0 0004 	sub.w	r0, r0, #4
 801f776:	dc59      	bgt.n	801f82c <__kernel_rem_pio2f+0x4ac>
 801f778:	4618      	mov	r0, r3
 801f77a:	2801      	cmp	r0, #1
 801f77c:	f1a1 0104 	sub.w	r1, r1, #4
 801f780:	dc64      	bgt.n	801f84c <__kernel_rem_pio2f+0x4cc>
 801f782:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 801f690 <__kernel_rem_pio2f+0x310>
 801f786:	2b01      	cmp	r3, #1
 801f788:	dc70      	bgt.n	801f86c <__kernel_rem_pio2f+0x4ec>
 801f78a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801f78e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801f792:	f1bb 0f00 	cmp.w	fp, #0
 801f796:	d172      	bne.n	801f87e <__kernel_rem_pio2f+0x4fe>
 801f798:	edc5 6a00 	vstr	s13, [r5]
 801f79c:	ed85 7a01 	vstr	s14, [r5, #4]
 801f7a0:	edc5 7a02 	vstr	s15, [r5, #8]
 801f7a4:	e7d4      	b.n	801f750 <__kernel_rem_pio2f+0x3d0>
 801f7a6:	aa2e      	add	r2, sp, #184	; 0xb8
 801f7a8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801f7ac:	ed91 7a00 	vldr	s14, [r1]
 801f7b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f7b4:	3b01      	subs	r3, #1
 801f7b6:	2b00      	cmp	r3, #0
 801f7b8:	daf5      	bge.n	801f7a6 <__kernel_rem_pio2f+0x426>
 801f7ba:	f1bb 0f00 	cmp.w	fp, #0
 801f7be:	d001      	beq.n	801f7c4 <__kernel_rem_pio2f+0x444>
 801f7c0:	eef1 7a67 	vneg.f32	s15, s15
 801f7c4:	edc5 7a00 	vstr	s15, [r5]
 801f7c8:	e7c2      	b.n	801f750 <__kernel_rem_pio2f+0x3d0>
 801f7ca:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 801f690 <__kernel_rem_pio2f+0x310>
 801f7ce:	e7f2      	b.n	801f7b6 <__kernel_rem_pio2f+0x436>
 801f7d0:	aa2e      	add	r2, sp, #184	; 0xb8
 801f7d2:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801f7d6:	edd0 7a00 	vldr	s15, [r0]
 801f7da:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f7de:	3901      	subs	r1, #1
 801f7e0:	2900      	cmp	r1, #0
 801f7e2:	daf5      	bge.n	801f7d0 <__kernel_rem_pio2f+0x450>
 801f7e4:	f1bb 0f00 	cmp.w	fp, #0
 801f7e8:	d017      	beq.n	801f81a <__kernel_rem_pio2f+0x49a>
 801f7ea:	eef1 7a47 	vneg.f32	s15, s14
 801f7ee:	edc5 7a00 	vstr	s15, [r5]
 801f7f2:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801f7f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f7fa:	a82f      	add	r0, sp, #188	; 0xbc
 801f7fc:	2101      	movs	r1, #1
 801f7fe:	428b      	cmp	r3, r1
 801f800:	da0e      	bge.n	801f820 <__kernel_rem_pio2f+0x4a0>
 801f802:	f1bb 0f00 	cmp.w	fp, #0
 801f806:	d001      	beq.n	801f80c <__kernel_rem_pio2f+0x48c>
 801f808:	eef1 7a67 	vneg.f32	s15, s15
 801f80c:	edc5 7a01 	vstr	s15, [r5, #4]
 801f810:	e79e      	b.n	801f750 <__kernel_rem_pio2f+0x3d0>
 801f812:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 801f690 <__kernel_rem_pio2f+0x310>
 801f816:	4619      	mov	r1, r3
 801f818:	e7e2      	b.n	801f7e0 <__kernel_rem_pio2f+0x460>
 801f81a:	eef0 7a47 	vmov.f32	s15, s14
 801f81e:	e7e6      	b.n	801f7ee <__kernel_rem_pio2f+0x46e>
 801f820:	ecb0 7a01 	vldmia	r0!, {s14}
 801f824:	3101      	adds	r1, #1
 801f826:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f82a:	e7e8      	b.n	801f7fe <__kernel_rem_pio2f+0x47e>
 801f82c:	edd0 7a00 	vldr	s15, [r0]
 801f830:	edd0 6a01 	vldr	s13, [r0, #4]
 801f834:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801f838:	3c01      	subs	r4, #1
 801f83a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f83e:	ed80 7a00 	vstr	s14, [r0]
 801f842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f846:	edc0 7a01 	vstr	s15, [r0, #4]
 801f84a:	e791      	b.n	801f770 <__kernel_rem_pio2f+0x3f0>
 801f84c:	edd1 7a00 	vldr	s15, [r1]
 801f850:	edd1 6a01 	vldr	s13, [r1, #4]
 801f854:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801f858:	3801      	subs	r0, #1
 801f85a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f85e:	ed81 7a00 	vstr	s14, [r1]
 801f862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f866:	edc1 7a01 	vstr	s15, [r1, #4]
 801f86a:	e786      	b.n	801f77a <__kernel_rem_pio2f+0x3fa>
 801f86c:	aa2e      	add	r2, sp, #184	; 0xb8
 801f86e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801f872:	ed91 7a00 	vldr	s14, [r1]
 801f876:	3b01      	subs	r3, #1
 801f878:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f87c:	e783      	b.n	801f786 <__kernel_rem_pio2f+0x406>
 801f87e:	eef1 6a66 	vneg.f32	s13, s13
 801f882:	eeb1 7a47 	vneg.f32	s14, s14
 801f886:	edc5 6a00 	vstr	s13, [r5]
 801f88a:	ed85 7a01 	vstr	s14, [r5, #4]
 801f88e:	eef1 7a67 	vneg.f32	s15, s15
 801f892:	e785      	b.n	801f7a0 <__kernel_rem_pio2f+0x420>

0801f894 <__kernel_sinf>:
 801f894:	ee10 3a10 	vmov	r3, s0
 801f898:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f89c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801f8a0:	da04      	bge.n	801f8ac <__kernel_sinf+0x18>
 801f8a2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801f8a6:	ee17 3a90 	vmov	r3, s15
 801f8aa:	b35b      	cbz	r3, 801f904 <__kernel_sinf+0x70>
 801f8ac:	ee20 7a00 	vmul.f32	s14, s0, s0
 801f8b0:	eddf 7a15 	vldr	s15, [pc, #84]	; 801f908 <__kernel_sinf+0x74>
 801f8b4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801f90c <__kernel_sinf+0x78>
 801f8b8:	eea7 6a27 	vfma.f32	s12, s14, s15
 801f8bc:	eddf 7a14 	vldr	s15, [pc, #80]	; 801f910 <__kernel_sinf+0x7c>
 801f8c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f8c4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801f914 <__kernel_sinf+0x80>
 801f8c8:	eea7 6a87 	vfma.f32	s12, s15, s14
 801f8cc:	eddf 7a12 	vldr	s15, [pc, #72]	; 801f918 <__kernel_sinf+0x84>
 801f8d0:	ee60 6a07 	vmul.f32	s13, s0, s14
 801f8d4:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f8d8:	b930      	cbnz	r0, 801f8e8 <__kernel_sinf+0x54>
 801f8da:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801f91c <__kernel_sinf+0x88>
 801f8de:	eea7 6a27 	vfma.f32	s12, s14, s15
 801f8e2:	eea6 0a26 	vfma.f32	s0, s12, s13
 801f8e6:	4770      	bx	lr
 801f8e8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801f8ec:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801f8f0:	eee0 7a86 	vfma.f32	s15, s1, s12
 801f8f4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801f8f8:	eddf 7a09 	vldr	s15, [pc, #36]	; 801f920 <__kernel_sinf+0x8c>
 801f8fc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801f900:	ee30 0a60 	vsub.f32	s0, s0, s1
 801f904:	4770      	bx	lr
 801f906:	bf00      	nop
 801f908:	2f2ec9d3 	.word	0x2f2ec9d3
 801f90c:	b2d72f34 	.word	0xb2d72f34
 801f910:	3638ef1b 	.word	0x3638ef1b
 801f914:	b9500d01 	.word	0xb9500d01
 801f918:	3c088889 	.word	0x3c088889
 801f91c:	be2aaaab 	.word	0xbe2aaaab
 801f920:	3e2aaaab 	.word	0x3e2aaaab

0801f924 <floorf>:
 801f924:	ee10 3a10 	vmov	r3, s0
 801f928:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801f92c:	3a7f      	subs	r2, #127	; 0x7f
 801f92e:	2a16      	cmp	r2, #22
 801f930:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801f934:	dc2a      	bgt.n	801f98c <floorf+0x68>
 801f936:	2a00      	cmp	r2, #0
 801f938:	da11      	bge.n	801f95e <floorf+0x3a>
 801f93a:	eddf 7a18 	vldr	s15, [pc, #96]	; 801f99c <floorf+0x78>
 801f93e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801f942:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f94a:	dd05      	ble.n	801f958 <floorf+0x34>
 801f94c:	2b00      	cmp	r3, #0
 801f94e:	da23      	bge.n	801f998 <floorf+0x74>
 801f950:	4a13      	ldr	r2, [pc, #76]	; (801f9a0 <floorf+0x7c>)
 801f952:	2900      	cmp	r1, #0
 801f954:	bf18      	it	ne
 801f956:	4613      	movne	r3, r2
 801f958:	ee00 3a10 	vmov	s0, r3
 801f95c:	4770      	bx	lr
 801f95e:	4911      	ldr	r1, [pc, #68]	; (801f9a4 <floorf+0x80>)
 801f960:	4111      	asrs	r1, r2
 801f962:	420b      	tst	r3, r1
 801f964:	d0fa      	beq.n	801f95c <floorf+0x38>
 801f966:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801f99c <floorf+0x78>
 801f96a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801f96e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f976:	ddef      	ble.n	801f958 <floorf+0x34>
 801f978:	2b00      	cmp	r3, #0
 801f97a:	bfbe      	ittt	lt
 801f97c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801f980:	fa40 f202 	asrlt.w	r2, r0, r2
 801f984:	189b      	addlt	r3, r3, r2
 801f986:	ea23 0301 	bic.w	r3, r3, r1
 801f98a:	e7e5      	b.n	801f958 <floorf+0x34>
 801f98c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801f990:	d3e4      	bcc.n	801f95c <floorf+0x38>
 801f992:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f996:	4770      	bx	lr
 801f998:	2300      	movs	r3, #0
 801f99a:	e7dd      	b.n	801f958 <floorf+0x34>
 801f99c:	7149f2ca 	.word	0x7149f2ca
 801f9a0:	bf800000 	.word	0xbf800000
 801f9a4:	007fffff 	.word	0x007fffff

0801f9a8 <rintf>:
 801f9a8:	ee10 2a10 	vmov	r2, s0
 801f9ac:	b513      	push	{r0, r1, r4, lr}
 801f9ae:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801f9b2:	397f      	subs	r1, #127	; 0x7f
 801f9b4:	2916      	cmp	r1, #22
 801f9b6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801f9ba:	dc47      	bgt.n	801fa4c <rintf+0xa4>
 801f9bc:	b32b      	cbz	r3, 801fa0a <rintf+0x62>
 801f9be:	2900      	cmp	r1, #0
 801f9c0:	ee10 3a10 	vmov	r3, s0
 801f9c4:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 801f9c8:	da21      	bge.n	801fa0e <rintf+0x66>
 801f9ca:	f3c2 0316 	ubfx	r3, r2, #0, #23
 801f9ce:	425b      	negs	r3, r3
 801f9d0:	4921      	ldr	r1, [pc, #132]	; (801fa58 <rintf+0xb0>)
 801f9d2:	0a5b      	lsrs	r3, r3, #9
 801f9d4:	0d12      	lsrs	r2, r2, #20
 801f9d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f9da:	0512      	lsls	r2, r2, #20
 801f9dc:	4313      	orrs	r3, r2
 801f9de:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 801f9e2:	ee07 3a90 	vmov	s15, r3
 801f9e6:	edd1 6a00 	vldr	s13, [r1]
 801f9ea:	ee36 7aa7 	vadd.f32	s14, s13, s15
 801f9ee:	ed8d 7a01 	vstr	s14, [sp, #4]
 801f9f2:	eddd 7a01 	vldr	s15, [sp, #4]
 801f9f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f9fa:	ee17 3a90 	vmov	r3, s15
 801f9fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fa02:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 801fa06:	ee00 3a10 	vmov	s0, r3
 801fa0a:	b002      	add	sp, #8
 801fa0c:	bd10      	pop	{r4, pc}
 801fa0e:	4a13      	ldr	r2, [pc, #76]	; (801fa5c <rintf+0xb4>)
 801fa10:	410a      	asrs	r2, r1
 801fa12:	4213      	tst	r3, r2
 801fa14:	d0f9      	beq.n	801fa0a <rintf+0x62>
 801fa16:	0854      	lsrs	r4, r2, #1
 801fa18:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 801fa1c:	d006      	beq.n	801fa2c <rintf+0x84>
 801fa1e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801fa22:	ea23 0304 	bic.w	r3, r3, r4
 801fa26:	fa42 f101 	asr.w	r1, r2, r1
 801fa2a:	430b      	orrs	r3, r1
 801fa2c:	4a0a      	ldr	r2, [pc, #40]	; (801fa58 <rintf+0xb0>)
 801fa2e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801fa32:	ed90 7a00 	vldr	s14, [r0]
 801fa36:	ee07 3a90 	vmov	s15, r3
 801fa3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801fa3e:	edcd 7a01 	vstr	s15, [sp, #4]
 801fa42:	ed9d 0a01 	vldr	s0, [sp, #4]
 801fa46:	ee30 0a47 	vsub.f32	s0, s0, s14
 801fa4a:	e7de      	b.n	801fa0a <rintf+0x62>
 801fa4c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801fa50:	d3db      	bcc.n	801fa0a <rintf+0x62>
 801fa52:	ee30 0a00 	vadd.f32	s0, s0, s0
 801fa56:	e7d8      	b.n	801fa0a <rintf+0x62>
 801fa58:	08020b94 	.word	0x08020b94
 801fa5c:	007fffff 	.word	0x007fffff

0801fa60 <_init>:
 801fa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa62:	bf00      	nop
 801fa64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fa66:	bc08      	pop	{r3}
 801fa68:	469e      	mov	lr, r3
 801fa6a:	4770      	bx	lr

0801fa6c <_fini>:
 801fa6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa6e:	bf00      	nop
 801fa70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fa72:	bc08      	pop	{r3}
 801fa74:	469e      	mov	lr, r3
 801fa76:	4770      	bx	lr
