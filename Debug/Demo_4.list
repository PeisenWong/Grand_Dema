
Demo_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020008  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000efc  08020198  08020198  00030198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021094  08021094  00040264  2**0
                  CONTENTS
  4 .ARM          00000008  08021094  08021094  00031094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802109c  0802109c  00040264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802109c  0802109c  0003109c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080210a0  080210a0  000310a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  080210a4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a84c  20000268  08021308  00040268  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000aab4  08021308  0004aab4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040264  2**0
                  CONTENTS, READONLY
 12 .debug_info   000a475e  00000000  00000000  00040294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a36f  00000000  00000000  000e49f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002828  00000000  00000000  000eed68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002570  00000000  00000000  000f1590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000316c2  00000000  00000000  000f3b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000464d0  00000000  00000000  001251c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eae72  00000000  00000000  0016b692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00256504  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bf5c  00000000  00000000  00256558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000268 	.word	0x20000268
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08020180 	.word	0x08020180

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000026c 	.word	0x2000026c
 80001cc:	08020180 	.word	0x08020180

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <ABTInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void ABTInit(float samp_time, float a, float b, float g, float *ip, float *pos, float *vel, float *acc, ABT_t *filt)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	ed87 0a07 	vstr	s0, [r7, #28]
 8000ff6:	edc7 0a06 	vstr	s1, [r7, #24]
 8000ffa:	ed87 1a05 	vstr	s2, [r7, #20]
 8000ffe:	edc7 1a04 	vstr	s3, [r7, #16]
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	603b      	str	r3, [r7, #0]
	filt->sample_time = samp_time;
 800100a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100c:	69fa      	ldr	r2, [r7, #28]
 800100e:	601a      	str	r2, [r3, #0]
	filt->alpha = a;
 8001010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	605a      	str	r2, [r3, #4]
	filt->beta = b;
 8001016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	609a      	str	r2, [r3, #8]
	filt->gamma = g;
 800101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	60da      	str	r2, [r3, #12]
	filt->input = ip;
 8001022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	611a      	str	r2, [r3, #16]
	filt->pos_output = pos;
 8001028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	615a      	str	r2, [r3, #20]
	filt->vel_output = vel;
 800102e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
	filt->acc_output = acc;
 8001034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	61da      	str	r2, [r3, #28]
}
 800103a:	bf00      	nop
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <ABTEstimateInit>:

void ABTEstimateInit(ABT_t *filt)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
	*(filt->pos_output) = 0;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	*(filt->vel_output) = 0;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
	*(filt->acc_output) = 0;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <BDCInit>:
 * Function Return		: None
 * Function Example		: BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 * 						  BDCInit(&BDC2, &htim3, TIM_CHANNEL_1, GPIO, GPIOA, GPIO_Pin_9, GPIOA, GPIO_Pin_10);
 */

void BDCInit(BDC_t* bdc,TIM_HandleTypeDef* htimx,uint32_t Channel, BCDDIRPINType Dirpintype, ...){
 8001078:	b408      	push	{r3}
 800107a:	b580      	push	{r7, lr}
 800107c:	b089      	sub	sp, #36	; 0x24
 800107e:	af02      	add	r7, sp, #8
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]

	bdc->htim = htimx;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	68ba      	ldr	r2, [r7, #8]
 800108a:	61da      	str	r2, [r3, #28]
	bdc->Channel = Channel;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	621a      	str	r2, [r3, #32]
	bdc->Dirpintype =  Dirpintype;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001098:	701a      	strb	r2, [r3, #0]

	va_list pinconfig;
	va_start(pinconfig, Dirpintype);
 800109a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109e:	617b      	str	r3, [r7, #20]

	if( bdc->Dirpintype == GPIO){
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d12e      	bne.n	8001106 <BDCInit+0x8e>

		bdc->GPIOx_DIR1 = va_arg(pinconfig, GPIO_TypeDef*);
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	1d1a      	adds	r2, r3, #4
 80010ac:	617a      	str	r2, [r7, #20]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	605a      	str	r2, [r3, #4]
		bdc->GPIO_Pin_DIR1	= va_arg(pinconfig, int);
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	1d1a      	adds	r2, r3, #4
 80010b8:	617a      	str	r2, [r7, #20]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	b29a      	uxth	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	811a      	strh	r2, [r3, #8]
		bdc->GPIOx_DIR2 = va_arg(pinconfig, GPIO_TypeDef*);
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	1d1a      	adds	r2, r3, #4
 80010c6:	617a      	str	r2, [r7, #20]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	60da      	str	r2, [r3, #12]
		bdc->GPIO_Pin_DIR2	= va_arg(pinconfig, int);
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	1d1a      	adds	r2, r3, #4
 80010d2:	617a      	str	r2, [r7, #20]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	821a      	strh	r2, [r3, #16]



		GPIOPinsInit(bdc->GPIOx_DIR1, bdc->GPIO_Pin_DIR1,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6858      	ldr	r0, [r3, #4]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	8919      	ldrh	r1, [r3, #8]
 80010e4:	2301      	movs	r3, #1
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2302      	movs	r3, #2
 80010ea:	2201      	movs	r2, #1
 80010ec:	f000 f908 	bl	8001300 <GPIOPinsInit>
		GPIOPinsInit(bdc->GPIOx_DIR2, bdc->GPIO_Pin_DIR2,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	68d8      	ldr	r0, [r3, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8a19      	ldrh	r1, [r3, #16]
 80010f8:	2301      	movs	r3, #1
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2302      	movs	r3, #2
 80010fe:	2201      	movs	r2, #1
 8001100:	f000 f8fe 	bl	8001300 <GPIOPinsInit>
 8001104:	e017      	b.n	8001136 <BDCInit+0xbe>

	}else if(bdc->Dirpintype == SHIFTREG){
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d113      	bne.n	8001136 <BDCInit+0xbe>

		bdc->shiftreg = va_arg(pinconfig, byte_t *);
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	1d1a      	adds	r2, r3, #4
 8001112:	617a      	str	r2, [r7, #20]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	615a      	str	r2, [r3, #20]
		bdc->dir1 = va_arg(pinconfig, int);
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	1d1a      	adds	r2, r3, #4
 800111e:	617a      	str	r2, [r7, #20]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	761a      	strb	r2, [r3, #24]
		bdc->dir2 = va_arg(pinconfig, int);
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	1d1a      	adds	r2, r3, #4
 800112c:	617a      	str	r2, [r7, #20]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	765a      	strb	r2, [r3, #25]
	}

	va_end(pinconfig);
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6a1b      	ldr	r3, [r3, #32]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d105      	bne.n	800114a <BDCInit+0xd2>
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2200      	movs	r2, #0
 8001146:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001148:	e018      	b.n	800117c <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	2b04      	cmp	r3, #4
 8001150:	d105      	bne.n	800115e <BDCInit+0xe6>
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	2300      	movs	r3, #0
 800115a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800115c:	e00e      	b.n	800117c <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	2b08      	cmp	r3, #8
 8001164:	d105      	bne.n	8001172 <BDCInit+0xfa>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	2300      	movs	r3, #0
 800116e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001170:	e004      	b.n	800117c <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2300      	movs	r3, #0
 800117a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800117c:	bf00      	nop
 800117e:	371c      	adds	r7, #28
 8001180:	46bd      	mov	sp, r7
 8001182:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001186:	b001      	add	sp, #4
 8001188:	4770      	bx	lr

0800118a <WriteBDC>:
 * Function Return		: None
 * Function Example		: WriteBDC(&BDC1,20000);
 */

void WriteBDC(BDC_t* bdc, int32_t pwm)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	6039      	str	r1, [r7, #0]

	if(pwm >= 0){
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db52      	blt.n	8001240 <WriteBDC+0xb6>

		//*(bdc-> speed) = pwm;
		__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), pwm);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a1b      	ldr	r3, [r3, #32]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d105      	bne.n	80011ae <WriteBDC+0x24>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34
 80011ac:	e018      	b.n	80011e0 <WriteBDC+0x56>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d105      	bne.n	80011c2 <WriteBDC+0x38>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	6393      	str	r3, [r2, #56]	; 0x38
 80011c0:	e00e      	b.n	80011e0 <WriteBDC+0x56>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d105      	bne.n	80011d6 <WriteBDC+0x4c>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011d4:	e004      	b.n	80011e0 <WriteBDC+0x56>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	6413      	str	r3, [r2, #64]	; 0x40

		if( bdc->Dirpintype == GPIO){
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d110      	bne.n	800120a <WriteBDC+0x80>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_SET);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6858      	ldr	r0, [r3, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	891b      	ldrh	r3, [r3, #8]
 80011f0:	2201      	movs	r2, #1
 80011f2:	4619      	mov	r1, r3
 80011f4:	f011 fc2e 	bl	8012a54 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_RESET);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68d8      	ldr	r0, [r3, #12]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	8a1b      	ldrh	r3, [r3, #16]
 8001200:	2200      	movs	r2, #0
 8001202:	4619      	mov	r1, r3
 8001204:	f011 fc26 	bl	8012a54 <HAL_GPIO_WritePin>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
			bdc->shiftreg->Byte |= bdc->dir2;

		}
	}
}
 8001208:	e076      	b.n	80012f8 <WriteBDC+0x16e>
		}else if(bdc->Dirpintype == SHIFTREG){
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d172      	bne.n	80012f8 <WriteBDC+0x16e>
			bdc->shiftreg->Byte |= bdc->dir1;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	7819      	ldrb	r1, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7e1a      	ldrb	r2, [r3, #24]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	430a      	orrs	r2, r1
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir2);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	7819      	ldrb	r1, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7e5b      	ldrb	r3, [r3, #25]
 8001230:	43db      	mvns	r3, r3
 8001232:	b2da      	uxtb	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	400a      	ands	r2, r1
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	701a      	strb	r2, [r3, #0]
}
 800123e:	e05b      	b.n	80012f8 <WriteBDC+0x16e>
	}else if (pwm < 0){
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	da58      	bge.n	80012f8 <WriteBDC+0x16e>
		__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), pwm*(-1));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d106      	bne.n	800125c <WriteBDC+0xd2>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	425a      	negs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
 800125a:	e01e      	b.n	800129a <WriteBDC+0x110>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	2b04      	cmp	r3, #4
 8001262:	d107      	bne.n	8001274 <WriteBDC+0xea>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	4259      	negs	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	460b      	mov	r3, r1
 8001270:	6393      	str	r3, [r2, #56]	; 0x38
 8001272:	e012      	b.n	800129a <WriteBDC+0x110>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	2b08      	cmp	r3, #8
 800127a:	d107      	bne.n	800128c <WriteBDC+0x102>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	4259      	negs	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	460b      	mov	r3, r1
 8001288:	63d3      	str	r3, [r2, #60]	; 0x3c
 800128a:	e006      	b.n	800129a <WriteBDC+0x110>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	4259      	negs	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	460b      	mov	r3, r1
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
		if( bdc->Dirpintype == GPIO){
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d110      	bne.n	80012c4 <WriteBDC+0x13a>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_RESET);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6858      	ldr	r0, [r3, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	891b      	ldrh	r3, [r3, #8]
 80012aa:	2200      	movs	r2, #0
 80012ac:	4619      	mov	r1, r3
 80012ae:	f011 fbd1 	bl	8012a54 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_SET);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68d8      	ldr	r0, [r3, #12]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	8a1b      	ldrh	r3, [r3, #16]
 80012ba:	2201      	movs	r2, #1
 80012bc:	4619      	mov	r1, r3
 80012be:	f011 fbc9 	bl	8012a54 <HAL_GPIO_WritePin>
}
 80012c2:	e019      	b.n	80012f8 <WriteBDC+0x16e>
		}else if(bdc->Dirpintype == SHIFTREG){
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d115      	bne.n	80012f8 <WriteBDC+0x16e>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	7819      	ldrb	r1, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7e1b      	ldrb	r3, [r3, #24]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	400a      	ands	r2, r1
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte |= bdc->dir2;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	7819      	ldrb	r1, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	7e5a      	ldrb	r2, [r3, #25]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	701a      	strb	r2, [r3, #0]
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <GPIOPinsInit>:
 * Function Return		: None
 * Function Example		: GPIOPinsInit(GPIOA, GPIO_Pin_2, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 */

void GPIOPinsInit (GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin,uint32_t Mode, uint32_t GPIO_Speed,  uint32_t GPIO_PuPd)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b092      	sub	sp, #72	; 0x48
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	460b      	mov	r3, r1
 800130e:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]

	switch((uint32_t)GPIOx){
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4a6a      	ldr	r2, [pc, #424]	; (80014cc <GPIOPinsInit+0x1cc>)
 8001324:	4293      	cmp	r3, r2
 8001326:	f000 80af 	beq.w	8001488 <GPIOPinsInit+0x188>
 800132a:	4a68      	ldr	r2, [pc, #416]	; (80014cc <GPIOPinsInit+0x1cc>)
 800132c:	4293      	cmp	r3, r2
 800132e:	f200 80ba 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001332:	4a67      	ldr	r2, [pc, #412]	; (80014d0 <GPIOPinsInit+0x1d0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	f000 8098 	beq.w	800146a <GPIOPinsInit+0x16a>
 800133a:	4a65      	ldr	r2, [pc, #404]	; (80014d0 <GPIOPinsInit+0x1d0>)
 800133c:	4293      	cmp	r3, r2
 800133e:	f200 80b2 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001342:	4a64      	ldr	r2, [pc, #400]	; (80014d4 <GPIOPinsInit+0x1d4>)
 8001344:	4293      	cmp	r3, r2
 8001346:	f000 8081 	beq.w	800144c <GPIOPinsInit+0x14c>
 800134a:	4a62      	ldr	r2, [pc, #392]	; (80014d4 <GPIOPinsInit+0x1d4>)
 800134c:	4293      	cmp	r3, r2
 800134e:	f200 80aa 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001352:	4a61      	ldr	r2, [pc, #388]	; (80014d8 <GPIOPinsInit+0x1d8>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d06a      	beq.n	800142e <GPIOPinsInit+0x12e>
 8001358:	4a5f      	ldr	r2, [pc, #380]	; (80014d8 <GPIOPinsInit+0x1d8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	f200 80a3 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001360:	4a5e      	ldr	r2, [pc, #376]	; (80014dc <GPIOPinsInit+0x1dc>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d054      	beq.n	8001410 <GPIOPinsInit+0x110>
 8001366:	4a5d      	ldr	r2, [pc, #372]	; (80014dc <GPIOPinsInit+0x1dc>)
 8001368:	4293      	cmp	r3, r2
 800136a:	f200 809c 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 800136e:	4a5c      	ldr	r2, [pc, #368]	; (80014e0 <GPIOPinsInit+0x1e0>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d03e      	beq.n	80013f2 <GPIOPinsInit+0xf2>
 8001374:	4a5a      	ldr	r2, [pc, #360]	; (80014e0 <GPIOPinsInit+0x1e0>)
 8001376:	4293      	cmp	r3, r2
 8001378:	f200 8095 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 800137c:	4a59      	ldr	r2, [pc, #356]	; (80014e4 <GPIOPinsInit+0x1e4>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d028      	beq.n	80013d4 <GPIOPinsInit+0xd4>
 8001382:	4a58      	ldr	r2, [pc, #352]	; (80014e4 <GPIOPinsInit+0x1e4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	f200 808e 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 800138a:	4a57      	ldr	r2, [pc, #348]	; (80014e8 <GPIOPinsInit+0x1e8>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d003      	beq.n	8001398 <GPIOPinsInit+0x98>
 8001390:	4a56      	ldr	r2, [pc, #344]	; (80014ec <GPIOPinsInit+0x1ec>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00f      	beq.n	80013b6 <GPIOPinsInit+0xb6>
	break;

	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
	break;

	default: break;
 8001396:	e086      	b.n	80014a6 <GPIOPinsInit+0x1a6>
	case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	633b      	str	r3, [r7, #48]	; 0x30
 800139c:	4b54      	ldr	r3, [pc, #336]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	4a53      	ldr	r2, [pc, #332]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6313      	str	r3, [r2, #48]	; 0x30
 80013a8:	4b51      	ldr	r3, [pc, #324]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	633b      	str	r3, [r7, #48]	; 0x30
 80013b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	break;
 80013b4:	e078      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ba:	4b4d      	ldr	r3, [pc, #308]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a4c      	ldr	r2, [pc, #304]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b4a      	ldr	r3, [pc, #296]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	break;
 80013d2:	e069      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013d4:	2300      	movs	r3, #0
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80013d8:	4b45      	ldr	r3, [pc, #276]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	4a44      	ldr	r2, [pc, #272]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	6313      	str	r3, [r2, #48]	; 0x30
 80013e4:	4b42      	ldr	r3, [pc, #264]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
	break;
 80013f0:	e05a      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
 80013f6:	4b3e      	ldr	r3, [pc, #248]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a3d      	ldr	r2, [pc, #244]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b3b      	ldr	r3, [pc, #236]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	break;
 800140e:	e04b      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
 8001414:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	4a35      	ldr	r2, [pc, #212]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800141a:	f043 0310 	orr.w	r3, r3, #16
 800141e:	6313      	str	r3, [r2, #48]	; 0x30
 8001420:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	f003 0310 	and.w	r3, r3, #16
 8001428:	623b      	str	r3, [r7, #32]
 800142a:	6a3b      	ldr	r3, [r7, #32]
	break;
 800142c:	e03c      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	4b2f      	ldr	r3, [pc, #188]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a2e      	ldr	r2, [pc, #184]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001438:	f043 0320 	orr.w	r3, r3, #32
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0320 	and.w	r3, r3, #32
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	69fb      	ldr	r3, [r7, #28]
	break;
 800144a:	e02d      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 800144c:	2300      	movs	r3, #0
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	4a26      	ldr	r2, [pc, #152]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800145a:	6313      	str	r3, [r2, #48]	; 0x30
 800145c:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001464:	61bb      	str	r3, [r7, #24]
 8001466:	69bb      	ldr	r3, [r7, #24]
	break;
 8001468:	e01e      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a1f      	ldr	r2, [pc, #124]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697b      	ldr	r3, [r7, #20]
	break;
 8001486:	e00f      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001496:	6313      	str	r3, [r2, #48]	; 0x30
 8001498:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]
	break;
 80014a4:	e000      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	default: break;
 80014a6:	bf00      	nop
	}


	GPIO_InitStruct.Pin = GPIO_Pin;
 80014a8:	897b      	ldrh	r3, [r7, #10]
 80014aa:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Mode = Mode;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PuPd;
 80014b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_Speed;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80014b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014bc:	4619      	mov	r1, r3
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f011 f818 	bl	80124f4 <HAL_GPIO_Init>

}
 80014c4:	bf00      	nop
 80014c6:	3748      	adds	r7, #72	; 0x48
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40022000 	.word	0x40022000
 80014d0:	40021c00 	.word	0x40021c00
 80014d4:	40021800 	.word	0x40021800
 80014d8:	40021400 	.word	0x40021400
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40020c00 	.word	0x40020c00
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020400 	.word	0x40020400
 80014f0:	40023800 	.word	0x40023800

080014f4 <PWMTimeBaseInit>:
 * 						  Prescaler 	Prescaler value to divide TIM clock (1 to 65535)
 * Function Return		: None
 * Function Example		: PWMTimeBaseInit(&htim3, 20000, 84);
 */
void PWMTimeBaseInit(TIM_HandleTypeDef* htimx, uint32_t Period, uint32_t Prescaler)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001500:	f107 0318 	add.w	r3, r7, #24
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150e:	f107 0310 	add.w	r3, r7, #16
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]


	if(htimx == &htim1){
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4a52      	ldr	r2, [pc, #328]	; (8001664 <PWMTimeBaseInit+0x170>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d103      	bne.n	8001528 <PWMTimeBaseInit+0x34>
		htimx->Instance = TIM1;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4a51      	ldr	r2, [pc, #324]	; (8001668 <PWMTimeBaseInit+0x174>)
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	e057      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim2)	{
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4a50      	ldr	r2, [pc, #320]	; (800166c <PWMTimeBaseInit+0x178>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d104      	bne.n	800153a <PWMTimeBaseInit+0x46>
		htimx->Instance = TIM2;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	e04e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim3)	{
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4a4c      	ldr	r2, [pc, #304]	; (8001670 <PWMTimeBaseInit+0x17c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d103      	bne.n	800154a <PWMTimeBaseInit+0x56>
		htimx->Instance = TIM3;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4a4b      	ldr	r2, [pc, #300]	; (8001674 <PWMTimeBaseInit+0x180>)
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	e046      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim4)	{
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4a4a      	ldr	r2, [pc, #296]	; (8001678 <PWMTimeBaseInit+0x184>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d103      	bne.n	800155a <PWMTimeBaseInit+0x66>
		htimx->Instance = TIM4;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4a49      	ldr	r2, [pc, #292]	; (800167c <PWMTimeBaseInit+0x188>)
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	e03e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim5)	{
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4a48      	ldr	r2, [pc, #288]	; (8001680 <PWMTimeBaseInit+0x18c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d103      	bne.n	800156a <PWMTimeBaseInit+0x76>
		htimx->Instance = TIM5;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4a47      	ldr	r2, [pc, #284]	; (8001684 <PWMTimeBaseInit+0x190>)
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	e036      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim8)	{
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4a46      	ldr	r2, [pc, #280]	; (8001688 <PWMTimeBaseInit+0x194>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d103      	bne.n	800157a <PWMTimeBaseInit+0x86>
		htimx->Instance = TIM8;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4a45      	ldr	r2, [pc, #276]	; (800168c <PWMTimeBaseInit+0x198>)
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	e02e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim9)	{
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4a44      	ldr	r2, [pc, #272]	; (8001690 <PWMTimeBaseInit+0x19c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d103      	bne.n	800158a <PWMTimeBaseInit+0x96>
		htimx->Instance = TIM9;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4a43      	ldr	r2, [pc, #268]	; (8001694 <PWMTimeBaseInit+0x1a0>)
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	e026      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim10)	{
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4a42      	ldr	r2, [pc, #264]	; (8001698 <PWMTimeBaseInit+0x1a4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d103      	bne.n	800159a <PWMTimeBaseInit+0xa6>
		htimx->Instance = TIM10;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4a41      	ldr	r2, [pc, #260]	; (800169c <PWMTimeBaseInit+0x1a8>)
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	e01e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim11)	{
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4a40      	ldr	r2, [pc, #256]	; (80016a0 <PWMTimeBaseInit+0x1ac>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d103      	bne.n	80015aa <PWMTimeBaseInit+0xb6>
		htimx->Instance = TIM11;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4a3f      	ldr	r2, [pc, #252]	; (80016a4 <PWMTimeBaseInit+0x1b0>)
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	e016      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim12)	{
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4a3e      	ldr	r2, [pc, #248]	; (80016a8 <PWMTimeBaseInit+0x1b4>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d103      	bne.n	80015ba <PWMTimeBaseInit+0xc6>
		htimx->Instance = TIM12;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4a3d      	ldr	r2, [pc, #244]	; (80016ac <PWMTimeBaseInit+0x1b8>)
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	e00e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim13)	{
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4a3c      	ldr	r2, [pc, #240]	; (80016b0 <PWMTimeBaseInit+0x1bc>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d103      	bne.n	80015ca <PWMTimeBaseInit+0xd6>
		htimx->Instance = TIM13;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4a3b      	ldr	r2, [pc, #236]	; (80016b4 <PWMTimeBaseInit+0x1c0>)
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	e006      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
		}
	else if(htimx == &htim14)	{
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4a3a      	ldr	r2, [pc, #232]	; (80016b8 <PWMTimeBaseInit+0x1c4>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d102      	bne.n	80015d8 <PWMTimeBaseInit+0xe4>
		htimx->Instance = TIM14;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4a39      	ldr	r2, [pc, #228]	; (80016bc <PWMTimeBaseInit+0x1c8>)
 80015d6:	601a      	str	r2, [r3, #0]
		}

	htimx->Init.Prescaler = Prescaler - 1;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	1e5a      	subs	r2, r3, #1
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = Period - 1;
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	1e5a      	subs	r2, r3, #1
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2280      	movs	r2, #128	; 0x80
 80015f8:	619a      	str	r2, [r3, #24]
	 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f014 f854 	bl	80156a8 <HAL_TIM_Base_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <PWMTimeBaseInit+0x116>
	  {
	    Error_Handler();
 8001606:	f002 ffc5 	bl	8004594 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160e:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 8001610:	f107 0318 	add.w	r3, r7, #24
 8001614:	4619      	mov	r1, r3
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f014 fbba 	bl	8015d90 <HAL_TIM_ConfigClockSource>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <PWMTimeBaseInit+0x132>
	  {
	    Error_Handler();
 8001622:	f002 ffb7 	bl	8004594 <Error_Handler>
	  }
	if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f014 f8b1 	bl	801578e <HAL_TIM_PWM_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <PWMTimeBaseInit+0x142>
		{
			Error_Handler();
 8001632:	f002 ffaf 	bl	8004594 <Error_Handler>
		}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	4619      	mov	r1, r3
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f014 ff9f 	bl	8016588 <HAL_TIMEx_MasterConfigSynchronization>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <PWMTimeBaseInit+0x160>
	{
		Error_Handler();
 8001650:	f002 ffa0 	bl	8004594 <Error_Handler>
	}


    HAL_TIM_Base_Start(htimx);
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f014 f852 	bl	80156fe <HAL_TIM_Base_Start>

}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	; 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20006418 	.word	0x20006418
 8001668:	40010000 	.word	0x40010000
 800166c:	2000651c 	.word	0x2000651c
 8001670:	200061cc 	.word	0x200061cc
 8001674:	40000400 	.word	0x40000400
 8001678:	20006008 	.word	0x20006008
 800167c:	40000800 	.word	0x40000800
 8001680:	2000618c 	.word	0x2000618c
 8001684:	40000c00 	.word	0x40000c00
 8001688:	20005fc8 	.word	0x20005fc8
 800168c:	40010400 	.word	0x40010400
 8001690:	20006458 	.word	0x20006458
 8001694:	40014000 	.word	0x40014000
 8001698:	200060e8 	.word	0x200060e8
 800169c:	40014400 	.word	0x40014400
 80016a0:	20006330 	.word	0x20006330
 80016a4:	40014800 	.word	0x40014800
 80016a8:	2000663c 	.word	0x2000663c
 80016ac:	40001800 	.word	0x40001800
 80016b0:	200062b0 	.word	0x200062b0
 80016b4:	40001c00 	.word	0x40001c00
 80016b8:	200065fc 	.word	0x200065fc
 80016bc:	40002000 	.word	0x40002000

080016c0 <PWMChannelConfig>:
 * 						  GPIO_Pin_x	GPIO_Pin_x of PWM pin(x = 0,1,2,...or 15)
 * Function Return		: None
 * Function Example		: PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 */

void PWMChannelConfig(TIM_HandleTypeDef* htimx, uint32_t Channel , GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_x){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b09a      	sub	sp, #104	; 0x68
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	807b      	strh	r3, [r7, #2]

	TIM_OC_InitTypeDef sConfigOC = {0};
 80016ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
 80016dc:	611a      	str	r2, [r3, #16]
 80016de:	615a      	str	r2, [r3, #20]
 80016e0:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]

	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80016f2:	2370      	movs	r3, #112	; 0x70
 80016f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.Pulse = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80016fa:	2302      	movs	r3, #2
 80016fc:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80016fe:	2308      	movs	r3, #8
 8001700:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	65fb      	str	r3, [r7, #92]	; 0x5c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	667b      	str	r3, [r7, #100]	; 0x64

	if (HAL_TIM_PWM_ConfigChannel(htimx, &sConfigOC, Channel) != HAL_OK)
 800170e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	4619      	mov	r1, r3
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f014 fa74 	bl	8015c04 <HAL_TIM_PWM_ConfigChannel>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <PWMChannelConfig+0x66>
	{
		Error_Handler();
 8001722:	f002 ff37 	bl	8004594 <Error_Handler>
	}

	switch((uint32_t)GPIOx){
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a95      	ldr	r2, [pc, #596]	; (8001980 <PWMChannelConfig+0x2c0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	f000 80af 	beq.w	800188e <PWMChannelConfig+0x1ce>
 8001730:	4a93      	ldr	r2, [pc, #588]	; (8001980 <PWMChannelConfig+0x2c0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	f200 80ba 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001738:	4a92      	ldr	r2, [pc, #584]	; (8001984 <PWMChannelConfig+0x2c4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	f000 8098 	beq.w	8001870 <PWMChannelConfig+0x1b0>
 8001740:	4a90      	ldr	r2, [pc, #576]	; (8001984 <PWMChannelConfig+0x2c4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	f200 80b2 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001748:	4a8f      	ldr	r2, [pc, #572]	; (8001988 <PWMChannelConfig+0x2c8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	f000 8081 	beq.w	8001852 <PWMChannelConfig+0x192>
 8001750:	4a8d      	ldr	r2, [pc, #564]	; (8001988 <PWMChannelConfig+0x2c8>)
 8001752:	4293      	cmp	r3, r2
 8001754:	f200 80aa 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001758:	4a8c      	ldr	r2, [pc, #560]	; (800198c <PWMChannelConfig+0x2cc>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d06a      	beq.n	8001834 <PWMChannelConfig+0x174>
 800175e:	4a8b      	ldr	r2, [pc, #556]	; (800198c <PWMChannelConfig+0x2cc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	f200 80a3 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001766:	4a8a      	ldr	r2, [pc, #552]	; (8001990 <PWMChannelConfig+0x2d0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d054      	beq.n	8001816 <PWMChannelConfig+0x156>
 800176c:	4a88      	ldr	r2, [pc, #544]	; (8001990 <PWMChannelConfig+0x2d0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	f200 809c 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001774:	4a87      	ldr	r2, [pc, #540]	; (8001994 <PWMChannelConfig+0x2d4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d03e      	beq.n	80017f8 <PWMChannelConfig+0x138>
 800177a:	4a86      	ldr	r2, [pc, #536]	; (8001994 <PWMChannelConfig+0x2d4>)
 800177c:	4293      	cmp	r3, r2
 800177e:	f200 8095 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001782:	4a85      	ldr	r2, [pc, #532]	; (8001998 <PWMChannelConfig+0x2d8>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d028      	beq.n	80017da <PWMChannelConfig+0x11a>
 8001788:	4a83      	ldr	r2, [pc, #524]	; (8001998 <PWMChannelConfig+0x2d8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	f200 808e 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001790:	4a82      	ldr	r2, [pc, #520]	; (800199c <PWMChannelConfig+0x2dc>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d003      	beq.n	800179e <PWMChannelConfig+0xde>
 8001796:	4a82      	ldr	r2, [pc, #520]	; (80019a0 <PWMChannelConfig+0x2e0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d00f      	beq.n	80017bc <PWMChannelConfig+0xfc>
		break;

		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
		break;

		default: break;
 800179c:	e086      	b.n	80018ac <PWMChannelConfig+0x1ec>
		case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
 80017a2:	4b80      	ldr	r3, [pc, #512]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a7f      	ldr	r2, [pc, #508]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b7d      	ldr	r3, [pc, #500]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	637b      	str	r3, [r7, #52]	; 0x34
 80017b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		break;
 80017ba:	e078      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	633b      	str	r3, [r7, #48]	; 0x30
 80017c0:	4b78      	ldr	r3, [pc, #480]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	4a77      	ldr	r2, [pc, #476]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017c6:	f043 0302 	orr.w	r3, r3, #2
 80017ca:	6313      	str	r3, [r2, #48]	; 0x30
 80017cc:	4b75      	ldr	r3, [pc, #468]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
 80017d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		break;
 80017d8:	e069      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017de:	4b71      	ldr	r3, [pc, #452]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a70      	ldr	r2, [pc, #448]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b6e      	ldr	r3, [pc, #440]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		break;
 80017f6:	e05a      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80017f8:	2300      	movs	r3, #0
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80017fc:	4b69      	ldr	r3, [pc, #420]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001800:	4a68      	ldr	r2, [pc, #416]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001802:	f043 0308 	orr.w	r3, r3, #8
 8001806:	6313      	str	r3, [r2, #48]	; 0x30
 8001808:	4b66      	ldr	r3, [pc, #408]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
 8001812:	6abb      	ldr	r3, [r7, #40]	; 0x28
		break;
 8001814:	e04b      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
 800181a:	4b62      	ldr	r3, [pc, #392]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a61      	ldr	r2, [pc, #388]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001820:	f043 0310 	orr.w	r3, r3, #16
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b5f      	ldr	r3, [pc, #380]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		break;
 8001832:	e03c      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001834:	2300      	movs	r3, #0
 8001836:	623b      	str	r3, [r7, #32]
 8001838:	4b5a      	ldr	r3, [pc, #360]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183c:	4a59      	ldr	r2, [pc, #356]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800183e:	f043 0320 	orr.w	r3, r3, #32
 8001842:	6313      	str	r3, [r2, #48]	; 0x30
 8001844:	4b57      	ldr	r3, [pc, #348]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	f003 0320 	and.w	r3, r3, #32
 800184c:	623b      	str	r3, [r7, #32]
 800184e:	6a3b      	ldr	r3, [r7, #32]
		break;
 8001850:	e02d      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
 8001856:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a52      	ldr	r2, [pc, #328]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800185c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b50      	ldr	r3, [pc, #320]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	69fb      	ldr	r3, [r7, #28]
		break;
 800186e:	e01e      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	4b4b      	ldr	r3, [pc, #300]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	4a4a      	ldr	r2, [pc, #296]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800187a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800187e:	6313      	str	r3, [r2, #48]	; 0x30
 8001880:	4b48      	ldr	r3, [pc, #288]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	69bb      	ldr	r3, [r7, #24]
		break;
 800188c:	e00f      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	4b44      	ldr	r3, [pc, #272]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a43      	ldr	r2, [pc, #268]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	697b      	ldr	r3, [r7, #20]
		break;
 80018aa:	e000      	b.n	80018ae <PWMChannelConfig+0x1ee>
		default: break;
 80018ac:	bf00      	nop
		}

	    GPIO_InitStruct.Pin = GPIO_Pin_x;
 80018ae:	887b      	ldrh	r3, [r7, #2]
 80018b0:	63bb      	str	r3, [r7, #56]	; 0x38
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	643b      	str	r3, [r7, #64]	; 0x40
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ba:	2303      	movs	r3, #3
 80018bc:	647b      	str	r3, [r7, #68]	; 0x44
		if(htimx == &htim1){
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4a39      	ldr	r2, [pc, #228]	; (80019a8 <PWMChannelConfig+0x2e8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d102      	bne.n	80018cc <PWMChannelConfig+0x20c>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018c6:	2301      	movs	r3, #1
 80018c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80018ca:	e04b      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim2)	{
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4a37      	ldr	r2, [pc, #220]	; (80019ac <PWMChannelConfig+0x2ec>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d102      	bne.n	80018da <PWMChannelConfig+0x21a>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM2 ;
 80018d4:	2301      	movs	r3, #1
 80018d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80018d8:	e044      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim3)	{
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4a34      	ldr	r2, [pc, #208]	; (80019b0 <PWMChannelConfig+0x2f0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d102      	bne.n	80018e8 <PWMChannelConfig+0x228>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018e2:	2302      	movs	r3, #2
 80018e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80018e6:	e03d      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim4)	{
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4a32      	ldr	r2, [pc, #200]	; (80019b4 <PWMChannelConfig+0x2f4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d102      	bne.n	80018f6 <PWMChannelConfig+0x236>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018f0:	2302      	movs	r3, #2
 80018f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80018f4:	e036      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim5)	{
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4a2f      	ldr	r2, [pc, #188]	; (80019b8 <PWMChannelConfig+0x2f8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d102      	bne.n	8001904 <PWMChannelConfig+0x244>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80018fe:	2302      	movs	r3, #2
 8001900:	64bb      	str	r3, [r7, #72]	; 0x48
 8001902:	e02f      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim8)	{
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4a2d      	ldr	r2, [pc, #180]	; (80019bc <PWMChannelConfig+0x2fc>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d102      	bne.n	8001912 <PWMChannelConfig+0x252>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800190c:	2303      	movs	r3, #3
 800190e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001910:	e028      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim9)	{
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4a2a      	ldr	r2, [pc, #168]	; (80019c0 <PWMChannelConfig+0x300>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d102      	bne.n	8001920 <PWMChannelConfig+0x260>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800191a:	2303      	movs	r3, #3
 800191c:	64bb      	str	r3, [r7, #72]	; 0x48
 800191e:	e021      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim10)	{
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4a28      	ldr	r2, [pc, #160]	; (80019c4 <PWMChannelConfig+0x304>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d102      	bne.n	800192e <PWMChannelConfig+0x26e>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001928:	2303      	movs	r3, #3
 800192a:	64bb      	str	r3, [r7, #72]	; 0x48
 800192c:	e01a      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim11)	{
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4a25      	ldr	r2, [pc, #148]	; (80019c8 <PWMChannelConfig+0x308>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d102      	bne.n	800193c <PWMChannelConfig+0x27c>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001936:	2303      	movs	r3, #3
 8001938:	64bb      	str	r3, [r7, #72]	; 0x48
 800193a:	e013      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim12)	{
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4a23      	ldr	r2, [pc, #140]	; (80019cc <PWMChannelConfig+0x30c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d102      	bne.n	800194a <PWMChannelConfig+0x28a>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001944:	2309      	movs	r3, #9
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48
 8001948:	e00c      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim13)	{
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4a20      	ldr	r2, [pc, #128]	; (80019d0 <PWMChannelConfig+0x310>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d102      	bne.n	8001958 <PWMChannelConfig+0x298>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001952:	2309      	movs	r3, #9
 8001954:	64bb      	str	r3, [r7, #72]	; 0x48
 8001956:	e005      	b.n	8001964 <PWMChannelConfig+0x2a4>
			}
		else if(htimx == &htim14)	{
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4a1e      	ldr	r2, [pc, #120]	; (80019d4 <PWMChannelConfig+0x314>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d101      	bne.n	8001964 <PWMChannelConfig+0x2a4>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001960:	2309      	movs	r3, #9
 8001962:	64bb      	str	r3, [r7, #72]	; 0x48
			}

	    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001964:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001968:	4619      	mov	r1, r3
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f010 fdc2 	bl	80124f4 <HAL_GPIO_Init>


	    HAL_TIM_PWM_Start(htimx,Channel);
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f013 ff36 	bl	80157e4 <HAL_TIM_PWM_Start>

}
 8001978:	bf00      	nop
 800197a:	3768      	adds	r7, #104	; 0x68
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40022000 	.word	0x40022000
 8001984:	40021c00 	.word	0x40021c00
 8001988:	40021800 	.word	0x40021800
 800198c:	40021400 	.word	0x40021400
 8001990:	40021000 	.word	0x40021000
 8001994:	40020c00 	.word	0x40020c00
 8001998:	40020800 	.word	0x40020800
 800199c:	40020000 	.word	0x40020000
 80019a0:	40020400 	.word	0x40020400
 80019a4:	40023800 	.word	0x40023800
 80019a8:	20006418 	.word	0x20006418
 80019ac:	2000651c 	.word	0x2000651c
 80019b0:	200061cc 	.word	0x200061cc
 80019b4:	20006008 	.word	0x20006008
 80019b8:	2000618c 	.word	0x2000618c
 80019bc:	20005fc8 	.word	0x20005fc8
 80019c0:	20006458 	.word	0x20006458
 80019c4:	200060e8 	.word	0x200060e8
 80019c8:	20006330 	.word	0x20006330
 80019cc:	2000663c 	.word	0x2000663c
 80019d0:	200062b0 	.word	0x200062b0
 80019d4:	200065fc 	.word	0x200065fc

080019d8 <QEIInit>:
 * Function Arguments	: htimx					Pointer to timer handle
 * Function Return		: None
 * Function Example		: QEIInit(&htim1,5,5);  	//Initialize QEI1
 */
void QEIInit(TIM_HandleTypeDef* htimx)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08e      	sub	sp, #56	; 0x38
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	TIM_Encoder_InitTypeDef sConfig = {0};
 80019e0:	f107 0310 	add.w	r3, r7, #16
 80019e4:	2224      	movs	r2, #36	; 0x24
 80019e6:	2100      	movs	r1, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f018 fc8f 	bl	801a30c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]

	IRQn_Type nvic;

	if(htimx == &htim1){
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a6b      	ldr	r2, [pc, #428]	; (8001ba8 <QEIInit+0x1d0>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d106      	bne.n	8001a0e <QEIInit+0x36>
		htimx->Instance = TIM1;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a6a      	ldr	r2, [pc, #424]	; (8001bac <QEIInit+0x1d4>)
 8001a04:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8001a06:	2319      	movs	r3, #25
 8001a08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a0c:	e036      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim2)	{
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a67      	ldr	r2, [pc, #412]	; (8001bb0 <QEIInit+0x1d8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d107      	bne.n	8001a26 <QEIInit+0x4e>
		htimx->Instance = TIM2;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a1c:	601a      	str	r2, [r3, #0]
		nvic=TIM2_IRQn;
 8001a1e:	231c      	movs	r3, #28
 8001a20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a24:	e02a      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim3)	{
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a62      	ldr	r2, [pc, #392]	; (8001bb4 <QEIInit+0x1dc>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d106      	bne.n	8001a3c <QEIInit+0x64>
		htimx->Instance = TIM3;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a61      	ldr	r2, [pc, #388]	; (8001bb8 <QEIInit+0x1e0>)
 8001a32:	601a      	str	r2, [r3, #0]
		nvic=TIM3_IRQn;
 8001a34:	231d      	movs	r3, #29
 8001a36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a3a:	e01f      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim4)	{
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a5f      	ldr	r2, [pc, #380]	; (8001bbc <QEIInit+0x1e4>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d106      	bne.n	8001a52 <QEIInit+0x7a>
		htimx->Instance = TIM4;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a5e      	ldr	r2, [pc, #376]	; (8001bc0 <QEIInit+0x1e8>)
 8001a48:	601a      	str	r2, [r3, #0]
		nvic=TIM4_IRQn;
 8001a4a:	231e      	movs	r3, #30
 8001a4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a50:	e014      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim5)	{
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a5b      	ldr	r2, [pc, #364]	; (8001bc4 <QEIInit+0x1ec>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d106      	bne.n	8001a68 <QEIInit+0x90>
		htimx->Instance = TIM5;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a5a      	ldr	r2, [pc, #360]	; (8001bc8 <QEIInit+0x1f0>)
 8001a5e:	601a      	str	r2, [r3, #0]
		nvic=TIM5_IRQn;
 8001a60:	2332      	movs	r3, #50	; 0x32
 8001a62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a66:	e009      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim8)	{
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a58      	ldr	r2, [pc, #352]	; (8001bcc <QEIInit+0x1f4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d105      	bne.n	8001a7c <QEIInit+0xa4>
		htimx->Instance = TIM8;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a57      	ldr	r2, [pc, #348]	; (8001bd0 <QEIInit+0x1f8>)
 8001a74:	601a      	str	r2, [r3, #0]
		nvic=TIM8_UP_TIM13_IRQn;
 8001a76:	232c      	movs	r3, #44	; 0x2c
 8001a78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	htimx->Init.Prescaler = 0;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = 0xFFFF;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a8e:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
	htimx->Init.RepetitionCounter = 0;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	615a      	str	r2, [r3, #20]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	613b      	str	r3, [r7, #16]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
	sConfig.IC1Filter = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001aba:	2301      	movs	r3, #1
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.IC2Filter = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_Encoder_Init(htimx, &sConfig) != HAL_OK)
 8001ac6:	f107 0310 	add.w	r3, r7, #16
 8001aca:	4619      	mov	r1, r3
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f013 fec7 	bl	8015860 <HAL_TIM_Encoder_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <QEIInit+0x104>
	{
		Error_Handler();
 8001ad8:	f002 fd5c 	bl	8004594 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8001ae4:	f107 0308 	add.w	r3, r7, #8
 8001ae8:	4619      	mov	r1, r3
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f014 fd4c 	bl	8016588 <HAL_TIMEx_MasterConfigSynchronization>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <QEIInit+0x122>
	{
		Error_Handler();
 8001af6:	f002 fd4d 	bl	8004594 <Error_Handler>
	}

	__HAL_TIM_CLEAR_IT(htimx, TIM_IT_UPDATE);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f06f 0201 	mvn.w	r2, #1
 8001b02:	611a      	str	r2, [r3, #16]
	__HAL_TIM_ENABLE_IT(htimx, TIM_IT_UPDATE);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	60da      	str	r2, [r3, #12]

	if(htimx == &htim1){
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a24      	ldr	r2, [pc, #144]	; (8001ba8 <QEIInit+0x1d0>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d111      	bne.n	8001b40 <QEIInit+0x168>
		HAL_NVIC_SetPriority(nvic, QEI1_IRQ_PRIO, 0);
 8001b1c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b20:	2200      	movs	r2, #0
 8001b22:	210e      	movs	r1, #14
 8001b24:	4618      	mov	r0, r3
 8001b26:	f010 f895 	bl	8011c54 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001b2a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f010 f8c8 	bl	8011cc4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001b34:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f010 f8a7 	bl	8011c8c <HAL_NVIC_EnableIRQ>
 8001b3e:	e02a      	b.n	8001b96 <QEIInit+0x1be>
	}else if(htimx == &htim4){
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a1e      	ldr	r2, [pc, #120]	; (8001bbc <QEIInit+0x1e4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d111      	bne.n	8001b6c <QEIInit+0x194>
		HAL_NVIC_SetPriority(nvic, QEI4_IRQ_PRIO, 0);
 8001b48:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	210e      	movs	r1, #14
 8001b50:	4618      	mov	r0, r3
 8001b52:	f010 f87f 	bl	8011c54 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001b56:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f010 f8b2 	bl	8011cc4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001b60:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b64:	4618      	mov	r0, r3
 8001b66:	f010 f891 	bl	8011c8c <HAL_NVIC_EnableIRQ>
 8001b6a:	e014      	b.n	8001b96 <QEIInit+0x1be>
	}else if(htimx == &htim8){
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a17      	ldr	r2, [pc, #92]	; (8001bcc <QEIInit+0x1f4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d110      	bne.n	8001b96 <QEIInit+0x1be>
		HAL_NVIC_SetPriority(nvic, QEI6_IRQ_PRIO, 0);
 8001b74:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b78:	2200      	movs	r2, #0
 8001b7a:	210e      	movs	r1, #14
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f010 f869 	bl	8011c54 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001b82:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b86:	4618      	mov	r0, r3
 8001b88:	f010 f89c 	bl	8011cc4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001b8c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b90:	4618      	mov	r0, r3
 8001b92:	f010 f87b 	bl	8011c8c <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8001b96:	213c      	movs	r1, #60	; 0x3c
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f013 fef3 	bl	8015984 <HAL_TIM_Encoder_Start>
}
 8001b9e:	bf00      	nop
 8001ba0:	3738      	adds	r7, #56	; 0x38
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20006418 	.word	0x20006418
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	2000651c 	.word	0x2000651c
 8001bb4:	200061cc 	.word	0x200061cc
 8001bb8:	40000400 	.word	0x40000400
 8001bbc:	20006008 	.word	0x20006008
 8001bc0:	40000800 	.word	0x40000800
 8001bc4:	2000618c 	.word	0x2000618c
 8001bc8:	40000c00 	.word	0x40000c00
 8001bcc:	20005fc8 	.word	0x20005fc8
 8001bd0:	40010400 	.word	0x40010400

08001bd4 <QEIReset>:
 * Function Return		: None
 * Function Example		: QEIReset(QEI1);
 */

void QEIReset(QEI_TypeDef QEIx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]

	switch (QEIx){
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	2b05      	cmp	r3, #5
 8001be4:	d839      	bhi.n	8001c5a <QEIReset+0x86>
 8001be6:	a201      	add	r2, pc, #4	; (adr r2, 8001bec <QEIReset+0x18>)
 8001be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bec:	08001c05 	.word	0x08001c05
 8001bf0:	08001c13 	.word	0x08001c13
 8001bf4:	08001c23 	.word	0x08001c23
 8001bf8:	08001c31 	.word	0x08001c31
 8001bfc:	08001c3f 	.word	0x08001c3f
 8001c00:	08001c4d 	.word	0x08001c4d

	case QEI1:	TIM1->CNT = 0;
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <QEIReset+0x94>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI1.count = 0;
 8001c0a:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <QEIReset+0x98>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
	break;
 8001c10:	e023      	b.n	8001c5a <QEIReset+0x86>

	case QEI2:	TIM2->CNT = 0;
 8001c12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c16:	2200      	movs	r2, #0
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI2.count = 0;
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <QEIReset+0x9c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
	break;
 8001c20:	e01b      	b.n	8001c5a <QEIReset+0x86>

	case QEI3:	TIM3->CNT = 0;
 8001c22:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <QEIReset+0xa0>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI3.count = 0;
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <QEIReset+0xa4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
	break;
 8001c2e:	e014      	b.n	8001c5a <QEIReset+0x86>

	case QEI4:	TIM4->CNT = 0;
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <QEIReset+0xa8>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI4.count = 0;
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <QEIReset+0xac>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
	break;
 8001c3c:	e00d      	b.n	8001c5a <QEIReset+0x86>

	case QEI5:	TIM5->CNT = 0;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <QEIReset+0xb0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI5.count = 0;
 8001c44:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <QEIReset+0xb4>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
	break;
 8001c4a:	e006      	b.n	8001c5a <QEIReset+0x86>

	case QEI6:	TIM8->CNT = 0;
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <QEIReset+0xb8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI6.count = 0;
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <QEIReset+0xbc>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
	break;
 8001c58:	bf00      	nop

	}
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40010000 	.word	0x40010000
 8001c6c:	20006978 	.word	0x20006978
 8001c70:	2000697c 	.word	0x2000697c
 8001c74:	40000400 	.word	0x40000400
 8001c78:	20006974 	.word	0x20006974
 8001c7c:	40000800 	.word	0x40000800
 8001c80:	2000699c 	.word	0x2000699c
 8001c84:	40000c00 	.word	0x40000c00
 8001c88:	20006998 	.word	0x20006998
 8001c8c:	40010400 	.word	0x40010400
 8001c90:	200069a0 	.word	0x200069a0

08001c94 <QEIDelay>:
 * Function Return		: None
 * Function Example		: QEIDelay(100);
 */

void QEIDelay(uint8_t value)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
	uint8_t currentvalues;
	value = value * 8400;
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	71fb      	strb	r3, [r7, #7]
	while(currentvalues < value)
 8001caa:	e002      	b.n	8001cb2 <QEIDelay+0x1e>
	{
		currentvalues++;
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	73fb      	strb	r3, [r7, #15]
	while(currentvalues < value)
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d3f8      	bcc.n	8001cac <QEIDelay+0x18>
	}
	currentvalues = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	73fb      	strb	r3, [r7, #15]
}
 8001cbe:	bf00      	nop
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <QEIRead>:
 * Function Arguments	: QEIx		where x can be 1 to 5.
 * Function Return		: QEI's count with 32 bits with sign.
 * Function Example		: QEIRead(QEI1);
 */

int32_t QEIRead(QEI_TypeDef QEIx){
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]

	int32_t value;
	switch(QEIx){
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	2b05      	cmp	r3, #5
 8001cdc:	d845      	bhi.n	8001d6a <QEIRead+0x9e>
 8001cde:	a201      	add	r2, pc, #4	; (adr r2, 8001ce4 <QEIRead+0x18>)
 8001ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce4:	08001cfd 	.word	0x08001cfd
 8001ce8:	08001d0f 	.word	0x08001d0f
 8001cec:	08001d23 	.word	0x08001d23
 8001cf0:	08001d35 	.word	0x08001d35
 8001cf4:	08001d47 	.word	0x08001d47
 8001cf8:	08001d59 	.word	0x08001d59

	case QEI1:	BIOS_QEI1.poscnt = TIM1-> CNT;
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <QEIRead+0xb0>)
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <QEIRead+0xb4>)
 8001d04:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI1.count;
 8001d06:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <QEIRead+0xb4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	60fb      	str	r3, [r7, #12]
	break;
 8001d0c:	e02e      	b.n	8001d6c <QEIRead+0xa0>

	case QEI2:	BIOS_QEI2.poscnt = TIM2-> CNT;
 8001d0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <QEIRead+0xb8>)
 8001d18:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI2.count;
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <QEIRead+0xb8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	60fb      	str	r3, [r7, #12]
	break;
 8001d20:	e024      	b.n	8001d6c <QEIRead+0xa0>

	case QEI3:	BIOS_QEI3.poscnt = TIM3-> CNT;
 8001d22:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <QEIRead+0xbc>)
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <QEIRead+0xc0>)
 8001d2a:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI3.count;
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <QEIRead+0xc0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
	break;
 8001d32:	e01b      	b.n	8001d6c <QEIRead+0xa0>

	case QEI4:	BIOS_QEI4.poscnt = TIM4-> CNT;
 8001d34:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <QEIRead+0xc4>)
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <QEIRead+0xc8>)
 8001d3c:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI4.count;
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <QEIRead+0xc8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	60fb      	str	r3, [r7, #12]
	break;
 8001d44:	e012      	b.n	8001d6c <QEIRead+0xa0>

	case QEI5:	BIOS_QEI5.poscnt = TIM5-> CNT;
 8001d46:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <QEIRead+0xcc>)
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <QEIRead+0xd0>)
 8001d4e:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI5.count;
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <QEIRead+0xd0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]
	break;
 8001d56:	e009      	b.n	8001d6c <QEIRead+0xa0>

	case QEI6:	BIOS_QEI6.poscnt = TIM8-> CNT;
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <QEIRead+0xd4>)
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <QEIRead+0xd8>)
 8001d60:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI6.count;
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <QEIRead+0xd8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	60fb      	str	r3, [r7, #12]
	break;
 8001d68:	e000      	b.n	8001d6c <QEIRead+0xa0>

	default: break;
 8001d6a:	bf00      	nop
	}

	return value;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40010000 	.word	0x40010000
 8001d80:	20006978 	.word	0x20006978
 8001d84:	2000697c 	.word	0x2000697c
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	20006974 	.word	0x20006974
 8001d90:	40000800 	.word	0x40000800
 8001d94:	2000699c 	.word	0x2000699c
 8001d98:	40000c00 	.word	0x40000c00
 8001d9c:	20006998 	.word	0x20006998
 8001da0:	40010400 	.word	0x40010400
 8001da4:	200069a0 	.word	0x200069a0

08001da8 <SHIFTREGInit>:
 * Function Return		: None
 * Function Example		: SHIFTREGInit(&shiftreg, CASCADE_1, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1, GPIOD, GPIO_Pin_2);
 */

void SHIFTREGInit (shiftreg_t* shiftreg, fSR cascade, GPIO_TypeDef *GPIOx_sck, uint16_t GPIO_Pin_sck,
		           GPIO_TypeDef *GPIOx_rck , uint16_t GPIO_Pin_rck,GPIO_TypeDef *GPIOx_si, uint16_t GPIO_Pin_si){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	461a      	mov	r2, r3
 8001db4:	460b      	mov	r3, r1
 8001db6:	72fb      	strb	r3, [r7, #11]
 8001db8:	4613      	mov	r3, r2
 8001dba:	813b      	strh	r3, [r7, #8]

	shiftreg->flag = cascade;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	7afa      	ldrb	r2, [r7, #11]
 8001dc0:	759a      	strb	r2, [r3, #22]

	shiftreg->GPIOx_sck = GPIOx_sck;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	601a      	str	r2, [r3, #0]
	shiftreg->GPIO_Pin_sck = GPIO_Pin_sck;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	893a      	ldrh	r2, [r7, #8]
 8001dcc:	809a      	strh	r2, [r3, #4]

	shiftreg->GPIOx_rck = GPIOx_rck;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	609a      	str	r2, [r3, #8]
	shiftreg->GPIO_Pin_rck = GPIO_Pin_rck;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8bba      	ldrh	r2, [r7, #28]
 8001dd8:	819a      	strh	r2, [r3, #12]

	shiftreg->GPIOx_si = GPIOx_si;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a3a      	ldr	r2, [r7, #32]
 8001dde:	611a      	str	r2, [r3, #16]
	shiftreg->GPIO_Pin_si = GPIO_Pin_si;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001de4:	829a      	strh	r2, [r3, #20]

	GPIOPinsInit(shiftreg->GPIOx_sck, shiftreg->GPIO_Pin_sck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8899      	ldrh	r1, [r3, #4]
 8001dee:	2301      	movs	r3, #1
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	2302      	movs	r3, #2
 8001df4:	2201      	movs	r2, #1
 8001df6:	f7ff fa83 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_rck, shiftreg->GPIO_Pin_rck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6898      	ldr	r0, [r3, #8]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8999      	ldrh	r1, [r3, #12]
 8001e02:	2301      	movs	r3, #1
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	2302      	movs	r3, #2
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f7ff fa79 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_si, shiftreg->GPIO_Pin_si , GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6918      	ldr	r0, [r3, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8a99      	ldrh	r1, [r3, #20]
 8001e16:	2301      	movs	r3, #1
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f7ff fa6f 	bl	8001300 <GPIOPinsInit>

}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <SHIFTREGShift>:
 * Function Arguments	: shiftreg			pointer to structure
 * Function Return		: None
 * Function Example		: SHIFTREGShift (&shiftreg);
 */

void SHIFTREGShift(shiftreg_t* shiftreg){
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b084      	sub	sp, #16
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]

	uint8_t out, i, j;

	i = shiftreg->flag;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	7d9b      	ldrb	r3, [r3, #22]
 8001e36:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	889b      	ldrh	r3, [r3, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	4619      	mov	r1, r3
 8001e44:	f010 fe06 	bl	8012a54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6898      	ldr	r0, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	899b      	ldrh	r3, [r3, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	4619      	mov	r1, r3
 8001e54:	f010 fdfe 	bl	8012a54 <HAL_GPIO_WritePin>

	do{
		out = shiftreg->cast[i].Byte;
 8001e58:	7bba      	ldrb	r2, [r7, #14]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3206      	adds	r2, #6
 8001e5e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8001e62:	73fb      	strb	r3, [r7, #15]
		for (j = 8; j; j--){
 8001e64:	2308      	movs	r3, #8
 8001e66:	737b      	strb	r3, [r7, #13]
 8001e68:	e02a      	b.n	8001ec0 <SHIFTREGShift+0x96>
			(out & 0x80) ? HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_SET) : HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_RESET);
 8001e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	da08      	bge.n	8001e84 <SHIFTREGShift+0x5a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6918      	ldr	r0, [r3, #16]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	8a9b      	ldrh	r3, [r3, #20]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f010 fde9 	bl	8012a54 <HAL_GPIO_WritePin>
 8001e82:	e007      	b.n	8001e94 <SHIFTREGShift+0x6a>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6918      	ldr	r0, [r3, #16]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	8a9b      	ldrh	r3, [r3, #20]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f010 fde0 	bl	8012a54 <HAL_GPIO_WritePin>
			out <<= 1;
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_SET);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	889b      	ldrh	r3, [r3, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f010 fdd5 	bl	8012a54 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	889b      	ldrh	r3, [r3, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f010 fdcd 	bl	8012a54 <HAL_GPIO_WritePin>
		for (j = 8; j; j--){
 8001eba:	7b7b      	ldrb	r3, [r7, #13]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	737b      	strb	r3, [r7, #13]
 8001ec0:	7b7b      	ldrb	r3, [r7, #13]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1d1      	bne.n	8001e6a <SHIFTREGShift+0x40>
		}
	}while(i--);
 8001ec6:	7bbb      	ldrb	r3, [r7, #14]
 8001ec8:	1e5a      	subs	r2, r3, #1
 8001eca:	73ba      	strb	r2, [r7, #14]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1c3      	bne.n	8001e58 <SHIFTREGShift+0x2e>

	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_SET);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6898      	ldr	r0, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	899b      	ldrh	r3, [r3, #12]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	4619      	mov	r1, r3
 8001edc:	f010 fdba 	bl	8012a54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6898      	ldr	r0, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	899b      	ldrh	r3, [r3, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	4619      	mov	r1, r3
 8001eec:	f010 fdb2 	bl	8012a54 <HAL_GPIO_WritePin>

}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_MspInit+0x54>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4a11      	ldr	r2, [pc, #68]	; (8001f4c <HAL_MspInit+0x54>)
 8001f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <HAL_MspInit+0x54>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_MspInit+0x54>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <HAL_MspInit+0x54>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f28:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <HAL_MspInit+0x54>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	210f      	movs	r1, #15
 8001f3a:	f06f 0001 	mvn.w	r0, #1
 8001f3e:	f00f fe89 	bl	8011c54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800

08001f50 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08c      	sub	sp, #48	; 0x30
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a42      	ldr	r2, [pc, #264]	; (8002078 <HAL_CAN_MspInit+0x128>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d135      	bne.n	8001fde <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001f72:	4b42      	ldr	r3, [pc, #264]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	3301      	adds	r3, #1
 8001f78:	4a40      	ldr	r2, [pc, #256]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8001f7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001f7c:	4b3f      	ldr	r3, [pc, #252]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d10d      	bne.n	8001fa0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001f84:	2300      	movs	r3, #0
 8001f86:	61bb      	str	r3, [r7, #24]
 8001f88:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	4a3c      	ldr	r2, [pc, #240]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001f8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f92:	6413      	str	r3, [r2, #64]	; 0x40
 8001f94:	4b3a      	ldr	r3, [pc, #232]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	61bb      	str	r3, [r7, #24]
 8001f9e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	4b36      	ldr	r3, [pc, #216]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	4a35      	ldr	r2, [pc, #212]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001faa:	f043 0308 	orr.w	r3, r3, #8
 8001fae:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb0:	4b33      	ldr	r3, [pc, #204]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	697b      	ldr	r3, [r7, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001fcc:	2309      	movs	r3, #9
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	482b      	ldr	r0, [pc, #172]	; (8002084 <HAL_CAN_MspInit+0x134>)
 8001fd8:	f010 fa8c 	bl	80124f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001fdc:	e048      	b.n	8002070 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a29      	ldr	r2, [pc, #164]	; (8002088 <HAL_CAN_MspInit+0x138>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d143      	bne.n	8002070 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001fe8:	2300      	movs	r3, #0
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	4b24      	ldr	r3, [pc, #144]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	4a23      	ldr	r2, [pc, #140]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001ff2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff8:	4b21      	ldr	r3, [pc, #132]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002004:	4b1d      	ldr	r3, [pc, #116]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	4a1c      	ldr	r2, [pc, #112]	; (800207c <HAL_CAN_MspInit+0x12c>)
 800200c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d10d      	bne.n	8002032 <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_CAN_MspInit+0x130>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	4a18      	ldr	r2, [pc, #96]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002020:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a11      	ldr	r2, [pc, #68]	; (8002080 <HAL_CAN_MspInit+0x130>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800204e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002060:	2309      	movs	r3, #9
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	4619      	mov	r1, r3
 800206a:	4808      	ldr	r0, [pc, #32]	; (800208c <HAL_CAN_MspInit+0x13c>)
 800206c:	f010 fa42 	bl	80124f4 <HAL_GPIO_Init>
}
 8002070:	bf00      	nop
 8002072:	3730      	adds	r7, #48	; 0x30
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40006400 	.word	0x40006400
 800207c:	20000284 	.word	0x20000284
 8002080:	40023800 	.word	0x40023800
 8002084:	40020c00 	.word	0x40020c00
 8002088:	40006800 	.word	0x40006800
 800208c:	40020400 	.word	0x40020400

08002090 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08e      	sub	sp, #56	; 0x38
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a5c      	ldr	r2, [pc, #368]	; (8002220 <HAL_I2C_MspInit+0x190>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d12d      	bne.n	800210e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
 80020b6:	4b5b      	ldr	r3, [pc, #364]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a5a      	ldr	r2, [pc, #360]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b58      	ldr	r3, [pc, #352]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	623b      	str	r3, [r7, #32]
 80020cc:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d4:	2312      	movs	r3, #18
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020d8:	2301      	movs	r3, #1
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020dc:	2303      	movs	r3, #3
 80020de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020e0:	2304      	movs	r3, #4
 80020e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e8:	4619      	mov	r1, r3
 80020ea:	484f      	ldr	r0, [pc, #316]	; (8002228 <HAL_I2C_MspInit+0x198>)
 80020ec:	f010 fa02 	bl	80124f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020f0:	2300      	movs	r3, #0
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	4b4b      	ldr	r3, [pc, #300]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	4a4a      	ldr	r2, [pc, #296]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002100:	4b48      	ldr	r3, [pc, #288]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800210c:	e083      	b.n	8002216 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a46      	ldr	r2, [pc, #280]	; (800222c <HAL_I2C_MspInit+0x19c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d12d      	bne.n	8002174 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002118:	2300      	movs	r3, #0
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	4b41      	ldr	r3, [pc, #260]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	4a40      	ldr	r2, [pc, #256]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002122:	f043 0302 	orr.w	r3, r3, #2
 8002126:	6313      	str	r3, [r2, #48]	; 0x30
 8002128:	4b3e      	ldr	r3, [pc, #248]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	61bb      	str	r3, [r7, #24]
 8002132:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002134:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800213a:	2312      	movs	r3, #18
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800213e:	2301      	movs	r3, #1
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002146:	2304      	movs	r3, #4
 8002148:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214e:	4619      	mov	r1, r3
 8002150:	4835      	ldr	r0, [pc, #212]	; (8002228 <HAL_I2C_MspInit+0x198>)
 8002152:	f010 f9cf 	bl	80124f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	4b32      	ldr	r3, [pc, #200]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	4a31      	ldr	r2, [pc, #196]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002160:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
 8002166:	4b2f      	ldr	r3, [pc, #188]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	697b      	ldr	r3, [r7, #20]
}
 8002172:	e050      	b.n	8002216 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a2d      	ldr	r2, [pc, #180]	; (8002230 <HAL_I2C_MspInit+0x1a0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d14b      	bne.n	8002216 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	4b28      	ldr	r3, [pc, #160]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a27      	ldr	r2, [pc, #156]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b25      	ldr	r3, [pc, #148]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	4b21      	ldr	r3, [pc, #132]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a20      	ldr	r2, [pc, #128]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021bc:	2312      	movs	r3, #18
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021c0:	2301      	movs	r3, #1
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c4:	2303      	movs	r3, #3
 80021c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021c8:	2304      	movs	r3, #4
 80021ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d0:	4619      	mov	r1, r3
 80021d2:	4818      	ldr	r0, [pc, #96]	; (8002234 <HAL_I2C_MspInit+0x1a4>)
 80021d4:	f010 f98e 	bl	80124f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021de:	2312      	movs	r3, #18
 80021e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021e2:	2301      	movs	r3, #1
 80021e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e6:	2303      	movs	r3, #3
 80021e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021ea:	2304      	movs	r3, #4
 80021ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f2:	4619      	mov	r1, r3
 80021f4:	4810      	ldr	r0, [pc, #64]	; (8002238 <HAL_I2C_MspInit+0x1a8>)
 80021f6:	f010 f97d 	bl	80124f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	4a08      	ldr	r2, [pc, #32]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002204:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002208:	6413      	str	r3, [r2, #64]	; 0x40
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
}
 8002216:	bf00      	nop
 8002218:	3738      	adds	r7, #56	; 0x38
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40005400 	.word	0x40005400
 8002224:	40023800 	.word	0x40023800
 8002228:	40020400 	.word	0x40020400
 800222c:	40005800 	.word	0x40005800
 8002230:	40005c00 	.word	0x40005c00
 8002234:	40020800 	.word	0x40020800
 8002238:	40020000 	.word	0x40020000

0800223c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a2a      	ldr	r2, [pc, #168]	; (80022f4 <HAL_I2C_MspDeInit+0xb8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d116      	bne.n	800227c <HAL_I2C_MspDeInit+0x40>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800224e:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a29      	ldr	r2, [pc, #164]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 8002254:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002258:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800225a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800225e:	4827      	ldr	r0, [pc, #156]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 8002260:	f010 fae4 	bl	801282c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002268:	4824      	ldr	r0, [pc, #144]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 800226a:	f010 fadf 	bl	801282c <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800226e:	201f      	movs	r0, #31
 8002270:	f00f fd1a 	bl	8011ca8 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8002274:	2020      	movs	r0, #32
 8002276:	f00f fd17 	bl	8011ca8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800227a:	e036      	b.n	80022ea <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1f      	ldr	r2, [pc, #124]	; (8002300 <HAL_I2C_MspDeInit+0xc4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d116      	bne.n	80022b4 <HAL_I2C_MspDeInit+0x78>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002286:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	4a1b      	ldr	r2, [pc, #108]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 800228c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002290:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002292:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002296:	4819      	ldr	r0, [pc, #100]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 8002298:	f010 fac8 	bl	801282c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800229c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022a0:	4816      	ldr	r0, [pc, #88]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 80022a2:	f010 fac3 	bl	801282c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 80022a6:	2021      	movs	r0, #33	; 0x21
 80022a8:	f00f fcfe 	bl	8011ca8 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 80022ac:	2022      	movs	r0, #34	; 0x22
 80022ae:	f00f fcfb 	bl	8011ca8 <HAL_NVIC_DisableIRQ>
}
 80022b2:	e01a      	b.n	80022ea <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C3)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a12      	ldr	r2, [pc, #72]	; (8002304 <HAL_I2C_MspDeInit+0xc8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d115      	bne.n	80022ea <HAL_I2C_MspDeInit+0xae>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	4a0d      	ldr	r2, [pc, #52]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 80022c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022c8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 80022ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ce:	480e      	ldr	r0, [pc, #56]	; (8002308 <HAL_I2C_MspDeInit+0xcc>)
 80022d0:	f010 faac 	bl	801282c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80022d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022d8:	480c      	ldr	r0, [pc, #48]	; (800230c <HAL_I2C_MspDeInit+0xd0>)
 80022da:	f010 faa7 	bl	801282c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 80022de:	2048      	movs	r0, #72	; 0x48
 80022e0:	f00f fce2 	bl	8011ca8 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 80022e4:	2049      	movs	r0, #73	; 0x49
 80022e6:	f00f fcdf 	bl	8011ca8 <HAL_NVIC_DisableIRQ>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40005400 	.word	0x40005400
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020400 	.word	0x40020400
 8002300:	40005800 	.word	0x40005800
 8002304:	40005c00 	.word	0x40005c00
 8002308:	40020800 	.word	0x40020800
 800230c:	40020000 	.word	0x40020000

08002310 <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002310:	b480      	push	{r7}
 8002312:	b091      	sub	sp, #68	; 0x44
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	if(htim_pwm->Instance==TIM1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a8d      	ldr	r2, [pc, #564]	; (8002554 <HAL_TIM_PWM_MspInit+0x244>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d10e      	bne.n	8002340 <HAL_TIM_PWM_MspInit+0x30>
		{
			/* Peripheral clock enable */
			__HAL_RCC_TIM1_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002326:	4b8c      	ldr	r3, [pc, #560]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a8b      	ldr	r2, [pc, #556]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
 8002332:	4b89      	ldr	r3, [pc, #548]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800233c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	  {
	    /* Peripheral clock enable */
	    __HAL_RCC_TIM14_CLK_ENABLE();
	  }

}
 800233e:	e102      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002348:	d10e      	bne.n	8002368 <HAL_TIM_PWM_MspInit+0x58>
			__HAL_RCC_TIM2_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	63bb      	str	r3, [r7, #56]	; 0x38
 800234e:	4b82      	ldr	r3, [pc, #520]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	4a81      	ldr	r2, [pc, #516]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6413      	str	r3, [r2, #64]	; 0x40
 800235a:	4b7f      	ldr	r3, [pc, #508]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	63bb      	str	r3, [r7, #56]	; 0x38
 8002364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002366:	e0ee      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM3)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a7b      	ldr	r2, [pc, #492]	; (800255c <HAL_TIM_PWM_MspInit+0x24c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d10e      	bne.n	8002390 <HAL_TIM_PWM_MspInit+0x80>
			__HAL_RCC_TIM3_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	637b      	str	r3, [r7, #52]	; 0x34
 8002376:	4b78      	ldr	r3, [pc, #480]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a77      	ldr	r2, [pc, #476]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
 8002382:	4b75      	ldr	r3, [pc, #468]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	637b      	str	r3, [r7, #52]	; 0x34
 800238c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800238e:	e0da      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM4)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a72      	ldr	r2, [pc, #456]	; (8002560 <HAL_TIM_PWM_MspInit+0x250>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10e      	bne.n	80023b8 <HAL_TIM_PWM_MspInit+0xa8>
			__HAL_RCC_TIM4_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	633b      	str	r3, [r7, #48]	; 0x30
 800239e:	4b6e      	ldr	r3, [pc, #440]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a6d      	ldr	r2, [pc, #436]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023a4:	f043 0304 	orr.w	r3, r3, #4
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40
 80023aa:	4b6b      	ldr	r3, [pc, #428]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
 80023b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80023b6:	e0c6      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM5)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a69      	ldr	r2, [pc, #420]	; (8002564 <HAL_TIM_PWM_MspInit+0x254>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d10e      	bne.n	80023e0 <HAL_TIM_PWM_MspInit+0xd0>
	    __HAL_RCC_TIM5_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c6:	4b64      	ldr	r3, [pc, #400]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	4a63      	ldr	r2, [pc, #396]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023cc:	f043 0308 	orr.w	r3, r3, #8
 80023d0:	6413      	str	r3, [r2, #64]	; 0x40
 80023d2:	4b61      	ldr	r3, [pc, #388]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80023de:	e0b2      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM6)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a60      	ldr	r2, [pc, #384]	; (8002568 <HAL_TIM_PWM_MspInit+0x258>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d10e      	bne.n	8002408 <HAL_TIM_PWM_MspInit+0xf8>
	    __HAL_RCC_TIM6_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ee:	4b5a      	ldr	r3, [pc, #360]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	4a59      	ldr	r2, [pc, #356]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023f4:	f043 0310 	orr.w	r3, r3, #16
 80023f8:	6413      	str	r3, [r2, #64]	; 0x40
 80023fa:	4b57      	ldr	r3, [pc, #348]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
 8002404:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002406:	e09e      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM7)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a57      	ldr	r2, [pc, #348]	; (800256c <HAL_TIM_PWM_MspInit+0x25c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d10e      	bne.n	8002430 <HAL_TIM_PWM_MspInit+0x120>
	     __HAL_RCC_TIM7_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
 8002416:	4b50      	ldr	r3, [pc, #320]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	4a4f      	ldr	r2, [pc, #316]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800241c:	f043 0320 	orr.w	r3, r3, #32
 8002420:	6413      	str	r3, [r2, #64]	; 0x40
 8002422:	4b4d      	ldr	r3, [pc, #308]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f003 0320 	and.w	r3, r3, #32
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800242e:	e08a      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM8)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a4e      	ldr	r2, [pc, #312]	; (8002570 <HAL_TIM_PWM_MspInit+0x260>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d10e      	bne.n	8002458 <HAL_TIM_PWM_MspInit+0x148>
	     __HAL_RCC_TIM8_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	623b      	str	r3, [r7, #32]
 800243e:	4b46      	ldr	r3, [pc, #280]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	4a45      	ldr	r2, [pc, #276]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	6453      	str	r3, [r2, #68]	; 0x44
 800244a:	4b43      	ldr	r3, [pc, #268]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	623b      	str	r3, [r7, #32]
 8002454:	6a3b      	ldr	r3, [r7, #32]
}
 8002456:	e076      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM9)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a45      	ldr	r2, [pc, #276]	; (8002574 <HAL_TIM_PWM_MspInit+0x264>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d10e      	bne.n	8002480 <HAL_TIM_PWM_MspInit+0x170>
	    __HAL_RCC_TIM9_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	4b3c      	ldr	r3, [pc, #240]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	4a3b      	ldr	r2, [pc, #236]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002470:	6453      	str	r3, [r2, #68]	; 0x44
 8002472:	4b39      	ldr	r3, [pc, #228]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247a:	61fb      	str	r3, [r7, #28]
 800247c:	69fb      	ldr	r3, [r7, #28]
}
 800247e:	e062      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM10)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a3c      	ldr	r2, [pc, #240]	; (8002578 <HAL_TIM_PWM_MspInit+0x268>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d10e      	bne.n	80024a8 <HAL_TIM_PWM_MspInit+0x198>
	    __HAL_RCC_TIM10_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	4b32      	ldr	r3, [pc, #200]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	4a31      	ldr	r2, [pc, #196]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002498:	6453      	str	r3, [r2, #68]	; 0x44
 800249a:	4b2f      	ldr	r3, [pc, #188]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	61bb      	str	r3, [r7, #24]
 80024a4:	69bb      	ldr	r3, [r7, #24]
}
 80024a6:	e04e      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM11)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a33      	ldr	r2, [pc, #204]	; (800257c <HAL_TIM_PWM_MspInit+0x26c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d10e      	bne.n	80024d0 <HAL_TIM_PWM_MspInit+0x1c0>
	    __HAL_RCC_TIM11_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	4b28      	ldr	r3, [pc, #160]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	4a27      	ldr	r2, [pc, #156]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c0:	6453      	str	r3, [r2, #68]	; 0x44
 80024c2:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	697b      	ldr	r3, [r7, #20]
}
 80024ce:	e03a      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM12)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a2a      	ldr	r2, [pc, #168]	; (8002580 <HAL_TIM_PWM_MspInit+0x270>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d10e      	bne.n	80024f8 <HAL_TIM_PWM_MspInit+0x1e8>
	    __HAL_RCC_TIM12_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	4a1d      	ldr	r2, [pc, #116]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ea:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	693b      	ldr	r3, [r7, #16]
}
 80024f6:	e026      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM13)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a21      	ldr	r2, [pc, #132]	; (8002584 <HAL_TIM_PWM_MspInit+0x274>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d10e      	bne.n	8002520 <HAL_TIM_PWM_MspInit+0x210>
	    __HAL_RCC_TIM13_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	4a13      	ldr	r2, [pc, #76]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800250c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002510:	6413      	str	r3, [r2, #64]	; 0x40
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
}
 800251e:	e012      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM14)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a18      	ldr	r2, [pc, #96]	; (8002588 <HAL_TIM_PWM_MspInit+0x278>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d10d      	bne.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	    __HAL_RCC_TIM14_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	4a09      	ldr	r2, [pc, #36]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002538:	6413      	str	r3, [r2, #64]	; 0x40
 800253a:	4b07      	ldr	r3, [pc, #28]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	68bb      	ldr	r3, [r7, #8]
}
 8002546:	bf00      	nop
 8002548:	3744      	adds	r7, #68	; 0x44
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40010000 	.word	0x40010000
 8002558:	40023800 	.word	0x40023800
 800255c:	40000400 	.word	0x40000400
 8002560:	40000800 	.word	0x40000800
 8002564:	40000c00 	.word	0x40000c00
 8002568:	40001000 	.word	0x40001000
 800256c:	40001400 	.word	0x40001400
 8002570:	40010400 	.word	0x40010400
 8002574:	40014000 	.word	0x40014000
 8002578:	40014400 	.word	0x40014400
 800257c:	40014800 	.word	0x40014800
 8002580:	40001800 	.word	0x40001800
 8002584:	40001c00 	.word	0x40001c00
 8002588:	40002000 	.word	0x40002000

0800258c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800258c:	b480      	push	{r7}
 800258e:	b091      	sub	sp, #68	; 0x44
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]

	if(htim_base->Instance==TIM1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a8d      	ldr	r2, [pc, #564]	; (80027d0 <HAL_TIM_Base_MspInit+0x244>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d10e      	bne.n	80025bc <HAL_TIM_Base_MspInit+0x30>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025a2:	4b8c      	ldr	r3, [pc, #560]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	4a8b      	ldr	r2, [pc, #556]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6453      	str	r3, [r2, #68]	; 0x44
 80025ae:	4b89      	ldr	r3, [pc, #548]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  else if(htim_base->Instance==TIM14)
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
  }
}
 80025ba:	e102      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c4:	d10e      	bne.n	80025e4 <HAL_TIM_Base_MspInit+0x58>
		__HAL_RCC_TIM2_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80025ca:	4b82      	ldr	r3, [pc, #520]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	4a81      	ldr	r2, [pc, #516]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6413      	str	r3, [r2, #64]	; 0x40
 80025d6:	4b7f      	ldr	r3, [pc, #508]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	63bb      	str	r3, [r7, #56]	; 0x38
 80025e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025e2:	e0ee      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM3)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a7b      	ldr	r2, [pc, #492]	; (80027d8 <HAL_TIM_Base_MspInit+0x24c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d10e      	bne.n	800260c <HAL_TIM_Base_MspInit+0x80>
		__HAL_RCC_TIM3_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	637b      	str	r3, [r7, #52]	; 0x34
 80025f2:	4b78      	ldr	r3, [pc, #480]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	4a77      	ldr	r2, [pc, #476]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025f8:	f043 0302 	orr.w	r3, r3, #2
 80025fc:	6413      	str	r3, [r2, #64]	; 0x40
 80025fe:	4b75      	ldr	r3, [pc, #468]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	637b      	str	r3, [r7, #52]	; 0x34
 8002608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800260a:	e0da      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM4)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a72      	ldr	r2, [pc, #456]	; (80027dc <HAL_TIM_Base_MspInit+0x250>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d10e      	bne.n	8002634 <HAL_TIM_Base_MspInit+0xa8>
		__HAL_RCC_TIM4_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	633b      	str	r3, [r7, #48]	; 0x30
 800261a:	4b6e      	ldr	r3, [pc, #440]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4a6d      	ldr	r2, [pc, #436]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	6413      	str	r3, [r2, #64]	; 0x40
 8002626:	4b6b      	ldr	r3, [pc, #428]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	633b      	str	r3, [r7, #48]	; 0x30
 8002630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002632:	e0c6      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM5)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a69      	ldr	r2, [pc, #420]	; (80027e0 <HAL_TIM_Base_MspInit+0x254>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d10e      	bne.n	800265c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002642:	4b64      	ldr	r3, [pc, #400]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	4a63      	ldr	r2, [pc, #396]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002648:	f043 0308 	orr.w	r3, r3, #8
 800264c:	6413      	str	r3, [r2, #64]	; 0x40
 800264e:	4b61      	ldr	r3, [pc, #388]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800265a:	e0b2      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM6)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a60      	ldr	r2, [pc, #384]	; (80027e4 <HAL_TIM_Base_MspInit+0x258>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d10e      	bne.n	8002684 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
 800266a:	4b5a      	ldr	r3, [pc, #360]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	4a59      	ldr	r2, [pc, #356]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002670:	f043 0310 	orr.w	r3, r3, #16
 8002674:	6413      	str	r3, [r2, #64]	; 0x40
 8002676:	4b57      	ldr	r3, [pc, #348]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002682:	e09e      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM7)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a57      	ldr	r2, [pc, #348]	; (80027e8 <HAL_TIM_Base_MspInit+0x25c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d10e      	bne.n	80026ac <HAL_TIM_Base_MspInit+0x120>
     __HAL_RCC_TIM7_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
 8002692:	4b50      	ldr	r3, [pc, #320]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	4a4f      	ldr	r2, [pc, #316]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002698:	f043 0320 	orr.w	r3, r3, #32
 800269c:	6413      	str	r3, [r2, #64]	; 0x40
 800269e:	4b4d      	ldr	r3, [pc, #308]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80026aa:	e08a      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM8)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a4e      	ldr	r2, [pc, #312]	; (80027ec <HAL_TIM_Base_MspInit+0x260>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d10e      	bne.n	80026d4 <HAL_TIM_Base_MspInit+0x148>
     __HAL_RCC_TIM8_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	623b      	str	r3, [r7, #32]
 80026ba:	4b46      	ldr	r3, [pc, #280]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	4a45      	ldr	r2, [pc, #276]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026c0:	f043 0302 	orr.w	r3, r3, #2
 80026c4:	6453      	str	r3, [r2, #68]	; 0x44
 80026c6:	4b43      	ldr	r3, [pc, #268]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	623b      	str	r3, [r7, #32]
 80026d0:	6a3b      	ldr	r3, [r7, #32]
}
 80026d2:	e076      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM9)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a45      	ldr	r2, [pc, #276]	; (80027f0 <HAL_TIM_Base_MspInit+0x264>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d10e      	bne.n	80026fc <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	4b3c      	ldr	r3, [pc, #240]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	4a3b      	ldr	r2, [pc, #236]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ec:	6453      	str	r3, [r2, #68]	; 0x44
 80026ee:	4b39      	ldr	r3, [pc, #228]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	69fb      	ldr	r3, [r7, #28]
}
 80026fa:	e062      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM10)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a3c      	ldr	r2, [pc, #240]	; (80027f4 <HAL_TIM_Base_MspInit+0x268>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d10e      	bne.n	8002724 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	4b32      	ldr	r3, [pc, #200]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	4a31      	ldr	r2, [pc, #196]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002714:	6453      	str	r3, [r2, #68]	; 0x44
 8002716:	4b2f      	ldr	r3, [pc, #188]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	61bb      	str	r3, [r7, #24]
 8002720:	69bb      	ldr	r3, [r7, #24]
}
 8002722:	e04e      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM11)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a33      	ldr	r2, [pc, #204]	; (80027f8 <HAL_TIM_Base_MspInit+0x26c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d10e      	bne.n	800274c <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	4b28      	ldr	r3, [pc, #160]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	4a27      	ldr	r2, [pc, #156]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800273c:	6453      	str	r3, [r2, #68]	; 0x44
 800273e:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	697b      	ldr	r3, [r7, #20]
}
 800274a:	e03a      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM12)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a2a      	ldr	r2, [pc, #168]	; (80027fc <HAL_TIM_Base_MspInit+0x270>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d10e      	bne.n	8002774 <HAL_TIM_Base_MspInit+0x1e8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	4b1e      	ldr	r3, [pc, #120]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002764:	6413      	str	r3, [r2, #64]	; 0x40
 8002766:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	693b      	ldr	r3, [r7, #16]
}
 8002772:	e026      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM13)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a21      	ldr	r2, [pc, #132]	; (8002800 <HAL_TIM_Base_MspInit+0x274>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d10e      	bne.n	800279c <HAL_TIM_Base_MspInit+0x210>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	4a13      	ldr	r2, [pc, #76]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800278c:	6413      	str	r3, [r2, #64]	; 0x40
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
}
 800279a:	e012      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM14)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a18      	ldr	r2, [pc, #96]	; (8002804 <HAL_TIM_Base_MspInit+0x278>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d10d      	bne.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80027b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b4:	6413      	str	r3, [r2, #64]	; 0x40
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
}
 80027c2:	bf00      	nop
 80027c4:	3744      	adds	r7, #68	; 0x44
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40010000 	.word	0x40010000
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40000800 	.word	0x40000800
 80027e0:	40000c00 	.word	0x40000c00
 80027e4:	40001000 	.word	0x40001000
 80027e8:	40001400 	.word	0x40001400
 80027ec:	40010400 	.word	0x40010400
 80027f0:	40014000 	.word	0x40014000
 80027f4:	40014400 	.word	0x40014400
 80027f8:	40014800 	.word	0x40014800
 80027fc:	40001800 	.word	0x40001800
 8002800:	40001c00 	.word	0x40001c00
 8002804:	40002000 	.word	0x40002000

08002808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b094      	sub	sp, #80	; 0x50
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]

  if(huart->Instance==USART1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a8c      	ldr	r2, [pc, #560]	; (8002a58 <HAL_UART_MspInit+0x250>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d12d      	bne.n	8002886 <HAL_UART_MspInit+0x7e>
    {
	  __HAL_RCC_USART1_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	63bb      	str	r3, [r7, #56]	; 0x38
 800282e:	4b8b      	ldr	r3, [pc, #556]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	4a8a      	ldr	r2, [pc, #552]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002834:	f043 0310 	orr.w	r3, r3, #16
 8002838:	6453      	str	r3, [r2, #68]	; 0x44
 800283a:	4b88      	ldr	r3, [pc, #544]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	63bb      	str	r3, [r7, #56]	; 0x38
 8002844:	6bbb      	ldr	r3, [r7, #56]	; 0x38

	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	637b      	str	r3, [r7, #52]	; 0x34
 800284a:	4b84      	ldr	r3, [pc, #528]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a83      	ldr	r2, [pc, #524]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b81      	ldr	r3, [pc, #516]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
 8002860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	  /**USART1 GPIO Configuration
	      PA9     ------> USART1_TX
	      PA10     ------> USART1_RX
	   */
	  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002862:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002866:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002868:	2302      	movs	r3, #2
 800286a:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002870:	2303      	movs	r3, #3
 8002872:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002874:	2307      	movs	r3, #7
 8002876:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002878:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800287c:	4619      	mov	r1, r3
 800287e:	4878      	ldr	r0, [pc, #480]	; (8002a60 <HAL_UART_MspInit+0x258>)
 8002880:	f00f fe38 	bl	80124f4 <HAL_GPIO_Init>
   /* USER CODE BEGIN USART6_MspInit 1 */

   /* USER CODE END USART6_MspInit 1 */
   }

}
 8002884:	e12b      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART2)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a76      	ldr	r2, [pc, #472]	; (8002a64 <HAL_UART_MspInit+0x25c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d12c      	bne.n	80028ea <HAL_UART_MspInit+0xe2>
      __HAL_RCC_USART2_CLK_ENABLE();
 8002890:	2300      	movs	r3, #0
 8002892:	633b      	str	r3, [r7, #48]	; 0x30
 8002894:	4b71      	ldr	r3, [pc, #452]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	4a70      	ldr	r2, [pc, #448]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800289a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289e:	6413      	str	r3, [r2, #64]	; 0x40
 80028a0:	4b6e      	ldr	r3, [pc, #440]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	633b      	str	r3, [r7, #48]	; 0x30
 80028aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ac:	2300      	movs	r3, #0
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b0:	4b6a      	ldr	r3, [pc, #424]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	4a69      	ldr	r2, [pc, #420]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028b6:	f043 0308 	orr.w	r3, r3, #8
 80028ba:	6313      	str	r3, [r2, #48]	; 0x30
 80028bc:	4b67      	ldr	r3, [pc, #412]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80028c8:	2360      	movs	r3, #96	; 0x60
 80028ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028cc:	2302      	movs	r3, #2
 80028ce:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d4:	2303      	movs	r3, #3
 80028d6:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028d8:	2307      	movs	r3, #7
 80028da:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028e0:	4619      	mov	r1, r3
 80028e2:	4861      	ldr	r0, [pc, #388]	; (8002a68 <HAL_UART_MspInit+0x260>)
 80028e4:	f00f fe06 	bl	80124f4 <HAL_GPIO_Init>
}
 80028e8:	e0f9      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART3)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a5f      	ldr	r2, [pc, #380]	; (8002a6c <HAL_UART_MspInit+0x264>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d12d      	bne.n	8002950 <HAL_UART_MspInit+0x148>
      __HAL_RCC_USART3_CLK_ENABLE();
 80028f4:	2300      	movs	r3, #0
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028f8:	4b58      	ldr	r3, [pc, #352]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	4a57      	ldr	r2, [pc, #348]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002902:	6413      	str	r3, [r2, #64]	; 0x40
 8002904:	4b55      	ldr	r3, [pc, #340]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800290c:	62bb      	str	r3, [r7, #40]	; 0x28
 800290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8002910:	2300      	movs	r3, #0
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
 8002914:	4b51      	ldr	r3, [pc, #324]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	4a50      	ldr	r2, [pc, #320]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800291a:	f043 0308 	orr.w	r3, r3, #8
 800291e:	6313      	str	r3, [r2, #48]	; 0x30
 8002920:	4b4e      	ldr	r3, [pc, #312]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800292c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002930:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002932:	2302      	movs	r3, #2
 8002934:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293a:	2303      	movs	r3, #3
 800293c:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800293e:	2307      	movs	r3, #7
 8002940:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002942:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002946:	4619      	mov	r1, r3
 8002948:	4847      	ldr	r0, [pc, #284]	; (8002a68 <HAL_UART_MspInit+0x260>)
 800294a:	f00f fdd3 	bl	80124f4 <HAL_GPIO_Init>
}
 800294e:	e0c6      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART4)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a46      	ldr	r2, [pc, #280]	; (8002a70 <HAL_UART_MspInit+0x268>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d12d      	bne.n	80029b6 <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_UART4_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	623b      	str	r3, [r7, #32]
 800295e:	4b3f      	ldr	r3, [pc, #252]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	4a3e      	ldr	r2, [pc, #248]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002968:	6413      	str	r3, [r2, #64]	; 0x40
 800296a:	4b3c      	ldr	r3, [pc, #240]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002972:	623b      	str	r3, [r7, #32]
 8002974:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	4b38      	ldr	r3, [pc, #224]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a37      	ldr	r2, [pc, #220]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002980:	f043 0304 	orr.w	r3, r3, #4
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b35      	ldr	r3, [pc, #212]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	61fb      	str	r3, [r7, #28]
 8002990:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002992:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002996:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002998:	2302      	movs	r3, #2
 800299a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800299c:	2301      	movs	r3, #1
 800299e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a0:	2303      	movs	r3, #3
 80029a2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80029a4:	2308      	movs	r3, #8
 80029a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029ac:	4619      	mov	r1, r3
 80029ae:	4831      	ldr	r0, [pc, #196]	; (8002a74 <HAL_UART_MspInit+0x26c>)
 80029b0:	f00f fda0 	bl	80124f4 <HAL_GPIO_Init>
}
 80029b4:	e093      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART5)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a2f      	ldr	r2, [pc, #188]	; (8002a78 <HAL_UART_MspInit+0x270>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d15d      	bne.n	8002a7c <HAL_UART_MspInit+0x274>
    __HAL_RCC_UART5_CLK_ENABLE();
 80029c0:	2300      	movs	r3, #0
 80029c2:	61bb      	str	r3, [r7, #24]
 80029c4:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	4a24      	ldr	r2, [pc, #144]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ce:	6413      	str	r3, [r2, #64]	; 0x40
 80029d0:	4b22      	ldr	r3, [pc, #136]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	4a1d      	ldr	r2, [pc, #116]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029e6:	f043 0304 	orr.w	r3, r3, #4
 80029ea:	6313      	str	r3, [r2, #48]	; 0x30
 80029ec:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029f8:	2300      	movs	r3, #0
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	4a16      	ldr	r2, [pc, #88]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002a02:	f043 0308 	orr.w	r3, r3, #8
 8002a06:	6313      	str	r3, [r2, #48]	; 0x30
 8002a08:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a18:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a22:	2303      	movs	r3, #3
 8002a24:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a26:	2308      	movs	r3, #8
 8002a28:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4810      	ldr	r0, [pc, #64]	; (8002a74 <HAL_UART_MspInit+0x26c>)
 8002a32:	f00f fd5f 	bl	80124f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a36:	2304      	movs	r3, #4
 8002a38:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a42:	2303      	movs	r3, #3
 8002a44:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a46:	2308      	movs	r3, #8
 8002a48:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4805      	ldr	r0, [pc, #20]	; (8002a68 <HAL_UART_MspInit+0x260>)
 8002a52:	f00f fd4f 	bl	80124f4 <HAL_GPIO_Init>
}
 8002a56:	e042      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
 8002a58:	40011000 	.word	0x40011000
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40020000 	.word	0x40020000
 8002a64:	40004400 	.word	0x40004400
 8002a68:	40020c00 	.word	0x40020c00
 8002a6c:	40004800 	.word	0x40004800
 8002a70:	40004c00 	.word	0x40004c00
 8002a74:	40020800 	.word	0x40020800
 8002a78:	40005000 	.word	0x40005000
  else if(huart->Instance==USART6)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <HAL_UART_MspInit+0x2e0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d12b      	bne.n	8002ade <HAL_UART_MspInit+0x2d6>
     __HAL_RCC_USART6_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	4b18      	ldr	r3, [pc, #96]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	4a17      	ldr	r2, [pc, #92]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002a90:	f043 0320 	orr.w	r3, r3, #32
 8002a94:	6453      	str	r3, [r2, #68]	; 0x44
 8002a96:	4b15      	ldr	r3, [pc, #84]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f003 0320 	and.w	r3, r3, #32
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
     __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a10      	ldr	r2, [pc, #64]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002aac:	f043 0304 	orr.w	r3, r3, #4
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]
     GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002abe:	23c0      	movs	r3, #192	; 0xc0
 8002ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	643b      	str	r3, [r7, #64]	; 0x40
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	647b      	str	r3, [r7, #68]	; 0x44
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aca:	2303      	movs	r3, #3
 8002acc:	64bb      	str	r3, [r7, #72]	; 0x48
     GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ace:	2308      	movs	r3, #8
 8002ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ad2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4805      	ldr	r0, [pc, #20]	; (8002af0 <HAL_UART_MspInit+0x2e8>)
 8002ada:	f00f fd0b 	bl	80124f4 <HAL_GPIO_Init>
}
 8002ade:	bf00      	nop
 8002ae0:	3750      	adds	r7, #80	; 0x50
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40011400 	.word	0x40011400
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40020800 	.word	0x40020800

08002af4 <HAL_TIM_Encoder_MspInit>:
  }

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b094      	sub	sp, #80	; 0x50
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a8c      	ldr	r2, [pc, #560]	; (8002d44 <HAL_TIM_Encoder_MspInit+0x250>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d12d      	bne.n	8002b72 <HAL_TIM_Encoder_MspInit+0x7e>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b1a:	4b8b      	ldr	r3, [pc, #556]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	4a8a      	ldr	r2, [pc, #552]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	6453      	str	r3, [r2, #68]	; 0x44
 8002b26:	4b88      	ldr	r3, [pc, #544]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	637b      	str	r3, [r7, #52]	; 0x34
 8002b36:	4b84      	ldr	r3, [pc, #528]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	4a83      	ldr	r2, [pc, #524]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b3c:	f043 0310 	orr.w	r3, r3, #16
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30
 8002b42:	4b81      	ldr	r3, [pc, #516]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34


    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002b4e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002b52:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b60:	2301      	movs	r3, #1
 8002b62:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4878      	ldr	r0, [pc, #480]	; (8002d4c <HAL_TIM_Encoder_MspInit+0x258>)
 8002b6c:	f00f fcc2 	bl	80124f4 <HAL_GPIO_Init>
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  }

}
 8002b70:	e12b      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM2){
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7a:	d14b      	bne.n	8002c14 <HAL_TIM_Encoder_MspInit+0x120>
	  __HAL_RCC_TIM2_CLK_ENABLE();
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	633b      	str	r3, [r7, #48]	; 0x30
 8002b80:	4b71      	ldr	r3, [pc, #452]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	4a70      	ldr	r2, [pc, #448]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8c:	4b6e      	ldr	r3, [pc, #440]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	633b      	str	r3, [r7, #48]	; 0x30
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b98:	2300      	movs	r3, #0
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b9c:	4b6a      	ldr	r3, [pc, #424]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	4a69      	ldr	r2, [pc, #420]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba8:	4b67      	ldr	r3, [pc, #412]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bb8:	4b63      	ldr	r3, [pc, #396]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	4a62      	ldr	r2, [pc, #392]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002bbe:	f043 0302 	orr.w	r3, r3, #2
 8002bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc4:	4b60      	ldr	r3, [pc, #384]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002bd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002be2:	2301      	movs	r3, #1
 8002be4:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bea:	4619      	mov	r1, r3
 8002bec:	4858      	ldr	r0, [pc, #352]	; (8002d50 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002bee:	f00f fc81 	bl	80124f4 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bf2:	2308      	movs	r3, #8
 8002bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c02:	2301      	movs	r3, #1
 8002c04:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4851      	ldr	r0, [pc, #324]	; (8002d54 <HAL_TIM_Encoder_MspInit+0x260>)
 8002c0e:	f00f fc71 	bl	80124f4 <HAL_GPIO_Init>
}
 8002c12:	e0da      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM3){
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a4f      	ldr	r2, [pc, #316]	; (8002d58 <HAL_TIM_Encoder_MspInit+0x264>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d12c      	bne.n	8002c78 <HAL_TIM_Encoder_MspInit+0x184>
	  __HAL_RCC_TIM3_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
 8002c22:	4b49      	ldr	r3, [pc, #292]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	4a48      	ldr	r2, [pc, #288]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c28:	f043 0302 	orr.w	r3, r3, #2
 8002c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2e:	4b46      	ldr	r3, [pc, #280]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	623b      	str	r3, [r7, #32]
 8002c3e:	4b42      	ldr	r3, [pc, #264]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	4a41      	ldr	r2, [pc, #260]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4a:	4b3f      	ldr	r3, [pc, #252]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	623b      	str	r3, [r7, #32]
 8002c54:	6a3b      	ldr	r3, [r7, #32]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c56:	23c0      	movs	r3, #192	; 0xc0
 8002c58:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c62:	2300      	movs	r3, #0
 8002c64:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c66:	2302      	movs	r3, #2
 8002c68:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4837      	ldr	r0, [pc, #220]	; (8002d50 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002c72:	f00f fc3f 	bl	80124f4 <HAL_GPIO_Init>
}
 8002c76:	e0a8      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM4){
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a37      	ldr	r2, [pc, #220]	; (8002d5c <HAL_TIM_Encoder_MspInit+0x268>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d12d      	bne.n	8002cde <HAL_TIM_Encoder_MspInit+0x1ea>
	  __HAL_RCC_TIM4_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	4b30      	ldr	r3, [pc, #192]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	4a2f      	ldr	r2, [pc, #188]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c8c:	f043 0304 	orr.w	r3, r3, #4
 8002c90:	6413      	str	r3, [r2, #64]	; 0x40
 8002c92:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	61fb      	str	r3, [r7, #28]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	4a28      	ldr	r2, [pc, #160]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ca8:	f043 0308 	orr.w	r3, r3, #8
 8002cac:	6313      	str	r3, [r2, #48]	; 0x30
 8002cae:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	61bb      	str	r3, [r7, #24]
 8002cb8:	69bb      	ldr	r3, [r7, #24]
	  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002cba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4822      	ldr	r0, [pc, #136]	; (8002d60 <HAL_TIM_Encoder_MspInit+0x26c>)
 8002cd8:	f00f fc0c 	bl	80124f4 <HAL_GPIO_Init>
}
 8002cdc:	e075      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM5){
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a20      	ldr	r2, [pc, #128]	; (8002d64 <HAL_TIM_Encoder_MspInit+0x270>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d13f      	bne.n	8002d68 <HAL_TIM_Encoder_MspInit+0x274>
	  __HAL_RCC_TIM5_CLK_ENABLE();
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	4a15      	ldr	r2, [pc, #84]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cf2:	f043 0308 	orr.w	r3, r3, #8
 8002cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf8:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d04:	2300      	movs	r3, #0
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6313      	str	r3, [r2, #48]	; 0x30
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	693b      	ldr	r3, [r7, #16]
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d20:	2303      	movs	r3, #3
 8002d22:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d24:	2302      	movs	r3, #2
 8002d26:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002d30:	2302      	movs	r3, #2
 8002d32:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4805      	ldr	r0, [pc, #20]	; (8002d50 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002d3c:	f00f fbda 	bl	80124f4 <HAL_GPIO_Init>
}
 8002d40:	e043      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
 8002d42:	bf00      	nop
 8002d44:	40010000 	.word	0x40010000
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40020000 	.word	0x40020000
 8002d54:	40020400 	.word	0x40020400
 8002d58:	40000400 	.word	0x40000400
 8002d5c:	40000800 	.word	0x40000800
 8002d60:	40020c00 	.word	0x40020c00
 8002d64:	40000c00 	.word	0x40000c00
  }else if(htim_encoder->Instance==TIM8){
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a19      	ldr	r2, [pc, #100]	; (8002dd4 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d12b      	bne.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
	  __HAL_RCC_TIM8_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d7c:	f043 0302 	orr.w	r3, r3, #2
 8002d80:	6453      	str	r3, [r2, #68]	; 0x44
 8002d82:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	4a10      	ldr	r2, [pc, #64]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002daa:	23c0      	movs	r3, #192	; 0xc0
 8002dac:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dae:	2302      	movs	r3, #2
 8002db0:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db6:	2300      	movs	r3, #0
 8002db8:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dbe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4805      	ldr	r0, [pc, #20]	; (8002ddc <HAL_TIM_Encoder_MspInit+0x2e8>)
 8002dc6:	f00f fb95 	bl	80124f4 <HAL_GPIO_Init>
}
 8002dca:	bf00      	nop
 8002dcc:	3750      	adds	r7, #80	; 0x50
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40010400 	.word	0x40010400
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40020800 	.word	0x40020800

08002de0 <SystemClock_Config>:

	}
}

void SystemClock_Config(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b094      	sub	sp, #80	; 0x50
 8002de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002de6:	f107 0320 	add.w	r3, r7, #32
 8002dea:	2230      	movs	r2, #48	; 0x30
 8002dec:	2100      	movs	r1, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	f017 fa8c 	bl	801a30c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002df4:	f107 030c 	add.w	r3, r7, #12
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e04:	2300      	movs	r3, #0
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	4b29      	ldr	r3, [pc, #164]	; (8002eb0 <SystemClock_Config+0xd0>)
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	4a28      	ldr	r2, [pc, #160]	; (8002eb0 <SystemClock_Config+0xd0>)
 8002e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e12:	6413      	str	r3, [r2, #64]	; 0x40
 8002e14:	4b26      	ldr	r3, [pc, #152]	; (8002eb0 <SystemClock_Config+0xd0>)
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e20:	2300      	movs	r3, #0
 8002e22:	607b      	str	r3, [r7, #4]
 8002e24:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <SystemClock_Config+0xd4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a22      	ldr	r2, [pc, #136]	; (8002eb4 <SystemClock_Config+0xd4>)
 8002e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e2e:	6013      	str	r3, [r2, #0]
 8002e30:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <SystemClock_Config+0xd4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e38:	607b      	str	r3, [r7, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e46:	2302      	movs	r3, #2
 8002e48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002e50:	2308      	movs	r3, #8
 8002e52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002e54:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002e58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e5e:	2304      	movs	r3, #4
 8002e60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e62:	f107 0320 	add.w	r3, r7, #32
 8002e66:	4618      	mov	r0, r3
 8002e68:	f011 fe56 	bl	8014b18 <HAL_RCC_OscConfig>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002e72:	f001 fb8f 	bl	8004594 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e76:	230f      	movs	r3, #15
 8002e78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e82:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002e8e:	f107 030c 	add.w	r3, r7, #12
 8002e92:	2105      	movs	r1, #5
 8002e94:	4618      	mov	r0, r3
 8002e96:	f012 f8af 	bl	8014ff8 <HAL_RCC_ClockConfig>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002ea0:	f001 fb78 	bl	8004594 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002ea4:	f012 f98e 	bl	80151c4 <HAL_RCC_EnableCSS>
}
 8002ea8:	bf00      	nop
 8002eaa:	3750      	adds	r7, #80	; 0x50
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40007000 	.word	0x40007000

08002eb8 <TIMxInit>:
 * 						  BIOSTIMx_Init (&htim2, 1000, 84);  //1ms  interrupt
 * 						  BIOSTIMx_Init (&htim3, 20000, 84); //20ms interrupt
 */

void TIMxInit(TIM_HandleTypeDef* htimx, uint16_t period, uint16_t prescaler)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	807b      	strh	r3, [r7, #2]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	803b      	strh	r3, [r7, #0]

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec8:	f107 030c 	add.w	r3, r7, #12
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
	int nvic = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]

	if(htimx == &htim1){
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a9b      	ldr	r2, [pc, #620]	; (8003148 <TIMxInit+0x290>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d105      	bne.n	8002eea <TIMxInit+0x32>
		htimx->Instance = TIM1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a9a      	ldr	r2, [pc, #616]	; (800314c <TIMxInit+0x294>)
 8002ee2:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8002ee4:	2319      	movs	r3, #25
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	e081      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim2)	{
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a98      	ldr	r2, [pc, #608]	; (8003150 <TIMxInit+0x298>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d106      	bne.n	8002f00 <TIMxInit+0x48>
		htimx->Instance = TIM2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ef8:	601a      	str	r2, [r3, #0]
		nvic = TIM2_IRQn;
 8002efa:	231c      	movs	r3, #28
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	e076      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim3)	{
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a94      	ldr	r2, [pc, #592]	; (8003154 <TIMxInit+0x29c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d105      	bne.n	8002f14 <TIMxInit+0x5c>
		htimx->Instance = TIM3;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a93      	ldr	r2, [pc, #588]	; (8003158 <TIMxInit+0x2a0>)
 8002f0c:	601a      	str	r2, [r3, #0]
		nvic = TIM3_IRQn;
 8002f0e:	231d      	movs	r3, #29
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	e06c      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim4)	{
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a91      	ldr	r2, [pc, #580]	; (800315c <TIMxInit+0x2a4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d105      	bne.n	8002f28 <TIMxInit+0x70>
		htimx->Instance = TIM4;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a90      	ldr	r2, [pc, #576]	; (8003160 <TIMxInit+0x2a8>)
 8002f20:	601a      	str	r2, [r3, #0]
		nvic = TIM4_IRQn;
 8002f22:	231e      	movs	r3, #30
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	e062      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim5)	{
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a8e      	ldr	r2, [pc, #568]	; (8003164 <TIMxInit+0x2ac>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d105      	bne.n	8002f3c <TIMxInit+0x84>
		htimx->Instance = TIM5;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a8d      	ldr	r2, [pc, #564]	; (8003168 <TIMxInit+0x2b0>)
 8002f34:	601a      	str	r2, [r3, #0]
		nvic = TIM5_IRQn;
 8002f36:	2332      	movs	r3, #50	; 0x32
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	e058      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim6)	{
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a8b      	ldr	r2, [pc, #556]	; (800316c <TIMxInit+0x2b4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d105      	bne.n	8002f50 <TIMxInit+0x98>
		htimx->Instance = TIM6;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a8a      	ldr	r2, [pc, #552]	; (8003170 <TIMxInit+0x2b8>)
 8002f48:	601a      	str	r2, [r3, #0]
		nvic = TIM6_DAC_IRQn;
 8002f4a:	2336      	movs	r3, #54	; 0x36
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	e04e      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim7)	{
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a88      	ldr	r2, [pc, #544]	; (8003174 <TIMxInit+0x2bc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d105      	bne.n	8002f64 <TIMxInit+0xac>
		htimx->Instance = TIM7;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a87      	ldr	r2, [pc, #540]	; (8003178 <TIMxInit+0x2c0>)
 8002f5c:	601a      	str	r2, [r3, #0]
		nvic = TIM7_IRQn;
 8002f5e:	2337      	movs	r3, #55	; 0x37
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	e044      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim8)	{
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a85      	ldr	r2, [pc, #532]	; (800317c <TIMxInit+0x2c4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d105      	bne.n	8002f78 <TIMxInit+0xc0>
		htimx->Instance = TIM8;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a84      	ldr	r2, [pc, #528]	; (8003180 <TIMxInit+0x2c8>)
 8002f70:	601a      	str	r2, [r3, #0]
		nvic = TIM8_CC_IRQn;
 8002f72:	232e      	movs	r3, #46	; 0x2e
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	e03a      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim9)	{
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a82      	ldr	r2, [pc, #520]	; (8003184 <TIMxInit+0x2cc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d105      	bne.n	8002f8c <TIMxInit+0xd4>
		htimx->Instance = TIM9;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a81      	ldr	r2, [pc, #516]	; (8003188 <TIMxInit+0x2d0>)
 8002f84:	601a      	str	r2, [r3, #0]
		nvic = TIM1_BRK_TIM9_IRQn;
 8002f86:	2318      	movs	r3, #24
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	e030      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim10)	{
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a7f      	ldr	r2, [pc, #508]	; (800318c <TIMxInit+0x2d4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d105      	bne.n	8002fa0 <TIMxInit+0xe8>
		htimx->Instance = TIM10;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a7e      	ldr	r2, [pc, #504]	; (8003190 <TIMxInit+0x2d8>)
 8002f98:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8002f9a:	2319      	movs	r3, #25
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	e026      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim11)	{
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a7c      	ldr	r2, [pc, #496]	; (8003194 <TIMxInit+0x2dc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d105      	bne.n	8002fb4 <TIMxInit+0xfc>
		htimx->Instance = TIM11;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a7b      	ldr	r2, [pc, #492]	; (8003198 <TIMxInit+0x2e0>)
 8002fac:	601a      	str	r2, [r3, #0]
		nvic = TIM1_TRG_COM_TIM11_IRQn;
 8002fae:	231a      	movs	r3, #26
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	e01c      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim12)	{
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a79      	ldr	r2, [pc, #484]	; (800319c <TIMxInit+0x2e4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d105      	bne.n	8002fc8 <TIMxInit+0x110>
		htimx->Instance = TIM12;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a78      	ldr	r2, [pc, #480]	; (80031a0 <TIMxInit+0x2e8>)
 8002fc0:	601a      	str	r2, [r3, #0]
		nvic = TIM8_BRK_TIM12_IRQn;
 8002fc2:	232b      	movs	r3, #43	; 0x2b
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	e012      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim13)	{
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a76      	ldr	r2, [pc, #472]	; (80031a4 <TIMxInit+0x2ec>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d105      	bne.n	8002fdc <TIMxInit+0x124>
		htimx->Instance = TIM13;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a75      	ldr	r2, [pc, #468]	; (80031a8 <TIMxInit+0x2f0>)
 8002fd4:	601a      	str	r2, [r3, #0]
		nvic = TIM8_UP_TIM13_IRQn;
 8002fd6:	232c      	movs	r3, #44	; 0x2c
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	e008      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim14)	{
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a73      	ldr	r2, [pc, #460]	; (80031ac <TIMxInit+0x2f4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d104      	bne.n	8002fee <TIMxInit+0x136>
		htimx->Instance = TIM14;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a72      	ldr	r2, [pc, #456]	; (80031b0 <TIMxInit+0x2f8>)
 8002fe8:	601a      	str	r2, [r3, #0]
		nvic = TIM8_TRG_COM_TIM14_IRQn;
 8002fea:	232d      	movs	r3, #45	; 0x2d
 8002fec:	617b      	str	r3, [r7, #20]
	}


	htimx->Init.Prescaler = prescaler;
 8002fee:	883a      	ldrh	r2, [r7, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = period;
 8002ffa:	887a      	ldrh	r2, [r7, #2]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	60da      	str	r2, [r3, #12]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f012 fb4e 	bl	80156a8 <HAL_TIM_Base_Init>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <TIMxInit+0x15e>
	{
		Error_Handler();
 8003012:	f001 fabf 	bl	8004594 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 800301e:	f107 030c 	add.w	r3, r7, #12
 8003022:	4619      	mov	r1, r3
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f013 faaf 	bl	8016588 <HAL_TIMEx_MasterConfigSynchronization>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <TIMxInit+0x17c>
	{
		Error_Handler();
 8003030:	f001 fab0 	bl	8004594 <Error_Handler>
	}

	if(htimx == &htim1){
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a44      	ldr	r2, [pc, #272]	; (8003148 <TIMxInit+0x290>)
 8003038:	4293      	cmp	r3, r2
 800303a:	f000 80cb 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef QEI1_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM1_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim2)	{
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a43      	ldr	r2, [pc, #268]	; (8003150 <TIMxInit+0x298>)
 8003042:	4293      	cmp	r3, r2
 8003044:	f000 80c6 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef FREERTOS_USED
		HAL_NVIC_SetPriority(nvic, TIM2_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim3)	{
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a42      	ldr	r2, [pc, #264]	; (8003154 <TIMxInit+0x29c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	f000 80c1 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM3_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim4)	{
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a41      	ldr	r2, [pc, #260]	; (800315c <TIMxInit+0x2a4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	f000 80bc 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef QEI4_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM4_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim5)	{
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a41      	ldr	r2, [pc, #260]	; (8003164 <TIMxInit+0x2ac>)
 8003060:	4293      	cmp	r3, r2
 8003062:	f000 80b7 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM5_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim6)	{
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a40      	ldr	r2, [pc, #256]	; (800316c <TIMxInit+0x2b4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d10c      	bne.n	8003088 <TIMxInit+0x1d0>
		HAL_NVIC_SetPriority(nvic, TIM6_IRQ_PRIO, 0);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	b25b      	sxtb	r3, r3
 8003072:	2200      	movs	r2, #0
 8003074:	2107      	movs	r1, #7
 8003076:	4618      	mov	r0, r3
 8003078:	f00e fdec 	bl	8011c54 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	b25b      	sxtb	r3, r3
 8003080:	4618      	mov	r0, r3
 8003082:	f00e fe03 	bl	8011c8c <HAL_NVIC_EnableIRQ>
 8003086:	e0a5      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim7)	{
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a3a      	ldr	r2, [pc, #232]	; (8003174 <TIMxInit+0x2bc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d10c      	bne.n	80030aa <TIMxInit+0x1f2>
		HAL_NVIC_SetPriority(nvic, TIM7_IRQ_PRIO, 0);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	b25b      	sxtb	r3, r3
 8003094:	2200      	movs	r2, #0
 8003096:	210e      	movs	r1, #14
 8003098:	4618      	mov	r0, r3
 800309a:	f00e fddb 	bl	8011c54 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	b25b      	sxtb	r3, r3
 80030a2:	4618      	mov	r0, r3
 80030a4:	f00e fdf2 	bl	8011c8c <HAL_NVIC_EnableIRQ>
 80030a8:	e094      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim8)	{
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a33      	ldr	r2, [pc, #204]	; (800317c <TIMxInit+0x2c4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	f000 8090 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef QEI6_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM8_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim9)	{
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a33      	ldr	r2, [pc, #204]	; (8003184 <TIMxInit+0x2cc>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	f000 808b 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM9_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim10)	{
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a32      	ldr	r2, [pc, #200]	; (800318c <TIMxInit+0x2d4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d10c      	bne.n	80030e0 <TIMxInit+0x228>
		HAL_NVIC_SetPriority(nvic, TIM10_IRQ_PRIO, 0);
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	b25b      	sxtb	r3, r3
 80030ca:	2200      	movs	r2, #0
 80030cc:	210e      	movs	r1, #14
 80030ce:	4618      	mov	r0, r3
 80030d0:	f00e fdc0 	bl	8011c54 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	b25b      	sxtb	r3, r3
 80030d8:	4618      	mov	r0, r3
 80030da:	f00e fdd7 	bl	8011c8c <HAL_NVIC_EnableIRQ>
 80030de:	e079      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim11)	{
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a2c      	ldr	r2, [pc, #176]	; (8003194 <TIMxInit+0x2dc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d10c      	bne.n	8003102 <TIMxInit+0x24a>
		HAL_NVIC_SetPriority(nvic, TIM11_IRQ_PRIO, 0);
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	b25b      	sxtb	r3, r3
 80030ec:	2200      	movs	r2, #0
 80030ee:	210e      	movs	r1, #14
 80030f0:	4618      	mov	r0, r3
 80030f2:	f00e fdaf 	bl	8011c54 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	b25b      	sxtb	r3, r3
 80030fa:	4618      	mov	r0, r3
 80030fc:	f00e fdc6 	bl	8011c8c <HAL_NVIC_EnableIRQ>
 8003100:	e068      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim12)	{
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a25      	ldr	r2, [pc, #148]	; (800319c <TIMxInit+0x2e4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d10c      	bne.n	8003124 <TIMxInit+0x26c>
		HAL_NVIC_SetPriority(nvic, TIM12_IRQ_PRIO, 0);
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	b25b      	sxtb	r3, r3
 800310e:	2200      	movs	r2, #0
 8003110:	210e      	movs	r1, #14
 8003112:	4618      	mov	r0, r3
 8003114:	f00e fd9e 	bl	8011c54 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	b25b      	sxtb	r3, r3
 800311c:	4618      	mov	r0, r3
 800311e:	f00e fdb5 	bl	8011c8c <HAL_NVIC_EnableIRQ>
 8003122:	e057      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim13)	{
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a1f      	ldr	r2, [pc, #124]	; (80031a4 <TIMxInit+0x2ec>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d143      	bne.n	80031b4 <TIMxInit+0x2fc>
		HAL_NVIC_SetPriority(nvic, TIM13_IRQ_PRIO, 0);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	b25b      	sxtb	r3, r3
 8003130:	2200      	movs	r2, #0
 8003132:	210e      	movs	r1, #14
 8003134:	4618      	mov	r0, r3
 8003136:	f00e fd8d 	bl	8011c54 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	b25b      	sxtb	r3, r3
 800313e:	4618      	mov	r0, r3
 8003140:	f00e fda4 	bl	8011c8c <HAL_NVIC_EnableIRQ>
 8003144:	e046      	b.n	80031d4 <TIMxInit+0x31c>
 8003146:	bf00      	nop
 8003148:	20006418 	.word	0x20006418
 800314c:	40010000 	.word	0x40010000
 8003150:	2000651c 	.word	0x2000651c
 8003154:	200061cc 	.word	0x200061cc
 8003158:	40000400 	.word	0x40000400
 800315c:	20006008 	.word	0x20006008
 8003160:	40000800 	.word	0x40000800
 8003164:	2000618c 	.word	0x2000618c
 8003168:	40000c00 	.word	0x40000c00
 800316c:	200063d8 	.word	0x200063d8
 8003170:	40001000 	.word	0x40001000
 8003174:	2000667c 	.word	0x2000667c
 8003178:	40001400 	.word	0x40001400
 800317c:	20005fc8 	.word	0x20005fc8
 8003180:	40010400 	.word	0x40010400
 8003184:	20006458 	.word	0x20006458
 8003188:	40014000 	.word	0x40014000
 800318c:	200060e8 	.word	0x200060e8
 8003190:	40014400 	.word	0x40014400
 8003194:	20006330 	.word	0x20006330
 8003198:	40014800 	.word	0x40014800
 800319c:	2000663c 	.word	0x2000663c
 80031a0:	40001800 	.word	0x40001800
 80031a4:	200062b0 	.word	0x200062b0
 80031a8:	40001c00 	.word	0x40001c00
 80031ac:	200065fc 	.word	0x200065fc
 80031b0:	40002000 	.word	0x40002000
	}
	else if(htimx == &htim14)	{
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a0c      	ldr	r2, [pc, #48]	; (80031e8 <TIMxInit+0x330>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d10b      	bne.n	80031d4 <TIMxInit+0x31c>
		HAL_NVIC_SetPriority(nvic, TIM14_IRQ_PRIO, 0);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	b25b      	sxtb	r3, r3
 80031c0:	2200      	movs	r2, #0
 80031c2:	210e      	movs	r1, #14
 80031c4:	4618      	mov	r0, r3
 80031c6:	f00e fd45 	bl	8011c54 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	b25b      	sxtb	r3, r3
 80031ce:	4618      	mov	r0, r3
 80031d0:	f00e fd5c 	bl	8011c8c <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Base_Start(htimx);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f012 fa92 	bl	80156fe <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(htimx);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f012 fab3 	bl	8015746 <HAL_TIM_Base_Start_IT>

}
 80031e0:	bf00      	nop
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	200065fc 	.word	0x200065fc

080031ec <UARTInit>:
 * 						  rxstate				,can be ENABLE (enable USART1 receive interrupt) or DISBALE
 * Function Return		: None
 * Function Example		: UARTxInit(&huart1, 115200, ENABLE, 0, 0);
 */
void UARTInit(UART_HandleTypeDef* huartx, uint32_t baudrate, FunctionalState rxstate)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	4613      	mov	r3, r2
 80031f8:	71fb      	strb	r3, [r7, #7]
	IRQn_Type nvic;
	uint8_t *rcv_data;

	if (huartx == &huart1){
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4a6e      	ldr	r2, [pc, #440]	; (80033b8 <UARTInit+0x1cc>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d107      	bne.n	8003212 <UARTInit+0x26>
		huartx->Instance = USART1;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4a6d      	ldr	r2, [pc, #436]	; (80033bc <UARTInit+0x1d0>)
 8003206:	601a      	str	r2, [r3, #0]
		nvic = USART1_IRQn;
 8003208:	2325      	movs	r3, #37	; 0x25
 800320a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart1_data;
 800320c:	4b6c      	ldr	r3, [pc, #432]	; (80033c0 <UARTInit+0x1d4>)
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	e036      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart2){
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4a6b      	ldr	r2, [pc, #428]	; (80033c4 <UARTInit+0x1d8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d107      	bne.n	800322a <UARTInit+0x3e>
		huartx->Instance = USART2;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4a6a      	ldr	r2, [pc, #424]	; (80033c8 <UARTInit+0x1dc>)
 800321e:	601a      	str	r2, [r3, #0]
		nvic = USART2_IRQn;
 8003220:	2326      	movs	r3, #38	; 0x26
 8003222:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart2_data;
 8003224:	4b69      	ldr	r3, [pc, #420]	; (80033cc <UARTInit+0x1e0>)
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	e02a      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart3){
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4a68      	ldr	r2, [pc, #416]	; (80033d0 <UARTInit+0x1e4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d107      	bne.n	8003242 <UARTInit+0x56>
		huartx->Instance = USART3;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4a67      	ldr	r2, [pc, #412]	; (80033d4 <UARTInit+0x1e8>)
 8003236:	601a      	str	r2, [r3, #0]
		nvic = USART3_IRQn;
 8003238:	2327      	movs	r3, #39	; 0x27
 800323a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart3_data;
 800323c:	4b66      	ldr	r3, [pc, #408]	; (80033d8 <UARTInit+0x1ec>)
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	e01e      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart4){
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4a65      	ldr	r2, [pc, #404]	; (80033dc <UARTInit+0x1f0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d107      	bne.n	800325a <UARTInit+0x6e>
		huartx->Instance = UART4;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4a64      	ldr	r2, [pc, #400]	; (80033e0 <UARTInit+0x1f4>)
 800324e:	601a      	str	r2, [r3, #0]
		nvic = UART4_IRQn;
 8003250:	2334      	movs	r3, #52	; 0x34
 8003252:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart4_data;
 8003254:	4b63      	ldr	r3, [pc, #396]	; (80033e4 <UARTInit+0x1f8>)
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	e012      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart5){
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4a62      	ldr	r2, [pc, #392]	; (80033e8 <UARTInit+0x1fc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d107      	bne.n	8003272 <UARTInit+0x86>
		huartx->Instance = UART5;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4a61      	ldr	r2, [pc, #388]	; (80033ec <UARTInit+0x200>)
 8003266:	601a      	str	r2, [r3, #0]
		nvic = UART5_IRQn;
 8003268:	2335      	movs	r3, #53	; 0x35
 800326a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart5_data;
 800326c:	4b60      	ldr	r3, [pc, #384]	; (80033f0 <UARTInit+0x204>)
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	e006      	b.n	8003280 <UARTInit+0x94>
	}else{
		huartx->Instance = USART6;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4a5f      	ldr	r2, [pc, #380]	; (80033f4 <UARTInit+0x208>)
 8003276:	601a      	str	r2, [r3, #0]
		nvic = USART6_IRQn;
 8003278:	2347      	movs	r3, #71	; 0x47
 800327a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart6_data;
 800327c:	4b5e      	ldr	r3, [pc, #376]	; (80033f8 <UARTInit+0x20c>)
 800327e:	613b      	str	r3, [r7, #16]
	}


	huartx->Init.BaudRate = baudrate;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	605a      	str	r2, [r3, #4]
	huartx->Init.WordLength = UART_WORDLENGTH_8B;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	609a      	str	r2, [r3, #8]
	huartx->Init.StopBits = UART_STOPBITS_1;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	60da      	str	r2, [r3, #12]
	huartx->Init.Parity = UART_PARITY_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	611a      	str	r2, [r3, #16]
	huartx->Init.Mode = UART_MODE_TX_RX;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	220c      	movs	r2, #12
 800329c:	615a      	str	r2, [r3, #20]
	huartx->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	619a      	str	r2, [r3, #24]
	huartx->Init.OverSampling = UART_OVERSAMPLING_16;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	61da      	str	r2, [r3, #28]


	if (HAL_UART_Init(huartx) != HAL_OK)
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f013 f9fc 	bl	80166a8 <HAL_UART_Init>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <UARTInit+0xce>
	{
		Error_Handler();
 80032b6:	f001 f96d 	bl	8004594 <Error_Handler>
	}

	if(rxstate == ENABLE){
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d176      	bne.n	80033ae <UARTInit+0x1c2>
		if(huartx == &huart2){
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4a40      	ldr	r2, [pc, #256]	; (80033c4 <UARTInit+0x1d8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d119      	bne.n	80032fc <UARTInit+0x110>

			HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 80032c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032cc:	2200      	movs	r2, #0
 80032ce:	2105      	movs	r1, #5
 80032d0:	4618      	mov	r0, r3
 80032d2:	f00e fcbf 	bl	8011c54 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 80032d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032da:	4618      	mov	r0, r3
 80032dc:	f00e fcf2 	bl	8011cc4 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 80032e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f00e fcd1 	bl	8011c8c <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0220 	orr.w	r2, r2, #32
 80032f8:	60da      	str	r2, [r3, #12]
			HAL_NVIC_EnableIRQ(nvic);
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);

		}
	}
}
 80032fa:	e058      	b.n	80033ae <UARTInit+0x1c2>
		}else if(huartx == &huart3){
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4a34      	ldr	r2, [pc, #208]	; (80033d0 <UARTInit+0x1e4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d119      	bne.n	8003338 <UARTInit+0x14c>
			HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 8003304:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003308:	2200      	movs	r2, #0
 800330a:	2104      	movs	r1, #4
 800330c:	4618      	mov	r0, r3
 800330e:	f00e fca1 	bl	8011c54 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 8003312:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003316:	4618      	mov	r0, r3
 8003318:	f00e fcd4 	bl	8011cc4 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 800331c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003320:	4618      	mov	r0, r3
 8003322:	f00e fcb3 	bl	8011c8c <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0220 	orr.w	r2, r2, #32
 8003334:	60da      	str	r2, [r3, #12]
}
 8003336:	e03a      	b.n	80033ae <UARTInit+0x1c2>
		}else if(huartx == &huart4){
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4a28      	ldr	r2, [pc, #160]	; (80033dc <UARTInit+0x1f0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d119      	bne.n	8003374 <UARTInit+0x188>
			HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 8003340:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003344:	2200      	movs	r2, #0
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f00e fc83 	bl	8011c54 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 800334e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003352:	4618      	mov	r0, r3
 8003354:	f00e fcb6 	bl	8011cc4 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8003358:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800335c:	4618      	mov	r0, r3
 800335e:	f00e fc95 	bl	8011c8c <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0220 	orr.w	r2, r2, #32
 8003370:	60da      	str	r2, [r3, #12]
}
 8003372:	e01c      	b.n	80033ae <UARTInit+0x1c2>
		}else if(huartx == &huart5){
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4a1c      	ldr	r2, [pc, #112]	; (80033e8 <UARTInit+0x1fc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d118      	bne.n	80033ae <UARTInit+0x1c2>
			HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 800337c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003380:	2200      	movs	r2, #0
 8003382:	210e      	movs	r1, #14
 8003384:	4618      	mov	r0, r3
 8003386:	f00e fc65 	bl	8011c54 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 800338a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800338e:	4618      	mov	r0, r3
 8003390:	f00e fc98 	bl	8011cc4 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8003394:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003398:	4618      	mov	r0, r3
 800339a:	f00e fc77 	bl	8011c8c <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0220 	orr.w	r2, r2, #32
 80033ac:	60da      	str	r2, [r3, #12]
}
 80033ae:	bf00      	nop
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	200062f0 	.word	0x200062f0
 80033bc:	40011000 	.word	0x40011000
 80033c0:	20005fc4 	.word	0x20005fc4
 80033c4:	2000655c 	.word	0x2000655c
 80033c8:	40004400 	.word	0x40004400
 80033cc:	20006370 	.word	0x20006370
 80033d0:	200060a8 	.word	0x200060a8
 80033d4:	40004800 	.word	0x40004800
 80033d8:	2000620d 	.word	0x2000620d
 80033dc:	200064dc 	.word	0x200064dc
 80033e0:	40004c00 	.word	0x40004c00
 80033e4:	200064d8 	.word	0x200064d8
 80033e8:	20006210 	.word	0x20006210
 80033ec:	40005000 	.word	0x40005000
 80033f0:	20006188 	.word	0x20006188
 80033f4:	40011400 	.word	0x40011400
 80033f8:	2000620c 	.word	0x2000620c

080033fc <UARTx_DMA_Rx_Init>:
 * 						  baudrate				,normally set to 115200 according to UTM ROBOCON UART COMMUNICATION PROTOCOL.
 * Function Return		: None
 * Function Example		: UARTx_DMA_Rx_Init(&huart1, &hdma_usart2_rx, 115200);
 */
void UARTx_DMA_Rx_Init(UART_HandleTypeDef* huartx, DMA_HandleTypeDef* hdma_usart_rx,  uint32_t baudrate)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	4b5a      	ldr	r3, [pc, #360]	; (8003578 <UARTx_DMA_Rx_Init+0x17c>)
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	4a59      	ldr	r2, [pc, #356]	; (8003578 <UARTx_DMA_Rx_Init+0x17c>)
 8003412:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003416:	6313      	str	r3, [r2, #48]	; 0x30
 8003418:	4b57      	ldr	r3, [pc, #348]	; (8003578 <UARTx_DMA_Rx_Init+0x17c>)
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	697b      	ldr	r3, [r7, #20]
	IRQn_Type nvic;
	uint32_t DMA_CHANNEL;

	if(hdma_usart_rx == &hdma_usart2_rx){
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	4a55      	ldr	r2, [pc, #340]	; (800357c <UARTx_DMA_Rx_Init+0x180>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d119      	bne.n	8003460 <UARTx_DMA_Rx_Init+0x64>

		nvic = DMA1_Stream5_IRQn;
 800342c:	2310      	movs	r3, #16
 800342e:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream5;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	4a53      	ldr	r2, [pc, #332]	; (8003580 <UARTx_DMA_Rx_Init+0x184>)
 8003434:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8003436:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800343a:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 800343c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003440:	2200      	movs	r2, #0
 8003442:	2105      	movs	r1, #5
 8003444:	4618      	mov	r0, r3
 8003446:	f00e fc05 	bl	8011c54 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 800344a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800344e:	4618      	mov	r0, r3
 8003450:	f00e fc38 	bl	8011cc4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003454:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003458:	4618      	mov	r0, r3
 800345a:	f00e fc17 	bl	8011c8c <HAL_NVIC_EnableIRQ>
 800345e:	e058      	b.n	8003512 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_usart3_rx){
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4a48      	ldr	r2, [pc, #288]	; (8003584 <UARTx_DMA_Rx_Init+0x188>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d119      	bne.n	800349c <UARTx_DMA_Rx_Init+0xa0>

		nvic = DMA1_Stream1_IRQn;
 8003468:	230c      	movs	r3, #12
 800346a:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream1;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	4a46      	ldr	r2, [pc, #280]	; (8003588 <UARTx_DMA_Rx_Init+0x18c>)
 8003470:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8003472:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003476:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 8003478:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800347c:	2200      	movs	r2, #0
 800347e:	2104      	movs	r1, #4
 8003480:	4618      	mov	r0, r3
 8003482:	f00e fbe7 	bl	8011c54 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003486:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800348a:	4618      	mov	r0, r3
 800348c:	f00e fc1a 	bl	8011cc4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003490:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003494:	4618      	mov	r0, r3
 8003496:	f00e fbf9 	bl	8011c8c <HAL_NVIC_EnableIRQ>
 800349a:	e03a      	b.n	8003512 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_uart4_rx){
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4a3b      	ldr	r2, [pc, #236]	; (800358c <UARTx_DMA_Rx_Init+0x190>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d119      	bne.n	80034d8 <UARTx_DMA_Rx_Init+0xdc>

		nvic = DMA1_Stream2_IRQn;
 80034a4:	230d      	movs	r3, #13
 80034a6:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream2;
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4a39      	ldr	r2, [pc, #228]	; (8003590 <UARTx_DMA_Rx_Init+0x194>)
 80034ac:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 80034ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034b2:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 80034b4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034b8:	2200      	movs	r2, #0
 80034ba:	2100      	movs	r1, #0
 80034bc:	4618      	mov	r0, r3
 80034be:	f00e fbc9 	bl	8011c54 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 80034c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f00e fbfc 	bl	8011cc4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 80034cc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f00e fbdb 	bl	8011c8c <HAL_NVIC_EnableIRQ>
 80034d6:	e01c      	b.n	8003512 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_uart5_rx){
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	4a2e      	ldr	r2, [pc, #184]	; (8003594 <UARTx_DMA_Rx_Init+0x198>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d118      	bne.n	8003512 <UARTx_DMA_Rx_Init+0x116>

		nvic = DMA1_Stream0_IRQn;
 80034e0:	230b      	movs	r3, #11
 80034e2:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream0;
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	4a2c      	ldr	r2, [pc, #176]	; (8003598 <UARTx_DMA_Rx_Init+0x19c>)
 80034e8:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 80034ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034ee:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 80034f0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034f4:	2200      	movs	r2, #0
 80034f6:	210e      	movs	r1, #14
 80034f8:	4618      	mov	r0, r3
 80034fa:	f00e fbab 	bl	8011c54 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 80034fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003502:	4618      	mov	r0, r3
 8003504:	f00e fbde 	bl	8011cc4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003508:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800350c:	4618      	mov	r0, r3
 800350e:	f00e fbbd 	bl	8011c8c <HAL_NVIC_EnableIRQ>

	}

	UARTInit(huartx, baudrate, DISABLE);
 8003512:	2200      	movs	r2, #0
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f7ff fe68 	bl	80031ec <UARTInit>

	hdma_usart_rx->Init.Channel = DMA_CHANNEL;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	605a      	str	r2, [r3, #4]
	hdma_usart_rx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2200      	movs	r2, #0
 8003526:	609a      	str	r2, [r3, #8]
	hdma_usart_rx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2200      	movs	r2, #0
 800352c:	60da      	str	r2, [r3, #12]
	hdma_usart_rx->Init.MemInc = DMA_MINC_ENABLE;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003534:	611a      	str	r2, [r3, #16]
	hdma_usart_rx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2200      	movs	r2, #0
 800353a:	615a      	str	r2, [r3, #20]
	hdma_usart_rx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2200      	movs	r2, #0
 8003540:	619a      	str	r2, [r3, #24]
	hdma_usart_rx->Init.Mode = DMA_NORMAL;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2200      	movs	r2, #0
 8003546:	61da      	str	r2, [r3, #28]
	hdma_usart_rx->Init.Priority = DMA_PRIORITY_LOW;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2200      	movs	r2, #0
 800354c:	621a      	str	r2, [r3, #32]
	hdma_usart_rx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2200      	movs	r2, #0
 8003552:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DMA_Init(hdma_usart_rx) != HAL_OK)
 8003554:	68b8      	ldr	r0, [r7, #8]
 8003556:	f00e fbc3 	bl	8011ce0 <HAL_DMA_Init>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <UARTx_DMA_Rx_Init+0x168>
	{
		Error_Handler();
 8003560:	f001 f818 	bl	8004594 <Error_Handler>
	}

	__HAL_LINKDMA(huartx,hdmarx, *hdma_usart_rx);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	635a      	str	r2, [r3, #52]	; 0x34
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003570:	bf00      	nop
 8003572:	3720      	adds	r7, #32
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40023800 	.word	0x40023800
 800357c:	20005f64 	.word	0x20005f64
 8003580:	40026088 	.word	0x40026088
 8003584:	20006048 	.word	0x20006048
 8003588:	40026028 	.word	0x40026028
 800358c:	20005f04 	.word	0x20005f04
 8003590:	40026040 	.word	0x40026040
 8003594:	2000659c 	.word	0x2000659c
 8003598:	40026010 	.word	0x40026010

0800359c <USART1_IRQHandler>:
void UARTPrintString_IT(UART_HandleTypeDef* huartx, char s[]){
	if(HAL_UART_GetState(huartx) == HAL_UART_STATE_READY)
		HAL_UART_Transmit_IT(huartx, (uint8_t *)s, strlen(s));
}

void  USART1_IRQHandler(void){
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0


	HAL_UART_IRQHandler(&huart1);
 80035a0:	4802      	ldr	r0, [pc, #8]	; (80035ac <USART1_IRQHandler+0x10>)
 80035a2:	f013 f9bd 	bl	8016920 <HAL_UART_IRQHandler>
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	200062f0 	.word	0x200062f0

080035b0 <USART2_IRQHandler>:

void  USART2_IRQHandler(void){
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart2);
 80035b4:	4802      	ldr	r0, [pc, #8]	; (80035c0 <USART2_IRQHandler+0x10>)
 80035b6:	f013 f9b3 	bl	8016920 <HAL_UART_IRQHandler>
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	2000655c 	.word	0x2000655c

080035c4 <USART3_IRQHandler>:

void  USART3_IRQHandler(void){
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart3);
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <USART3_IRQHandler+0x10>)
 80035ca:	f013 f9a9 	bl	8016920 <HAL_UART_IRQHandler>
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	200060a8 	.word	0x200060a8

080035d8 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart4);
 80035dc:	4802      	ldr	r0, [pc, #8]	; (80035e8 <UART4_IRQHandler+0x10>)
 80035de:	f013 f99f 	bl	8016920 <HAL_UART_IRQHandler>
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	200064dc 	.word	0x200064dc

080035ec <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart5);
 80035f0:	4802      	ldr	r0, [pc, #8]	; (80035fc <UART5_IRQHandler+0x10>)
 80035f2:	f013 f995 	bl	8016920 <HAL_UART_IRQHandler>
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20006210 	.word	0x20006210

08003600 <USART6_IRQHandler>:

void  USART6_IRQHandler(void){
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart6);
 8003604:	4802      	ldr	r0, [pc, #8]	; (8003610 <USART6_IRQHandler+0x10>)
 8003606:	f013 f98b 	bl	8016920 <HAL_UART_IRQHandler>
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20006498 	.word	0x20006498

08003614 <CANxInit>:
 * Function Return		: CAN_InitStatus				Constant indicates initialization succeed which will be
  *        											    CAN_InitStatus_Failed or CAN_InitStatus_Success.
 * Function Example		: CAN1_Init(&hcan1,4,CAN_Filter_FIFO0,0,0,13,1,1);
 */
void CANxInit(CAN_HandleTypeDef* hcanx,uint16_t prescaler,uint32_t FilterFIFOAssignment,uint16_t CAN_FilterId_11bits,
		uint16_t CAN_FilterMaskId_11bits,uint8_t CAN_FilterNumber, uint8_t rate){
 8003614:	b580      	push	{r7, lr}
 8003616:	b08e      	sub	sp, #56	; 0x38
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	607a      	str	r2, [r7, #4]
 800361e:	461a      	mov	r2, r3
 8003620:	460b      	mov	r3, r1
 8003622:	817b      	strh	r3, [r7, #10]
 8003624:	4613      	mov	r3, r2
 8003626:	813b      	strh	r3, [r7, #8]

	CAN_FilterTypeDef sFilterConfig = {0};
 8003628:	f107 0310 	add.w	r3, r7, #16
 800362c:	2228      	movs	r2, #40	; 0x28
 800362e:	2100      	movs	r1, #0
 8003630:	4618      	mov	r0, r3
 8003632:	f016 fe6b 	bl	801a30c <memset>

	if(hcanx == &hcan1){
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4a53      	ldr	r2, [pc, #332]	; (8003788 <CANxInit+0x174>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d103      	bne.n	8003646 <CANxInit+0x32>
		hcanx->Instance = CAN1;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4a52      	ldr	r2, [pc, #328]	; (800378c <CANxInit+0x178>)
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	e002      	b.n	800364c <CANxInit+0x38>
	}else{
		hcanx->Instance = CAN2;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a51      	ldr	r2, [pc, #324]	; (8003790 <CANxInit+0x17c>)
 800364a:	601a      	str	r2, [r3, #0]
	}


	hcanx->Init.Prescaler = prescaler;
 800364c:	897a      	ldrh	r2, [r7, #10]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	605a      	str	r2, [r3, #4]
	hcanx->Init.Mode = CAN_MODE_NORMAL;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	609a      	str	r2, [r3, #8]

	hcanx->Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	60da      	str	r2, [r3, #12]
	if(rate == CAN_1MHz){
 800365e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003662:	2b01      	cmp	r3, #1
 8003664:	d108      	bne.n	8003678 <CANxInit+0x64>
		//sampling point 85.71%
		hcanx->Init.TimeSeg1 = CAN_BS1_11TQ;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800366c:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_2TQ;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003674:	615a      	str	r2, [r3, #20]
 8003676:	e00b      	b.n	8003690 <CANxInit+0x7c>
	}else if(rate == CAN_500KHz){
 8003678:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800367c:	2b00      	cmp	r3, #0
 800367e:	d107      	bne.n	8003690 <CANxInit+0x7c>
		//sampling point 71.42%
		hcanx->Init.TimeSeg1 = CAN_BS1_14TQ;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8003686:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_6TQ;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 800368e:	615a      	str	r2, [r3, #20]
	}
	hcanx->Init.TimeTriggeredMode = DISABLE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	761a      	strb	r2, [r3, #24]
	hcanx->Init.AutoBusOff = ENABLE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	765a      	strb	r2, [r3, #25]
	hcanx->Init.AutoWakeUp = DISABLE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	769a      	strb	r2, [r3, #26]
	hcanx->Init.AutoRetransmission = DISABLE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	76da      	strb	r2, [r3, #27]
	hcanx->Init.ReceiveFifoLocked = DISABLE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	771a      	strb	r2, [r3, #28]
	hcanx->Init.TransmitFifoPriority = DISABLE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(hcanx) != HAL_OK)
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f00d fb45 	bl	8010d44 <HAL_CAN_Init>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <CANxInit+0xb0>
	{
		Error_Handler();
 80036c0:	f000 ff68 	bl	8004594 <Error_Handler>
	}

	sFilterConfig.SlaveStartFilterBank = 14;
 80036c4:	230e      	movs	r3, #14
 80036c6:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80036c8:	2301      	movs	r3, #1
 80036ca:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment=FilterFIFOAssignment; //set fifo assignment
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh= CAN_FilterId_11bits <<5; //the ID that the filter looks for (switch this for the other microcontroller)
 80036d4:	893b      	ldrh	r3, [r7, #8]
 80036d6:	015b      	lsls	r3, r3, #5
 80036d8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow=0;
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh=CAN_FilterMaskId_11bits <<5;
 80036de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80036e2:	015b      	lsls	r3, r3, #5
 80036e4:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow=0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 80036ea:	2301      	movs	r3, #1
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterBank = CAN_FilterNumber;
 80036ee:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(hcanx, &sFilterConfig);
 80036f4:	f107 0310 	add.w	r3, r7, #16
 80036f8:	4619      	mov	r1, r3
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f00d fc1e 	bl	8010f3c <HAL_CAN_ConfigFilter>



	if(hcanx == &hcan1){
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4a21      	ldr	r2, [pc, #132]	; (8003788 <CANxInit+0x174>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d11c      	bne.n	8003742 <CANxInit+0x12e>

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10c      	bne.n	8003728 <CANxInit+0x114>
			/* CAN1_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX0_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 800370e:	2200      	movs	r2, #0
 8003710:	2101      	movs	r1, #1
 8003712:	2014      	movs	r0, #20
 8003714:	f00e fa9e 	bl	8011c54 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003718:	2014      	movs	r0, #20
 800371a:	f00e fab7 	bl	8011c8c <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 800371e:	2102      	movs	r1, #2
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f00d ff51 	bl	80115c8 <HAL_CAN_ActivateNotification>
 8003726:	e028      	b.n	800377a <CANxInit+0x166>

		}else{
			/* CAN1_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX1_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 8003728:	2200      	movs	r2, #0
 800372a:	2101      	movs	r1, #1
 800372c:	2015      	movs	r0, #21
 800372e:	f00e fa91 	bl	8011c54 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003732:	2015      	movs	r0, #21
 8003734:	f00e faaa 	bl	8011c8c <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003738:	2110      	movs	r1, #16
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f00d ff44 	bl	80115c8 <HAL_CAN_ActivateNotification>
 8003740:	e01b      	b.n	800377a <CANxInit+0x166>
		}
	}else{

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10c      	bne.n	8003762 <CANxInit+0x14e>
			/* CAN2_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX0_IRQn, CAN2_FIFO0_IRQ_PRIO, 0);
 8003748:	2200      	movs	r2, #0
 800374a:	2101      	movs	r1, #1
 800374c:	2040      	movs	r0, #64	; 0x40
 800374e:	f00e fa81 	bl	8011c54 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003752:	2040      	movs	r0, #64	; 0x40
 8003754:	f00e fa9a 	bl	8011c8c <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003758:	2102      	movs	r1, #2
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f00d ff34 	bl	80115c8 <HAL_CAN_ActivateNotification>
 8003760:	e00b      	b.n	800377a <CANxInit+0x166>
		}else{
			/* CAN2_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX1_IRQn, CAN2_FIFO1_IRQ_PRIO, 0);
 8003762:	2200      	movs	r2, #0
 8003764:	2102      	movs	r1, #2
 8003766:	2041      	movs	r0, #65	; 0x41
 8003768:	f00e fa74 	bl	8011c54 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800376c:	2041      	movs	r0, #65	; 0x41
 800376e:	f00e fa8d 	bl	8011c8c <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003772:	2110      	movs	r1, #16
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f00d ff27 	bl	80115c8 <HAL_CAN_ActivateNotification>
		}
	}

	HAL_CAN_Start(hcanx);
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f00d fcbe 	bl	80110fc <HAL_CAN_Start>

}
 8003780:	bf00      	nop
 8003782:	3738      	adds	r7, #56	; 0x38
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	2000a364 	.word	0x2000a364
 800378c:	40006400 	.word	0x40006400
 8003790:	40006800 	.word	0x40006800

08003794 <CAN_TxMsg>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsg(CAN_HandleTypeDef* hcanx,uint32_t StdId_11bits,uint8_t *Msg,uint8_t len)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b090      	sub	sp, #64	; 0x40
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	70fb      	strb	r3, [r7, #3]
//	sys.rns_busy = 1;
	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 80037a2:	bf00      	nop
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f00d fdc8 	bl	801133a <HAL_CAN_GetTxMailboxesFreeLevel>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f9      	beq.n	80037a4 <CAN_TxMsg+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 80037b4:	2300      	movs	r3, #0
 80037b6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=StdId_11bits;					 // standard identifier=0
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=0;					 // extended identifier=StdId
 80037c0:	2300      	movs	r3, #0
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Standard;			 // type of identifier for the message is Standard
 80037c4:	2300      	movs	r3, #0
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 80037c8:	2300      	movs	r3, #0
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 80037cc:	2300      	movs	r3, #0
 80037ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 80037d2:	e00c      	b.n	80037ee <CAN_TxMsg+0x5a>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 80037d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80037dc:	1c51      	adds	r1, r2, #1
 80037de:	8779      	strh	r1, [r7, #58]	; 0x3a
 80037e0:	4611      	mov	r1, r2
 80037e2:	781a      	ldrb	r2, [r3, #0]
 80037e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037e8:	440b      	add	r3, r1
 80037ea:	f803 2c2c 	strb.w	r2, [r3, #-44]
	while(datalen--)
 80037ee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80037f0:	1e5a      	subs	r2, r3, #1
 80037f2:	873a      	strh	r2, [r7, #56]	; 0x38
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1ed      	bne.n	80037d4 <CAN_TxMsg+0x40>
//			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
//				Error_Handler();
//			}
//		}
	}
	if(i>0){
 80037f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00f      	beq.n	800381e <CAN_TxMsg+0x8a>
		TxMessage.DLC = i;
 80037fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003800:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 8003802:	f107 031c 	add.w	r3, r7, #28
 8003806:	f107 0214 	add.w	r2, r7, #20
 800380a:	f107 0120 	add.w	r1, r7, #32
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f00d fcb8 	bl	8011184 <HAL_CAN_AddTxMessage>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <CAN_TxMsg+0x8a>
			Error_Handler();
 800381a:	f000 febb 	bl	8004594 <Error_Handler>
		}

	}
//	sys.rns_busy = 0;

	return(canMailbox);
 800381e:	69fb      	ldr	r3, [r7, #28]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3740      	adds	r7, #64	; 0x40
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <CAN_TxMsgEID>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsgEID(CAN_HandleTypeDef* hcanx,uint32_t EID,uint8_t *Msg,uint8_t len)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b090      	sub	sp, #64	; 0x40
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	70fb      	strb	r3, [r7, #3]


	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 8003836:	bf00      	nop
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f00d fd7e 	bl	801133a <HAL_CAN_GetTxMailboxesFreeLevel>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f9      	beq.n	8003838 <CAN_TxMsgEID+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 8003848:	2300      	movs	r3, #0
 800384a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=0;					 // standard identifier=0
 8003850:	2300      	movs	r3, #0
 8003852:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=EID;					 // extended identifier=StdId
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Extended;			 // type of identifier for the message is Standard
 8003858:	2304      	movs	r3, #4
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 800385c:	2300      	movs	r3, #0
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 8003860:	2300      	movs	r3, #0
 8003862:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 8003866:	e01f      	b.n	80038a8 <CAN_TxMsgEID+0x80>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 8003868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800386e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003870:	1c51      	adds	r1, r2, #1
 8003872:	8779      	strh	r1, [r7, #58]	; 0x3a
 8003874:	4611      	mov	r1, r2
 8003876:	781a      	ldrb	r2, [r3, #0]
 8003878:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800387c:	440b      	add	r3, r1
 800387e:	f803 2c2c 	strb.w	r2, [r3, #-44]
		if(i == 8){
 8003882:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003884:	2b08      	cmp	r3, #8
 8003886:	d10f      	bne.n	80038a8 <CAN_TxMsgEID+0x80>
			TxMessage.DLC=8;
 8003888:	2308      	movs	r3, #8
 800388a:	633b      	str	r3, [r7, #48]	; 0x30
			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 800388c:	f107 031c 	add.w	r3, r7, #28
 8003890:	f107 0214 	add.w	r2, r7, #20
 8003894:	f107 0120 	add.w	r1, r7, #32
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f00d fc73 	bl	8011184 <HAL_CAN_AddTxMessage>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <CAN_TxMsgEID+0x80>
				Error_Handler();
 80038a4:	f000 fe76 	bl	8004594 <Error_Handler>
	while(datalen--)
 80038a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80038aa:	1e5a      	subs	r2, r3, #1
 80038ac:	873a      	strh	r2, [r7, #56]	; 0x38
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1da      	bne.n	8003868 <CAN_TxMsgEID+0x40>
			}
		}
	}
	if(i>0){
 80038b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00f      	beq.n	80038d8 <CAN_TxMsgEID+0xb0>
		TxMessage.DLC = i;
 80038b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80038ba:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 80038bc:	f107 031c 	add.w	r3, r7, #28
 80038c0:	f107 0214 	add.w	r2, r7, #20
 80038c4:	f107 0120 	add.w	r1, r7, #32
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f00d fc5b 	bl	8011184 <HAL_CAN_AddTxMessage>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <CAN_TxMsgEID+0xb0>
			Error_Handler();
 80038d4:	f000 fe5e 	bl	8004594 <Error_Handler>
		}

	}

	return(canMailbox);
 80038d8:	69fb      	ldr	r3, [r7, #28]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3740      	adds	r7, #64	; 0x40
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <FH_CheckCAN>:
 * Function Arguments	: 	*fh	, pointer to structure FaulHaber_t
 * 							dat	, data received by CAN
 * Function Return		: 	0(FaulHaber ID found) or 1(not from FaulHaber)
 * Function Example		: 	FH_CheckCAN(&fh1, temp);
 */
uint8_t FH_CheckCAN(FaulHaber_t *fh, uint8_t dat[8]){
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
	uint32_t id;
	if(fh->hcanx==&hcan1){
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	4a6a      	ldr	r2, [pc, #424]	; (8003a9c <FH_CheckCAN+0x1b8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d103      	bne.n	8003900 <FH_CheckCAN+0x1c>
		id=CAN1RxMessage.StdId;
 80038f8:	4b69      	ldr	r3, [pc, #420]	; (8003aa0 <FH_CheckCAN+0x1bc>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	e002      	b.n	8003906 <FH_CheckCAN+0x22>
	}else{
		id=CAN2RxMessage.StdId;
 8003900:	4b68      	ldr	r3, [pc, #416]	; (8003aa4 <FH_CheckCAN+0x1c0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60fb      	str	r3, [r7, #12]
	}

	if((id - fh->nodeID) & 0b00001111111)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	791b      	ldrb	r3, [r3, #4]
 800390a:	461a      	mov	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <FH_CheckCAN+0x38>
		return 1;
 8003918:	2301      	movs	r3, #1
 800391a:	e0b8      	b.n	8003a8e <FH_CheckCAN+0x1aa>
	switch((id)>>7){
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	09db      	lsrs	r3, r3, #7
 8003920:	2b0e      	cmp	r3, #14
 8003922:	d821      	bhi.n	8003968 <FH_CheckCAN+0x84>
 8003924:	2b03      	cmp	r3, #3
 8003926:	f0c0 80b1 	bcc.w	8003a8c <FH_CheckCAN+0x1a8>
 800392a:	3b03      	subs	r3, #3
 800392c:	2b0b      	cmp	r3, #11
 800392e:	f200 80ad 	bhi.w	8003a8c <FH_CheckCAN+0x1a8>
 8003932:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <FH_CheckCAN+0x54>)
 8003934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003938:	08003977 	.word	0x08003977
 800393c:	08003a8d 	.word	0x08003a8d
 8003940:	080039dd 	.word	0x080039dd
 8003944:	08003a8d 	.word	0x08003a8d
 8003948:	08003a09 	.word	0x08003a09
 800394c:	08003a8d 	.word	0x08003a8d
 8003950:	08003a27 	.word	0x08003a27
 8003954:	08003a8d 	.word	0x08003a8d
 8003958:	08003a45 	.word	0x08003a45
 800395c:	08003a8d 	.word	0x08003a8d
 8003960:	08003a8d 	.word	0x08003a8d
 8003964:	0800396f 	.word	0x0800396f
 8003968:	2b80      	cmp	r3, #128	; 0x80
 800396a:	d002      	beq.n	8003972 <FH_CheckCAN+0x8e>
 800396c:	e08e      	b.n	8003a8c <FH_CheckCAN+0x1a8>

		case 0b1110:		//boot up messege
			return 0;
 800396e:	2300      	movs	r3, #0
 8003970:	e08d      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case 0x80:		//error messege
			return 0;
 8003972:	2300      	movs	r3, #0
 8003974:	e08b      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO1Tx:		//PDO1/statusword
			fh->target=(dat[1]>>2) & 0b01;		//target reached bit in PP mode
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	3301      	adds	r3, #1
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	089b      	lsrs	r3, r3, #2
 800397e:	b2db      	uxtb	r3, r3
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	b2d9      	uxtb	r1, r3
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800398c:	f361 1304 	bfi	r3, r1, #4, #1
 8003990:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			if(dat[0] & 0b01000000)				//switch on disabled bit
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	d007      	beq.n	80039b0 <FH_CheckCAN+0xcc>
				fh->PDOInit=1;
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039a6:	f043 0304 	orr.w	r3, r3, #4
 80039aa:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80039ae:	e00c      	b.n	80039ca <FH_CheckCAN+0xe6>
			else if(dat[0] & 0b00000100)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d006      	beq.n	80039ca <FH_CheckCAN+0xe6>
				fh->start=1;
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039c2:	f043 0320 	orr.w	r3, r3, #32
 80039c6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			fh->waiting=0;
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039d0:	f36f 0341 	bfc	r3, #1, #1
 80039d4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	e058      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO2Tx:		//PDO2/position
			memcpy(fh->rx_buff, &dat[2], 4);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3324      	adds	r3, #36	; 0x24
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	3202      	adds	r2, #2
 80039e4:	6812      	ldr	r2, [r2, #0]
 80039e6:	601a      	str	r2, [r3, #0]
			fh->rx-=fh->offset;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	1ad2      	subs	r2, r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	625a      	str	r2, [r3, #36]	; 0x24
			fh->waiting=0;
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039fc:	f36f 0341 	bfc	r3, #1, #1
 8003a00:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e042      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO3Tx:		//PDO3/velocity
			memcpy(fh->rx_buff, &dat[2], 4);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3324      	adds	r3, #36	; 0x24
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	3202      	adds	r2, #2
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	601a      	str	r2, [r3, #0]
			fh->waiting=0;
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003a1a:	f36f 0341 	bfc	r3, #1, #1
 8003a1e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e033      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO4Tx:		//PDO4/torque
			memcpy(fh->rx_buff, &dat[2], 4);//not sure if need to convert to int16, because datasheet says type is S16, not S32
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3324      	adds	r3, #36	; 0x24
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	3202      	adds	r2, #2
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	601a      	str	r2, [r3, #0]
			fh->waiting=0;
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003a38:	f36f 0341 	bfc	r3, #1, #1
 8003a3c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	e024      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case SDOTx:		//SDO
			if((dat[0]=0x60)&&(dat[1]==fh->conf[0])&&(dat[2]==fh->conf[1])&&(dat[3]==fh->conf[2]))
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2260      	movs	r2, #96	; 0x60
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	781a      	ldrb	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d116      	bne.n	8003a88 <FH_CheckCAN+0x1a4>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	3302      	adds	r3, #2
 8003a5e:	781a      	ldrb	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d10e      	bne.n	8003a88 <FH_CheckCAN+0x1a4>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	3303      	adds	r3, #3
 8003a6e:	781a      	ldrb	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d106      	bne.n	8003a88 <FH_CheckCAN+0x1a4>
				fh->waiting=0;
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003a80:	f36f 0341 	bfc	r3, #1, #1
 8003a84:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e000      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		default :
			return 1;
 8003a8c:	2301      	movs	r3, #1
			break;
	}
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	2000a364 	.word	0x2000a364
 8003aa0:	2000a8c8 	.word	0x2000a8c8
 8003aa4:	20006f94 	.word	0x20006f94

08003aa8 <FaulHaber_Handler>:
 * 							the CAN data is from FaulHaber or not
 * Function Arguments	: 	dat	, data received by CAN
 * Function Return		: 	None
 * Function Example		: 	FaulHaber_Handler(aData);
 */
void FaulHaber_Handler(uint8_t dat[8]){
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	led2 = 1;
 8003ab0:	4a11      	ldr	r2, [pc, #68]	; (8003af8 <FaulHaber_Handler+0x50>)
 8003ab2:	7853      	ldrb	r3, [r2, #1]
 8003ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ab8:	7053      	strb	r3, [r2, #1]
	uint8_t bflag=1, ad=0;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	73bb      	strb	r3, [r7, #14]
	while(bflag && pfh[ad]!=0)
 8003ac2:	e00c      	b.n	8003ade <FaulHaber_Handler+0x36>
		bflag=FH_CheckCAN(pfh[ad++], dat);
 8003ac4:	7bbb      	ldrb	r3, [r7, #14]
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	73ba      	strb	r2, [r7, #14]
 8003aca:	461a      	mov	r2, r3
 8003acc:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <FaulHaber_Handler+0x54>)
 8003ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff ff05 	bl	80038e4 <FH_CheckCAN>
 8003ada:	4603      	mov	r3, r0
 8003adc:	73fb      	strb	r3, [r7, #15]
	while(bflag && pfh[ad]!=0)
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <FaulHaber_Handler+0x48>
 8003ae4:	7bbb      	ldrb	r3, [r7, #14]
 8003ae6:	4a05      	ldr	r2, [pc, #20]	; (8003afc <FaulHaber_Handler+0x54>)
 8003ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1e9      	bne.n	8003ac4 <FaulHaber_Handler+0x1c>

}
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40020814 	.word	0x40020814
 8003afc:	20006f00 	.word	0x20006f00

08003b00 <I2CxInit>:
 * 						  InterruptEnable				interrupt enable for I2C can be ENABLE or DISABLE
 * Function Return		: NONE
 * Function Example		: I2CxInit (&hi2c1,main_board_1, CLOCK_SPEED_400KHz,ENABLE);
 */
void I2CxInit(I2C_HandleTypeDef* hi2cx,uint8_t OwnAddress,uint32_t ClockSpeed,int InterruptEnable)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	607a      	str	r2, [r7, #4]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	72fb      	strb	r3, [r7, #11]

	IRQn_Type nvicER = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	75fb      	strb	r3, [r7, #23]
	IRQn_Type nvicEV = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	75bb      	strb	r3, [r7, #22]

	if(hi2cx == &hi2c1){
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4a4d      	ldr	r2, [pc, #308]	; (8003c50 <I2CxInit+0x150>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d107      	bne.n	8003b30 <I2CxInit+0x30>
		hi2cx->Instance = I2C1;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4a4c      	ldr	r2, [pc, #304]	; (8003c54 <I2CxInit+0x154>)
 8003b24:	601a      	str	r2, [r3, #0]
		nvicER = I2C1_ER_IRQn;
 8003b26:	2320      	movs	r3, #32
 8003b28:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C1_EV_IRQn;
 8003b2a:	231f      	movs	r3, #31
 8003b2c:	75bb      	strb	r3, [r7, #22]
 8003b2e:	e012      	b.n	8003b56 <I2CxInit+0x56>
	}else if(hi2cx == &hi2c2){
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4a49      	ldr	r2, [pc, #292]	; (8003c58 <I2CxInit+0x158>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d107      	bne.n	8003b48 <I2CxInit+0x48>
		hi2cx->Instance = I2C2;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4a48      	ldr	r2, [pc, #288]	; (8003c5c <I2CxInit+0x15c>)
 8003b3c:	601a      	str	r2, [r3, #0]
		nvicER = I2C2_ER_IRQn;
 8003b3e:	2322      	movs	r3, #34	; 0x22
 8003b40:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C2_EV_IRQn;
 8003b42:	2321      	movs	r3, #33	; 0x21
 8003b44:	75bb      	strb	r3, [r7, #22]
 8003b46:	e006      	b.n	8003b56 <I2CxInit+0x56>
	}else{
		hi2cx->Instance = I2C3;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4a45      	ldr	r2, [pc, #276]	; (8003c60 <I2CxInit+0x160>)
 8003b4c:	601a      	str	r2, [r3, #0]
		nvicER = I2C3_ER_IRQn;
 8003b4e:	2349      	movs	r3, #73	; 0x49
 8003b50:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C3_EV_IRQn;
 8003b52:	2348      	movs	r3, #72	; 0x48
 8003b54:	75bb      	strb	r3, [r7, #22]
	}

	hi2cx->Init.ClockSpeed = ClockSpeed;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	605a      	str	r2, [r3, #4]
	hi2cx->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	609a      	str	r2, [r3, #8]
	hi2cx->Init.OwnAddress1 = OwnAddress<<1;
 8003b62:	7afb      	ldrb	r3, [r7, #11]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	461a      	mov	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	60da      	str	r2, [r3, #12]
	hi2cx->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b72:	611a      	str	r2, [r3, #16]
	hi2cx->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	615a      	str	r2, [r3, #20]
	hi2cx->Init.OwnAddress2 = 0;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	619a      	str	r2, [r3, #24]
	hi2cx->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	61da      	str	r2, [r3, #28]
	hi2cx->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	621a      	str	r2, [r3, #32]



	if(InterruptEnable){
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d051      	beq.n	8003c36 <I2CxInit+0x136>
		if(hi2cx == &hi2c1){
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4a2e      	ldr	r2, [pc, #184]	; (8003c50 <I2CxInit+0x150>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d118      	bne.n	8003bcc <I2CxInit+0xcc>
			HAL_NVIC_SetPriority(nvicER, I2C1_ER_IRQ_PRIO, 0);
 8003b9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f00e f856 	bl	8011c54 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 8003ba8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f00e f86d 	bl	8011c8c <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C1_EV_IRQ_PRIO, 0);
 8003bb2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f00e f84a 	bl	8011c54 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 8003bc0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f00e f861 	bl	8011c8c <HAL_NVIC_EnableIRQ>
 8003bca:	e034      	b.n	8003c36 <I2CxInit+0x136>
		}else if(hi2cx == &hi2c2){
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4a22      	ldr	r2, [pc, #136]	; (8003c58 <I2CxInit+0x158>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d118      	bne.n	8003c06 <I2CxInit+0x106>
			HAL_NVIC_SetPriority(nvicER, I2C2_ER_IRQ_PRIO, 0);
 8003bd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	210e      	movs	r1, #14
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f00e f839 	bl	8011c54 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 8003be2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f00e f850 	bl	8011c8c <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C2_EV_IRQ_PRIO, 0);
 8003bec:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	210e      	movs	r1, #14
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f00e f82d 	bl	8011c54 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 8003bfa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f00e f844 	bl	8011c8c <HAL_NVIC_EnableIRQ>
 8003c04:	e017      	b.n	8003c36 <I2CxInit+0x136>
		}else{
			HAL_NVIC_SetPriority(nvicER, I2C3_ER_IRQ_PRIO, 0);
 8003c06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	210e      	movs	r1, #14
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f00e f820 	bl	8011c54 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 8003c14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f00e f837 	bl	8011c8c <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C3_EV_IRQ_PRIO, 0);
 8003c1e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c22:	2200      	movs	r2, #0
 8003c24:	210e      	movs	r1, #14
 8003c26:	4618      	mov	r0, r3
 8003c28:	f00e f814 	bl	8011c54 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 8003c2c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f00e f82b 	bl	8011c8c <HAL_NVIC_EnableIRQ>
		}
	}


	if (HAL_I2C_Init(hi2cx) != HAL_OK)
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f00e ff26 	bl	8012a88 <HAL_I2C_Init>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <I2CxInit+0x146>
	{
		Error_Handler();
 8003c42:	f000 fca7 	bl	8004594 <Error_Handler>
	}

}
 8003c46:	bf00      	nop
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	2000704c 	.word	0x2000704c
 8003c54:	40005400 	.word	0x40005400
 8003c58:	200070a8 	.word	0x200070a8
 8003c5c:	40005800 	.word	0x40005800
 8003c60:	40005c00 	.word	0x40005c00

08003c64 <I2CX_DMA_RX_Init>:
 * 						  ClockSpeed					Speed of transmission can be CLOCK_SPEED_100KHz or CLOCK_SPEED_400KHz
 * Function Return		: NONE
 * Function Example		: I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 *
 */
void I2CX_DMA_RX_Init(I2C_HandleTypeDef *hi2cx,DMA_HandleTypeDef* hdma_i2cx,uint8_t OwnAddress,uint32_t ClockSpeed){
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	4613      	mov	r3, r2
 8003c72:	71fb      	strb	r3, [r7, #7]

	IRQn_Type nvic,nvicER,nvicEV;
	uint32_t DMA_CHANNEL;
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	4b9e      	ldr	r3, [pc, #632]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7c:	4a9d      	ldr	r2, [pc, #628]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003c7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c82:	6313      	str	r3, [r2, #48]	; 0x30
 8003c84:	4b9b      	ldr	r3, [pc, #620]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	697b      	ldr	r3, [r7, #20]
	if(hi2cx == &hi2c1){
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4a99      	ldr	r2, [pc, #612]	; (8003ef8 <I2CX_DMA_RX_Init+0x294>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d11d      	bne.n	8003cd4 <I2CX_DMA_RX_Init+0x70>

		hi2cx->Instance = I2C1;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4a98      	ldr	r2, [pc, #608]	; (8003efc <I2CX_DMA_RX_Init+0x298>)
 8003c9c:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream0;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	4a97      	ldr	r2, [pc, #604]	; (8003f00 <I2CX_DMA_RX_Init+0x29c>)
 8003ca2:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_1;
 8003ca4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ca8:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream0_IRQn;
 8003caa:	230b      	movs	r3, #11
 8003cac:	77fb      	strb	r3, [r7, #31]

		nvicER = I2C1_ER_IRQn;
 8003cae:	2320      	movs	r3, #32
 8003cb0:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C1_EV_IRQn;
 8003cb2:	231f      	movs	r3, #31
 8003cb4:	777b      	strb	r3, [r7, #29]
		__HAL_RCC_DMA1_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	4b8e      	ldr	r3, [pc, #568]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	4a8d      	ldr	r2, [pc, #564]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003cc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc6:	4b8b      	ldr	r3, [pc, #556]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	e022      	b.n	8003d1a <I2CX_DMA_RX_Init+0xb6>
	}else if(hi2cx == &hi2c2){
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4a8b      	ldr	r2, [pc, #556]	; (8003f04 <I2CX_DMA_RX_Init+0x2a0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d10f      	bne.n	8003cfc <I2CX_DMA_RX_Init+0x98>

		hi2cx->Instance = I2C2;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4a8a      	ldr	r2, [pc, #552]	; (8003f08 <I2CX_DMA_RX_Init+0x2a4>)
 8003ce0:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream3;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4a89      	ldr	r2, [pc, #548]	; (8003f0c <I2CX_DMA_RX_Init+0x2a8>)
 8003ce6:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_7;
 8003ce8:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8003cec:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream3_IRQn;
 8003cee:	230e      	movs	r3, #14
 8003cf0:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C2_ER_IRQn;
 8003cf2:	2322      	movs	r3, #34	; 0x22
 8003cf4:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C2_EV_IRQn;
 8003cf6:	2321      	movs	r3, #33	; 0x21
 8003cf8:	777b      	strb	r3, [r7, #29]
 8003cfa:	e00e      	b.n	8003d1a <I2CX_DMA_RX_Init+0xb6>

	}else{
		hi2cx->Instance = I2C3;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4a84      	ldr	r2, [pc, #528]	; (8003f10 <I2CX_DMA_RX_Init+0x2ac>)
 8003d00:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream2;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	4a83      	ldr	r2, [pc, #524]	; (8003f14 <I2CX_DMA_RX_Init+0x2b0>)
 8003d06:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_3;
 8003d08:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8003d0c:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream2_IRQn;
 8003d0e:	230d      	movs	r3, #13
 8003d10:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C3_ER_IRQn;
 8003d12:	2349      	movs	r3, #73	; 0x49
 8003d14:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C3_EV_IRQn;
 8003d16:	2348      	movs	r3, #72	; 0x48
 8003d18:	777b      	strb	r3, [r7, #29]
	}

	hdma_i2cx->Init.Channel = DMA_CHANNEL;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	605a      	str	r2, [r3, #4]
	hdma_i2cx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2200      	movs	r2, #0
 8003d24:	609a      	str	r2, [r3, #8]
	hdma_i2cx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	60da      	str	r2, [r3, #12]
	hdma_i2cx->Init.MemInc = DMA_MINC_ENABLE;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d32:	611a      	str	r2, [r3, #16]
	hdma_i2cx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2200      	movs	r2, #0
 8003d38:	615a      	str	r2, [r3, #20]
	hdma_i2cx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	619a      	str	r2, [r3, #24]
	hdma_i2cx->Init.Mode = DMA_NORMAL;
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2200      	movs	r2, #0
 8003d44:	61da      	str	r2, [r3, #28]
	hdma_i2cx->Init.Priority = DMA_PRIORITY_HIGH;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d4c:	621a      	str	r2, [r3, #32]
	hdma_i2cx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2200      	movs	r2, #0
 8003d52:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_i2cx->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2203      	movs	r2, #3
 8003d58:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_i2cx->Init.MemBurst = DMA_MBURST_INC4;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003d60:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_i2cx->Init.PeriphBurst = DMA_PBURST_INC4;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003d68:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(hdma_i2cx) != HAL_OK)
 8003d6a:	68b8      	ldr	r0, [r7, #8]
 8003d6c:	f00d ffb8 	bl	8011ce0 <HAL_DMA_Init>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <I2CX_DMA_RX_Init+0x116>
	{

		Error_Handler();
 8003d76:	f000 fc0d 	bl	8004594 <Error_Handler>

	}
	__HAL_LINKDMA(hi2cx,hdmarx,*hdma_i2cx);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	639a      	str	r2, [r3, #56]	; 0x38
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	639a      	str	r2, [r3, #56]	; 0x38

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */

	//	__HAL_DMA_ENABLE_IT(hdma_i2cx,DMA_IT_TC);
	if(hi2cx == &hi2c1){
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4a5b      	ldr	r2, [pc, #364]	; (8003ef8 <I2CX_DMA_RX_Init+0x294>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d111      	bne.n	8003db2 <I2CX_DMA_RX_Init+0x14e>
		HAL_NVIC_SetPriority(nvic, DMA1_Str0__IRQ_PRIO, 0);
 8003d8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d92:	2200      	movs	r2, #0
 8003d94:	210a      	movs	r1, #10
 8003d96:	4618      	mov	r0, r3
 8003d98:	f00d ff5c 	bl	8011c54 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003d9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f00d ff8f 	bl	8011cc4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003da6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f00d ff6e 	bl	8011c8c <HAL_NVIC_EnableIRQ>
 8003db0:	e026      	b.n	8003e00 <I2CX_DMA_RX_Init+0x19c>
	}else if(hi2cx == &hi2c2){
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4a53      	ldr	r2, [pc, #332]	; (8003f04 <I2CX_DMA_RX_Init+0x2a0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d111      	bne.n	8003dde <I2CX_DMA_RX_Init+0x17a>
		HAL_NVIC_SetPriority(nvic, DMA1_Str3__IRQ_PRIO, 0);
 8003dba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	210e      	movs	r1, #14
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f00d ff46 	bl	8011c54 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003dc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f00d ff79 	bl	8011cc4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003dd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f00d ff58 	bl	8011c8c <HAL_NVIC_EnableIRQ>
 8003ddc:	e010      	b.n	8003e00 <I2CX_DMA_RX_Init+0x19c>
	}else{
		HAL_NVIC_SetPriority(nvic, DMA1_Str2__IRQ_PRIO, 0);
 8003dde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003de2:	2200      	movs	r2, #0
 8003de4:	210e      	movs	r1, #14
 8003de6:	4618      	mov	r0, r3
 8003de8:	f00d ff34 	bl	8011c54 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003dec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f00d ff67 	bl	8011cc4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003df6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f00d ff46 	bl	8011c8c <HAL_NVIC_EnableIRQ>
	}

	hi2cx->Init.ClockSpeed = ClockSpeed;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	605a      	str	r2, [r3, #4]
	hi2cx->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	609a      	str	r2, [r3, #8]
	hi2cx->Init.OwnAddress1 = OwnAddress<<1;
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	461a      	mov	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	60da      	str	r2, [r3, #12]
	hi2cx->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e1c:	611a      	str	r2, [r3, #16]
	hi2cx->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	615a      	str	r2, [r3, #20]
	hi2cx->Init.OwnAddress2 = 0;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	619a      	str	r2, [r3, #24]
	hi2cx->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	61da      	str	r2, [r3, #28]
	hi2cx->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	621a      	str	r2, [r3, #32]

	if(hi2cx == &hi2c1){
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4a2f      	ldr	r2, [pc, #188]	; (8003ef8 <I2CX_DMA_RX_Init+0x294>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d118      	bne.n	8003e70 <I2CX_DMA_RX_Init+0x20c>
		HAL_NVIC_SetPriority(nvicER, I2C1_ER_IRQ_PRIO, 0);
 8003e3e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e42:	2200      	movs	r2, #0
 8003e44:	2100      	movs	r1, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f00d ff04 	bl	8011c54 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003e4c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f00d ff1b 	bl	8011c8c <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C1_EV_IRQ_PRIO, 0);
 8003e56:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f00d fef8 	bl	8011c54 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003e64:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f00d ff0f 	bl	8011c8c <HAL_NVIC_EnableIRQ>
 8003e6e:	e034      	b.n	8003eda <I2CX_DMA_RX_Init+0x276>
	}else if(hi2cx == &hi2c2){
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4a24      	ldr	r2, [pc, #144]	; (8003f04 <I2CX_DMA_RX_Init+0x2a0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d118      	bne.n	8003eaa <I2CX_DMA_RX_Init+0x246>
		HAL_NVIC_SetPriority(nvicER, I2C2_ER_IRQ_PRIO, 0);
 8003e78:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	210e      	movs	r1, #14
 8003e80:	4618      	mov	r0, r3
 8003e82:	f00d fee7 	bl	8011c54 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003e86:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f00d fefe 	bl	8011c8c <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C2_EV_IRQ_PRIO, 0);
 8003e90:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e94:	2200      	movs	r2, #0
 8003e96:	210e      	movs	r1, #14
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f00d fedb 	bl	8011c54 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003e9e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f00d fef2 	bl	8011c8c <HAL_NVIC_EnableIRQ>
 8003ea8:	e017      	b.n	8003eda <I2CX_DMA_RX_Init+0x276>
	}else{
		HAL_NVIC_SetPriority(nvicER, I2C3_ER_IRQ_PRIO, 0);
 8003eaa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	210e      	movs	r1, #14
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f00d fece 	bl	8011c54 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003eb8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f00d fee5 	bl	8011c8c <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C3_EV_IRQ_PRIO, 0);
 8003ec2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	210e      	movs	r1, #14
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f00d fec2 	bl	8011c54 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003ed0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f00d fed9 	bl	8011c8c <HAL_NVIC_EnableIRQ>
	}

	if (HAL_I2C_Init(hi2cx) != HAL_OK)
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f00e fdd4 	bl	8012a88 <HAL_I2C_Init>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <I2CX_DMA_RX_Init+0x286>
	{

		Error_Handler();
 8003ee6:	f000 fb55 	bl	8004594 <Error_Handler>
	}
}
 8003eea:	bf00      	nop
 8003eec:	3720      	adds	r7, #32
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	2000704c 	.word	0x2000704c
 8003efc:	40005400 	.word	0x40005400
 8003f00:	40026010 	.word	0x40026010
 8003f04:	200070a8 	.word	0x200070a8
 8003f08:	40005800 	.word	0x40005800
 8003f0c:	40026058 	.word	0x40026058
 8003f10:	40005c00 	.word	0x40005c00
 8003f14:	40026040 	.word	0x40026040

08003f18 <I2C2_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_EV_IRQHandler(void){
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0


	HAL_I2C_EV_IRQHandler(&hi2c2);
 8003f1c:	4802      	ldr	r0, [pc, #8]	; (8003f28 <I2C2_EV_IRQHandler+0x10>)
 8003f1e:	f00f f83d 	bl	8012f9c <HAL_I2C_EV_IRQHandler>


}
 8003f22:	bf00      	nop
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	200070a8 	.word	0x200070a8

08003f2c <I2C2_ER_IRQHandler>:
 * Function Remarks		: This interrupt handle the error event of I2C2.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_ER_IRQHandler(void){
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0

	HAL_I2C_ER_IRQHandler(&hi2c2);
 8003f30:	4802      	ldr	r0, [pc, #8]	; (8003f3c <I2C2_ER_IRQHandler+0x10>)
 8003f32:	f00f f9a0 	bl	8013276 <HAL_I2C_ER_IRQHandler>


}
 8003f36:	bf00      	nop
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	200070a8 	.word	0x200070a8

08003f40 <I2C3_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C3_EV_IRQHandler(void){
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0

	//	taskENTER_CRITICAL();
	HAL_I2C_EV_IRQHandler(&hi2c3);
 8003f44:	4802      	ldr	r0, [pc, #8]	; (8003f50 <I2C3_EV_IRQHandler+0x10>)
 8003f46:	f00f f829 	bl	8012f9c <HAL_I2C_EV_IRQHandler>
	//	taskEXIT_CRITICAL();

}
 8003f4a:	bf00      	nop
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20006cbc 	.word	0x20006cbc

08003f54 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b0a4      	sub	sp, #144	; 0x90
 8003f58:	af00      	add	r7, sp, #0
	set();
 8003f5a:	f006 fd07 	bl	800a96c <set>
	const osThreadAttr_t MainTask_attributes =
 8003f5e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f62:	2224      	movs	r2, #36	; 0x24
 8003f64:	2100      	movs	r1, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f016 f9d0 	bl	801a30c <memset>
 8003f6c:	4b31      	ldr	r3, [pc, #196]	; (8004034 <main+0xe0>)
 8003f6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f78:	2318      	movs	r3, #24
 8003f7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			{ .name = "MainTask", .stack_size = 512 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	const osThreadAttr_t CheckingTask_attributes =
 8003f7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f82:	2224      	movs	r2, #36	; 0x24
 8003f84:	2100      	movs	r1, #0
 8003f86:	4618      	mov	r0, r3
 8003f88:	f016 f9c0 	bl	801a30c <memset>
 8003f8c:	4b2a      	ldr	r3, [pc, #168]	; (8004038 <main+0xe4>)
 8003f8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f96:	2318      	movs	r3, #24
 8003f98:	663b      	str	r3, [r7, #96]	; 0x60
			{ .name = "CheckingTask", .stack_size =512 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	const osThreadAttr_t NaviTask_attributes =
 8003f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f9e:	2224      	movs	r2, #36	; 0x24
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f016 f9b2 	bl	801a30c <memset>
 8003fa8:	4b24      	ldr	r3, [pc, #144]	; (800403c <main+0xe8>)
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
 8003fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fb2:	2318      	movs	r3, #24
 8003fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
			{ .name = "NaviTask", .stack_size = 1024 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	const osThreadAttr_t EmergencyTask_attributes =
 8003fb6:	463b      	mov	r3, r7
 8003fb8:	2224      	movs	r2, #36	; 0x24
 8003fba:	2100      	movs	r1, #0
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f016 f9a5 	bl	801a30c <memset>
 8003fc2:	4b1f      	ldr	r3, [pc, #124]	; (8004040 <main+0xec>)
 8003fc4:	603b      	str	r3, [r7, #0]
 8003fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	2318      	movs	r3, #24
 8003fce:	61bb      	str	r3, [r7, #24]
			{ .name = "EmergencyTask", .stack_size = 256 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	osKernelInitialize();
 8003fd0:	f013 fb06 	bl	80175e0 <osKernelInitialize>

	MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 8003fd4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003fd8:	461a      	mov	r2, r3
 8003fda:	2100      	movs	r1, #0
 8003fdc:	4819      	ldr	r0, [pc, #100]	; (8004044 <main+0xf0>)
 8003fde:	f013 fb49 	bl	8017674 <osThreadNew>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4a18      	ldr	r2, [pc, #96]	; (8004048 <main+0xf4>)
 8003fe6:	6013      	str	r3, [r2, #0]
	NaviTaskHandle = osThreadNew(NaviTask, NULL, &NaviTask_attributes);
 8003fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fec:	461a      	mov	r2, r3
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4816      	ldr	r0, [pc, #88]	; (800404c <main+0xf8>)
 8003ff2:	f013 fb3f 	bl	8017674 <osThreadNew>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4a15      	ldr	r2, [pc, #84]	; (8004050 <main+0xfc>)
 8003ffa:	6013      	str	r3, [r2, #0]
	CheckingTaskHandle = osThreadNew(CheckingTask, NULL,
 8003ffc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004000:	461a      	mov	r2, r3
 8004002:	2100      	movs	r1, #0
 8004004:	4813      	ldr	r0, [pc, #76]	; (8004054 <main+0x100>)
 8004006:	f013 fb35 	bl	8017674 <osThreadNew>
 800400a:	4603      	mov	r3, r0
 800400c:	4a12      	ldr	r2, [pc, #72]	; (8004058 <main+0x104>)
 800400e:	6013      	str	r3, [r2, #0]
			&CheckingTask_attributes);
	EmergencyTaskHandle = osThreadNew(EmergencyTask, NULL,
 8004010:	463b      	mov	r3, r7
 8004012:	461a      	mov	r2, r3
 8004014:	2100      	movs	r1, #0
 8004016:	4811      	ldr	r0, [pc, #68]	; (800405c <main+0x108>)
 8004018:	f013 fb2c 	bl	8017674 <osThreadNew>
 800401c:	4603      	mov	r3, r0
 800401e:	4a10      	ldr	r2, [pc, #64]	; (8004060 <main+0x10c>)
 8004020:	6013      	str	r3, [r2, #0]
			&EmergencyTask_attributes);
	led2 = 1;
 8004022:	4a10      	ldr	r2, [pc, #64]	; (8004064 <main+0x110>)
 8004024:	7853      	ldrb	r3, [r2, #1]
 8004026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800402a:	7053      	strb	r3, [r2, #1]
	osKernelStart();
 800402c:	f013 fafc 	bl	8017628 <osKernelStart>

	while (1) {
 8004030:	e7fe      	b.n	8004030 <main+0xdc>
 8004032:	bf00      	nop
 8004034:	08020198 	.word	0x08020198
 8004038:	080201a4 	.word	0x080201a4
 800403c:	080201b4 	.word	0x080201b4
 8004040:	080201c0 	.word	0x080201c0
 8004044:	08004199 	.word	0x08004199
 8004048:	20007d24 	.word	0x20007d24
 800404c:	08004291 	.word	0x08004291
 8004050:	20007764 	.word	0x20007764
 8004054:	080043d5 	.word	0x080043d5
 8004058:	2000a2f8 	.word	0x2000a2f8
 800405c:	080044a5 	.word	0x080044a5
 8004060:	2000a1ec 	.word	0x2000a1ec
 8004064:	40020814 	.word	0x40020814

08004068 <TIM6_DAC_IRQHandler>:

	}
}

void TIM6_DAC_IRQHandler(void) {
 8004068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800406c:	b096      	sub	sp, #88	; 0x58
 800406e:	af0e      	add	r7, sp, #56	; 0x38

	static int counter = 0;
	counter++;
 8004070:	4b40      	ldr	r3, [pc, #256]	; (8004174 <TIM6_DAC_IRQHandler+0x10c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3301      	adds	r3, #1
 8004076:	4a3f      	ldr	r2, [pc, #252]	; (8004174 <TIM6_DAC_IRQHandler+0x10c>)
 8004078:	6013      	str	r3, [r2, #0]

	if(counter % 4 == 0)
 800407a:	4b3e      	ldr	r3, [pc, #248]	; (8004174 <TIM6_DAC_IRQHandler+0x10c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d168      	bne.n	8004158 <TIM6_DAC_IRQHandler+0xf0>
	{
		led1 = !led1;
 8004086:	4b3c      	ldr	r3, [pc, #240]	; (8004178 <TIM6_DAC_IRQHandler+0x110>)
 8004088:	785b      	ldrb	r3, [r3, #1]
 800408a:	f003 0320 	and.w	r3, r3, #32
 800408e:	b2db      	uxtb	r3, r3
 8004090:	4a39      	ldr	r2, [pc, #228]	; (8004178 <TIM6_DAC_IRQHandler+0x110>)
 8004092:	2b00      	cmp	r3, #0
 8004094:	bf0c      	ite	eq
 8004096:	2301      	moveq	r3, #1
 8004098:	2300      	movne	r3, #0
 800409a:	b2d9      	uxtb	r1, r3
 800409c:	7853      	ldrb	r3, [r2, #1]
 800409e:	f361 1345 	bfi	r3, r1, #5, #1
 80040a2:	7053      	strb	r3, [r2, #1]
		counter = 0;
 80040a4:	4b33      	ldr	r3, [pc, #204]	; (8004174 <TIM6_DAC_IRQHandler+0x10c>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
//	//		sprintf((char*)debug, "pos: %d errX: %.2f errY: %.2f X: %.2f Y: %.2f Z: %.2f Pick: %ld\n",
//	//				lidar.pos_counter, pp.error_x, pp.error_y, pp.real_x, pp.real_y, pp.real_z, pick_enc);
//	//		sprintf((char*)debug, "VESC: %f\n", vesc_duty);
//		}
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f LX: %.2lf LY: %.2lf LAx: %.2f LAy: %.2f VESC: %.3f\n",
				pp.real_x, pp.real_y, pp.real_z, lidar.pole.x, lidar.pole.y, lidar.adj_x, lidar.adj_y, vesc_duty);
 80040aa:	4b34      	ldr	r3, [pc, #208]	; (800417c <TIM6_DAC_IRQHandler+0x114>)
 80040ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f LX: %.2lf LY: %.2lf LAx: %.2f LAy: %.2f VESC: %.3f\n",
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fc fa4a 	bl	8000548 <__aeabi_f2d>
 80040b4:	e9c7 0106 	strd	r0, r1, [r7, #24]
				pp.real_x, pp.real_y, pp.real_z, lidar.pole.x, lidar.pole.y, lidar.adj_x, lidar.adj_y, vesc_duty);
 80040b8:	4b30      	ldr	r3, [pc, #192]	; (800417c <TIM6_DAC_IRQHandler+0x114>)
 80040ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f LX: %.2lf LY: %.2lf LAx: %.2f LAy: %.2f VESC: %.3f\n",
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fc fa43 	bl	8000548 <__aeabi_f2d>
 80040c2:	e9c7 0104 	strd	r0, r1, [r7, #16]
				pp.real_x, pp.real_y, pp.real_z, lidar.pole.x, lidar.pole.y, lidar.adj_x, lidar.adj_y, vesc_duty);
 80040c6:	4b2d      	ldr	r3, [pc, #180]	; (800417c <TIM6_DAC_IRQHandler+0x114>)
 80040c8:	691b      	ldr	r3, [r3, #16]
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f LX: %.2lf LY: %.2lf LAx: %.2f LAy: %.2f VESC: %.3f\n",
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fc fa3c 	bl	8000548 <__aeabi_f2d>
 80040d0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80040d4:	4b2a      	ldr	r3, [pc, #168]	; (8004180 <TIM6_DAC_IRQHandler+0x118>)
 80040d6:	e9d3 896a 	ldrd	r8, r9, [r3, #424]	; 0x1a8
 80040da:	4b29      	ldr	r3, [pc, #164]	; (8004180 <TIM6_DAC_IRQHandler+0x118>)
 80040dc:	e9d3 ab6c 	ldrd	sl, fp, [r3, #432]	; 0x1b0
				pp.real_x, pp.real_y, pp.real_z, lidar.pole.x, lidar.pole.y, lidar.adj_x, lidar.adj_y, vesc_duty);
 80040e0:	4b27      	ldr	r3, [pc, #156]	; (8004180 <TIM6_DAC_IRQHandler+0x118>)
 80040e2:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f LX: %.2lf LY: %.2lf LAx: %.2f LAy: %.2f VESC: %.3f\n",
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fc fa2e 	bl	8000548 <__aeabi_f2d>
 80040ec:	e9c7 0100 	strd	r0, r1, [r7]
				pp.real_x, pp.real_y, pp.real_z, lidar.pole.x, lidar.pole.y, lidar.adj_x, lidar.adj_y, vesc_duty);
 80040f0:	4b23      	ldr	r3, [pc, #140]	; (8004180 <TIM6_DAC_IRQHandler+0x118>)
 80040f2:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f LX: %.2lf LY: %.2lf LAx: %.2f LAy: %.2f VESC: %.3f\n",
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fc fa26 	bl	8000548 <__aeabi_f2d>
 80040fc:	4604      	mov	r4, r0
 80040fe:	460d      	mov	r5, r1
 8004100:	4b20      	ldr	r3, [pc, #128]	; (8004184 <TIM6_DAC_IRQHandler+0x11c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4618      	mov	r0, r3
 8004106:	f7fc fa1f 	bl	8000548 <__aeabi_f2d>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004112:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8004116:	ed97 7b00 	vldr	d7, [r7]
 800411a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800411e:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8004122:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8004126:	ed97 7b02 	vldr	d7, [r7, #8]
 800412a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800412e:	ed97 7b04 	vldr	d7, [r7, #16]
 8004132:	ed8d 7b00 	vstr	d7, [sp]
 8004136:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800413a:	4913      	ldr	r1, [pc, #76]	; (8004188 <TIM6_DAC_IRQHandler+0x120>)
 800413c:	4813      	ldr	r0, [pc, #76]	; (800418c <TIM6_DAC_IRQHandler+0x124>)
 800413e:	f017 f8c7 	bl	801b2d0 <siprintf>
		HAL_UART_Transmit(&huart5, debug, strlen((char*) debug), HAL_MAX_DELAY);
 8004142:	4812      	ldr	r0, [pc, #72]	; (800418c <TIM6_DAC_IRQHandler+0x124>)
 8004144:	f7fc f844 	bl	80001d0 <strlen>
 8004148:	4603      	mov	r3, r0
 800414a:	b29a      	uxth	r2, r3
 800414c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004150:	490e      	ldr	r1, [pc, #56]	; (800418c <TIM6_DAC_IRQHandler+0x124>)
 8004152:	480f      	ldr	r0, [pc, #60]	; (8004190 <TIM6_DAC_IRQHandler+0x128>)
 8004154:	f012 faf5 	bl	8016742 <HAL_UART_Transmit>
//	ABT(&y_data);
//
//	fyaw = (fyaw >= 0.0) ? fyaw : 360.0 + fyaw;
//	enq();

	PathPlan(&pp);
 8004158:	4808      	ldr	r0, [pc, #32]	; (800417c <TIM6_DAC_IRQHandler+0x114>)
 800415a:	f001 fe75 	bl	8005e48 <PathPlan>
	CheckPickEnc();
 800415e:	f007 f8eb 	bl	800b338 <CheckPickEnc>

//	sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f \n", fXPos, fYPos, fyaw);
//	HAL_UART_Transmit(&huart4, debug, strlen((char*) debug), HAL_MAX_DELAY);
	HAL_TIM_IRQHandler(&htim6);
 8004162:	480c      	ldr	r0, [pc, #48]	; (8004194 <TIM6_DAC_IRQHandler+0x12c>)
 8004164:	f011 fc46 	bl	80159f4 <HAL_TIM_IRQHandler>

}
 8004168:	bf00      	nop
 800416a:	3720      	adds	r7, #32
 800416c:	46bd      	mov	sp, r7
 800416e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004172:	bf00      	nop
 8004174:	20000288 	.word	0x20000288
 8004178:	40020814 	.word	0x40020814
 800417c:	20007188 	.word	0x20007188
 8004180:	20009498 	.word	0x20009498
 8004184:	20007840 	.word	0x20007840
 8004188:	080201d0 	.word	0x080201d0
 800418c:	20007948 	.word	0x20007948
 8004190:	20006210 	.word	0x20006210
 8004194:	200063d8 	.word	0x200063d8

08004198 <MainTask>:

// Can be polling
void MainTask(void *argument) {
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
	RobotStart();
 80041a0:	f006 fe84 	bl	800aeac <RobotStart>
	while (1) {
		if (ps4.button == SELECT)
 80041a4:	4b36      	ldr	r3, [pc, #216]	; (8004280 <MainTask+0xe8>)
 80041a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d110      	bne.n	80041ce <MainTask+0x36>
		{
			while (ps4.button == SELECT);
 80041ac:	bf00      	nop
 80041ae:	4b34      	ldr	r3, [pc, #208]	; (8004280 <MainTask+0xe8>)
 80041b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d0fb      	beq.n	80041ae <MainTask+0x16>
			mode++;
 80041b6:	4b33      	ldr	r3, [pc, #204]	; (8004284 <MainTask+0xec>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3301      	adds	r3, #1
 80041bc:	4a31      	ldr	r2, [pc, #196]	; (8004284 <MainTask+0xec>)
 80041be:	6013      	str	r3, [r2, #0]

			if (mode > 1)
 80041c0:	4b30      	ldr	r3, [pc, #192]	; (8004284 <MainTask+0xec>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	dd02      	ble.n	80041ce <MainTask+0x36>
				mode = 0;
 80041c8:	4b2e      	ldr	r3, [pc, #184]	; (8004284 <MainTask+0xec>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]
		}

		if(ps4.button == L1)
 80041ce:	4b2c      	ldr	r3, [pc, #176]	; (8004280 <MainTask+0xe8>)
 80041d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d6:	d118      	bne.n	800420a <MainTask+0x72>
		{
			while(ps4.button == L1);
 80041d8:	bf00      	nop
 80041da:	4b29      	ldr	r3, [pc, #164]	; (8004280 <MainTask+0xe8>)
 80041dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e2:	d0fa      	beq.n	80041da <MainTask+0x42>
			vesc_duty += 0.005;
 80041e4:	4b28      	ldr	r3, [pc, #160]	; (8004288 <MainTask+0xf0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fc f9ad 	bl	8000548 <__aeabi_f2d>
 80041ee:	a322      	add	r3, pc, #136	; (adr r3, 8004278 <MainTask+0xe0>)
 80041f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f4:	f7fc f84a 	bl	800028c <__adddf3>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4610      	mov	r0, r2
 80041fe:	4619      	mov	r1, r3
 8004200:	f7fc fcf2 	bl	8000be8 <__aeabi_d2f>
 8004204:	4603      	mov	r3, r0
 8004206:	4a20      	ldr	r2, [pc, #128]	; (8004288 <MainTask+0xf0>)
 8004208:	6013      	str	r3, [r2, #0]
		}

		if(ps4.button == R1)
 800420a:	4b1d      	ldr	r3, [pc, #116]	; (8004280 <MainTask+0xe8>)
 800420c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800420e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004212:	d118      	bne.n	8004246 <MainTask+0xae>
		{
			while(ps4.button == R1);
 8004214:	bf00      	nop
 8004216:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <MainTask+0xe8>)
 8004218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800421a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800421e:	d0fa      	beq.n	8004216 <MainTask+0x7e>
			vesc_duty -= 0.005;
 8004220:	4b19      	ldr	r3, [pc, #100]	; (8004288 <MainTask+0xf0>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4618      	mov	r0, r3
 8004226:	f7fc f98f 	bl	8000548 <__aeabi_f2d>
 800422a:	a313      	add	r3, pc, #76	; (adr r3, 8004278 <MainTask+0xe0>)
 800422c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004230:	f7fc f82a 	bl	8000288 <__aeabi_dsub>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4610      	mov	r0, r2
 800423a:	4619      	mov	r1, r3
 800423c:	f7fc fcd4 	bl	8000be8 <__aeabi_d2f>
 8004240:	4603      	mov	r3, r0
 8004242:	4a11      	ldr	r2, [pc, #68]	; (8004288 <MainTask+0xf0>)
 8004244:	6013      	str	r3, [r2, #0]
		}

		switch (mode)
 8004246:	4b0f      	ldr	r3, [pc, #60]	; (8004284 <MainTask+0xec>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d00f      	beq.n	800426e <MainTask+0xd6>
 800424e:	2b02      	cmp	r3, #2
 8004250:	dca8      	bgt.n	80041a4 <MainTask+0xc>
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <MainTask+0xc4>
 8004256:	2b01      	cmp	r3, #1
 8004258:	d003      	beq.n	8004262 <MainTask+0xca>
 800425a:	e00b      	b.n	8004274 <MainTask+0xdc>
		{
			case NORMAL:
				NormalControl();
 800425c:	f006 fe9a 	bl	800af94 <NormalControl>
			break;
 8004260:	e008      	b.n	8004274 <MainTask+0xdc>

			case AUTO:
				Auto();
 8004262:	f006 ff97 	bl	800b194 <Auto>
				LidarControl(&lidar);
 8004266:	4809      	ldr	r0, [pc, #36]	; (800428c <MainTask+0xf4>)
 8004268:	f00c f9de 	bl	8010628 <LidarControl>
			break;
 800426c:	e002      	b.n	8004274 <MainTask+0xdc>

			case TUNE:
				tune();
 800426e:	f007 fbff 	bl	800ba70 <tune>
			break;
 8004272:	bf00      	nop
		if (ps4.button == SELECT)
 8004274:	e796      	b.n	80041a4 <MainTask+0xc>
 8004276:	bf00      	nop
 8004278:	47ae147b 	.word	0x47ae147b
 800427c:	3f747ae1 	.word	0x3f747ae1
 8004280:	2000a3f0 	.word	0x2000a3f0
 8004284:	20009738 	.word	0x20009738
 8004288:	20007840 	.word	0x20007840
 800428c:	20009498 	.word	0x20009498

08004290 <NaviTask>:
		}
	}
}

// Cannot Polling
void NaviTask(void *argument) {
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
	while (1) {

		if(!set_pitch)
 8004298:	4b3e      	ldr	r3, [pc, #248]	; (8004394 <NaviTask+0x104>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d116      	bne.n	80042ce <NaviTask+0x3e>
		{
			if (ps4.button == UP)
 80042a0:	4b3d      	ldr	r3, [pc, #244]	; (8004398 <NaviTask+0x108>)
 80042a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042a4:	2b10      	cmp	r3, #16
 80042a6:	d104      	bne.n	80042b2 <NaviTask+0x22>
			{
				pitch_up;
 80042a8:	493c      	ldr	r1, [pc, #240]	; (800439c <NaviTask+0x10c>)
 80042aa:	483d      	ldr	r0, [pc, #244]	; (80043a0 <NaviTask+0x110>)
 80042ac:	f7fc ff6d 	bl	800118a <WriteBDC>
 80042b0:	e00d      	b.n	80042ce <NaviTask+0x3e>
			}
			else if (ps4.button == DOWN)
 80042b2:	4b39      	ldr	r3, [pc, #228]	; (8004398 <NaviTask+0x108>)
 80042b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042b6:	2b40      	cmp	r3, #64	; 0x40
 80042b8:	d105      	bne.n	80042c6 <NaviTask+0x36>
			{
				pitch_down;
 80042ba:	f644 611f 	movw	r1, #19999	; 0x4e1f
 80042be:	4838      	ldr	r0, [pc, #224]	; (80043a0 <NaviTask+0x110>)
 80042c0:	f7fc ff63 	bl	800118a <WriteBDC>
 80042c4:	e003      	b.n	80042ce <NaviTask+0x3e>
			}
			else
			{
				pitch_stop;
 80042c6:	2100      	movs	r1, #0
 80042c8:	4835      	ldr	r0, [pc, #212]	; (80043a0 <NaviTask+0x110>)
 80042ca:	f7fc ff5e 	bl	800118a <WriteBDC>
			}
		}

		if(!load_start && !set_pick_enc && !reload)
 80042ce:	4b35      	ldr	r3, [pc, #212]	; (80043a4 <NaviTask+0x114>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d115      	bne.n	8004302 <NaviTask+0x72>
 80042d6:	4b34      	ldr	r3, [pc, #208]	; (80043a8 <NaviTask+0x118>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d111      	bne.n	8004302 <NaviTask+0x72>
 80042de:	4b33      	ldr	r3, [pc, #204]	; (80043ac <NaviTask+0x11c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10d      	bne.n	8004302 <NaviTask+0x72>
			pick_manual(ps4.joyR_y * 14000);
 80042e6:	4b2c      	ldr	r3, [pc, #176]	; (8004398 <NaviTask+0x108>)
 80042e8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80042ec:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80043b0 <NaviTask+0x120>
 80042f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042f8:	ee17 1a90 	vmov	r1, s15
 80042fc:	482d      	ldr	r0, [pc, #180]	; (80043b4 <NaviTask+0x124>)
 80042fe:	f7fc ff44 	bl	800118a <WriteBDC>

		enq();
 8004302:	f007 fb99 	bl	800ba38 <enq>
		pick_enc = QEIRead(QEI1);
 8004306:	2001      	movs	r0, #1
 8004308:	f7fd fce0 	bl	8001ccc <QEIRead>
 800430c:	4603      	mov	r3, r0
 800430e:	4a2a      	ldr	r2, [pc, #168]	; (80043b8 <NaviTask+0x128>)
 8004310:	6013      	str	r3, [r2, #0]

		VESCPDC(vesc_duty, &vesc1);
 8004312:	4b2a      	ldr	r3, [pc, #168]	; (80043bc <NaviTask+0x12c>)
 8004314:	edd3 7a00 	vldr	s15, [r3]
 8004318:	4829      	ldr	r0, [pc, #164]	; (80043c0 <NaviTask+0x130>)
 800431a:	eeb0 0a67 	vmov.f32	s0, s15
 800431e:	f00a faa7 	bl	800e870 <VESCPDC>
		VESCPDC(vesc_duty, &vesc2);
 8004322:	4b26      	ldr	r3, [pc, #152]	; (80043bc <NaviTask+0x12c>)
 8004324:	edd3 7a00 	vldr	s15, [r3]
 8004328:	4826      	ldr	r0, [pc, #152]	; (80043c4 <NaviTask+0x134>)
 800432a:	eeb0 0a67 	vmov.f32	s0, s15
 800432e:	f00a fa9f 	bl	800e870 <VESCPDC>

		if(!pp.pp_start && !vel_adjust)
 8004332:	4b25      	ldr	r3, [pc, #148]	; (80043c8 <NaviTask+0x138>)
 8004334:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d108      	bne.n	8004354 <NaviTask+0xc4>
 8004342:	4b22      	ldr	r3, [pc, #136]	; (80043cc <NaviTask+0x13c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d104      	bne.n	8004354 <NaviTask+0xc4>
//			if (ps4.button == R1) {
//				while (ps4.button == R1);
//				moveSpeed--;
//				setSpeedMODN(moveSpeed);
//			}
			realMODN(&ps4, &rns);
 800434a:	4921      	ldr	r1, [pc, #132]	; (80043d0 <NaviTask+0x140>)
 800434c:	4812      	ldr	r0, [pc, #72]	; (8004398 <NaviTask+0x108>)
 800434e:	f000 f987 	bl	8004660 <realMODN>
 8004352:	e01e      	b.n	8004392 <NaviTask+0x102>
		}
		else if(pp.pp_start)
 8004354:	4b1c      	ldr	r3, [pc, #112]	; (80043c8 <NaviTask+0x138>)
 8004356:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d099      	beq.n	8004298 <NaviTask+0x8>
			RNSVelocity(pp.v1, pp.v2, pp.v3, pp.v4, &rns);
 8004364:	4b18      	ldr	r3, [pc, #96]	; (80043c8 <NaviTask+0x138>)
 8004366:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 800436a:	4b17      	ldr	r3, [pc, #92]	; (80043c8 <NaviTask+0x138>)
 800436c:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8004370:	4b15      	ldr	r3, [pc, #84]	; (80043c8 <NaviTask+0x138>)
 8004372:	edd3 6abc 	vldr	s13, [r3, #752]	; 0x2f0
 8004376:	4b14      	ldr	r3, [pc, #80]	; (80043c8 <NaviTask+0x138>)
 8004378:	ed93 6abd 	vldr	s12, [r3, #756]	; 0x2f4
 800437c:	4814      	ldr	r0, [pc, #80]	; (80043d0 <NaviTask+0x140>)
 800437e:	eef0 1a46 	vmov.f32	s3, s12
 8004382:	eeb0 1a66 	vmov.f32	s2, s13
 8004386:	eef0 0a47 	vmov.f32	s1, s14
 800438a:	eeb0 0a67 	vmov.f32	s0, s15
 800438e:	f005 f8b7 	bl	8009500 <RNSVelocity>
		if(!set_pitch)
 8004392:	e781      	b.n	8004298 <NaviTask+0x8>
 8004394:	20009ab4 	.word	0x20009ab4
 8004398:	2000a3f0 	.word	0x2000a3f0
 800439c:	ffffb1e1 	.word	0xffffb1e1
 80043a0:	20007108 	.word	0x20007108
 80043a4:	20007808 	.word	0x20007808
 80043a8:	20007bf0 	.word	0x20007bf0
 80043ac:	20007c0c 	.word	0x20007c0c
 80043b0:	465ac000 	.word	0x465ac000
 80043b4:	20007bcc 	.word	0x20007bcc
 80043b8:	200070a4 	.word	0x200070a4
 80043bc:	20007840 	.word	0x20007840
 80043c0:	20006fd8 	.word	0x20006fd8
 80043c4:	20009dd0 	.word	0x20009dd0
 80043c8:	20007188 	.word	0x20007188
 80043cc:	20009490 	.word	0x20009490
 80043d0:	20009370 	.word	0x20009370

080043d4 <CheckingTask>:

	}
}

void CheckingTask(void *argument)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
	while (1)
	{
		Checking();
 80043dc:	f007 fab4 	bl	800b948 <Checking>

		if(In_LS_Shot_1 && In_LS_Shot_2)
 80043e0:	2108      	movs	r1, #8
 80043e2:	482c      	ldr	r0, [pc, #176]	; (8004494 <CheckingTask+0xc0>)
 80043e4:	f00e fb1e 	bl	8012a24 <HAL_GPIO_ReadPin>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10c      	bne.n	8004408 <CheckingTask+0x34>
 80043ee:	2110      	movs	r1, #16
 80043f0:	4828      	ldr	r0, [pc, #160]	; (8004494 <CheckingTask+0xc0>)
 80043f2:	f00e fb17 	bl	8012a24 <HAL_GPIO_ReadPin>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d105      	bne.n	8004408 <CheckingTask+0x34>
		{
			led4_on;
 80043fc:	4b26      	ldr	r3, [pc, #152]	; (8004498 <CheckingTask+0xc4>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004404:	641a      	str	r2, [r3, #64]	; 0x40
 8004406:	e003      	b.n	8004410 <CheckingTask+0x3c>
		}
		else
		{
			led4_off;
 8004408:	4b23      	ldr	r3, [pc, #140]	; (8004498 <CheckingTask+0xc4>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2200      	movs	r2, #0
 800440e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(In_LS_Left_1 && In_LS_Left_2)
 8004410:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004414:	481f      	ldr	r0, [pc, #124]	; (8004494 <CheckingTask+0xc0>)
 8004416:	f00e fb05 	bl	8012a24 <HAL_GPIO_ReadPin>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10d      	bne.n	800443c <CheckingTask+0x68>
 8004420:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004424:	481b      	ldr	r0, [pc, #108]	; (8004494 <CheckingTask+0xc0>)
 8004426:	f00e fafd 	bl	8012a24 <HAL_GPIO_ReadPin>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d105      	bne.n	800443c <CheckingTask+0x68>
		{
			led5_on;
 8004430:	4a1a      	ldr	r2, [pc, #104]	; (800449c <CheckingTask+0xc8>)
 8004432:	7e13      	ldrb	r3, [r2, #24]
 8004434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004438:	7613      	strb	r3, [r2, #24]
 800443a:	e004      	b.n	8004446 <CheckingTask+0x72>
		}
		else
		{
			led5_off;
 800443c:	4a17      	ldr	r2, [pc, #92]	; (800449c <CheckingTask+0xc8>)
 800443e:	7e13      	ldrb	r3, [r2, #24]
 8004440:	f36f 13c7 	bfc	r3, #7, #1
 8004444:	7613      	strb	r3, [r2, #24]
		}

		if(In_Load)
 8004446:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800444a:	4815      	ldr	r0, [pc, #84]	; (80044a0 <CheckingTask+0xcc>)
 800444c:	f00e faea 	bl	8012a24 <HAL_GPIO_ReadPin>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d105      	bne.n	8004462 <CheckingTask+0x8e>
		{
			led6_on;
 8004456:	4a11      	ldr	r2, [pc, #68]	; (800449c <CheckingTask+0xc8>)
 8004458:	7e13      	ldrb	r3, [r2, #24]
 800445a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800445e:	7613      	strb	r3, [r2, #24]
 8004460:	e004      	b.n	800446c <CheckingTask+0x98>
		}
		else
		{
			led6_off;
 8004462:	4a0e      	ldr	r2, [pc, #56]	; (800449c <CheckingTask+0xc8>)
 8004464:	7e13      	ldrb	r3, [r2, #24]
 8004466:	f36f 1386 	bfc	r3, #6, #1
 800446a:	7613      	strb	r3, [r2, #24]
		}

		if(In_Pick)
 800446c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004470:	480b      	ldr	r0, [pc, #44]	; (80044a0 <CheckingTask+0xcc>)
 8004472:	f00e fad7 	bl	8012a24 <HAL_GPIO_ReadPin>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d105      	bne.n	8004488 <CheckingTask+0xb4>
		{
			led7_on;
 800447c:	4b06      	ldr	r3, [pc, #24]	; (8004498 <CheckingTask+0xc4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004484:	63da      	str	r2, [r3, #60]	; 0x3c
 8004486:	e7a9      	b.n	80043dc <CheckingTask+0x8>
		}
		else
		{
			led7_off;
 8004488:	4b03      	ldr	r3, [pc, #12]	; (8004498 <CheckingTask+0xc4>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2200      	movs	r2, #0
 800448e:	63da      	str	r2, [r3, #60]	; 0x3c
		Checking();
 8004490:	e7a4      	b.n	80043dc <CheckingTask+0x8>
 8004492:	bf00      	nop
 8004494:	40020c00 	.word	0x40020c00
 8004498:	2000618c 	.word	0x2000618c
 800449c:	200099f4 	.word	0x200099f4
 80044a0:	40021000 	.word	0x40021000

080044a4 <EmergencyTask>:
		}
	}
}

void EmergencyTask(void *argument) {
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08c      	sub	sp, #48	; 0x30
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]

	while (1) {

		if (ps4.button == TOUCH) {
 80044ac:	4b20      	ldr	r3, [pc, #128]	; (8004530 <EmergencyTask+0x8c>)
 80044ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044b4:	d1fa      	bne.n	80044ac <EmergencyTask+0x8>
//			led3 = 1;
			RNSStop(&rns);
 80044b6:	481f      	ldr	r0, [pc, #124]	; (8004534 <EmergencyTask+0x90>)
 80044b8:	f004 ff9e 	bl	80093f8 <RNSStop>
			PP_stop(&pp);
 80044bc:	481e      	ldr	r0, [pc, #120]	; (8004538 <EmergencyTask+0x94>)
 80044be:	f001 fc38 	bl	8005d32 <PP_stop>
			pitch_stop;
 80044c2:	2100      	movs	r1, #0
 80044c4:	481d      	ldr	r0, [pc, #116]	; (800453c <EmergencyTask+0x98>)
 80044c6:	f7fc fe60 	bl	800118a <WriteBDC>
			pick_stop;
 80044ca:	2100      	movs	r1, #0
 80044cc:	481c      	ldr	r0, [pc, #112]	; (8004540 <EmergencyTask+0x9c>)
 80044ce:	f7fc fe5c 	bl	800118a <WriteBDC>
			push_stop;
 80044d2:	2100      	movs	r1, #0
 80044d4:	481b      	ldr	r0, [pc, #108]	; (8004544 <EmergencyTask+0xa0>)
 80044d6:	f7fc fe58 	bl	800118a <WriteBDC>
			setPick(3000);
 80044da:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80044de:	f006 ff17 	bl	800b310 <setPick>
			open_servo;
 80044e2:	f640 01fc 	movw	r1, #2300	; 0x8fc
 80044e6:	4818      	ldr	r0, [pc, #96]	; (8004548 <EmergencyTask+0xa4>)
 80044e8:	f005 fc16 	bl	8009d18 <ServoSetPulse>
			osThreadTerminate(MainTaskHandle);
 80044ec:	4b17      	ldr	r3, [pc, #92]	; (800454c <EmergencyTask+0xa8>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f013 f951 	bl	8017798 <osThreadTerminate>
			osDelay(5);
 80044f6:	2005      	movs	r0, #5
 80044f8:	f013 f97b 	bl	80177f2 <osDelay>

			const osThreadAttr_t MainTask_attributes = { .name = "MainTask",
 80044fc:	f107 030c 	add.w	r3, r7, #12
 8004500:	2224      	movs	r2, #36	; 0x24
 8004502:	2100      	movs	r1, #0
 8004504:	4618      	mov	r0, r3
 8004506:	f015 ff01 	bl	801a30c <memset>
 800450a:	4b11      	ldr	r3, [pc, #68]	; (8004550 <EmergencyTask+0xac>)
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004512:	623b      	str	r3, [r7, #32]
 8004514:	2318      	movs	r3, #24
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
					.stack_size = 256 * 4, .priority =
							(osPriority_t) osPriorityNormal, };

			MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 8004518:	f107 030c 	add.w	r3, r7, #12
 800451c:	461a      	mov	r2, r3
 800451e:	2100      	movs	r1, #0
 8004520:	480c      	ldr	r0, [pc, #48]	; (8004554 <EmergencyTask+0xb0>)
 8004522:	f013 f8a7 	bl	8017674 <osThreadNew>
 8004526:	4603      	mov	r3, r0
 8004528:	4a08      	ldr	r2, [pc, #32]	; (800454c <EmergencyTask+0xa8>)
 800452a:	6013      	str	r3, [r2, #0]
		if (ps4.button == TOUCH) {
 800452c:	e7be      	b.n	80044ac <EmergencyTask+0x8>
 800452e:	bf00      	nop
 8004530:	2000a3f0 	.word	0x2000a3f0
 8004534:	20009370 	.word	0x20009370
 8004538:	20007188 	.word	0x20007188
 800453c:	20007108 	.word	0x20007108
 8004540:	20007bcc 	.word	0x20007bcc
 8004544:	20009acc 	.word	0x20009acc
 8004548:	20007d28 	.word	0x20007d28
 800454c:	20007d24 	.word	0x20007d24
 8004550:	08020198 	.word	0x08020198
 8004554:	08004199 	.word	0x08004199

08004558 <HAL_UART_RxCpltCallback>:
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
	if (huart == IMU.huartx) {
 8004560:	4b0a      	ldr	r3, [pc, #40]	; (800458c <HAL_UART_RxCpltCallback+0x34>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	429a      	cmp	r2, r3
 8004568:	d102      	bne.n	8004570 <HAL_UART_RxCpltCallback+0x18>
		R6091U_Handler(&IMU);
 800456a:	4808      	ldr	r0, [pc, #32]	; (800458c <HAL_UART_RxCpltCallback+0x34>)
 800456c:	f004 fe1a 	bl	80091a4 <R6091U_Handler>
	}

	if(huart == lidar.lidar_UART)
 8004570:	4b07      	ldr	r3, [pc, #28]	; (8004590 <HAL_UART_RxCpltCallback+0x38>)
 8004572:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	429a      	cmp	r2, r3
 800457a:	d102      	bne.n	8004582 <HAL_UART_RxCpltCallback+0x2a>
	{
		ObstacleHandler(&lidar);
 800457c:	4804      	ldr	r0, [pc, #16]	; (8004590 <HAL_UART_RxCpltCallback+0x38>)
 800457e:	f00c f96d 	bl	801085c <ObstacleHandler>
	}
}
 8004582:	bf00      	nop
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	2000712c 	.word	0x2000712c
 8004590:	20009498 	.word	0x20009498

08004594 <Error_Handler>:

/**
 * @brief  This function is executed in case of errorYaw occurrence.
 */
void Error_Handler(void) {
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0

}
 8004598:	bf00      	nop
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	0000      	movs	r0, r0
 80045a4:	0000      	movs	r0, r0
	...

080045a8 <MODNInit>:
 * 						  								gain added to four wheels based on the speed
 * Function Return		: NONE
 * Function Example		: void MODNInit(MODN_FWD_OMNI, 3.0, 0.5, 2.0, 0.1);
 */
void MODNInit(RobotBaseType_t base, float speed, float turnSpeed, float angleTol, float imuGain)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	4603      	mov	r3, r0
 80045b0:	ed87 0a04 	vstr	s0, [r7, #16]
 80045b4:	edc7 0a03 	vstr	s1, [r7, #12]
 80045b8:	ed87 1a02 	vstr	s2, [r7, #8]
 80045bc:	edc7 1a01 	vstr	s3, [r7, #4]
 80045c0:	75fb      	strb	r3, [r7, #23]
	MODN.base = base;
 80045c2:	4a23      	ldr	r2, [pc, #140]	; (8004650 <MODNInit+0xa8>)
 80045c4:	7dfb      	ldrb	r3, [r7, #23]
 80045c6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	MODN.speed = speed;
 80045ca:	4a21      	ldr	r2, [pc, #132]	; (8004650 <MODNInit+0xa8>)
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	61d3      	str	r3, [r2, #28]
	MODN.d	= turnSpeed;
 80045d0:	4a1f      	ldr	r2, [pc, #124]	; (8004650 <MODNInit+0xa8>)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6213      	str	r3, [r2, #32]
	MODN.radTol = angleTol/180.0*3.14159265359;
 80045d6:	68b8      	ldr	r0, [r7, #8]
 80045d8:	f7fb ffb6 	bl	8000548 <__aeabi_f2d>
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	4b1c      	ldr	r3, [pc, #112]	; (8004654 <MODNInit+0xac>)
 80045e2:	f7fc f933 	bl	800084c <__aeabi_ddiv>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4610      	mov	r0, r2
 80045ec:	4619      	mov	r1, r3
 80045ee:	a316      	add	r3, pc, #88	; (adr r3, 8004648 <MODNInit+0xa0>)
 80045f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f4:	f7fc f800 	bl	80005f8 <__aeabi_dmul>
 80045f8:	4602      	mov	r2, r0
 80045fa:	460b      	mov	r3, r1
 80045fc:	4610      	mov	r0, r2
 80045fe:	4619      	mov	r1, r3
 8004600:	f7fc faf2 	bl	8000be8 <__aeabi_d2f>
 8004604:	4603      	mov	r3, r0
 8004606:	4a12      	ldr	r2, [pc, #72]	; (8004650 <MODNInit+0xa8>)
 8004608:	62d3      	str	r3, [r2, #44]	; 0x2c
	MODN.imuGain = speed*imuGain/MODN.radTol;
 800460a:	ed97 7a04 	vldr	s14, [r7, #16]
 800460e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004612:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004616:	4b0e      	ldr	r3, [pc, #56]	; (8004650 <MODNInit+0xa8>)
 8004618:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800461c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004620:	4b0b      	ldr	r3, [pc, #44]	; (8004650 <MODNInit+0xa8>)
 8004622:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	MODN.radTarget = 0.0;
 8004626:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <MODNInit+0xa8>)
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	639a      	str	r2, [r3, #56]	; 0x38
	MODN.orientation = 0;
 800462e:	4b08      	ldr	r3, [pc, #32]	; (8004650 <MODNInit+0xa8>)
 8004630:	2200      	movs	r2, #0
 8004632:	641a      	str	r2, [r3, #64]	; 0x40
	MODN.real_x_vel = &(MODN.x_vel);
 8004634:	4b06      	ldr	r3, [pc, #24]	; (8004650 <MODNInit+0xa8>)
 8004636:	4a06      	ldr	r2, [pc, #24]	; (8004650 <MODNInit+0xa8>)
 8004638:	645a      	str	r2, [r3, #68]	; 0x44
	MODN.real_y_vel = &(MODN.y_vel);
 800463a:	4b05      	ldr	r3, [pc, #20]	; (8004650 <MODNInit+0xa8>)
 800463c:	4a06      	ldr	r2, [pc, #24]	; (8004658 <MODNInit+0xb0>)
 800463e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004640:	bf00      	nop
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	54442eea 	.word	0x54442eea
 800464c:	400921fb 	.word	0x400921fb
 8004650:	20006f48 	.word	0x20006f48
 8004654:	40668000 	.word	0x40668000
 8004658:	20006f4c 	.word	0x20006f4c
 800465c:	00000000 	.word	0x00000000

08004660 <realMODN>:
 * Function Return		: NONE
 * Function Example		: realMODN(ps4, &rns);
 */

void realMODN(PSxBT_t *psx, RNS_interface_t* rns)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	ed2d 8b02 	vpush	{d8}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
	MODN.x_vel = -(psx->joyL_x) * MODN.speed;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004674:	eeb1 7a67 	vneg.f32	s14, s15
 8004678:	4bc5      	ldr	r3, [pc, #788]	; (8004990 <realMODN+0x330>)
 800467a:	edd3 7a07 	vldr	s15, [r3, #28]
 800467e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004682:	4bc3      	ldr	r3, [pc, #780]	; (8004990 <realMODN+0x330>)
 8004684:	edc3 7a00 	vstr	s15, [r3]
	MODN.y_vel =  (psx->joyL_y) * MODN.speed;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800468e:	4bc0      	ldr	r3, [pc, #768]	; (8004990 <realMODN+0x330>)
 8004690:	edd3 7a07 	vldr	s15, [r3, #28]
 8004694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004698:	4bbd      	ldr	r3, [pc, #756]	; (8004990 <realMODN+0x330>)
 800469a:	edc3 7a01 	vstr	s15, [r3, #4]
	MODN.w_vel = ((psx->joyR_2) - (psx->joyL_2))* MODN.speed;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80046aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046ae:	4bb8      	ldr	r3, [pc, #736]	; (8004990 <realMODN+0x330>)
 80046b0:	edd3 7a07 	vldr	s15, [r3, #28]
 80046b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b8:	4bb5      	ldr	r3, [pc, #724]	; (8004990 <realMODN+0x330>)
 80046ba:	edc3 7a02 	vstr	s15, [r3, #8]
	if(MODN.x_vel==0.0 && MODN.y_vel==0.0 && MODN.w_vel==0.0){
 80046be:	4bb4      	ldr	r3, [pc, #720]	; (8004990 <realMODN+0x330>)
 80046c0:	edd3 7a00 	vldr	s15, [r3]
 80046c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046cc:	d119      	bne.n	8004702 <realMODN+0xa2>
 80046ce:	4bb0      	ldr	r3, [pc, #704]	; (8004990 <realMODN+0x330>)
 80046d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80046d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046dc:	d111      	bne.n	8004702 <realMODN+0xa2>
 80046de:	4bac      	ldr	r3, [pc, #688]	; (8004990 <realMODN+0x330>)
 80046e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80046e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ec:	d109      	bne.n	8004702 <realMODN+0xa2>
		if(rns->RNS_data.common_instruction != RNS_BUSY)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	f000 8225 	beq.w	8004b44 <realMODN+0x4e4>
			RNSStop(rns);
 80046fa:	6838      	ldr	r0, [r7, #0]
 80046fc:	f004 fe7c 	bl	80093f8 <RNSStop>
		if(rns->RNS_data.common_instruction != RNS_BUSY)
 8004700:	e220      	b.n	8004b44 <realMODN+0x4e4>
	}else{
//		RNSEnquire(RNS_COORDINATE_X_Y_Z_Zrad, rns);
//		float realZrad = rns->enq.enq_buffer[3].data;
		float realZrad = pp.real_z_rad;
 8004702:	4ba4      	ldr	r3, [pc, #656]	; (8004994 <realMODN+0x334>)
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	60fb      	str	r3, [r7, #12]

		if(MODN.base == MODN_FWD_OMNI) {
 8004708:	4ba1      	ldr	r3, [pc, #644]	; (8004990 <realMODN+0x330>)
 800470a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800470e:	2b00      	cmp	r3, #0
 8004710:	f040 8142 	bne.w	8004998 <realMODN+0x338>
			MODN.vel1 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) + MODN.w_vel*MODN.d;
 8004714:	4b9e      	ldr	r3, [pc, #632]	; (8004990 <realMODN+0x330>)
 8004716:	ed93 8a00 	vldr	s16, [r3]
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f7fb ff14 	bl	8000548 <__aeabi_f2d>
 8004720:	4602      	mov	r2, r0
 8004722:	460b      	mov	r3, r1
 8004724:	a196      	add	r1, pc, #600	; (adr r1, 8004980 <realMODN+0x320>)
 8004726:	e9d1 0100 	ldrd	r0, r1, [r1]
 800472a:	f7fb fdad 	bl	8000288 <__aeabi_dsub>
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	4610      	mov	r0, r2
 8004734:	4619      	mov	r1, r3
 8004736:	f7fc fa57 	bl	8000be8 <__aeabi_d2f>
 800473a:	4603      	mov	r3, r0
 800473c:	ee00 3a10 	vmov	s0, r3
 8004740:	f01a fb8a 	bl	801ee58 <cosf>
 8004744:	eef0 7a40 	vmov.f32	s15, s0
 8004748:	ee28 8a27 	vmul.f32	s16, s16, s15
 800474c:	4b90      	ldr	r3, [pc, #576]	; (8004990 <realMODN+0x330>)
 800474e:	edd3 8a01 	vldr	s17, [r3, #4]
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f7fb fef8 	bl	8000548 <__aeabi_f2d>
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	a188      	add	r1, pc, #544	; (adr r1, 8004980 <realMODN+0x320>)
 800475e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004762:	f7fb fd91 	bl	8000288 <__aeabi_dsub>
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	4610      	mov	r0, r2
 800476c:	4619      	mov	r1, r3
 800476e:	f7fc fa3b 	bl	8000be8 <__aeabi_d2f>
 8004772:	4603      	mov	r3, r0
 8004774:	ee00 3a10 	vmov	s0, r3
 8004778:	f01a fbb6 	bl	801eee8 <sinf>
 800477c:	eef0 7a40 	vmov.f32	s15, s0
 8004780:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004784:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004788:	4b81      	ldr	r3, [pc, #516]	; (8004990 <realMODN+0x330>)
 800478a:	edd3 6a02 	vldr	s13, [r3, #8]
 800478e:	4b80      	ldr	r3, [pc, #512]	; (8004990 <realMODN+0x330>)
 8004790:	edd3 7a08 	vldr	s15, [r3, #32]
 8004794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800479c:	4b7c      	ldr	r3, [pc, #496]	; (8004990 <realMODN+0x330>)
 800479e:	edc3 7a03 	vstr	s15, [r3, #12]
			MODN.vel2 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) - MODN.w_vel*MODN.d;
 80047a2:	4b7b      	ldr	r3, [pc, #492]	; (8004990 <realMODN+0x330>)
 80047a4:	ed93 8a00 	vldr	s16, [r3]
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f7fb fecd 	bl	8000548 <__aeabi_f2d>
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	a175      	add	r1, pc, #468	; (adr r1, 8004988 <realMODN+0x328>)
 80047b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047b8:	f7fb fd66 	bl	8000288 <__aeabi_dsub>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4610      	mov	r0, r2
 80047c2:	4619      	mov	r1, r3
 80047c4:	f7fc fa10 	bl	8000be8 <__aeabi_d2f>
 80047c8:	4603      	mov	r3, r0
 80047ca:	ee00 3a10 	vmov	s0, r3
 80047ce:	f01a fb43 	bl	801ee58 <cosf>
 80047d2:	eef0 7a40 	vmov.f32	s15, s0
 80047d6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80047da:	4b6d      	ldr	r3, [pc, #436]	; (8004990 <realMODN+0x330>)
 80047dc:	edd3 8a01 	vldr	s17, [r3, #4]
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f7fb feb1 	bl	8000548 <__aeabi_f2d>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	a167      	add	r1, pc, #412	; (adr r1, 8004988 <realMODN+0x328>)
 80047ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047f0:	f7fb fd4a 	bl	8000288 <__aeabi_dsub>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4610      	mov	r0, r2
 80047fa:	4619      	mov	r1, r3
 80047fc:	f7fc f9f4 	bl	8000be8 <__aeabi_d2f>
 8004800:	4603      	mov	r3, r0
 8004802:	ee00 3a10 	vmov	s0, r3
 8004806:	f01a fb6f 	bl	801eee8 <sinf>
 800480a:	eef0 7a40 	vmov.f32	s15, s0
 800480e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004812:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004816:	4b5e      	ldr	r3, [pc, #376]	; (8004990 <realMODN+0x330>)
 8004818:	edd3 6a02 	vldr	s13, [r3, #8]
 800481c:	4b5c      	ldr	r3, [pc, #368]	; (8004990 <realMODN+0x330>)
 800481e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004822:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004826:	ee77 7a67 	vsub.f32	s15, s14, s15
 800482a:	4b59      	ldr	r3, [pc, #356]	; (8004990 <realMODN+0x330>)
 800482c:	edc3 7a04 	vstr	s15, [r3, #16]
			MODN.vel3 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) + MODN.w_vel*MODN.d;
 8004830:	4b57      	ldr	r3, [pc, #348]	; (8004990 <realMODN+0x330>)
 8004832:	ed93 8a00 	vldr	s16, [r3]
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f7fb fe86 	bl	8000548 <__aeabi_f2d>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	a151      	add	r1, pc, #324	; (adr r1, 8004988 <realMODN+0x328>)
 8004842:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004846:	f7fb fd1f 	bl	8000288 <__aeabi_dsub>
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	4610      	mov	r0, r2
 8004850:	4619      	mov	r1, r3
 8004852:	f7fc f9c9 	bl	8000be8 <__aeabi_d2f>
 8004856:	4603      	mov	r3, r0
 8004858:	ee00 3a10 	vmov	s0, r3
 800485c:	f01a fafc 	bl	801ee58 <cosf>
 8004860:	eef0 7a40 	vmov.f32	s15, s0
 8004864:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004868:	4b49      	ldr	r3, [pc, #292]	; (8004990 <realMODN+0x330>)
 800486a:	edd3 8a01 	vldr	s17, [r3, #4]
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f7fb fe6a 	bl	8000548 <__aeabi_f2d>
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	a143      	add	r1, pc, #268	; (adr r1, 8004988 <realMODN+0x328>)
 800487a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800487e:	f7fb fd03 	bl	8000288 <__aeabi_dsub>
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	4610      	mov	r0, r2
 8004888:	4619      	mov	r1, r3
 800488a:	f7fc f9ad 	bl	8000be8 <__aeabi_d2f>
 800488e:	4603      	mov	r3, r0
 8004890:	ee00 3a10 	vmov	s0, r3
 8004894:	f01a fb28 	bl	801eee8 <sinf>
 8004898:	eef0 7a40 	vmov.f32	s15, s0
 800489c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80048a0:	ee38 7a27 	vadd.f32	s14, s16, s15
 80048a4:	4b3a      	ldr	r3, [pc, #232]	; (8004990 <realMODN+0x330>)
 80048a6:	edd3 6a02 	vldr	s13, [r3, #8]
 80048aa:	4b39      	ldr	r3, [pc, #228]	; (8004990 <realMODN+0x330>)
 80048ac:	edd3 7a08 	vldr	s15, [r3, #32]
 80048b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048b8:	4b35      	ldr	r3, [pc, #212]	; (8004990 <realMODN+0x330>)
 80048ba:	edc3 7a05 	vstr	s15, [r3, #20]
			MODN.vel4 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) - MODN.w_vel*MODN.d;
 80048be:	4b34      	ldr	r3, [pc, #208]	; (8004990 <realMODN+0x330>)
 80048c0:	ed93 8a00 	vldr	s16, [r3]
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f7fb fe3f 	bl	8000548 <__aeabi_f2d>
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	a12c      	add	r1, pc, #176	; (adr r1, 8004980 <realMODN+0x320>)
 80048d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048d4:	f7fb fcd8 	bl	8000288 <__aeabi_dsub>
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4610      	mov	r0, r2
 80048de:	4619      	mov	r1, r3
 80048e0:	f7fc f982 	bl	8000be8 <__aeabi_d2f>
 80048e4:	4603      	mov	r3, r0
 80048e6:	ee00 3a10 	vmov	s0, r3
 80048ea:	f01a fab5 	bl	801ee58 <cosf>
 80048ee:	eef0 7a40 	vmov.f32	s15, s0
 80048f2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80048f6:	4b26      	ldr	r3, [pc, #152]	; (8004990 <realMODN+0x330>)
 80048f8:	edd3 8a01 	vldr	s17, [r3, #4]
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f7fb fe23 	bl	8000548 <__aeabi_f2d>
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	a11e      	add	r1, pc, #120	; (adr r1, 8004980 <realMODN+0x320>)
 8004908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800490c:	f7fb fcbc 	bl	8000288 <__aeabi_dsub>
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	4610      	mov	r0, r2
 8004916:	4619      	mov	r1, r3
 8004918:	f7fc f966 	bl	8000be8 <__aeabi_d2f>
 800491c:	4603      	mov	r3, r0
 800491e:	ee00 3a10 	vmov	s0, r3
 8004922:	f01a fae1 	bl	801eee8 <sinf>
 8004926:	eef0 7a40 	vmov.f32	s15, s0
 800492a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800492e:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004932:	4b17      	ldr	r3, [pc, #92]	; (8004990 <realMODN+0x330>)
 8004934:	edd3 6a02 	vldr	s13, [r3, #8]
 8004938:	4b15      	ldr	r3, [pc, #84]	; (8004990 <realMODN+0x330>)
 800493a:	edd3 7a08 	vldr	s15, [r3, #32]
 800493e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004942:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004946:	4b12      	ldr	r3, [pc, #72]	; (8004990 <realMODN+0x330>)
 8004948:	edc3 7a06 	vstr	s15, [r3, #24]
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, MODN.vel4, rns);
 800494c:	4b10      	ldr	r3, [pc, #64]	; (8004990 <realMODN+0x330>)
 800494e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004952:	4b0f      	ldr	r3, [pc, #60]	; (8004990 <realMODN+0x330>)
 8004954:	ed93 7a04 	vldr	s14, [r3, #16]
 8004958:	4b0d      	ldr	r3, [pc, #52]	; (8004990 <realMODN+0x330>)
 800495a:	edd3 6a05 	vldr	s13, [r3, #20]
 800495e:	4b0c      	ldr	r3, [pc, #48]	; (8004990 <realMODN+0x330>)
 8004960:	ed93 6a06 	vldr	s12, [r3, #24]
 8004964:	6838      	ldr	r0, [r7, #0]
 8004966:	eef0 1a46 	vmov.f32	s3, s12
 800496a:	eeb0 1a66 	vmov.f32	s2, s13
 800496e:	eef0 0a47 	vmov.f32	s1, s14
 8004972:	eeb0 0a67 	vmov.f32	s0, s15
 8004976:	f004 fdc3 	bl	8009500 <RNSVelocity>
			MODN.vel1 = MODN.y_vel*sinf(2.0944-realZrad) + MODN.x_vel*cosf(2.0944-realZrad) + MODN.w_vel*MODN.d;
			MODN.vel2 = MODN.y_vel*sinf(1.0472-realZrad) + MODN.x_vel*cosf(1.0472-realZrad) - MODN.w_vel*MODN.d;
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
		}
	}
}
 800497a:	e0e3      	b.n	8004b44 <realMODN+0x4e4>
 800497c:	f3af 8000 	nop.w
 8004980:	2e48e8a7 	.word	0x2e48e8a7
 8004984:	3fe921ff 	.word	0x3fe921ff
 8004988:	62b6ae7d 	.word	0x62b6ae7d
 800498c:	4002d97f 	.word	0x4002d97f
 8004990:	20006f48 	.word	0x20006f48
 8004994:	20007188 	.word	0x20007188
		else if (MODN.base == MODN_TRI_OMNI){
 8004998:	4b71      	ldr	r3, [pc, #452]	; (8004b60 <realMODN+0x500>)
 800499a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800499e:	2b01      	cmp	r3, #1
 80049a0:	f040 80d0 	bne.w	8004b44 <realMODN+0x4e4>
			MODN.vel3 = MODN.y_vel*sinf(-realZrad) 		 + MODN.x_vel*cosf(-realZrad)  	    + MODN.w_vel*MODN.d;
 80049a4:	4b6e      	ldr	r3, [pc, #440]	; (8004b60 <realMODN+0x500>)
 80049a6:	ed93 8a01 	vldr	s16, [r3, #4]
 80049aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80049ae:	eef1 7a67 	vneg.f32	s15, s15
 80049b2:	eeb0 0a67 	vmov.f32	s0, s15
 80049b6:	f01a fa97 	bl	801eee8 <sinf>
 80049ba:	eef0 7a40 	vmov.f32	s15, s0
 80049be:	ee28 8a27 	vmul.f32	s16, s16, s15
 80049c2:	4b67      	ldr	r3, [pc, #412]	; (8004b60 <realMODN+0x500>)
 80049c4:	edd3 8a00 	vldr	s17, [r3]
 80049c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80049cc:	eef1 7a67 	vneg.f32	s15, s15
 80049d0:	eeb0 0a67 	vmov.f32	s0, s15
 80049d4:	f01a fa40 	bl	801ee58 <cosf>
 80049d8:	eef0 7a40 	vmov.f32	s15, s0
 80049dc:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80049e0:	ee38 7a27 	vadd.f32	s14, s16, s15
 80049e4:	4b5e      	ldr	r3, [pc, #376]	; (8004b60 <realMODN+0x500>)
 80049e6:	edd3 6a02 	vldr	s13, [r3, #8]
 80049ea:	4b5d      	ldr	r3, [pc, #372]	; (8004b60 <realMODN+0x500>)
 80049ec:	edd3 7a08 	vldr	s15, [r3, #32]
 80049f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049f8:	4b59      	ldr	r3, [pc, #356]	; (8004b60 <realMODN+0x500>)
 80049fa:	edc3 7a05 	vstr	s15, [r3, #20]
			MODN.vel1 = MODN.y_vel*sinf(2.0944-realZrad) + MODN.x_vel*cosf(2.0944-realZrad) + MODN.w_vel*MODN.d;
 80049fe:	4b58      	ldr	r3, [pc, #352]	; (8004b60 <realMODN+0x500>)
 8004a00:	ed93 8a01 	vldr	s16, [r3, #4]
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f7fb fd9f 	bl	8000548 <__aeabi_f2d>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	a150      	add	r1, pc, #320	; (adr r1, 8004b50 <realMODN+0x4f0>)
 8004a10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a14:	f7fb fc38 	bl	8000288 <__aeabi_dsub>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	4619      	mov	r1, r3
 8004a20:	f7fc f8e2 	bl	8000be8 <__aeabi_d2f>
 8004a24:	4603      	mov	r3, r0
 8004a26:	ee00 3a10 	vmov	s0, r3
 8004a2a:	f01a fa5d 	bl	801eee8 <sinf>
 8004a2e:	eef0 7a40 	vmov.f32	s15, s0
 8004a32:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004a36:	4b4a      	ldr	r3, [pc, #296]	; (8004b60 <realMODN+0x500>)
 8004a38:	edd3 8a00 	vldr	s17, [r3]
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f7fb fd83 	bl	8000548 <__aeabi_f2d>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	a142      	add	r1, pc, #264	; (adr r1, 8004b50 <realMODN+0x4f0>)
 8004a48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a4c:	f7fb fc1c 	bl	8000288 <__aeabi_dsub>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4610      	mov	r0, r2
 8004a56:	4619      	mov	r1, r3
 8004a58:	f7fc f8c6 	bl	8000be8 <__aeabi_d2f>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	ee00 3a10 	vmov	s0, r3
 8004a62:	f01a f9f9 	bl	801ee58 <cosf>
 8004a66:	eef0 7a40 	vmov.f32	s15, s0
 8004a6a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004a6e:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004a72:	4b3b      	ldr	r3, [pc, #236]	; (8004b60 <realMODN+0x500>)
 8004a74:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a78:	4b39      	ldr	r3, [pc, #228]	; (8004b60 <realMODN+0x500>)
 8004a7a:	edd3 7a08 	vldr	s15, [r3, #32]
 8004a7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a86:	4b36      	ldr	r3, [pc, #216]	; (8004b60 <realMODN+0x500>)
 8004a88:	edc3 7a03 	vstr	s15, [r3, #12]
			MODN.vel2 = MODN.y_vel*sinf(1.0472-realZrad) + MODN.x_vel*cosf(1.0472-realZrad) - MODN.w_vel*MODN.d;
 8004a8c:	4b34      	ldr	r3, [pc, #208]	; (8004b60 <realMODN+0x500>)
 8004a8e:	ed93 8a01 	vldr	s16, [r3, #4]
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f7fb fd58 	bl	8000548 <__aeabi_f2d>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	a12e      	add	r1, pc, #184	; (adr r1, 8004b58 <realMODN+0x4f8>)
 8004a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004aa2:	f7fb fbf1 	bl	8000288 <__aeabi_dsub>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	4610      	mov	r0, r2
 8004aac:	4619      	mov	r1, r3
 8004aae:	f7fc f89b 	bl	8000be8 <__aeabi_d2f>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	ee00 3a10 	vmov	s0, r3
 8004ab8:	f01a fa16 	bl	801eee8 <sinf>
 8004abc:	eef0 7a40 	vmov.f32	s15, s0
 8004ac0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004ac4:	4b26      	ldr	r3, [pc, #152]	; (8004b60 <realMODN+0x500>)
 8004ac6:	edd3 8a00 	vldr	s17, [r3]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f7fb fd3c 	bl	8000548 <__aeabi_f2d>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	a120      	add	r1, pc, #128	; (adr r1, 8004b58 <realMODN+0x4f8>)
 8004ad6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ada:	f7fb fbd5 	bl	8000288 <__aeabi_dsub>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	f7fc f87f 	bl	8000be8 <__aeabi_d2f>
 8004aea:	4603      	mov	r3, r0
 8004aec:	ee00 3a10 	vmov	s0, r3
 8004af0:	f01a f9b2 	bl	801ee58 <cosf>
 8004af4:	eef0 7a40 	vmov.f32	s15, s0
 8004af8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004afc:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004b00:	4b17      	ldr	r3, [pc, #92]	; (8004b60 <realMODN+0x500>)
 8004b02:	edd3 6a02 	vldr	s13, [r3, #8]
 8004b06:	4b16      	ldr	r3, [pc, #88]	; (8004b60 <realMODN+0x500>)
 8004b08:	edd3 7a08 	vldr	s15, [r3, #32]
 8004b0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b14:	4b12      	ldr	r3, [pc, #72]	; (8004b60 <realMODN+0x500>)
 8004b16:	edc3 7a04 	vstr	s15, [r3, #16]
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
 8004b1a:	4b11      	ldr	r3, [pc, #68]	; (8004b60 <realMODN+0x500>)
 8004b1c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b20:	4b0f      	ldr	r3, [pc, #60]	; (8004b60 <realMODN+0x500>)
 8004b22:	ed93 7a04 	vldr	s14, [r3, #16]
 8004b26:	4b0e      	ldr	r3, [pc, #56]	; (8004b60 <realMODN+0x500>)
 8004b28:	edd3 6a05 	vldr	s13, [r3, #20]
 8004b2c:	6838      	ldr	r0, [r7, #0]
 8004b2e:	eddf 1a0d 	vldr	s3, [pc, #52]	; 8004b64 <realMODN+0x504>
 8004b32:	eeb0 1a66 	vmov.f32	s2, s13
 8004b36:	eef0 0a47 	vmov.f32	s1, s14
 8004b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8004b3e:	f004 fcdf 	bl	8009500 <RNSVelocity>
}
 8004b42:	e7ff      	b.n	8004b44 <realMODN+0x4e4>
 8004b44:	bf00      	nop
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	ecbd 8b02 	vpop	{d8}
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	c985f06f 	.word	0xc985f06f
 8004b54:	4000c154 	.word	0x4000c154
 8004b58:	c985f06f 	.word	0xc985f06f
 8004b5c:	3ff0c154 	.word	0x3ff0c154
 8004b60:	20006f48 	.word	0x20006f48
 8004b64:	00000000 	.word	0x00000000

08004b68 <decode_Odrive>:
		break;
	}

 * */
void decode_Odrive(Odrv_t* odrive)
{
 8004b68:	b5b0      	push	{r4, r5, r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
	float data=0;
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
	uint16_t id = Odrvmsg.RXmsg.StdId;
 8004b76:	4b72      	ldr	r3, [pc, #456]	; (8004d40 <decode_Odrive+0x1d8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	82fb      	strh	r3, [r7, #22]
	uint16_t mask = 0x01F;
 8004b7c:	231f      	movs	r3, #31
 8004b7e:	82bb      	strh	r3, [r7, #20]
	uint16_t command=id&mask;
 8004b80:	8afa      	ldrh	r2, [r7, #22]
 8004b82:	8abb      	ldrh	r3, [r7, #20]
 8004b84:	4013      	ands	r3, r2
 8004b86:	827b      	strh	r3, [r7, #18]
	if(command==GET_ENCODER_ESTIMATE){
 8004b88:	8a7b      	ldrh	r3, [r7, #18]
 8004b8a:	2b09      	cmp	r3, #9
 8004b8c:	d136      	bne.n	8004bfc <decode_Odrive+0x94>

		if(odrive->type==DENG_FOC)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d102      	bne.n	8004b9e <decode_Odrive+0x36>
			odrive->busy[TURN_COUNT_AND_VELOCITY]=0;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	749a      	strb	r2, [r3, #18]
 8004b9e:	4b68      	ldr	r3, [pc, #416]	; (8004d40 <decode_Odrive+0x1d8>)
 8004ba0:	69db      	ldr	r3, [r3, #28]

		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004ba2:	60fb      	str	r3, [r7, #12]
		odrive->feedback.encoder=data;
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	629a      	str	r2, [r3, #40]	; 0x28
 8004baa:	4b65      	ldr	r3, [pc, #404]	; (8004d40 <decode_Odrive+0x1d8>)
 8004bac:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004bae:	60fb      	str	r3, [r7, #12]
		odrive->feedback.round_per_second=data;
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	62da      	str	r2, [r3, #44]	; 0x2c
		odrive->feedback.velocity=odrive->feedback.round_per_second*M_PI*odrive->wheel_diameter;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fb fcc4 	bl	8000548 <__aeabi_f2d>
 8004bc0:	a35d      	add	r3, pc, #372	; (adr r3, 8004d38 <decode_Odrive+0x1d0>)
 8004bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc6:	f7fb fd17 	bl	80005f8 <__aeabi_dmul>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4614      	mov	r4, r2
 8004bd0:	461d      	mov	r5, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fb fcb6 	bl	8000548 <__aeabi_f2d>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	460b      	mov	r3, r1
 8004be0:	4620      	mov	r0, r4
 8004be2:	4629      	mov	r1, r5
 8004be4:	f7fb fd08 	bl	80005f8 <__aeabi_dmul>
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4610      	mov	r0, r2
 8004bee:	4619      	mov	r1, r3
 8004bf0:	f7fb fffa 	bl	8000be8 <__aeabi_d2f>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	625a      	str	r2, [r3, #36]	; 0x24
		odrive->feedback.shadow_count=data;
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
		odrive->feedback.cpr=data;
		odrive->busy[SHADOW_COUNT]=0;
	}
}
 8004bfa:	e097      	b.n	8004d2c <decode_Odrive+0x1c4>
	else if(command==HEARTBEAT){
 8004bfc:	8a7b      	ldrh	r3, [r7, #18]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d123      	bne.n	8004c4a <decode_Odrive+0xe2>
 8004c02:	4b4f      	ldr	r3, [pc, #316]	; (8004d40 <decode_Odrive+0x1d8>)
 8004c04:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004c06:	60fb      	str	r3, [r7, #12]
		odrive->feedback.error=data;
 8004c08:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c10:	ee17 2a90 	vmov	r2, s15
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	645a      	str	r2, [r3, #68]	; 0x44
		odrive->feedback.state=Odrvmsg.Data[4];
 8004c18:	4b49      	ldr	r3, [pc, #292]	; (8004d40 <decode_Odrive+0x1d8>)
 8004c1a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		odrive->feedback.traj_state = Odrvmsg.Data[7];
 8004c24:	4b46      	ldr	r3, [pc, #280]	; (8004d40 <decode_Odrive+0x1d8>)
 8004c26:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		if(odrive->feedback.traj_state == TRAJECTORY_DONE && odrive->turning == 1)//TRAJECTORY
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004c36:	2b80      	cmp	r3, #128	; 0x80
 8004c38:	d178      	bne.n	8004d2c <decode_Odrive+0x1c4>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	7c1b      	ldrb	r3, [r3, #16]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d174      	bne.n	8004d2c <decode_Odrive+0x1c4>
			odrive->turning = 0; // Done turning
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	741a      	strb	r2, [r3, #16]
}
 8004c48:	e070      	b.n	8004d2c <decode_Odrive+0x1c4>
	else if(command==GET_BUS_VOLTAGE){
 8004c4a:	8a7b      	ldrh	r3, [r7, #18]
 8004c4c:	2b17      	cmp	r3, #23
 8004c4e:	d109      	bne.n	8004c64 <decode_Odrive+0xfc>
 8004c50:	4b3b      	ldr	r3, [pc, #236]	; (8004d40 <decode_Odrive+0x1d8>)
 8004c52:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004c54:	60fb      	str	r3, [r7, #12]
		odrive->feedback.bus_voltage=data;
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	639a      	str	r2, [r3, #56]	; 0x38
		odrive->busy[BUS_VOLTAGE]=0;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	745a      	strb	r2, [r3, #17]
}
 8004c62:	e063      	b.n	8004d2c <decode_Odrive+0x1c4>
	else if(command==GET_SENSORLESS_ESTIMATES){
 8004c64:	8a7b      	ldrh	r3, [r7, #18]
 8004c66:	2b15      	cmp	r3, #21
 8004c68:	d10f      	bne.n	8004c8a <decode_Odrive+0x122>
 8004c6a:	4b35      	ldr	r3, [pc, #212]	; (8004d40 <decode_Odrive+0x1d8>)
 8004c6c:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004c6e:	60fb      	str	r3, [r7, #12]
		odrive->feedback.sensorless_estimates.position=data;
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c76:	4b32      	ldr	r3, [pc, #200]	; (8004d40 <decode_Odrive+0x1d8>)
 8004c78:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004c7a:	60fb      	str	r3, [r7, #12]
		odrive->feedback.sensorless_estimates.velocity=data;
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	661a      	str	r2, [r3, #96]	; 0x60
		odrive->busy[SENSORLESS_ESTIMATE]=0;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	75da      	strb	r2, [r3, #23]
}
 8004c88:	e050      	b.n	8004d2c <decode_Odrive+0x1c4>
	else if(command==GET_IQ){
 8004c8a:	8a7b      	ldrh	r3, [r7, #18]
 8004c8c:	2b14      	cmp	r3, #20
 8004c8e:	d10f      	bne.n	8004cb0 <decode_Odrive+0x148>
 8004c90:	4b2b      	ldr	r3, [pc, #172]	; (8004d40 <decode_Odrive+0x1d8>)
 8004c92:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004c94:	60fb      	str	r3, [r7, #12]
		odrive->feedback.Iq.iq_setpoint=data;
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	665a      	str	r2, [r3, #100]	; 0x64
 8004c9c:	4b28      	ldr	r3, [pc, #160]	; (8004d40 <decode_Odrive+0x1d8>)
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004ca0:	60fb      	str	r3, [r7, #12]
		odrive->feedback.Iq.iq_measured=data;
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	669a      	str	r2, [r3, #104]	; 0x68
		odrive->busy[IQ_VALUE]=0;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	755a      	strb	r2, [r3, #21]
}
 8004cae:	e03d      	b.n	8004d2c <decode_Odrive+0x1c4>
	else if(command==GET_MOTOR_ERROR){
 8004cb0:	8a7b      	ldrh	r3, [r7, #18]
 8004cb2:	2b03      	cmp	r3, #3
 8004cb4:	d128      	bne.n	8004d08 <decode_Odrive+0x1a0>
 8004cb6:	4b22      	ldr	r3, [pc, #136]	; (8004d40 <decode_Odrive+0x1d8>)
 8004cb8:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004cba:	60fb      	str	r3, [r7, #12]
		odrive->feedback.error_code=data;
 8004cbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cc4:	ee17 2a90 	vmov	r2, s15
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	671a      	str	r2, [r3, #112]	; 0x70
		strcat(odrive->feedback.error_msg, Odrive_Error_To_String(odrive->feedback.error_code));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 f836 	bl	8004d48 <Odrive_Error_To_String>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	f016 fb58 	bl	801b396 <strcat>
		strcat(odrive->feedback.error_msg, "\n");
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8004cec:	4620      	mov	r0, r4
 8004cee:	f7fb fa6f 	bl	80001d0 <strlen>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	4423      	add	r3, r4
 8004cf6:	4913      	ldr	r1, [pc, #76]	; (8004d44 <decode_Odrive+0x1dc>)
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	8013      	strh	r3, [r2, #0]
		odrive->busy[ODRIVE_ERROR_CODE]=0;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	759a      	strb	r2, [r3, #22]
}
 8004d06:	e011      	b.n	8004d2c <decode_Odrive+0x1c4>
	else if(command==GET_SHADOW_COUNT){
 8004d08:	8a7b      	ldrh	r3, [r7, #18]
 8004d0a:	2b0a      	cmp	r3, #10
 8004d0c:	d10e      	bne.n	8004d2c <decode_Odrive+0x1c4>
 8004d0e:	4b0c      	ldr	r3, [pc, #48]	; (8004d40 <decode_Odrive+0x1d8>)
 8004d10:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004d12:	60fb      	str	r3, [r7, #12]
		odrive->feedback.shadow_count=data;
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d1a:	4b09      	ldr	r3, [pc, #36]	; (8004d40 <decode_Odrive+0x1d8>)
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004d1e:	60fb      	str	r3, [r7, #12]
		odrive->feedback.cpr=data;
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	641a      	str	r2, [r3, #64]	; 0x40
		odrive->busy[SHADOW_COUNT]=0;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	751a      	strb	r2, [r3, #20]
}
 8004d2c:	bf00      	nop
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bdb0      	pop	{r4, r5, r7, pc}
 8004d34:	f3af 8000 	nop.w
 8004d38:	54442d18 	.word	0x54442d18
 8004d3c:	400921fb 	.word	0x400921fb
 8004d40:	20006d68 	.word	0x20006d68
 8004d44:	08020308 	.word	0x08020308

08004d48 <Odrive_Error_To_String>:
	memcpy(&TxBuffer[0],&vel_gains,4);
	memcpy(&TxBuffer[4],&vel_integrator_gains,4);
	OdriveSendCAN(odrive,SET_VEL_GAIN,TxBuffer);
}

const char* Odrive_Error_To_String(error_code fault) {
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
	switch (fault) {
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d56:	f000 80fd 	beq.w	8004f54 <Odrive_Error_To_String+0x20c>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d60:	f200 80fa 	bhi.w	8004f58 <Odrive_Error_To_String+0x210>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d6a:	f000 80f1 	beq.w	8004f50 <Odrive_Error_To_String+0x208>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d74:	f200 80f0 	bhi.w	8004f58 <Odrive_Error_To_String+0x210>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d7e:	f000 80e5 	beq.w	8004f4c <Odrive_Error_To_String+0x204>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d88:	f200 80e6 	bhi.w	8004f58 <Odrive_Error_To_String+0x210>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d92:	f000 80d9 	beq.w	8004f48 <Odrive_Error_To_String+0x200>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d9c:	f200 80dc 	bhi.w	8004f58 <Odrive_Error_To_String+0x210>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004da6:	f000 80cd 	beq.w	8004f44 <Odrive_Error_To_String+0x1fc>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004db0:	f200 80d2 	bhi.w	8004f58 <Odrive_Error_To_String+0x210>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dba:	f000 80c1 	beq.w	8004f40 <Odrive_Error_To_String+0x1f8>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc4:	f200 80c8 	bhi.w	8004f58 <Odrive_Error_To_String+0x210>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dce:	f000 80b5 	beq.w	8004f3c <Odrive_Error_To_String+0x1f4>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dd8:	f200 80be 	bhi.w	8004f58 <Odrive_Error_To_String+0x210>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004de2:	f000 80a9 	beq.w	8004f38 <Odrive_Error_To_String+0x1f0>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dec:	f200 80b4 	bhi.w	8004f58 <Odrive_Error_To_String+0x210>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df6:	f000 809d 	beq.w	8004f34 <Odrive_Error_To_String+0x1ec>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e00:	f200 80aa 	bhi.w	8004f58 <Odrive_Error_To_String+0x210>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0a:	f000 8091 	beq.w	8004f30 <Odrive_Error_To_String+0x1e8>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e14:	f200 80a0 	bhi.w	8004f58 <Odrive_Error_To_String+0x210>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e1e:	f000 8085 	beq.w	8004f2c <Odrive_Error_To_String+0x1e4>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e28:	f200 8096 	bhi.w	8004f58 <Odrive_Error_To_String+0x210>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e32:	d079      	beq.n	8004f28 <Odrive_Error_To_String+0x1e0>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e3a:	f200 808d 	bhi.w	8004f58 <Odrive_Error_To_String+0x210>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e44:	d06e      	beq.n	8004f24 <Odrive_Error_To_String+0x1dc>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e4c:	f200 8084 	bhi.w	8004f58 <Odrive_Error_To_String+0x210>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e56:	d063      	beq.n	8004f20 <Odrive_Error_To_String+0x1d8>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e5e:	d87b      	bhi.n	8004f58 <Odrive_Error_To_String+0x210>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b20      	cmp	r3, #32
 8004e64:	d848      	bhi.n	8004ef8 <Odrive_Error_To_String+0x1b0>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b20      	cmp	r3, #32
 8004e6a:	d875      	bhi.n	8004f58 <Odrive_Error_To_String+0x210>
 8004e6c:	a201      	add	r2, pc, #4	; (adr r2, 8004e74 <Odrive_Error_To_String+0x12c>)
 8004e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e72:	bf00      	nop
 8004e74:	08004f01 	.word	0x08004f01
 8004e78:	08004f05 	.word	0x08004f05
 8004e7c:	08004f09 	.word	0x08004f09
 8004e80:	08004f59 	.word	0x08004f59
 8004e84:	08004f0d 	.word	0x08004f0d
 8004e88:	08004f59 	.word	0x08004f59
 8004e8c:	08004f59 	.word	0x08004f59
 8004e90:	08004f59 	.word	0x08004f59
 8004e94:	08004f11 	.word	0x08004f11
 8004e98:	08004f59 	.word	0x08004f59
 8004e9c:	08004f59 	.word	0x08004f59
 8004ea0:	08004f59 	.word	0x08004f59
 8004ea4:	08004f59 	.word	0x08004f59
 8004ea8:	08004f59 	.word	0x08004f59
 8004eac:	08004f59 	.word	0x08004f59
 8004eb0:	08004f59 	.word	0x08004f59
 8004eb4:	08004f15 	.word	0x08004f15
 8004eb8:	08004f59 	.word	0x08004f59
 8004ebc:	08004f59 	.word	0x08004f59
 8004ec0:	08004f59 	.word	0x08004f59
 8004ec4:	08004f59 	.word	0x08004f59
 8004ec8:	08004f59 	.word	0x08004f59
 8004ecc:	08004f59 	.word	0x08004f59
 8004ed0:	08004f59 	.word	0x08004f59
 8004ed4:	08004f59 	.word	0x08004f59
 8004ed8:	08004f59 	.word	0x08004f59
 8004edc:	08004f59 	.word	0x08004f59
 8004ee0:	08004f59 	.word	0x08004f59
 8004ee4:	08004f59 	.word	0x08004f59
 8004ee8:	08004f59 	.word	0x08004f59
 8004eec:	08004f59 	.word	0x08004f59
 8004ef0:	08004f59 	.word	0x08004f59
 8004ef4:	08004f19 	.word	0x08004f19
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b40      	cmp	r3, #64	; 0x40
 8004efc:	d00e      	beq.n	8004f1c <Odrive_Error_To_String+0x1d4>
 8004efe:	e02b      	b.n	8004f58 <Odrive_Error_To_String+0x210>
	case NO_ERROR: return "NO_ERROR";
 8004f00:	4b19      	ldr	r3, [pc, #100]	; (8004f68 <Odrive_Error_To_String+0x220>)
 8004f02:	e02a      	b.n	8004f5a <Odrive_Error_To_String+0x212>
	case INITIALIZING: return "INITIALIZING";
 8004f04:	4b19      	ldr	r3, [pc, #100]	; (8004f6c <Odrive_Error_To_String+0x224>)
 8004f06:	e028      	b.n	8004f5a <Odrive_Error_To_String+0x212>
	case SYSTEM_LEVEL: return "SYSTEM_LEVEL";	//firmware bug / system error: memory corruption, stack overflow, frozen thread
 8004f08:	4b19      	ldr	r3, [pc, #100]	; (8004f70 <Odrive_Error_To_String+0x228>)
 8004f0a:	e026      	b.n	8004f5a <Odrive_Error_To_String+0x212>
	case TIMING_ERROR: return "TIMING_ERROR";
 8004f0c:	4b19      	ldr	r3, [pc, #100]	; (8004f74 <Odrive_Error_To_String+0x22c>)
 8004f0e:	e024      	b.n	8004f5a <Odrive_Error_To_String+0x212>
	case MISSING_ESTIMATE: return "MISSING_ESTIMATE";
 8004f10:	4b19      	ldr	r3, [pc, #100]	; (8004f78 <Odrive_Error_To_String+0x230>)
 8004f12:	e022      	b.n	8004f5a <Odrive_Error_To_String+0x212>
	case BAD_CONFIG: return "BAD_CONFIG";
 8004f14:	4b19      	ldr	r3, [pc, #100]	; (8004f7c <Odrive_Error_To_String+0x234>)
 8004f16:	e020      	b.n	8004f5a <Odrive_Error_To_String+0x212>
	case DRV_FAULT: return "DRV_FAULT";
 8004f18:	4b19      	ldr	r3, [pc, #100]	; (8004f80 <Odrive_Error_To_String+0x238>)
 8004f1a:	e01e      	b.n	8004f5a <Odrive_Error_To_String+0x212>
	case MISSING_INPUT: return "MISSING_INPUT";
 8004f1c:	4b19      	ldr	r3, [pc, #100]	; (8004f84 <Odrive_Error_To_String+0x23c>)
 8004f1e:	e01c      	b.n	8004f5a <Odrive_Error_To_String+0x212>
	case DC_BUS_OVER_VOLTAGE: return "DC_BUS_OVER_VOLTAGE";
 8004f20:	4b19      	ldr	r3, [pc, #100]	; (8004f88 <Odrive_Error_To_String+0x240>)
 8004f22:	e01a      	b.n	8004f5a <Odrive_Error_To_String+0x212>
	case DC_BUS_UNDER_VOLTAGE: return "DC_BUS_UNDER_VOLTAGE";
 8004f24:	4b19      	ldr	r3, [pc, #100]	; (8004f8c <Odrive_Error_To_String+0x244>)
 8004f26:	e018      	b.n	8004f5a <Odrive_Error_To_String+0x212>
	case DC_BUS_OVER_CURRENT: return "DC_BUS_OVER_CURRENT";
 8004f28:	4b19      	ldr	r3, [pc, #100]	; (8004f90 <Odrive_Error_To_String+0x248>)
 8004f2a:	e016      	b.n	8004f5a <Odrive_Error_To_String+0x212>
	case DC_BUS_OVER_REGEN_CURRENT: return "DC_BUS_OVER_REGEN_CURRENT";
 8004f2c:	4b19      	ldr	r3, [pc, #100]	; (8004f94 <Odrive_Error_To_String+0x24c>)
 8004f2e:	e014      	b.n	8004f5a <Odrive_Error_To_String+0x212>
	case CURRENT_LIMIT_VIOLATION: return "CURRENT_LIMIT_VIOLATION";
 8004f30:	4b19      	ldr	r3, [pc, #100]	; (8004f98 <Odrive_Error_To_String+0x250>)
 8004f32:	e012      	b.n	8004f5a <Odrive_Error_To_String+0x212>
	case MOTOR_OVER_TEMP: return "MOTOR_OVER_TEMP";
 8004f34:	4b19      	ldr	r3, [pc, #100]	; (8004f9c <Odrive_Error_To_String+0x254>)
 8004f36:	e010      	b.n	8004f5a <Odrive_Error_To_String+0x212>
	case INVERTER_OVER_TEMP: return "INVERTER_OVER_TEMP";
 8004f38:	4b19      	ldr	r3, [pc, #100]	; (8004fa0 <Odrive_Error_To_String+0x258>)
 8004f3a:	e00e      	b.n	8004f5a <Odrive_Error_To_String+0x212>
	case VELOCITY_LIMIT_VIOLATION: return "VELOCITY_LIMIT_VIOLATION";
 8004f3c:	4b19      	ldr	r3, [pc, #100]	; (8004fa4 <Odrive_Error_To_String+0x25c>)
 8004f3e:	e00c      	b.n	8004f5a <Odrive_Error_To_String+0x212>
	case POSITION_LIMIT_VIOLATION: return "POSITION_LIMIT_VIOLATION";
 8004f40:	4b19      	ldr	r3, [pc, #100]	; (8004fa8 <Odrive_Error_To_String+0x260>)
 8004f42:	e00a      	b.n	8004f5a <Odrive_Error_To_String+0x212>
	case WATCHDOG_TIMER_EXPIRED: return "WATCHDOG_TIMER_EXPIRED";
 8004f44:	4b19      	ldr	r3, [pc, #100]	; (8004fac <Odrive_Error_To_String+0x264>)
 8004f46:	e008      	b.n	8004f5a <Odrive_Error_To_String+0x212>
	case ESTOP_REQUESTED: return "ESTOP_REQUESTED";
 8004f48:	4b19      	ldr	r3, [pc, #100]	; (8004fb0 <Odrive_Error_To_String+0x268>)
 8004f4a:	e006      	b.n	8004f5a <Odrive_Error_To_String+0x212>
	case SPINOUT_DETECTED: return "SPINOUT_DETECTED";
 8004f4c:	4b19      	ldr	r3, [pc, #100]	; (8004fb4 <Odrive_Error_To_String+0x26c>)
 8004f4e:	e004      	b.n	8004f5a <Odrive_Error_To_String+0x212>
	case OTHER_DEVICE_FAILED: return "OTHER_DEVICE_FAILED";
 8004f50:	4b19      	ldr	r3, [pc, #100]	; (8004fb8 <Odrive_Error_To_String+0x270>)
 8004f52:	e002      	b.n	8004f5a <Odrive_Error_To_String+0x212>
	case CALIBRATION_ERROR: return "CALIBRATION_ERROR";
 8004f54:	4b19      	ldr	r3, [pc, #100]	; (8004fbc <Odrive_Error_To_String+0x274>)
 8004f56:	e000      	b.n	8004f5a <Odrive_Error_To_String+0x212>
	}

	return "Unknown fault";
 8004f58:	4b19      	ldr	r3, [pc, #100]	; (8004fc0 <Odrive_Error_To_String+0x278>)
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	0802030c 	.word	0x0802030c
 8004f6c:	08020318 	.word	0x08020318
 8004f70:	08020328 	.word	0x08020328
 8004f74:	08020338 	.word	0x08020338
 8004f78:	08020348 	.word	0x08020348
 8004f7c:	0802035c 	.word	0x0802035c
 8004f80:	08020368 	.word	0x08020368
 8004f84:	08020374 	.word	0x08020374
 8004f88:	08020384 	.word	0x08020384
 8004f8c:	08020398 	.word	0x08020398
 8004f90:	080203b0 	.word	0x080203b0
 8004f94:	080203c4 	.word	0x080203c4
 8004f98:	080203e0 	.word	0x080203e0
 8004f9c:	080203f8 	.word	0x080203f8
 8004fa0:	08020408 	.word	0x08020408
 8004fa4:	0802041c 	.word	0x0802041c
 8004fa8:	08020438 	.word	0x08020438
 8004fac:	08020454 	.word	0x08020454
 8004fb0:	0802046c 	.word	0x0802046c
 8004fb4:	0802047c 	.word	0x0802047c
 8004fb8:	08020490 	.word	0x08020490
 8004fbc:	080204a4 	.word	0x080204a4
 8004fc0:	080204b8 	.word	0x080204b8

08004fc4 <OdriveCAN_Handler>:
}



void OdriveCAN_Handler()
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
	static int c[2];
	uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 8004fca:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004fce:	807b      	strh	r3, [r7, #2]
	uint16_t id = CAN1RxMessage.StdId&command_mask;
 8004fd0:	4b2f      	ldr	r3, [pc, #188]	; (8005090 <OdriveCAN_Handler+0xcc>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	887b      	ldrh	r3, [r7, #2]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	803b      	strh	r3, [r7, #0]
	id=id>>5;
 8004fdc:	883b      	ldrh	r3, [r7, #0]
 8004fde:	095b      	lsrs	r3, r3, #5
 8004fe0:	803b      	strh	r3, [r7, #0]
	int i=0;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	607b      	str	r3, [r7, #4]
	for( i=0 ; i < number_of_odrive; i++)
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	607b      	str	r3, [r7, #4]
 8004fea:	e01f      	b.n	800502c <OdriveCAN_Handler+0x68>
	{
		if(id == P_to_Odrive[i]->Instance)
 8004fec:	4b29      	ldr	r3, [pc, #164]	; (8005094 <OdriveCAN_Handler+0xd0>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	8b1b      	ldrh	r3, [r3, #24]
 8004ffa:	883a      	ldrh	r2, [r7, #0]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d112      	bne.n	8005026 <OdriveCAN_Handler+0x62>
		{
			decode_Odrive(P_to_Odrive[i]);
 8005000:	4b24      	ldr	r3, [pc, #144]	; (8005094 <OdriveCAN_Handler+0xd0>)
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4618      	mov	r0, r3
 800500e:	f7ff fdab 	bl	8004b68 <decode_Odrive>
			c[i]++;
 8005012:	4a21      	ldr	r2, [pc, #132]	; (8005098 <OdriveCAN_Handler+0xd4>)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	491e      	ldr	r1, [pc, #120]	; (8005098 <OdriveCAN_Handler+0xd4>)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 8005024:	e007      	b.n	8005036 <OdriveCAN_Handler+0x72>
	for( i=0 ; i < number_of_odrive; i++)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3301      	adds	r3, #1
 800502a:	607b      	str	r3, [r7, #4]
 800502c:	4b1b      	ldr	r3, [pc, #108]	; (800509c <OdriveCAN_Handler+0xd8>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	429a      	cmp	r2, r3
 8005034:	dbda      	blt.n	8004fec <OdriveCAN_Handler+0x28>
		//			decode_Odrive(&Odrv2);
		//			break;
		//		}
	}

	if(c[0]==100)
 8005036:	4b18      	ldr	r3, [pc, #96]	; (8005098 <OdriveCAN_Handler+0xd4>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2b64      	cmp	r3, #100	; 0x64
 800503c:	d111      	bne.n	8005062 <OdriveCAN_Handler+0x9e>
	{
		c[0]=0;
 800503e:	4b16      	ldr	r3, [pc, #88]	; (8005098 <OdriveCAN_Handler+0xd4>)
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]
		GPIOC_OUT->bit14=!GPIOC_OUT->bit14;
 8005044:	4b16      	ldr	r3, [pc, #88]	; (80050a0 <OdriveCAN_Handler+0xdc>)
 8005046:	785b      	ldrb	r3, [r3, #1]
 8005048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504c:	b2db      	uxtb	r3, r3
 800504e:	4a14      	ldr	r2, [pc, #80]	; (80050a0 <OdriveCAN_Handler+0xdc>)
 8005050:	2b00      	cmp	r3, #0
 8005052:	bf0c      	ite	eq
 8005054:	2301      	moveq	r3, #1
 8005056:	2300      	movne	r3, #0
 8005058:	b2d9      	uxtb	r1, r3
 800505a:	7853      	ldrb	r3, [r2, #1]
 800505c:	f361 1386 	bfi	r3, r1, #6, #1
 8005060:	7053      	strb	r3, [r2, #1]
	}

	if(c[1]==100)
 8005062:	4b0d      	ldr	r3, [pc, #52]	; (8005098 <OdriveCAN_Handler+0xd4>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2b64      	cmp	r3, #100	; 0x64
 8005068:	d10e      	bne.n	8005088 <OdriveCAN_Handler+0xc4>
	{
		c[1]=0;
 800506a:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <OdriveCAN_Handler+0xd4>)
 800506c:	2200      	movs	r2, #0
 800506e:	605a      	str	r2, [r3, #4]
		GPIOC_OUT->bit15=!GPIOC_OUT->bit15;
 8005070:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <OdriveCAN_Handler+0xdc>)
 8005072:	785b      	ldrb	r3, [r3, #1]
 8005074:	b25b      	sxtb	r3, r3
 8005076:	4a0a      	ldr	r2, [pc, #40]	; (80050a0 <OdriveCAN_Handler+0xdc>)
 8005078:	43db      	mvns	r3, r3
 800507a:	b2db      	uxtb	r3, r3
 800507c:	09db      	lsrs	r3, r3, #7
 800507e:	b2d9      	uxtb	r1, r3
 8005080:	7853      	ldrb	r3, [r2, #1]
 8005082:	f361 13c7 	bfi	r3, r1, #7, #1
 8005086:	7053      	strb	r3, [r2, #1]
	}

}
 8005088:	bf00      	nop
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	2000a8c8 	.word	0x2000a8c8
 8005094:	2000a9e4 	.word	0x2000a9e4
 8005098:	20000290 	.word	0x20000290
 800509c:	2000028c 	.word	0x2000028c
 80050a0:	40020814 	.word	0x40020814

080050a4 <PIDSourceInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void PIDSourceInit (float *in, float *out, PID_t *pid)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
	pid->error = in;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	605a      	str	r2, [r3, #4]
	pid->out_put = out;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	609a      	str	r2, [r3, #8]
}
 80050bc:	bf00      	nop
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <PIDGainInit>:

void PIDGainInit(float ts, float sat, float ke, float ku, float kp, float ki,
									float kd, float kn, PID_t *pid)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08a      	sub	sp, #40	; 0x28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80050d2:	edc7 0a08 	vstr	s1, [r7, #32]
 80050d6:	ed87 1a07 	vstr	s2, [r7, #28]
 80050da:	edc7 1a06 	vstr	s3, [r7, #24]
 80050de:	ed87 2a05 	vstr	s4, [r7, #20]
 80050e2:	edc7 2a04 	vstr	s5, [r7, #16]
 80050e6:	ed87 3a03 	vstr	s6, [r7, #12]
 80050ea:	edc7 3a02 	vstr	s7, [r7, #8]
 80050ee:	6078      	str	r0, [r7, #4]
	pid->K[TS] = ts;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f4:	60da      	str	r2, [r3, #12]
	pid->K[SAT] = sat;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a3a      	ldr	r2, [r7, #32]
 80050fa:	611a      	str	r2, [r3, #16]
	pid->K[KE] = ke;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	69fa      	ldr	r2, [r7, #28]
 8005100:	615a      	str	r2, [r3, #20]
	pid->K[KU] = ku;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	619a      	str	r2, [r3, #24]
	pid->K[KP] = kp;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	61da      	str	r2, [r3, #28]
	pid->K[KI] = ki;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	621a      	str	r2, [r3, #32]
	pid->K[KD] = kd;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	625a      	str	r2, [r3, #36]	; 0x24
	pid->K[KN] = kn;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	629a      	str	r2, [r3, #40]	; 0x28
	PIDCoeffCalc(pid);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f81b 	bl	800515c <PIDCoeffCalc>
//	pid->K[D_1] = (((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) / (pid->K[KN] * pid->K[TS] + 2);
//	} else {
//		pid->pd_flag = 0;
//		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0;
//	}
}
 8005126:	bf00      	nop
 8005128:	3728      	adds	r7, #40	; 0x28
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <PIDGainSet>:

void PIDGainSet (unsigned char a, float value, PID_t *pid)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	4603      	mov	r3, r0
 8005136:	ed87 0a02 	vstr	s0, [r7, #8]
 800513a:	6079      	str	r1, [r7, #4]
 800513c:	73fb      	strb	r3, [r7, #15]
	pid->K[a] = value;
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	3302      	adds	r3, #2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	3304      	adds	r3, #4
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	601a      	str	r2, [r3, #0]
	PIDCoeffCalc(pid);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f804 	bl	800515c <PIDCoeffCalc>
}
 8005154:	bf00      	nop
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <PIDCoeffCalc>:

void PIDCoeffCalc (PID_t *pid)
{
 800515c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005160:	b082      	sub	sp, #8
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
	if (pid->K[KI] != 0){
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	edd3 7a08 	vldr	s15, [r3, #32]
 800516c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005174:	d013      	beq.n	800519e <PIDCoeffCalc+0x42>
		pid->K[B_0] = (pid->K[TS] * pid->K[KI]) * 0.5;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	ed93 7a03 	vldr	s14, [r3, #12]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	edd3 7a08 	vldr	s15, [r3, #32]
 8005182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005186:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800518a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		pid->K[B_1] = pid->K[B_0];
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	631a      	str	r2, [r3, #48]	; 0x30
 800519c:	e007      	b.n	80051ae <PIDCoeffCalc+0x52>
	} else {
		pid->K[B_0] = pid->K[B_1] = 0;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	631a      	str	r2, [r3, #48]	; 0x30
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	edd3 7a07 	vldr	s15, [r3, #28]
 80051b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80051b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051bc:	d108      	bne.n	80051d0 <PIDCoeffCalc+0x74>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80051c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80051c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051cc:	f000 80ef 	beq.w	80053ae <PIDCoeffCalc+0x252>
	pid->K[C_1] = -((pid->K[TS] * pid->K[KN] - 2.0) / (pid->K[TS] * pid->K[KN] + 2.0));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	ed93 7a03 	vldr	s14, [r3, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80051dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e0:	ee17 0a90 	vmov	r0, s15
 80051e4:	f7fb f9b0 	bl	8000548 <__aeabi_f2d>
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051f0:	f7fb f84a 	bl	8000288 <__aeabi_dsub>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	4614      	mov	r4, r2
 80051fa:	461d      	mov	r5, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	ed93 7a03 	vldr	s14, [r3, #12]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800520c:	ee17 0a90 	vmov	r0, s15
 8005210:	f7fb f99a 	bl	8000548 <__aeabi_f2d>
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800521c:	f7fb f836 	bl	800028c <__adddf3>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	4620      	mov	r0, r4
 8005226:	4629      	mov	r1, r5
 8005228:	f7fb fb10 	bl	800084c <__aeabi_ddiv>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4610      	mov	r0, r2
 8005232:	4619      	mov	r1, r3
 8005234:	f7fb fcd8 	bl	8000be8 <__aeabi_d2f>
 8005238:	4603      	mov	r3, r0
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef1 7a67 	vneg.f32	s15, s15
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->K[D_0] = (pid->K[KP] + ((2.0 * pid->K[KD] * pid->K[KN]) / (pid->K[KN] * pid->K[TS] + 2.0)));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	4618      	mov	r0, r3
 800524e:	f7fb f97b 	bl	8000548 <__aeabi_f2d>
 8005252:	4604      	mov	r4, r0
 8005254:	460d      	mov	r5, r1
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	4618      	mov	r0, r3
 800525c:	f7fb f974 	bl	8000548 <__aeabi_f2d>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	f7fb f812 	bl	800028c <__adddf3>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4690      	mov	r8, r2
 800526e:	4699      	mov	r9, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005274:	4618      	mov	r0, r3
 8005276:	f7fb f967 	bl	8000548 <__aeabi_f2d>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	4640      	mov	r0, r8
 8005280:	4649      	mov	r1, r9
 8005282:	f7fb f9b9 	bl	80005f8 <__aeabi_dmul>
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
 800528a:	4690      	mov	r8, r2
 800528c:	4699      	mov	r9, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	edd3 7a03 	vldr	s15, [r3, #12]
 800529a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800529e:	ee17 0a90 	vmov	r0, s15
 80052a2:	f7fb f951 	bl	8000548 <__aeabi_f2d>
 80052a6:	f04f 0200 	mov.w	r2, #0
 80052aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052ae:	f7fa ffed 	bl	800028c <__adddf3>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4640      	mov	r0, r8
 80052b8:	4649      	mov	r1, r9
 80052ba:	f7fb fac7 	bl	800084c <__aeabi_ddiv>
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	4620      	mov	r0, r4
 80052c4:	4629      	mov	r1, r5
 80052c6:	f7fa ffe1 	bl	800028c <__adddf3>
 80052ca:	4602      	mov	r2, r0
 80052cc:	460b      	mov	r3, r1
 80052ce:	4610      	mov	r0, r2
 80052d0:	4619      	mov	r1, r3
 80052d2:	f7fb fc89 	bl	8000be8 <__aeabi_d2f>
 80052d6:	4602      	mov	r2, r0
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	639a      	str	r2, [r3, #56]	; 0x38
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80052e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ec:	ee17 0a90 	vmov	r0, s15
 80052f0:	f7fb f92a 	bl	8000548 <__aeabi_f2d>
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052fc:	f7fa ffc4 	bl	8000288 <__aeabi_dsub>
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	4614      	mov	r4, r2
 8005306:	461d      	mov	r5, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	4618      	mov	r0, r3
 800530e:	f7fb f91b 	bl	8000548 <__aeabi_f2d>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	4620      	mov	r0, r4
 8005318:	4629      	mov	r1, r5
 800531a:	f7fb f96d 	bl	80005f8 <__aeabi_dmul>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	4614      	mov	r4, r2
 8005324:	461d      	mov	r5, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	4618      	mov	r0, r3
 800532c:	f7fb f90c 	bl	8000548 <__aeabi_f2d>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	f7fa ffaa 	bl	800028c <__adddf3>
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	4690      	mov	r8, r2
 800533e:	4699      	mov	r9, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	4618      	mov	r0, r3
 8005346:	f7fb f8ff 	bl	8000548 <__aeabi_f2d>
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	4640      	mov	r0, r8
 8005350:	4649      	mov	r1, r9
 8005352:	f7fb f951 	bl	80005f8 <__aeabi_dmul>
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	4620      	mov	r0, r4
 800535c:	4629      	mov	r1, r5
 800535e:	f7fa ff93 	bl	8000288 <__aeabi_dsub>
 8005362:	4602      	mov	r2, r0
 8005364:	460b      	mov	r3, r1
 8005366:	4614      	mov	r4, r2
 8005368:	461d      	mov	r5, r3
					(pid->K[KN] * pid->K[TS] + 2.0));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	edd3 7a03 	vldr	s15, [r3, #12]
 8005376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800537a:	ee17 0a90 	vmov	r0, s15
 800537e:	f7fb f8e3 	bl	8000548 <__aeabi_f2d>
 8005382:	f04f 0200 	mov.w	r2, #0
 8005386:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800538a:	f7fa ff7f 	bl	800028c <__adddf3>
 800538e:	4602      	mov	r2, r0
 8005390:	460b      	mov	r3, r1
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 8005392:	4620      	mov	r0, r4
 8005394:	4629      	mov	r1, r5
 8005396:	f7fb fa59 	bl	800084c <__aeabi_ddiv>
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	4610      	mov	r0, r2
 80053a0:	4619      	mov	r1, r3
 80053a2:	f7fb fc21 	bl	8000be8 <__aeabi_d2f>
 80053a6:	4602      	mov	r2, r0
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80053ac:	e00c      	b.n	80053c8 <PIDCoeffCalc+0x26c>
	} else {
		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0.0;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	63da      	str	r2, [r3, #60]	; 0x3c
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	639a      	str	r2, [r3, #56]	; 0x38
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80053c6:	bf00      	nop
 80053c8:	bf00      	nop
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080053d2 <PIDDelayInit>:

void PIDDelayInit (PID_t *pid)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
//	unsigned char i;
//	for(i = 0; i < 2; i++){
//		pid->i_delay[i] = 0;
//		pid->d_delay[i] = 0;
//	}
	pid->i_delay[0] = 0.0;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	641a      	str	r2, [r3, #64]	; 0x40
	pid->i_delay[1] = 0.0;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	645a      	str	r2, [r3, #68]	; 0x44
	pid->d_delay[0] = 0.0;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f04f 0200 	mov.w	r2, #0
 80053f0:	649a      	str	r2, [r3, #72]	; 0x48
	pid->d_delay[1] = 0.0;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f04f 0200 	mov.w	r2, #0
 80053f8:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->s_delay = 0.0;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f04f 0200 	mov.w	r2, #0
 8005400:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <PID>:
{
	return !pid->s_flag;	/* 1 is not saturated, 0 is saturated */
}

void PID (PID_t *pid)
{
 800540e:	b480      	push	{r7}
 8005410:	b087      	sub	sp, #28
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
	/* Error ******************************************************************/
	float input_buffer, error;

	input_buffer = *pid->error;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	613b      	str	r3, [r7, #16]
	error = input_buffer * pid->K[KE];
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	edd3 7a05 	vldr	s15, [r3, #20]
 8005424:	ed97 7a04 	vldr	s14, [r7, #16]
 8005428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800542c:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Reset previous sum *****************************************************/
	pid->s_delay = 0;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f04f 0200 	mov.w	r2, #0
 8005436:	651a      	str	r2, [r3, #80]	; 0x50

	/* I algorithm ************************************************************/

	if (pid->K[KI] != 0){
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	edd3 7a08 	vldr	s15, [r3, #32]
 800543e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005446:	d033      	beq.n	80054b0 <PID+0xa2>
		if (pid->s_flag){     //flag only, so 0 or 1...
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <PID+0x5e>
			pid->i_delay[1] = error + pid->i_delay[0];      //it is not saturated, so it will continue add error
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800545c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 800546a:	e003      	b.n	8005474 <PID+0x66>
		} else {
			pid->i_delay[1] = pid->i_delay[0];				//it is saturated already, so all pid->i_delay will be constant
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	645a      	str	r2, [r3, #68]	; 0x44
		}
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005486:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800548a:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ (pid->K[B_1] * pid->i_delay[0]);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800549a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800549e:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->i_delay[0] = pid->i_delay[1];
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	641a      	str	r2, [r3, #64]	; 0x40

// since final output is addition of 2 outputs, so pid->s_delay will combine with the equation in document..

	/* PD algorithm ***********************************************************/

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){       				// i has change behind KP to KD..
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80054b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80054ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054be:	d107      	bne.n	80054d0 <PID+0xc2>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80054c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80054ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ce:	d02c      	beq.n	800552a <PID+0x11c>
		pid->d_delay[1] = error + pid->K[C_1] * pid->d_delay[0];  		//pid->d_delay[0] is old value,pid->d_delay[1]is new value,so both are different values
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80054dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80054e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8005500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005504:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ pid->K[D_1] * pid->d_delay[0];
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8005514:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005518:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->d_delay[0] = pid->d_delay[1];
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	649a      	str	r2, [r3, #72]	; 0x48
	}

	/* Saturation element *****************************************************/
	float output_buffer, output;

	output_buffer = pid->s_delay;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800552e:	60bb      	str	r3, [r7, #8]
	if (output_buffer > pid->K[SAT]){
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	edd3 7a04 	vldr	s15, [r3, #16]
 8005536:	ed97 7a02 	vldr	s14, [r7, #8]
 800553a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800553e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005542:	dd0f      	ble.n	8005564 <PID+0x156>
		output = (pid->K[SAT] * pid->K[KU]);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	ed93 7a04 	vldr	s14, [r3, #16]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005554:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	7813      	ldrb	r3, [r2, #0]
 800555c:	f36f 0300 	bfc	r3, #0, #1
 8005560:	7013      	strb	r3, [r2, #0]
 8005562:	e02b      	b.n	80055bc <PID+0x1ae>
	}else if (output_buffer < -(pid->K[SAT])){
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	edd3 7a04 	vldr	s15, [r3, #16]
 800556a:	eef1 7a67 	vneg.f32	s15, s15
 800556e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005572:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800557a:	d511      	bpl.n	80055a0 <PID+0x192>
		output = -(pid->K[SAT] * pid->K[KU]);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	ed93 7a04 	vldr	s14, [r3, #16]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	edd3 7a06 	vldr	s15, [r3, #24]
 8005588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800558c:	eef1 7a67 	vneg.f32	s15, s15
 8005590:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	7813      	ldrb	r3, [r2, #0]
 8005598:	f36f 0300 	bfc	r3, #0, #1
 800559c:	7013      	strb	r3, [r2, #0]
 800559e:	e00d      	b.n	80055bc <PID+0x1ae>
	}else {
		output = (output_buffer * pid->K[KU]);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80055a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80055aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ae:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 1;							/* Not saturated */
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	7813      	ldrb	r3, [r2, #0]
 80055b6:	f043 0301 	orr.w	r3, r3, #1
 80055ba:	7013      	strb	r3, [r2, #0]
	}

	/* Output *****************************************************************/
	*pid->out_put = output;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	601a      	str	r2, [r3, #0]
}
 80055c4:	bf00      	nop
 80055c6:	371c      	adds	r7, #28
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <PPInit>:
#include "../adapter.h"

void PPInit(uint8_t base,float *qeix, float *qeiy, float*imu,PathPlan_t *pp)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60b9      	str	r1, [r7, #8]
 80055d8:	607a      	str	r2, [r7, #4]
 80055da:	603b      	str	r3, [r7, #0]
 80055dc:	4603      	mov	r3, r0
 80055de:	73fb      	strb	r3, [r7, #15]
	pp->base_shape=base;
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	7bfa      	ldrb	r2, [r7, #15]
 80055e4:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
	pp->qeix = qeix;
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	601a      	str	r2, [r3, #0]
	pp->qeiy = qeiy;
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	605a      	str	r2, [r3, #4]
	pp->yaw = imu;
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	609a      	str	r2, [r3, #8]
	pp->point_start=1;
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005600:	f043 0302 	orr.w	r3, r3, #2
 8005604:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538

	PIDSourceInit(&(pp->error_x), &(pp->outx), &(pp->x));
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	f503 702c 	add.w	r0, r3, #688	; 0x2b0
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800561a:	461a      	mov	r2, r3
 800561c:	f7ff fd42 	bl	80050a4 <PIDSourceInit>
	PIDGainInit(0.005, 1.0, 1.0, 1.0, 1.0, 0.0, 0.4, 30.0, &(pp->x));
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005626:	4618      	mov	r0, r3
 8005628:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 800562c:	ed9f 3a49 	vldr	s6, [pc, #292]	; 8005754 <PPInit+0x184>
 8005630:	eddf 2a49 	vldr	s5, [pc, #292]	; 8005758 <PPInit+0x188>
 8005634:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8005638:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800563c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005640:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005644:	ed9f 0a45 	vldr	s0, [pc, #276]	; 800575c <PPInit+0x18c>
 8005648:	f7ff fd3e 	bl	80050c8 <PIDGainInit>
	PIDDelayInit(&(pp->x));
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005652:	4618      	mov	r0, r3
 8005654:	f7ff febd 	bl	80053d2 <PIDDelayInit>

	PIDSourceInit(&(pp->error_y), &(pp->outy), &(pp->y));
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800566a:	461a      	mov	r2, r3
 800566c:	f7ff fd1a 	bl	80050a4 <PIDSourceInit>
	PIDGainInit(0.005, 1.0, 1.0, 1.0, 1.0, 0.0, 0.4, 30.0, &(pp->y));
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005676:	4618      	mov	r0, r3
 8005678:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 800567c:	ed9f 3a35 	vldr	s6, [pc, #212]	; 8005754 <PPInit+0x184>
 8005680:	eddf 2a35 	vldr	s5, [pc, #212]	; 8005758 <PPInit+0x188>
 8005684:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8005688:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800568c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005690:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005694:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800575c <PPInit+0x18c>
 8005698:	f7ff fd16 	bl	80050c8 <PIDGainInit>
	PIDDelayInit(&(pp->y));
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7ff fe95 	bl	80053d2 <PIDDelayInit>

	PIDSourceInit(&(pp->error_z), &(pp->outz), &(pp->z));
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	f503 702e 	add.w	r0, r3, #696	; 0x2b8
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80056ba:	461a      	mov	r2, r3
 80056bc:	f7ff fcf2 	bl	80050a4 <PIDSourceInit>
	PIDGainInit(0.005, 1.0, (1.0 / 30.0), 0.5, 5.0, 0.2, 0.2, 30.0, &(pp->z));
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80056c6:	4618      	mov	r0, r3
 80056c8:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80056cc:	ed9f 3a24 	vldr	s6, [pc, #144]	; 8005760 <PPInit+0x190>
 80056d0:	eddf 2a23 	vldr	s5, [pc, #140]	; 8005760 <PPInit+0x190>
 80056d4:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 80056d8:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 80056dc:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8005764 <PPInit+0x194>
 80056e0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80056e4:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800575c <PPInit+0x18c>
 80056e8:	f7ff fcee 	bl	80050c8 <PIDGainInit>
	PIDDelayInit(&(pp->z));
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7ff fe6d 	bl	80053d2 <PIDDelayInit>

	pp->tol_xy=0.20;
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	4a1b      	ldr	r2, [pc, #108]	; (8005768 <PPInit+0x198>)
 80056fc:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	pp->tol_z=2.0;
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005706:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc

	pp->tol_xy_crv= 0.6;
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	4a17      	ldr	r2, [pc, #92]	; (800576c <PPInit+0x19c>)
 800570e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

	pp->f_tol_xy=0.06;
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	4a16      	ldr	r2, [pc, #88]	; (8005770 <PPInit+0x1a0>)
 8005716:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
	pp->f_tol_z=1.0;
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005720:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	pp->yaw_offset=*(pp->yaw);
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	625a      	str	r2, [r3, #36]	; 0x24
	pp->prev_real_z = 0;
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	615a      	str	r2, [r3, #20]
	pp->real_z = 0;
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	611a      	str	r2, [r3, #16]
	pp->rotate_only = 0;
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005744:	f36f 1304 	bfc	r3, #4, #1
 8005748:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
}
 800574c:	bf00      	nop
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	3ecccccd 	.word	0x3ecccccd
 8005758:	00000000 	.word	0x00000000
 800575c:	3ba3d70a 	.word	0x3ba3d70a
 8005760:	3e4ccccd 	.word	0x3e4ccccd
 8005764:	3d088889 	.word	0x3d088889
 8005768:	3e4ccccd 	.word	0x3e4ccccd
 800576c:	3f19999a 	.word	0x3f19999a
 8005770:	3d75c28f 	.word	0x3d75c28f

08005774 <PP_PIDPathSet>:

void PP_PIDPathSet(float kp, float ki, float kd, PathPlan_t *pp)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	ed87 0a03 	vstr	s0, [r7, #12]
 800577e:	edc7 0a02 	vstr	s1, [r7, #8]
 8005782:	ed87 1a01 	vstr	s2, [r7, #4]
 8005786:	6038      	str	r0, [r7, #0]
	pp->kp[0]=kp;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	pp->ki[0]=ki;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	pp->kd[0]=kd;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c

	PIDGainSet(KP,kp,&(pp->x));
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80057a6:	4619      	mov	r1, r3
 80057a8:	ed97 0a03 	vldr	s0, [r7, #12]
 80057ac:	2004      	movs	r0, #4
 80057ae:	f7ff fcbe 	bl	800512e <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->x));
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80057b8:	4619      	mov	r1, r3
 80057ba:	ed97 0a02 	vldr	s0, [r7, #8]
 80057be:	2005      	movs	r0, #5
 80057c0:	f7ff fcb5 	bl	800512e <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->x));
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80057ca:	4619      	mov	r1, r3
 80057cc:	ed97 0a01 	vldr	s0, [r7, #4]
 80057d0:	2006      	movs	r0, #6
 80057d2:	f7ff fcac 	bl	800512e <PIDGainSet>

	PIDGainSet(KP,kp,&(pp->y));
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80057dc:	4619      	mov	r1, r3
 80057de:	ed97 0a03 	vldr	s0, [r7, #12]
 80057e2:	2004      	movs	r0, #4
 80057e4:	f7ff fca3 	bl	800512e <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->y));
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80057ee:	4619      	mov	r1, r3
 80057f0:	ed97 0a02 	vldr	s0, [r7, #8]
 80057f4:	2005      	movs	r0, #5
 80057f6:	f7ff fc9a 	bl	800512e <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->y));
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005800:	4619      	mov	r1, r3
 8005802:	ed97 0a01 	vldr	s0, [r7, #4]
 8005806:	2006      	movs	r0, #6
 8005808:	f7ff fc91 	bl	800512e <PIDGainSet>
}
 800580c:	bf00      	nop
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <PP_PIDZSet>:

void PP_PIDZSet(float kp, float ki, float kd, float ku, PathPlan_t *pp){
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	ed87 0a05 	vstr	s0, [r7, #20]
 800581e:	edc7 0a04 	vstr	s1, [r7, #16]
 8005822:	ed87 1a03 	vstr	s2, [r7, #12]
 8005826:	edc7 1a02 	vstr	s3, [r7, #8]
 800582a:	6078      	str	r0, [r7, #4]

	PIDGainSet(KP,kp,&(pp->z));
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005832:	4619      	mov	r1, r3
 8005834:	ed97 0a05 	vldr	s0, [r7, #20]
 8005838:	2004      	movs	r0, #4
 800583a:	f7ff fc78 	bl	800512e <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->z));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005844:	4619      	mov	r1, r3
 8005846:	ed97 0a04 	vldr	s0, [r7, #16]
 800584a:	2005      	movs	r0, #5
 800584c:	f7ff fc6f 	bl	800512e <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->z));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005856:	4619      	mov	r1, r3
 8005858:	ed97 0a03 	vldr	s0, [r7, #12]
 800585c:	2006      	movs	r0, #6
 800585e:	f7ff fc66 	bl	800512e <PIDGainSet>
	PIDGainSet(KU,ku,&(pp->z));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005868:	4619      	mov	r1, r3
 800586a:	ed97 0a02 	vldr	s0, [r7, #8]
 800586e:	2003      	movs	r0, #3
 8005870:	f7ff fc5d 	bl	800512e <PIDGainSet>
	pp->pp_orgz_kp = kp;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	601a      	str	r2, [r3, #0]
}
 800587e:	bf00      	nop
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <PP_PIDEndSet>:

void PP_PIDEndSet(float kp, float ki, float kd, PathPlan_t *pp)
{
 8005886:	b480      	push	{r7}
 8005888:	b085      	sub	sp, #20
 800588a:	af00      	add	r7, sp, #0
 800588c:	ed87 0a03 	vstr	s0, [r7, #12]
 8005890:	edc7 0a02 	vstr	s1, [r7, #8]
 8005894:	ed87 1a01 	vstr	s2, [r7, #4]
 8005898:	6038      	str	r0, [r7, #0]
	pp->kp[1]=kp;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	pp->ki[1]=ki;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	pp->kd[1]=kd;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
}
 80058b2:	bf00      	nop
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <PP_start>:

void PP_start(float point[][7],int no_point,PathPlan_t *pp)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	ed2d 8b02 	vpush	{d8}
 80058c4:	b086      	sub	sp, #24
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	60f8      	str	r0, [r7, #12]
 80058ca:	60b9      	str	r1, [r7, #8]
 80058cc:	607a      	str	r2, [r7, #4]
	int i;
	for(i=0;i<no_point;i++)
 80058ce:	2300      	movs	r3, #0
 80058d0:	617b      	str	r3, [r7, #20]
 80058d2:	e114      	b.n	8005afe <PP_start+0x240>
	{
		pp->target_vel[i] = point[i][0];
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	4613      	mov	r3, r2
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	1a9b      	subs	r3, r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	461a      	mov	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4413      	add	r3, r2
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	3374      	adds	r3, #116	; 0x74
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	440b      	add	r3, r1
 80058f0:	601a      	str	r2, [r3, #0]
		pp->target_x[i] = point[i][1] + pp->real_x;
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	4613      	mov	r3, r2
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	1a9b      	subs	r3, r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	461a      	mov	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4413      	add	r3, r2
 8005902:	ed93 7a01 	vldr	s14, [r3, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800590c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	331a      	adds	r3, #26
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	edc3 7a00 	vstr	s15, [r3]
		pp->target_y[i] = point[i][2] + pp->real_y;
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	4613      	mov	r3, r2
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	1a9b      	subs	r3, r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	461a      	mov	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4413      	add	r3, r2
 800592e:	ed93 7a02 	vldr	s14, [r3, #8]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	3328      	adds	r3, #40	; 0x28
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4413      	add	r3, r2
 8005946:	3304      	adds	r3, #4
 8005948:	edc3 7a00 	vstr	s15, [r3]
		pp->target_accurate[i] = point[i][5]; // point_lock
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	4613      	mov	r3, r2
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	1a9b      	subs	r3, r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	461a      	mov	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4413      	add	r3, r2
 800595c:	695a      	ldr	r2, [r3, #20]
 800595e:	6879      	ldr	r1, [r7, #4]
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	3346      	adds	r3, #70	; 0x46
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	440b      	add	r3, r1
 8005968:	3304      	adds	r3, #4
 800596a:	601a      	str	r2, [r3, #0]
		pp->pp_crv_radius[i] =  point[i][6];
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	4613      	mov	r3, r2
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	1a9b      	subs	r3, r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	461a      	mov	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4413      	add	r3, r2
 800597c:	699a      	ldr	r2, [r3, #24]
 800597e:	6879      	ldr	r1, [r7, #4]
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	440b      	add	r3, r1
 800598a:	3304      	adds	r3, #4
 800598c:	601a      	str	r2, [r3, #0]
		if(i == 0)
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d11f      	bne.n	80059d4 <PP_start+0x116>
			pp->target_angle1[0] = atanf((fabs)(point[0][2] - pp->real_y) / (fabs)(point[0][1]- pp->real_x));
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	ed93 7a02 	vldr	s14, [r3, #8]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80059a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059a4:	eeb0 7ae7 	vabs.f32	s14, s15
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	edd3 6a01 	vldr	s13, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80059b4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80059b8:	eef0 7ae7 	vabs.f32	s15, s15
 80059bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80059c0:	eeb0 0a66 	vmov.f32	s0, s13
 80059c4:	f019 f974 	bl	801ecb0 <atanf>
 80059c8:	eef0 7a40 	vmov.f32	s15, s0
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	edc3 7a65 	vstr	s15, [r3, #404]	; 0x194
 80059d2:	e03f      	b.n	8005a54 <PP_start+0x196>
		else
			pp->target_angle1[i]= atanf((fabs)(point[i][2]-point[i-1][2]) / (fabs)(point[i][1]-point[i-1][1]));
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	4613      	mov	r3, r2
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	1a9b      	subs	r3, r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	461a      	mov	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4413      	add	r3, r2
 80059e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	4613      	mov	r3, r2
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	1a9b      	subs	r3, r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	3b1c      	subs	r3, #28
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	4413      	add	r3, r2
 80059f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80059fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a00:	eeb0 7ae7 	vabs.f32	s14, s15
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	4613      	mov	r3, r2
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	1a9b      	subs	r3, r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	461a      	mov	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4413      	add	r3, r2
 8005a14:	edd3 6a01 	vldr	s13, [r3, #4]
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	00db      	lsls	r3, r3, #3
 8005a1e:	1a9b      	subs	r3, r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	3b1c      	subs	r3, #28
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a2c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005a30:	eef0 7ae7 	vabs.f32	s15, s15
 8005a34:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005a38:	eeb0 0a66 	vmov.f32	s0, s13
 8005a3c:	f019 f938 	bl	801ecb0 <atanf>
 8005a40:	eef0 7a40 	vmov.f32	s15, s0
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	3364      	adds	r3, #100	; 0x64
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4413      	add	r3, r2
 8005a4e:	3304      	adds	r3, #4
 8005a50:	edc3 7a00 	vstr	s15, [r3]
		pp->target_z[i] = point[i][3];
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	4613      	mov	r3, r2
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	1a9b      	subs	r3, r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	461a      	mov	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4413      	add	r3, r2
 8005a64:	68da      	ldr	r2, [r3, #12]
 8005a66:	6879      	ldr	r1, [r7, #4]
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	3338      	adds	r3, #56	; 0x38
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	440b      	add	r3, r1
 8005a70:	601a      	str	r2, [r3, #0]
		pp->ku_x[i] = point[i][4]* cosf(pp->target_angle1[i]);  // xy-pid
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	4613      	mov	r3, r2
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	1a9b      	subs	r3, r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	4413      	add	r3, r2
 8005a82:	ed93 8a04 	vldr	s16, [r3, #16]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	3364      	adds	r3, #100	; 0x64
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	3304      	adds	r3, #4
 8005a92:	edd3 7a00 	vldr	s15, [r3]
 8005a96:	eeb0 0a67 	vmov.f32	s0, s15
 8005a9a:	f019 f9dd 	bl	801ee58 <cosf>
 8005a9e:	eef0 7a40 	vmov.f32	s15, s0
 8005aa2:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	3384      	adds	r3, #132	; 0x84
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	edc3 7a00 	vstr	s15, [r3]
		pp->ku_y[i] = point[i][4]* sinf(pp->target_angle1[i]);
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	1a9b      	subs	r3, r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	ed93 8a04 	vldr	s16, [r3, #16]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	3364      	adds	r3, #100	; 0x64
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	edd3 7a00 	vldr	s15, [r3]
 8005ada:	eeb0 0a67 	vmov.f32	s0, s15
 8005ade:	f019 fa03 	bl	801eee8 <sinf>
 8005ae2:	eef0 7a40 	vmov.f32	s15, s0
 8005ae6:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	3394      	adds	r3, #148	; 0x94
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	edc3 7a00 	vstr	s15, [r3]
	for(i=0;i<no_point;i++)
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	3301      	adds	r3, #1
 8005afc:	617b      	str	r3, [r7, #20]
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	f6ff aee6 	blt.w	80058d4 <PP_start+0x16>
	}

	pp->target_point=no_point;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414

	if(pp->target_point == 1)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d166      	bne.n	8005be8 <PP_start+0x32a>
	{
		if(fabs(pp->real_x - pp->target_x[0]) >= pp->f_tol_xy)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8005b26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b2a:	eeb0 7ae7 	vabs.f32	s14, s15
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8005b34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b3c:	db17      	blt.n	8005b6e <PP_start+0x2b0>
			PIDGainSet(KE,1.0/fabs(pp->real_x - pp->target_x[0]),&(pp->x));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8005b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b4e:	eef0 7ae7 	vabs.f32	s15, s15
 8005b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005b60:	4619      	mov	r1, r3
 8005b62:	eeb0 0a47 	vmov.f32	s0, s14
 8005b66:	2002      	movs	r0, #2
 8005b68:	f7ff fae1 	bl	800512e <PIDGainSet>
 8005b6c:	e008      	b.n	8005b80 <PP_start+0x2c2>
		else
			PIDGainSet(KE,1.0,&(pp->x));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005b74:	4619      	mov	r1, r3
 8005b76:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005b7a:	2002      	movs	r0, #2
 8005b7c:	f7ff fad7 	bl	800512e <PIDGainSet>

		if(fabs(pp->real_y - pp->target_y[0]) >= pp->f_tol_xy)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005b8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b90:	eeb0 7ae7 	vabs.f32	s14, s15
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8005b9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba2:	db17      	blt.n	8005bd4 <PP_start+0x316>
			PIDGainSet(KE,1.0/fabs(pp->real_y - pp->target_y[0]),&(pp->y));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bb4:	eef0 7ae7 	vabs.f32	s15, s15
 8005bb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	eeb0 0a47 	vmov.f32	s0, s14
 8005bcc:	2002      	movs	r0, #2
 8005bce:	f7ff faae 	bl	800512e <PIDGainSet>
 8005bd2:	e06f      	b.n	8005cb4 <PP_start+0x3f6>

		else
			PIDGainSet(KE,1.0,&(pp->y));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005bda:	4619      	mov	r1, r3
 8005bdc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005be0:	2002      	movs	r0, #2
 8005be2:	f7ff faa4 	bl	800512e <PIDGainSet>
 8005be6:	e065      	b.n	8005cb4 <PP_start+0x3f6>
	}
	else
	{
		if(fabs(pp->real_x - pp->target_x[0]) >= pp->tol_xy)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8005bf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bf8:	eeb0 7ae7 	vabs.f32	s14, s15
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	edd3 7abe 	vldr	s15, [r3, #760]	; 0x2f8
 8005c02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c0a:	db17      	blt.n	8005c3c <PP_start+0x37e>
			PIDGainSet(KE,1.0/fabs(pp->real_x - pp->target_x[0]),&(pp->x));
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8005c18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c1c:	eef0 7ae7 	vabs.f32	s15, s15
 8005c20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005c2e:	4619      	mov	r1, r3
 8005c30:	eeb0 0a47 	vmov.f32	s0, s14
 8005c34:	2002      	movs	r0, #2
 8005c36:	f7ff fa7a 	bl	800512e <PIDGainSet>
 8005c3a:	e008      	b.n	8005c4e <PP_start+0x390>
		else
			PIDGainSet(KE,1.0,&(pp->x));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005c42:	4619      	mov	r1, r3
 8005c44:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005c48:	2002      	movs	r0, #2
 8005c4a:	f7ff fa70 	bl	800512e <PIDGainSet>

		if(fabs(pp->real_y - pp->target_y[0]) >= pp->tol_xy)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005c5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c5e:	eeb0 7ae7 	vabs.f32	s14, s15
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	edd3 7abe 	vldr	s15, [r3, #760]	; 0x2f8
 8005c68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c70:	db17      	blt.n	8005ca2 <PP_start+0x3e4>
			PIDGainSet(KE,1.0/fabs(pp->real_y - pp->target_y[0]),&(pp->y));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005c7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c82:	eef0 7ae7 	vabs.f32	s15, s15
 8005c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005c94:	4619      	mov	r1, r3
 8005c96:	eeb0 0a47 	vmov.f32	s0, s14
 8005c9a:	2002      	movs	r0, #2
 8005c9c:	f7ff fa47 	bl	800512e <PIDGainSet>
 8005ca0:	e008      	b.n	8005cb4 <PP_start+0x3f6>

		else
			PIDGainSet(KE,1.0,&(pp->y));
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005ca8:	4619      	mov	r1, r3
 8005caa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005cae:	2002      	movs	r0, #2
 8005cb0:	f7ff fa3d 	bl	800512e <PIDGainSet>
	}

	PIDGainSet(KU,pp->ku_x[0],&(pp->x));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	edd3 7a85 	vldr	s15, [r3, #532]	; 0x214
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8005cc6:	2003      	movs	r0, #3
 8005cc8:	f7ff fa31 	bl	800512e <PIDGainSet>
	PIDGainSet(KU,pp->ku_y[0],&(pp->y));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	edd3 7a94 	vldr	s15, [r3, #592]	; 0x250
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005cd8:	4619      	mov	r1, r3
 8005cda:	eeb0 0a67 	vmov.f32	s0, s15
 8005cde:	2003      	movs	r0, #3
 8005ce0:	f7ff fa25 	bl	800512e <PIDGainSet>

	pp->point_count=0;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
	pp->crnt_crv_pt=0;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	pp->pp_crv_calc=0;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	pp->pp_start=1;
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005d02:	f043 0301 	orr.w	r3, r3, #1
 8005d06:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
//	sys.navi_vel = 1;
	pp->final_f=0;
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005d10:	f36f 0382 	bfc	r3, #2, #1
 8005d14:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
	pp->rotate=0;
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005d1e:	f36f 03c3 	bfc	r3, #3, #1
 8005d22:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
}
 8005d26:	bf00      	nop
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	ecbd 8b02 	vpop	{d8}
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <PP_stop>:
	pp->final_f=0;
	pp->rotate=0;
}

void PP_stop (PathPlan_t *pp)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b082      	sub	sp, #8
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
	pp->pp_start=0;
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005d40:	f36f 0300 	bfc	r3, #0, #1
 8005d44:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
	PIDDelayInit(&(pp->x));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7ff fb3f 	bl	80053d2 <PIDDelayInit>
	PIDDelayInit(&(pp->y));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7ff fb39 	bl	80053d2 <PIDDelayInit>
	PIDDelayInit(&(pp->z));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7ff fb33 	bl	80053d2 <PIDDelayInit>

}
 8005d6c:	bf00      	nop
 8005d6e:	3708      	adds	r7, #8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <PP_reset>:

void PP_reset (PathPlan_t *pp)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
	pp->pos_x = 0.0;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f04f 0200 	mov.w	r2, #0
 8005d82:	62da      	str	r2, [r3, #44]	; 0x2c
	pp->pos_y = 0.0;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f04f 0200 	mov.w	r2, #0
 8005d8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pp->prev_x = 0.0;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f04f 0200 	mov.w	r2, #0
 8005d92:	631a      	str	r2, [r3, #48]	; 0x30
	pp->prev_y = 0.0;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f04f 0200 	mov.w	r2, #0
 8005d9a:	641a      	str	r2, [r3, #64]	; 0x40
	pp->prev_real_x = 0.0;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f04f 0200 	mov.w	r2, #0
 8005da2:	639a      	str	r2, [r3, #56]	; 0x38
	pp->prev_real_y = 0.0;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f04f 0200 	mov.w	r2, #0
 8005daa:	649a      	str	r2, [r3, #72]	; 0x48
	pp->del_pos_x = 0.0;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f04f 0200 	mov.w	r2, #0
 8005db2:	64da      	str	r2, [r3, #76]	; 0x4c
	pp->del_pos_y = 0.0;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f04f 0200 	mov.w	r2, #0
 8005dba:	651a      	str	r2, [r3, #80]	; 0x50
//		pp->yaw_constant = 0.0;
//		pp->yaw_offset = *(pp->yaw);
//		pp->prev_yaw = *(pp->yaw);
	pp->real_x=0.0;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f04f 0200 	mov.w	r2, #0
 8005dc2:	635a      	str	r2, [r3, #52]	; 0x34
	pp->real_y=0.0;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f04f 0200 	mov.w	r2, #0
 8005dca:	645a      	str	r2, [r3, #68]	; 0x44
	PIDDelayInit(&(pp->x));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7ff fafd 	bl	80053d2 <PIDDelayInit>
	PIDDelayInit(&(pp->y));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7ff faf7 	bl	80053d2 <PIDDelayInit>
	PIDDelayInit(&(pp->z));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7ff faf1 	bl	80053d2 <PIDDelayInit>
//		pp->real_z=0.0;
//	PP_SetZ(0, pp);
}
 8005df0:	bf00      	nop
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <PP_SetZ>:


void PP_SetZ (float z,PathPlan_t *pp)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	ed87 0a01 	vstr	s0, [r7, #4]
 8005e02:	6038      	str	r0, [r7, #0]

	pp->setz=z;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	621a      	str	r2, [r3, #32]
	pp->yaw_constant=0;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	f04f 0200 	mov.w	r2, #0
 8005e10:	629a      	str	r2, [r3, #40]	; 0x28
	//	pp->yaw_offset=*(pp->yaw);
	pp->prev_yaw=*(pp->yaw);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	60da      	str	r2, [r3, #12]
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <PP_SetCrv_Points>:

void PP_SetCrv_Points (int z,PathPlan_t *pp)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
	pp->pp_no_crv_pts = z;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
}
 8005e3a:	bf00      	nop
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
	...

08005e48 <PathPlan>:



void PathPlan (PathPlan_t *pp)
{
 8005e48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005e4c:	ed2d 8b02 	vpush	{d8}
 8005e50:	b084      	sub	sp, #16
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
	// Called every 5ms
	if(pp->point_start) // The start of program
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f000 8134 	beq.w	80060d0 <PathPlan+0x288>
	{
		pp->pos_x=*(pp->qeix);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	62da      	str	r2, [r3, #44]	; 0x2c
		pp->pos_y=*(pp->qeiy);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	63da      	str	r2, [r3, #60]	; 0x3c

		if(*(pp->yaw) < 30.0){
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	edd3 7a00 	vldr	s15, [r3]
 8005e84:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8005e88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e90:	d516      	bpl.n	8005ec0 <PathPlan+0x78>
			if(pp->prev_yaw > 330.0){
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	edd3 7a03 	vldr	s15, [r3, #12]
 8005e98:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005ebc <PathPlan+0x74>
 8005e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ea4:	dd2b      	ble.n	8005efe <PathPlan+0xb6>
				pp->yaw_constant++;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005eac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005eb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 8005eba:	e020      	b.n	8005efe <PathPlan+0xb6>
 8005ebc:	43a50000 	.word	0x43a50000
			}
		}else if(*(pp->yaw) > 330.0){
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	edd3 7a00 	vldr	s15, [r3]
 8005ec8:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8005ebc <PathPlan+0x74>
 8005ecc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ed4:	dd13      	ble.n	8005efe <PathPlan+0xb6>
			if(pp->prev_yaw < 30.0){
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	edd3 7a03 	vldr	s15, [r3, #12]
 8005edc:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8005ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ee8:	d509      	bpl.n	8005efe <PathPlan+0xb6>
				pp->yaw_constant--;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005ef0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ef4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			}
		}

		pp->prev_yaw = *(pp->yaw);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	60da      	str	r2, [r3, #12]
		pp->real_z = *(pp->yaw) + (pp->yaw_constant)*360.0 - pp->yaw_offset+pp->setz;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fa fb1a 	bl	8000548 <__aeabi_f2d>
 8005f14:	4604      	mov	r4, r0
 8005f16:	460d      	mov	r5, r1
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fa fb13 	bl	8000548 <__aeabi_f2d>
 8005f22:	f04f 0200 	mov.w	r2, #0
 8005f26:	4b68      	ldr	r3, [pc, #416]	; (80060c8 <PathPlan+0x280>)
 8005f28:	f7fa fb66 	bl	80005f8 <__aeabi_dmul>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4620      	mov	r0, r4
 8005f32:	4629      	mov	r1, r5
 8005f34:	f7fa f9aa 	bl	800028c <__adddf3>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4614      	mov	r4, r2
 8005f3e:	461d      	mov	r5, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7fa faff 	bl	8000548 <__aeabi_f2d>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4620      	mov	r0, r4
 8005f50:	4629      	mov	r1, r5
 8005f52:	f7fa f999 	bl	8000288 <__aeabi_dsub>
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	4614      	mov	r4, r2
 8005f5c:	461d      	mov	r5, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fa faf0 	bl	8000548 <__aeabi_f2d>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	4629      	mov	r1, r5
 8005f70:	f7fa f98c 	bl	800028c <__adddf3>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4610      	mov	r0, r2
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	f7fa fe34 	bl	8000be8 <__aeabi_d2f>
 8005f80:	4602      	mov	r2, r0
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	611a      	str	r2, [r3, #16]
		pp->real_z_rad = (pp->real_z / 180.0) * M_PI;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fa fadc 	bl	8000548 <__aeabi_f2d>
 8005f90:	f04f 0200 	mov.w	r2, #0
 8005f94:	4b4d      	ldr	r3, [pc, #308]	; (80060cc <PathPlan+0x284>)
 8005f96:	f7fa fc59 	bl	800084c <__aeabi_ddiv>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	4610      	mov	r0, r2
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	a347      	add	r3, pc, #284	; (adr r3, 80060c0 <PathPlan+0x278>)
 8005fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa8:	f7fa fb26 	bl	80005f8 <__aeabi_dmul>
 8005fac:	4602      	mov	r2, r0
 8005fae:	460b      	mov	r3, r1
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	f7fa fe18 	bl	8000be8 <__aeabi_d2f>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	619a      	str	r2, [r3, #24]

		pp->del_pos_x =  (pp->pos_x - pp->prev_x) * cosf(pp->real_z_rad) +
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005fca:	ee37 8a67 	vsub.f32	s16, s14, s15
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	edd3 7a06 	vldr	s15, [r3, #24]
 8005fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8005fd8:	f018 ff3e 	bl	801ee58 <cosf>
 8005fdc:	eef0 7a40 	vmov.f32	s15, s0
 8005fe0:	ee28 8a27 	vmul.f32	s16, s16, s15
				(pp->pos_y - pp->prev_y) * sinf(pp->real_z_rad);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005ff0:	ee77 8a67 	vsub.f32	s17, s14, s15
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	edd3 7a06 	vldr	s15, [r3, #24]
 8005ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8005ffe:	f018 ff73 	bl	801eee8 <sinf>
 8006002:	eef0 7a40 	vmov.f32	s15, s0
 8006006:	ee68 7aa7 	vmul.f32	s15, s17, s15
		pp->del_pos_x =  (pp->pos_x - pp->prev_x) * cosf(pp->real_z_rad) +
 800600a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		pp->del_pos_y = -(pp->pos_x - pp->prev_x) * sinf(pp->real_z_rad) +
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006020:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006024:	eeb1 8a67 	vneg.f32	s16, s15
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	edd3 7a06 	vldr	s15, [r3, #24]
 800602e:	eeb0 0a67 	vmov.f32	s0, s15
 8006032:	f018 ff59 	bl	801eee8 <sinf>
 8006036:	eef0 7a40 	vmov.f32	s15, s0
 800603a:	ee28 8a27 	vmul.f32	s16, s16, s15
				(pp->pos_y - pp->prev_y) * cosf(pp->real_z_rad);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800604a:	ee77 8a67 	vsub.f32	s17, s14, s15
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	edd3 7a06 	vldr	s15, [r3, #24]
 8006054:	eeb0 0a67 	vmov.f32	s0, s15
 8006058:	f018 fefe 	bl	801ee58 <cosf>
 800605c:	eef0 7a40 	vmov.f32	s15, s0
 8006060:	ee68 7aa7 	vmul.f32	s15, s17, s15
		pp->del_pos_y = -(pp->pos_x - pp->prev_x) * sinf(pp->real_z_rad) +
 8006064:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		pp->real_x = pp->real_x + pp->del_pos_x;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800607a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		pp->real_y = pp->real_y + pp->del_pos_y;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8006090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

		pp->prev_x = pp->pos_x;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	631a      	str	r2, [r3, #48]	; 0x30
		pp->prev_y = pp->pos_y;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	641a      	str	r2, [r3, #64]	; 0x40

		pp->prev_real_x = pp->real_x;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	639a      	str	r2, [r3, #56]	; 0x38
		pp->prev_real_y = pp->real_y;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	649a      	str	r2, [r3, #72]	; 0x48
 80060ba:	e009      	b.n	80060d0 <PathPlan+0x288>
 80060bc:	f3af 8000 	nop.w
 80060c0:	54442d18 	.word	0x54442d18
 80060c4:	400921fb 	.word	0x400921fb
 80060c8:	40768000 	.word	0x40768000
 80060cc:	40668000 	.word	0x40668000
	}


	if(pp->point_start && pp->pp_start){ // If path plan started
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f002 8513 	beq.w	8008b08 <PathPlan+0x2cc0>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f002 850a 	beq.w	8008b08 <PathPlan+0x2cc0>

		if(pp->pp_crv_radius[pp->point_count]){
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	3304      	adds	r3, #4
 8006106:	edd3 7a00 	vldr	s15, [r3]
 800610a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800610e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006112:	f001 8389 	beq.w	8007828 <PathPlan+0x19e0>


			if(!pp->pp_crv_calc){
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 3528 	ldr.w	r3, [r3, #1320]	; 0x528
 800611c:	2b00      	cmp	r3, #0
 800611e:	f040 8208 	bne.w	8006532 <PathPlan+0x6ea>
				pp->pp_rad_ptx = ((pp->target_x[pp->point_count] - pp->real_x)/(float)2.0) + (pp->pp_crv_radius[pp->point_count] * sinf(atan2f(pp->target_y[pp->point_count] - pp->real_y, pp->target_x[pp->point_count] - pp->real_x)));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	331a      	adds	r3, #26
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	ed93 7a00 	vldr	s14, [r3]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800613a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800613e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006142:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	3304      	adds	r3, #4
 8006158:	edd3 8a00 	vldr	s17, [r3]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	3328      	adds	r3, #40	; 0x28
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	3304      	adds	r3, #4
 800616c:	ed93 7a00 	vldr	s14, [r3]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006176:	ee77 6a67 	vsub.f32	s13, s14, s15
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	331a      	adds	r3, #26
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	ed93 7a00 	vldr	s14, [r3]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006192:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006196:	eef0 0a67 	vmov.f32	s1, s15
 800619a:	eeb0 0a66 	vmov.f32	s0, s13
 800619e:	f018 fee5 	bl	801ef6c <atan2f>
 80061a2:	eef0 7a40 	vmov.f32	s15, s0
 80061a6:	eeb0 0a67 	vmov.f32	s0, s15
 80061aa:	f018 fe9d 	bl	801eee8 <sinf>
 80061ae:	eef0 7a40 	vmov.f32	s15, s0
 80061b2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80061b6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 80061c0:	edc3 7a00 	vstr	s15, [r3]
				pp->pp_rad_pty = ((pp->target_y[pp->point_count] - pp->real_y)/(float)2.0) - (pp->pp_crv_radius[pp->point_count] * cosf(atan2f(pp->target_y[pp->point_count] - pp->real_y, pp->target_x[pp->point_count] - pp->real_x)));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	3328      	adds	r3, #40	; 0x28
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	3304      	adds	r3, #4
 80061d4:	ed93 7a00 	vldr	s14, [r3]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80061de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061e2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80061e6:	ee87 8a87 	vdiv.f32	s16, s15, s14
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	3304      	adds	r3, #4
 80061fc:	edd3 8a00 	vldr	s17, [r3]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	3328      	adds	r3, #40	; 0x28
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	3304      	adds	r3, #4
 8006210:	ed93 7a00 	vldr	s14, [r3]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800621a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	331a      	adds	r3, #26
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	ed93 7a00 	vldr	s14, [r3]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800623a:	eef0 0a67 	vmov.f32	s1, s15
 800623e:	eeb0 0a66 	vmov.f32	s0, s13
 8006242:	f018 fe93 	bl	801ef6c <atan2f>
 8006246:	eef0 7a40 	vmov.f32	s15, s0
 800624a:	eeb0 0a67 	vmov.f32	s0, s15
 800624e:	f018 fe03 	bl	801ee58 <cosf>
 8006252:	eef0 7a40 	vmov.f32	s15, s0
 8006256:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800625a:	ee78 7a67 	vsub.f32	s15, s16, s15
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8006264:	edc3 7a00 	vstr	s15, [r3]
				pp->pp_crv_const[pp->point_count] = pp->target_z[pp->point_count]/pp->pp_no_crv_pts;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	3338      	adds	r3, #56	; 0x38
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	edd3 6a00 	vldr	s13, [r3]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006280:	ee07 3a90 	vmov	s15, r3
 8006284:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800628e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	edc3 7a00 	vstr	s15, [r3]

				float crvpath = (float)1.0/pp->pp_no_crv_pts;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 80062a6:	ee07 3a90 	vmov	s15, r3
 80062aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062b6:	edc7 7a03 	vstr	s15, [r7, #12]
				for(int i = 0;i<pp->pp_no_crv_pts;i++){
 80062ba:	2300      	movs	r3, #0
 80062bc:	60bb      	str	r3, [r7, #8]
 80062be:	e12d      	b.n	800651c <PathPlan+0x6d4>
					pp->pp_crv_x[i]= powf((1-crvpath),2) * pp->real_x + 2.0*(1-crvpath)*crvpath*pp->pp_rad_ptx + powf(crvpath,2) * pp->target_x[pp->point_count];
 80062c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80062c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062cc:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80062d0:	eeb0 0a67 	vmov.f32	s0, s15
 80062d4:	f018 fe4c 	bl	801ef70 <powf>
 80062d8:	eeb0 7a40 	vmov.f32	s14, s0
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80062e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e6:	ee17 0a90 	vmov	r0, s15
 80062ea:	f7fa f92d 	bl	8000548 <__aeabi_f2d>
 80062ee:	4604      	mov	r4, r0
 80062f0:	460d      	mov	r5, r1
 80062f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80062fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062fe:	ee17 0a90 	vmov	r0, s15
 8006302:	f7fa f921 	bl	8000548 <__aeabi_f2d>
 8006306:	4602      	mov	r2, r0
 8006308:	460b      	mov	r3, r1
 800630a:	f7f9 ffbf 	bl	800028c <__adddf3>
 800630e:	4602      	mov	r2, r0
 8006310:	460b      	mov	r3, r1
 8006312:	4690      	mov	r8, r2
 8006314:	4699      	mov	r9, r3
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f7fa f916 	bl	8000548 <__aeabi_f2d>
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	4640      	mov	r0, r8
 8006322:	4649      	mov	r1, r9
 8006324:	f7fa f968 	bl	80005f8 <__aeabi_dmul>
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	4690      	mov	r8, r2
 800632e:	4699      	mov	r9, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4618      	mov	r0, r3
 800633a:	f7fa f905 	bl	8000548 <__aeabi_f2d>
 800633e:	4602      	mov	r2, r0
 8006340:	460b      	mov	r3, r1
 8006342:	4640      	mov	r0, r8
 8006344:	4649      	mov	r1, r9
 8006346:	f7fa f957 	bl	80005f8 <__aeabi_dmul>
 800634a:	4602      	mov	r2, r0
 800634c:	460b      	mov	r3, r1
 800634e:	4620      	mov	r0, r4
 8006350:	4629      	mov	r1, r5
 8006352:	f7f9 ff9b 	bl	800028c <__adddf3>
 8006356:	4602      	mov	r2, r0
 8006358:	460b      	mov	r3, r1
 800635a:	4614      	mov	r4, r2
 800635c:	461d      	mov	r5, r3
 800635e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8006362:	ed97 0a03 	vldr	s0, [r7, #12]
 8006366:	f018 fe03 	bl	801ef70 <powf>
 800636a:	eeb0 7a40 	vmov.f32	s14, s0
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	331a      	adds	r3, #26
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	edd3 7a00 	vldr	s15, [r3]
 8006380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006384:	ee17 0a90 	vmov	r0, s15
 8006388:	f7fa f8de 	bl	8000548 <__aeabi_f2d>
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	4620      	mov	r0, r4
 8006392:	4629      	mov	r1, r5
 8006394:	f7f9 ff7a 	bl	800028c <__adddf3>
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	4610      	mov	r0, r2
 800639e:	4619      	mov	r1, r3
 80063a0:	f7fa fc22 	bl	8000be8 <__aeabi_d2f>
 80063a4:	4601      	mov	r1, r0
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	6019      	str	r1, [r3, #0]
					pp->pp_crv_y[i]= powf((1-crvpath),2) * pp->real_y + 2.0*(1-crvpath)*crvpath*pp->pp_rad_pty + powf(crvpath,2) * pp->target_y[pp->point_count];
 80063b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80063bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063c0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80063c4:	eeb0 0a67 	vmov.f32	s0, s15
 80063c8:	f018 fdd2 	bl	801ef70 <powf>
 80063cc:	eeb0 7a40 	vmov.f32	s14, s0
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80063d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063da:	ee17 0a90 	vmov	r0, s15
 80063de:	f7fa f8b3 	bl	8000548 <__aeabi_f2d>
 80063e2:	4604      	mov	r4, r0
 80063e4:	460d      	mov	r5, r1
 80063e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80063ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063f2:	ee17 0a90 	vmov	r0, s15
 80063f6:	f7fa f8a7 	bl	8000548 <__aeabi_f2d>
 80063fa:	4602      	mov	r2, r0
 80063fc:	460b      	mov	r3, r1
 80063fe:	f7f9 ff45 	bl	800028c <__adddf3>
 8006402:	4602      	mov	r2, r0
 8006404:	460b      	mov	r3, r1
 8006406:	4690      	mov	r8, r2
 8006408:	4699      	mov	r9, r3
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f7fa f89c 	bl	8000548 <__aeabi_f2d>
 8006410:	4602      	mov	r2, r0
 8006412:	460b      	mov	r3, r1
 8006414:	4640      	mov	r0, r8
 8006416:	4649      	mov	r1, r9
 8006418:	f7fa f8ee 	bl	80005f8 <__aeabi_dmul>
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	4690      	mov	r8, r2
 8006422:	4699      	mov	r9, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4618      	mov	r0, r3
 800642e:	f7fa f88b 	bl	8000548 <__aeabi_f2d>
 8006432:	4602      	mov	r2, r0
 8006434:	460b      	mov	r3, r1
 8006436:	4640      	mov	r0, r8
 8006438:	4649      	mov	r1, r9
 800643a:	f7fa f8dd 	bl	80005f8 <__aeabi_dmul>
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	4620      	mov	r0, r4
 8006444:	4629      	mov	r1, r5
 8006446:	f7f9 ff21 	bl	800028c <__adddf3>
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	4614      	mov	r4, r2
 8006450:	461d      	mov	r5, r3
 8006452:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8006456:	ed97 0a03 	vldr	s0, [r7, #12]
 800645a:	f018 fd89 	bl	801ef70 <powf>
 800645e:	eeb0 7a40 	vmov.f32	s14, s0
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	3328      	adds	r3, #40	; 0x28
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	3304      	adds	r3, #4
 8006472:	edd3 7a00 	vldr	s15, [r3]
 8006476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800647a:	ee17 0a90 	vmov	r0, s15
 800647e:	f7fa f863 	bl	8000548 <__aeabi_f2d>
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	4620      	mov	r0, r4
 8006488:	4629      	mov	r1, r5
 800648a:	f7f9 feff 	bl	800028c <__adddf3>
 800648e:	4602      	mov	r2, r0
 8006490:	460b      	mov	r3, r1
 8006492:	4610      	mov	r0, r2
 8006494:	4619      	mov	r1, r3
 8006496:	f7fa fba7 	bl	8000be8 <__aeabi_d2f>
 800649a:	4601      	mov	r1, r0
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	6019      	str	r1, [r3, #0]
					pp->pp_crv_z[i] = pp->pp_crv_const[pp->point_count] + pp->pp_crv_const[pp->point_count]*i;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	ed93 7a00 	vldr	s14, [r3]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4413      	add	r3, r2
 80064ce:	edd3 6a00 	vldr	s13, [r3]
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	ee07 3a90 	vmov	s15, r3
 80064d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	edc3 7a00 	vstr	s15, [r3]
					crvpath+=(float)1.0/pp->pp_no_crv_pts;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 80064fa:	ee07 3a90 	vmov	s15, r3
 80064fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800650a:	ed97 7a03 	vldr	s14, [r7, #12]
 800650e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006512:	edc7 7a03 	vstr	s15, [r7, #12]
				for(int i = 0;i<pp->pp_no_crv_pts;i++){
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	3301      	adds	r3, #1
 800651a:	60bb      	str	r3, [r7, #8]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	429a      	cmp	r2, r3
 8006526:	f6ff aecb 	blt.w	80062c0 <PathPlan+0x478>
				}
				//				PIDGainSet(KP,(pp->target_vel[pp->point_count]/(float)4.0),&(pp->z));
				pp->pp_crv_calc = 1;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
			}

			pp->error_x = pp->pp_crv_x[pp->crnt_crv_pt] - pp->real_x;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	ed93 7a00 	vldr	s14, [r3]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800654c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
			pp->error_y = pp->pp_crv_y[pp->crnt_crv_pt] - pp->real_y;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	ed93 7a00 	vldr	s14, [r3]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006570:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
			pp->error_z = pp->pp_crv_z[pp->crnt_crv_pt] - pp->real_z;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	ed93 7a00 	vldr	s14, [r3]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	edd3 7a04 	vldr	s15, [r3, #16]
 8006594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8


			if( pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && ((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 80065aa:	3b01      	subs	r3, #1
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d14a      	bne.n	8006646 <PathPlan+0x7fe>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 80065b6:	eef0 7ae7 	vabs.f32	s15, s15
 80065ba:	ee17 0a90 	vmov	r0, s15
 80065be:	f7f9 ffc3 	bl	8000548 <__aeabi_f2d>
 80065c2:	4604      	mov	r4, r0
 80065c4:	460d      	mov	r5, r1
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 80065cc:	eef0 7ae7 	vabs.f32	s15, s15
 80065d0:	ee17 0a90 	vmov	r0, s15
 80065d4:	f7f9 ffb8 	bl	8000548 <__aeabi_f2d>
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	4620      	mov	r0, r4
 80065de:	4629      	mov	r1, r5
 80065e0:	f7f9 fe54 	bl	800028c <__adddf3>
 80065e4:	4602      	mov	r2, r0
 80065e6:	460b      	mov	r3, r1
 80065e8:	4610      	mov	r0, r2
 80065ea:	4619      	mov	r1, r3
 80065ec:	f04f 0200 	mov.w	r2, #0
 80065f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80065f4:	f7fa f92a 	bl	800084c <__aeabi_ddiv>
 80065f8:	4602      	mov	r2, r0
 80065fa:	460b      	mov	r3, r1
 80065fc:	4614      	mov	r4, r2
 80065fe:	461d      	mov	r5, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006606:	4618      	mov	r0, r3
 8006608:	f7f9 ff9e 	bl	8000548 <__aeabi_f2d>
 800660c:	4602      	mov	r2, r0
 800660e:	460b      	mov	r3, r1
 8006610:	4620      	mov	r0, r4
 8006612:	4629      	mov	r1, r5
 8006614:	f7fa fa62 	bl	8000adc <__aeabi_dcmplt>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d013      	beq.n	8006646 <PathPlan+0x7fe>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8006624:	eeb0 7ae7 	vabs.f32	s14, s15
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 800662e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006636:	d506      	bpl.n	8006646 <PathPlan+0x7fe>
				pp->pp_lck = 1.0;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800663e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	e005      	b.n	8006652 <PathPlan+0x80a>
			else
				pp->pp_lck = 0.0;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800664c:	f04f 0200 	mov.w	r2, #0
 8006650:	601a      	str	r2, [r3, #0]

			pp->pp_lck_count = pp->pp_lck_count + 1.0;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8006658:	edd3 7a00 	vldr	s15, [r3]
 800665c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006660:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800666a:	edc3 7a00 	vstr	s15, [r3]

			if(pp->pp_lck_count <= 60.0)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8006674:	edd3 7a00 	vldr	s15, [r3]
 8006678:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8006910 <PathPlan+0xac8>
 800667c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006684:	d811      	bhi.n	80066aa <PathPlan+0x862>
				pp->pp_lck_cal = pp->pp_lck_cal + pp->pp_lck;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800668c:	ed93 7a00 	vldr	s14, [r3]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006696:	edd3 7a00 	vldr	s15, [r3]
 800669a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80066a4:	edc3 7a00 	vstr	s15, [r3]
 80066a8:	e034      	b.n	8006714 <PathPlan+0x8cc>
			else{
				pp->pp_lck_final = (pp->pp_lck_cal) / (pp->pp_lck_count) ;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80066b0:	edd3 6a00 	vldr	s13, [r3]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80066ba:	ed93 7a00 	vldr	s14, [r3]
 80066be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80066c8:	edc3 7a00 	vstr	s15, [r3]
				if(pp->pp_lck_final >= 0.95)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7f9 ff37 	bl	8000548 <__aeabi_f2d>
 80066da:	a38b      	add	r3, pc, #556	; (adr r3, 8006908 <PathPlan+0xac0>)
 80066dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e0:	f7fa fa10 	bl	8000b04 <__aeabi_dcmpge>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d004      	beq.n	80066f4 <PathPlan+0x8ac>
					pp->pp_lck_enb = 1;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 80066f2:	e003      	b.n	80066fc <PathPlan+0x8b4>
				else
					pp->pp_lck_enb = 0;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
				pp->pp_lck_count = 0.0;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8006702:	f04f 0200 	mov.w	r2, #0
 8006706:	601a      	str	r2, [r3, #0]
				pp->pp_lck_cal   = 0.0;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800670e:	f04f 0200 	mov.w	r2, #0
 8006712:	601a      	str	r2, [r3, #0]
			}


			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy_crv){
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 800671a:	eef0 7ae7 	vabs.f32	s15, s15
 800671e:	ee17 0a90 	vmov	r0, s15
 8006722:	f7f9 ff11 	bl	8000548 <__aeabi_f2d>
 8006726:	4604      	mov	r4, r0
 8006728:	460d      	mov	r5, r1
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8006730:	eef0 7ae7 	vabs.f32	s15, s15
 8006734:	ee17 0a90 	vmov	r0, s15
 8006738:	f7f9 ff06 	bl	8000548 <__aeabi_f2d>
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	4620      	mov	r0, r4
 8006742:	4629      	mov	r1, r5
 8006744:	f7f9 fda2 	bl	800028c <__adddf3>
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	4610      	mov	r0, r2
 800674e:	4619      	mov	r1, r3
 8006750:	f04f 0200 	mov.w	r2, #0
 8006754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006758:	f7fa f878 	bl	800084c <__aeabi_ddiv>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	4614      	mov	r4, r2
 8006762:	461d      	mov	r5, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800676a:	4618      	mov	r0, r3
 800676c:	f7f9 feec 	bl	8000548 <__aeabi_f2d>
 8006770:	4602      	mov	r2, r0
 8006772:	460b      	mov	r3, r1
 8006774:	4620      	mov	r0, r4
 8006776:	4629      	mov	r1, r5
 8006778:	f7fa f9b0 	bl	8000adc <__aeabi_dcmplt>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	f000 8462 	beq.w	8007048 <PathPlan+0x1200>
				if(pp->crnt_crv_pt < pp->pp_no_crv_pts - 1){
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006790:	3b01      	subs	r3, #1
 8006792:	429a      	cmp	r2, r3
 8006794:	f280 8135 	bge.w	8006a02 <PathPlan+0xbba>
					PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 800679e:	edd3 7a00 	vldr	s15, [r3]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80067a8:	4619      	mov	r1, r3
 80067aa:	eeb0 0a67 	vmov.f32	s0, s15
 80067ae:	2004      	movs	r0, #4
 80067b0:	f7fe fcbd 	bl	800512e <PIDGainSet>
					pp->crnt_crv_pt++;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
					pp->error_x = pp->pp_crv_x[pp->crnt_crv_pt] - pp->real_x;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	ed93 7a00 	vldr	s14, [r3]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80067dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
					pp->error_y = pp->pp_crv_y[pp->crnt_crv_pt] - pp->real_y;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	ed93 7a00 	vldr	s14, [r3]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006800:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
					pp->error_z = pp->pp_crv_z[pp->crnt_crv_pt] - pp->real_z;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	ed93 7a00 	vldr	s14, [r3]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	edd3 7a04 	vldr	s15, [r3, #16]
 8006824:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8

					if(pp->target_x[pp->point_count]-pp->real_x){
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	331a      	adds	r3, #26
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	ed93 7a00 	vldr	s14, [r3]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006846:	ee77 7a67 	vsub.f32	s15, s14, s15
 800684a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800684e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006852:	d01d      	beq.n	8006890 <PathPlan+0xa48>
						PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	331a      	adds	r3, #26
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	ed93 7a00 	vldr	s14, [r3]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800686c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006870:	eef0 7ae7 	vabs.f32	s15, s15
 8006874:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006878:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006882:	4619      	mov	r1, r3
 8006884:	eeb0 0a47 	vmov.f32	s0, s14
 8006888:	2002      	movs	r0, #2
 800688a:	f7fe fc50 	bl	800512e <PIDGainSet>
 800688e:	e008      	b.n	80068a2 <PathPlan+0xa5a>
					} else {
						PIDGainSet(KE,1.0,&(pp->x));
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006896:	4619      	mov	r1, r3
 8006898:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800689c:	2002      	movs	r0, #2
 800689e:	f7fe fc46 	bl	800512e <PIDGainSet>
					}
					if(pp->target_y[pp->point_count]-pp->real_y){
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	3328      	adds	r3, #40	; 0x28
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	3304      	adds	r3, #4
 80068b2:	ed93 7a00 	vldr	s14, [r3]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80068bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80068c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c8:	d024      	beq.n	8006914 <PathPlan+0xacc>
						PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	3328      	adds	r3, #40	; 0x28
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	3304      	adds	r3, #4
 80068da:	ed93 7a00 	vldr	s14, [r3]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80068e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068e8:	eef0 7ae7 	vabs.f32	s15, s15
 80068ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80068fa:	4619      	mov	r1, r3
 80068fc:	eeb0 0a47 	vmov.f32	s0, s14
 8006900:	2002      	movs	r0, #2
 8006902:	f7fe fc14 	bl	800512e <PIDGainSet>
 8006906:	e00e      	b.n	8006926 <PathPlan+0xade>
 8006908:	66666666 	.word	0x66666666
 800690c:	3fee6666 	.word	0x3fee6666
 8006910:	42700000 	.word	0x42700000
					} else {
						PIDGainSet(KE,1.0,&(pp->y));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800691a:	4619      	mov	r1, r3
 800691c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006920:	2002      	movs	r0, #2
 8006922:	f7fe fc04 	bl	800512e <PIDGainSet>
					}
					PIDGainSet(KP,pp->kp[0],&(pp->x));
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006932:	4619      	mov	r1, r3
 8006934:	eeb0 0a67 	vmov.f32	s0, s15
 8006938:	2004      	movs	r0, #4
 800693a:	f7fe fbf8 	bl	800512e <PIDGainSet>
					PIDGainSet(KP,pp->kp[0],&(pp->y));
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800694a:	4619      	mov	r1, r3
 800694c:	eeb0 0a67 	vmov.f32	s0, s15
 8006950:	2004      	movs	r0, #4
 8006952:	f7fe fbec 	bl	800512e <PIDGainSet>
					PIDGainSet(KI,pp->ki[0],&(pp->x));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006962:	4619      	mov	r1, r3
 8006964:	eeb0 0a67 	vmov.f32	s0, s15
 8006968:	2005      	movs	r0, #5
 800696a:	f7fe fbe0 	bl	800512e <PIDGainSet>
					PIDGainSet(KI,pp->ki[0],&(pp->y));
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800697a:	4619      	mov	r1, r3
 800697c:	eeb0 0a67 	vmov.f32	s0, s15
 8006980:	2005      	movs	r0, #5
 8006982:	f7fe fbd4 	bl	800512e <PIDGainSet>
					PIDGainSet(KD,pp->kd[0],&(pp->x));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006992:	4619      	mov	r1, r3
 8006994:	eeb0 0a67 	vmov.f32	s0, s15
 8006998:	2006      	movs	r0, #6
 800699a:	f7fe fbc8 	bl	800512e <PIDGainSet>
					PIDGainSet(KD,pp->kd[0],&(pp->y));
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80069aa:	4619      	mov	r1, r3
 80069ac:	eeb0 0a67 	vmov.f32	s0, s15
 80069b0:	2006      	movs	r0, #6
 80069b2:	f7fe fbbc 	bl	800512e <PIDGainSet>
					PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	3384      	adds	r3, #132	; 0x84
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	3304      	adds	r3, #4
 80069c6:	edd3 7a00 	vldr	s15, [r3]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80069d0:	4619      	mov	r1, r3
 80069d2:	eeb0 0a67 	vmov.f32	s0, s15
 80069d6:	2003      	movs	r0, #3
 80069d8:	f7fe fba9 	bl	800512e <PIDGainSet>
					PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	3394      	adds	r3, #148	; 0x94
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	edd3 7a00 	vldr	s15, [r3]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80069f4:	4619      	mov	r1, r3
 80069f6:	eeb0 0a67 	vmov.f32	s0, s15
 80069fa:	2003      	movs	r0, #3
 80069fc:	f7fe fb97 	bl	800512e <PIDGainSet>
 8006a00:	e322      	b.n	8007048 <PathPlan+0x1200>


				}else if(pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && (pp->point_count < (pp->target_point - 1)) ){
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	429a      	cmp	r2, r3
 8006a12:	f040 8252 	bne.w	8006eba <PathPlan+0x1072>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006a22:	3b01      	subs	r3, #1
 8006a24:	429a      	cmp	r2, r3
 8006a26:	f280 8248 	bge.w	8006eba <PathPlan+0x1072>
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8006a30:	eef0 7ae7 	vabs.f32	s15, s15
 8006a34:	ee17 0a90 	vmov	r0, s15
 8006a38:	f7f9 fd86 	bl	8000548 <__aeabi_f2d>
 8006a3c:	4604      	mov	r4, r0
 8006a3e:	460d      	mov	r5, r1
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8006a46:	eef0 7ae7 	vabs.f32	s15, s15
 8006a4a:	ee17 0a90 	vmov	r0, s15
 8006a4e:	f7f9 fd7b 	bl	8000548 <__aeabi_f2d>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4620      	mov	r0, r4
 8006a58:	4629      	mov	r1, r5
 8006a5a:	f7f9 fc17 	bl	800028c <__adddf3>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	460b      	mov	r3, r1
 8006a62:	4610      	mov	r0, r2
 8006a64:	4619      	mov	r1, r3
 8006a66:	f04f 0200 	mov.w	r2, #0
 8006a6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a6e:	f7f9 feed 	bl	800084c <__aeabi_ddiv>
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	4614      	mov	r4, r2
 8006a78:	461d      	mov	r5, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7f9 fd61 	bl	8000548 <__aeabi_f2d>
 8006a86:	4602      	mov	r2, r0
 8006a88:	460b      	mov	r3, r1
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	4629      	mov	r1, r5
 8006a8e:	f7fa f825 	bl	8000adc <__aeabi_dcmplt>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 82d6 	beq.w	8007046 <PathPlan+0x11fe>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8006aa0:	eeb0 7ae7 	vabs.f32	s14, s15
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 8006aaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab2:	d400      	bmi.n	8006ab6 <PathPlan+0xc6e>
 8006ab4:	e2c7      	b.n	8007046 <PathPlan+0x11fe>
						if(pp->target_accurate[pp->point_count] == 1.0){
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	3346      	adds	r3, #70	; 0x46
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	edd3 7a00 	vldr	s15, [r3]
 8006aca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ace:	eef4 7a47 	vcmp.f32	s15, s14
 8006ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ad6:	f040 80fd 	bne.w	8006cd4 <PathPlan+0xe8c>
							if(pp->pp_lck_enb == 1){
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	f040 82b0 	bne.w	8007046 <PathPlan+0x11fe>

								pp->point_count++;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006aec:	1c5a      	adds	r2, r3, #1
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
								if(pp->target_x[pp->point_count]-pp->real_x){
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	331a      	adds	r3, #26
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	ed93 7a00 	vldr	s14, [r3]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b10:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b18:	d01d      	beq.n	8006b56 <PathPlan+0xd0e>
									PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	331a      	adds	r3, #26
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	ed93 7a00 	vldr	s14, [r3]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b36:	eef0 7ae7 	vabs.f32	s15, s15
 8006b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006b48:	4619      	mov	r1, r3
 8006b4a:	eeb0 0a47 	vmov.f32	s0, s14
 8006b4e:	2002      	movs	r0, #2
 8006b50:	f7fe faed 	bl	800512e <PIDGainSet>
 8006b54:	e008      	b.n	8006b68 <PathPlan+0xd20>
								} else {
									PIDGainSet(KE,1.0,&(pp->x));
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006b62:	2002      	movs	r0, #2
 8006b64:	f7fe fae3 	bl	800512e <PIDGainSet>
								}
								if(pp->target_y[pp->point_count]-pp->real_y){
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	3328      	adds	r3, #40	; 0x28
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	3304      	adds	r3, #4
 8006b78:	ed93 7a00 	vldr	s14, [r3]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006b82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b86:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b8e:	d01e      	beq.n	8006bce <PathPlan+0xd86>
									PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	3328      	adds	r3, #40	; 0x28
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	ed93 7a00 	vldr	s14, [r3]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006baa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bae:	eef0 7ae7 	vabs.f32	s15, s15
 8006bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	eeb0 0a47 	vmov.f32	s0, s14
 8006bc6:	2002      	movs	r0, #2
 8006bc8:	f7fe fab1 	bl	800512e <PIDGainSet>
 8006bcc:	e008      	b.n	8006be0 <PathPlan+0xd98>
								} else {
									PIDGainSet(KE,1.0,&(pp->y));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006bda:	2002      	movs	r0, #2
 8006bdc:	f7fe faa7 	bl	800512e <PIDGainSet>
								}
								PIDGainSet(KP,pp->kp[0],&(pp->x));
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006bec:	4619      	mov	r1, r3
 8006bee:	eeb0 0a67 	vmov.f32	s0, s15
 8006bf2:	2004      	movs	r0, #4
 8006bf4:	f7fe fa9b 	bl	800512e <PIDGainSet>
								PIDGainSet(KP,pp->kp[0],&(pp->y));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006c04:	4619      	mov	r1, r3
 8006c06:	eeb0 0a67 	vmov.f32	s0, s15
 8006c0a:	2004      	movs	r0, #4
 8006c0c:	f7fe fa8f 	bl	800512e <PIDGainSet>
								PIDGainSet(KI,pp->ki[0],&(pp->x));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8006c22:	2005      	movs	r0, #5
 8006c24:	f7fe fa83 	bl	800512e <PIDGainSet>
								PIDGainSet(KI,pp->ki[0],&(pp->y));
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006c34:	4619      	mov	r1, r3
 8006c36:	eeb0 0a67 	vmov.f32	s0, s15
 8006c3a:	2005      	movs	r0, #5
 8006c3c:	f7fe fa77 	bl	800512e <PIDGainSet>
								PIDGainSet(KD,pp->kd[0],&(pp->x));
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8006c52:	2006      	movs	r0, #6
 8006c54:	f7fe fa6b 	bl	800512e <PIDGainSet>
								PIDGainSet(KD,pp->kd[0],&(pp->y));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006c64:	4619      	mov	r1, r3
 8006c66:	eeb0 0a67 	vmov.f32	s0, s15
 8006c6a:	2006      	movs	r0, #6
 8006c6c:	f7fe fa5f 	bl	800512e <PIDGainSet>
								PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	3384      	adds	r3, #132	; 0x84
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	3304      	adds	r3, #4
 8006c80:	edd3 7a00 	vldr	s15, [r3]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8006c90:	2003      	movs	r0, #3
 8006c92:	f7fe fa4c 	bl	800512e <PIDGainSet>
								PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	3394      	adds	r3, #148	; 0x94
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	edd3 7a00 	vldr	s15, [r3]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006cae:	4619      	mov	r1, r3
 8006cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8006cb4:	2003      	movs	r0, #3
 8006cb6:	f7fe fa3a 	bl	800512e <PIDGainSet>
								pp->crnt_crv_pt=0;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
								pp->pp_crv_calc = 0;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528

								pp->pp_lck_enb = 0;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8006cd2:	e1b8      	b.n	8007046 <PathPlan+0x11fe>

							}
						}else{
							pp->point_count++;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006cda:	1c5a      	adds	r2, r3, #1
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							if(pp->target_x[pp->point_count]-pp->real_x){
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	331a      	adds	r3, #26
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	ed93 7a00 	vldr	s14, [r3]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006cfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006cfe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d06:	d01d      	beq.n	8006d44 <PathPlan+0xefc>
								PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	331a      	adds	r3, #26
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	ed93 7a00 	vldr	s14, [r3]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006d20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d24:	eef0 7ae7 	vabs.f32	s15, s15
 8006d28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006d36:	4619      	mov	r1, r3
 8006d38:	eeb0 0a47 	vmov.f32	s0, s14
 8006d3c:	2002      	movs	r0, #2
 8006d3e:	f7fe f9f6 	bl	800512e <PIDGainSet>
 8006d42:	e008      	b.n	8006d56 <PathPlan+0xf0e>
							} else {
								PIDGainSet(KE,1.0,&(pp->x));
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006d50:	2002      	movs	r0, #2
 8006d52:	f7fe f9ec 	bl	800512e <PIDGainSet>
							}
							if(pp->target_y[pp->point_count]-pp->real_y){
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	3328      	adds	r3, #40	; 0x28
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	3304      	adds	r3, #4
 8006d66:	ed93 7a00 	vldr	s14, [r3]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006d70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d74:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d7c:	d01e      	beq.n	8006dbc <PathPlan+0xf74>
								PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	3328      	adds	r3, #40	; 0x28
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4413      	add	r3, r2
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	ed93 7a00 	vldr	s14, [r3]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006d98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d9c:	eef0 7ae7 	vabs.f32	s15, s15
 8006da0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006da4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006dae:	4619      	mov	r1, r3
 8006db0:	eeb0 0a47 	vmov.f32	s0, s14
 8006db4:	2002      	movs	r0, #2
 8006db6:	f7fe f9ba 	bl	800512e <PIDGainSet>
 8006dba:	e008      	b.n	8006dce <PathPlan+0xf86>
							} else {
								PIDGainSet(KE,1.0,&(pp->y));
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006dc8:	2002      	movs	r0, #2
 8006dca:	f7fe f9b0 	bl	800512e <PIDGainSet>
							}
							PIDGainSet(KP,pp->kp[0],&(pp->x));
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006dda:	4619      	mov	r1, r3
 8006ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8006de0:	2004      	movs	r0, #4
 8006de2:	f7fe f9a4 	bl	800512e <PIDGainSet>
							PIDGainSet(KP,pp->kp[0],&(pp->y));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006df2:	4619      	mov	r1, r3
 8006df4:	eeb0 0a67 	vmov.f32	s0, s15
 8006df8:	2004      	movs	r0, #4
 8006dfa:	f7fe f998 	bl	800512e <PIDGainSet>
							PIDGainSet(KI,pp->ki[0],&(pp->x));
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8006e10:	2005      	movs	r0, #5
 8006e12:	f7fe f98c 	bl	800512e <PIDGainSet>
							PIDGainSet(KI,pp->ki[0],&(pp->y));
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006e22:	4619      	mov	r1, r3
 8006e24:	eeb0 0a67 	vmov.f32	s0, s15
 8006e28:	2005      	movs	r0, #5
 8006e2a:	f7fe f980 	bl	800512e <PIDGainSet>
							PIDGainSet(KD,pp->kd[0],&(pp->x));
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8006e40:	2006      	movs	r0, #6
 8006e42:	f7fe f974 	bl	800512e <PIDGainSet>
							PIDGainSet(KD,pp->kd[0],&(pp->y));
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006e52:	4619      	mov	r1, r3
 8006e54:	eeb0 0a67 	vmov.f32	s0, s15
 8006e58:	2006      	movs	r0, #6
 8006e5a:	f7fe f968 	bl	800512e <PIDGainSet>
							PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	3384      	adds	r3, #132	; 0x84
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	edd3 7a00 	vldr	s15, [r3]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006e78:	4619      	mov	r1, r3
 8006e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8006e7e:	2003      	movs	r0, #3
 8006e80:	f7fe f955 	bl	800512e <PIDGainSet>
							PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	3394      	adds	r3, #148	; 0x94
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	edd3 7a00 	vldr	s15, [r3]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8006ea2:	2003      	movs	r0, #3
 8006ea4:	f7fe f943 	bl	800512e <PIDGainSet>
							pp->crnt_crv_pt=0;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
							pp->pp_crv_calc = 0;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8006eb8:	e0c5      	b.n	8007046 <PathPlan+0x11fe>
						}
					}

				}else if(pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && pp->point_count == (pp->target_point - 1) ){
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	f040 80bd 	bne.w	8007048 <PathPlan+0x1200>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006eda:	3b01      	subs	r3, #1
 8006edc:	429a      	cmp	r2, r3
 8006ede:	f040 80b3 	bne.w	8007048 <PathPlan+0x1200>

					if(fabs(pp->error_x)<pp->f_tol_xy && fabs(pp->error_y)<pp->f_tol_xy && (int)pp->error_z<=pp->f_tol_z){
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8006ee8:	eeb0 7ae7 	vabs.f32	s14, s15
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8006ef2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006efa:	f140 80a5 	bpl.w	8007048 <PathPlan+0x1200>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8006f04:	eeb0 7ae7 	vabs.f32	s14, s15
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8006f0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f16:	f140 8097 	bpl.w	8007048 <PathPlan+0x1200>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8006f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	edd3 7ac1 	vldr	s15, [r3, #772]	; 0x304
 8006f2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f36:	f200 8087 	bhi.w	8007048 <PathPlan+0x1200>

						if(pp->target_accurate[pp->point_count] == 1.0){
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	3346      	adds	r3, #70	; 0x46
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	3304      	adds	r3, #4
 8006f4a:	edd3 7a00 	vldr	s15, [r3]
 8006f4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f52:	eef4 7a47 	vcmp.f32	s15, s14
 8006f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f5a:	d13e      	bne.n	8006fda <PathPlan+0x1192>
							if(pp->pp_lck_enb == 1){
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d170      	bne.n	8007048 <PathPlan+0x1200>
								PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8006f6c:	edd3 7a00 	vldr	s15, [r3]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8006f76:	4619      	mov	r1, r3
 8006f78:	eeb0 0a67 	vmov.f32	s0, s15
 8006f7c:	2004      	movs	r0, #4
 8006f7e:	f7fe f8d6 	bl	800512e <PIDGainSet>
								//								APPStop();
//								RNSStop(&rns);
//								PP_stop(&pp);
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8006f82:	2201      	movs	r2, #1
 8006f84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f88:	487e      	ldr	r0, [pc, #504]	; (8007184 <PathPlan+0x133c>)
 8006f8a:	f00b fd63 	bl	8012a54 <HAL_GPIO_WritePin>
								//								LED4 = 1;
								PIDDelayInit(&(pp->x));
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7fe fa1c 	bl	80053d2 <PIDDelayInit>
								PIDDelayInit(&(pp->y));
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7fe fa16 	bl	80053d2 <PIDDelayInit>
								PIDDelayInit(&(pp->z));
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7fe fa10 	bl	80053d2 <PIDDelayInit>
								pp->crnt_crv_pt=0;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
								pp->pp_crv_calc = 0;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
								pp->pp_start=0;
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8006fc8:	f36f 0300 	bfc	r3, #0, #1
 8006fcc:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
								pp->pp_lck_enb = 0;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8006fd8:	e036      	b.n	8007048 <PathPlan+0x1200>
							}
						}else{
							PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8006fe0:	edd3 7a00 	vldr	s15, [r3]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8006fea:	4619      	mov	r1, r3
 8006fec:	eeb0 0a67 	vmov.f32	s0, s15
 8006ff0:	2004      	movs	r0, #4
 8006ff2:	f7fe f89c 	bl	800512e <PIDGainSet>
//							RNSStop(&rns);
//							PP_stop(&pp);
							//							APPStop();
							//							LED4 = 1;
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ffc:	4861      	ldr	r0, [pc, #388]	; (8007184 <PathPlan+0x133c>)
 8006ffe:	f00b fd29 	bl	8012a54 <HAL_GPIO_WritePin>
							PIDDelayInit(&(pp->x));
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007008:	4618      	mov	r0, r3
 800700a:	f7fe f9e2 	bl	80053d2 <PIDDelayInit>
							PIDDelayInit(&(pp->y));
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007014:	4618      	mov	r0, r3
 8007016:	f7fe f9dc 	bl	80053d2 <PIDDelayInit>
							PIDDelayInit(&(pp->z));
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8007020:	4618      	mov	r0, r3
 8007022:	f7fe f9d6 	bl	80053d2 <PIDDelayInit>
							pp->crnt_crv_pt=0;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
							pp->pp_crv_calc = 0;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
							pp->pp_start=0;
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 800703c:	f36f 0300 	bfc	r3, #0, #1
 8007040:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
 8007044:	e000      	b.n	8007048 <PathPlan+0x1200>
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8007046:	bf00      	nop

				}
			}


			if(pp->pp_start){
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b00      	cmp	r3, #0
 8007056:	f001 8557 	beq.w	8008b08 <PathPlan+0x2cc0>

				pp->dx = pp->pp_crv_x[pp->crnt_crv_pt] - pp->prev_real_x;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	ed93 7a00 	vldr	s14, [r3]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8007074:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
				pp->dy = pp->pp_crv_y[pp->crnt_crv_pt] - pp->prev_real_y;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4413      	add	r3, r2
 800708e:	ed93 7a00 	vldr	s14, [r3]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8007098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

				pp->rotate=0;
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 80070a8:	f36f 03c3 	bfc	r3, #3, #1
 80070ac:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538

				if ((pp->dx != 0.0 || pp->dx != -0.0)&&(pp->dy != -0.0 || pp->dy != 0.0)){
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80070b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80070ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070be:	d107      	bne.n	80070d0 <PathPlan+0x1288>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80070c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80070ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ce:	d021      	beq.n	8007114 <PathPlan+0x12cc>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80070d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80070da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070de:	d107      	bne.n	80070f0 <PathPlan+0x12a8>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80070e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80070ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ee:	d011      	beq.n	8007114 <PathPlan+0x12cc>
					pp->heading = atan2f(pp->dy, pp->dx);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80070fc:	eef0 0a47 	vmov.f32	s1, s14
 8007100:	eeb0 0a67 	vmov.f32	s0, s15
 8007104:	f017 ff32 	bl	801ef6c <atan2f>
 8007108:	eef0 7a40 	vmov.f32	s15, s0
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 8007112:	e048      	b.n	80071a6 <PathPlan+0x135e>
				} else {
					if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy < 0.0) {
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800711a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800711e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007122:	d007      	beq.n	8007134 <PathPlan+0x12ec>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800712a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800712e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007132:	d10b      	bne.n	800714c <PathPlan+0x1304>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800713a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800713e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007142:	d503      	bpl.n	800714c <PathPlan+0x1304>
						pp->heading = 1.5708;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a10      	ldr	r2, [pc, #64]	; (8007188 <PathPlan+0x1340>)
 8007148:	65da      	str	r2, [r3, #92]	; 0x5c
 800714a:	e02c      	b.n	80071a6 <PathPlan+0x135e>
					} else if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy > 0.0) {
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007152:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800715a:	d007      	beq.n	800716c <PathPlan+0x1324>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007162:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800716a:	d111      	bne.n	8007190 <PathPlan+0x1348>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007172:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800717a:	dd09      	ble.n	8007190 <PathPlan+0x1348>
						pp->heading = -1.5708;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a03      	ldr	r2, [pc, #12]	; (800718c <PathPlan+0x1344>)
 8007180:	65da      	str	r2, [r3, #92]	; 0x5c
 8007182:	e010      	b.n	80071a6 <PathPlan+0x135e>
 8007184:	40020800 	.word	0x40020800
 8007188:	3fc90ff9 	.word	0x3fc90ff9
 800718c:	bfc90ff9 	.word	0xbfc90ff9
					} else {
						pp->heading = 0.0;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f04f 0200 	mov.w	r2, #0
 8007196:	65da      	str	r2, [r3, #92]	; 0x5c
						pp->rotate = 1;
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 800719e:	f043 0308 	orr.w	r3, r3, #8
 80071a2:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
					}
				}

				pp->vx  = pp->target_vel[pp->point_count] * cosf(pp->heading);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	3374      	adds	r3, #116	; 0x74
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	ed93 8a00 	vldr	s16, [r3]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80071be:	eeb0 0a67 	vmov.f32	s0, s15
 80071c2:	f017 fe49 	bl	801ee58 <cosf>
 80071c6:	eef0 7a40 	vmov.f32	s15, s0
 80071ca:	ee68 7a27 	vmul.f32	s15, s16, s15
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				pp->vy  = pp->target_vel[pp->point_count] * sinf(pp->heading);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	3374      	adds	r3, #116	; 0x74
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	ed93 8a00 	vldr	s16, [r3]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80071ec:	eeb0 0a67 	vmov.f32	s0, s15
 80071f0:	f017 fe7a 	bl	801eee8 <sinf>
 80071f4:	eef0 7a40 	vmov.f32	s15, s0
 80071f8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

				if(pp->rotate){
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8007208:	f003 0308 	and.w	r3, r3, #8
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b00      	cmp	r3, #0
 8007210:	d007      	beq.n	8007222 <PathPlan+0x13da>
					pp->vx = pp->vy = 0.0;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f04f 0200 	mov.w	r2, #0
 8007218:	665a      	str	r2, [r3, #100]	; 0x64
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	661a      	str	r2, [r3, #96]	; 0x60
				}

				PID(&(pp->x));
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007228:	4618      	mov	r0, r3
 800722a:	f7fe f8f0 	bl	800540e <PID>
				PID(&(pp->y));
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007234:	4618      	mov	r0, r3
 8007236:	f7fe f8ea 	bl	800540e <PID>
				PID(&(pp->z));
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8007240:	4618      	mov	r0, r3
 8007242:	f7fe f8e4 	bl	800540e <PID>

				pp->rux =   pp->outx*cosf(pp->real_z_rad) - pp->outy*sinf(pp->real_z_rad);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	edd3 7a06 	vldr	s15, [r3, #24]
 8007252:	eeb0 0a67 	vmov.f32	s0, s15
 8007256:	f017 fdff 	bl	801ee58 <cosf>
 800725a:	eef0 7a40 	vmov.f32	s15, s0
 800725e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	edd3 7a06 	vldr	s15, [r3, #24]
 800726e:	eeb0 0a67 	vmov.f32	s0, s15
 8007272:	f017 fe39 	bl	801eee8 <sinf>
 8007276:	eef0 7a40 	vmov.f32	s15, s0
 800727a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800727e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
				pp->ruy =   pp->outx*sinf(pp->real_z_rad) + pp->outy*cosf(pp->real_z_rad);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	edd3 7a06 	vldr	s15, [r3, #24]
 8007294:	eeb0 0a67 	vmov.f32	s0, s15
 8007298:	f017 fe26 	bl	801eee8 <sinf>
 800729c:	eef0 7a40 	vmov.f32	s15, s0
 80072a0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	edd3 7a06 	vldr	s15, [r3, #24]
 80072b0:	eeb0 0a67 	vmov.f32	s0, s15
 80072b4:	f017 fdd0 	bl	801ee58 <cosf>
 80072b8:	eef0 7a40 	vmov.f32	s15, s0
 80072bc:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80072c0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	edc3 7ab3 	vstr	s15, [r3, #716]	; 0x2cc
				pp->rvx =   pp->vx*cosf(pp->real_z_rad) - pp->vy*sinf(pp->real_z_rad);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	edd3 7a06 	vldr	s15, [r3, #24]
 80072d6:	eeb0 0a67 	vmov.f32	s0, s15
 80072da:	f017 fdbd 	bl	801ee58 <cosf>
 80072de:	eef0 7a40 	vmov.f32	s15, s0
 80072e2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	edd3 7a06 	vldr	s15, [r3, #24]
 80072f2:	eeb0 0a67 	vmov.f32	s0, s15
 80072f6:	f017 fdf7 	bl	801eee8 <sinf>
 80072fa:	eef0 7a40 	vmov.f32	s15, s0
 80072fe:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007302:	ee78 7a67 	vsub.f32	s15, s16, s15
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	edc3 7ab4 	vstr	s15, [r3, #720]	; 0x2d0
				pp->rvy =   pp->vx*sinf(pp->real_z_rad) + pp->vy*cosf(pp->real_z_rad);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	edd3 7a06 	vldr	s15, [r3, #24]
 8007318:	eeb0 0a67 	vmov.f32	s0, s15
 800731c:	f017 fde4 	bl	801eee8 <sinf>
 8007320:	eef0 7a40 	vmov.f32	s15, s0
 8007324:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	edd3 7a06 	vldr	s15, [r3, #24]
 8007334:	eeb0 0a67 	vmov.f32	s0, s15
 8007338:	f017 fd8e 	bl	801ee58 <cosf>
 800733c:	eef0 7a40 	vmov.f32	s15, s0
 8007340:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007344:	ee78 7a27 	vadd.f32	s15, s16, s15
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	edc3 7ab5 	vstr	s15, [r3, #724]	; 0x2d4

				if(pp->base_shape== 0){
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 8007354:	2b00      	cmp	r3, #0
 8007356:	f040 8161 	bne.w	800761c <PathPlan+0x17d4>
					pp->u1 = 0.707107 * ( pp->ruy - pp->rux) - (pp->outz * 1.0);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8007366:	ee77 7a67 	vsub.f32	s15, s14, s15
 800736a:	ee17 0a90 	vmov	r0, s15
 800736e:	f7f9 f8eb 	bl	8000548 <__aeabi_f2d>
 8007372:	f20f 6338 	addw	r3, pc, #1592	; 0x638
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	f7f9 f93d 	bl	80005f8 <__aeabi_dmul>
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	4614      	mov	r4, r2
 8007384:	461d      	mov	r5, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800738c:	4618      	mov	r0, r3
 800738e:	f7f9 f8db 	bl	8000548 <__aeabi_f2d>
 8007392:	4602      	mov	r2, r0
 8007394:	460b      	mov	r3, r1
 8007396:	4620      	mov	r0, r4
 8007398:	4629      	mov	r1, r5
 800739a:	f7f8 ff75 	bl	8000288 <__aeabi_dsub>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	4610      	mov	r0, r2
 80073a4:	4619      	mov	r1, r3
 80073a6:	f7f9 fc1f 	bl	8000be8 <__aeabi_d2f>
 80073aa:	4602      	mov	r2, r0
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = 0.707107 * ( pp->ruy + pp->rux) + (pp->outz * 1.0);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80073be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073c2:	ee17 0a90 	vmov	r0, s15
 80073c6:	f7f9 f8bf 	bl	8000548 <__aeabi_f2d>
 80073ca:	f20f 53e0 	addw	r3, pc, #1504	; 0x5e0
 80073ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d2:	f7f9 f911 	bl	80005f8 <__aeabi_dmul>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	4614      	mov	r4, r2
 80073dc:	461d      	mov	r5, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7f9 f8af 	bl	8000548 <__aeabi_f2d>
 80073ea:	4602      	mov	r2, r0
 80073ec:	460b      	mov	r3, r1
 80073ee:	4620      	mov	r0, r4
 80073f0:	4629      	mov	r1, r5
 80073f2:	f7f8 ff4b 	bl	800028c <__adddf3>
 80073f6:	4602      	mov	r2, r0
 80073f8:	460b      	mov	r3, r1
 80073fa:	4610      	mov	r0, r2
 80073fc:	4619      	mov	r1, r3
 80073fe:	f7f9 fbf3 	bl	8000be8 <__aeabi_d2f>
 8007402:	4602      	mov	r2, r0
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 0.707107 * ( pp->ruy - pp->rux) + (pp->outz * 1.0);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8007416:	ee77 7a67 	vsub.f32	s15, s14, s15
 800741a:	ee17 0a90 	vmov	r0, s15
 800741e:	f7f9 f893 	bl	8000548 <__aeabi_f2d>
 8007422:	f20f 5388 	addw	r3, pc, #1416	; 0x588
 8007426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742a:	f7f9 f8e5 	bl	80005f8 <__aeabi_dmul>
 800742e:	4602      	mov	r2, r0
 8007430:	460b      	mov	r3, r1
 8007432:	4614      	mov	r4, r2
 8007434:	461d      	mov	r5, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800743c:	4618      	mov	r0, r3
 800743e:	f7f9 f883 	bl	8000548 <__aeabi_f2d>
 8007442:	4602      	mov	r2, r0
 8007444:	460b      	mov	r3, r1
 8007446:	4620      	mov	r0, r4
 8007448:	4629      	mov	r1, r5
 800744a:	f7f8 ff1f 	bl	800028c <__adddf3>
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	4610      	mov	r0, r2
 8007454:	4619      	mov	r1, r3
 8007456:	f7f9 fbc7 	bl	8000be8 <__aeabi_d2f>
 800745a:	4602      	mov	r2, r0
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
					pp->u4 = 0.707107 * ( pp->ruy + pp->rux) - (pp->outz * 1.0);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800746e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007472:	ee17 0a90 	vmov	r0, s15
 8007476:	f7f9 f867 	bl	8000548 <__aeabi_f2d>
 800747a:	f20f 5330 	addw	r3, pc, #1328	; 0x530
 800747e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007482:	f7f9 f8b9 	bl	80005f8 <__aeabi_dmul>
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	4614      	mov	r4, r2
 800748c:	461d      	mov	r5, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007494:	4618      	mov	r0, r3
 8007496:	f7f9 f857 	bl	8000548 <__aeabi_f2d>
 800749a:	4602      	mov	r2, r0
 800749c:	460b      	mov	r3, r1
 800749e:	4620      	mov	r0, r4
 80074a0:	4629      	mov	r1, r5
 80074a2:	f7f8 fef1 	bl	8000288 <__aeabi_dsub>
 80074a6:	4602      	mov	r2, r0
 80074a8:	460b      	mov	r3, r1
 80074aa:	4610      	mov	r0, r2
 80074ac:	4619      	mov	r1, r3
 80074ae:	f7f9 fb9b 	bl	8000be8 <__aeabi_d2f>
 80074b2:	4602      	mov	r2, r0
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4

					pp->v1 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u1;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80074c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074ca:	ee17 0a90 	vmov	r0, s15
 80074ce:	f7f9 f83b 	bl	8000548 <__aeabi_f2d>
 80074d2:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 80074d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074da:	f7f9 f88d 	bl	80005f8 <__aeabi_dmul>
 80074de:	4602      	mov	r2, r0
 80074e0:	460b      	mov	r3, r1
 80074e2:	4614      	mov	r4, r2
 80074e4:	461d      	mov	r5, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7f9 f82b 	bl	8000548 <__aeabi_f2d>
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	4620      	mov	r0, r4
 80074f8:	4629      	mov	r1, r5
 80074fa:	f7f8 fec7 	bl	800028c <__adddf3>
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
 8007502:	4610      	mov	r0, r2
 8007504:	4619      	mov	r1, r3
 8007506:	f7f9 fb6f 	bl	8000be8 <__aeabi_d2f>
 800750a:	4602      	mov	r2, r0
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u2;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800751e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007522:	ee17 0a90 	vmov	r0, s15
 8007526:	f7f9 f80f 	bl	8000548 <__aeabi_f2d>
 800752a:	f20f 4380 	addw	r3, pc, #1152	; 0x480
 800752e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007532:	f7f9 f861 	bl	80005f8 <__aeabi_dmul>
 8007536:	4602      	mov	r2, r0
 8007538:	460b      	mov	r3, r1
 800753a:	4614      	mov	r4, r2
 800753c:	461d      	mov	r5, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8007544:	4618      	mov	r0, r3
 8007546:	f7f8 ffff 	bl	8000548 <__aeabi_f2d>
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	4620      	mov	r0, r4
 8007550:	4629      	mov	r1, r5
 8007552:	f7f8 fe9b 	bl	800028c <__adddf3>
 8007556:	4602      	mov	r2, r0
 8007558:	460b      	mov	r3, r1
 800755a:	4610      	mov	r0, r2
 800755c:	4619      	mov	r1, r3
 800755e:	f7f9 fb43 	bl	8000be8 <__aeabi_d2f>
 8007562:	4602      	mov	r2, r0
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u3;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8007576:	ee77 7a67 	vsub.f32	s15, s14, s15
 800757a:	ee17 0a90 	vmov	r0, s15
 800757e:	f7f8 ffe3 	bl	8000548 <__aeabi_f2d>
 8007582:	f20f 4328 	addw	r3, pc, #1064	; 0x428
 8007586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758a:	f7f9 f835 	bl	80005f8 <__aeabi_dmul>
 800758e:	4602      	mov	r2, r0
 8007590:	460b      	mov	r3, r1
 8007592:	4614      	mov	r4, r2
 8007594:	461d      	mov	r5, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 800759c:	4618      	mov	r0, r3
 800759e:	f7f8 ffd3 	bl	8000548 <__aeabi_f2d>
 80075a2:	4602      	mov	r2, r0
 80075a4:	460b      	mov	r3, r1
 80075a6:	4620      	mov	r0, r4
 80075a8:	4629      	mov	r1, r5
 80075aa:	f7f8 fe6f 	bl	800028c <__adddf3>
 80075ae:	4602      	mov	r2, r0
 80075b0:	460b      	mov	r3, r1
 80075b2:	4610      	mov	r0, r2
 80075b4:	4619      	mov	r1, r3
 80075b6:	f7f9 fb17 	bl	8000be8 <__aeabi_d2f>
 80075ba:	4602      	mov	r2, r0
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
					pp->v4 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u4;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80075ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075d2:	ee17 0a90 	vmov	r0, s15
 80075d6:	f7f8 ffb7 	bl	8000548 <__aeabi_f2d>
 80075da:	a3f4      	add	r3, pc, #976	; (adr r3, 80079ac <PathPlan+0x1b64>)
 80075dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e0:	f7f9 f80a 	bl	80005f8 <__aeabi_dmul>
 80075e4:	4602      	mov	r2, r0
 80075e6:	460b      	mov	r3, r1
 80075e8:	4614      	mov	r4, r2
 80075ea:	461d      	mov	r5, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7f8 ffa8 	bl	8000548 <__aeabi_f2d>
 80075f8:	4602      	mov	r2, r0
 80075fa:	460b      	mov	r3, r1
 80075fc:	4620      	mov	r0, r4
 80075fe:	4629      	mov	r1, r5
 8007600:	f7f8 fe44 	bl	800028c <__adddf3>
 8007604:	4602      	mov	r2, r0
 8007606:	460b      	mov	r3, r1
 8007608:	4610      	mov	r0, r2
 800760a:	4619      	mov	r1, r3
 800760c:	f7f9 faec 	bl	8000be8 <__aeabi_d2f>
 8007610:	4602      	mov	r2, r0
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
//				hb_count = HAL_GetTick();

			}
		}
	}
}
 8007618:	f001 ba76 	b.w	8008b08 <PathPlan+0x2cc0>
				} else if(pp->base_shape==1){
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 8007622:	2b01      	cmp	r3, #1
 8007624:	f041 8270 	bne.w	8008b08 <PathPlan+0x2cc0>
					pp->u1 = (0.866 * pp->ruy) - (0.5 * pp->rux) + (pp->outz * 1.0);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800762e:	4618      	mov	r0, r3
 8007630:	f7f8 ff8a 	bl	8000548 <__aeabi_f2d>
 8007634:	a3d8      	add	r3, pc, #864	; (adr r3, 8007998 <PathPlan+0x1b50>)
 8007636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763a:	f7f8 ffdd 	bl	80005f8 <__aeabi_dmul>
 800763e:	4602      	mov	r2, r0
 8007640:	460b      	mov	r3, r1
 8007642:	4614      	mov	r4, r2
 8007644:	461d      	mov	r5, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800764c:	4618      	mov	r0, r3
 800764e:	f7f8 ff7b 	bl	8000548 <__aeabi_f2d>
 8007652:	f04f 0200 	mov.w	r2, #0
 8007656:	4bd2      	ldr	r3, [pc, #840]	; (80079a0 <PathPlan+0x1b58>)
 8007658:	f7f8 ffce 	bl	80005f8 <__aeabi_dmul>
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	4620      	mov	r0, r4
 8007662:	4629      	mov	r1, r5
 8007664:	f7f8 fe10 	bl	8000288 <__aeabi_dsub>
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	4614      	mov	r4, r2
 800766e:	461d      	mov	r5, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007676:	4618      	mov	r0, r3
 8007678:	f7f8 ff66 	bl	8000548 <__aeabi_f2d>
 800767c:	4602      	mov	r2, r0
 800767e:	460b      	mov	r3, r1
 8007680:	4620      	mov	r0, r4
 8007682:	4629      	mov	r1, r5
 8007684:	f7f8 fe02 	bl	800028c <__adddf3>
 8007688:	4602      	mov	r2, r0
 800768a:	460b      	mov	r3, r1
 800768c:	4610      	mov	r0, r2
 800768e:	4619      	mov	r1, r3
 8007690:	f7f9 faaa 	bl	8000be8 <__aeabi_d2f>
 8007694:	4602      	mov	r2, r0
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = (0.866 * pp->ruy) + (0.5 * pp->rux) - (pp->outz * 1.0);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7f8 ff50 	bl	8000548 <__aeabi_f2d>
 80076a8:	a3bb      	add	r3, pc, #748	; (adr r3, 8007998 <PathPlan+0x1b50>)
 80076aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ae:	f7f8 ffa3 	bl	80005f8 <__aeabi_dmul>
 80076b2:	4602      	mov	r2, r0
 80076b4:	460b      	mov	r3, r1
 80076b6:	4614      	mov	r4, r2
 80076b8:	461d      	mov	r5, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7f8 ff41 	bl	8000548 <__aeabi_f2d>
 80076c6:	f04f 0200 	mov.w	r2, #0
 80076ca:	4bb5      	ldr	r3, [pc, #724]	; (80079a0 <PathPlan+0x1b58>)
 80076cc:	f7f8 ff94 	bl	80005f8 <__aeabi_dmul>
 80076d0:	4602      	mov	r2, r0
 80076d2:	460b      	mov	r3, r1
 80076d4:	4620      	mov	r0, r4
 80076d6:	4629      	mov	r1, r5
 80076d8:	f7f8 fdd8 	bl	800028c <__adddf3>
 80076dc:	4602      	mov	r2, r0
 80076de:	460b      	mov	r3, r1
 80076e0:	4614      	mov	r4, r2
 80076e2:	461d      	mov	r5, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7f8 ff2c 	bl	8000548 <__aeabi_f2d>
 80076f0:	4602      	mov	r2, r0
 80076f2:	460b      	mov	r3, r1
 80076f4:	4620      	mov	r0, r4
 80076f6:	4629      	mov	r1, r5
 80076f8:	f7f8 fdc6 	bl	8000288 <__aeabi_dsub>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4610      	mov	r0, r2
 8007702:	4619      	mov	r1, r3
 8007704:	f7f9 fa70 	bl	8000be8 <__aeabi_d2f>
 8007708:	4602      	mov	r2, r0
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 1.0 * pp->rux + (pp->outz * 1.0);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 800771c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	edc3 7ab8 	vstr	s15, [r3, #736]	; 0x2e0
					pp->v1 = (0.866 * pp->rvy) - (0.5 * pp->rvx) + pp->u1;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800772c:	4618      	mov	r0, r3
 800772e:	f7f8 ff0b 	bl	8000548 <__aeabi_f2d>
 8007732:	a399      	add	r3, pc, #612	; (adr r3, 8007998 <PathPlan+0x1b50>)
 8007734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007738:	f7f8 ff5e 	bl	80005f8 <__aeabi_dmul>
 800773c:	4602      	mov	r2, r0
 800773e:	460b      	mov	r3, r1
 8007740:	4614      	mov	r4, r2
 8007742:	461d      	mov	r5, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800774a:	4618      	mov	r0, r3
 800774c:	f7f8 fefc 	bl	8000548 <__aeabi_f2d>
 8007750:	f04f 0200 	mov.w	r2, #0
 8007754:	4b92      	ldr	r3, [pc, #584]	; (80079a0 <PathPlan+0x1b58>)
 8007756:	f7f8 ff4f 	bl	80005f8 <__aeabi_dmul>
 800775a:	4602      	mov	r2, r0
 800775c:	460b      	mov	r3, r1
 800775e:	4620      	mov	r0, r4
 8007760:	4629      	mov	r1, r5
 8007762:	f7f8 fd91 	bl	8000288 <__aeabi_dsub>
 8007766:	4602      	mov	r2, r0
 8007768:	460b      	mov	r3, r1
 800776a:	4614      	mov	r4, r2
 800776c:	461d      	mov	r5, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007774:	4618      	mov	r0, r3
 8007776:	f7f8 fee7 	bl	8000548 <__aeabi_f2d>
 800777a:	4602      	mov	r2, r0
 800777c:	460b      	mov	r3, r1
 800777e:	4620      	mov	r0, r4
 8007780:	4629      	mov	r1, r5
 8007782:	f7f8 fd83 	bl	800028c <__adddf3>
 8007786:	4602      	mov	r2, r0
 8007788:	460b      	mov	r3, r1
 800778a:	4610      	mov	r0, r2
 800778c:	4619      	mov	r1, r3
 800778e:	f7f9 fa2b 	bl	8000be8 <__aeabi_d2f>
 8007792:	4602      	mov	r2, r0
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = (0.866 * pp->rvy) + (0.5 * pp->rvx) + pp->u2;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7f8 fed1 	bl	8000548 <__aeabi_f2d>
 80077a6:	a37c      	add	r3, pc, #496	; (adr r3, 8007998 <PathPlan+0x1b50>)
 80077a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ac:	f7f8 ff24 	bl	80005f8 <__aeabi_dmul>
 80077b0:	4602      	mov	r2, r0
 80077b2:	460b      	mov	r3, r1
 80077b4:	4614      	mov	r4, r2
 80077b6:	461d      	mov	r5, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 80077be:	4618      	mov	r0, r3
 80077c0:	f7f8 fec2 	bl	8000548 <__aeabi_f2d>
 80077c4:	f04f 0200 	mov.w	r2, #0
 80077c8:	4b75      	ldr	r3, [pc, #468]	; (80079a0 <PathPlan+0x1b58>)
 80077ca:	f7f8 ff15 	bl	80005f8 <__aeabi_dmul>
 80077ce:	4602      	mov	r2, r0
 80077d0:	460b      	mov	r3, r1
 80077d2:	4620      	mov	r0, r4
 80077d4:	4629      	mov	r1, r5
 80077d6:	f7f8 fd59 	bl	800028c <__adddf3>
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	4614      	mov	r4, r2
 80077e0:	461d      	mov	r5, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7f8 fead 	bl	8000548 <__aeabi_f2d>
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	4620      	mov	r0, r4
 80077f4:	4629      	mov	r1, r5
 80077f6:	f7f8 fd49 	bl	800028c <__adddf3>
 80077fa:	4602      	mov	r2, r0
 80077fc:	460b      	mov	r3, r1
 80077fe:	4610      	mov	r0, r2
 8007800:	4619      	mov	r1, r3
 8007802:	f7f9 f9f1 	bl	8000be8 <__aeabi_d2f>
 8007806:	4602      	mov	r2, r0
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 1.0 * pp->rvx + pp->u3;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	ed93 7ab4 	vldr	s14, [r3, #720]	; 0x2d0
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 800781a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	edc3 7abc 	vstr	s15, [r3, #752]	; 0x2f0
}
 8007824:	f001 b970 	b.w	8008b08 <PathPlan+0x2cc0>
			led3 = 1;
 8007828:	4a5e      	ldr	r2, [pc, #376]	; (80079a4 <PathPlan+0x1b5c>)
 800782a:	7853      	ldrb	r3, [r2, #1]
 800782c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007830:	7053      	strb	r3, [r2, #1]
			pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	331a      	adds	r3, #26
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	ed93 7a00 	vldr	s14, [r3]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800784a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
			pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	3328      	adds	r3, #40	; 0x28
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	4413      	add	r3, r2
 8007862:	3304      	adds	r3, #4
 8007864:	ed93 7a00 	vldr	s14, [r3]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800786e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
			pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	3338      	adds	r3, #56	; 0x38
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4413      	add	r3, r2
 8007886:	ed93 7a00 	vldr	s14, [r3]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	edd3 7a04 	vldr	s15, [r3, #16]
 8007890:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 80078a0:	eef0 7ae7 	vabs.f32	s15, s15
 80078a4:	ee17 0a90 	vmov	r0, s15
 80078a8:	f7f8 fe4e 	bl	8000548 <__aeabi_f2d>
 80078ac:	4604      	mov	r4, r0
 80078ae:	460d      	mov	r5, r1
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 80078b6:	eef0 7ae7 	vabs.f32	s15, s15
 80078ba:	ee17 0a90 	vmov	r0, s15
 80078be:	f7f8 fe43 	bl	8000548 <__aeabi_f2d>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4620      	mov	r0, r4
 80078c8:	4629      	mov	r1, r5
 80078ca:	f7f8 fcdf 	bl	800028c <__adddf3>
 80078ce:	4602      	mov	r2, r0
 80078d0:	460b      	mov	r3, r1
 80078d2:	4610      	mov	r0, r2
 80078d4:	4619      	mov	r1, r3
 80078d6:	f04f 0200 	mov.w	r2, #0
 80078da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80078de:	f7f8 ffb5 	bl	800084c <__aeabi_ddiv>
 80078e2:	4602      	mov	r2, r0
 80078e4:	460b      	mov	r3, r1
 80078e6:	4614      	mov	r4, r2
 80078e8:	461d      	mov	r5, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7f8 fe29 	bl	8000548 <__aeabi_f2d>
 80078f6:	4602      	mov	r2, r0
 80078f8:	460b      	mov	r3, r1
 80078fa:	4620      	mov	r0, r4
 80078fc:	4629      	mov	r1, r5
 80078fe:	f7f9 f8ed 	bl	8000adc <__aeabi_dcmplt>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d013      	beq.n	8007930 <PathPlan+0x1ae8>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 800790e:	eeb0 7ae7 	vabs.f32	s14, s15
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 8007918:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800791c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007920:	d506      	bpl.n	8007930 <PathPlan+0x1ae8>
				pp->pp_lck = 1.0;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007928:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800792c:	601a      	str	r2, [r3, #0]
 800792e:	e005      	b.n	800793c <PathPlan+0x1af4>
				pp->pp_lck = 0.0;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007936:	f04f 0200 	mov.w	r2, #0
 800793a:	601a      	str	r2, [r3, #0]
			pp->pp_lck_count = pp->pp_lck_count + 1.0;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007942:	edd3 7a00 	vldr	s15, [r3]
 8007946:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800794a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007954:	edc3 7a00 	vstr	s15, [r3]
			if(pp->pp_lck_count <= 60.0)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800795e:	edd3 7a00 	vldr	s15, [r3]
 8007962:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80079a8 <PathPlan+0x1b60>
 8007966:	eef4 7ac7 	vcmpe.f32	s15, s14
 800796a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800796e:	d821      	bhi.n	80079b4 <PathPlan+0x1b6c>
				pp->pp_lck_cal = pp->pp_lck_cal + pp->pp_lck;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007976:	ed93 7a00 	vldr	s14, [r3]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007980:	edd3 7a00 	vldr	s15, [r3]
 8007984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800798e:	edc3 7a00 	vstr	s15, [r3]
 8007992:	e045      	b.n	8007a20 <PathPlan+0x1bd8>
 8007994:	f3af 8000 	nop.w
 8007998:	a1cac083 	.word	0xa1cac083
 800799c:	3febb645 	.word	0x3febb645
 80079a0:	3fe00000 	.word	0x3fe00000
 80079a4:	40020814 	.word	0x40020814
 80079a8:	42700000 	.word	0x42700000
 80079ac:	dbf8b9bb 	.word	0xdbf8b9bb
 80079b0:	3fe6a09e 	.word	0x3fe6a09e
				pp->pp_lck_final = (pp->pp_lck_cal) / (pp->pp_lck_count) ;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80079ba:	edd3 6a00 	vldr	s13, [r3]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80079c4:	ed93 7a00 	vldr	s14, [r3]
 80079c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80079d2:	edc3 7a00 	vstr	s15, [r3]
				if(pp->pp_lck_final >= 0.95)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4618      	mov	r0, r3
 80079e0:	f7f8 fdb2 	bl	8000548 <__aeabi_f2d>
 80079e4:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 80079e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ec:	f7f9 f88a 	bl	8000b04 <__aeabi_dcmpge>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d004      	beq.n	8007a00 <PathPlan+0x1bb8>
					pp->pp_lck_enb = 1;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 80079fe:	e003      	b.n	8007a08 <PathPlan+0x1bc0>
					pp->pp_lck_enb = 0;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
				pp->pp_lck_count = 0.0;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007a0e:	f04f 0200 	mov.w	r2, #0
 8007a12:	601a      	str	r2, [r3, #0]
				pp->pp_lck_cal   = 0.0;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007a1a:	f04f 0200 	mov.w	r2, #0
 8007a1e:	601a      	str	r2, [r3, #0]
			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){ // Already almost at destination
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8007a26:	eef0 7ae7 	vabs.f32	s15, s15
 8007a2a:	ee17 0a90 	vmov	r0, s15
 8007a2e:	f7f8 fd8b 	bl	8000548 <__aeabi_f2d>
 8007a32:	4604      	mov	r4, r0
 8007a34:	460d      	mov	r5, r1
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8007a3c:	eef0 7ae7 	vabs.f32	s15, s15
 8007a40:	ee17 0a90 	vmov	r0, s15
 8007a44:	f7f8 fd80 	bl	8000548 <__aeabi_f2d>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	4629      	mov	r1, r5
 8007a50:	f7f8 fc1c 	bl	800028c <__adddf3>
 8007a54:	4602      	mov	r2, r0
 8007a56:	460b      	mov	r3, r1
 8007a58:	4610      	mov	r0, r2
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	f04f 0200 	mov.w	r2, #0
 8007a60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a64:	f7f8 fef2 	bl	800084c <__aeabi_ddiv>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	4614      	mov	r4, r2
 8007a6e:	461d      	mov	r5, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7f8 fd66 	bl	8000548 <__aeabi_f2d>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	460b      	mov	r3, r1
 8007a80:	4620      	mov	r0, r4
 8007a82:	4629      	mov	r1, r5
 8007a84:	f7f9 f82a 	bl	8000adc <__aeabi_dcmplt>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f000 84a6 	beq.w	80083dc <PathPlan+0x2594>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8007a96:	eeb0 7ae7 	vabs.f32	s14, s15
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 8007aa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa8:	f140 8498 	bpl.w	80083dc <PathPlan+0x2594>
				if(pp->point_count < (pp->target_point - 2)){ // Checking is second last point or not
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007ab8:	3b02      	subs	r3, #2
 8007aba:	429a      	cmp	r2, r3
 8007abc:	f280 8206 	bge.w	8007ecc <PathPlan+0x2084>
					if(pp->target_accurate[pp->point_count] == 1.0){ // point_lock enable
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	3346      	adds	r3, #70	; 0x46
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	4413      	add	r3, r2
 8007ace:	3304      	adds	r3, #4
 8007ad0:	edd3 7a00 	vldr	s15, [r3]
 8007ad4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ad8:	eef4 7a47 	vcmp.f32	s15, s14
 8007adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ae0:	f040 813a 	bne.w	8007d58 <PathPlan+0x1f10>
						if(pp->pp_lck_enb == 1){ // After < tol some time, lck_enb = 1
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	f040 8476 	bne.w	80083dc <PathPlan+0x2594>
							pp->point_count++; // Showing reached previous destination
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007af6:	1c5a      	adds	r2, r3, #1
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	331a      	adds	r3, #26
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	ed93 7a00 	vldr	s14, [r3]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007b16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
							pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	3328      	adds	r3, #40	; 0x28
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	3304      	adds	r3, #4
 8007b30:	ed93 7a00 	vldr	s14, [r3]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
							pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	3338      	adds	r3, #56	; 0x38
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4413      	add	r3, r2
 8007b52:	ed93 7a00 	vldr	s14, [r3]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	edd3 7a04 	vldr	s15, [r3, #16]
 8007b5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
							if(pp->target_x[pp->point_count]-pp->real_x){
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	331a      	adds	r3, #26
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	4413      	add	r3, r2
 8007b74:	ed93 7a00 	vldr	s14, [r3]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007b7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b82:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b8a:	d03d      	beq.n	8007c08 <PathPlan+0x1dc0>
										1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	331a      	adds	r3, #26
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4413      	add	r3, r2
 8007b9a:	ed93 7a00 	vldr	s14, [r3]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ba8:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8007bac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_x[pp->point_count],
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	3384      	adds	r3, #132	; 0x84
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	3304      	adds	r3, #4
 8007bc4:	edd3 7a00 	vldr	s15, [r3]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	edd3 6aa3 	vldr	s13, [r3, #652]	; 0x28c
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	ed93 6aa5 	vldr	s12, [r3, #660]	; 0x294
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	edd3 5aa7 	vldr	s11, [r3, #668]	; 0x29c
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007be0:	4618      	mov	r0, r3
 8007be2:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007be6:	eeb0 3a65 	vmov.f32	s6, s11
 8007bea:	eef0 2a46 	vmov.f32	s5, s12
 8007bee:	eeb0 2a66 	vmov.f32	s4, s13
 8007bf2:	eef0 1a67 	vmov.f32	s3, s15
 8007bf6:	eeb0 1a47 	vmov.f32	s2, s14
 8007bfa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007bfe:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8007ec8 <PathPlan+0x2080>
 8007c02:	f7fd fa61 	bl	80050c8 <PIDGainInit>
 8007c06:	e028      	b.n	8007c5a <PathPlan+0x1e12>
										pp->ku_x[pp->point_count],
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	3384      	adds	r3, #132	; 0x84
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	3304      	adds	r3, #4
 8007c18:	edd3 7a00 	vldr	s15, [r3]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	ed93 7aa3 	vldr	s14, [r3, #652]	; 0x28c
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	edd3 6aa5 	vldr	s13, [r3, #660]	; 0x294
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	ed93 6aa7 	vldr	s12, [r3, #668]	; 0x29c
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007c34:	4618      	mov	r0, r3
 8007c36:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007c3a:	eeb0 3a46 	vmov.f32	s6, s12
 8007c3e:	eef0 2a66 	vmov.f32	s5, s13
 8007c42:	eeb0 2a47 	vmov.f32	s4, s14
 8007c46:	eef0 1a67 	vmov.f32	s3, s15
 8007c4a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8007c4e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007c52:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8007ec8 <PathPlan+0x2080>
 8007c56:	f7fd fa37 	bl	80050c8 <PIDGainInit>
							if(pp->target_y[pp->point_count]-pp->real_y){
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	3328      	adds	r3, #40	; 0x28
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	3304      	adds	r3, #4
 8007c6a:	ed93 7a00 	vldr	s14, [r3]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c78:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c80:	d03d      	beq.n	8007cfe <PathPlan+0x1eb6>
										1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	3328      	adds	r3, #40	; 0x28
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4413      	add	r3, r2
 8007c90:	3304      	adds	r3, #4
 8007c92:	ed93 7a00 	vldr	s14, [r3]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ca0:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8007ca4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ca8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_y[pp->point_count],
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	3394      	adds	r3, #148	; 0x94
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	edd3 7a00 	vldr	s15, [r3]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	edd3 6aa3 	vldr	s13, [r3, #652]	; 0x28c
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	ed93 6aa5 	vldr	s12, [r3, #660]	; 0x294
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	edd3 5aa7 	vldr	s11, [r3, #668]	; 0x29c
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007cdc:	eeb0 3a65 	vmov.f32	s6, s11
 8007ce0:	eef0 2a46 	vmov.f32	s5, s12
 8007ce4:	eeb0 2a66 	vmov.f32	s4, s13
 8007ce8:	eef0 1a67 	vmov.f32	s3, s15
 8007cec:	eeb0 1a47 	vmov.f32	s2, s14
 8007cf0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007cf4:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8007ec8 <PathPlan+0x2080>
 8007cf8:	f7fd f9e6 	bl	80050c8 <PIDGainInit>
 8007cfc:	e027      	b.n	8007d4e <PathPlan+0x1f06>
										pp->ku_y[pp->point_count],
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	3394      	adds	r3, #148	; 0x94
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	edd3 7a00 	vldr	s15, [r3]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	ed93 7aa3 	vldr	s14, [r3, #652]	; 0x28c
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	edd3 6aa5 	vldr	s13, [r3, #660]	; 0x294
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	ed93 6aa7 	vldr	s12, [r3, #668]	; 0x29c
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007d28:	4618      	mov	r0, r3
 8007d2a:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007d2e:	eeb0 3a46 	vmov.f32	s6, s12
 8007d32:	eef0 2a66 	vmov.f32	s5, s13
 8007d36:	eeb0 2a47 	vmov.f32	s4, s14
 8007d3a:	eef0 1a67 	vmov.f32	s3, s15
 8007d3e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8007d42:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007d46:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8007ec8 <PathPlan+0x2080>
 8007d4a:	f7fd f9bd 	bl	80050c8 <PIDGainInit>
							pp->pp_lck_enb = 0;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8007d56:	e341      	b.n	80083dc <PathPlan+0x2594>
						pp->point_count++; // Assuming reached previous point
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007d5e:	1c5a      	adds	r2, r3, #1
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
						pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	331a      	adds	r3, #26
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	ed93 7a00 	vldr	s14, [r3]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007d7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	3328      	adds	r3, #40	; 0x28
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	4413      	add	r3, r2
 8007d96:	3304      	adds	r3, #4
 8007d98:	ed93 7a00 	vldr	s14, [r3]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007da2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	3338      	adds	r3, #56	; 0x38
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	ed93 7a00 	vldr	s14, [r3]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	edd3 7a04 	vldr	s15, [r3, #16]
 8007dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
						if(pp->target_x[pp->point_count]-pp->real_x){
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	331a      	adds	r3, #26
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	4413      	add	r3, r2
 8007ddc:	ed93 7a00 	vldr	s14, [r3]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007dea:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007df2:	d01d      	beq.n	8007e30 <PathPlan+0x1fe8>
							PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	331a      	adds	r3, #26
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	ed93 7a00 	vldr	s14, [r3]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007e0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e10:	eef0 7ae7 	vabs.f32	s15, s15
 8007e14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007e22:	4619      	mov	r1, r3
 8007e24:	eeb0 0a47 	vmov.f32	s0, s14
 8007e28:	2002      	movs	r0, #2
 8007e2a:	f7fd f980 	bl	800512e <PIDGainSet>
 8007e2e:	e008      	b.n	8007e42 <PathPlan+0x1ffa>
							PIDGainSet(KE,1.0,&(pp->x));
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007e36:	4619      	mov	r1, r3
 8007e38:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007e3c:	2002      	movs	r0, #2
 8007e3e:	f7fd f976 	bl	800512e <PIDGainSet>
						if(pp->target_y[pp->point_count]-pp->real_y){
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	3328      	adds	r3, #40	; 0x28
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	3304      	adds	r3, #4
 8007e52:	ed93 7a00 	vldr	s14, [r3]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e60:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e68:	d01e      	beq.n	8007ea8 <PathPlan+0x2060>
							PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	3328      	adds	r3, #40	; 0x28
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	4413      	add	r3, r2
 8007e78:	3304      	adds	r3, #4
 8007e7a:	ed93 7a00 	vldr	s14, [r3]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007e84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e88:	eef0 7ae7 	vabs.f32	s15, s15
 8007e8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	eeb0 0a47 	vmov.f32	s0, s14
 8007ea0:	2002      	movs	r0, #2
 8007ea2:	f7fd f944 	bl	800512e <PIDGainSet>
 8007ea6:	e299      	b.n	80083dc <PathPlan+0x2594>
							PIDGainSet(KE,1.0,&(pp->y));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007eae:	4619      	mov	r1, r3
 8007eb0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007eb4:	2002      	movs	r0, #2
 8007eb6:	f7fd f93a 	bl	800512e <PIDGainSet>
 8007eba:	e28f      	b.n	80083dc <PathPlan+0x2594>
 8007ebc:	f3af 8000 	nop.w
 8007ec0:	66666666 	.word	0x66666666
 8007ec4:	3fee6666 	.word	0x3fee6666
 8007ec8:	3ba3d70a 	.word	0x3ba3d70a
				} else if(pp->point_count == (pp->target_point - 2)){ // Reached second last going last point
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007ed8:	3b02      	subs	r3, #2
 8007eda:	429a      	cmp	r2, r3
 8007edc:	f040 81fe 	bne.w	80082dc <PathPlan+0x2494>
					if(pp->target_accurate[pp->point_count] == 1.0){ // point_lock enable
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	3346      	adds	r3, #70	; 0x46
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4413      	add	r3, r2
 8007eee:	3304      	adds	r3, #4
 8007ef0:	edd3 7a00 	vldr	s15, [r3]
 8007ef4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ef8:	eef4 7a47 	vcmp.f32	s15, s14
 8007efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f00:	f040 813a 	bne.w	8008178 <PathPlan+0x2330>
						if(pp->pp_lck_enb == 1){
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	f040 8266 	bne.w	80083dc <PathPlan+0x2594>
							pp->point_count++;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f16:	1c5a      	adds	r2, r3, #1
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	331a      	adds	r3, #26
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4413      	add	r3, r2
 8007f2c:	ed93 7a00 	vldr	s14, [r3]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
							pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	3328      	adds	r3, #40	; 0x28
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	4413      	add	r3, r2
 8007f4e:	3304      	adds	r3, #4
 8007f50:	ed93 7a00 	vldr	s14, [r3]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
							pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	3338      	adds	r3, #56	; 0x38
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	ed93 7a00 	vldr	s14, [r3]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	edd3 7a04 	vldr	s15, [r3, #16]
 8007f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
							if(pp->target_x[pp->point_count]-pp->real_x){
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	331a      	adds	r3, #26
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	4413      	add	r3, r2
 8007f94:	ed93 7a00 	vldr	s14, [r3]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007f9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fa2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007faa:	d03d      	beq.n	8008028 <PathPlan+0x21e0>
										1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	331a      	adds	r3, #26
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4413      	add	r3, r2
 8007fba:	ed93 7a00 	vldr	s14, [r3]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007fc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fc8:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8007fcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_x[pp->point_count],
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	3384      	adds	r3, #132	; 0x84
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	3304      	adds	r3, #4
 8007fe4:	edd3 7a00 	vldr	s15, [r3]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	edd3 6aa4 	vldr	s13, [r3, #656]	; 0x290
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	ed93 6aa6 	vldr	s12, [r3, #664]	; 0x298
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	edd3 5aa8 	vldr	s11, [r3, #672]	; 0x2a0
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8008000:	4618      	mov	r0, r3
 8008002:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8008006:	eeb0 3a65 	vmov.f32	s6, s11
 800800a:	eef0 2a46 	vmov.f32	s5, s12
 800800e:	eeb0 2a66 	vmov.f32	s4, s13
 8008012:	eef0 1a67 	vmov.f32	s3, s15
 8008016:	eeb0 1a47 	vmov.f32	s2, s14
 800801a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800801e:	ed1f 0a56 	vldr	s0, [pc, #-344]	; 8007ec8 <PathPlan+0x2080>
 8008022:	f7fd f851 	bl	80050c8 <PIDGainInit>
 8008026:	e028      	b.n	800807a <PathPlan+0x2232>
										pp->ku_x[pp->point_count],
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	3384      	adds	r3, #132	; 0x84
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4413      	add	r3, r2
 8008036:	3304      	adds	r3, #4
 8008038:	edd3 7a00 	vldr	s15, [r3]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	ed93 7aa4 	vldr	s14, [r3, #656]	; 0x290
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	edd3 6aa6 	vldr	s13, [r3, #664]	; 0x298
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	ed93 6aa8 	vldr	s12, [r3, #672]	; 0x2a0
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8008054:	4618      	mov	r0, r3
 8008056:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 800805a:	eeb0 3a46 	vmov.f32	s6, s12
 800805e:	eef0 2a66 	vmov.f32	s5, s13
 8008062:	eeb0 2a47 	vmov.f32	s4, s14
 8008066:	eef0 1a67 	vmov.f32	s3, s15
 800806a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800806e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8008072:	ed1f 0a6b 	vldr	s0, [pc, #-428]	; 8007ec8 <PathPlan+0x2080>
 8008076:	f7fd f827 	bl	80050c8 <PIDGainInit>
							if(pp->target_y[pp->point_count]-pp->real_y){
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	3328      	adds	r3, #40	; 0x28
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	3304      	adds	r3, #4
 800808a:	ed93 7a00 	vldr	s14, [r3]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008094:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008098:	eef5 7a40 	vcmp.f32	s15, #0.0
 800809c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080a0:	d03d      	beq.n	800811e <PathPlan+0x22d6>
										1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	3328      	adds	r3, #40	; 0x28
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	3304      	adds	r3, #4
 80080b2:	ed93 7a00 	vldr	s14, [r3]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80080bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080c0:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 80080c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_y[pp->point_count],
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	3394      	adds	r3, #148	; 0x94
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	edd3 7a00 	vldr	s15, [r3]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	edd3 6aa4 	vldr	s13, [r3, #656]	; 0x290
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	ed93 6aa6 	vldr	s12, [r3, #664]	; 0x298
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	edd3 5aa8 	vldr	s11, [r3, #672]	; 0x2a0
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80080f6:	4618      	mov	r0, r3
 80080f8:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80080fc:	eeb0 3a65 	vmov.f32	s6, s11
 8008100:	eef0 2a46 	vmov.f32	s5, s12
 8008104:	eeb0 2a66 	vmov.f32	s4, s13
 8008108:	eef0 1a67 	vmov.f32	s3, s15
 800810c:	eeb0 1a47 	vmov.f32	s2, s14
 8008110:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8008114:	ed1f 0a94 	vldr	s0, [pc, #-592]	; 8007ec8 <PathPlan+0x2080>
 8008118:	f7fc ffd6 	bl	80050c8 <PIDGainInit>
 800811c:	e027      	b.n	800816e <PathPlan+0x2326>
										pp->ku_y[pp->point_count],
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	3394      	adds	r3, #148	; 0x94
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4413      	add	r3, r2
 800812c:	edd3 7a00 	vldr	s15, [r3]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	ed93 7aa4 	vldr	s14, [r3, #656]	; 0x290
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	edd3 6aa6 	vldr	s13, [r3, #664]	; 0x298
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	ed93 6aa8 	vldr	s12, [r3, #672]	; 0x2a0
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8008148:	4618      	mov	r0, r3
 800814a:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 800814e:	eeb0 3a46 	vmov.f32	s6, s12
 8008152:	eef0 2a66 	vmov.f32	s5, s13
 8008156:	eeb0 2a47 	vmov.f32	s4, s14
 800815a:	eef0 1a67 	vmov.f32	s3, s15
 800815e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8008162:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8008166:	ed1f 0aa8 	vldr	s0, [pc, #-672]	; 8007ec8 <PathPlan+0x2080>
 800816a:	f7fc ffad 	bl	80050c8 <PIDGainInit>
							pp->pp_lck_enb = 0;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8008176:	e131      	b.n	80083dc <PathPlan+0x2594>
						pp->point_count++;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800817e:	1c5a      	adds	r2, r3, #1
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
						pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	331a      	adds	r3, #26
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	ed93 7a00 	vldr	s14, [r3]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800819e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	3328      	adds	r3, #40	; 0x28
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4413      	add	r3, r2
 80081b6:	3304      	adds	r3, #4
 80081b8:	ed93 7a00 	vldr	s14, [r3]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80081c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	3338      	adds	r3, #56	; 0x38
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	4413      	add	r3, r2
 80081da:	ed93 7a00 	vldr	s14, [r3]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80081e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
						if(pp->target_x[pp->point_count]-pp->real_x){
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	331a      	adds	r3, #26
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4413      	add	r3, r2
 80081fc:	ed93 7a00 	vldr	s14, [r3]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008206:	ee77 7a67 	vsub.f32	s15, s14, s15
 800820a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800820e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008212:	d01d      	beq.n	8008250 <PathPlan+0x2408>
							PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	331a      	adds	r3, #26
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4413      	add	r3, r2
 8008222:	ed93 7a00 	vldr	s14, [r3]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800822c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008230:	eef0 7ae7 	vabs.f32	s15, s15
 8008234:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008238:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8008242:	4619      	mov	r1, r3
 8008244:	eeb0 0a47 	vmov.f32	s0, s14
 8008248:	2002      	movs	r0, #2
 800824a:	f7fc ff70 	bl	800512e <PIDGainSet>
 800824e:	e008      	b.n	8008262 <PathPlan+0x241a>
							PIDGainSet(KE,1.0,&(pp->x));
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8008256:	4619      	mov	r1, r3
 8008258:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800825c:	2002      	movs	r0, #2
 800825e:	f7fc ff66 	bl	800512e <PIDGainSet>
						if(pp->target_y[pp->point_count]-pp->real_y){
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	3328      	adds	r3, #40	; 0x28
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	3304      	adds	r3, #4
 8008272:	ed93 7a00 	vldr	s14, [r3]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800827c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008280:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008288:	d01e      	beq.n	80082c8 <PathPlan+0x2480>
							PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	3328      	adds	r3, #40	; 0x28
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	3304      	adds	r3, #4
 800829a:	ed93 7a00 	vldr	s14, [r3]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80082a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082a8:	eef0 7ae7 	vabs.f32	s15, s15
 80082ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80082ba:	4619      	mov	r1, r3
 80082bc:	eeb0 0a47 	vmov.f32	s0, s14
 80082c0:	2002      	movs	r0, #2
 80082c2:	f7fc ff34 	bl	800512e <PIDGainSet>
 80082c6:	e089      	b.n	80083dc <PathPlan+0x2594>
							PIDGainSet(KE,1.0,&(pp->y));
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80082ce:	4619      	mov	r1, r3
 80082d0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80082d4:	2002      	movs	r0, #2
 80082d6:	f7fc ff2a 	bl	800512e <PIDGainSet>
 80082da:	e07f      	b.n	80083dc <PathPlan+0x2594>
				}else if(fabs(pp->error_x)<pp->f_tol_xy && fabs(pp->error_y)<pp->f_tol_xy && (int)pp->error_z<=pp->f_tol_z){ // Reached last point
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 80082e2:	eeb0 7ae7 	vabs.f32	s14, s15
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 80082ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80082f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082f4:	d572      	bpl.n	80083dc <PathPlan+0x2594>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 80082fc:	eeb0 7ae7 	vabs.f32	s14, s15
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8008306:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800830a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800830e:	d565      	bpl.n	80083dc <PathPlan+0x2594>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8008316:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800831a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	edd3 7ac1 	vldr	s15, [r3, #772]	; 0x304
 8008324:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800832c:	d856      	bhi.n	80083dc <PathPlan+0x2594>
					if(pp->target_accurate[pp->point_count] == 1.0){
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	3346      	adds	r3, #70	; 0x46
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	4413      	add	r3, r2
 800833c:	3304      	adds	r3, #4
 800833e:	edd3 7a00 	vldr	s15, [r3]
 8008342:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008346:	eef4 7a47 	vcmp.f32	s15, s14
 800834a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800834e:	d127      	bne.n	80083a0 <PathPlan+0x2558>
						if(pp->pp_lck_enb == 1){
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8008356:	2b01      	cmp	r3, #1
 8008358:	d140      	bne.n	80083dc <PathPlan+0x2594>
							led3 = 0;
 800835a:	4a7d      	ldr	r2, [pc, #500]	; (8008550 <PathPlan+0x2708>)
 800835c:	7853      	ldrb	r3, [r2, #1]
 800835e:	f36f 13c7 	bfc	r3, #7, #1
 8008362:	7053      	strb	r3, [r2, #1]
							PIDDelayInit(&(pp->x));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800836a:	4618      	mov	r0, r3
 800836c:	f7fd f831 	bl	80053d2 <PIDDelayInit>
							PIDDelayInit(&(pp->y));
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8008376:	4618      	mov	r0, r3
 8008378:	f7fd f82b 	bl	80053d2 <PIDDelayInit>
							PIDDelayInit(&(pp->z));
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8008382:	4618      	mov	r0, r3
 8008384:	f7fd f825 	bl	80053d2 <PIDDelayInit>
							pp->pp_start=0;
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 800838e:	f36f 0300 	bfc	r3, #0, #1
 8008392:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
							pp->pp_lck_enb = 0;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 800839e:	e01d      	b.n	80083dc <PathPlan+0x2594>
						led3 = 0;
 80083a0:	4a6b      	ldr	r2, [pc, #428]	; (8008550 <PathPlan+0x2708>)
 80083a2:	7853      	ldrb	r3, [r2, #1]
 80083a4:	f36f 13c7 	bfc	r3, #7, #1
 80083a8:	7053      	strb	r3, [r2, #1]
						PIDDelayInit(&(pp->x));
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7fd f80e 	bl	80053d2 <PIDDelayInit>
						PIDDelayInit(&(pp->y));
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fd f808 	bl	80053d2 <PIDDelayInit>
						PIDDelayInit(&(pp->z));
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7fd f802 	bl	80053d2 <PIDDelayInit>
						pp->pp_start=0;
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 80083d4:	f36f 0300 	bfc	r3, #0, #1
 80083d8:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
			if(pp->pp_start){
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 838d 	beq.w	8008b08 <PathPlan+0x2cc0>
				pp->dx = pp->target_x[pp->point_count] - pp->prev_real_x;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	331a      	adds	r3, #26
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	ed93 7a00 	vldr	s14, [r3]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8008406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
				pp->dy = pp->target_y[pp->point_count] - pp->prev_real_y;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	3328      	adds	r3, #40	; 0x28
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	3304      	adds	r3, #4
 8008420:	ed93 7a00 	vldr	s14, [r3]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800842a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
				pp->rotate=0;
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 800843a:	f36f 03c3 	bfc	r3, #3, #1
 800843e:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
				if ((pp->dx != 0.0 || pp->dx != -0.0)&&(pp->dy != -0.0 || pp->dy != 0.0)){
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008448:	eef5 7a40 	vcmp.f32	s15, #0.0
 800844c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008450:	d107      	bne.n	8008462 <PathPlan+0x261a>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008458:	eef5 7a40 	vcmp.f32	s15, #0.0
 800845c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008460:	d021      	beq.n	80084a6 <PathPlan+0x265e>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008468:	eef5 7a40 	vcmp.f32	s15, #0.0
 800846c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008470:	d107      	bne.n	8008482 <PathPlan+0x263a>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008478:	eef5 7a40 	vcmp.f32	s15, #0.0
 800847c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008480:	d011      	beq.n	80084a6 <PathPlan+0x265e>
					pp->heading = atan2f(pp->dy, pp->dx);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800848e:	eef0 0a47 	vmov.f32	s1, s14
 8008492:	eeb0 0a67 	vmov.f32	s0, s15
 8008496:	f016 fd69 	bl	801ef6c <atan2f>
 800849a:	eef0 7a40 	vmov.f32	s15, s0
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 80084a4:	e075      	b.n	8008592 <PathPlan+0x274a>
					if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy < 0.0) { // Backward
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80084ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80084b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084b4:	d007      	beq.n	80084c6 <PathPlan+0x267e>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80084bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80084c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084c4:	d10b      	bne.n	80084de <PathPlan+0x2696>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80084cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80084d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084d4:	d503      	bpl.n	80084de <PathPlan+0x2696>
						pp->heading = -1.5708;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a1e      	ldr	r2, [pc, #120]	; (8008554 <PathPlan+0x270c>)
 80084da:	65da      	str	r2, [r3, #92]	; 0x5c
 80084dc:	e059      	b.n	8008592 <PathPlan+0x274a>
					} else if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy > 0.0) { // Forward
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80084e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80084e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ec:	d007      	beq.n	80084fe <PathPlan+0x26b6>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80084f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80084f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084fc:	d10b      	bne.n	8008516 <PathPlan+0x26ce>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008504:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800850c:	dd03      	ble.n	8008516 <PathPlan+0x26ce>
						pp->heading = 1.5708;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a11      	ldr	r2, [pc, #68]	; (8008558 <PathPlan+0x2710>)
 8008512:	65da      	str	r2, [r3, #92]	; 0x5c
 8008514:	e03d      	b.n	8008592 <PathPlan+0x274a>
					} else if((pp->dy == 0.0 || pp->dy == -0.0) && pp->dx > 0){ // Right
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800851c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008524:	d007      	beq.n	8008536 <PathPlan+0x26ee>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800852c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008534:	d112      	bne.n	800855c <PathPlan+0x2714>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800853c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008544:	dd0a      	ble.n	800855c <PathPlan+0x2714>
						pp->heading = 0.0;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f04f 0200 	mov.w	r2, #0
 800854c:	65da      	str	r2, [r3, #92]	; 0x5c
 800854e:	e020      	b.n	8008592 <PathPlan+0x274a>
 8008550:	40020814 	.word	0x40020814
 8008554:	bfc90ff9 	.word	0xbfc90ff9
 8008558:	3fc90ff9 	.word	0x3fc90ff9
					else if((pp->dy == 0.0 || pp->dy == -0.0) && pp->dx < 0) // Left
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008562:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800856a:	d007      	beq.n	800857c <PathPlan+0x2734>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008572:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800857a:	d10a      	bne.n	8008592 <PathPlan+0x274a>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008582:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800858a:	d502      	bpl.n	8008592 <PathPlan+0x274a>
						pp->heading = M_PI;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4ad6      	ldr	r2, [pc, #856]	; (80088e8 <PathPlan+0x2aa0>)
 8008590:	65da      	str	r2, [r3, #92]	; 0x5c
				pp->vx  = pp->target_vel[pp->point_count] * cosf(pp->heading);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	3374      	adds	r3, #116	; 0x74
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4413      	add	r3, r2
 80085a0:	ed93 8a00 	vldr	s16, [r3]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80085aa:	eeb0 0a67 	vmov.f32	s0, s15
 80085ae:	f016 fc53 	bl	801ee58 <cosf>
 80085b2:	eef0 7a40 	vmov.f32	s15, s0
 80085b6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				pp->vy  = pp->target_vel[pp->point_count] * sinf(pp->heading);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	3374      	adds	r3, #116	; 0x74
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	4413      	add	r3, r2
 80085ce:	ed93 8a00 	vldr	s16, [r3]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80085d8:	eeb0 0a67 	vmov.f32	s0, s15
 80085dc:	f016 fc84 	bl	801eee8 <sinf>
 80085e0:	eef0 7a40 	vmov.f32	s15, s0
 80085e4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
				if(pp->rotate){
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80085f4:	f003 0308 	and.w	r3, r3, #8
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d007      	beq.n	800860e <PathPlan+0x27c6>
					pp->vx = pp->vy = 0.0;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f04f 0200 	mov.w	r2, #0
 8008604:	665a      	str	r2, [r3, #100]	; 0x64
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	661a      	str	r2, [r3, #96]	; 0x60
				PID(&(pp->x));
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8008614:	4618      	mov	r0, r3
 8008616:	f7fc fefa 	bl	800540e <PID>
				PID(&(pp->y));
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8008620:	4618      	mov	r0, r3
 8008622:	f7fc fef4 	bl	800540e <PID>
				PID(&(pp->z));
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800862c:	4618      	mov	r0, r3
 800862e:	f7fc feee 	bl	800540e <PID>
				pp->rux =   pp->outx*cosf(pp->real_z_rad) - pp->outy*sinf(pp->real_z_rad);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	edd3 7a06 	vldr	s15, [r3, #24]
 800863e:	eeb0 0a67 	vmov.f32	s0, s15
 8008642:	f016 fc09 	bl	801ee58 <cosf>
 8008646:	eef0 7a40 	vmov.f32	s15, s0
 800864a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	edd3 7a06 	vldr	s15, [r3, #24]
 800865a:	eeb0 0a67 	vmov.f32	s0, s15
 800865e:	f016 fc43 	bl	801eee8 <sinf>
 8008662:	eef0 7a40 	vmov.f32	s15, s0
 8008666:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800866a:	ee78 7a67 	vsub.f32	s15, s16, s15
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
				pp->ruy =   pp->outx*sinf(pp->real_z_rad) + pp->outy*cosf(pp->real_z_rad);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	edd3 7a06 	vldr	s15, [r3, #24]
 8008680:	eeb0 0a67 	vmov.f32	s0, s15
 8008684:	f016 fc30 	bl	801eee8 <sinf>
 8008688:	eef0 7a40 	vmov.f32	s15, s0
 800868c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	edd3 7a06 	vldr	s15, [r3, #24]
 800869c:	eeb0 0a67 	vmov.f32	s0, s15
 80086a0:	f016 fbda 	bl	801ee58 <cosf>
 80086a4:	eef0 7a40 	vmov.f32	s15, s0
 80086a8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80086ac:	ee78 7a27 	vadd.f32	s15, s16, s15
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	edc3 7ab3 	vstr	s15, [r3, #716]	; 0x2cc
				pp->rvx =   pp->vx*cosf(pp->real_z_rad) - pp->vy*sinf(pp->real_z_rad);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	edd3 7a06 	vldr	s15, [r3, #24]
 80086c2:	eeb0 0a67 	vmov.f32	s0, s15
 80086c6:	f016 fbc7 	bl	801ee58 <cosf>
 80086ca:	eef0 7a40 	vmov.f32	s15, s0
 80086ce:	ee28 8a27 	vmul.f32	s16, s16, s15
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	edd3 7a06 	vldr	s15, [r3, #24]
 80086de:	eeb0 0a67 	vmov.f32	s0, s15
 80086e2:	f016 fc01 	bl	801eee8 <sinf>
 80086e6:	eef0 7a40 	vmov.f32	s15, s0
 80086ea:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80086ee:	ee78 7a67 	vsub.f32	s15, s16, s15
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	edc3 7ab4 	vstr	s15, [r3, #720]	; 0x2d0
				pp->rvy =   pp->vx*sinf(pp->real_z_rad) + pp->vy*cosf(pp->real_z_rad);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	edd3 7a06 	vldr	s15, [r3, #24]
 8008704:	eeb0 0a67 	vmov.f32	s0, s15
 8008708:	f016 fbee 	bl	801eee8 <sinf>
 800870c:	eef0 7a40 	vmov.f32	s15, s0
 8008710:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	edd3 7a06 	vldr	s15, [r3, #24]
 8008720:	eeb0 0a67 	vmov.f32	s0, s15
 8008724:	f016 fb98 	bl	801ee58 <cosf>
 8008728:	eef0 7a40 	vmov.f32	s15, s0
 800872c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8008730:	ee78 7a27 	vadd.f32	s15, s16, s15
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	edc3 7ab5 	vstr	s15, [r3, #724]	; 0x2d4
				if(pp->base_shape== fwd_omni){
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 8008740:	2b02      	cmp	r3, #2
 8008742:	f040 80dd 	bne.w	8008900 <PathPlan+0x2ab8>
					pp->u1 = (pp->outz * 1.0);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = -pp->outz * 1.0;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8008758:	eef1 7a67 	vneg.f32	s15, s15
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	edc3 7ab7 	vstr	s15, [r3, #732]	; 0x2dc
					pp->u3 = (pp->outz * 1.0);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
					pp->u4 = -(pp->outz * 1.0);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008774:	4618      	mov	r0, r3
 8008776:	f7f7 fee7 	bl	8000548 <__aeabi_f2d>
 800877a:	4602      	mov	r2, r0
 800877c:	460b      	mov	r3, r1
 800877e:	4610      	mov	r0, r2
 8008780:	4619      	mov	r1, r3
 8008782:	f7f8 fa31 	bl	8000be8 <__aeabi_d2f>
 8008786:	4603      	mov	r3, r0
 8008788:	ee07 3a90 	vmov	s15, r3
 800878c:	eef1 7a67 	vneg.f32	s15, s15
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	edc3 7ab9 	vstr	s15, [r3, #740]	; 0x2e4
					pp->v1 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u1;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80087a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087a6:	ee17 0a90 	vmov	r0, s15
 80087aa:	f7f7 fecd 	bl	8000548 <__aeabi_f2d>
 80087ae:	a34c      	add	r3, pc, #304	; (adr r3, 80088e0 <PathPlan+0x2a98>)
 80087b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b4:	f7f7 ff20 	bl	80005f8 <__aeabi_dmul>
 80087b8:	4602      	mov	r2, r0
 80087ba:	460b      	mov	r3, r1
 80087bc:	4614      	mov	r4, r2
 80087be:	461d      	mov	r5, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7f7 febe 	bl	8000548 <__aeabi_f2d>
 80087cc:	4602      	mov	r2, r0
 80087ce:	460b      	mov	r3, r1
 80087d0:	4620      	mov	r0, r4
 80087d2:	4629      	mov	r1, r5
 80087d4:	f7f7 fd5a 	bl	800028c <__adddf3>
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	4610      	mov	r0, r2
 80087de:	4619      	mov	r1, r3
 80087e0:	f7f8 fa02 	bl	8000be8 <__aeabi_d2f>
 80087e4:	4602      	mov	r2, r0
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u2;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80087f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087fc:	ee17 0a90 	vmov	r0, s15
 8008800:	f7f7 fea2 	bl	8000548 <__aeabi_f2d>
 8008804:	a336      	add	r3, pc, #216	; (adr r3, 80088e0 <PathPlan+0x2a98>)
 8008806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880a:	f7f7 fef5 	bl	80005f8 <__aeabi_dmul>
 800880e:	4602      	mov	r2, r0
 8008810:	460b      	mov	r3, r1
 8008812:	4614      	mov	r4, r2
 8008814:	461d      	mov	r5, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800881c:	4618      	mov	r0, r3
 800881e:	f7f7 fe93 	bl	8000548 <__aeabi_f2d>
 8008822:	4602      	mov	r2, r0
 8008824:	460b      	mov	r3, r1
 8008826:	4620      	mov	r0, r4
 8008828:	4629      	mov	r1, r5
 800882a:	f7f7 fd2f 	bl	800028c <__adddf3>
 800882e:	4602      	mov	r2, r0
 8008830:	460b      	mov	r3, r1
 8008832:	4610      	mov	r0, r2
 8008834:	4619      	mov	r1, r3
 8008836:	f7f8 f9d7 	bl	8000be8 <__aeabi_d2f>
 800883a:	4602      	mov	r2, r0
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u3;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800884e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008852:	ee17 0a90 	vmov	r0, s15
 8008856:	f7f7 fe77 	bl	8000548 <__aeabi_f2d>
 800885a:	a321      	add	r3, pc, #132	; (adr r3, 80088e0 <PathPlan+0x2a98>)
 800885c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008860:	f7f7 feca 	bl	80005f8 <__aeabi_dmul>
 8008864:	4602      	mov	r2, r0
 8008866:	460b      	mov	r3, r1
 8008868:	4614      	mov	r4, r2
 800886a:	461d      	mov	r5, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8008872:	4618      	mov	r0, r3
 8008874:	f7f7 fe68 	bl	8000548 <__aeabi_f2d>
 8008878:	4602      	mov	r2, r0
 800887a:	460b      	mov	r3, r1
 800887c:	4620      	mov	r0, r4
 800887e:	4629      	mov	r1, r5
 8008880:	f7f7 fd04 	bl	800028c <__adddf3>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	4610      	mov	r0, r2
 800888a:	4619      	mov	r1, r3
 800888c:	f7f8 f9ac 	bl	8000be8 <__aeabi_d2f>
 8008890:	4602      	mov	r2, r0
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
					pp->v4 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u4;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80088a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088a8:	ee17 0a90 	vmov	r0, s15
 80088ac:	f7f7 fe4c 	bl	8000548 <__aeabi_f2d>
 80088b0:	a30b      	add	r3, pc, #44	; (adr r3, 80088e0 <PathPlan+0x2a98>)
 80088b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b6:	f7f7 fe9f 	bl	80005f8 <__aeabi_dmul>
 80088ba:	4602      	mov	r2, r0
 80088bc:	460b      	mov	r3, r1
 80088be:	4614      	mov	r4, r2
 80088c0:	461d      	mov	r5, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7f7 fe3d 	bl	8000548 <__aeabi_f2d>
 80088ce:	4602      	mov	r2, r0
 80088d0:	460b      	mov	r3, r1
 80088d2:	4620      	mov	r0, r4
 80088d4:	4629      	mov	r1, r5
 80088d6:	f7f7 fcd9 	bl	800028c <__adddf3>
 80088da:	4602      	mov	r2, r0
 80088dc:	e006      	b.n	80088ec <PathPlan+0x2aa4>
 80088de:	bf00      	nop
 80088e0:	dbf8b9bb 	.word	0xdbf8b9bb
 80088e4:	3fe6a09e 	.word	0x3fe6a09e
 80088e8:	40490fdb 	.word	0x40490fdb
 80088ec:	460b      	mov	r3, r1
 80088ee:	4610      	mov	r0, r2
 80088f0:	4619      	mov	r1, r3
 80088f2:	f7f8 f979 	bl	8000be8 <__aeabi_d2f>
 80088f6:	4602      	mov	r2, r0
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
 80088fe:	e103      	b.n	8008b08 <PathPlan+0x2cc0>
				} else if(pp->base_shape== 1){
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 8008906:	2b01      	cmp	r3, #1
 8008908:	f040 80fe 	bne.w	8008b08 <PathPlan+0x2cc0>
					pp->u1 = (0.866 * pp->ruy) - (0.5 * pp->rux) + (pp->outz * 1.0);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008912:	4618      	mov	r0, r3
 8008914:	f7f7 fe18 	bl	8000548 <__aeabi_f2d>
 8008918:	a37f      	add	r3, pc, #508	; (adr r3, 8008b18 <PathPlan+0x2cd0>)
 800891a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891e:	f7f7 fe6b 	bl	80005f8 <__aeabi_dmul>
 8008922:	4602      	mov	r2, r0
 8008924:	460b      	mov	r3, r1
 8008926:	4614      	mov	r4, r2
 8008928:	461d      	mov	r5, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008930:	4618      	mov	r0, r3
 8008932:	f7f7 fe09 	bl	8000548 <__aeabi_f2d>
 8008936:	f04f 0200 	mov.w	r2, #0
 800893a:	4b79      	ldr	r3, [pc, #484]	; (8008b20 <PathPlan+0x2cd8>)
 800893c:	f7f7 fe5c 	bl	80005f8 <__aeabi_dmul>
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	4620      	mov	r0, r4
 8008946:	4629      	mov	r1, r5
 8008948:	f7f7 fc9e 	bl	8000288 <__aeabi_dsub>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	4614      	mov	r4, r2
 8008952:	461d      	mov	r5, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800895a:	4618      	mov	r0, r3
 800895c:	f7f7 fdf4 	bl	8000548 <__aeabi_f2d>
 8008960:	4602      	mov	r2, r0
 8008962:	460b      	mov	r3, r1
 8008964:	4620      	mov	r0, r4
 8008966:	4629      	mov	r1, r5
 8008968:	f7f7 fc90 	bl	800028c <__adddf3>
 800896c:	4602      	mov	r2, r0
 800896e:	460b      	mov	r3, r1
 8008970:	4610      	mov	r0, r2
 8008972:	4619      	mov	r1, r3
 8008974:	f7f8 f938 	bl	8000be8 <__aeabi_d2f>
 8008978:	4602      	mov	r2, r0
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = (0.866 * pp->ruy) + (0.5 * pp->rux) - (pp->outz * 1.0);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008986:	4618      	mov	r0, r3
 8008988:	f7f7 fdde 	bl	8000548 <__aeabi_f2d>
 800898c:	a362      	add	r3, pc, #392	; (adr r3, 8008b18 <PathPlan+0x2cd0>)
 800898e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008992:	f7f7 fe31 	bl	80005f8 <__aeabi_dmul>
 8008996:	4602      	mov	r2, r0
 8008998:	460b      	mov	r3, r1
 800899a:	4614      	mov	r4, r2
 800899c:	461d      	mov	r5, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7f7 fdcf 	bl	8000548 <__aeabi_f2d>
 80089aa:	f04f 0200 	mov.w	r2, #0
 80089ae:	4b5c      	ldr	r3, [pc, #368]	; (8008b20 <PathPlan+0x2cd8>)
 80089b0:	f7f7 fe22 	bl	80005f8 <__aeabi_dmul>
 80089b4:	4602      	mov	r2, r0
 80089b6:	460b      	mov	r3, r1
 80089b8:	4620      	mov	r0, r4
 80089ba:	4629      	mov	r1, r5
 80089bc:	f7f7 fc66 	bl	800028c <__adddf3>
 80089c0:	4602      	mov	r2, r0
 80089c2:	460b      	mov	r3, r1
 80089c4:	4614      	mov	r4, r2
 80089c6:	461d      	mov	r5, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7f7 fdba 	bl	8000548 <__aeabi_f2d>
 80089d4:	4602      	mov	r2, r0
 80089d6:	460b      	mov	r3, r1
 80089d8:	4620      	mov	r0, r4
 80089da:	4629      	mov	r1, r5
 80089dc:	f7f7 fc54 	bl	8000288 <__aeabi_dsub>
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	4610      	mov	r0, r2
 80089e6:	4619      	mov	r1, r3
 80089e8:	f7f8 f8fe 	bl	8000be8 <__aeabi_d2f>
 80089ec:	4602      	mov	r2, r0
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 1.0 * pp->rux + (pp->outz * 1.0);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8008a00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	edc3 7ab8 	vstr	s15, [r3, #736]	; 0x2e0
					pp->v1 = (0.866 * pp->rvy) - (0.5 * pp->rvx) + pp->u1;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7f7 fd99 	bl	8000548 <__aeabi_f2d>
 8008a16:	a340      	add	r3, pc, #256	; (adr r3, 8008b18 <PathPlan+0x2cd0>)
 8008a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1c:	f7f7 fdec 	bl	80005f8 <__aeabi_dmul>
 8008a20:	4602      	mov	r2, r0
 8008a22:	460b      	mov	r3, r1
 8008a24:	4614      	mov	r4, r2
 8008a26:	461d      	mov	r5, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7f7 fd8a 	bl	8000548 <__aeabi_f2d>
 8008a34:	f04f 0200 	mov.w	r2, #0
 8008a38:	4b39      	ldr	r3, [pc, #228]	; (8008b20 <PathPlan+0x2cd8>)
 8008a3a:	f7f7 fddd 	bl	80005f8 <__aeabi_dmul>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	460b      	mov	r3, r1
 8008a42:	4620      	mov	r0, r4
 8008a44:	4629      	mov	r1, r5
 8008a46:	f7f7 fc1f 	bl	8000288 <__aeabi_dsub>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	4614      	mov	r4, r2
 8008a50:	461d      	mov	r5, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7f7 fd75 	bl	8000548 <__aeabi_f2d>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	460b      	mov	r3, r1
 8008a62:	4620      	mov	r0, r4
 8008a64:	4629      	mov	r1, r5
 8008a66:	f7f7 fc11 	bl	800028c <__adddf3>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	4610      	mov	r0, r2
 8008a70:	4619      	mov	r1, r3
 8008a72:	f7f8 f8b9 	bl	8000be8 <__aeabi_d2f>
 8008a76:	4602      	mov	r2, r0
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = (0.866 * pp->rvy) + (0.5 * pp->rvx) + pp->u2;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7f7 fd5f 	bl	8000548 <__aeabi_f2d>
 8008a8a:	a323      	add	r3, pc, #140	; (adr r3, 8008b18 <PathPlan+0x2cd0>)
 8008a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a90:	f7f7 fdb2 	bl	80005f8 <__aeabi_dmul>
 8008a94:	4602      	mov	r2, r0
 8008a96:	460b      	mov	r3, r1
 8008a98:	4614      	mov	r4, r2
 8008a9a:	461d      	mov	r5, r3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7f7 fd50 	bl	8000548 <__aeabi_f2d>
 8008aa8:	f04f 0200 	mov.w	r2, #0
 8008aac:	4b1c      	ldr	r3, [pc, #112]	; (8008b20 <PathPlan+0x2cd8>)
 8008aae:	f7f7 fda3 	bl	80005f8 <__aeabi_dmul>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	4629      	mov	r1, r5
 8008aba:	f7f7 fbe7 	bl	800028c <__adddf3>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	4614      	mov	r4, r2
 8008ac4:	461d      	mov	r5, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7f7 fd3b 	bl	8000548 <__aeabi_f2d>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	4629      	mov	r1, r5
 8008ada:	f7f7 fbd7 	bl	800028c <__adddf3>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	4610      	mov	r0, r2
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	f7f8 f87f 	bl	8000be8 <__aeabi_d2f>
 8008aea:	4602      	mov	r2, r0
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 1.0 * pp->rvx + pp->u3;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	ed93 7ab4 	vldr	s14, [r3, #720]	; 0x2d0
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8008afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	edc3 7abc 	vstr	s15, [r3, #752]	; 0x2f0
}
 8008b08:	bf00      	nop
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	ecbd 8b02 	vpop	{d8}
 8008b12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008b16:	bf00      	nop
 8008b18:	a1cac083 	.word	0xa1cac083
 8008b1c:	3febb645 	.word	0x3febb645
 8008b20:	3fe00000 	.word	0x3fe00000

08008b24 <PSxConnectDMA>:
 * Function Remarks		: Called in respective I2c interrupt
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSxConnectDMA(&ps4);
 */
void PSxConnectDMA(PSxBT_t* psxbt){
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	1c5a      	adds	r2, r3, #1
 8008b34:	230b      	movs	r3, #11
 8008b36:	2188      	movs	r1, #136	; 0x88
 8008b38:	f00a f91a 	bl	8012d70 <HAL_I2C_Master_Receive_DMA>
	PSx_HandlerI2C(psxbt);
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 f81e 	bl	8008b7e <PSx_HandlerI2C>
}
 8008b42:	bf00      	nop
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <PSxInitDMA>:
 * Function Arguments	: *psxbt	, Pointer to structure PSxBT_t
 * 						   hi2cx    , Pointer to I2C handle
 * Function Return		: None
 * Function Example		: PSxInitDMA(&ps4,&hi2c1);
 */
void PSxInitDMA(PSxBT_t *psxbt,I2C_HandleTypeDef* hi2cx){
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b082      	sub	sp, #8
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	6039      	str	r1, [r7, #0]
	psxbt->hi2cps4 = hi2cx;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	683a      	ldr	r2, [r7, #0]
 8008b58:	665a      	str	r2, [r3, #100]	; 0x64
//	HAL_I2C_Slave_Receive_DMA(hi2cx, psxbt->ReceiveBuffer, 11);//GG
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	1c5a      	adds	r2, r3, #1
 8008b62:	230b      	movs	r3, #11
 8008b64:	2188      	movs	r1, #136	; 0x88
 8008b66:	f00a f903 	bl	8012d70 <HAL_I2C_Master_Receive_DMA>
	psxbt->initialized = 1;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	701a      	strb	r2, [r3, #0]
	psxbt->disconnected = 0;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008b76:	bf00      	nop
 8008b78:	3708      	adds	r7, #8
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <PSx_HandlerI2C>:
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSx_HandlerI2C(&ps4x);
 */

void PSx_HandlerI2C(PSxBT_t *psxbt){
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b082      	sub	sp, #8
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
	psxbt->buf1 = psxbt->ReceiveBuffer[1];
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	789a      	ldrb	r2, [r3, #2]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	psxbt->buf2 = psxbt->ReceiveBuffer[2];
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	78da      	ldrb	r2, [r3, #3]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	psxbt->leftjoy_x = psxbt->ReceiveBuffer[3];
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	791b      	ldrb	r3, [r3, #4]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	635a      	str	r2, [r3, #52]	; 0x34
	psxbt->leftjoy_y = psxbt->ReceiveBuffer[4];
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	795b      	ldrb	r3, [r3, #5]
 8008ba8:	461a      	mov	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	639a      	str	r2, [r3, #56]	; 0x38
	psxbt->rightjoy_x = psxbt->ReceiveBuffer[5];
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	799b      	ldrb	r3, [r3, #6]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	63da      	str	r2, [r3, #60]	; 0x3c
	psxbt->rightjoy_y = psxbt->ReceiveBuffer[6];
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	79db      	ldrb	r3, [r3, #7]
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	641a      	str	r2, [r3, #64]	; 0x40
	psxbt->an_L2 = psxbt->ReceiveBuffer[7];
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	7a1b      	ldrb	r3, [r3, #8]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	645a      	str	r2, [r3, #68]	; 0x44
	psxbt->an_R2 = psxbt->ReceiveBuffer[8];
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	7a5b      	ldrb	r3, [r3, #9]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	649a      	str	r2, [r3, #72]	; 0x48
	psxbt->buf3 = psxbt->ReceiveBuffer[9];
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	7a9a      	ldrb	r2, [r3, #10]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	psxbt->state = psxbt->ReceiveBuffer[10];
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	7ada      	ldrb	r2, [r3, #11]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	PSxBTGetXY(psxbt);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f804 	bl	8008bf8 <PSxBTGetXY>
}
 8008bf0:	bf00      	nop
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <PSxBTGetXY>:
 * Function Return		: None
 * Function Example		: PSxBTGetXY(&ps3x);
 */

void PSxBTGetXY(PSxBT_t *psxbt)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
	if(joyR_up){
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c04:	ee07 3a90 	vmov	s15, r3
 8008c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c0c:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 8008f10 <PSxBTGetXY+0x318>
 8008c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c18:	d53e      	bpl.n	8008c98 <PSxBTGetXY+0xa0>
		psxbt->joyR_y  = ((psx_low_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c1e:	ee07 3a90 	vmov	s15, r3
 8008c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c26:	ee17 0a90 	vmov	r0, s15
 8008c2a:	f7f7 fc8d 	bl	8000548 <__aeabi_f2d>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	a1b5      	add	r1, pc, #724	; (adr r1, 8008f08 <PSxBTGetXY+0x310>)
 8008c34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c38:	f7f7 fb26 	bl	8000288 <__aeabi_dsub>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	460b      	mov	r3, r1
 8008c40:	4610      	mov	r0, r2
 8008c42:	4619      	mov	r1, r3
 8008c44:	f04f 0200 	mov.w	r2, #0
 8008c48:	4bb2      	ldr	r3, [pc, #712]	; (8008f14 <PSxBTGetXY+0x31c>)
 8008c4a:	f7f7 fdff 	bl	800084c <__aeabi_ddiv>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	4610      	mov	r0, r2
 8008c54:	4619      	mov	r1, r3
 8008c56:	f7f7 ffc7 	bl	8000be8 <__aeabi_d2f>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y < 0.0){
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008c66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c6e:	d504      	bpl.n	8008c7a <PSxBTGetXY+0x82>
			psxbt->joyR_y = 0.0;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f04f 0200 	mov.w	r2, #0
 8008c76:	64da      	str	r2, [r3, #76]	; 0x4c
 8008c78:	e05d      	b.n	8008d36 <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y > 1.0){
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008c80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c8c:	dd53      	ble.n	8008d36 <PSxBTGetXY+0x13e>
			psxbt->joyR_y = 1.0;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008c94:	64da      	str	r2, [r3, #76]	; 0x4c
 8008c96:	e04e      	b.n	8008d36 <PSxBTGetXY+0x13e>
		}
	}else if(joyR_down){
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9c:	ee07 3a90 	vmov	s15, r3
 8008ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ca4:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8008f20 <PSxBTGetXY+0x328>
 8008ca8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cb0:	dd3d      	ble.n	8008d2e <PSxBTGetXY+0x136>
		psxbt->joyR_y = ((psx_high_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb6:	ee07 3a90 	vmov	s15, r3
 8008cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cbe:	ee17 0a90 	vmov	r0, s15
 8008cc2:	f7f7 fc41 	bl	8000548 <__aeabi_f2d>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	460b      	mov	r3, r1
 8008cca:	f04f 0000 	mov.w	r0, #0
 8008cce:	4992      	ldr	r1, [pc, #584]	; (8008f18 <PSxBTGetXY+0x320>)
 8008cd0:	f7f7 fada 	bl	8000288 <__aeabi_dsub>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	4610      	mov	r0, r2
 8008cda:	4619      	mov	r1, r3
 8008cdc:	f04f 0200 	mov.w	r2, #0
 8008ce0:	4b8c      	ldr	r3, [pc, #560]	; (8008f14 <PSxBTGetXY+0x31c>)
 8008ce2:	f7f7 fdb3 	bl	800084c <__aeabi_ddiv>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	460b      	mov	r3, r1
 8008cea:	4610      	mov	r0, r2
 8008cec:	4619      	mov	r1, r3
 8008cee:	f7f7 ff7b 	bl	8000be8 <__aeabi_d2f>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y > 0.0){
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008cfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d06:	dd04      	ble.n	8008d12 <PSxBTGetXY+0x11a>
			psxbt->joyR_y = 0.0;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f04f 0200 	mov.w	r2, #0
 8008d0e:	64da      	str	r2, [r3, #76]	; 0x4c
 8008d10:	e011      	b.n	8008d36 <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y < -1.0){
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008d18:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008d1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d24:	d507      	bpl.n	8008d36 <PSxBTGetXY+0x13e>
			psxbt->joyR_y = -1.0;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a7c      	ldr	r2, [pc, #496]	; (8008f1c <PSxBTGetXY+0x324>)
 8008d2a:	64da      	str	r2, [r3, #76]	; 0x4c
 8008d2c:	e003      	b.n	8008d36 <PSxBTGetXY+0x13e>
		}
	}else{
		psxbt->joyR_y = 0.0;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f04f 0200 	mov.w	r2, #0
 8008d34:	64da      	str	r2, [r3, #76]	; 0x4c
	}

	if(joyR_left){
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d3a:	ee07 3a90 	vmov	s15, r3
 8008d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d42:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8008f10 <PSxBTGetXY+0x318>
 8008d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d4e:	d53e      	bpl.n	8008dce <PSxBTGetXY+0x1d6>
		psxbt->joyR_x = ((psx_low_Rx - ((float)psxbt->rightjoy_x))/100.0)/1.00;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d54:	ee07 3a90 	vmov	s15, r3
 8008d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d5c:	ee17 0a90 	vmov	r0, s15
 8008d60:	f7f7 fbf2 	bl	8000548 <__aeabi_f2d>
 8008d64:	4602      	mov	r2, r0
 8008d66:	460b      	mov	r3, r1
 8008d68:	a167      	add	r1, pc, #412	; (adr r1, 8008f08 <PSxBTGetXY+0x310>)
 8008d6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d6e:	f7f7 fa8b 	bl	8000288 <__aeabi_dsub>
 8008d72:	4602      	mov	r2, r0
 8008d74:	460b      	mov	r3, r1
 8008d76:	4610      	mov	r0, r2
 8008d78:	4619      	mov	r1, r3
 8008d7a:	f04f 0200 	mov.w	r2, #0
 8008d7e:	4b65      	ldr	r3, [pc, #404]	; (8008f14 <PSxBTGetXY+0x31c>)
 8008d80:	f7f7 fd64 	bl	800084c <__aeabi_ddiv>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	4610      	mov	r0, r2
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	f7f7 ff2c 	bl	8000be8 <__aeabi_d2f>
 8008d90:	4602      	mov	r2, r0
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	651a      	str	r2, [r3, #80]	; 0x50
		if(psxbt->joyR_x < 0.0){
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008d9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008da4:	d504      	bpl.n	8008db0 <PSxBTGetXY+0x1b8>
			psxbt->joyR_x = 0.0;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f04f 0200 	mov.w	r2, #0
 8008dac:	651a      	str	r2, [r3, #80]	; 0x50
 8008dae:	e05d      	b.n	8008e6c <PSxBTGetXY+0x274>
		}else if(psxbt->joyR_x > 1.0){
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008db6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dc2:	dd53      	ble.n	8008e6c <PSxBTGetXY+0x274>
			psxbt->joyR_x = 1.0;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008dca:	651a      	str	r2, [r3, #80]	; 0x50
 8008dcc:	e04e      	b.n	8008e6c <PSxBTGetXY+0x274>
		}
	}else if(joyR_right){
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd2:	ee07 3a90 	vmov	s15, r3
 8008dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dda:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8008f20 <PSxBTGetXY+0x328>
 8008dde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008de6:	dd3d      	ble.n	8008e64 <PSxBTGetXY+0x26c>
		psxbt->joyR_x = ((psx_high_Rx - ((float)psxbt->rightjoy_x))/100.0)/1.00;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dec:	ee07 3a90 	vmov	s15, r3
 8008df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df4:	ee17 0a90 	vmov	r0, s15
 8008df8:	f7f7 fba6 	bl	8000548 <__aeabi_f2d>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	460b      	mov	r3, r1
 8008e00:	f04f 0000 	mov.w	r0, #0
 8008e04:	4944      	ldr	r1, [pc, #272]	; (8008f18 <PSxBTGetXY+0x320>)
 8008e06:	f7f7 fa3f 	bl	8000288 <__aeabi_dsub>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4610      	mov	r0, r2
 8008e10:	4619      	mov	r1, r3
 8008e12:	f04f 0200 	mov.w	r2, #0
 8008e16:	4b3f      	ldr	r3, [pc, #252]	; (8008f14 <PSxBTGetXY+0x31c>)
 8008e18:	f7f7 fd18 	bl	800084c <__aeabi_ddiv>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	460b      	mov	r3, r1
 8008e20:	4610      	mov	r0, r2
 8008e22:	4619      	mov	r1, r3
 8008e24:	f7f7 fee0 	bl	8000be8 <__aeabi_d2f>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	651a      	str	r2, [r3, #80]	; 0x50
		if(psxbt->joyR_x > 0.0){
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008e34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e3c:	dd04      	ble.n	8008e48 <PSxBTGetXY+0x250>
			psxbt->joyR_x = 0.0;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f04f 0200 	mov.w	r2, #0
 8008e44:	651a      	str	r2, [r3, #80]	; 0x50
 8008e46:	e011      	b.n	8008e6c <PSxBTGetXY+0x274>
		}else if(psxbt->joyR_x < -1.0){
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008e4e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008e52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e5a:	d507      	bpl.n	8008e6c <PSxBTGetXY+0x274>
			psxbt->joyR_x = -1.0;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a2f      	ldr	r2, [pc, #188]	; (8008f1c <PSxBTGetXY+0x324>)
 8008e60:	651a      	str	r2, [r3, #80]	; 0x50
 8008e62:	e003      	b.n	8008e6c <PSxBTGetXY+0x274>
		}
	}else{
		psxbt->joyR_x = 0.0;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f04f 0200 	mov.w	r2, #0
 8008e6a:	651a      	str	r2, [r3, #80]	; 0x50
	}

	if(joyL_up){
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e70:	ee07 3a90 	vmov	s15, r3
 8008e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e78:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8008f10 <PSxBTGetXY+0x318>
 8008e7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e84:	d54e      	bpl.n	8008f24 <PSxBTGetXY+0x32c>
		psxbt->joyL_y = ((psx_low_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8a:	ee07 3a90 	vmov	s15, r3
 8008e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e92:	ee17 0a90 	vmov	r0, s15
 8008e96:	f7f7 fb57 	bl	8000548 <__aeabi_f2d>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	a11a      	add	r1, pc, #104	; (adr r1, 8008f08 <PSxBTGetXY+0x310>)
 8008ea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ea4:	f7f7 f9f0 	bl	8000288 <__aeabi_dsub>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	460b      	mov	r3, r1
 8008eac:	4610      	mov	r0, r2
 8008eae:	4619      	mov	r1, r3
 8008eb0:	f04f 0200 	mov.w	r2, #0
 8008eb4:	4b17      	ldr	r3, [pc, #92]	; (8008f14 <PSxBTGetXY+0x31c>)
 8008eb6:	f7f7 fcc9 	bl	800084c <__aeabi_ddiv>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	4610      	mov	r0, r2
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	f7f7 fe91 	bl	8000be8 <__aeabi_d2f>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y < 0.0){
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008ed2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eda:	d504      	bpl.n	8008ee6 <PSxBTGetXY+0x2ee>
			psxbt->joyL_y = 0.0;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f04f 0200 	mov.w	r2, #0
 8008ee2:	655a      	str	r2, [r3, #84]	; 0x54
 8008ee4:	e06d      	b.n	8008fc2 <PSxBTGetXY+0x3ca>
		}else if(psxbt->joyL_y > 1.0){
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008eec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ef0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ef8:	dd63      	ble.n	8008fc2 <PSxBTGetXY+0x3ca>
			psxbt->joyL_y = 1.0;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008f00:	655a      	str	r2, [r3, #84]	; 0x54
 8008f02:	e05e      	b.n	8008fc2 <PSxBTGetXY+0x3ca>
 8008f04:	f3af 8000 	nop.w
 8008f08:	00000000 	.word	0x00000000
 8008f0c:	405cc000 	.word	0x405cc000
 8008f10:	42e60000 	.word	0x42e60000
 8008f14:	40590000 	.word	0x40590000
 8008f18:	40618000 	.word	0x40618000
 8008f1c:	bf800000 	.word	0xbf800000
 8008f20:	430c0000 	.word	0x430c0000
		}
	}else if(joyL_down){
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f28:	ee07 3a90 	vmov	s15, r3
 8008f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f30:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8008f20 <PSxBTGetXY+0x328>
 8008f34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f3c:	dd3d      	ble.n	8008fba <PSxBTGetXY+0x3c2>
		psxbt->joyL_y = ((psx_high_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f42:	ee07 3a90 	vmov	s15, r3
 8008f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f4a:	ee17 0a90 	vmov	r0, s15
 8008f4e:	f7f7 fafb 	bl	8000548 <__aeabi_f2d>
 8008f52:	4602      	mov	r2, r0
 8008f54:	460b      	mov	r3, r1
 8008f56:	f04f 0000 	mov.w	r0, #0
 8008f5a:	4981      	ldr	r1, [pc, #516]	; (8009160 <PSxBTGetXY+0x568>)
 8008f5c:	f7f7 f994 	bl	8000288 <__aeabi_dsub>
 8008f60:	4602      	mov	r2, r0
 8008f62:	460b      	mov	r3, r1
 8008f64:	4610      	mov	r0, r2
 8008f66:	4619      	mov	r1, r3
 8008f68:	f04f 0200 	mov.w	r2, #0
 8008f6c:	4b7d      	ldr	r3, [pc, #500]	; (8009164 <PSxBTGetXY+0x56c>)
 8008f6e:	f7f7 fc6d 	bl	800084c <__aeabi_ddiv>
 8008f72:	4602      	mov	r2, r0
 8008f74:	460b      	mov	r3, r1
 8008f76:	4610      	mov	r0, r2
 8008f78:	4619      	mov	r1, r3
 8008f7a:	f7f7 fe35 	bl	8000be8 <__aeabi_d2f>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y > 0.0){
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008f8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f92:	dd04      	ble.n	8008f9e <PSxBTGetXY+0x3a6>
			psxbt->joyL_y = 0.0;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f04f 0200 	mov.w	r2, #0
 8008f9a:	655a      	str	r2, [r3, #84]	; 0x54
 8008f9c:	e011      	b.n	8008fc2 <PSxBTGetXY+0x3ca>
		}else if(psxbt->joyL_y < -1.0){
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008fa4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008fa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fb0:	d507      	bpl.n	8008fc2 <PSxBTGetXY+0x3ca>
			psxbt->joyL_y = -1.0;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4a6c      	ldr	r2, [pc, #432]	; (8009168 <PSxBTGetXY+0x570>)
 8008fb6:	655a      	str	r2, [r3, #84]	; 0x54
 8008fb8:	e003      	b.n	8008fc2 <PSxBTGetXY+0x3ca>
		}
	}else{
		psxbt->joyL_y = 0.0;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f04f 0200 	mov.w	r2, #0
 8008fc0:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if(joyL_left){
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fc6:	ee07 3a90 	vmov	s15, r3
 8008fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fce:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800916c <PSxBTGetXY+0x574>
 8008fd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fda:	d53e      	bpl.n	800905a <PSxBTGetXY+0x462>
		psxbt->joyL_x = ((psx_low_Lx - ((float)psxbt->leftjoy_x))/100.0)/1.00;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe0:	ee07 3a90 	vmov	s15, r3
 8008fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fe8:	ee17 0a90 	vmov	r0, s15
 8008fec:	f7f7 faac 	bl	8000548 <__aeabi_f2d>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	a156      	add	r1, pc, #344	; (adr r1, 8009150 <PSxBTGetXY+0x558>)
 8008ff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ffa:	f7f7 f945 	bl	8000288 <__aeabi_dsub>
 8008ffe:	4602      	mov	r2, r0
 8009000:	460b      	mov	r3, r1
 8009002:	4610      	mov	r0, r2
 8009004:	4619      	mov	r1, r3
 8009006:	f04f 0200 	mov.w	r2, #0
 800900a:	4b56      	ldr	r3, [pc, #344]	; (8009164 <PSxBTGetXY+0x56c>)
 800900c:	f7f7 fc1e 	bl	800084c <__aeabi_ddiv>
 8009010:	4602      	mov	r2, r0
 8009012:	460b      	mov	r3, r1
 8009014:	4610      	mov	r0, r2
 8009016:	4619      	mov	r1, r3
 8009018:	f7f7 fde6 	bl	8000be8 <__aeabi_d2f>
 800901c:	4602      	mov	r2, r0
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	659a      	str	r2, [r3, #88]	; 0x58
		if(psxbt->joyL_x < 0.0){
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009028:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800902c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009030:	d504      	bpl.n	800903c <PSxBTGetXY+0x444>
			psxbt->joyL_x = 0.0;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f04f 0200 	mov.w	r2, #0
 8009038:	659a      	str	r2, [r3, #88]	; 0x58
 800903a:	e05d      	b.n	80090f8 <PSxBTGetXY+0x500>
		}else if(psxbt->joyL_x > 1.0){
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009042:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009046:	eef4 7ac7 	vcmpe.f32	s15, s14
 800904a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800904e:	dd53      	ble.n	80090f8 <PSxBTGetXY+0x500>
			psxbt->joyL_x = 1.0;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009056:	659a      	str	r2, [r3, #88]	; 0x58
 8009058:	e04e      	b.n	80090f8 <PSxBTGetXY+0x500>
		}
	}else if(joyL_right){
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800905e:	ee07 3a90 	vmov	s15, r3
 8009062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009066:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8009170 <PSxBTGetXY+0x578>
 800906a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800906e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009072:	dd3d      	ble.n	80090f0 <PSxBTGetXY+0x4f8>
		psxbt->joyL_x = ((psx_high_Lx - ((float)psxbt->leftjoy_x))/100.0)/1.00;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009078:	ee07 3a90 	vmov	s15, r3
 800907c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009080:	ee17 0a90 	vmov	r0, s15
 8009084:	f7f7 fa60 	bl	8000548 <__aeabi_f2d>
 8009088:	4602      	mov	r2, r0
 800908a:	460b      	mov	r3, r1
 800908c:	f04f 0000 	mov.w	r0, #0
 8009090:	4933      	ldr	r1, [pc, #204]	; (8009160 <PSxBTGetXY+0x568>)
 8009092:	f7f7 f8f9 	bl	8000288 <__aeabi_dsub>
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	4610      	mov	r0, r2
 800909c:	4619      	mov	r1, r3
 800909e:	f04f 0200 	mov.w	r2, #0
 80090a2:	4b30      	ldr	r3, [pc, #192]	; (8009164 <PSxBTGetXY+0x56c>)
 80090a4:	f7f7 fbd2 	bl	800084c <__aeabi_ddiv>
 80090a8:	4602      	mov	r2, r0
 80090aa:	460b      	mov	r3, r1
 80090ac:	4610      	mov	r0, r2
 80090ae:	4619      	mov	r1, r3
 80090b0:	f7f7 fd9a 	bl	8000be8 <__aeabi_d2f>
 80090b4:	4602      	mov	r2, r0
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	659a      	str	r2, [r3, #88]	; 0x58
		if(psxbt->joyL_x > 0.0){
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80090c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80090c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090c8:	dd04      	ble.n	80090d4 <PSxBTGetXY+0x4dc>
			psxbt->joyL_x = 0.0;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f04f 0200 	mov.w	r2, #0
 80090d0:	659a      	str	r2, [r3, #88]	; 0x58
 80090d2:	e011      	b.n	80090f8 <PSxBTGetXY+0x500>
		}else if(psxbt->joyL_x < -1.0){
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80090da:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80090de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090e6:	d507      	bpl.n	80090f8 <PSxBTGetXY+0x500>
			psxbt->joyL_x = -1.0;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a1f      	ldr	r2, [pc, #124]	; (8009168 <PSxBTGetXY+0x570>)
 80090ec:	659a      	str	r2, [r3, #88]	; 0x58
 80090ee:	e003      	b.n	80090f8 <PSxBTGetXY+0x500>
		}
	}else{
		psxbt->joyL_x = 0.0;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f04f 0200 	mov.w	r2, #0
 80090f6:	659a      	str	r2, [r3, #88]	; 0x58
	}

	psxbt->joyR_2 = (psxbt->an_R2/255.0);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7f7 fa01 	bl	8000504 <__aeabi_ui2d>
 8009102:	a315      	add	r3, pc, #84	; (adr r3, 8009158 <PSxBTGetXY+0x560>)
 8009104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009108:	f7f7 fba0 	bl	800084c <__aeabi_ddiv>
 800910c:	4602      	mov	r2, r0
 800910e:	460b      	mov	r3, r1
 8009110:	4610      	mov	r0, r2
 8009112:	4619      	mov	r1, r3
 8009114:	f7f7 fd68 	bl	8000be8 <__aeabi_d2f>
 8009118:	4602      	mov	r2, r0
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	65da      	str	r2, [r3, #92]	; 0x5c
	psxbt->joyL_2 = (psxbt->an_L2/255.0);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009122:	4618      	mov	r0, r3
 8009124:	f7f7 f9ee 	bl	8000504 <__aeabi_ui2d>
 8009128:	a30b      	add	r3, pc, #44	; (adr r3, 8009158 <PSxBTGetXY+0x560>)
 800912a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912e:	f7f7 fb8d 	bl	800084c <__aeabi_ddiv>
 8009132:	4602      	mov	r2, r0
 8009134:	460b      	mov	r3, r1
 8009136:	4610      	mov	r0, r2
 8009138:	4619      	mov	r1, r3
 800913a:	f7f7 fd55 	bl	8000be8 <__aeabi_d2f>
 800913e:	4602      	mov	r2, r0
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009144:	bf00      	nop
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	f3af 8000 	nop.w
 8009150:	00000000 	.word	0x00000000
 8009154:	405cc000 	.word	0x405cc000
 8009158:	00000000 	.word	0x00000000
 800915c:	406fe000 	.word	0x406fe000
 8009160:	40618000 	.word	0x40618000
 8009164:	40590000 	.word	0x40590000
 8009168:	bf800000 	.word	0xbf800000
 800916c:	42e60000 	.word	0x42e60000
 8009170:	430c0000 	.word	0x430c0000

08009174 <R6091U_Init>:
	memset(IMU->Buffer, 0, 20);
	HAL_I2C_Master_Receive_DMA(IMU->hi2cimu, 0x35<<1, (uint8_t*)&IMU->Buffer, 20);//RECEIVE FROM R6091U
}


void R6091U_Init(R6091U_t* IMU,UART_HandleTypeDef* huartx){
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]

	IMU->huartx = huartx;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	683a      	ldr	r2, [r7, #0]
 8009182:	605a      	str	r2, [r3, #4]
	IMU->State = PENDING_SYNC;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	775a      	strb	r2, [r3, #29]
	HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6858      	ldr	r0, [r3, #4]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	3308      	adds	r3, #8
 8009192:	2201      	movs	r2, #1
 8009194:	4619      	mov	r1, r3
 8009196:	f00d fb6d 	bl	8016874 <HAL_UART_Receive_IT>

}
 800919a:	bf00      	nop
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
	...

080091a4 <R6091U_Handler>:
void R6091U_Handler(R6091U_t* IMU){
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]

//	uint8_t checksum;

	switch(IMU->State){
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	7f5b      	ldrb	r3, [r3, #29]
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	d035      	beq.n	8009220 <R6091U_Handler+0x7c>
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	f300 80b2 	bgt.w	800931e <R6091U_Handler+0x17a>
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d002      	beq.n	80091c4 <R6091U_Handler+0x20>
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d011      	beq.n	80091e6 <R6091U_Handler+0x42>
		IMU->State = PENDING_SYNC;
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);

		break;
	}
}
 80091c2:	e0ac      	b.n	800931e <R6091U_Handler+0x17a>
		if(IMU->Buffer[0] == 0xAA){
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	7a1b      	ldrb	r3, [r3, #8]
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	2baa      	cmp	r3, #170	; 0xaa
 80091cc:	d102      	bne.n	80091d4 <R6091U_Handler+0x30>
			IMU->State = CONFIRMING_SYNC;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2201      	movs	r2, #1
 80091d2:	775a      	strb	r2, [r3, #29]
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6858      	ldr	r0, [r3, #4]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	3308      	adds	r3, #8
 80091dc:	2201      	movs	r2, #1
 80091de:	4619      	mov	r1, r3
 80091e0:	f00d fb48 	bl	8016874 <HAL_UART_Receive_IT>
		break;
 80091e4:	e09b      	b.n	800931e <R6091U_Handler+0x17a>
		if(IMU->Buffer[0] == 0x00){
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	7a1b      	ldrb	r3, [r3, #8]
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d10b      	bne.n	8009208 <R6091U_Handler+0x64>
			IMU->State = IN_SYNC;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2202      	movs	r2, #2
 80091f4:	775a      	strb	r2, [r3, #29]
			HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 13);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6858      	ldr	r0, [r3, #4]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	3308      	adds	r3, #8
 80091fe:	220d      	movs	r2, #13
 8009200:	4619      	mov	r1, r3
 8009202:	f00d fb37 	bl	8016874 <HAL_UART_Receive_IT>
		break;
 8009206:	e08a      	b.n	800931e <R6091U_Handler+0x17a>
			IMU->State = PENDING_SYNC;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	775a      	strb	r2, [r3, #29]
			HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6858      	ldr	r0, [r3, #4]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	3308      	adds	r3, #8
 8009216:	2201      	movs	r2, #1
 8009218:	4619      	mov	r1, r3
 800921a:	f00d fb2b 	bl	8016874 <HAL_UART_Receive_IT>
		break;
 800921e:	e07e      	b.n	800931e <R6091U_Handler+0x17a>
		IMU->checksum = 0;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		IMU->checksum = IMU->Buffer[0] + IMU->Buffer[1] + IMU->Buffer[2] + IMU->Buffer[3] + IMU->Buffer[4] + IMU->Buffer[5]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	7a1b      	ldrb	r3, [r3, #8]
 800922c:	b2da      	uxtb	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	7a5b      	ldrb	r3, [r3, #9]
 8009232:	b2db      	uxtb	r3, r3
 8009234:	4413      	add	r3, r2
 8009236:	b2da      	uxtb	r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	7a9b      	ldrb	r3, [r3, #10]
 800923c:	b2db      	uxtb	r3, r3
 800923e:	4413      	add	r3, r2
 8009240:	b2da      	uxtb	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	7adb      	ldrb	r3, [r3, #11]
 8009246:	b2db      	uxtb	r3, r3
 8009248:	4413      	add	r3, r2
 800924a:	b2da      	uxtb	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	7b1b      	ldrb	r3, [r3, #12]
 8009250:	b2db      	uxtb	r3, r3
 8009252:	4413      	add	r3, r2
 8009254:	b2da      	uxtb	r2, r3
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	7b5b      	ldrb	r3, [r3, #13]
 800925a:	b2db      	uxtb	r3, r3
 800925c:	4413      	add	r3, r2
 800925e:	b2da      	uxtb	r2, r3
						+ IMU->Buffer[6] + IMU->Buffer[7] + IMU->Buffer[8] + IMU->Buffer[9] + IMU->Buffer[10] + IMU->Buffer[11];
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	7b9b      	ldrb	r3, [r3, #14]
 8009264:	b2db      	uxtb	r3, r3
 8009266:	4413      	add	r3, r2
 8009268:	b2da      	uxtb	r2, r3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	7bdb      	ldrb	r3, [r3, #15]
 800926e:	b2db      	uxtb	r3, r3
 8009270:	4413      	add	r3, r2
 8009272:	b2da      	uxtb	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	7c1b      	ldrb	r3, [r3, #16]
 8009278:	b2db      	uxtb	r3, r3
 800927a:	4413      	add	r3, r2
 800927c:	b2da      	uxtb	r2, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	7c5b      	ldrb	r3, [r3, #17]
 8009282:	b2db      	uxtb	r3, r3
 8009284:	4413      	add	r3, r2
 8009286:	b2da      	uxtb	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	7c9b      	ldrb	r3, [r3, #18]
 800928c:	b2db      	uxtb	r3, r3
 800928e:	4413      	add	r3, r2
 8009290:	b2da      	uxtb	r2, r3
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	7cdb      	ldrb	r3, [r3, #19]
 8009296:	b2db      	uxtb	r3, r3
 8009298:	4413      	add	r3, r2
 800929a:	b2da      	uxtb	r2, r3
		IMU->checksum = IMU->Buffer[0] + IMU->Buffer[1] + IMU->Buffer[2] + IMU->Buffer[3] + IMU->Buffer[4] + IMU->Buffer[5]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		if( IMU->checksum == IMU->Buffer[12]){
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092a8:	b2da      	uxtb	r2, r3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	7d1b      	ldrb	r3, [r3, #20]
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d121      	bne.n	80092f8 <R6091U_Handler+0x154>
			int16_t yaw = *((uint16_t*)&IMU->Buffer[1]);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	3309      	adds	r3, #9
 80092b8:	881b      	ldrh	r3, [r3, #0]
 80092ba:	81fb      	strh	r3, [r7, #14]
			fyaw = ((float)(yaw) / (float)100.0) + 180.0 ;
 80092bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80092c0:	ee07 3a90 	vmov	s15, r3
 80092c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80092c8:	eddf 6a17 	vldr	s13, [pc, #92]	; 8009328 <R6091U_Handler+0x184>
 80092cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80092d0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800932c <R6091U_Handler+0x188>
 80092d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80092d8:	4b15      	ldr	r3, [pc, #84]	; (8009330 <R6091U_Handler+0x18c>)
 80092da:	edc3 7a00 	vstr	s15, [r3]
			if(testCounter2 >= 20){
 80092de:	4b15      	ldr	r3, [pc, #84]	; (8009334 <R6091U_Handler+0x190>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2b13      	cmp	r3, #19
 80092e4:	dd03      	ble.n	80092ee <R6091U_Handler+0x14a>
				testCounter2 = 0;
 80092e6:	4b13      	ldr	r3, [pc, #76]	; (8009334 <R6091U_Handler+0x190>)
 80092e8:	2200      	movs	r2, #0
 80092ea:	601a      	str	r2, [r3, #0]
 80092ec:	e004      	b.n	80092f8 <R6091U_Handler+0x154>
				testCounter2 ++;
 80092ee:	4b11      	ldr	r3, [pc, #68]	; (8009334 <R6091U_Handler+0x190>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	3301      	adds	r3, #1
 80092f4:	4a0f      	ldr	r2, [pc, #60]	; (8009334 <R6091U_Handler+0x190>)
 80092f6:	6013      	str	r3, [r2, #0]
		memset(IMU->Buffer, 0, 13);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	3308      	adds	r3, #8
 80092fc:	220d      	movs	r2, #13
 80092fe:	2100      	movs	r1, #0
 8009300:	4618      	mov	r0, r3
 8009302:	f011 f803 	bl	801a30c <memset>
		IMU->State = PENDING_SYNC;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	775a      	strb	r2, [r3, #29]
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6858      	ldr	r0, [r3, #4]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	3308      	adds	r3, #8
 8009314:	2201      	movs	r2, #1
 8009316:	4619      	mov	r1, r3
 8009318:	f00d faac 	bl	8016874 <HAL_UART_Receive_IT>
		break;
 800931c:	bf00      	nop
}
 800931e:	bf00      	nop
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	42c80000 	.word	0x42c80000
 800932c:	43340000 	.word	0x43340000
 8009330:	20009dc0 	.word	0x20009dc0
 8009334:	20006cac 	.word	0x20006cac

08009338 <RNSInit>:
 * Function Example		: RNSInit(CAN1, &RNS);
 * 						  RNSInit(Robot_navi_system, I2C1,  &RNS);
 */

void RNSInit(CAN_HandleTypeDef* hcanx, RNS_interface_t* rns)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
	rns->rns_hcanx = hcanx;
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	601a      	str	r2, [r3, #0]

	insData_send[0] = 1;
 8009348:	4b28      	ldr	r3, [pc, #160]	; (80093ec <RNSInit+0xb4>)
 800934a:	2201      	movs	r2, #1
 800934c:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 800934e:	4b27      	ldr	r3, [pc, #156]	; (80093ec <RNSInit+0xb4>)
 8009350:	2200      	movs	r2, #0
 8009352:	705a      	strb	r2, [r3, #1]

	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	6818      	ldr	r0, [r3, #0]
 8009358:	2302      	movs	r3, #2
 800935a:	4a24      	ldr	r2, [pc, #144]	; (80093ec <RNSInit+0xb4>)
 800935c:	2117      	movs	r1, #23
 800935e:	f7fa fa19 	bl	8003794 <CAN_TxMsg>
	rns->RNS_data.common_instruction = RNS_PENDING;
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	2200      	movs	r2, #0
 8009366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 1;
 800936a:	4b20      	ldr	r3, [pc, #128]	; (80093ec <RNSInit+0xb4>)
 800936c:	2201      	movs	r2, #1
 800936e:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_RESET_POS;
 8009370:	4b1e      	ldr	r3, [pc, #120]	; (80093ec <RNSInit+0xb4>)
 8009372:	2214      	movs	r2, #20
 8009374:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	6818      	ldr	r0, [r3, #0]
 800937a:	2302      	movs	r3, #2
 800937c:	4a1b      	ldr	r2, [pc, #108]	; (80093ec <RNSInit+0xb4>)
 800937e:	2117      	movs	r1, #23
 8009380:	f7fa fa08 	bl	8003794 <CAN_TxMsg>

	rns->RNS_data.common_instruction = RNS_WAITING;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	2202      	movs	r2, #2
 8009388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	int wait=0;
 800938c:	2300      	movs	r3, #0
 800938e:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING){
 8009390:	e022      	b.n	80093d8 <RNSInit+0xa0>
		if(wait >= 2000000){
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	4a16      	ldr	r2, [pc, #88]	; (80093f0 <RNSInit+0xb8>)
 8009396:	4293      	cmp	r3, r2
 8009398:	dd1b      	ble.n	80093d2 <RNSInit+0x9a>
			insData_send[0] = 1;
 800939a:	4b14      	ldr	r3, [pc, #80]	; (80093ec <RNSInit+0xb4>)
 800939c:	2201      	movs	r2, #1
 800939e:	701a      	strb	r2, [r3, #0]
			insData_send[1] = RNS_RESET_POS;
 80093a0:	4b12      	ldr	r3, [pc, #72]	; (80093ec <RNSInit+0xb4>)
 80093a2:	2214      	movs	r2, #20
 80093a4:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	6818      	ldr	r0, [r3, #0]
 80093aa:	2302      	movs	r3, #2
 80093ac:	4a0f      	ldr	r2, [pc, #60]	; (80093ec <RNSInit+0xb4>)
 80093ae:	2117      	movs	r1, #23
 80093b0:	f7fa f9f0 	bl	8003794 <CAN_TxMsg>
			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15;
 80093b4:	4b0f      	ldr	r3, [pc, #60]	; (80093f4 <RNSInit+0xbc>)
 80093b6:	785b      	ldrb	r3, [r3, #1]
 80093b8:	b25b      	sxtb	r3, r3
 80093ba:	4a0e      	ldr	r2, [pc, #56]	; (80093f4 <RNSInit+0xbc>)
 80093bc:	43db      	mvns	r3, r3
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	09db      	lsrs	r3, r3, #7
 80093c2:	b2d9      	uxtb	r1, r3
 80093c4:	7853      	ldrb	r3, [r2, #1]
 80093c6:	f361 13c7 	bfi	r3, r1, #7, #1
 80093ca:	7053      	strb	r3, [r2, #1]
			wait = 0;
 80093cc:	2300      	movs	r3, #0
 80093ce:	60fb      	str	r3, [r7, #12]
 80093d0:	e002      	b.n	80093d8 <RNSInit+0xa0>
		}else{
			wait ++;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	3301      	adds	r3, #1
 80093d6:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING){
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d0d7      	beq.n	8009392 <RNSInit+0x5a>
		}
	}
}
 80093e2:	bf00      	nop
 80093e4:	bf00      	nop
 80093e6:	3710      	adds	r7, #16
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	2000aa5c 	.word	0x2000aa5c
 80093f0:	001e847f 	.word	0x001e847f
 80093f4:	40020814 	.word	0x40020814

080093f8 <RNSStop>:
 * Function Return		: None
 * Function Example		: RNSStop(&RNS);
 */

void RNSStop(RNS_interface_t* rns)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]


	rns->ins.instruction = RNS_STOP;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2203      	movs	r2, #3
 8009404:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0.0;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f04f 0200 	mov.w	r2, #0
 800940c:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0.0;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f04f 0200 	mov.w	r2, #0
 8009414:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0.0;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f04f 0200 	mov.w	r2, #0
 800941c:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0.0;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f04f 0200 	mov.w	r2, #0
 8009424:	615a      	str	r2, [r3, #20]

	//RNSSendIns(rns);
	rns->RNS_data.common_instruction = RNS_WAITING;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2202      	movs	r2, #2
 800942a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 800942e:	4b31      	ldr	r3, [pc, #196]	; (80094f4 <RNSStop+0xfc>)
 8009430:	2211      	movs	r2, #17
 8009432:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	791a      	ldrb	r2, [r3, #4]
 8009438:	4b2e      	ldr	r3, [pc, #184]	; (80094f4 <RNSStop+0xfc>)
 800943a:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6818      	ldr	r0, [r3, #0]
 8009440:	2302      	movs	r3, #2
 8009442:	4a2c      	ldr	r2, [pc, #176]	; (80094f4 <RNSStop+0xfc>)
 8009444:	2117      	movs	r1, #23
 8009446:	f7fa f9a5 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0]),8);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6818      	ldr	r0, [r3, #0]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f103 0208 	add.w	r2, r3, #8
 8009454:	2308      	movs	r3, #8
 8009456:	2118      	movs	r1, #24
 8009458:	f7fa f99c 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2]),8);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6818      	ldr	r0, [r3, #0]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f103 0210 	add.w	r2, r3, #16
 8009466:	2308      	movs	r3, #8
 8009468:	2119      	movs	r1, #25
 800946a:	f7fa f993 	bl	8003794 <CAN_TxMsg>

	int wait = 0;
 800946e:	2300      	movs	r3, #0
 8009470:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8009472:	e035      	b.n	80094e0 <RNSStop+0xe8>
	{
		if(wait >= 2000000)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	4a20      	ldr	r2, [pc, #128]	; (80094f8 <RNSStop+0x100>)
 8009478:	4293      	cmp	r3, r2
 800947a:	dd2e      	ble.n	80094da <RNSStop+0xe2>
		{
			insData_send[0] = 17;
 800947c:	4b1d      	ldr	r3, [pc, #116]	; (80094f4 <RNSStop+0xfc>)
 800947e:	2211      	movs	r2, #17
 8009480:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	791a      	ldrb	r2, [r3, #4]
 8009486:	4b1b      	ldr	r3, [pc, #108]	; (80094f4 <RNSStop+0xfc>)
 8009488:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6818      	ldr	r0, [r3, #0]
 800948e:	2302      	movs	r3, #2
 8009490:	4a18      	ldr	r2, [pc, #96]	; (80094f4 <RNSStop+0xfc>)
 8009492:	2117      	movs	r1, #23
 8009494:	f7fa f97e 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0]),8);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6818      	ldr	r0, [r3, #0]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f103 0208 	add.w	r2, r3, #8
 80094a2:	2308      	movs	r3, #8
 80094a4:	2118      	movs	r1, #24
 80094a6:	f7fa f975 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2]),8);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6818      	ldr	r0, [r3, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f103 0210 	add.w	r2, r3, #16
 80094b4:	2308      	movs	r3, #8
 80094b6:	2119      	movs	r1, #25
 80094b8:	f7fa f96c 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 80094bc:	4b0f      	ldr	r3, [pc, #60]	; (80094fc <RNSStop+0x104>)
 80094be:	785b      	ldrb	r3, [r3, #1]
 80094c0:	b25b      	sxtb	r3, r3
 80094c2:	4a0e      	ldr	r2, [pc, #56]	; (80094fc <RNSStop+0x104>)
 80094c4:	43db      	mvns	r3, r3
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	09db      	lsrs	r3, r3, #7
 80094ca:	b2d9      	uxtb	r1, r3
 80094cc:	7853      	ldrb	r3, [r2, #1]
 80094ce:	f361 13c7 	bfi	r3, r1, #7, #1
 80094d2:	7053      	strb	r3, [r2, #1]
			wait = 0;
 80094d4:	2300      	movs	r3, #0
 80094d6:	60fb      	str	r3, [r7, #12]
 80094d8:	e002      	b.n	80094e0 <RNSStop+0xe8>
		}
		else
			wait++;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	3301      	adds	r3, #1
 80094de:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d0c4      	beq.n	8009474 <RNSStop+0x7c>
	}


}
 80094ea:	bf00      	nop
 80094ec:	bf00      	nop
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	2000aa5c 	.word	0x2000aa5c
 80094f8:	001e847f 	.word	0x001e847f
 80094fc:	40020814 	.word	0x40020814

08009500 <RNSVelocity>:
 * Function Return		: None
 * Function Example		: RNSVelocity(1.0, 1.5 , 1.5 , 1.0, &RNS);
 */

void RNSVelocity(float fFLeftVelR, float fFRightVelR, float fBLeftVelR, float fBRightVelR, RNS_interface_t* rns)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b086      	sub	sp, #24
 8009504:	af00      	add	r7, sp, #0
 8009506:	ed87 0a05 	vstr	s0, [r7, #20]
 800950a:	edc7 0a04 	vstr	s1, [r7, #16]
 800950e:	ed87 1a03 	vstr	s2, [r7, #12]
 8009512:	edc7 1a02 	vstr	s3, [r7, #8]
 8009516:	6078      	str	r0, [r7, #4]

	rns->ins.instruction = RNS_VELOCITY;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2205      	movs	r2, #5
 800951c:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = fFLeftVelR;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	697a      	ldr	r2, [r7, #20]
 8009522:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = fFRightVelR;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	693a      	ldr	r2, [r7, #16]
 8009528:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = fBLeftVelR;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = fBRightVelR;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	68ba      	ldr	r2, [r7, #8]
 8009534:	615a      	str	r2, [r3, #20]

	RNSSendIns(rns);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f804 	bl	8009544 <RNSSendIns>

}
 800953c:	bf00      	nop
 800953e:	3718      	adds	r7, #24
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <RNSSendIns>:
 * Function Return		: None
 * Function Example		: None
 */

void RNSSendIns(RNS_interface_t* rns)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
	while(rns->RNS_data.common_instruction == RNS_BUSY);
 800954c:	bf00      	nop
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009554:	2b01      	cmp	r3, #1
 8009556:	d0fa      	beq.n	800954e <RNSSendIns+0xa>
	rns->RNS_data.common_instruction = RNS_WAITING;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2202      	movs	r2, #2
 800955c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 8009560:	4b31      	ldr	r3, [pc, #196]	; (8009628 <RNSSendIns+0xe4>)
 8009562:	2211      	movs	r2, #17
 8009564:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	791a      	ldrb	r2, [r3, #4]
 800956a:	4b2f      	ldr	r3, [pc, #188]	; (8009628 <RNSSendIns+0xe4>)
 800956c:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS, insData_send,2);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6818      	ldr	r0, [r3, #0]
 8009572:	2302      	movs	r3, #2
 8009574:	4a2c      	ldr	r2, [pc, #176]	; (8009628 <RNSSendIns+0xe4>)
 8009576:	2117      	movs	r1, #23
 8009578:	f7fa f90c 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6818      	ldr	r0, [r3, #0]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f103 0208 	add.w	r2, r3, #8
 8009586:	2308      	movs	r3, #8
 8009588:	2118      	movs	r1, #24
 800958a:	f7fa f903 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6818      	ldr	r0, [r3, #0]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f103 0210 	add.w	r2, r3, #16
 8009598:	2308      	movs	r3, #8
 800959a:	2119      	movs	r1, #25
 800959c:	f7fa f8fa 	bl	8003794 <CAN_TxMsg>

	int wait = 0;
 80095a0:	2300      	movs	r3, #0
 80095a2:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 80095a4:	e035      	b.n	8009612 <RNSSendIns+0xce>
	{
		if(wait >= 2000000)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	4a20      	ldr	r2, [pc, #128]	; (800962c <RNSSendIns+0xe8>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	dd2e      	ble.n	800960c <RNSSendIns+0xc8>
		{
			insData_send[0] = 17;
 80095ae:	4b1e      	ldr	r3, [pc, #120]	; (8009628 <RNSSendIns+0xe4>)
 80095b0:	2211      	movs	r2, #17
 80095b2:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	791a      	ldrb	r2, [r3, #4]
 80095b8:	4b1b      	ldr	r3, [pc, #108]	; (8009628 <RNSSendIns+0xe4>)
 80095ba:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS, insData_send,2);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6818      	ldr	r0, [r3, #0]
 80095c0:	2302      	movs	r3, #2
 80095c2:	4a19      	ldr	r2, [pc, #100]	; (8009628 <RNSSendIns+0xe4>)
 80095c4:	2117      	movs	r1, #23
 80095c6:	f7fa f8e5 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6818      	ldr	r0, [r3, #0]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f103 0208 	add.w	r2, r3, #8
 80095d4:	2308      	movs	r3, #8
 80095d6:	2118      	movs	r1, #24
 80095d8:	f7fa f8dc 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6818      	ldr	r0, [r3, #0]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f103 0210 	add.w	r2, r3, #16
 80095e6:	2308      	movs	r3, #8
 80095e8:	2119      	movs	r1, #25
 80095ea:	f7fa f8d3 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 80095ee:	4b10      	ldr	r3, [pc, #64]	; (8009630 <RNSSendIns+0xec>)
 80095f0:	785b      	ldrb	r3, [r3, #1]
 80095f2:	b25b      	sxtb	r3, r3
 80095f4:	4a0e      	ldr	r2, [pc, #56]	; (8009630 <RNSSendIns+0xec>)
 80095f6:	43db      	mvns	r3, r3
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	09db      	lsrs	r3, r3, #7
 80095fc:	b2d9      	uxtb	r1, r3
 80095fe:	7853      	ldrb	r3, [r2, #1]
 8009600:	f361 13c7 	bfi	r3, r1, #7, #1
 8009604:	7053      	strb	r3, [r2, #1]
			wait = 0;
 8009606:	2300      	movs	r3, #0
 8009608:	60fb      	str	r3, [r7, #12]
 800960a:	e002      	b.n	8009612 <RNSSendIns+0xce>
		}
		else
		{
			wait++;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	3301      	adds	r3, #1
 8009610:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009618:	2b02      	cmp	r3, #2
 800961a:	d0c4      	beq.n	80095a6 <RNSSendIns+0x62>
		}
	}

}
 800961c:	bf00      	nop
 800961e:	bf00      	nop
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	2000aa5c 	.word	0x2000aa5c
 800962c:	001e847f 	.word	0x001e847f
 8009630:	40020814 	.word	0x40020814

08009634 <RNSSet>:
 * Function Return		: None
 * Function Example		: RNSSet(&RNS, RNS_F_KCD_PTD, 0.9956, 0.01/2000);
 */

void RNSSet(RNS_interface_t* rns, unsigned char parameter, ...)
{
 8009634:	b40e      	push	{r1, r2, r3}
 8009636:	b580      	push	{r7, lr}
 8009638:	b085      	sub	sp, #20
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]

	va_list value;
	rns->param.parameter = parameter;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	7f3a      	ldrb	r2, [r7, #28]
 8009642:	761a      	strb	r2, [r3, #24]
	va_start(value, parameter);
 8009644:	f107 0320 	add.w	r3, r7, #32
 8009648:	60bb      	str	r3, [r7, #8]
	while(rns->RNS_data.common_instruction == RNS_WAITING);
 800964a:	bf00      	nop
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009652:	2b02      	cmp	r3, #2
 8009654:	d0fa      	beq.n	800964c <RNSSet+0x18>
	if (parameter > RNS_PARAM_1){
 8009656:	7f3b      	ldrb	r3, [r7, #28]
 8009658:	2b18      	cmp	r3, #24
 800965a:	d92b      	bls.n	80096b4 <RNSSet+0x80>
		rns->param.param_buffer[0].data = va_arg(value, double);
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	3307      	adds	r3, #7
 8009660:	f023 0307 	bic.w	r3, r3, #7
 8009664:	f103 0208 	add.w	r2, r3, #8
 8009668:	60ba      	str	r2, [r7, #8]
 800966a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966e:	4610      	mov	r0, r2
 8009670:	4619      	mov	r1, r3
 8009672:	f7f7 fab9 	bl	8000be8 <__aeabi_d2f>
 8009676:	4602      	mov	r2, r0
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	61da      	str	r2, [r3, #28]
		rns->param.param_buffer[1].data = 0;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f04f 0200 	mov.w	r2, #0
 8009682:	621a      	str	r2, [r3, #32]
		rns->param.param_buffer[2].data = 0;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f04f 0200 	mov.w	r2, #0
 800968a:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f04f 0200 	mov.w	r2, #0
 8009692:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f04f 0200 	mov.w	r2, #0
 800969a:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f04f 0200 	mov.w	r2, #0
 80096a2:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f04f 0200 	mov.w	r2, #0
 80096aa:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f04f 0200 	mov.w	r2, #0
 80096b2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_2){
 80096b4:	7f3b      	ldrb	r3, [r7, #28]
 80096b6:	2b1e      	cmp	r3, #30
 80096b8:	d927      	bls.n	800970a <RNSSet+0xd6>
		rns->param.param_buffer[1].data = va_arg(value, double);
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	3307      	adds	r3, #7
 80096be:	f023 0307 	bic.w	r3, r3, #7
 80096c2:	f103 0208 	add.w	r2, r3, #8
 80096c6:	60ba      	str	r2, [r7, #8]
 80096c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096cc:	4610      	mov	r0, r2
 80096ce:	4619      	mov	r1, r3
 80096d0:	f7f7 fa8a 	bl	8000be8 <__aeabi_d2f>
 80096d4:	4602      	mov	r2, r0
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	621a      	str	r2, [r3, #32]
		rns->param.param_buffer[2].data = 0;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f04f 0200 	mov.w	r2, #0
 80096e0:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f04f 0200 	mov.w	r2, #0
 80096e8:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f04f 0200 	mov.w	r2, #0
 80096f0:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f04f 0200 	mov.w	r2, #0
 80096f8:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f04f 0200 	mov.w	r2, #0
 8009700:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f04f 0200 	mov.w	r2, #0
 8009708:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_3){
 800970a:	7f3b      	ldrb	r3, [r7, #28]
 800970c:	2b23      	cmp	r3, #35	; 0x23
 800970e:	d923      	bls.n	8009758 <RNSSet+0x124>
		rns->param.param_buffer[2].data = va_arg(value, double);
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	3307      	adds	r3, #7
 8009714:	f023 0307 	bic.w	r3, r3, #7
 8009718:	f103 0208 	add.w	r2, r3, #8
 800971c:	60ba      	str	r2, [r7, #8]
 800971e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009722:	4610      	mov	r0, r2
 8009724:	4619      	mov	r1, r3
 8009726:	f7f7 fa5f 	bl	8000be8 <__aeabi_d2f>
 800972a:	4602      	mov	r2, r0
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f04f 0200 	mov.w	r2, #0
 8009736:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f04f 0200 	mov.w	r2, #0
 800973e:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f04f 0200 	mov.w	r2, #0
 8009746:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f04f 0200 	mov.w	r2, #0
 800974e:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f04f 0200 	mov.w	r2, #0
 8009756:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_4){
 8009758:	7f3b      	ldrb	r3, [r7, #28]
 800975a:	2b48      	cmp	r3, #72	; 0x48
 800975c:	d91f      	bls.n	800979e <RNSSet+0x16a>
		rns->param.param_buffer[3].data = va_arg(value, double);
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	3307      	adds	r3, #7
 8009762:	f023 0307 	bic.w	r3, r3, #7
 8009766:	f103 0208 	add.w	r2, r3, #8
 800976a:	60ba      	str	r2, [r7, #8]
 800976c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009770:	4610      	mov	r0, r2
 8009772:	4619      	mov	r1, r3
 8009774:	f7f7 fa38 	bl	8000be8 <__aeabi_d2f>
 8009778:	4602      	mov	r2, r0
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f04f 0200 	mov.w	r2, #0
 8009784:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f04f 0200 	mov.w	r2, #0
 800978c:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f04f 0200 	mov.w	r2, #0
 8009794:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f04f 0200 	mov.w	r2, #0
 800979c:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_5){
 800979e:	7f3b      	ldrb	r3, [r7, #28]
 80097a0:	2b50      	cmp	r3, #80	; 0x50
 80097a2:	d91b      	bls.n	80097dc <RNSSet+0x1a8>
		rns->param.param_buffer[4].data = va_arg(value,double);
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	3307      	adds	r3, #7
 80097a8:	f023 0307 	bic.w	r3, r3, #7
 80097ac:	f103 0208 	add.w	r2, r3, #8
 80097b0:	60ba      	str	r2, [r7, #8]
 80097b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b6:	4610      	mov	r0, r2
 80097b8:	4619      	mov	r1, r3
 80097ba:	f7f7 fa15 	bl	8000be8 <__aeabi_d2f>
 80097be:	4602      	mov	r2, r0
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f04f 0200 	mov.w	r2, #0
 80097ca:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f04f 0200 	mov.w	r2, #0
 80097d2:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f04f 0200 	mov.w	r2, #0
 80097da:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_6){
 80097dc:	7f3b      	ldrb	r3, [r7, #28]
 80097de:	2b51      	cmp	r3, #81	; 0x51
 80097e0:	d917      	bls.n	8009812 <RNSSet+0x1de>
		rns->param.param_buffer[5].data = va_arg(value, double);
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	3307      	adds	r3, #7
 80097e6:	f023 0307 	bic.w	r3, r3, #7
 80097ea:	f103 0208 	add.w	r2, r3, #8
 80097ee:	60ba      	str	r2, [r7, #8]
 80097f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f4:	4610      	mov	r0, r2
 80097f6:	4619      	mov	r1, r3
 80097f8:	f7f7 f9f6 	bl	8000be8 <__aeabi_d2f>
 80097fc:	4602      	mov	r2, r0
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f04f 0200 	mov.w	r2, #0
 8009808:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f04f 0200 	mov.w	r2, #0
 8009810:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_7){
 8009812:	7f3b      	ldrb	r3, [r7, #28]
 8009814:	2b52      	cmp	r3, #82	; 0x52
 8009816:	d913      	bls.n	8009840 <RNSSet+0x20c>
		rns->param.param_buffer[6].data = va_arg(value, double);
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	3307      	adds	r3, #7
 800981c:	f023 0307 	bic.w	r3, r3, #7
 8009820:	f103 0208 	add.w	r2, r3, #8
 8009824:	60ba      	str	r2, [r7, #8]
 8009826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982a:	4610      	mov	r0, r2
 800982c:	4619      	mov	r1, r3
 800982e:	f7f7 f9db 	bl	8000be8 <__aeabi_d2f>
 8009832:	4602      	mov	r2, r0
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f04f 0200 	mov.w	r2, #0
 800983e:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if(parameter > RNS_PARAM_8){
 8009840:	7f3b      	ldrb	r3, [r7, #28]
 8009842:	2b54      	cmp	r3, #84	; 0x54
 8009844:	d90f      	bls.n	8009866 <RNSSet+0x232>
		rns->param.param_buffer[7].data = va_arg(value, double);
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	3307      	adds	r3, #7
 800984a:	f023 0307 	bic.w	r3, r3, #7
 800984e:	f103 0208 	add.w	r2, r3, #8
 8009852:	60ba      	str	r2, [r7, #8]
 8009854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009858:	4610      	mov	r0, r2
 800985a:	4619      	mov	r1, r3
 800985c:	f7f7 f9c4 	bl	8000be8 <__aeabi_d2f>
 8009860:	4602      	mov	r2, r0
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	639a      	str	r2, [r3, #56]	; 0x38
	}

	va_end(value);

	insData_send[0] = 17;
 8009866:	4b4d      	ldr	r3, [pc, #308]	; (800999c <RNSSet+0x368>)
 8009868:	2211      	movs	r2, #17
 800986a:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->param.parameter;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	7e1a      	ldrb	r2, [r3, #24]
 8009870:	4b4a      	ldr	r3, [pc, #296]	; (800999c <RNSSet+0x368>)
 8009872:	705a      	strb	r2, [r3, #1]

	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6818      	ldr	r0, [r3, #0]
 8009878:	2302      	movs	r3, #2
 800987a:	4a48      	ldr	r2, [pc, #288]	; (800999c <RNSSet+0x368>)
 800987c:	2117      	movs	r1, #23
 800987e:	f7f9 ff89 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->param.param_buffer[0]),8);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6818      	ldr	r0, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f103 021c 	add.w	r2, r3, #28
 800988c:	2308      	movs	r3, #8
 800988e:	2118      	movs	r1, #24
 8009890:	f7f9 ff80 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->param.param_buffer[2]),8);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6818      	ldr	r0, [r3, #0]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800989e:	2308      	movs	r3, #8
 80098a0:	2119      	movs	r1, #25
 80098a2:	f7f9 ff77 	bl	8003794 <CAN_TxMsg>
	if(parameter > RNS_PARAM_5)
 80098a6:	7f3b      	ldrb	r3, [r7, #28]
 80098a8:	2b50      	cmp	r3, #80	; 0x50
 80098aa:	d908      	bls.n	80098be <RNSSet+0x28a>
		CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf3,&(rns->param.param_buffer[4]),8);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6818      	ldr	r0, [r3, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80098b6:	2308      	movs	r3, #8
 80098b8:	211a      	movs	r1, #26
 80098ba:	f7f9 ff6b 	bl	8003794 <CAN_TxMsg>
	if(parameter > RNS_PARAM_7)
 80098be:	7f3b      	ldrb	r3, [r7, #28]
 80098c0:	2b52      	cmp	r3, #82	; 0x52
 80098c2:	d908      	bls.n	80098d6 <RNSSet+0x2a2>
		CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf4,&(rns->param.param_buffer[6]),8);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6818      	ldr	r0, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80098ce:	2308      	movs	r3, #8
 80098d0:	211b      	movs	r1, #27
 80098d2:	f7f9 ff5f 	bl	8003794 <CAN_TxMsg>

	rns->RNS_data.common_instruction = RNS_WAITING;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2202      	movs	r2, #2
 80098da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	int wait = 0;
 80098de:	2300      	movs	r3, #0
 80098e0:	60fb      	str	r3, [r7, #12]

	while(rns->RNS_data.common_instruction == RNS_WAITING)
 80098e2:	e04d      	b.n	8009980 <RNSSet+0x34c>
	{
		if(wait >= 2000000)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	4a2e      	ldr	r2, [pc, #184]	; (80099a0 <RNSSet+0x36c>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	dd46      	ble.n	800997a <RNSSet+0x346>
		{
			insData_send[0] = 17;
 80098ec:	4b2b      	ldr	r3, [pc, #172]	; (800999c <RNSSet+0x368>)
 80098ee:	2211      	movs	r2, #17
 80098f0:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->param.parameter;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	7e1a      	ldrb	r2, [r3, #24]
 80098f6:	4b29      	ldr	r3, [pc, #164]	; (800999c <RNSSet+0x368>)
 80098f8:	705a      	strb	r2, [r3, #1]

			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6818      	ldr	r0, [r3, #0]
 80098fe:	2302      	movs	r3, #2
 8009900:	4a26      	ldr	r2, [pc, #152]	; (800999c <RNSSet+0x368>)
 8009902:	2117      	movs	r1, #23
 8009904:	f7f9 ff46 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->param.param_buffer[0]),8);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6818      	ldr	r0, [r3, #0]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f103 021c 	add.w	r2, r3, #28
 8009912:	2308      	movs	r3, #8
 8009914:	2118      	movs	r1, #24
 8009916:	f7f9 ff3d 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->param.param_buffer[2]),8);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6818      	ldr	r0, [r3, #0]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8009924:	2308      	movs	r3, #8
 8009926:	2119      	movs	r1, #25
 8009928:	f7f9 ff34 	bl	8003794 <CAN_TxMsg>
			if(parameter > RNS_PARAM_5)
 800992c:	7f3b      	ldrb	r3, [r7, #28]
 800992e:	2b50      	cmp	r3, #80	; 0x50
 8009930:	d908      	bls.n	8009944 <RNSSet+0x310>
				CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf3,&(rns->param.param_buffer[4]),8);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6818      	ldr	r0, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800993c:	2308      	movs	r3, #8
 800993e:	211a      	movs	r1, #26
 8009940:	f7f9 ff28 	bl	8003794 <CAN_TxMsg>
			if(parameter > RNS_PARAM_7)
 8009944:	7f3b      	ldrb	r3, [r7, #28]
 8009946:	2b52      	cmp	r3, #82	; 0x52
 8009948:	d908      	bls.n	800995c <RNSSet+0x328>
				CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf4,&(rns->param.param_buffer[6]),8);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6818      	ldr	r0, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009954:	2308      	movs	r3, #8
 8009956:	211b      	movs	r1, #27
 8009958:	f7f9 ff1c 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 800995c:	4b11      	ldr	r3, [pc, #68]	; (80099a4 <RNSSet+0x370>)
 800995e:	785b      	ldrb	r3, [r3, #1]
 8009960:	b25b      	sxtb	r3, r3
 8009962:	4a10      	ldr	r2, [pc, #64]	; (80099a4 <RNSSet+0x370>)
 8009964:	43db      	mvns	r3, r3
 8009966:	b2db      	uxtb	r3, r3
 8009968:	09db      	lsrs	r3, r3, #7
 800996a:	b2d9      	uxtb	r1, r3
 800996c:	7853      	ldrb	r3, [r2, #1]
 800996e:	f361 13c7 	bfi	r3, r1, #7, #1
 8009972:	7053      	strb	r3, [r2, #1]
			wait = 0;
 8009974:	2300      	movs	r3, #0
 8009976:	60fb      	str	r3, [r7, #12]
 8009978:	e002      	b.n	8009980 <RNSSet+0x34c>
		}
		else
			wait++;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	3301      	adds	r3, #1
 800997e:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009986:	2b02      	cmp	r3, #2
 8009988:	d0ac      	beq.n	80098e4 <RNSSet+0x2b0>
	}
	//UARTPrintString(&huart5,"1\r\n");

}
 800998a:	bf00      	nop
 800998c:	bf00      	nop
 800998e:	3714      	adds	r7, #20
 8009990:	46bd      	mov	sp, r7
 8009992:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009996:	b003      	add	sp, #12
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	2000aa5c 	.word	0x2000aa5c
 80099a0:	001e847f 	.word	0x001e847f
 80099a4:	40020814 	.word	0x40020814

080099a8 <RNSEnquire>:
 * Function Return		: None
 * Function Example		: RNSSet(&RNS, RNS_F_KCD_PTD, 0.9956, 0.01/2000);
 */

uint8_t RNSEnquire(unsigned char parameter, RNS_interface_t* rns)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	4603      	mov	r3, r0
 80099b0:	6039      	str	r1, [r7, #0]
 80099b2:	71fb      	strb	r3, [r7, #7]

	rns->ins.instruction = parameter;
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	79fa      	ldrb	r2, [r7, #7]
 80099b8:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0.0;
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	f04f 0200 	mov.w	r2, #0
 80099c0:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0.0;
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	f04f 0200 	mov.w	r2, #0
 80099c8:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0.0;
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	f04f 0200 	mov.w	r2, #0
 80099d0:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0.0;
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	f04f 0200 	mov.w	r2, #0
 80099d8:	615a      	str	r2, [r3, #20]

//	RNSSendIns(rns);

	rns->RNS_data.common_instruction = RNS_WAITING;
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	2202      	movs	r2, #2
 80099de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 80099e2:	4b3b      	ldr	r3, [pc, #236]	; (8009ad0 <RNSEnquire+0x128>)
 80099e4:	2211      	movs	r2, #17
 80099e6:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	791a      	ldrb	r2, [r3, #4]
 80099ec:	4b38      	ldr	r3, [pc, #224]	; (8009ad0 <RNSEnquire+0x128>)
 80099ee:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	6818      	ldr	r0, [r3, #0]
 80099f4:	2302      	movs	r3, #2
 80099f6:	4a36      	ldr	r2, [pc, #216]	; (8009ad0 <RNSEnquire+0x128>)
 80099f8:	2117      	movs	r1, #23
 80099fa:	f7f9 fecb 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	6818      	ldr	r0, [r3, #0]
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	f103 0208 	add.w	r2, r3, #8
 8009a08:	2308      	movs	r3, #8
 8009a0a:	2118      	movs	r1, #24
 8009a0c:	f7f9 fec2 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	6818      	ldr	r0, [r3, #0]
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	f103 0210 	add.w	r2, r3, #16
 8009a1a:	2308      	movs	r3, #8
 8009a1c:	2119      	movs	r1, #25
 8009a1e:	f7f9 feb9 	bl	8003794 <CAN_TxMsg>

	int wait = 0;
 8009a22:	2300      	movs	r3, #0
 8009a24:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8009a26:	e035      	b.n	8009a94 <RNSEnquire+0xec>
	{
		if(wait >= 2000000)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	4a2a      	ldr	r2, [pc, #168]	; (8009ad4 <RNSEnquire+0x12c>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	dd2e      	ble.n	8009a8e <RNSEnquire+0xe6>
		{
			insData_send[0] = 17;
 8009a30:	4b27      	ldr	r3, [pc, #156]	; (8009ad0 <RNSEnquire+0x128>)
 8009a32:	2211      	movs	r2, #17
 8009a34:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	791a      	ldrb	r2, [r3, #4]
 8009a3a:	4b25      	ldr	r3, [pc, #148]	; (8009ad0 <RNSEnquire+0x128>)
 8009a3c:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	6818      	ldr	r0, [r3, #0]
 8009a42:	2302      	movs	r3, #2
 8009a44:	4a22      	ldr	r2, [pc, #136]	; (8009ad0 <RNSEnquire+0x128>)
 8009a46:	2117      	movs	r1, #23
 8009a48:	f7f9 fea4 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	6818      	ldr	r0, [r3, #0]
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	f103 0208 	add.w	r2, r3, #8
 8009a56:	2308      	movs	r3, #8
 8009a58:	2118      	movs	r1, #24
 8009a5a:	f7f9 fe9b 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	6818      	ldr	r0, [r3, #0]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	f103 0210 	add.w	r2, r3, #16
 8009a68:	2308      	movs	r3, #8
 8009a6a:	2119      	movs	r1, #25
 8009a6c:	f7f9 fe92 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 8009a70:	4b19      	ldr	r3, [pc, #100]	; (8009ad8 <RNSEnquire+0x130>)
 8009a72:	785b      	ldrb	r3, [r3, #1]
 8009a74:	b25b      	sxtb	r3, r3
 8009a76:	4a18      	ldr	r2, [pc, #96]	; (8009ad8 <RNSEnquire+0x130>)
 8009a78:	43db      	mvns	r3, r3
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	09db      	lsrs	r3, r3, #7
 8009a7e:	b2d9      	uxtb	r1, r3
 8009a80:	7853      	ldrb	r3, [r2, #1]
 8009a82:	f361 13c7 	bfi	r3, r1, #7, #1
 8009a86:	7053      	strb	r3, [r2, #1]
			wait = 0;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	60fb      	str	r3, [r7, #12]
 8009a8c:	e002      	b.n	8009a94 <RNSEnquire+0xec>
		}
		else wait++;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	3301      	adds	r3, #1
 8009a92:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	d0c4      	beq.n	8009a28 <RNSEnquire+0x80>

	}

	rns->enq.enquiry = parameter;
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	79fa      	ldrb	r2, [r7, #7]
 8009aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rns->enq.enq_buffer[0].data = rns->RNS_data.common_buffer[0].data;
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	641a      	str	r2, [r3, #64]	; 0x40
	rns->enq.enq_buffer[1].data = rns->RNS_data.common_buffer[1].data;
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	645a      	str	r2, [r3, #68]	; 0x44
	rns->enq.enq_buffer[2].data = rns->RNS_data.common_buffer[2].data;
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	649a      	str	r2, [r3, #72]	; 0x48
	rns->enq.enq_buffer[3].data = rns->RNS_data.common_buffer[3].data;
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	64da      	str	r2, [r3, #76]	; 0x4c


	return 1;
 8009ac6:	2301      	movs	r3, #1
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3710      	adds	r7, #16
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	2000aa5c 	.word	0x2000aa5c
 8009ad4:	001e847f 	.word	0x001e847f
 8009ad8:	40020814 	.word	0x40020814

08009adc <ServoxInit>:
 * 						  					TIM_CHANNEL_3
 * 						  					TIM_CHANNEL_4
 * Function Return		: None
 * Function Example		: ServoInit(&SERVO1, &htim3, GPIOA,GPIO_Pin_6, TIM_CHANNEL_1);
 */
void ServoxInit(SERVO_t* servo, TIM_HandleTypeDef* htimx, GPIO_TypeDef * SERVO_GPIOx,uint16_t SERVO_GPIO_Pin, uint32_t channel){
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b08c      	sub	sp, #48	; 0x30
 8009ae0:	af02      	add	r7, sp, #8
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	607a      	str	r2, [r7, #4]
 8009ae8:	807b      	strh	r3, [r7, #2]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009aea:	f107 0318 	add.w	r3, r7, #24
 8009aee:	2200      	movs	r2, #0
 8009af0:	601a      	str	r2, [r3, #0]
 8009af2:	605a      	str	r2, [r3, #4]
 8009af4:	609a      	str	r2, [r3, #8]
 8009af6:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009af8:	f107 0310 	add.w	r3, r7, #16
 8009afc:	2200      	movs	r2, #0
 8009afe:	601a      	str	r2, [r3, #0]
 8009b00:	605a      	str	r2, [r3, #4]


		if(htimx == &htim1){
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	4a6d      	ldr	r2, [pc, #436]	; (8009cbc <ServoxInit+0x1e0>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d106      	bne.n	8009b18 <ServoxInit+0x3c>
			htimx->Instance = TIM1;
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	4a6c      	ldr	r2, [pc, #432]	; (8009cc0 <ServoxInit+0x1e4>)
 8009b0e:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	22a7      	movs	r2, #167	; 0xa7
 8009b14:	605a      	str	r2, [r3, #4]
 8009b16:	e078      	b.n	8009c0a <ServoxInit+0x12e>
		}
		else if(htimx == &htim2)	{
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	4a6a      	ldr	r2, [pc, #424]	; (8009cc4 <ServoxInit+0x1e8>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d107      	bne.n	8009b30 <ServoxInit+0x54>
			htimx->Instance = TIM2;
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009b26:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	2253      	movs	r2, #83	; 0x53
 8009b2c:	605a      	str	r2, [r3, #4]
 8009b2e:	e06c      	b.n	8009c0a <ServoxInit+0x12e>
		}
		else if(htimx == &htim3)	{
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	4a65      	ldr	r2, [pc, #404]	; (8009cc8 <ServoxInit+0x1ec>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d106      	bne.n	8009b46 <ServoxInit+0x6a>
			htimx->Instance = TIM3;
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	4a64      	ldr	r2, [pc, #400]	; (8009ccc <ServoxInit+0x1f0>)
 8009b3c:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	2253      	movs	r2, #83	; 0x53
 8009b42:	605a      	str	r2, [r3, #4]
 8009b44:	e061      	b.n	8009c0a <ServoxInit+0x12e>
		}
		else if(htimx == &htim4)	{
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	4a61      	ldr	r2, [pc, #388]	; (8009cd0 <ServoxInit+0x1f4>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d106      	bne.n	8009b5c <ServoxInit+0x80>
			htimx->Instance = TIM4;
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	4a60      	ldr	r2, [pc, #384]	; (8009cd4 <ServoxInit+0x1f8>)
 8009b52:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	2253      	movs	r2, #83	; 0x53
 8009b58:	605a      	str	r2, [r3, #4]
 8009b5a:	e056      	b.n	8009c0a <ServoxInit+0x12e>
		}
		else if(htimx == &htim5)	{
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	4a5e      	ldr	r2, [pc, #376]	; (8009cd8 <ServoxInit+0x1fc>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d106      	bne.n	8009b72 <ServoxInit+0x96>
			htimx->Instance = TIM5;
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	4a5d      	ldr	r2, [pc, #372]	; (8009cdc <ServoxInit+0x200>)
 8009b68:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	2253      	movs	r2, #83	; 0x53
 8009b6e:	605a      	str	r2, [r3, #4]
 8009b70:	e04b      	b.n	8009c0a <ServoxInit+0x12e>
		}
		else if(htimx == &htim8)	{
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	4a5a      	ldr	r2, [pc, #360]	; (8009ce0 <ServoxInit+0x204>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d106      	bne.n	8009b88 <ServoxInit+0xac>
			htimx->Instance = TIM8;
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	4a59      	ldr	r2, [pc, #356]	; (8009ce4 <ServoxInit+0x208>)
 8009b7e:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	22a7      	movs	r2, #167	; 0xa7
 8009b84:	605a      	str	r2, [r3, #4]
 8009b86:	e040      	b.n	8009c0a <ServoxInit+0x12e>
		}
		else if(htimx == &htim9)	{
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	4a57      	ldr	r2, [pc, #348]	; (8009ce8 <ServoxInit+0x20c>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d106      	bne.n	8009b9e <ServoxInit+0xc2>
			htimx->Instance = TIM9;
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	4a56      	ldr	r2, [pc, #344]	; (8009cec <ServoxInit+0x210>)
 8009b94:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	22a7      	movs	r2, #167	; 0xa7
 8009b9a:	605a      	str	r2, [r3, #4]
 8009b9c:	e035      	b.n	8009c0a <ServoxInit+0x12e>
		}
		else if(htimx == &htim10)	{
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	4a53      	ldr	r2, [pc, #332]	; (8009cf0 <ServoxInit+0x214>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d106      	bne.n	8009bb4 <ServoxInit+0xd8>
			htimx->Instance = TIM10;
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	4a52      	ldr	r2, [pc, #328]	; (8009cf4 <ServoxInit+0x218>)
 8009baa:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	22a7      	movs	r2, #167	; 0xa7
 8009bb0:	605a      	str	r2, [r3, #4]
 8009bb2:	e02a      	b.n	8009c0a <ServoxInit+0x12e>
		}
		else if(htimx == &htim11)	{
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	4a50      	ldr	r2, [pc, #320]	; (8009cf8 <ServoxInit+0x21c>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d106      	bne.n	8009bca <ServoxInit+0xee>
			htimx->Instance = TIM11;
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	4a4f      	ldr	r2, [pc, #316]	; (8009cfc <ServoxInit+0x220>)
 8009bc0:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	22a7      	movs	r2, #167	; 0xa7
 8009bc6:	605a      	str	r2, [r3, #4]
 8009bc8:	e01f      	b.n	8009c0a <ServoxInit+0x12e>
		}
		else if(htimx == &htim12)	{
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	4a4c      	ldr	r2, [pc, #304]	; (8009d00 <ServoxInit+0x224>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d106      	bne.n	8009be0 <ServoxInit+0x104>
			htimx->Instance = TIM12;
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	4a4b      	ldr	r2, [pc, #300]	; (8009d04 <ServoxInit+0x228>)
 8009bd6:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	2253      	movs	r2, #83	; 0x53
 8009bdc:	605a      	str	r2, [r3, #4]
 8009bde:	e014      	b.n	8009c0a <ServoxInit+0x12e>
		}
		else if(htimx == &htim13)	{
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	4a49      	ldr	r2, [pc, #292]	; (8009d08 <ServoxInit+0x22c>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d106      	bne.n	8009bf6 <ServoxInit+0x11a>
			htimx->Instance = TIM13;
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	4a48      	ldr	r2, [pc, #288]	; (8009d0c <ServoxInit+0x230>)
 8009bec:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	2253      	movs	r2, #83	; 0x53
 8009bf2:	605a      	str	r2, [r3, #4]
 8009bf4:	e009      	b.n	8009c0a <ServoxInit+0x12e>
			}
		else if(htimx == &htim14)	{
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	4a45      	ldr	r2, [pc, #276]	; (8009d10 <ServoxInit+0x234>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d105      	bne.n	8009c0a <ServoxInit+0x12e>
			htimx->Instance = TIM14;
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	4a44      	ldr	r2, [pc, #272]	; (8009d14 <ServoxInit+0x238>)
 8009c02:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	2253      	movs	r2, #83	; 0x53
 8009c08:	605a      	str	r2, [r3, #4]
			}


		htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	609a      	str	r2, [r3, #8]
		htimx->Init.Period = 19999;
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8009c16:	60da      	str	r2, [r3, #12]
		htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	611a      	str	r2, [r3, #16]
		htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	2280      	movs	r2, #128	; 0x80
 8009c22:	619a      	str	r2, [r3, #24]
		 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 8009c24:	68b8      	ldr	r0, [r7, #8]
 8009c26:	f00b fd3f 	bl	80156a8 <HAL_TIM_Base_Init>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d001      	beq.n	8009c34 <ServoxInit+0x158>
		  {
		    Error_Handler();
 8009c30:	f7fa fcb0 	bl	8004594 <Error_Handler>
		  }
		  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c38:	61bb      	str	r3, [r7, #24]
		  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 8009c3a:	f107 0318 	add.w	r3, r7, #24
 8009c3e:	4619      	mov	r1, r3
 8009c40:	68b8      	ldr	r0, [r7, #8]
 8009c42:	f00c f8a5 	bl	8015d90 <HAL_TIM_ConfigClockSource>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d001      	beq.n	8009c50 <ServoxInit+0x174>
		  {
		    Error_Handler();
 8009c4c:	f7fa fca2 	bl	8004594 <Error_Handler>
		  }
		if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 8009c50:	68b8      	ldr	r0, [r7, #8]
 8009c52:	f00b fd9c 	bl	801578e <HAL_TIM_PWM_Init>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d001      	beq.n	8009c60 <ServoxInit+0x184>
			{
				Error_Handler();
 8009c5c:	f7fa fc9a 	bl	8004594 <Error_Handler>
			}

		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009c60:	2300      	movs	r3, #0
 8009c62:	613b      	str	r3, [r7, #16]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009c64:	2300      	movs	r3, #0
 8009c66:	617b      	str	r3, [r7, #20]
		if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8009c68:	f107 0310 	add.w	r3, r7, #16
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	68b8      	ldr	r0, [r7, #8]
 8009c70:	f00c fc8a 	bl	8016588 <HAL_TIMEx_MasterConfigSynchronization>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <ServoxInit+0x1a2>
		{
			Error_Handler();
 8009c7a:	f7fa fc8b 	bl	8004594 <Error_Handler>
		}


	    HAL_TIM_Base_Start(htimx);
 8009c7e:	68b8      	ldr	r0, [r7, #8]
 8009c80:	f00b fd3d 	bl	80156fe <HAL_TIM_Base_Start>

	GPIOPinsInit(SERVO_GPIOx, SERVO_GPIO_Pin, GPIO_MODE_AF_PP, GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009c84:	8879      	ldrh	r1, [r7, #2]
 8009c86:	2301      	movs	r3, #1
 8009c88:	9300      	str	r3, [sp, #0]
 8009c8a:	2302      	movs	r3, #2
 8009c8c:	2202      	movs	r2, #2
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7f7 fb36 	bl	8001300 <GPIOPinsInit>

	servo->htimx = htimx;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	601a      	str	r2, [r3, #0]
	servo->htimx_Channel = channel;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c9e:	605a      	str	r2, [r3, #4]

	PWMChannelConfig(htimx, channel , SERVO_GPIOx,SERVO_GPIO_Pin);
 8009ca0:	887b      	ldrh	r3, [r7, #2]
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009ca6:	68b8      	ldr	r0, [r7, #8]
 8009ca8:	f7f7 fd0a 	bl	80016c0 <PWMChannelConfig>

	servo->currentPulse = 0;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	621a      	str	r2, [r3, #32]
}
 8009cb2:	bf00      	nop
 8009cb4:	3728      	adds	r7, #40	; 0x28
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	20006418 	.word	0x20006418
 8009cc0:	40010000 	.word	0x40010000
 8009cc4:	2000651c 	.word	0x2000651c
 8009cc8:	200061cc 	.word	0x200061cc
 8009ccc:	40000400 	.word	0x40000400
 8009cd0:	20006008 	.word	0x20006008
 8009cd4:	40000800 	.word	0x40000800
 8009cd8:	2000618c 	.word	0x2000618c
 8009cdc:	40000c00 	.word	0x40000c00
 8009ce0:	20005fc8 	.word	0x20005fc8
 8009ce4:	40010400 	.word	0x40010400
 8009ce8:	20006458 	.word	0x20006458
 8009cec:	40014000 	.word	0x40014000
 8009cf0:	200060e8 	.word	0x200060e8
 8009cf4:	40014400 	.word	0x40014400
 8009cf8:	20006330 	.word	0x20006330
 8009cfc:	40014800 	.word	0x40014800
 8009d00:	2000663c 	.word	0x2000663c
 8009d04:	40001800 	.word	0x40001800
 8009d08:	200062b0 	.word	0x200062b0
 8009d0c:	40001c00 	.word	0x40001c00
 8009d10:	200065fc 	.word	0x200065fc
 8009d14:	40002000 	.word	0x40002000

08009d18 <ServoSetPulse>:
 * 						  pulse		output compare pulse to be set
 * Function Return		: None
 * Function Example		: ServoSetPulse(&SERVO1, 1000);
 */

void ServoSetPulse(SERVO_t* servo, uint32_t pulse){
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
	if(pulse < servo->SERVO_pulseMinLimit){
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	695b      	ldr	r3, [r3, #20]
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d204      	bcs.n	8009d36 <ServoSetPulse+0x1e>
		servo->currentPulse = servo->SERVO_pulseMinLimit;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	695a      	ldr	r2, [r3, #20]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	621a      	str	r2, [r3, #32]
 8009d34:	e00c      	b.n	8009d50 <ServoSetPulse+0x38>
	}else if(pulse > servo->SERVO_pulseMaxLimit){
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	699b      	ldr	r3, [r3, #24]
 8009d3a:	683a      	ldr	r2, [r7, #0]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d904      	bls.n	8009d4a <ServoSetPulse+0x32>
		servo->currentPulse = servo->SERVO_pulseMaxLimit;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	699a      	ldr	r2, [r3, #24]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	621a      	str	r2, [r3, #32]
 8009d48:	e002      	b.n	8009d50 <ServoSetPulse+0x38>
	}else{
		servo->currentPulse = pulse;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	683a      	ldr	r2, [r7, #0]
 8009d4e:	621a      	str	r2, [r3, #32]
	}
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d106      	bne.n	8009d66 <ServoSetPulse+0x4e>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	6a12      	ldr	r2, [r2, #32]
 8009d62:	635a      	str	r2, [r3, #52]	; 0x34

}
 8009d64:	e01b      	b.n	8009d9e <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	2b04      	cmp	r3, #4
 8009d6c:	d106      	bne.n	8009d7c <ServoSetPulse+0x64>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a1b      	ldr	r3, [r3, #32]
 8009d78:	6393      	str	r3, [r2, #56]	; 0x38
}
 8009d7a:	e010      	b.n	8009d9e <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	2b08      	cmp	r3, #8
 8009d82:	d106      	bne.n	8009d92 <ServoSetPulse+0x7a>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a1b      	ldr	r3, [r3, #32]
 8009d8e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8009d90:	e005      	b.n	8009d9e <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6a1b      	ldr	r3, [r3, #32]
 8009d9c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8009d9e:	bf00      	nop
 8009da0:	370c      	adds	r7, #12
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr

08009daa <ServoInitPulseLimit>:
	servo->TIMx_Compare = servo->SERVO_pulse0degree + (servo->SERVO_pulse1degree)*angle;
	servo->currentPulse = servo->TIMx_Compare;
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->TIMx_Compare);
}

void ServoInitPulseLimit(SERVO_t* servo, uint32_t MinPulse, uint32_t MaxPulse){
 8009daa:	b480      	push	{r7}
 8009dac:	b085      	sub	sp, #20
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	60f8      	str	r0, [r7, #12]
 8009db2:	60b9      	str	r1, [r7, #8]
 8009db4:	607a      	str	r2, [r7, #4]
	servo->SERVO_pulseMinLimit = MinPulse;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	68ba      	ldr	r2, [r7, #8]
 8009dba:	615a      	str	r2, [r3, #20]
	servo->SERVO_pulseMaxLimit = MaxPulse;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	619a      	str	r2, [r3, #24]
}
 8009dc2:	bf00      	nop
 8009dc4:	3714      	adds	r7, #20
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr
	...

08009dd0 <SPI1_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI1_IRQHandler(void)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi1);
 8009dd4:	4802      	ldr	r0, [pc, #8]	; (8009de0 <SPI1_IRQHandler+0x10>)
 8009dd6:	f00b fb49 	bl	801546c <HAL_SPI_IRQHandler>
}
 8009dda:	bf00      	nop
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	2000a084 	.word	0x2000a084

08009de4 <SPI2_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI2_IRQHandler(void)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi2);
 8009de8:	4802      	ldr	r0, [pc, #8]	; (8009df4 <SPI2_IRQHandler+0x10>)
 8009dea:	f00b fb3f 	bl	801546c <HAL_SPI_IRQHandler>
}
 8009dee:	bf00      	nop
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	20006d94 	.word	0x20006d94

08009df8 <SPI3_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI3_IRQHandler(void)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi3);
 8009dfc:	4802      	ldr	r0, [pc, #8]	; (8009e08 <SPI3_IRQHandler+0x10>)
 8009dfe:	f00b fb35 	bl	801546c <HAL_SPI_IRQHandler>
}
 8009e02:	bf00      	nop
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	20007c3c 	.word	0x20007c3c

08009e0c <Initialize>:
uint8_t mailbox = 0, buf2_flag = 0, buf2_flagC2 = 0;

/************************************************/
/*		 	 	Functions		       		  	*/
/************************************************/
void Initialize(){
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af04      	add	r7, sp, #16
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8009e12:	f006 ff55 	bl	8010cc0 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8009e16:	f7f8 ffe3 	bl	8002de0 <SystemClock_Config>

	/* Initialize all configured peripherals */
	GPIOPinsInit (LED1_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	9300      	str	r3, [sp, #0]
 8009e1e:	2302      	movs	r3, #2
 8009e20:	2201      	movs	r2, #1
 8009e22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009e26:	48c6      	ldr	r0, [pc, #792]	; (800a140 <Initialize+0x334>)
 8009e28:	f7f7 fa6a 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (LED2_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	9300      	str	r3, [sp, #0]
 8009e30:	2302      	movs	r3, #2
 8009e32:	2201      	movs	r2, #1
 8009e34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009e38:	48c1      	ldr	r0, [pc, #772]	; (800a140 <Initialize+0x334>)
 8009e3a:	f7f7 fa61 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (LED3_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009e3e:	2301      	movs	r3, #1
 8009e40:	9300      	str	r3, [sp, #0]
 8009e42:	2302      	movs	r3, #2
 8009e44:	2201      	movs	r2, #1
 8009e46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009e4a:	48bd      	ldr	r0, [pc, #756]	; (800a140 <Initialize+0x334>)
 8009e4c:	f7f7 fa58 	bl	8001300 <GPIOPinsInit>

	GPIOPinsInit (PB1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009e50:	2301      	movs	r3, #1
 8009e52:	9300      	str	r3, [sp, #0]
 8009e54:	2302      	movs	r3, #2
 8009e56:	2200      	movs	r2, #0
 8009e58:	2180      	movs	r1, #128	; 0x80
 8009e5a:	48ba      	ldr	r0, [pc, #744]	; (800a144 <Initialize+0x338>)
 8009e5c:	f7f7 fa50 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (PB2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009e60:	2301      	movs	r3, #1
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	2302      	movs	r3, #2
 8009e66:	2200      	movs	r2, #0
 8009e68:	2101      	movs	r1, #1
 8009e6a:	48b7      	ldr	r0, [pc, #732]	; (800a148 <Initialize+0x33c>)
 8009e6c:	f7f7 fa48 	bl	8001300 <GPIOPinsInit>

	/*Normal IOs*/
	GPIOPinsInit (IP1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009e70:	2301      	movs	r3, #1
 8009e72:	9300      	str	r3, [sp, #0]
 8009e74:	2301      	movs	r3, #1
 8009e76:	2200      	movs	r2, #0
 8009e78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009e7c:	48b2      	ldr	r0, [pc, #712]	; (800a148 <Initialize+0x33c>)
 8009e7e:	f7f7 fa3f 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009e82:	2301      	movs	r3, #1
 8009e84:	9300      	str	r3, [sp, #0]
 8009e86:	2301      	movs	r3, #1
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009e8e:	48ae      	ldr	r0, [pc, #696]	; (800a148 <Initialize+0x33c>)
 8009e90:	f7f7 fa36 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009e94:	2301      	movs	r3, #1
 8009e96:	9300      	str	r3, [sp, #0]
 8009e98:	2301      	movs	r3, #1
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009ea0:	48a9      	ldr	r0, [pc, #676]	; (800a148 <Initialize+0x33c>)
 8009ea2:	f7f7 fa2d 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	9300      	str	r3, [sp, #0]
 8009eaa:	2301      	movs	r3, #1
 8009eac:	2200      	movs	r2, #0
 8009eae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009eb2:	48a5      	ldr	r0, [pc, #660]	; (800a148 <Initialize+0x33c>)
 8009eb4:	f7f7 fa24 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009eb8:	2301      	movs	r3, #1
 8009eba:	9300      	str	r3, [sp, #0]
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009ec4:	489f      	ldr	r0, [pc, #636]	; (800a144 <Initialize+0x338>)
 8009ec6:	f7f7 fa1b 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009eca:	2301      	movs	r3, #1
 8009ecc:	9300      	str	r3, [sp, #0]
 8009ece:	2301      	movs	r3, #1
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009ed6:	489b      	ldr	r0, [pc, #620]	; (800a144 <Initialize+0x338>)
 8009ed8:	f7f7 fa12 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP7_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009edc:	2301      	movs	r3, #1
 8009ede:	9300      	str	r3, [sp, #0]
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009ee8:	4898      	ldr	r0, [pc, #608]	; (800a14c <Initialize+0x340>)
 8009eea:	f7f7 fa09 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP8_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009eee:	2301      	movs	r3, #1
 8009ef0:	9300      	str	r3, [sp, #0]
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009efa:	4894      	ldr	r0, [pc, #592]	; (800a14c <Initialize+0x340>)
 8009efc:	f7f7 fa00 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP9_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f00:	2301      	movs	r3, #1
 8009f02:	9300      	str	r3, [sp, #0]
 8009f04:	2301      	movs	r3, #1
 8009f06:	2200      	movs	r2, #0
 8009f08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009f0c:	488c      	ldr	r0, [pc, #560]	; (800a140 <Initialize+0x334>)
 8009f0e:	f7f7 f9f7 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP10_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f12:	2301      	movs	r3, #1
 8009f14:	9300      	str	r3, [sp, #0]
 8009f16:	2301      	movs	r3, #1
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009f1e:	488c      	ldr	r0, [pc, #560]	; (800a150 <Initialize+0x344>)
 8009f20:	f7f7 f9ee 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP11_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f24:	2301      	movs	r3, #1
 8009f26:	9300      	str	r3, [sp, #0]
 8009f28:	2301      	movs	r3, #1
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	2108      	movs	r1, #8
 8009f2e:	4887      	ldr	r0, [pc, #540]	; (800a14c <Initialize+0x340>)
 8009f30:	f7f7 f9e6 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP12_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f34:	2301      	movs	r3, #1
 8009f36:	9300      	str	r3, [sp, #0]
 8009f38:	2301      	movs	r3, #1
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	2110      	movs	r1, #16
 8009f3e:	4883      	ldr	r0, [pc, #524]	; (800a14c <Initialize+0x340>)
 8009f40:	f7f7 f9de 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP13_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f44:	2301      	movs	r3, #1
 8009f46:	9300      	str	r3, [sp, #0]
 8009f48:	2301      	movs	r3, #1
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	2180      	movs	r1, #128	; 0x80
 8009f4e:	487f      	ldr	r0, [pc, #508]	; (800a14c <Initialize+0x340>)
 8009f50:	f7f7 f9d6 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP14_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f54:	2301      	movs	r3, #1
 8009f56:	9300      	str	r3, [sp, #0]
 8009f58:	2301      	movs	r3, #1
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	2120      	movs	r1, #32
 8009f5e:	4879      	ldr	r0, [pc, #484]	; (800a144 <Initialize+0x338>)
 8009f60:	f7f7 f9ce 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP15_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f64:	2301      	movs	r3, #1
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	2301      	movs	r3, #1
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	2140      	movs	r1, #64	; 0x40
 8009f6e:	4875      	ldr	r0, [pc, #468]	; (800a144 <Initialize+0x338>)
 8009f70:	f7f7 f9c6 	bl	8001300 <GPIOPinsInit>

	GPIOPinsInit (IP16_Analog1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f74:	2301      	movs	r3, #1
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	2301      	movs	r3, #1
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	2101      	movs	r1, #1
 8009f7e:	4870      	ldr	r0, [pc, #448]	; (800a140 <Initialize+0x334>)
 8009f80:	f7f7 f9be 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP17_Analog2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f84:	2301      	movs	r3, #1
 8009f86:	9300      	str	r3, [sp, #0]
 8009f88:	2301      	movs	r3, #1
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	2102      	movs	r1, #2
 8009f8e:	486c      	ldr	r0, [pc, #432]	; (800a140 <Initialize+0x334>)
 8009f90:	f7f7 f9b6 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP18_Analog3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f94:	2301      	movs	r3, #1
 8009f96:	9300      	str	r3, [sp, #0]
 8009f98:	2301      	movs	r3, #1
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	2104      	movs	r1, #4
 8009f9e:	4868      	ldr	r0, [pc, #416]	; (800a140 <Initialize+0x334>)
 8009fa0:	f7f7 f9ae 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP19_Analog4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	9300      	str	r3, [sp, #0]
 8009fa8:	2301      	movs	r3, #1
 8009faa:	2200      	movs	r2, #0
 8009fac:	2108      	movs	r1, #8
 8009fae:	4864      	ldr	r0, [pc, #400]	; (800a140 <Initialize+0x334>)
 8009fb0:	f7f7 f9a6 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP20_Analog5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	2301      	movs	r3, #1
 8009fba:	2200      	movs	r2, #0
 8009fbc:	2110      	movs	r1, #16
 8009fbe:	4860      	ldr	r0, [pc, #384]	; (800a140 <Initialize+0x334>)
 8009fc0:	f7f7 f99e 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP21_Analog6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	2301      	movs	r3, #1
 8009fca:	2200      	movs	r2, #0
 8009fcc:	2120      	movs	r1, #32
 8009fce:	485c      	ldr	r0, [pc, #368]	; (800a140 <Initialize+0x334>)
 8009fd0:	f7f7 f996 	bl	8001300 <GPIOPinsInit>

	//Unused peripheral pins can be used as GPIO Input or Output
//	GPIOPinsInit (UART3_Rx, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);

//	MUXInit(&MUX, MUX1_INPUT_PIN, MUX1_S0_PIN, MUX1_S1_PIN, MUX1_S2_PIN);
	SHIFTREGInit (&SR, CASCADE_1, SR_SCK_PIN, SR_RCK_PIN, SR_SI_PIN);
 8009fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fd8:	9303      	str	r3, [sp, #12]
 8009fda:	4b5b      	ldr	r3, [pc, #364]	; (800a148 <Initialize+0x33c>)
 8009fdc:	9302      	str	r3, [sp, #8]
 8009fde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fe2:	9301      	str	r3, [sp, #4]
 8009fe4:	4b58      	ldr	r3, [pc, #352]	; (800a148 <Initialize+0x33c>)
 8009fe6:	9300      	str	r3, [sp, #0]
 8009fe8:	2380      	movs	r3, #128	; 0x80
 8009fea:	4a57      	ldr	r2, [pc, #348]	; (800a148 <Initialize+0x33c>)
 8009fec:	2101      	movs	r1, #1
 8009fee:	4859      	ldr	r0, [pc, #356]	; (800a154 <Initialize+0x348>)
 8009ff0:	f7f7 feda 	bl	8001da8 <SHIFTREGInit>

	//https://stackoverflow.com/questions/50243996/what-are-valid-values-of-hal-nvic-setpriority-when-using-stm32-and-freertos
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009ff4:	2003      	movs	r0, #3
 8009ff6:	f007 fe22 	bl	8011c3e <HAL_NVIC_SetPriorityGrouping>


	/*************** Set Interrupt Priorities in BIOS/priorities.h ***************/

	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 8009ffa:	4b57      	ldr	r3, [pc, #348]	; (800a158 <Initialize+0x34c>)
 8009ffc:	2208      	movs	r2, #8
 8009ffe:	4957      	ldr	r1, [pc, #348]	; (800a15c <Initialize+0x350>)
 800a000:	4857      	ldr	r0, [pc, #348]	; (800a160 <Initialize+0x354>)
 800a002:	f7f9 fe2f 	bl	8003c64 <I2CX_DMA_RX_Init>
	I2CxInit (&hi2c2,main_board_1, CLOCK_SPEED_100KHz,ENABLE);
 800a006:	2301      	movs	r3, #1
 800a008:	4a56      	ldr	r2, [pc, #344]	; (800a164 <Initialize+0x358>)
 800a00a:	2108      	movs	r1, #8
 800a00c:	4856      	ldr	r0, [pc, #344]	; (800a168 <Initialize+0x35c>)
 800a00e:	f7f9 fd77 	bl	8003b00 <I2CxInit>

	//Servo Driver - recommended to use 100KHz I2C as 400KHz hang frequently
//	I2CxInit (&hi2c3,main_board_1, CLOCK_SPEED_100KHz,DISABLE);
//	ServoDriverInit(&srv_drv,&hi2c3,0x40);

	UARTx_DMA_Rx_Init(&huart2, &hdma_usart2_rx, 115200);//Bluebee Tuning
 800a012:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a016:	4955      	ldr	r1, [pc, #340]	; (800a16c <Initialize+0x360>)
 800a018:	4855      	ldr	r0, [pc, #340]	; (800a170 <Initialize+0x364>)
 800a01a:	f7f9 f9ef 	bl	80033fc <UARTx_DMA_Rx_Init>
//	UARTx_DMA_Rx_Init(&huart4, &hdma_uart4_rx, 115200); //Jetson
	UARTInit(&huart3, 115200, ENABLE); // ROS UART
 800a01e:	2201      	movs	r2, #1
 800a020:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800a024:	4853      	ldr	r0, [pc, #332]	; (800a174 <Initialize+0x368>)
 800a026:	f7f9 f8e1 	bl	80031ec <UARTInit>
	UARTInit(&huart4, 115200, ENABLE); // ROS UART
 800a02a:	2201      	movs	r2, #1
 800a02c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800a030:	4851      	ldr	r0, [pc, #324]	; (800a178 <Initialize+0x36c>)
 800a032:	f7f9 f8db 	bl	80031ec <UARTInit>
	UARTInit(&huart5, 115200, ENABLE);
 800a036:	2201      	movs	r2, #1
 800a038:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800a03c:	484f      	ldr	r0, [pc, #316]	; (800a17c <Initialize+0x370>)
 800a03e:	f7f9 f8d5 	bl	80031ec <UARTInit>

	QEIInit(&htim1);
 800a042:	484f      	ldr	r0, [pc, #316]	; (800a180 <Initialize+0x374>)
 800a044:	f7f7 fcc8 	bl	80019d8 <QEIInit>
	QEIInit(&htim4);
 800a048:	484e      	ldr	r0, [pc, #312]	; (800a184 <Initialize+0x378>)
 800a04a:	f7f7 fcc5 	bl	80019d8 <QEIInit>
	QEIInit(&htim8);
 800a04e:	484e      	ldr	r0, [pc, #312]	; (800a188 <Initialize+0x37c>)
 800a050:	f7f7 fcc2 	bl	80019d8 <QEIInit>

	CANxInit(&hcan1,4,CAN_FILTER_FIFO0,0,0,0,CAN_500KHz);
 800a054:	2300      	movs	r3, #0
 800a056:	9302      	str	r3, [sp, #8]
 800a058:	2300      	movs	r3, #0
 800a05a:	9301      	str	r3, [sp, #4]
 800a05c:	2300      	movs	r3, #0
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	2300      	movs	r3, #0
 800a062:	2200      	movs	r2, #0
 800a064:	2104      	movs	r1, #4
 800a066:	4849      	ldr	r0, [pc, #292]	; (800a18c <Initialize+0x380>)
 800a068:	f7f9 fad4 	bl	8003614 <CANxInit>
	CANxInit(&hcan2,4,CAN_FILTER_FIFO1,0,0,14,CAN_500KHz);
 800a06c:	2300      	movs	r3, #0
 800a06e:	9302      	str	r3, [sp, #8]
 800a070:	230e      	movs	r3, #14
 800a072:	9301      	str	r3, [sp, #4]
 800a074:	2300      	movs	r3, #0
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	2300      	movs	r3, #0
 800a07a:	2201      	movs	r2, #1
 800a07c:	2104      	movs	r1, #4
 800a07e:	4844      	ldr	r0, [pc, #272]	; (800a190 <Initialize+0x384>)
 800a080:	f7f9 fac8 	bl	8003614 <CANxInit>

	PWMTimeBaseInit(&htim3, 19999, 83);
 800a084:	2253      	movs	r2, #83	; 0x53
 800a086:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800a08a:	4842      	ldr	r0, [pc, #264]	; (800a194 <Initialize+0x388>)
 800a08c:	f7f7 fa32 	bl	80014f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 800a090:	2301      	movs	r3, #1
 800a092:	4a2c      	ldr	r2, [pc, #176]	; (800a144 <Initialize+0x338>)
 800a094:	2108      	movs	r1, #8
 800a096:	483f      	ldr	r0, [pc, #252]	; (800a194 <Initialize+0x388>)
 800a098:	f7f7 fb12 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim3, TIM_CHANNEL_4 , TIM3_CHANNEL4_PIN);
 800a09c:	2302      	movs	r3, #2
 800a09e:	4a29      	ldr	r2, [pc, #164]	; (800a144 <Initialize+0x338>)
 800a0a0:	210c      	movs	r1, #12
 800a0a2:	483c      	ldr	r0, [pc, #240]	; (800a194 <Initialize+0x388>)
 800a0a4:	f7f7 fb0c 	bl	80016c0 <PWMChannelConfig>

	PWMTimeBaseInit(&htim5, 19999, 83);
 800a0a8:	2253      	movs	r2, #83	; 0x53
 800a0aa:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800a0ae:	483a      	ldr	r0, [pc, #232]	; (800a198 <Initialize+0x38c>)
 800a0b0:	f7f7 fa20 	bl	80014f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim5, TIM_CHANNEL_1, TIM5_CHANNEL1_PIN);
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	4a26      	ldr	r2, [pc, #152]	; (800a150 <Initialize+0x344>)
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	4837      	ldr	r0, [pc, #220]	; (800a198 <Initialize+0x38c>)
 800a0bc:	f7f7 fb00 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_2, TIM5_CHANNEL2_PIN);
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	4a23      	ldr	r2, [pc, #140]	; (800a150 <Initialize+0x344>)
 800a0c4:	2104      	movs	r1, #4
 800a0c6:	4834      	ldr	r0, [pc, #208]	; (800a198 <Initialize+0x38c>)
 800a0c8:	f7f7 fafa 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_3, TIM5_CHANNEL3_PIN);
 800a0cc:	2304      	movs	r3, #4
 800a0ce:	4a20      	ldr	r2, [pc, #128]	; (800a150 <Initialize+0x344>)
 800a0d0:	2108      	movs	r1, #8
 800a0d2:	4831      	ldr	r0, [pc, #196]	; (800a198 <Initialize+0x38c>)
 800a0d4:	f7f7 faf4 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_4, TIM5_CHANNEL4_PIN);
 800a0d8:	2308      	movs	r3, #8
 800a0da:	4a1d      	ldr	r2, [pc, #116]	; (800a150 <Initialize+0x344>)
 800a0dc:	210c      	movs	r1, #12
 800a0de:	482e      	ldr	r0, [pc, #184]	; (800a198 <Initialize+0x38c>)
 800a0e0:	f7f7 faee 	bl	80016c0 <PWMChannelConfig>

	PWMTimeBaseInit(&htim9, 19999, 167);
 800a0e4:	22a7      	movs	r2, #167	; 0xa7
 800a0e6:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800a0ea:	482c      	ldr	r0, [pc, #176]	; (800a19c <Initialize+0x390>)
 800a0ec:	f7f7 fa02 	bl	80014f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim9, TIM_CHANNEL_1, TIM9_CHANNEL1_PIN);
 800a0f0:	2320      	movs	r3, #32
 800a0f2:	4a15      	ldr	r2, [pc, #84]	; (800a148 <Initialize+0x33c>)
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	4829      	ldr	r0, [pc, #164]	; (800a19c <Initialize+0x390>)
 800a0f8:	f7f7 fae2 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim9, TIM_CHANNEL_2, TIM9_CHANNEL2_PIN);
 800a0fc:	2340      	movs	r3, #64	; 0x40
 800a0fe:	4a12      	ldr	r2, [pc, #72]	; (800a148 <Initialize+0x33c>)
 800a100:	2104      	movs	r1, #4
 800a102:	4826      	ldr	r0, [pc, #152]	; (800a19c <Initialize+0x390>)
 800a104:	f7f7 fadc 	bl	80016c0 <PWMChannelConfig>


	BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 800a108:	2380      	movs	r3, #128	; 0x80
 800a10a:	9302      	str	r3, [sp, #8]
 800a10c:	2340      	movs	r3, #64	; 0x40
 800a10e:	9301      	str	r3, [sp, #4]
 800a110:	4b23      	ldr	r3, [pc, #140]	; (800a1a0 <Initialize+0x394>)
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	2300      	movs	r3, #0
 800a116:	220c      	movs	r2, #12
 800a118:	491e      	ldr	r1, [pc, #120]	; (800a194 <Initialize+0x388>)
 800a11a:	4822      	ldr	r0, [pc, #136]	; (800a1a4 <Initialize+0x398>)
 800a11c:	f7f6 ffac 	bl	8001078 <BDCInit>
	BDCInit(&BDC2, &htim3, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[1]), Bit4, Bit5);
 800a120:	2320      	movs	r3, #32
 800a122:	9302      	str	r3, [sp, #8]
 800a124:	2310      	movs	r3, #16
 800a126:	9301      	str	r3, [sp, #4]
 800a128:	4b1d      	ldr	r3, [pc, #116]	; (800a1a0 <Initialize+0x394>)
 800a12a:	9300      	str	r3, [sp, #0]
 800a12c:	2300      	movs	r3, #0
 800a12e:	2208      	movs	r2, #8
 800a130:	4918      	ldr	r1, [pc, #96]	; (800a194 <Initialize+0x388>)
 800a132:	481d      	ldr	r0, [pc, #116]	; (800a1a8 <Initialize+0x39c>)
 800a134:	f7f6 ffa0 	bl	8001078 <BDCInit>
	BDCInit(&BDC3, &htim9, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[1]), Bit2, Bit3);
 800a138:	2308      	movs	r3, #8
 800a13a:	9302      	str	r3, [sp, #8]
 800a13c:	2304      	movs	r3, #4
 800a13e:	e035      	b.n	800a1ac <Initialize+0x3a0>
 800a140:	40020800 	.word	0x40020800
 800a144:	40020400 	.word	0x40020400
 800a148:	40021000 	.word	0x40021000
 800a14c:	40020c00 	.word	0x40020c00
 800a150:	40020000 	.word	0x40020000
 800a154:	200099f4 	.word	0x200099f4
 800a158:	00061a80 	.word	0x00061a80
 800a15c:	2000a38c 	.word	0x2000a38c
 800a160:	2000704c 	.word	0x2000704c
 800a164:	000186a0 	.word	0x000186a0
 800a168:	200070a8 	.word	0x200070a8
 800a16c:	20005f64 	.word	0x20005f64
 800a170:	2000655c 	.word	0x2000655c
 800a174:	200060a8 	.word	0x200060a8
 800a178:	200064dc 	.word	0x200064dc
 800a17c:	20006210 	.word	0x20006210
 800a180:	20006418 	.word	0x20006418
 800a184:	20006008 	.word	0x20006008
 800a188:	20005fc8 	.word	0x20005fc8
 800a18c:	2000a364 	.word	0x2000a364
 800a190:	20009468 	.word	0x20009468
 800a194:	200061cc 	.word	0x200061cc
 800a198:	2000618c 	.word	0x2000618c
 800a19c:	20006458 	.word	0x20006458
 800a1a0:	20009a10 	.word	0x20009a10
 800a1a4:	2000a90c 	.word	0x2000a90c
 800a1a8:	20007bcc 	.word	0x20007bcc
 800a1ac:	9301      	str	r3, [sp, #4]
 800a1ae:	4b23      	ldr	r3, [pc, #140]	; (800a23c <Initialize+0x430>)
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	4922      	ldr	r1, [pc, #136]	; (800a240 <Initialize+0x434>)
 800a1b8:	4822      	ldr	r0, [pc, #136]	; (800a244 <Initialize+0x438>)
 800a1ba:	f7f6 ff5d 	bl	8001078 <BDCInit>
	BDCInit(&BDC4, &htim9, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[1]), Bit0, Bit1);
 800a1be:	2302      	movs	r3, #2
 800a1c0:	9302      	str	r3, [sp, #8]
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	9301      	str	r3, [sp, #4]
 800a1c6:	4b1d      	ldr	r3, [pc, #116]	; (800a23c <Initialize+0x430>)
 800a1c8:	9300      	str	r3, [sp, #0]
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	2204      	movs	r2, #4
 800a1ce:	491c      	ldr	r1, [pc, #112]	; (800a240 <Initialize+0x434>)
 800a1d0:	481d      	ldr	r0, [pc, #116]	; (800a248 <Initialize+0x43c>)
 800a1d2:	f7f6 ff51 	bl	8001078 <BDCInit>
	BDCInit(&BDC5, &htim5, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[0]), Bit6, Bit7);
 800a1d6:	2380      	movs	r3, #128	; 0x80
 800a1d8:	9302      	str	r3, [sp, #8]
 800a1da:	2340      	movs	r3, #64	; 0x40
 800a1dc:	9301      	str	r3, [sp, #4]
 800a1de:	4b1b      	ldr	r3, [pc, #108]	; (800a24c <Initialize+0x440>)
 800a1e0:	9300      	str	r3, [sp, #0]
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	220c      	movs	r2, #12
 800a1e6:	491a      	ldr	r1, [pc, #104]	; (800a250 <Initialize+0x444>)
 800a1e8:	481a      	ldr	r0, [pc, #104]	; (800a254 <Initialize+0x448>)
 800a1ea:	f7f6 ff45 	bl	8001078 <BDCInit>
	BDCInit(&BDC6, &htim5, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[0]), Bit4, Bit5);
 800a1ee:	2320      	movs	r3, #32
 800a1f0:	9302      	str	r3, [sp, #8]
 800a1f2:	2310      	movs	r3, #16
 800a1f4:	9301      	str	r3, [sp, #4]
 800a1f6:	4b15      	ldr	r3, [pc, #84]	; (800a24c <Initialize+0x440>)
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	2208      	movs	r2, #8
 800a1fe:	4914      	ldr	r1, [pc, #80]	; (800a250 <Initialize+0x444>)
 800a200:	4815      	ldr	r0, [pc, #84]	; (800a258 <Initialize+0x44c>)
 800a202:	f7f6 ff39 	bl	8001078 <BDCInit>
	BDCInit(&BDC7, &htim5, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[0]), Bit2, Bit3);
 800a206:	2308      	movs	r3, #8
 800a208:	9302      	str	r3, [sp, #8]
 800a20a:	2304      	movs	r3, #4
 800a20c:	9301      	str	r3, [sp, #4]
 800a20e:	4b0f      	ldr	r3, [pc, #60]	; (800a24c <Initialize+0x440>)
 800a210:	9300      	str	r3, [sp, #0]
 800a212:	2300      	movs	r3, #0
 800a214:	2204      	movs	r2, #4
 800a216:	490e      	ldr	r1, [pc, #56]	; (800a250 <Initialize+0x444>)
 800a218:	4810      	ldr	r0, [pc, #64]	; (800a25c <Initialize+0x450>)
 800a21a:	f7f6 ff2d 	bl	8001078 <BDCInit>
	BDCInit(&BDC8, &htim5, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[0]), Bit0, Bit1);
 800a21e:	2302      	movs	r3, #2
 800a220:	9302      	str	r3, [sp, #8]
 800a222:	2301      	movs	r3, #1
 800a224:	9301      	str	r3, [sp, #4]
 800a226:	4b09      	ldr	r3, [pc, #36]	; (800a24c <Initialize+0x440>)
 800a228:	9300      	str	r3, [sp, #0]
 800a22a:	2300      	movs	r3, #0
 800a22c:	2200      	movs	r2, #0
 800a22e:	4908      	ldr	r1, [pc, #32]	; (800a250 <Initialize+0x444>)
 800a230:	480b      	ldr	r0, [pc, #44]	; (800a260 <Initialize+0x454>)
 800a232:	f7f6 ff21 	bl	8001078 <BDCInit>

//	VESCInit(31920, 7, 0.0037, VESC1, &vesc1);

//	SPIx_DMA_TX_Init(&hspi1, &hdma_spi1_tx, SPI1_NSS_PIN, SPI_MODE_MASTER);
//	GPIOPinsInit (SPI1_MISO_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
}
 800a236:	bf00      	nop
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	20009a10 	.word	0x20009a10
 800a240:	20006458 	.word	0x20006458
 800a244:	20007108 	.word	0x20007108
 800a248:	20009acc 	.word	0x20009acc
 800a24c:	20009a0c 	.word	0x20009a0c
 800a250:	2000618c 	.word	0x2000618c
 800a254:	2000a788 	.word	0x2000a788
 800a258:	20009b4c 	.word	0x20009b4c
 800a25c:	20009b70 	.word	0x20009b70
 800a260:	200077e4 	.word	0x200077e4

0800a264 <CAN1_RX0_IRQHandler>:



void CAN1_RX0_IRQHandler()
{
 800a264:	b580      	push	{r7, lr}
 800a266:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 800a268:	4802      	ldr	r0, [pc, #8]	; (800a274 <CAN1_RX0_IRQHandler+0x10>)
 800a26a:	f007 f9d3 	bl	8011614 <HAL_CAN_IRQHandler>

}
 800a26e:	bf00      	nop
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	2000a364 	.word	0x2000a364

0800a278 <CAN2_RX1_IRQHandler>:

void CAN2_RX1_IRQHandler()
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan2);
 800a27c:	4802      	ldr	r0, [pc, #8]	; (800a288 <CAN2_RX1_IRQHandler+0x10>)
 800a27e:	f007 f9c9 	bl	8011614 <HAL_CAN_IRQHandler>

}
 800a282:	bf00      	nop
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	20009468 	.word	0x20009468

0800a28c <CAN_PROCESS>:


void CAN_PROCESS(PACKET_t packet_src){
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	4603      	mov	r3, r0
 800a294:	71fb      	strb	r3, [r7, #7]

	switch(packet_src){
 800a296:	79fb      	ldrb	r3, [r7, #7]
 800a298:	2b02      	cmp	r3, #2
 800a29a:	d008      	beq.n	800a2ae <CAN_PROCESS+0x22>
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	dc36      	bgt.n	800a30e <CAN_PROCESS+0x82>
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d007      	beq.n	800a2b4 <CAN_PROCESS+0x28>
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d132      	bne.n	800a30e <CAN_PROCESS+0x82>

	case VESC_PACKET:
		decode_VESC();
 800a2a8:	f004 f984 	bl	800e5b4 <decode_VESC>
		break;
 800a2ac:	e02f      	b.n	800a30e <CAN_PROCESS+0x82>

	case ODRIVE_PACKET:
		OdriveCAN_Handler();
 800a2ae:	f7fa fe89 	bl	8004fc4 <OdriveCAN_Handler>
		break;
 800a2b2:	e02c      	b.n	800a30e <CAN_PROCESS+0x82>

	case RNS_PACKET:

		if(insData_receive[0] == 1){
 800a2b4:	4b18      	ldr	r3, [pc, #96]	; (800a318 <CAN_PROCESS+0x8c>)
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d107      	bne.n	800a2cc <CAN_PROCESS+0x40>
			rns.RNS_data.common_instruction = insData_receive[1];
 800a2bc:	4b16      	ldr	r3, [pc, #88]	; (800a318 <CAN_PROCESS+0x8c>)
 800a2be:	785a      	ldrb	r2, [r3, #1]
 800a2c0:	4b16      	ldr	r3, [pc, #88]	; (800a31c <CAN_PROCESS+0x90>)
 800a2c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			insData_receive[0]=2;
 800a2c6:	4b14      	ldr	r3, [pc, #80]	; (800a318 <CAN_PROCESS+0x8c>)
 800a2c8:	2202      	movs	r2, #2
 800a2ca:	701a      	strb	r2, [r3, #0]
		}
		if(insData_receive[0] == 17){
 800a2cc:	4b12      	ldr	r3, [pc, #72]	; (800a318 <CAN_PROCESS+0x8c>)
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	2b11      	cmp	r3, #17
 800a2d2:	d11b      	bne.n	800a30c <CAN_PROCESS+0x80>
			if(buf2_flag == 1){
 800a2d4:	4b12      	ldr	r3, [pc, #72]	; (800a320 <CAN_PROCESS+0x94>)
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d117      	bne.n	800a30c <CAN_PROCESS+0x80>
				rns.RNS_data.common_instruction = insData_receive[1];
 800a2dc:	4b0e      	ldr	r3, [pc, #56]	; (800a318 <CAN_PROCESS+0x8c>)
 800a2de:	785a      	ldrb	r2, [r3, #1]
 800a2e0:	4b0e      	ldr	r3, [pc, #56]	; (800a31c <CAN_PROCESS+0x90>)
 800a2e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				rns.RNS_data.common_buffer[0].data = buf1_receive[0].data;
 800a2e6:	4b0f      	ldr	r3, [pc, #60]	; (800a324 <CAN_PROCESS+0x98>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a0c      	ldr	r2, [pc, #48]	; (800a31c <CAN_PROCESS+0x90>)
 800a2ec:	6553      	str	r3, [r2, #84]	; 0x54
				rns.RNS_data.common_buffer[1].data = buf1_receive[1].data;
 800a2ee:	4b0d      	ldr	r3, [pc, #52]	; (800a324 <CAN_PROCESS+0x98>)
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	4a0a      	ldr	r2, [pc, #40]	; (800a31c <CAN_PROCESS+0x90>)
 800a2f4:	6593      	str	r3, [r2, #88]	; 0x58
				rns.RNS_data.common_buffer[2].data = buf2_receive[0].data;
 800a2f6:	4b0c      	ldr	r3, [pc, #48]	; (800a328 <CAN_PROCESS+0x9c>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a08      	ldr	r2, [pc, #32]	; (800a31c <CAN_PROCESS+0x90>)
 800a2fc:	65d3      	str	r3, [r2, #92]	; 0x5c
				rns.RNS_data.common_buffer[3].data = buf2_receive[1].data;
 800a2fe:	4b0a      	ldr	r3, [pc, #40]	; (800a328 <CAN_PROCESS+0x9c>)
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	4a06      	ldr	r2, [pc, #24]	; (800a31c <CAN_PROCESS+0x90>)
 800a304:	6613      	str	r3, [r2, #96]	; 0x60
				insData_receive[0]=3;
 800a306:	4b04      	ldr	r3, [pc, #16]	; (800a318 <CAN_PROCESS+0x8c>)
 800a308:	2203      	movs	r2, #3
 800a30a:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 800a30c:	bf00      	nop
	}
}
 800a30e:	bf00      	nop
 800a310:	3708      	adds	r7, #8
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	20006f18 	.word	0x20006f18
 800a31c:	20009370 	.word	0x20009370
 800a320:	20000298 	.word	0x20000298
 800a324:	2000a074 	.word	0x2000a074
 800a328:	2000a1cc 	.word	0x2000a1cc

0800a32c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a32c:	b5b0      	push	{r4, r5, r7, lr}
 800a32e:	b08c      	sub	sp, #48	; 0x30
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
	PACKET_t source;
	uint8_t aData[8];
	uint8_t rns_can = 1;
 800a334:	2301      	movs	r3, #1
 800a336:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if(hcan == &hcan1){
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4aaa      	ldr	r2, [pc, #680]	; (800a5e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	f040 80b4 	bne.w	800a4ac <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN1RxMessage, aData);
 800a344:	f107 030c 	add.w	r3, r7, #12
 800a348:	4aa8      	ldr	r2, [pc, #672]	; (800a5ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a34a:	2100      	movs	r1, #0
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f007 f829 	bl	80113a4 <HAL_CAN_GetRxMessage>
		//	sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);

		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 800a352:	4ba6      	ldr	r3, [pc, #664]	; (800a5ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	2b04      	cmp	r3, #4
 800a358:	d118      	bne.n	800a38c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 800a35a:	4aa5      	ldr	r2, [pc, #660]	; (800a5f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a35c:	4ba3      	ldr	r3, [pc, #652]	; (800a5ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a35e:	4614      	mov	r4, r2
 800a360:	461d      	mov	r5, r3
 800a362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a366:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a36a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800a36e:	4ba0      	ldr	r3, [pc, #640]	; (800a5f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a370:	331c      	adds	r3, #28
 800a372:	f107 020c 	add.w	r2, r7, #12
 800a376:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a37a:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800a37e:	489c      	ldr	r0, [pc, #624]	; (800a5f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a380:	f004 fa1e 	bl	800e7c0 <set_rx_frames>
			source = VESC_PACKET;
 800a384:	2301      	movs	r3, #1
 800a386:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a38a:	e081      	b.n	800a490 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
		}else{
			source = RNS_PACKET;
 800a38c:	2300      	movs	r3, #0
 800a38e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800a392:	231f      	movs	r3, #31
 800a394:	837b      	strh	r3, [r7, #26]
			uint16_t command = CAN1RxMessage.StdId & id_mask;
 800a396:	4b95      	ldr	r3, [pc, #596]	; (800a5ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	b29a      	uxth	r2, r3
 800a39c:	8b7b      	ldrh	r3, [r7, #26]
 800a39e:	4013      	ands	r3, r2
 800a3a0:	833b      	strh	r3, [r7, #24]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800a3a2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800a3a6:	82fb      	strh	r3, [r7, #22]
			uint16_t id = CAN1RxMessage.StdId&command_mask;
 800a3a8:	4b90      	ldr	r3, [pc, #576]	; (800a5ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	b29a      	uxth	r2, r3
 800a3ae:	8afb      	ldrh	r3, [r7, #22]
 800a3b0:	4013      	ands	r3, r2
 800a3b2:	82bb      	strh	r3, [r7, #20]
			id=id>>5;
 800a3b4:	8abb      	ldrh	r3, [r7, #20]
 800a3b6:	095b      	lsrs	r3, r3, #5
 800a3b8:	82bb      	strh	r3, [r7, #20]

			for( int i=0 ; i < number_of_odrive; i++)
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3be:	e016      	b.n	800a3ee <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
			{
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800a3c0:	4b8c      	ldr	r3, [pc, #560]	; (800a5f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	4413      	add	r3, r2
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	8b1b      	ldrh	r3, [r3, #24]
 800a3ce:	8aba      	ldrh	r2, [r7, #20]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d109      	bne.n	800a3e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
 800a3d4:	8b3b      	ldrh	r3, [r7, #24]
 800a3d6:	2b09      	cmp	r3, #9
 800a3d8:	d002      	beq.n	800a3e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 800a3da:	8b3b      	ldrh	r3, [r7, #24]
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d103      	bne.n	800a3e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
				{
					source = ODRIVE_PACKET;
 800a3e0:	2302      	movs	r3, #2
 800a3e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800a3e6:	e007      	b.n	800a3f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>
			for( int i=0 ; i < number_of_odrive; i++)
 800a3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3ee:	4b82      	ldr	r3, [pc, #520]	; (800a5f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	dbe3      	blt.n	800a3c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
				}
			}

			if(source  == ODRIVE_PACKET)
 800a3f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a3fc:	2b02      	cmp	r3, #2
 800a3fe:	d112      	bne.n	800a426 <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
			{
				Odrvmsg.RXmsg = CAN1RxMessage;
 800a400:	4a7e      	ldr	r2, [pc, #504]	; (800a5fc <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 800a402:	4b7a      	ldr	r3, [pc, #488]	; (800a5ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a404:	4614      	mov	r4, r2
 800a406:	461d      	mov	r5, r3
 800a408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a40a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a40c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a410:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN1RxMessage.DLC);
 800a414:	4b75      	ldr	r3, [pc, #468]	; (800a5ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a416:	691a      	ldr	r2, [r3, #16]
 800a418:	f107 030c 	add.w	r3, r7, #12
 800a41c:	4619      	mov	r1, r3
 800a41e:	4878      	ldr	r0, [pc, #480]	; (800a600 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 800a420:	f00f ff66 	bl	801a2f0 <memcpy>
 800a424:	e034      	b.n	800a490 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
			}

			else{
				switch(CAN1RxMessage.StdId){
 800a426:	4b71      	ldr	r3, [pc, #452]	; (800a5ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	2b16      	cmp	r3, #22
 800a42c:	d01b      	beq.n	800a466 <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
 800a42e:	2b16      	cmp	r3, #22
 800a430:	d825      	bhi.n	800a47e <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
 800a432:	2b14      	cmp	r3, #20
 800a434:	d002      	beq.n	800a43c <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
 800a436:	2b15      	cmp	r3, #21
 800a438:	d00c      	beq.n	800a454 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
 800a43a:	e020      	b.n	800a47e <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
				case RNS_TO_mainboard:
					memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 800a43c:	4b6b      	ldr	r3, [pc, #428]	; (800a5ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a43e:	691a      	ldr	r2, [r3, #16]
 800a440:	f107 030c 	add.w	r3, r7, #12
 800a444:	4619      	mov	r1, r3
 800a446:	486f      	ldr	r0, [pc, #444]	; (800a604 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 800a448:	f00f ff52 	bl	801a2f0 <memcpy>
					buf2_flag = 0;
 800a44c:	4b6e      	ldr	r3, [pc, #440]	; (800a608 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800a44e:	2200      	movs	r2, #0
 800a450:	701a      	strb	r2, [r3, #0]

					break;
 800a452:	e01d      	b.n	800a490 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf1:
					memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 800a454:	4b65      	ldr	r3, [pc, #404]	; (800a5ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a456:	691a      	ldr	r2, [r3, #16]
 800a458:	f107 030c 	add.w	r3, r7, #12
 800a45c:	4619      	mov	r1, r3
 800a45e:	486b      	ldr	r0, [pc, #428]	; (800a60c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e0>)
 800a460:	f00f ff46 	bl	801a2f0 <memcpy>

					break;
 800a464:	e014      	b.n	800a490 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf2:
					memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 800a466:	4b61      	ldr	r3, [pc, #388]	; (800a5ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a468:	691a      	ldr	r2, [r3, #16]
 800a46a:	f107 030c 	add.w	r3, r7, #12
 800a46e:	4619      	mov	r1, r3
 800a470:	4867      	ldr	r0, [pc, #412]	; (800a610 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e4>)
 800a472:	f00f ff3d 	bl	801a2f0 <memcpy>
					buf2_flag = 1;
 800a476:	4b64      	ldr	r3, [pc, #400]	; (800a608 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800a478:	2201      	movs	r2, #1
 800a47a:	701a      	strb	r2, [r3, #0]
					break;
 800a47c:	e008      	b.n	800a490 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>

				default:
					rns_can = 0;
 800a47e:	2300      	movs	r3, #0
 800a480:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800a484:	f107 030c 	add.w	r3, r7, #12
 800a488:	4618      	mov	r0, r3
 800a48a:	f7f9 fb0d 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800a48e:	bf00      	nop
				}
			}
		}
		if(rns_can)
 800a490:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a494:	2b00      	cmp	r3, #0
 800a496:	d004      	beq.n	800a4a2 <HAL_CAN_RxFifo0MsgPendingCallback+0x176>
			CAN_PROCESS(source);
 800a498:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7ff fef5 	bl	800a28c <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800a4a2:	2102      	movs	r1, #2
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f007 f88f 	bl	80115c8 <HAL_CAN_ActivateNotification>
		}
		if(rns_can)
			CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
	}
}
 800a4aa:	e0cb      	b.n	800a644 <HAL_CAN_RxFifo0MsgPendingCallback+0x318>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN2RxMessage, aData);
 800a4ac:	f107 030c 	add.w	r3, r7, #12
 800a4b0:	4a58      	ldr	r2, [pc, #352]	; (800a614 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f006 ff75 	bl	80113a4 <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 800a4ba:	4b56      	ldr	r3, [pc, #344]	; (800a614 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	2b04      	cmp	r3, #4
 800a4c0:	d118      	bne.n	800a4f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>
			vescmsg.Rxmsg = CAN2RxMessage;
 800a4c2:	4a4b      	ldr	r2, [pc, #300]	; (800a5f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a4c4:	4b53      	ldr	r3, [pc, #332]	; (800a614 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a4c6:	4614      	mov	r4, r2
 800a4c8:	461d      	mov	r5, r3
 800a4ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a4ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a4d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800a4d6:	4b46      	ldr	r3, [pc, #280]	; (800a5f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a4d8:	331c      	adds	r3, #28
 800a4da:	f107 020c 	add.w	r2, r7, #12
 800a4de:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a4e2:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800a4e6:	4842      	ldr	r0, [pc, #264]	; (800a5f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a4e8:	f004 f96a 	bl	800e7c0 <set_rx_frames>
			source = VESC_PACKET;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a4f2:	e09a      	b.n	800a62a <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
			source = RNS_PACKET;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800a4fa:	231f      	movs	r3, #31
 800a4fc:	847b      	strh	r3, [r7, #34]	; 0x22
			uint16_t command = CAN2RxMessage.StdId & id_mask;
 800a4fe:	4b45      	ldr	r3, [pc, #276]	; (800a614 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	b29a      	uxth	r2, r3
 800a504:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a506:	4013      	ands	r3, r2
 800a508:	843b      	strh	r3, [r7, #32]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800a50a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800a50e:	83fb      	strh	r3, [r7, #30]
			uint16_t id = CAN2RxMessage.StdId&command_mask;
 800a510:	4b40      	ldr	r3, [pc, #256]	; (800a614 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	b29a      	uxth	r2, r3
 800a516:	8bfb      	ldrh	r3, [r7, #30]
 800a518:	4013      	ands	r3, r2
 800a51a:	83bb      	strh	r3, [r7, #28]
			id=id>>5;
 800a51c:	8bbb      	ldrh	r3, [r7, #28]
 800a51e:	095b      	lsrs	r3, r3, #5
 800a520:	83bb      	strh	r3, [r7, #28]
			for( int i=0 ; i < number_of_odrive; i++)
 800a522:	2300      	movs	r3, #0
 800a524:	627b      	str	r3, [r7, #36]	; 0x24
 800a526:	e016      	b.n	800a556 <HAL_CAN_RxFifo0MsgPendingCallback+0x22a>
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800a528:	4b32      	ldr	r3, [pc, #200]	; (800a5f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	4413      	add	r3, r2
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	8b1b      	ldrh	r3, [r3, #24]
 800a536:	8bba      	ldrh	r2, [r7, #28]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d109      	bne.n	800a550 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>
 800a53c:	8c3b      	ldrh	r3, [r7, #32]
 800a53e:	2b09      	cmp	r3, #9
 800a540:	d002      	beq.n	800a548 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>
 800a542:	8c3b      	ldrh	r3, [r7, #32]
 800a544:	2b01      	cmp	r3, #1
 800a546:	d103      	bne.n	800a550 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>
					source = ODRIVE_PACKET;
 800a548:	2302      	movs	r3, #2
 800a54a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800a54e:	e007      	b.n	800a560 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>
			for( int i=0 ; i < number_of_odrive; i++)
 800a550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a552:	3301      	adds	r3, #1
 800a554:	627b      	str	r3, [r7, #36]	; 0x24
 800a556:	4b28      	ldr	r3, [pc, #160]	; (800a5f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a55c:	429a      	cmp	r2, r3
 800a55e:	dbe3      	blt.n	800a528 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>
			if(source  == ODRIVE_PACKET)
 800a560:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a564:	2b02      	cmp	r3, #2
 800a566:	d112      	bne.n	800a58e <HAL_CAN_RxFifo0MsgPendingCallback+0x262>
				Odrvmsg.RXmsg = CAN2RxMessage;
 800a568:	4a24      	ldr	r2, [pc, #144]	; (800a5fc <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 800a56a:	4b2a      	ldr	r3, [pc, #168]	; (800a614 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a56c:	4614      	mov	r4, r2
 800a56e:	461d      	mov	r5, r3
 800a570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a574:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a578:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN2RxMessage.DLC);
 800a57c:	4b25      	ldr	r3, [pc, #148]	; (800a614 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a57e:	691a      	ldr	r2, [r3, #16]
 800a580:	f107 030c 	add.w	r3, r7, #12
 800a584:	4619      	mov	r1, r3
 800a586:	481e      	ldr	r0, [pc, #120]	; (800a600 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 800a588:	f00f feb2 	bl	801a2f0 <memcpy>
 800a58c:	e04d      	b.n	800a62a <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
				switch(CAN2RxMessage.StdId){
 800a58e:	4b21      	ldr	r3, [pc, #132]	; (800a614 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2b16      	cmp	r3, #22
 800a594:	d01b      	beq.n	800a5ce <HAL_CAN_RxFifo0MsgPendingCallback+0x2a2>
 800a596:	2b16      	cmp	r3, #22
 800a598:	d83e      	bhi.n	800a618 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>
 800a59a:	2b14      	cmp	r3, #20
 800a59c:	d002      	beq.n	800a5a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>
 800a59e:	2b15      	cmp	r3, #21
 800a5a0:	d00c      	beq.n	800a5bc <HAL_CAN_RxFifo0MsgPendingCallback+0x290>
 800a5a2:	e039      	b.n	800a618 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>
					memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 800a5a4:	4b1b      	ldr	r3, [pc, #108]	; (800a614 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a5a6:	691a      	ldr	r2, [r3, #16]
 800a5a8:	f107 030c 	add.w	r3, r7, #12
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	4815      	ldr	r0, [pc, #84]	; (800a604 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 800a5b0:	f00f fe9e 	bl	801a2f0 <memcpy>
					buf2_flag = 0;
 800a5b4:	4b14      	ldr	r3, [pc, #80]	; (800a608 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	701a      	strb	r2, [r3, #0]
					break;
 800a5ba:	e036      	b.n	800a62a <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
					memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 800a5bc:	4b15      	ldr	r3, [pc, #84]	; (800a614 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a5be:	691a      	ldr	r2, [r3, #16]
 800a5c0:	f107 030c 	add.w	r3, r7, #12
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	4811      	ldr	r0, [pc, #68]	; (800a60c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e0>)
 800a5c8:	f00f fe92 	bl	801a2f0 <memcpy>
					break;
 800a5cc:	e02d      	b.n	800a62a <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
					memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 800a5ce:	4b11      	ldr	r3, [pc, #68]	; (800a614 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a5d0:	691a      	ldr	r2, [r3, #16]
 800a5d2:	f107 030c 	add.w	r3, r7, #12
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	480d      	ldr	r0, [pc, #52]	; (800a610 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e4>)
 800a5da:	f00f fe89 	bl	801a2f0 <memcpy>
					buf2_flag = 1;
 800a5de:	4b0a      	ldr	r3, [pc, #40]	; (800a608 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	701a      	strb	r2, [r3, #0]
					break;
 800a5e4:	e021      	b.n	800a62a <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
 800a5e6:	bf00      	nop
 800a5e8:	2000a364 	.word	0x2000a364
 800a5ec:	2000a8c8 	.word	0x2000a8c8
 800a5f0:	20009b1c 	.word	0x20009b1c
 800a5f4:	2000a9e4 	.word	0x2000a9e4
 800a5f8:	2000028c 	.word	0x2000028c
 800a5fc:	20006d68 	.word	0x20006d68
 800a600:	20006d84 	.word	0x20006d84
 800a604:	20006f18 	.word	0x20006f18
 800a608:	20000298 	.word	0x20000298
 800a60c:	2000a074 	.word	0x2000a074
 800a610:	2000a1cc 	.word	0x2000a1cc
 800a614:	20006f94 	.word	0x20006f94
					rns_can = 0;
 800a618:	2300      	movs	r3, #0
 800a61a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800a61e:	f107 030c 	add.w	r3, r7, #12
 800a622:	4618      	mov	r0, r3
 800a624:	f7f9 fa40 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800a628:	bf00      	nop
		if(rns_can)
 800a62a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d004      	beq.n	800a63c <HAL_CAN_RxFifo0MsgPendingCallback+0x310>
			CAN_PROCESS(source);
 800a632:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a636:	4618      	mov	r0, r3
 800a638:	f7ff fe28 	bl	800a28c <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800a63c:	2102      	movs	r1, #2
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f006 ffc2 	bl	80115c8 <HAL_CAN_ActivateNotification>
}
 800a644:	bf00      	nop
 800a646:	3730      	adds	r7, #48	; 0x30
 800a648:	46bd      	mov	sp, r7
 800a64a:	bdb0      	pop	{r4, r5, r7, pc}

0800a64c <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a64c:	b5b0      	push	{r4, r5, r7, lr}
 800a64e:	b08c      	sub	sp, #48	; 0x30
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
	PACKET_t source;
	uint8_t aData[8];
	uint8_t rns_can = 1;
 800a654:	2301      	movs	r3, #1
 800a656:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if(hcan == &hcan1){
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	4aaa      	ldr	r2, [pc, #680]	; (800a908 <HAL_CAN_RxFifo1MsgPendingCallback+0x2bc>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	f040 80b4 	bne.w	800a7cc <HAL_CAN_RxFifo1MsgPendingCallback+0x180>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN1RxMessage, aData);
 800a664:	f107 030c 	add.w	r3, r7, #12
 800a668:	4aa8      	ldr	r2, [pc, #672]	; (800a90c <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a66a:	2101      	movs	r1, #1
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f006 fe99 	bl	80113a4 <HAL_CAN_GetRxMessage>
		//	sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);

		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 800a672:	4ba6      	ldr	r3, [pc, #664]	; (800a90c <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	2b04      	cmp	r3, #4
 800a678:	d118      	bne.n	800a6ac <HAL_CAN_RxFifo1MsgPendingCallback+0x60>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 800a67a:	4aa5      	ldr	r2, [pc, #660]	; (800a910 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a67c:	4ba3      	ldr	r3, [pc, #652]	; (800a90c <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a67e:	4614      	mov	r4, r2
 800a680:	461d      	mov	r5, r3
 800a682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a686:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a68a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800a68e:	4ba0      	ldr	r3, [pc, #640]	; (800a910 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a690:	331c      	adds	r3, #28
 800a692:	f107 020c 	add.w	r2, r7, #12
 800a696:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a69a:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800a69e:	489c      	ldr	r0, [pc, #624]	; (800a910 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a6a0:	f004 f88e 	bl	800e7c0 <set_rx_frames>
			source = VESC_PACKET;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a6aa:	e081      	b.n	800a7b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
		}else{
			source = RNS_PACKET;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800a6b2:	231f      	movs	r3, #31
 800a6b4:	837b      	strh	r3, [r7, #26]
			uint16_t command = CAN1RxMessage.StdId & id_mask;
 800a6b6:	4b95      	ldr	r3, [pc, #596]	; (800a90c <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	b29a      	uxth	r2, r3
 800a6bc:	8b7b      	ldrh	r3, [r7, #26]
 800a6be:	4013      	ands	r3, r2
 800a6c0:	833b      	strh	r3, [r7, #24]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800a6c2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800a6c6:	82fb      	strh	r3, [r7, #22]
			uint16_t id = CAN1RxMessage.StdId&command_mask;
 800a6c8:	4b90      	ldr	r3, [pc, #576]	; (800a90c <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	b29a      	uxth	r2, r3
 800a6ce:	8afb      	ldrh	r3, [r7, #22]
 800a6d0:	4013      	ands	r3, r2
 800a6d2:	82bb      	strh	r3, [r7, #20]
			id=id>>5;
 800a6d4:	8abb      	ldrh	r3, [r7, #20]
 800a6d6:	095b      	lsrs	r3, r3, #5
 800a6d8:	82bb      	strh	r3, [r7, #20]

			for( int i=0 ; i < number_of_odrive; i++)
 800a6da:	2300      	movs	r3, #0
 800a6dc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6de:	e016      	b.n	800a70e <HAL_CAN_RxFifo1MsgPendingCallback+0xc2>
			{
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800a6e0:	4b8c      	ldr	r3, [pc, #560]	; (800a914 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	4413      	add	r3, r2
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	8b1b      	ldrh	r3, [r3, #24]
 800a6ee:	8aba      	ldrh	r2, [r7, #20]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d109      	bne.n	800a708 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>
 800a6f4:	8b3b      	ldrh	r3, [r7, #24]
 800a6f6:	2b09      	cmp	r3, #9
 800a6f8:	d002      	beq.n	800a700 <HAL_CAN_RxFifo1MsgPendingCallback+0xb4>
 800a6fa:	8b3b      	ldrh	r3, [r7, #24]
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d103      	bne.n	800a708 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>
				{
					source = ODRIVE_PACKET;
 800a700:	2302      	movs	r3, #2
 800a702:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800a706:	e007      	b.n	800a718 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>
			for( int i=0 ; i < number_of_odrive; i++)
 800a708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a70a:	3301      	adds	r3, #1
 800a70c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a70e:	4b82      	ldr	r3, [pc, #520]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a714:	429a      	cmp	r2, r3
 800a716:	dbe3      	blt.n	800a6e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x94>
				}
			}

			if(source  == ODRIVE_PACKET)
 800a718:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a71c:	2b02      	cmp	r3, #2
 800a71e:	d112      	bne.n	800a746 <HAL_CAN_RxFifo1MsgPendingCallback+0xfa>
			{
				Odrvmsg.RXmsg = CAN1RxMessage;
 800a720:	4a7e      	ldr	r2, [pc, #504]	; (800a91c <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 800a722:	4b7a      	ldr	r3, [pc, #488]	; (800a90c <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a724:	4614      	mov	r4, r2
 800a726:	461d      	mov	r5, r3
 800a728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a72a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a72c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a730:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN1RxMessage.DLC);
 800a734:	4b75      	ldr	r3, [pc, #468]	; (800a90c <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a736:	691a      	ldr	r2, [r3, #16]
 800a738:	f107 030c 	add.w	r3, r7, #12
 800a73c:	4619      	mov	r1, r3
 800a73e:	4878      	ldr	r0, [pc, #480]	; (800a920 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 800a740:	f00f fdd6 	bl	801a2f0 <memcpy>
 800a744:	e034      	b.n	800a7b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
			}

			else{
				switch(CAN1RxMessage.StdId){
 800a746:	4b71      	ldr	r3, [pc, #452]	; (800a90c <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2b16      	cmp	r3, #22
 800a74c:	d01b      	beq.n	800a786 <HAL_CAN_RxFifo1MsgPendingCallback+0x13a>
 800a74e:	2b16      	cmp	r3, #22
 800a750:	d825      	bhi.n	800a79e <HAL_CAN_RxFifo1MsgPendingCallback+0x152>
 800a752:	2b14      	cmp	r3, #20
 800a754:	d002      	beq.n	800a75c <HAL_CAN_RxFifo1MsgPendingCallback+0x110>
 800a756:	2b15      	cmp	r3, #21
 800a758:	d00c      	beq.n	800a774 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>
 800a75a:	e020      	b.n	800a79e <HAL_CAN_RxFifo1MsgPendingCallback+0x152>
				case RNS_TO_mainboard:
					memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 800a75c:	4b6b      	ldr	r3, [pc, #428]	; (800a90c <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a75e:	691a      	ldr	r2, [r3, #16]
 800a760:	f107 030c 	add.w	r3, r7, #12
 800a764:	4619      	mov	r1, r3
 800a766:	486f      	ldr	r0, [pc, #444]	; (800a924 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 800a768:	f00f fdc2 	bl	801a2f0 <memcpy>
					buf2_flag = 0;
 800a76c:	4b6e      	ldr	r3, [pc, #440]	; (800a928 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800a76e:	2200      	movs	r2, #0
 800a770:	701a      	strb	r2, [r3, #0]

					break;
 800a772:	e01d      	b.n	800a7b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf1:
					memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 800a774:	4b65      	ldr	r3, [pc, #404]	; (800a90c <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a776:	691a      	ldr	r2, [r3, #16]
 800a778:	f107 030c 	add.w	r3, r7, #12
 800a77c:	4619      	mov	r1, r3
 800a77e:	486b      	ldr	r0, [pc, #428]	; (800a92c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 800a780:	f00f fdb6 	bl	801a2f0 <memcpy>

					break;
 800a784:	e014      	b.n	800a7b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf2:
					memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 800a786:	4b61      	ldr	r3, [pc, #388]	; (800a90c <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a788:	691a      	ldr	r2, [r3, #16]
 800a78a:	f107 030c 	add.w	r3, r7, #12
 800a78e:	4619      	mov	r1, r3
 800a790:	4867      	ldr	r0, [pc, #412]	; (800a930 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e4>)
 800a792:	f00f fdad 	bl	801a2f0 <memcpy>
					buf2_flag = 1;
 800a796:	4b64      	ldr	r3, [pc, #400]	; (800a928 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800a798:	2201      	movs	r2, #1
 800a79a:	701a      	strb	r2, [r3, #0]
					break;
 800a79c:	e008      	b.n	800a7b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>

				default:
					rns_can = 0;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800a7a4:	f107 030c 	add.w	r3, r7, #12
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7f9 f97d 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800a7ae:	bf00      	nop
				}
			}
		}
		if(rns_can)
 800a7b0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d004      	beq.n	800a7c2 <HAL_CAN_RxFifo1MsgPendingCallback+0x176>
			CAN_PROCESS(source);
 800a7b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f7ff fd65 	bl	800a28c <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800a7c2:	2110      	movs	r1, #16
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f006 feff 	bl	80115c8 <HAL_CAN_ActivateNotification>
		if(rns_can)
			CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	}

}
 800a7ca:	e0cb      	b.n	800a964 <HAL_CAN_RxFifo1MsgPendingCallback+0x318>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN2RxMessage, aData);
 800a7cc:	f107 030c 	add.w	r3, r7, #12
 800a7d0:	4a58      	ldr	r2, [pc, #352]	; (800a934 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a7d2:	2101      	movs	r1, #1
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f006 fde5 	bl	80113a4 <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 800a7da:	4b56      	ldr	r3, [pc, #344]	; (800a934 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	2b04      	cmp	r3, #4
 800a7e0:	d118      	bne.n	800a814 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>
			vescmsg.Rxmsg = CAN2RxMessage;
 800a7e2:	4a4b      	ldr	r2, [pc, #300]	; (800a910 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a7e4:	4b53      	ldr	r3, [pc, #332]	; (800a934 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a7e6:	4614      	mov	r4, r2
 800a7e8:	461d      	mov	r5, r3
 800a7ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a7ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a7ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a7f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800a7f6:	4b46      	ldr	r3, [pc, #280]	; (800a910 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a7f8:	331c      	adds	r3, #28
 800a7fa:	f107 020c 	add.w	r2, r7, #12
 800a7fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a802:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800a806:	4842      	ldr	r0, [pc, #264]	; (800a910 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a808:	f003 ffda 	bl	800e7c0 <set_rx_frames>
			source = VESC_PACKET;
 800a80c:	2301      	movs	r3, #1
 800a80e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a812:	e09a      	b.n	800a94a <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
			source = RNS_PACKET;
 800a814:	2300      	movs	r3, #0
 800a816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800a81a:	231f      	movs	r3, #31
 800a81c:	847b      	strh	r3, [r7, #34]	; 0x22
			uint16_t command = CAN2RxMessage.StdId & id_mask;
 800a81e:	4b45      	ldr	r3, [pc, #276]	; (800a934 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	b29a      	uxth	r2, r3
 800a824:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a826:	4013      	ands	r3, r2
 800a828:	843b      	strh	r3, [r7, #32]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800a82a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800a82e:	83fb      	strh	r3, [r7, #30]
			uint16_t id = CAN2RxMessage.StdId&command_mask;
 800a830:	4b40      	ldr	r3, [pc, #256]	; (800a934 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	b29a      	uxth	r2, r3
 800a836:	8bfb      	ldrh	r3, [r7, #30]
 800a838:	4013      	ands	r3, r2
 800a83a:	83bb      	strh	r3, [r7, #28]
			id=id>>5;
 800a83c:	8bbb      	ldrh	r3, [r7, #28]
 800a83e:	095b      	lsrs	r3, r3, #5
 800a840:	83bb      	strh	r3, [r7, #28]
			for( int i=0 ; i < number_of_odrive; i++)
 800a842:	2300      	movs	r3, #0
 800a844:	627b      	str	r3, [r7, #36]	; 0x24
 800a846:	e016      	b.n	800a876 <HAL_CAN_RxFifo1MsgPendingCallback+0x22a>
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800a848:	4b32      	ldr	r3, [pc, #200]	; (800a914 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	4413      	add	r3, r2
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	8b1b      	ldrh	r3, [r3, #24]
 800a856:	8bba      	ldrh	r2, [r7, #28]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d109      	bne.n	800a870 <HAL_CAN_RxFifo1MsgPendingCallback+0x224>
 800a85c:	8c3b      	ldrh	r3, [r7, #32]
 800a85e:	2b09      	cmp	r3, #9
 800a860:	d002      	beq.n	800a868 <HAL_CAN_RxFifo1MsgPendingCallback+0x21c>
 800a862:	8c3b      	ldrh	r3, [r7, #32]
 800a864:	2b01      	cmp	r3, #1
 800a866:	d103      	bne.n	800a870 <HAL_CAN_RxFifo1MsgPendingCallback+0x224>
					source = ODRIVE_PACKET;
 800a868:	2302      	movs	r3, #2
 800a86a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800a86e:	e007      	b.n	800a880 <HAL_CAN_RxFifo1MsgPendingCallback+0x234>
			for( int i=0 ; i < number_of_odrive; i++)
 800a870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a872:	3301      	adds	r3, #1
 800a874:	627b      	str	r3, [r7, #36]	; 0x24
 800a876:	4b28      	ldr	r3, [pc, #160]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a87c:	429a      	cmp	r2, r3
 800a87e:	dbe3      	blt.n	800a848 <HAL_CAN_RxFifo1MsgPendingCallback+0x1fc>
			if(source  == ODRIVE_PACKET)
 800a880:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a884:	2b02      	cmp	r3, #2
 800a886:	d112      	bne.n	800a8ae <HAL_CAN_RxFifo1MsgPendingCallback+0x262>
				Odrvmsg.RXmsg = CAN2RxMessage;
 800a888:	4a24      	ldr	r2, [pc, #144]	; (800a91c <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 800a88a:	4b2a      	ldr	r3, [pc, #168]	; (800a934 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a88c:	4614      	mov	r4, r2
 800a88e:	461d      	mov	r5, r3
 800a890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a894:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a898:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN2RxMessage.DLC);
 800a89c:	4b25      	ldr	r3, [pc, #148]	; (800a934 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a89e:	691a      	ldr	r2, [r3, #16]
 800a8a0:	f107 030c 	add.w	r3, r7, #12
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	481e      	ldr	r0, [pc, #120]	; (800a920 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 800a8a8:	f00f fd22 	bl	801a2f0 <memcpy>
 800a8ac:	e04d      	b.n	800a94a <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
				switch(CAN2RxMessage.StdId){
 800a8ae:	4b21      	ldr	r3, [pc, #132]	; (800a934 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2b16      	cmp	r3, #22
 800a8b4:	d01b      	beq.n	800a8ee <HAL_CAN_RxFifo1MsgPendingCallback+0x2a2>
 800a8b6:	2b16      	cmp	r3, #22
 800a8b8:	d83e      	bhi.n	800a938 <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>
 800a8ba:	2b14      	cmp	r3, #20
 800a8bc:	d002      	beq.n	800a8c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x278>
 800a8be:	2b15      	cmp	r3, #21
 800a8c0:	d00c      	beq.n	800a8dc <HAL_CAN_RxFifo1MsgPendingCallback+0x290>
 800a8c2:	e039      	b.n	800a938 <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>
					memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 800a8c4:	4b1b      	ldr	r3, [pc, #108]	; (800a934 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a8c6:	691a      	ldr	r2, [r3, #16]
 800a8c8:	f107 030c 	add.w	r3, r7, #12
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	4815      	ldr	r0, [pc, #84]	; (800a924 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 800a8d0:	f00f fd0e 	bl	801a2f0 <memcpy>
					buf2_flag = 0;
 800a8d4:	4b14      	ldr	r3, [pc, #80]	; (800a928 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	701a      	strb	r2, [r3, #0]
					break;
 800a8da:	e036      	b.n	800a94a <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
					memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 800a8dc:	4b15      	ldr	r3, [pc, #84]	; (800a934 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a8de:	691a      	ldr	r2, [r3, #16]
 800a8e0:	f107 030c 	add.w	r3, r7, #12
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	4811      	ldr	r0, [pc, #68]	; (800a92c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 800a8e8:	f00f fd02 	bl	801a2f0 <memcpy>
					break;
 800a8ec:	e02d      	b.n	800a94a <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
					memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 800a8ee:	4b11      	ldr	r3, [pc, #68]	; (800a934 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a8f0:	691a      	ldr	r2, [r3, #16]
 800a8f2:	f107 030c 	add.w	r3, r7, #12
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	480d      	ldr	r0, [pc, #52]	; (800a930 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e4>)
 800a8fa:	f00f fcf9 	bl	801a2f0 <memcpy>
					buf2_flag = 1;
 800a8fe:	4b0a      	ldr	r3, [pc, #40]	; (800a928 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800a900:	2201      	movs	r2, #1
 800a902:	701a      	strb	r2, [r3, #0]
					break;
 800a904:	e021      	b.n	800a94a <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
 800a906:	bf00      	nop
 800a908:	2000a364 	.word	0x2000a364
 800a90c:	2000a8c8 	.word	0x2000a8c8
 800a910:	20009b1c 	.word	0x20009b1c
 800a914:	2000a9e4 	.word	0x2000a9e4
 800a918:	2000028c 	.word	0x2000028c
 800a91c:	20006d68 	.word	0x20006d68
 800a920:	20006d84 	.word	0x20006d84
 800a924:	20006f18 	.word	0x20006f18
 800a928:	20000298 	.word	0x20000298
 800a92c:	2000a074 	.word	0x2000a074
 800a930:	2000a1cc 	.word	0x2000a1cc
 800a934:	20006f94 	.word	0x20006f94
					rns_can = 0;
 800a938:	2300      	movs	r3, #0
 800a93a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800a93e:	f107 030c 	add.w	r3, r7, #12
 800a942:	4618      	mov	r0, r3
 800a944:	f7f9 f8b0 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800a948:	bf00      	nop
		if(rns_can)
 800a94a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d004      	beq.n	800a95c <HAL_CAN_RxFifo1MsgPendingCallback+0x310>
			CAN_PROCESS(source);
 800a952:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a956:	4618      	mov	r0, r3
 800a958:	f7ff fc98 	bl	800a28c <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800a95c:	2110      	movs	r1, #16
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f006 fe32 	bl	80115c8 <HAL_CAN_ActivateNotification>
}
 800a964:	bf00      	nop
 800a966:	3730      	adds	r7, #48	; 0x30
 800a968:	46bd      	mov	sp, r7
 800a96a:	bdb0      	pop	{r4, r5, r7, pc}

0800a96c <set>:
#include "common.h"
#include "math.h"

float pickVG[7] = {1.0, 1.0, 19999.0, 1.0, 1.0, 0.001, 60.0};;

void set(void) {
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b088      	sub	sp, #32
 800a970:	af02      	add	r7, sp, #8
	Initialize();
 800a972:	f7ff fa4b 	bl	8009e0c <Initialize>
	PSxInitDMA(&ps4, &hi2c1);
 800a976:	4974      	ldr	r1, [pc, #464]	; (800ab48 <set+0x1dc>)
 800a978:	4874      	ldr	r0, [pc, #464]	; (800ab4c <set+0x1e0>)
 800a97a:	f7fe f8e6 	bl	8008b4a <PSxInitDMA>
	TIMxInit(&htim6, 5000, 84);
 800a97e:	2254      	movs	r2, #84	; 0x54
 800a980:	f241 3188 	movw	r1, #5000	; 0x1388
 800a984:	4872      	ldr	r0, [pc, #456]	; (800ab50 <set+0x1e4>)
 800a986:	f7f8 fa97 	bl	8002eb8 <TIMxInit>
	MODNInit(MODN_FWD_OMNI, 3.5, 0.5, 2.0, 0.1);
 800a98a:	eddf 1a72 	vldr	s3, [pc, #456]	; 800ab54 <set+0x1e8>
 800a98e:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 800a992:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800a996:	eeb0 0a0c 	vmov.f32	s0, #12	; 0x40600000  3.5
 800a99a:	2000      	movs	r0, #0
 800a99c:	f7f9 fe04 	bl	80045a8 <MODNInit>
	LidarInit(&huart4, DISCONTINUOUS, &lidar);
 800a9a0:	4a6d      	ldr	r2, [pc, #436]	; (800ab58 <set+0x1ec>)
 800a9a2:	2101      	movs	r1, #1
 800a9a4:	486d      	ldr	r0, [pc, #436]	; (800ab5c <set+0x1f0>)
 800a9a6:	f003 ffd9 	bl	800e95c <LidarInit>
	RNS_config(&hcan1);
 800a9aa:	486d      	ldr	r0, [pc, #436]	; (800ab60 <set+0x1f4>)
 800a9ac:	f000 f918 	bl	800abe0 <RNS_config>
	ServoxInit(&servo_ring, &htim5, IP15_PIN, TIM_CHANNEL_2); // BDC7
 800a9b0:	2304      	movs	r3, #4
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	2340      	movs	r3, #64	; 0x40
 800a9b6:	4a6b      	ldr	r2, [pc, #428]	; (800ab64 <set+0x1f8>)
 800a9b8:	496b      	ldr	r1, [pc, #428]	; (800ab68 <set+0x1fc>)
 800a9ba:	486c      	ldr	r0, [pc, #432]	; (800ab6c <set+0x200>)
 800a9bc:	f7ff f88e 	bl	8009adc <ServoxInit>
	ServoInitPulseLimit(&servo_ring, 500, 2500);
 800a9c0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800a9c4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a9c8:	4868      	ldr	r0, [pc, #416]	; (800ab6c <set+0x200>)
 800a9ca:	f7ff f9ee 	bl	8009daa <ServoInitPulseLimit>
	ServoSetPulse(&servo_ring, 2300);
 800a9ce:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800a9d2:	4866      	ldr	r0, [pc, #408]	; (800ab6c <set+0x200>)
 800a9d4:	f7ff f9a0 	bl	8009d18 <ServoSetPulse>

	PPInit(fwd_omni, &fXPos, &fYPos, &fyaw, &pp);
 800a9d8:	4b65      	ldr	r3, [pc, #404]	; (800ab70 <set+0x204>)
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	4b65      	ldr	r3, [pc, #404]	; (800ab74 <set+0x208>)
 800a9de:	4a66      	ldr	r2, [pc, #408]	; (800ab78 <set+0x20c>)
 800a9e0:	4966      	ldr	r1, [pc, #408]	; (800ab7c <set+0x210>)
 800a9e2:	2002      	movs	r0, #2
 800a9e4:	f7fa fdf4 	bl	80055d0 <PPInit>
	PP_SetZ(-180, &pp);
 800a9e8:	4861      	ldr	r0, [pc, #388]	; (800ab70 <set+0x204>)
 800a9ea:	ed9f 0a65 	vldr	s0, [pc, #404]	; 800ab80 <set+0x214>
 800a9ee:	f7fb fa03 	bl	8005df8 <PP_SetZ>
	PP_PIDPathSet(1.0, 0.5, 0.5, &pp);
 800a9f2:	485f      	ldr	r0, [pc, #380]	; (800ab70 <set+0x204>)
 800a9f4:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800a9f8:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800a9fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800aa00:	f7fa feb8 	bl	8005774 <PP_PIDPathSet>
	PP_PIDEndSet(0.5, 0.1, 0.7, &pp);
 800aa04:	485a      	ldr	r0, [pc, #360]	; (800ab70 <set+0x204>)
 800aa06:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 800ab84 <set+0x218>
 800aa0a:	eddf 0a52 	vldr	s1, [pc, #328]	; 800ab54 <set+0x1e8>
 800aa0e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800aa12:	f7fa ff38 	bl	8005886 <PP_PIDEndSet>
	PP_PIDZSet(0.5, 0.05, 0.2, 5.5, &pp);
 800aa16:	4856      	ldr	r0, [pc, #344]	; (800ab70 <set+0x204>)
 800aa18:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 800aa1c:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800ab88 <set+0x21c>
 800aa20:	eddf 0a5a 	vldr	s1, [pc, #360]	; 800ab8c <set+0x220>
 800aa24:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800aa28:	f7fa fef4 	bl	8005814 <PP_PIDZSet>
	PP_SetCrv_Points(10, &pp);
 800aa2c:	4950      	ldr	r1, [pc, #320]	; (800ab70 <set+0x204>)
 800aa2e:	200a      	movs	r0, #10
 800aa30:	f7fb f9fa 	bl	8005e28 <PP_SetCrv_Points>

	R6091U_Init(&IMU, &huart3);
 800aa34:	4956      	ldr	r1, [pc, #344]	; (800ab90 <set+0x224>)
 800aa36:	4857      	ldr	r0, [pc, #348]	; (800ab94 <set+0x228>)
 800aa38:	f7fe fb9c 	bl	8009174 <R6091U_Init>

	PIDSourceInit(&pickErr, &pickU, &pick_PID);
 800aa3c:	4a56      	ldr	r2, [pc, #344]	; (800ab98 <set+0x22c>)
 800aa3e:	4957      	ldr	r1, [pc, #348]	; (800ab9c <set+0x230>)
 800aa40:	4857      	ldr	r0, [pc, #348]	; (800aba0 <set+0x234>)
 800aa42:	f7fa fb2f 	bl	80050a4 <PIDSourceInit>
	PIDDelayInit(&pick_PID);
 800aa46:	4854      	ldr	r0, [pc, #336]	; (800ab98 <set+0x22c>)
 800aa48:	f7fa fcc3 	bl	80053d2 <PIDDelayInit>
	PIDGainInit(0.005, pickVG[0], pickVG[1], pickVG[2], pickVG[3], pickVG[4], pickVG[5], pickVG[6], &pick_PID);
 800aa4c:	4b55      	ldr	r3, [pc, #340]	; (800aba4 <set+0x238>)
 800aa4e:	edd3 7a00 	vldr	s15, [r3]
 800aa52:	4b54      	ldr	r3, [pc, #336]	; (800aba4 <set+0x238>)
 800aa54:	ed93 7a01 	vldr	s14, [r3, #4]
 800aa58:	4b52      	ldr	r3, [pc, #328]	; (800aba4 <set+0x238>)
 800aa5a:	edd3 6a02 	vldr	s13, [r3, #8]
 800aa5e:	4b51      	ldr	r3, [pc, #324]	; (800aba4 <set+0x238>)
 800aa60:	ed93 6a03 	vldr	s12, [r3, #12]
 800aa64:	4b4f      	ldr	r3, [pc, #316]	; (800aba4 <set+0x238>)
 800aa66:	edd3 5a04 	vldr	s11, [r3, #16]
 800aa6a:	4b4e      	ldr	r3, [pc, #312]	; (800aba4 <set+0x238>)
 800aa6c:	ed93 5a05 	vldr	s10, [r3, #20]
 800aa70:	4b4c      	ldr	r3, [pc, #304]	; (800aba4 <set+0x238>)
 800aa72:	edd3 4a06 	vldr	s9, [r3, #24]
 800aa76:	4848      	ldr	r0, [pc, #288]	; (800ab98 <set+0x22c>)
 800aa78:	eef0 3a64 	vmov.f32	s7, s9
 800aa7c:	eeb0 3a45 	vmov.f32	s6, s10
 800aa80:	eef0 2a65 	vmov.f32	s5, s11
 800aa84:	eeb0 2a46 	vmov.f32	s4, s12
 800aa88:	eef0 1a66 	vmov.f32	s3, s13
 800aa8c:	eeb0 1a47 	vmov.f32	s2, s14
 800aa90:	eef0 0a67 	vmov.f32	s1, s15
 800aa94:	ed9f 0a44 	vldr	s0, [pc, #272]	; 800aba8 <set+0x23c>
 800aa98:	f7fa fb16 	bl	80050c8 <PIDGainInit>

	float fXPosGain[3] = {0.8, 0.4, 0.2};
 800aa9c:	4a43      	ldr	r2, [pc, #268]	; (800abac <set+0x240>)
 800aa9e:	f107 030c 	add.w	r3, r7, #12
 800aaa2:	ca07      	ldmia	r2, {r0, r1, r2}
 800aaa4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float fYPosGain[3] = {0.8, 0.4, 0.2};
 800aaa8:	4a40      	ldr	r2, [pc, #256]	; (800abac <set+0x240>)
 800aaaa:	463b      	mov	r3, r7
 800aaac:	ca07      	ldmia	r2, {r0, r1, r2}
 800aaae:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	/* X & Y position ABT */
	ABTInit(SAMPLE_TIME, fXPosGain[0], fXPosGain[1], fXPosGain[2], &fXEncData, &fXPos, &fXVel, &fXAcc, &x_data);
 800aab2:	edd7 7a03 	vldr	s15, [r7, #12]
 800aab6:	ed97 7a04 	vldr	s14, [r7, #16]
 800aaba:	edd7 6a05 	vldr	s13, [r7, #20]
 800aabe:	4b3c      	ldr	r3, [pc, #240]	; (800abb0 <set+0x244>)
 800aac0:	9300      	str	r3, [sp, #0]
 800aac2:	4b3c      	ldr	r3, [pc, #240]	; (800abb4 <set+0x248>)
 800aac4:	4a3c      	ldr	r2, [pc, #240]	; (800abb8 <set+0x24c>)
 800aac6:	492d      	ldr	r1, [pc, #180]	; (800ab7c <set+0x210>)
 800aac8:	483c      	ldr	r0, [pc, #240]	; (800abbc <set+0x250>)
 800aaca:	eef0 1a66 	vmov.f32	s3, s13
 800aace:	eeb0 1a47 	vmov.f32	s2, s14
 800aad2:	eef0 0a67 	vmov.f32	s1, s15
 800aad6:	ed9f 0a34 	vldr	s0, [pc, #208]	; 800aba8 <set+0x23c>
 800aada:	f7f6 fa87 	bl	8000fec <ABTInit>
	ABTEstimateInit(&x_data);
 800aade:	4834      	ldr	r0, [pc, #208]	; (800abb0 <set+0x244>)
 800aae0:	f7f6 fab1 	bl	8001046 <ABTEstimateInit>

	ABTInit(SAMPLE_TIME, fYPosGain[0], fYPosGain[1], fYPosGain[2], &fYEncData, &fYPos, &fYVel, &fYAcc, &y_data);
 800aae4:	edd7 7a00 	vldr	s15, [r7]
 800aae8:	ed97 7a01 	vldr	s14, [r7, #4]
 800aaec:	edd7 6a02 	vldr	s13, [r7, #8]
 800aaf0:	4b33      	ldr	r3, [pc, #204]	; (800abc0 <set+0x254>)
 800aaf2:	9300      	str	r3, [sp, #0]
 800aaf4:	4b33      	ldr	r3, [pc, #204]	; (800abc4 <set+0x258>)
 800aaf6:	4a34      	ldr	r2, [pc, #208]	; (800abc8 <set+0x25c>)
 800aaf8:	491f      	ldr	r1, [pc, #124]	; (800ab78 <set+0x20c>)
 800aafa:	4834      	ldr	r0, [pc, #208]	; (800abcc <set+0x260>)
 800aafc:	eef0 1a66 	vmov.f32	s3, s13
 800ab00:	eeb0 1a47 	vmov.f32	s2, s14
 800ab04:	eef0 0a67 	vmov.f32	s1, s15
 800ab08:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800aba8 <set+0x23c>
 800ab0c:	f7f6 fa6e 	bl	8000fec <ABTInit>
	ABTEstimateInit(&y_data);
 800ab10:	482b      	ldr	r0, [pc, #172]	; (800abc0 <set+0x254>)
 800ab12:	f7f6 fa98 	bl	8001046 <ABTEstimateInit>

	VESCInit(35000, 7, 0.15, 111, &vesc1);
 800ab16:	492e      	ldr	r1, [pc, #184]	; (800abd0 <set+0x264>)
 800ab18:	206f      	movs	r0, #111	; 0x6f
 800ab1a:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 800abd4 <set+0x268>
 800ab1e:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 800ab22:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800abd8 <set+0x26c>
 800ab26:	f003 fe81 	bl	800e82c <VESCInit>
	VESCInit(35000, 7, 0.15, 112, &vesc2);
 800ab2a:	492c      	ldr	r1, [pc, #176]	; (800abdc <set+0x270>)
 800ab2c:	2070      	movs	r0, #112	; 0x70
 800ab2e:	ed9f 1a29 	vldr	s2, [pc, #164]	; 800abd4 <set+0x268>
 800ab32:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 800ab36:	ed9f 0a28 	vldr	s0, [pc, #160]	; 800abd8 <set+0x26c>
 800ab3a:	f003 fe77 	bl	800e82c <VESCInit>
}
 800ab3e:	bf00      	nop
 800ab40:	3718      	adds	r7, #24
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	2000704c 	.word	0x2000704c
 800ab4c:	2000a3f0 	.word	0x2000a3f0
 800ab50:	200063d8 	.word	0x200063d8
 800ab54:	3dcccccd 	.word	0x3dcccccd
 800ab58:	20009498 	.word	0x20009498
 800ab5c:	200064dc 	.word	0x200064dc
 800ab60:	2000a364 	.word	0x2000a364
 800ab64:	40020400 	.word	0x40020400
 800ab68:	2000618c 	.word	0x2000618c
 800ab6c:	20007d28 	.word	0x20007d28
 800ab70:	20007188 	.word	0x20007188
 800ab74:	20009dc0 	.word	0x20009dc0
 800ab78:	20009c5c 	.word	0x20009c5c
 800ab7c:	20009df4 	.word	0x20009df4
 800ab80:	c3340000 	.word	0xc3340000
 800ab84:	3f333333 	.word	0x3f333333
 800ab88:	3e4ccccd 	.word	0x3e4ccccd
 800ab8c:	3d4ccccd 	.word	0x3d4ccccd
 800ab90:	200060a8 	.word	0x200060a8
 800ab94:	2000712c 	.word	0x2000712c
 800ab98:	20009c64 	.word	0x20009c64
 800ab9c:	20007810 	.word	0x20007810
 800aba0:	200069c0 	.word	0x200069c0
 800aba4:	20000000 	.word	0x20000000
 800aba8:	3ba3d70a 	.word	0x3ba3d70a
 800abac:	080204c8 	.word	0x080204c8
 800abb0:	2000a6dc 	.word	0x2000a6dc
 800abb4:	20006b1c 	.word	0x20006b1c
 800abb8:	20009cc0 	.word	0x20009cc0
 800abbc:	20006df4 	.word	0x20006df4
 800abc0:	20007c94 	.word	0x20007c94
 800abc4:	200076d0 	.word	0x200076d0
 800abc8:	200070a0 	.word	0x200070a0
 800abcc:	2000a700 	.word	0x2000a700
 800abd0:	20006fd8 	.word	0x20006fd8
 800abd4:	3e19999a 	.word	0x3e19999a
 800abd8:	4708b800 	.word	0x4708b800
 800abdc:	20009dd0 	.word	0x20009dd0

0800abe0 <RNS_config>:

void RNS_config(CAN_HandleTypeDef *hcanx) {
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b088      	sub	sp, #32
 800abe4:	af06      	add	r7, sp, #24
 800abe6:	6078      	str	r0, [r7, #4]
	RNSInit(hcanx, &rns);
 800abe8:	49a9      	ldr	r1, [pc, #676]	; (800ae90 <RNS_config+0x2b0>)
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f7fe fba4 	bl	8009338 <RNSInit>
	//0b11100101
	//Encoder dcba(0-swap, 1-keep)  BDC dcba(0-keep, 1-swap) //0x00 0x00 0x
	RNSSet(&rns, RNS_DEVICE_CONFIG, (float) 0b00001101, (float) fwd_omni,
 800abf0:	f04f 0200 	mov.w	r2, #0
 800abf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800abf8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800abfc:	f04f 0200 	mov.w	r2, #0
 800ac00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac04:	e9cd 2300 	strd	r2, r3, [sp]
 800ac08:	f04f 0200 	mov.w	r2, #0
 800ac0c:	4ba1      	ldr	r3, [pc, #644]	; (800ae94 <RNS_config+0x2b4>)
 800ac0e:	2124      	movs	r1, #36	; 0x24
 800ac10:	489f      	ldr	r0, [pc, #636]	; (800ae90 <RNS_config+0x2b0>)
 800ac12:	f7fe fd0f 	bl	8009634 <RNSSet>
			(float) roboconPID);
	RNSSet(&rns, RNS_X_Y_ENC_CONFIG, 0.05 / 4000.0 * 3.142, 2.0,
 800ac16:	f04f 0200 	mov.w	r2, #0
 800ac1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac22:	a37d      	add	r3, pc, #500	; (adr r3, 800ae18 <RNS_config+0x238>)
 800ac24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac2c:	f04f 0200 	mov.w	r2, #0
 800ac30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac34:	e9cd 2300 	strd	r2, r3, [sp]
 800ac38:	a377      	add	r3, pc, #476	; (adr r3, 800ae18 <RNS_config+0x238>)
 800ac3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3e:	2149      	movs	r1, #73	; 0x49
 800ac40:	4893      	ldr	r0, [pc, #588]	; (800ae90 <RNS_config+0x2b0>)
 800ac42:	f7fe fcf7 	bl	8009634 <RNSSet>
			0.05 / 4000.0 * 3.142, 2.0); //1.0 for nonswap , 2.0 for swap
	RNSSet(&rns, RNS_F_KCD_PTD, (float) 5816.0 / 5181.0, //remember to put floating point 5175/5174 wrong
 800ac46:	a376      	add	r3, pc, #472	; (adr r3, 800ae20 <RNS_config+0x240>)
 800ac48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4c:	e9cd 2300 	strd	r2, r3, [sp]
 800ac50:	a375      	add	r3, pc, #468	; (adr r3, 800ae28 <RNS_config+0x248>)
 800ac52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac56:	211f      	movs	r1, #31
 800ac58:	488d      	ldr	r0, [pc, #564]	; (800ae90 <RNS_config+0x2b0>)
 800ac5a:	f7fe fceb 	bl	8009634 <RNSSet>
	(float) (3.142 * 0.126 * 2 / 581.6));
	RNSSet(&rns, RNS_B_KCD_PTD, (float) 5191.0 / 5183.0,
 800ac5e:	a374      	add	r3, pc, #464	; (adr r3, 800ae30 <RNS_config+0x250>)
 800ac60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac64:	e9cd 2300 	strd	r2, r3, [sp]
 800ac68:	a373      	add	r3, pc, #460	; (adr r3, 800ae38 <RNS_config+0x258>)
 800ac6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6e:	2120      	movs	r1, #32
 800ac70:	4887      	ldr	r0, [pc, #540]	; (800ae90 <RNS_config+0x2b0>)
 800ac72:	f7fe fcdf 	bl	8009634 <RNSSet>
			(float) (3.142 * 0.126 * 2 / 519.1));

	RNSSet(&rns, RNS_F_LEFT_VEL_SATEU, 1.0, 1.0 / 6.88, 19999.0);
 800ac76:	a372      	add	r3, pc, #456	; (adr r3, 800ae40 <RNS_config+0x260>)
 800ac78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac80:	a371      	add	r3, pc, #452	; (adr r3, 800ae48 <RNS_config+0x268>)
 800ac82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac86:	e9cd 2300 	strd	r2, r3, [sp]
 800ac8a:	f04f 0200 	mov.w	r2, #0
 800ac8e:	4b82      	ldr	r3, [pc, #520]	; (800ae98 <RNS_config+0x2b8>)
 800ac90:	212b      	movs	r1, #43	; 0x2b
 800ac92:	487f      	ldr	r0, [pc, #508]	; (800ae90 <RNS_config+0x2b0>)
 800ac94:	f7fe fcce 	bl	8009634 <RNSSet>
	RNSSet(&rns, RNS_F_RIGHT_VEL_SATEU, 1.0, 1.0 / 8.66, 19999.0);
 800ac98:	a369      	add	r3, pc, #420	; (adr r3, 800ae40 <RNS_config+0x260>)
 800ac9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aca2:	a36b      	add	r3, pc, #428	; (adr r3, 800ae50 <RNS_config+0x270>)
 800aca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca8:	e9cd 2300 	strd	r2, r3, [sp]
 800acac:	f04f 0200 	mov.w	r2, #0
 800acb0:	4b79      	ldr	r3, [pc, #484]	; (800ae98 <RNS_config+0x2b8>)
 800acb2:	212c      	movs	r1, #44	; 0x2c
 800acb4:	4876      	ldr	r0, [pc, #472]	; (800ae90 <RNS_config+0x2b0>)
 800acb6:	f7fe fcbd 	bl	8009634 <RNSSet>
	RNSSet(&rns, RNS_B_LEFT_VEL_SATEU, 1.0, 1.0 / 7.91, 19999.0);
 800acba:	a361      	add	r3, pc, #388	; (adr r3, 800ae40 <RNS_config+0x260>)
 800acbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800acc4:	a364      	add	r3, pc, #400	; (adr r3, 800ae58 <RNS_config+0x278>)
 800acc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acca:	e9cd 2300 	strd	r2, r3, [sp]
 800acce:	f04f 0200 	mov.w	r2, #0
 800acd2:	4b71      	ldr	r3, [pc, #452]	; (800ae98 <RNS_config+0x2b8>)
 800acd4:	212d      	movs	r1, #45	; 0x2d
 800acd6:	486e      	ldr	r0, [pc, #440]	; (800ae90 <RNS_config+0x2b0>)
 800acd8:	f7fe fcac 	bl	8009634 <RNSSet>
	RNSSet(&rns, RNS_B_RIGHT_VEL_SATEU, 1.0, 1.0 / 7.79, 19999.0);
 800acdc:	a358      	add	r3, pc, #352	; (adr r3, 800ae40 <RNS_config+0x260>)
 800acde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ace6:	a35e      	add	r3, pc, #376	; (adr r3, 800ae60 <RNS_config+0x280>)
 800ace8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acec:	e9cd 2300 	strd	r2, r3, [sp]
 800acf0:	f04f 0200 	mov.w	r2, #0
 800acf4:	4b68      	ldr	r3, [pc, #416]	; (800ae98 <RNS_config+0x2b8>)
 800acf6:	212e      	movs	r1, #46	; 0x2e
 800acf8:	4865      	ldr	r0, [pc, #404]	; (800ae90 <RNS_config+0x2b0>)
 800acfa:	f7fe fc9b 	bl	8009634 <RNSSet>

	RNSSet(&rns, RNS_F_LEFT_VEL_PID, 1.0, 1.5, 0.001);   //
 800acfe:	a35a      	add	r3, pc, #360	; (adr r3, 800ae68 <RNS_config+0x288>)
 800ad00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad08:	f04f 0200 	mov.w	r2, #0
 800ad0c:	4b63      	ldr	r3, [pc, #396]	; (800ae9c <RNS_config+0x2bc>)
 800ad0e:	e9cd 2300 	strd	r2, r3, [sp]
 800ad12:	f04f 0200 	mov.w	r2, #0
 800ad16:	4b60      	ldr	r3, [pc, #384]	; (800ae98 <RNS_config+0x2b8>)
 800ad18:	212f      	movs	r1, #47	; 0x2f
 800ad1a:	485d      	ldr	r0, [pc, #372]	; (800ae90 <RNS_config+0x2b0>)
 800ad1c:	f7fe fc8a 	bl	8009634 <RNSSet>
	RNSSet(&rns, RNS_F_RIGHT_VEL_PID, 1.0, 1.5, 0.001);   //
 800ad20:	a351      	add	r3, pc, #324	; (adr r3, 800ae68 <RNS_config+0x288>)
 800ad22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad2a:	f04f 0200 	mov.w	r2, #0
 800ad2e:	4b5b      	ldr	r3, [pc, #364]	; (800ae9c <RNS_config+0x2bc>)
 800ad30:	e9cd 2300 	strd	r2, r3, [sp]
 800ad34:	f04f 0200 	mov.w	r2, #0
 800ad38:	4b57      	ldr	r3, [pc, #348]	; (800ae98 <RNS_config+0x2b8>)
 800ad3a:	2130      	movs	r1, #48	; 0x30
 800ad3c:	4854      	ldr	r0, [pc, #336]	; (800ae90 <RNS_config+0x2b0>)
 800ad3e:	f7fe fc79 	bl	8009634 <RNSSet>
	RNSSet(&rns, RNS_B_LEFT_VEL_PID, 1.0, 1.5, 0.001);   //
 800ad42:	a349      	add	r3, pc, #292	; (adr r3, 800ae68 <RNS_config+0x288>)
 800ad44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad4c:	f04f 0200 	mov.w	r2, #0
 800ad50:	4b52      	ldr	r3, [pc, #328]	; (800ae9c <RNS_config+0x2bc>)
 800ad52:	e9cd 2300 	strd	r2, r3, [sp]
 800ad56:	f04f 0200 	mov.w	r2, #0
 800ad5a:	4b4f      	ldr	r3, [pc, #316]	; (800ae98 <RNS_config+0x2b8>)
 800ad5c:	2131      	movs	r1, #49	; 0x31
 800ad5e:	484c      	ldr	r0, [pc, #304]	; (800ae90 <RNS_config+0x2b0>)
 800ad60:	f7fe fc68 	bl	8009634 <RNSSet>
	RNSSet(&rns, RNS_B_RIGHT_VEL_PID, 1.0, 1.5, 0.001);   //
 800ad64:	a340      	add	r3, pc, #256	; (adr r3, 800ae68 <RNS_config+0x288>)
 800ad66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad6e:	f04f 0200 	mov.w	r2, #0
 800ad72:	4b4a      	ldr	r3, [pc, #296]	; (800ae9c <RNS_config+0x2bc>)
 800ad74:	e9cd 2300 	strd	r2, r3, [sp]
 800ad78:	f04f 0200 	mov.w	r2, #0
 800ad7c:	4b46      	ldr	r3, [pc, #280]	; (800ae98 <RNS_config+0x2b8>)
 800ad7e:	2132      	movs	r1, #50	; 0x32
 800ad80:	4843      	ldr	r0, [pc, #268]	; (800ae90 <RNS_config+0x2b0>)
 800ad82:	f7fe fc57 	bl	8009634 <RNSSet>

	RNSSet(&rns, RNS_PPInit); //Path Planning
 800ad86:	2116      	movs	r1, #22
 800ad88:	4841      	ldr	r0, [pc, #260]	; (800ae90 <RNS_config+0x2b0>)
 800ad8a:	f7fe fc53 	bl	8009634 <RNSSet>
	RNSSet(&rns, RNS_PPPathPID, 1.0, 0.5, 0.5);
 800ad8e:	f04f 0200 	mov.w	r2, #0
 800ad92:	4b43      	ldr	r3, [pc, #268]	; (800aea0 <RNS_config+0x2c0>)
 800ad94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad98:	f04f 0200 	mov.w	r2, #0
 800ad9c:	4b40      	ldr	r3, [pc, #256]	; (800aea0 <RNS_config+0x2c0>)
 800ad9e:	e9cd 2300 	strd	r2, r3, [sp]
 800ada2:	f04f 0200 	mov.w	r2, #0
 800ada6:	4b3c      	ldr	r3, [pc, #240]	; (800ae98 <RNS_config+0x2b8>)
 800ada8:	2146      	movs	r1, #70	; 0x46
 800adaa:	4839      	ldr	r0, [pc, #228]	; (800ae90 <RNS_config+0x2b0>)
 800adac:	f7fe fc42 	bl	8009634 <RNSSet>
	RNSSet(&rns, RNS_PPEndPID, 0.5, 0.1, 0.7);
 800adb0:	a32f      	add	r3, pc, #188	; (adr r3, 800ae70 <RNS_config+0x290>)
 800adb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800adba:	a32f      	add	r3, pc, #188	; (adr r3, 800ae78 <RNS_config+0x298>)
 800adbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc0:	e9cd 2300 	strd	r2, r3, [sp]
 800adc4:	f04f 0200 	mov.w	r2, #0
 800adc8:	4b35      	ldr	r3, [pc, #212]	; (800aea0 <RNS_config+0x2c0>)
 800adca:	2147      	movs	r1, #71	; 0x47
 800adcc:	4830      	ldr	r0, [pc, #192]	; (800ae90 <RNS_config+0x2b0>)
 800adce:	f7fe fc31 	bl	8009634 <RNSSet>
	RNSSet(&rns, RNS_PPZPID, 0.5, 0.05, 0.2, 5.5);
 800add2:	f04f 0200 	mov.w	r2, #0
 800add6:	4b33      	ldr	r3, [pc, #204]	; (800aea4 <RNS_config+0x2c4>)
 800add8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800addc:	a328      	add	r3, pc, #160	; (adr r3, 800ae80 <RNS_config+0x2a0>)
 800adde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ade6:	a328      	add	r3, pc, #160	; (adr r3, 800ae88 <RNS_config+0x2a8>)
 800ade8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adec:	e9cd 2300 	strd	r2, r3, [sp]
 800adf0:	f04f 0200 	mov.w	r2, #0
 800adf4:	4b2a      	ldr	r3, [pc, #168]	; (800aea0 <RNS_config+0x2c0>)
 800adf6:	214f      	movs	r1, #79	; 0x4f
 800adf8:	4825      	ldr	r0, [pc, #148]	; (800ae90 <RNS_config+0x2b0>)
 800adfa:	f7fe fc1b 	bl	8009634 <RNSSet>
	RNSSet(&rns, RNS_PPSetCRV_PTS, 10.0); // Change No. of Points in the Curved Path
 800adfe:	f04f 0200 	mov.w	r2, #0
 800ae02:	4b29      	ldr	r3, [pc, #164]	; (800aea8 <RNS_config+0x2c8>)
 800ae04:	211d      	movs	r1, #29
 800ae06:	4822      	ldr	r0, [pc, #136]	; (800ae90 <RNS_config+0x2b0>)
 800ae08:	f7fe fc14 	bl	8009634 <RNSSet>
}
 800ae0c:	bf00      	nop
 800ae0e:	3708      	adds	r7, #8
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}
 800ae14:	f3af 8000 	nop.w
 800ae18:	b9727cf5 	.word	0xb9727cf5
 800ae1c:	3f049766 	.word	0x3f049766
 800ae20:	a0000000 	.word	0xa0000000
 800ae24:	3f564e14 	.word	0x3f564e14
 800ae28:	d7a1868c 	.word	0xd7a1868c
 800ae2c:	3ff1f604 	.word	0x3ff1f604
 800ae30:	00000000 	.word	0x00000000
 800ae34:	3f58fd94 	.word	0x3f58fd94
 800ae38:	7c2c0ed1 	.word	0x7c2c0ed1
 800ae3c:	3ff00652 	.word	0x3ff00652
 800ae40:	00000000 	.word	0x00000000
 800ae44:	40d387c0 	.word	0x40d387c0
 800ae48:	6b29aca7 	.word	0x6b29aca7
 800ae4c:	3fc29aca 	.word	0x3fc29aca
 800ae50:	dd1e2705 	.word	0xdd1e2705
 800ae54:	3fbd8faa 	.word	0x3fbd8faa
 800ae58:	b34c0e3d 	.word	0xb34c0e3d
 800ae5c:	3fc02e9a 	.word	0x3fc02e9a
 800ae60:	21d938da 	.word	0x21d938da
 800ae64:	3fc06e6b 	.word	0x3fc06e6b
 800ae68:	d2f1a9fc 	.word	0xd2f1a9fc
 800ae6c:	3f50624d 	.word	0x3f50624d
 800ae70:	66666666 	.word	0x66666666
 800ae74:	3fe66666 	.word	0x3fe66666
 800ae78:	9999999a 	.word	0x9999999a
 800ae7c:	3fb99999 	.word	0x3fb99999
 800ae80:	9999999a 	.word	0x9999999a
 800ae84:	3fc99999 	.word	0x3fc99999
 800ae88:	9999999a 	.word	0x9999999a
 800ae8c:	3fa99999 	.word	0x3fa99999
 800ae90:	20009370 	.word	0x20009370
 800ae94:	402a0000 	.word	0x402a0000
 800ae98:	3ff00000 	.word	0x3ff00000
 800ae9c:	3ff80000 	.word	0x3ff80000
 800aea0:	3fe00000 	.word	0x3fe00000
 800aea4:	40160000 	.word	0x40160000
 800aea8:	40240000 	.word	0x40240000

0800aeac <RobotStart>:
	}

}

void RobotStart()
{
 800aeac:	b480      	push	{r7}
 800aeae:	af00      	add	r7, sp, #0
	before = 0;
 800aeb0:	4b23      	ldr	r3, [pc, #140]	; (800af40 <RobotStart+0x94>)
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	601a      	str	r2, [r3, #0]
	mode = 1;
 800aeb6:	4b23      	ldr	r3, [pc, #140]	; (800af44 <RobotStart+0x98>)
 800aeb8:	2201      	movs	r2, #1
 800aeba:	601a      	str	r2, [r3, #0]
	servo_close_once = 0;
 800aebc:	4b22      	ldr	r3, [pc, #136]	; (800af48 <RobotStart+0x9c>)
 800aebe:	2200      	movs	r2, #0
 800aec0:	601a      	str	r2, [r3, #0]
	shoot_done = 0;
 800aec2:	4b22      	ldr	r3, [pc, #136]	; (800af4c <RobotStart+0xa0>)
 800aec4:	2200      	movs	r2, #0
 800aec6:	601a      	str	r2, [r3, #0]
	shoot_start = 0;
 800aec8:	4b21      	ldr	r3, [pc, #132]	; (800af50 <RobotStart+0xa4>)
 800aeca:	2200      	movs	r2, #0
 800aecc:	601a      	str	r2, [r3, #0]
	vesc_duty = 0;
 800aece:	4b21      	ldr	r3, [pc, #132]	; (800af54 <RobotStart+0xa8>)
 800aed0:	f04f 0200 	mov.w	r2, #0
 800aed4:	601a      	str	r2, [r3, #0]
	pick_start = 0;
 800aed6:	4b20      	ldr	r3, [pc, #128]	; (800af58 <RobotStart+0xac>)
 800aed8:	2200      	movs	r2, #0
 800aeda:	601a      	str	r2, [r3, #0]
	Robot_Pitch = PITCH45;
 800aedc:	4b1f      	ldr	r3, [pc, #124]	; (800af5c <RobotStart+0xb0>)
 800aede:	2200      	movs	r2, #0
 800aee0:	701a      	strb	r2, [r3, #0]
	set_pitch = 0;
 800aee2:	4b1f      	ldr	r3, [pc, #124]	; (800af60 <RobotStart+0xb4>)
 800aee4:	2200      	movs	r2, #0
 800aee6:	601a      	str	r2, [r3, #0]
	picked_left = 0;
 800aee8:	4b1e      	ldr	r3, [pc, #120]	; (800af64 <RobotStart+0xb8>)
 800aeea:	2200      	movs	r2, #0
 800aeec:	601a      	str	r2, [r3, #0]
	picked_right = 0;
 800aeee:	4b1e      	ldr	r3, [pc, #120]	; (800af68 <RobotStart+0xbc>)
 800aef0:	2200      	movs	r2, #0
 800aef2:	601a      	str	r2, [r3, #0]
	cylinder_retract;
 800aef4:	4a1d      	ldr	r2, [pc, #116]	; (800af6c <RobotStart+0xc0>)
 800aef6:	7f13      	ldrb	r3, [r2, #28]
 800aef8:	f36f 1386 	bfc	r3, #6, #1
 800aefc:	7713      	strb	r3, [r2, #28]
	set_pick_enc = 0;
 800aefe:	4b1c      	ldr	r3, [pc, #112]	; (800af70 <RobotStart+0xc4>)
 800af00:	2200      	movs	r2, #0
 800af02:	601a      	str	r2, [r3, #0]
	pick_tol = 100;
 800af04:	4b1b      	ldr	r3, [pc, #108]	; (800af74 <RobotStart+0xc8>)
 800af06:	2264      	movs	r2, #100	; 0x64
 800af08:	601a      	str	r2, [r3, #0]
	vel_adjust = 0;
 800af0a:	4b1b      	ldr	r3, [pc, #108]	; (800af78 <RobotStart+0xcc>)
 800af0c:	2200      	movs	r2, #0
 800af0e:	601a      	str	r2, [r3, #0]
	reload = 0;
 800af10:	4b1a      	ldr	r3, [pc, #104]	; (800af7c <RobotStart+0xd0>)
 800af12:	2200      	movs	r2, #0
 800af14:	601a      	str	r2, [r3, #0]
	load_stop_once = 0;
 800af16:	4b1a      	ldr	r3, [pc, #104]	; (800af80 <RobotStart+0xd4>)
 800af18:	2200      	movs	r2, #0
 800af1a:	601a      	str	r2, [r3, #0]
	load_start = 0;
 800af1c:	4b19      	ldr	r3, [pc, #100]	; (800af84 <RobotStart+0xd8>)
 800af1e:	2200      	movs	r2, #0
 800af20:	601a      	str	r2, [r3, #0]
	wait_load = 0;
 800af22:	4b19      	ldr	r3, [pc, #100]	; (800af88 <RobotStart+0xdc>)
 800af24:	2200      	movs	r2, #0
 800af26:	601a      	str	r2, [r3, #0]
	wheel = 1;
 800af28:	4b18      	ldr	r3, [pc, #96]	; (800af8c <RobotStart+0xe0>)
 800af2a:	2201      	movs	r2, #1
 800af2c:	601a      	str	r2, [r3, #0]
	loaded = 0;
 800af2e:	4b18      	ldr	r3, [pc, #96]	; (800af90 <RobotStart+0xe4>)
 800af30:	2200      	movs	r2, #0
 800af32:	601a      	str	r2, [r3, #0]
}
 800af34:	bf00      	nop
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr
 800af3e:	bf00      	nop
 800af40:	20007760 	.word	0x20007760
 800af44:	20009738 	.word	0x20009738
 800af48:	20009cbc 	.word	0x20009cbc
 800af4c:	200093e4 	.word	0x200093e4
 800af50:	20009734 	.word	0x20009734
 800af54:	20007840 	.word	0x20007840
 800af58:	20007d18 	.word	0x20007d18
 800af5c:	20009aca 	.word	0x20009aca
 800af60:	20009ab4 	.word	0x20009ab4
 800af64:	20009c50 	.word	0x20009c50
 800af68:	200076d8 	.word	0x200076d8
 800af6c:	200099f4 	.word	0x200099f4
 800af70:	20007bf0 	.word	0x20007bf0
 800af74:	20007778 	.word	0x20007778
 800af78:	20009490 	.word	0x20009490
 800af7c:	20007c0c 	.word	0x20007c0c
 800af80:	20009dcc 	.word	0x20009dcc
 800af84:	20007808 	.word	0x20007808
 800af88:	20007944 	.word	0x20007944
 800af8c:	200069c4 	.word	0x200069c4
 800af90:	20009890 	.word	0x20009890

0800af94 <NormalControl>:

void NormalControl()
{
 800af94:	b580      	push	{r7, lr}
 800af96:	af00      	add	r7, sp, #0
	// Cylinder
	if (ps4.button == OPTION)
 800af98:	4b69      	ldr	r3, [pc, #420]	; (800b140 <NormalControl+0x1ac>)
 800af9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afa0:	d124      	bne.n	800afec <NormalControl+0x58>
	{
		while (ps4.button == OPTION);
 800afa2:	bf00      	nop
 800afa4:	4b66      	ldr	r3, [pc, #408]	; (800b140 <NormalControl+0x1ac>)
 800afa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afac:	d0fa      	beq.n	800afa4 <NormalControl+0x10>
//		setPick(0);
		static int counter = 0;
		counter++;
 800afae:	4b65      	ldr	r3, [pc, #404]	; (800b144 <NormalControl+0x1b0>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	3301      	adds	r3, #1
 800afb4:	4a63      	ldr	r2, [pc, #396]	; (800b144 <NormalControl+0x1b0>)
 800afb6:	6013      	str	r3, [r2, #0]

		if(counter == 1)
 800afb8:	4b62      	ldr	r3, [pc, #392]	; (800b144 <NormalControl+0x1b0>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d103      	bne.n	800afc8 <NormalControl+0x34>
		{
			vesc_duty = 0.405;
 800afc0:	4b61      	ldr	r3, [pc, #388]	; (800b148 <NormalControl+0x1b4>)
 800afc2:	4a62      	ldr	r2, [pc, #392]	; (800b14c <NormalControl+0x1b8>)
 800afc4:	601a      	str	r2, [r3, #0]
 800afc6:	e011      	b.n	800afec <NormalControl+0x58>
		}
		else if(counter == 2)
 800afc8:	4b5e      	ldr	r3, [pc, #376]	; (800b144 <NormalControl+0x1b0>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	2b02      	cmp	r3, #2
 800afce:	d103      	bne.n	800afd8 <NormalControl+0x44>
		{
			vesc_duty = 0.295;
 800afd0:	4b5d      	ldr	r3, [pc, #372]	; (800b148 <NormalControl+0x1b4>)
 800afd2:	4a5f      	ldr	r2, [pc, #380]	; (800b150 <NormalControl+0x1bc>)
 800afd4:	601a      	str	r2, [r3, #0]
 800afd6:	e009      	b.n	800afec <NormalControl+0x58>
		}
		else if(counter == 3)
 800afd8:	4b5a      	ldr	r3, [pc, #360]	; (800b144 <NormalControl+0x1b0>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2b03      	cmp	r3, #3
 800afde:	d105      	bne.n	800afec <NormalControl+0x58>
		{
			vesc_duty = 0.175;
 800afe0:	4b59      	ldr	r3, [pc, #356]	; (800b148 <NormalControl+0x1b4>)
 800afe2:	4a5c      	ldr	r2, [pc, #368]	; (800b154 <NormalControl+0x1c0>)
 800afe4:	601a      	str	r2, [r3, #0]
			counter = 0;
 800afe6:	4b57      	ldr	r3, [pc, #348]	; (800b144 <NormalControl+0x1b0>)
 800afe8:	2200      	movs	r2, #0
 800afea:	601a      	str	r2, [r3, #0]
		}
	}

	// Cylinder
	if (ps4.button == TRIANGLE)
 800afec:	4b54      	ldr	r3, [pc, #336]	; (800b140 <NormalControl+0x1ac>)
 800afee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aff4:	d108      	bne.n	800b008 <NormalControl+0x74>
	{
		while (ps4.button == TRIANGLE);
 800aff6:	bf00      	nop
 800aff8:	4b51      	ldr	r3, [pc, #324]	; (800b140 <NormalControl+0x1ac>)
 800affa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800affc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b000:	d0fa      	beq.n	800aff8 <NormalControl+0x64>
//			cylinder_load;
//			counter = 0;
//		}
//		LidarSendIns(NEAR, &lidar);
//		ResetCoordinate();
		pick_right = 1;
 800b002:	4b55      	ldr	r3, [pc, #340]	; (800b158 <NormalControl+0x1c4>)
 800b004:	2201      	movs	r2, #1
 800b006:	601a      	str	r2, [r3, #0]
	}

	// Servo
	if(ps4.button == SQUARE)
 800b008:	4b4d      	ldr	r3, [pc, #308]	; (800b140 <NormalControl+0x1ac>)
 800b00a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b00c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b010:	d124      	bne.n	800b05c <NormalControl+0xc8>
	{
		while(ps4.button == SQUARE);
 800b012:	bf00      	nop
 800b014:	4b4a      	ldr	r3, [pc, #296]	; (800b140 <NormalControl+0x1ac>)
 800b016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b01c:	d0fa      	beq.n	800b014 <NormalControl+0x80>
		if(!pp.pp_start)
 800b01e:	4b4f      	ldr	r3, [pc, #316]	; (800b15c <NormalControl+0x1c8>)
 800b020:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b024:	f003 0301 	and.w	r3, r3, #1
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d116      	bne.n	800b05c <NormalControl+0xc8>
		{
			static int counter = 0;

			if(counter == 0)
 800b02e:	4b4c      	ldr	r3, [pc, #304]	; (800b160 <NormalControl+0x1cc>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d10a      	bne.n	800b04c <NormalControl+0xb8>
			{
				counter++;
 800b036:	4b4a      	ldr	r3, [pc, #296]	; (800b160 <NormalControl+0x1cc>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	3301      	adds	r3, #1
 800b03c:	4a48      	ldr	r2, [pc, #288]	; (800b160 <NormalControl+0x1cc>)
 800b03e:	6013      	str	r3, [r2, #0]
				close_servo;
 800b040:	f240 31a2 	movw	r1, #930	; 0x3a2
 800b044:	4847      	ldr	r0, [pc, #284]	; (800b164 <NormalControl+0x1d0>)
 800b046:	f7fe fe67 	bl	8009d18 <ServoSetPulse>
 800b04a:	e007      	b.n	800b05c <NormalControl+0xc8>
			}
			else
			{
				open_servo;
 800b04c:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800b050:	4844      	ldr	r0, [pc, #272]	; (800b164 <NormalControl+0x1d0>)
 800b052:	f7fe fe61 	bl	8009d18 <ServoSetPulse>
				counter = 0;
 800b056:	4b42      	ldr	r3, [pc, #264]	; (800b160 <NormalControl+0x1cc>)
 800b058:	2200      	movs	r2, #0
 800b05a:	601a      	str	r2, [r3, #0]
			}
		}
	}

	// Shoot
	if(ps4.button == CROSS)
 800b05c:	4b38      	ldr	r3, [pc, #224]	; (800b140 <NormalControl+0x1ac>)
 800b05e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b060:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b064:	d10f      	bne.n	800b086 <NormalControl+0xf2>
	{
		while(ps4.button == CROSS);
 800b066:	bf00      	nop
 800b068:	4b35      	ldr	r3, [pc, #212]	; (800b140 <NormalControl+0x1ac>)
 800b06a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b06c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b070:	d0fa      	beq.n	800b068 <NormalControl+0xd4>
		push_shoot;
 800b072:	493d      	ldr	r1, [pc, #244]	; (800b168 <NormalControl+0x1d4>)
 800b074:	483d      	ldr	r0, [pc, #244]	; (800b16c <NormalControl+0x1d8>)
 800b076:	f7f6 f888 	bl	800118a <WriteBDC>
		shoot_start = 1;
 800b07a:	4b3d      	ldr	r3, [pc, #244]	; (800b170 <NormalControl+0x1dc>)
 800b07c:	2201      	movs	r2, #1
 800b07e:	601a      	str	r2, [r3, #0]
		wait_load = 1;
 800b080:	4b3c      	ldr	r3, [pc, #240]	; (800b174 <NormalControl+0x1e0>)
 800b082:	2201      	movs	r2, #1
 800b084:	601a      	str	r2, [r3, #0]
	}

	// Fly wheel
	if(ps4.button == CIRCLE)
 800b086:	4b2e      	ldr	r3, [pc, #184]	; (800b140 <NormalControl+0x1ac>)
 800b088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b08a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b08e:	d11f      	bne.n	800b0d0 <NormalControl+0x13c>
	{
		while(ps4.button == CIRCLE);
 800b090:	bf00      	nop
 800b092:	4b2b      	ldr	r3, [pc, #172]	; (800b140 <NormalControl+0x1ac>)
 800b094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b09a:	d0fa      	beq.n	800b092 <NormalControl+0xfe>
		static int counter = 0;

		if(counter == 0)
 800b09c:	4b36      	ldr	r3, [pc, #216]	; (800b178 <NormalControl+0x1e4>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d108      	bne.n	800b0b6 <NormalControl+0x122>
		{
			counter++;
 800b0a4:	4b34      	ldr	r3, [pc, #208]	; (800b178 <NormalControl+0x1e4>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	4a33      	ldr	r2, [pc, #204]	; (800b178 <NormalControl+0x1e4>)
 800b0ac:	6013      	str	r3, [r2, #0]
			vesc_duty = 0.3;
 800b0ae:	4b26      	ldr	r3, [pc, #152]	; (800b148 <NormalControl+0x1b4>)
 800b0b0:	4a32      	ldr	r2, [pc, #200]	; (800b17c <NormalControl+0x1e8>)
 800b0b2:	601a      	str	r2, [r3, #0]
 800b0b4:	e00c      	b.n	800b0d0 <NormalControl+0x13c>
		}
		else
		{
			vesc_duty = 0;
 800b0b6:	4b24      	ldr	r3, [pc, #144]	; (800b148 <NormalControl+0x1b4>)
 800b0b8:	f04f 0200 	mov.w	r2, #0
 800b0bc:	601a      	str	r2, [r3, #0]
			VESCStop(&vesc1);
 800b0be:	4830      	ldr	r0, [pc, #192]	; (800b180 <NormalControl+0x1ec>)
 800b0c0:	f003 fc00 	bl	800e8c4 <VESCStop>
			VESCStop(&vesc2);
 800b0c4:	482f      	ldr	r0, [pc, #188]	; (800b184 <NormalControl+0x1f0>)
 800b0c6:	f003 fbfd 	bl	800e8c4 <VESCStop>
			counter = 0;
 800b0ca:	4b2b      	ldr	r3, [pc, #172]	; (800b178 <NormalControl+0x1e4>)
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	601a      	str	r2, [r3, #0]
		}
	}

	if(ps4.button == RIGHT)
 800b0d0:	4b1b      	ldr	r3, [pc, #108]	; (800b140 <NormalControl+0x1ac>)
 800b0d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0d4:	2b20      	cmp	r3, #32
 800b0d6:	d106      	bne.n	800b0e6 <NormalControl+0x152>
	{
		while(ps4.button == RIGHT);
 800b0d8:	bf00      	nop
 800b0da:	4b19      	ldr	r3, [pc, #100]	; (800b140 <NormalControl+0x1ac>)
 800b0dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0de:	2b20      	cmp	r3, #32
 800b0e0:	d0fb      	beq.n	800b0da <NormalControl+0x146>
		LoadRing();
 800b0e2:	f000 fc3d 	bl	800b960 <LoadRing>
	}

	if(ps4.button == LEFT)
 800b0e6:	4b16      	ldr	r3, [pc, #88]	; (800b140 <NormalControl+0x1ac>)
 800b0e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0ea:	2b80      	cmp	r3, #128	; 0x80
 800b0ec:	d107      	bne.n	800b0fe <NormalControl+0x16a>
	{
		while(ps4.button == LEFT);
 800b0ee:	bf00      	nop
 800b0f0:	4b13      	ldr	r3, [pc, #76]	; (800b140 <NormalControl+0x1ac>)
 800b0f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0f4:	2b80      	cmp	r3, #128	; 0x80
 800b0f6:	d0fb      	beq.n	800b0f0 <NormalControl+0x15c>
//		if(!picked_left)
//			pick_left = 1;
//		else
//			pick_right = 1;

		pick_left = 1;
 800b0f8:	4b23      	ldr	r3, [pc, #140]	; (800b188 <NormalControl+0x1f4>)
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	601a      	str	r2, [r3, #0]

	}

	if (HAL_GetTick() - before >= NormalMode) {
 800b0fe:	f005 fe15 	bl	8010d2c <HAL_GetTick>
 800b102:	4603      	mov	r3, r0
 800b104:	4a21      	ldr	r2, [pc, #132]	; (800b18c <NormalControl+0x1f8>)
 800b106:	6812      	ldr	r2, [r2, #0]
 800b108:	1a9b      	subs	r3, r3, r2
 800b10a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800b10e:	d314      	bcc.n	800b13a <NormalControl+0x1a6>
		led9= !led9;
 800b110:	4b1f      	ldr	r3, [pc, #124]	; (800b190 <NormalControl+0x1fc>)
 800b112:	7e1b      	ldrb	r3, [r3, #24]
 800b114:	f003 0310 	and.w	r3, r3, #16
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	bf0c      	ite	eq
 800b11e:	2301      	moveq	r3, #1
 800b120:	2300      	movne	r3, #0
 800b122:	b2d9      	uxtb	r1, r3
 800b124:	4a1a      	ldr	r2, [pc, #104]	; (800b190 <NormalControl+0x1fc>)
 800b126:	7e13      	ldrb	r3, [r2, #24]
 800b128:	f361 1304 	bfi	r3, r1, #4, #1
 800b12c:	7613      	strb	r3, [r2, #24]
		before = HAL_GetTick();
 800b12e:	f005 fdfd 	bl	8010d2c <HAL_GetTick>
 800b132:	4603      	mov	r3, r0
 800b134:	461a      	mov	r2, r3
 800b136:	4b15      	ldr	r3, [pc, #84]	; (800b18c <NormalControl+0x1f8>)
 800b138:	601a      	str	r2, [r3, #0]
	}
}
 800b13a:	bf00      	nop
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	2000a3f0 	.word	0x2000a3f0
 800b144:	2000029c 	.word	0x2000029c
 800b148:	20007840 	.word	0x20007840
 800b14c:	3ecf5c29 	.word	0x3ecf5c29
 800b150:	3e970a3d 	.word	0x3e970a3d
 800b154:	3e333333 	.word	0x3e333333
 800b158:	2000a9f4 	.word	0x2000a9f4
 800b15c:	20007188 	.word	0x20007188
 800b160:	200002a0 	.word	0x200002a0
 800b164:	20007d28 	.word	0x20007d28
 800b168:	ffffb1e1 	.word	0xffffb1e1
 800b16c:	20009acc 	.word	0x20009acc
 800b170:	20009734 	.word	0x20009734
 800b174:	20007944 	.word	0x20007944
 800b178:	200002a4 	.word	0x200002a4
 800b17c:	3e99999a 	.word	0x3e99999a
 800b180:	20006fd8 	.word	0x20006fd8
 800b184:	20009dd0 	.word	0x20009dd0
 800b188:	20007d1c 	.word	0x20007d1c
 800b18c:	20007760 	.word	0x20007760
 800b190:	200099f4 	.word	0x200099f4

0800b194 <Auto>:

void Auto() {
 800b194:	b5b0      	push	{r4, r5, r7, lr}
 800b196:	b088      	sub	sp, #32
 800b198:	af00      	add	r7, sp, #0
	if(ps4.button == OPTION)
 800b19a:	4b51      	ldr	r3, [pc, #324]	; (800b2e0 <Auto+0x14c>)
 800b19c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b19e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1a2:	d107      	bne.n	800b1b4 <Auto+0x20>
	{
		while(ps4.button == OPTION);
 800b1a4:	bf00      	nop
 800b1a6:	4b4e      	ldr	r3, [pc, #312]	; (800b2e0 <Auto+0x14c>)
 800b1a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1ae:	d0fa      	beq.n	800b1a6 <Auto+0x12>
//		if(lidar.AdjEnb)
//			lidar.AdjEnb = 0;
//		else
//			lidar.AdjEnb = 1;
//		ResetCoordinate();
		ResetPickEnc();
 800b1b0:	f000 fc36 	bl	800ba20 <ResetPickEnc>
	}

	// Shoot
	if(ps4.button == CROSS)
 800b1b4:	4b4a      	ldr	r3, [pc, #296]	; (800b2e0 <Auto+0x14c>)
 800b1b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1bc:	d10f      	bne.n	800b1de <Auto+0x4a>
	{
		while(ps4.button == CROSS);
 800b1be:	bf00      	nop
 800b1c0:	4b47      	ldr	r3, [pc, #284]	; (800b2e0 <Auto+0x14c>)
 800b1c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1c8:	d0fa      	beq.n	800b1c0 <Auto+0x2c>
		push_shoot;
 800b1ca:	4946      	ldr	r1, [pc, #280]	; (800b2e4 <Auto+0x150>)
 800b1cc:	4846      	ldr	r0, [pc, #280]	; (800b2e8 <Auto+0x154>)
 800b1ce:	f7f5 ffdc 	bl	800118a <WriteBDC>
		shoot_start = 1;
 800b1d2:	4b46      	ldr	r3, [pc, #280]	; (800b2ec <Auto+0x158>)
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	601a      	str	r2, [r3, #0]
		wait_load = 1;
 800b1d8:	4b45      	ldr	r3, [pc, #276]	; (800b2f0 <Auto+0x15c>)
 800b1da:	2201      	movs	r2, #1
 800b1dc:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == SQUARE)
 800b1de:	4b40      	ldr	r3, [pc, #256]	; (800b2e0 <Auto+0x14c>)
 800b1e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1e6:	d105      	bne.n	800b1f4 <Auto+0x60>
	{
		while(ps4.button == SQUARE);
 800b1e8:	bf00      	nop
 800b1ea:	4b3d      	ldr	r3, [pc, #244]	; (800b2e0 <Auto+0x14c>)
 800b1ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1f2:	d0fa      	beq.n	800b1ea <Auto+0x56>
//		PP_stop(&pp);
	}

	if(ps4.button == CIRCLE)
 800b1f4:	4b3a      	ldr	r3, [pc, #232]	; (800b2e0 <Auto+0x14c>)
 800b1f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1fc:	d142      	bne.n	800b284 <Auto+0xf0>
	{
		while(ps4.button == CIRCLE);
 800b1fe:	bf00      	nop
 800b200:	4b37      	ldr	r3, [pc, #220]	; (800b2e0 <Auto+0x14c>)
 800b202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b208:	d0fa      	beq.n	800b200 <Auto+0x6c>
		static int counter = 0;

		if(counter == 0)
 800b20a:	4b3a      	ldr	r3, [pc, #232]	; (800b2f4 <Auto+0x160>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d132      	bne.n	800b278 <Auto+0xe4>
		{
			setPick(2200);
 800b212:	f640 0098 	movw	r0, #2200	; 0x898
 800b216:	f000 f87b 	bl	800b310 <setPick>

			float pick_left_point[1][7] = {{5.0, -4.3, 0, 0, 0, 0, 0}};
 800b21a:	4b37      	ldr	r3, [pc, #220]	; (800b2f8 <Auto+0x164>)
 800b21c:	1d3c      	adds	r4, r7, #4
 800b21e:	461d      	mov	r5, r3
 800b220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b224:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b228:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			PP_start(pick_left_point, 1, &pp);
 800b22c:	1d3b      	adds	r3, r7, #4
 800b22e:	4a33      	ldr	r2, [pc, #204]	; (800b2fc <Auto+0x168>)
 800b230:	2101      	movs	r1, #1
 800b232:	4618      	mov	r0, r3
 800b234:	f7fa fb43 	bl	80058be <PP_start>
			while(pp.pp_start)
 800b238:	e00d      	b.n	800b256 <Auto+0xc2>
			{
				if(ps4.button == SQUARE)
 800b23a:	4b29      	ldr	r3, [pc, #164]	; (800b2e0 <Auto+0x14c>)
 800b23c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b23e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b242:	d108      	bne.n	800b256 <Auto+0xc2>
				{
					while(ps4.button == SQUARE);
 800b244:	bf00      	nop
 800b246:	4b26      	ldr	r3, [pc, #152]	; (800b2e0 <Auto+0x14c>)
 800b248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b24a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b24e:	d0fa      	beq.n	800b246 <Auto+0xb2>
					PP_stop(&pp);
 800b250:	482a      	ldr	r0, [pc, #168]	; (800b2fc <Auto+0x168>)
 800b252:	f7fa fd6e 	bl	8005d32 <PP_stop>
			while(pp.pp_start)
 800b256:	4b29      	ldr	r3, [pc, #164]	; (800b2fc <Auto+0x168>)
 800b258:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b25c:	f003 0301 	and.w	r3, r3, #1
 800b260:	b2db      	uxtb	r3, r3
 800b262:	2b00      	cmp	r3, #0
 800b264:	d1e9      	bne.n	800b23a <Auto+0xa6>
				}
			}
			pick_left = 1;
 800b266:	4b26      	ldr	r3, [pc, #152]	; (800b300 <Auto+0x16c>)
 800b268:	2201      	movs	r2, #1
 800b26a:	601a      	str	r2, [r3, #0]
			counter++;
 800b26c:	4b21      	ldr	r3, [pc, #132]	; (800b2f4 <Auto+0x160>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	3301      	adds	r3, #1
 800b272:	4a20      	ldr	r2, [pc, #128]	; (800b2f4 <Auto+0x160>)
 800b274:	6013      	str	r3, [r2, #0]
 800b276:	e005      	b.n	800b284 <Auto+0xf0>
		}
		else
		{
			counter = 0;
 800b278:	4b1e      	ldr	r3, [pc, #120]	; (800b2f4 <Auto+0x160>)
 800b27a:	2200      	movs	r2, #0
 800b27c:	601a      	str	r2, [r3, #0]
			pick_right = 1;
 800b27e:	4b21      	ldr	r3, [pc, #132]	; (800b304 <Auto+0x170>)
 800b280:	2201      	movs	r2, #1
 800b282:	601a      	str	r2, [r3, #0]
		}
	}

	if(ps4.button == TRIANGLE)
 800b284:	4b16      	ldr	r3, [pc, #88]	; (800b2e0 <Auto+0x14c>)
 800b286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b28c:	d107      	bne.n	800b29e <Auto+0x10a>
	{
		while(ps4.button == TRIANGLE);
 800b28e:	bf00      	nop
 800b290:	4b13      	ldr	r3, [pc, #76]	; (800b2e0 <Auto+0x14c>)
 800b292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b298:	d0fa      	beq.n	800b290 <Auto+0xfc>
		AutoLoadRing();
 800b29a:	f000 fb85 	bl	800b9a8 <AutoLoadRing>
	}

	if (HAL_GetTick() - before >= AutoMode)
 800b29e:	f005 fd45 	bl	8010d2c <HAL_GetTick>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	4a18      	ldr	r2, [pc, #96]	; (800b308 <Auto+0x174>)
 800b2a6:	6812      	ldr	r2, [r2, #0]
 800b2a8:	1a9b      	subs	r3, r3, r2
 800b2aa:	2b7c      	cmp	r3, #124	; 0x7c
 800b2ac:	d914      	bls.n	800b2d8 <Auto+0x144>
	{
		led9= !led9;
 800b2ae:	4b17      	ldr	r3, [pc, #92]	; (800b30c <Auto+0x178>)
 800b2b0:	7e1b      	ldrb	r3, [r3, #24]
 800b2b2:	f003 0310 	and.w	r3, r3, #16
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	bf0c      	ite	eq
 800b2bc:	2301      	moveq	r3, #1
 800b2be:	2300      	movne	r3, #0
 800b2c0:	b2d9      	uxtb	r1, r3
 800b2c2:	4a12      	ldr	r2, [pc, #72]	; (800b30c <Auto+0x178>)
 800b2c4:	7e13      	ldrb	r3, [r2, #24]
 800b2c6:	f361 1304 	bfi	r3, r1, #4, #1
 800b2ca:	7613      	strb	r3, [r2, #24]
		before = HAL_GetTick();
 800b2cc:	f005 fd2e 	bl	8010d2c <HAL_GetTick>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	4b0c      	ldr	r3, [pc, #48]	; (800b308 <Auto+0x174>)
 800b2d6:	601a      	str	r2, [r3, #0]
	}
}
 800b2d8:	bf00      	nop
 800b2da:	3720      	adds	r7, #32
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bdb0      	pop	{r4, r5, r7, pc}
 800b2e0:	2000a3f0 	.word	0x2000a3f0
 800b2e4:	ffffb1e1 	.word	0xffffb1e1
 800b2e8:	20009acc 	.word	0x20009acc
 800b2ec:	20009734 	.word	0x20009734
 800b2f0:	20007944 	.word	0x20007944
 800b2f4:	200002a8 	.word	0x200002a8
 800b2f8:	080204d4 	.word	0x080204d4
 800b2fc:	20007188 	.word	0x20007188
 800b300:	20007d1c 	.word	0x20007d1c
 800b304:	2000a9f4 	.word	0x2000a9f4
 800b308:	20007760 	.word	0x20007760
 800b30c:	200099f4 	.word	0x200099f4

0800b310 <setPick>:
			break;
	}
}

void setPick(int32_t target)
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
	pick_target_enc = target;
 800b318:	4a05      	ldr	r2, [pc, #20]	; (800b330 <setPick+0x20>)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6013      	str	r3, [r2, #0]
	set_pick_enc = 1;
 800b31e:	4b05      	ldr	r3, [pc, #20]	; (800b334 <setPick+0x24>)
 800b320:	2201      	movs	r2, #1
 800b322:	601a      	str	r2, [r3, #0]
}
 800b324:	bf00      	nop
 800b326:	370c      	adds	r7, #12
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr
 800b330:	20006a8c 	.word	0x20006a8c
 800b334:	20007bf0 	.word	0x20007bf0

0800b338 <CheckPickEnc>:

void CheckPickEnc(void)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	af00      	add	r7, sp, #0
	if(set_pick_enc)
 800b33c:	4b1a      	ldr	r3, [pc, #104]	; (800b3a8 <CheckPickEnc+0x70>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d02e      	beq.n	800b3a2 <CheckPickEnc+0x6a>
	{
		pickErr = pick_target_enc - pick_enc;
 800b344:	4b19      	ldr	r3, [pc, #100]	; (800b3ac <CheckPickEnc+0x74>)
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	4b19      	ldr	r3, [pc, #100]	; (800b3b0 <CheckPickEnc+0x78>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	1ad3      	subs	r3, r2, r3
 800b34e:	ee07 3a90 	vmov	s15, r3
 800b352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b356:	4b17      	ldr	r3, [pc, #92]	; (800b3b4 <CheckPickEnc+0x7c>)
 800b358:	edc3 7a00 	vstr	s15, [r3]
		PID(&pick_PID);
 800b35c:	4816      	ldr	r0, [pc, #88]	; (800b3b8 <CheckPickEnc+0x80>)
 800b35e:	f7fa f856 	bl	800540e <PID>
		pick_manual((int32_t)pickU);
 800b362:	4b16      	ldr	r3, [pc, #88]	; (800b3bc <CheckPickEnc+0x84>)
 800b364:	edd3 7a00 	vldr	s15, [r3]
 800b368:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b36c:	ee17 1a90 	vmov	r1, s15
 800b370:	4813      	ldr	r0, [pc, #76]	; (800b3c0 <CheckPickEnc+0x88>)
 800b372:	f7f5 ff0a 	bl	800118a <WriteBDC>

		if(abs(pickErr) < pick_tol)
 800b376:	4b0f      	ldr	r3, [pc, #60]	; (800b3b4 <CheckPickEnc+0x7c>)
 800b378:	edd3 7a00 	vldr	s15, [r3]
 800b37c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b380:	ee17 3a90 	vmov	r3, s15
 800b384:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800b388:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800b38c:	4b0d      	ldr	r3, [pc, #52]	; (800b3c4 <CheckPickEnc+0x8c>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	429a      	cmp	r2, r3
 800b392:	da06      	bge.n	800b3a2 <CheckPickEnc+0x6a>
		{
			set_pick_enc = 0;
 800b394:	4b04      	ldr	r3, [pc, #16]	; (800b3a8 <CheckPickEnc+0x70>)
 800b396:	2200      	movs	r2, #0
 800b398:	601a      	str	r2, [r3, #0]
			pick_stop;
 800b39a:	2100      	movs	r1, #0
 800b39c:	4808      	ldr	r0, [pc, #32]	; (800b3c0 <CheckPickEnc+0x88>)
 800b39e:	f7f5 fef4 	bl	800118a <WriteBDC>
		}
	}
}
 800b3a2:	bf00      	nop
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	20007bf0 	.word	0x20007bf0
 800b3ac:	20006a8c 	.word	0x20006a8c
 800b3b0:	200070a4 	.word	0x200070a4
 800b3b4:	200069c0 	.word	0x200069c0
 800b3b8:	20009c64 	.word	0x20009c64
 800b3bc:	20007810 	.word	0x20007810
 800b3c0:	20007bcc 	.word	0x20007bcc
 800b3c4:	20007778 	.word	0x20007778

0800b3c8 <CheckPitch>:

void CheckPitch()
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	af00      	add	r7, sp, #0
	if(set_pitch)
 800b3cc:	4b1b      	ldr	r3, [pc, #108]	; (800b43c <CheckPitch+0x74>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d02c      	beq.n	800b42e <CheckPitch+0x66>
	{
		switch(Robot_Pitch)
 800b3d4:	4b1a      	ldr	r3, [pc, #104]	; (800b440 <CheckPitch+0x78>)
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d002      	beq.n	800b3e2 <CheckPitch+0x1a>
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d013      	beq.n	800b408 <CheckPitch+0x40>
					set_pitch = 0;
				}
				break;
		}
	}
}
 800b3e0:	e02a      	b.n	800b438 <CheckPitch+0x70>
				if(In_Pitch70)
 800b3e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b3e6:	4817      	ldr	r0, [pc, #92]	; (800b444 <CheckPitch+0x7c>)
 800b3e8:	f007 fb1c 	bl	8012a24 <HAL_GPIO_ReadPin>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d11f      	bne.n	800b432 <CheckPitch+0x6a>
					pitch_stop;
 800b3f2:	2100      	movs	r1, #0
 800b3f4:	4814      	ldr	r0, [pc, #80]	; (800b448 <CheckPitch+0x80>)
 800b3f6:	f7f5 fec8 	bl	800118a <WriteBDC>
					Robot_Pitch = PITCH70;
 800b3fa:	4b11      	ldr	r3, [pc, #68]	; (800b440 <CheckPitch+0x78>)
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	701a      	strb	r2, [r3, #0]
					set_pitch = 0;
 800b400:	4b0e      	ldr	r3, [pc, #56]	; (800b43c <CheckPitch+0x74>)
 800b402:	2200      	movs	r2, #0
 800b404:	601a      	str	r2, [r3, #0]
				break;
 800b406:	e014      	b.n	800b432 <CheckPitch+0x6a>
				if(In_Pitch45)
 800b408:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b40c:	480d      	ldr	r0, [pc, #52]	; (800b444 <CheckPitch+0x7c>)
 800b40e:	f007 fb09 	bl	8012a24 <HAL_GPIO_ReadPin>
 800b412:	4603      	mov	r3, r0
 800b414:	2b00      	cmp	r3, #0
 800b416:	d10e      	bne.n	800b436 <CheckPitch+0x6e>
					pitch_stop;
 800b418:	2100      	movs	r1, #0
 800b41a:	480b      	ldr	r0, [pc, #44]	; (800b448 <CheckPitch+0x80>)
 800b41c:	f7f5 feb5 	bl	800118a <WriteBDC>
					Robot_Pitch = PITCH45;
 800b420:	4b07      	ldr	r3, [pc, #28]	; (800b440 <CheckPitch+0x78>)
 800b422:	2200      	movs	r2, #0
 800b424:	701a      	strb	r2, [r3, #0]
					set_pitch = 0;
 800b426:	4b05      	ldr	r3, [pc, #20]	; (800b43c <CheckPitch+0x74>)
 800b428:	2200      	movs	r2, #0
 800b42a:	601a      	str	r2, [r3, #0]
				break;
 800b42c:	e003      	b.n	800b436 <CheckPitch+0x6e>
	}
 800b42e:	bf00      	nop
 800b430:	e002      	b.n	800b438 <CheckPitch+0x70>
				break;
 800b432:	bf00      	nop
 800b434:	e000      	b.n	800b438 <CheckPitch+0x70>
				break;
 800b436:	bf00      	nop
}
 800b438:	bf00      	nop
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	20009ab4 	.word	0x20009ab4
 800b440:	20009aca 	.word	0x20009aca
 800b444:	40020400 	.word	0x40020400
 800b448:	20007108 	.word	0x20007108
 800b44c:	00000000 	.word	0x00000000

0800b450 <CheckPick>:

void CheckPick()
{
 800b450:	b5b0      	push	{r4, r5, r7, lr}
 800b452:	b09c      	sub	sp, #112	; 0x70
 800b454:	af00      	add	r7, sp, #0
	if(pick_left)
 800b456:	4ba6      	ldr	r3, [pc, #664]	; (800b6f0 <CheckPick+0x2a0>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	f000 80a4 	beq.w	800b5a8 <CheckPick+0x158>
	{
		// Stick to fence
		float stick_fence_point[1][7] = {{2.0, 0.0, -5, 0, 0, 0, 0}};
 800b460:	4ba4      	ldr	r3, [pc, #656]	; (800b6f4 <CheckPick+0x2a4>)
 800b462:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800b466:	461d      	mov	r5, r3
 800b468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b46a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b46c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b470:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(stick_fence_point, 1, &pp);
 800b474:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b478:	4a9f      	ldr	r2, [pc, #636]	; (800b6f8 <CheckPick+0x2a8>)
 800b47a:	2101      	movs	r1, #1
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7fa fa1e 	bl	80058be <PP_start>
		while(pp.pp_start)
 800b482:	e020      	b.n	800b4c6 <CheckPick+0x76>
		{
			if(ps4.button == SQUARE)
 800b484:	4b9d      	ldr	r3, [pc, #628]	; (800b6fc <CheckPick+0x2ac>)
 800b486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b48c:	d108      	bne.n	800b4a0 <CheckPick+0x50>
			{
				while(ps4.button == SQUARE);
 800b48e:	bf00      	nop
 800b490:	4b9a      	ldr	r3, [pc, #616]	; (800b6fc <CheckPick+0x2ac>)
 800b492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b498:	d0fa      	beq.n	800b490 <CheckPick+0x40>
				PP_stop(&pp);
 800b49a:	4897      	ldr	r0, [pc, #604]	; (800b6f8 <CheckPick+0x2a8>)
 800b49c:	f7fa fc49 	bl	8005d32 <PP_stop>
			}

			if(In_LS_Left_1 && In_LS_Left_2)
 800b4a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b4a4:	4896      	ldr	r0, [pc, #600]	; (800b700 <CheckPick+0x2b0>)
 800b4a6:	f007 fabd 	bl	8012a24 <HAL_GPIO_ReadPin>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d10a      	bne.n	800b4c6 <CheckPick+0x76>
 800b4b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b4b4:	4892      	ldr	r0, [pc, #584]	; (800b700 <CheckPick+0x2b0>)
 800b4b6:	f007 fab5 	bl	8012a24 <HAL_GPIO_ReadPin>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d102      	bne.n	800b4c6 <CheckPick+0x76>
				PP_stop(&pp);
 800b4c0:	488d      	ldr	r0, [pc, #564]	; (800b6f8 <CheckPick+0x2a8>)
 800b4c2:	f7fa fc36 	bl	8005d32 <PP_stop>
		while(pp.pp_start)
 800b4c6:	4b8c      	ldr	r3, [pc, #560]	; (800b6f8 <CheckPick+0x2a8>)
 800b4c8:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b4cc:	f003 0301 	and.w	r3, r3, #1
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d1d6      	bne.n	800b484 <CheckPick+0x34>
		}
		pick_left = 0;
 800b4d6:	4b86      	ldr	r3, [pc, #536]	; (800b6f0 <CheckPick+0x2a0>)
 800b4d8:	2200      	movs	r2, #0
 800b4da:	601a      	str	r2, [r3, #0]
		picked_left = 1;
 800b4dc:	4b89      	ldr	r3, [pc, #548]	; (800b704 <CheckPick+0x2b4>)
 800b4de:	2201      	movs	r2, #1
 800b4e0:	601a      	str	r2, [r3, #0]
		setPick(0);
 800b4e2:	2000      	movs	r0, #0
 800b4e4:	f7ff ff14 	bl	800b310 <setPick>
		float pick_left_point[1][7] = {{0.65, -10, 0, pp.real_z, 0, 0, 0}};
 800b4e8:	4b87      	ldr	r3, [pc, #540]	; (800b708 <CheckPick+0x2b8>)
 800b4ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800b4ec:	4b87      	ldr	r3, [pc, #540]	; (800b70c <CheckPick+0x2bc>)
 800b4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4f0:	f04f 0300 	mov.w	r3, #0
 800b4f4:	643b      	str	r3, [r7, #64]	; 0x40
 800b4f6:	4b80      	ldr	r3, [pc, #512]	; (800b6f8 <CheckPick+0x2a8>)
 800b4f8:	691b      	ldr	r3, [r3, #16]
 800b4fa:	647b      	str	r3, [r7, #68]	; 0x44
 800b4fc:	f04f 0300 	mov.w	r3, #0
 800b500:	64bb      	str	r3, [r7, #72]	; 0x48
 800b502:	f04f 0300 	mov.w	r3, #0
 800b506:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b508:	f04f 0300 	mov.w	r3, #0
 800b50c:	653b      	str	r3, [r7, #80]	; 0x50
		PP_start(pick_left_point, 1, &pp);
 800b50e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b512:	4a79      	ldr	r2, [pc, #484]	; (800b6f8 <CheckPick+0x2a8>)
 800b514:	2101      	movs	r1, #1
 800b516:	4618      	mov	r0, r3
 800b518:	f7fa f9d1 	bl	80058be <PP_start>
		while(pp.pp_start)
 800b51c:	e029      	b.n	800b572 <CheckPick+0x122>
		{
			if(ps4.button == SQUARE)
 800b51e:	4b77      	ldr	r3, [pc, #476]	; (800b6fc <CheckPick+0x2ac>)
 800b520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b526:	d10b      	bne.n	800b540 <CheckPick+0xf0>
			{
				while(ps4.button == SQUARE);
 800b528:	bf00      	nop
 800b52a:	4b74      	ldr	r3, [pc, #464]	; (800b6fc <CheckPick+0x2ac>)
 800b52c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b52e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b532:	d0fa      	beq.n	800b52a <CheckPick+0xda>
				PP_stop(&pp);
 800b534:	4870      	ldr	r0, [pc, #448]	; (800b6f8 <CheckPick+0x2a8>)
 800b536:	f7fa fbfc 	bl	8005d32 <PP_stop>
				picked_left = 0;
 800b53a:	4b72      	ldr	r3, [pc, #456]	; (800b704 <CheckPick+0x2b4>)
 800b53c:	2200      	movs	r2, #0
 800b53e:	601a      	str	r2, [r3, #0]
			}

			if(In_Pick && pp.real_x <= -4.7)
 800b540:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b544:	4872      	ldr	r0, [pc, #456]	; (800b710 <CheckPick+0x2c0>)
 800b546:	f007 fa6d 	bl	8012a24 <HAL_GPIO_ReadPin>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d110      	bne.n	800b572 <CheckPick+0x122>
 800b550:	4b69      	ldr	r3, [pc, #420]	; (800b6f8 <CheckPick+0x2a8>)
 800b552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b554:	4618      	mov	r0, r3
 800b556:	f7f4 fff7 	bl	8000548 <__aeabi_f2d>
 800b55a:	a363      	add	r3, pc, #396	; (adr r3, 800b6e8 <CheckPick+0x298>)
 800b55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b560:	f7f5 fac6 	bl	8000af0 <__aeabi_dcmple>
 800b564:	4603      	mov	r3, r0
 800b566:	2b00      	cmp	r3, #0
 800b568:	d100      	bne.n	800b56c <CheckPick+0x11c>
 800b56a:	e002      	b.n	800b572 <CheckPick+0x122>
				PP_stop(&pp);
 800b56c:	4862      	ldr	r0, [pc, #392]	; (800b6f8 <CheckPick+0x2a8>)
 800b56e:	f7fa fbe0 	bl	8005d32 <PP_stop>
		while(pp.pp_start)
 800b572:	4b61      	ldr	r3, [pc, #388]	; (800b6f8 <CheckPick+0x2a8>)
 800b574:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b578:	f003 0301 	and.w	r3, r3, #1
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d1cd      	bne.n	800b51e <CheckPick+0xce>
		}
		if(picked_left)
 800b582:	4b60      	ldr	r3, [pc, #384]	; (800b704 <CheckPick+0x2b4>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d00e      	beq.n	800b5a8 <CheckPick+0x158>
		{
			LoadRing();
 800b58a:	f000 f9e9 	bl	800b960 <LoadRing>
			lidar.pos_counter = CENTER_1;
 800b58e:	4b61      	ldr	r3, [pc, #388]	; (800b714 <CheckPick+0x2c4>)
 800b590:	2203      	movs	r2, #3
 800b592:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			osDelay(500);
 800b596:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b59a:	f00c f92a 	bl	80177f2 <osDelay>
			close_servo;
 800b59e:	f240 31a2 	movw	r1, #930	; 0x3a2
 800b5a2:	485d      	ldr	r0, [pc, #372]	; (800b718 <CheckPick+0x2c8>)
 800b5a4:	f7fe fbb8 	bl	8009d18 <ServoSetPulse>
		}
	}

	if(pick_right)
 800b5a8:	4b5c      	ldr	r3, [pc, #368]	; (800b71c <CheckPick+0x2cc>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f000 8097 	beq.w	800b6e0 <CheckPick+0x290>
	{
		// Stick to fence
		setPick(0);
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	f7ff feac 	bl	800b310 <setPick>
		open_servo
 800b5b8:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800b5bc:	4856      	ldr	r0, [pc, #344]	; (800b718 <CheckPick+0x2c8>)
 800b5be:	f7fe fbab 	bl	8009d18 <ServoSetPulse>
		pick_right = 0;
 800b5c2:	4b56      	ldr	r3, [pc, #344]	; (800b71c <CheckPick+0x2cc>)
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	601a      	str	r2, [r3, #0]
		float stick_fence_right[1][7] = {{2.0, 5, 0, pp.real_z, 0, 0, 0}};
 800b5c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b5cc:	61fb      	str	r3, [r7, #28]
 800b5ce:	4b54      	ldr	r3, [pc, #336]	; (800b720 <CheckPick+0x2d0>)
 800b5d0:	623b      	str	r3, [r7, #32]
 800b5d2:	f04f 0300 	mov.w	r3, #0
 800b5d6:	627b      	str	r3, [r7, #36]	; 0x24
 800b5d8:	4b47      	ldr	r3, [pc, #284]	; (800b6f8 <CheckPick+0x2a8>)
 800b5da:	691b      	ldr	r3, [r3, #16]
 800b5dc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5de:	f04f 0300 	mov.w	r3, #0
 800b5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5e4:	f04f 0300 	mov.w	r3, #0
 800b5e8:	633b      	str	r3, [r7, #48]	; 0x30
 800b5ea:	f04f 0300 	mov.w	r3, #0
 800b5ee:	637b      	str	r3, [r7, #52]	; 0x34
		PP_start(stick_fence_right, 1, &pp);
 800b5f0:	f107 031c 	add.w	r3, r7, #28
 800b5f4:	4a40      	ldr	r2, [pc, #256]	; (800b6f8 <CheckPick+0x2a8>)
 800b5f6:	2101      	movs	r1, #1
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f7fa f960 	bl	80058be <PP_start>
		while(pp.pp_start)
 800b5fe:	e020      	b.n	800b642 <CheckPick+0x1f2>
		{
			if(ps4.button == SQUARE)
 800b600:	4b3e      	ldr	r3, [pc, #248]	; (800b6fc <CheckPick+0x2ac>)
 800b602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b608:	d108      	bne.n	800b61c <CheckPick+0x1cc>
			{
				while(ps4.button == SQUARE);
 800b60a:	bf00      	nop
 800b60c:	4b3b      	ldr	r3, [pc, #236]	; (800b6fc <CheckPick+0x2ac>)
 800b60e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b614:	d0fa      	beq.n	800b60c <CheckPick+0x1bc>
				PP_stop(&pp);
 800b616:	4838      	ldr	r0, [pc, #224]	; (800b6f8 <CheckPick+0x2a8>)
 800b618:	f7fa fb8b 	bl	8005d32 <PP_stop>
			}

			if(In_LS_Left_1 && In_LS_Left_2)
 800b61c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b620:	4837      	ldr	r0, [pc, #220]	; (800b700 <CheckPick+0x2b0>)
 800b622:	f007 f9ff 	bl	8012a24 <HAL_GPIO_ReadPin>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d10a      	bne.n	800b642 <CheckPick+0x1f2>
 800b62c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b630:	4833      	ldr	r0, [pc, #204]	; (800b700 <CheckPick+0x2b0>)
 800b632:	f007 f9f7 	bl	8012a24 <HAL_GPIO_ReadPin>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d102      	bne.n	800b642 <CheckPick+0x1f2>
				PP_stop(&pp);
 800b63c:	482e      	ldr	r0, [pc, #184]	; (800b6f8 <CheckPick+0x2a8>)
 800b63e:	f7fa fb78 	bl	8005d32 <PP_stop>
		while(pp.pp_start)
 800b642:	4b2d      	ldr	r3, [pc, #180]	; (800b6f8 <CheckPick+0x2a8>)
 800b644:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b648:	f003 0301 	and.w	r3, r3, #1
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d1d6      	bne.n	800b600 <CheckPick+0x1b0>
		}

		picked_right = 1;
 800b652:	4b34      	ldr	r3, [pc, #208]	; (800b724 <CheckPick+0x2d4>)
 800b654:	2201      	movs	r2, #1
 800b656:	601a      	str	r2, [r3, #0]
		float pick_right_point[1][7] = {{0.65, 0, -10, pp.real_z, 0, 0, 0}};
 800b658:	4b2b      	ldr	r3, [pc, #172]	; (800b708 <CheckPick+0x2b8>)
 800b65a:	603b      	str	r3, [r7, #0]
 800b65c:	f04f 0300 	mov.w	r3, #0
 800b660:	607b      	str	r3, [r7, #4]
 800b662:	4b2a      	ldr	r3, [pc, #168]	; (800b70c <CheckPick+0x2bc>)
 800b664:	60bb      	str	r3, [r7, #8]
 800b666:	4b24      	ldr	r3, [pc, #144]	; (800b6f8 <CheckPick+0x2a8>)
 800b668:	691b      	ldr	r3, [r3, #16]
 800b66a:	60fb      	str	r3, [r7, #12]
 800b66c:	f04f 0300 	mov.w	r3, #0
 800b670:	613b      	str	r3, [r7, #16]
 800b672:	f04f 0300 	mov.w	r3, #0
 800b676:	617b      	str	r3, [r7, #20]
 800b678:	f04f 0300 	mov.w	r3, #0
 800b67c:	61bb      	str	r3, [r7, #24]
		PP_start(pick_right_point, 1, &pp);
 800b67e:	463b      	mov	r3, r7
 800b680:	4a1d      	ldr	r2, [pc, #116]	; (800b6f8 <CheckPick+0x2a8>)
 800b682:	2101      	movs	r1, #1
 800b684:	4618      	mov	r0, r3
 800b686:	f7fa f91a 	bl	80058be <PP_start>
		while(pp.pp_start)
 800b68a:	e01b      	b.n	800b6c4 <CheckPick+0x274>
		{
			if(ps4.button == SQUARE)
 800b68c:	4b1b      	ldr	r3, [pc, #108]	; (800b6fc <CheckPick+0x2ac>)
 800b68e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b694:	d10b      	bne.n	800b6ae <CheckPick+0x25e>
			{
				while(ps4.button == SQUARE);
 800b696:	bf00      	nop
 800b698:	4b18      	ldr	r3, [pc, #96]	; (800b6fc <CheckPick+0x2ac>)
 800b69a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b69c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6a0:	d0fa      	beq.n	800b698 <CheckPick+0x248>
				PP_stop(&pp);
 800b6a2:	4815      	ldr	r0, [pc, #84]	; (800b6f8 <CheckPick+0x2a8>)
 800b6a4:	f7fa fb45 	bl	8005d32 <PP_stop>
				picked_right = 0;
 800b6a8:	4b1e      	ldr	r3, [pc, #120]	; (800b724 <CheckPick+0x2d4>)
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	601a      	str	r2, [r3, #0]
			}

			if(In_Pick)
 800b6ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b6b2:	4817      	ldr	r0, [pc, #92]	; (800b710 <CheckPick+0x2c0>)
 800b6b4:	f007 f9b6 	bl	8012a24 <HAL_GPIO_ReadPin>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d102      	bne.n	800b6c4 <CheckPick+0x274>
				PP_stop(&pp);
 800b6be:	480e      	ldr	r0, [pc, #56]	; (800b6f8 <CheckPick+0x2a8>)
 800b6c0:	f7fa fb37 	bl	8005d32 <PP_stop>
		while(pp.pp_start)
 800b6c4:	4b0c      	ldr	r3, [pc, #48]	; (800b6f8 <CheckPick+0x2a8>)
 800b6c6:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b6ca:	f003 0301 	and.w	r3, r3, #1
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d1db      	bne.n	800b68c <CheckPick+0x23c>
		}

		if(picked_right)
 800b6d4:	4b13      	ldr	r3, [pc, #76]	; (800b724 <CheckPick+0x2d4>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d001      	beq.n	800b6e0 <CheckPick+0x290>
			LoadRing();
 800b6dc:	f000 f940 	bl	800b960 <LoadRing>
	}
}
 800b6e0:	bf00      	nop
 800b6e2:	3770      	adds	r7, #112	; 0x70
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bdb0      	pop	{r4, r5, r7, pc}
 800b6e8:	cccccccd 	.word	0xcccccccd
 800b6ec:	c012cccc 	.word	0xc012cccc
 800b6f0:	20007d1c 	.word	0x20007d1c
 800b6f4:	080204f0 	.word	0x080204f0
 800b6f8:	20007188 	.word	0x20007188
 800b6fc:	2000a3f0 	.word	0x2000a3f0
 800b700:	40020c00 	.word	0x40020c00
 800b704:	20009c50 	.word	0x20009c50
 800b708:	3f266666 	.word	0x3f266666
 800b70c:	c1200000 	.word	0xc1200000
 800b710:	40021000 	.word	0x40021000
 800b714:	20009498 	.word	0x20009498
 800b718:	20007d28 	.word	0x20007d28
 800b71c:	2000a9f4 	.word	0x2000a9f4
 800b720:	40a00000 	.word	0x40a00000
 800b724:	200076d8 	.word	0x200076d8

0800b728 <CheckShoot>:

void CheckShoot()
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	af00      	add	r7, sp, #0
	if(In_ShotReady)
 800b72c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b730:	483e      	ldr	r0, [pc, #248]	; (800b82c <CheckShoot+0x104>)
 800b732:	f007 f977 	bl	8012a24 <HAL_GPIO_ReadPin>
 800b736:	4603      	mov	r3, r0
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d105      	bne.n	800b748 <CheckShoot+0x20>
		led2 = 1;
 800b73c:	4a3c      	ldr	r2, [pc, #240]	; (800b830 <CheckShoot+0x108>)
 800b73e:	7853      	ldrb	r3, [r2, #1]
 800b740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b744:	7053      	strb	r3, [r2, #1]
 800b746:	e004      	b.n	800b752 <CheckShoot+0x2a>
	else
		led2 = 0;
 800b748:	4a39      	ldr	r2, [pc, #228]	; (800b830 <CheckShoot+0x108>)
 800b74a:	7853      	ldrb	r3, [r2, #1]
 800b74c:	f36f 1386 	bfc	r3, #6, #1
 800b750:	7053      	strb	r3, [r2, #1]

	if(In_ShotDone)
 800b752:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b756:	4835      	ldr	r0, [pc, #212]	; (800b82c <CheckShoot+0x104>)
 800b758:	f007 f964 	bl	8012a24 <HAL_GPIO_ReadPin>
 800b75c:	4603      	mov	r3, r0
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d105      	bne.n	800b76e <CheckShoot+0x46>
		led3 = 1;
 800b762:	4a33      	ldr	r2, [pc, #204]	; (800b830 <CheckShoot+0x108>)
 800b764:	7853      	ldrb	r3, [r2, #1]
 800b766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b76a:	7053      	strb	r3, [r2, #1]
 800b76c:	e004      	b.n	800b778 <CheckShoot+0x50>
	else
		led3 = 0;
 800b76e:	4a30      	ldr	r2, [pc, #192]	; (800b830 <CheckShoot+0x108>)
 800b770:	7853      	ldrb	r3, [r2, #1]
 800b772:	f36f 13c7 	bfc	r3, #7, #1
 800b776:	7053      	strb	r3, [r2, #1]

	if(shoot_start && In_ShotDone)
 800b778:	4b2e      	ldr	r3, [pc, #184]	; (800b834 <CheckShoot+0x10c>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d013      	beq.n	800b7a8 <CheckShoot+0x80>
 800b780:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b784:	4829      	ldr	r0, [pc, #164]	; (800b82c <CheckShoot+0x104>)
 800b786:	f007 f94d 	bl	8012a24 <HAL_GPIO_ReadPin>
 800b78a:	4603      	mov	r3, r0
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d10b      	bne.n	800b7a8 <CheckShoot+0x80>
	{
		shoot_done = 1;
 800b790:	4b29      	ldr	r3, [pc, #164]	; (800b838 <CheckShoot+0x110>)
 800b792:	2201      	movs	r2, #1
 800b794:	601a      	str	r2, [r3, #0]
		shoot_start = 0;
 800b796:	4b27      	ldr	r3, [pc, #156]	; (800b834 <CheckShoot+0x10c>)
 800b798:	2200      	movs	r2, #0
 800b79a:	601a      	str	r2, [r3, #0]
		push_return;
 800b79c:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800b7a0:	4826      	ldr	r0, [pc, #152]	; (800b83c <CheckShoot+0x114>)
 800b7a2:	f7f5 fcf2 	bl	800118a <WriteBDC>
 800b7a6:	e00f      	b.n	800b7c8 <CheckShoot+0xa0>
	}
	else if(In_ShotDone)
 800b7a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b7ac:	481f      	ldr	r0, [pc, #124]	; (800b82c <CheckShoot+0x104>)
 800b7ae:	f007 f939 	bl	8012a24 <HAL_GPIO_ReadPin>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d107      	bne.n	800b7c8 <CheckShoot+0xa0>
	{
		push_return;
 800b7b8:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800b7bc:	481f      	ldr	r0, [pc, #124]	; (800b83c <CheckShoot+0x114>)
 800b7be:	f7f5 fce4 	bl	800118a <WriteBDC>
		shoot_done = 1;
 800b7c2:	4b1d      	ldr	r3, [pc, #116]	; (800b838 <CheckShoot+0x110>)
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	601a      	str	r2, [r3, #0]
	}

	// Done Shooting
	if(shoot_done && In_ShotReady && wait_load)
 800b7c8:	4b1b      	ldr	r3, [pc, #108]	; (800b838 <CheckShoot+0x110>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d018      	beq.n	800b802 <CheckShoot+0xda>
 800b7d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b7d4:	4815      	ldr	r0, [pc, #84]	; (800b82c <CheckShoot+0x104>)
 800b7d6:	f007 f925 	bl	8012a24 <HAL_GPIO_ReadPin>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d110      	bne.n	800b802 <CheckShoot+0xda>
 800b7e0:	4b17      	ldr	r3, [pc, #92]	; (800b840 <CheckShoot+0x118>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d00c      	beq.n	800b802 <CheckShoot+0xda>
	{
		wait_load = 0;
 800b7e8:	4b15      	ldr	r3, [pc, #84]	; (800b840 <CheckShoot+0x118>)
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	601a      	str	r2, [r3, #0]
		shoot_done = 0;
 800b7ee:	4b12      	ldr	r3, [pc, #72]	; (800b838 <CheckShoot+0x110>)
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	601a      	str	r2, [r3, #0]
		push_stop;
 800b7f4:	2100      	movs	r1, #0
 800b7f6:	4811      	ldr	r0, [pc, #68]	; (800b83c <CheckShoot+0x114>)
 800b7f8:	f7f5 fcc7 	bl	800118a <WriteBDC>
		AutoLoadRing();
 800b7fc:	f000 f8d4 	bl	800b9a8 <AutoLoadRing>
	else if(shoot_done && In_ShotReady)
	{
		shoot_done = 0;
		push_stop;
	}
}
 800b800:	e012      	b.n	800b828 <CheckShoot+0x100>
	else if(shoot_done && In_ShotReady)
 800b802:	4b0d      	ldr	r3, [pc, #52]	; (800b838 <CheckShoot+0x110>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d00e      	beq.n	800b828 <CheckShoot+0x100>
 800b80a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b80e:	4807      	ldr	r0, [pc, #28]	; (800b82c <CheckShoot+0x104>)
 800b810:	f007 f908 	bl	8012a24 <HAL_GPIO_ReadPin>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d106      	bne.n	800b828 <CheckShoot+0x100>
		shoot_done = 0;
 800b81a:	4b07      	ldr	r3, [pc, #28]	; (800b838 <CheckShoot+0x110>)
 800b81c:	2200      	movs	r2, #0
 800b81e:	601a      	str	r2, [r3, #0]
		push_stop;
 800b820:	2100      	movs	r1, #0
 800b822:	4806      	ldr	r0, [pc, #24]	; (800b83c <CheckShoot+0x114>)
 800b824:	f7f5 fcb1 	bl	800118a <WriteBDC>
}
 800b828:	bf00      	nop
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	40021000 	.word	0x40021000
 800b830:	40020814 	.word	0x40020814
 800b834:	20009734 	.word	0x20009734
 800b838:	200093e4 	.word	0x200093e4
 800b83c:	20009acc 	.word	0x20009acc
 800b840:	20007944 	.word	0x20007944

0800b844 <CheckLoad>:

void CheckLoad()
{
 800b844:	b580      	push	{r7, lr}
 800b846:	af00      	add	r7, sp, #0
//	else if(load_start)
//	{
//		pick_up;
//	}

	if(load_start || reload)
 800b848:	4b37      	ldr	r3, [pc, #220]	; (800b928 <CheckLoad+0xe4>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d103      	bne.n	800b858 <CheckLoad+0x14>
 800b850:	4b36      	ldr	r3, [pc, #216]	; (800b92c <CheckLoad+0xe8>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d027      	beq.n	800b8a8 <CheckLoad+0x64>
	{
		if(pick_enc >= 8000 && !load_stop_once)
 800b858:	4b35      	ldr	r3, [pc, #212]	; (800b930 <CheckLoad+0xec>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800b860:	db12      	blt.n	800b888 <CheckLoad+0x44>
 800b862:	4b34      	ldr	r3, [pc, #208]	; (800b934 <CheckLoad+0xf0>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d10e      	bne.n	800b888 <CheckLoad+0x44>
		{
			pick_stop;
 800b86a:	2100      	movs	r1, #0
 800b86c:	4832      	ldr	r0, [pc, #200]	; (800b938 <CheckLoad+0xf4>)
 800b86e:	f7f5 fc8c 	bl	800118a <WriteBDC>
			osDelay(200);
 800b872:	20c8      	movs	r0, #200	; 0xc8
 800b874:	f00b ffbd 	bl	80177f2 <osDelay>
			pick_manual(5000);
 800b878:	f241 3188 	movw	r1, #5000	; 0x1388
 800b87c:	482e      	ldr	r0, [pc, #184]	; (800b938 <CheckLoad+0xf4>)
 800b87e:	f7f5 fc84 	bl	800118a <WriteBDC>
			load_stop_once = 1;
 800b882:	4b2c      	ldr	r3, [pc, #176]	; (800b934 <CheckLoad+0xf0>)
 800b884:	2201      	movs	r2, #1
 800b886:	601a      	str	r2, [r3, #0]
		}
		if(pick_enc >= 17000)
 800b888:	4b29      	ldr	r3, [pc, #164]	; (800b930 <CheckLoad+0xec>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f244 2267 	movw	r2, #16999	; 0x4267
 800b890:	4293      	cmp	r3, r2
 800b892:	dd09      	ble.n	800b8a8 <CheckLoad+0x64>
		{
			load_start = 0;
 800b894:	4b24      	ldr	r3, [pc, #144]	; (800b928 <CheckLoad+0xe4>)
 800b896:	2200      	movs	r2, #0
 800b898:	601a      	str	r2, [r3, #0]
			reload = 0;
 800b89a:	4b24      	ldr	r3, [pc, #144]	; (800b92c <CheckLoad+0xe8>)
 800b89c:	2200      	movs	r2, #0
 800b89e:	601a      	str	r2, [r3, #0]
			pick_stop;
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	4825      	ldr	r0, [pc, #148]	; (800b938 <CheckLoad+0xf4>)
 800b8a4:	f7f5 fc71 	bl	800118a <WriteBDC>
		}
	}

	if(load_start && In_Load && pick_enc >= 9500)
 800b8a8:	4b1f      	ldr	r3, [pc, #124]	; (800b928 <CheckLoad+0xe4>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d016      	beq.n	800b8de <CheckLoad+0x9a>
 800b8b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b8b4:	4821      	ldr	r0, [pc, #132]	; (800b93c <CheckLoad+0xf8>)
 800b8b6:	f007 f8b5 	bl	8012a24 <HAL_GPIO_ReadPin>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d10e      	bne.n	800b8de <CheckLoad+0x9a>
 800b8c0:	4b1b      	ldr	r3, [pc, #108]	; (800b930 <CheckLoad+0xec>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f242 521b 	movw	r2, #9499	; 0x251b
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	dd08      	ble.n	800b8de <CheckLoad+0x9a>
	{
		load_start = 0;
 800b8cc:	4b16      	ldr	r3, [pc, #88]	; (800b928 <CheckLoad+0xe4>)
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	601a      	str	r2, [r3, #0]
		pick_stop;
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	4818      	ldr	r0, [pc, #96]	; (800b938 <CheckLoad+0xf4>)
 800b8d6:	f7f5 fc58 	bl	800118a <WriteBDC>
		AutoLoadRing();
 800b8da:	f000 f865 	bl	800b9a8 <AutoLoadRing>
	}

	if(reload && In_Load)
 800b8de:	4b13      	ldr	r3, [pc, #76]	; (800b92c <CheckLoad+0xe8>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d00e      	beq.n	800b904 <CheckLoad+0xc0>
 800b8e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b8ea:	4814      	ldr	r0, [pc, #80]	; (800b93c <CheckLoad+0xf8>)
 800b8ec:	f007 f89a 	bl	8012a24 <HAL_GPIO_ReadPin>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d106      	bne.n	800b904 <CheckLoad+0xc0>
	{
		reload = 0;
 800b8f6:	4b0d      	ldr	r3, [pc, #52]	; (800b92c <CheckLoad+0xe8>)
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	601a      	str	r2, [r3, #0]
		pick_stop;
 800b8fc:	2100      	movs	r1, #0
 800b8fe:	480e      	ldr	r0, [pc, #56]	; (800b938 <CheckLoad+0xf4>)
 800b900:	f7f5 fc43 	bl	800118a <WriteBDC>
	}

	if(loaded >= 7)
 800b904:	4b0e      	ldr	r3, [pc, #56]	; (800b940 <CheckLoad+0xfc>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	2b06      	cmp	r3, #6
 800b90a:	dd04      	ble.n	800b916 <CheckLoad+0xd2>
	{
		adjust_servo;
 800b90c:	f240 31ca 	movw	r1, #970	; 0x3ca
 800b910:	480c      	ldr	r0, [pc, #48]	; (800b944 <CheckLoad+0x100>)
 800b912:	f7fe fa01 	bl	8009d18 <ServoSetPulse>
	}

	if(loaded >= 10)
 800b916:	4b0a      	ldr	r3, [pc, #40]	; (800b940 <CheckLoad+0xfc>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2b09      	cmp	r3, #9
 800b91c:	dd02      	ble.n	800b924 <CheckLoad+0xe0>
		loaded = 0;
 800b91e:	4b08      	ldr	r3, [pc, #32]	; (800b940 <CheckLoad+0xfc>)
 800b920:	2200      	movs	r2, #0
 800b922:	601a      	str	r2, [r3, #0]
}
 800b924:	bf00      	nop
 800b926:	bd80      	pop	{r7, pc}
 800b928:	20007808 	.word	0x20007808
 800b92c:	20007c0c 	.word	0x20007c0c
 800b930:	200070a4 	.word	0x200070a4
 800b934:	20009dcc 	.word	0x20009dcc
 800b938:	20007bcc 	.word	0x20007bcc
 800b93c:	40021000 	.word	0x40021000
 800b940:	20009890 	.word	0x20009890
 800b944:	20007d28 	.word	0x20007d28

0800b948 <Checking>:

void Checking()
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	af00      	add	r7, sp, #0
	CheckShoot();
 800b94c:	f7ff feec 	bl	800b728 <CheckShoot>
	CheckLoad();
 800b950:	f7ff ff78 	bl	800b844 <CheckLoad>
	CheckPick();
 800b954:	f7ff fd7c 	bl	800b450 <CheckPick>
	CheckPitch();
 800b958:	f7ff fd36 	bl	800b3c8 <CheckPitch>
}
 800b95c:	bf00      	nop
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <LoadRing>:

void LoadRing(void)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	af00      	add	r7, sp, #0
	load_start = 1;
 800b964:	4b06      	ldr	r3, [pc, #24]	; (800b980 <LoadRing+0x20>)
 800b966:	2201      	movs	r2, #1
 800b968:	601a      	str	r2, [r3, #0]
	load_stop_once = 0;
 800b96a:	4b06      	ldr	r3, [pc, #24]	; (800b984 <LoadRing+0x24>)
 800b96c:	2200      	movs	r2, #0
 800b96e:	601a      	str	r2, [r3, #0]
	pick_up;
 800b970:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800b974:	4804      	ldr	r0, [pc, #16]	; (800b988 <LoadRing+0x28>)
 800b976:	f7f5 fc08 	bl	800118a <WriteBDC>
}
 800b97a:	bf00      	nop
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	20007808 	.word	0x20007808
 800b984:	20009dcc 	.word	0x20009dcc
 800b988:	20007bcc 	.word	0x20007bcc

0800b98c <StopAutoPP>:

void StopAutoPP(void)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	af00      	add	r7, sp, #0
	PP_stop(&pp);
 800b990:	4803      	ldr	r0, [pc, #12]	; (800b9a0 <StopAutoPP+0x14>)
 800b992:	f7fa f9ce 	bl	8005d32 <PP_stop>
	RNSStop(&rns);
 800b996:	4803      	ldr	r0, [pc, #12]	; (800b9a4 <StopAutoPP+0x18>)
 800b998:	f7fd fd2e 	bl	80093f8 <RNSStop>
}
 800b99c:	bf00      	nop
 800b99e:	bd80      	pop	{r7, pc}
 800b9a0:	20007188 	.word	0x20007188
 800b9a4:	20009370 	.word	0x20009370

0800b9a8 <AutoLoadRing>:

void AutoLoadRing(void)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	af00      	add	r7, sp, #0
	cylinder_load;
 800b9ac:	4a10      	ldr	r2, [pc, #64]	; (800b9f0 <AutoLoadRing+0x48>)
 800b9ae:	7f13      	ldrb	r3, [r2, #28]
 800b9b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9b4:	7713      	strb	r3, [r2, #28]
	osDelay(500);
 800b9b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b9ba:	f00b ff1a 	bl	80177f2 <osDelay>
	cylinder_retract;
 800b9be:	4a0c      	ldr	r2, [pc, #48]	; (800b9f0 <AutoLoadRing+0x48>)
 800b9c0:	7f13      	ldrb	r3, [r2, #28]
 800b9c2:	f36f 1386 	bfc	r3, #6, #1
 800b9c6:	7713      	strb	r3, [r2, #28]
	osDelay(500);
 800b9c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b9cc:	f00b ff11 	bl	80177f2 <osDelay>
	loaded++;
 800b9d0:	4b08      	ldr	r3, [pc, #32]	; (800b9f4 <AutoLoadRing+0x4c>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	4a07      	ldr	r2, [pc, #28]	; (800b9f4 <AutoLoadRing+0x4c>)
 800b9d8:	6013      	str	r3, [r2, #0]
	reload = 1;
 800b9da:	4b07      	ldr	r3, [pc, #28]	; (800b9f8 <AutoLoadRing+0x50>)
 800b9dc:	2201      	movs	r2, #1
 800b9de:	601a      	str	r2, [r3, #0]
	pick_manual(5000);
 800b9e0:	f241 3188 	movw	r1, #5000	; 0x1388
 800b9e4:	4805      	ldr	r0, [pc, #20]	; (800b9fc <AutoLoadRing+0x54>)
 800b9e6:	f7f5 fbd0 	bl	800118a <WriteBDC>
}
 800b9ea:	bf00      	nop
 800b9ec:	bd80      	pop	{r7, pc}
 800b9ee:	bf00      	nop
 800b9f0:	200099f4 	.word	0x200099f4
 800b9f4:	20009890 	.word	0x20009890
 800b9f8:	20007c0c 	.word	0x20007c0c
 800b9fc:	20007bcc 	.word	0x20007bcc

0800ba00 <ResetCoordinate>:

void ResetCoordinate(void)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	af00      	add	r7, sp, #0
	RNSSet(&rns, RNS_PP_Reset);
 800ba04:	2117      	movs	r1, #23
 800ba06:	4804      	ldr	r0, [pc, #16]	; (800ba18 <ResetCoordinate+0x18>)
 800ba08:	f7fd fe14 	bl	8009634 <RNSSet>
	PP_reset(&pp);
 800ba0c:	4803      	ldr	r0, [pc, #12]	; (800ba1c <ResetCoordinate+0x1c>)
 800ba0e:	f7fa f9b1 	bl	8005d74 <PP_reset>
}
 800ba12:	bf00      	nop
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	20009370 	.word	0x20009370
 800ba1c:	20007188 	.word	0x20007188

0800ba20 <ResetPickEnc>:

void ResetPickEnc(void)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	af00      	add	r7, sp, #0
	QEIReset(QEI1);
 800ba24:	2001      	movs	r0, #1
 800ba26:	f7f6 f8d5 	bl	8001bd4 <QEIReset>
	pick_enc = 0;
 800ba2a:	4b02      	ldr	r3, [pc, #8]	; (800ba34 <ResetPickEnc+0x14>)
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	601a      	str	r2, [r3, #0]
}
 800ba30:	bf00      	nop
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	200070a4 	.word	0x200070a4

0800ba38 <enq>:

void enq(void) {
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	af00      	add	r7, sp, #0
//	xpos = rns.enq.enq_buffer[0].data;
//	ypos = rns.enq.enq_buffer[1].data;
//	z = rns.enq.enq_buffer[2].data;
//	sprintf((char*)debug, "X: %.2f Y: %.2f Yaw: %.2f\n", xpos, ypos, z);

	RNSEnquire(RNS_XYZ_RAW, &rns);
 800ba3c:	4908      	ldr	r1, [pc, #32]	; (800ba60 <enq+0x28>)
 800ba3e:	2061      	movs	r0, #97	; 0x61
 800ba40:	f7fd ffb2 	bl	80099a8 <RNSEnquire>
	fXPos = rns.enq.enq_buffer[0].data;
 800ba44:	4b06      	ldr	r3, [pc, #24]	; (800ba60 <enq+0x28>)
 800ba46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba48:	4a06      	ldr	r2, [pc, #24]	; (800ba64 <enq+0x2c>)
 800ba4a:	6013      	str	r3, [r2, #0]
	fYPos = rns.enq.enq_buffer[1].data;
 800ba4c:	4b04      	ldr	r3, [pc, #16]	; (800ba60 <enq+0x28>)
 800ba4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba50:	4a05      	ldr	r2, [pc, #20]	; (800ba68 <enq+0x30>)
 800ba52:	6013      	str	r3, [r2, #0]
	fyaw = rns.enq.enq_buffer[2].data;
 800ba54:	4b02      	ldr	r3, [pc, #8]	; (800ba60 <enq+0x28>)
 800ba56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba58:	4a04      	ldr	r2, [pc, #16]	; (800ba6c <enq+0x34>)
 800ba5a:	6013      	str	r3, [r2, #0]

//	sprintf((char*)debug, "A: %.2f B: %.2f C: %.2f D: %.2f X: %.2f Y: %.2f Z: %.2f Servo: %ld\n", a, b, c, d, fXPos, fYPos, fyaw, servo_ring.currentPulse);
//	sprintf((char*)debug, "X: %.2f Y: %.2f Yaw: %.2f\n", fXPos, fYPos, fyaw);
}
 800ba5c:	bf00      	nop
 800ba5e:	bd80      	pop	{r7, pc}
 800ba60:	20009370 	.word	0x20009370
 800ba64:	20009df4 	.word	0x20009df4
 800ba68:	20009c5c 	.word	0x20009c5c
 800ba6c:	20009dc0 	.word	0x20009dc0

0800ba70 <tune>:

void tune(void)
{
 800ba70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ba74:	b084      	sub	sp, #16
 800ba76:	af04      	add	r7, sp, #16
	if(ps4.button == UP)
 800ba78:	4ba7      	ldr	r3, [pc, #668]	; (800bd18 <tune+0x2a8>)
 800ba7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba7c:	2b10      	cmp	r3, #16
 800ba7e:	d10d      	bne.n	800ba9c <tune+0x2c>
	{
		while(ps4.button == UP);
 800ba80:	bf00      	nop
 800ba82:	4ba5      	ldr	r3, [pc, #660]	; (800bd18 <tune+0x2a8>)
 800ba84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba86:	2b10      	cmp	r3, #16
 800ba88:	d0fb      	beq.n	800ba82 <tune+0x12>
		tune_p = 1;
 800ba8a:	4ba4      	ldr	r3, [pc, #656]	; (800bd1c <tune+0x2ac>)
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	601a      	str	r2, [r3, #0]
		tune_i = 0;
 800ba90:	4ba3      	ldr	r3, [pc, #652]	; (800bd20 <tune+0x2b0>)
 800ba92:	2200      	movs	r2, #0
 800ba94:	601a      	str	r2, [r3, #0]
		tune_d = 0;
 800ba96:	4ba3      	ldr	r3, [pc, #652]	; (800bd24 <tune+0x2b4>)
 800ba98:	2200      	movs	r2, #0
 800ba9a:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == DOWN)
 800ba9c:	4b9e      	ldr	r3, [pc, #632]	; (800bd18 <tune+0x2a8>)
 800ba9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800baa0:	2b40      	cmp	r3, #64	; 0x40
 800baa2:	d10d      	bne.n	800bac0 <tune+0x50>
	{
		while(ps4.button == DOWN);
 800baa4:	bf00      	nop
 800baa6:	4b9c      	ldr	r3, [pc, #624]	; (800bd18 <tune+0x2a8>)
 800baa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800baaa:	2b40      	cmp	r3, #64	; 0x40
 800baac:	d0fb      	beq.n	800baa6 <tune+0x36>
		tune_p = 0;
 800baae:	4b9b      	ldr	r3, [pc, #620]	; (800bd1c <tune+0x2ac>)
 800bab0:	2200      	movs	r2, #0
 800bab2:	601a      	str	r2, [r3, #0]
		tune_i = 1;
 800bab4:	4b9a      	ldr	r3, [pc, #616]	; (800bd20 <tune+0x2b0>)
 800bab6:	2201      	movs	r2, #1
 800bab8:	601a      	str	r2, [r3, #0]
		tune_d = 0;
 800baba:	4b9a      	ldr	r3, [pc, #616]	; (800bd24 <tune+0x2b4>)
 800babc:	2200      	movs	r2, #0
 800babe:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == LEFT)
 800bac0:	4b95      	ldr	r3, [pc, #596]	; (800bd18 <tune+0x2a8>)
 800bac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bac4:	2b80      	cmp	r3, #128	; 0x80
 800bac6:	d10d      	bne.n	800bae4 <tune+0x74>
	{
		while(ps4.button == LEFT);
 800bac8:	bf00      	nop
 800baca:	4b93      	ldr	r3, [pc, #588]	; (800bd18 <tune+0x2a8>)
 800bacc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bace:	2b80      	cmp	r3, #128	; 0x80
 800bad0:	d0fb      	beq.n	800baca <tune+0x5a>
		tune_p = 0;
 800bad2:	4b92      	ldr	r3, [pc, #584]	; (800bd1c <tune+0x2ac>)
 800bad4:	2200      	movs	r2, #0
 800bad6:	601a      	str	r2, [r3, #0]
		tune_i = 0;
 800bad8:	4b91      	ldr	r3, [pc, #580]	; (800bd20 <tune+0x2b0>)
 800bada:	2200      	movs	r2, #0
 800badc:	601a      	str	r2, [r3, #0]
		tune_d = 1;
 800bade:	4b91      	ldr	r3, [pc, #580]	; (800bd24 <tune+0x2b4>)
 800bae0:	2201      	movs	r2, #1
 800bae2:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == RIGHT)
 800bae4:	4b8c      	ldr	r3, [pc, #560]	; (800bd18 <tune+0x2a8>)
 800bae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bae8:	2b20      	cmp	r3, #32
 800baea:	d110      	bne.n	800bb0e <tune+0x9e>
	{
		while(ps4.button == RIGHT);
 800baec:	bf00      	nop
 800baee:	4b8a      	ldr	r3, [pc, #552]	; (800bd18 <tune+0x2a8>)
 800baf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800baf2:	2b20      	cmp	r3, #32
 800baf4:	d0fb      	beq.n	800baee <tune+0x7e>
		wheel++;
 800baf6:	4b8c      	ldr	r3, [pc, #560]	; (800bd28 <tune+0x2b8>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	3301      	adds	r3, #1
 800bafc:	4a8a      	ldr	r2, [pc, #552]	; (800bd28 <tune+0x2b8>)
 800bafe:	6013      	str	r3, [r2, #0]
		if(wheel > 5)
 800bb00:	4b89      	ldr	r3, [pc, #548]	; (800bd28 <tune+0x2b8>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	2b05      	cmp	r3, #5
 800bb06:	dd02      	ble.n	800bb0e <tune+0x9e>
			wheel = 1;
 800bb08:	4b87      	ldr	r3, [pc, #540]	; (800bd28 <tune+0x2b8>)
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	601a      	str	r2, [r3, #0]
	}

	if(tune_p)
 800bb0e:	4b83      	ldr	r3, [pc, #524]	; (800bd1c <tune+0x2ac>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	f000 809e 	beq.w	800bc54 <tune+0x1e4>
	{
		switch(wheel)
 800bb18:	4b83      	ldr	r3, [pc, #524]	; (800bd28 <tune+0x2b8>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	3b01      	subs	r3, #1
 800bb1e:	2b03      	cmp	r3, #3
 800bb20:	f200 81f4 	bhi.w	800bf0c <tune+0x49c>
 800bb24:	a201      	add	r2, pc, #4	; (adr r2, 800bb2c <tune+0xbc>)
 800bb26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb2a:	bf00      	nop
 800bb2c:	0800bb3d 	.word	0x0800bb3d
 800bb30:	0800bb83 	.word	0x0800bb83
 800bb34:	0800bbc9 	.word	0x0800bbc9
 800bb38:	0800bc0f 	.word	0x0800bc0f
		{
		case 1:
			AP += ps4.joyR_y * 0.0001;
 800bb3c:	4b76      	ldr	r3, [pc, #472]	; (800bd18 <tune+0x2a8>)
 800bb3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb40:	4618      	mov	r0, r3
 800bb42:	f7f4 fd01 	bl	8000548 <__aeabi_f2d>
 800bb46:	a372      	add	r3, pc, #456	; (adr r3, 800bd10 <tune+0x2a0>)
 800bb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4c:	f7f4 fd54 	bl	80005f8 <__aeabi_dmul>
 800bb50:	4602      	mov	r2, r0
 800bb52:	460b      	mov	r3, r1
 800bb54:	4614      	mov	r4, r2
 800bb56:	461d      	mov	r5, r3
 800bb58:	4b74      	ldr	r3, [pc, #464]	; (800bd2c <tune+0x2bc>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7f4 fcf3 	bl	8000548 <__aeabi_f2d>
 800bb62:	4602      	mov	r2, r0
 800bb64:	460b      	mov	r3, r1
 800bb66:	4620      	mov	r0, r4
 800bb68:	4629      	mov	r1, r5
 800bb6a:	f7f4 fb8f 	bl	800028c <__adddf3>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	460b      	mov	r3, r1
 800bb72:	4610      	mov	r0, r2
 800bb74:	4619      	mov	r1, r3
 800bb76:	f7f5 f837 	bl	8000be8 <__aeabi_d2f>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	4a6b      	ldr	r2, [pc, #428]	; (800bd2c <tune+0x2bc>)
 800bb7e:	6013      	str	r3, [r2, #0]
			break;
 800bb80:	e1c4      	b.n	800bf0c <tune+0x49c>
		case 2:
			BP += ps4.joyR_y * 0.0001;
 800bb82:	4b65      	ldr	r3, [pc, #404]	; (800bd18 <tune+0x2a8>)
 800bb84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7f4 fcde 	bl	8000548 <__aeabi_f2d>
 800bb8c:	a360      	add	r3, pc, #384	; (adr r3, 800bd10 <tune+0x2a0>)
 800bb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb92:	f7f4 fd31 	bl	80005f8 <__aeabi_dmul>
 800bb96:	4602      	mov	r2, r0
 800bb98:	460b      	mov	r3, r1
 800bb9a:	4614      	mov	r4, r2
 800bb9c:	461d      	mov	r5, r3
 800bb9e:	4b64      	ldr	r3, [pc, #400]	; (800bd30 <tune+0x2c0>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7f4 fcd0 	bl	8000548 <__aeabi_f2d>
 800bba8:	4602      	mov	r2, r0
 800bbaa:	460b      	mov	r3, r1
 800bbac:	4620      	mov	r0, r4
 800bbae:	4629      	mov	r1, r5
 800bbb0:	f7f4 fb6c 	bl	800028c <__adddf3>
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	4610      	mov	r0, r2
 800bbba:	4619      	mov	r1, r3
 800bbbc:	f7f5 f814 	bl	8000be8 <__aeabi_d2f>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	4a5b      	ldr	r2, [pc, #364]	; (800bd30 <tune+0x2c0>)
 800bbc4:	6013      	str	r3, [r2, #0]
			break;
 800bbc6:	e1a1      	b.n	800bf0c <tune+0x49c>
		case 3:
			CP += ps4.joyR_y * 0.0001;
 800bbc8:	4b53      	ldr	r3, [pc, #332]	; (800bd18 <tune+0x2a8>)
 800bbca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7f4 fcbb 	bl	8000548 <__aeabi_f2d>
 800bbd2:	a34f      	add	r3, pc, #316	; (adr r3, 800bd10 <tune+0x2a0>)
 800bbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd8:	f7f4 fd0e 	bl	80005f8 <__aeabi_dmul>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	460b      	mov	r3, r1
 800bbe0:	4614      	mov	r4, r2
 800bbe2:	461d      	mov	r5, r3
 800bbe4:	4b53      	ldr	r3, [pc, #332]	; (800bd34 <tune+0x2c4>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7f4 fcad 	bl	8000548 <__aeabi_f2d>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	4629      	mov	r1, r5
 800bbf6:	f7f4 fb49 	bl	800028c <__adddf3>
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	4610      	mov	r0, r2
 800bc00:	4619      	mov	r1, r3
 800bc02:	f7f4 fff1 	bl	8000be8 <__aeabi_d2f>
 800bc06:	4603      	mov	r3, r0
 800bc08:	4a4a      	ldr	r2, [pc, #296]	; (800bd34 <tune+0x2c4>)
 800bc0a:	6013      	str	r3, [r2, #0]
			break;
 800bc0c:	e17e      	b.n	800bf0c <tune+0x49c>
		case 4:
			DP += ps4.joyR_y * 0.0001;
 800bc0e:	4b42      	ldr	r3, [pc, #264]	; (800bd18 <tune+0x2a8>)
 800bc10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7f4 fc98 	bl	8000548 <__aeabi_f2d>
 800bc18:	a33d      	add	r3, pc, #244	; (adr r3, 800bd10 <tune+0x2a0>)
 800bc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1e:	f7f4 fceb 	bl	80005f8 <__aeabi_dmul>
 800bc22:	4602      	mov	r2, r0
 800bc24:	460b      	mov	r3, r1
 800bc26:	4614      	mov	r4, r2
 800bc28:	461d      	mov	r5, r3
 800bc2a:	4b43      	ldr	r3, [pc, #268]	; (800bd38 <tune+0x2c8>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7f4 fc8a 	bl	8000548 <__aeabi_f2d>
 800bc34:	4602      	mov	r2, r0
 800bc36:	460b      	mov	r3, r1
 800bc38:	4620      	mov	r0, r4
 800bc3a:	4629      	mov	r1, r5
 800bc3c:	f7f4 fb26 	bl	800028c <__adddf3>
 800bc40:	4602      	mov	r2, r0
 800bc42:	460b      	mov	r3, r1
 800bc44:	4610      	mov	r0, r2
 800bc46:	4619      	mov	r1, r3
 800bc48:	f7f4 ffce 	bl	8000be8 <__aeabi_d2f>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	4a3a      	ldr	r2, [pc, #232]	; (800bd38 <tune+0x2c8>)
 800bc50:	6013      	str	r3, [r2, #0]
			break;
 800bc52:	e15b      	b.n	800bf0c <tune+0x49c>
		}
	}
	else if(tune_i)
 800bc54:	4b32      	ldr	r3, [pc, #200]	; (800bd20 <tune+0x2b0>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	f000 80b9 	beq.w	800bdd0 <tune+0x360>
	{
		switch(wheel)
 800bc5e:	4b32      	ldr	r3, [pc, #200]	; (800bd28 <tune+0x2b8>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	3b01      	subs	r3, #1
 800bc64:	2b03      	cmp	r3, #3
 800bc66:	f200 8151 	bhi.w	800bf0c <tune+0x49c>
 800bc6a:	a201      	add	r2, pc, #4	; (adr r2, 800bc70 <tune+0x200>)
 800bc6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc70:	0800bc81 	.word	0x0800bc81
 800bc74:	0800bcc7 	.word	0x0800bcc7
 800bc78:	0800bd45 	.word	0x0800bd45
 800bc7c:	0800bd8b 	.word	0x0800bd8b
		{
		case 1:
			AI += ps4.joyR_y * 0.0001;
 800bc80:	4b25      	ldr	r3, [pc, #148]	; (800bd18 <tune+0x2a8>)
 800bc82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc84:	4618      	mov	r0, r3
 800bc86:	f7f4 fc5f 	bl	8000548 <__aeabi_f2d>
 800bc8a:	a321      	add	r3, pc, #132	; (adr r3, 800bd10 <tune+0x2a0>)
 800bc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc90:	f7f4 fcb2 	bl	80005f8 <__aeabi_dmul>
 800bc94:	4602      	mov	r2, r0
 800bc96:	460b      	mov	r3, r1
 800bc98:	4614      	mov	r4, r2
 800bc9a:	461d      	mov	r5, r3
 800bc9c:	4b27      	ldr	r3, [pc, #156]	; (800bd3c <tune+0x2cc>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4618      	mov	r0, r3
 800bca2:	f7f4 fc51 	bl	8000548 <__aeabi_f2d>
 800bca6:	4602      	mov	r2, r0
 800bca8:	460b      	mov	r3, r1
 800bcaa:	4620      	mov	r0, r4
 800bcac:	4629      	mov	r1, r5
 800bcae:	f7f4 faed 	bl	800028c <__adddf3>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	4610      	mov	r0, r2
 800bcb8:	4619      	mov	r1, r3
 800bcba:	f7f4 ff95 	bl	8000be8 <__aeabi_d2f>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	4a1e      	ldr	r2, [pc, #120]	; (800bd3c <tune+0x2cc>)
 800bcc2:	6013      	str	r3, [r2, #0]
			break;
 800bcc4:	e122      	b.n	800bf0c <tune+0x49c>
		case 2:
			BI += ps4.joyR_y * 0.0001;
 800bcc6:	4b14      	ldr	r3, [pc, #80]	; (800bd18 <tune+0x2a8>)
 800bcc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7f4 fc3c 	bl	8000548 <__aeabi_f2d>
 800bcd0:	a30f      	add	r3, pc, #60	; (adr r3, 800bd10 <tune+0x2a0>)
 800bcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd6:	f7f4 fc8f 	bl	80005f8 <__aeabi_dmul>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	460b      	mov	r3, r1
 800bcde:	4614      	mov	r4, r2
 800bce0:	461d      	mov	r5, r3
 800bce2:	4b17      	ldr	r3, [pc, #92]	; (800bd40 <tune+0x2d0>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7f4 fc2e 	bl	8000548 <__aeabi_f2d>
 800bcec:	4602      	mov	r2, r0
 800bcee:	460b      	mov	r3, r1
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	4629      	mov	r1, r5
 800bcf4:	f7f4 faca 	bl	800028c <__adddf3>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	4610      	mov	r0, r2
 800bcfe:	4619      	mov	r1, r3
 800bd00:	f7f4 ff72 	bl	8000be8 <__aeabi_d2f>
 800bd04:	4603      	mov	r3, r0
 800bd06:	4a0e      	ldr	r2, [pc, #56]	; (800bd40 <tune+0x2d0>)
 800bd08:	6013      	str	r3, [r2, #0]
			break;
 800bd0a:	e0ff      	b.n	800bf0c <tune+0x49c>
 800bd0c:	f3af 8000 	nop.w
 800bd10:	eb1c432d 	.word	0xeb1c432d
 800bd14:	3f1a36e2 	.word	0x3f1a36e2
 800bd18:	2000a3f0 	.word	0x2000a3f0
 800bd1c:	2000783c 	.word	0x2000783c
 800bd20:	200076d4 	.word	0x200076d4
 800bd24:	20009c60 	.word	0x20009c60
 800bd28:	200069c4 	.word	0x200069c4
 800bd2c:	2000a6fc 	.word	0x2000a6fc
 800bd30:	20007a74 	.word	0x20007a74
 800bd34:	20009ac4 	.word	0x20009ac4
 800bd38:	2000a1e4 	.word	0x2000a1e4
 800bd3c:	200076cc 	.word	0x200076cc
 800bd40:	20009898 	.word	0x20009898
		case 3:
			CI += ps4.joyR_y * 0.0001;
 800bd44:	4bb4      	ldr	r3, [pc, #720]	; (800c018 <tune+0x5a8>)
 800bd46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7f4 fbfd 	bl	8000548 <__aeabi_f2d>
 800bd4e:	a3ae      	add	r3, pc, #696	; (adr r3, 800c008 <tune+0x598>)
 800bd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd54:	f7f4 fc50 	bl	80005f8 <__aeabi_dmul>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	4614      	mov	r4, r2
 800bd5e:	461d      	mov	r5, r3
 800bd60:	4bae      	ldr	r3, [pc, #696]	; (800c01c <tune+0x5ac>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	4618      	mov	r0, r3
 800bd66:	f7f4 fbef 	bl	8000548 <__aeabi_f2d>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	4620      	mov	r0, r4
 800bd70:	4629      	mov	r1, r5
 800bd72:	f7f4 fa8b 	bl	800028c <__adddf3>
 800bd76:	4602      	mov	r2, r0
 800bd78:	460b      	mov	r3, r1
 800bd7a:	4610      	mov	r0, r2
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	f7f4 ff33 	bl	8000be8 <__aeabi_d2f>
 800bd82:	4603      	mov	r3, r0
 800bd84:	4aa5      	ldr	r2, [pc, #660]	; (800c01c <tune+0x5ac>)
 800bd86:	6013      	str	r3, [r2, #0]
			break;
 800bd88:	e0c0      	b.n	800bf0c <tune+0x49c>
		case 4:
			DI += ps4.joyR_y * 0.0001;
 800bd8a:	4ba3      	ldr	r3, [pc, #652]	; (800c018 <tune+0x5a8>)
 800bd8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7f4 fbda 	bl	8000548 <__aeabi_f2d>
 800bd94:	a39c      	add	r3, pc, #624	; (adr r3, 800c008 <tune+0x598>)
 800bd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9a:	f7f4 fc2d 	bl	80005f8 <__aeabi_dmul>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	460b      	mov	r3, r1
 800bda2:	4614      	mov	r4, r2
 800bda4:	461d      	mov	r5, r3
 800bda6:	4b9e      	ldr	r3, [pc, #632]	; (800c020 <tune+0x5b0>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7f4 fbcc 	bl	8000548 <__aeabi_f2d>
 800bdb0:	4602      	mov	r2, r0
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	4629      	mov	r1, r5
 800bdb8:	f7f4 fa68 	bl	800028c <__adddf3>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	4610      	mov	r0, r2
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	f7f4 ff10 	bl	8000be8 <__aeabi_d2f>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	4a95      	ldr	r2, [pc, #596]	; (800c020 <tune+0x5b0>)
 800bdcc:	6013      	str	r3, [r2, #0]
			break;
 800bdce:	e09d      	b.n	800bf0c <tune+0x49c>
		}
	}
	else
	{
		switch(wheel)
 800bdd0:	4b94      	ldr	r3, [pc, #592]	; (800c024 <tune+0x5b4>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	3b01      	subs	r3, #1
 800bdd6:	2b03      	cmp	r3, #3
 800bdd8:	f200 8098 	bhi.w	800bf0c <tune+0x49c>
 800bddc:	a201      	add	r2, pc, #4	; (adr r2, 800bde4 <tune+0x374>)
 800bdde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde2:	bf00      	nop
 800bde4:	0800bdf5 	.word	0x0800bdf5
 800bde8:	0800be3b 	.word	0x0800be3b
 800bdec:	0800be81 	.word	0x0800be81
 800bdf0:	0800bec7 	.word	0x0800bec7
		{
		case 1:
			AD += ps4.joyR_y * 0.00001;
 800bdf4:	4b88      	ldr	r3, [pc, #544]	; (800c018 <tune+0x5a8>)
 800bdf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7f4 fba5 	bl	8000548 <__aeabi_f2d>
 800bdfe:	a384      	add	r3, pc, #528	; (adr r3, 800c010 <tune+0x5a0>)
 800be00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be04:	f7f4 fbf8 	bl	80005f8 <__aeabi_dmul>
 800be08:	4602      	mov	r2, r0
 800be0a:	460b      	mov	r3, r1
 800be0c:	4614      	mov	r4, r2
 800be0e:	461d      	mov	r5, r3
 800be10:	4b85      	ldr	r3, [pc, #532]	; (800c028 <tune+0x5b8>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4618      	mov	r0, r3
 800be16:	f7f4 fb97 	bl	8000548 <__aeabi_f2d>
 800be1a:	4602      	mov	r2, r0
 800be1c:	460b      	mov	r3, r1
 800be1e:	4620      	mov	r0, r4
 800be20:	4629      	mov	r1, r5
 800be22:	f7f4 fa33 	bl	800028c <__adddf3>
 800be26:	4602      	mov	r2, r0
 800be28:	460b      	mov	r3, r1
 800be2a:	4610      	mov	r0, r2
 800be2c:	4619      	mov	r1, r3
 800be2e:	f7f4 fedb 	bl	8000be8 <__aeabi_d2f>
 800be32:	4603      	mov	r3, r0
 800be34:	4a7c      	ldr	r2, [pc, #496]	; (800c028 <tune+0x5b8>)
 800be36:	6013      	str	r3, [r2, #0]
			break;
 800be38:	e068      	b.n	800bf0c <tune+0x49c>
		case 2:
			BD += ps4.joyR_y * 0.00001;
 800be3a:	4b77      	ldr	r3, [pc, #476]	; (800c018 <tune+0x5a8>)
 800be3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be3e:	4618      	mov	r0, r3
 800be40:	f7f4 fb82 	bl	8000548 <__aeabi_f2d>
 800be44:	a372      	add	r3, pc, #456	; (adr r3, 800c010 <tune+0x5a0>)
 800be46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4a:	f7f4 fbd5 	bl	80005f8 <__aeabi_dmul>
 800be4e:	4602      	mov	r2, r0
 800be50:	460b      	mov	r3, r1
 800be52:	4614      	mov	r4, r2
 800be54:	461d      	mov	r5, r3
 800be56:	4b75      	ldr	r3, [pc, #468]	; (800c02c <tune+0x5bc>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7f4 fb74 	bl	8000548 <__aeabi_f2d>
 800be60:	4602      	mov	r2, r0
 800be62:	460b      	mov	r3, r1
 800be64:	4620      	mov	r0, r4
 800be66:	4629      	mov	r1, r5
 800be68:	f7f4 fa10 	bl	800028c <__adddf3>
 800be6c:	4602      	mov	r2, r0
 800be6e:	460b      	mov	r3, r1
 800be70:	4610      	mov	r0, r2
 800be72:	4619      	mov	r1, r3
 800be74:	f7f4 feb8 	bl	8000be8 <__aeabi_d2f>
 800be78:	4603      	mov	r3, r0
 800be7a:	4a6c      	ldr	r2, [pc, #432]	; (800c02c <tune+0x5bc>)
 800be7c:	6013      	str	r3, [r2, #0]
			break;
 800be7e:	e045      	b.n	800bf0c <tune+0x49c>
		case 3:
			CD += ps4.joyR_y * 0.00001;
 800be80:	4b65      	ldr	r3, [pc, #404]	; (800c018 <tune+0x5a8>)
 800be82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be84:	4618      	mov	r0, r3
 800be86:	f7f4 fb5f 	bl	8000548 <__aeabi_f2d>
 800be8a:	a361      	add	r3, pc, #388	; (adr r3, 800c010 <tune+0x5a0>)
 800be8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be90:	f7f4 fbb2 	bl	80005f8 <__aeabi_dmul>
 800be94:	4602      	mov	r2, r0
 800be96:	460b      	mov	r3, r1
 800be98:	4614      	mov	r4, r2
 800be9a:	461d      	mov	r5, r3
 800be9c:	4b64      	ldr	r3, [pc, #400]	; (800c030 <tune+0x5c0>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7f4 fb51 	bl	8000548 <__aeabi_f2d>
 800bea6:	4602      	mov	r2, r0
 800bea8:	460b      	mov	r3, r1
 800beaa:	4620      	mov	r0, r4
 800beac:	4629      	mov	r1, r5
 800beae:	f7f4 f9ed 	bl	800028c <__adddf3>
 800beb2:	4602      	mov	r2, r0
 800beb4:	460b      	mov	r3, r1
 800beb6:	4610      	mov	r0, r2
 800beb8:	4619      	mov	r1, r3
 800beba:	f7f4 fe95 	bl	8000be8 <__aeabi_d2f>
 800bebe:	4603      	mov	r3, r0
 800bec0:	4a5b      	ldr	r2, [pc, #364]	; (800c030 <tune+0x5c0>)
 800bec2:	6013      	str	r3, [r2, #0]
			break;
 800bec4:	e022      	b.n	800bf0c <tune+0x49c>
		case 4:
			DD += ps4.joyR_y * 0.00001;
 800bec6:	4b54      	ldr	r3, [pc, #336]	; (800c018 <tune+0x5a8>)
 800bec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800beca:	4618      	mov	r0, r3
 800becc:	f7f4 fb3c 	bl	8000548 <__aeabi_f2d>
 800bed0:	a34f      	add	r3, pc, #316	; (adr r3, 800c010 <tune+0x5a0>)
 800bed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed6:	f7f4 fb8f 	bl	80005f8 <__aeabi_dmul>
 800beda:	4602      	mov	r2, r0
 800bedc:	460b      	mov	r3, r1
 800bede:	4614      	mov	r4, r2
 800bee0:	461d      	mov	r5, r3
 800bee2:	4b54      	ldr	r3, [pc, #336]	; (800c034 <tune+0x5c4>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7f4 fb2e 	bl	8000548 <__aeabi_f2d>
 800beec:	4602      	mov	r2, r0
 800beee:	460b      	mov	r3, r1
 800bef0:	4620      	mov	r0, r4
 800bef2:	4629      	mov	r1, r5
 800bef4:	f7f4 f9ca 	bl	800028c <__adddf3>
 800bef8:	4602      	mov	r2, r0
 800befa:	460b      	mov	r3, r1
 800befc:	4610      	mov	r0, r2
 800befe:	4619      	mov	r1, r3
 800bf00:	f7f4 fe72 	bl	8000be8 <__aeabi_d2f>
 800bf04:	4603      	mov	r3, r0
 800bf06:	4a4b      	ldr	r2, [pc, #300]	; (800c034 <tune+0x5c4>)
 800bf08:	6013      	str	r3, [r2, #0]
			break;
 800bf0a:	bf00      	nop
		}
	}

	if(ps4.button == OPTION)
 800bf0c:	4b42      	ldr	r3, [pc, #264]	; (800c018 <tune+0x5a8>)
 800bf0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf14:	f040 80bc 	bne.w	800c090 <tune+0x620>
	{
		while(ps4.button == OPTION);
 800bf18:	bf00      	nop
 800bf1a:	4b3f      	ldr	r3, [pc, #252]	; (800c018 <tune+0x5a8>)
 800bf1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf22:	d0fa      	beq.n	800bf1a <tune+0x4aa>
		switch(wheel)
 800bf24:	4b3f      	ldr	r3, [pc, #252]	; (800c024 <tune+0x5b4>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	3b01      	subs	r3, #1
 800bf2a:	2b03      	cmp	r3, #3
 800bf2c:	f200 80b1 	bhi.w	800c092 <tune+0x622>
 800bf30:	a201      	add	r2, pc, #4	; (adr r2, 800bf38 <tune+0x4c8>)
 800bf32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf36:	bf00      	nop
 800bf38:	0800bf49 	.word	0x0800bf49
 800bf3c:	0800bf89 	.word	0x0800bf89
 800bf40:	0800bfc9 	.word	0x0800bfc9
 800bf44:	0800c051 	.word	0x0800c051
		{
		case 1:
			RNSSet(&rns, RNS_F_LEFT_VEL_PID, AP, AI, AD);
 800bf48:	4b3b      	ldr	r3, [pc, #236]	; (800c038 <tune+0x5c8>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7f4 fafb 	bl	8000548 <__aeabi_f2d>
 800bf52:	4680      	mov	r8, r0
 800bf54:	4689      	mov	r9, r1
 800bf56:	4b39      	ldr	r3, [pc, #228]	; (800c03c <tune+0x5cc>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7f4 faf4 	bl	8000548 <__aeabi_f2d>
 800bf60:	4604      	mov	r4, r0
 800bf62:	460d      	mov	r5, r1
 800bf64:	4b30      	ldr	r3, [pc, #192]	; (800c028 <tune+0x5b8>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7f4 faed 	bl	8000548 <__aeabi_f2d>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	460b      	mov	r3, r1
 800bf72:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf76:	e9cd 4500 	strd	r4, r5, [sp]
 800bf7a:	4642      	mov	r2, r8
 800bf7c:	464b      	mov	r3, r9
 800bf7e:	212f      	movs	r1, #47	; 0x2f
 800bf80:	482f      	ldr	r0, [pc, #188]	; (800c040 <tune+0x5d0>)
 800bf82:	f7fd fb57 	bl	8009634 <RNSSet>
			break;
 800bf86:	e084      	b.n	800c092 <tune+0x622>

		case 2:
			RNSSet(&rns, RNS_F_RIGHT_VEL_PID, BP, BI, BD);
 800bf88:	4b2e      	ldr	r3, [pc, #184]	; (800c044 <tune+0x5d4>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7f4 fadb 	bl	8000548 <__aeabi_f2d>
 800bf92:	4680      	mov	r8, r0
 800bf94:	4689      	mov	r9, r1
 800bf96:	4b2c      	ldr	r3, [pc, #176]	; (800c048 <tune+0x5d8>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7f4 fad4 	bl	8000548 <__aeabi_f2d>
 800bfa0:	4604      	mov	r4, r0
 800bfa2:	460d      	mov	r5, r1
 800bfa4:	4b21      	ldr	r3, [pc, #132]	; (800c02c <tune+0x5bc>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f7f4 facd 	bl	8000548 <__aeabi_f2d>
 800bfae:	4602      	mov	r2, r0
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bfb6:	e9cd 4500 	strd	r4, r5, [sp]
 800bfba:	4642      	mov	r2, r8
 800bfbc:	464b      	mov	r3, r9
 800bfbe:	2130      	movs	r1, #48	; 0x30
 800bfc0:	481f      	ldr	r0, [pc, #124]	; (800c040 <tune+0x5d0>)
 800bfc2:	f7fd fb37 	bl	8009634 <RNSSet>
			break;
 800bfc6:	e064      	b.n	800c092 <tune+0x622>

		case 3:
			RNSSet(&rns, RNS_B_LEFT_VEL_PID, CP, CI, CD);
 800bfc8:	4b20      	ldr	r3, [pc, #128]	; (800c04c <tune+0x5dc>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f7f4 fabb 	bl	8000548 <__aeabi_f2d>
 800bfd2:	4680      	mov	r8, r0
 800bfd4:	4689      	mov	r9, r1
 800bfd6:	4b11      	ldr	r3, [pc, #68]	; (800c01c <tune+0x5ac>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7f4 fab4 	bl	8000548 <__aeabi_f2d>
 800bfe0:	4604      	mov	r4, r0
 800bfe2:	460d      	mov	r5, r1
 800bfe4:	4b12      	ldr	r3, [pc, #72]	; (800c030 <tune+0x5c0>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7f4 faad 	bl	8000548 <__aeabi_f2d>
 800bfee:	4602      	mov	r2, r0
 800bff0:	460b      	mov	r3, r1
 800bff2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bff6:	e9cd 4500 	strd	r4, r5, [sp]
 800bffa:	4642      	mov	r2, r8
 800bffc:	464b      	mov	r3, r9
 800bffe:	2131      	movs	r1, #49	; 0x31
 800c000:	480f      	ldr	r0, [pc, #60]	; (800c040 <tune+0x5d0>)
 800c002:	f7fd fb17 	bl	8009634 <RNSSet>
			break;
 800c006:	e044      	b.n	800c092 <tune+0x622>
 800c008:	eb1c432d 	.word	0xeb1c432d
 800c00c:	3f1a36e2 	.word	0x3f1a36e2
 800c010:	88e368f1 	.word	0x88e368f1
 800c014:	3ee4f8b5 	.word	0x3ee4f8b5
 800c018:	2000a3f0 	.word	0x2000a3f0
 800c01c:	20009c58 	.word	0x20009c58
 800c020:	20006f3c 	.word	0x20006f3c
 800c024:	200069c4 	.word	0x200069c4
 800c028:	2000a6d8 	.word	0x2000a6d8
 800c02c:	200076c8 	.word	0x200076c8
 800c030:	200069c8 	.word	0x200069c8
 800c034:	20009f14 	.word	0x20009f14
 800c038:	2000a6fc 	.word	0x2000a6fc
 800c03c:	200076cc 	.word	0x200076cc
 800c040:	20009370 	.word	0x20009370
 800c044:	20007a74 	.word	0x20007a74
 800c048:	20009898 	.word	0x20009898
 800c04c:	20009ac4 	.word	0x20009ac4

		case 4:
			RNSSet(&rns, RNS_B_RIGHT_VEL_PID, DP, DI, DD);
 800c050:	4b12      	ldr	r3, [pc, #72]	; (800c09c <tune+0x62c>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4618      	mov	r0, r3
 800c056:	f7f4 fa77 	bl	8000548 <__aeabi_f2d>
 800c05a:	4680      	mov	r8, r0
 800c05c:	4689      	mov	r9, r1
 800c05e:	4b10      	ldr	r3, [pc, #64]	; (800c0a0 <tune+0x630>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	4618      	mov	r0, r3
 800c064:	f7f4 fa70 	bl	8000548 <__aeabi_f2d>
 800c068:	4604      	mov	r4, r0
 800c06a:	460d      	mov	r5, r1
 800c06c:	4b0d      	ldr	r3, [pc, #52]	; (800c0a4 <tune+0x634>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4618      	mov	r0, r3
 800c072:	f7f4 fa69 	bl	8000548 <__aeabi_f2d>
 800c076:	4602      	mov	r2, r0
 800c078:	460b      	mov	r3, r1
 800c07a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c07e:	e9cd 4500 	strd	r4, r5, [sp]
 800c082:	4642      	mov	r2, r8
 800c084:	464b      	mov	r3, r9
 800c086:	2132      	movs	r1, #50	; 0x32
 800c088:	4807      	ldr	r0, [pc, #28]	; (800c0a8 <tune+0x638>)
 800c08a:	f7fd fad3 	bl	8009634 <RNSSet>
			break;
 800c08e:	e000      	b.n	800c092 <tune+0x622>
		}
	}
 800c090:	bf00      	nop
}
 800c092:	bf00      	nop
 800c094:	46bd      	mov	sp, r7
 800c096:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c09a:	bf00      	nop
 800c09c:	2000a1e4 	.word	0x2000a1e4
 800c0a0:	20006f3c 	.word	0x20006f3c
 800c0a4:	20009f14 	.word	0x20009f14
 800c0a8:	20009370 	.word	0x20009370

0800c0ac <DMA1_Stream0_IRQHandler>:
#include "dma.h"

/*I2C*/

void DMA1_Stream0_IRQHandler(void)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
 800c0b0:	4802      	ldr	r0, [pc, #8]	; (800c0bc <DMA1_Stream0_IRQHandler+0x10>)
 800c0b2:	f005 ff9b 	bl	8011fec <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_uart5_rx);

}
 800c0b6:	bf00      	nop
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	2000a38c 	.word	0x2000a38c

0800c0c0 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hdma_usart3_rx);
	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
 800c0c4:	4802      	ldr	r0, [pc, #8]	; (800c0d0 <DMA1_Stream3_IRQHandler+0x10>)
 800c0c6:	f005 ff91 	bl	8011fec <HAL_DMA_IRQHandler>
}
 800c0ca:	bf00      	nop
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	20006a24 	.word	0x20006a24

0800c0d4 <DMA1_Stream2_IRQHandler>:

void DMA1_Stream2_IRQHandler(void)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800c0d8:	4802      	ldr	r0, [pc, #8]	; (800c0e4 <DMA1_Stream2_IRQHandler+0x10>)
 800c0da:	f005 ff87 	bl	8011fec <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
//	HAL_DMA_IRQHandler(&hi2c3_rx_dma);
}
 800c0de:	bf00      	nop
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	20005f04 	.word	0x20005f04

0800c0e8 <DMA1_Stream1_IRQHandler>:

/*UART*/
void DMA1_Stream1_IRQHandler(void)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800c0ec:	4802      	ldr	r0, [pc, #8]	; (800c0f8 <DMA1_Stream1_IRQHandler+0x10>)
 800c0ee:	f005 ff7d 	bl	8011fec <HAL_DMA_IRQHandler>
}
 800c0f2:	bf00      	nop
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	20006048 	.word	0x20006048

0800c0fc <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800c100:	4802      	ldr	r0, [pc, #8]	; (800c10c <DMA1_Stream4_IRQHandler+0x10>)
 800c102:	f005 ff73 	bl	8011fec <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_usart3_tx);
//	HAL_DMA_IRQHandler(&hi2c3_tx_dma);
}
 800c106:	bf00      	nop
 800c108:	bd80      	pop	{r7, pc}
 800c10a:	bf00      	nop
 800c10c:	200066bc 	.word	0x200066bc

0800c110 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800c114:	4802      	ldr	r0, [pc, #8]	; (800c120 <DMA1_Stream5_IRQHandler+0x10>)
 800c116:	f005 ff69 	bl	8011fec <HAL_DMA_IRQHandler>
}
 800c11a:	bf00      	nop
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	20005f64 	.word	0x20005f64

0800c124 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	af00      	add	r7, sp, #0

//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800c128:	4802      	ldr	r0, [pc, #8]	; (800c134 <DMA1_Stream6_IRQHandler+0x10>)
 800c12a:	f005 ff5f 	bl	8011fec <HAL_DMA_IRQHandler>
}
 800c12e:	bf00      	nop
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	20006250 	.word	0x20006250

0800c138 <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void){
 800c138:	b580      	push	{r7, lr}
 800c13a:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
//	HAL_DMA_IRQHandler(&hi2c2_tx_dma);
	HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800c13c:	4802      	ldr	r0, [pc, #8]	; (800c148 <DMA1_Stream7_IRQHandler+0x10>)
 800c13e:	f005 ff55 	bl	8011fec <HAL_DMA_IRQHandler>
}
 800c142:	bf00      	nop
 800c144:	bd80      	pop	{r7, pc}
 800c146:	bf00      	nop
 800c148:	2000671c 	.word	0x2000671c

0800c14c <DMA2_Stream0_IRQHandler>:


void DMA2_Stream0_IRQHandler(void)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc1);
 800c150:	4802      	ldr	r0, [pc, #8]	; (800c15c <DMA2_Stream0_IRQHandler+0x10>)
 800c152:	f005 ff4b 	bl	8011fec <HAL_DMA_IRQHandler>
}
 800c156:	bf00      	nop
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop
 800c15c:	200068b4 	.word	0x200068b4

0800c160 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc3);
 800c164:	4802      	ldr	r0, [pc, #8]	; (800c170 <DMA2_Stream1_IRQHandler+0x10>)
 800c166:	f005 ff41 	bl	8011fec <HAL_DMA_IRQHandler>
}
 800c16a:	bf00      	nop
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop
 800c170:	200067c4 	.word	0x200067c4

0800c174 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800c178:	4802      	ldr	r0, [pc, #8]	; (800c184 <DMA2_Stream2_IRQHandler+0x10>)
 800c17a:	f005 ff37 	bl	8011fec <HAL_DMA_IRQHandler>
}
 800c17e:	bf00      	nop
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop
 800c184:	2000a304 	.word	0x2000a304

0800c188 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc2);
 800c18c:	4802      	ldr	r0, [pc, #8]	; (800c198 <DMA2_Stream3_IRQHandler+0x10>)
 800c18e:	f005 ff2d 	bl	8011fec <HAL_DMA_IRQHandler>
}
 800c192:	bf00      	nop
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	20006914 	.word	0x20006914

0800c19c <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler(void)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800c1a0:	4802      	ldr	r0, [pc, #8]	; (800c1ac <DMA2_Stream5_IRQHandler+0x10>)
 800c1a2:	f005 ff23 	bl	8011fec <HAL_DMA_IRQHandler>
}
 800c1a6:	bf00      	nop
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	2000a704 	.word	0x2000a704

0800c1b0 <NMI_Handler>:
int _counter = 0;
/**
 * * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	af00      	add	r7, sp, #0

}
 800c1b4:	bf00      	nop
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1bc:	4770      	bx	lr

0800c1be <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800c1be:	b480      	push	{r7}
 800c1c0:	af00      	add	r7, sp, #0

}
 800c1c2:	bf00      	nop
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	4770      	bx	lr

0800c1cc <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	af00      	add	r7, sp, #0

	while(1){
 800c1d0:	e7fe      	b.n	800c1d0 <MemManage_Handler+0x4>

0800c1d2 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800c1d2:	b480      	push	{r7}
 800c1d4:	af00      	add	r7, sp, #0

}
 800c1d6:	bf00      	nop
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr

0800c1e0 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	af00      	add	r7, sp, #0

}
 800c1e4:	bf00      	nop
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ec:	4770      	bx	lr

0800c1ee <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800c1ee:	b480      	push	{r7}
 800c1f0:	af00      	add	r7, sp, #0

}
 800c1f2:	bf00      	nop
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr

0800c1fc <TIM1_UP_TIM10_IRQHandler>:
//
//}


void TIM1_UP_TIM10_IRQHandler(void)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	af00      	add	r7, sp, #0
#ifdef USED_QEI1
	if (htim1.Instance -> CR1 == 129)
 800c200:	4b14      	ldr	r3, [pc, #80]	; (800c254 <TIM1_UP_TIM10_IRQHandler+0x58>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	2b81      	cmp	r3, #129	; 0x81
 800c208:	d109      	bne.n	800c21e <TIM1_UP_TIM10_IRQHandler+0x22>
	{
		BIOS_QEI1.signbit += 1;
 800c20a:	4b13      	ldr	r3, [pc, #76]	; (800c258 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800c20c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c210:	b29b      	uxth	r3, r3
 800c212:	3301      	adds	r3, #1
 800c214:	b29b      	uxth	r3, r3
 800c216:	b21a      	sxth	r2, r3
 800c218:	4b0f      	ldr	r3, [pc, #60]	; (800c258 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800c21a:	805a      	strh	r2, [r3, #2]
 800c21c:	e00d      	b.n	800c23a <TIM1_UP_TIM10_IRQHandler+0x3e>
	}
	else if (htim1.Instance ->CR1 == 145)
 800c21e:	4b0d      	ldr	r3, [pc, #52]	; (800c254 <TIM1_UP_TIM10_IRQHandler+0x58>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	2b91      	cmp	r3, #145	; 0x91
 800c226:	d108      	bne.n	800c23a <TIM1_UP_TIM10_IRQHandler+0x3e>
	{
		BIOS_QEI1.signbit -= 1;
 800c228:	4b0b      	ldr	r3, [pc, #44]	; (800c258 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800c22a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c22e:	b29b      	uxth	r3, r3
 800c230:	3b01      	subs	r3, #1
 800c232:	b29b      	uxth	r3, r3
 800c234:	b21a      	sxth	r2, r3
 800c236:	4b08      	ldr	r3, [pc, #32]	; (800c258 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800c238:	805a      	strh	r2, [r3, #2]
	}
	htim1.Instance -> SR = 0;
 800c23a:	4b06      	ldr	r3, [pc, #24]	; (800c254 <TIM1_UP_TIM10_IRQHandler+0x58>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2200      	movs	r2, #0
 800c240:	611a      	str	r2, [r3, #16]
	QEIDelay(200);
 800c242:	20c8      	movs	r0, #200	; 0xc8
 800c244:	f7f5 fd26 	bl	8001c94 <QEIDelay>
#else
	HAL_TIM_IRQHandler(&htim1);
#endif
	HAL_TIM_IRQHandler(&htim10);
 800c248:	4804      	ldr	r0, [pc, #16]	; (800c25c <TIM1_UP_TIM10_IRQHandler+0x60>)
 800c24a:	f009 fbd3 	bl	80159f4 <HAL_TIM_IRQHandler>
	return;
 800c24e:	bf00      	nop
}
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	20006418 	.word	0x20006418
 800c258:	20006978 	.word	0x20006978
 800c25c:	200060e8 	.word	0x200060e8

0800c260 <TIM4_IRQHandler>:



void TIM4_IRQHandler(void)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	af00      	add	r7, sp, #0

#ifdef USED_QEI4
	if (htim4.Instance -> CR1 == 129)
 800c264:	4b12      	ldr	r3, [pc, #72]	; (800c2b0 <TIM4_IRQHandler+0x50>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	2b81      	cmp	r3, #129	; 0x81
 800c26c:	d109      	bne.n	800c282 <TIM4_IRQHandler+0x22>
	{
		BIOS_QEI4.signbit += 1;
 800c26e:	4b11      	ldr	r3, [pc, #68]	; (800c2b4 <TIM4_IRQHandler+0x54>)
 800c270:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c274:	b29b      	uxth	r3, r3
 800c276:	3301      	adds	r3, #1
 800c278:	b29b      	uxth	r3, r3
 800c27a:	b21a      	sxth	r2, r3
 800c27c:	4b0d      	ldr	r3, [pc, #52]	; (800c2b4 <TIM4_IRQHandler+0x54>)
 800c27e:	805a      	strh	r2, [r3, #2]
 800c280:	e00d      	b.n	800c29e <TIM4_IRQHandler+0x3e>
	}
	else if (htim4.Instance ->CR1 == 145)
 800c282:	4b0b      	ldr	r3, [pc, #44]	; (800c2b0 <TIM4_IRQHandler+0x50>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	2b91      	cmp	r3, #145	; 0x91
 800c28a:	d108      	bne.n	800c29e <TIM4_IRQHandler+0x3e>
	{
		BIOS_QEI4.signbit -= 1;
 800c28c:	4b09      	ldr	r3, [pc, #36]	; (800c2b4 <TIM4_IRQHandler+0x54>)
 800c28e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c292:	b29b      	uxth	r3, r3
 800c294:	3b01      	subs	r3, #1
 800c296:	b29b      	uxth	r3, r3
 800c298:	b21a      	sxth	r2, r3
 800c29a:	4b06      	ldr	r3, [pc, #24]	; (800c2b4 <TIM4_IRQHandler+0x54>)
 800c29c:	805a      	strh	r2, [r3, #2]
	}
	htim4.Instance -> SR = 0;
 800c29e:	4b04      	ldr	r3, [pc, #16]	; (800c2b0 <TIM4_IRQHandler+0x50>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	611a      	str	r2, [r3, #16]
	QEIDelay(100);
 800c2a6:	2064      	movs	r0, #100	; 0x64
 800c2a8:	f7f5 fcf4 	bl	8001c94 <QEIDelay>
	HAL_TIM_IRQHandler(&htim4);

	return;
#endif

}
 800c2ac:	bf00      	nop
 800c2ae:	bd80      	pop	{r7, pc}
 800c2b0:	20006008 	.word	0x20006008
 800c2b4:	2000699c 	.word	0x2000699c

0800c2b8 <TIM8_UP_TIM13_IRQHandler>:



void TIM8_UP_TIM13_IRQHandler(void)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	af00      	add	r7, sp, #0
		BIOS_QEI6.signbit -= 1;
	}
	htim8.Instance -> SR = 0;
	QEIDelay(200);
#else
	HAL_TIM_IRQHandler(&htim8);
 800c2bc:	4803      	ldr	r0, [pc, #12]	; (800c2cc <TIM8_UP_TIM13_IRQHandler+0x14>)
 800c2be:	f009 fb99 	bl	80159f4 <HAL_TIM_IRQHandler>
#endif
	HAL_TIM_IRQHandler(&htim13);
 800c2c2:	4803      	ldr	r0, [pc, #12]	; (800c2d0 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800c2c4:	f009 fb96 	bl	80159f4 <HAL_TIM_IRQHandler>
	return;
 800c2c8:	bf00      	nop
}
 800c2ca:	bd80      	pop	{r7, pc}
 800c2cc:	20005fc8 	.word	0x20005fc8
 800c2d0:	200062b0 	.word	0x200062b0

0800c2d4 <TIM2_IRQHandler>:



void TIM2_IRQHandler(void)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 800c2d8:	4802      	ldr	r0, [pc, #8]	; (800c2e4 <TIM2_IRQHandler+0x10>)
 800c2da:	f009 fb8b 	bl	80159f4 <HAL_TIM_IRQHandler>
}
 800c2de:	bf00      	nop
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	2000651c 	.word	0x2000651c

0800c2e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b082      	sub	sp, #8
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2f8:	d109      	bne.n	800c30e <HAL_TIM_PeriodElapsedCallback+0x26>
		HAL_IncTick();
 800c2fa:	f004 fd03 	bl	8010d04 <HAL_IncTick>
		//		MUXUpdate(&MUX);
		SHIFTREGShift(&SR);
 800c2fe:	4806      	ldr	r0, [pc, #24]	; (800c318 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800c300:	f7f5 fd93 	bl	8001e2a <SHIFTREGShift>
		counter++;
 800c304:	4b05      	ldr	r3, [pc, #20]	; (800c31c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	3301      	adds	r3, #1
 800c30a:	4a04      	ldr	r2, [pc, #16]	; (800c31c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800c30c:	6013      	str	r3, [r2, #0]
	}
}
 800c30e:	bf00      	nop
 800c310:	3708      	adds	r7, #8
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	200099f4 	.word	0x200099f4
 800c31c:	20009b48 	.word	0x20009b48

0800c320 <HAL_I2C_MasterRxCpltCallback>:


//Callback for I2C RXBuffer
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
	if(hi2c == ps4.hi2cps4){
 800c328:	4b05      	ldr	r3, [pc, #20]	; (800c340 <HAL_I2C_MasterRxCpltCallback+0x20>)
 800c32a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c32c:	687a      	ldr	r2, [r7, #4]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d102      	bne.n	800c338 <HAL_I2C_MasterRxCpltCallback+0x18>
		PSxConnectDMA(&ps4);
 800c332:	4803      	ldr	r0, [pc, #12]	; (800c340 <HAL_I2C_MasterRxCpltCallback+0x20>)
 800c334:	f7fc fbf6 	bl	8008b24 <PSxConnectDMA>

//	if(hi2c == PITCH_IMU.hi2cimu)
//	{
//		IMU_I2CHandle(&PITCH_IMU);
//	}
}
 800c338:	bf00      	nop
 800c33a:	3708      	adds	r7, #8
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	2000a3f0 	.word	0x2000a3f0

0800c344 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void){
 800c344:	b580      	push	{r7, lr}
 800c346:	af00      	add	r7, sp, #0
	HAL_I2C_EV_IRQHandler(&hi2c1);
 800c348:	4802      	ldr	r0, [pc, #8]	; (800c354 <I2C1_EV_IRQHandler+0x10>)
 800c34a:	f006 fe27 	bl	8012f9c <HAL_I2C_EV_IRQHandler>

}
 800c34e:	bf00      	nop
 800c350:	bd80      	pop	{r7, pc}
 800c352:	bf00      	nop
 800c354:	2000704c 	.word	0x2000704c

0800c358 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void){
 800c358:	b580      	push	{r7, lr}
 800c35a:	af00      	add	r7, sp, #0
	HAL_I2C_ER_IRQHandler(&hi2c1);
 800c35c:	480a      	ldr	r0, [pc, #40]	; (800c388 <I2C1_ER_IRQHandler+0x30>)
 800c35e:	f006 ff8a 	bl	8013276 <HAL_I2C_ER_IRQHandler>
	HAL_DMA_DeInit(&hi2c1_rx_dma);
 800c362:	480a      	ldr	r0, [pc, #40]	; (800c38c <I2C1_ER_IRQHandler+0x34>)
 800c364:	f005 fd6a 	bl	8011e3c <HAL_DMA_DeInit>
	HAL_I2C_DeInit(&hi2c1);
 800c368:	4807      	ldr	r0, [pc, #28]	; (800c388 <I2C1_ER_IRQHandler+0x30>)
 800c36a:	f006 fcd1 	bl	8012d10 <HAL_I2C_DeInit>

	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 800c36e:	4b08      	ldr	r3, [pc, #32]	; (800c390 <I2C1_ER_IRQHandler+0x38>)
 800c370:	2208      	movs	r2, #8
 800c372:	4906      	ldr	r1, [pc, #24]	; (800c38c <I2C1_ER_IRQHandler+0x34>)
 800c374:	4804      	ldr	r0, [pc, #16]	; (800c388 <I2C1_ER_IRQHandler+0x30>)
 800c376:	f7f7 fc75 	bl	8003c64 <I2CX_DMA_RX_Init>
//
//
//
	PSxInitDMA(&ps4, &hi2c1);
 800c37a:	4903      	ldr	r1, [pc, #12]	; (800c388 <I2C1_ER_IRQHandler+0x30>)
 800c37c:	4805      	ldr	r0, [pc, #20]	; (800c394 <I2C1_ER_IRQHandler+0x3c>)
 800c37e:	f7fc fbe4 	bl	8008b4a <PSxInitDMA>

}
 800c382:	bf00      	nop
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	2000704c 	.word	0x2000704c
 800c38c:	2000a38c 	.word	0x2000a38c
 800c390:	00061a80 	.word	0x00061a80
 800c394:	2000a3f0 	.word	0x2000a3f0

0800c398 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b08c      	sub	sp, #48	; 0x30
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	6879      	ldr	r1, [r7, #4]
 800c3ac:	201c      	movs	r0, #28
 800c3ae:	f005 fc51 	bl	8011c54 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800c3b2:	201c      	movs	r0, #28
 800c3b4:	f005 fc6a 	bl	8011c8c <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	60fb      	str	r3, [r7, #12]
 800c3bc:	4b20      	ldr	r3, [pc, #128]	; (800c440 <HAL_InitTick+0xa8>)
 800c3be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3c0:	4a1f      	ldr	r2, [pc, #124]	; (800c440 <HAL_InitTick+0xa8>)
 800c3c2:	f043 0301 	orr.w	r3, r3, #1
 800c3c6:	6413      	str	r3, [r2, #64]	; 0x40
 800c3c8:	4b1d      	ldr	r3, [pc, #116]	; (800c440 <HAL_InitTick+0xa8>)
 800c3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3cc:	f003 0301 	and.w	r3, r3, #1
 800c3d0:	60fb      	str	r3, [r7, #12]
 800c3d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c3d4:	f107 0210 	add.w	r2, r7, #16
 800c3d8:	f107 0314 	add.w	r3, r7, #20
 800c3dc:	4611      	mov	r1, r2
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f009 f812 	bl	8015408 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800c3e4:	f008 ffe8 	bl	80153b8 <HAL_RCC_GetPCLK1Freq>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	005b      	lsls	r3, r3, #1
 800c3ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800c3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f0:	4a14      	ldr	r2, [pc, #80]	; (800c444 <HAL_InitTick+0xac>)
 800c3f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c3f6:	0c9b      	lsrs	r3, r3, #18
 800c3f8:	3b01      	subs	r3, #1
 800c3fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800c3fc:	4b12      	ldr	r3, [pc, #72]	; (800c448 <HAL_InitTick+0xb0>)
 800c3fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c402:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800c404:	4b10      	ldr	r3, [pc, #64]	; (800c448 <HAL_InitTick+0xb0>)
 800c406:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c40a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800c40c:	4a0e      	ldr	r2, [pc, #56]	; (800c448 <HAL_InitTick+0xb0>)
 800c40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c410:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800c412:	4b0d      	ldr	r3, [pc, #52]	; (800c448 <HAL_InitTick+0xb0>)
 800c414:	2200      	movs	r2, #0
 800c416:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c418:	4b0b      	ldr	r3, [pc, #44]	; (800c448 <HAL_InitTick+0xb0>)
 800c41a:	2200      	movs	r2, #0
 800c41c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800c41e:	480a      	ldr	r0, [pc, #40]	; (800c448 <HAL_InitTick+0xb0>)
 800c420:	f009 f942 	bl	80156a8 <HAL_TIM_Base_Init>
 800c424:	4603      	mov	r3, r0
 800c426:	2b00      	cmp	r3, #0
 800c428:	d104      	bne.n	800c434 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800c42a:	4807      	ldr	r0, [pc, #28]	; (800c448 <HAL_InitTick+0xb0>)
 800c42c:	f009 f98b 	bl	8015746 <HAL_TIM_Base_Start_IT>
 800c430:	4603      	mov	r3, r0
 800c432:	e000      	b.n	800c436 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800c434:	2301      	movs	r3, #1
}
 800c436:	4618      	mov	r0, r3
 800c438:	3730      	adds	r7, #48	; 0x30
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
 800c43e:	bf00      	nop
 800c440:	40023800 	.word	0x40023800
 800c444:	431bde83 	.word	0x431bde83
 800c448:	2000651c 	.word	0x2000651c

0800c44c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800c44c:	b480      	push	{r7}
 800c44e:	af00      	add	r7, sp, #0
	return 1;
 800c450:	2301      	movs	r3, #1
}
 800c452:	4618      	mov	r0, r3
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr

0800c45c <_kill>:

int _kill(int pid, int sig)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800c466:	f00d ff11 	bl	801a28c <__errno>
 800c46a:	4603      	mov	r3, r0
 800c46c:	2216      	movs	r2, #22
 800c46e:	601a      	str	r2, [r3, #0]
	return -1;
 800c470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c474:	4618      	mov	r0, r3
 800c476:	3708      	adds	r7, #8
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <_exit>:

void _exit (int status)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800c484:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f7ff ffe7 	bl	800c45c <_kill>
	while (1) {}		/* Make sure we hang here */
 800c48e:	e7fe      	b.n	800c48e <_exit+0x12>

0800c490 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b086      	sub	sp, #24
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c49c:	2300      	movs	r3, #0
 800c49e:	617b      	str	r3, [r7, #20]
 800c4a0:	e00a      	b.n	800c4b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800c4a2:	f3af 8000 	nop.w
 800c4a6:	4601      	mov	r1, r0
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	1c5a      	adds	r2, r3, #1
 800c4ac:	60ba      	str	r2, [r7, #8]
 800c4ae:	b2ca      	uxtb	r2, r1
 800c4b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	617b      	str	r3, [r7, #20]
 800c4b8:	697a      	ldr	r2, [r7, #20]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	dbf0      	blt.n	800c4a2 <_read+0x12>
	}

return len;
 800c4c0:	687b      	ldr	r3, [r7, #4]
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3718      	adds	r7, #24
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}

0800c4ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800c4ca:	b580      	push	{r7, lr}
 800c4cc:	b086      	sub	sp, #24
 800c4ce:	af00      	add	r7, sp, #0
 800c4d0:	60f8      	str	r0, [r7, #12]
 800c4d2:	60b9      	str	r1, [r7, #8]
 800c4d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	617b      	str	r3, [r7, #20]
 800c4da:	e009      	b.n	800c4f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	1c5a      	adds	r2, r3, #1
 800c4e0:	60ba      	str	r2, [r7, #8]
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	617b      	str	r3, [r7, #20]
 800c4f0:	697a      	ldr	r2, [r7, #20]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	dbf1      	blt.n	800c4dc <_write+0x12>
	}
	return len;
 800c4f8:	687b      	ldr	r3, [r7, #4]
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3718      	adds	r7, #24
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <_close>:

int _close(int file)
{
 800c502:	b480      	push	{r7}
 800c504:	b083      	sub	sp, #12
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
	return -1;
 800c50a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c50e:	4618      	mov	r0, r3
 800c510:	370c      	adds	r7, #12
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr

0800c51a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800c51a:	b480      	push	{r7}
 800c51c:	b083      	sub	sp, #12
 800c51e:	af00      	add	r7, sp, #0
 800c520:	6078      	str	r0, [r7, #4]
 800c522:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c52a:	605a      	str	r2, [r3, #4]
	return 0;
 800c52c:	2300      	movs	r3, #0
}
 800c52e:	4618      	mov	r0, r3
 800c530:	370c      	adds	r7, #12
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr

0800c53a <_isatty>:

int _isatty(int file)
{
 800c53a:	b480      	push	{r7}
 800c53c:	b083      	sub	sp, #12
 800c53e:	af00      	add	r7, sp, #0
 800c540:	6078      	str	r0, [r7, #4]
	return 1;
 800c542:	2301      	movs	r3, #1
}
 800c544:	4618      	mov	r0, r3
 800c546:	370c      	adds	r7, #12
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr

0800c550 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800c550:	b480      	push	{r7}
 800c552:	b085      	sub	sp, #20
 800c554:	af00      	add	r7, sp, #0
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	60b9      	str	r1, [r7, #8]
 800c55a:	607a      	str	r2, [r7, #4]
	return 0;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3714      	adds	r7, #20
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr
	...

0800c56c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b086      	sub	sp, #24
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c574:	4a14      	ldr	r2, [pc, #80]	; (800c5c8 <_sbrk+0x5c>)
 800c576:	4b15      	ldr	r3, [pc, #84]	; (800c5cc <_sbrk+0x60>)
 800c578:	1ad3      	subs	r3, r2, r3
 800c57a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c580:	4b13      	ldr	r3, [pc, #76]	; (800c5d0 <_sbrk+0x64>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d102      	bne.n	800c58e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c588:	4b11      	ldr	r3, [pc, #68]	; (800c5d0 <_sbrk+0x64>)
 800c58a:	4a12      	ldr	r2, [pc, #72]	; (800c5d4 <_sbrk+0x68>)
 800c58c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c58e:	4b10      	ldr	r3, [pc, #64]	; (800c5d0 <_sbrk+0x64>)
 800c590:	681a      	ldr	r2, [r3, #0]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	4413      	add	r3, r2
 800c596:	693a      	ldr	r2, [r7, #16]
 800c598:	429a      	cmp	r2, r3
 800c59a:	d207      	bcs.n	800c5ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800c59c:	f00d fe76 	bl	801a28c <__errno>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	220c      	movs	r2, #12
 800c5a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800c5a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5aa:	e009      	b.n	800c5c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c5ac:	4b08      	ldr	r3, [pc, #32]	; (800c5d0 <_sbrk+0x64>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c5b2:	4b07      	ldr	r3, [pc, #28]	; (800c5d0 <_sbrk+0x64>)
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	4a05      	ldr	r2, [pc, #20]	; (800c5d0 <_sbrk+0x64>)
 800c5bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800c5be:	68fb      	ldr	r3, [r7, #12]
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3718      	adds	r7, #24
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	20020000 	.word	0x20020000
 800c5cc:	00000400 	.word	0x00000400
 800c5d0:	200002ac 	.word	0x200002ac
 800c5d4:	2000aab8 	.word	0x2000aab8

0800c5d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c5dc:	4b08      	ldr	r3, [pc, #32]	; (800c600 <SystemInit+0x28>)
 800c5de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5e2:	4a07      	ldr	r2, [pc, #28]	; (800c600 <SystemInit+0x28>)
 800c5e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c5e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c5ec:	4b04      	ldr	r3, [pc, #16]	; (800c600 <SystemInit+0x28>)
 800c5ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c5f2:	609a      	str	r2, [r3, #8]
#endif
}
 800c5f4:	bf00      	nop
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr
 800c5fe:	bf00      	nop
 800c600:	e000ed00 	.word	0xe000ed00

0800c604 <bldc_interface_init>:
static void(*rx_mcconf_received_func)(void) = 0;
static void(*rx_appconf_received_func)(void) = 0;
static void(*motor_control_set_func)(uint32_t controller_id, motor_control_mode mode, float value) = 0;
static void(*values_requested_func)(uint32_t controller_id) = 0;

void bldc_interface_init(void(*func)(uint32_t controller_id, unsigned char *data, unsigned int len)) {
 800c604:	b480      	push	{r7}
 800c606:	b083      	sub	sp, #12
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
	send_func = func;
 800c60c:	4a04      	ldr	r2, [pc, #16]	; (800c620 <bldc_interface_init+0x1c>)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6013      	str	r3, [r2, #0]
}
 800c612:	bf00      	nop
 800c614:	370c      	adds	r7, #12
 800c616:	46bd      	mov	sp, r7
 800c618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61c:	4770      	bx	lr
 800c61e:	bf00      	nop
 800c620:	20000598 	.word	0x20000598

0800c624 <bldc_interface_process_packet>:
 * The buffer to process.
 *
 * @param len
 * The length of the buffer.
 */
void bldc_interface_process_packet(unsigned char *data, unsigned int len) {
 800c624:	b580      	push	{r7, lr}
 800c626:	b088      	sub	sp, #32
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	6039      	str	r1, [r7, #0]
	if (!len) {
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	f001 8437 	beq.w	800dea4 <bldc_interface_process_packet+0x1880>
		return;
	}

	if (forward_func) {
 800c636:	4bcd      	ldr	r3, [pc, #820]	; (800c96c <bldc_interface_process_packet+0x348>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d006      	beq.n	800c64c <bldc_interface_process_packet+0x28>
		forward_func(data, len);
 800c63e:	4bcb      	ldr	r3, [pc, #812]	; (800c96c <bldc_interface_process_packet+0x348>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	6839      	ldr	r1, [r7, #0]
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	4798      	blx	r3
		return;
 800c648:	f001 bc43 	b.w	800ded2 <bldc_interface_process_packet+0x18ae>
	}

	int32_t ind = 0;
 800c64c:	2300      	movs	r3, #0
 800c64e:	60fb      	str	r3, [r7, #12]
	uint32_t mask = 0;
 800c650:	2300      	movs	r3, #0
 800c652:	617b      	str	r3, [r7, #20]
	uint32_t hahaha = 0;
 800c654:	2300      	movs	r3, #0
 800c656:	61fb      	str	r3, [r7, #28]
	int i = 0;
 800c658:	2300      	movs	r3, #0
 800c65a:	61bb      	str	r3, [r7, #24]
	unsigned char id = data[0];
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	74fb      	strb	r3, [r7, #19]
	data++;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	3301      	adds	r3, #1
 800c666:	607b      	str	r3, [r7, #4]
	len--;
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	3b01      	subs	r3, #1
 800c66c:	603b      	str	r3, [r7, #0]

	switch (id) {
 800c66e:	7cfb      	ldrb	r3, [r7, #19]
 800c670:	2b32      	cmp	r3, #50	; 0x32
 800c672:	f201 8419 	bhi.w	800dea8 <bldc_interface_process_packet+0x1884>
 800c676:	a201      	add	r2, pc, #4	; (adr r2, 800c67c <bldc_interface_process_packet+0x58>)
 800c678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c67c:	0800c749 	.word	0x0800c749
 800c680:	0800dea9 	.word	0x0800dea9
 800c684:	0800dea9 	.word	0x0800dea9
 800c688:	0800dea9 	.word	0x0800dea9
 800c68c:	0800c793 	.word	0x0800c793
 800c690:	0800dea9 	.word	0x0800dea9
 800c694:	0800dea9 	.word	0x0800dea9
 800c698:	0800dea9 	.word	0x0800dea9
 800c69c:	0800dea9 	.word	0x0800dea9
 800c6a0:	0800dea9 	.word	0x0800dea9
 800c6a4:	0800dea9 	.word	0x0800dea9
 800c6a8:	0800dea9 	.word	0x0800dea9
 800c6ac:	0800dea9 	.word	0x0800dea9
 800c6b0:	0800de85 	.word	0x0800de85
 800c6b4:	0800ce0d 	.word	0x0800ce0d
 800c6b8:	0800ce0d 	.word	0x0800ce0d
 800c6bc:	0800de95 	.word	0x0800de95
 800c6c0:	0800d6c9 	.word	0x0800d6c9
 800c6c4:	0800d6c9 	.word	0x0800d6c9
 800c6c8:	0800dea9 	.word	0x0800dea9
 800c6cc:	0800dea9 	.word	0x0800dea9
 800c6d0:	0800cd8d 	.word	0x0800cd8d
 800c6d4:	0800cdad 	.word	0x0800cdad
 800c6d8:	0800dea9 	.word	0x0800dea9
 800c6dc:	0800dced 	.word	0x0800dced
 800c6e0:	0800dea9 	.word	0x0800dea9
 800c6e4:	0800dea9 	.word	0x0800dea9
 800c6e8:	0800dea9 	.word	0x0800dea9
 800c6ec:	0800dea9 	.word	0x0800dea9
 800c6f0:	0800dea9 	.word	0x0800dea9
 800c6f4:	0800dea9 	.word	0x0800dea9
 800c6f8:	0800dd95 	.word	0x0800dd95
 800c6fc:	0800ddf1 	.word	0x0800ddf1
 800c700:	0800de4d 	.word	0x0800de4d
 800c704:	0800dea9 	.word	0x0800dea9
 800c708:	0800dea9 	.word	0x0800dea9
 800c70c:	0800dea9 	.word	0x0800dea9
 800c710:	0800dea9 	.word	0x0800dea9
 800c714:	0800dea9 	.word	0x0800dea9
 800c718:	0800dea9 	.word	0x0800dea9
 800c71c:	0800dea9 	.word	0x0800dea9
 800c720:	0800dea9 	.word	0x0800dea9
 800c724:	0800dea9 	.word	0x0800dea9
 800c728:	0800dea9 	.word	0x0800dea9
 800c72c:	0800dea9 	.word	0x0800dea9
 800c730:	0800dea9 	.word	0x0800dea9
 800c734:	0800dea9 	.word	0x0800dea9
 800c738:	0800dea9 	.word	0x0800dea9
 800c73c:	0800dea9 	.word	0x0800dea9
 800c740:	0800dea9 	.word	0x0800dea9
 800c744:	0800c9d1 	.word	0x0800c9d1
	case COMM_FW_VERSION:
		if (len == 2) {
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	2b02      	cmp	r3, #2
 800c74c:	d117      	bne.n	800c77e <bldc_interface_process_packet+0x15a>
			ind = 0;
 800c74e:	2300      	movs	r3, #0
 800c750:	60fb      	str	r3, [r7, #12]
			fw_major = data[ind++];
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	1c5a      	adds	r2, r3, #1
 800c756:	60fa      	str	r2, [r7, #12]
 800c758:	461a      	mov	r2, r3
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	4413      	add	r3, r2
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	461a      	mov	r2, r3
 800c762:	4b83      	ldr	r3, [pc, #524]	; (800c970 <bldc_interface_process_packet+0x34c>)
 800c764:	601a      	str	r2, [r3, #0]
			fw_minor = data[ind++];
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	1c5a      	adds	r2, r3, #1
 800c76a:	60fa      	str	r2, [r7, #12]
 800c76c:	461a      	mov	r2, r3
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	4413      	add	r3, r2
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	461a      	mov	r2, r3
 800c776:	4b7f      	ldr	r3, [pc, #508]	; (800c974 <bldc_interface_process_packet+0x350>)
 800c778:	601a      	str	r2, [r3, #0]
		} else {
			fw_major = -1;
			fw_minor = -1;
		}
		break;
 800c77a:	f001 bbaa 	b.w	800ded2 <bldc_interface_process_packet+0x18ae>
			fw_major = -1;
 800c77e:	4b7c      	ldr	r3, [pc, #496]	; (800c970 <bldc_interface_process_packet+0x34c>)
 800c780:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c784:	601a      	str	r2, [r3, #0]
			fw_minor = -1;
 800c786:	4b7b      	ldr	r3, [pc, #492]	; (800c974 <bldc_interface_process_packet+0x350>)
 800c788:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c78c:	601a      	str	r2, [r3, #0]
		break;
 800c78e:	f001 bba0 	b.w	800ded2 <bldc_interface_process_packet+0x18ae>
	case COMM_WRITE_NEW_APP_DATA:
		// TODO
		break;

	case COMM_GET_VALUES:
		ind = 0;
 800c792:	2300      	movs	r3, #0
 800c794:	60fb      	str	r3, [r7, #12]
		values.temp_mos = buffer_get_float16(data, 1e1, &ind);
 800c796:	f107 030c 	add.w	r3, r7, #12
 800c79a:	4619      	mov	r1, r3
 800c79c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f001 fca0 	bl	800e0e6 <buffer_get_float16>
 800c7a6:	eef0 7a40 	vmov.f32	s15, s0
 800c7aa:	4b73      	ldr	r3, [pc, #460]	; (800c978 <bldc_interface_process_packet+0x354>)
 800c7ac:	edc3 7a01 	vstr	s15, [r3, #4]
		values.temp_motor = buffer_get_float16(data, 1e1, &ind);
 800c7b0:	f107 030c 	add.w	r3, r7, #12
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f001 fc93 	bl	800e0e6 <buffer_get_float16>
 800c7c0:	eef0 7a40 	vmov.f32	s15, s0
 800c7c4:	4b6c      	ldr	r3, [pc, #432]	; (800c978 <bldc_interface_process_packet+0x354>)
 800c7c6:	edc3 7a02 	vstr	s15, [r3, #8]
		values.current_motor = buffer_get_float32(data, 1e2, &ind);
 800c7ca:	f107 030c 	add.w	r3, r7, #12
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 800c97c <bldc_interface_process_packet+0x358>
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f001 fca1 	bl	800e11c <buffer_get_float32>
 800c7da:	eef0 7a40 	vmov.f32	s15, s0
 800c7de:	4b66      	ldr	r3, [pc, #408]	; (800c978 <bldc_interface_process_packet+0x354>)
 800c7e0:	edc3 7a03 	vstr	s15, [r3, #12]
		values.current_in = buffer_get_float32(data, 1e2, &ind);
 800c7e4:	f107 030c 	add.w	r3, r7, #12
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	ed9f 0a64 	vldr	s0, [pc, #400]	; 800c97c <bldc_interface_process_packet+0x358>
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f001 fc94 	bl	800e11c <buffer_get_float32>
 800c7f4:	eef0 7a40 	vmov.f32	s15, s0
 800c7f8:	4b5f      	ldr	r3, [pc, #380]	; (800c978 <bldc_interface_process_packet+0x354>)
 800c7fa:	edc3 7a04 	vstr	s15, [r3, #16]
		values.id = buffer_get_float32(data, 1e2, &ind);
 800c7fe:	f107 030c 	add.w	r3, r7, #12
 800c802:	4619      	mov	r1, r3
 800c804:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800c97c <bldc_interface_process_packet+0x358>
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f001 fc87 	bl	800e11c <buffer_get_float32>
 800c80e:	eef0 7a40 	vmov.f32	s15, s0
 800c812:	4b59      	ldr	r3, [pc, #356]	; (800c978 <bldc_interface_process_packet+0x354>)
 800c814:	edc3 7a05 	vstr	s15, [r3, #20]
		values.iq = buffer_get_float32(data, 1e2, &ind);
 800c818:	f107 030c 	add.w	r3, r7, #12
 800c81c:	4619      	mov	r1, r3
 800c81e:	ed9f 0a57 	vldr	s0, [pc, #348]	; 800c97c <bldc_interface_process_packet+0x358>
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f001 fc7a 	bl	800e11c <buffer_get_float32>
 800c828:	eef0 7a40 	vmov.f32	s15, s0
 800c82c:	4b52      	ldr	r3, [pc, #328]	; (800c978 <bldc_interface_process_packet+0x354>)
 800c82e:	edc3 7a06 	vstr	s15, [r3, #24]
		values.duty_now = buffer_get_float16(data, 1e3, &ind);
 800c832:	f107 030c 	add.w	r3, r7, #12
 800c836:	4619      	mov	r1, r3
 800c838:	ed9f 0a51 	vldr	s0, [pc, #324]	; 800c980 <bldc_interface_process_packet+0x35c>
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f001 fc52 	bl	800e0e6 <buffer_get_float16>
 800c842:	eef0 7a40 	vmov.f32	s15, s0
 800c846:	4b4c      	ldr	r3, [pc, #304]	; (800c978 <bldc_interface_process_packet+0x354>)
 800c848:	edc3 7a08 	vstr	s15, [r3, #32]
		values.rpm = buffer_get_float32(data, 1e0, &ind);
 800c84c:	f107 030c 	add.w	r3, r7, #12
 800c850:	4619      	mov	r1, r3
 800c852:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f001 fc60 	bl	800e11c <buffer_get_float32>
 800c85c:	eef0 7a40 	vmov.f32	s15, s0
 800c860:	4b45      	ldr	r3, [pc, #276]	; (800c978 <bldc_interface_process_packet+0x354>)
 800c862:	edc3 7a07 	vstr	s15, [r3, #28]
		values.v_in = buffer_get_float16(data, 1e1, &ind);
 800c866:	f107 030c 	add.w	r3, r7, #12
 800c86a:	4619      	mov	r1, r3
 800c86c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f001 fc38 	bl	800e0e6 <buffer_get_float16>
 800c876:	eef0 7a40 	vmov.f32	s15, s0
 800c87a:	4b3f      	ldr	r3, [pc, #252]	; (800c978 <bldc_interface_process_packet+0x354>)
 800c87c:	edc3 7a00 	vstr	s15, [r3]
		values.amp_hours = buffer_get_float32(data, 1e4, &ind);
 800c880:	f107 030c 	add.w	r3, r7, #12
 800c884:	4619      	mov	r1, r3
 800c886:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 800c984 <bldc_interface_process_packet+0x360>
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f001 fc46 	bl	800e11c <buffer_get_float32>
 800c890:	eef0 7a40 	vmov.f32	s15, s0
 800c894:	4b38      	ldr	r3, [pc, #224]	; (800c978 <bldc_interface_process_packet+0x354>)
 800c896:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		values.amp_hours_charged = buffer_get_float32(data, 1e4, &ind);
 800c89a:	f107 030c 	add.w	r3, r7, #12
 800c89e:	4619      	mov	r1, r3
 800c8a0:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800c984 <bldc_interface_process_packet+0x360>
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f001 fc39 	bl	800e11c <buffer_get_float32>
 800c8aa:	eef0 7a40 	vmov.f32	s15, s0
 800c8ae:	4b32      	ldr	r3, [pc, #200]	; (800c978 <bldc_interface_process_packet+0x354>)
 800c8b0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		values.watt_hours = buffer_get_float32(data, 1e4, &ind);
 800c8b4:	f107 030c 	add.w	r3, r7, #12
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800c984 <bldc_interface_process_packet+0x360>
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f001 fc2c 	bl	800e11c <buffer_get_float32>
 800c8c4:	eef0 7a40 	vmov.f32	s15, s0
 800c8c8:	4b2b      	ldr	r3, [pc, #172]	; (800c978 <bldc_interface_process_packet+0x354>)
 800c8ca:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		values.watt_hours_charged = buffer_get_float32(data, 1e4, &ind);
 800c8ce:	f107 030c 	add.w	r3, r7, #12
 800c8d2:	4619      	mov	r1, r3
 800c8d4:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800c984 <bldc_interface_process_packet+0x360>
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f001 fc1f 	bl	800e11c <buffer_get_float32>
 800c8de:	eef0 7a40 	vmov.f32	s15, s0
 800c8e2:	4b25      	ldr	r3, [pc, #148]	; (800c978 <bldc_interface_process_packet+0x354>)
 800c8e4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		values.tachometer = buffer_get_int32(data, &ind);
 800c8e8:	f107 030c 	add.w	r3, r7, #12
 800c8ec:	4619      	mov	r1, r3
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f001 fb99 	bl	800e026 <buffer_get_int32>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	4a20      	ldr	r2, [pc, #128]	; (800c978 <bldc_interface_process_packet+0x354>)
 800c8f8:	6353      	str	r3, [r2, #52]	; 0x34
		values.tachometer_abs = buffer_get_int32(data, &ind);
 800c8fa:	f107 030c 	add.w	r3, r7, #12
 800c8fe:	4619      	mov	r1, r3
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f001 fb90 	bl	800e026 <buffer_get_int32>
 800c906:	4603      	mov	r3, r0
 800c908:	4a1b      	ldr	r2, [pc, #108]	; (800c978 <bldc_interface_process_packet+0x354>)
 800c90a:	6393      	str	r3, [r2, #56]	; 0x38
		values.fault_code = (mc_fault_code)data[ind++];
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	1c5a      	adds	r2, r3, #1
 800c910:	60fa      	str	r2, [r7, #12]
 800c912:	461a      	mov	r2, r3
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	4413      	add	r3, r2
 800c918:	781a      	ldrb	r2, [r3, #0]
 800c91a:	4b17      	ldr	r3, [pc, #92]	; (800c978 <bldc_interface_process_packet+0x354>)
 800c91c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		if (ind < (int)len) {
 800c920:	68fa      	ldr	r2, [r7, #12]
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	429a      	cmp	r2, r3
 800c926:	da0d      	bge.n	800c944 <bldc_interface_process_packet+0x320>
			values.pid_pos = buffer_get_float32(data, 1e6, &ind);
 800c928:	f107 030c 	add.w	r3, r7, #12
 800c92c:	4619      	mov	r1, r3
 800c92e:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800c988 <bldc_interface_process_packet+0x364>
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f001 fbf2 	bl	800e11c <buffer_get_float32>
 800c938:	eef0 7a40 	vmov.f32	s15, s0
 800c93c:	4b0e      	ldr	r3, [pc, #56]	; (800c978 <bldc_interface_process_packet+0x354>)
 800c93e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 800c942:	e003      	b.n	800c94c <bldc_interface_process_packet+0x328>
		} else {
			values.pid_pos = 0.0;
 800c944:	4b0c      	ldr	r3, [pc, #48]	; (800c978 <bldc_interface_process_packet+0x354>)
 800c946:	f04f 0200 	mov.w	r2, #0
 800c94a:	645a      	str	r2, [r3, #68]	; 0x44
		}

		if (ind < (int)len) {
 800c94c:	68fa      	ldr	r2, [r7, #12]
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	429a      	cmp	r2, r3
 800c952:	da1b      	bge.n	800c98c <bldc_interface_process_packet+0x368>
			values.vesc_id = data[ind++];
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	1c5a      	adds	r2, r3, #1
 800c958:	60fa      	str	r2, [r7, #12]
 800c95a:	461a      	mov	r2, r3
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	4413      	add	r3, r2
 800c960:	781a      	ldrb	r2, [r3, #0]
 800c962:	4b05      	ldr	r3, [pc, #20]	; (800c978 <bldc_interface_process_packet+0x354>)
 800c964:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800c968:	e014      	b.n	800c994 <bldc_interface_process_packet+0x370>
 800c96a:	bf00      	nop
 800c96c:	2000059c 	.word	0x2000059c
 800c970:	20000310 	.word	0x20000310
 800c974:	20000314 	.word	0x20000314
 800c978:	200002b0 	.word	0x200002b0
 800c97c:	42c80000 	.word	0x42c80000
 800c980:	447a0000 	.word	0x447a0000
 800c984:	461c4000 	.word	0x461c4000
 800c988:	49742400 	.word	0x49742400
		} else {
			values.vesc_id = 255;
 800c98c:	4b0c      	ldr	r3, [pc, #48]	; (800c9c0 <bldc_interface_process_packet+0x39c>)
 800c98e:	22ff      	movs	r2, #255	; 0xff
 800c990:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		}

		rx_value_buf = values;
 800c994:	4a0b      	ldr	r2, [pc, #44]	; (800c9c4 <bldc_interface_process_packet+0x3a0>)
 800c996:	4b0a      	ldr	r3, [pc, #40]	; (800c9c0 <bldc_interface_process_packet+0x39c>)
 800c998:	4610      	mov	r0, r2
 800c99a:	4619      	mov	r1, r3
 800c99c:	2360      	movs	r3, #96	; 0x60
 800c99e:	461a      	mov	r2, r3
 800c9a0:	f00d fca6 	bl	801a2f0 <memcpy>

		if (rx_value_func) {
 800c9a4:	4b08      	ldr	r3, [pc, #32]	; (800c9c8 <bldc_interface_process_packet+0x3a4>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d003      	beq.n	800c9b4 <bldc_interface_process_packet+0x390>
			rx_value_func(&values);
 800c9ac:	4b06      	ldr	r3, [pc, #24]	; (800c9c8 <bldc_interface_process_packet+0x3a4>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4803      	ldr	r0, [pc, #12]	; (800c9c0 <bldc_interface_process_packet+0x39c>)
 800c9b2:	4798      	blx	r3
		}

		rx_value_complete = true;
 800c9b4:	4b05      	ldr	r3, [pc, #20]	; (800c9cc <bldc_interface_process_packet+0x3a8>)
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	701a      	strb	r2, [r3, #0]

		break;
 800c9ba:	f001 ba8a 	b.w	800ded2 <bldc_interface_process_packet+0x18ae>
 800c9be:	bf00      	nop
 800c9c0:	200002b0 	.word	0x200002b0
 800c9c4:	20007780 	.word	0x20007780
 800c9c8:	200005a0 	.word	0x200005a0
 800c9cc:	2000a6d4 	.word	0x2000a6d4

	case COMM_GET_VALUES_SELECTIVE:
		ind = 0;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	60fb      	str	r3, [r7, #12]
		mask = buffer_get_uint32(data, &ind);
 800c9d4:	f107 030c 	add.w	r3, r7, #12
 800c9d8:	4619      	mov	r1, r3
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f001 fb53 	bl	800e086 <buffer_get_uint32>
 800c9e0:	6178      	str	r0, [r7, #20]

		if (mask & ((uint32_t)1 << 0)) {
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	f003 0301 	and.w	r3, r3, #1
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d00e      	beq.n	800ca0a <bldc_interface_process_packet+0x3e6>
			values.temp_mos = buffer_get_float16(data, 1e1, &ind);
 800c9ec:	f107 030c 	add.w	r3, r7, #12
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f001 fb75 	bl	800e0e6 <buffer_get_float16>
 800c9fc:	eef0 7a40 	vmov.f32	s15, s0
 800ca00:	4bc6      	ldr	r3, [pc, #792]	; (800cd1c <bldc_interface_process_packet+0x6f8>)
 800ca02:	edc3 7a01 	vstr	s15, [r3, #4]
			hahaha = 0;
 800ca06:	2300      	movs	r3, #0
 800ca08:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 1)) {
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	f003 0302 	and.w	r3, r3, #2
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d00e      	beq.n	800ca32 <bldc_interface_process_packet+0x40e>
			values.temp_motor = buffer_get_float16(data, 1e1, &ind);
 800ca14:	f107 030c 	add.w	r3, r7, #12
 800ca18:	4619      	mov	r1, r3
 800ca1a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f001 fb61 	bl	800e0e6 <buffer_get_float16>
 800ca24:	eef0 7a40 	vmov.f32	s15, s0
 800ca28:	4bbc      	ldr	r3, [pc, #752]	; (800cd1c <bldc_interface_process_packet+0x6f8>)
 800ca2a:	edc3 7a02 	vstr	s15, [r3, #8]
			hahaha = 1;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 2)) {
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	f003 0304 	and.w	r3, r3, #4
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d00e      	beq.n	800ca5a <bldc_interface_process_packet+0x436>
			values.current_motor = buffer_get_float32(data, 1e2, &ind);
 800ca3c:	f107 030c 	add.w	r3, r7, #12
 800ca40:	4619      	mov	r1, r3
 800ca42:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 800cd20 <bldc_interface_process_packet+0x6fc>
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f001 fb68 	bl	800e11c <buffer_get_float32>
 800ca4c:	eef0 7a40 	vmov.f32	s15, s0
 800ca50:	4bb2      	ldr	r3, [pc, #712]	; (800cd1c <bldc_interface_process_packet+0x6f8>)
 800ca52:	edc3 7a03 	vstr	s15, [r3, #12]
			hahaha = 2;
 800ca56:	2302      	movs	r3, #2
 800ca58:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 3)) {
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	f003 0308 	and.w	r3, r3, #8
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d00e      	beq.n	800ca82 <bldc_interface_process_packet+0x45e>
			values.current_in = buffer_get_float32(data, 1e2, &ind);
 800ca64:	f107 030c 	add.w	r3, r7, #12
 800ca68:	4619      	mov	r1, r3
 800ca6a:	ed9f 0aad 	vldr	s0, [pc, #692]	; 800cd20 <bldc_interface_process_packet+0x6fc>
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f001 fb54 	bl	800e11c <buffer_get_float32>
 800ca74:	eef0 7a40 	vmov.f32	s15, s0
 800ca78:	4ba8      	ldr	r3, [pc, #672]	; (800cd1c <bldc_interface_process_packet+0x6f8>)
 800ca7a:	edc3 7a04 	vstr	s15, [r3, #16]
			hahaha = 3;
 800ca7e:	2303      	movs	r3, #3
 800ca80:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 4)) {
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	f003 0310 	and.w	r3, r3, #16
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d00e      	beq.n	800caaa <bldc_interface_process_packet+0x486>
			values.id = buffer_get_float32(data, 1e2, &ind);
 800ca8c:	f107 030c 	add.w	r3, r7, #12
 800ca90:	4619      	mov	r1, r3
 800ca92:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 800cd20 <bldc_interface_process_packet+0x6fc>
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f001 fb40 	bl	800e11c <buffer_get_float32>
 800ca9c:	eef0 7a40 	vmov.f32	s15, s0
 800caa0:	4b9e      	ldr	r3, [pc, #632]	; (800cd1c <bldc_interface_process_packet+0x6f8>)
 800caa2:	edc3 7a05 	vstr	s15, [r3, #20]
			hahaha = 4;
 800caa6:	2304      	movs	r3, #4
 800caa8:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 5)) {
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	f003 0320 	and.w	r3, r3, #32
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d00e      	beq.n	800cad2 <bldc_interface_process_packet+0x4ae>
			values.iq = buffer_get_float32(data, 1e2, &ind);
 800cab4:	f107 030c 	add.w	r3, r7, #12
 800cab8:	4619      	mov	r1, r3
 800caba:	ed9f 0a99 	vldr	s0, [pc, #612]	; 800cd20 <bldc_interface_process_packet+0x6fc>
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f001 fb2c 	bl	800e11c <buffer_get_float32>
 800cac4:	eef0 7a40 	vmov.f32	s15, s0
 800cac8:	4b94      	ldr	r3, [pc, #592]	; (800cd1c <bldc_interface_process_packet+0x6f8>)
 800caca:	edc3 7a06 	vstr	s15, [r3, #24]
			hahaha = 5;
 800cace:	2305      	movs	r3, #5
 800cad0:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 6)) {
 800cad2:	697b      	ldr	r3, [r7, #20]
 800cad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d00e      	beq.n	800cafa <bldc_interface_process_packet+0x4d6>
			values.duty_now = buffer_get_float16(data, 1e3, &ind);
 800cadc:	f107 030c 	add.w	r3, r7, #12
 800cae0:	4619      	mov	r1, r3
 800cae2:	ed9f 0a92 	vldr	s0, [pc, #584]	; 800cd2c <bldc_interface_process_packet+0x708>
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f001 fafd 	bl	800e0e6 <buffer_get_float16>
 800caec:	eef0 7a40 	vmov.f32	s15, s0
 800caf0:	4b8a      	ldr	r3, [pc, #552]	; (800cd1c <bldc_interface_process_packet+0x6f8>)
 800caf2:	edc3 7a08 	vstr	s15, [r3, #32]
			hahaha = 6;
 800caf6:	2306      	movs	r3, #6
 800caf8:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 7)) {
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d00e      	beq.n	800cb22 <bldc_interface_process_packet+0x4fe>
			values.rpm = buffer_get_float32(data, 1e0, &ind); // has to be divided by pole pairs
 800cb04:	f107 030c 	add.w	r3, r7, #12
 800cb08:	4619      	mov	r1, r3
 800cb0a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f001 fb04 	bl	800e11c <buffer_get_float32>
 800cb14:	eef0 7a40 	vmov.f32	s15, s0
 800cb18:	4b80      	ldr	r3, [pc, #512]	; (800cd1c <bldc_interface_process_packet+0x6f8>)
 800cb1a:	edc3 7a07 	vstr	s15, [r3, #28]
			hahaha = 7;
 800cb1e:	2307      	movs	r3, #7
 800cb20:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 8)) {
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d00e      	beq.n	800cb4a <bldc_interface_process_packet+0x526>
			values.v_in = buffer_get_float16(data, 1e1, &ind);
 800cb2c:	f107 030c 	add.w	r3, r7, #12
 800cb30:	4619      	mov	r1, r3
 800cb32:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f001 fad5 	bl	800e0e6 <buffer_get_float16>
 800cb3c:	eef0 7a40 	vmov.f32	s15, s0
 800cb40:	4b76      	ldr	r3, [pc, #472]	; (800cd1c <bldc_interface_process_packet+0x6f8>)
 800cb42:	edc3 7a00 	vstr	s15, [r3]
			hahaha = 8;
 800cb46:	2308      	movs	r3, #8
 800cb48:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 9)) {
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d00e      	beq.n	800cb72 <bldc_interface_process_packet+0x54e>
			values.amp_hours = buffer_get_float32(data, 1e4, &ind);
 800cb54:	f107 030c 	add.w	r3, r7, #12
 800cb58:	4619      	mov	r1, r3
 800cb5a:	ed9f 0a72 	vldr	s0, [pc, #456]	; 800cd24 <bldc_interface_process_packet+0x700>
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f001 fadc 	bl	800e11c <buffer_get_float32>
 800cb64:	eef0 7a40 	vmov.f32	s15, s0
 800cb68:	4b6c      	ldr	r3, [pc, #432]	; (800cd1c <bldc_interface_process_packet+0x6f8>)
 800cb6a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			hahaha = 9;
 800cb6e:	2309      	movs	r3, #9
 800cb70:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 10)) {
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d00e      	beq.n	800cb9a <bldc_interface_process_packet+0x576>
			values.amp_hours_charged = buffer_get_float32(data, 1e4, &ind);
 800cb7c:	f107 030c 	add.w	r3, r7, #12
 800cb80:	4619      	mov	r1, r3
 800cb82:	ed9f 0a68 	vldr	s0, [pc, #416]	; 800cd24 <bldc_interface_process_packet+0x700>
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f001 fac8 	bl	800e11c <buffer_get_float32>
 800cb8c:	eef0 7a40 	vmov.f32	s15, s0
 800cb90:	4b62      	ldr	r3, [pc, #392]	; (800cd1c <bldc_interface_process_packet+0x6f8>)
 800cb92:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			hahaha = 10;
 800cb96:	230a      	movs	r3, #10
 800cb98:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 11)) {
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d00e      	beq.n	800cbc2 <bldc_interface_process_packet+0x59e>
			values.watt_hours = buffer_get_float32(data, 1e4, &ind);
 800cba4:	f107 030c 	add.w	r3, r7, #12
 800cba8:	4619      	mov	r1, r3
 800cbaa:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 800cd24 <bldc_interface_process_packet+0x700>
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f001 fab4 	bl	800e11c <buffer_get_float32>
 800cbb4:	eef0 7a40 	vmov.f32	s15, s0
 800cbb8:	4b58      	ldr	r3, [pc, #352]	; (800cd1c <bldc_interface_process_packet+0x6f8>)
 800cbba:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			hahaha = 11;
 800cbbe:	230b      	movs	r3, #11
 800cbc0:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 12)) {
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d00e      	beq.n	800cbea <bldc_interface_process_packet+0x5c6>
			values.watt_hours_charged = buffer_get_float32(data, 1e4, &ind);
 800cbcc:	f107 030c 	add.w	r3, r7, #12
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	ed9f 0a54 	vldr	s0, [pc, #336]	; 800cd24 <bldc_interface_process_packet+0x700>
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f001 faa0 	bl	800e11c <buffer_get_float32>
 800cbdc:	eef0 7a40 	vmov.f32	s15, s0
 800cbe0:	4b4e      	ldr	r3, [pc, #312]	; (800cd1c <bldc_interface_process_packet+0x6f8>)
 800cbe2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			hahaha = 12;
 800cbe6:	230c      	movs	r3, #12
 800cbe8:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 13)) {
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d00a      	beq.n	800cc0a <bldc_interface_process_packet+0x5e6>
			values.tachometer = buffer_get_int32(data, &ind);
 800cbf4:	f107 030c 	add.w	r3, r7, #12
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f001 fa13 	bl	800e026 <buffer_get_int32>
 800cc00:	4603      	mov	r3, r0
 800cc02:	4a46      	ldr	r2, [pc, #280]	; (800cd1c <bldc_interface_process_packet+0x6f8>)
 800cc04:	6353      	str	r3, [r2, #52]	; 0x34
			hahaha = 13;
 800cc06:	230d      	movs	r3, #13
 800cc08:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 14)) {
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d00a      	beq.n	800cc2a <bldc_interface_process_packet+0x606>
			values.tachometer_abs = buffer_get_int32(data, &ind);
 800cc14:	f107 030c 	add.w	r3, r7, #12
 800cc18:	4619      	mov	r1, r3
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f001 fa03 	bl	800e026 <buffer_get_int32>
 800cc20:	4603      	mov	r3, r0
 800cc22:	4a3e      	ldr	r2, [pc, #248]	; (800cd1c <bldc_interface_process_packet+0x6f8>)
 800cc24:	6393      	str	r3, [r2, #56]	; 0x38
			hahaha = 14;
 800cc26:	230e      	movs	r3, #14
 800cc28:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 15)) {
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d00b      	beq.n	800cc4c <bldc_interface_process_packet+0x628>
			values.fault_code = (mc_fault_code)data[ind++];
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	1c5a      	adds	r2, r3, #1
 800cc38:	60fa      	str	r2, [r7, #12]
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	4413      	add	r3, r2
 800cc40:	781a      	ldrb	r2, [r3, #0]
 800cc42:	4b36      	ldr	r3, [pc, #216]	; (800cd1c <bldc_interface_process_packet+0x6f8>)
 800cc44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			hahaha = 15;
 800cc48:	230f      	movs	r3, #15
 800cc4a:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 16)) {
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d00e      	beq.n	800cc74 <bldc_interface_process_packet+0x650>
			values.pid_pos = buffer_get_float32(data, 1e6, &ind);
 800cc56:	f107 030c 	add.w	r3, r7, #12
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800cd28 <bldc_interface_process_packet+0x704>
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f001 fa5b 	bl	800e11c <buffer_get_float32>
 800cc66:	eef0 7a40 	vmov.f32	s15, s0
 800cc6a:	4b2c      	ldr	r3, [pc, #176]	; (800cd1c <bldc_interface_process_packet+0x6f8>)
 800cc6c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			hahaha = 16;
 800cc70:	2310      	movs	r3, #16
 800cc72:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 17)) {
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d00b      	beq.n	800cc96 <bldc_interface_process_packet+0x672>
			values.vesc_id = data[ind++];
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	1c5a      	adds	r2, r3, #1
 800cc82:	60fa      	str	r2, [r7, #12]
 800cc84:	461a      	mov	r2, r3
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	4413      	add	r3, r2
 800cc8a:	781a      	ldrb	r2, [r3, #0]
 800cc8c:	4b23      	ldr	r3, [pc, #140]	; (800cd1c <bldc_interface_process_packet+0x6f8>)
 800cc8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			hahaha = 17;
 800cc92:	2311      	movs	r3, #17
 800cc94:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 18)) {
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d028      	beq.n	800ccf2 <bldc_interface_process_packet+0x6ce>
			values.temp_mos1 = buffer_get_float16(data, 1e1, &ind);
 800cca0:	f107 030c 	add.w	r3, r7, #12
 800cca4:	4619      	mov	r1, r3
 800cca6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f001 fa1b 	bl	800e0e6 <buffer_get_float16>
 800ccb0:	eef0 7a40 	vmov.f32	s15, s0
 800ccb4:	4b19      	ldr	r3, [pc, #100]	; (800cd1c <bldc_interface_process_packet+0x6f8>)
 800ccb6:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			values.temp_mos2 = buffer_get_float16(data, 1e1, &ind);
 800ccba:	f107 030c 	add.w	r3, r7, #12
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f001 fa0e 	bl	800e0e6 <buffer_get_float16>
 800ccca:	eef0 7a40 	vmov.f32	s15, s0
 800ccce:	4b13      	ldr	r3, [pc, #76]	; (800cd1c <bldc_interface_process_packet+0x6f8>)
 800ccd0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			values.temp_mos3 = buffer_get_float16(data, 1e1, &ind);
 800ccd4:	f107 030c 	add.w	r3, r7, #12
 800ccd8:	4619      	mov	r1, r3
 800ccda:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f001 fa01 	bl	800e0e6 <buffer_get_float16>
 800cce4:	eef0 7a40 	vmov.f32	s15, s0
 800cce8:	4b0c      	ldr	r3, [pc, #48]	; (800cd1c <bldc_interface_process_packet+0x6f8>)
 800ccea:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			hahaha = 18;
 800ccee:	2312      	movs	r3, #18
 800ccf0:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 19)) {
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d019      	beq.n	800cd30 <bldc_interface_process_packet+0x70c>
			values.vd = buffer_get_float32(data, 1e3, &ind);
 800ccfc:	f107 030c 	add.w	r3, r7, #12
 800cd00:	4619      	mov	r1, r3
 800cd02:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800cd2c <bldc_interface_process_packet+0x708>
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f001 fa08 	bl	800e11c <buffer_get_float32>
 800cd0c:	eef0 7a40 	vmov.f32	s15, s0
 800cd10:	4b02      	ldr	r3, [pc, #8]	; (800cd1c <bldc_interface_process_packet+0x6f8>)
 800cd12:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			hahaha = 19;
 800cd16:	2313      	movs	r3, #19
 800cd18:	61fb      	str	r3, [r7, #28]
 800cd1a:	e009      	b.n	800cd30 <bldc_interface_process_packet+0x70c>
 800cd1c:	200002b0 	.word	0x200002b0
 800cd20:	42c80000 	.word	0x42c80000
 800cd24:	461c4000 	.word	0x461c4000
 800cd28:	49742400 	.word	0x49742400
 800cd2c:	447a0000 	.word	0x447a0000
		}
		if (mask & ((uint32_t)1 << 20)) {
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d00e      	beq.n	800cd58 <bldc_interface_process_packet+0x734>
			values.vq = buffer_get_float32(data, 1e3, &ind);
 800cd3a:	f107 030c 	add.w	r3, r7, #12
 800cd3e:	4619      	mov	r1, r3
 800cd40:	ed1f 0a06 	vldr	s0, [pc, #-24]	; 800cd2c <bldc_interface_process_packet+0x708>
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f001 f9e9 	bl	800e11c <buffer_get_float32>
 800cd4a:	eef0 7a40 	vmov.f32	s15, s0
 800cd4e:	4b26      	ldr	r3, [pc, #152]	; (800cde8 <bldc_interface_process_packet+0x7c4>)
 800cd50:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			hahaha = 20;
 800cd54:	2314      	movs	r3, #20
 800cd56:	61fb      	str	r3, [r7, #28]
		}

		rx_value_buf = values;
 800cd58:	4a24      	ldr	r2, [pc, #144]	; (800cdec <bldc_interface_process_packet+0x7c8>)
 800cd5a:	4b23      	ldr	r3, [pc, #140]	; (800cde8 <bldc_interface_process_packet+0x7c4>)
 800cd5c:	4610      	mov	r0, r2
 800cd5e:	4619      	mov	r1, r3
 800cd60:	2360      	movs	r3, #96	; 0x60
 800cd62:	461a      	mov	r2, r3
 800cd64:	f00d fac4 	bl	801a2f0 <memcpy>

		if(rx_value_selective_print){
 800cd68:	4b21      	ldr	r3, [pc, #132]	; (800cdf0 <bldc_interface_process_packet+0x7cc>)
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d008      	beq.n	800cd82 <bldc_interface_process_packet+0x75e>
			if (rx_value_selective_func) {
 800cd70:	4b20      	ldr	r3, [pc, #128]	; (800cdf4 <bldc_interface_process_packet+0x7d0>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d004      	beq.n	800cd82 <bldc_interface_process_packet+0x75e>
				rx_value_selective_func(hahaha, &values);
 800cd78:	4b1e      	ldr	r3, [pc, #120]	; (800cdf4 <bldc_interface_process_packet+0x7d0>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	491a      	ldr	r1, [pc, #104]	; (800cde8 <bldc_interface_process_packet+0x7c4>)
 800cd7e:	69f8      	ldr	r0, [r7, #28]
 800cd80:	4798      	blx	r3
			}
		}

		rx_value_complete = true;
 800cd82:	4b1d      	ldr	r3, [pc, #116]	; (800cdf8 <bldc_interface_process_packet+0x7d4>)
 800cd84:	2201      	movs	r2, #1
 800cd86:	701a      	strb	r2, [r3, #0]
		break;
 800cd88:	f001 b8a3 	b.w	800ded2 <bldc_interface_process_packet+0x18ae>

	case COMM_PRINT:
		if (rx_printf_func) {
 800cd8c:	4b1b      	ldr	r3, [pc, #108]	; (800cdfc <bldc_interface_process_packet+0x7d8>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	f001 808b 	beq.w	800deac <bldc_interface_process_packet+0x1888>
			data[len] = '\0';
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	4413      	add	r3, r2
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	701a      	strb	r2, [r3, #0]
			rx_printf_func((char*)data);
 800cda0:	4b16      	ldr	r3, [pc, #88]	; (800cdfc <bldc_interface_process_packet+0x7d8>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	4798      	blx	r3
		}
		break;
 800cda8:	f001 b880 	b.w	800deac <bldc_interface_process_packet+0x1888>
	case COMM_SAMPLE_PRINT:
		// TODO
		break;

	case COMM_ROTOR_POSITION:
		ind = 0;
 800cdac:	2300      	movs	r3, #0
 800cdae:	60fb      	str	r3, [r7, #12]
		rotor_pos = buffer_get_float32(data, 100000.0, &ind);
 800cdb0:	f107 030c 	add.w	r3, r7, #12
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800ce00 <bldc_interface_process_packet+0x7dc>
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f001 f9ae 	bl	800e11c <buffer_get_float32>
 800cdc0:	eef0 7a40 	vmov.f32	s15, s0
 800cdc4:	4b0f      	ldr	r3, [pc, #60]	; (800ce04 <bldc_interface_process_packet+0x7e0>)
 800cdc6:	edc3 7a00 	vstr	s15, [r3]

		if (rx_rotor_pos_func) {
 800cdca:	4b0f      	ldr	r3, [pc, #60]	; (800ce08 <bldc_interface_process_packet+0x7e4>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	f001 806e 	beq.w	800deb0 <bldc_interface_process_packet+0x188c>
			rx_rotor_pos_func(rotor_pos);
 800cdd4:	4b0c      	ldr	r3, [pc, #48]	; (800ce08 <bldc_interface_process_packet+0x7e4>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4a0a      	ldr	r2, [pc, #40]	; (800ce04 <bldc_interface_process_packet+0x7e0>)
 800cdda:	edd2 7a00 	vldr	s15, [r2]
 800cdde:	eeb0 0a67 	vmov.f32	s0, s15
 800cde2:	4798      	blx	r3
		}
		break;
 800cde4:	f001 b864 	b.w	800deb0 <bldc_interface_process_packet+0x188c>
 800cde8:	200002b0 	.word	0x200002b0
 800cdec:	20007780 	.word	0x20007780
 800cdf0:	2000a9f0 	.word	0x2000a9f0
 800cdf4:	200005a4 	.word	0x200005a4
 800cdf8:	2000a6d4 	.word	0x2000a6d4
 800cdfc:	200005a8 	.word	0x200005a8
 800ce00:	47c35000 	.word	0x47c35000
 800ce04:	20000318 	.word	0x20000318
 800ce08:	200005ac 	.word	0x200005ac
		// TODO
		break;

	case COMM_GET_MCCONF:
	case COMM_GET_MCCONF_DEFAULT:
		ind = 0;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	60fb      	str	r3, [r7, #12]

		mcconf.signature = buffer_get_uint32(data, &ind);
 800ce10:	f107 030c 	add.w	r3, r7, #12
 800ce14:	4619      	mov	r1, r3
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f001 f935 	bl	800e086 <buffer_get_uint32>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	4ac5      	ldr	r2, [pc, #788]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800ce20:	6013      	str	r3, [r2, #0]

		mcconf.pwm_mode = data[ind++];
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	1c5a      	adds	r2, r3, #1
 800ce26:	60fa      	str	r2, [r7, #12]
 800ce28:	461a      	mov	r2, r3
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	4413      	add	r3, r2
 800ce2e:	781a      	ldrb	r2, [r3, #0]
 800ce30:	4bc0      	ldr	r3, [pc, #768]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800ce32:	711a      	strb	r2, [r3, #4]
		mcconf.comm_mode = data[ind++];
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	1c5a      	adds	r2, r3, #1
 800ce38:	60fa      	str	r2, [r7, #12]
 800ce3a:	461a      	mov	r2, r3
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	4413      	add	r3, r2
 800ce40:	781a      	ldrb	r2, [r3, #0]
 800ce42:	4bbc      	ldr	r3, [pc, #752]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800ce44:	715a      	strb	r2, [r3, #5]
		mcconf.motor_type = data[ind++];
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	1c5a      	adds	r2, r3, #1
 800ce4a:	60fa      	str	r2, [r7, #12]
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	4413      	add	r3, r2
 800ce52:	781a      	ldrb	r2, [r3, #0]
 800ce54:	4bb7      	ldr	r3, [pc, #732]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800ce56:	719a      	strb	r2, [r3, #6]
		mcconf.sensor_mode = data[ind++];
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	1c5a      	adds	r2, r3, #1
 800ce5c:	60fa      	str	r2, [r7, #12]
 800ce5e:	461a      	mov	r2, r3
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	4413      	add	r3, r2
 800ce64:	781a      	ldrb	r2, [r3, #0]
 800ce66:	4bb3      	ldr	r3, [pc, #716]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800ce68:	71da      	strb	r2, [r3, #7]

		mcconf.l_current_max = buffer_get_float32_auto(data, &ind);
 800ce6a:	f107 030c 	add.w	r3, r7, #12
 800ce6e:	4619      	mov	r1, r3
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f001 f96d 	bl	800e150 <buffer_get_float32_auto>
 800ce76:	eef0 7a40 	vmov.f32	s15, s0
 800ce7a:	4bae      	ldr	r3, [pc, #696]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800ce7c:	edc3 7a02 	vstr	s15, [r3, #8]
		mcconf.l_current_min = buffer_get_float32_auto(data, &ind);
 800ce80:	f107 030c 	add.w	r3, r7, #12
 800ce84:	4619      	mov	r1, r3
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f001 f962 	bl	800e150 <buffer_get_float32_auto>
 800ce8c:	eef0 7a40 	vmov.f32	s15, s0
 800ce90:	4ba8      	ldr	r3, [pc, #672]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800ce92:	edc3 7a03 	vstr	s15, [r3, #12]
		mcconf.l_in_current_max = buffer_get_float32_auto(data, &ind);
 800ce96:	f107 030c 	add.w	r3, r7, #12
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f001 f957 	bl	800e150 <buffer_get_float32_auto>
 800cea2:	eef0 7a40 	vmov.f32	s15, s0
 800cea6:	4ba3      	ldr	r3, [pc, #652]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800cea8:	edc3 7a04 	vstr	s15, [r3, #16]
		mcconf.l_in_current_min = buffer_get_float32_auto(data, &ind);
 800ceac:	f107 030c 	add.w	r3, r7, #12
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f001 f94c 	bl	800e150 <buffer_get_float32_auto>
 800ceb8:	eef0 7a40 	vmov.f32	s15, s0
 800cebc:	4b9d      	ldr	r3, [pc, #628]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800cebe:	edc3 7a05 	vstr	s15, [r3, #20]
		mcconf.l_abs_current_max = buffer_get_float32_auto(data, &ind);
 800cec2:	f107 030c 	add.w	r3, r7, #12
 800cec6:	4619      	mov	r1, r3
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f001 f941 	bl	800e150 <buffer_get_float32_auto>
 800cece:	eef0 7a40 	vmov.f32	s15, s0
 800ced2:	4b98      	ldr	r3, [pc, #608]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800ced4:	edc3 7a06 	vstr	s15, [r3, #24]
		mcconf.l_min_erpm = buffer_get_float32_auto(data, &ind);
 800ced8:	f107 030c 	add.w	r3, r7, #12
 800cedc:	4619      	mov	r1, r3
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f001 f936 	bl	800e150 <buffer_get_float32_auto>
 800cee4:	eef0 7a40 	vmov.f32	s15, s0
 800cee8:	4b92      	ldr	r3, [pc, #584]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800ceea:	edc3 7a07 	vstr	s15, [r3, #28]
		mcconf.l_max_erpm = buffer_get_float32_auto(data, &ind);
 800ceee:	f107 030c 	add.w	r3, r7, #12
 800cef2:	4619      	mov	r1, r3
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f001 f92b 	bl	800e150 <buffer_get_float32_auto>
 800cefa:	eef0 7a40 	vmov.f32	s15, s0
 800cefe:	4b8d      	ldr	r3, [pc, #564]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800cf00:	edc3 7a08 	vstr	s15, [r3, #32]
		mcconf.l_erpm_start = buffer_get_float32_auto(data, &ind);
 800cf04:	f107 030c 	add.w	r3, r7, #12
 800cf08:	4619      	mov	r1, r3
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f001 f920 	bl	800e150 <buffer_get_float32_auto>
 800cf10:	eef0 7a40 	vmov.f32	s15, s0
 800cf14:	4b87      	ldr	r3, [pc, #540]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800cf16:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		mcconf.l_max_erpm_fbrake = buffer_get_float32_auto(data, &ind);
 800cf1a:	f107 030c 	add.w	r3, r7, #12
 800cf1e:	4619      	mov	r1, r3
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f001 f915 	bl	800e150 <buffer_get_float32_auto>
 800cf26:	eef0 7a40 	vmov.f32	s15, s0
 800cf2a:	4b82      	ldr	r3, [pc, #520]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800cf2c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		mcconf.l_max_erpm_fbrake_cc = buffer_get_float32_auto(data, &ind);
 800cf30:	f107 030c 	add.w	r3, r7, #12
 800cf34:	4619      	mov	r1, r3
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f001 f90a 	bl	800e150 <buffer_get_float32_auto>
 800cf3c:	eef0 7a40 	vmov.f32	s15, s0
 800cf40:	4b7c      	ldr	r3, [pc, #496]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800cf42:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		mcconf.l_min_vin = buffer_get_float32_auto(data, &ind);
 800cf46:	f107 030c 	add.w	r3, r7, #12
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f001 f8ff 	bl	800e150 <buffer_get_float32_auto>
 800cf52:	eef0 7a40 	vmov.f32	s15, s0
 800cf56:	4b77      	ldr	r3, [pc, #476]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800cf58:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		mcconf.l_max_vin = buffer_get_float32_auto(data, &ind);
 800cf5c:	f107 030c 	add.w	r3, r7, #12
 800cf60:	4619      	mov	r1, r3
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f001 f8f4 	bl	800e150 <buffer_get_float32_auto>
 800cf68:	eef0 7a40 	vmov.f32	s15, s0
 800cf6c:	4b71      	ldr	r3, [pc, #452]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800cf6e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		mcconf.l_battery_cut_start = buffer_get_float32_auto(data, &ind);
 800cf72:	f107 030c 	add.w	r3, r7, #12
 800cf76:	4619      	mov	r1, r3
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f001 f8e9 	bl	800e150 <buffer_get_float32_auto>
 800cf7e:	eef0 7a40 	vmov.f32	s15, s0
 800cf82:	4b6c      	ldr	r3, [pc, #432]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800cf84:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		mcconf.l_battery_cut_end = buffer_get_float32_auto(data, &ind);
 800cf88:	f107 030c 	add.w	r3, r7, #12
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f001 f8de 	bl	800e150 <buffer_get_float32_auto>
 800cf94:	eef0 7a40 	vmov.f32	s15, s0
 800cf98:	4b66      	ldr	r3, [pc, #408]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800cf9a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		mcconf.l_slow_abs_current = data[ind++];
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	1c5a      	adds	r2, r3, #1
 800cfa2:	60fa      	str	r2, [r7, #12]
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	4413      	add	r3, r2
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	bf14      	ite	ne
 800cfb0:	2301      	movne	r3, #1
 800cfb2:	2300      	moveq	r3, #0
 800cfb4:	b2da      	uxtb	r2, r3
 800cfb6:	4b5f      	ldr	r3, [pc, #380]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800cfb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		mcconf.l_temp_fet_start = buffer_get_float32_auto(data, &ind);
 800cfbc:	f107 030c 	add.w	r3, r7, #12
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f001 f8c4 	bl	800e150 <buffer_get_float32_auto>
 800cfc8:	eef0 7a40 	vmov.f32	s15, s0
 800cfcc:	4b59      	ldr	r3, [pc, #356]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800cfce:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		mcconf.l_temp_fet_end = buffer_get_float32_auto(data, &ind);
 800cfd2:	f107 030c 	add.w	r3, r7, #12
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f001 f8b9 	bl	800e150 <buffer_get_float32_auto>
 800cfde:	eef0 7a40 	vmov.f32	s15, s0
 800cfe2:	4b54      	ldr	r3, [pc, #336]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800cfe4:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		mcconf.l_temp_motor_start = buffer_get_float32_auto(data, &ind);
 800cfe8:	f107 030c 	add.w	r3, r7, #12
 800cfec:	4619      	mov	r1, r3
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f001 f8ae 	bl	800e150 <buffer_get_float32_auto>
 800cff4:	eef0 7a40 	vmov.f32	s15, s0
 800cff8:	4b4e      	ldr	r3, [pc, #312]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800cffa:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		mcconf.l_temp_motor_end = buffer_get_float32_auto(data, &ind);
 800cffe:	f107 030c 	add.w	r3, r7, #12
 800d002:	4619      	mov	r1, r3
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f001 f8a3 	bl	800e150 <buffer_get_float32_auto>
 800d00a:	eef0 7a40 	vmov.f32	s15, s0
 800d00e:	4b49      	ldr	r3, [pc, #292]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800d010:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		mcconf.l_temp_accel_dec = buffer_get_float32_auto(data, &ind);
 800d014:	f107 030c 	add.w	r3, r7, #12
 800d018:	4619      	mov	r1, r3
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f001 f898 	bl	800e150 <buffer_get_float32_auto>
 800d020:	eef0 7a40 	vmov.f32	s15, s0
 800d024:	4b43      	ldr	r3, [pc, #268]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800d026:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		mcconf.l_min_duty = buffer_get_float32_auto(data, &ind);
 800d02a:	f107 030c 	add.w	r3, r7, #12
 800d02e:	4619      	mov	r1, r3
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f001 f88d 	bl	800e150 <buffer_get_float32_auto>
 800d036:	eef0 7a40 	vmov.f32	s15, s0
 800d03a:	4b3e      	ldr	r3, [pc, #248]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800d03c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		mcconf.l_max_duty = buffer_get_float32_auto(data, &ind);
 800d040:	f107 030c 	add.w	r3, r7, #12
 800d044:	4619      	mov	r1, r3
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f001 f882 	bl	800e150 <buffer_get_float32_auto>
 800d04c:	eef0 7a40 	vmov.f32	s15, s0
 800d050:	4b38      	ldr	r3, [pc, #224]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800d052:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		mcconf.l_watt_max = buffer_get_float32_auto(data, &ind);
 800d056:	f107 030c 	add.w	r3, r7, #12
 800d05a:	4619      	mov	r1, r3
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f001 f877 	bl	800e150 <buffer_get_float32_auto>
 800d062:	eef0 7a40 	vmov.f32	s15, s0
 800d066:	4b33      	ldr	r3, [pc, #204]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800d068:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		mcconf.l_watt_min = buffer_get_float32_auto(data, &ind);
 800d06c:	f107 030c 	add.w	r3, r7, #12
 800d070:	4619      	mov	r1, r3
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f001 f86c 	bl	800e150 <buffer_get_float32_auto>
 800d078:	eef0 7a40 	vmov.f32	s15, s0
 800d07c:	4b2d      	ldr	r3, [pc, #180]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800d07e:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

		mcconf.lo_current_max = mcconf.l_current_max;
 800d082:	4b2c      	ldr	r3, [pc, #176]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800d084:	689b      	ldr	r3, [r3, #8]
 800d086:	4a2b      	ldr	r2, [pc, #172]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800d088:	6693      	str	r3, [r2, #104]	; 0x68
		mcconf.lo_current_min = mcconf.l_current_min;
 800d08a:	4b2a      	ldr	r3, [pc, #168]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800d08c:	68db      	ldr	r3, [r3, #12]
 800d08e:	4a29      	ldr	r2, [pc, #164]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800d090:	66d3      	str	r3, [r2, #108]	; 0x6c
		mcconf.lo_in_current_max = mcconf.l_in_current_max;
 800d092:	4b28      	ldr	r3, [pc, #160]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800d094:	691b      	ldr	r3, [r3, #16]
 800d096:	4a27      	ldr	r2, [pc, #156]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800d098:	6713      	str	r3, [r2, #112]	; 0x70
		mcconf.lo_in_current_min = mcconf.l_in_current_min;
 800d09a:	4b26      	ldr	r3, [pc, #152]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800d09c:	695b      	ldr	r3, [r3, #20]
 800d09e:	4a25      	ldr	r2, [pc, #148]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800d0a0:	6753      	str	r3, [r2, #116]	; 0x74
		mcconf.lo_current_motor_max_now = mcconf.l_current_max;
 800d0a2:	4b24      	ldr	r3, [pc, #144]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800d0a4:	689b      	ldr	r3, [r3, #8]
 800d0a6:	4a23      	ldr	r2, [pc, #140]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800d0a8:	6793      	str	r3, [r2, #120]	; 0x78
		mcconf.lo_current_motor_min_now = mcconf.l_current_min;
 800d0aa:	4b22      	ldr	r3, [pc, #136]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800d0ac:	68db      	ldr	r3, [r3, #12]
 800d0ae:	4a21      	ldr	r2, [pc, #132]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800d0b0:	67d3      	str	r3, [r2, #124]	; 0x7c

		mcconf.sl_min_erpm = buffer_get_float32_auto(data, &ind);
 800d0b2:	f107 030c 	add.w	r3, r7, #12
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f001 f849 	bl	800e150 <buffer_get_float32_auto>
 800d0be:	eef0 7a40 	vmov.f32	s15, s0
 800d0c2:	4b1c      	ldr	r3, [pc, #112]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800d0c4:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		mcconf.sl_min_erpm_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 800d0c8:	f107 030c 	add.w	r3, r7, #12
 800d0cc:	4619      	mov	r1, r3
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f001 f83e 	bl	800e150 <buffer_get_float32_auto>
 800d0d4:	eef0 7a40 	vmov.f32	s15, s0
 800d0d8:	4b16      	ldr	r3, [pc, #88]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800d0da:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		mcconf.sl_max_fullbreak_current_dir_change = buffer_get_float32_auto(data, &ind);
 800d0de:	f107 030c 	add.w	r3, r7, #12
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f001 f833 	bl	800e150 <buffer_get_float32_auto>
 800d0ea:	eef0 7a40 	vmov.f32	s15, s0
 800d0ee:	4b11      	ldr	r3, [pc, #68]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800d0f0:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		mcconf.sl_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 800d0f4:	f107 030c 	add.w	r3, r7, #12
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f001 f828 	bl	800e150 <buffer_get_float32_auto>
 800d100:	eef0 7a40 	vmov.f32	s15, s0
 800d104:	4b0b      	ldr	r3, [pc, #44]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800d106:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		mcconf.sl_phase_advance_at_br = buffer_get_float32_auto(data, &ind);
 800d10a:	f107 030c 	add.w	r3, r7, #12
 800d10e:	4619      	mov	r1, r3
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f001 f81d 	bl	800e150 <buffer_get_float32_auto>
 800d116:	eef0 7a40 	vmov.f32	s15, s0
 800d11a:	4b06      	ldr	r3, [pc, #24]	; (800d134 <bldc_interface_process_packet+0xb10>)
 800d11c:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
		mcconf.sl_cycle_int_rpm_br = buffer_get_float32_auto(data, &ind);
 800d120:	f107 030c 	add.w	r3, r7, #12
 800d124:	4619      	mov	r1, r3
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f001 f812 	bl	800e150 <buffer_get_float32_auto>
 800d12c:	eef0 7a40 	vmov.f32	s15, s0
 800d130:	e002      	b.n	800d138 <bldc_interface_process_packet+0xb14>
 800d132:	bf00      	nop
 800d134:	2000031c 	.word	0x2000031c
 800d138:	4bc7      	ldr	r3, [pc, #796]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d13a:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
		mcconf.sl_bemf_coupling_k = buffer_get_float32_auto(data, &ind);
 800d13e:	f107 030c 	add.w	r3, r7, #12
 800d142:	4619      	mov	r1, r3
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f001 f803 	bl	800e150 <buffer_get_float32_auto>
 800d14a:	eef0 7a40 	vmov.f32	s15, s0
 800d14e:	4bc2      	ldr	r3, [pc, #776]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d150:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98

		memcpy(mcconf.hall_table, data + ind, 8);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	461a      	mov	r2, r3
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	441a      	add	r2, r3
 800d15c:	4bbe      	ldr	r3, [pc, #760]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d15e:	339c      	adds	r3, #156	; 0x9c
 800d160:	6810      	ldr	r0, [r2, #0]
 800d162:	6851      	ldr	r1, [r2, #4]
 800d164:	c303      	stmia	r3!, {r0, r1}
		ind += 8;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	3308      	adds	r3, #8
 800d16a:	60fb      	str	r3, [r7, #12]
		mcconf.hall_sl_erpm = buffer_get_float32_auto(data, &ind);
 800d16c:	f107 030c 	add.w	r3, r7, #12
 800d170:	4619      	mov	r1, r3
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 ffec 	bl	800e150 <buffer_get_float32_auto>
 800d178:	eef0 7a40 	vmov.f32	s15, s0
 800d17c:	4bb6      	ldr	r3, [pc, #728]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d17e:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

		mcconf.foc_current_kp = buffer_get_float32_auto(data, &ind);
 800d182:	f107 030c 	add.w	r3, r7, #12
 800d186:	4619      	mov	r1, r3
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f000 ffe1 	bl	800e150 <buffer_get_float32_auto>
 800d18e:	eef0 7a40 	vmov.f32	s15, s0
 800d192:	4bb1      	ldr	r3, [pc, #708]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d194:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		mcconf.foc_current_ki = buffer_get_float32_auto(data, &ind);
 800d198:	f107 030c 	add.w	r3, r7, #12
 800d19c:	4619      	mov	r1, r3
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f000 ffd6 	bl	800e150 <buffer_get_float32_auto>
 800d1a4:	eef0 7a40 	vmov.f32	s15, s0
 800d1a8:	4bab      	ldr	r3, [pc, #684]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d1aa:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		mcconf.foc_f_sw = buffer_get_float32_auto(data, &ind);
 800d1ae:	f107 030c 	add.w	r3, r7, #12
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f000 ffcb 	bl	800e150 <buffer_get_float32_auto>
 800d1ba:	eef0 7a40 	vmov.f32	s15, s0
 800d1be:	4ba6      	ldr	r3, [pc, #664]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d1c0:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		mcconf.foc_dt_us = buffer_get_float32_auto(data, &ind);
 800d1c4:	f107 030c 	add.w	r3, r7, #12
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f000 ffc0 	bl	800e150 <buffer_get_float32_auto>
 800d1d0:	eef0 7a40 	vmov.f32	s15, s0
 800d1d4:	4ba0      	ldr	r3, [pc, #640]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d1d6:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
		mcconf.foc_encoder_inverted = data[ind++];
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	1c5a      	adds	r2, r3, #1
 800d1de:	60fa      	str	r2, [r7, #12]
 800d1e0:	461a      	mov	r2, r3
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	4413      	add	r3, r2
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	bf14      	ite	ne
 800d1ec:	2301      	movne	r3, #1
 800d1ee:	2300      	moveq	r3, #0
 800d1f0:	b2da      	uxtb	r2, r3
 800d1f2:	4b99      	ldr	r3, [pc, #612]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d1f4:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		mcconf.foc_encoder_offset = buffer_get_float32_auto(data, &ind);
 800d1f8:	f107 030c 	add.w	r3, r7, #12
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f000 ffa6 	bl	800e150 <buffer_get_float32_auto>
 800d204:	eef0 7a40 	vmov.f32	s15, s0
 800d208:	4b93      	ldr	r3, [pc, #588]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d20a:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
		mcconf.foc_encoder_ratio = buffer_get_float32_auto(data, &ind);
 800d20e:	f107 030c 	add.w	r3, r7, #12
 800d212:	4619      	mov	r1, r3
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 ff9b 	bl	800e150 <buffer_get_float32_auto>
 800d21a:	eef0 7a40 	vmov.f32	s15, s0
 800d21e:	4b8e      	ldr	r3, [pc, #568]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d220:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
		mcconf.foc_sensor_mode = data[ind++];
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	1c5a      	adds	r2, r3, #1
 800d228:	60fa      	str	r2, [r7, #12]
 800d22a:	461a      	mov	r2, r3
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	4413      	add	r3, r2
 800d230:	781a      	ldrb	r2, [r3, #0]
 800d232:	4b89      	ldr	r3, [pc, #548]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d234:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
		mcconf.foc_pll_kp = buffer_get_float32_auto(data, &ind);
 800d238:	f107 030c 	add.w	r3, r7, #12
 800d23c:	4619      	mov	r1, r3
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 ff86 	bl	800e150 <buffer_get_float32_auto>
 800d244:	eef0 7a40 	vmov.f32	s15, s0
 800d248:	4b83      	ldr	r3, [pc, #524]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d24a:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
		mcconf.foc_pll_ki = buffer_get_float32_auto(data, &ind);
 800d24e:	f107 030c 	add.w	r3, r7, #12
 800d252:	4619      	mov	r1, r3
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 ff7b 	bl	800e150 <buffer_get_float32_auto>
 800d25a:	eef0 7a40 	vmov.f32	s15, s0
 800d25e:	4b7e      	ldr	r3, [pc, #504]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d260:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
		mcconf.foc_motor_l = buffer_get_float32_auto(data, &ind);
 800d264:	f107 030c 	add.w	r3, r7, #12
 800d268:	4619      	mov	r1, r3
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 ff70 	bl	800e150 <buffer_get_float32_auto>
 800d270:	eef0 7a40 	vmov.f32	s15, s0
 800d274:	4b78      	ldr	r3, [pc, #480]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d276:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
		mcconf.foc_motor_r = buffer_get_float32_auto(data, &ind);
 800d27a:	f107 030c 	add.w	r3, r7, #12
 800d27e:	4619      	mov	r1, r3
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f000 ff65 	bl	800e150 <buffer_get_float32_auto>
 800d286:	eef0 7a40 	vmov.f32	s15, s0
 800d28a:	4b73      	ldr	r3, [pc, #460]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d28c:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
		mcconf.foc_motor_flux_linkage = buffer_get_float32_auto(data, &ind);
 800d290:	f107 030c 	add.w	r3, r7, #12
 800d294:	4619      	mov	r1, r3
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f000 ff5a 	bl	800e150 <buffer_get_float32_auto>
 800d29c:	eef0 7a40 	vmov.f32	s15, s0
 800d2a0:	4b6d      	ldr	r3, [pc, #436]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d2a2:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
		mcconf.foc_observer_gain = buffer_get_float32_auto(data, &ind);
 800d2a6:	f107 030c 	add.w	r3, r7, #12
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f000 ff4f 	bl	800e150 <buffer_get_float32_auto>
 800d2b2:	eef0 7a40 	vmov.f32	s15, s0
 800d2b6:	4b68      	ldr	r3, [pc, #416]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d2b8:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
		mcconf.foc_observer_gain_slow = buffer_get_float32_auto(data, &ind);
 800d2bc:	f107 030c 	add.w	r3, r7, #12
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f000 ff44 	bl	800e150 <buffer_get_float32_auto>
 800d2c8:	eef0 7a40 	vmov.f32	s15, s0
 800d2cc:	4b62      	ldr	r3, [pc, #392]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d2ce:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
		mcconf.foc_duty_dowmramp_kp = buffer_get_float32_auto(data, &ind);
 800d2d2:	f107 030c 	add.w	r3, r7, #12
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f000 ff39 	bl	800e150 <buffer_get_float32_auto>
 800d2de:	eef0 7a40 	vmov.f32	s15, s0
 800d2e2:	4b5d      	ldr	r3, [pc, #372]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d2e4:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
		mcconf.foc_duty_dowmramp_ki = buffer_get_float32_auto(data, &ind);
 800d2e8:	f107 030c 	add.w	r3, r7, #12
 800d2ec:	4619      	mov	r1, r3
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 ff2e 	bl	800e150 <buffer_get_float32_auto>
 800d2f4:	eef0 7a40 	vmov.f32	s15, s0
 800d2f8:	4b57      	ldr	r3, [pc, #348]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d2fa:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
		mcconf.foc_openloop_rpm = buffer_get_float32_auto(data, &ind);
 800d2fe:	f107 030c 	add.w	r3, r7, #12
 800d302:	4619      	mov	r1, r3
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f000 ff23 	bl	800e150 <buffer_get_float32_auto>
 800d30a:	eef0 7a40 	vmov.f32	s15, s0
 800d30e:	4b52      	ldr	r3, [pc, #328]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d310:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
		mcconf.foc_sl_openloop_hyst = buffer_get_float32_auto(data, &ind);
 800d314:	f107 030c 	add.w	r3, r7, #12
 800d318:	4619      	mov	r1, r3
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 ff18 	bl	800e150 <buffer_get_float32_auto>
 800d320:	eef0 7a40 	vmov.f32	s15, s0
 800d324:	4b4c      	ldr	r3, [pc, #304]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d326:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
		mcconf.foc_sl_openloop_time = buffer_get_float32_auto(data, &ind);
 800d32a:	f107 030c 	add.w	r3, r7, #12
 800d32e:	4619      	mov	r1, r3
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f000 ff0d 	bl	800e150 <buffer_get_float32_auto>
 800d336:	eef0 7a40 	vmov.f32	s15, s0
 800d33a:	4b47      	ldr	r3, [pc, #284]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d33c:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
		mcconf.foc_sl_d_current_duty = buffer_get_float32_auto(data, &ind);
 800d340:	f107 030c 	add.w	r3, r7, #12
 800d344:	4619      	mov	r1, r3
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f000 ff02 	bl	800e150 <buffer_get_float32_auto>
 800d34c:	eef0 7a40 	vmov.f32	s15, s0
 800d350:	4b41      	ldr	r3, [pc, #260]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d352:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
		mcconf.foc_sl_d_current_factor = buffer_get_float32_auto(data, &ind);
 800d356:	f107 030c 	add.w	r3, r7, #12
 800d35a:	4619      	mov	r1, r3
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f000 fef7 	bl	800e150 <buffer_get_float32_auto>
 800d362:	eef0 7a40 	vmov.f32	s15, s0
 800d366:	4b3c      	ldr	r3, [pc, #240]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d368:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8
		memcpy(mcconf.foc_hall_table, data + ind, 8);
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	461a      	mov	r2, r3
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	441a      	add	r2, r3
 800d374:	4b38      	ldr	r3, [pc, #224]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d376:	33fd      	adds	r3, #253	; 0xfd
 800d378:	6811      	ldr	r1, [r2, #0]
 800d37a:	6852      	ldr	r2, [r2, #4]
 800d37c:	6019      	str	r1, [r3, #0]
 800d37e:	605a      	str	r2, [r3, #4]
		ind += 8;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	3308      	adds	r3, #8
 800d384:	60fb      	str	r3, [r7, #12]
		mcconf.foc_sl_erpm = buffer_get_float32_auto(data, &ind);
 800d386:	f107 030c 	add.w	r3, r7, #12
 800d38a:	4619      	mov	r1, r3
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f000 fedf 	bl	800e150 <buffer_get_float32_auto>
 800d392:	eef0 7a40 	vmov.f32	s15, s0
 800d396:	4b30      	ldr	r3, [pc, #192]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d398:	edc3 7a42 	vstr	s15, [r3, #264]	; 0x108
		mcconf.foc_sample_v0_v7 = data[ind++];
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	1c5a      	adds	r2, r3, #1
 800d3a0:	60fa      	str	r2, [r7, #12]
 800d3a2:	461a      	mov	r2, r3
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	4413      	add	r3, r2
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	bf14      	ite	ne
 800d3ae:	2301      	movne	r3, #1
 800d3b0:	2300      	moveq	r3, #0
 800d3b2:	b2da      	uxtb	r2, r3
 800d3b4:	4b28      	ldr	r3, [pc, #160]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d3b6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
		mcconf.foc_sample_high_current = data[ind++];
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	1c5a      	adds	r2, r3, #1
 800d3be:	60fa      	str	r2, [r7, #12]
 800d3c0:	461a      	mov	r2, r3
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	4413      	add	r3, r2
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	bf14      	ite	ne
 800d3cc:	2301      	movne	r3, #1
 800d3ce:	2300      	moveq	r3, #0
 800d3d0:	b2da      	uxtb	r2, r3
 800d3d2:	4b21      	ldr	r3, [pc, #132]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d3d4:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
		mcconf.foc_sat_comp = buffer_get_float32_auto(data, &ind);
 800d3d8:	f107 030c 	add.w	r3, r7, #12
 800d3dc:	4619      	mov	r1, r3
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f000 feb6 	bl	800e150 <buffer_get_float32_auto>
 800d3e4:	eef0 7a40 	vmov.f32	s15, s0
 800d3e8:	4b1b      	ldr	r3, [pc, #108]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d3ea:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
		mcconf.foc_temp_comp = data[ind++];
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	1c5a      	adds	r2, r3, #1
 800d3f2:	60fa      	str	r2, [r7, #12]
 800d3f4:	461a      	mov	r2, r3
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	4413      	add	r3, r2
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	bf14      	ite	ne
 800d400:	2301      	movne	r3, #1
 800d402:	2300      	moveq	r3, #0
 800d404:	b2da      	uxtb	r2, r3
 800d406:	4b14      	ldr	r3, [pc, #80]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d408:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
		mcconf.foc_temp_comp_base_temp = buffer_get_float32_auto(data, &ind);
 800d40c:	f107 030c 	add.w	r3, r7, #12
 800d410:	4619      	mov	r1, r3
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f000 fe9c 	bl	800e150 <buffer_get_float32_auto>
 800d418:	eef0 7a40 	vmov.f32	s15, s0
 800d41c:	4b0e      	ldr	r3, [pc, #56]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d41e:	edc3 7a46 	vstr	s15, [r3, #280]	; 0x118
		mcconf.foc_current_filter_const = buffer_get_float32_auto(data, &ind);
 800d422:	f107 030c 	add.w	r3, r7, #12
 800d426:	4619      	mov	r1, r3
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f000 fe91 	bl	800e150 <buffer_get_float32_auto>
 800d42e:	eef0 7a40 	vmov.f32	s15, s0
 800d432:	4b09      	ldr	r3, [pc, #36]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d434:	edc3 7a47 	vstr	s15, [r3, #284]	; 0x11c

		mcconf.s_pid_kp = buffer_get_float32_auto(data, &ind);
 800d438:	f107 030c 	add.w	r3, r7, #12
 800d43c:	4619      	mov	r1, r3
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f000 fe86 	bl	800e150 <buffer_get_float32_auto>
 800d444:	eef0 7a40 	vmov.f32	s15, s0
 800d448:	4b03      	ldr	r3, [pc, #12]	; (800d458 <bldc_interface_process_packet+0xe34>)
 800d44a:	edc3 7a48 	vstr	s15, [r3, #288]	; 0x120
		mcconf.s_pid_ki = buffer_get_float32_auto(data, &ind);
 800d44e:	f107 030c 	add.w	r3, r7, #12
 800d452:	4619      	mov	r1, r3
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	e001      	b.n	800d45c <bldc_interface_process_packet+0xe38>
 800d458:	2000031c 	.word	0x2000031c
 800d45c:	f000 fe78 	bl	800e150 <buffer_get_float32_auto>
 800d460:	eef0 7a40 	vmov.f32	s15, s0
 800d464:	4b96      	ldr	r3, [pc, #600]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d466:	edc3 7a49 	vstr	s15, [r3, #292]	; 0x124
		mcconf.s_pid_kd = buffer_get_float32_auto(data, &ind);
 800d46a:	f107 030c 	add.w	r3, r7, #12
 800d46e:	4619      	mov	r1, r3
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 fe6d 	bl	800e150 <buffer_get_float32_auto>
 800d476:	eef0 7a40 	vmov.f32	s15, s0
 800d47a:	4b91      	ldr	r3, [pc, #580]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d47c:	edc3 7a4a 	vstr	s15, [r3, #296]	; 0x128
		mcconf.s_pid_kd_filter = buffer_get_float32_auto(data, &ind);
 800d480:	f107 030c 	add.w	r3, r7, #12
 800d484:	4619      	mov	r1, r3
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 fe62 	bl	800e150 <buffer_get_float32_auto>
 800d48c:	eef0 7a40 	vmov.f32	s15, s0
 800d490:	4b8b      	ldr	r3, [pc, #556]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d492:	edc3 7a4b 	vstr	s15, [r3, #300]	; 0x12c
		mcconf.s_pid_min_erpm = buffer_get_float32_auto(data, &ind);
 800d496:	f107 030c 	add.w	r3, r7, #12
 800d49a:	4619      	mov	r1, r3
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f000 fe57 	bl	800e150 <buffer_get_float32_auto>
 800d4a2:	eef0 7a40 	vmov.f32	s15, s0
 800d4a6:	4b86      	ldr	r3, [pc, #536]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d4a8:	edc3 7a4c 	vstr	s15, [r3, #304]	; 0x130
		mcconf.s_pid_allow_braking = data[ind++];
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	1c5a      	adds	r2, r3, #1
 800d4b0:	60fa      	str	r2, [r7, #12]
 800d4b2:	461a      	mov	r2, r3
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	4413      	add	r3, r2
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	bf14      	ite	ne
 800d4be:	2301      	movne	r3, #1
 800d4c0:	2300      	moveq	r3, #0
 800d4c2:	b2da      	uxtb	r2, r3
 800d4c4:	4b7e      	ldr	r3, [pc, #504]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d4c6:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134

		mcconf.p_pid_kp = buffer_get_float32_auto(data, &ind);
 800d4ca:	f107 030c 	add.w	r3, r7, #12
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f000 fe3d 	bl	800e150 <buffer_get_float32_auto>
 800d4d6:	eef0 7a40 	vmov.f32	s15, s0
 800d4da:	4b79      	ldr	r3, [pc, #484]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d4dc:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
		mcconf.p_pid_ki = buffer_get_float32_auto(data, &ind);
 800d4e0:	f107 030c 	add.w	r3, r7, #12
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f000 fe32 	bl	800e150 <buffer_get_float32_auto>
 800d4ec:	eef0 7a40 	vmov.f32	s15, s0
 800d4f0:	4b73      	ldr	r3, [pc, #460]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d4f2:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
		mcconf.p_pid_kd = buffer_get_float32_auto(data, &ind);
 800d4f6:	f107 030c 	add.w	r3, r7, #12
 800d4fa:	4619      	mov	r1, r3
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f000 fe27 	bl	800e150 <buffer_get_float32_auto>
 800d502:	eef0 7a40 	vmov.f32	s15, s0
 800d506:	4b6e      	ldr	r3, [pc, #440]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d508:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
		mcconf.p_pid_kd_filter = buffer_get_float32_auto(data, &ind);
 800d50c:	f107 030c 	add.w	r3, r7, #12
 800d510:	4619      	mov	r1, r3
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f000 fe1c 	bl	800e150 <buffer_get_float32_auto>
 800d518:	eef0 7a40 	vmov.f32	s15, s0
 800d51c:	4b68      	ldr	r3, [pc, #416]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d51e:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
		mcconf.p_pid_ang_div = buffer_get_float32_auto(data, &ind);
 800d522:	f107 030c 	add.w	r3, r7, #12
 800d526:	4619      	mov	r1, r3
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f000 fe11 	bl	800e150 <buffer_get_float32_auto>
 800d52e:	eef0 7a40 	vmov.f32	s15, s0
 800d532:	4b63      	ldr	r3, [pc, #396]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d534:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148

		mcconf.cc_startup_boost_duty = buffer_get_float32_auto(data, &ind);
 800d538:	f107 030c 	add.w	r3, r7, #12
 800d53c:	4619      	mov	r1, r3
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f000 fe06 	bl	800e150 <buffer_get_float32_auto>
 800d544:	eef0 7a40 	vmov.f32	s15, s0
 800d548:	4b5d      	ldr	r3, [pc, #372]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d54a:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
		mcconf.cc_min_current = buffer_get_float32_auto(data, &ind);
 800d54e:	f107 030c 	add.w	r3, r7, #12
 800d552:	4619      	mov	r1, r3
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f000 fdfb 	bl	800e150 <buffer_get_float32_auto>
 800d55a:	eef0 7a40 	vmov.f32	s15, s0
 800d55e:	4b58      	ldr	r3, [pc, #352]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d560:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
		mcconf.cc_gain = buffer_get_float32_auto(data, &ind);
 800d564:	f107 030c 	add.w	r3, r7, #12
 800d568:	4619      	mov	r1, r3
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f000 fdf0 	bl	800e150 <buffer_get_float32_auto>
 800d570:	eef0 7a40 	vmov.f32	s15, s0
 800d574:	4b52      	ldr	r3, [pc, #328]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d576:	edc3 7a55 	vstr	s15, [r3, #340]	; 0x154
		mcconf.cc_ramp_step_max = buffer_get_float32_auto(data, &ind);
 800d57a:	f107 030c 	add.w	r3, r7, #12
 800d57e:	4619      	mov	r1, r3
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f000 fde5 	bl	800e150 <buffer_get_float32_auto>
 800d586:	eef0 7a40 	vmov.f32	s15, s0
 800d58a:	4b4d      	ldr	r3, [pc, #308]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d58c:	edc3 7a56 	vstr	s15, [r3, #344]	; 0x158

		mcconf.m_fault_stop_time_ms = buffer_get_int32(data, &ind);
 800d590:	f107 030c 	add.w	r3, r7, #12
 800d594:	4619      	mov	r1, r3
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 fd45 	bl	800e026 <buffer_get_int32>
 800d59c:	4603      	mov	r3, r0
 800d59e:	4a48      	ldr	r2, [pc, #288]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d5a0:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
		mcconf.m_duty_ramp_step = buffer_get_float32_auto(data, &ind);
 800d5a4:	f107 030c 	add.w	r3, r7, #12
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f000 fdd0 	bl	800e150 <buffer_get_float32_auto>
 800d5b0:	eef0 7a40 	vmov.f32	s15, s0
 800d5b4:	4b42      	ldr	r3, [pc, #264]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d5b6:	edc3 7a58 	vstr	s15, [r3, #352]	; 0x160
		mcconf.m_current_backoff_gain = buffer_get_float32_auto(data, &ind);
 800d5ba:	f107 030c 	add.w	r3, r7, #12
 800d5be:	4619      	mov	r1, r3
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f000 fdc5 	bl	800e150 <buffer_get_float32_auto>
 800d5c6:	eef0 7a40 	vmov.f32	s15, s0
 800d5ca:	4b3d      	ldr	r3, [pc, #244]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d5cc:	edc3 7a59 	vstr	s15, [r3, #356]	; 0x164
		mcconf.m_encoder_counts = buffer_get_uint32(data, &ind);
 800d5d0:	f107 030c 	add.w	r3, r7, #12
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f000 fd55 	bl	800e086 <buffer_get_uint32>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	4a38      	ldr	r2, [pc, #224]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d5e0:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
		mcconf.m_sensor_port_mode = data[ind++];
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	1c5a      	adds	r2, r3, #1
 800d5e8:	60fa      	str	r2, [r7, #12]
 800d5ea:	461a      	mov	r2, r3
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	4413      	add	r3, r2
 800d5f0:	781a      	ldrb	r2, [r3, #0]
 800d5f2:	4b33      	ldr	r3, [pc, #204]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d5f4:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
		mcconf.m_invert_direction = data[ind++];
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	1c5a      	adds	r2, r3, #1
 800d5fc:	60fa      	str	r2, [r7, #12]
 800d5fe:	461a      	mov	r2, r3
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	4413      	add	r3, r2
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	2b00      	cmp	r3, #0
 800d608:	bf14      	ite	ne
 800d60a:	2301      	movne	r3, #1
 800d60c:	2300      	moveq	r3, #0
 800d60e:	b2da      	uxtb	r2, r3
 800d610:	4b2b      	ldr	r3, [pc, #172]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d612:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
		mcconf.m_drv8301_oc_mode = data[ind++];
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	1c5a      	adds	r2, r3, #1
 800d61a:	60fa      	str	r2, [r7, #12]
 800d61c:	461a      	mov	r2, r3
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	4413      	add	r3, r2
 800d622:	781a      	ldrb	r2, [r3, #0]
 800d624:	4b26      	ldr	r3, [pc, #152]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d626:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
		mcconf.m_drv8301_oc_adj = data[ind++];
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	1c5a      	adds	r2, r3, #1
 800d62e:	60fa      	str	r2, [r7, #12]
 800d630:	461a      	mov	r2, r3
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	4413      	add	r3, r2
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	461a      	mov	r2, r3
 800d63a:	4b21      	ldr	r3, [pc, #132]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d63c:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
		mcconf.m_bldc_f_sw_min = buffer_get_float32_auto(data, &ind);
 800d640:	f107 030c 	add.w	r3, r7, #12
 800d644:	4619      	mov	r1, r3
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 fd82 	bl	800e150 <buffer_get_float32_auto>
 800d64c:	eef0 7a40 	vmov.f32	s15, s0
 800d650:	4b1b      	ldr	r3, [pc, #108]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d652:	edc3 7a5d 	vstr	s15, [r3, #372]	; 0x174
		mcconf.m_bldc_f_sw_max = buffer_get_float32_auto(data, &ind);
 800d656:	f107 030c 	add.w	r3, r7, #12
 800d65a:	4619      	mov	r1, r3
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f000 fd77 	bl	800e150 <buffer_get_float32_auto>
 800d662:	eef0 7a40 	vmov.f32	s15, s0
 800d666:	4b16      	ldr	r3, [pc, #88]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d668:	edc3 7a5e 	vstr	s15, [r3, #376]	; 0x178
		mcconf.m_dc_f_sw = buffer_get_float32_auto(data, &ind);
 800d66c:	f107 030c 	add.w	r3, r7, #12
 800d670:	4619      	mov	r1, r3
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f000 fd6c 	bl	800e150 <buffer_get_float32_auto>
 800d678:	eef0 7a40 	vmov.f32	s15, s0
 800d67c:	4b10      	ldr	r3, [pc, #64]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d67e:	edc3 7a5f 	vstr	s15, [r3, #380]	; 0x17c
		mcconf.m_ntc_motor_beta = buffer_get_float32_auto(data, &ind);
 800d682:	f107 030c 	add.w	r3, r7, #12
 800d686:	4619      	mov	r1, r3
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f000 fd61 	bl	800e150 <buffer_get_float32_auto>
 800d68e:	eef0 7a40 	vmov.f32	s15, s0
 800d692:	4b0b      	ldr	r3, [pc, #44]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d694:	edc3 7a60 	vstr	s15, [r3, #384]	; 0x180
		mcconf.m_out_aux_mode = data[ind++];
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	1c5a      	adds	r2, r3, #1
 800d69c:	60fa      	str	r2, [r7, #12]
 800d69e:	461a      	mov	r2, r3
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	4413      	add	r3, r2
 800d6a4:	781a      	ldrb	r2, [r3, #0]
 800d6a6:	4b06      	ldr	r3, [pc, #24]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d6a8:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184

		if (rx_mcconf_func) {
 800d6ac:	4b05      	ldr	r3, [pc, #20]	; (800d6c4 <bldc_interface_process_packet+0x10a0>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	f000 83ff 	beq.w	800deb4 <bldc_interface_process_packet+0x1890>
			rx_mcconf_func(&mcconf);
 800d6b6:	4b03      	ldr	r3, [pc, #12]	; (800d6c4 <bldc_interface_process_packet+0x10a0>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4801      	ldr	r0, [pc, #4]	; (800d6c0 <bldc_interface_process_packet+0x109c>)
 800d6bc:	4798      	blx	r3
		}
		break;
 800d6be:	e3f9      	b.n	800deb4 <bldc_interface_process_packet+0x1890>
 800d6c0:	2000031c 	.word	0x2000031c
 800d6c4:	200005b0 	.word	0x200005b0

	case COMM_GET_APPCONF:
	case COMM_GET_APPCONF_DEFAULT:
		ind = 0;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	60fb      	str	r3, [r7, #12]
		appconf.signature = buffer_get_uint32(data, &ind);
 800d6cc:	f107 030c 	add.w	r3, r7, #12
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f000 fcd7 	bl	800e086 <buffer_get_uint32>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	4aba      	ldr	r2, [pc, #744]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d6dc:	6013      	str	r3, [r2, #0]
		appconf.controller_id = data[ind++];
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	1c5a      	adds	r2, r3, #1
 800d6e2:	60fa      	str	r2, [r7, #12]
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	4413      	add	r3, r2
 800d6ea:	781a      	ldrb	r2, [r3, #0]
 800d6ec:	4bb5      	ldr	r3, [pc, #724]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d6ee:	711a      	strb	r2, [r3, #4]
		appconf.timeout_msec = buffer_get_uint32(data, &ind);
 800d6f0:	f107 030c 	add.w	r3, r7, #12
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f000 fcc5 	bl	800e086 <buffer_get_uint32>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	4ab1      	ldr	r2, [pc, #708]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d700:	6093      	str	r3, [r2, #8]
		appconf.timeout_brake_current = buffer_get_float32_auto(data, &ind);
 800d702:	f107 030c 	add.w	r3, r7, #12
 800d706:	4619      	mov	r1, r3
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f000 fd21 	bl	800e150 <buffer_get_float32_auto>
 800d70e:	eef0 7a40 	vmov.f32	s15, s0
 800d712:	4bac      	ldr	r3, [pc, #688]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d714:	edc3 7a03 	vstr	s15, [r3, #12]
		appconf.send_can_status = data[ind++];
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	1c5a      	adds	r2, r3, #1
 800d71c:	60fa      	str	r2, [r7, #12]
 800d71e:	461a      	mov	r2, r3
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	4413      	add	r3, r2
 800d724:	781b      	ldrb	r3, [r3, #0]
 800d726:	2b00      	cmp	r3, #0
 800d728:	bf14      	ite	ne
 800d72a:	2301      	movne	r3, #1
 800d72c:	2300      	moveq	r3, #0
 800d72e:	b2da      	uxtb	r2, r3
 800d730:	4ba4      	ldr	r3, [pc, #656]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d732:	741a      	strb	r2, [r3, #16]
		appconf.send_can_status_rate_hz = buffer_get_uint16(data, &ind);
 800d734:	f107 030c 	add.w	r3, r7, #12
 800d738:	4619      	mov	r1, r3
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f000 fc50 	bl	800dfe0 <buffer_get_uint16>
 800d740:	4603      	mov	r3, r0
 800d742:	461a      	mov	r2, r3
 800d744:	4b9f      	ldr	r3, [pc, #636]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d746:	615a      	str	r2, [r3, #20]
		appconf.can_baud_rate = data[ind++];
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	1c5a      	adds	r2, r3, #1
 800d74c:	60fa      	str	r2, [r7, #12]
 800d74e:	461a      	mov	r2, r3
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	4413      	add	r3, r2
 800d754:	781a      	ldrb	r2, [r3, #0]
 800d756:	4b9b      	ldr	r3, [pc, #620]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d758:	761a      	strb	r2, [r3, #24]

		appconf.app_to_use = data[ind++];
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	1c5a      	adds	r2, r3, #1
 800d75e:	60fa      	str	r2, [r7, #12]
 800d760:	461a      	mov	r2, r3
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	4413      	add	r3, r2
 800d766:	781a      	ldrb	r2, [r3, #0]
 800d768:	4b96      	ldr	r3, [pc, #600]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d76a:	765a      	strb	r2, [r3, #25]

		appconf.app_ppm_conf.ctrl_type = data[ind++];
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	1c5a      	adds	r2, r3, #1
 800d770:	60fa      	str	r2, [r7, #12]
 800d772:	461a      	mov	r2, r3
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	4413      	add	r3, r2
 800d778:	781a      	ldrb	r2, [r3, #0]
 800d77a:	4b92      	ldr	r3, [pc, #584]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d77c:	771a      	strb	r2, [r3, #28]
		appconf.app_ppm_conf.pid_max_erpm = buffer_get_float32_auto(data, &ind);
 800d77e:	f107 030c 	add.w	r3, r7, #12
 800d782:	4619      	mov	r1, r3
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f000 fce3 	bl	800e150 <buffer_get_float32_auto>
 800d78a:	eef0 7a40 	vmov.f32	s15, s0
 800d78e:	4b8d      	ldr	r3, [pc, #564]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d790:	edc3 7a08 	vstr	s15, [r3, #32]
		appconf.app_ppm_conf.hyst = buffer_get_float32_auto(data, &ind);
 800d794:	f107 030c 	add.w	r3, r7, #12
 800d798:	4619      	mov	r1, r3
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f000 fcd8 	bl	800e150 <buffer_get_float32_auto>
 800d7a0:	eef0 7a40 	vmov.f32	s15, s0
 800d7a4:	4b87      	ldr	r3, [pc, #540]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d7a6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		appconf.app_ppm_conf.pulse_start = buffer_get_float32_auto(data, &ind);
 800d7aa:	f107 030c 	add.w	r3, r7, #12
 800d7ae:	4619      	mov	r1, r3
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f000 fccd 	bl	800e150 <buffer_get_float32_auto>
 800d7b6:	eef0 7a40 	vmov.f32	s15, s0
 800d7ba:	4b82      	ldr	r3, [pc, #520]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d7bc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		appconf.app_ppm_conf.pulse_end = buffer_get_float32_auto(data, &ind);
 800d7c0:	f107 030c 	add.w	r3, r7, #12
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f000 fcc2 	bl	800e150 <buffer_get_float32_auto>
 800d7cc:	eef0 7a40 	vmov.f32	s15, s0
 800d7d0:	4b7c      	ldr	r3, [pc, #496]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d7d2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		appconf.app_ppm_conf.pulse_center = buffer_get_float32_auto(data, &ind);
 800d7d6:	f107 030c 	add.w	r3, r7, #12
 800d7da:	4619      	mov	r1, r3
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f000 fcb7 	bl	800e150 <buffer_get_float32_auto>
 800d7e2:	eef0 7a40 	vmov.f32	s15, s0
 800d7e6:	4b77      	ldr	r3, [pc, #476]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d7e8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		appconf.app_ppm_conf.median_filter = data[ind++];
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	1c5a      	adds	r2, r3, #1
 800d7f0:	60fa      	str	r2, [r7, #12]
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	4413      	add	r3, r2
 800d7f8:	781b      	ldrb	r3, [r3, #0]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	bf14      	ite	ne
 800d7fe:	2301      	movne	r3, #1
 800d800:	2300      	moveq	r3, #0
 800d802:	b2da      	uxtb	r2, r3
 800d804:	4b6f      	ldr	r3, [pc, #444]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		appconf.app_ppm_conf.safe_start = data[ind++];
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	1c5a      	adds	r2, r3, #1
 800d80e:	60fa      	str	r2, [r7, #12]
 800d810:	461a      	mov	r2, r3
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	4413      	add	r3, r2
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	bf14      	ite	ne
 800d81c:	2301      	movne	r3, #1
 800d81e:	2300      	moveq	r3, #0
 800d820:	b2da      	uxtb	r2, r3
 800d822:	4b68      	ldr	r3, [pc, #416]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		appconf.app_ppm_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 800d828:	f107 030c 	add.w	r3, r7, #12
 800d82c:	4619      	mov	r1, r3
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f000 fc8e 	bl	800e150 <buffer_get_float32_auto>
 800d834:	eef0 7a40 	vmov.f32	s15, s0
 800d838:	4b62      	ldr	r3, [pc, #392]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d83a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		appconf.app_ppm_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 800d83e:	f107 030c 	add.w	r3, r7, #12
 800d842:	4619      	mov	r1, r3
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f000 fc83 	bl	800e150 <buffer_get_float32_auto>
 800d84a:	eef0 7a40 	vmov.f32	s15, s0
 800d84e:	4b5d      	ldr	r3, [pc, #372]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d850:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		appconf.app_ppm_conf.throttle_exp_mode = data[ind++];
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	1c5a      	adds	r2, r3, #1
 800d858:	60fa      	str	r2, [r7, #12]
 800d85a:	461a      	mov	r2, r3
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	4413      	add	r3, r2
 800d860:	781a      	ldrb	r2, [r3, #0]
 800d862:	4b58      	ldr	r3, [pc, #352]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		appconf.app_ppm_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 800d868:	f107 030c 	add.w	r3, r7, #12
 800d86c:	4619      	mov	r1, r3
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f000 fc6e 	bl	800e150 <buffer_get_float32_auto>
 800d874:	eef0 7a40 	vmov.f32	s15, s0
 800d878:	4b52      	ldr	r3, [pc, #328]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d87a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		appconf.app_ppm_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 800d87e:	f107 030c 	add.w	r3, r7, #12
 800d882:	4619      	mov	r1, r3
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f000 fc63 	bl	800e150 <buffer_get_float32_auto>
 800d88a:	eef0 7a40 	vmov.f32	s15, s0
 800d88e:	4b4d      	ldr	r3, [pc, #308]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d890:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		appconf.app_ppm_conf.multi_esc = data[ind++];
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	1c5a      	adds	r2, r3, #1
 800d898:	60fa      	str	r2, [r7, #12]
 800d89a:	461a      	mov	r2, r3
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	4413      	add	r3, r2
 800d8a0:	781b      	ldrb	r3, [r3, #0]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	bf14      	ite	ne
 800d8a6:	2301      	movne	r3, #1
 800d8a8:	2300      	moveq	r3, #0
 800d8aa:	b2da      	uxtb	r2, r3
 800d8ac:	4b45      	ldr	r3, [pc, #276]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d8ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		appconf.app_ppm_conf.tc = data[ind++];
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	1c5a      	adds	r2, r3, #1
 800d8b6:	60fa      	str	r2, [r7, #12]
 800d8b8:	461a      	mov	r2, r3
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	4413      	add	r3, r2
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	bf14      	ite	ne
 800d8c4:	2301      	movne	r3, #1
 800d8c6:	2300      	moveq	r3, #0
 800d8c8:	b2da      	uxtb	r2, r3
 800d8ca:	4b3e      	ldr	r3, [pc, #248]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d8cc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		appconf.app_ppm_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 800d8d0:	f107 030c 	add.w	r3, r7, #12
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f000 fc3a 	bl	800e150 <buffer_get_float32_auto>
 800d8dc:	eef0 7a40 	vmov.f32	s15, s0
 800d8e0:	4b38      	ldr	r3, [pc, #224]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d8e2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		appconf.app_adc_conf.ctrl_type = data[ind++];
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	1c5a      	adds	r2, r3, #1
 800d8ea:	60fa      	str	r2, [r7, #12]
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	4413      	add	r3, r2
 800d8f2:	781a      	ldrb	r2, [r3, #0]
 800d8f4:	4b33      	ldr	r3, [pc, #204]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d8f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		appconf.app_adc_conf.hyst = buffer_get_float32_auto(data, &ind);
 800d8fa:	f107 030c 	add.w	r3, r7, #12
 800d8fe:	4619      	mov	r1, r3
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f000 fc25 	bl	800e150 <buffer_get_float32_auto>
 800d906:	eef0 7a40 	vmov.f32	s15, s0
 800d90a:	4b2e      	ldr	r3, [pc, #184]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d90c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		appconf.app_adc_conf.voltage_start = buffer_get_float32_auto(data, &ind);
 800d910:	f107 030c 	add.w	r3, r7, #12
 800d914:	4619      	mov	r1, r3
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f000 fc1a 	bl	800e150 <buffer_get_float32_auto>
 800d91c:	eef0 7a40 	vmov.f32	s15, s0
 800d920:	4b28      	ldr	r3, [pc, #160]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d922:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		appconf.app_adc_conf.voltage_end = buffer_get_float32_auto(data, &ind);
 800d926:	f107 030c 	add.w	r3, r7, #12
 800d92a:	4619      	mov	r1, r3
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f000 fc0f 	bl	800e150 <buffer_get_float32_auto>
 800d932:	eef0 7a40 	vmov.f32	s15, s0
 800d936:	4b23      	ldr	r3, [pc, #140]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d938:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		appconf.app_adc_conf.voltage_center = buffer_get_float32_auto(data, &ind);
 800d93c:	f107 030c 	add.w	r3, r7, #12
 800d940:	4619      	mov	r1, r3
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f000 fc04 	bl	800e150 <buffer_get_float32_auto>
 800d948:	eef0 7a40 	vmov.f32	s15, s0
 800d94c:	4b1d      	ldr	r3, [pc, #116]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d94e:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
		appconf.app_adc_conf.voltage2_start = buffer_get_float32_auto(data, &ind);
 800d952:	f107 030c 	add.w	r3, r7, #12
 800d956:	4619      	mov	r1, r3
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f000 fbf9 	bl	800e150 <buffer_get_float32_auto>
 800d95e:	eef0 7a40 	vmov.f32	s15, s0
 800d962:	4b18      	ldr	r3, [pc, #96]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d964:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		appconf.app_adc_conf.voltage2_end = buffer_get_float32_auto(data, &ind);
 800d968:	f107 030c 	add.w	r3, r7, #12
 800d96c:	4619      	mov	r1, r3
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f000 fbee 	bl	800e150 <buffer_get_float32_auto>
 800d974:	eef0 7a40 	vmov.f32	s15, s0
 800d978:	4b12      	ldr	r3, [pc, #72]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d97a:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
		appconf.app_adc_conf.use_filter = data[ind++];
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	1c5a      	adds	r2, r3, #1
 800d982:	60fa      	str	r2, [r7, #12]
 800d984:	461a      	mov	r2, r3
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	4413      	add	r3, r2
 800d98a:	781b      	ldrb	r3, [r3, #0]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	bf14      	ite	ne
 800d990:	2301      	movne	r3, #1
 800d992:	2300      	moveq	r3, #0
 800d994:	b2da      	uxtb	r2, r3
 800d996:	4b0b      	ldr	r3, [pc, #44]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d998:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		appconf.app_adc_conf.safe_start = data[ind++];
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	1c5a      	adds	r2, r3, #1
 800d9a0:	60fa      	str	r2, [r7, #12]
 800d9a2:	461a      	mov	r2, r3
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	4413      	add	r3, r2
 800d9a8:	781b      	ldrb	r3, [r3, #0]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	bf14      	ite	ne
 800d9ae:	2301      	movne	r3, #1
 800d9b0:	2300      	moveq	r3, #0
 800d9b2:	b2da      	uxtb	r2, r3
 800d9b4:	4b03      	ldr	r3, [pc, #12]	; (800d9c4 <bldc_interface_process_packet+0x13a0>)
 800d9b6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		appconf.app_adc_conf.cc_button_inverted = data[ind++];
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	1c5a      	adds	r2, r3, #1
 800d9be:	60fa      	str	r2, [r7, #12]
 800d9c0:	e002      	b.n	800d9c8 <bldc_interface_process_packet+0x13a4>
 800d9c2:	bf00      	nop
 800d9c4:	200004a4 	.word	0x200004a4
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	781b      	ldrb	r3, [r3, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	bf14      	ite	ne
 800d9d4:	2301      	movne	r3, #1
 800d9d6:	2300      	moveq	r3, #0
 800d9d8:	b2da      	uxtb	r2, r3
 800d9da:	4bb7      	ldr	r3, [pc, #732]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800d9dc:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		appconf.app_adc_conf.rev_button_inverted = data[ind++];
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	1c5a      	adds	r2, r3, #1
 800d9e4:	60fa      	str	r2, [r7, #12]
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	4413      	add	r3, r2
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	bf14      	ite	ne
 800d9f2:	2301      	movne	r3, #1
 800d9f4:	2300      	moveq	r3, #0
 800d9f6:	b2da      	uxtb	r2, r3
 800d9f8:	4baf      	ldr	r3, [pc, #700]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800d9fa:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		appconf.app_adc_conf.voltage_inverted = data[ind++];
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	1c5a      	adds	r2, r3, #1
 800da02:	60fa      	str	r2, [r7, #12]
 800da04:	461a      	mov	r2, r3
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	4413      	add	r3, r2
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	bf14      	ite	ne
 800da10:	2301      	movne	r3, #1
 800da12:	2300      	moveq	r3, #0
 800da14:	b2da      	uxtb	r2, r3
 800da16:	4ba8      	ldr	r3, [pc, #672]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800da18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		appconf.app_adc_conf.voltage2_inverted = data[ind++];
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	1c5a      	adds	r2, r3, #1
 800da20:	60fa      	str	r2, [r7, #12]
 800da22:	461a      	mov	r2, r3
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	4413      	add	r3, r2
 800da28:	781b      	ldrb	r3, [r3, #0]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	bf14      	ite	ne
 800da2e:	2301      	movne	r3, #1
 800da30:	2300      	moveq	r3, #0
 800da32:	b2da      	uxtb	r2, r3
 800da34:	4ba0      	ldr	r3, [pc, #640]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800da36:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		appconf.app_adc_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 800da3a:	f107 030c 	add.w	r3, r7, #12
 800da3e:	4619      	mov	r1, r3
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f000 fb85 	bl	800e150 <buffer_get_float32_auto>
 800da46:	eef0 7a40 	vmov.f32	s15, s0
 800da4a:	4b9b      	ldr	r3, [pc, #620]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800da4c:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		appconf.app_adc_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 800da50:	f107 030c 	add.w	r3, r7, #12
 800da54:	4619      	mov	r1, r3
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f000 fb7a 	bl	800e150 <buffer_get_float32_auto>
 800da5c:	eef0 7a40 	vmov.f32	s15, s0
 800da60:	4b95      	ldr	r3, [pc, #596]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800da62:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
		appconf.app_adc_conf.throttle_exp_mode = data[ind++];
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	1c5a      	adds	r2, r3, #1
 800da6a:	60fa      	str	r2, [r7, #12]
 800da6c:	461a      	mov	r2, r3
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	4413      	add	r3, r2
 800da72:	781a      	ldrb	r2, [r3, #0]
 800da74:	4b90      	ldr	r3, [pc, #576]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800da76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		appconf.app_adc_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 800da7a:	f107 030c 	add.w	r3, r7, #12
 800da7e:	4619      	mov	r1, r3
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f000 fb65 	bl	800e150 <buffer_get_float32_auto>
 800da86:	eef0 7a40 	vmov.f32	s15, s0
 800da8a:	4b8b      	ldr	r3, [pc, #556]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800da8c:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		appconf.app_adc_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 800da90:	f107 030c 	add.w	r3, r7, #12
 800da94:	4619      	mov	r1, r3
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f000 fb5a 	bl	800e150 <buffer_get_float32_auto>
 800da9c:	eef0 7a40 	vmov.f32	s15, s0
 800daa0:	4b85      	ldr	r3, [pc, #532]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800daa2:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		appconf.app_adc_conf.multi_esc = data[ind++];
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	1c5a      	adds	r2, r3, #1
 800daaa:	60fa      	str	r2, [r7, #12]
 800daac:	461a      	mov	r2, r3
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	4413      	add	r3, r2
 800dab2:	781b      	ldrb	r3, [r3, #0]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	bf14      	ite	ne
 800dab8:	2301      	movne	r3, #1
 800daba:	2300      	moveq	r3, #0
 800dabc:	b2da      	uxtb	r2, r3
 800dabe:	4b7e      	ldr	r3, [pc, #504]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800dac0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		appconf.app_adc_conf.tc = data[ind++];
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	1c5a      	adds	r2, r3, #1
 800dac8:	60fa      	str	r2, [r7, #12]
 800daca:	461a      	mov	r2, r3
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	4413      	add	r3, r2
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	bf14      	ite	ne
 800dad6:	2301      	movne	r3, #1
 800dad8:	2300      	moveq	r3, #0
 800dada:	b2da      	uxtb	r2, r3
 800dadc:	4b76      	ldr	r3, [pc, #472]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800dade:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		appconf.app_adc_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 800dae2:	f107 030c 	add.w	r3, r7, #12
 800dae6:	4619      	mov	r1, r3
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f000 fb31 	bl	800e150 <buffer_get_float32_auto>
 800daee:	eef0 7a40 	vmov.f32	s15, s0
 800daf2:	4b71      	ldr	r3, [pc, #452]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800daf4:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
		appconf.app_adc_conf.update_rate_hz = buffer_get_uint16(data, &ind);
 800daf8:	f107 030c 	add.w	r3, r7, #12
 800dafc:	4619      	mov	r1, r3
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f000 fa6e 	bl	800dfe0 <buffer_get_uint16>
 800db04:	4603      	mov	r3, r0
 800db06:	461a      	mov	r2, r3
 800db08:	4b6b      	ldr	r3, [pc, #428]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800db0a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		appconf.app_uart_baudrate = buffer_get_uint32(data, &ind);
 800db0e:	f107 030c 	add.w	r3, r7, #12
 800db12:	4619      	mov	r1, r3
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f000 fab6 	bl	800e086 <buffer_get_uint32>
 800db1a:	4603      	mov	r3, r0
 800db1c:	4a66      	ldr	r2, [pc, #408]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800db1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

		appconf.app_chuk_conf.ctrl_type = data[ind++];
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	1c5a      	adds	r2, r3, #1
 800db26:	60fa      	str	r2, [r7, #12]
 800db28:	461a      	mov	r2, r3
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	4413      	add	r3, r2
 800db2e:	781a      	ldrb	r2, [r3, #0]
 800db30:	4b61      	ldr	r3, [pc, #388]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800db32:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		appconf.app_chuk_conf.hyst = buffer_get_float32_auto(data, &ind);
 800db36:	f107 030c 	add.w	r3, r7, #12
 800db3a:	4619      	mov	r1, r3
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f000 fb07 	bl	800e150 <buffer_get_float32_auto>
 800db42:	eef0 7a40 	vmov.f32	s15, s0
 800db46:	4b5c      	ldr	r3, [pc, #368]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800db48:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
		appconf.app_chuk_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 800db4c:	f107 030c 	add.w	r3, r7, #12
 800db50:	4619      	mov	r1, r3
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f000 fafc 	bl	800e150 <buffer_get_float32_auto>
 800db58:	eef0 7a40 	vmov.f32	s15, s0
 800db5c:	4b56      	ldr	r3, [pc, #344]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800db5e:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		appconf.app_chuk_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 800db62:	f107 030c 	add.w	r3, r7, #12
 800db66:	4619      	mov	r1, r3
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f000 faf1 	bl	800e150 <buffer_get_float32_auto>
 800db6e:	eef0 7a40 	vmov.f32	s15, s0
 800db72:	4b51      	ldr	r3, [pc, #324]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800db74:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		appconf.app_chuk_conf.stick_erpm_per_s_in_cc = buffer_get_float32_auto(data, &ind);
 800db78:	f107 030c 	add.w	r3, r7, #12
 800db7c:	4619      	mov	r1, r3
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f000 fae6 	bl	800e150 <buffer_get_float32_auto>
 800db84:	eef0 7a40 	vmov.f32	s15, s0
 800db88:	4b4b      	ldr	r3, [pc, #300]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800db8a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		appconf.app_chuk_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 800db8e:	f107 030c 	add.w	r3, r7, #12
 800db92:	4619      	mov	r1, r3
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f000 fadb 	bl	800e150 <buffer_get_float32_auto>
 800db9a:	eef0 7a40 	vmov.f32	s15, s0
 800db9e:	4b46      	ldr	r3, [pc, #280]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800dba0:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		appconf.app_chuk_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 800dba4:	f107 030c 	add.w	r3, r7, #12
 800dba8:	4619      	mov	r1, r3
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f000 fad0 	bl	800e150 <buffer_get_float32_auto>
 800dbb0:	eef0 7a40 	vmov.f32	s15, s0
 800dbb4:	4b40      	ldr	r3, [pc, #256]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800dbb6:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
		appconf.app_chuk_conf.throttle_exp_mode = data[ind++];
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	1c5a      	adds	r2, r3, #1
 800dbbe:	60fa      	str	r2, [r7, #12]
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	4413      	add	r3, r2
 800dbc6:	781a      	ldrb	r2, [r3, #0]
 800dbc8:	4b3b      	ldr	r3, [pc, #236]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800dbca:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		appconf.app_chuk_conf.multi_esc = data[ind++];
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	1c5a      	adds	r2, r3, #1
 800dbd2:	60fa      	str	r2, [r7, #12]
 800dbd4:	461a      	mov	r2, r3
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	4413      	add	r3, r2
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	bf14      	ite	ne
 800dbe0:	2301      	movne	r3, #1
 800dbe2:	2300      	moveq	r3, #0
 800dbe4:	b2da      	uxtb	r2, r3
 800dbe6:	4b34      	ldr	r3, [pc, #208]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800dbe8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
		appconf.app_chuk_conf.tc = data[ind++];
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	1c5a      	adds	r2, r3, #1
 800dbf0:	60fa      	str	r2, [r7, #12]
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	4413      	add	r3, r2
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	bf14      	ite	ne
 800dbfe:	2301      	movne	r3, #1
 800dc00:	2300      	moveq	r3, #0
 800dc02:	b2da      	uxtb	r2, r3
 800dc04:	4b2c      	ldr	r3, [pc, #176]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800dc06:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		appconf.app_chuk_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 800dc0a:	f107 030c 	add.w	r3, r7, #12
 800dc0e:	4619      	mov	r1, r3
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f000 fa9d 	bl	800e150 <buffer_get_float32_auto>
 800dc16:	eef0 7a40 	vmov.f32	s15, s0
 800dc1a:	4b27      	ldr	r3, [pc, #156]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800dc1c:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc

		appconf.app_nrf_conf.speed = data[ind++];
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	1c5a      	adds	r2, r3, #1
 800dc24:	60fa      	str	r2, [r7, #12]
 800dc26:	461a      	mov	r2, r3
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	4413      	add	r3, r2
 800dc2c:	781a      	ldrb	r2, [r3, #0]
 800dc2e:	4b22      	ldr	r3, [pc, #136]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800dc30:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		appconf.app_nrf_conf.power = data[ind++];
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	1c5a      	adds	r2, r3, #1
 800dc38:	60fa      	str	r2, [r7, #12]
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	4413      	add	r3, r2
 800dc40:	781a      	ldrb	r2, [r3, #0]
 800dc42:	4b1d      	ldr	r3, [pc, #116]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800dc44:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
		appconf.app_nrf_conf.crc_type = data[ind++];
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	1c5a      	adds	r2, r3, #1
 800dc4c:	60fa      	str	r2, [r7, #12]
 800dc4e:	461a      	mov	r2, r3
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	4413      	add	r3, r2
 800dc54:	781a      	ldrb	r2, [r3, #0]
 800dc56:	4b18      	ldr	r3, [pc, #96]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800dc58:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
		appconf.app_nrf_conf.retry_delay = data[ind++];
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	1c5a      	adds	r2, r3, #1
 800dc60:	60fa      	str	r2, [r7, #12]
 800dc62:	461a      	mov	r2, r3
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	4413      	add	r3, r2
 800dc68:	781a      	ldrb	r2, [r3, #0]
 800dc6a:	4b13      	ldr	r3, [pc, #76]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800dc6c:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
		appconf.app_nrf_conf.retries = data[ind++];
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	1c5a      	adds	r2, r3, #1
 800dc74:	60fa      	str	r2, [r7, #12]
 800dc76:	461a      	mov	r2, r3
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	4413      	add	r3, r2
 800dc7c:	781a      	ldrb	r2, [r3, #0]
 800dc7e:	4b0e      	ldr	r3, [pc, #56]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800dc80:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		appconf.app_nrf_conf.channel = data[ind++];
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	1c5a      	adds	r2, r3, #1
 800dc88:	60fa      	str	r2, [r7, #12]
 800dc8a:	461a      	mov	r2, r3
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	4413      	add	r3, r2
 800dc90:	781a      	ldrb	r2, [r3, #0]
 800dc92:	4b09      	ldr	r3, [pc, #36]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800dc94:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
		memcpy(appconf.app_nrf_conf.address, data + ind, 3);
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	441a      	add	r2, r3
 800dca0:	4b05      	ldr	r3, [pc, #20]	; (800dcb8 <bldc_interface_process_packet+0x1694>)
 800dca2:	33c6      	adds	r3, #198	; 0xc6
 800dca4:	8811      	ldrh	r1, [r2, #0]
 800dca6:	7892      	ldrb	r2, [r2, #2]
 800dca8:	8019      	strh	r1, [r3, #0]
 800dcaa:	709a      	strb	r2, [r3, #2]
		ind += 3;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	3303      	adds	r3, #3
 800dcb0:	60fb      	str	r3, [r7, #12]
		appconf.app_nrf_conf.send_crc_ack = data[ind++];
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	e002      	b.n	800dcbc <bldc_interface_process_packet+0x1698>
 800dcb6:	bf00      	nop
 800dcb8:	200004a4 	.word	0x200004a4
 800dcbc:	1c5a      	adds	r2, r3, #1
 800dcbe:	60fa      	str	r2, [r7, #12]
 800dcc0:	461a      	mov	r2, r3
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	4413      	add	r3, r2
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	bf14      	ite	ne
 800dccc:	2301      	movne	r3, #1
 800dcce:	2300      	moveq	r3, #0
 800dcd0:	b2da      	uxtb	r2, r3
 800dcd2:	4b81      	ldr	r3, [pc, #516]	; (800ded8 <bldc_interface_process_packet+0x18b4>)
 800dcd4:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9

		if (rx_appconf_func) {
 800dcd8:	4b80      	ldr	r3, [pc, #512]	; (800dedc <bldc_interface_process_packet+0x18b8>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	f000 80eb 	beq.w	800deb8 <bldc_interface_process_packet+0x1894>
			rx_appconf_func(&appconf);
 800dce2:	4b7e      	ldr	r3, [pc, #504]	; (800dedc <bldc_interface_process_packet+0x18b8>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	487c      	ldr	r0, [pc, #496]	; (800ded8 <bldc_interface_process_packet+0x18b4>)
 800dce8:	4798      	blx	r3
		}
		break;
 800dcea:	e0e5      	b.n	800deb8 <bldc_interface_process_packet+0x1894>

	case COMM_DETECT_MOTOR_PARAM:
		ind = 0;
 800dcec:	2300      	movs	r3, #0
 800dcee:	60fb      	str	r3, [r7, #12]
		detect_cycle_int_limit = buffer_get_float32(data, 1000.0, &ind);
 800dcf0:	f107 030c 	add.w	r3, r7, #12
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 800dee0 <bldc_interface_process_packet+0x18bc>
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f000 fa0e 	bl	800e11c <buffer_get_float32>
 800dd00:	eef0 7a40 	vmov.f32	s15, s0
 800dd04:	4b77      	ldr	r3, [pc, #476]	; (800dee4 <bldc_interface_process_packet+0x18c0>)
 800dd06:	edc3 7a00 	vstr	s15, [r3]
		detect_coupling_k = buffer_get_float32(data, 1000.0, &ind);
 800dd0a:	f107 030c 	add.w	r3, r7, #12
 800dd0e:	4619      	mov	r1, r3
 800dd10:	ed9f 0a73 	vldr	s0, [pc, #460]	; 800dee0 <bldc_interface_process_packet+0x18bc>
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	f000 fa01 	bl	800e11c <buffer_get_float32>
 800dd1a:	eef0 7a40 	vmov.f32	s15, s0
 800dd1e:	4b72      	ldr	r3, [pc, #456]	; (800dee8 <bldc_interface_process_packet+0x18c4>)
 800dd20:	edc3 7a00 	vstr	s15, [r3]
		for (i = 0;i < 8;i++) {
 800dd24:	2300      	movs	r3, #0
 800dd26:	61bb      	str	r3, [r7, #24]
 800dd28:	e00f      	b.n	800dd4a <bldc_interface_process_packet+0x1726>
			detect_hall_table[i] = (const signed char)(data[ind++]);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	1c5a      	adds	r2, r3, #1
 800dd2e:	60fa      	str	r2, [r7, #12]
 800dd30:	461a      	mov	r2, r3
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	4413      	add	r3, r2
 800dd36:	781b      	ldrb	r3, [r3, #0]
 800dd38:	b259      	sxtb	r1, r3
 800dd3a:	4a6c      	ldr	r2, [pc, #432]	; (800deec <bldc_interface_process_packet+0x18c8>)
 800dd3c:	69bb      	ldr	r3, [r7, #24]
 800dd3e:	4413      	add	r3, r2
 800dd40:	460a      	mov	r2, r1
 800dd42:	701a      	strb	r2, [r3, #0]
		for (i = 0;i < 8;i++) {
 800dd44:	69bb      	ldr	r3, [r7, #24]
 800dd46:	3301      	adds	r3, #1
 800dd48:	61bb      	str	r3, [r7, #24]
 800dd4a:	69bb      	ldr	r3, [r7, #24]
 800dd4c:	2b07      	cmp	r3, #7
 800dd4e:	ddec      	ble.n	800dd2a <bldc_interface_process_packet+0x1706>
		}
		detect_hall_res = (const signed char)(data[ind++]);
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	1c5a      	adds	r2, r3, #1
 800dd54:	60fa      	str	r2, [r7, #12]
 800dd56:	461a      	mov	r2, r3
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	4413      	add	r3, r2
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	b25a      	sxtb	r2, r3
 800dd60:	4b63      	ldr	r3, [pc, #396]	; (800def0 <bldc_interface_process_packet+0x18cc>)
 800dd62:	701a      	strb	r2, [r3, #0]

		if (rx_detect_func) {
 800dd64:	4b63      	ldr	r3, [pc, #396]	; (800def4 <bldc_interface_process_packet+0x18d0>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	f000 80a7 	beq.w	800debc <bldc_interface_process_packet+0x1898>
			rx_detect_func(detect_cycle_int_limit, detect_coupling_k,
 800dd6e:	4b61      	ldr	r3, [pc, #388]	; (800def4 <bldc_interface_process_packet+0x18d0>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	4a5c      	ldr	r2, [pc, #368]	; (800dee4 <bldc_interface_process_packet+0x18c0>)
 800dd74:	edd2 7a00 	vldr	s15, [r2]
 800dd78:	4a5b      	ldr	r2, [pc, #364]	; (800dee8 <bldc_interface_process_packet+0x18c4>)
 800dd7a:	ed92 7a00 	vldr	s14, [r2]
 800dd7e:	4a5c      	ldr	r2, [pc, #368]	; (800def0 <bldc_interface_process_packet+0x18cc>)
 800dd80:	f992 2000 	ldrsb.w	r2, [r2]
 800dd84:	4611      	mov	r1, r2
 800dd86:	4859      	ldr	r0, [pc, #356]	; (800deec <bldc_interface_process_packet+0x18c8>)
 800dd88:	eef0 0a47 	vmov.f32	s1, s14
 800dd8c:	eeb0 0a67 	vmov.f32	s0, s15
 800dd90:	4798      	blx	r3
					detect_hall_table, detect_hall_res);
		}
		break;
 800dd92:	e093      	b.n	800debc <bldc_interface_process_packet+0x1898>
	case COMM_DETECT_HALL_FOC: {
		// TODO!
	} break;

	case COMM_GET_DECODED_PPM:
		ind = 0;
 800dd94:	2300      	movs	r3, #0
 800dd96:	60fb      	str	r3, [r7, #12]
		dec_ppm = buffer_get_float32(data, 1000000.0, &ind);
 800dd98:	f107 030c 	add.w	r3, r7, #12
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	ed9f 0a56 	vldr	s0, [pc, #344]	; 800def8 <bldc_interface_process_packet+0x18d4>
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f000 f9ba 	bl	800e11c <buffer_get_float32>
 800dda8:	eef0 7a40 	vmov.f32	s15, s0
 800ddac:	4b53      	ldr	r3, [pc, #332]	; (800defc <bldc_interface_process_packet+0x18d8>)
 800ddae:	edc3 7a00 	vstr	s15, [r3]
		dec_ppm_len = buffer_get_float32(data, 1000000.0, &ind);
 800ddb2:	f107 030c 	add.w	r3, r7, #12
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 800def8 <bldc_interface_process_packet+0x18d4>
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f000 f9ad 	bl	800e11c <buffer_get_float32>
 800ddc2:	eef0 7a40 	vmov.f32	s15, s0
 800ddc6:	4b4e      	ldr	r3, [pc, #312]	; (800df00 <bldc_interface_process_packet+0x18dc>)
 800ddc8:	edc3 7a00 	vstr	s15, [r3]

		if (rx_dec_ppm_func) {
 800ddcc:	4b4d      	ldr	r3, [pc, #308]	; (800df04 <bldc_interface_process_packet+0x18e0>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d075      	beq.n	800dec0 <bldc_interface_process_packet+0x189c>
			rx_dec_ppm_func(dec_ppm, dec_ppm_len);
 800ddd4:	4b4b      	ldr	r3, [pc, #300]	; (800df04 <bldc_interface_process_packet+0x18e0>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4a48      	ldr	r2, [pc, #288]	; (800defc <bldc_interface_process_packet+0x18d8>)
 800ddda:	edd2 7a00 	vldr	s15, [r2]
 800ddde:	4a48      	ldr	r2, [pc, #288]	; (800df00 <bldc_interface_process_packet+0x18dc>)
 800dde0:	ed92 7a00 	vldr	s14, [r2]
 800dde4:	eef0 0a47 	vmov.f32	s1, s14
 800dde8:	eeb0 0a67 	vmov.f32	s0, s15
 800ddec:	4798      	blx	r3
		}
		break;
 800ddee:	e067      	b.n	800dec0 <bldc_interface_process_packet+0x189c>

	case COMM_GET_DECODED_ADC:
		ind = 0;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	60fb      	str	r3, [r7, #12]
		dec_adc = buffer_get_float32(data, 1000000.0, &ind);
 800ddf4:	f107 030c 	add.w	r3, r7, #12
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 800def8 <bldc_interface_process_packet+0x18d4>
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f000 f98c 	bl	800e11c <buffer_get_float32>
 800de04:	eef0 7a40 	vmov.f32	s15, s0
 800de08:	4b3f      	ldr	r3, [pc, #252]	; (800df08 <bldc_interface_process_packet+0x18e4>)
 800de0a:	edc3 7a00 	vstr	s15, [r3]
		dec_adc_voltage = buffer_get_float32(data, 1000000.0, &ind);
 800de0e:	f107 030c 	add.w	r3, r7, #12
 800de12:	4619      	mov	r1, r3
 800de14:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800def8 <bldc_interface_process_packet+0x18d4>
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f000 f97f 	bl	800e11c <buffer_get_float32>
 800de1e:	eef0 7a40 	vmov.f32	s15, s0
 800de22:	4b3a      	ldr	r3, [pc, #232]	; (800df0c <bldc_interface_process_packet+0x18e8>)
 800de24:	edc3 7a00 	vstr	s15, [r3]
		// TODO for adc2

		if (rx_dec_adc_func) {
 800de28:	4b39      	ldr	r3, [pc, #228]	; (800df10 <bldc_interface_process_packet+0x18ec>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d049      	beq.n	800dec4 <bldc_interface_process_packet+0x18a0>
			rx_dec_adc_func(dec_adc, dec_adc_voltage);
 800de30:	4b37      	ldr	r3, [pc, #220]	; (800df10 <bldc_interface_process_packet+0x18ec>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	4a34      	ldr	r2, [pc, #208]	; (800df08 <bldc_interface_process_packet+0x18e4>)
 800de36:	edd2 7a00 	vldr	s15, [r2]
 800de3a:	4a34      	ldr	r2, [pc, #208]	; (800df0c <bldc_interface_process_packet+0x18e8>)
 800de3c:	ed92 7a00 	vldr	s14, [r2]
 800de40:	eef0 0a47 	vmov.f32	s1, s14
 800de44:	eeb0 0a67 	vmov.f32	s0, s15
 800de48:	4798      	blx	r3
		}
		break;
 800de4a:	e03b      	b.n	800dec4 <bldc_interface_process_packet+0x18a0>

	case COMM_GET_DECODED_CHUK:
		ind = 0;
 800de4c:	2300      	movs	r3, #0
 800de4e:	60fb      	str	r3, [r7, #12]
		dec_chuk = buffer_get_float32(data, 1000000.0, &ind);
 800de50:	f107 030c 	add.w	r3, r7, #12
 800de54:	4619      	mov	r1, r3
 800de56:	ed9f 0a28 	vldr	s0, [pc, #160]	; 800def8 <bldc_interface_process_packet+0x18d4>
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f000 f95e 	bl	800e11c <buffer_get_float32>
 800de60:	eef0 7a40 	vmov.f32	s15, s0
 800de64:	4b2b      	ldr	r3, [pc, #172]	; (800df14 <bldc_interface_process_packet+0x18f0>)
 800de66:	edc3 7a00 	vstr	s15, [r3]

		if (rx_dec_chuk_func) {
 800de6a:	4b2b      	ldr	r3, [pc, #172]	; (800df18 <bldc_interface_process_packet+0x18f4>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d02a      	beq.n	800dec8 <bldc_interface_process_packet+0x18a4>
			rx_dec_chuk_func(dec_chuk);
 800de72:	4b29      	ldr	r3, [pc, #164]	; (800df18 <bldc_interface_process_packet+0x18f4>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	4a27      	ldr	r2, [pc, #156]	; (800df14 <bldc_interface_process_packet+0x18f0>)
 800de78:	edd2 7a00 	vldr	s15, [r2]
 800de7c:	eeb0 0a67 	vmov.f32	s0, s15
 800de80:	4798      	blx	r3
		}
		break;
 800de82:	e021      	b.n	800dec8 <bldc_interface_process_packet+0x18a4>

	case COMM_SET_MCCONF:
		// This is a confirmation that the new mcconf is received.
		if (rx_mcconf_received_func) {
 800de84:	4b25      	ldr	r3, [pc, #148]	; (800df1c <bldc_interface_process_packet+0x18f8>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d01f      	beq.n	800decc <bldc_interface_process_packet+0x18a8>
			rx_mcconf_received_func();
 800de8c:	4b23      	ldr	r3, [pc, #140]	; (800df1c <bldc_interface_process_packet+0x18f8>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	4798      	blx	r3
		}
		break;
 800de92:	e01b      	b.n	800decc <bldc_interface_process_packet+0x18a8>

	case COMM_SET_APPCONF:
		// This is a confirmation that the new appconf is received.
		if (rx_appconf_received_func) {
 800de94:	4b22      	ldr	r3, [pc, #136]	; (800df20 <bldc_interface_process_packet+0x18fc>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d019      	beq.n	800ded0 <bldc_interface_process_packet+0x18ac>
			rx_appconf_received_func();
 800de9c:	4b20      	ldr	r3, [pc, #128]	; (800df20 <bldc_interface_process_packet+0x18fc>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	4798      	blx	r3
		}
		break;
 800dea2:	e015      	b.n	800ded0 <bldc_interface_process_packet+0x18ac>
		return;
 800dea4:	bf00      	nop
 800dea6:	e014      	b.n	800ded2 <bldc_interface_process_packet+0x18ae>

	default:
		break;
 800dea8:	bf00      	nop
 800deaa:	e012      	b.n	800ded2 <bldc_interface_process_packet+0x18ae>
		break;
 800deac:	bf00      	nop
 800deae:	e010      	b.n	800ded2 <bldc_interface_process_packet+0x18ae>
		break;
 800deb0:	bf00      	nop
 800deb2:	e00e      	b.n	800ded2 <bldc_interface_process_packet+0x18ae>
		break;
 800deb4:	bf00      	nop
 800deb6:	e00c      	b.n	800ded2 <bldc_interface_process_packet+0x18ae>
		break;
 800deb8:	bf00      	nop
 800deba:	e00a      	b.n	800ded2 <bldc_interface_process_packet+0x18ae>
		break;
 800debc:	bf00      	nop
 800debe:	e008      	b.n	800ded2 <bldc_interface_process_packet+0x18ae>
		break;
 800dec0:	bf00      	nop
 800dec2:	e006      	b.n	800ded2 <bldc_interface_process_packet+0x18ae>
		break;
 800dec4:	bf00      	nop
 800dec6:	e004      	b.n	800ded2 <bldc_interface_process_packet+0x18ae>
		break;
 800dec8:	bf00      	nop
 800deca:	e002      	b.n	800ded2 <bldc_interface_process_packet+0x18ae>
		break;
 800decc:	bf00      	nop
 800dece:	e000      	b.n	800ded2 <bldc_interface_process_packet+0x18ae>
		break;
 800ded0:	bf00      	nop
	}
}
 800ded2:	3720      	adds	r7, #32
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}
 800ded8:	200004a4 	.word	0x200004a4
 800dedc:	200005b4 	.word	0x200005b4
 800dee0:	447a0000 	.word	0x447a0000
 800dee4:	20000570 	.word	0x20000570
 800dee8:	20000574 	.word	0x20000574
 800deec:	20000578 	.word	0x20000578
 800def0:	20000580 	.word	0x20000580
 800def4:	200005b8 	.word	0x200005b8
 800def8:	49742400 	.word	0x49742400
 800defc:	20000584 	.word	0x20000584
 800df00:	20000588 	.word	0x20000588
 800df04:	200005bc 	.word	0x200005bc
 800df08:	2000058c 	.word	0x2000058c
 800df0c:	20000590 	.word	0x20000590
 800df10:	200005c0 	.word	0x200005c0
 800df14:	20000594 	.word	0x20000594
 800df18:	200005c4 	.word	0x200005c4
 800df1c:	200005c8 	.word	0x200005c8
 800df20:	200005cc 	.word	0x200005cc

0800df24 <buffer_append_int32>:
void buffer_append_uint16(uint8_t* buffer, uint16_t number, int32_t *index) {
	buffer[(*index)++] = number >> 8;
	buffer[(*index)++] = number;
}

void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t *index) {
 800df24:	b480      	push	{r7}
 800df26:	b085      	sub	sp, #20
 800df28:	af00      	add	r7, sp, #0
 800df2a:	60f8      	str	r0, [r7, #12]
 800df2c:	60b9      	str	r1, [r7, #8]
 800df2e:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	1618      	asrs	r0, r3, #24
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	1c59      	adds	r1, r3, #1
 800df3a:	687a      	ldr	r2, [r7, #4]
 800df3c:	6011      	str	r1, [r2, #0]
 800df3e:	461a      	mov	r2, r3
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	4413      	add	r3, r2
 800df44:	b2c2      	uxtb	r2, r0
 800df46:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	1418      	asrs	r0, r3, #16
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	1c59      	adds	r1, r3, #1
 800df52:	687a      	ldr	r2, [r7, #4]
 800df54:	6011      	str	r1, [r2, #0]
 800df56:	461a      	mov	r2, r3
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	4413      	add	r3, r2
 800df5c:	b2c2      	uxtb	r2, r0
 800df5e:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	1218      	asrs	r0, r3, #8
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	1c59      	adds	r1, r3, #1
 800df6a:	687a      	ldr	r2, [r7, #4]
 800df6c:	6011      	str	r1, [r2, #0]
 800df6e:	461a      	mov	r2, r3
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	4413      	add	r3, r2
 800df74:	b2c2      	uxtb	r2, r0
 800df76:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	1c59      	adds	r1, r3, #1
 800df7e:	687a      	ldr	r2, [r7, #4]
 800df80:	6011      	str	r1, [r2, #0]
 800df82:	461a      	mov	r2, r3
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	4413      	add	r3, r2
 800df88:	68ba      	ldr	r2, [r7, #8]
 800df8a:	b2d2      	uxtb	r2, r2
 800df8c:	701a      	strb	r2, [r3, #0]
}
 800df8e:	bf00      	nop
 800df90:	3714      	adds	r7, #20
 800df92:	46bd      	mov	sp, r7
 800df94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df98:	4770      	bx	lr

0800df9a <buffer_get_int16>:
	}

	buffer_append_uint32(buffer, res, index);
}

int16_t buffer_get_int16(const uint8_t *buffer, int32_t *index) {
 800df9a:	b480      	push	{r7}
 800df9c:	b085      	sub	sp, #20
 800df9e:	af00      	add	r7, sp, #0
 800dfa0:	6078      	str	r0, [r7, #4]
 800dfa2:	6039      	str	r1, [r7, #0]
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	4413      	add	r3, r2
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	021b      	lsls	r3, r3, #8
 800dfb2:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	3301      	adds	r3, #1
 800dfba:	6879      	ldr	r1, [r7, #4]
 800dfbc:	440b      	add	r3, r1
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	b21b      	sxth	r3, r3
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800dfc2:	4313      	orrs	r3, r2
 800dfc4:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	1c9a      	adds	r2, r3, #2
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	601a      	str	r2, [r3, #0]
	return res;
 800dfd0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3714      	adds	r7, #20
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr

0800dfe0 <buffer_get_uint16>:

uint16_t buffer_get_uint16(const uint8_t *buffer, int32_t *index) {
 800dfe0:	b480      	push	{r7}
 800dfe2:	b085      	sub	sp, #20
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	6039      	str	r1, [r7, #0]
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	461a      	mov	r2, r3
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	4413      	add	r3, r2
 800dff4:	781b      	ldrb	r3, [r3, #0]
 800dff6:	021b      	lsls	r3, r3, #8
 800dff8:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	3301      	adds	r3, #1
 800e000:	6879      	ldr	r1, [r7, #4]
 800e002:	440b      	add	r3, r1
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	b21b      	sxth	r3, r3
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 800e008:	4313      	orrs	r3, r2
 800e00a:	b21b      	sxth	r3, r3
 800e00c:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	1c9a      	adds	r2, r3, #2
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	601a      	str	r2, [r3, #0]
	return res;
 800e018:	89fb      	ldrh	r3, [r7, #14]
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3714      	adds	r7, #20
 800e01e:	46bd      	mov	sp, r7
 800e020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e024:	4770      	bx	lr

0800e026 <buffer_get_int32>:

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 800e026:	b480      	push	{r7}
 800e028:	b085      	sub	sp, #20
 800e02a:	af00      	add	r7, sp, #0
 800e02c:	6078      	str	r0, [r7, #4]
 800e02e:	6039      	str	r1, [r7, #0]
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	461a      	mov	r2, r3
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	4413      	add	r3, r2
 800e03a:	781b      	ldrb	r3, [r3, #0]
 800e03c:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	3301      	adds	r3, #1
 800e044:	6879      	ldr	r1, [r7, #4]
 800e046:	440b      	add	r3, r1
 800e048:	781b      	ldrb	r3, [r3, #0]
 800e04a:	041b      	lsls	r3, r3, #16
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800e04c:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	3302      	adds	r3, #2
 800e054:	6879      	ldr	r1, [r7, #4]
 800e056:	440b      	add	r3, r1
 800e058:	781b      	ldrb	r3, [r3, #0]
 800e05a:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 800e05c:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 800e05e:	683a      	ldr	r2, [r7, #0]
 800e060:	6812      	ldr	r2, [r2, #0]
 800e062:	3203      	adds	r2, #3
 800e064:	6879      	ldr	r1, [r7, #4]
 800e066:	440a      	add	r2, r1
 800e068:	7812      	ldrb	r2, [r2, #0]
					((uint32_t) buffer[*index + 2]) << 8 |
 800e06a:	4313      	orrs	r3, r2
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800e06c:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	1d1a      	adds	r2, r3, #4
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	601a      	str	r2, [r3, #0]
	return res;
 800e078:	68fb      	ldr	r3, [r7, #12]
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3714      	adds	r7, #20
 800e07e:	46bd      	mov	sp, r7
 800e080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e084:	4770      	bx	lr

0800e086 <buffer_get_uint32>:

uint32_t buffer_get_uint32(const uint8_t *buffer, int32_t *index) {
 800e086:	b480      	push	{r7}
 800e088:	b085      	sub	sp, #20
 800e08a:	af00      	add	r7, sp, #0
 800e08c:	6078      	str	r0, [r7, #4]
 800e08e:	6039      	str	r1, [r7, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	461a      	mov	r2, r3
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	4413      	add	r3, r2
 800e09a:	781b      	ldrb	r3, [r3, #0]
 800e09c:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	6879      	ldr	r1, [r7, #4]
 800e0a6:	440b      	add	r3, r1
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	041b      	lsls	r3, r3, #16
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 800e0ac:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	3302      	adds	r3, #2
 800e0b4:	6879      	ldr	r1, [r7, #4]
 800e0b6:	440b      	add	r3, r1
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 800e0bc:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 800e0be:	683a      	ldr	r2, [r7, #0]
 800e0c0:	6812      	ldr	r2, [r2, #0]
 800e0c2:	3203      	adds	r2, #3
 800e0c4:	6879      	ldr	r1, [r7, #4]
 800e0c6:	440a      	add	r2, r1
 800e0c8:	7812      	ldrb	r2, [r2, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 800e0ca:	4313      	orrs	r3, r2
 800e0cc:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	1d1a      	adds	r2, r3, #4
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	601a      	str	r2, [r3, #0]
	return res;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3714      	adds	r7, #20
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e4:	4770      	bx	lr

0800e0e6 <buffer_get_float16>:
					((uint64_t) buffer[*index + 7]);
	*index += 8;
	return res;
}

float buffer_get_float16(const uint8_t *buffer, float scale, int32_t *index) {
 800e0e6:	b580      	push	{r7, lr}
 800e0e8:	b084      	sub	sp, #16
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	60f8      	str	r0, [r7, #12]
 800e0ee:	ed87 0a02 	vstr	s0, [r7, #8]
 800e0f2:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int16(buffer, index) / scale;
 800e0f4:	6879      	ldr	r1, [r7, #4]
 800e0f6:	68f8      	ldr	r0, [r7, #12]
 800e0f8:	f7ff ff4f 	bl	800df9a <buffer_get_int16>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	ee07 3a90 	vmov	s15, r3
 800e102:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e106:	edd7 7a02 	vldr	s15, [r7, #8]
 800e10a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e10e:	eef0 7a66 	vmov.f32	s15, s13
}
 800e112:	eeb0 0a67 	vmov.f32	s0, s15
 800e116:	3710      	adds	r7, #16
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <buffer_get_float32>:

float buffer_get_float32(const uint8_t *buffer, float scale, int32_t *index) {
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b084      	sub	sp, #16
 800e120:	af00      	add	r7, sp, #0
 800e122:	60f8      	str	r0, [r7, #12]
 800e124:	ed87 0a02 	vstr	s0, [r7, #8]
 800e128:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int32(buffer, index) / scale;
 800e12a:	6879      	ldr	r1, [r7, #4]
 800e12c:	68f8      	ldr	r0, [r7, #12]
 800e12e:	f7ff ff7a 	bl	800e026 <buffer_get_int32>
 800e132:	ee07 0a90 	vmov	s15, r0
 800e136:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e13a:	edd7 7a02 	vldr	s15, [r7, #8]
 800e13e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e142:	eef0 7a66 	vmov.f32	s15, s13
}
 800e146:	eeb0 0a67 	vmov.f32	s0, s15
 800e14a:	3710      	adds	r7, #16
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <buffer_get_float32_auto>:

double buffer_get_double64(const uint8_t *buffer, double scale, int32_t *index) {
    return (double)buffer_get_int64(buffer, index) / scale;
}

float buffer_get_float32_auto(const uint8_t *buffer, int32_t *index) {
 800e150:	b580      	push	{r7, lr}
 800e152:	b088      	sub	sp, #32
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	6039      	str	r1, [r7, #0]
	uint32_t res = buffer_get_uint32(buffer, index);
 800e15a:	6839      	ldr	r1, [r7, #0]
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f7ff ff92 	bl	800e086 <buffer_get_uint32>
 800e162:	6178      	str	r0, [r7, #20]

	int e = (res >> 23) & 0xFF;
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	0ddb      	lsrs	r3, r3, #23
 800e168:	b2db      	uxtb	r3, r3
 800e16a:	61fb      	str	r3, [r7, #28]
	uint32_t sig_i = res & 0x7FFFFF;
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e172:	613b      	str	r3, [r7, #16]
	bool neg = res & (1 << 31);
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	bf14      	ite	ne
 800e17e:	2301      	movne	r3, #1
 800e180:	2300      	moveq	r3, #0
 800e182:	73fb      	strb	r3, [r7, #15]

	float sig = 0.0;
 800e184:	f04f 0300 	mov.w	r3, #0
 800e188:	61bb      	str	r3, [r7, #24]
	if (e != 0 || sig_i != 0) {
 800e18a:	69fb      	ldr	r3, [r7, #28]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d102      	bne.n	800e196 <buffer_get_float32_auto+0x46>
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d021      	beq.n	800e1da <buffer_get_float32_auto+0x8a>
		sig = (float)sig_i / (8388608.0 * 2.0) + 0.5;
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	ee07 3a90 	vmov	s15, r3
 800e19c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1a0:	ee17 0a90 	vmov	r0, s15
 800e1a4:	f7f2 f9d0 	bl	8000548 <__aeabi_f2d>
 800e1a8:	f04f 0200 	mov.w	r2, #0
 800e1ac:	4b15      	ldr	r3, [pc, #84]	; (800e204 <buffer_get_float32_auto+0xb4>)
 800e1ae:	f7f2 fb4d 	bl	800084c <__aeabi_ddiv>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	4610      	mov	r0, r2
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	f04f 0200 	mov.w	r2, #0
 800e1be:	4b12      	ldr	r3, [pc, #72]	; (800e208 <buffer_get_float32_auto+0xb8>)
 800e1c0:	f7f2 f864 	bl	800028c <__adddf3>
 800e1c4:	4602      	mov	r2, r0
 800e1c6:	460b      	mov	r3, r1
 800e1c8:	4610      	mov	r0, r2
 800e1ca:	4619      	mov	r1, r3
 800e1cc:	f7f2 fd0c 	bl	8000be8 <__aeabi_d2f>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	61bb      	str	r3, [r7, #24]
		e -= 126;
 800e1d4:	69fb      	ldr	r3, [r7, #28]
 800e1d6:	3b7e      	subs	r3, #126	; 0x7e
 800e1d8:	61fb      	str	r3, [r7, #28]
	}

	if (neg) {
 800e1da:	7bfb      	ldrb	r3, [r7, #15]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d005      	beq.n	800e1ec <buffer_get_float32_auto+0x9c>
		sig = -sig;
 800e1e0:	edd7 7a06 	vldr	s15, [r7, #24]
 800e1e4:	eef1 7a67 	vneg.f32	s15, s15
 800e1e8:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	return ldexpf(sig, e);
 800e1ec:	69f8      	ldr	r0, [r7, #28]
 800e1ee:	ed97 0a06 	vldr	s0, [r7, #24]
 800e1f2:	f00c ffcf 	bl	801b194 <ldexpf>
 800e1f6:	eef0 7a40 	vmov.f32	s15, s0
}
 800e1fa:	eeb0 0a67 	vmov.f32	s0, s15
 800e1fe:	3720      	adds	r7, #32
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}
 800e204:	41700000 	.word	0x41700000
 800e208:	3fe00000 	.word	0x3fe00000

0800e20c <crc16>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
 800e20c:	b480      	push	{r7}
 800e20e:	b085      	sub	sp, #20
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
 800e214:	6039      	str	r1, [r7, #0]
	unsigned int i;
	unsigned short cksum = 0;
 800e216:	2300      	movs	r3, #0
 800e218:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 800e21a:	2300      	movs	r3, #0
 800e21c:	60fb      	str	r3, [r7, #12]
 800e21e:	e016      	b.n	800e24e <crc16+0x42>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 800e220:	897b      	ldrh	r3, [r7, #10]
 800e222:	0a1b      	lsrs	r3, r3, #8
 800e224:	b29b      	uxth	r3, r3
 800e226:	4619      	mov	r1, r3
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	1c5a      	adds	r2, r3, #1
 800e22c:	607a      	str	r2, [r7, #4]
 800e22e:	781b      	ldrb	r3, [r3, #0]
 800e230:	404b      	eors	r3, r1
 800e232:	b2db      	uxtb	r3, r3
 800e234:	4a0b      	ldr	r2, [pc, #44]	; (800e264 <crc16+0x58>)
 800e236:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e23a:	b21a      	sxth	r2, r3
 800e23c:	897b      	ldrh	r3, [r7, #10]
 800e23e:	021b      	lsls	r3, r3, #8
 800e240:	b21b      	sxth	r3, r3
 800e242:	4053      	eors	r3, r2
 800e244:	b21b      	sxth	r3, r3
 800e246:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	3301      	adds	r3, #1
 800e24c:	60fb      	str	r3, [r7, #12]
 800e24e:	68fa      	ldr	r2, [r7, #12]
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	429a      	cmp	r2, r3
 800e254:	d3e4      	bcc.n	800e220 <crc16+0x14>
	}
	return cksum;
 800e256:	897b      	ldrh	r3, [r7, #10]
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3714      	adds	r7, #20
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr
 800e264:	080205ac 	.word	0x080205ac

0800e268 <comm_can_send_buffer>:
 * 0: Packet goes to commands_process_packet of receiver
 * 1: Packet goes to commands_send_packet of receiver --> can use to send to other board?
 * 2: Packet goes to commands_process and send function is set to null
 *    so that no reply is sent back.
 */
void comm_can_send_buffer(uint8_t controller_id, uint8_t *data, unsigned int len, uint8_t send) {
 800e268:	b580      	push	{r7, lr}
 800e26a:	b08e      	sub	sp, #56	; 0x38
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	60b9      	str	r1, [r7, #8]
 800e270:	607a      	str	r2, [r7, #4]
 800e272:	461a      	mov	r2, r3
 800e274:	4603      	mov	r3, r0
 800e276:	73fb      	strb	r3, [r7, #15]
 800e278:	4613      	mov	r3, r2
 800e27a:	73bb      	strb	r3, [r7, #14]
	uint8_t send_buffer[8];

	if (len <= 6) {
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2b06      	cmp	r3, #6
 800e280:	d82b      	bhi.n	800e2da <comm_can_send_buffer+0x72>
		uint32_t ind = 0;
 800e282:	2300      	movs	r3, #0
 800e284:	61bb      	str	r3, [r7, #24]
		send_buffer[ind++] = (uint8_t)RNS_TO_VESC;
 800e286:	69bb      	ldr	r3, [r7, #24]
 800e288:	1c5a      	adds	r2, r3, #1
 800e28a:	61ba      	str	r2, [r7, #24]
 800e28c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e290:	4413      	add	r3, r2
 800e292:	221e      	movs	r2, #30
 800e294:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = send;
 800e298:	69bb      	ldr	r3, [r7, #24]
 800e29a:	1c5a      	adds	r2, r3, #1
 800e29c:	61ba      	str	r2, [r7, #24]
 800e29e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e2a2:	4413      	add	r3, r2
 800e2a4:	7bba      	ldrb	r2, [r7, #14]
 800e2a6:	f803 2c28 	strb.w	r2, [r3, #-40]
		memcpy(send_buffer + ind, data, len);
 800e2aa:	f107 0210 	add.w	r2, r7, #16
 800e2ae:	69bb      	ldr	r3, [r7, #24]
 800e2b0:	4413      	add	r3, r2
 800e2b2:	687a      	ldr	r2, [r7, #4]
 800e2b4:	68b9      	ldr	r1, [r7, #8]
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f00c f81a 	bl	801a2f0 <memcpy>
		ind += len;
 800e2bc:	69ba      	ldr	r2, [r7, #24]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	4413      	add	r3, r2
 800e2c2:	61bb      	str	r3, [r7, #24]
#if defined USED_CAN1
			CAN_TxMsgEID(&hcan1, controller_id |
					((uint32_t)CAN_PACKET_PROCESS_SHORT_BUFFER << 8), send_buffer, ind);
#elif defined USED_CAN2
			CAN_TxMsgEID(&hcan2, controller_id |
 800e2c4:	7bfb      	ldrb	r3, [r7, #15]
 800e2c6:	f443 6100 	orr.w	r1, r3, #2048	; 0x800
 800e2ca:	69bb      	ldr	r3, [r7, #24]
 800e2cc:	b2db      	uxtb	r3, r3
 800e2ce:	f107 0210 	add.w	r2, r7, #16
 800e2d2:	4872      	ldr	r0, [pc, #456]	; (800e49c <comm_can_send_buffer+0x234>)
 800e2d4:	f7f5 faa8 	bl	8003828 <CAN_TxMsgEID>
#elif defined USED_CAN2
			CAN_TxMsgEID(&hcan2, controller_id |
								((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
#endif
	}
}
 800e2d8:	e0dc      	b.n	800e494 <comm_can_send_buffer+0x22c>
		unsigned int end_a = 0;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	637b      	str	r3, [r7, #52]	; 0x34
		for (unsigned int i = 0;i < len;i += 7) {
 800e2de:	2300      	movs	r3, #0
 800e2e0:	633b      	str	r3, [r7, #48]	; 0x30
 800e2e2:	e03d      	b.n	800e360 <comm_can_send_buffer+0xf8>
			if (i > 255) {
 800e2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e6:	2bff      	cmp	r3, #255	; 0xff
 800e2e8:	d83f      	bhi.n	800e36a <comm_can_send_buffer+0x102>
			end_a = i + 7;
 800e2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ec:	3307      	adds	r3, #7
 800e2ee:	637b      	str	r3, [r7, #52]	; 0x34
			uint8_t send_len = 7;
 800e2f0:	2307      	movs	r3, #7
 800e2f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			send_buffer[0] = i;
 800e2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f8:	b2db      	uxtb	r3, r3
 800e2fa:	743b      	strb	r3, [r7, #16]
			if ((i + 7) <= len) {
 800e2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2fe:	3307      	adds	r3, #7
 800e300:	687a      	ldr	r2, [r7, #4]
 800e302:	429a      	cmp	r2, r3
 800e304:	d30b      	bcc.n	800e31e <comm_can_send_buffer+0xb6>
				memcpy(send_buffer + 1, data + i, send_len);
 800e306:	f107 0310 	add.w	r3, r7, #16
 800e30a:	3301      	adds	r3, #1
 800e30c:	68b9      	ldr	r1, [r7, #8]
 800e30e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e310:	4411      	add	r1, r2
 800e312:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e316:	4618      	mov	r0, r3
 800e318:	f00b ffea 	bl	801a2f0 <memcpy>
 800e31c:	e011      	b.n	800e342 <comm_can_send_buffer+0xda>
				send_len = len - i;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	b2da      	uxtb	r2, r3
 800e322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e324:	b2db      	uxtb	r3, r3
 800e326:	1ad3      	subs	r3, r2, r3
 800e328:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				memcpy(send_buffer + 1, data + i, send_len);
 800e32c:	f107 0310 	add.w	r3, r7, #16
 800e330:	3301      	adds	r3, #1
 800e332:	68b9      	ldr	r1, [r7, #8]
 800e334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e336:	4411      	add	r1, r2
 800e338:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e33c:	4618      	mov	r0, r3
 800e33e:	f00b ffd7 	bl	801a2f0 <memcpy>
			CAN_TxMsgEID(&hcan2, controller_id |
 800e342:	7bfb      	ldrb	r3, [r7, #15]
 800e344:	f443 61a0 	orr.w	r1, r3, #1280	; 0x500
 800e348:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e34c:	3301      	adds	r3, #1
 800e34e:	b2db      	uxtb	r3, r3
 800e350:	f107 0210 	add.w	r2, r7, #16
 800e354:	4851      	ldr	r0, [pc, #324]	; (800e49c <comm_can_send_buffer+0x234>)
 800e356:	f7f5 fa67 	bl	8003828 <CAN_TxMsgEID>
		for (unsigned int i = 0;i < len;i += 7) {
 800e35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e35c:	3307      	adds	r3, #7
 800e35e:	633b      	str	r3, [r7, #48]	; 0x30
 800e360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	429a      	cmp	r2, r3
 800e366:	d3bd      	bcc.n	800e2e4 <comm_can_send_buffer+0x7c>
 800e368:	e000      	b.n	800e36c <comm_can_send_buffer+0x104>
				break;
 800e36a:	bf00      	nop
		for (unsigned int i = end_a;i < len;i += 6) {
 800e36c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e36e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e370:	e03b      	b.n	800e3ea <comm_can_send_buffer+0x182>
			uint8_t send_len = 6;
 800e372:	2306      	movs	r3, #6
 800e374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			send_buffer[0] = i >> 8;
 800e378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e37a:	0a1b      	lsrs	r3, r3, #8
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	743b      	strb	r3, [r7, #16]
			send_buffer[1] = i & 0xFF;
 800e380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e382:	b2db      	uxtb	r3, r3
 800e384:	747b      	strb	r3, [r7, #17]
			if ((i + 6) <= len) {
 800e386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e388:	3306      	adds	r3, #6
 800e38a:	687a      	ldr	r2, [r7, #4]
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d30b      	bcc.n	800e3a8 <comm_can_send_buffer+0x140>
				memcpy(send_buffer + 2, data + i, send_len);
 800e390:	f107 0310 	add.w	r3, r7, #16
 800e394:	3302      	adds	r3, #2
 800e396:	68b9      	ldr	r1, [r7, #8]
 800e398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e39a:	4411      	add	r1, r2
 800e39c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f00b ffa5 	bl	801a2f0 <memcpy>
 800e3a6:	e011      	b.n	800e3cc <comm_can_send_buffer+0x164>
				send_len = len - i;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	b2da      	uxtb	r2, r3
 800e3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ae:	b2db      	uxtb	r3, r3
 800e3b0:	1ad3      	subs	r3, r2, r3
 800e3b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				memcpy(send_buffer + 2, data + i, send_len);
 800e3b6:	f107 0310 	add.w	r3, r7, #16
 800e3ba:	3302      	adds	r3, #2
 800e3bc:	68b9      	ldr	r1, [r7, #8]
 800e3be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3c0:	4411      	add	r1, r2
 800e3c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f00b ff92 	bl	801a2f0 <memcpy>
			CAN_TxMsgEID(&hcan2, controller_id |
 800e3cc:	7bfb      	ldrb	r3, [r7, #15]
 800e3ce:	f443 61c0 	orr.w	r1, r3, #1536	; 0x600
 800e3d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3d6:	3302      	adds	r3, #2
 800e3d8:	b2db      	uxtb	r3, r3
 800e3da:	f107 0210 	add.w	r2, r7, #16
 800e3de:	482f      	ldr	r0, [pc, #188]	; (800e49c <comm_can_send_buffer+0x234>)
 800e3e0:	f7f5 fa22 	bl	8003828 <CAN_TxMsgEID>
		for (unsigned int i = end_a;i < len;i += 6) {
 800e3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e6:	3306      	adds	r3, #6
 800e3e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d3bf      	bcc.n	800e372 <comm_can_send_buffer+0x10a>
		uint32_t ind = 0;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	623b      	str	r3, [r7, #32]
		send_buffer[ind++] = (uint8_t)RNS_TO_VESC;
 800e3f6:	6a3b      	ldr	r3, [r7, #32]
 800e3f8:	1c5a      	adds	r2, r3, #1
 800e3fa:	623a      	str	r2, [r7, #32]
 800e3fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e400:	4413      	add	r3, r2
 800e402:	221e      	movs	r2, #30
 800e404:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = send;
 800e408:	6a3b      	ldr	r3, [r7, #32]
 800e40a:	1c5a      	adds	r2, r3, #1
 800e40c:	623a      	str	r2, [r7, #32]
 800e40e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e412:	4413      	add	r3, r2
 800e414:	7bba      	ldrb	r2, [r7, #14]
 800e416:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = len >> 8;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	0a19      	lsrs	r1, r3, #8
 800e41e:	6a3b      	ldr	r3, [r7, #32]
 800e420:	1c5a      	adds	r2, r3, #1
 800e422:	623a      	str	r2, [r7, #32]
 800e424:	b2ca      	uxtb	r2, r1
 800e426:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e42a:	440b      	add	r3, r1
 800e42c:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = len & 0xFF;
 800e430:	6a3b      	ldr	r3, [r7, #32]
 800e432:	1c5a      	adds	r2, r3, #1
 800e434:	623a      	str	r2, [r7, #32]
 800e436:	687a      	ldr	r2, [r7, #4]
 800e438:	b2d2      	uxtb	r2, r2
 800e43a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e43e:	440b      	add	r3, r1
 800e440:	f803 2c28 	strb.w	r2, [r3, #-40]
		unsigned short crc = crc16(data, len);
 800e444:	6879      	ldr	r1, [r7, #4]
 800e446:	68b8      	ldr	r0, [r7, #8]
 800e448:	f7ff fee0 	bl	800e20c <crc16>
 800e44c:	4603      	mov	r3, r0
 800e44e:	83fb      	strh	r3, [r7, #30]
		send_buffer[ind++] = (uint8_t)(crc >> 8);
 800e450:	8bfb      	ldrh	r3, [r7, #30]
 800e452:	0a1b      	lsrs	r3, r3, #8
 800e454:	b299      	uxth	r1, r3
 800e456:	6a3b      	ldr	r3, [r7, #32]
 800e458:	1c5a      	adds	r2, r3, #1
 800e45a:	623a      	str	r2, [r7, #32]
 800e45c:	b2ca      	uxtb	r2, r1
 800e45e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e462:	440b      	add	r3, r1
 800e464:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = (uint8_t)(crc & 0xFF);
 800e468:	6a3b      	ldr	r3, [r7, #32]
 800e46a:	1c5a      	adds	r2, r3, #1
 800e46c:	623a      	str	r2, [r7, #32]
 800e46e:	8bfa      	ldrh	r2, [r7, #30]
 800e470:	b2d2      	uxtb	r2, r2
 800e472:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e476:	440b      	add	r3, r1
 800e478:	f803 2c28 	strb.w	r2, [r3, #-40]
			CAN_TxMsgEID(&hcan2, controller_id |
 800e47c:	7bfb      	ldrb	r3, [r7, #15]
 800e47e:	f443 61e0 	orr.w	r1, r3, #1792	; 0x700
								((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
 800e482:	6a3b      	ldr	r3, [r7, #32]
 800e484:	1c5a      	adds	r2, r3, #1
 800e486:	623a      	str	r2, [r7, #32]
			CAN_TxMsgEID(&hcan2, controller_id |
 800e488:	b2db      	uxtb	r3, r3
 800e48a:	f107 0210 	add.w	r2, r7, #16
 800e48e:	4803      	ldr	r0, [pc, #12]	; (800e49c <comm_can_send_buffer+0x234>)
 800e490:	f7f5 f9ca 	bl	8003828 <CAN_TxMsgEID>
}
 800e494:	bf00      	nop
 800e496:	3738      	adds	r7, #56	; 0x38
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}
 800e49c:	20009468 	.word	0x20009468

0800e4a0 <comm_can_set_duty>:

void comm_can_set_duty(uint8_t controller_id, float duty) {
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b084      	sub	sp, #16
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	ed87 0a00 	vstr	s0, [r7]
 800e4ac:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)(duty * 100000.0), &send_index);
 800e4b2:	6838      	ldr	r0, [r7, #0]
 800e4b4:	f7f2 f848 	bl	8000548 <__aeabi_f2d>
 800e4b8:	a310      	add	r3, pc, #64	; (adr r3, 800e4fc <comm_can_set_duty+0x5c>)
 800e4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4be:	f7f2 f89b 	bl	80005f8 <__aeabi_dmul>
 800e4c2:	4602      	mov	r2, r0
 800e4c4:	460b      	mov	r3, r1
 800e4c6:	4610      	mov	r0, r2
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	f7f2 fb45 	bl	8000b58 <__aeabi_d2iz>
 800e4ce:	4601      	mov	r1, r0
 800e4d0:	f107 020c 	add.w	r2, r7, #12
 800e4d4:	f107 0308 	add.w	r3, r7, #8
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f7ff fd23 	bl	800df24 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
			((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
 800e4de:	79f9      	ldrb	r1, [r7, #7]
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	b2db      	uxtb	r3, r3
 800e4e4:	f107 0208 	add.w	r2, r7, #8
 800e4e8:	4803      	ldr	r0, [pc, #12]	; (800e4f8 <comm_can_set_duty+0x58>)
 800e4ea:	f7f5 f99d 	bl	8003828 <CAN_TxMsgEID>
				((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
#endif
}
 800e4ee:	bf00      	nop
 800e4f0:	3710      	adds	r7, #16
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}
 800e4f6:	bf00      	nop
 800e4f8:	20009468 	.word	0x20009468
 800e4fc:	00000000 	.word	0x00000000
 800e500:	40f86a00 	.word	0x40f86a00

0800e504 <comm_can_set_current>:

void comm_can_set_current(uint8_t controller_id, float current) {
 800e504:	b580      	push	{r7, lr}
 800e506:	b084      	sub	sp, #16
 800e508:	af00      	add	r7, sp, #0
 800e50a:	4603      	mov	r3, r0
 800e50c:	ed87 0a00 	vstr	s0, [r7]
 800e510:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800e512:	2300      	movs	r3, #0
 800e514:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)(current * 1000.0), &send_index);
 800e516:	6838      	ldr	r0, [r7, #0]
 800e518:	f7f2 f816 	bl	8000548 <__aeabi_f2d>
 800e51c:	f04f 0200 	mov.w	r2, #0
 800e520:	4b0f      	ldr	r3, [pc, #60]	; (800e560 <comm_can_set_current+0x5c>)
 800e522:	f7f2 f869 	bl	80005f8 <__aeabi_dmul>
 800e526:	4602      	mov	r2, r0
 800e528:	460b      	mov	r3, r1
 800e52a:	4610      	mov	r0, r2
 800e52c:	4619      	mov	r1, r3
 800e52e:	f7f2 fb13 	bl	8000b58 <__aeabi_d2iz>
 800e532:	4601      	mov	r1, r0
 800e534:	f107 020c 	add.w	r2, r7, #12
 800e538:	f107 0308 	add.w	r3, r7, #8
 800e53c:	4618      	mov	r0, r3
 800e53e:	f7ff fcf1 	bl	800df24 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
			((uint32_t)CAN_PACKET_SET_CURRENT << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
 800e542:	79fb      	ldrb	r3, [r7, #7]
 800e544:	f443 7180 	orr.w	r1, r3, #256	; 0x100
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	b2db      	uxtb	r3, r3
 800e54c:	f107 0208 	add.w	r2, r7, #8
 800e550:	4804      	ldr	r0, [pc, #16]	; (800e564 <comm_can_set_current+0x60>)
 800e552:	f7f5 f969 	bl	8003828 <CAN_TxMsgEID>
				((uint32_t)CAN_PACKET_SET_CURRENT << 8), buffer, send_index);
#endif
}
 800e556:	bf00      	nop
 800e558:	3710      	adds	r7, #16
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}
 800e55e:	bf00      	nop
 800e560:	408f4000 	.word	0x408f4000
 800e564:	20009468 	.word	0x20009468

0800e568 <comm_can_set_rpm>:
				((uint32_t)CAN_PACKET_SET_CURRENT_BRAKE << 8), buffer, send_index);
#endif

}

void comm_can_set_rpm(uint8_t controller_id, float rpm) {
 800e568:	b580      	push	{r7, lr}
 800e56a:	b084      	sub	sp, #16
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	4603      	mov	r3, r0
 800e570:	ed87 0a00 	vstr	s0, [r7]
 800e574:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800e576:	2300      	movs	r3, #0
 800e578:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)rpm, &send_index);
 800e57a:	edd7 7a00 	vldr	s15, [r7]
 800e57e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e582:	f107 020c 	add.w	r2, r7, #12
 800e586:	f107 0308 	add.w	r3, r7, #8
 800e58a:	ee17 1a90 	vmov	r1, s15
 800e58e:	4618      	mov	r0, r3
 800e590:	f7ff fcc8 	bl	800df24 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
			((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
 800e594:	79fb      	ldrb	r3, [r7, #7]
 800e596:	f443 7140 	orr.w	r1, r3, #768	; 0x300
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	b2db      	uxtb	r3, r3
 800e59e:	f107 0208 	add.w	r2, r7, #8
 800e5a2:	4803      	ldr	r0, [pc, #12]	; (800e5b0 <comm_can_set_rpm+0x48>)
 800e5a4:	f7f5 f940 	bl	8003828 <CAN_TxMsgEID>
				((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
#endif
}
 800e5a8:	bf00      	nop
 800e5aa:	3710      	adds	r7, #16
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}
 800e5b0:	20009468 	.word	0x20009468

0800e5b4 <decode_VESC>:
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_CURRENT_HANDBRAKE_REL<< 8), buffer, send_index);
#endif
}

void decode_VESC(void){
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b086      	sub	sp, #24
 800e5b8:	af00      	add	r7, sp, #0
	int32_t ind = 0;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	617b      	str	r3, [r7, #20]
	int32_t indexbuf = 0;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	603b      	str	r3, [r7, #0]
//	Vescmsg *rxmsg_tmp;
//	while ((rxmsg_tmp = get_rx_frame()) != 0) {
//		Vescmsg rxmsg = *rxmsg_tmp;
//
//		if (rxmsg.Rxmsg.IDE == CAN_ID_EXT) {
			uint8_t id = vescmsg.Rxmsg.ExtId & 0xFF;
 800e5c2:	4b77      	ldr	r3, [pc, #476]	; (800e7a0 <decode_VESC+0x1ec>)
 800e5c4:	685b      	ldr	r3, [r3, #4]
 800e5c6:	74fb      	strb	r3, [r7, #19]
			CAN_PACKET_ID cmd = vescmsg.Rxmsg.ExtId >> 8;
 800e5c8:	4b75      	ldr	r3, [pc, #468]	; (800e7a0 <decode_VESC+0x1ec>)
 800e5ca:	685b      	ldr	r3, [r3, #4]
 800e5cc:	0a1b      	lsrs	r3, r3, #8
 800e5ce:	74bb      	strb	r3, [r7, #18]

			if (id == 255 || id == RNS_TO_VESC) {
 800e5d0:	7cfb      	ldrb	r3, [r7, #19]
 800e5d2:	2bff      	cmp	r3, #255	; 0xff
 800e5d4:	d003      	beq.n	800e5de <decode_VESC+0x2a>
 800e5d6:	7cfb      	ldrb	r3, [r7, #19]
 800e5d8:	2b1e      	cmp	r3, #30
 800e5da:	f040 80a5 	bne.w	800e728 <decode_VESC+0x174>
				switch (cmd) {
 800e5de:	7cbb      	ldrb	r3, [r7, #18]
 800e5e0:	3b05      	subs	r3, #5
 800e5e2:	2b03      	cmp	r3, #3
 800e5e4:	f200 8096 	bhi.w	800e714 <decode_VESC+0x160>
 800e5e8:	a201      	add	r2, pc, #4	; (adr r2, 800e5f0 <decode_VESC+0x3c>)
 800e5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5ee:	bf00      	nop
 800e5f0:	0800e601 	.word	0x0800e601
 800e5f4:	0800e61b 	.word	0x0800e61b
 800e5f8:	0800e64d 	.word	0x0800e64d
 800e5fc:	0800e6e1 	.word	0x0800e6e1
				case CAN_PACKET_FILL_RX_BUFFER:
					memcpy(rx_buffer + vescmsg.Data[0], vescmsg.Data + 1, vescmsg.Rxmsg.DLC - 1);
 800e600:	4b67      	ldr	r3, [pc, #412]	; (800e7a0 <decode_VESC+0x1ec>)
 800e602:	7f1b      	ldrb	r3, [r3, #28]
 800e604:	461a      	mov	r2, r3
 800e606:	4b67      	ldr	r3, [pc, #412]	; (800e7a4 <decode_VESC+0x1f0>)
 800e608:	18d0      	adds	r0, r2, r3
 800e60a:	4967      	ldr	r1, [pc, #412]	; (800e7a8 <decode_VESC+0x1f4>)
 800e60c:	4b64      	ldr	r3, [pc, #400]	; (800e7a0 <decode_VESC+0x1ec>)
 800e60e:	691b      	ldr	r3, [r3, #16]
 800e610:	3b01      	subs	r3, #1
 800e612:	461a      	mov	r2, r3
 800e614:	f00b fe6c 	bl	801a2f0 <memcpy>
					break;
 800e618:	e085      	b.n	800e726 <decode_VESC+0x172>

				case CAN_PACKET_FILL_RX_BUFFER_LONG:
					rxbuf_ind = (unsigned int)vescmsg.Data[0] << 8;
 800e61a:	4b61      	ldr	r3, [pc, #388]	; (800e7a0 <decode_VESC+0x1ec>)
 800e61c:	7f1b      	ldrb	r3, [r3, #28]
 800e61e:	021b      	lsls	r3, r3, #8
 800e620:	607b      	str	r3, [r7, #4]
					rxbuf_ind |= vescmsg.Data[1];
 800e622:	4b5f      	ldr	r3, [pc, #380]	; (800e7a0 <decode_VESC+0x1ec>)
 800e624:	7f5b      	ldrb	r3, [r3, #29]
 800e626:	461a      	mov	r2, r3
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	4313      	orrs	r3, r2
 800e62c:	607b      	str	r3, [r7, #4]
					if (rxbuf_ind < RX_BUFFER_SIZE) {
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e634:	d270      	bcs.n	800e718 <decode_VESC+0x164>
						memcpy(rx_buffer + rxbuf_ind, vescmsg.Data + 2, vescmsg.Rxmsg.DLC - 2);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	4a5a      	ldr	r2, [pc, #360]	; (800e7a4 <decode_VESC+0x1f0>)
 800e63a:	1898      	adds	r0, r3, r2
 800e63c:	495b      	ldr	r1, [pc, #364]	; (800e7ac <decode_VESC+0x1f8>)
 800e63e:	4b58      	ldr	r3, [pc, #352]	; (800e7a0 <decode_VESC+0x1ec>)
 800e640:	691b      	ldr	r3, [r3, #16]
 800e642:	3b02      	subs	r3, #2
 800e644:	461a      	mov	r2, r3
 800e646:	f00b fe53 	bl	801a2f0 <memcpy>
					}
					break;
 800e64a:	e065      	b.n	800e718 <decode_VESC+0x164>

				case CAN_PACKET_PROCESS_RX_BUFFER:
					ind = 0;
 800e64c:	2300      	movs	r3, #0
 800e64e:	617b      	str	r3, [r7, #20]
					rx_buffer_last_id = vescmsg.Data[ind++];
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	1c5a      	adds	r2, r3, #1
 800e654:	617a      	str	r2, [r7, #20]
 800e656:	4a52      	ldr	r2, [pc, #328]	; (800e7a0 <decode_VESC+0x1ec>)
 800e658:	4413      	add	r3, r2
 800e65a:	7f1b      	ldrb	r3, [r3, #28]
 800e65c:	461a      	mov	r2, r3
 800e65e:	4b54      	ldr	r3, [pc, #336]	; (800e7b0 <decode_VESC+0x1fc>)
 800e660:	601a      	str	r2, [r3, #0]
					commands_send = vescmsg.Data[ind++];
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	1c5a      	adds	r2, r3, #1
 800e666:	617a      	str	r2, [r7, #20]
 800e668:	4a4d      	ldr	r2, [pc, #308]	; (800e7a0 <decode_VESC+0x1ec>)
 800e66a:	4413      	add	r3, r2
 800e66c:	7f1b      	ldrb	r3, [r3, #28]
 800e66e:	747b      	strb	r3, [r7, #17]
					rxbuf_len = (unsigned int)vescmsg.Data[ind++] << 8;
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	1c5a      	adds	r2, r3, #1
 800e674:	617a      	str	r2, [r7, #20]
 800e676:	4a4a      	ldr	r2, [pc, #296]	; (800e7a0 <decode_VESC+0x1ec>)
 800e678:	4413      	add	r3, r2
 800e67a:	7f1b      	ldrb	r3, [r3, #28]
 800e67c:	021b      	lsls	r3, r3, #8
 800e67e:	60fb      	str	r3, [r7, #12]
					rxbuf_len |= (unsigned int)vescmsg.Data[ind++];
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	1c5a      	adds	r2, r3, #1
 800e684:	617a      	str	r2, [r7, #20]
 800e686:	4a46      	ldr	r2, [pc, #280]	; (800e7a0 <decode_VESC+0x1ec>)
 800e688:	4413      	add	r3, r2
 800e68a:	7f1b      	ldrb	r3, [r3, #28]
 800e68c:	461a      	mov	r2, r3
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	4313      	orrs	r3, r2
 800e692:	60fb      	str	r3, [r7, #12]

					if (rxbuf_len > RX_BUFFER_SIZE) {
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e69a:	d83f      	bhi.n	800e71c <decode_VESC+0x168>
						break;
					}

					crc_high = vescmsg.Data[ind++];
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	1c5a      	adds	r2, r3, #1
 800e6a0:	617a      	str	r2, [r7, #20]
 800e6a2:	4a3f      	ldr	r2, [pc, #252]	; (800e7a0 <decode_VESC+0x1ec>)
 800e6a4:	4413      	add	r3, r2
 800e6a6:	7f1b      	ldrb	r3, [r3, #28]
 800e6a8:	72fb      	strb	r3, [r7, #11]
					crc_low = vescmsg.Data[ind++];
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	1c5a      	adds	r2, r3, #1
 800e6ae:	617a      	str	r2, [r7, #20]
 800e6b0:	4a3b      	ldr	r2, [pc, #236]	; (800e7a0 <decode_VESC+0x1ec>)
 800e6b2:	4413      	add	r3, r2
 800e6b4:	7f1b      	ldrb	r3, [r3, #28]
 800e6b6:	72bb      	strb	r3, [r7, #10]

					if (crc16(rx_buffer, rxbuf_len)
 800e6b8:	68f9      	ldr	r1, [r7, #12]
 800e6ba:	483a      	ldr	r0, [pc, #232]	; (800e7a4 <decode_VESC+0x1f0>)
 800e6bc:	f7ff fda6 	bl	800e20c <crc16>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	4619      	mov	r1, r3
							== ((unsigned short) crc_high << 8
 800e6c4:	7afb      	ldrb	r3, [r7, #11]
 800e6c6:	021a      	lsls	r2, r3, #8
									| (unsigned short) crc_low)) {
 800e6c8:	7abb      	ldrb	r3, [r7, #10]
 800e6ca:	4313      	orrs	r3, r2
					if (crc16(rx_buffer, rxbuf_len)
 800e6cc:	4299      	cmp	r1, r3
 800e6ce:	d127      	bne.n	800e720 <decode_VESC+0x16c>
						if(commands_send==1)
 800e6d0:	7c7b      	ldrb	r3, [r7, #17]
 800e6d2:	2b01      	cmp	r3, #1
 800e6d4:	d124      	bne.n	800e720 <decode_VESC+0x16c>
							bldc_interface_process_packet(rx_buffer, rxbuf_len);
 800e6d6:	68f9      	ldr	r1, [r7, #12]
 800e6d8:	4832      	ldr	r0, [pc, #200]	; (800e7a4 <decode_VESC+0x1f0>)
 800e6da:	f7fd ffa3 	bl	800c624 <bldc_interface_process_packet>
					}
					break;
 800e6de:	e01f      	b.n	800e720 <decode_VESC+0x16c>

				case CAN_PACKET_PROCESS_SHORT_BUFFER:
					ind = 0;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	617b      	str	r3, [r7, #20]
					rx_buffer_last_id = vescmsg.Data[ind++];
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	1c5a      	adds	r2, r3, #1
 800e6e8:	617a      	str	r2, [r7, #20]
 800e6ea:	4a2d      	ldr	r2, [pc, #180]	; (800e7a0 <decode_VESC+0x1ec>)
 800e6ec:	4413      	add	r3, r2
 800e6ee:	7f1b      	ldrb	r3, [r3, #28]
 800e6f0:	461a      	mov	r2, r3
 800e6f2:	4b2f      	ldr	r3, [pc, #188]	; (800e7b0 <decode_VESC+0x1fc>)
 800e6f4:	601a      	str	r2, [r3, #0]
					commands_send = vescmsg.Data[ind++];
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	1c5a      	adds	r2, r3, #1
 800e6fa:	617a      	str	r2, [r7, #20]
 800e6fc:	4a28      	ldr	r2, [pc, #160]	; (800e7a0 <decode_VESC+0x1ec>)
 800e6fe:	4413      	add	r3, r2
 800e700:	7f1b      	ldrb	r3, [r3, #28]
 800e702:	747b      	strb	r3, [r7, #17]

					if(commands_send==1)
 800e704:	7c7b      	ldrb	r3, [r7, #17]
 800e706:	2b01      	cmp	r3, #1
 800e708:	d10c      	bne.n	800e724 <decode_VESC+0x170>
						bldc_interface_process_packet(rx_buffer, rxbuf_len);
 800e70a:	68f9      	ldr	r1, [r7, #12]
 800e70c:	4825      	ldr	r0, [pc, #148]	; (800e7a4 <decode_VESC+0x1f0>)
 800e70e:	f7fd ff89 	bl	800c624 <bldc_interface_process_packet>
					break;
 800e712:	e007      	b.n	800e724 <decode_VESC+0x170>
				default:
					break;
 800e714:	bf00      	nop
 800e716:	e03f      	b.n	800e798 <decode_VESC+0x1e4>
					break;
 800e718:	bf00      	nop
 800e71a:	e03d      	b.n	800e798 <decode_VESC+0x1e4>
						break;
 800e71c:	bf00      	nop
 800e71e:	e03b      	b.n	800e798 <decode_VESC+0x1e4>
					break;
 800e720:	bf00      	nop
 800e722:	e039      	b.n	800e798 <decode_VESC+0x1e4>
					break;
 800e724:	bf00      	nop
				switch (cmd) {
 800e726:	e037      	b.n	800e798 <decode_VESC+0x1e4>
				}
			}
			else if(id == 111)
 800e728:	7cfb      	ldrb	r3, [r7, #19]
 800e72a:	2b6f      	cmp	r3, #111	; 0x6f
 800e72c:	d133      	bne.n	800e796 <decode_VESC+0x1e2>
			{
				switch(cmd)
 800e72e:	7cbb      	ldrb	r3, [r7, #18]
 800e730:	2b10      	cmp	r3, #16
 800e732:	d131      	bne.n	800e798 <decode_VESC+0x1e4>
				{
				case CAN_PACKET_STATUS_4:
						info.temp_fet = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &indexbuf);
 800e734:	463b      	mov	r3, r7
 800e736:	4619      	mov	r1, r3
 800e738:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800e73c:	481d      	ldr	r0, [pc, #116]	; (800e7b4 <decode_VESC+0x200>)
 800e73e:	f7ff fcd2 	bl	800e0e6 <buffer_get_float16>
 800e742:	eef0 7a40 	vmov.f32	s15, s0
 800e746:	4b1c      	ldr	r3, [pc, #112]	; (800e7b8 <decode_VESC+0x204>)
 800e748:	edc3 7a00 	vstr	s15, [r3]
						info.temp_motor = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &indexbuf);
 800e74c:	463b      	mov	r3, r7
 800e74e:	4619      	mov	r1, r3
 800e750:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800e754:	4817      	ldr	r0, [pc, #92]	; (800e7b4 <decode_VESC+0x200>)
 800e756:	f7ff fcc6 	bl	800e0e6 <buffer_get_float16>
 800e75a:	eef0 7a40 	vmov.f32	s15, s0
 800e75e:	4b16      	ldr	r3, [pc, #88]	; (800e7b8 <decode_VESC+0x204>)
 800e760:	edc3 7a01 	vstr	s15, [r3, #4]
						info.current_in = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &indexbuf);
 800e764:	463b      	mov	r3, r7
 800e766:	4619      	mov	r1, r3
 800e768:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800e76c:	4811      	ldr	r0, [pc, #68]	; (800e7b4 <decode_VESC+0x200>)
 800e76e:	f7ff fcba 	bl	800e0e6 <buffer_get_float16>
 800e772:	eef0 7a40 	vmov.f32	s15, s0
 800e776:	4b10      	ldr	r3, [pc, #64]	; (800e7b8 <decode_VESC+0x204>)
 800e778:	edc3 7a02 	vstr	s15, [r3, #8]
						info.pos = buffer_get_float16((uint8_t*)&vescmsg.Data, 50, &indexbuf);
 800e77c:	463b      	mov	r3, r7
 800e77e:	4619      	mov	r1, r3
 800e780:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800e7bc <decode_VESC+0x208>
 800e784:	480b      	ldr	r0, [pc, #44]	; (800e7b4 <decode_VESC+0x200>)
 800e786:	f7ff fcae 	bl	800e0e6 <buffer_get_float16>
 800e78a:	eef0 7a40 	vmov.f32	s15, s0
 800e78e:	4b0a      	ldr	r3, [pc, #40]	; (800e7b8 <decode_VESC+0x204>)
 800e790:	edc3 7a03 	vstr	s15, [r3, #12]
						break;
 800e794:	e000      	b.n	800e798 <decode_VESC+0x1e4>
				}
			}
 800e796:	bf00      	nop
//		}
//	}
}
 800e798:	bf00      	nop
 800e79a:	3718      	adds	r7, #24
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}
 800e7a0:	20009b1c 	.word	0x20009b1c
 800e7a4:	200005d0 	.word	0x200005d0
 800e7a8:	20009b39 	.word	0x20009b39
 800e7ac:	20009b3a 	.word	0x20009b3a
 800e7b0:	200007d0 	.word	0x200007d0
 800e7b4:	20009b38 	.word	0x20009b38
 800e7b8:	200069a8 	.word	0x200069a8
 800e7bc:	42480000 	.word	0x42480000

0800e7c0 <set_rx_frames>:
		return res;
	} else
		return 0;
}

uint8_t set_rx_frames(Vescmsg* CANRxFrame) {
 800e7c0:	b4b0      	push	{r4, r5, r7}
 800e7c2:	b085      	sub	sp, #20
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
	uint32_t cmd;

	rx_frames[rx_frame_write++] = *CANRxFrame;
 800e7c8:	4b16      	ldr	r3, [pc, #88]	; (800e824 <set_rx_frames+0x64>)
 800e7ca:	681a      	ldr	r2, [r3, #0]
 800e7cc:	1c53      	adds	r3, r2, #1
 800e7ce:	4915      	ldr	r1, [pc, #84]	; (800e824 <set_rx_frames+0x64>)
 800e7d0:	600b      	str	r3, [r1, #0]
 800e7d2:	4915      	ldr	r1, [pc, #84]	; (800e828 <set_rx_frames+0x68>)
 800e7d4:	4613      	mov	r3, r2
 800e7d6:	00db      	lsls	r3, r3, #3
 800e7d8:	4413      	add	r3, r2
 800e7da:	009b      	lsls	r3, r3, #2
 800e7dc:	18ca      	adds	r2, r1, r3
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	4614      	mov	r4, r2
 800e7e2:	461d      	mov	r5, r3
 800e7e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7ec:	682b      	ldr	r3, [r5, #0]
 800e7ee:	6023      	str	r3, [r4, #0]
	if (rx_frame_write == RX_FRAMES_SIZE) {
 800e7f0:	4b0c      	ldr	r3, [pc, #48]	; (800e824 <set_rx_frames+0x64>)
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	2b64      	cmp	r3, #100	; 0x64
 800e7f6:	d102      	bne.n	800e7fe <set_rx_frames+0x3e>
		rx_frame_write = 0;
 800e7f8:	4b0a      	ldr	r3, [pc, #40]	; (800e824 <set_rx_frames+0x64>)
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	601a      	str	r2, [r3, #0]
	}

	cmd = CANRxFrame->Rxmsg.ExtId >> 8;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	685b      	ldr	r3, [r3, #4]
 800e802:	0a1b      	lsrs	r3, r3, #8
 800e804:	60fb      	str	r3, [r7, #12]
	if(cmd == (uint32_t)CAN_PACKET_PROCESS_RX_BUFFER || cmd == (uint32_t)CAN_PACKET_PROCESS_SHORT_BUFFER)
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	2b07      	cmp	r3, #7
 800e80a:	d002      	beq.n	800e812 <set_rx_frames+0x52>
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	2b08      	cmp	r3, #8
 800e810:	d101      	bne.n	800e816 <set_rx_frames+0x56>
		return 112;
 800e812:	2370      	movs	r3, #112	; 0x70
 800e814:	e000      	b.n	800e818 <set_rx_frames+0x58>
	else
		return 0;
 800e816:	2300      	movs	r3, #0
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3714      	adds	r7, #20
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bcb0      	pop	{r4, r5, r7}
 800e820:	4770      	bx	lr
 800e822:	bf00      	nop
 800e824:	200015e4 	.word	0x200015e4
 800e828:	200007d4 	.word	0x200007d4

0800e82c <VESCInit>:
 * 						  wheel_diameter 	wheel diameter
 * 						  vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCInit(40000,1,0.0037,&csev);
 */
void VESCInit(float max_rpm, float pole_pairs, float wheel_diameter,uint16_t Instance, VESC_t* vesc){
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b086      	sub	sp, #24
 800e830:	af00      	add	r7, sp, #0
 800e832:	ed87 0a05 	vstr	s0, [r7, #20]
 800e836:	edc7 0a04 	vstr	s1, [r7, #16]
 800e83a:	ed87 1a03 	vstr	s2, [r7, #12]
 800e83e:	4603      	mov	r3, r0
 800e840:	6079      	str	r1, [r7, #4]
 800e842:	817b      	strh	r3, [r7, #10]
	bldc_interface_init(bldc_send_packet);
 800e844:	4809      	ldr	r0, [pc, #36]	; (800e86c <VESCInit+0x40>)
 800e846:	f7fd fedd 	bl	800c604 <bldc_interface_init>
//	bldc_interface_set_rx_value_selective_func(bldc_val_selective_received_cb);

	vesc->max_rpm = max_rpm;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	697a      	ldr	r2, [r7, #20]
 800e84e:	601a      	str	r2, [r3, #0]
	vesc->pole_pairs = pole_pairs;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	693a      	ldr	r2, [r7, #16]
 800e854:	605a      	str	r2, [r3, #4]
	vesc->wheel_diameter = wheel_diameter;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	68fa      	ldr	r2, [r7, #12]
 800e85a:	609a      	str	r2, [r3, #8]
	vesc->Instance = Instance;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	897a      	ldrh	r2, [r7, #10]
 800e860:	819a      	strh	r2, [r3, #12]
}
 800e862:	bf00      	nop
 800e864:	3718      	adds	r7, #24
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}
 800e86a:	bf00      	nop
 800e86c:	0800e939 	.word	0x0800e939

0800e870 <VESCPDC>:
 * 						  BRightPDC		duty cycle of back right motor
 * 						  vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCPDC(0.5, 0.5, 0.5, 0.5);
 */
void VESCPDC(float Duty, VESC_t* vesc) {
 800e870:	b580      	push	{r7, lr}
 800e872:	b082      	sub	sp, #8
 800e874:	af00      	add	r7, sp, #0
 800e876:	ed87 0a01 	vstr	s0, [r7, #4]
 800e87a:	6038      	str	r0, [r7, #0]

	if(Duty > 0.9){
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f7f1 fe63 	bl	8000548 <__aeabi_f2d>
 800e882:	a30e      	add	r3, pc, #56	; (adr r3, 800e8bc <VESCPDC+0x4c>)
 800e884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e888:	f7f2 f946 	bl	8000b18 <__aeabi_dcmpgt>
 800e88c:	4603      	mov	r3, r0
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d001      	beq.n	800e896 <VESCPDC+0x26>
		Duty = 0.9;
 800e892:	4b09      	ldr	r3, [pc, #36]	; (800e8b8 <VESCPDC+0x48>)
 800e894:	607b      	str	r3, [r7, #4]
	}

	comm_can_set_duty(vesc->Instance, Duty);
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	899b      	ldrh	r3, [r3, #12]
 800e89a:	b2db      	uxtb	r3, r3
 800e89c:	ed97 0a01 	vldr	s0, [r7, #4]
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7ff fdfd 	bl	800e4a0 <comm_can_set_duty>

	vesc->pdc_flag = 1;
 800e8a6:	683a      	ldr	r2, [r7, #0]
 800e8a8:	7c13      	ldrb	r3, [r2, #16]
 800e8aa:	f043 0304 	orr.w	r3, r3, #4
 800e8ae:	7413      	strb	r3, [r2, #16]
}
 800e8b0:	bf00      	nop
 800e8b2:	3708      	adds	r7, #8
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}
 800e8b8:	3f666666 	.word	0x3f666666
 800e8bc:	cccccccd 	.word	0xcccccccd
 800e8c0:	3feccccc 	.word	0x3feccccc

0800e8c4 <VESCStop>:
 * Function Remarks		: NONE
 * Function Arguments	: vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCStop(&csev);
 */
void VESCStop(VESC_t* vesc) {
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b082      	sub	sp, #8
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]

	if(vesc->pdc_flag) {
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	7c1b      	ldrb	r3, [r3, #16]
 800e8d0:	f003 0304 	and.w	r3, r3, #4
 800e8d4:	b2db      	uxtb	r3, r3
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d007      	beq.n	800e8ea <VESCStop+0x26>
		comm_can_set_duty(vesc->Instance, 0.0);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	899b      	ldrh	r3, [r3, #12]
 800e8de:	b2db      	uxtb	r3, r3
 800e8e0:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800e934 <VESCStop+0x70>
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f7ff fddb 	bl	800e4a0 <comm_can_set_duty>
	}

	if(vesc->rpm_flag) {
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	7c1b      	ldrb	r3, [r3, #16]
 800e8ee:	f003 0302 	and.w	r3, r3, #2
 800e8f2:	b2db      	uxtb	r3, r3
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d007      	beq.n	800e908 <VESCStop+0x44>
		comm_can_set_rpm(vesc->Instance, 0.0);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	899b      	ldrh	r3, [r3, #12]
 800e8fc:	b2db      	uxtb	r3, r3
 800e8fe:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800e934 <VESCStop+0x70>
 800e902:	4618      	mov	r0, r3
 800e904:	f7ff fe30 	bl	800e568 <comm_can_set_rpm>
	}

	if(vesc->current_flag){
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	7c1b      	ldrb	r3, [r3, #16]
 800e90c:	f003 0301 	and.w	r3, r3, #1
 800e910:	b2db      	uxtb	r3, r3
 800e912:	2b00      	cmp	r3, #0
 800e914:	d007      	beq.n	800e926 <VESCStop+0x62>
		comm_can_set_current(vesc->Instance, 0.0);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	899b      	ldrh	r3, [r3, #12]
 800e91a:	b2db      	uxtb	r3, r3
 800e91c:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800e934 <VESCStop+0x70>
 800e920:	4618      	mov	r0, r3
 800e922:	f7ff fdef 	bl	800e504 <comm_can_set_current>
	}

	vesc->flags = 0;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2200      	movs	r2, #0
 800e92a:	741a      	strb	r2, [r3, #16]
}
 800e92c:	bf00      	nop
 800e92e:	3708      	adds	r7, #8
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}
 800e934:	00000000 	.word	0x00000000

0800e938 <bldc_send_packet>:
//	rx_value_complete = false;
	return rx_value_buf;
}

/*	Private Function	*/
void bldc_send_packet(uint8_t controller_id, uint8_t *data, unsigned int len) {
 800e938:	b580      	push	{r7, lr}
 800e93a:	b084      	sub	sp, #16
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	4603      	mov	r3, r0
 800e940:	60b9      	str	r1, [r7, #8]
 800e942:	607a      	str	r2, [r7, #4]
 800e944:	73fb      	strb	r3, [r7, #15]
	comm_can_send_buffer(controller_id, data, len, 0);
 800e946:	7bf8      	ldrb	r0, [r7, #15]
 800e948:	2300      	movs	r3, #0
 800e94a:	687a      	ldr	r2, [r7, #4]
 800e94c:	68b9      	ldr	r1, [r7, #8]
 800e94e:	f7ff fc8b 	bl	800e268 <comm_can_send_buffer>
}
 800e952:	bf00      	nop
 800e954:	3710      	adds	r7, #16
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}
	...

0800e95c <LidarInit>:
float Lidar_Shoot_Angles[10] = {0, -90.0, -135, -45, 0, 0, 0, 0, 0, 0}; // The angles should be absolute, try not to reset the angle every path plan
float Lidar_Center_Offsets[8] = {-0.19, 0.94, 1.23, 0.96, -1.38, 0.89, -0.21, 0.91};  // Offsets for center positions
float Lidar_Adjust_Lim[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

void LidarInit(UART_HandleTypeDef* lidarUART, MODE_t mode, Lidar_t* lidar)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b084      	sub	sp, #16
 800e960:	af00      	add	r7, sp, #0
 800e962:	60f8      	str	r0, [r7, #12]
 800e964:	460b      	mov	r3, r1
 800e966:	607a      	str	r2, [r7, #4]
 800e968:	72fb      	strb	r3, [r7, #11]
	lidar->lidar_UART = lidarUART;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	68fa      	ldr	r2, [r7, #12]
 800e96e:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	lidar->mode = mode;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	7afa      	ldrb	r2, [r7, #11]
 800e976:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
	lidar->start = 0;
 800e97a:	687a      	ldr	r2, [r7, #4]
 800e97c:	f892 3294 	ldrb.w	r3, [r2, #660]	; 0x294
 800e980:	f36f 0382 	bfc	r3, #2, #1
 800e984:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294

	if(lidar->mode == CONTINUOUS)
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d110      	bne.n	800e9b4 <LidarInit+0x58>
	{
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 5);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	33c9      	adds	r3, #201	; 0xc9
 800e99c:	2205      	movs	r2, #5
 800e99e:	4619      	mov	r1, r3
 800e9a0:	f007 ff68 	bl	8016874 <HAL_UART_Receive_IT>
		lidar->new = 0;
 800e9a4:	687a      	ldr	r2, [r7, #4]
 800e9a6:	f892 3294 	ldrb.w	r3, [r2, #660]	; 0x294
 800e9aa:	f36f 0300 	bfc	r3, #0, #1
 800e9ae:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
		lidar->angle = B;
		lidar->angle_counter = 2;
		lidar->AdjEnb = 0;
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 2);
	}
}
 800e9b2:	e099      	b.n	800eae8 <LidarInit+0x18c>
		LidarAnglesInit(Lidar_Shoot_Angles[0], Lidar_Shoot_Angles[1], Lidar_Shoot_Angles[2], Lidar_Shoot_Angles[3],
 800e9b4:	4b4e      	ldr	r3, [pc, #312]	; (800eaf0 <LidarInit+0x194>)
 800e9b6:	edd3 7a00 	vldr	s15, [r3]
 800e9ba:	4b4d      	ldr	r3, [pc, #308]	; (800eaf0 <LidarInit+0x194>)
 800e9bc:	ed93 7a01 	vldr	s14, [r3, #4]
 800e9c0:	4b4b      	ldr	r3, [pc, #300]	; (800eaf0 <LidarInit+0x194>)
 800e9c2:	edd3 6a02 	vldr	s13, [r3, #8]
 800e9c6:	4b4a      	ldr	r3, [pc, #296]	; (800eaf0 <LidarInit+0x194>)
 800e9c8:	ed93 6a03 	vldr	s12, [r3, #12]
 800e9cc:	4b48      	ldr	r3, [pc, #288]	; (800eaf0 <LidarInit+0x194>)
 800e9ce:	edd3 5a04 	vldr	s11, [r3, #16]
 800e9d2:	4b47      	ldr	r3, [pc, #284]	; (800eaf0 <LidarInit+0x194>)
 800e9d4:	ed93 5a05 	vldr	s10, [r3, #20]
 800e9d8:	4b45      	ldr	r3, [pc, #276]	; (800eaf0 <LidarInit+0x194>)
 800e9da:	ed93 3a06 	vldr	s6, [r3, #24]
 800e9de:	4b44      	ldr	r3, [pc, #272]	; (800eaf0 <LidarInit+0x194>)
 800e9e0:	edd3 3a07 	vldr	s7, [r3, #28]
 800e9e4:	4b42      	ldr	r3, [pc, #264]	; (800eaf0 <LidarInit+0x194>)
 800e9e6:	ed93 4a08 	vldr	s8, [r3, #32]
 800e9ea:	4b41      	ldr	r3, [pc, #260]	; (800eaf0 <LidarInit+0x194>)
 800e9ec:	edd3 4a09 	vldr	s9, [r3, #36]	; 0x24
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	eef0 2a45 	vmov.f32	s5, s10
 800e9f6:	eeb0 2a65 	vmov.f32	s4, s11
 800e9fa:	eef0 1a46 	vmov.f32	s3, s12
 800e9fe:	eeb0 1a66 	vmov.f32	s2, s13
 800ea02:	eef0 0a47 	vmov.f32	s1, s14
 800ea06:	eeb0 0a67 	vmov.f32	s0, s15
 800ea0a:	f000 f8df 	bl	800ebcc <LidarAnglesInit>
		LidarOffsetInit(Lidar_Offsets[0], Lidar_Offsets[1], Lidar_Offsets[2], Lidar_Offsets[3], Lidar_Offsets[4], Lidar_Offsets[5], lidar);
 800ea0e:	4b39      	ldr	r3, [pc, #228]	; (800eaf4 <LidarInit+0x198>)
 800ea10:	edd3 7a00 	vldr	s15, [r3]
 800ea14:	4b37      	ldr	r3, [pc, #220]	; (800eaf4 <LidarInit+0x198>)
 800ea16:	ed93 7a01 	vldr	s14, [r3, #4]
 800ea1a:	4b36      	ldr	r3, [pc, #216]	; (800eaf4 <LidarInit+0x198>)
 800ea1c:	edd3 6a02 	vldr	s13, [r3, #8]
 800ea20:	4b34      	ldr	r3, [pc, #208]	; (800eaf4 <LidarInit+0x198>)
 800ea22:	ed93 6a03 	vldr	s12, [r3, #12]
 800ea26:	4b33      	ldr	r3, [pc, #204]	; (800eaf4 <LidarInit+0x198>)
 800ea28:	edd3 5a04 	vldr	s11, [r3, #16]
 800ea2c:	4b31      	ldr	r3, [pc, #196]	; (800eaf4 <LidarInit+0x198>)
 800ea2e:	ed93 5a05 	vldr	s10, [r3, #20]
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	eef0 2a45 	vmov.f32	s5, s10
 800ea38:	eeb0 2a65 	vmov.f32	s4, s11
 800ea3c:	eef0 1a46 	vmov.f32	s3, s12
 800ea40:	eeb0 1a66 	vmov.f32	s2, s13
 800ea44:	eef0 0a47 	vmov.f32	s1, s14
 800ea48:	eeb0 0a67 	vmov.f32	s0, s15
 800ea4c:	f000 f856 	bl	800eafc <LidarOffsetInit>
		LidarCenterOffsetInit(Lidar_Center_Offsets[0], Lidar_Center_Offsets[1], Lidar_Center_Offsets[2], Lidar_Center_Offsets[3], Lidar_Center_Offsets[4],
 800ea50:	4b29      	ldr	r3, [pc, #164]	; (800eaf8 <LidarInit+0x19c>)
 800ea52:	edd3 7a00 	vldr	s15, [r3]
 800ea56:	4b28      	ldr	r3, [pc, #160]	; (800eaf8 <LidarInit+0x19c>)
 800ea58:	ed93 7a01 	vldr	s14, [r3, #4]
 800ea5c:	4b26      	ldr	r3, [pc, #152]	; (800eaf8 <LidarInit+0x19c>)
 800ea5e:	edd3 6a02 	vldr	s13, [r3, #8]
 800ea62:	4b25      	ldr	r3, [pc, #148]	; (800eaf8 <LidarInit+0x19c>)
 800ea64:	ed93 6a03 	vldr	s12, [r3, #12]
 800ea68:	4b23      	ldr	r3, [pc, #140]	; (800eaf8 <LidarInit+0x19c>)
 800ea6a:	edd3 5a04 	vldr	s11, [r3, #16]
 800ea6e:	4b22      	ldr	r3, [pc, #136]	; (800eaf8 <LidarInit+0x19c>)
 800ea70:	ed93 5a05 	vldr	s10, [r3, #20]
 800ea74:	4b20      	ldr	r3, [pc, #128]	; (800eaf8 <LidarInit+0x19c>)
 800ea76:	edd3 4a06 	vldr	s9, [r3, #24]
 800ea7a:	4b1f      	ldr	r3, [pc, #124]	; (800eaf8 <LidarInit+0x19c>)
 800ea7c:	ed93 4a07 	vldr	s8, [r3, #28]
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	eef0 3a44 	vmov.f32	s7, s8
 800ea86:	eeb0 3a64 	vmov.f32	s6, s9
 800ea8a:	eef0 2a45 	vmov.f32	s5, s10
 800ea8e:	eeb0 2a65 	vmov.f32	s4, s11
 800ea92:	eef0 1a46 	vmov.f32	s3, s12
 800ea96:	eeb0 1a66 	vmov.f32	s2, s13
 800ea9a:	eef0 0a47 	vmov.f32	s1, s14
 800ea9e:	eeb0 0a67 	vmov.f32	s0, s15
 800eaa2:	f000 f859 	bl	800eb58 <LidarCenterOffsetInit>
		lidar->response = NO;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	2201      	movs	r2, #1
 800eaaa:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
		lidar->pos = PICK_LEFT;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2201      	movs	r2, #1
 800eab2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar->pos_counter = 1;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2201      	movs	r2, #1
 800eaba:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		lidar->angle = B;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2202      	movs	r2, #2
 800eac2:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
		lidar->angle_counter = 2;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2202      	movs	r2, #2
 800eaca:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
		lidar->AdjEnb = 0;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2200      	movs	r2, #0
 800ead2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 2);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	33c9      	adds	r3, #201	; 0xc9
 800eae0:	2202      	movs	r2, #2
 800eae2:	4619      	mov	r1, r3
 800eae4:	f007 fec6 	bl	8016874 <HAL_UART_Receive_IT>
}
 800eae8:	bf00      	nop
 800eaea:	3710      	adds	r7, #16
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	20000038 	.word	0x20000038
 800eaf4:	20000020 	.word	0x20000020
 800eaf8:	20000060 	.word	0x20000060

0800eafc <LidarOffsetInit>:

void LidarOffsetInit(float left_offset_x, float left_offset_y, float right_offset_x, float right_offset_y, float center_offset_x,
		float center_offset_y, Lidar_t* lidar)
{
 800eafc:	b480      	push	{r7}
 800eafe:	b089      	sub	sp, #36	; 0x24
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	ed87 0a07 	vstr	s0, [r7, #28]
 800eb06:	edc7 0a06 	vstr	s1, [r7, #24]
 800eb0a:	ed87 1a05 	vstr	s2, [r7, #20]
 800eb0e:	edc7 1a04 	vstr	s3, [r7, #16]
 800eb12:	ed87 2a03 	vstr	s4, [r7, #12]
 800eb16:	edc7 2a02 	vstr	s5, [r7, #8]
 800eb1a:	6078      	str	r0, [r7, #4]
	lidar->left_offset_x = left_offset_x;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	69fa      	ldr	r2, [r7, #28]
 800eb20:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	lidar->left_offset_y = left_offset_y;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	69ba      	ldr	r2, [r7, #24]
 800eb28:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	lidar->right_offset_x = right_offset_x;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	697a      	ldr	r2, [r7, #20]
 800eb30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	lidar->right_offset_y = right_offset_y;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	693a      	ldr	r2, [r7, #16]
 800eb38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	lidar->center_offset_x = center_offset_x;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	68fa      	ldr	r2, [r7, #12]
 800eb40:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	lidar->center_offset_y = center_offset_y;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	68ba      	ldr	r2, [r7, #8]
 800eb48:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
}
 800eb4c:	bf00      	nop
 800eb4e:	3724      	adds	r7, #36	; 0x24
 800eb50:	46bd      	mov	sp, r7
 800eb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb56:	4770      	bx	lr

0800eb58 <LidarCenterOffsetInit>:

void LidarCenterOffsetInit(float center_1_offset_x, float center_1_offset_y, float center_2_offset_x, float center_2_offset_y,
		float center_3_offset_x, float center_3_offset_y, float center_4_offset_x, float center_4_offset_y, Lidar_t* lidar)
{
 800eb58:	b480      	push	{r7}
 800eb5a:	b08b      	sub	sp, #44	; 0x2c
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800eb62:	edc7 0a08 	vstr	s1, [r7, #32]
 800eb66:	ed87 1a07 	vstr	s2, [r7, #28]
 800eb6a:	edc7 1a06 	vstr	s3, [r7, #24]
 800eb6e:	ed87 2a05 	vstr	s4, [r7, #20]
 800eb72:	edc7 2a04 	vstr	s5, [r7, #16]
 800eb76:	ed87 3a03 	vstr	s6, [r7, #12]
 800eb7a:	edc7 3a02 	vstr	s7, [r7, #8]
 800eb7e:	6078      	str	r0, [r7, #4]
	lidar->center_1_offset_x = center_1_offset_x;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb84:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	lidar->center_1_offset_y = center_1_offset_y;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6a3a      	ldr	r2, [r7, #32]
 800eb8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	lidar->center_2_offset_x = center_2_offset_x;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	69fa      	ldr	r2, [r7, #28]
 800eb94:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	lidar->center_2_offset_y = center_2_offset_y;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	69ba      	ldr	r2, [r7, #24]
 800eb9c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	lidar->center_3_offset_x = center_3_offset_x;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	697a      	ldr	r2, [r7, #20]
 800eba4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	lidar->center_3_offset_y = center_3_offset_y;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	693a      	ldr	r2, [r7, #16]
 800ebac:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	lidar->center_4_offset_x = center_4_offset_x;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	68fa      	ldr	r2, [r7, #12]
 800ebb4:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	lidar->center_4_offset_y = center_4_offset_y;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	68ba      	ldr	r2, [r7, #8]
 800ebbc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c

}
 800ebc0:	bf00      	nop
 800ebc2:	372c      	adds	r7, #44	; 0x2c
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebca:	4770      	bx	lr

0800ebcc <LidarAnglesInit>:

// Will be shooting based on sequence A-> B -> C -> D
void LidarAnglesInit(float left_angle_A, float left_angle_B, float left_angle_C, float left_angle_D,
					 float right_angle_A, float right_angle_B, float right_angle_C, float right_angle_D,
					 float center_angle_A, float center_angle_B, Lidar_t* lidar)
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b08d      	sub	sp, #52	; 0x34
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 800ebd6:	edc7 0a0a 	vstr	s1, [r7, #40]	; 0x28
 800ebda:	ed87 1a09 	vstr	s2, [r7, #36]	; 0x24
 800ebde:	edc7 1a08 	vstr	s3, [r7, #32]
 800ebe2:	ed87 2a07 	vstr	s4, [r7, #28]
 800ebe6:	edc7 2a06 	vstr	s5, [r7, #24]
 800ebea:	ed87 3a05 	vstr	s6, [r7, #20]
 800ebee:	edc7 3a04 	vstr	s7, [r7, #16]
 800ebf2:	ed87 4a03 	vstr	s8, [r7, #12]
 800ebf6:	edc7 4a02 	vstr	s9, [r7, #8]
 800ebfa:	6078      	str	r0, [r7, #4]
	lidar->left_angle_A = left_angle_A;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec00:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	lidar->left_angle_B = left_angle_B;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec08:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
	lidar->left_angle_C = left_angle_C;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec10:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	lidar->left_angle_D = left_angle_D;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	6a3a      	ldr	r2, [r7, #32]
 800ec18:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc

	lidar->right_angle_A = right_angle_A;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	69fa      	ldr	r2, [r7, #28]
 800ec20:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	lidar->right_angle_B = right_angle_B;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	69ba      	ldr	r2, [r7, #24]
 800ec28:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	lidar->right_angle_C = right_angle_C;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	697a      	ldr	r2, [r7, #20]
 800ec30:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	lidar->right_angle_D = right_angle_D;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	693a      	ldr	r2, [r7, #16]
 800ec38:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec

	lidar->center_angle_A = center_angle_A;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	68fa      	ldr	r2, [r7, #12]
 800ec40:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	lidar->center_angle_B = center_angle_B;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	68ba      	ldr	r2, [r7, #8]
 800ec48:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
}
 800ec4c:	bf00      	nop
 800ec4e:	3734      	adds	r7, #52	; 0x34
 800ec50:	46bd      	mov	sp, r7
 800ec52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec56:	4770      	bx	lr

0800ec58 <LidarSetPos>:

void LidarSetPos(Pos_t pose, Lidar_t* lidar)
{
 800ec58:	b5b0      	push	{r4, r5, r7, lr}
 800ec5a:	b0de      	sub	sp, #376	; 0x178
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	4602      	mov	r2, r0
 800ec60:	463b      	mov	r3, r7
 800ec62:	6019      	str	r1, [r3, #0]
 800ec64:	1dfb      	adds	r3, r7, #7
 800ec66:	701a      	strb	r2, [r3, #0]
	// Pick Left
	float pick_left_adjust[1][7] = {{2.0, 2.23, 0.70, 0, 0, 0, 0}};
 800ec68:	4bcb      	ldr	r3, [pc, #812]	; (800ef98 <LidarSetPos+0x340>)
 800ec6a:	f507 74ae 	add.w	r4, r7, #348	; 0x15c
 800ec6e:	461d      	mov	r5, r3
 800ec70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ec78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float pick_left_adjust_2[1][7] = {{1.0, 0, 0, -90, 0, 0, 0}};
 800ec7c:	4bc7      	ldr	r3, [pc, #796]	; (800ef9c <LidarSetPos+0x344>)
 800ec7e:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800ec82:	461d      	mov	r5, r3
 800ec84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ec8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	float bang_fence[1][7] = {{1.2, 0, 10, pp.real_z, 0, 0, 0}};
 800ec90:	4bc3      	ldr	r3, [pc, #780]	; (800efa0 <LidarSetPos+0x348>)
 800ec92:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800ec96:	f04f 0300 	mov.w	r3, #0
 800ec9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800ec9e:	4bc1      	ldr	r3, [pc, #772]	; (800efa4 <LidarSetPos+0x34c>)
 800eca0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800eca4:	4bc0      	ldr	r3, [pc, #768]	; (800efa8 <LidarSetPos+0x350>)
 800eca6:	691b      	ldr	r3, [r3, #16]
 800eca8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800ecac:	f04f 0300 	mov.w	r3, #0
 800ecb0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800ecb4:	f04f 0300 	mov.w	r3, #0
 800ecb8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800ecbc:	f04f 0300 	mov.w	r3, #0
 800ecc0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	float pick_left_to_center_1[1][7] = {{1.0, 0, 10, -90, 0, 0, 0}};
 800ecc4:	4bb9      	ldr	r3, [pc, #740]	; (800efac <LidarSetPos+0x354>)
 800ecc6:	f507 7484 	add.w	r4, r7, #264	; 0x108
 800ecca:	461d      	mov	r5, r3
 800eccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ecce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ecd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ecd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_1_to_center_2[1][7] = {{2.0, 1.86, 0, pp.real_z, 1, 0, 0}};
 800ecd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ecdc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ece0:	4bb3      	ldr	r3, [pc, #716]	; (800efb0 <LidarSetPos+0x358>)
 800ece2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ece6:	f04f 0300 	mov.w	r3, #0
 800ecea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ecee:	4bae      	ldr	r3, [pc, #696]	; (800efa8 <LidarSetPos+0x350>)
 800ecf0:	691b      	ldr	r3, [r3, #16]
 800ecf2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ecf6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ecfa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ecfe:	f04f 0300 	mov.w	r3, #0
 800ed02:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ed06:	f04f 0300 	mov.w	r3, #0
 800ed0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	float center_2_to_center_1[1][7] = {{2.0, -1.86, 0, pp.real_z, 1, 0, 0}};
 800ed0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ed12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ed16:	4ba7      	ldr	r3, [pc, #668]	; (800efb4 <LidarSetPos+0x35c>)
 800ed18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ed1c:	f04f 0300 	mov.w	r3, #0
 800ed20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ed24:	4ba0      	ldr	r3, [pc, #640]	; (800efa8 <LidarSetPos+0x350>)
 800ed26:	691b      	ldr	r3, [r3, #16]
 800ed28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ed2c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ed30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ed34:	f04f 0300 	mov.w	r3, #0
 800ed38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ed3c:	f04f 0300 	mov.w	r3, #0
 800ed40:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	float center_2_to_center[1][7] = {{2.0, 1.33, 0, pp.real_z, 1, 0, 0}};
 800ed44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ed48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ed4c:	4b9a      	ldr	r3, [pc, #616]	; (800efb8 <LidarSetPos+0x360>)
 800ed4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ed52:	f04f 0300 	mov.w	r3, #0
 800ed56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ed5a:	4b93      	ldr	r3, [pc, #588]	; (800efa8 <LidarSetPos+0x350>)
 800ed5c:	691b      	ldr	r3, [r3, #16]
 800ed5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ed62:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ed66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ed6a:	f04f 0300 	mov.w	r3, #0
 800ed6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ed72:	f04f 0300 	mov.w	r3, #0
 800ed76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	float center_to_center_2[1][7] = {{2.0, -1.33, 0, pp.real_z, 1, 0, 0}};
 800ed7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ed7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ed82:	4b8e      	ldr	r3, [pc, #568]	; (800efbc <LidarSetPos+0x364>)
 800ed84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ed88:	f04f 0300 	mov.w	r3, #0
 800ed8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ed90:	4b85      	ldr	r3, [pc, #532]	; (800efa8 <LidarSetPos+0x350>)
 800ed92:	691b      	ldr	r3, [r3, #16]
 800ed94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ed98:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ed9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800eda0:	f04f 0300 	mov.w	r3, #0
 800eda4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800eda8:	f04f 0300 	mov.w	r3, #0
 800edac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	float center_to_center_3[1][7] = {{2.0, 1.25, 0, pp.real_z, 1, 0, 0}};
 800edb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800edb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800edb6:	4b82      	ldr	r3, [pc, #520]	; (800efc0 <LidarSetPos+0x368>)
 800edb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800edbc:	f04f 0300 	mov.w	r3, #0
 800edc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800edc4:	4b78      	ldr	r3, [pc, #480]	; (800efa8 <LidarSetPos+0x350>)
 800edc6:	691b      	ldr	r3, [r3, #16]
 800edc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800edcc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800edd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800edd4:	f04f 0300 	mov.w	r3, #0
 800edd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800eddc:	f04f 0300 	mov.w	r3, #0
 800ede0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float center_3_to_center[1][7] = {{2.0, -1.25, 0, pp.real_z, 1, 0, 0}};
 800ede4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ede8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800edec:	601a      	str	r2, [r3, #0]
 800edee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800edf2:	4a74      	ldr	r2, [pc, #464]	; (800efc4 <LidarSetPos+0x36c>)
 800edf4:	605a      	str	r2, [r3, #4]
 800edf6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800edfa:	f04f 0200 	mov.w	r2, #0
 800edfe:	609a      	str	r2, [r3, #8]
 800ee00:	4b69      	ldr	r3, [pc, #420]	; (800efa8 <LidarSetPos+0x350>)
 800ee02:	691a      	ldr	r2, [r3, #16]
 800ee04:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ee08:	60da      	str	r2, [r3, #12]
 800ee0a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ee0e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ee12:	611a      	str	r2, [r3, #16]
 800ee14:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ee18:	f04f 0200 	mov.w	r2, #0
 800ee1c:	615a      	str	r2, [r3, #20]
 800ee1e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ee22:	f04f 0200 	mov.w	r2, #0
 800ee26:	619a      	str	r2, [r3, #24]
	float center_3_to_center_4[1][7] = {{2.0, 1.95, 0, pp.real_z, 1, 0, 0}};
 800ee28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ee2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ee30:	601a      	str	r2, [r3, #0]
 800ee32:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ee36:	4a64      	ldr	r2, [pc, #400]	; (800efc8 <LidarSetPos+0x370>)
 800ee38:	605a      	str	r2, [r3, #4]
 800ee3a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ee3e:	f04f 0200 	mov.w	r2, #0
 800ee42:	609a      	str	r2, [r3, #8]
 800ee44:	4b58      	ldr	r3, [pc, #352]	; (800efa8 <LidarSetPos+0x350>)
 800ee46:	691a      	ldr	r2, [r3, #16]
 800ee48:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ee4c:	60da      	str	r2, [r3, #12]
 800ee4e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ee52:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ee56:	611a      	str	r2, [r3, #16]
 800ee58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ee5c:	f04f 0200 	mov.w	r2, #0
 800ee60:	615a      	str	r2, [r3, #20]
 800ee62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ee66:	f04f 0200 	mov.w	r2, #0
 800ee6a:	619a      	str	r2, [r3, #24]
	float center_4_to_center_3[1][7] = {{2.0, -1.95, 0, pp.real_z, 1, 0, 0}};
 800ee6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ee74:	601a      	str	r2, [r3, #0]
 800ee76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee7a:	4a54      	ldr	r2, [pc, #336]	; (800efcc <LidarSetPos+0x374>)
 800ee7c:	605a      	str	r2, [r3, #4]
 800ee7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee82:	f04f 0200 	mov.w	r2, #0
 800ee86:	609a      	str	r2, [r3, #8]
 800ee88:	4b47      	ldr	r3, [pc, #284]	; (800efa8 <LidarSetPos+0x350>)
 800ee8a:	691a      	ldr	r2, [r3, #16]
 800ee8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee90:	60da      	str	r2, [r3, #12]
 800ee92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee96:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ee9a:	611a      	str	r2, [r3, #16]
 800ee9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eea0:	f04f 0200 	mov.w	r2, #0
 800eea4:	615a      	str	r2, [r3, #20]
 800eea6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eeaa:	f04f 0200 	mov.w	r2, #0
 800eeae:	619a      	str	r2, [r3, #24]
	float center_4_to_pick_right[1][7] = {{2.0, 2, 0, pp.real_z, 1, 0, 0}};
 800eeb0:	f107 030c 	add.w	r3, r7, #12
 800eeb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800eeb8:	601a      	str	r2, [r3, #0]
 800eeba:	f107 030c 	add.w	r3, r7, #12
 800eebe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800eec2:	605a      	str	r2, [r3, #4]
 800eec4:	f107 030c 	add.w	r3, r7, #12
 800eec8:	f04f 0200 	mov.w	r2, #0
 800eecc:	609a      	str	r2, [r3, #8]
 800eece:	4b36      	ldr	r3, [pc, #216]	; (800efa8 <LidarSetPos+0x350>)
 800eed0:	691a      	ldr	r2, [r3, #16]
 800eed2:	f107 030c 	add.w	r3, r7, #12
 800eed6:	60da      	str	r2, [r3, #12]
 800eed8:	f107 030c 	add.w	r3, r7, #12
 800eedc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800eee0:	611a      	str	r2, [r3, #16]
 800eee2:	f107 030c 	add.w	r3, r7, #12
 800eee6:	f04f 0200 	mov.w	r2, #0
 800eeea:	615a      	str	r2, [r3, #20]
 800eeec:	f107 030c 	add.w	r3, r7, #12
 800eef0:	f04f 0200 	mov.w	r2, #0
 800eef4:	619a      	str	r2, [r3, #24]

	switch(pose) // Target Pose
 800eef6:	1dfb      	adds	r3, r7, #7
 800eef8:	781b      	ldrb	r3, [r3, #0]
 800eefa:	3b02      	subs	r3, #2
 800eefc:	2b07      	cmp	r3, #7
 800eefe:	f200 86e3 	bhi.w	800fcc8 <LidarSetPos+0x1070>
 800ef02:	a201      	add	r2, pc, #4	; (adr r2, 800ef08 <LidarSetPos+0x2b0>)
 800ef04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef08:	0800ef29 	.word	0x0800ef29
 800ef0c:	0800efd1 	.word	0x0800efd1
 800ef10:	0800f239 	.word	0x0800f239
 800ef14:	0800f4d3 	.word	0x0800f4d3
 800ef18:	0800f769 	.word	0x0800f769
 800ef1c:	0800f9ff 	.word	0x0800f9ff
 800ef20:	0800fb73 	.word	0x0800fb73
 800ef24:	0800fbf9 	.word	0x0800fbf9
	{
		case UPPER_LEFT:
			switch(lidar->pos) // Self Pose
 800ef28:	463b      	mov	r3, r7
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800ef30:	3b01      	subs	r3, #1
 800ef32:	2b08      	cmp	r3, #8
 800ef34:	d82c      	bhi.n	800ef90 <LidarSetPos+0x338>
 800ef36:	a201      	add	r2, pc, #4	; (adr r2, 800ef3c <LidarSetPos+0x2e4>)
 800ef38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef3c:	0800ef61 	.word	0x0800ef61
 800ef40:	0800ef91 	.word	0x0800ef91
 800ef44:	0800ef91 	.word	0x0800ef91
 800ef48:	0800ef91 	.word	0x0800ef91
 800ef4c:	0800ef79 	.word	0x0800ef79
 800ef50:	0800ef91 	.word	0x0800ef91
 800ef54:	0800ef91 	.word	0x0800ef91
 800ef58:	0800ef85 	.word	0x0800ef85
 800ef5c:	0800ef6d 	.word	0x0800ef6d
			{
				case PICK_LEFT:
					lidar->pos = UPPER_LEFT;
 800ef60:	463b      	mov	r3, r7
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	2202      	movs	r2, #2
 800ef66:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800ef6a:	e012      	b.n	800ef92 <LidarSetPos+0x33a>

				case PICK_RIGHT:
					lidar->pos = UPPER_LEFT;
 800ef6c:	463b      	mov	r3, r7
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	2202      	movs	r2, #2
 800ef72:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800ef76:	e00c      	b.n	800ef92 <LidarSetPos+0x33a>

				case CENTER:
					lidar->pos = UPPER_LEFT;
 800ef78:	463b      	mov	r3, r7
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	2202      	movs	r2, #2
 800ef7e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800ef82:	e006      	b.n	800ef92 <LidarSetPos+0x33a>

				case UPPER_RIGHT:
					lidar->pos = UPPER_LEFT;
 800ef84:	463b      	mov	r3, r7
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	2202      	movs	r2, #2
 800ef8a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800ef8e:	e000      	b.n	800ef92 <LidarSetPos+0x33a>

				default:
					break;
 800ef90:	bf00      	nop

			}
			break;
 800ef92:	f000 be9a 	b.w	800fcca <LidarSetPos+0x1072>
 800ef96:	bf00      	nop
 800ef98:	0802050c 	.word	0x0802050c
 800ef9c:	08020528 	.word	0x08020528
 800efa0:	3f99999a 	.word	0x3f99999a
 800efa4:	41200000 	.word	0x41200000
 800efa8:	20007188 	.word	0x20007188
 800efac:	08020544 	.word	0x08020544
 800efb0:	3fee147b 	.word	0x3fee147b
 800efb4:	bfee147b 	.word	0xbfee147b
 800efb8:	3faa3d71 	.word	0x3faa3d71
 800efbc:	bfaa3d71 	.word	0xbfaa3d71
 800efc0:	3fa00000 	.word	0x3fa00000
 800efc4:	bfa00000 	.word	0xbfa00000
 800efc8:	3ff9999a 	.word	0x3ff9999a
 800efcc:	bff9999a 	.word	0xbff9999a

		case CENTER_1:

			switch(lidar->pos) // Self Pose
 800efd0:	463b      	mov	r3, r7
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800efd8:	3b01      	subs	r3, #1
 800efda:	2b08      	cmp	r3, #8
 800efdc:	f200 8123 	bhi.w	800f226 <LidarSetPos+0x5ce>
 800efe0:	a201      	add	r2, pc, #4	; (adr r2, 800efe8 <LidarSetPos+0x390>)
 800efe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efe6:	bf00      	nop
 800efe8:	0800f00d 	.word	0x0800f00d
 800efec:	0800f133 	.word	0x0800f133
 800eff0:	0800f227 	.word	0x0800f227
 800eff4:	0800f14b 	.word	0x0800f14b
 800eff8:	0800f227 	.word	0x0800f227
 800effc:	0800f227 	.word	0x0800f227
 800f000:	0800f227 	.word	0x0800f227
 800f004:	0800f13f 	.word	0x0800f13f
 800f008:	0800f127 	.word	0x0800f127
			{
				case PICK_LEFT:
					vesc_duty = 0.18;
 800f00c:	4bae      	ldr	r3, [pc, #696]	; (800f2c8 <LidarSetPos+0x670>)
 800f00e:	4aaf      	ldr	r2, [pc, #700]	; (800f2cc <LidarSetPos+0x674>)
 800f010:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800f012:	f7fc fcf5 	bl	800ba00 <ResetCoordinate>
					PP_start(pick_left_adjust, 1, &pp);
 800f016:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800f01a:	4aad      	ldr	r2, [pc, #692]	; (800f2d0 <LidarSetPos+0x678>)
 800f01c:	2101      	movs	r1, #1
 800f01e:	4618      	mov	r0, r3
 800f020:	f7f6 fc4d 	bl	80058be <PP_start>
					while(pp.pp_start)
 800f024:	e00d      	b.n	800f042 <LidarSetPos+0x3ea>
//						if(pp.real_x >= 0.15 && !servo_close_once)
//						{
//							close_servo;
//							servo_close_once = 1;
//						}
						if(ps4.button == SQUARE)
 800f026:	4bab      	ldr	r3, [pc, #684]	; (800f2d4 <LidarSetPos+0x67c>)
 800f028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f02a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f02e:	d108      	bne.n	800f042 <LidarSetPos+0x3ea>
						{
							while(ps4.button == SQUARE);
 800f030:	bf00      	nop
 800f032:	4ba8      	ldr	r3, [pc, #672]	; (800f2d4 <LidarSetPos+0x67c>)
 800f034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f03a:	d0fa      	beq.n	800f032 <LidarSetPos+0x3da>
							PP_stop(&pp);
 800f03c:	48a4      	ldr	r0, [pc, #656]	; (800f2d0 <LidarSetPos+0x678>)
 800f03e:	f7f6 fe78 	bl	8005d32 <PP_stop>
					while(pp.pp_start)
 800f042:	4ba3      	ldr	r3, [pc, #652]	; (800f2d0 <LidarSetPos+0x678>)
 800f044:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f048:	f003 0301 	and.w	r3, r3, #1
 800f04c:	b2db      	uxtb	r3, r3
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d1e9      	bne.n	800f026 <LidarSetPos+0x3ce>
						}
					}
					PP_start(pick_left_adjust_2, 1, &pp);
 800f052:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f056:	4a9e      	ldr	r2, [pc, #632]	; (800f2d0 <LidarSetPos+0x678>)
 800f058:	2101      	movs	r1, #1
 800f05a:	4618      	mov	r0, r3
 800f05c:	f7f6 fc2f 	bl	80058be <PP_start>
					while(pp.pp_start)
 800f060:	e00d      	b.n	800f07e <LidarSetPos+0x426>
					{
						if(ps4.button == SQUARE)
 800f062:	4b9c      	ldr	r3, [pc, #624]	; (800f2d4 <LidarSetPos+0x67c>)
 800f064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f06a:	d108      	bne.n	800f07e <LidarSetPos+0x426>
						{
							while(ps4.button == SQUARE);
 800f06c:	bf00      	nop
 800f06e:	4b99      	ldr	r3, [pc, #612]	; (800f2d4 <LidarSetPos+0x67c>)
 800f070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f076:	d0fa      	beq.n	800f06e <LidarSetPos+0x416>
							PP_stop(&pp);
 800f078:	4895      	ldr	r0, [pc, #596]	; (800f2d0 <LidarSetPos+0x678>)
 800f07a:	f7f6 fe5a 	bl	8005d32 <PP_stop>
					while(pp.pp_start)
 800f07e:	4b94      	ldr	r3, [pc, #592]	; (800f2d0 <LidarSetPos+0x678>)
 800f080:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f084:	f003 0301 	and.w	r3, r3, #1
 800f088:	b2db      	uxtb	r3, r3
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d1e9      	bne.n	800f062 <LidarSetPos+0x40a>
						}
					}
					lidar->pos = CENTER_1;
 800f08e:	463b      	mov	r3, r7
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	2203      	movs	r2, #3
 800f094:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd

					// Stick to fence
					PP_start(pick_left_to_center_1, 1, &pp);
 800f098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f09c:	4a8c      	ldr	r2, [pc, #560]	; (800f2d0 <LidarSetPos+0x678>)
 800f09e:	2101      	movs	r1, #1
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f7f6 fc0c 	bl	80058be <PP_start>
					while(pp.pp_start)
 800f0a6:	e028      	b.n	800f0fa <LidarSetPos+0x4a2>
					{
						if(ps4.button == SQUARE)
 800f0a8:	4b8a      	ldr	r3, [pc, #552]	; (800f2d4 <LidarSetPos+0x67c>)
 800f0aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f0b0:	d112      	bne.n	800f0d8 <LidarSetPos+0x480>
						{
							while(ps4.button == SQUARE);
 800f0b2:	bf00      	nop
 800f0b4:	4b87      	ldr	r3, [pc, #540]	; (800f2d4 <LidarSetPos+0x67c>)
 800f0b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f0bc:	d0fa      	beq.n	800f0b4 <LidarSetPos+0x45c>
							PP_stop(&pp);
 800f0be:	4884      	ldr	r0, [pc, #528]	; (800f2d0 <LidarSetPos+0x678>)
 800f0c0:	f7f6 fe37 	bl	8005d32 <PP_stop>
							lidar->pos = PICK_LEFT;
 800f0c4:	463b      	mov	r3, r7
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	2201      	movs	r2, #1
 800f0ca:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = PICK_LEFT;
 800f0ce:	463b      	mov	r3, r7
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	2201      	movs	r2, #1
 800f0d4:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800f0d8:	2108      	movs	r1, #8
 800f0da:	487f      	ldr	r0, [pc, #508]	; (800f2d8 <LidarSetPos+0x680>)
 800f0dc:	f003 fca2 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d109      	bne.n	800f0fa <LidarSetPos+0x4a2>
 800f0e6:	2110      	movs	r1, #16
 800f0e8:	487b      	ldr	r0, [pc, #492]	; (800f2d8 <LidarSetPos+0x680>)
 800f0ea:	f003 fc9b 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d102      	bne.n	800f0fa <LidarSetPos+0x4a2>
							PP_stop(&pp);
 800f0f4:	4876      	ldr	r0, [pc, #472]	; (800f2d0 <LidarSetPos+0x678>)
 800f0f6:	f7f6 fe1c 	bl	8005d32 <PP_stop>
					while(pp.pp_start)
 800f0fa:	4b75      	ldr	r3, [pc, #468]	; (800f2d0 <LidarSetPos+0x678>)
 800f0fc:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f100:	f003 0301 	and.w	r3, r3, #1
 800f104:	b2db      	uxtb	r3, r3
 800f106:	2b00      	cmp	r3, #0
 800f108:	d1ce      	bne.n	800f0a8 <LidarSetPos+0x450>
					}
//					Shot();

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800f10a:	463b      	mov	r3, r7
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f112:	1dfa      	adds	r2, r7, #7
 800f114:	7812      	ldrb	r2, [r2, #0]
 800f116:	429a      	cmp	r2, r3
 800f118:	f040 8088 	bne.w	800f22c <LidarSetPos+0x5d4>
						LidarAdjust(lidar);
 800f11c:	463b      	mov	r3, r7
 800f11e:	6818      	ldr	r0, [r3, #0]
 800f120:	f001 f854 	bl	80101cc <LidarAdjust>
					break;
 800f124:	e082      	b.n	800f22c <LidarSetPos+0x5d4>

				case PICK_RIGHT:
					lidar->pos = CENTER_1;
 800f126:	463b      	mov	r3, r7
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	2203      	movs	r2, #3
 800f12c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f130:	e080      	b.n	800f234 <LidarSetPos+0x5dc>

				case UPPER_LEFT:
					lidar->pos = CENTER_1;
 800f132:	463b      	mov	r3, r7
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	2203      	movs	r2, #3
 800f138:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f13c:	e07a      	b.n	800f234 <LidarSetPos+0x5dc>

				case UPPER_RIGHT:
					lidar->pos = CENTER_1;
 800f13e:	463b      	mov	r3, r7
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	2203      	movs	r2, #3
 800f144:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f148:	e074      	b.n	800f234 <LidarSetPos+0x5dc>

				case CENTER_2:
					vesc_duty = 0.175;
 800f14a:	4b5f      	ldr	r3, [pc, #380]	; (800f2c8 <LidarSetPos+0x670>)
 800f14c:	4a63      	ldr	r2, [pc, #396]	; (800f2dc <LidarSetPos+0x684>)
 800f14e:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800f150:	f7fc fc56 	bl	800ba00 <ResetCoordinate>
					lidar->pos = CENTER_1;
 800f154:	463b      	mov	r3, r7
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	2203      	movs	r2, #3
 800f15a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_2_to_center_1, 1, &pp);
 800f15e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800f162:	4a5b      	ldr	r2, [pc, #364]	; (800f2d0 <LidarSetPos+0x678>)
 800f164:	2101      	movs	r1, #1
 800f166:	4618      	mov	r0, r3
 800f168:	f7f6 fba9 	bl	80058be <PP_start>
					while(pp.pp_start)
 800f16c:	e017      	b.n	800f19e <LidarSetPos+0x546>
					{
						if(ps4.button == SQUARE)
 800f16e:	4b59      	ldr	r3, [pc, #356]	; (800f2d4 <LidarSetPos+0x67c>)
 800f170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f176:	d112      	bne.n	800f19e <LidarSetPos+0x546>
						{
							while(ps4.button == SQUARE);
 800f178:	bf00      	nop
 800f17a:	4b56      	ldr	r3, [pc, #344]	; (800f2d4 <LidarSetPos+0x67c>)
 800f17c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f17e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f182:	d0fa      	beq.n	800f17a <LidarSetPos+0x522>
							PP_stop(&pp);
 800f184:	4852      	ldr	r0, [pc, #328]	; (800f2d0 <LidarSetPos+0x678>)
 800f186:	f7f6 fdd4 	bl	8005d32 <PP_stop>
							lidar->pos = CENTER_2; // PP Failed
 800f18a:	463b      	mov	r3, r7
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	2204      	movs	r2, #4
 800f190:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = CENTER_2;
 800f194:	463b      	mov	r3, r7
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	2204      	movs	r2, #4
 800f19a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
					while(pp.pp_start)
 800f19e:	4b4c      	ldr	r3, [pc, #304]	; (800f2d0 <LidarSetPos+0x678>)
 800f1a0:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f1a4:	f003 0301 	and.w	r3, r3, #1
 800f1a8:	b2db      	uxtb	r3, r3
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d1df      	bne.n	800f16e <LidarSetPos+0x516>
						}
					}

					PP_start(bang_fence, 1, &pp);
 800f1ae:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800f1b2:	4a47      	ldr	r2, [pc, #284]	; (800f2d0 <LidarSetPos+0x678>)
 800f1b4:	2101      	movs	r1, #1
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f7f6 fb81 	bl	80058be <PP_start>
					while(pp.pp_start)
 800f1bc:	e01e      	b.n	800f1fc <LidarSetPos+0x5a4>
					{
						if(ps4.button == SQUARE)
 800f1be:	4b45      	ldr	r3, [pc, #276]	; (800f2d4 <LidarSetPos+0x67c>)
 800f1c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f1c6:	d108      	bne.n	800f1da <LidarSetPos+0x582>
						{
							while(ps4.button == SQUARE);
 800f1c8:	bf00      	nop
 800f1ca:	4b42      	ldr	r3, [pc, #264]	; (800f2d4 <LidarSetPos+0x67c>)
 800f1cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f1d2:	d0fa      	beq.n	800f1ca <LidarSetPos+0x572>
							PP_stop(&pp);
 800f1d4:	483e      	ldr	r0, [pc, #248]	; (800f2d0 <LidarSetPos+0x678>)
 800f1d6:	f7f6 fdac 	bl	8005d32 <PP_stop>
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800f1da:	2108      	movs	r1, #8
 800f1dc:	483e      	ldr	r0, [pc, #248]	; (800f2d8 <LidarSetPos+0x680>)
 800f1de:	f003 fc21 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d109      	bne.n	800f1fc <LidarSetPos+0x5a4>
 800f1e8:	2110      	movs	r1, #16
 800f1ea:	483b      	ldr	r0, [pc, #236]	; (800f2d8 <LidarSetPos+0x680>)
 800f1ec:	f003 fc1a 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d102      	bne.n	800f1fc <LidarSetPos+0x5a4>
							PP_stop(&pp);
 800f1f6:	4836      	ldr	r0, [pc, #216]	; (800f2d0 <LidarSetPos+0x678>)
 800f1f8:	f7f6 fd9b 	bl	8005d32 <PP_stop>
					while(pp.pp_start)
 800f1fc:	4b34      	ldr	r3, [pc, #208]	; (800f2d0 <LidarSetPos+0x678>)
 800f1fe:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f202:	f003 0301 	and.w	r3, r3, #1
 800f206:	b2db      	uxtb	r3, r3
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d1d8      	bne.n	800f1be <LidarSetPos+0x566>
					}

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800f20c:	463b      	mov	r3, r7
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f214:	1dfa      	adds	r2, r7, #7
 800f216:	7812      	ldrb	r2, [r2, #0]
 800f218:	429a      	cmp	r2, r3
 800f21a:	d10a      	bne.n	800f232 <LidarSetPos+0x5da>
						LidarAdjust(lidar);
 800f21c:	463b      	mov	r3, r7
 800f21e:	6818      	ldr	r0, [r3, #0]
 800f220:	f000 ffd4 	bl	80101cc <LidarAdjust>
					break;
 800f224:	e005      	b.n	800f232 <LidarSetPos+0x5da>

				default:
					break;
 800f226:	bf00      	nop
 800f228:	f000 bd4f 	b.w	800fcca <LidarSetPos+0x1072>
					break;
 800f22c:	bf00      	nop
 800f22e:	f000 bd4c 	b.w	800fcca <LidarSetPos+0x1072>
					break;
 800f232:	bf00      	nop
			}
			break;
 800f234:	f000 bd49 	b.w	800fcca <LidarSetPos+0x1072>

		case CENTER_2:
			switch(lidar->pos) // Self Pose
 800f238:	463b      	mov	r3, r7
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f240:	3b01      	subs	r3, #1
 800f242:	2b08      	cmp	r3, #8
 800f244:	f200 813f 	bhi.w	800f4c6 <LidarSetPos+0x86e>
 800f248:	a201      	add	r2, pc, #4	; (adr r2, 800f250 <LidarSetPos+0x5f8>)
 800f24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f24e:	bf00      	nop
 800f250:	0800f275 	.word	0x0800f275
 800f254:	0800f28d 	.word	0x0800f28d
 800f258:	0800f2a5 	.word	0x0800f2a5
 800f25c:	0800f4c7 	.word	0x0800f4c7
 800f260:	0800f3c5 	.word	0x0800f3c5
 800f264:	0800f4c7 	.word	0x0800f4c7
 800f268:	0800f4c7 	.word	0x0800f4c7
 800f26c:	0800f299 	.word	0x0800f299
 800f270:	0800f281 	.word	0x0800f281
			{
				case PICK_LEFT:
					lidar->pos = CENTER_2;
 800f274:	463b      	mov	r3, r7
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	2204      	movs	r2, #4
 800f27a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f27e:	e127      	b.n	800f4d0 <LidarSetPos+0x878>

				case PICK_RIGHT:
					lidar->pos = CENTER_2;
 800f280:	463b      	mov	r3, r7
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	2204      	movs	r2, #4
 800f286:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f28a:	e121      	b.n	800f4d0 <LidarSetPos+0x878>

				case UPPER_LEFT:
					lidar->pos = CENTER_2;
 800f28c:	463b      	mov	r3, r7
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	2204      	movs	r2, #4
 800f292:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f296:	e11b      	b.n	800f4d0 <LidarSetPos+0x878>

				case UPPER_RIGHT:
					lidar->pos = CENTER_2;
 800f298:	463b      	mov	r3, r7
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	2204      	movs	r2, #4
 800f29e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f2a2:	e115      	b.n	800f4d0 <LidarSetPos+0x878>

				case CENTER_1:
					vesc_duty = 0.29;
 800f2a4:	4b08      	ldr	r3, [pc, #32]	; (800f2c8 <LidarSetPos+0x670>)
 800f2a6:	4a0e      	ldr	r2, [pc, #56]	; (800f2e0 <LidarSetPos+0x688>)
 800f2a8:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800f2aa:	f7fc fba9 	bl	800ba00 <ResetCoordinate>
					lidar->pos = CENTER_2;
 800f2ae:	463b      	mov	r3, r7
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	2204      	movs	r2, #4
 800f2b4:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_1_to_center_2, 1, &pp);
 800f2b8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800f2bc:	4a04      	ldr	r2, [pc, #16]	; (800f2d0 <LidarSetPos+0x678>)
 800f2be:	2101      	movs	r1, #1
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7f6 fafc 	bl	80058be <PP_start>
					while(pp.pp_start)
 800f2c6:	e038      	b.n	800f33a <LidarSetPos+0x6e2>
 800f2c8:	20007840 	.word	0x20007840
 800f2cc:	3e3851ec 	.word	0x3e3851ec
 800f2d0:	20007188 	.word	0x20007188
 800f2d4:	2000a3f0 	.word	0x2000a3f0
 800f2d8:	40020c00 	.word	0x40020c00
 800f2dc:	3e333333 	.word	0x3e333333
 800f2e0:	3e947ae1 	.word	0x3e947ae1
					{
						if(ps4.button == SQUARE)
 800f2e4:	4bbc      	ldr	r3, [pc, #752]	; (800f5d8 <LidarSetPos+0x980>)
 800f2e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f2ec:	d112      	bne.n	800f314 <LidarSetPos+0x6bc>
						{
							while(ps4.button == SQUARE);
 800f2ee:	bf00      	nop
 800f2f0:	4bb9      	ldr	r3, [pc, #740]	; (800f5d8 <LidarSetPos+0x980>)
 800f2f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f2f8:	d0fa      	beq.n	800f2f0 <LidarSetPos+0x698>
							PP_stop(&pp);
 800f2fa:	48b8      	ldr	r0, [pc, #736]	; (800f5dc <LidarSetPos+0x984>)
 800f2fc:	f7f6 fd19 	bl	8005d32 <PP_stop>
							lidar->pos = CENTER_1;
 800f300:	463b      	mov	r3, r7
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	2203      	movs	r2, #3
 800f306:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = CENTER_1;
 800f30a:	463b      	mov	r3, r7
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	2203      	movs	r2, #3
 800f310:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800f314:	2108      	movs	r1, #8
 800f316:	48b2      	ldr	r0, [pc, #712]	; (800f5e0 <LidarSetPos+0x988>)
 800f318:	f003 fb84 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f31c:	4603      	mov	r3, r0
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d10b      	bne.n	800f33a <LidarSetPos+0x6e2>
 800f322:	2110      	movs	r1, #16
 800f324:	48ae      	ldr	r0, [pc, #696]	; (800f5e0 <LidarSetPos+0x988>)
 800f326:	f003 fb7d 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f32a:	4603      	mov	r3, r0
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d104      	bne.n	800f33a <LidarSetPos+0x6e2>
							pp.error_y = 0;
 800f330:	4baa      	ldr	r3, [pc, #680]	; (800f5dc <LidarSetPos+0x984>)
 800f332:	f04f 0200 	mov.w	r2, #0
 800f336:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800f33a:	4ba8      	ldr	r3, [pc, #672]	; (800f5dc <LidarSetPos+0x984>)
 800f33c:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f340:	f003 0301 	and.w	r3, r3, #1
 800f344:	b2db      	uxtb	r3, r3
 800f346:	2b00      	cmp	r3, #0
 800f348:	d1cc      	bne.n	800f2e4 <LidarSetPos+0x68c>
					}

					PP_start(bang_fence, 1, &pp);
 800f34a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800f34e:	4aa3      	ldr	r2, [pc, #652]	; (800f5dc <LidarSetPos+0x984>)
 800f350:	2101      	movs	r1, #1
 800f352:	4618      	mov	r0, r3
 800f354:	f7f6 fab3 	bl	80058be <PP_start>
					while(pp.pp_start)
 800f358:	e01e      	b.n	800f398 <LidarSetPos+0x740>
					{
						if(ps4.button == SQUARE)
 800f35a:	4b9f      	ldr	r3, [pc, #636]	; (800f5d8 <LidarSetPos+0x980>)
 800f35c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f35e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f362:	d108      	bne.n	800f376 <LidarSetPos+0x71e>
						{
							while(ps4.button == SQUARE);
 800f364:	bf00      	nop
 800f366:	4b9c      	ldr	r3, [pc, #624]	; (800f5d8 <LidarSetPos+0x980>)
 800f368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f36a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f36e:	d0fa      	beq.n	800f366 <LidarSetPos+0x70e>
							PP_stop(&pp);
 800f370:	489a      	ldr	r0, [pc, #616]	; (800f5dc <LidarSetPos+0x984>)
 800f372:	f7f6 fcde 	bl	8005d32 <PP_stop>
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800f376:	2108      	movs	r1, #8
 800f378:	4899      	ldr	r0, [pc, #612]	; (800f5e0 <LidarSetPos+0x988>)
 800f37a:	f003 fb53 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f37e:	4603      	mov	r3, r0
 800f380:	2b00      	cmp	r3, #0
 800f382:	d109      	bne.n	800f398 <LidarSetPos+0x740>
 800f384:	2110      	movs	r1, #16
 800f386:	4896      	ldr	r0, [pc, #600]	; (800f5e0 <LidarSetPos+0x988>)
 800f388:	f003 fb4c 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f38c:	4603      	mov	r3, r0
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d102      	bne.n	800f398 <LidarSetPos+0x740>
							PP_stop(&pp);
 800f392:	4892      	ldr	r0, [pc, #584]	; (800f5dc <LidarSetPos+0x984>)
 800f394:	f7f6 fccd 	bl	8005d32 <PP_stop>
					while(pp.pp_start)
 800f398:	4b90      	ldr	r3, [pc, #576]	; (800f5dc <LidarSetPos+0x984>)
 800f39a:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f39e:	f003 0301 	and.w	r3, r3, #1
 800f3a2:	b2db      	uxtb	r3, r3
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d1d8      	bne.n	800f35a <LidarSetPos+0x702>
					}

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800f3a8:	463b      	mov	r3, r7
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f3b0:	1dfa      	adds	r2, r7, #7
 800f3b2:	7812      	ldrb	r2, [r2, #0]
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	f040 8088 	bne.w	800f4ca <LidarSetPos+0x872>
						LidarAdjust(lidar);
 800f3ba:	463b      	mov	r3, r7
 800f3bc:	6818      	ldr	r0, [r3, #0]
 800f3be:	f000 ff05 	bl	80101cc <LidarAdjust>
					break;
 800f3c2:	e082      	b.n	800f4ca <LidarSetPos+0x872>

				case CENTER:
					vesc_duty = 0.29;
 800f3c4:	4b87      	ldr	r3, [pc, #540]	; (800f5e4 <LidarSetPos+0x98c>)
 800f3c6:	4a88      	ldr	r2, [pc, #544]	; (800f5e8 <LidarSetPos+0x990>)
 800f3c8:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800f3ca:	f7fc fb19 	bl	800ba00 <ResetCoordinate>
					lidar->pos = CENTER_2;
 800f3ce:	463b      	mov	r3, r7
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	2204      	movs	r2, #4
 800f3d4:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_to_center_2, 1, &pp);
 800f3d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800f3dc:	4a7f      	ldr	r2, [pc, #508]	; (800f5dc <LidarSetPos+0x984>)
 800f3de:	2101      	movs	r1, #1
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7f6 fa6c 	bl	80058be <PP_start>
					while(pp.pp_start)
 800f3e6:	e02a      	b.n	800f43e <LidarSetPos+0x7e6>
					{
						if(ps4.button == SQUARE)
 800f3e8:	4b7b      	ldr	r3, [pc, #492]	; (800f5d8 <LidarSetPos+0x980>)
 800f3ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3f0:	d112      	bne.n	800f418 <LidarSetPos+0x7c0>
						{
							while(ps4.button == SQUARE);
 800f3f2:	bf00      	nop
 800f3f4:	4b78      	ldr	r3, [pc, #480]	; (800f5d8 <LidarSetPos+0x980>)
 800f3f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3fc:	d0fa      	beq.n	800f3f4 <LidarSetPos+0x79c>
							PP_stop(&pp);
 800f3fe:	4877      	ldr	r0, [pc, #476]	; (800f5dc <LidarSetPos+0x984>)
 800f400:	f7f6 fc97 	bl	8005d32 <PP_stop>
							lidar->pos = CENTER;
 800f404:	463b      	mov	r3, r7
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	2205      	movs	r2, #5
 800f40a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = CENTER;
 800f40e:	463b      	mov	r3, r7
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	2205      	movs	r2, #5
 800f414:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800f418:	2108      	movs	r1, #8
 800f41a:	4871      	ldr	r0, [pc, #452]	; (800f5e0 <LidarSetPos+0x988>)
 800f41c:	f003 fb02 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f420:	4603      	mov	r3, r0
 800f422:	2b00      	cmp	r3, #0
 800f424:	d10b      	bne.n	800f43e <LidarSetPos+0x7e6>
 800f426:	2110      	movs	r1, #16
 800f428:	486d      	ldr	r0, [pc, #436]	; (800f5e0 <LidarSetPos+0x988>)
 800f42a:	f003 fafb 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f42e:	4603      	mov	r3, r0
 800f430:	2b00      	cmp	r3, #0
 800f432:	d104      	bne.n	800f43e <LidarSetPos+0x7e6>
							pp.error_y = 0;
 800f434:	4b69      	ldr	r3, [pc, #420]	; (800f5dc <LidarSetPos+0x984>)
 800f436:	f04f 0200 	mov.w	r2, #0
 800f43a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800f43e:	4b67      	ldr	r3, [pc, #412]	; (800f5dc <LidarSetPos+0x984>)
 800f440:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f444:	f003 0301 	and.w	r3, r3, #1
 800f448:	b2db      	uxtb	r3, r3
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d1cc      	bne.n	800f3e8 <LidarSetPos+0x790>
					}

					PP_start(bang_fence, 1, &pp);
 800f44e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800f452:	4a62      	ldr	r2, [pc, #392]	; (800f5dc <LidarSetPos+0x984>)
 800f454:	2101      	movs	r1, #1
 800f456:	4618      	mov	r0, r3
 800f458:	f7f6 fa31 	bl	80058be <PP_start>
					while(pp.pp_start)
 800f45c:	e01e      	b.n	800f49c <LidarSetPos+0x844>
					{
						if(ps4.button == SQUARE)
 800f45e:	4b5e      	ldr	r3, [pc, #376]	; (800f5d8 <LidarSetPos+0x980>)
 800f460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f466:	d108      	bne.n	800f47a <LidarSetPos+0x822>
						{
							while(ps4.button == SQUARE);
 800f468:	bf00      	nop
 800f46a:	4b5b      	ldr	r3, [pc, #364]	; (800f5d8 <LidarSetPos+0x980>)
 800f46c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f46e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f472:	d0fa      	beq.n	800f46a <LidarSetPos+0x812>
							PP_stop(&pp);
 800f474:	4859      	ldr	r0, [pc, #356]	; (800f5dc <LidarSetPos+0x984>)
 800f476:	f7f6 fc5c 	bl	8005d32 <PP_stop>
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800f47a:	2108      	movs	r1, #8
 800f47c:	4858      	ldr	r0, [pc, #352]	; (800f5e0 <LidarSetPos+0x988>)
 800f47e:	f003 fad1 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f482:	4603      	mov	r3, r0
 800f484:	2b00      	cmp	r3, #0
 800f486:	d109      	bne.n	800f49c <LidarSetPos+0x844>
 800f488:	2110      	movs	r1, #16
 800f48a:	4855      	ldr	r0, [pc, #340]	; (800f5e0 <LidarSetPos+0x988>)
 800f48c:	f003 faca 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f490:	4603      	mov	r3, r0
 800f492:	2b00      	cmp	r3, #0
 800f494:	d102      	bne.n	800f49c <LidarSetPos+0x844>
							PP_stop(&pp);
 800f496:	4851      	ldr	r0, [pc, #324]	; (800f5dc <LidarSetPos+0x984>)
 800f498:	f7f6 fc4b 	bl	8005d32 <PP_stop>
					while(pp.pp_start)
 800f49c:	4b4f      	ldr	r3, [pc, #316]	; (800f5dc <LidarSetPos+0x984>)
 800f49e:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f4a2:	f003 0301 	and.w	r3, r3, #1
 800f4a6:	b2db      	uxtb	r3, r3
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d1d8      	bne.n	800f45e <LidarSetPos+0x806>
					}

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800f4ac:	463b      	mov	r3, r7
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f4b4:	1dfa      	adds	r2, r7, #7
 800f4b6:	7812      	ldrb	r2, [r2, #0]
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	d108      	bne.n	800f4ce <LidarSetPos+0x876>
						LidarAdjust(lidar);
 800f4bc:	463b      	mov	r3, r7
 800f4be:	6818      	ldr	r0, [r3, #0]
 800f4c0:	f000 fe84 	bl	80101cc <LidarAdjust>
					break;
 800f4c4:	e003      	b.n	800f4ce <LidarSetPos+0x876>

				default:
					break;
 800f4c6:	bf00      	nop
 800f4c8:	e3ff      	b.n	800fcca <LidarSetPos+0x1072>
					break;
 800f4ca:	bf00      	nop
 800f4cc:	e3fd      	b.n	800fcca <LidarSetPos+0x1072>
					break;
 800f4ce:	bf00      	nop
			}
			break;
 800f4d0:	e3fb      	b.n	800fcca <LidarSetPos+0x1072>

		case CENTER:
			switch(lidar->pos) // Self Pose
 800f4d2:	463b      	mov	r3, r7
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f4da:	3b01      	subs	r3, #1
 800f4dc:	2b08      	cmp	r3, #8
 800f4de:	f200 813d 	bhi.w	800f75c <LidarSetPos+0xb04>
 800f4e2:	a201      	add	r2, pc, #4	; (adr r2, 800f4e8 <LidarSetPos+0x890>)
 800f4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4e8:	0800f50d 	.word	0x0800f50d
 800f4ec:	0800f525 	.word	0x0800f525
 800f4f0:	0800f75d 	.word	0x0800f75d
 800f4f4:	0800f53d 	.word	0x0800f53d
 800f4f8:	0800f75d 	.word	0x0800f75d
 800f4fc:	0800f65b 	.word	0x0800f65b
 800f500:	0800f75d 	.word	0x0800f75d
 800f504:	0800f531 	.word	0x0800f531
 800f508:	0800f519 	.word	0x0800f519
			{
				case PICK_LEFT:
					lidar->pos = CENTER;
 800f50c:	463b      	mov	r3, r7
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	2205      	movs	r2, #5
 800f512:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f516:	e126      	b.n	800f766 <LidarSetPos+0xb0e>

				case PICK_RIGHT:
					lidar->pos = CENTER;
 800f518:	463b      	mov	r3, r7
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	2205      	movs	r2, #5
 800f51e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f522:	e120      	b.n	800f766 <LidarSetPos+0xb0e>

				case UPPER_LEFT:
					lidar->pos = CENTER;
 800f524:	463b      	mov	r3, r7
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	2205      	movs	r2, #5
 800f52a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f52e:	e11a      	b.n	800f766 <LidarSetPos+0xb0e>

				case UPPER_RIGHT:
					lidar->pos = CENTER;
 800f530:	463b      	mov	r3, r7
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	2205      	movs	r2, #5
 800f536:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f53a:	e114      	b.n	800f766 <LidarSetPos+0xb0e>

				case CENTER_2:
					vesc_duty = 0.17;
 800f53c:	4b29      	ldr	r3, [pc, #164]	; (800f5e4 <LidarSetPos+0x98c>)
 800f53e:	4a2b      	ldr	r2, [pc, #172]	; (800f5ec <LidarSetPos+0x994>)
 800f540:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800f542:	f7fc fa5d 	bl	800ba00 <ResetCoordinate>
					lidar->pos = CENTER;
 800f546:	463b      	mov	r3, r7
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	2205      	movs	r2, #5
 800f54c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_2_to_center, 1, &pp);
 800f550:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800f554:	4a21      	ldr	r2, [pc, #132]	; (800f5dc <LidarSetPos+0x984>)
 800f556:	2101      	movs	r1, #1
 800f558:	4618      	mov	r0, r3
 800f55a:	f7f6 f9b0 	bl	80058be <PP_start>
					while(pp.pp_start)
 800f55e:	e02a      	b.n	800f5b6 <LidarSetPos+0x95e>
					{
						if(ps4.button == SQUARE)
 800f560:	4b1d      	ldr	r3, [pc, #116]	; (800f5d8 <LidarSetPos+0x980>)
 800f562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f568:	d112      	bne.n	800f590 <LidarSetPos+0x938>
						{
							while(ps4.button == SQUARE);
 800f56a:	bf00      	nop
 800f56c:	4b1a      	ldr	r3, [pc, #104]	; (800f5d8 <LidarSetPos+0x980>)
 800f56e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f574:	d0fa      	beq.n	800f56c <LidarSetPos+0x914>
							PP_stop(&pp);
 800f576:	4819      	ldr	r0, [pc, #100]	; (800f5dc <LidarSetPos+0x984>)
 800f578:	f7f6 fbdb 	bl	8005d32 <PP_stop>
							lidar->pos = CENTER_2;
 800f57c:	463b      	mov	r3, r7
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	2204      	movs	r2, #4
 800f582:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = CENTER_2;
 800f586:	463b      	mov	r3, r7
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	2204      	movs	r2, #4
 800f58c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800f590:	2108      	movs	r1, #8
 800f592:	4813      	ldr	r0, [pc, #76]	; (800f5e0 <LidarSetPos+0x988>)
 800f594:	f003 fa46 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f598:	4603      	mov	r3, r0
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d10b      	bne.n	800f5b6 <LidarSetPos+0x95e>
 800f59e:	2110      	movs	r1, #16
 800f5a0:	480f      	ldr	r0, [pc, #60]	; (800f5e0 <LidarSetPos+0x988>)
 800f5a2:	f003 fa3f 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d104      	bne.n	800f5b6 <LidarSetPos+0x95e>
							pp.error_y = 0;
 800f5ac:	4b0b      	ldr	r3, [pc, #44]	; (800f5dc <LidarSetPos+0x984>)
 800f5ae:	f04f 0200 	mov.w	r2, #0
 800f5b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800f5b6:	4b09      	ldr	r3, [pc, #36]	; (800f5dc <LidarSetPos+0x984>)
 800f5b8:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f5bc:	f003 0301 	and.w	r3, r3, #1
 800f5c0:	b2db      	uxtb	r3, r3
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d1cc      	bne.n	800f560 <LidarSetPos+0x908>
					}

					PP_start(bang_fence, 1, &pp);
 800f5c6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800f5ca:	4a04      	ldr	r2, [pc, #16]	; (800f5dc <LidarSetPos+0x984>)
 800f5cc:	2101      	movs	r1, #1
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f7f6 f975 	bl	80058be <PP_start>
					while(pp.pp_start)
 800f5d4:	e02b      	b.n	800f62e <LidarSetPos+0x9d6>
 800f5d6:	bf00      	nop
 800f5d8:	2000a3f0 	.word	0x2000a3f0
 800f5dc:	20007188 	.word	0x20007188
 800f5e0:	40020c00 	.word	0x40020c00
 800f5e4:	20007840 	.word	0x20007840
 800f5e8:	3e947ae1 	.word	0x3e947ae1
 800f5ec:	3e2e147b 	.word	0x3e2e147b
					{
						if(ps4.button == SQUARE)
 800f5f0:	4bb9      	ldr	r3, [pc, #740]	; (800f8d8 <LidarSetPos+0xc80>)
 800f5f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f5f8:	d108      	bne.n	800f60c <LidarSetPos+0x9b4>
						{
							while(ps4.button == SQUARE);
 800f5fa:	bf00      	nop
 800f5fc:	4bb6      	ldr	r3, [pc, #728]	; (800f8d8 <LidarSetPos+0xc80>)
 800f5fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f604:	d0fa      	beq.n	800f5fc <LidarSetPos+0x9a4>
							PP_stop(&pp);
 800f606:	48b5      	ldr	r0, [pc, #724]	; (800f8dc <LidarSetPos+0xc84>)
 800f608:	f7f6 fb93 	bl	8005d32 <PP_stop>
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800f60c:	2108      	movs	r1, #8
 800f60e:	48b4      	ldr	r0, [pc, #720]	; (800f8e0 <LidarSetPos+0xc88>)
 800f610:	f003 fa08 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f614:	4603      	mov	r3, r0
 800f616:	2b00      	cmp	r3, #0
 800f618:	d109      	bne.n	800f62e <LidarSetPos+0x9d6>
 800f61a:	2110      	movs	r1, #16
 800f61c:	48b0      	ldr	r0, [pc, #704]	; (800f8e0 <LidarSetPos+0xc88>)
 800f61e:	f003 fa01 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f622:	4603      	mov	r3, r0
 800f624:	2b00      	cmp	r3, #0
 800f626:	d102      	bne.n	800f62e <LidarSetPos+0x9d6>
							PP_stop(&pp);
 800f628:	48ac      	ldr	r0, [pc, #688]	; (800f8dc <LidarSetPos+0xc84>)
 800f62a:	f7f6 fb82 	bl	8005d32 <PP_stop>
					while(pp.pp_start)
 800f62e:	4bab      	ldr	r3, [pc, #684]	; (800f8dc <LidarSetPos+0xc84>)
 800f630:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f634:	f003 0301 	and.w	r3, r3, #1
 800f638:	b2db      	uxtb	r3, r3
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d1d8      	bne.n	800f5f0 <LidarSetPos+0x998>
					}

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800f63e:	463b      	mov	r3, r7
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f646:	1dfa      	adds	r2, r7, #7
 800f648:	7812      	ldrb	r2, [r2, #0]
 800f64a:	429a      	cmp	r2, r3
 800f64c:	f040 8088 	bne.w	800f760 <LidarSetPos+0xb08>
						LidarAdjust(lidar);
 800f650:	463b      	mov	r3, r7
 800f652:	6818      	ldr	r0, [r3, #0]
 800f654:	f000 fdba 	bl	80101cc <LidarAdjust>
					break;
 800f658:	e082      	b.n	800f760 <LidarSetPos+0xb08>

				case CENTER_3:
					vesc_duty = 0.17;
 800f65a:	4ba2      	ldr	r3, [pc, #648]	; (800f8e4 <LidarSetPos+0xc8c>)
 800f65c:	4aa2      	ldr	r2, [pc, #648]	; (800f8e8 <LidarSetPos+0xc90>)
 800f65e:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800f660:	f7fc f9ce 	bl	800ba00 <ResetCoordinate>
					lidar->pos = CENTER;
 800f664:	463b      	mov	r3, r7
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	2205      	movs	r2, #5
 800f66a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_3_to_center, 1, &pp);
 800f66e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f672:	4a9a      	ldr	r2, [pc, #616]	; (800f8dc <LidarSetPos+0xc84>)
 800f674:	2101      	movs	r1, #1
 800f676:	4618      	mov	r0, r3
 800f678:	f7f6 f921 	bl	80058be <PP_start>
					while(pp.pp_start)
 800f67c:	e02a      	b.n	800f6d4 <LidarSetPos+0xa7c>
					{
						if(ps4.button == SQUARE)
 800f67e:	4b96      	ldr	r3, [pc, #600]	; (800f8d8 <LidarSetPos+0xc80>)
 800f680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f686:	d112      	bne.n	800f6ae <LidarSetPos+0xa56>
						{
							while(ps4.button == SQUARE);
 800f688:	bf00      	nop
 800f68a:	4b93      	ldr	r3, [pc, #588]	; (800f8d8 <LidarSetPos+0xc80>)
 800f68c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f68e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f692:	d0fa      	beq.n	800f68a <LidarSetPos+0xa32>
							PP_stop(&pp);
 800f694:	4891      	ldr	r0, [pc, #580]	; (800f8dc <LidarSetPos+0xc84>)
 800f696:	f7f6 fb4c 	bl	8005d32 <PP_stop>
							lidar->pos = CENTER_3;
 800f69a:	463b      	mov	r3, r7
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	2206      	movs	r2, #6
 800f6a0:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = CENTER_3;
 800f6a4:	463b      	mov	r3, r7
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	2206      	movs	r2, #6
 800f6aa:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800f6ae:	2108      	movs	r1, #8
 800f6b0:	488b      	ldr	r0, [pc, #556]	; (800f8e0 <LidarSetPos+0xc88>)
 800f6b2:	f003 f9b7 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d10b      	bne.n	800f6d4 <LidarSetPos+0xa7c>
 800f6bc:	2110      	movs	r1, #16
 800f6be:	4888      	ldr	r0, [pc, #544]	; (800f8e0 <LidarSetPos+0xc88>)
 800f6c0:	f003 f9b0 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d104      	bne.n	800f6d4 <LidarSetPos+0xa7c>
							pp.error_y = 0;
 800f6ca:	4b84      	ldr	r3, [pc, #528]	; (800f8dc <LidarSetPos+0xc84>)
 800f6cc:	f04f 0200 	mov.w	r2, #0
 800f6d0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800f6d4:	4b81      	ldr	r3, [pc, #516]	; (800f8dc <LidarSetPos+0xc84>)
 800f6d6:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f6da:	f003 0301 	and.w	r3, r3, #1
 800f6de:	b2db      	uxtb	r3, r3
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d1cc      	bne.n	800f67e <LidarSetPos+0xa26>
					}

					PP_start(bang_fence, 1, &pp);
 800f6e4:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800f6e8:	4a7c      	ldr	r2, [pc, #496]	; (800f8dc <LidarSetPos+0xc84>)
 800f6ea:	2101      	movs	r1, #1
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f7f6 f8e6 	bl	80058be <PP_start>
					while(pp.pp_start)
 800f6f2:	e01e      	b.n	800f732 <LidarSetPos+0xada>
					{
						if(ps4.button == SQUARE)
 800f6f4:	4b78      	ldr	r3, [pc, #480]	; (800f8d8 <LidarSetPos+0xc80>)
 800f6f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f6fc:	d108      	bne.n	800f710 <LidarSetPos+0xab8>
						{
							while(ps4.button == SQUARE);
 800f6fe:	bf00      	nop
 800f700:	4b75      	ldr	r3, [pc, #468]	; (800f8d8 <LidarSetPos+0xc80>)
 800f702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f708:	d0fa      	beq.n	800f700 <LidarSetPos+0xaa8>
							PP_stop(&pp);
 800f70a:	4874      	ldr	r0, [pc, #464]	; (800f8dc <LidarSetPos+0xc84>)
 800f70c:	f7f6 fb11 	bl	8005d32 <PP_stop>
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800f710:	2108      	movs	r1, #8
 800f712:	4873      	ldr	r0, [pc, #460]	; (800f8e0 <LidarSetPos+0xc88>)
 800f714:	f003 f986 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f718:	4603      	mov	r3, r0
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d109      	bne.n	800f732 <LidarSetPos+0xada>
 800f71e:	2110      	movs	r1, #16
 800f720:	486f      	ldr	r0, [pc, #444]	; (800f8e0 <LidarSetPos+0xc88>)
 800f722:	f003 f97f 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f726:	4603      	mov	r3, r0
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d102      	bne.n	800f732 <LidarSetPos+0xada>
							PP_stop(&pp);
 800f72c:	486b      	ldr	r0, [pc, #428]	; (800f8dc <LidarSetPos+0xc84>)
 800f72e:	f7f6 fb00 	bl	8005d32 <PP_stop>
					while(pp.pp_start)
 800f732:	4b6a      	ldr	r3, [pc, #424]	; (800f8dc <LidarSetPos+0xc84>)
 800f734:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f738:	f003 0301 	and.w	r3, r3, #1
 800f73c:	b2db      	uxtb	r3, r3
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d1d8      	bne.n	800f6f4 <LidarSetPos+0xa9c>
					}

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800f742:	463b      	mov	r3, r7
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f74a:	1dfa      	adds	r2, r7, #7
 800f74c:	7812      	ldrb	r2, [r2, #0]
 800f74e:	429a      	cmp	r2, r3
 800f750:	d108      	bne.n	800f764 <LidarSetPos+0xb0c>
						LidarAdjust(lidar);
 800f752:	463b      	mov	r3, r7
 800f754:	6818      	ldr	r0, [r3, #0]
 800f756:	f000 fd39 	bl	80101cc <LidarAdjust>
					break;
 800f75a:	e003      	b.n	800f764 <LidarSetPos+0xb0c>

				default:
					break;
 800f75c:	bf00      	nop
 800f75e:	e2b4      	b.n	800fcca <LidarSetPos+0x1072>
					break;
 800f760:	bf00      	nop
 800f762:	e2b2      	b.n	800fcca <LidarSetPos+0x1072>
					break;
 800f764:	bf00      	nop
			}
			break;
 800f766:	e2b0      	b.n	800fcca <LidarSetPos+0x1072>

		case CENTER_3:
			switch(lidar->pos) // Self Pose
 800f768:	463b      	mov	r3, r7
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f770:	3b01      	subs	r3, #1
 800f772:	2b08      	cmp	r3, #8
 800f774:	f200 813d 	bhi.w	800f9f2 <LidarSetPos+0xd9a>
 800f778:	a201      	add	r2, pc, #4	; (adr r2, 800f780 <LidarSetPos+0xb28>)
 800f77a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f77e:	bf00      	nop
 800f780:	0800f7a5 	.word	0x0800f7a5
 800f784:	0800f7bd 	.word	0x0800f7bd
 800f788:	0800f9f3 	.word	0x0800f9f3
 800f78c:	0800f9f3 	.word	0x0800f9f3
 800f790:	0800f7d5 	.word	0x0800f7d5
 800f794:	0800f9f3 	.word	0x0800f9f3
 800f798:	0800f8f1 	.word	0x0800f8f1
 800f79c:	0800f7c9 	.word	0x0800f7c9
 800f7a0:	0800f7b1 	.word	0x0800f7b1
			{
				case PICK_LEFT:
					lidar->pos = CENTER_3;
 800f7a4:	463b      	mov	r3, r7
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	2206      	movs	r2, #6
 800f7aa:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f7ae:	e125      	b.n	800f9fc <LidarSetPos+0xda4>

				case PICK_RIGHT:
					lidar->pos = CENTER_3;
 800f7b0:	463b      	mov	r3, r7
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	2206      	movs	r2, #6
 800f7b6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f7ba:	e11f      	b.n	800f9fc <LidarSetPos+0xda4>

				case UPPER_LEFT:
					lidar->pos = CENTER_3;
 800f7bc:	463b      	mov	r3, r7
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	2206      	movs	r2, #6
 800f7c2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f7c6:	e119      	b.n	800f9fc <LidarSetPos+0xda4>

				case UPPER_RIGHT:
					lidar->pos = CENTER_3;
 800f7c8:	463b      	mov	r3, r7
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	2206      	movs	r2, #6
 800f7ce:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f7d2:	e113      	b.n	800f9fc <LidarSetPos+0xda4>

				case CENTER:
					vesc_duty = 0.295;
 800f7d4:	4b43      	ldr	r3, [pc, #268]	; (800f8e4 <LidarSetPos+0xc8c>)
 800f7d6:	4a45      	ldr	r2, [pc, #276]	; (800f8ec <LidarSetPos+0xc94>)
 800f7d8:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800f7da:	f7fc f911 	bl	800ba00 <ResetCoordinate>
					lidar->pos = CENTER_3;
 800f7de:	463b      	mov	r3, r7
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	2206      	movs	r2, #6
 800f7e4:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_to_center_3, 1, &pp);
 800f7e8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800f7ec:	4a3b      	ldr	r2, [pc, #236]	; (800f8dc <LidarSetPos+0xc84>)
 800f7ee:	2101      	movs	r1, #1
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f7f6 f864 	bl	80058be <PP_start>
					while(pp.pp_start)
 800f7f6:	e029      	b.n	800f84c <LidarSetPos+0xbf4>
					{
						if(ps4.button == SQUARE)
 800f7f8:	4b37      	ldr	r3, [pc, #220]	; (800f8d8 <LidarSetPos+0xc80>)
 800f7fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f800:	d111      	bne.n	800f826 <LidarSetPos+0xbce>
						{
							while(ps4.button == SQUARE);
 800f802:	bf00      	nop
 800f804:	4b34      	ldr	r3, [pc, #208]	; (800f8d8 <LidarSetPos+0xc80>)
 800f806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f80c:	d0fa      	beq.n	800f804 <LidarSetPos+0xbac>
							StopAutoPP();
 800f80e:	f7fc f8bd 	bl	800b98c <StopAutoPP>
							lidar->pos = CENTER;
 800f812:	463b      	mov	r3, r7
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	2205      	movs	r2, #5
 800f818:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = CENTER;
 800f81c:	463b      	mov	r3, r7
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	2205      	movs	r2, #5
 800f822:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800f826:	2108      	movs	r1, #8
 800f828:	482d      	ldr	r0, [pc, #180]	; (800f8e0 <LidarSetPos+0xc88>)
 800f82a:	f003 f8fb 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f82e:	4603      	mov	r3, r0
 800f830:	2b00      	cmp	r3, #0
 800f832:	d10b      	bne.n	800f84c <LidarSetPos+0xbf4>
 800f834:	2110      	movs	r1, #16
 800f836:	482a      	ldr	r0, [pc, #168]	; (800f8e0 <LidarSetPos+0xc88>)
 800f838:	f003 f8f4 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f83c:	4603      	mov	r3, r0
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d104      	bne.n	800f84c <LidarSetPos+0xbf4>
							pp.error_y = 0;
 800f842:	4b26      	ldr	r3, [pc, #152]	; (800f8dc <LidarSetPos+0xc84>)
 800f844:	f04f 0200 	mov.w	r2, #0
 800f848:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800f84c:	4b23      	ldr	r3, [pc, #140]	; (800f8dc <LidarSetPos+0xc84>)
 800f84e:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f852:	f003 0301 	and.w	r3, r3, #1
 800f856:	b2db      	uxtb	r3, r3
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d1cd      	bne.n	800f7f8 <LidarSetPos+0xba0>
					}

					PP_start(bang_fence, 1, &pp);
 800f85c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800f860:	4a1e      	ldr	r2, [pc, #120]	; (800f8dc <LidarSetPos+0xc84>)
 800f862:	2101      	movs	r1, #1
 800f864:	4618      	mov	r0, r3
 800f866:	f7f6 f82a 	bl	80058be <PP_start>
					while(pp.pp_start)
 800f86a:	e01e      	b.n	800f8aa <LidarSetPos+0xc52>
					{
						if(ps4.button == SQUARE)
 800f86c:	4b1a      	ldr	r3, [pc, #104]	; (800f8d8 <LidarSetPos+0xc80>)
 800f86e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f874:	d108      	bne.n	800f888 <LidarSetPos+0xc30>
						{
							while(ps4.button == SQUARE);
 800f876:	bf00      	nop
 800f878:	4b17      	ldr	r3, [pc, #92]	; (800f8d8 <LidarSetPos+0xc80>)
 800f87a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f87c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f880:	d0fa      	beq.n	800f878 <LidarSetPos+0xc20>
							PP_stop(&pp);
 800f882:	4816      	ldr	r0, [pc, #88]	; (800f8dc <LidarSetPos+0xc84>)
 800f884:	f7f6 fa55 	bl	8005d32 <PP_stop>
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800f888:	2108      	movs	r1, #8
 800f88a:	4815      	ldr	r0, [pc, #84]	; (800f8e0 <LidarSetPos+0xc88>)
 800f88c:	f003 f8ca 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f890:	4603      	mov	r3, r0
 800f892:	2b00      	cmp	r3, #0
 800f894:	d109      	bne.n	800f8aa <LidarSetPos+0xc52>
 800f896:	2110      	movs	r1, #16
 800f898:	4811      	ldr	r0, [pc, #68]	; (800f8e0 <LidarSetPos+0xc88>)
 800f89a:	f003 f8c3 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d102      	bne.n	800f8aa <LidarSetPos+0xc52>
							PP_stop(&pp);
 800f8a4:	480d      	ldr	r0, [pc, #52]	; (800f8dc <LidarSetPos+0xc84>)
 800f8a6:	f7f6 fa44 	bl	8005d32 <PP_stop>
					while(pp.pp_start)
 800f8aa:	4b0c      	ldr	r3, [pc, #48]	; (800f8dc <LidarSetPos+0xc84>)
 800f8ac:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f8b0:	f003 0301 	and.w	r3, r3, #1
 800f8b4:	b2db      	uxtb	r3, r3
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d1d8      	bne.n	800f86c <LidarSetPos+0xc14>
					}

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800f8ba:	463b      	mov	r3, r7
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f8c2:	1dfa      	adds	r2, r7, #7
 800f8c4:	7812      	ldrb	r2, [r2, #0]
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	f040 8095 	bne.w	800f9f6 <LidarSetPos+0xd9e>
						LidarAdjust(lidar);
 800f8cc:	463b      	mov	r3, r7
 800f8ce:	6818      	ldr	r0, [r3, #0]
 800f8d0:	f000 fc7c 	bl	80101cc <LidarAdjust>
					break;
 800f8d4:	e08f      	b.n	800f9f6 <LidarSetPos+0xd9e>
 800f8d6:	bf00      	nop
 800f8d8:	2000a3f0 	.word	0x2000a3f0
 800f8dc:	20007188 	.word	0x20007188
 800f8e0:	40020c00 	.word	0x40020c00
 800f8e4:	20007840 	.word	0x20007840
 800f8e8:	3e2e147b 	.word	0x3e2e147b
 800f8ec:	3e970a3d 	.word	0x3e970a3d

				case CENTER_4:
					vesc_duty = 0.295;
 800f8f0:	4bbb      	ldr	r3, [pc, #748]	; (800fbe0 <LidarSetPos+0xf88>)
 800f8f2:	4abc      	ldr	r2, [pc, #752]	; (800fbe4 <LidarSetPos+0xf8c>)
 800f8f4:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800f8f6:	f7fc f883 	bl	800ba00 <ResetCoordinate>
					lidar->pos = CENTER_3;
 800f8fa:	463b      	mov	r3, r7
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	2206      	movs	r2, #6
 800f900:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_4_to_center_3, 1, &pp);
 800f904:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f908:	4ab7      	ldr	r2, [pc, #732]	; (800fbe8 <LidarSetPos+0xf90>)
 800f90a:	2101      	movs	r1, #1
 800f90c:	4618      	mov	r0, r3
 800f90e:	f7f5 ffd6 	bl	80058be <PP_start>
					while(pp.pp_start)
 800f912:	e02a      	b.n	800f96a <LidarSetPos+0xd12>
					{
						if(ps4.button == SQUARE)
 800f914:	4bb5      	ldr	r3, [pc, #724]	; (800fbec <LidarSetPos+0xf94>)
 800f916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f91c:	d112      	bne.n	800f944 <LidarSetPos+0xcec>
						{
							while(ps4.button == SQUARE);
 800f91e:	bf00      	nop
 800f920:	4bb2      	ldr	r3, [pc, #712]	; (800fbec <LidarSetPos+0xf94>)
 800f922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f928:	d0fa      	beq.n	800f920 <LidarSetPos+0xcc8>
							PP_stop(&pp);
 800f92a:	48af      	ldr	r0, [pc, #700]	; (800fbe8 <LidarSetPos+0xf90>)
 800f92c:	f7f6 fa01 	bl	8005d32 <PP_stop>
							lidar->pos = CENTER_4;
 800f930:	463b      	mov	r3, r7
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	2207      	movs	r2, #7
 800f936:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = CENTER_4;
 800f93a:	463b      	mov	r3, r7
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	2207      	movs	r2, #7
 800f940:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800f944:	2108      	movs	r1, #8
 800f946:	48aa      	ldr	r0, [pc, #680]	; (800fbf0 <LidarSetPos+0xf98>)
 800f948:	f003 f86c 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f94c:	4603      	mov	r3, r0
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d10b      	bne.n	800f96a <LidarSetPos+0xd12>
 800f952:	2110      	movs	r1, #16
 800f954:	48a6      	ldr	r0, [pc, #664]	; (800fbf0 <LidarSetPos+0xf98>)
 800f956:	f003 f865 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f95a:	4603      	mov	r3, r0
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d104      	bne.n	800f96a <LidarSetPos+0xd12>
							pp.error_y = 0;
 800f960:	4ba1      	ldr	r3, [pc, #644]	; (800fbe8 <LidarSetPos+0xf90>)
 800f962:	f04f 0200 	mov.w	r2, #0
 800f966:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800f96a:	4b9f      	ldr	r3, [pc, #636]	; (800fbe8 <LidarSetPos+0xf90>)
 800f96c:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f970:	f003 0301 	and.w	r3, r3, #1
 800f974:	b2db      	uxtb	r3, r3
 800f976:	2b00      	cmp	r3, #0
 800f978:	d1cc      	bne.n	800f914 <LidarSetPos+0xcbc>
					}

					PP_start(bang_fence, 1, &pp);
 800f97a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800f97e:	4a9a      	ldr	r2, [pc, #616]	; (800fbe8 <LidarSetPos+0xf90>)
 800f980:	2101      	movs	r1, #1
 800f982:	4618      	mov	r0, r3
 800f984:	f7f5 ff9b 	bl	80058be <PP_start>
					while(pp.pp_start)
 800f988:	e01e      	b.n	800f9c8 <LidarSetPos+0xd70>
					{
						if(ps4.button == SQUARE)
 800f98a:	4b98      	ldr	r3, [pc, #608]	; (800fbec <LidarSetPos+0xf94>)
 800f98c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f98e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f992:	d108      	bne.n	800f9a6 <LidarSetPos+0xd4e>
						{
							while(ps4.button == SQUARE);
 800f994:	bf00      	nop
 800f996:	4b95      	ldr	r3, [pc, #596]	; (800fbec <LidarSetPos+0xf94>)
 800f998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f99a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f99e:	d0fa      	beq.n	800f996 <LidarSetPos+0xd3e>
							PP_stop(&pp);
 800f9a0:	4891      	ldr	r0, [pc, #580]	; (800fbe8 <LidarSetPos+0xf90>)
 800f9a2:	f7f6 f9c6 	bl	8005d32 <PP_stop>
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800f9a6:	2108      	movs	r1, #8
 800f9a8:	4891      	ldr	r0, [pc, #580]	; (800fbf0 <LidarSetPos+0xf98>)
 800f9aa:	f003 f83b 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d109      	bne.n	800f9c8 <LidarSetPos+0xd70>
 800f9b4:	2110      	movs	r1, #16
 800f9b6:	488e      	ldr	r0, [pc, #568]	; (800fbf0 <LidarSetPos+0xf98>)
 800f9b8:	f003 f834 	bl	8012a24 <HAL_GPIO_ReadPin>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d102      	bne.n	800f9c8 <LidarSetPos+0xd70>
							PP_stop(&pp);
 800f9c2:	4889      	ldr	r0, [pc, #548]	; (800fbe8 <LidarSetPos+0xf90>)
 800f9c4:	f7f6 f9b5 	bl	8005d32 <PP_stop>
					while(pp.pp_start)
 800f9c8:	4b87      	ldr	r3, [pc, #540]	; (800fbe8 <LidarSetPos+0xf90>)
 800f9ca:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f9ce:	f003 0301 	and.w	r3, r3, #1
 800f9d2:	b2db      	uxtb	r3, r3
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d1d8      	bne.n	800f98a <LidarSetPos+0xd32>
					}

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800f9d8:	463b      	mov	r3, r7
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f9e0:	1dfa      	adds	r2, r7, #7
 800f9e2:	7812      	ldrb	r2, [r2, #0]
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	d108      	bne.n	800f9fa <LidarSetPos+0xda2>
						LidarAdjust(lidar);
 800f9e8:	463b      	mov	r3, r7
 800f9ea:	6818      	ldr	r0, [r3, #0]
 800f9ec:	f000 fbee 	bl	80101cc <LidarAdjust>
					break;
 800f9f0:	e003      	b.n	800f9fa <LidarSetPos+0xda2>

				default:
					break;
 800f9f2:	bf00      	nop
 800f9f4:	e169      	b.n	800fcca <LidarSetPos+0x1072>
					break;
 800f9f6:	bf00      	nop
 800f9f8:	e167      	b.n	800fcca <LidarSetPos+0x1072>
					break;
 800f9fa:	bf00      	nop
			}
			break;
 800f9fc:	e165      	b.n	800fcca <LidarSetPos+0x1072>

		case CENTER_4:
			switch(lidar->pos) // Self Pose
 800f9fe:	463b      	mov	r3, r7
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800fa06:	3b01      	subs	r3, #1
 800fa08:	2b08      	cmp	r3, #8
 800fa0a:	f200 80ae 	bhi.w	800fb6a <LidarSetPos+0xf12>
 800fa0e:	a201      	add	r2, pc, #4	; (adr r2, 800fa14 <LidarSetPos+0xdbc>)
 800fa10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa14:	0800fa39 	.word	0x0800fa39
 800fa18:	0800fa51 	.word	0x0800fa51
 800fa1c:	0800fb6b 	.word	0x0800fb6b
 800fa20:	0800fb6b 	.word	0x0800fb6b
 800fa24:	0800fb6b 	.word	0x0800fb6b
 800fa28:	0800fa69 	.word	0x0800fa69
 800fa2c:	0800fb6b 	.word	0x0800fb6b
 800fa30:	0800fa5d 	.word	0x0800fa5d
 800fa34:	0800fa45 	.word	0x0800fa45
			{
				case PICK_LEFT:
					lidar->pos = CENTER_4;
 800fa38:	463b      	mov	r3, r7
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	2207      	movs	r2, #7
 800fa3e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800fa42:	e095      	b.n	800fb70 <LidarSetPos+0xf18>

				case PICK_RIGHT:
					lidar->pos = CENTER_4;
 800fa44:	463b      	mov	r3, r7
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	2207      	movs	r2, #7
 800fa4a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800fa4e:	e08f      	b.n	800fb70 <LidarSetPos+0xf18>

				case UPPER_LEFT:
					lidar->pos = CENTER_4;
 800fa50:	463b      	mov	r3, r7
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	2207      	movs	r2, #7
 800fa56:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800fa5a:	e089      	b.n	800fb70 <LidarSetPos+0xf18>

				case UPPER_RIGHT:
					lidar->pos = CENTER_4;
 800fa5c:	463b      	mov	r3, r7
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	2207      	movs	r2, #7
 800fa62:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800fa66:	e083      	b.n	800fb70 <LidarSetPos+0xf18>

				case CENTER_3:
					vesc_duty = 0.175;
 800fa68:	4b5d      	ldr	r3, [pc, #372]	; (800fbe0 <LidarSetPos+0xf88>)
 800fa6a:	4a62      	ldr	r2, [pc, #392]	; (800fbf4 <LidarSetPos+0xf9c>)
 800fa6c:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800fa6e:	f7fb ffc7 	bl	800ba00 <ResetCoordinate>
					lidar->pos = CENTER_4;
 800fa72:	463b      	mov	r3, r7
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	2207      	movs	r2, #7
 800fa78:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_3_to_center_4, 1, &pp);
 800fa7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800fa80:	4a59      	ldr	r2, [pc, #356]	; (800fbe8 <LidarSetPos+0xf90>)
 800fa82:	2101      	movs	r1, #1
 800fa84:	4618      	mov	r0, r3
 800fa86:	f7f5 ff1a 	bl	80058be <PP_start>
					while(pp.pp_start)
 800fa8a:	e02a      	b.n	800fae2 <LidarSetPos+0xe8a>
					{
						if(ps4.button == SQUARE)
 800fa8c:	4b57      	ldr	r3, [pc, #348]	; (800fbec <LidarSetPos+0xf94>)
 800fa8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa94:	d112      	bne.n	800fabc <LidarSetPos+0xe64>
						{
							while(ps4.button == SQUARE);
 800fa96:	bf00      	nop
 800fa98:	4b54      	ldr	r3, [pc, #336]	; (800fbec <LidarSetPos+0xf94>)
 800fa9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800faa0:	d0fa      	beq.n	800fa98 <LidarSetPos+0xe40>
							PP_stop(&pp);
 800faa2:	4851      	ldr	r0, [pc, #324]	; (800fbe8 <LidarSetPos+0xf90>)
 800faa4:	f7f6 f945 	bl	8005d32 <PP_stop>
							lidar->pos = CENTER_3;
 800faa8:	463b      	mov	r3, r7
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	2206      	movs	r2, #6
 800faae:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = CENTER_3;
 800fab2:	463b      	mov	r3, r7
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	2206      	movs	r2, #6
 800fab8:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800fabc:	2108      	movs	r1, #8
 800fabe:	484c      	ldr	r0, [pc, #304]	; (800fbf0 <LidarSetPos+0xf98>)
 800fac0:	f002 ffb0 	bl	8012a24 <HAL_GPIO_ReadPin>
 800fac4:	4603      	mov	r3, r0
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d10b      	bne.n	800fae2 <LidarSetPos+0xe8a>
 800faca:	2110      	movs	r1, #16
 800facc:	4848      	ldr	r0, [pc, #288]	; (800fbf0 <LidarSetPos+0xf98>)
 800face:	f002 ffa9 	bl	8012a24 <HAL_GPIO_ReadPin>
 800fad2:	4603      	mov	r3, r0
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d104      	bne.n	800fae2 <LidarSetPos+0xe8a>
							pp.error_y = 0;
 800fad8:	4b43      	ldr	r3, [pc, #268]	; (800fbe8 <LidarSetPos+0xf90>)
 800fada:	f04f 0200 	mov.w	r2, #0
 800fade:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800fae2:	4b41      	ldr	r3, [pc, #260]	; (800fbe8 <LidarSetPos+0xf90>)
 800fae4:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800fae8:	f003 0301 	and.w	r3, r3, #1
 800faec:	b2db      	uxtb	r3, r3
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d1cc      	bne.n	800fa8c <LidarSetPos+0xe34>
					}

					PP_start(bang_fence, 1, &pp);
 800faf2:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800faf6:	4a3c      	ldr	r2, [pc, #240]	; (800fbe8 <LidarSetPos+0xf90>)
 800faf8:	2101      	movs	r1, #1
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7f5 fedf 	bl	80058be <PP_start>
					while(pp.pp_start)
 800fb00:	e01e      	b.n	800fb40 <LidarSetPos+0xee8>
					{
						if(ps4.button == SQUARE)
 800fb02:	4b3a      	ldr	r3, [pc, #232]	; (800fbec <LidarSetPos+0xf94>)
 800fb04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb0a:	d108      	bne.n	800fb1e <LidarSetPos+0xec6>
						{
							while(ps4.button == SQUARE);
 800fb0c:	bf00      	nop
 800fb0e:	4b37      	ldr	r3, [pc, #220]	; (800fbec <LidarSetPos+0xf94>)
 800fb10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb16:	d0fa      	beq.n	800fb0e <LidarSetPos+0xeb6>
							PP_stop(&pp);
 800fb18:	4833      	ldr	r0, [pc, #204]	; (800fbe8 <LidarSetPos+0xf90>)
 800fb1a:	f7f6 f90a 	bl	8005d32 <PP_stop>
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800fb1e:	2108      	movs	r1, #8
 800fb20:	4833      	ldr	r0, [pc, #204]	; (800fbf0 <LidarSetPos+0xf98>)
 800fb22:	f002 ff7f 	bl	8012a24 <HAL_GPIO_ReadPin>
 800fb26:	4603      	mov	r3, r0
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d109      	bne.n	800fb40 <LidarSetPos+0xee8>
 800fb2c:	2110      	movs	r1, #16
 800fb2e:	4830      	ldr	r0, [pc, #192]	; (800fbf0 <LidarSetPos+0xf98>)
 800fb30:	f002 ff78 	bl	8012a24 <HAL_GPIO_ReadPin>
 800fb34:	4603      	mov	r3, r0
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d102      	bne.n	800fb40 <LidarSetPos+0xee8>
							PP_stop(&pp);
 800fb3a:	482b      	ldr	r0, [pc, #172]	; (800fbe8 <LidarSetPos+0xf90>)
 800fb3c:	f7f6 f8f9 	bl	8005d32 <PP_stop>
					while(pp.pp_start)
 800fb40:	4b29      	ldr	r3, [pc, #164]	; (800fbe8 <LidarSetPos+0xf90>)
 800fb42:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800fb46:	f003 0301 	and.w	r3, r3, #1
 800fb4a:	b2db      	uxtb	r3, r3
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d1d8      	bne.n	800fb02 <LidarSetPos+0xeaa>
					}

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800fb50:	463b      	mov	r3, r7
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800fb58:	1dfa      	adds	r2, r7, #7
 800fb5a:	7812      	ldrb	r2, [r2, #0]
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d106      	bne.n	800fb6e <LidarSetPos+0xf16>
						LidarAdjust(lidar);
 800fb60:	463b      	mov	r3, r7
 800fb62:	6818      	ldr	r0, [r3, #0]
 800fb64:	f000 fb32 	bl	80101cc <LidarAdjust>
					break;
 800fb68:	e001      	b.n	800fb6e <LidarSetPos+0xf16>

				default:
					break;
 800fb6a:	bf00      	nop
 800fb6c:	e0ad      	b.n	800fcca <LidarSetPos+0x1072>
					break;
 800fb6e:	bf00      	nop
			}
			break;
 800fb70:	e0ab      	b.n	800fcca <LidarSetPos+0x1072>


		case UPPER_RIGHT:
			switch(lidar->pos) // Self Pose
 800fb72:	463b      	mov	r3, r7
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800fb7a:	3b01      	subs	r3, #1
 800fb7c:	2b08      	cmp	r3, #8
 800fb7e:	d82d      	bhi.n	800fbdc <LidarSetPos+0xf84>
 800fb80:	a201      	add	r2, pc, #4	; (adr r2, 800fb88 <LidarSetPos+0xf30>)
 800fb82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb86:	bf00      	nop
 800fb88:	0800fbad 	.word	0x0800fbad
 800fb8c:	0800fbc5 	.word	0x0800fbc5
 800fb90:	0800fbdd 	.word	0x0800fbdd
 800fb94:	0800fbdd 	.word	0x0800fbdd
 800fb98:	0800fbd1 	.word	0x0800fbd1
 800fb9c:	0800fbdd 	.word	0x0800fbdd
 800fba0:	0800fbdd 	.word	0x0800fbdd
 800fba4:	0800fbdd 	.word	0x0800fbdd
 800fba8:	0800fbb9 	.word	0x0800fbb9
			{
				case PICK_LEFT:
					lidar->pos = UPPER_RIGHT;
 800fbac:	463b      	mov	r3, r7
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	2208      	movs	r2, #8
 800fbb2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800fbb6:	e012      	b.n	800fbde <LidarSetPos+0xf86>

				case PICK_RIGHT:
					lidar->pos = UPPER_RIGHT;
 800fbb8:	463b      	mov	r3, r7
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	2208      	movs	r2, #8
 800fbbe:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800fbc2:	e00c      	b.n	800fbde <LidarSetPos+0xf86>

				case UPPER_LEFT:
					lidar->pos = UPPER_RIGHT;
 800fbc4:	463b      	mov	r3, r7
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	2208      	movs	r2, #8
 800fbca:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800fbce:	e006      	b.n	800fbde <LidarSetPos+0xf86>

				case CENTER:
					lidar->pos = UPPER_RIGHT;
 800fbd0:	463b      	mov	r3, r7
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	2208      	movs	r2, #8
 800fbd6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800fbda:	e000      	b.n	800fbde <LidarSetPos+0xf86>

				default:
					break;
 800fbdc:	bf00      	nop
			}
			break;
 800fbde:	e074      	b.n	800fcca <LidarSetPos+0x1072>
 800fbe0:	20007840 	.word	0x20007840
 800fbe4:	3e970a3d 	.word	0x3e970a3d
 800fbe8:	20007188 	.word	0x20007188
 800fbec:	2000a3f0 	.word	0x2000a3f0
 800fbf0:	40020c00 	.word	0x40020c00
 800fbf4:	3e333333 	.word	0x3e333333

		case PICK_RIGHT:
			switch(lidar->pos)
 800fbf8:	463b      	mov	r3, r7
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800fc00:	3b03      	subs	r3, #3
 800fc02:	2b05      	cmp	r3, #5
 800fc04:	d85f      	bhi.n	800fcc6 <LidarSetPos+0x106e>
 800fc06:	a201      	add	r2, pc, #4	; (adr r2, 800fc0c <LidarSetPos+0xfb4>)
 800fc08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc0c:	0800fc8b 	.word	0x0800fc8b
 800fc10:	0800fc97 	.word	0x0800fc97
 800fc14:	0800fca3 	.word	0x0800fca3
 800fc18:	0800fcaf 	.word	0x0800fcaf
 800fc1c:	0800fcbb 	.word	0x0800fcbb
 800fc20:	0800fc25 	.word	0x0800fc25
			{
				case UPPER_RIGHT:
					ResetCoordinate();
 800fc24:	f7fb feec 	bl	800ba00 <ResetCoordinate>
					lidar->pos = PICK_RIGHT;
 800fc28:	463b      	mov	r3, r7
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	2209      	movs	r2, #9
 800fc2e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_4_to_pick_right, 1, &pp);
 800fc32:	f107 030c 	add.w	r3, r7, #12
 800fc36:	4a27      	ldr	r2, [pc, #156]	; (800fcd4 <LidarSetPos+0x107c>)
 800fc38:	2101      	movs	r1, #1
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f7f5 fe3f 	bl	80058be <PP_start>
					while(pp.pp_start)
 800fc40:	e017      	b.n	800fc72 <LidarSetPos+0x101a>
					{
						if(ps4.button == SQUARE)
 800fc42:	4b25      	ldr	r3, [pc, #148]	; (800fcd8 <LidarSetPos+0x1080>)
 800fc44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc4a:	d112      	bne.n	800fc72 <LidarSetPos+0x101a>
						{
							while(ps4.button == SQUARE);
 800fc4c:	bf00      	nop
 800fc4e:	4b22      	ldr	r3, [pc, #136]	; (800fcd8 <LidarSetPos+0x1080>)
 800fc50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc56:	d0fa      	beq.n	800fc4e <LidarSetPos+0xff6>
							PP_stop(&pp);
 800fc58:	481e      	ldr	r0, [pc, #120]	; (800fcd4 <LidarSetPos+0x107c>)
 800fc5a:	f7f6 f86a 	bl	8005d32 <PP_stop>
							lidar->pos = UPPER_RIGHT;
 800fc5e:	463b      	mov	r3, r7
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	2208      	movs	r2, #8
 800fc64:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = UPPER_RIGHT;
 800fc68:	463b      	mov	r3, r7
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	2208      	movs	r2, #8
 800fc6e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
					while(pp.pp_start)
 800fc72:	4b18      	ldr	r3, [pc, #96]	; (800fcd4 <LidarSetPos+0x107c>)
 800fc74:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800fc78:	f003 0301 	and.w	r3, r3, #1
 800fc7c:	b2db      	uxtb	r3, r3
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d1df      	bne.n	800fc42 <LidarSetPos+0xfea>
						}
					}
					pick_right = 1;
 800fc82:	4b16      	ldr	r3, [pc, #88]	; (800fcdc <LidarSetPos+0x1084>)
 800fc84:	2201      	movs	r2, #1
 800fc86:	601a      	str	r2, [r3, #0]
					break;
 800fc88:	e01e      	b.n	800fcc8 <LidarSetPos+0x1070>

				case CENTER_1:
					lidar->pos = PICK_RIGHT;
 800fc8a:	463b      	mov	r3, r7
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	2209      	movs	r2, #9
 800fc90:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800fc94:	e018      	b.n	800fcc8 <LidarSetPos+0x1070>

				case CENTER_2:
					lidar->pos = PICK_RIGHT;
 800fc96:	463b      	mov	r3, r7
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	2209      	movs	r2, #9
 800fc9c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800fca0:	e012      	b.n	800fcc8 <LidarSetPos+0x1070>

				case CENTER:
					lidar->pos = PICK_RIGHT;
 800fca2:	463b      	mov	r3, r7
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	2209      	movs	r2, #9
 800fca8:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800fcac:	e00c      	b.n	800fcc8 <LidarSetPos+0x1070>

				case CENTER_3:
					lidar->pos =  PICK_RIGHT;
 800fcae:	463b      	mov	r3, r7
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	2209      	movs	r2, #9
 800fcb4:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800fcb8:	e006      	b.n	800fcc8 <LidarSetPos+0x1070>

				case CENTER_4:
					lidar->pos = PICK_RIGHT;
 800fcba:	463b      	mov	r3, r7
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	2209      	movs	r2, #9
 800fcc0:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800fcc4:	e000      	b.n	800fcc8 <LidarSetPos+0x1070>

				default:
					break;
 800fcc6:	bf00      	nop
			}

		default:
			break;
 800fcc8:	bf00      	nop
		}
}
 800fcca:	bf00      	nop
 800fccc:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bdb0      	pop	{r4, r5, r7, pc}
 800fcd4:	20007188 	.word	0x20007188
 800fcd8:	2000a3f0 	.word	0x2000a3f0
 800fcdc:	2000a9f4 	.word	0x2000a9f4

0800fce0 <LidarSetAngle>:
 * Initial angle will be B (-90 degree)
 * After pick rings from left, directly go to aim self Type-2(B), Type-1-Left(A), Type-1-Right(C)
 * Then go to right self Type-2 repeat again
 */
void LidarSetAngle(Angle_t angle, Lidar_t* lidar)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b0b4      	sub	sp, #208	; 0xd0
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	4603      	mov	r3, r0
 800fce8:	6039      	str	r1, [r7, #0]
 800fcea:	71fb      	strb	r3, [r7, #7]
	float Pending_to_A[1][7] = {{1.0, 0, 0, Lidar_Shoot_Angles[0], 0, 0, 0}};
 800fcec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fcf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fcf4:	f04f 0300 	mov.w	r3, #0
 800fcf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fcfc:	f04f 0300 	mov.w	r3, #0
 800fd00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fd04:	4bb6      	ldr	r3, [pc, #728]	; (800ffe0 <LidarSetAngle+0x300>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fd0c:	f04f 0300 	mov.w	r3, #0
 800fd10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fd14:	f04f 0300 	mov.w	r3, #0
 800fd18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fd1c:	f04f 0300 	mov.w	r3, #0
 800fd20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	float A_to_B[1][7] = {{1.0, 0, 0, Lidar_Shoot_Angles[1], 0, 0, 0}};
 800fd24:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fd28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fd2c:	f04f 0300 	mov.w	r3, #0
 800fd30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800fd34:	f04f 0300 	mov.w	r3, #0
 800fd38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800fd3c:	4ba8      	ldr	r3, [pc, #672]	; (800ffe0 <LidarSetAngle+0x300>)
 800fd3e:	685b      	ldr	r3, [r3, #4]
 800fd40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800fd44:	f04f 0300 	mov.w	r3, #0
 800fd48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800fd4c:	f04f 0300 	mov.w	r3, #0
 800fd50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fd54:	f04f 0300 	mov.w	r3, #0
 800fd58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	float B_to_A[1][7] = {{1.0, 0, 0, Lidar_Shoot_Angles[2], 0, 0, 0}};
 800fd5c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fd60:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fd62:	f04f 0300 	mov.w	r3, #0
 800fd66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fd6a:	f04f 0300 	mov.w	r3, #0
 800fd6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fd72:	4b9b      	ldr	r3, [pc, #620]	; (800ffe0 <LidarSetAngle+0x300>)
 800fd74:	689b      	ldr	r3, [r3, #8]
 800fd76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fd7a:	f04f 0300 	mov.w	r3, #0
 800fd7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fd82:	f04f 0300 	mov.w	r3, #0
 800fd86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fd8a:	f04f 0300 	mov.w	r3, #0
 800fd8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float B_to_C[1][7] = {{1.0, 0, 0, Lidar_Shoot_Angles[3], 0, 0, 0}};
 800fd92:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fd96:	663b      	str	r3, [r7, #96]	; 0x60
 800fd98:	f04f 0300 	mov.w	r3, #0
 800fd9c:	667b      	str	r3, [r7, #100]	; 0x64
 800fd9e:	f04f 0300 	mov.w	r3, #0
 800fda2:	66bb      	str	r3, [r7, #104]	; 0x68
 800fda4:	4b8e      	ldr	r3, [pc, #568]	; (800ffe0 <LidarSetAngle+0x300>)
 800fda6:	68db      	ldr	r3, [r3, #12]
 800fda8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fdaa:	f04f 0300 	mov.w	r3, #0
 800fdae:	673b      	str	r3, [r7, #112]	; 0x70
 800fdb0:	f04f 0300 	mov.w	r3, #0
 800fdb4:	677b      	str	r3, [r7, #116]	; 0x74
 800fdb6:	f04f 0300 	mov.w	r3, #0
 800fdba:	67bb      	str	r3, [r7, #120]	; 0x78
	float C_to_B[1][7] = {{1.0, 0, 0, Lidar_Shoot_Angles[1], 0, 0, 0}};
 800fdbc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fdc0:	647b      	str	r3, [r7, #68]	; 0x44
 800fdc2:	f04f 0300 	mov.w	r3, #0
 800fdc6:	64bb      	str	r3, [r7, #72]	; 0x48
 800fdc8:	f04f 0300 	mov.w	r3, #0
 800fdcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fdce:	4b84      	ldr	r3, [pc, #528]	; (800ffe0 <LidarSetAngle+0x300>)
 800fdd0:	685b      	ldr	r3, [r3, #4]
 800fdd2:	653b      	str	r3, [r7, #80]	; 0x50
 800fdd4:	f04f 0300 	mov.w	r3, #0
 800fdd8:	657b      	str	r3, [r7, #84]	; 0x54
 800fdda:	f04f 0300 	mov.w	r3, #0
 800fdde:	65bb      	str	r3, [r7, #88]	; 0x58
 800fde0:	f04f 0300 	mov.w	r3, #0
 800fde4:	65fb      	str	r3, [r7, #92]	; 0x5c
	float C_to_D[1][7] = {{1.0, 0, 0, Lidar_Shoot_Angles[5], 0, 0, 0}};
 800fde6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fdea:	62bb      	str	r3, [r7, #40]	; 0x28
 800fdec:	f04f 0300 	mov.w	r3, #0
 800fdf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fdf2:	f04f 0300 	mov.w	r3, #0
 800fdf6:	633b      	str	r3, [r7, #48]	; 0x30
 800fdf8:	4b79      	ldr	r3, [pc, #484]	; (800ffe0 <LidarSetAngle+0x300>)
 800fdfa:	695b      	ldr	r3, [r3, #20]
 800fdfc:	637b      	str	r3, [r7, #52]	; 0x34
 800fdfe:	f04f 0300 	mov.w	r3, #0
 800fe02:	63bb      	str	r3, [r7, #56]	; 0x38
 800fe04:	f04f 0300 	mov.w	r3, #0
 800fe08:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe0a:	f04f 0300 	mov.w	r3, #0
 800fe0e:	643b      	str	r3, [r7, #64]	; 0x40
	float D_to_C[1][7] = {{1.0, 0, 0, Lidar_Shoot_Angles[6], 0, 0, 0}};
 800fe10:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fe14:	60fb      	str	r3, [r7, #12]
 800fe16:	f04f 0300 	mov.w	r3, #0
 800fe1a:	613b      	str	r3, [r7, #16]
 800fe1c:	f04f 0300 	mov.w	r3, #0
 800fe20:	617b      	str	r3, [r7, #20]
 800fe22:	4b6f      	ldr	r3, [pc, #444]	; (800ffe0 <LidarSetAngle+0x300>)
 800fe24:	699b      	ldr	r3, [r3, #24]
 800fe26:	61bb      	str	r3, [r7, #24]
 800fe28:	f04f 0300 	mov.w	r3, #0
 800fe2c:	61fb      	str	r3, [r7, #28]
 800fe2e:	f04f 0300 	mov.w	r3, #0
 800fe32:	623b      	str	r3, [r7, #32]
 800fe34:	f04f 0300 	mov.w	r3, #0
 800fe38:	627b      	str	r3, [r7, #36]	; 0x24

	switch(angle) // Target Angle
 800fe3a:	79fb      	ldrb	r3, [r7, #7]
 800fe3c:	3b01      	subs	r3, #1
 800fe3e:	2b03      	cmp	r3, #3
 800fe40:	f200 81ba 	bhi.w	80101b8 <LidarSetAngle+0x4d8>
 800fe44:	a201      	add	r2, pc, #4	; (adr r2, 800fe4c <LidarSetAngle+0x16c>)
 800fe46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe4a:	bf00      	nop
 800fe4c:	0800fe5d 	.word	0x0800fe5d
 800fe50:	0800ff45 	.word	0x0800ff45
 800fe54:	08010039 	.word	0x08010039
 800fe58:	08010121 	.word	0x08010121
	{
		case A:
			switch(lidar->angle) // Current Angle
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 800fe62:	2b04      	cmp	r3, #4
 800fe64:	d86c      	bhi.n	800ff40 <LidarSetAngle+0x260>
 800fe66:	a201      	add	r2, pc, #4	; (adr r2, 800fe6c <LidarSetAngle+0x18c>)
 800fe68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe6c:	0800fe81 	.word	0x0800fe81
 800fe70:	0800ff41 	.word	0x0800ff41
 800fe74:	0800fed7 	.word	0x0800fed7
 800fe78:	0800ff2d 	.word	0x0800ff2d
 800fe7c:	0800ff37 	.word	0x0800ff37
			{
				case ANGLE_PENDING:
					lidar->angle = A;
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	2201      	movs	r2, #1
 800fe84:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					PP_start(Pending_to_A, 1, &pp);
 800fe88:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800fe8c:	4a55      	ldr	r2, [pc, #340]	; (800ffe4 <LidarSetAngle+0x304>)
 800fe8e:	2101      	movs	r1, #1
 800fe90:	4618      	mov	r0, r3
 800fe92:	f7f5 fd14 	bl	80058be <PP_start>
					while(pp.pp_start)
 800fe96:	e015      	b.n	800fec4 <LidarSetAngle+0x1e4>
					{
						if(ps4.button == SQUARE)
 800fe98:	4b53      	ldr	r3, [pc, #332]	; (800ffe8 <LidarSetAngle+0x308>)
 800fe9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fea0:	d110      	bne.n	800fec4 <LidarSetAngle+0x1e4>
						{
							while(ps4.button == SQUARE);
 800fea2:	bf00      	nop
 800fea4:	4b50      	ldr	r3, [pc, #320]	; (800ffe8 <LidarSetAngle+0x308>)
 800fea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800feac:	d0fa      	beq.n	800fea4 <LidarSetAngle+0x1c4>
							PP_stop(&pp);
 800feae:	484d      	ldr	r0, [pc, #308]	; (800ffe4 <LidarSetAngle+0x304>)
 800feb0:	f7f5 ff3f 	bl	8005d32 <PP_stop>
							lidar->angle = ANGLE_PENDING;
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	2200      	movs	r2, #0
 800feb8:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
							lidar->angle_counter = ANGLE_PENDING;
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	2200      	movs	r2, #0
 800fec0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
					while(pp.pp_start)
 800fec4:	4b47      	ldr	r3, [pc, #284]	; (800ffe4 <LidarSetAngle+0x304>)
 800fec6:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800feca:	f003 0301 	and.w	r3, r3, #1
 800fece:	b2db      	uxtb	r3, r3
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d1e1      	bne.n	800fe98 <LidarSetAngle+0x1b8>
						}
					}
					break;
 800fed4:	e035      	b.n	800ff42 <LidarSetAngle+0x262>

				case B:
					lidar->angle = A;
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	2201      	movs	r2, #1
 800feda:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					PP_start(B_to_A, 1, &pp);
 800fede:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800fee2:	4a40      	ldr	r2, [pc, #256]	; (800ffe4 <LidarSetAngle+0x304>)
 800fee4:	2101      	movs	r1, #1
 800fee6:	4618      	mov	r0, r3
 800fee8:	f7f5 fce9 	bl	80058be <PP_start>
					while(pp.pp_start)
 800feec:	e015      	b.n	800ff1a <LidarSetAngle+0x23a>
					{
						if(ps4.button == SQUARE)
 800feee:	4b3e      	ldr	r3, [pc, #248]	; (800ffe8 <LidarSetAngle+0x308>)
 800fef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fef6:	d110      	bne.n	800ff1a <LidarSetAngle+0x23a>
						{
							while(ps4.button == SQUARE);
 800fef8:	bf00      	nop
 800fefa:	4b3b      	ldr	r3, [pc, #236]	; (800ffe8 <LidarSetAngle+0x308>)
 800fefc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fefe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff02:	d0fa      	beq.n	800fefa <LidarSetAngle+0x21a>
							PP_stop(&pp);
 800ff04:	4837      	ldr	r0, [pc, #220]	; (800ffe4 <LidarSetAngle+0x304>)
 800ff06:	f7f5 ff14 	bl	8005d32 <PP_stop>
							lidar->angle = B;
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	2202      	movs	r2, #2
 800ff0e:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
							lidar->angle_counter = B;
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	2202      	movs	r2, #2
 800ff16:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
					while(pp.pp_start)
 800ff1a:	4b32      	ldr	r3, [pc, #200]	; (800ffe4 <LidarSetAngle+0x304>)
 800ff1c:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800ff20:	f003 0301 	and.w	r3, r3, #1
 800ff24:	b2db      	uxtb	r3, r3
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d1e1      	bne.n	800feee <LidarSetAngle+0x20e>
						}
					}
					break;
 800ff2a:	e00a      	b.n	800ff42 <LidarSetAngle+0x262>

				case C:
					lidar->angle = A;
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	2201      	movs	r2, #1
 800ff30:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					break;
 800ff34:	e005      	b.n	800ff42 <LidarSetAngle+0x262>

				case D:
					lidar->angle = A;
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	2201      	movs	r2, #1
 800ff3a:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					break;
 800ff3e:	e000      	b.n	800ff42 <LidarSetAngle+0x262>

				default:
					break;
 800ff40:	bf00      	nop
			}
			break;
 800ff42:	e13a      	b.n	80101ba <LidarSetAngle+0x4da>

		case B:
			switch(lidar->angle)
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 800ff4a:	2b04      	cmp	r3, #4
 800ff4c:	d872      	bhi.n	8010034 <LidarSetAngle+0x354>
 800ff4e:	a201      	add	r2, pc, #4	; (adr r2, 800ff54 <LidarSetAngle+0x274>)
 800ff50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff54:	0800ff69 	.word	0x0800ff69
 800ff58:	0800ff73 	.word	0x0800ff73
 800ff5c:	08010035 	.word	0x08010035
 800ff60:	0800ffc9 	.word	0x0800ffc9
 800ff64:	0801002b 	.word	0x0801002b
			{
				case ANGLE_PENDING:
					lidar->angle = B;
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	2202      	movs	r2, #2
 800ff6c:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					break;
 800ff70:	e061      	b.n	8010036 <LidarSetAngle+0x356>

				case A:
					lidar->angle = B;
 800ff72:	683b      	ldr	r3, [r7, #0]
 800ff74:	2202      	movs	r2, #2
 800ff76:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					PP_start(A_to_B, 1, &pp);
 800ff7a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800ff7e:	4a19      	ldr	r2, [pc, #100]	; (800ffe4 <LidarSetAngle+0x304>)
 800ff80:	2101      	movs	r1, #1
 800ff82:	4618      	mov	r0, r3
 800ff84:	f7f5 fc9b 	bl	80058be <PP_start>
					while(pp.pp_start)
 800ff88:	e015      	b.n	800ffb6 <LidarSetAngle+0x2d6>
					{
						if(ps4.button == SQUARE)
 800ff8a:	4b17      	ldr	r3, [pc, #92]	; (800ffe8 <LidarSetAngle+0x308>)
 800ff8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff92:	d110      	bne.n	800ffb6 <LidarSetAngle+0x2d6>
						{
							while(ps4.button == SQUARE);
 800ff94:	bf00      	nop
 800ff96:	4b14      	ldr	r3, [pc, #80]	; (800ffe8 <LidarSetAngle+0x308>)
 800ff98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff9e:	d0fa      	beq.n	800ff96 <LidarSetAngle+0x2b6>
							PP_stop(&pp);
 800ffa0:	4810      	ldr	r0, [pc, #64]	; (800ffe4 <LidarSetAngle+0x304>)
 800ffa2:	f7f5 fec6 	bl	8005d32 <PP_stop>
							lidar->angle = A;
 800ffa6:	683b      	ldr	r3, [r7, #0]
 800ffa8:	2201      	movs	r2, #1
 800ffaa:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
							lidar->angle_counter = A;
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	2201      	movs	r2, #1
 800ffb2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
					while(pp.pp_start)
 800ffb6:	4b0b      	ldr	r3, [pc, #44]	; (800ffe4 <LidarSetAngle+0x304>)
 800ffb8:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800ffbc:	f003 0301 	and.w	r3, r3, #1
 800ffc0:	b2db      	uxtb	r3, r3
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d1e1      	bne.n	800ff8a <LidarSetAngle+0x2aa>
						}
					}
					break;
 800ffc6:	e036      	b.n	8010036 <LidarSetAngle+0x356>

				case C:
					lidar->angle = B;
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	2202      	movs	r2, #2
 800ffcc:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					PP_start(C_to_B, 1, &pp);
 800ffd0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ffd4:	4a03      	ldr	r2, [pc, #12]	; (800ffe4 <LidarSetAngle+0x304>)
 800ffd6:	2101      	movs	r1, #1
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f7f5 fc70 	bl	80058be <PP_start>
					while(pp.pp_start)
 800ffde:	e01b      	b.n	8010018 <LidarSetAngle+0x338>
 800ffe0:	20000038 	.word	0x20000038
 800ffe4:	20007188 	.word	0x20007188
 800ffe8:	2000a3f0 	.word	0x2000a3f0
					{
						if(ps4.button == SQUARE)
 800ffec:	4b75      	ldr	r3, [pc, #468]	; (80101c4 <LidarSetAngle+0x4e4>)
 800ffee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fff4:	d110      	bne.n	8010018 <LidarSetAngle+0x338>
						{
							while(ps4.button == SQUARE);
 800fff6:	bf00      	nop
 800fff8:	4b72      	ldr	r3, [pc, #456]	; (80101c4 <LidarSetAngle+0x4e4>)
 800fffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010000:	d0fa      	beq.n	800fff8 <LidarSetAngle+0x318>
							PP_stop(&pp);
 8010002:	4871      	ldr	r0, [pc, #452]	; (80101c8 <LidarSetAngle+0x4e8>)
 8010004:	f7f5 fe95 	bl	8005d32 <PP_stop>
							lidar->angle = C;
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	2203      	movs	r2, #3
 801000c:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
							lidar->angle_counter = C;
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	2203      	movs	r2, #3
 8010014:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
					while(pp.pp_start)
 8010018:	4b6b      	ldr	r3, [pc, #428]	; (80101c8 <LidarSetAngle+0x4e8>)
 801001a:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 801001e:	f003 0301 	and.w	r3, r3, #1
 8010022:	b2db      	uxtb	r3, r3
 8010024:	2b00      	cmp	r3, #0
 8010026:	d1e1      	bne.n	800ffec <LidarSetAngle+0x30c>
						}
					}
					break;
 8010028:	e005      	b.n	8010036 <LidarSetAngle+0x356>

				case D:
					lidar->angle = B;
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	2202      	movs	r2, #2
 801002e:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					break;
 8010032:	e000      	b.n	8010036 <LidarSetAngle+0x356>

				default:
					break;
 8010034:	bf00      	nop
			}
			break;
 8010036:	e0c0      	b.n	80101ba <LidarSetAngle+0x4da>

		case C:
			switch(lidar->angle)
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 801003e:	2b04      	cmp	r3, #4
 8010040:	d86c      	bhi.n	801011c <LidarSetAngle+0x43c>
 8010042:	a201      	add	r2, pc, #4	; (adr r2, 8010048 <LidarSetAngle+0x368>)
 8010044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010048:	0801005d 	.word	0x0801005d
 801004c:	08010067 	.word	0x08010067
 8010050:	08010071 	.word	0x08010071
 8010054:	0801011d 	.word	0x0801011d
 8010058:	080100c7 	.word	0x080100c7
			{
				case ANGLE_PENDING:
					lidar->angle = C;
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	2203      	movs	r2, #3
 8010060:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					break;
 8010064:	e05b      	b.n	801011e <LidarSetAngle+0x43e>

				case A:
					lidar->angle = C;
 8010066:	683b      	ldr	r3, [r7, #0]
 8010068:	2203      	movs	r2, #3
 801006a:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					break;
 801006e:	e056      	b.n	801011e <LidarSetAngle+0x43e>

				case B:
					lidar->angle = C;
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	2203      	movs	r2, #3
 8010074:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					PP_start(B_to_C, 1, &pp);
 8010078:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801007c:	4a52      	ldr	r2, [pc, #328]	; (80101c8 <LidarSetAngle+0x4e8>)
 801007e:	2101      	movs	r1, #1
 8010080:	4618      	mov	r0, r3
 8010082:	f7f5 fc1c 	bl	80058be <PP_start>
					while(pp.pp_start)
 8010086:	e015      	b.n	80100b4 <LidarSetAngle+0x3d4>
					{
						if(ps4.button == SQUARE)
 8010088:	4b4e      	ldr	r3, [pc, #312]	; (80101c4 <LidarSetAngle+0x4e4>)
 801008a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801008c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010090:	d110      	bne.n	80100b4 <LidarSetAngle+0x3d4>
						{
							while(ps4.button == SQUARE);
 8010092:	bf00      	nop
 8010094:	4b4b      	ldr	r3, [pc, #300]	; (80101c4 <LidarSetAngle+0x4e4>)
 8010096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801009c:	d0fa      	beq.n	8010094 <LidarSetAngle+0x3b4>
							PP_stop(&pp);
 801009e:	484a      	ldr	r0, [pc, #296]	; (80101c8 <LidarSetAngle+0x4e8>)
 80100a0:	f7f5 fe47 	bl	8005d32 <PP_stop>
							lidar->angle = B;
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	2202      	movs	r2, #2
 80100a8:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
							lidar->angle_counter = B;
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	2202      	movs	r2, #2
 80100b0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
					while(pp.pp_start)
 80100b4:	4b44      	ldr	r3, [pc, #272]	; (80101c8 <LidarSetAngle+0x4e8>)
 80100b6:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80100ba:	f003 0301 	and.w	r3, r3, #1
 80100be:	b2db      	uxtb	r3, r3
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d1e1      	bne.n	8010088 <LidarSetAngle+0x3a8>
						}
					}
					break;
 80100c4:	e02b      	b.n	801011e <LidarSetAngle+0x43e>

				case D:
					lidar->angle = C;
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	2203      	movs	r2, #3
 80100ca:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					PP_start(D_to_C, 1, &pp);
 80100ce:	f107 030c 	add.w	r3, r7, #12
 80100d2:	4a3d      	ldr	r2, [pc, #244]	; (80101c8 <LidarSetAngle+0x4e8>)
 80100d4:	2101      	movs	r1, #1
 80100d6:	4618      	mov	r0, r3
 80100d8:	f7f5 fbf1 	bl	80058be <PP_start>
					while(pp.pp_start)
 80100dc:	e015      	b.n	801010a <LidarSetAngle+0x42a>
					{
						if(ps4.button == SQUARE)
 80100de:	4b39      	ldr	r3, [pc, #228]	; (80101c4 <LidarSetAngle+0x4e4>)
 80100e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80100e6:	d110      	bne.n	801010a <LidarSetAngle+0x42a>
						{
							while(ps4.button == SQUARE);
 80100e8:	bf00      	nop
 80100ea:	4b36      	ldr	r3, [pc, #216]	; (80101c4 <LidarSetAngle+0x4e4>)
 80100ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80100f2:	d0fa      	beq.n	80100ea <LidarSetAngle+0x40a>
							PP_stop(&pp);
 80100f4:	4834      	ldr	r0, [pc, #208]	; (80101c8 <LidarSetAngle+0x4e8>)
 80100f6:	f7f5 fe1c 	bl	8005d32 <PP_stop>
							lidar->angle = D;
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	2204      	movs	r2, #4
 80100fe:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
							lidar->angle_counter = D;
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	2204      	movs	r2, #4
 8010106:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
					while(pp.pp_start)
 801010a:	4b2f      	ldr	r3, [pc, #188]	; (80101c8 <LidarSetAngle+0x4e8>)
 801010c:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8010110:	f003 0301 	and.w	r3, r3, #1
 8010114:	b2db      	uxtb	r3, r3
 8010116:	2b00      	cmp	r3, #0
 8010118:	d1e1      	bne.n	80100de <LidarSetAngle+0x3fe>
						}
					}
					break;
 801011a:	e000      	b.n	801011e <LidarSetAngle+0x43e>

				default:
					break;
 801011c:	bf00      	nop
			}
			break;
 801011e:	e04c      	b.n	80101ba <LidarSetAngle+0x4da>

		case D:
			switch(lidar->angle)
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 8010126:	2b03      	cmp	r3, #3
 8010128:	d844      	bhi.n	80101b4 <LidarSetAngle+0x4d4>
 801012a:	a201      	add	r2, pc, #4	; (adr r2, 8010130 <LidarSetAngle+0x450>)
 801012c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010130:	08010141 	.word	0x08010141
 8010134:	0801014b 	.word	0x0801014b
 8010138:	08010155 	.word	0x08010155
 801013c:	0801015f 	.word	0x0801015f
			{
				case ANGLE_PENDING:
					lidar->angle = D;
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	2204      	movs	r2, #4
 8010144:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					break;
 8010148:	e035      	b.n	80101b6 <LidarSetAngle+0x4d6>

				case A:
					lidar->angle = D;
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	2204      	movs	r2, #4
 801014e:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					break;
 8010152:	e030      	b.n	80101b6 <LidarSetAngle+0x4d6>

				case B:
					lidar->angle = D;
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	2204      	movs	r2, #4
 8010158:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					break;
 801015c:	e02b      	b.n	80101b6 <LidarSetAngle+0x4d6>

				case C:
					lidar->angle = D;
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	2204      	movs	r2, #4
 8010162:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					PP_start(C_to_D, 1, &pp);
 8010166:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801016a:	4a17      	ldr	r2, [pc, #92]	; (80101c8 <LidarSetAngle+0x4e8>)
 801016c:	2101      	movs	r1, #1
 801016e:	4618      	mov	r0, r3
 8010170:	f7f5 fba5 	bl	80058be <PP_start>
					while(pp.pp_start)
 8010174:	e015      	b.n	80101a2 <LidarSetAngle+0x4c2>
					{
						if(ps4.button == SQUARE)
 8010176:	4b13      	ldr	r3, [pc, #76]	; (80101c4 <LidarSetAngle+0x4e4>)
 8010178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801017a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801017e:	d110      	bne.n	80101a2 <LidarSetAngle+0x4c2>
						{
							while(ps4.button == SQUARE);
 8010180:	bf00      	nop
 8010182:	4b10      	ldr	r3, [pc, #64]	; (80101c4 <LidarSetAngle+0x4e4>)
 8010184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801018a:	d0fa      	beq.n	8010182 <LidarSetAngle+0x4a2>
							PP_stop(&pp);
 801018c:	480e      	ldr	r0, [pc, #56]	; (80101c8 <LidarSetAngle+0x4e8>)
 801018e:	f7f5 fdd0 	bl	8005d32 <PP_stop>
							lidar->angle = C;
 8010192:	683b      	ldr	r3, [r7, #0]
 8010194:	2203      	movs	r2, #3
 8010196:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
							lidar->angle_counter = C;
 801019a:	683b      	ldr	r3, [r7, #0]
 801019c:	2203      	movs	r2, #3
 801019e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
					while(pp.pp_start)
 80101a2:	4b09      	ldr	r3, [pc, #36]	; (80101c8 <LidarSetAngle+0x4e8>)
 80101a4:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80101a8:	f003 0301 	and.w	r3, r3, #1
 80101ac:	b2db      	uxtb	r3, r3
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d1e1      	bne.n	8010176 <LidarSetAngle+0x496>
						}
					}
					break;
 80101b2:	e000      	b.n	80101b6 <LidarSetAngle+0x4d6>

				default:
					break;
 80101b4:	bf00      	nop
			}
			break;
 80101b6:	e000      	b.n	80101ba <LidarSetAngle+0x4da>

		default:
			break;
 80101b8:	bf00      	nop
	}
}
 80101ba:	bf00      	nop
 80101bc:	37d0      	adds	r7, #208	; 0xd0
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}
 80101c2:	bf00      	nop
 80101c4:	2000a3f0 	.word	0x2000a3f0
 80101c8:	20007188 	.word	0x20007188

080101cc <LidarAdjust>:

void LidarAdjust(Lidar_t* lidar)
{
 80101cc:	b5b0      	push	{r4, r5, r7, lr}
 80101ce:	b08a      	sub	sp, #40	; 0x28
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
	if(lidar->AdjEnb)
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80101da:	2b00      	cmp	r3, #0
 80101dc:	f000 81c3 	beq.w	8010566 <LidarAdjust+0x39a>
//				PP_stop(&pp);
//			}
//		}

		// Ensure robot sticking fence
		float stick_fence_point[1][7] = {{2.0, 0, 5, -90, 0, 0, 0}};
 80101e0:	4bb8      	ldr	r3, [pc, #736]	; (80104c4 <LidarAdjust+0x2f8>)
 80101e2:	f107 040c 	add.w	r4, r7, #12
 80101e6:	461d      	mov	r5, r3
 80101e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80101ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80101ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80101f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(stick_fence_point, 1, &pp);
 80101f4:	f107 030c 	add.w	r3, r7, #12
 80101f8:	4ab3      	ldr	r2, [pc, #716]	; (80104c8 <LidarAdjust+0x2fc>)
 80101fa:	2101      	movs	r1, #1
 80101fc:	4618      	mov	r0, r3
 80101fe:	f7f5 fb5e 	bl	80058be <PP_start>
		while(pp.pp_start)
 8010202:	e01e      	b.n	8010242 <LidarAdjust+0x76>
		{
			if(ps4.button == SQUARE)
 8010204:	4bb1      	ldr	r3, [pc, #708]	; (80104cc <LidarAdjust+0x300>)
 8010206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801020c:	d108      	bne.n	8010220 <LidarAdjust+0x54>
			{
				while(ps4.button == SQUARE);
 801020e:	bf00      	nop
 8010210:	4bae      	ldr	r3, [pc, #696]	; (80104cc <LidarAdjust+0x300>)
 8010212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010218:	d0fa      	beq.n	8010210 <LidarAdjust+0x44>
				PP_stop(&pp);
 801021a:	48ab      	ldr	r0, [pc, #684]	; (80104c8 <LidarAdjust+0x2fc>)
 801021c:	f7f5 fd89 	bl	8005d32 <PP_stop>
			}

			if(In_LS_Shot_1 && In_LS_Shot_2)
 8010220:	2108      	movs	r1, #8
 8010222:	48ab      	ldr	r0, [pc, #684]	; (80104d0 <LidarAdjust+0x304>)
 8010224:	f002 fbfe 	bl	8012a24 <HAL_GPIO_ReadPin>
 8010228:	4603      	mov	r3, r0
 801022a:	2b00      	cmp	r3, #0
 801022c:	d109      	bne.n	8010242 <LidarAdjust+0x76>
 801022e:	2110      	movs	r1, #16
 8010230:	48a7      	ldr	r0, [pc, #668]	; (80104d0 <LidarAdjust+0x304>)
 8010232:	f002 fbf7 	bl	8012a24 <HAL_GPIO_ReadPin>
 8010236:	4603      	mov	r3, r0
 8010238:	2b00      	cmp	r3, #0
 801023a:	d102      	bne.n	8010242 <LidarAdjust+0x76>
				PP_stop(&pp);
 801023c:	48a2      	ldr	r0, [pc, #648]	; (80104c8 <LidarAdjust+0x2fc>)
 801023e:	f7f5 fd78 	bl	8005d32 <PP_stop>
		while(pp.pp_start)
 8010242:	4ba1      	ldr	r3, [pc, #644]	; (80104c8 <LidarAdjust+0x2fc>)
 8010244:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8010248:	f003 0301 	and.w	r3, r3, #1
 801024c:	b2db      	uxtb	r3, r3
 801024e:	2b00      	cmp	r3, #0
 8010250:	d1d8      	bne.n	8010204 <LidarAdjust+0x38>
		}

		// Only adjust after reached destination
		switch(lidar->pos)
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 8010258:	3b02      	subs	r3, #2
 801025a:	2b06      	cmp	r3, #6
 801025c:	f200 8182 	bhi.w	8010564 <LidarAdjust+0x398>
 8010260:	a201      	add	r2, pc, #4	; (adr r2, 8010268 <LidarAdjust+0x9c>)
 8010262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010266:	bf00      	nop
 8010268:	08010565 	.word	0x08010565
 801026c:	08010285 	.word	0x08010285
 8010270:	08010315 	.word	0x08010315
 8010274:	080103a5 	.word	0x080103a5
 8010278:	08010435 	.word	0x08010435
 801027c:	080104d5 	.word	0x080104d5
 8010280:	08010565 	.word	0x08010565
				 * Path plan to desired position
				 */
				break;

			case CENTER_1:
				LidarSendIns(NEAR, lidar);
 8010284:	6879      	ldr	r1, [r7, #4]
 8010286:	2001      	movs	r0, #1
 8010288:	f000 faaa 	bl	80107e0 <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_1_offset_x;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010298:	4618      	mov	r0, r3
 801029a:	f7f0 f955 	bl	8000548 <__aeabi_f2d>
 801029e:	4602      	mov	r2, r0
 80102a0:	460b      	mov	r3, r1
 80102a2:	4620      	mov	r0, r4
 80102a4:	4629      	mov	r1, r5
 80102a6:	f7ef ffef 	bl	8000288 <__aeabi_dsub>
 80102aa:	4602      	mov	r2, r0
 80102ac:	460b      	mov	r3, r1
 80102ae:	4610      	mov	r0, r2
 80102b0:	4619      	mov	r1, r3
 80102b2:	f7f0 fc99 	bl	8000be8 <__aeabi_d2f>
 80102b6:	4602      	mov	r2, r0
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_1_offset_y;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7f0 f93c 	bl	8000548 <__aeabi_f2d>
 80102d0:	4602      	mov	r2, r0
 80102d2:	460b      	mov	r3, r1
 80102d4:	4620      	mov	r0, r4
 80102d6:	4629      	mov	r1, r5
 80102d8:	f7ef ffd6 	bl	8000288 <__aeabi_dsub>
 80102dc:	4602      	mov	r2, r0
 80102de:	460b      	mov	r3, r1
 80102e0:	4610      	mov	r0, r2
 80102e2:	4619      	mov	r1, r3
 80102e4:	f7f0 fc80 	bl	8000be8 <__aeabi_d2f>
 80102e8:	4602      	mov	r2, r0
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, pp.real_z);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 80102fc:	4b72      	ldr	r3, [pc, #456]	; (80104c8 <LidarAdjust+0x2fc>)
 80102fe:	edd3 6a04 	vldr	s13, [r3, #16]
 8010302:	eeb0 1a66 	vmov.f32	s2, s13
 8010306:	eef0 0a47 	vmov.f32	s1, s14
 801030a:	eeb0 0a67 	vmov.f32	s0, s15
 801030e:	f000 f931 	bl	8010574 <LidarAdjustPP>
				break;
 8010312:	e128      	b.n	8010566 <LidarAdjust+0x39a>

			case CENTER_2:
				LidarSendIns(NEAR, lidar);
 8010314:	6879      	ldr	r1, [r7, #4]
 8010316:	2001      	movs	r0, #1
 8010318:	f000 fa62 	bl	80107e0 <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_2_offset_x;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010328:	4618      	mov	r0, r3
 801032a:	f7f0 f90d 	bl	8000548 <__aeabi_f2d>
 801032e:	4602      	mov	r2, r0
 8010330:	460b      	mov	r3, r1
 8010332:	4620      	mov	r0, r4
 8010334:	4629      	mov	r1, r5
 8010336:	f7ef ffa7 	bl	8000288 <__aeabi_dsub>
 801033a:	4602      	mov	r2, r0
 801033c:	460b      	mov	r3, r1
 801033e:	4610      	mov	r0, r2
 8010340:	4619      	mov	r1, r3
 8010342:	f7f0 fc51 	bl	8000be8 <__aeabi_d2f>
 8010346:	4602      	mov	r2, r0
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_2_offset_y;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 801035a:	4618      	mov	r0, r3
 801035c:	f7f0 f8f4 	bl	8000548 <__aeabi_f2d>
 8010360:	4602      	mov	r2, r0
 8010362:	460b      	mov	r3, r1
 8010364:	4620      	mov	r0, r4
 8010366:	4629      	mov	r1, r5
 8010368:	f7ef ff8e 	bl	8000288 <__aeabi_dsub>
 801036c:	4602      	mov	r2, r0
 801036e:	460b      	mov	r3, r1
 8010370:	4610      	mov	r0, r2
 8010372:	4619      	mov	r1, r3
 8010374:	f7f0 fc38 	bl	8000be8 <__aeabi_d2f>
 8010378:	4602      	mov	r2, r0
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, pp.real_z);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 801038c:	4b4e      	ldr	r3, [pc, #312]	; (80104c8 <LidarAdjust+0x2fc>)
 801038e:	edd3 6a04 	vldr	s13, [r3, #16]
 8010392:	eeb0 1a66 	vmov.f32	s2, s13
 8010396:	eef0 0a47 	vmov.f32	s1, s14
 801039a:	eeb0 0a67 	vmov.f32	s0, s15
 801039e:	f000 f8e9 	bl	8010574 <LidarAdjustPP>
				break;
 80103a2:	e0e0      	b.n	8010566 <LidarAdjust+0x39a>

			case CENTER:
				LidarSendIns(NEAR, lidar);
 80103a4:	6879      	ldr	r1, [r7, #4]
 80103a6:	2001      	movs	r0, #1
 80103a8:	f000 fa1a 	bl	80107e0 <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_offset_x;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80103b8:	4618      	mov	r0, r3
 80103ba:	f7f0 f8c5 	bl	8000548 <__aeabi_f2d>
 80103be:	4602      	mov	r2, r0
 80103c0:	460b      	mov	r3, r1
 80103c2:	4620      	mov	r0, r4
 80103c4:	4629      	mov	r1, r5
 80103c6:	f7ef ff5f 	bl	8000288 <__aeabi_dsub>
 80103ca:	4602      	mov	r2, r0
 80103cc:	460b      	mov	r3, r1
 80103ce:	4610      	mov	r0, r2
 80103d0:	4619      	mov	r1, r3
 80103d2:	f7f0 fc09 	bl	8000be8 <__aeabi_d2f>
 80103d6:	4602      	mov	r2, r0
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_offset_y;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80103ea:	4618      	mov	r0, r3
 80103ec:	f7f0 f8ac 	bl	8000548 <__aeabi_f2d>
 80103f0:	4602      	mov	r2, r0
 80103f2:	460b      	mov	r3, r1
 80103f4:	4620      	mov	r0, r4
 80103f6:	4629      	mov	r1, r5
 80103f8:	f7ef ff46 	bl	8000288 <__aeabi_dsub>
 80103fc:	4602      	mov	r2, r0
 80103fe:	460b      	mov	r3, r1
 8010400:	4610      	mov	r0, r2
 8010402:	4619      	mov	r1, r3
 8010404:	f7f0 fbf0 	bl	8000be8 <__aeabi_d2f>
 8010408:	4602      	mov	r2, r0
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, pp.real_z);
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 801041c:	4b2a      	ldr	r3, [pc, #168]	; (80104c8 <LidarAdjust+0x2fc>)
 801041e:	edd3 6a04 	vldr	s13, [r3, #16]
 8010422:	eeb0 1a66 	vmov.f32	s2, s13
 8010426:	eef0 0a47 	vmov.f32	s1, s14
 801042a:	eeb0 0a67 	vmov.f32	s0, s15
 801042e:	f000 f8a1 	bl	8010574 <LidarAdjustPP>
				break;
 8010432:	e098      	b.n	8010566 <LidarAdjust+0x39a>

			case CENTER_3:
				LidarSendIns(NEAR, lidar);
 8010434:	6879      	ldr	r1, [r7, #4]
 8010436:	2001      	movs	r0, #1
 8010438:	f000 f9d2 	bl	80107e0 <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_3_offset_x;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8010448:	4618      	mov	r0, r3
 801044a:	f7f0 f87d 	bl	8000548 <__aeabi_f2d>
 801044e:	4602      	mov	r2, r0
 8010450:	460b      	mov	r3, r1
 8010452:	4620      	mov	r0, r4
 8010454:	4629      	mov	r1, r5
 8010456:	f7ef ff17 	bl	8000288 <__aeabi_dsub>
 801045a:	4602      	mov	r2, r0
 801045c:	460b      	mov	r3, r1
 801045e:	4610      	mov	r0, r2
 8010460:	4619      	mov	r1, r3
 8010462:	f7f0 fbc1 	bl	8000be8 <__aeabi_d2f>
 8010466:	4602      	mov	r2, r0
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_3_offset_y;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 801047a:	4618      	mov	r0, r3
 801047c:	f7f0 f864 	bl	8000548 <__aeabi_f2d>
 8010480:	4602      	mov	r2, r0
 8010482:	460b      	mov	r3, r1
 8010484:	4620      	mov	r0, r4
 8010486:	4629      	mov	r1, r5
 8010488:	f7ef fefe 	bl	8000288 <__aeabi_dsub>
 801048c:	4602      	mov	r2, r0
 801048e:	460b      	mov	r3, r1
 8010490:	4610      	mov	r0, r2
 8010492:	4619      	mov	r1, r3
 8010494:	f7f0 fba8 	bl	8000be8 <__aeabi_d2f>
 8010498:	4602      	mov	r2, r0
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, pp.real_z);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 80104ac:	4b06      	ldr	r3, [pc, #24]	; (80104c8 <LidarAdjust+0x2fc>)
 80104ae:	edd3 6a04 	vldr	s13, [r3, #16]
 80104b2:	eeb0 1a66 	vmov.f32	s2, s13
 80104b6:	eef0 0a47 	vmov.f32	s1, s14
 80104ba:	eeb0 0a67 	vmov.f32	s0, s15
 80104be:	f000 f859 	bl	8010574 <LidarAdjustPP>
				break;
 80104c2:	e050      	b.n	8010566 <LidarAdjust+0x39a>
 80104c4:	08020560 	.word	0x08020560
 80104c8:	20007188 	.word	0x20007188
 80104cc:	2000a3f0 	.word	0x2000a3f0
 80104d0:	40020c00 	.word	0x40020c00

			case CENTER_4:
				LidarSendIns(NEAR, lidar);
 80104d4:	6879      	ldr	r1, [r7, #4]
 80104d6:	2001      	movs	r0, #1
 80104d8:	f000 f982 	bl	80107e0 <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_4_offset_x;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80104e8:	4618      	mov	r0, r3
 80104ea:	f7f0 f82d 	bl	8000548 <__aeabi_f2d>
 80104ee:	4602      	mov	r2, r0
 80104f0:	460b      	mov	r3, r1
 80104f2:	4620      	mov	r0, r4
 80104f4:	4629      	mov	r1, r5
 80104f6:	f7ef fec7 	bl	8000288 <__aeabi_dsub>
 80104fa:	4602      	mov	r2, r0
 80104fc:	460b      	mov	r3, r1
 80104fe:	4610      	mov	r0, r2
 8010500:	4619      	mov	r1, r3
 8010502:	f7f0 fb71 	bl	8000be8 <__aeabi_d2f>
 8010506:	4602      	mov	r2, r0
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_4_offset_y;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 801051a:	4618      	mov	r0, r3
 801051c:	f7f0 f814 	bl	8000548 <__aeabi_f2d>
 8010520:	4602      	mov	r2, r0
 8010522:	460b      	mov	r3, r1
 8010524:	4620      	mov	r0, r4
 8010526:	4629      	mov	r1, r5
 8010528:	f7ef feae 	bl	8000288 <__aeabi_dsub>
 801052c:	4602      	mov	r2, r0
 801052e:	460b      	mov	r3, r1
 8010530:	4610      	mov	r0, r2
 8010532:	4619      	mov	r1, r3
 8010534:	f7f0 fb58 	bl	8000be8 <__aeabi_d2f>
 8010538:	4602      	mov	r2, r0
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, pp.real_z);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 801054c:	4b08      	ldr	r3, [pc, #32]	; (8010570 <LidarAdjust+0x3a4>)
 801054e:	edd3 6a04 	vldr	s13, [r3, #16]
 8010552:	eeb0 1a66 	vmov.f32	s2, s13
 8010556:	eef0 0a47 	vmov.f32	s1, s14
 801055a:	eeb0 0a67 	vmov.f32	s0, s15
 801055e:	f000 f809 	bl	8010574 <LidarAdjustPP>
				break;
 8010562:	e000      	b.n	8010566 <LidarAdjust+0x39a>

			case UPPER_RIGHT:
				break;

			default:
				break;
 8010564:	bf00      	nop
		}
	}
}
 8010566:	bf00      	nop
 8010568:	3728      	adds	r7, #40	; 0x28
 801056a:	46bd      	mov	sp, r7
 801056c:	bdb0      	pop	{r4, r5, r7, pc}
 801056e:	bf00      	nop
 8010570:	20007188 	.word	0x20007188

08010574 <LidarAdjustPP>:

void LidarAdjustPP(float adj_x, float adj_y, float z)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b08c      	sub	sp, #48	; 0x30
 8010578:	af00      	add	r7, sp, #0
 801057a:	ed87 0a03 	vstr	s0, [r7, #12]
 801057e:	edc7 0a02 	vstr	s1, [r7, #8]
 8010582:	ed87 1a01 	vstr	s2, [r7, #4]
	ResetCoordinate();
 8010586:	f7fb fa3b 	bl	800ba00 <ResetCoordinate>

	float adj_point[1][7] = {{1.0, adj_x, adj_y, z, 0, 1, 0}};
 801058a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801058e:	617b      	str	r3, [r7, #20]
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	61bb      	str	r3, [r7, #24]
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	61fb      	str	r3, [r7, #28]
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	623b      	str	r3, [r7, #32]
 801059c:	f04f 0300 	mov.w	r3, #0
 80105a0:	627b      	str	r3, [r7, #36]	; 0x24
 80105a2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80105a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80105a8:	f04f 0300 	mov.w	r3, #0
 80105ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	PP_start(adj_point, 1, &pp);
 80105ae:	f107 0314 	add.w	r3, r7, #20
 80105b2:	4a1a      	ldr	r2, [pc, #104]	; (801061c <LidarAdjustPP+0xa8>)
 80105b4:	2101      	movs	r1, #1
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7f5 f981 	bl	80058be <PP_start>

	while(pp.pp_start)
 80105bc:	e020      	b.n	8010600 <LidarAdjustPP+0x8c>
	{
		if(ps4.button == SQUARE)
 80105be:	4b18      	ldr	r3, [pc, #96]	; (8010620 <LidarAdjustPP+0xac>)
 80105c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80105c6:	d108      	bne.n	80105da <LidarAdjustPP+0x66>
		{
			while(ps4.button == SQUARE);
 80105c8:	bf00      	nop
 80105ca:	4b15      	ldr	r3, [pc, #84]	; (8010620 <LidarAdjustPP+0xac>)
 80105cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80105d2:	d0fa      	beq.n	80105ca <LidarAdjustPP+0x56>
			PP_stop(&pp);
 80105d4:	4811      	ldr	r0, [pc, #68]	; (801061c <LidarAdjustPP+0xa8>)
 80105d6:	f7f5 fbac 	bl	8005d32 <PP_stop>
		}

		if(In_LS_Shot_1 && In_LS_Shot_2)
 80105da:	2108      	movs	r1, #8
 80105dc:	4811      	ldr	r0, [pc, #68]	; (8010624 <LidarAdjustPP+0xb0>)
 80105de:	f002 fa21 	bl	8012a24 <HAL_GPIO_ReadPin>
 80105e2:	4603      	mov	r3, r0
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d10b      	bne.n	8010600 <LidarAdjustPP+0x8c>
 80105e8:	2110      	movs	r1, #16
 80105ea:	480e      	ldr	r0, [pc, #56]	; (8010624 <LidarAdjustPP+0xb0>)
 80105ec:	f002 fa1a 	bl	8012a24 <HAL_GPIO_ReadPin>
 80105f0:	4603      	mov	r3, r0
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d104      	bne.n	8010600 <LidarAdjustPP+0x8c>
			pp.error_y = 0;
 80105f6:	4b09      	ldr	r3, [pc, #36]	; (801061c <LidarAdjustPP+0xa8>)
 80105f8:	f04f 0200 	mov.w	r2, #0
 80105fc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
	while(pp.pp_start)
 8010600:	4b06      	ldr	r3, [pc, #24]	; (801061c <LidarAdjustPP+0xa8>)
 8010602:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8010606:	f003 0301 	and.w	r3, r3, #1
 801060a:	b2db      	uxtb	r3, r3
 801060c:	2b00      	cmp	r3, #0
 801060e:	d1d6      	bne.n	80105be <LidarAdjustPP+0x4a>
	}
}
 8010610:	bf00      	nop
 8010612:	bf00      	nop
 8010614:	3730      	adds	r7, #48	; 0x30
 8010616:	46bd      	mov	sp, r7
 8010618:	bd80      	pop	{r7, pc}
 801061a:	bf00      	nop
 801061c:	20007188 	.word	0x20007188
 8010620:	2000a3f0 	.word	0x2000a3f0
 8010624:	40020c00 	.word	0x40020c00

08010628 <LidarControl>:
/* Call this inside a task
 *   <- -> Will be used to change position
 *   UP DOWN will be used to change angle
 */
void LidarControl(Lidar_t* lidar)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b082      	sub	sp, #8
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
	if(ps4.button == LEFT)
 8010630:	4b2c      	ldr	r3, [pc, #176]	; (80106e4 <LidarControl+0xbc>)
 8010632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010634:	2b80      	cmp	r3, #128	; 0x80
 8010636:	d10b      	bne.n	8010650 <LidarControl+0x28>
	{
		while(ps4.button == LEFT);
 8010638:	bf00      	nop
 801063a:	4b2a      	ldr	r3, [pc, #168]	; (80106e4 <LidarControl+0xbc>)
 801063c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801063e:	2b80      	cmp	r3, #128	; 0x80
 8010640:	d0fb      	beq.n	801063a <LidarControl+0x12>
		lidar->pos_counter--;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010648:	1e5a      	subs	r2, r3, #1
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	}

	if(ps4.button == RIGHT)
 8010650:	4b24      	ldr	r3, [pc, #144]	; (80106e4 <LidarControl+0xbc>)
 8010652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010654:	2b20      	cmp	r3, #32
 8010656:	d10b      	bne.n	8010670 <LidarControl+0x48>
	{
		while(ps4.button == RIGHT);
 8010658:	bf00      	nop
 801065a:	4b22      	ldr	r3, [pc, #136]	; (80106e4 <LidarControl+0xbc>)
 801065c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801065e:	2b20      	cmp	r3, #32
 8010660:	d0fb      	beq.n	801065a <LidarControl+0x32>
		lidar->pos_counter++;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010668:	1c5a      	adds	r2, r3, #1
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	}

	if(ps4.button == UP)
 8010670:	4b1c      	ldr	r3, [pc, #112]	; (80106e4 <LidarControl+0xbc>)
 8010672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010674:	2b10      	cmp	r3, #16
 8010676:	d10b      	bne.n	8010690 <LidarControl+0x68>
	{
		while(ps4.button == UP);
 8010678:	bf00      	nop
 801067a:	4b1a      	ldr	r3, [pc, #104]	; (80106e4 <LidarControl+0xbc>)
 801067c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801067e:	2b10      	cmp	r3, #16
 8010680:	d0fb      	beq.n	801067a <LidarControl+0x52>
		lidar->angle_counter++;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010688:	1c5a      	adds	r2, r3, #1
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	}

	if(ps4.button == DOWN)
 8010690:	4b14      	ldr	r3, [pc, #80]	; (80106e4 <LidarControl+0xbc>)
 8010692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010694:	2b40      	cmp	r3, #64	; 0x40
 8010696:	d10b      	bne.n	80106b0 <LidarControl+0x88>
	{
		while(ps4.button == DOWN);
 8010698:	bf00      	nop
 801069a:	4b12      	ldr	r3, [pc, #72]	; (80106e4 <LidarControl+0xbc>)
 801069c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801069e:	2b40      	cmp	r3, #64	; 0x40
 80106a0:	d0fb      	beq.n	801069a <LidarControl+0x72>
		lidar->angle_counter--;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80106a8:	1e5a      	subs	r2, r3, #1
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	}

	if(ps4.button == SQUARE)
 80106b0:	4b0c      	ldr	r3, [pc, #48]	; (80106e4 <LidarControl+0xbc>)
 80106b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80106b8:	d109      	bne.n	80106ce <LidarControl+0xa6>
	{
		while(ps4.button == SQUARE);
 80106ba:	bf00      	nop
 80106bc:	4b09      	ldr	r3, [pc, #36]	; (80106e4 <LidarControl+0xbc>)
 80106be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80106c4:	d0fa      	beq.n	80106bc <LidarControl+0x94>
		lidar->angle_counter = PICK_RIGHT;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	2209      	movs	r2, #9
 80106ca:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	}

	LidarCheckPos(lidar);
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f000 f83a 	bl	8010748 <LidarCheckPos>
	LidarCheckAngle(lidar);
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f000 f807 	bl	80106e8 <LidarCheckAngle>
}
 80106da:	bf00      	nop
 80106dc:	3708      	adds	r7, #8
 80106de:	46bd      	mov	sp, r7
 80106e0:	bd80      	pop	{r7, pc}
 80106e2:	bf00      	nop
 80106e4:	2000a3f0 	.word	0x2000a3f0

080106e8 <LidarCheckAngle>:

void LidarCheckAngle(Lidar_t* lidar)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b082      	sub	sp, #8
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
	switch(lidar->angle_counter)
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80106f6:	3b01      	subs	r3, #1
 80106f8:	2b03      	cmp	r3, #3
 80106fa:	d81f      	bhi.n	801073c <LidarCheckAngle+0x54>
 80106fc:	a201      	add	r2, pc, #4	; (adr r2, 8010704 <LidarCheckAngle+0x1c>)
 80106fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010702:	bf00      	nop
 8010704:	08010715 	.word	0x08010715
 8010708:	0801071f 	.word	0x0801071f
 801070c:	08010729 	.word	0x08010729
 8010710:	08010733 	.word	0x08010733
	{
		case A:
			LidarSetAngle(A, lidar);
 8010714:	6879      	ldr	r1, [r7, #4]
 8010716:	2001      	movs	r0, #1
 8010718:	f7ff fae2 	bl	800fce0 <LidarSetAngle>
			break;
 801071c:	e00f      	b.n	801073e <LidarCheckAngle+0x56>

		case B:
			LidarSetAngle(B, lidar);
 801071e:	6879      	ldr	r1, [r7, #4]
 8010720:	2002      	movs	r0, #2
 8010722:	f7ff fadd 	bl	800fce0 <LidarSetAngle>
			break;
 8010726:	e00a      	b.n	801073e <LidarCheckAngle+0x56>

		case C:
			LidarSetAngle(C, lidar);
 8010728:	6879      	ldr	r1, [r7, #4]
 801072a:	2003      	movs	r0, #3
 801072c:	f7ff fad8 	bl	800fce0 <LidarSetAngle>
			break;
 8010730:	e005      	b.n	801073e <LidarCheckAngle+0x56>

		case D:
			LidarSetAngle(D, lidar);
 8010732:	6879      	ldr	r1, [r7, #4]
 8010734:	2004      	movs	r0, #4
 8010736:	f7ff fad3 	bl	800fce0 <LidarSetAngle>
			break;
 801073a:	e000      	b.n	801073e <LidarCheckAngle+0x56>

		default:
			break;
 801073c:	bf00      	nop
	}
}
 801073e:	bf00      	nop
 8010740:	3708      	adds	r7, #8
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}
 8010746:	bf00      	nop

08010748 <LidarCheckPos>:

void LidarCheckPos(Lidar_t* lidar)
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b082      	sub	sp, #8
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
	switch(lidar->pos_counter)
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010756:	3b02      	subs	r3, #2
 8010758:	2b07      	cmp	r3, #7
 801075a:	d83b      	bhi.n	80107d4 <LidarCheckPos+0x8c>
 801075c:	a201      	add	r2, pc, #4	; (adr r2, 8010764 <LidarCheckPos+0x1c>)
 801075e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010762:	bf00      	nop
 8010764:	0801078f 	.word	0x0801078f
 8010768:	08010799 	.word	0x08010799
 801076c:	080107a3 	.word	0x080107a3
 8010770:	080107ad 	.word	0x080107ad
 8010774:	080107b7 	.word	0x080107b7
 8010778:	080107c1 	.word	0x080107c1
 801077c:	080107cb 	.word	0x080107cb
 8010780:	08010785 	.word	0x08010785
	{
		case PICK_RIGHT:
			LidarSetPos(PICK_RIGHT, lidar);
 8010784:	6879      	ldr	r1, [r7, #4]
 8010786:	2009      	movs	r0, #9
 8010788:	f7fe fa66 	bl	800ec58 <LidarSetPos>
			break;
 801078c:	e023      	b.n	80107d6 <LidarCheckPos+0x8e>

		case UPPER_LEFT:
			LidarSetPos(UPPER_LEFT, lidar);
 801078e:	6879      	ldr	r1, [r7, #4]
 8010790:	2002      	movs	r0, #2
 8010792:	f7fe fa61 	bl	800ec58 <LidarSetPos>
			break;
 8010796:	e01e      	b.n	80107d6 <LidarCheckPos+0x8e>

		case CENTER_1:
			LidarSetPos(CENTER_1, lidar);
 8010798:	6879      	ldr	r1, [r7, #4]
 801079a:	2003      	movs	r0, #3
 801079c:	f7fe fa5c 	bl	800ec58 <LidarSetPos>
			break;
 80107a0:	e019      	b.n	80107d6 <LidarCheckPos+0x8e>

		case CENTER_2:
			LidarSetPos(CENTER_2, lidar);
 80107a2:	6879      	ldr	r1, [r7, #4]
 80107a4:	2004      	movs	r0, #4
 80107a6:	f7fe fa57 	bl	800ec58 <LidarSetPos>
			break;
 80107aa:	e014      	b.n	80107d6 <LidarCheckPos+0x8e>

		case CENTER:
			LidarSetPos(CENTER, lidar);
 80107ac:	6879      	ldr	r1, [r7, #4]
 80107ae:	2005      	movs	r0, #5
 80107b0:	f7fe fa52 	bl	800ec58 <LidarSetPos>
			break;
 80107b4:	e00f      	b.n	80107d6 <LidarCheckPos+0x8e>

		case CENTER_3:
			LidarSetPos(CENTER_3, lidar);
 80107b6:	6879      	ldr	r1, [r7, #4]
 80107b8:	2006      	movs	r0, #6
 80107ba:	f7fe fa4d 	bl	800ec58 <LidarSetPos>
			break;
 80107be:	e00a      	b.n	80107d6 <LidarCheckPos+0x8e>

		case CENTER_4:
			LidarSetPos(CENTER_4, lidar);
 80107c0:	6879      	ldr	r1, [r7, #4]
 80107c2:	2007      	movs	r0, #7
 80107c4:	f7fe fa48 	bl	800ec58 <LidarSetPos>
			break;
 80107c8:	e005      	b.n	80107d6 <LidarCheckPos+0x8e>

		case UPPER_RIGHT:
			LidarSetPos(UPPER_RIGHT, lidar);
 80107ca:	6879      	ldr	r1, [r7, #4]
 80107cc:	2008      	movs	r0, #8
 80107ce:	f7fe fa43 	bl	800ec58 <LidarSetPos>
			break;
 80107d2:	e000      	b.n	80107d6 <LidarCheckPos+0x8e>

		default:
			break;
 80107d4:	bf00      	nop
	}
}
 80107d6:	bf00      	nop
 80107d8:	3708      	adds	r7, #8
 80107da:	46bd      	mov	sp, r7
 80107dc:	bd80      	pop	{r7, pc}
 80107de:	bf00      	nop

080107e0 <LidarSendIns>:

// Send Instruction to pi/pc
void LidarSendIns(Instruction_t ins, Lidar_t* lidar)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b082      	sub	sp, #8
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	4603      	mov	r3, r0
 80107e8:	6039      	str	r1, [r7, #0]
 80107ea:	71fb      	strb	r3, [r7, #7]
	lidar->response = NO; // After user got the data, response will be OK
 80107ec:	683b      	ldr	r3, [r7, #0]
 80107ee:	2201      	movs	r2, #1
 80107f0:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
	lidar->inst = ins;
 80107f4:	683b      	ldr	r3, [r7, #0]
 80107f6:	79fa      	ldrb	r2, [r7, #7]
 80107f8:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	lidar->obstacle_send[0] = 0x01;
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	2201      	movs	r2, #1
 8010800:	705a      	strb	r2, [r3, #1]
	memcpy(&lidar->obstacle_send[1], &lidar->inst, 1);
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	3302      	adds	r3, #2
 8010806:	683a      	ldr	r2, [r7, #0]
 8010808:	f502 72cc 	add.w	r2, r2, #408	; 0x198
 801080c:	7812      	ldrb	r2, [r2, #0]
 801080e:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(lidar->lidar_UART, lidar->obstacle_send, 2, HAL_MAX_DELAY);
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	1c59      	adds	r1, r3, #1
 801081a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801081e:	2202      	movs	r2, #2
 8010820:	f005 ff8f 	bl	8016742 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 25);
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	33c9      	adds	r3, #201	; 0xc9
 801082e:	2219      	movs	r2, #25
 8010830:	4619      	mov	r1, r3
 8010832:	f006 f81f 	bl	8016874 <HAL_UART_Receive_IT>

	while(lidar->response == NO) // Poll the user after got new data
 8010836:	e004      	b.n	8010842 <LidarSendIns+0x62>
	{
		if(ps4.button == SQUARE)
 8010838:	4b07      	ldr	r3, [pc, #28]	; (8010858 <LidarSendIns+0x78>)
 801083a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801083c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010840:	d005      	beq.n	801084e <LidarSendIns+0x6e>
	while(lidar->response == NO) // Poll the user after got new data
 8010842:	683b      	ldr	r3, [r7, #0]
 8010844:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8010848:	2b01      	cmp	r3, #1
 801084a:	d0f5      	beq.n	8010838 <LidarSendIns+0x58>
			break;
	}
}
 801084c:	e000      	b.n	8010850 <LidarSendIns+0x70>
			break;
 801084e:	bf00      	nop
}
 8010850:	bf00      	nop
 8010852:	3708      	adds	r7, #8
 8010854:	46bd      	mov	sp, r7
 8010856:	bd80      	pop	{r7, pc}
 8010858:	2000a3f0 	.word	0x2000a3f0

0801085c <ObstacleHandler>:

// Call this in UART Callback
void ObstacleHandler(Lidar_t* lidar)
{
 801085c:	b5b0      	push	{r4, r5, r7, lr}
 801085e:	b086      	sub	sp, #24
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
	if(lidar->mode == CONTINUOUS)
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 801086a:	2b00      	cmp	r3, #0
 801086c:	f040 8115 	bne.w	8010a9a <ObstacleHandler+0x23e>
	{
		static int mode = 0;
		switch(mode)
 8010870:	4baa      	ldr	r3, [pc, #680]	; (8010b1c <ObstacleHandler+0x2c0>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d002      	beq.n	801087e <ObstacleHandler+0x22>
 8010878:	2b01      	cmp	r3, #1
 801087a:	d061      	beq.n	8010940 <ObstacleHandler+0xe4>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.x, 8, HAL_MAX_DELAY);
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.y, 8, HAL_MAX_DELAY);
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.distance, 8, HAL_MAX_DELAY);
		}
	}
}
 801087c:	e1f1      	b.n	8010c62 <ObstacleHandler+0x406>
				if(lidar->obstacle_receive[0] == 0x01)
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8010884:	2b01      	cmp	r3, #1
 8010886:	f040 81eb 	bne.w	8010c60 <ObstacleHandler+0x404>
					memcpy(&lidar->obstacle_count, &lidar->obstacle_receive[1], 4);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8010890:	687a      	ldr	r2, [r7, #4]
 8010892:	32ca      	adds	r2, #202	; 0xca
 8010894:	6812      	ldr	r2, [r2, #0]
 8010896:	601a      	str	r2, [r3, #0]
					if(lidar->new == 0)
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 801089e:	f003 0301 	and.w	r3, r3, #1
 80108a2:	b2db      	uxtb	r3, r3
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d110      	bne.n	80108ca <ObstacleHandler+0x6e>
							lidar->Polelist = (Pole*)malloc(lidar->obstacle_count * 3 * sizeof(float));
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80108ae:	461a      	mov	r2, r3
 80108b0:	4613      	mov	r3, r2
 80108b2:	005b      	lsls	r3, r3, #1
 80108b4:	4413      	add	r3, r2
 80108b6:	009b      	lsls	r3, r3, #2
 80108b8:	4618      	mov	r0, r3
 80108ba:	f009 fd11 	bl	801a2e0 <malloc>
 80108be:	4603      	mov	r3, r0
 80108c0:	461a      	mov	r2, r3
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
 80108c8:	e012      	b.n	80108f0 <ObstacleHandler+0x94>
							lidar->Polelist = (Pole*)realloc(lidar->Polelist, lidar->obstacle_count * 3 * sizeof(float));
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80108d6:	4619      	mov	r1, r3
 80108d8:	460b      	mov	r3, r1
 80108da:	005b      	lsls	r3, r3, #1
 80108dc:	440b      	add	r3, r1
 80108de:	009b      	lsls	r3, r3, #2
 80108e0:	4619      	mov	r1, r3
 80108e2:	4610      	mov	r0, r2
 80108e4:	f00a fc3e 	bl	801b164 <realloc>
 80108e8:	4602      	mov	r2, r0
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->obstacle_count, 4, HAL_MAX_DELAY);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	f503 71ca 	add.w	r1, r3, #404	; 0x194
 80108fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010900:	2204      	movs	r2, #4
 8010902:	f005 ff1e 	bl	8016742 <HAL_UART_Transmit>
					HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, lidar->obstacle_count * 3 * 4);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	f103 01c9 	add.w	r1, r3, #201	; 0xc9
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8010918:	b29b      	uxth	r3, r3
 801091a:	461a      	mov	r2, r3
 801091c:	0052      	lsls	r2, r2, #1
 801091e:	4413      	add	r3, r2
 8010920:	009b      	lsls	r3, r3, #2
 8010922:	b29b      	uxth	r3, r3
 8010924:	461a      	mov	r2, r3
 8010926:	f005 ffa5 	bl	8016874 <HAL_UART_Receive_IT>
					mode = 1;
 801092a:	4b7c      	ldr	r3, [pc, #496]	; (8010b1c <ObstacleHandler+0x2c0>)
 801092c:	2201      	movs	r2, #1
 801092e:	601a      	str	r2, [r3, #0]
					lidar->new = 1;
 8010930:	687a      	ldr	r2, [r7, #4]
 8010932:	f892 3294 	ldrb.w	r3, [r2, #660]	; 0x294
 8010936:	f043 0301 	orr.w	r3, r3, #1
 801093a:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
				break;
 801093e:	e18f      	b.n	8010c60 <ObstacleHandler+0x404>
				for(int i = 0; i < lidar->obstacle_count; i++)
 8010940:	2300      	movs	r3, #0
 8010942:	617b      	str	r3, [r7, #20]
 8010944:	e05b      	b.n	80109fe <ObstacleHandler+0x1a2>
					memcpy(&lidar->pole.x, &lidar->obstacle_receive[i * 12], 4);
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f503 71d4 	add.w	r1, r3, #424	; 0x1a8
 801094c:	697a      	ldr	r2, [r7, #20]
 801094e:	4613      	mov	r3, r2
 8010950:	005b      	lsls	r3, r3, #1
 8010952:	4413      	add	r3, r2
 8010954:	009b      	lsls	r3, r3, #2
 8010956:	33c8      	adds	r3, #200	; 0xc8
 8010958:	687a      	ldr	r2, [r7, #4]
 801095a:	4413      	add	r3, r2
 801095c:	3301      	adds	r3, #1
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	600b      	str	r3, [r1, #0]
					memcpy(&lidar->pole.y, &lidar->obstacle_receive[i * 12 + 4], 4);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	f503 71d8 	add.w	r1, r3, #432	; 0x1b0
 8010968:	697a      	ldr	r2, [r7, #20]
 801096a:	4613      	mov	r3, r2
 801096c:	005b      	lsls	r3, r3, #1
 801096e:	4413      	add	r3, r2
 8010970:	009b      	lsls	r3, r3, #2
 8010972:	3304      	adds	r3, #4
 8010974:	33c8      	adds	r3, #200	; 0xc8
 8010976:	687a      	ldr	r2, [r7, #4]
 8010978:	4413      	add	r3, r2
 801097a:	3301      	adds	r3, #1
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	600b      	str	r3, [r1, #0]
					memcpy(&lidar->pole.distance, &lidar->obstacle_receive[i * 12 + 8], 4);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 8010986:	697a      	ldr	r2, [r7, #20]
 8010988:	4613      	mov	r3, r2
 801098a:	005b      	lsls	r3, r3, #1
 801098c:	4413      	add	r3, r2
 801098e:	009b      	lsls	r3, r3, #2
 8010990:	3308      	adds	r3, #8
 8010992:	33c8      	adds	r3, #200	; 0xc8
 8010994:	687a      	ldr	r2, [r7, #4]
 8010996:	4413      	add	r3, r2
 8010998:	3301      	adds	r3, #1
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	600b      	str	r3, [r1, #0]
					lidar->pole.angle = atanf(lidar->pole.y / lidar->pole.x);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	e9d3 016c 	ldrd	r0, r1, [r3, #432]	; 0x1b0
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 80109aa:	f7ef ff4f 	bl	800084c <__aeabi_ddiv>
 80109ae:	4602      	mov	r2, r0
 80109b0:	460b      	mov	r3, r1
 80109b2:	4610      	mov	r0, r2
 80109b4:	4619      	mov	r1, r3
 80109b6:	f7f0 f917 	bl	8000be8 <__aeabi_d2f>
 80109ba:	4603      	mov	r3, r0
 80109bc:	ee00 3a10 	vmov	s0, r3
 80109c0:	f00e f976 	bl	801ecb0 <atanf>
 80109c4:	ee10 3a10 	vmov	r3, s0
 80109c8:	4618      	mov	r0, r3
 80109ca:	f7ef fdbd 	bl	8000548 <__aeabi_f2d>
 80109ce:	4602      	mov	r2, r0
 80109d0:	460b      	mov	r3, r1
 80109d2:	6879      	ldr	r1, [r7, #4]
 80109d4:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
					lidar->Polelist[i] = lidar->pole;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 80109de:	697b      	ldr	r3, [r7, #20]
 80109e0:	015b      	lsls	r3, r3, #5
 80109e2:	441a      	add	r2, r3
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	4615      	mov	r5, r2
 80109e8:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 80109ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80109ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80109f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80109f4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
				for(int i = 0; i < lidar->obstacle_count; i++)
 80109f8:	697b      	ldr	r3, [r7, #20]
 80109fa:	3301      	adds	r3, #1
 80109fc:	617b      	str	r3, [r7, #20]
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8010a04:	697a      	ldr	r2, [r7, #20]
 8010a06:	429a      	cmp	r2, r3
 8010a08:	db9d      	blt.n	8010946 <ObstacleHandler+0xea>
				for(int i = 0; i < lidar->obstacle_count; i++)
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	613b      	str	r3, [r7, #16]
 8010a0e:	e031      	b.n	8010a74 <ObstacleHandler+0x218>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].x, 4, HAL_MAX_DELAY);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8010a1c:	693b      	ldr	r3, [r7, #16]
 8010a1e:	015b      	lsls	r3, r3, #5
 8010a20:	4413      	add	r3, r2
 8010a22:	4619      	mov	r1, r3
 8010a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a28:	2204      	movs	r2, #4
 8010a2a:	f005 fe8a 	bl	8016742 <HAL_UART_Transmit>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].y, 4, HAL_MAX_DELAY);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8010a3a:	693b      	ldr	r3, [r7, #16]
 8010a3c:	015b      	lsls	r3, r3, #5
 8010a3e:	4413      	add	r3, r2
 8010a40:	f103 0108 	add.w	r1, r3, #8
 8010a44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a48:	2204      	movs	r2, #4
 8010a4a:	f005 fe7a 	bl	8016742 <HAL_UART_Transmit>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].distance, 4, HAL_MAX_DELAY);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8010a5a:	693b      	ldr	r3, [r7, #16]
 8010a5c:	015b      	lsls	r3, r3, #5
 8010a5e:	4413      	add	r3, r2
 8010a60:	f103 0110 	add.w	r1, r3, #16
 8010a64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a68:	2204      	movs	r2, #4
 8010a6a:	f005 fe6a 	bl	8016742 <HAL_UART_Transmit>
				for(int i = 0; i < lidar->obstacle_count; i++)
 8010a6e:	693b      	ldr	r3, [r7, #16]
 8010a70:	3301      	adds	r3, #1
 8010a72:	613b      	str	r3, [r7, #16]
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8010a7a:	693a      	ldr	r2, [r7, #16]
 8010a7c:	429a      	cmp	r2, r3
 8010a7e:	dbc7      	blt.n	8010a10 <ObstacleHandler+0x1b4>
				mode = 0;
 8010a80:	4b26      	ldr	r3, [pc, #152]	; (8010b1c <ObstacleHandler+0x2c0>)
 8010a82:	2200      	movs	r2, #0
 8010a84:	601a      	str	r2, [r3, #0]
				HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 5);
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	33c9      	adds	r3, #201	; 0xc9
 8010a90:	2205      	movs	r2, #5
 8010a92:	4619      	mov	r1, r3
 8010a94:	f005 feee 	bl	8016874 <HAL_UART_Receive_IT>
				break;
 8010a98:	e0e3      	b.n	8010c62 <ObstacleHandler+0x406>
		if(lidar->start == 0) // Start booting
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 8010aa0:	f003 0304 	and.w	r3, r3, #4
 8010aa4:	b2db      	uxtb	r3, r3
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d13a      	bne.n	8010b20 <ObstacleHandler+0x2c4>
			if(lidar->obstacle_receive[0] == 0x01)
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8010ab0:	2b01      	cmp	r3, #1
 8010ab2:	f040 80d6 	bne.w	8010c62 <ObstacleHandler+0x406>
				memcpy(&lidar->res, &lidar->obstacle_receive[1], 1);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	f203 1399 	addw	r3, r3, #409	; 0x199
 8010abc:	687a      	ldr	r2, [r7, #4]
 8010abe:	32ca      	adds	r2, #202	; 0xca
 8010ac0:	7812      	ldrb	r2, [r2, #0]
 8010ac2:	701a      	strb	r2, [r3, #0]
				lidar->response = lidar->res;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f893 2199 	ldrb.w	r2, [r3, #409]	; 0x199
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
				if(lidar->response == OK)
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	f040 80c3 	bne.w	8010c62 <ObstacleHandler+0x406>
					HAL_UART_Transmit(lidar->lidar_UART, &lidar->res, 1, HAL_MAX_DELAY);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f203 1199 	addw	r1, r3, #409	; 0x199
 8010ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010aec:	2201      	movs	r2, #1
 8010aee:	f005 fe28 	bl	8016742 <HAL_UART_Transmit>
					lidar->start = 1;
 8010af2:	687a      	ldr	r2, [r7, #4]
 8010af4:	f892 3294 	ldrb.w	r3, [r2, #660]	; 0x294
 8010af8:	f043 0304 	orr.w	r3, r3, #4
 8010afc:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
					lidar->response = NO;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2201      	movs	r2, #1
 8010b04:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
					HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 25);
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	33c9      	adds	r3, #201	; 0xc9
 8010b12:	2219      	movs	r2, #25
 8010b14:	4619      	mov	r1, r3
 8010b16:	f005 fead 	bl	8016874 <HAL_UART_Receive_IT>
}
 8010b1a:	e0a2      	b.n	8010c62 <ObstacleHandler+0x406>
 8010b1c:	200015e8 	.word	0x200015e8
			memcpy(&lidar->res, &lidar->obstacle_receive[0], 1);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f203 1399 	addw	r3, r3, #409	; 0x199
 8010b26:	687a      	ldr	r2, [r7, #4]
 8010b28:	32c9      	adds	r2, #201	; 0xc9
 8010b2a:	7812      	ldrb	r2, [r2, #0]
 8010b2c:	701a      	strb	r2, [r3, #0]
			lidar->response = lidar->res;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f893 2199 	ldrb.w	r2, [r3, #409]	; 0x199
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
			if(lidar->response == OK)
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d152      	bne.n	8010bea <ObstacleHandler+0x38e>
				memcpy(&lidar->pole.x, &lidar->obstacle_receive[1], 8);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	33ca      	adds	r3, #202	; 0xca
 8010b4e:	2208      	movs	r2, #8
 8010b50:	4619      	mov	r1, r3
 8010b52:	f009 fbcd 	bl	801a2f0 <memcpy>
				memcpy(&lidar->pole.y, &lidar->obstacle_receive[9], 8);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	33d2      	adds	r3, #210	; 0xd2
 8010b60:	2208      	movs	r2, #8
 8010b62:	4619      	mov	r1, r3
 8010b64:	f009 fbc4 	bl	801a2f0 <memcpy>
				memcpy(&lidar->pole.distance, &lidar->obstacle_receive[17], 8);
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	f503 70dc 	add.w	r0, r3, #440	; 0x1b8
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	33da      	adds	r3, #218	; 0xda
 8010b72:	2208      	movs	r2, #8
 8010b74:	4619      	mov	r1, r3
 8010b76:	f009 fbbb 	bl	801a2f0 <memcpy>
				float temp = lidar->pole.x;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 8010b80:	4610      	mov	r0, r2
 8010b82:	4619      	mov	r1, r3
 8010b84:	f7f0 f830 	bl	8000be8 <__aeabi_d2f>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	60fb      	str	r3, [r7, #12]
				lidar->pole.x = -lidar->pole.y;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	e9d3 236c 	ldrd	r2, r3, [r3, #432]	; 0x1b0
 8010b92:	4614      	mov	r4, r2
 8010b94:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	e9c3 456a 	strd	r4, r5, [r3, #424]	; 0x1a8
				lidar->pole.y = temp;
 8010b9e:	68f8      	ldr	r0, [r7, #12]
 8010ba0:	f7ef fcd2 	bl	8000548 <__aeabi_f2d>
 8010ba4:	4602      	mov	r2, r0
 8010ba6:	460b      	mov	r3, r1
 8010ba8:	6879      	ldr	r1, [r7, #4]
 8010baa:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
				lidar->pole.angle = atanf(lidar->pole.y / lidar->pole.x);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	e9d3 016c 	ldrd	r0, r1, [r3, #432]	; 0x1b0
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 8010bba:	f7ef fe47 	bl	800084c <__aeabi_ddiv>
 8010bbe:	4602      	mov	r2, r0
 8010bc0:	460b      	mov	r3, r1
 8010bc2:	4610      	mov	r0, r2
 8010bc4:	4619      	mov	r1, r3
 8010bc6:	f7f0 f80f 	bl	8000be8 <__aeabi_d2f>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	ee00 3a10 	vmov	s0, r3
 8010bd0:	f00e f86e 	bl	801ecb0 <atanf>
 8010bd4:	ee10 3a10 	vmov	r3, s0
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f7ef fcb5 	bl	8000548 <__aeabi_f2d>
 8010bde:	4602      	mov	r2, r0
 8010be0:	460b      	mov	r3, r1
 8010be2:	6879      	ldr	r1, [r7, #4]
 8010be4:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
 8010be8:	e00d      	b.n	8010c06 <ObstacleHandler+0x3aa>
				lidar->reject = 1;
 8010bea:	687a      	ldr	r2, [r7, #4]
 8010bec:	f892 3294 	ldrb.w	r3, [r2, #660]	; 0x294
 8010bf0:	f043 0302 	orr.w	r3, r3, #2
 8010bf4:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
				LidarSendIns(lidar->inst, lidar);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 8010bfe:	6879      	ldr	r1, [r7, #4]
 8010c00:	4618      	mov	r0, r3
 8010c02:	f7ff fded 	bl	80107e0 <LidarSendIns>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->res, 1, HAL_MAX_DELAY);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f203 1199 	addw	r1, r3, #409	; 0x199
 8010c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c16:	2201      	movs	r2, #1
 8010c18:	f005 fd93 	bl	8016742 <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.x, 8, HAL_MAX_DELAY);
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	f503 71d4 	add.w	r1, r3, #424	; 0x1a8
 8010c28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c2c:	2208      	movs	r2, #8
 8010c2e:	f005 fd88 	bl	8016742 <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.y, 8, HAL_MAX_DELAY);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f503 71d8 	add.w	r1, r3, #432	; 0x1b0
 8010c3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c42:	2208      	movs	r2, #8
 8010c44:	f005 fd7d 	bl	8016742 <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.distance, 8, HAL_MAX_DELAY);
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 8010c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c58:	2208      	movs	r2, #8
 8010c5a:	f005 fd72 	bl	8016742 <HAL_UART_Transmit>
}
 8010c5e:	e000      	b.n	8010c62 <ObstacleHandler+0x406>
				break;
 8010c60:	bf00      	nop
}
 8010c62:	bf00      	nop
 8010c64:	3718      	adds	r7, #24
 8010c66:	46bd      	mov	sp, r7
 8010c68:	bdb0      	pop	{r4, r5, r7, pc}
 8010c6a:	bf00      	nop

08010c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8010c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010ca4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8010c70:	480d      	ldr	r0, [pc, #52]	; (8010ca8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8010c72:	490e      	ldr	r1, [pc, #56]	; (8010cac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8010c74:	4a0e      	ldr	r2, [pc, #56]	; (8010cb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8010c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010c78:	e002      	b.n	8010c80 <LoopCopyDataInit>

08010c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010c7e:	3304      	adds	r3, #4

08010c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010c84:	d3f9      	bcc.n	8010c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010c86:	4a0b      	ldr	r2, [pc, #44]	; (8010cb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8010c88:	4c0b      	ldr	r4, [pc, #44]	; (8010cb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8010c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010c8c:	e001      	b.n	8010c92 <LoopFillZerobss>

08010c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010c90:	3204      	adds	r2, #4

08010c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010c94:	d3fb      	bcc.n	8010c8e <FillZerobss>


/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010c96:	f7fb fc9f 	bl	800c5d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010c9a:	f009 fafd 	bl	801a298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010c9e:	f7f3 f959 	bl	8003f54 <main>
  bx  lr    
 8010ca2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8010ca4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8010ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010cac:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8010cb0:	080210a4 	.word	0x080210a4
  ldr r2, =_sbss
 8010cb4:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 8010cb8:	2000aab4 	.word	0x2000aab4

08010cbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010cbc:	e7fe      	b.n	8010cbc <ADC_IRQHandler>
	...

08010cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010cc4:	4b0e      	ldr	r3, [pc, #56]	; (8010d00 <HAL_Init+0x40>)
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	4a0d      	ldr	r2, [pc, #52]	; (8010d00 <HAL_Init+0x40>)
 8010cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010cce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010cd0:	4b0b      	ldr	r3, [pc, #44]	; (8010d00 <HAL_Init+0x40>)
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	4a0a      	ldr	r2, [pc, #40]	; (8010d00 <HAL_Init+0x40>)
 8010cd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010cda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010cdc:	4b08      	ldr	r3, [pc, #32]	; (8010d00 <HAL_Init+0x40>)
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	4a07      	ldr	r2, [pc, #28]	; (8010d00 <HAL_Init+0x40>)
 8010ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010ce6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010ce8:	2003      	movs	r0, #3
 8010cea:	f000 ffa8 	bl	8011c3e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010cee:	2000      	movs	r0, #0
 8010cf0:	f7fb fb52 	bl	800c398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010cf4:	f7f1 f900 	bl	8001ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010cf8:	2300      	movs	r3, #0
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	bd80      	pop	{r7, pc}
 8010cfe:	bf00      	nop
 8010d00:	40023c00 	.word	0x40023c00

08010d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010d04:	b480      	push	{r7}
 8010d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010d08:	4b06      	ldr	r3, [pc, #24]	; (8010d24 <HAL_IncTick+0x20>)
 8010d0a:	781b      	ldrb	r3, [r3, #0]
 8010d0c:	461a      	mov	r2, r3
 8010d0e:	4b06      	ldr	r3, [pc, #24]	; (8010d28 <HAL_IncTick+0x24>)
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	4413      	add	r3, r2
 8010d14:	4a04      	ldr	r2, [pc, #16]	; (8010d28 <HAL_IncTick+0x24>)
 8010d16:	6013      	str	r3, [r2, #0]
}
 8010d18:	bf00      	nop
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d20:	4770      	bx	lr
 8010d22:	bf00      	nop
 8010d24:	20000084 	.word	0x20000084
 8010d28:	2000aa60 	.word	0x2000aa60

08010d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010d2c:	b480      	push	{r7}
 8010d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8010d30:	4b03      	ldr	r3, [pc, #12]	; (8010d40 <HAL_GetTick+0x14>)
 8010d32:	681b      	ldr	r3, [r3, #0]
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	46bd      	mov	sp, r7
 8010d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3c:	4770      	bx	lr
 8010d3e:	bf00      	nop
 8010d40:	2000aa60 	.word	0x2000aa60

08010d44 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b084      	sub	sp, #16
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d101      	bne.n	8010d56 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8010d52:	2301      	movs	r3, #1
 8010d54:	e0ed      	b.n	8010f32 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010d5c:	b2db      	uxtb	r3, r3
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d102      	bne.n	8010d68 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8010d62:	6878      	ldr	r0, [r7, #4]
 8010d64:	f7f1 f8f4 	bl	8001f50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	681a      	ldr	r2, [r3, #0]
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	f022 0202 	bic.w	r2, r2, #2
 8010d76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010d78:	f7ff ffd8 	bl	8010d2c <HAL_GetTick>
 8010d7c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8010d7e:	e012      	b.n	8010da6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8010d80:	f7ff ffd4 	bl	8010d2c <HAL_GetTick>
 8010d84:	4602      	mov	r2, r0
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	1ad3      	subs	r3, r2, r3
 8010d8a:	2b0a      	cmp	r3, #10
 8010d8c:	d90b      	bls.n	8010da6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	2205      	movs	r2, #5
 8010d9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8010da2:	2301      	movs	r3, #1
 8010da4:	e0c5      	b.n	8010f32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	685b      	ldr	r3, [r3, #4]
 8010dac:	f003 0302 	and.w	r3, r3, #2
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d1e5      	bne.n	8010d80 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	681a      	ldr	r2, [r3, #0]
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	f042 0201 	orr.w	r2, r2, #1
 8010dc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010dc4:	f7ff ffb2 	bl	8010d2c <HAL_GetTick>
 8010dc8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8010dca:	e012      	b.n	8010df2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8010dcc:	f7ff ffae 	bl	8010d2c <HAL_GetTick>
 8010dd0:	4602      	mov	r2, r0
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	1ad3      	subs	r3, r2, r3
 8010dd6:	2b0a      	cmp	r3, #10
 8010dd8:	d90b      	bls.n	8010df2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2205      	movs	r2, #5
 8010dea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8010dee:	2301      	movs	r3, #1
 8010df0:	e09f      	b.n	8010f32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	685b      	ldr	r3, [r3, #4]
 8010df8:	f003 0301 	and.w	r3, r3, #1
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d0e5      	beq.n	8010dcc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	7e1b      	ldrb	r3, [r3, #24]
 8010e04:	2b01      	cmp	r3, #1
 8010e06:	d108      	bne.n	8010e1a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	681a      	ldr	r2, [r3, #0]
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010e16:	601a      	str	r2, [r3, #0]
 8010e18:	e007      	b.n	8010e2a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	681a      	ldr	r2, [r3, #0]
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010e28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	7e5b      	ldrb	r3, [r3, #25]
 8010e2e:	2b01      	cmp	r3, #1
 8010e30:	d108      	bne.n	8010e44 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	681a      	ldr	r2, [r3, #0]
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010e40:	601a      	str	r2, [r3, #0]
 8010e42:	e007      	b.n	8010e54 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	681a      	ldr	r2, [r3, #0]
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010e52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	7e9b      	ldrb	r3, [r3, #26]
 8010e58:	2b01      	cmp	r3, #1
 8010e5a:	d108      	bne.n	8010e6e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	681a      	ldr	r2, [r3, #0]
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	f042 0220 	orr.w	r2, r2, #32
 8010e6a:	601a      	str	r2, [r3, #0]
 8010e6c:	e007      	b.n	8010e7e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	681a      	ldr	r2, [r3, #0]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	f022 0220 	bic.w	r2, r2, #32
 8010e7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	7edb      	ldrb	r3, [r3, #27]
 8010e82:	2b01      	cmp	r3, #1
 8010e84:	d108      	bne.n	8010e98 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	681a      	ldr	r2, [r3, #0]
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	f022 0210 	bic.w	r2, r2, #16
 8010e94:	601a      	str	r2, [r3, #0]
 8010e96:	e007      	b.n	8010ea8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	681a      	ldr	r2, [r3, #0]
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	f042 0210 	orr.w	r2, r2, #16
 8010ea6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	7f1b      	ldrb	r3, [r3, #28]
 8010eac:	2b01      	cmp	r3, #1
 8010eae:	d108      	bne.n	8010ec2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	681a      	ldr	r2, [r3, #0]
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	f042 0208 	orr.w	r2, r2, #8
 8010ebe:	601a      	str	r2, [r3, #0]
 8010ec0:	e007      	b.n	8010ed2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	681a      	ldr	r2, [r3, #0]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	f022 0208 	bic.w	r2, r2, #8
 8010ed0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	7f5b      	ldrb	r3, [r3, #29]
 8010ed6:	2b01      	cmp	r3, #1
 8010ed8:	d108      	bne.n	8010eec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	681a      	ldr	r2, [r3, #0]
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	f042 0204 	orr.w	r2, r2, #4
 8010ee8:	601a      	str	r2, [r3, #0]
 8010eea:	e007      	b.n	8010efc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	681a      	ldr	r2, [r3, #0]
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	f022 0204 	bic.w	r2, r2, #4
 8010efa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	689a      	ldr	r2, [r3, #8]
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	68db      	ldr	r3, [r3, #12]
 8010f04:	431a      	orrs	r2, r3
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	691b      	ldr	r3, [r3, #16]
 8010f0a:	431a      	orrs	r2, r3
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	695b      	ldr	r3, [r3, #20]
 8010f10:	ea42 0103 	orr.w	r1, r2, r3
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	685b      	ldr	r3, [r3, #4]
 8010f18:	1e5a      	subs	r2, r3, #1
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	430a      	orrs	r2, r1
 8010f20:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	2200      	movs	r2, #0
 8010f26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2201      	movs	r2, #1
 8010f2c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8010f30:	2300      	movs	r3, #0
}
 8010f32:	4618      	mov	r0, r3
 8010f34:	3710      	adds	r7, #16
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}
	...

08010f3c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8010f3c:	b480      	push	{r7}
 8010f3e:	b087      	sub	sp, #28
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
 8010f44:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010f52:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8010f54:	7cfb      	ldrb	r3, [r7, #19]
 8010f56:	2b01      	cmp	r3, #1
 8010f58:	d003      	beq.n	8010f62 <HAL_CAN_ConfigFilter+0x26>
 8010f5a:	7cfb      	ldrb	r3, [r7, #19]
 8010f5c:	2b02      	cmp	r3, #2
 8010f5e:	f040 80be 	bne.w	80110de <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8010f62:	4b65      	ldr	r3, [pc, #404]	; (80110f8 <HAL_CAN_ConfigFilter+0x1bc>)
 8010f64:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8010f66:	697b      	ldr	r3, [r7, #20]
 8010f68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010f6c:	f043 0201 	orr.w	r2, r3, #1
 8010f70:	697b      	ldr	r3, [r7, #20]
 8010f72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8010f76:	697b      	ldr	r3, [r7, #20]
 8010f78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010f7c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8010f80:	697b      	ldr	r3, [r7, #20]
 8010f82:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8010f86:	697b      	ldr	r3, [r7, #20]
 8010f88:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010f8c:	683b      	ldr	r3, [r7, #0]
 8010f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f90:	021b      	lsls	r3, r3, #8
 8010f92:	431a      	orrs	r2, r3
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	695b      	ldr	r3, [r3, #20]
 8010f9e:	f003 031f 	and.w	r3, r3, #31
 8010fa2:	2201      	movs	r2, #1
 8010fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8010fa8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8010faa:	697b      	ldr	r3, [r7, #20]
 8010fac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	43db      	mvns	r3, r3
 8010fb4:	401a      	ands	r2, r3
 8010fb6:	697b      	ldr	r3, [r7, #20]
 8010fb8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	69db      	ldr	r3, [r3, #28]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d123      	bne.n	801100c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8010fc4:	697b      	ldr	r3, [r7, #20]
 8010fc6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	43db      	mvns	r3, r3
 8010fce:	401a      	ands	r2, r3
 8010fd0:	697b      	ldr	r3, [r7, #20]
 8010fd2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8010fd6:	683b      	ldr	r3, [r7, #0]
 8010fd8:	68db      	ldr	r3, [r3, #12]
 8010fda:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	685b      	ldr	r3, [r3, #4]
 8010fe0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8010fe2:	683a      	ldr	r2, [r7, #0]
 8010fe4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8010fe6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8010fe8:	697b      	ldr	r3, [r7, #20]
 8010fea:	3248      	adds	r2, #72	; 0x48
 8010fec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8010ff0:	683b      	ldr	r3, [r7, #0]
 8010ff2:	689b      	ldr	r3, [r3, #8]
 8010ff4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8010ff6:	683b      	ldr	r3, [r7, #0]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8011000:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8011002:	6979      	ldr	r1, [r7, #20]
 8011004:	3348      	adds	r3, #72	; 0x48
 8011006:	00db      	lsls	r3, r3, #3
 8011008:	440b      	add	r3, r1
 801100a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 801100c:	683b      	ldr	r3, [r7, #0]
 801100e:	69db      	ldr	r3, [r3, #28]
 8011010:	2b01      	cmp	r3, #1
 8011012:	d122      	bne.n	801105a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8011014:	697b      	ldr	r3, [r7, #20]
 8011016:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	431a      	orrs	r2, r3
 801101e:	697b      	ldr	r3, [r7, #20]
 8011020:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8011024:	683b      	ldr	r3, [r7, #0]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	685b      	ldr	r3, [r3, #4]
 801102e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8011030:	683a      	ldr	r2, [r7, #0]
 8011032:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8011034:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8011036:	697b      	ldr	r3, [r7, #20]
 8011038:	3248      	adds	r2, #72	; 0x48
 801103a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	689b      	ldr	r3, [r3, #8]
 8011042:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8011044:	683b      	ldr	r3, [r7, #0]
 8011046:	68db      	ldr	r3, [r3, #12]
 8011048:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 801104e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8011050:	6979      	ldr	r1, [r7, #20]
 8011052:	3348      	adds	r3, #72	; 0x48
 8011054:	00db      	lsls	r3, r3, #3
 8011056:	440b      	add	r3, r1
 8011058:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 801105a:	683b      	ldr	r3, [r7, #0]
 801105c:	699b      	ldr	r3, [r3, #24]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d109      	bne.n	8011076 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8011062:	697b      	ldr	r3, [r7, #20]
 8011064:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	43db      	mvns	r3, r3
 801106c:	401a      	ands	r2, r3
 801106e:	697b      	ldr	r3, [r7, #20]
 8011070:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8011074:	e007      	b.n	8011086 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8011076:	697b      	ldr	r3, [r7, #20]
 8011078:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	431a      	orrs	r2, r3
 8011080:	697b      	ldr	r3, [r7, #20]
 8011082:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	691b      	ldr	r3, [r3, #16]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d109      	bne.n	80110a2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 801108e:	697b      	ldr	r3, [r7, #20]
 8011090:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	43db      	mvns	r3, r3
 8011098:	401a      	ands	r2, r3
 801109a:	697b      	ldr	r3, [r7, #20]
 801109c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80110a0:	e007      	b.n	80110b2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80110a2:	697b      	ldr	r3, [r7, #20]
 80110a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	431a      	orrs	r2, r3
 80110ac:	697b      	ldr	r3, [r7, #20]
 80110ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	6a1b      	ldr	r3, [r3, #32]
 80110b6:	2b01      	cmp	r3, #1
 80110b8:	d107      	bne.n	80110ca <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	431a      	orrs	r2, r3
 80110c4:	697b      	ldr	r3, [r7, #20]
 80110c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80110ca:	697b      	ldr	r3, [r7, #20]
 80110cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80110d0:	f023 0201 	bic.w	r2, r3, #1
 80110d4:	697b      	ldr	r3, [r7, #20]
 80110d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80110da:	2300      	movs	r3, #0
 80110dc:	e006      	b.n	80110ec <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80110ea:	2301      	movs	r3, #1
  }
}
 80110ec:	4618      	mov	r0, r3
 80110ee:	371c      	adds	r7, #28
 80110f0:	46bd      	mov	sp, r7
 80110f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f6:	4770      	bx	lr
 80110f8:	40006400 	.word	0x40006400

080110fc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b084      	sub	sp, #16
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	f893 3020 	ldrb.w	r3, [r3, #32]
 801110a:	b2db      	uxtb	r3, r3
 801110c:	2b01      	cmp	r3, #1
 801110e:	d12e      	bne.n	801116e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2202      	movs	r2, #2
 8011114:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	681a      	ldr	r2, [r3, #0]
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	f022 0201 	bic.w	r2, r2, #1
 8011126:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8011128:	f7ff fe00 	bl	8010d2c <HAL_GetTick>
 801112c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 801112e:	e012      	b.n	8011156 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8011130:	f7ff fdfc 	bl	8010d2c <HAL_GetTick>
 8011134:	4602      	mov	r2, r0
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	1ad3      	subs	r3, r2, r3
 801113a:	2b0a      	cmp	r3, #10
 801113c:	d90b      	bls.n	8011156 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011142:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	2205      	movs	r2, #5
 801114e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8011152:	2301      	movs	r3, #1
 8011154:	e012      	b.n	801117c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	685b      	ldr	r3, [r3, #4]
 801115c:	f003 0301 	and.w	r3, r3, #1
 8011160:	2b00      	cmp	r3, #0
 8011162:	d1e5      	bne.n	8011130 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	2200      	movs	r2, #0
 8011168:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 801116a:	2300      	movs	r3, #0
 801116c:	e006      	b.n	801117c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011172:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801117a:	2301      	movs	r3, #1
  }
}
 801117c:	4618      	mov	r0, r3
 801117e:	3710      	adds	r7, #16
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}

08011184 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8011184:	b480      	push	{r7}
 8011186:	b089      	sub	sp, #36	; 0x24
 8011188:	af00      	add	r7, sp, #0
 801118a:	60f8      	str	r0, [r7, #12]
 801118c:	60b9      	str	r1, [r7, #8]
 801118e:	607a      	str	r2, [r7, #4]
 8011190:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011198:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	689b      	ldr	r3, [r3, #8]
 80111a0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80111a2:	7ffb      	ldrb	r3, [r7, #31]
 80111a4:	2b01      	cmp	r3, #1
 80111a6:	d003      	beq.n	80111b0 <HAL_CAN_AddTxMessage+0x2c>
 80111a8:	7ffb      	ldrb	r3, [r7, #31]
 80111aa:	2b02      	cmp	r3, #2
 80111ac:	f040 80b8 	bne.w	8011320 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80111b0:	69bb      	ldr	r3, [r7, #24]
 80111b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d10a      	bne.n	80111d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80111ba:	69bb      	ldr	r3, [r7, #24]
 80111bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d105      	bne.n	80111d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80111c4:	69bb      	ldr	r3, [r7, #24]
 80111c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	f000 80a0 	beq.w	8011310 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80111d0:	69bb      	ldr	r3, [r7, #24]
 80111d2:	0e1b      	lsrs	r3, r3, #24
 80111d4:	f003 0303 	and.w	r3, r3, #3
 80111d8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	2b02      	cmp	r3, #2
 80111de:	d907      	bls.n	80111f0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80111ec:	2301      	movs	r3, #1
 80111ee:	e09e      	b.n	801132e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80111f0:	2201      	movs	r2, #1
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	409a      	lsls	r2, r3
 80111f6:	683b      	ldr	r3, [r7, #0]
 80111f8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80111fa:	68bb      	ldr	r3, [r7, #8]
 80111fc:	689b      	ldr	r3, [r3, #8]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d10d      	bne.n	801121e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8011208:	68bb      	ldr	r3, [r7, #8]
 801120a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 801120c:	68f9      	ldr	r1, [r7, #12]
 801120e:	6809      	ldr	r1, [r1, #0]
 8011210:	431a      	orrs	r2, r3
 8011212:	697b      	ldr	r3, [r7, #20]
 8011214:	3318      	adds	r3, #24
 8011216:	011b      	lsls	r3, r3, #4
 8011218:	440b      	add	r3, r1
 801121a:	601a      	str	r2, [r3, #0]
 801121c:	e00f      	b.n	801123e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	685b      	ldr	r3, [r3, #4]
 8011222:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8011224:	68bb      	ldr	r3, [r7, #8]
 8011226:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8011228:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 801122e:	68f9      	ldr	r1, [r7, #12]
 8011230:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8011232:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8011234:	697b      	ldr	r3, [r7, #20]
 8011236:	3318      	adds	r3, #24
 8011238:	011b      	lsls	r3, r3, #4
 801123a:	440b      	add	r3, r1
 801123c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	6819      	ldr	r1, [r3, #0]
 8011242:	68bb      	ldr	r3, [r7, #8]
 8011244:	691a      	ldr	r2, [r3, #16]
 8011246:	697b      	ldr	r3, [r7, #20]
 8011248:	3318      	adds	r3, #24
 801124a:	011b      	lsls	r3, r3, #4
 801124c:	440b      	add	r3, r1
 801124e:	3304      	adds	r3, #4
 8011250:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8011252:	68bb      	ldr	r3, [r7, #8]
 8011254:	7d1b      	ldrb	r3, [r3, #20]
 8011256:	2b01      	cmp	r3, #1
 8011258:	d111      	bne.n	801127e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	681a      	ldr	r2, [r3, #0]
 801125e:	697b      	ldr	r3, [r7, #20]
 8011260:	3318      	adds	r3, #24
 8011262:	011b      	lsls	r3, r3, #4
 8011264:	4413      	add	r3, r2
 8011266:	3304      	adds	r3, #4
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	68fa      	ldr	r2, [r7, #12]
 801126c:	6811      	ldr	r1, [r2, #0]
 801126e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011272:	697b      	ldr	r3, [r7, #20]
 8011274:	3318      	adds	r3, #24
 8011276:	011b      	lsls	r3, r3, #4
 8011278:	440b      	add	r3, r1
 801127a:	3304      	adds	r3, #4
 801127c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	3307      	adds	r3, #7
 8011282:	781b      	ldrb	r3, [r3, #0]
 8011284:	061a      	lsls	r2, r3, #24
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	3306      	adds	r3, #6
 801128a:	781b      	ldrb	r3, [r3, #0]
 801128c:	041b      	lsls	r3, r3, #16
 801128e:	431a      	orrs	r2, r3
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	3305      	adds	r3, #5
 8011294:	781b      	ldrb	r3, [r3, #0]
 8011296:	021b      	lsls	r3, r3, #8
 8011298:	4313      	orrs	r3, r2
 801129a:	687a      	ldr	r2, [r7, #4]
 801129c:	3204      	adds	r2, #4
 801129e:	7812      	ldrb	r2, [r2, #0]
 80112a0:	4610      	mov	r0, r2
 80112a2:	68fa      	ldr	r2, [r7, #12]
 80112a4:	6811      	ldr	r1, [r2, #0]
 80112a6:	ea43 0200 	orr.w	r2, r3, r0
 80112aa:	697b      	ldr	r3, [r7, #20]
 80112ac:	011b      	lsls	r3, r3, #4
 80112ae:	440b      	add	r3, r1
 80112b0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80112b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	3303      	adds	r3, #3
 80112ba:	781b      	ldrb	r3, [r3, #0]
 80112bc:	061a      	lsls	r2, r3, #24
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	3302      	adds	r3, #2
 80112c2:	781b      	ldrb	r3, [r3, #0]
 80112c4:	041b      	lsls	r3, r3, #16
 80112c6:	431a      	orrs	r2, r3
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	3301      	adds	r3, #1
 80112cc:	781b      	ldrb	r3, [r3, #0]
 80112ce:	021b      	lsls	r3, r3, #8
 80112d0:	4313      	orrs	r3, r2
 80112d2:	687a      	ldr	r2, [r7, #4]
 80112d4:	7812      	ldrb	r2, [r2, #0]
 80112d6:	4610      	mov	r0, r2
 80112d8:	68fa      	ldr	r2, [r7, #12]
 80112da:	6811      	ldr	r1, [r2, #0]
 80112dc:	ea43 0200 	orr.w	r2, r3, r0
 80112e0:	697b      	ldr	r3, [r7, #20]
 80112e2:	011b      	lsls	r3, r3, #4
 80112e4:	440b      	add	r3, r1
 80112e6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80112ea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	681a      	ldr	r2, [r3, #0]
 80112f0:	697b      	ldr	r3, [r7, #20]
 80112f2:	3318      	adds	r3, #24
 80112f4:	011b      	lsls	r3, r3, #4
 80112f6:	4413      	add	r3, r2
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	68fa      	ldr	r2, [r7, #12]
 80112fc:	6811      	ldr	r1, [r2, #0]
 80112fe:	f043 0201 	orr.w	r2, r3, #1
 8011302:	697b      	ldr	r3, [r7, #20]
 8011304:	3318      	adds	r3, #24
 8011306:	011b      	lsls	r3, r3, #4
 8011308:	440b      	add	r3, r1
 801130a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 801130c:	2300      	movs	r3, #0
 801130e:	e00e      	b.n	801132e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011314:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 801131c:	2301      	movs	r3, #1
 801131e:	e006      	b.n	801132e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011324:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801132c:	2301      	movs	r3, #1
  }
}
 801132e:	4618      	mov	r0, r3
 8011330:	3724      	adds	r7, #36	; 0x24
 8011332:	46bd      	mov	sp, r7
 8011334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011338:	4770      	bx	lr

0801133a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 801133a:	b480      	push	{r7}
 801133c:	b085      	sub	sp, #20
 801133e:	af00      	add	r7, sp, #0
 8011340:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8011342:	2300      	movs	r3, #0
 8011344:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f893 3020 	ldrb.w	r3, [r3, #32]
 801134c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 801134e:	7afb      	ldrb	r3, [r7, #11]
 8011350:	2b01      	cmp	r3, #1
 8011352:	d002      	beq.n	801135a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8011354:	7afb      	ldrb	r3, [r7, #11]
 8011356:	2b02      	cmp	r3, #2
 8011358:	d11d      	bne.n	8011396 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	689b      	ldr	r3, [r3, #8]
 8011360:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011364:	2b00      	cmp	r3, #0
 8011366:	d002      	beq.n	801136e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	3301      	adds	r3, #1
 801136c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	689b      	ldr	r3, [r3, #8]
 8011374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011378:	2b00      	cmp	r3, #0
 801137a:	d002      	beq.n	8011382 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	3301      	adds	r3, #1
 8011380:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	689b      	ldr	r3, [r3, #8]
 8011388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801138c:	2b00      	cmp	r3, #0
 801138e:	d002      	beq.n	8011396 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	3301      	adds	r3, #1
 8011394:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8011396:	68fb      	ldr	r3, [r7, #12]
}
 8011398:	4618      	mov	r0, r3
 801139a:	3714      	adds	r7, #20
 801139c:	46bd      	mov	sp, r7
 801139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a2:	4770      	bx	lr

080113a4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80113a4:	b480      	push	{r7}
 80113a6:	b087      	sub	sp, #28
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	60f8      	str	r0, [r7, #12]
 80113ac:	60b9      	str	r1, [r7, #8]
 80113ae:	607a      	str	r2, [r7, #4]
 80113b0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80113b8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80113ba:	7dfb      	ldrb	r3, [r7, #23]
 80113bc:	2b01      	cmp	r3, #1
 80113be:	d003      	beq.n	80113c8 <HAL_CAN_GetRxMessage+0x24>
 80113c0:	7dfb      	ldrb	r3, [r7, #23]
 80113c2:	2b02      	cmp	r3, #2
 80113c4:	f040 80f3 	bne.w	80115ae <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d10e      	bne.n	80113ec <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	68db      	ldr	r3, [r3, #12]
 80113d4:	f003 0303 	and.w	r3, r3, #3
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d116      	bne.n	801140a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80113e8:	2301      	movs	r3, #1
 80113ea:	e0e7      	b.n	80115bc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	691b      	ldr	r3, [r3, #16]
 80113f2:	f003 0303 	and.w	r3, r3, #3
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d107      	bne.n	801140a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8011406:	2301      	movs	r3, #1
 8011408:	e0d8      	b.n	80115bc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	681a      	ldr	r2, [r3, #0]
 801140e:	68bb      	ldr	r3, [r7, #8]
 8011410:	331b      	adds	r3, #27
 8011412:	011b      	lsls	r3, r3, #4
 8011414:	4413      	add	r3, r2
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	f003 0204 	and.w	r2, r3, #4
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	689b      	ldr	r3, [r3, #8]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d10c      	bne.n	8011442 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	681a      	ldr	r2, [r3, #0]
 801142c:	68bb      	ldr	r3, [r7, #8]
 801142e:	331b      	adds	r3, #27
 8011430:	011b      	lsls	r3, r3, #4
 8011432:	4413      	add	r3, r2
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	0d5b      	lsrs	r3, r3, #21
 8011438:	f3c3 020a 	ubfx	r2, r3, #0, #11
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	601a      	str	r2, [r3, #0]
 8011440:	e00b      	b.n	801145a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	681a      	ldr	r2, [r3, #0]
 8011446:	68bb      	ldr	r3, [r7, #8]
 8011448:	331b      	adds	r3, #27
 801144a:	011b      	lsls	r3, r3, #4
 801144c:	4413      	add	r3, r2
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	08db      	lsrs	r3, r3, #3
 8011452:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	681a      	ldr	r2, [r3, #0]
 801145e:	68bb      	ldr	r3, [r7, #8]
 8011460:	331b      	adds	r3, #27
 8011462:	011b      	lsls	r3, r3, #4
 8011464:	4413      	add	r3, r2
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	f003 0202 	and.w	r2, r3, #2
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	681a      	ldr	r2, [r3, #0]
 8011474:	68bb      	ldr	r3, [r7, #8]
 8011476:	331b      	adds	r3, #27
 8011478:	011b      	lsls	r3, r3, #4
 801147a:	4413      	add	r3, r2
 801147c:	3304      	adds	r3, #4
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	f003 020f 	and.w	r2, r3, #15
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	681a      	ldr	r2, [r3, #0]
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	331b      	adds	r3, #27
 8011490:	011b      	lsls	r3, r3, #4
 8011492:	4413      	add	r3, r2
 8011494:	3304      	adds	r3, #4
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	0a1b      	lsrs	r3, r3, #8
 801149a:	b2da      	uxtb	r2, r3
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	681a      	ldr	r2, [r3, #0]
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	331b      	adds	r3, #27
 80114a8:	011b      	lsls	r3, r3, #4
 80114aa:	4413      	add	r3, r2
 80114ac:	3304      	adds	r3, #4
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	0c1b      	lsrs	r3, r3, #16
 80114b2:	b29a      	uxth	r2, r3
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	681a      	ldr	r2, [r3, #0]
 80114bc:	68bb      	ldr	r3, [r7, #8]
 80114be:	011b      	lsls	r3, r3, #4
 80114c0:	4413      	add	r3, r2
 80114c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	b2da      	uxtb	r2, r3
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	681a      	ldr	r2, [r3, #0]
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	011b      	lsls	r3, r3, #4
 80114d6:	4413      	add	r3, r2
 80114d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	0a1a      	lsrs	r2, r3, #8
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	3301      	adds	r3, #1
 80114e4:	b2d2      	uxtb	r2, r2
 80114e6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	681a      	ldr	r2, [r3, #0]
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	011b      	lsls	r3, r3, #4
 80114f0:	4413      	add	r3, r2
 80114f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	0c1a      	lsrs	r2, r3, #16
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	3302      	adds	r3, #2
 80114fe:	b2d2      	uxtb	r2, r2
 8011500:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	681a      	ldr	r2, [r3, #0]
 8011506:	68bb      	ldr	r3, [r7, #8]
 8011508:	011b      	lsls	r3, r3, #4
 801150a:	4413      	add	r3, r2
 801150c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	0e1a      	lsrs	r2, r3, #24
 8011514:	683b      	ldr	r3, [r7, #0]
 8011516:	3303      	adds	r3, #3
 8011518:	b2d2      	uxtb	r2, r2
 801151a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	681a      	ldr	r2, [r3, #0]
 8011520:	68bb      	ldr	r3, [r7, #8]
 8011522:	011b      	lsls	r3, r3, #4
 8011524:	4413      	add	r3, r2
 8011526:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801152a:	681a      	ldr	r2, [r3, #0]
 801152c:	683b      	ldr	r3, [r7, #0]
 801152e:	3304      	adds	r3, #4
 8011530:	b2d2      	uxtb	r2, r2
 8011532:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	681a      	ldr	r2, [r3, #0]
 8011538:	68bb      	ldr	r3, [r7, #8]
 801153a:	011b      	lsls	r3, r3, #4
 801153c:	4413      	add	r3, r2
 801153e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	0a1a      	lsrs	r2, r3, #8
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	3305      	adds	r3, #5
 801154a:	b2d2      	uxtb	r2, r2
 801154c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	681a      	ldr	r2, [r3, #0]
 8011552:	68bb      	ldr	r3, [r7, #8]
 8011554:	011b      	lsls	r3, r3, #4
 8011556:	4413      	add	r3, r2
 8011558:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	0c1a      	lsrs	r2, r3, #16
 8011560:	683b      	ldr	r3, [r7, #0]
 8011562:	3306      	adds	r3, #6
 8011564:	b2d2      	uxtb	r2, r2
 8011566:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	681a      	ldr	r2, [r3, #0]
 801156c:	68bb      	ldr	r3, [r7, #8]
 801156e:	011b      	lsls	r3, r3, #4
 8011570:	4413      	add	r3, r2
 8011572:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	0e1a      	lsrs	r2, r3, #24
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	3307      	adds	r3, #7
 801157e:	b2d2      	uxtb	r2, r2
 8011580:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d108      	bne.n	801159a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	68da      	ldr	r2, [r3, #12]
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	f042 0220 	orr.w	r2, r2, #32
 8011596:	60da      	str	r2, [r3, #12]
 8011598:	e007      	b.n	80115aa <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	691a      	ldr	r2, [r3, #16]
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	f042 0220 	orr.w	r2, r2, #32
 80115a8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80115aa:	2300      	movs	r3, #0
 80115ac:	e006      	b.n	80115bc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80115ba:	2301      	movs	r3, #1
  }
}
 80115bc:	4618      	mov	r0, r3
 80115be:	371c      	adds	r7, #28
 80115c0:	46bd      	mov	sp, r7
 80115c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c6:	4770      	bx	lr

080115c8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80115c8:	b480      	push	{r7}
 80115ca:	b085      	sub	sp, #20
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
 80115d0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80115d8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80115da:	7bfb      	ldrb	r3, [r7, #15]
 80115dc:	2b01      	cmp	r3, #1
 80115de:	d002      	beq.n	80115e6 <HAL_CAN_ActivateNotification+0x1e>
 80115e0:	7bfb      	ldrb	r3, [r7, #15]
 80115e2:	2b02      	cmp	r3, #2
 80115e4:	d109      	bne.n	80115fa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	6959      	ldr	r1, [r3, #20]
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	683a      	ldr	r2, [r7, #0]
 80115f2:	430a      	orrs	r2, r1
 80115f4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80115f6:	2300      	movs	r3, #0
 80115f8:	e006      	b.n	8011608 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8011606:	2301      	movs	r3, #1
  }
}
 8011608:	4618      	mov	r0, r3
 801160a:	3714      	adds	r7, #20
 801160c:	46bd      	mov	sp, r7
 801160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011612:	4770      	bx	lr

08011614 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b08a      	sub	sp, #40	; 0x28
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 801161c:	2300      	movs	r3, #0
 801161e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	695b      	ldr	r3, [r3, #20]
 8011626:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	685b      	ldr	r3, [r3, #4]
 801162e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	689b      	ldr	r3, [r3, #8]
 8011636:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	68db      	ldr	r3, [r3, #12]
 801163e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	691b      	ldr	r3, [r3, #16]
 8011646:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	699b      	ldr	r3, [r3, #24]
 801164e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8011650:	6a3b      	ldr	r3, [r7, #32]
 8011652:	f003 0301 	and.w	r3, r3, #1
 8011656:	2b00      	cmp	r3, #0
 8011658:	d07c      	beq.n	8011754 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 801165a:	69bb      	ldr	r3, [r7, #24]
 801165c:	f003 0301 	and.w	r3, r3, #1
 8011660:	2b00      	cmp	r3, #0
 8011662:	d023      	beq.n	80116ac <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	2201      	movs	r2, #1
 801166a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 801166c:	69bb      	ldr	r3, [r7, #24]
 801166e:	f003 0302 	and.w	r3, r3, #2
 8011672:	2b00      	cmp	r3, #0
 8011674:	d003      	beq.n	801167e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8011676:	6878      	ldr	r0, [r7, #4]
 8011678:	f000 f983 	bl	8011982 <HAL_CAN_TxMailbox0CompleteCallback>
 801167c:	e016      	b.n	80116ac <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 801167e:	69bb      	ldr	r3, [r7, #24]
 8011680:	f003 0304 	and.w	r3, r3, #4
 8011684:	2b00      	cmp	r3, #0
 8011686:	d004      	beq.n	8011692 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8011688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801168a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801168e:	627b      	str	r3, [r7, #36]	; 0x24
 8011690:	e00c      	b.n	80116ac <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8011692:	69bb      	ldr	r3, [r7, #24]
 8011694:	f003 0308 	and.w	r3, r3, #8
 8011698:	2b00      	cmp	r3, #0
 801169a:	d004      	beq.n	80116a6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 801169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801169e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80116a2:	627b      	str	r3, [r7, #36]	; 0x24
 80116a4:	e002      	b.n	80116ac <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80116a6:	6878      	ldr	r0, [r7, #4]
 80116a8:	f000 f989 	bl	80119be <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80116ac:	69bb      	ldr	r3, [r7, #24]
 80116ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d024      	beq.n	8011700 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80116be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80116c0:	69bb      	ldr	r3, [r7, #24]
 80116c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d003      	beq.n	80116d2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80116ca:	6878      	ldr	r0, [r7, #4]
 80116cc:	f000 f963 	bl	8011996 <HAL_CAN_TxMailbox1CompleteCallback>
 80116d0:	e016      	b.n	8011700 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80116d2:	69bb      	ldr	r3, [r7, #24]
 80116d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d004      	beq.n	80116e6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80116dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80116e2:	627b      	str	r3, [r7, #36]	; 0x24
 80116e4:	e00c      	b.n	8011700 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80116e6:	69bb      	ldr	r3, [r7, #24]
 80116e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d004      	beq.n	80116fa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80116f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80116f6:	627b      	str	r3, [r7, #36]	; 0x24
 80116f8:	e002      	b.n	8011700 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80116fa:	6878      	ldr	r0, [r7, #4]
 80116fc:	f000 f969 	bl	80119d2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8011700:	69bb      	ldr	r3, [r7, #24]
 8011702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011706:	2b00      	cmp	r3, #0
 8011708:	d024      	beq.n	8011754 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011712:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8011714:	69bb      	ldr	r3, [r7, #24]
 8011716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801171a:	2b00      	cmp	r3, #0
 801171c:	d003      	beq.n	8011726 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 801171e:	6878      	ldr	r0, [r7, #4]
 8011720:	f000 f943 	bl	80119aa <HAL_CAN_TxMailbox2CompleteCallback>
 8011724:	e016      	b.n	8011754 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8011726:	69bb      	ldr	r3, [r7, #24]
 8011728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801172c:	2b00      	cmp	r3, #0
 801172e:	d004      	beq.n	801173a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8011730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011736:	627b      	str	r3, [r7, #36]	; 0x24
 8011738:	e00c      	b.n	8011754 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 801173a:	69bb      	ldr	r3, [r7, #24]
 801173c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011740:	2b00      	cmp	r3, #0
 8011742:	d004      	beq.n	801174e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8011744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801174a:	627b      	str	r3, [r7, #36]	; 0x24
 801174c:	e002      	b.n	8011754 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 801174e:	6878      	ldr	r0, [r7, #4]
 8011750:	f000 f949 	bl	80119e6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8011754:	6a3b      	ldr	r3, [r7, #32]
 8011756:	f003 0308 	and.w	r3, r3, #8
 801175a:	2b00      	cmp	r3, #0
 801175c:	d00c      	beq.n	8011778 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	f003 0310 	and.w	r3, r3, #16
 8011764:	2b00      	cmp	r3, #0
 8011766:	d007      	beq.n	8011778 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8011768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801176a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801176e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	2210      	movs	r2, #16
 8011776:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8011778:	6a3b      	ldr	r3, [r7, #32]
 801177a:	f003 0304 	and.w	r3, r3, #4
 801177e:	2b00      	cmp	r3, #0
 8011780:	d00b      	beq.n	801179a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8011782:	697b      	ldr	r3, [r7, #20]
 8011784:	f003 0308 	and.w	r3, r3, #8
 8011788:	2b00      	cmp	r3, #0
 801178a:	d006      	beq.n	801179a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	2208      	movs	r2, #8
 8011792:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8011794:	6878      	ldr	r0, [r7, #4]
 8011796:	f000 f930 	bl	80119fa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 801179a:	6a3b      	ldr	r3, [r7, #32]
 801179c:	f003 0302 	and.w	r3, r3, #2
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d009      	beq.n	80117b8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	68db      	ldr	r3, [r3, #12]
 80117aa:	f003 0303 	and.w	r3, r3, #3
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d002      	beq.n	80117b8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80117b2:	6878      	ldr	r0, [r7, #4]
 80117b4:	f7f8 fdba 	bl	800a32c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80117b8:	6a3b      	ldr	r3, [r7, #32]
 80117ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d00c      	beq.n	80117dc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80117c2:	693b      	ldr	r3, [r7, #16]
 80117c4:	f003 0310 	and.w	r3, r3, #16
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d007      	beq.n	80117dc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80117cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80117d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	2210      	movs	r2, #16
 80117da:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80117dc:	6a3b      	ldr	r3, [r7, #32]
 80117de:	f003 0320 	and.w	r3, r3, #32
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d00b      	beq.n	80117fe <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	f003 0308 	and.w	r3, r3, #8
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d006      	beq.n	80117fe <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	2208      	movs	r2, #8
 80117f6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80117f8:	6878      	ldr	r0, [r7, #4]
 80117fa:	f000 f908 	bl	8011a0e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80117fe:	6a3b      	ldr	r3, [r7, #32]
 8011800:	f003 0310 	and.w	r3, r3, #16
 8011804:	2b00      	cmp	r3, #0
 8011806:	d009      	beq.n	801181c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	691b      	ldr	r3, [r3, #16]
 801180e:	f003 0303 	and.w	r3, r3, #3
 8011812:	2b00      	cmp	r3, #0
 8011814:	d002      	beq.n	801181c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	f7f8 ff18 	bl	800a64c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 801181c:	6a3b      	ldr	r3, [r7, #32]
 801181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011822:	2b00      	cmp	r3, #0
 8011824:	d00b      	beq.n	801183e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8011826:	69fb      	ldr	r3, [r7, #28]
 8011828:	f003 0310 	and.w	r3, r3, #16
 801182c:	2b00      	cmp	r3, #0
 801182e:	d006      	beq.n	801183e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	2210      	movs	r2, #16
 8011836:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8011838:	6878      	ldr	r0, [r7, #4]
 801183a:	f000 f8f2 	bl	8011a22 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 801183e:	6a3b      	ldr	r3, [r7, #32]
 8011840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011844:	2b00      	cmp	r3, #0
 8011846:	d00b      	beq.n	8011860 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8011848:	69fb      	ldr	r3, [r7, #28]
 801184a:	f003 0308 	and.w	r3, r3, #8
 801184e:	2b00      	cmp	r3, #0
 8011850:	d006      	beq.n	8011860 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	2208      	movs	r2, #8
 8011858:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 801185a:	6878      	ldr	r0, [r7, #4]
 801185c:	f000 f8eb 	bl	8011a36 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8011860:	6a3b      	ldr	r3, [r7, #32]
 8011862:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011866:	2b00      	cmp	r3, #0
 8011868:	d07b      	beq.n	8011962 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 801186a:	69fb      	ldr	r3, [r7, #28]
 801186c:	f003 0304 	and.w	r3, r3, #4
 8011870:	2b00      	cmp	r3, #0
 8011872:	d072      	beq.n	801195a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8011874:	6a3b      	ldr	r3, [r7, #32]
 8011876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801187a:	2b00      	cmp	r3, #0
 801187c:	d008      	beq.n	8011890 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8011884:	2b00      	cmp	r3, #0
 8011886:	d003      	beq.n	8011890 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8011888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801188a:	f043 0301 	orr.w	r3, r3, #1
 801188e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8011890:	6a3b      	ldr	r3, [r7, #32]
 8011892:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011896:	2b00      	cmp	r3, #0
 8011898:	d008      	beq.n	80118ac <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d003      	beq.n	80118ac <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80118a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118a6:	f043 0302 	orr.w	r3, r3, #2
 80118aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80118ac:	6a3b      	ldr	r3, [r7, #32]
 80118ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d008      	beq.n	80118c8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d003      	beq.n	80118c8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80118c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118c2:	f043 0304 	orr.w	r3, r3, #4
 80118c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80118c8:	6a3b      	ldr	r3, [r7, #32]
 80118ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d043      	beq.n	801195a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d03e      	beq.n	801195a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80118e2:	2b60      	cmp	r3, #96	; 0x60
 80118e4:	d02b      	beq.n	801193e <HAL_CAN_IRQHandler+0x32a>
 80118e6:	2b60      	cmp	r3, #96	; 0x60
 80118e8:	d82e      	bhi.n	8011948 <HAL_CAN_IRQHandler+0x334>
 80118ea:	2b50      	cmp	r3, #80	; 0x50
 80118ec:	d022      	beq.n	8011934 <HAL_CAN_IRQHandler+0x320>
 80118ee:	2b50      	cmp	r3, #80	; 0x50
 80118f0:	d82a      	bhi.n	8011948 <HAL_CAN_IRQHandler+0x334>
 80118f2:	2b40      	cmp	r3, #64	; 0x40
 80118f4:	d019      	beq.n	801192a <HAL_CAN_IRQHandler+0x316>
 80118f6:	2b40      	cmp	r3, #64	; 0x40
 80118f8:	d826      	bhi.n	8011948 <HAL_CAN_IRQHandler+0x334>
 80118fa:	2b30      	cmp	r3, #48	; 0x30
 80118fc:	d010      	beq.n	8011920 <HAL_CAN_IRQHandler+0x30c>
 80118fe:	2b30      	cmp	r3, #48	; 0x30
 8011900:	d822      	bhi.n	8011948 <HAL_CAN_IRQHandler+0x334>
 8011902:	2b10      	cmp	r3, #16
 8011904:	d002      	beq.n	801190c <HAL_CAN_IRQHandler+0x2f8>
 8011906:	2b20      	cmp	r3, #32
 8011908:	d005      	beq.n	8011916 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 801190a:	e01d      	b.n	8011948 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 801190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801190e:	f043 0308 	orr.w	r3, r3, #8
 8011912:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011914:	e019      	b.n	801194a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8011916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011918:	f043 0310 	orr.w	r3, r3, #16
 801191c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801191e:	e014      	b.n	801194a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8011920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011922:	f043 0320 	orr.w	r3, r3, #32
 8011926:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011928:	e00f      	b.n	801194a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 801192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801192c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011930:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011932:	e00a      	b.n	801194a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8011934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801193a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801193c:	e005      	b.n	801194a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 801193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011944:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011946:	e000      	b.n	801194a <HAL_CAN_IRQHandler+0x336>
            break;
 8011948:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	699a      	ldr	r2, [r3, #24]
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8011958:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	2204      	movs	r2, #4
 8011960:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8011962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011964:	2b00      	cmp	r3, #0
 8011966:	d008      	beq.n	801197a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801196e:	431a      	orrs	r2, r3
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f000 f868 	bl	8011a4a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 801197a:	bf00      	nop
 801197c:	3728      	adds	r7, #40	; 0x28
 801197e:	46bd      	mov	sp, r7
 8011980:	bd80      	pop	{r7, pc}

08011982 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8011982:	b480      	push	{r7}
 8011984:	b083      	sub	sp, #12
 8011986:	af00      	add	r7, sp, #0
 8011988:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 801198a:	bf00      	nop
 801198c:	370c      	adds	r7, #12
 801198e:	46bd      	mov	sp, r7
 8011990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011994:	4770      	bx	lr

08011996 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8011996:	b480      	push	{r7}
 8011998:	b083      	sub	sp, #12
 801199a:	af00      	add	r7, sp, #0
 801199c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 801199e:	bf00      	nop
 80119a0:	370c      	adds	r7, #12
 80119a2:	46bd      	mov	sp, r7
 80119a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a8:	4770      	bx	lr

080119aa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80119aa:	b480      	push	{r7}
 80119ac:	b083      	sub	sp, #12
 80119ae:	af00      	add	r7, sp, #0
 80119b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80119b2:	bf00      	nop
 80119b4:	370c      	adds	r7, #12
 80119b6:	46bd      	mov	sp, r7
 80119b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119bc:	4770      	bx	lr

080119be <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80119be:	b480      	push	{r7}
 80119c0:	b083      	sub	sp, #12
 80119c2:	af00      	add	r7, sp, #0
 80119c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80119c6:	bf00      	nop
 80119c8:	370c      	adds	r7, #12
 80119ca:	46bd      	mov	sp, r7
 80119cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d0:	4770      	bx	lr

080119d2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80119d2:	b480      	push	{r7}
 80119d4:	b083      	sub	sp, #12
 80119d6:	af00      	add	r7, sp, #0
 80119d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80119da:	bf00      	nop
 80119dc:	370c      	adds	r7, #12
 80119de:	46bd      	mov	sp, r7
 80119e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e4:	4770      	bx	lr

080119e6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80119e6:	b480      	push	{r7}
 80119e8:	b083      	sub	sp, #12
 80119ea:	af00      	add	r7, sp, #0
 80119ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80119ee:	bf00      	nop
 80119f0:	370c      	adds	r7, #12
 80119f2:	46bd      	mov	sp, r7
 80119f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f8:	4770      	bx	lr

080119fa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80119fa:	b480      	push	{r7}
 80119fc:	b083      	sub	sp, #12
 80119fe:	af00      	add	r7, sp, #0
 8011a00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8011a02:	bf00      	nop
 8011a04:	370c      	adds	r7, #12
 8011a06:	46bd      	mov	sp, r7
 8011a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0c:	4770      	bx	lr

08011a0e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8011a0e:	b480      	push	{r7}
 8011a10:	b083      	sub	sp, #12
 8011a12:	af00      	add	r7, sp, #0
 8011a14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8011a16:	bf00      	nop
 8011a18:	370c      	adds	r7, #12
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a20:	4770      	bx	lr

08011a22 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8011a22:	b480      	push	{r7}
 8011a24:	b083      	sub	sp, #12
 8011a26:	af00      	add	r7, sp, #0
 8011a28:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8011a2a:	bf00      	nop
 8011a2c:	370c      	adds	r7, #12
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a34:	4770      	bx	lr

08011a36 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8011a36:	b480      	push	{r7}
 8011a38:	b083      	sub	sp, #12
 8011a3a:	af00      	add	r7, sp, #0
 8011a3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8011a3e:	bf00      	nop
 8011a40:	370c      	adds	r7, #12
 8011a42:	46bd      	mov	sp, r7
 8011a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a48:	4770      	bx	lr

08011a4a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8011a4a:	b480      	push	{r7}
 8011a4c:	b083      	sub	sp, #12
 8011a4e:	af00      	add	r7, sp, #0
 8011a50:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8011a52:	bf00      	nop
 8011a54:	370c      	adds	r7, #12
 8011a56:	46bd      	mov	sp, r7
 8011a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5c:	4770      	bx	lr
	...

08011a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011a60:	b480      	push	{r7}
 8011a62:	b085      	sub	sp, #20
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	f003 0307 	and.w	r3, r3, #7
 8011a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011a70:	4b0c      	ldr	r3, [pc, #48]	; (8011aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8011a72:	68db      	ldr	r3, [r3, #12]
 8011a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011a76:	68ba      	ldr	r2, [r7, #8]
 8011a78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8011a7c:	4013      	ands	r3, r2
 8011a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8011a88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8011a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011a92:	4a04      	ldr	r2, [pc, #16]	; (8011aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8011a94:	68bb      	ldr	r3, [r7, #8]
 8011a96:	60d3      	str	r3, [r2, #12]
}
 8011a98:	bf00      	nop
 8011a9a:	3714      	adds	r7, #20
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa2:	4770      	bx	lr
 8011aa4:	e000ed00 	.word	0xe000ed00

08011aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011aac:	4b04      	ldr	r3, [pc, #16]	; (8011ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8011aae:	68db      	ldr	r3, [r3, #12]
 8011ab0:	0a1b      	lsrs	r3, r3, #8
 8011ab2:	f003 0307 	and.w	r3, r3, #7
}
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abe:	4770      	bx	lr
 8011ac0:	e000ed00 	.word	0xe000ed00

08011ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011ac4:	b480      	push	{r7}
 8011ac6:	b083      	sub	sp, #12
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	4603      	mov	r3, r0
 8011acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	db0b      	blt.n	8011aee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011ad6:	79fb      	ldrb	r3, [r7, #7]
 8011ad8:	f003 021f 	and.w	r2, r3, #31
 8011adc:	4907      	ldr	r1, [pc, #28]	; (8011afc <__NVIC_EnableIRQ+0x38>)
 8011ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011ae2:	095b      	lsrs	r3, r3, #5
 8011ae4:	2001      	movs	r0, #1
 8011ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8011aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8011aee:	bf00      	nop
 8011af0:	370c      	adds	r7, #12
 8011af2:	46bd      	mov	sp, r7
 8011af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af8:	4770      	bx	lr
 8011afa:	bf00      	nop
 8011afc:	e000e100 	.word	0xe000e100

08011b00 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8011b00:	b480      	push	{r7}
 8011b02:	b083      	sub	sp, #12
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	4603      	mov	r3, r0
 8011b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	db12      	blt.n	8011b38 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011b12:	79fb      	ldrb	r3, [r7, #7]
 8011b14:	f003 021f 	and.w	r2, r3, #31
 8011b18:	490a      	ldr	r1, [pc, #40]	; (8011b44 <__NVIC_DisableIRQ+0x44>)
 8011b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b1e:	095b      	lsrs	r3, r3, #5
 8011b20:	2001      	movs	r0, #1
 8011b22:	fa00 f202 	lsl.w	r2, r0, r2
 8011b26:	3320      	adds	r3, #32
 8011b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8011b2c:	f3bf 8f4f 	dsb	sy
}
 8011b30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011b32:	f3bf 8f6f 	isb	sy
}
 8011b36:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8011b38:	bf00      	nop
 8011b3a:	370c      	adds	r7, #12
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b42:	4770      	bx	lr
 8011b44:	e000e100 	.word	0xe000e100

08011b48 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8011b48:	b480      	push	{r7}
 8011b4a:	b083      	sub	sp, #12
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	4603      	mov	r3, r0
 8011b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	db0c      	blt.n	8011b74 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011b5a:	79fb      	ldrb	r3, [r7, #7]
 8011b5c:	f003 021f 	and.w	r2, r3, #31
 8011b60:	4907      	ldr	r1, [pc, #28]	; (8011b80 <__NVIC_ClearPendingIRQ+0x38>)
 8011b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b66:	095b      	lsrs	r3, r3, #5
 8011b68:	2001      	movs	r0, #1
 8011b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8011b6e:	3360      	adds	r3, #96	; 0x60
 8011b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8011b74:	bf00      	nop
 8011b76:	370c      	adds	r7, #12
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7e:	4770      	bx	lr
 8011b80:	e000e100 	.word	0xe000e100

08011b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011b84:	b480      	push	{r7}
 8011b86:	b083      	sub	sp, #12
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	6039      	str	r1, [r7, #0]
 8011b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	db0a      	blt.n	8011bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011b98:	683b      	ldr	r3, [r7, #0]
 8011b9a:	b2da      	uxtb	r2, r3
 8011b9c:	490c      	ldr	r1, [pc, #48]	; (8011bd0 <__NVIC_SetPriority+0x4c>)
 8011b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011ba2:	0112      	lsls	r2, r2, #4
 8011ba4:	b2d2      	uxtb	r2, r2
 8011ba6:	440b      	add	r3, r1
 8011ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011bac:	e00a      	b.n	8011bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	b2da      	uxtb	r2, r3
 8011bb2:	4908      	ldr	r1, [pc, #32]	; (8011bd4 <__NVIC_SetPriority+0x50>)
 8011bb4:	79fb      	ldrb	r3, [r7, #7]
 8011bb6:	f003 030f 	and.w	r3, r3, #15
 8011bba:	3b04      	subs	r3, #4
 8011bbc:	0112      	lsls	r2, r2, #4
 8011bbe:	b2d2      	uxtb	r2, r2
 8011bc0:	440b      	add	r3, r1
 8011bc2:	761a      	strb	r2, [r3, #24]
}
 8011bc4:	bf00      	nop
 8011bc6:	370c      	adds	r7, #12
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bce:	4770      	bx	lr
 8011bd0:	e000e100 	.word	0xe000e100
 8011bd4:	e000ed00 	.word	0xe000ed00

08011bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011bd8:	b480      	push	{r7}
 8011bda:	b089      	sub	sp, #36	; 0x24
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	60f8      	str	r0, [r7, #12]
 8011be0:	60b9      	str	r1, [r7, #8]
 8011be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	f003 0307 	and.w	r3, r3, #7
 8011bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011bec:	69fb      	ldr	r3, [r7, #28]
 8011bee:	f1c3 0307 	rsb	r3, r3, #7
 8011bf2:	2b04      	cmp	r3, #4
 8011bf4:	bf28      	it	cs
 8011bf6:	2304      	movcs	r3, #4
 8011bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011bfa:	69fb      	ldr	r3, [r7, #28]
 8011bfc:	3304      	adds	r3, #4
 8011bfe:	2b06      	cmp	r3, #6
 8011c00:	d902      	bls.n	8011c08 <NVIC_EncodePriority+0x30>
 8011c02:	69fb      	ldr	r3, [r7, #28]
 8011c04:	3b03      	subs	r3, #3
 8011c06:	e000      	b.n	8011c0a <NVIC_EncodePriority+0x32>
 8011c08:	2300      	movs	r3, #0
 8011c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011c0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c10:	69bb      	ldr	r3, [r7, #24]
 8011c12:	fa02 f303 	lsl.w	r3, r2, r3
 8011c16:	43da      	mvns	r2, r3
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	401a      	ands	r2, r3
 8011c1c:	697b      	ldr	r3, [r7, #20]
 8011c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011c20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011c24:	697b      	ldr	r3, [r7, #20]
 8011c26:	fa01 f303 	lsl.w	r3, r1, r3
 8011c2a:	43d9      	mvns	r1, r3
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011c30:	4313      	orrs	r3, r2
         );
}
 8011c32:	4618      	mov	r0, r3
 8011c34:	3724      	adds	r7, #36	; 0x24
 8011c36:	46bd      	mov	sp, r7
 8011c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3c:	4770      	bx	lr

08011c3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011c3e:	b580      	push	{r7, lr}
 8011c40:	b082      	sub	sp, #8
 8011c42:	af00      	add	r7, sp, #0
 8011c44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011c46:	6878      	ldr	r0, [r7, #4]
 8011c48:	f7ff ff0a 	bl	8011a60 <__NVIC_SetPriorityGrouping>
}
 8011c4c:	bf00      	nop
 8011c4e:	3708      	adds	r7, #8
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}

08011c54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b086      	sub	sp, #24
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	60b9      	str	r1, [r7, #8]
 8011c5e:	607a      	str	r2, [r7, #4]
 8011c60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8011c62:	2300      	movs	r3, #0
 8011c64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8011c66:	f7ff ff1f 	bl	8011aa8 <__NVIC_GetPriorityGrouping>
 8011c6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011c6c:	687a      	ldr	r2, [r7, #4]
 8011c6e:	68b9      	ldr	r1, [r7, #8]
 8011c70:	6978      	ldr	r0, [r7, #20]
 8011c72:	f7ff ffb1 	bl	8011bd8 <NVIC_EncodePriority>
 8011c76:	4602      	mov	r2, r0
 8011c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c7c:	4611      	mov	r1, r2
 8011c7e:	4618      	mov	r0, r3
 8011c80:	f7ff ff80 	bl	8011b84 <__NVIC_SetPriority>
}
 8011c84:	bf00      	nop
 8011c86:	3718      	adds	r7, #24
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bd80      	pop	{r7, pc}

08011c8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b082      	sub	sp, #8
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	4603      	mov	r3, r0
 8011c94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f7ff ff12 	bl	8011ac4 <__NVIC_EnableIRQ>
}
 8011ca0:	bf00      	nop
 8011ca2:	3708      	adds	r7, #8
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}

08011ca8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b082      	sub	sp, #8
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	4603      	mov	r3, r0
 8011cb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8011cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f7ff ff22 	bl	8011b00 <__NVIC_DisableIRQ>
}
 8011cbc:	bf00      	nop
 8011cbe:	3708      	adds	r7, #8
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bd80      	pop	{r7, pc}

08011cc4 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b082      	sub	sp, #8
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	4603      	mov	r3, r0
 8011ccc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8011cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f7ff ff38 	bl	8011b48 <__NVIC_ClearPendingIRQ>
}
 8011cd8:	bf00      	nop
 8011cda:	3708      	adds	r7, #8
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	bd80      	pop	{r7, pc}

08011ce0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b086      	sub	sp, #24
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8011ce8:	2300      	movs	r3, #0
 8011cea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8011cec:	f7ff f81e 	bl	8010d2c <HAL_GetTick>
 8011cf0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d101      	bne.n	8011cfc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8011cf8:	2301      	movs	r3, #1
 8011cfa:	e099      	b.n	8011e30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	2200      	movs	r2, #0
 8011d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	2202      	movs	r2, #2
 8011d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	681a      	ldr	r2, [r3, #0]
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	f022 0201 	bic.w	r2, r2, #1
 8011d1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011d1c:	e00f      	b.n	8011d3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8011d1e:	f7ff f805 	bl	8010d2c <HAL_GetTick>
 8011d22:	4602      	mov	r2, r0
 8011d24:	693b      	ldr	r3, [r7, #16]
 8011d26:	1ad3      	subs	r3, r2, r3
 8011d28:	2b05      	cmp	r3, #5
 8011d2a:	d908      	bls.n	8011d3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	2220      	movs	r2, #32
 8011d30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	2203      	movs	r2, #3
 8011d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8011d3a:	2303      	movs	r3, #3
 8011d3c:	e078      	b.n	8011e30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	f003 0301 	and.w	r3, r3, #1
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d1e8      	bne.n	8011d1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8011d54:	697a      	ldr	r2, [r7, #20]
 8011d56:	4b38      	ldr	r3, [pc, #224]	; (8011e38 <HAL_DMA_Init+0x158>)
 8011d58:	4013      	ands	r3, r2
 8011d5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	685a      	ldr	r2, [r3, #4]
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	689b      	ldr	r3, [r3, #8]
 8011d64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011d6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	691b      	ldr	r3, [r3, #16]
 8011d70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011d76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	699b      	ldr	r3, [r3, #24]
 8011d7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011d82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	6a1b      	ldr	r3, [r3, #32]
 8011d88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011d8a:	697a      	ldr	r2, [r7, #20]
 8011d8c:	4313      	orrs	r3, r2
 8011d8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d94:	2b04      	cmp	r3, #4
 8011d96:	d107      	bne.n	8011da8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011da0:	4313      	orrs	r3, r2
 8011da2:	697a      	ldr	r2, [r7, #20]
 8011da4:	4313      	orrs	r3, r2
 8011da6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	697a      	ldr	r2, [r7, #20]
 8011dae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	695b      	ldr	r3, [r3, #20]
 8011db6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8011db8:	697b      	ldr	r3, [r7, #20]
 8011dba:	f023 0307 	bic.w	r3, r3, #7
 8011dbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dc4:	697a      	ldr	r2, [r7, #20]
 8011dc6:	4313      	orrs	r3, r2
 8011dc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dce:	2b04      	cmp	r3, #4
 8011dd0:	d117      	bne.n	8011e02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011dd6:	697a      	ldr	r2, [r7, #20]
 8011dd8:	4313      	orrs	r3, r2
 8011dda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d00e      	beq.n	8011e02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f000 fb09 	bl	80123fc <DMA_CheckFifoParam>
 8011dea:	4603      	mov	r3, r0
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d008      	beq.n	8011e02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	2240      	movs	r2, #64	; 0x40
 8011df4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2201      	movs	r2, #1
 8011dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8011dfe:	2301      	movs	r3, #1
 8011e00:	e016      	b.n	8011e30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	697a      	ldr	r2, [r7, #20]
 8011e08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8011e0a:	6878      	ldr	r0, [r7, #4]
 8011e0c:	f000 fac0 	bl	8012390 <DMA_CalcBaseAndBitshift>
 8011e10:	4603      	mov	r3, r0
 8011e12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e18:	223f      	movs	r2, #63	; 0x3f
 8011e1a:	409a      	lsls	r2, r3
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2200      	movs	r2, #0
 8011e24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	2201      	movs	r2, #1
 8011e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8011e2e:	2300      	movs	r3, #0
}
 8011e30:	4618      	mov	r0, r3
 8011e32:	3718      	adds	r7, #24
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}
 8011e38:	f010803f 	.word	0xf010803f

08011e3c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b084      	sub	sp, #16
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d101      	bne.n	8011e4e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8011e4a:	2301      	movs	r3, #1
 8011e4c:	e050      	b.n	8011ef0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011e54:	b2db      	uxtb	r3, r3
 8011e56:	2b02      	cmp	r3, #2
 8011e58:	d101      	bne.n	8011e5e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8011e5a:	2302      	movs	r3, #2
 8011e5c:	e048      	b.n	8011ef0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	681a      	ldr	r2, [r3, #0]
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	f022 0201 	bic.w	r2, r2, #1
 8011e6c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	2200      	movs	r2, #0
 8011e74:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	2200      	movs	r2, #0
 8011e84:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	2200      	movs	r2, #0
 8011e94:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	2221      	movs	r2, #33	; 0x21
 8011e9c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8011e9e:	6878      	ldr	r0, [r7, #4]
 8011ea0:	f000 fa76 	bl	8012390 <DMA_CalcBaseAndBitshift>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2200      	movs	r2, #0
 8011eac:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	2200      	movs	r2, #0
 8011eca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011ed0:	223f      	movs	r2, #63	; 0x3f
 8011ed2:	409a      	lsls	r2, r3
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	2200      	movs	r2, #0
 8011edc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	2200      	movs	r2, #0
 8011eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8011eee:	2300      	movs	r3, #0
}
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	3710      	adds	r7, #16
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd80      	pop	{r7, pc}

08011ef8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b086      	sub	sp, #24
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	60f8      	str	r0, [r7, #12]
 8011f00:	60b9      	str	r1, [r7, #8]
 8011f02:	607a      	str	r2, [r7, #4]
 8011f04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011f06:	2300      	movs	r3, #0
 8011f08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011f16:	2b01      	cmp	r3, #1
 8011f18:	d101      	bne.n	8011f1e <HAL_DMA_Start_IT+0x26>
 8011f1a:	2302      	movs	r3, #2
 8011f1c:	e040      	b.n	8011fa0 <HAL_DMA_Start_IT+0xa8>
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	2201      	movs	r2, #1
 8011f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  

  if(HAL_DMA_STATE_READY == hdma->State)
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011f2c:	b2db      	uxtb	r3, r3
 8011f2e:	2b01      	cmp	r3, #1
 8011f30:	d12f      	bne.n	8011f92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	2202      	movs	r2, #2
 8011f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	687a      	ldr	r2, [r7, #4]
 8011f44:	68b9      	ldr	r1, [r7, #8]
 8011f46:	68f8      	ldr	r0, [r7, #12]
 8011f48:	f000 f9f4 	bl	8012334 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011f50:	223f      	movs	r2, #63	; 0x3f
 8011f52:	409a      	lsls	r2, r3
 8011f54:	693b      	ldr	r3, [r7, #16]
 8011f56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	681a      	ldr	r2, [r3, #0]
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	f042 0216 	orr.w	r2, r2, #22
 8011f66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d007      	beq.n	8011f80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	681a      	ldr	r2, [r3, #0]
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	f042 0208 	orr.w	r2, r2, #8
 8011f7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	681a      	ldr	r2, [r3, #0]
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	f042 0201 	orr.w	r2, r2, #1
 8011f8e:	601a      	str	r2, [r3, #0]
 8011f90:	e005      	b.n	8011f9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	2200      	movs	r2, #0
 8011f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 8011f9a:	2302      	movs	r3, #2
 8011f9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8011f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	3718      	adds	r7, #24
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bd80      	pop	{r7, pc}

08011fa8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8011fa8:	b480      	push	{r7}
 8011faa:	b083      	sub	sp, #12
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011fb6:	b2db      	uxtb	r3, r3
 8011fb8:	2b02      	cmp	r3, #2
 8011fba:	d004      	beq.n	8011fc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	2280      	movs	r2, #128	; 0x80
 8011fc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8011fc2:	2301      	movs	r3, #1
 8011fc4:	e00c      	b.n	8011fe0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	2205      	movs	r2, #5
 8011fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	681a      	ldr	r2, [r3, #0]
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	f022 0201 	bic.w	r2, r2, #1
 8011fdc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8011fde:	2300      	movs	r3, #0
}
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	370c      	adds	r7, #12
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fea:	4770      	bx	lr

08011fec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b086      	sub	sp, #24
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8011ff8:	4b92      	ldr	r3, [pc, #584]	; (8012244 <HAL_DMA_IRQHandler+0x258>)
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	4a92      	ldr	r2, [pc, #584]	; (8012248 <HAL_DMA_IRQHandler+0x25c>)
 8011ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8012002:	0a9b      	lsrs	r3, r3, #10
 8012004:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801200a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801200c:	693b      	ldr	r3, [r7, #16]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012016:	2208      	movs	r2, #8
 8012018:	409a      	lsls	r2, r3
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	4013      	ands	r3, r2
 801201e:	2b00      	cmp	r3, #0
 8012020:	d01a      	beq.n	8012058 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	f003 0304 	and.w	r3, r3, #4
 801202c:	2b00      	cmp	r3, #0
 801202e:	d013      	beq.n	8012058 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	681a      	ldr	r2, [r3, #0]
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	f022 0204 	bic.w	r2, r2, #4
 801203e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012044:	2208      	movs	r2, #8
 8012046:	409a      	lsls	r2, r3
 8012048:	693b      	ldr	r3, [r7, #16]
 801204a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012050:	f043 0201 	orr.w	r2, r3, #1
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801205c:	2201      	movs	r2, #1
 801205e:	409a      	lsls	r2, r3
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	4013      	ands	r3, r2
 8012064:	2b00      	cmp	r3, #0
 8012066:	d012      	beq.n	801208e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	695b      	ldr	r3, [r3, #20]
 801206e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012072:	2b00      	cmp	r3, #0
 8012074:	d00b      	beq.n	801208e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801207a:	2201      	movs	r2, #1
 801207c:	409a      	lsls	r2, r3
 801207e:	693b      	ldr	r3, [r7, #16]
 8012080:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012086:	f043 0202 	orr.w	r2, r3, #2
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012092:	2204      	movs	r2, #4
 8012094:	409a      	lsls	r2, r3
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	4013      	ands	r3, r2
 801209a:	2b00      	cmp	r3, #0
 801209c:	d012      	beq.n	80120c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	f003 0302 	and.w	r3, r3, #2
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d00b      	beq.n	80120c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80120b0:	2204      	movs	r2, #4
 80120b2:	409a      	lsls	r2, r3
 80120b4:	693b      	ldr	r3, [r7, #16]
 80120b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80120bc:	f043 0204 	orr.w	r2, r3, #4
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80120c8:	2210      	movs	r2, #16
 80120ca:	409a      	lsls	r2, r3
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	4013      	ands	r3, r2
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d043      	beq.n	801215c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	f003 0308 	and.w	r3, r3, #8
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d03c      	beq.n	801215c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80120e6:	2210      	movs	r2, #16
 80120e8:	409a      	lsls	r2, r3
 80120ea:	693b      	ldr	r3, [r7, #16]
 80120ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d018      	beq.n	801212e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012106:	2b00      	cmp	r3, #0
 8012108:	d108      	bne.n	801211c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801210e:	2b00      	cmp	r3, #0
 8012110:	d024      	beq.n	801215c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012116:	6878      	ldr	r0, [r7, #4]
 8012118:	4798      	blx	r3
 801211a:	e01f      	b.n	801215c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012120:	2b00      	cmp	r3, #0
 8012122:	d01b      	beq.n	801215c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012128:	6878      	ldr	r0, [r7, #4]
 801212a:	4798      	blx	r3
 801212c:	e016      	b.n	801215c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012138:	2b00      	cmp	r3, #0
 801213a:	d107      	bne.n	801214c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	681a      	ldr	r2, [r3, #0]
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	f022 0208 	bic.w	r2, r2, #8
 801214a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012150:	2b00      	cmp	r3, #0
 8012152:	d003      	beq.n	801215c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012158:	6878      	ldr	r0, [r7, #4]
 801215a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012160:	2220      	movs	r2, #32
 8012162:	409a      	lsls	r2, r3
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	4013      	ands	r3, r2
 8012168:	2b00      	cmp	r3, #0
 801216a:	f000 808e 	beq.w	801228a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	f003 0310 	and.w	r3, r3, #16
 8012178:	2b00      	cmp	r3, #0
 801217a:	f000 8086 	beq.w	801228a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012182:	2220      	movs	r2, #32
 8012184:	409a      	lsls	r2, r3
 8012186:	693b      	ldr	r3, [r7, #16]
 8012188:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012190:	b2db      	uxtb	r3, r3
 8012192:	2b05      	cmp	r3, #5
 8012194:	d136      	bne.n	8012204 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	681a      	ldr	r2, [r3, #0]
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	f022 0216 	bic.w	r2, r2, #22
 80121a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	695a      	ldr	r2, [r3, #20]
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80121b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d103      	bne.n	80121c6 <HAL_DMA_IRQHandler+0x1da>
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d007      	beq.n	80121d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	681a      	ldr	r2, [r3, #0]
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	f022 0208 	bic.w	r2, r2, #8
 80121d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80121da:	223f      	movs	r2, #63	; 0x3f
 80121dc:	409a      	lsls	r2, r3
 80121de:	693b      	ldr	r3, [r7, #16]
 80121e0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	2200      	movs	r2, #0
 80121e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2201      	movs	r2, #1
 80121ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d07d      	beq.n	80122f6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80121fe:	6878      	ldr	r0, [r7, #4]
 8012200:	4798      	blx	r3
        }
        return;
 8012202:	e078      	b.n	80122f6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801220e:	2b00      	cmp	r3, #0
 8012210:	d01c      	beq.n	801224c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801221c:	2b00      	cmp	r3, #0
 801221e:	d108      	bne.n	8012232 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012224:	2b00      	cmp	r3, #0
 8012226:	d030      	beq.n	801228a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801222c:	6878      	ldr	r0, [r7, #4]
 801222e:	4798      	blx	r3
 8012230:	e02b      	b.n	801228a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012236:	2b00      	cmp	r3, #0
 8012238:	d027      	beq.n	801228a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801223e:	6878      	ldr	r0, [r7, #4]
 8012240:	4798      	blx	r3
 8012242:	e022      	b.n	801228a <HAL_DMA_IRQHandler+0x29e>
 8012244:	2000001c 	.word	0x2000001c
 8012248:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012256:	2b00      	cmp	r3, #0
 8012258:	d10f      	bne.n	801227a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	681a      	ldr	r2, [r3, #0]
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	f022 0210 	bic.w	r2, r2, #16
 8012268:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	2200      	movs	r2, #0
 801226e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2201      	movs	r2, #1
 8012276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801227e:	2b00      	cmp	r3, #0
 8012280:	d003      	beq.n	801228a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012286:	6878      	ldr	r0, [r7, #4]
 8012288:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801228e:	2b00      	cmp	r3, #0
 8012290:	d032      	beq.n	80122f8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012296:	f003 0301 	and.w	r3, r3, #1
 801229a:	2b00      	cmp	r3, #0
 801229c:	d022      	beq.n	80122e4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	2205      	movs	r2, #5
 80122a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	681a      	ldr	r2, [r3, #0]
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	f022 0201 	bic.w	r2, r2, #1
 80122b4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80122b6:	68bb      	ldr	r3, [r7, #8]
 80122b8:	3301      	adds	r3, #1
 80122ba:	60bb      	str	r3, [r7, #8]
 80122bc:	697a      	ldr	r2, [r7, #20]
 80122be:	429a      	cmp	r2, r3
 80122c0:	d307      	bcc.n	80122d2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	f003 0301 	and.w	r3, r3, #1
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d1f2      	bne.n	80122b6 <HAL_DMA_IRQHandler+0x2ca>
 80122d0:	e000      	b.n	80122d4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80122d2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	2200      	movs	r2, #0
 80122d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	2201      	movs	r2, #1
 80122e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d005      	beq.n	80122f8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80122f0:	6878      	ldr	r0, [r7, #4]
 80122f2:	4798      	blx	r3
 80122f4:	e000      	b.n	80122f8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80122f6:	bf00      	nop
    }
  }
}
 80122f8:	3718      	adds	r7, #24
 80122fa:	46bd      	mov	sp, r7
 80122fc:	bd80      	pop	{r7, pc}
 80122fe:	bf00      	nop

08012300 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8012300:	b480      	push	{r7}
 8012302:	b083      	sub	sp, #12
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801230e:	b2db      	uxtb	r3, r3
}
 8012310:	4618      	mov	r0, r3
 8012312:	370c      	adds	r7, #12
 8012314:	46bd      	mov	sp, r7
 8012316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231a:	4770      	bx	lr

0801231c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 801231c:	b480      	push	{r7}
 801231e:	b083      	sub	sp, #12
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8012328:	4618      	mov	r0, r3
 801232a:	370c      	adds	r7, #12
 801232c:	46bd      	mov	sp, r7
 801232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012332:	4770      	bx	lr

08012334 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012334:	b480      	push	{r7}
 8012336:	b085      	sub	sp, #20
 8012338:	af00      	add	r7, sp, #0
 801233a:	60f8      	str	r0, [r7, #12]
 801233c:	60b9      	str	r1, [r7, #8]
 801233e:	607a      	str	r2, [r7, #4]
 8012340:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	681a      	ldr	r2, [r3, #0]
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012350:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	683a      	ldr	r2, [r7, #0]
 8012358:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	689b      	ldr	r3, [r3, #8]
 801235e:	2b40      	cmp	r3, #64	; 0x40
 8012360:	d108      	bne.n	8012374 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	687a      	ldr	r2, [r7, #4]
 8012368:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	68ba      	ldr	r2, [r7, #8]
 8012370:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8012372:	e007      	b.n	8012384 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	68ba      	ldr	r2, [r7, #8]
 801237a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	687a      	ldr	r2, [r7, #4]
 8012382:	60da      	str	r2, [r3, #12]
}
 8012384:	bf00      	nop
 8012386:	3714      	adds	r7, #20
 8012388:	46bd      	mov	sp, r7
 801238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238e:	4770      	bx	lr

08012390 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8012390:	b480      	push	{r7}
 8012392:	b085      	sub	sp, #20
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	b2db      	uxtb	r3, r3
 801239e:	3b10      	subs	r3, #16
 80123a0:	4a14      	ldr	r2, [pc, #80]	; (80123f4 <DMA_CalcBaseAndBitshift+0x64>)
 80123a2:	fba2 2303 	umull	r2, r3, r2, r3
 80123a6:	091b      	lsrs	r3, r3, #4
 80123a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80123aa:	4a13      	ldr	r2, [pc, #76]	; (80123f8 <DMA_CalcBaseAndBitshift+0x68>)
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	4413      	add	r3, r2
 80123b0:	781b      	ldrb	r3, [r3, #0]
 80123b2:	461a      	mov	r2, r3
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	2b03      	cmp	r3, #3
 80123bc:	d909      	bls.n	80123d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80123c6:	f023 0303 	bic.w	r3, r3, #3
 80123ca:	1d1a      	adds	r2, r3, #4
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	659a      	str	r2, [r3, #88]	; 0x58
 80123d0:	e007      	b.n	80123e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80123da:	f023 0303 	bic.w	r3, r3, #3
 80123de:	687a      	ldr	r2, [r7, #4]
 80123e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80123e6:	4618      	mov	r0, r3
 80123e8:	3714      	adds	r7, #20
 80123ea:	46bd      	mov	sp, r7
 80123ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f0:	4770      	bx	lr
 80123f2:	bf00      	nop
 80123f4:	aaaaaaab 	.word	0xaaaaaaab
 80123f8:	080207ac 	.word	0x080207ac

080123fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80123fc:	b480      	push	{r7}
 80123fe:	b085      	sub	sp, #20
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012404:	2300      	movs	r3, #0
 8012406:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801240c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	699b      	ldr	r3, [r3, #24]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d11f      	bne.n	8012456 <DMA_CheckFifoParam+0x5a>
 8012416:	68bb      	ldr	r3, [r7, #8]
 8012418:	2b03      	cmp	r3, #3
 801241a:	d856      	bhi.n	80124ca <DMA_CheckFifoParam+0xce>
 801241c:	a201      	add	r2, pc, #4	; (adr r2, 8012424 <DMA_CheckFifoParam+0x28>)
 801241e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012422:	bf00      	nop
 8012424:	08012435 	.word	0x08012435
 8012428:	08012447 	.word	0x08012447
 801242c:	08012435 	.word	0x08012435
 8012430:	080124cb 	.word	0x080124cb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012438:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801243c:	2b00      	cmp	r3, #0
 801243e:	d046      	beq.n	80124ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8012440:	2301      	movs	r3, #1
 8012442:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012444:	e043      	b.n	80124ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801244a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801244e:	d140      	bne.n	80124d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8012450:	2301      	movs	r3, #1
 8012452:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012454:	e03d      	b.n	80124d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	699b      	ldr	r3, [r3, #24]
 801245a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801245e:	d121      	bne.n	80124a4 <DMA_CheckFifoParam+0xa8>
 8012460:	68bb      	ldr	r3, [r7, #8]
 8012462:	2b03      	cmp	r3, #3
 8012464:	d837      	bhi.n	80124d6 <DMA_CheckFifoParam+0xda>
 8012466:	a201      	add	r2, pc, #4	; (adr r2, 801246c <DMA_CheckFifoParam+0x70>)
 8012468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801246c:	0801247d 	.word	0x0801247d
 8012470:	08012483 	.word	0x08012483
 8012474:	0801247d 	.word	0x0801247d
 8012478:	08012495 	.word	0x08012495
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801247c:	2301      	movs	r3, #1
 801247e:	73fb      	strb	r3, [r7, #15]
      break;
 8012480:	e030      	b.n	80124e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012486:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801248a:	2b00      	cmp	r3, #0
 801248c:	d025      	beq.n	80124da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801248e:	2301      	movs	r3, #1
 8012490:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012492:	e022      	b.n	80124da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012498:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801249c:	d11f      	bne.n	80124de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801249e:	2301      	movs	r3, #1
 80124a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80124a2:	e01c      	b.n	80124de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80124a4:	68bb      	ldr	r3, [r7, #8]
 80124a6:	2b02      	cmp	r3, #2
 80124a8:	d903      	bls.n	80124b2 <DMA_CheckFifoParam+0xb6>
 80124aa:	68bb      	ldr	r3, [r7, #8]
 80124ac:	2b03      	cmp	r3, #3
 80124ae:	d003      	beq.n	80124b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80124b0:	e018      	b.n	80124e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80124b2:	2301      	movs	r3, #1
 80124b4:	73fb      	strb	r3, [r7, #15]
      break;
 80124b6:	e015      	b.n	80124e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d00e      	beq.n	80124e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80124c4:	2301      	movs	r3, #1
 80124c6:	73fb      	strb	r3, [r7, #15]
      break;
 80124c8:	e00b      	b.n	80124e2 <DMA_CheckFifoParam+0xe6>
      break;
 80124ca:	bf00      	nop
 80124cc:	e00a      	b.n	80124e4 <DMA_CheckFifoParam+0xe8>
      break;
 80124ce:	bf00      	nop
 80124d0:	e008      	b.n	80124e4 <DMA_CheckFifoParam+0xe8>
      break;
 80124d2:	bf00      	nop
 80124d4:	e006      	b.n	80124e4 <DMA_CheckFifoParam+0xe8>
      break;
 80124d6:	bf00      	nop
 80124d8:	e004      	b.n	80124e4 <DMA_CheckFifoParam+0xe8>
      break;
 80124da:	bf00      	nop
 80124dc:	e002      	b.n	80124e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80124de:	bf00      	nop
 80124e0:	e000      	b.n	80124e4 <DMA_CheckFifoParam+0xe8>
      break;
 80124e2:	bf00      	nop
    }
  } 
  
  return status; 
 80124e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80124e6:	4618      	mov	r0, r3
 80124e8:	3714      	adds	r7, #20
 80124ea:	46bd      	mov	sp, r7
 80124ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f0:	4770      	bx	lr
 80124f2:	bf00      	nop

080124f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80124f4:	b480      	push	{r7}
 80124f6:	b089      	sub	sp, #36	; 0x24
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
 80124fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80124fe:	2300      	movs	r3, #0
 8012500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8012502:	2300      	movs	r3, #0
 8012504:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8012506:	2300      	movs	r3, #0
 8012508:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801250a:	2300      	movs	r3, #0
 801250c:	61fb      	str	r3, [r7, #28]
 801250e:	e16b      	b.n	80127e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012510:	2201      	movs	r2, #1
 8012512:	69fb      	ldr	r3, [r7, #28]
 8012514:	fa02 f303 	lsl.w	r3, r2, r3
 8012518:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801251a:	683b      	ldr	r3, [r7, #0]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	697a      	ldr	r2, [r7, #20]
 8012520:	4013      	ands	r3, r2
 8012522:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8012524:	693a      	ldr	r2, [r7, #16]
 8012526:	697b      	ldr	r3, [r7, #20]
 8012528:	429a      	cmp	r2, r3
 801252a:	f040 815a 	bne.w	80127e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801252e:	683b      	ldr	r3, [r7, #0]
 8012530:	685b      	ldr	r3, [r3, #4]
 8012532:	2b01      	cmp	r3, #1
 8012534:	d00b      	beq.n	801254e <HAL_GPIO_Init+0x5a>
 8012536:	683b      	ldr	r3, [r7, #0]
 8012538:	685b      	ldr	r3, [r3, #4]
 801253a:	2b02      	cmp	r3, #2
 801253c:	d007      	beq.n	801254e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012542:	2b11      	cmp	r3, #17
 8012544:	d003      	beq.n	801254e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	685b      	ldr	r3, [r3, #4]
 801254a:	2b12      	cmp	r3, #18
 801254c:	d130      	bne.n	80125b0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	689b      	ldr	r3, [r3, #8]
 8012552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8012554:	69fb      	ldr	r3, [r7, #28]
 8012556:	005b      	lsls	r3, r3, #1
 8012558:	2203      	movs	r2, #3
 801255a:	fa02 f303 	lsl.w	r3, r2, r3
 801255e:	43db      	mvns	r3, r3
 8012560:	69ba      	ldr	r2, [r7, #24]
 8012562:	4013      	ands	r3, r2
 8012564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8012566:	683b      	ldr	r3, [r7, #0]
 8012568:	68da      	ldr	r2, [r3, #12]
 801256a:	69fb      	ldr	r3, [r7, #28]
 801256c:	005b      	lsls	r3, r3, #1
 801256e:	fa02 f303 	lsl.w	r3, r2, r3
 8012572:	69ba      	ldr	r2, [r7, #24]
 8012574:	4313      	orrs	r3, r2
 8012576:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	69ba      	ldr	r2, [r7, #24]
 801257c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	685b      	ldr	r3, [r3, #4]
 8012582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012584:	2201      	movs	r2, #1
 8012586:	69fb      	ldr	r3, [r7, #28]
 8012588:	fa02 f303 	lsl.w	r3, r2, r3
 801258c:	43db      	mvns	r3, r3
 801258e:	69ba      	ldr	r2, [r7, #24]
 8012590:	4013      	ands	r3, r2
 8012592:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8012594:	683b      	ldr	r3, [r7, #0]
 8012596:	685b      	ldr	r3, [r3, #4]
 8012598:	091b      	lsrs	r3, r3, #4
 801259a:	f003 0201 	and.w	r2, r3, #1
 801259e:	69fb      	ldr	r3, [r7, #28]
 80125a0:	fa02 f303 	lsl.w	r3, r2, r3
 80125a4:	69ba      	ldr	r2, [r7, #24]
 80125a6:	4313      	orrs	r3, r2
 80125a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	69ba      	ldr	r2, [r7, #24]
 80125ae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	68db      	ldr	r3, [r3, #12]
 80125b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80125b6:	69fb      	ldr	r3, [r7, #28]
 80125b8:	005b      	lsls	r3, r3, #1
 80125ba:	2203      	movs	r2, #3
 80125bc:	fa02 f303 	lsl.w	r3, r2, r3
 80125c0:	43db      	mvns	r3, r3
 80125c2:	69ba      	ldr	r2, [r7, #24]
 80125c4:	4013      	ands	r3, r2
 80125c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80125c8:	683b      	ldr	r3, [r7, #0]
 80125ca:	689a      	ldr	r2, [r3, #8]
 80125cc:	69fb      	ldr	r3, [r7, #28]
 80125ce:	005b      	lsls	r3, r3, #1
 80125d0:	fa02 f303 	lsl.w	r3, r2, r3
 80125d4:	69ba      	ldr	r2, [r7, #24]
 80125d6:	4313      	orrs	r3, r2
 80125d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	69ba      	ldr	r2, [r7, #24]
 80125de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80125e0:	683b      	ldr	r3, [r7, #0]
 80125e2:	685b      	ldr	r3, [r3, #4]
 80125e4:	2b02      	cmp	r3, #2
 80125e6:	d003      	beq.n	80125f0 <HAL_GPIO_Init+0xfc>
 80125e8:	683b      	ldr	r3, [r7, #0]
 80125ea:	685b      	ldr	r3, [r3, #4]
 80125ec:	2b12      	cmp	r3, #18
 80125ee:	d123      	bne.n	8012638 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80125f0:	69fb      	ldr	r3, [r7, #28]
 80125f2:	08da      	lsrs	r2, r3, #3
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	3208      	adds	r2, #8
 80125f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80125fe:	69fb      	ldr	r3, [r7, #28]
 8012600:	f003 0307 	and.w	r3, r3, #7
 8012604:	009b      	lsls	r3, r3, #2
 8012606:	220f      	movs	r2, #15
 8012608:	fa02 f303 	lsl.w	r3, r2, r3
 801260c:	43db      	mvns	r3, r3
 801260e:	69ba      	ldr	r2, [r7, #24]
 8012610:	4013      	ands	r3, r2
 8012612:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	691a      	ldr	r2, [r3, #16]
 8012618:	69fb      	ldr	r3, [r7, #28]
 801261a:	f003 0307 	and.w	r3, r3, #7
 801261e:	009b      	lsls	r3, r3, #2
 8012620:	fa02 f303 	lsl.w	r3, r2, r3
 8012624:	69ba      	ldr	r2, [r7, #24]
 8012626:	4313      	orrs	r3, r2
 8012628:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801262a:	69fb      	ldr	r3, [r7, #28]
 801262c:	08da      	lsrs	r2, r3, #3
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	3208      	adds	r2, #8
 8012632:	69b9      	ldr	r1, [r7, #24]
 8012634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801263e:	69fb      	ldr	r3, [r7, #28]
 8012640:	005b      	lsls	r3, r3, #1
 8012642:	2203      	movs	r2, #3
 8012644:	fa02 f303 	lsl.w	r3, r2, r3
 8012648:	43db      	mvns	r3, r3
 801264a:	69ba      	ldr	r2, [r7, #24]
 801264c:	4013      	ands	r3, r2
 801264e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8012650:	683b      	ldr	r3, [r7, #0]
 8012652:	685b      	ldr	r3, [r3, #4]
 8012654:	f003 0203 	and.w	r2, r3, #3
 8012658:	69fb      	ldr	r3, [r7, #28]
 801265a:	005b      	lsls	r3, r3, #1
 801265c:	fa02 f303 	lsl.w	r3, r2, r3
 8012660:	69ba      	ldr	r2, [r7, #24]
 8012662:	4313      	orrs	r3, r2
 8012664:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	69ba      	ldr	r2, [r7, #24]
 801266a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801266c:	683b      	ldr	r3, [r7, #0]
 801266e:	685b      	ldr	r3, [r3, #4]
 8012670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012674:	2b00      	cmp	r3, #0
 8012676:	f000 80b4 	beq.w	80127e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801267a:	2300      	movs	r3, #0
 801267c:	60fb      	str	r3, [r7, #12]
 801267e:	4b60      	ldr	r3, [pc, #384]	; (8012800 <HAL_GPIO_Init+0x30c>)
 8012680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012682:	4a5f      	ldr	r2, [pc, #380]	; (8012800 <HAL_GPIO_Init+0x30c>)
 8012684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012688:	6453      	str	r3, [r2, #68]	; 0x44
 801268a:	4b5d      	ldr	r3, [pc, #372]	; (8012800 <HAL_GPIO_Init+0x30c>)
 801268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801268e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012692:	60fb      	str	r3, [r7, #12]
 8012694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8012696:	4a5b      	ldr	r2, [pc, #364]	; (8012804 <HAL_GPIO_Init+0x310>)
 8012698:	69fb      	ldr	r3, [r7, #28]
 801269a:	089b      	lsrs	r3, r3, #2
 801269c:	3302      	adds	r3, #2
 801269e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80126a4:	69fb      	ldr	r3, [r7, #28]
 80126a6:	f003 0303 	and.w	r3, r3, #3
 80126aa:	009b      	lsls	r3, r3, #2
 80126ac:	220f      	movs	r2, #15
 80126ae:	fa02 f303 	lsl.w	r3, r2, r3
 80126b2:	43db      	mvns	r3, r3
 80126b4:	69ba      	ldr	r2, [r7, #24]
 80126b6:	4013      	ands	r3, r2
 80126b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	4a52      	ldr	r2, [pc, #328]	; (8012808 <HAL_GPIO_Init+0x314>)
 80126be:	4293      	cmp	r3, r2
 80126c0:	d02b      	beq.n	801271a <HAL_GPIO_Init+0x226>
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	4a51      	ldr	r2, [pc, #324]	; (801280c <HAL_GPIO_Init+0x318>)
 80126c6:	4293      	cmp	r3, r2
 80126c8:	d025      	beq.n	8012716 <HAL_GPIO_Init+0x222>
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	4a50      	ldr	r2, [pc, #320]	; (8012810 <HAL_GPIO_Init+0x31c>)
 80126ce:	4293      	cmp	r3, r2
 80126d0:	d01f      	beq.n	8012712 <HAL_GPIO_Init+0x21e>
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	4a4f      	ldr	r2, [pc, #316]	; (8012814 <HAL_GPIO_Init+0x320>)
 80126d6:	4293      	cmp	r3, r2
 80126d8:	d019      	beq.n	801270e <HAL_GPIO_Init+0x21a>
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	4a4e      	ldr	r2, [pc, #312]	; (8012818 <HAL_GPIO_Init+0x324>)
 80126de:	4293      	cmp	r3, r2
 80126e0:	d013      	beq.n	801270a <HAL_GPIO_Init+0x216>
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	4a4d      	ldr	r2, [pc, #308]	; (801281c <HAL_GPIO_Init+0x328>)
 80126e6:	4293      	cmp	r3, r2
 80126e8:	d00d      	beq.n	8012706 <HAL_GPIO_Init+0x212>
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	4a4c      	ldr	r2, [pc, #304]	; (8012820 <HAL_GPIO_Init+0x32c>)
 80126ee:	4293      	cmp	r3, r2
 80126f0:	d007      	beq.n	8012702 <HAL_GPIO_Init+0x20e>
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	4a4b      	ldr	r2, [pc, #300]	; (8012824 <HAL_GPIO_Init+0x330>)
 80126f6:	4293      	cmp	r3, r2
 80126f8:	d101      	bne.n	80126fe <HAL_GPIO_Init+0x20a>
 80126fa:	2307      	movs	r3, #7
 80126fc:	e00e      	b.n	801271c <HAL_GPIO_Init+0x228>
 80126fe:	2308      	movs	r3, #8
 8012700:	e00c      	b.n	801271c <HAL_GPIO_Init+0x228>
 8012702:	2306      	movs	r3, #6
 8012704:	e00a      	b.n	801271c <HAL_GPIO_Init+0x228>
 8012706:	2305      	movs	r3, #5
 8012708:	e008      	b.n	801271c <HAL_GPIO_Init+0x228>
 801270a:	2304      	movs	r3, #4
 801270c:	e006      	b.n	801271c <HAL_GPIO_Init+0x228>
 801270e:	2303      	movs	r3, #3
 8012710:	e004      	b.n	801271c <HAL_GPIO_Init+0x228>
 8012712:	2302      	movs	r3, #2
 8012714:	e002      	b.n	801271c <HAL_GPIO_Init+0x228>
 8012716:	2301      	movs	r3, #1
 8012718:	e000      	b.n	801271c <HAL_GPIO_Init+0x228>
 801271a:	2300      	movs	r3, #0
 801271c:	69fa      	ldr	r2, [r7, #28]
 801271e:	f002 0203 	and.w	r2, r2, #3
 8012722:	0092      	lsls	r2, r2, #2
 8012724:	4093      	lsls	r3, r2
 8012726:	69ba      	ldr	r2, [r7, #24]
 8012728:	4313      	orrs	r3, r2
 801272a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801272c:	4935      	ldr	r1, [pc, #212]	; (8012804 <HAL_GPIO_Init+0x310>)
 801272e:	69fb      	ldr	r3, [r7, #28]
 8012730:	089b      	lsrs	r3, r3, #2
 8012732:	3302      	adds	r3, #2
 8012734:	69ba      	ldr	r2, [r7, #24]
 8012736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801273a:	4b3b      	ldr	r3, [pc, #236]	; (8012828 <HAL_GPIO_Init+0x334>)
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012740:	693b      	ldr	r3, [r7, #16]
 8012742:	43db      	mvns	r3, r3
 8012744:	69ba      	ldr	r2, [r7, #24]
 8012746:	4013      	ands	r3, r2
 8012748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	685b      	ldr	r3, [r3, #4]
 801274e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012752:	2b00      	cmp	r3, #0
 8012754:	d003      	beq.n	801275e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8012756:	69ba      	ldr	r2, [r7, #24]
 8012758:	693b      	ldr	r3, [r7, #16]
 801275a:	4313      	orrs	r3, r2
 801275c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801275e:	4a32      	ldr	r2, [pc, #200]	; (8012828 <HAL_GPIO_Init+0x334>)
 8012760:	69bb      	ldr	r3, [r7, #24]
 8012762:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8012764:	4b30      	ldr	r3, [pc, #192]	; (8012828 <HAL_GPIO_Init+0x334>)
 8012766:	685b      	ldr	r3, [r3, #4]
 8012768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801276a:	693b      	ldr	r3, [r7, #16]
 801276c:	43db      	mvns	r3, r3
 801276e:	69ba      	ldr	r2, [r7, #24]
 8012770:	4013      	ands	r3, r2
 8012772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8012774:	683b      	ldr	r3, [r7, #0]
 8012776:	685b      	ldr	r3, [r3, #4]
 8012778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801277c:	2b00      	cmp	r3, #0
 801277e:	d003      	beq.n	8012788 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8012780:	69ba      	ldr	r2, [r7, #24]
 8012782:	693b      	ldr	r3, [r7, #16]
 8012784:	4313      	orrs	r3, r2
 8012786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8012788:	4a27      	ldr	r2, [pc, #156]	; (8012828 <HAL_GPIO_Init+0x334>)
 801278a:	69bb      	ldr	r3, [r7, #24]
 801278c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801278e:	4b26      	ldr	r3, [pc, #152]	; (8012828 <HAL_GPIO_Init+0x334>)
 8012790:	689b      	ldr	r3, [r3, #8]
 8012792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012794:	693b      	ldr	r3, [r7, #16]
 8012796:	43db      	mvns	r3, r3
 8012798:	69ba      	ldr	r2, [r7, #24]
 801279a:	4013      	ands	r3, r2
 801279c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801279e:	683b      	ldr	r3, [r7, #0]
 80127a0:	685b      	ldr	r3, [r3, #4]
 80127a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d003      	beq.n	80127b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80127aa:	69ba      	ldr	r2, [r7, #24]
 80127ac:	693b      	ldr	r3, [r7, #16]
 80127ae:	4313      	orrs	r3, r2
 80127b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80127b2:	4a1d      	ldr	r2, [pc, #116]	; (8012828 <HAL_GPIO_Init+0x334>)
 80127b4:	69bb      	ldr	r3, [r7, #24]
 80127b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80127b8:	4b1b      	ldr	r3, [pc, #108]	; (8012828 <HAL_GPIO_Init+0x334>)
 80127ba:	68db      	ldr	r3, [r3, #12]
 80127bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80127be:	693b      	ldr	r3, [r7, #16]
 80127c0:	43db      	mvns	r3, r3
 80127c2:	69ba      	ldr	r2, [r7, #24]
 80127c4:	4013      	ands	r3, r2
 80127c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80127c8:	683b      	ldr	r3, [r7, #0]
 80127ca:	685b      	ldr	r3, [r3, #4]
 80127cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d003      	beq.n	80127dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80127d4:	69ba      	ldr	r2, [r7, #24]
 80127d6:	693b      	ldr	r3, [r7, #16]
 80127d8:	4313      	orrs	r3, r2
 80127da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80127dc:	4a12      	ldr	r2, [pc, #72]	; (8012828 <HAL_GPIO_Init+0x334>)
 80127de:	69bb      	ldr	r3, [r7, #24]
 80127e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80127e2:	69fb      	ldr	r3, [r7, #28]
 80127e4:	3301      	adds	r3, #1
 80127e6:	61fb      	str	r3, [r7, #28]
 80127e8:	69fb      	ldr	r3, [r7, #28]
 80127ea:	2b0f      	cmp	r3, #15
 80127ec:	f67f ae90 	bls.w	8012510 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80127f0:	bf00      	nop
 80127f2:	bf00      	nop
 80127f4:	3724      	adds	r7, #36	; 0x24
 80127f6:	46bd      	mov	sp, r7
 80127f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fc:	4770      	bx	lr
 80127fe:	bf00      	nop
 8012800:	40023800 	.word	0x40023800
 8012804:	40013800 	.word	0x40013800
 8012808:	40020000 	.word	0x40020000
 801280c:	40020400 	.word	0x40020400
 8012810:	40020800 	.word	0x40020800
 8012814:	40020c00 	.word	0x40020c00
 8012818:	40021000 	.word	0x40021000
 801281c:	40021400 	.word	0x40021400
 8012820:	40021800 	.word	0x40021800
 8012824:	40021c00 	.word	0x40021c00
 8012828:	40013c00 	.word	0x40013c00

0801282c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801282c:	b480      	push	{r7}
 801282e:	b087      	sub	sp, #28
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
 8012834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8012836:	2300      	movs	r3, #0
 8012838:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 801283a:	2300      	movs	r3, #0
 801283c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 801283e:	2300      	movs	r3, #0
 8012840:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012842:	2300      	movs	r3, #0
 8012844:	617b      	str	r3, [r7, #20]
 8012846:	e0cd      	b.n	80129e4 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012848:	2201      	movs	r2, #1
 801284a:	697b      	ldr	r3, [r7, #20]
 801284c:	fa02 f303 	lsl.w	r3, r2, r3
 8012850:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8012852:	683a      	ldr	r2, [r7, #0]
 8012854:	693b      	ldr	r3, [r7, #16]
 8012856:	4013      	ands	r3, r2
 8012858:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 801285a:	68fa      	ldr	r2, [r7, #12]
 801285c:	693b      	ldr	r3, [r7, #16]
 801285e:	429a      	cmp	r2, r3
 8012860:	f040 80bd 	bne.w	80129de <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8012864:	4a65      	ldr	r2, [pc, #404]	; (80129fc <HAL_GPIO_DeInit+0x1d0>)
 8012866:	697b      	ldr	r3, [r7, #20]
 8012868:	089b      	lsrs	r3, r3, #2
 801286a:	3302      	adds	r3, #2
 801286c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012870:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8012872:	697b      	ldr	r3, [r7, #20]
 8012874:	f003 0303 	and.w	r3, r3, #3
 8012878:	009b      	lsls	r3, r3, #2
 801287a:	220f      	movs	r2, #15
 801287c:	fa02 f303 	lsl.w	r3, r2, r3
 8012880:	68ba      	ldr	r2, [r7, #8]
 8012882:	4013      	ands	r3, r2
 8012884:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	4a5d      	ldr	r2, [pc, #372]	; (8012a00 <HAL_GPIO_DeInit+0x1d4>)
 801288a:	4293      	cmp	r3, r2
 801288c:	d02b      	beq.n	80128e6 <HAL_GPIO_DeInit+0xba>
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	4a5c      	ldr	r2, [pc, #368]	; (8012a04 <HAL_GPIO_DeInit+0x1d8>)
 8012892:	4293      	cmp	r3, r2
 8012894:	d025      	beq.n	80128e2 <HAL_GPIO_DeInit+0xb6>
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	4a5b      	ldr	r2, [pc, #364]	; (8012a08 <HAL_GPIO_DeInit+0x1dc>)
 801289a:	4293      	cmp	r3, r2
 801289c:	d01f      	beq.n	80128de <HAL_GPIO_DeInit+0xb2>
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	4a5a      	ldr	r2, [pc, #360]	; (8012a0c <HAL_GPIO_DeInit+0x1e0>)
 80128a2:	4293      	cmp	r3, r2
 80128a4:	d019      	beq.n	80128da <HAL_GPIO_DeInit+0xae>
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	4a59      	ldr	r2, [pc, #356]	; (8012a10 <HAL_GPIO_DeInit+0x1e4>)
 80128aa:	4293      	cmp	r3, r2
 80128ac:	d013      	beq.n	80128d6 <HAL_GPIO_DeInit+0xaa>
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	4a58      	ldr	r2, [pc, #352]	; (8012a14 <HAL_GPIO_DeInit+0x1e8>)
 80128b2:	4293      	cmp	r3, r2
 80128b4:	d00d      	beq.n	80128d2 <HAL_GPIO_DeInit+0xa6>
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	4a57      	ldr	r2, [pc, #348]	; (8012a18 <HAL_GPIO_DeInit+0x1ec>)
 80128ba:	4293      	cmp	r3, r2
 80128bc:	d007      	beq.n	80128ce <HAL_GPIO_DeInit+0xa2>
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	4a56      	ldr	r2, [pc, #344]	; (8012a1c <HAL_GPIO_DeInit+0x1f0>)
 80128c2:	4293      	cmp	r3, r2
 80128c4:	d101      	bne.n	80128ca <HAL_GPIO_DeInit+0x9e>
 80128c6:	2307      	movs	r3, #7
 80128c8:	e00e      	b.n	80128e8 <HAL_GPIO_DeInit+0xbc>
 80128ca:	2308      	movs	r3, #8
 80128cc:	e00c      	b.n	80128e8 <HAL_GPIO_DeInit+0xbc>
 80128ce:	2306      	movs	r3, #6
 80128d0:	e00a      	b.n	80128e8 <HAL_GPIO_DeInit+0xbc>
 80128d2:	2305      	movs	r3, #5
 80128d4:	e008      	b.n	80128e8 <HAL_GPIO_DeInit+0xbc>
 80128d6:	2304      	movs	r3, #4
 80128d8:	e006      	b.n	80128e8 <HAL_GPIO_DeInit+0xbc>
 80128da:	2303      	movs	r3, #3
 80128dc:	e004      	b.n	80128e8 <HAL_GPIO_DeInit+0xbc>
 80128de:	2302      	movs	r3, #2
 80128e0:	e002      	b.n	80128e8 <HAL_GPIO_DeInit+0xbc>
 80128e2:	2301      	movs	r3, #1
 80128e4:	e000      	b.n	80128e8 <HAL_GPIO_DeInit+0xbc>
 80128e6:	2300      	movs	r3, #0
 80128e8:	697a      	ldr	r2, [r7, #20]
 80128ea:	f002 0203 	and.w	r2, r2, #3
 80128ee:	0092      	lsls	r2, r2, #2
 80128f0:	4093      	lsls	r3, r2
 80128f2:	68ba      	ldr	r2, [r7, #8]
 80128f4:	429a      	cmp	r2, r3
 80128f6:	d132      	bne.n	801295e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80128f8:	4b49      	ldr	r3, [pc, #292]	; (8012a20 <HAL_GPIO_DeInit+0x1f4>)
 80128fa:	681a      	ldr	r2, [r3, #0]
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	43db      	mvns	r3, r3
 8012900:	4947      	ldr	r1, [pc, #284]	; (8012a20 <HAL_GPIO_DeInit+0x1f4>)
 8012902:	4013      	ands	r3, r2
 8012904:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8012906:	4b46      	ldr	r3, [pc, #280]	; (8012a20 <HAL_GPIO_DeInit+0x1f4>)
 8012908:	685a      	ldr	r2, [r3, #4]
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	43db      	mvns	r3, r3
 801290e:	4944      	ldr	r1, [pc, #272]	; (8012a20 <HAL_GPIO_DeInit+0x1f4>)
 8012910:	4013      	ands	r3, r2
 8012912:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8012914:	4b42      	ldr	r3, [pc, #264]	; (8012a20 <HAL_GPIO_DeInit+0x1f4>)
 8012916:	689a      	ldr	r2, [r3, #8]
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	43db      	mvns	r3, r3
 801291c:	4940      	ldr	r1, [pc, #256]	; (8012a20 <HAL_GPIO_DeInit+0x1f4>)
 801291e:	4013      	ands	r3, r2
 8012920:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8012922:	4b3f      	ldr	r3, [pc, #252]	; (8012a20 <HAL_GPIO_DeInit+0x1f4>)
 8012924:	68da      	ldr	r2, [r3, #12]
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	43db      	mvns	r3, r3
 801292a:	493d      	ldr	r1, [pc, #244]	; (8012a20 <HAL_GPIO_DeInit+0x1f4>)
 801292c:	4013      	ands	r3, r2
 801292e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8012930:	697b      	ldr	r3, [r7, #20]
 8012932:	f003 0303 	and.w	r3, r3, #3
 8012936:	009b      	lsls	r3, r3, #2
 8012938:	220f      	movs	r2, #15
 801293a:	fa02 f303 	lsl.w	r3, r2, r3
 801293e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8012940:	4a2e      	ldr	r2, [pc, #184]	; (80129fc <HAL_GPIO_DeInit+0x1d0>)
 8012942:	697b      	ldr	r3, [r7, #20]
 8012944:	089b      	lsrs	r3, r3, #2
 8012946:	3302      	adds	r3, #2
 8012948:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801294c:	68bb      	ldr	r3, [r7, #8]
 801294e:	43da      	mvns	r2, r3
 8012950:	482a      	ldr	r0, [pc, #168]	; (80129fc <HAL_GPIO_DeInit+0x1d0>)
 8012952:	697b      	ldr	r3, [r7, #20]
 8012954:	089b      	lsrs	r3, r3, #2
 8012956:	400a      	ands	r2, r1
 8012958:	3302      	adds	r3, #2
 801295a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	681a      	ldr	r2, [r3, #0]
 8012962:	697b      	ldr	r3, [r7, #20]
 8012964:	005b      	lsls	r3, r3, #1
 8012966:	2103      	movs	r1, #3
 8012968:	fa01 f303 	lsl.w	r3, r1, r3
 801296c:	43db      	mvns	r3, r3
 801296e:	401a      	ands	r2, r3
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012974:	697b      	ldr	r3, [r7, #20]
 8012976:	08da      	lsrs	r2, r3, #3
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	3208      	adds	r2, #8
 801297c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012980:	697b      	ldr	r3, [r7, #20]
 8012982:	f003 0307 	and.w	r3, r3, #7
 8012986:	009b      	lsls	r3, r3, #2
 8012988:	220f      	movs	r2, #15
 801298a:	fa02 f303 	lsl.w	r3, r2, r3
 801298e:	43db      	mvns	r3, r3
 8012990:	697a      	ldr	r2, [r7, #20]
 8012992:	08d2      	lsrs	r2, r2, #3
 8012994:	4019      	ands	r1, r3
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	3208      	adds	r2, #8
 801299a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	68da      	ldr	r2, [r3, #12]
 80129a2:	697b      	ldr	r3, [r7, #20]
 80129a4:	005b      	lsls	r3, r3, #1
 80129a6:	2103      	movs	r1, #3
 80129a8:	fa01 f303 	lsl.w	r3, r1, r3
 80129ac:	43db      	mvns	r3, r3
 80129ae:	401a      	ands	r2, r3
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	685a      	ldr	r2, [r3, #4]
 80129b8:	2101      	movs	r1, #1
 80129ba:	697b      	ldr	r3, [r7, #20]
 80129bc:	fa01 f303 	lsl.w	r3, r1, r3
 80129c0:	43db      	mvns	r3, r3
 80129c2:	401a      	ands	r2, r3
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	689a      	ldr	r2, [r3, #8]
 80129cc:	697b      	ldr	r3, [r7, #20]
 80129ce:	005b      	lsls	r3, r3, #1
 80129d0:	2103      	movs	r1, #3
 80129d2:	fa01 f303 	lsl.w	r3, r1, r3
 80129d6:	43db      	mvns	r3, r3
 80129d8:	401a      	ands	r2, r3
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80129de:	697b      	ldr	r3, [r7, #20]
 80129e0:	3301      	adds	r3, #1
 80129e2:	617b      	str	r3, [r7, #20]
 80129e4:	697b      	ldr	r3, [r7, #20]
 80129e6:	2b0f      	cmp	r3, #15
 80129e8:	f67f af2e 	bls.w	8012848 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80129ec:	bf00      	nop
 80129ee:	bf00      	nop
 80129f0:	371c      	adds	r7, #28
 80129f2:	46bd      	mov	sp, r7
 80129f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f8:	4770      	bx	lr
 80129fa:	bf00      	nop
 80129fc:	40013800 	.word	0x40013800
 8012a00:	40020000 	.word	0x40020000
 8012a04:	40020400 	.word	0x40020400
 8012a08:	40020800 	.word	0x40020800
 8012a0c:	40020c00 	.word	0x40020c00
 8012a10:	40021000 	.word	0x40021000
 8012a14:	40021400 	.word	0x40021400
 8012a18:	40021800 	.word	0x40021800
 8012a1c:	40021c00 	.word	0x40021c00
 8012a20:	40013c00 	.word	0x40013c00

08012a24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8012a24:	b480      	push	{r7}
 8012a26:	b085      	sub	sp, #20
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
 8012a2c:	460b      	mov	r3, r1
 8012a2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	691a      	ldr	r2, [r3, #16]
 8012a34:	887b      	ldrh	r3, [r7, #2]
 8012a36:	4013      	ands	r3, r2
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d002      	beq.n	8012a42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8012a3c:	2301      	movs	r3, #1
 8012a3e:	73fb      	strb	r3, [r7, #15]
 8012a40:	e001      	b.n	8012a46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8012a42:	2300      	movs	r3, #0
 8012a44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8012a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a48:	4618      	mov	r0, r3
 8012a4a:	3714      	adds	r7, #20
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a52:	4770      	bx	lr

08012a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012a54:	b480      	push	{r7}
 8012a56:	b083      	sub	sp, #12
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
 8012a5c:	460b      	mov	r3, r1
 8012a5e:	807b      	strh	r3, [r7, #2]
 8012a60:	4613      	mov	r3, r2
 8012a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8012a64:	787b      	ldrb	r3, [r7, #1]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d003      	beq.n	8012a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8012a6a:	887a      	ldrh	r2, [r7, #2]
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8012a70:	e003      	b.n	8012a7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8012a72:	887b      	ldrh	r3, [r7, #2]
 8012a74:	041a      	lsls	r2, r3, #16
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	619a      	str	r2, [r3, #24]
}
 8012a7a:	bf00      	nop
 8012a7c:	370c      	adds	r7, #12
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a84:	4770      	bx	lr
	...

08012a88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b084      	sub	sp, #16
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d101      	bne.n	8012a9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8012a96:	2301      	movs	r3, #1
 8012a98:	e12b      	b.n	8012cf2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012aa0:	b2db      	uxtb	r3, r3
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d106      	bne.n	8012ab4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8012aae:	6878      	ldr	r0, [r7, #4]
 8012ab0:	f7ef faee 	bl	8002090 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2224      	movs	r2, #36	; 0x24
 8012ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	681a      	ldr	r2, [r3, #0]
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	f022 0201 	bic.w	r2, r2, #1
 8012aca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	681a      	ldr	r2, [r3, #0]
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012ada:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	681a      	ldr	r2, [r3, #0]
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012aea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8012aec:	f002 fc64 	bl	80153b8 <HAL_RCC_GetPCLK1Freq>
 8012af0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	685b      	ldr	r3, [r3, #4]
 8012af6:	4a81      	ldr	r2, [pc, #516]	; (8012cfc <HAL_I2C_Init+0x274>)
 8012af8:	4293      	cmp	r3, r2
 8012afa:	d807      	bhi.n	8012b0c <HAL_I2C_Init+0x84>
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	4a80      	ldr	r2, [pc, #512]	; (8012d00 <HAL_I2C_Init+0x278>)
 8012b00:	4293      	cmp	r3, r2
 8012b02:	bf94      	ite	ls
 8012b04:	2301      	movls	r3, #1
 8012b06:	2300      	movhi	r3, #0
 8012b08:	b2db      	uxtb	r3, r3
 8012b0a:	e006      	b.n	8012b1a <HAL_I2C_Init+0x92>
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	4a7d      	ldr	r2, [pc, #500]	; (8012d04 <HAL_I2C_Init+0x27c>)
 8012b10:	4293      	cmp	r3, r2
 8012b12:	bf94      	ite	ls
 8012b14:	2301      	movls	r3, #1
 8012b16:	2300      	movhi	r3, #0
 8012b18:	b2db      	uxtb	r3, r3
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d001      	beq.n	8012b22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8012b1e:	2301      	movs	r3, #1
 8012b20:	e0e7      	b.n	8012cf2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	4a78      	ldr	r2, [pc, #480]	; (8012d08 <HAL_I2C_Init+0x280>)
 8012b26:	fba2 2303 	umull	r2, r3, r2, r3
 8012b2a:	0c9b      	lsrs	r3, r3, #18
 8012b2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	685b      	ldr	r3, [r3, #4]
 8012b34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	68ba      	ldr	r2, [r7, #8]
 8012b3e:	430a      	orrs	r2, r1
 8012b40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	6a1b      	ldr	r3, [r3, #32]
 8012b48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	685b      	ldr	r3, [r3, #4]
 8012b50:	4a6a      	ldr	r2, [pc, #424]	; (8012cfc <HAL_I2C_Init+0x274>)
 8012b52:	4293      	cmp	r3, r2
 8012b54:	d802      	bhi.n	8012b5c <HAL_I2C_Init+0xd4>
 8012b56:	68bb      	ldr	r3, [r7, #8]
 8012b58:	3301      	adds	r3, #1
 8012b5a:	e009      	b.n	8012b70 <HAL_I2C_Init+0xe8>
 8012b5c:	68bb      	ldr	r3, [r7, #8]
 8012b5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8012b62:	fb02 f303 	mul.w	r3, r2, r3
 8012b66:	4a69      	ldr	r2, [pc, #420]	; (8012d0c <HAL_I2C_Init+0x284>)
 8012b68:	fba2 2303 	umull	r2, r3, r2, r3
 8012b6c:	099b      	lsrs	r3, r3, #6
 8012b6e:	3301      	adds	r3, #1
 8012b70:	687a      	ldr	r2, [r7, #4]
 8012b72:	6812      	ldr	r2, [r2, #0]
 8012b74:	430b      	orrs	r3, r1
 8012b76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	69db      	ldr	r3, [r3, #28]
 8012b7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8012b82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	685b      	ldr	r3, [r3, #4]
 8012b8a:	495c      	ldr	r1, [pc, #368]	; (8012cfc <HAL_I2C_Init+0x274>)
 8012b8c:	428b      	cmp	r3, r1
 8012b8e:	d819      	bhi.n	8012bc4 <HAL_I2C_Init+0x13c>
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	1e59      	subs	r1, r3, #1
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	685b      	ldr	r3, [r3, #4]
 8012b98:	005b      	lsls	r3, r3, #1
 8012b9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8012b9e:	1c59      	adds	r1, r3, #1
 8012ba0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8012ba4:	400b      	ands	r3, r1
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d00a      	beq.n	8012bc0 <HAL_I2C_Init+0x138>
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	1e59      	subs	r1, r3, #1
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	685b      	ldr	r3, [r3, #4]
 8012bb2:	005b      	lsls	r3, r3, #1
 8012bb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8012bb8:	3301      	adds	r3, #1
 8012bba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012bbe:	e051      	b.n	8012c64 <HAL_I2C_Init+0x1dc>
 8012bc0:	2304      	movs	r3, #4
 8012bc2:	e04f      	b.n	8012c64 <HAL_I2C_Init+0x1dc>
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	689b      	ldr	r3, [r3, #8]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d111      	bne.n	8012bf0 <HAL_I2C_Init+0x168>
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	1e58      	subs	r0, r3, #1
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	6859      	ldr	r1, [r3, #4]
 8012bd4:	460b      	mov	r3, r1
 8012bd6:	005b      	lsls	r3, r3, #1
 8012bd8:	440b      	add	r3, r1
 8012bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8012bde:	3301      	adds	r3, #1
 8012be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	bf0c      	ite	eq
 8012be8:	2301      	moveq	r3, #1
 8012bea:	2300      	movne	r3, #0
 8012bec:	b2db      	uxtb	r3, r3
 8012bee:	e012      	b.n	8012c16 <HAL_I2C_Init+0x18e>
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	1e58      	subs	r0, r3, #1
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	6859      	ldr	r1, [r3, #4]
 8012bf8:	460b      	mov	r3, r1
 8012bfa:	009b      	lsls	r3, r3, #2
 8012bfc:	440b      	add	r3, r1
 8012bfe:	0099      	lsls	r1, r3, #2
 8012c00:	440b      	add	r3, r1
 8012c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8012c06:	3301      	adds	r3, #1
 8012c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	bf0c      	ite	eq
 8012c10:	2301      	moveq	r3, #1
 8012c12:	2300      	movne	r3, #0
 8012c14:	b2db      	uxtb	r3, r3
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d001      	beq.n	8012c1e <HAL_I2C_Init+0x196>
 8012c1a:	2301      	movs	r3, #1
 8012c1c:	e022      	b.n	8012c64 <HAL_I2C_Init+0x1dc>
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	689b      	ldr	r3, [r3, #8]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d10e      	bne.n	8012c44 <HAL_I2C_Init+0x1bc>
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	1e58      	subs	r0, r3, #1
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	6859      	ldr	r1, [r3, #4]
 8012c2e:	460b      	mov	r3, r1
 8012c30:	005b      	lsls	r3, r3, #1
 8012c32:	440b      	add	r3, r1
 8012c34:	fbb0 f3f3 	udiv	r3, r0, r3
 8012c38:	3301      	adds	r3, #1
 8012c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012c42:	e00f      	b.n	8012c64 <HAL_I2C_Init+0x1dc>
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	1e58      	subs	r0, r3, #1
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	6859      	ldr	r1, [r3, #4]
 8012c4c:	460b      	mov	r3, r1
 8012c4e:	009b      	lsls	r3, r3, #2
 8012c50:	440b      	add	r3, r1
 8012c52:	0099      	lsls	r1, r3, #2
 8012c54:	440b      	add	r3, r1
 8012c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8012c5a:	3301      	adds	r3, #1
 8012c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012c60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012c64:	6879      	ldr	r1, [r7, #4]
 8012c66:	6809      	ldr	r1, [r1, #0]
 8012c68:	4313      	orrs	r3, r2
 8012c6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	69da      	ldr	r2, [r3, #28]
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	6a1b      	ldr	r3, [r3, #32]
 8012c7e:	431a      	orrs	r2, r3
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	430a      	orrs	r2, r1
 8012c86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	689b      	ldr	r3, [r3, #8]
 8012c8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8012c92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8012c96:	687a      	ldr	r2, [r7, #4]
 8012c98:	6911      	ldr	r1, [r2, #16]
 8012c9a:	687a      	ldr	r2, [r7, #4]
 8012c9c:	68d2      	ldr	r2, [r2, #12]
 8012c9e:	4311      	orrs	r1, r2
 8012ca0:	687a      	ldr	r2, [r7, #4]
 8012ca2:	6812      	ldr	r2, [r2, #0]
 8012ca4:	430b      	orrs	r3, r1
 8012ca6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	68db      	ldr	r3, [r3, #12]
 8012cae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	695a      	ldr	r2, [r3, #20]
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	699b      	ldr	r3, [r3, #24]
 8012cba:	431a      	orrs	r2, r3
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	430a      	orrs	r2, r1
 8012cc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	681a      	ldr	r2, [r3, #0]
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	f042 0201 	orr.w	r2, r2, #1
 8012cd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	2220      	movs	r2, #32
 8012cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	2200      	movs	r2, #0
 8012cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8012cf0:	2300      	movs	r3, #0
}
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	3710      	adds	r7, #16
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	bd80      	pop	{r7, pc}
 8012cfa:	bf00      	nop
 8012cfc:	000186a0 	.word	0x000186a0
 8012d00:	001e847f 	.word	0x001e847f
 8012d04:	003d08ff 	.word	0x003d08ff
 8012d08:	431bde83 	.word	0x431bde83
 8012d0c:	10624dd3 	.word	0x10624dd3

08012d10 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b082      	sub	sp, #8
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d101      	bne.n	8012d22 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8012d1e:	2301      	movs	r3, #1
 8012d20:	e021      	b.n	8012d66 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	2224      	movs	r2, #36	; 0x24
 8012d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	681a      	ldr	r2, [r3, #0]
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	f022 0201 	bic.w	r2, r2, #1
 8012d38:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8012d3a:	6878      	ldr	r0, [r7, #4]
 8012d3c:	f7ef fa7e 	bl	800223c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	2200      	movs	r2, #0
 8012d44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	2200      	movs	r2, #0
 8012d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	2200      	movs	r2, #0
 8012d52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	2200      	movs	r2, #0
 8012d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	2200      	movs	r2, #0
 8012d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012d64:	2300      	movs	r3, #0
}
 8012d66:	4618      	mov	r0, r3
 8012d68:	3708      	adds	r7, #8
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd80      	pop	{r7, pc}
	...

08012d70 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b086      	sub	sp, #24
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	60f8      	str	r0, [r7, #12]
 8012d78:	607a      	str	r2, [r7, #4]
 8012d7a:	461a      	mov	r2, r3
 8012d7c:	460b      	mov	r3, r1
 8012d7e:	817b      	strh	r3, [r7, #10]
 8012d80:	4613      	mov	r3, r2
 8012d82:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8012d84:	2300      	movs	r3, #0
 8012d86:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012d8e:	b2db      	uxtb	r3, r3
 8012d90:	2b20      	cmp	r3, #32
 8012d92:	f040 80f4 	bne.w	8012f7e <HAL_I2C_Master_Receive_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8012d96:	4b7c      	ldr	r3, [pc, #496]	; (8012f88 <HAL_I2C_Master_Receive_DMA+0x218>)
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	08db      	lsrs	r3, r3, #3
 8012d9c:	4a7b      	ldr	r2, [pc, #492]	; (8012f8c <HAL_I2C_Master_Receive_DMA+0x21c>)
 8012d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8012da2:	0a1a      	lsrs	r2, r3, #8
 8012da4:	4613      	mov	r3, r2
 8012da6:	009b      	lsls	r3, r3, #2
 8012da8:	4413      	add	r3, r2
 8012daa:	009a      	lsls	r2, r3, #2
 8012dac:	4413      	add	r3, r2
 8012dae:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8012db0:	693b      	ldr	r3, [r7, #16]
 8012db2:	3b01      	subs	r3, #1
 8012db4:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8012db6:	693b      	ldr	r3, [r7, #16]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d116      	bne.n	8012dea <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	2220      	movs	r2, #32
 8012dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	2200      	movs	r2, #0
 8012dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dd6:	f043 0220 	orr.w	r2, r3, #32
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	2200      	movs	r2, #0
 8012de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8012de6:	2301      	movs	r3, #1
 8012de8:	e0ca      	b.n	8012f80 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	699b      	ldr	r3, [r3, #24]
 8012df0:	f003 0302 	and.w	r3, r3, #2
 8012df4:	2b02      	cmp	r3, #2
 8012df6:	d0db      	beq.n	8012db0 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012dfe:	2b01      	cmp	r3, #1
 8012e00:	d101      	bne.n	8012e06 <HAL_I2C_Master_Receive_DMA+0x96>
 8012e02:	2302      	movs	r3, #2
 8012e04:	e0bc      	b.n	8012f80 <HAL_I2C_Master_Receive_DMA+0x210>
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	2201      	movs	r2, #1
 8012e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	f003 0301 	and.w	r3, r3, #1
 8012e18:	2b01      	cmp	r3, #1
 8012e1a:	d007      	beq.n	8012e2c <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	681a      	ldr	r2, [r3, #0]
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	f042 0201 	orr.w	r2, r2, #1
 8012e2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	681a      	ldr	r2, [r3, #0]
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012e3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	2222      	movs	r2, #34	; 0x22
 8012e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	2210      	movs	r2, #16
 8012e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	2200      	movs	r2, #0
 8012e50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	687a      	ldr	r2, [r7, #4]
 8012e56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	893a      	ldrh	r2, [r7, #8]
 8012e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012e62:	b29a      	uxth	r2, r3
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	4a49      	ldr	r2, [pc, #292]	; (8012f90 <HAL_I2C_Master_Receive_DMA+0x220>)
 8012e6c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8012e6e:	897a      	ldrh	r2, [r7, #10]
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d062      	beq.n	8012f42 <HAL_I2C_Master_Receive_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e80:	4a44      	ldr	r2, [pc, #272]	; (8012f94 <HAL_I2C_Master_Receive_DMA+0x224>)
 8012e82:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e88:	4a43      	ldr	r2, [pc, #268]	; (8012f98 <HAL_I2C_Master_Receive_DMA+0x228>)
 8012e8a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e90:	2200      	movs	r2, #0
 8012e92:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e98:	2200      	movs	r2, #0
 8012e9a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ea8:	2200      	movs	r2, #0
 8012eaa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	3310      	adds	r3, #16
 8012eb6:	4619      	mov	r1, r3
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ebc:	461a      	mov	r2, r3
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ec2:	f7ff f819 	bl	8011ef8 <HAL_DMA_Start_IT>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 8012eca:	7dfb      	ldrb	r3, [r7, #23]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d124      	bne.n	8012f1a <HAL_I2C_Master_Receive_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	681a      	ldr	r2, [r3, #0]
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012ede:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	681a      	ldr	r2, [r3, #0]
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012eee:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	685a      	ldr	r2, [r3, #4]
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8012f06:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	685a      	ldr	r2, [r3, #4]
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012f16:	605a      	str	r2, [r3, #4]
 8012f18:	e02f      	b.n	8012f7a <HAL_I2C_Master_Receive_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	2220      	movs	r2, #32
 8012f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	2200      	movs	r2, #0
 8012f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f2e:	f043 0210 	orr.w	r2, r3, #16
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	2200      	movs	r2, #0
 8012f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8012f3e:	2301      	movs	r3, #1
 8012f40:	e01e      	b.n	8012f80 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	681a      	ldr	r2, [r3, #0]
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012f50:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	681a      	ldr	r2, [r3, #0]
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012f60:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	2200      	movs	r2, #0
 8012f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	685a      	ldr	r2, [r3, #4]
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8012f78:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	e000      	b.n	8012f80 <HAL_I2C_Master_Receive_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 8012f7e:	2302      	movs	r3, #2
  }
}
 8012f80:	4618      	mov	r0, r3
 8012f82:	3718      	adds	r7, #24
 8012f84:	46bd      	mov	sp, r7
 8012f86:	bd80      	pop	{r7, pc}
 8012f88:	2000001c 	.word	0x2000001c
 8012f8c:	14f8b589 	.word	0x14f8b589
 8012f90:	ffff0000 	.word	0xffff0000
 8012f94:	08014709 	.word	0x08014709
 8012f98:	080148b3 	.word	0x080148b3

08012f9c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b088      	sub	sp, #32
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	685b      	ldr	r3, [r3, #4]
 8012fae:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fb4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012fbc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012fc4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8012fc6:	7bfb      	ldrb	r3, [r7, #15]
 8012fc8:	2b10      	cmp	r3, #16
 8012fca:	d003      	beq.n	8012fd4 <HAL_I2C_EV_IRQHandler+0x38>
 8012fcc:	7bfb      	ldrb	r3, [r7, #15]
 8012fce:	2b40      	cmp	r3, #64	; 0x40
 8012fd0:	f040 80bd 	bne.w	801314e <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	699b      	ldr	r3, [r3, #24]
 8012fda:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	695b      	ldr	r3, [r3, #20]
 8012fe2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8012fe4:	69fb      	ldr	r3, [r7, #28]
 8012fe6:	f003 0301 	and.w	r3, r3, #1
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d10d      	bne.n	801300a <HAL_I2C_EV_IRQHandler+0x6e>
 8012fee:	693b      	ldr	r3, [r7, #16]
 8012ff0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8012ff4:	d003      	beq.n	8012ffe <HAL_I2C_EV_IRQHandler+0x62>
 8012ff6:	693b      	ldr	r3, [r7, #16]
 8012ff8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8012ffc:	d101      	bne.n	8013002 <HAL_I2C_EV_IRQHandler+0x66>
 8012ffe:	2301      	movs	r3, #1
 8013000:	e000      	b.n	8013004 <HAL_I2C_EV_IRQHandler+0x68>
 8013002:	2300      	movs	r3, #0
 8013004:	2b01      	cmp	r3, #1
 8013006:	f000 812e 	beq.w	8013266 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801300a:	69fb      	ldr	r3, [r7, #28]
 801300c:	f003 0301 	and.w	r3, r3, #1
 8013010:	2b00      	cmp	r3, #0
 8013012:	d00c      	beq.n	801302e <HAL_I2C_EV_IRQHandler+0x92>
 8013014:	697b      	ldr	r3, [r7, #20]
 8013016:	0a5b      	lsrs	r3, r3, #9
 8013018:	f003 0301 	and.w	r3, r3, #1
 801301c:	2b00      	cmp	r3, #0
 801301e:	d006      	beq.n	801302e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8013020:	6878      	ldr	r0, [r7, #4]
 8013022:	f001 fd5d 	bl	8014ae0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8013026:	6878      	ldr	r0, [r7, #4]
 8013028:	f000 fd58 	bl	8013adc <I2C_Master_SB>
 801302c:	e08e      	b.n	801314c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801302e:	69fb      	ldr	r3, [r7, #28]
 8013030:	08db      	lsrs	r3, r3, #3
 8013032:	f003 0301 	and.w	r3, r3, #1
 8013036:	2b00      	cmp	r3, #0
 8013038:	d009      	beq.n	801304e <HAL_I2C_EV_IRQHandler+0xb2>
 801303a:	697b      	ldr	r3, [r7, #20]
 801303c:	0a5b      	lsrs	r3, r3, #9
 801303e:	f003 0301 	and.w	r3, r3, #1
 8013042:	2b00      	cmp	r3, #0
 8013044:	d003      	beq.n	801304e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8013046:	6878      	ldr	r0, [r7, #4]
 8013048:	f000 fdce 	bl	8013be8 <I2C_Master_ADD10>
 801304c:	e07e      	b.n	801314c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801304e:	69fb      	ldr	r3, [r7, #28]
 8013050:	085b      	lsrs	r3, r3, #1
 8013052:	f003 0301 	and.w	r3, r3, #1
 8013056:	2b00      	cmp	r3, #0
 8013058:	d009      	beq.n	801306e <HAL_I2C_EV_IRQHandler+0xd2>
 801305a:	697b      	ldr	r3, [r7, #20]
 801305c:	0a5b      	lsrs	r3, r3, #9
 801305e:	f003 0301 	and.w	r3, r3, #1
 8013062:	2b00      	cmp	r3, #0
 8013064:	d003      	beq.n	801306e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8013066:	6878      	ldr	r0, [r7, #4]
 8013068:	f000 fde8 	bl	8013c3c <I2C_Master_ADDR>
 801306c:	e06e      	b.n	801314c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 801306e:	69bb      	ldr	r3, [r7, #24]
 8013070:	089b      	lsrs	r3, r3, #2
 8013072:	f003 0301 	and.w	r3, r3, #1
 8013076:	2b00      	cmp	r3, #0
 8013078:	d037      	beq.n	80130ea <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	685b      	ldr	r3, [r3, #4]
 8013080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013088:	f000 80ef 	beq.w	801326a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801308c:	69fb      	ldr	r3, [r7, #28]
 801308e:	09db      	lsrs	r3, r3, #7
 8013090:	f003 0301 	and.w	r3, r3, #1
 8013094:	2b00      	cmp	r3, #0
 8013096:	d00f      	beq.n	80130b8 <HAL_I2C_EV_IRQHandler+0x11c>
 8013098:	697b      	ldr	r3, [r7, #20]
 801309a:	0a9b      	lsrs	r3, r3, #10
 801309c:	f003 0301 	and.w	r3, r3, #1
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d009      	beq.n	80130b8 <HAL_I2C_EV_IRQHandler+0x11c>
 80130a4:	69fb      	ldr	r3, [r7, #28]
 80130a6:	089b      	lsrs	r3, r3, #2
 80130a8:	f003 0301 	and.w	r3, r3, #1
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d103      	bne.n	80130b8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80130b0:	6878      	ldr	r0, [r7, #4]
 80130b2:	f000 f9e5 	bl	8013480 <I2C_MasterTransmit_TXE>
 80130b6:	e049      	b.n	801314c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80130b8:	69fb      	ldr	r3, [r7, #28]
 80130ba:	089b      	lsrs	r3, r3, #2
 80130bc:	f003 0301 	and.w	r3, r3, #1
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	f000 80d2 	beq.w	801326a <HAL_I2C_EV_IRQHandler+0x2ce>
 80130c6:	697b      	ldr	r3, [r7, #20]
 80130c8:	0a5b      	lsrs	r3, r3, #9
 80130ca:	f003 0301 	and.w	r3, r3, #1
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	f000 80cb 	beq.w	801326a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80130d4:	7bfb      	ldrb	r3, [r7, #15]
 80130d6:	2b10      	cmp	r3, #16
 80130d8:	d103      	bne.n	80130e2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80130da:	6878      	ldr	r0, [r7, #4]
 80130dc:	f000 fa6c 	bl	80135b8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80130e0:	e0c3      	b.n	801326a <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80130e2:	6878      	ldr	r0, [r7, #4]
 80130e4:	f000 fad0 	bl	8013688 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80130e8:	e0bf      	b.n	801326a <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	685b      	ldr	r3, [r3, #4]
 80130f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80130f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80130f8:	f000 80b7 	beq.w	801326a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80130fc:	69fb      	ldr	r3, [r7, #28]
 80130fe:	099b      	lsrs	r3, r3, #6
 8013100:	f003 0301 	and.w	r3, r3, #1
 8013104:	2b00      	cmp	r3, #0
 8013106:	d00f      	beq.n	8013128 <HAL_I2C_EV_IRQHandler+0x18c>
 8013108:	697b      	ldr	r3, [r7, #20]
 801310a:	0a9b      	lsrs	r3, r3, #10
 801310c:	f003 0301 	and.w	r3, r3, #1
 8013110:	2b00      	cmp	r3, #0
 8013112:	d009      	beq.n	8013128 <HAL_I2C_EV_IRQHandler+0x18c>
 8013114:	69fb      	ldr	r3, [r7, #28]
 8013116:	089b      	lsrs	r3, r3, #2
 8013118:	f003 0301 	and.w	r3, r3, #1
 801311c:	2b00      	cmp	r3, #0
 801311e:	d103      	bne.n	8013128 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8013120:	6878      	ldr	r0, [r7, #4]
 8013122:	f000 fb40 	bl	80137a6 <I2C_MasterReceive_RXNE>
 8013126:	e011      	b.n	801314c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8013128:	69fb      	ldr	r3, [r7, #28]
 801312a:	089b      	lsrs	r3, r3, #2
 801312c:	f003 0301 	and.w	r3, r3, #1
 8013130:	2b00      	cmp	r3, #0
 8013132:	f000 809a 	beq.w	801326a <HAL_I2C_EV_IRQHandler+0x2ce>
 8013136:	697b      	ldr	r3, [r7, #20]
 8013138:	0a5b      	lsrs	r3, r3, #9
 801313a:	f003 0301 	and.w	r3, r3, #1
 801313e:	2b00      	cmp	r3, #0
 8013140:	f000 8093 	beq.w	801326a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8013144:	6878      	ldr	r0, [r7, #4]
 8013146:	f000 fbdf 	bl	8013908 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801314a:	e08e      	b.n	801326a <HAL_I2C_EV_IRQHandler+0x2ce>
 801314c:	e08d      	b.n	801326a <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013152:	2b00      	cmp	r3, #0
 8013154:	d004      	beq.n	8013160 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	695b      	ldr	r3, [r3, #20]
 801315c:	61fb      	str	r3, [r7, #28]
 801315e:	e007      	b.n	8013170 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	699b      	ldr	r3, [r3, #24]
 8013166:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	695b      	ldr	r3, [r3, #20]
 801316e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8013170:	69fb      	ldr	r3, [r7, #28]
 8013172:	085b      	lsrs	r3, r3, #1
 8013174:	f003 0301 	and.w	r3, r3, #1
 8013178:	2b00      	cmp	r3, #0
 801317a:	d012      	beq.n	80131a2 <HAL_I2C_EV_IRQHandler+0x206>
 801317c:	697b      	ldr	r3, [r7, #20]
 801317e:	0a5b      	lsrs	r3, r3, #9
 8013180:	f003 0301 	and.w	r3, r3, #1
 8013184:	2b00      	cmp	r3, #0
 8013186:	d00c      	beq.n	80131a2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801318c:	2b00      	cmp	r3, #0
 801318e:	d003      	beq.n	8013198 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	699b      	ldr	r3, [r3, #24]
 8013196:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8013198:	69b9      	ldr	r1, [r7, #24]
 801319a:	6878      	ldr	r0, [r7, #4]
 801319c:	f000 ff9d 	bl	80140da <I2C_Slave_ADDR>
 80131a0:	e066      	b.n	8013270 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80131a2:	69fb      	ldr	r3, [r7, #28]
 80131a4:	091b      	lsrs	r3, r3, #4
 80131a6:	f003 0301 	and.w	r3, r3, #1
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d009      	beq.n	80131c2 <HAL_I2C_EV_IRQHandler+0x226>
 80131ae:	697b      	ldr	r3, [r7, #20]
 80131b0:	0a5b      	lsrs	r3, r3, #9
 80131b2:	f003 0301 	and.w	r3, r3, #1
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d003      	beq.n	80131c2 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80131ba:	6878      	ldr	r0, [r7, #4]
 80131bc:	f000 ffd2 	bl	8014164 <I2C_Slave_STOPF>
 80131c0:	e056      	b.n	8013270 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80131c2:	7bbb      	ldrb	r3, [r7, #14]
 80131c4:	2b21      	cmp	r3, #33	; 0x21
 80131c6:	d002      	beq.n	80131ce <HAL_I2C_EV_IRQHandler+0x232>
 80131c8:	7bbb      	ldrb	r3, [r7, #14]
 80131ca:	2b29      	cmp	r3, #41	; 0x29
 80131cc:	d125      	bne.n	801321a <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80131ce:	69fb      	ldr	r3, [r7, #28]
 80131d0:	09db      	lsrs	r3, r3, #7
 80131d2:	f003 0301 	and.w	r3, r3, #1
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d00f      	beq.n	80131fa <HAL_I2C_EV_IRQHandler+0x25e>
 80131da:	697b      	ldr	r3, [r7, #20]
 80131dc:	0a9b      	lsrs	r3, r3, #10
 80131de:	f003 0301 	and.w	r3, r3, #1
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d009      	beq.n	80131fa <HAL_I2C_EV_IRQHandler+0x25e>
 80131e6:	69fb      	ldr	r3, [r7, #28]
 80131e8:	089b      	lsrs	r3, r3, #2
 80131ea:	f003 0301 	and.w	r3, r3, #1
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d103      	bne.n	80131fa <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80131f2:	6878      	ldr	r0, [r7, #4]
 80131f4:	f000 feb3 	bl	8013f5e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80131f8:	e039      	b.n	801326e <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80131fa:	69fb      	ldr	r3, [r7, #28]
 80131fc:	089b      	lsrs	r3, r3, #2
 80131fe:	f003 0301 	and.w	r3, r3, #1
 8013202:	2b00      	cmp	r3, #0
 8013204:	d033      	beq.n	801326e <HAL_I2C_EV_IRQHandler+0x2d2>
 8013206:	697b      	ldr	r3, [r7, #20]
 8013208:	0a5b      	lsrs	r3, r3, #9
 801320a:	f003 0301 	and.w	r3, r3, #1
 801320e:	2b00      	cmp	r3, #0
 8013210:	d02d      	beq.n	801326e <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8013212:	6878      	ldr	r0, [r7, #4]
 8013214:	f000 fee0 	bl	8013fd8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8013218:	e029      	b.n	801326e <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801321a:	69fb      	ldr	r3, [r7, #28]
 801321c:	099b      	lsrs	r3, r3, #6
 801321e:	f003 0301 	and.w	r3, r3, #1
 8013222:	2b00      	cmp	r3, #0
 8013224:	d00f      	beq.n	8013246 <HAL_I2C_EV_IRQHandler+0x2aa>
 8013226:	697b      	ldr	r3, [r7, #20]
 8013228:	0a9b      	lsrs	r3, r3, #10
 801322a:	f003 0301 	and.w	r3, r3, #1
 801322e:	2b00      	cmp	r3, #0
 8013230:	d009      	beq.n	8013246 <HAL_I2C_EV_IRQHandler+0x2aa>
 8013232:	69fb      	ldr	r3, [r7, #28]
 8013234:	089b      	lsrs	r3, r3, #2
 8013236:	f003 0301 	and.w	r3, r3, #1
 801323a:	2b00      	cmp	r3, #0
 801323c:	d103      	bne.n	8013246 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 801323e:	6878      	ldr	r0, [r7, #4]
 8013240:	f000 feeb 	bl	801401a <I2C_SlaveReceive_RXNE>
 8013244:	e014      	b.n	8013270 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8013246:	69fb      	ldr	r3, [r7, #28]
 8013248:	089b      	lsrs	r3, r3, #2
 801324a:	f003 0301 	and.w	r3, r3, #1
 801324e:	2b00      	cmp	r3, #0
 8013250:	d00e      	beq.n	8013270 <HAL_I2C_EV_IRQHandler+0x2d4>
 8013252:	697b      	ldr	r3, [r7, #20]
 8013254:	0a5b      	lsrs	r3, r3, #9
 8013256:	f003 0301 	and.w	r3, r3, #1
 801325a:	2b00      	cmp	r3, #0
 801325c:	d008      	beq.n	8013270 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 801325e:	6878      	ldr	r0, [r7, #4]
 8013260:	f000 ff19 	bl	8014096 <I2C_SlaveReceive_BTF>
 8013264:	e004      	b.n	8013270 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8013266:	bf00      	nop
 8013268:	e002      	b.n	8013270 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801326a:	bf00      	nop
 801326c:	e000      	b.n	8013270 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801326e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8013270:	3720      	adds	r7, #32
 8013272:	46bd      	mov	sp, r7
 8013274:	bd80      	pop	{r7, pc}

08013276 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8013276:	b580      	push	{r7, lr}
 8013278:	b08a      	sub	sp, #40	; 0x28
 801327a:	af00      	add	r7, sp, #0
 801327c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	695b      	ldr	r3, [r3, #20]
 8013284:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	685b      	ldr	r3, [r3, #4]
 801328c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 801328e:	2300      	movs	r3, #0
 8013290:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013298:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801329a:	6a3b      	ldr	r3, [r7, #32]
 801329c:	0a1b      	lsrs	r3, r3, #8
 801329e:	f003 0301 	and.w	r3, r3, #1
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d00e      	beq.n	80132c4 <HAL_I2C_ER_IRQHandler+0x4e>
 80132a6:	69fb      	ldr	r3, [r7, #28]
 80132a8:	0a1b      	lsrs	r3, r3, #8
 80132aa:	f003 0301 	and.w	r3, r3, #1
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d008      	beq.n	80132c4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80132b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132b4:	f043 0301 	orr.w	r3, r3, #1
 80132b8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80132c2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80132c4:	6a3b      	ldr	r3, [r7, #32]
 80132c6:	0a5b      	lsrs	r3, r3, #9
 80132c8:	f003 0301 	and.w	r3, r3, #1
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d00e      	beq.n	80132ee <HAL_I2C_ER_IRQHandler+0x78>
 80132d0:	69fb      	ldr	r3, [r7, #28]
 80132d2:	0a1b      	lsrs	r3, r3, #8
 80132d4:	f003 0301 	and.w	r3, r3, #1
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d008      	beq.n	80132ee <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80132dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132de:	f043 0302 	orr.w	r3, r3, #2
 80132e2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80132ec:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80132ee:	6a3b      	ldr	r3, [r7, #32]
 80132f0:	0a9b      	lsrs	r3, r3, #10
 80132f2:	f003 0301 	and.w	r3, r3, #1
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d03f      	beq.n	801337a <HAL_I2C_ER_IRQHandler+0x104>
 80132fa:	69fb      	ldr	r3, [r7, #28]
 80132fc:	0a1b      	lsrs	r3, r3, #8
 80132fe:	f003 0301 	and.w	r3, r3, #1
 8013302:	2b00      	cmp	r3, #0
 8013304:	d039      	beq.n	801337a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8013306:	7efb      	ldrb	r3, [r7, #27]
 8013308:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801330e:	b29b      	uxth	r3, r3
 8013310:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013318:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801331e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8013320:	7ebb      	ldrb	r3, [r7, #26]
 8013322:	2b20      	cmp	r3, #32
 8013324:	d112      	bne.n	801334c <HAL_I2C_ER_IRQHandler+0xd6>
 8013326:	697b      	ldr	r3, [r7, #20]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d10f      	bne.n	801334c <HAL_I2C_ER_IRQHandler+0xd6>
 801332c:	7cfb      	ldrb	r3, [r7, #19]
 801332e:	2b21      	cmp	r3, #33	; 0x21
 8013330:	d008      	beq.n	8013344 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8013332:	7cfb      	ldrb	r3, [r7, #19]
 8013334:	2b29      	cmp	r3, #41	; 0x29
 8013336:	d005      	beq.n	8013344 <HAL_I2C_ER_IRQHandler+0xce>
 8013338:	7cfb      	ldrb	r3, [r7, #19]
 801333a:	2b28      	cmp	r3, #40	; 0x28
 801333c:	d106      	bne.n	801334c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	2b21      	cmp	r3, #33	; 0x21
 8013342:	d103      	bne.n	801334c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f001 f83d 	bl	80143c4 <I2C_Slave_AF>
 801334a:	e016      	b.n	801337a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8013354:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8013356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013358:	f043 0304 	orr.w	r3, r3, #4
 801335c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801335e:	7efb      	ldrb	r3, [r7, #27]
 8013360:	2b10      	cmp	r3, #16
 8013362:	d002      	beq.n	801336a <HAL_I2C_ER_IRQHandler+0xf4>
 8013364:	7efb      	ldrb	r3, [r7, #27]
 8013366:	2b40      	cmp	r3, #64	; 0x40
 8013368:	d107      	bne.n	801337a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	681a      	ldr	r2, [r3, #0]
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013378:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801337a:	6a3b      	ldr	r3, [r7, #32]
 801337c:	0adb      	lsrs	r3, r3, #11
 801337e:	f003 0301 	and.w	r3, r3, #1
 8013382:	2b00      	cmp	r3, #0
 8013384:	d00e      	beq.n	80133a4 <HAL_I2C_ER_IRQHandler+0x12e>
 8013386:	69fb      	ldr	r3, [r7, #28]
 8013388:	0a1b      	lsrs	r3, r3, #8
 801338a:	f003 0301 	and.w	r3, r3, #1
 801338e:	2b00      	cmp	r3, #0
 8013390:	d008      	beq.n	80133a4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8013392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013394:	f043 0308 	orr.w	r3, r3, #8
 8013398:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80133a2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80133a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d008      	beq.n	80133bc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80133ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133b0:	431a      	orrs	r2, r3
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80133b6:	6878      	ldr	r0, [r7, #4]
 80133b8:	f001 f874 	bl	80144a4 <I2C_ITError>
  }
}
 80133bc:	bf00      	nop
 80133be:	3728      	adds	r7, #40	; 0x28
 80133c0:	46bd      	mov	sp, r7
 80133c2:	bd80      	pop	{r7, pc}

080133c4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80133c4:	b480      	push	{r7}
 80133c6:	b083      	sub	sp, #12
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80133cc:	bf00      	nop
 80133ce:	370c      	adds	r7, #12
 80133d0:	46bd      	mov	sp, r7
 80133d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d6:	4770      	bx	lr

080133d8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80133d8:	b480      	push	{r7}
 80133da:	b083      	sub	sp, #12
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80133e0:	bf00      	nop
 80133e2:	370c      	adds	r7, #12
 80133e4:	46bd      	mov	sp, r7
 80133e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ea:	4770      	bx	lr

080133ec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80133ec:	b480      	push	{r7}
 80133ee:	b083      	sub	sp, #12
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80133f4:	bf00      	nop
 80133f6:	370c      	adds	r7, #12
 80133f8:	46bd      	mov	sp, r7
 80133fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fe:	4770      	bx	lr

08013400 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8013400:	b480      	push	{r7}
 8013402:	b083      	sub	sp, #12
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
 8013408:	460b      	mov	r3, r1
 801340a:	70fb      	strb	r3, [r7, #3]
 801340c:	4613      	mov	r3, r2
 801340e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8013410:	bf00      	nop
 8013412:	370c      	adds	r7, #12
 8013414:	46bd      	mov	sp, r7
 8013416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801341a:	4770      	bx	lr

0801341c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801341c:	b480      	push	{r7}
 801341e:	b083      	sub	sp, #12
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8013424:	bf00      	nop
 8013426:	370c      	adds	r7, #12
 8013428:	46bd      	mov	sp, r7
 801342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801342e:	4770      	bx	lr

08013430 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013430:	b480      	push	{r7}
 8013432:	b083      	sub	sp, #12
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8013438:	bf00      	nop
 801343a:	370c      	adds	r7, #12
 801343c:	46bd      	mov	sp, r7
 801343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013442:	4770      	bx	lr

08013444 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013444:	b480      	push	{r7}
 8013446:	b083      	sub	sp, #12
 8013448:	af00      	add	r7, sp, #0
 801344a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 801344c:	bf00      	nop
 801344e:	370c      	adds	r7, #12
 8013450:	46bd      	mov	sp, r7
 8013452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013456:	4770      	bx	lr

08013458 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8013458:	b480      	push	{r7}
 801345a:	b083      	sub	sp, #12
 801345c:	af00      	add	r7, sp, #0
 801345e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8013460:	bf00      	nop
 8013462:	370c      	adds	r7, #12
 8013464:	46bd      	mov	sp, r7
 8013466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346a:	4770      	bx	lr

0801346c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801346c:	b480      	push	{r7}
 801346e:	b083      	sub	sp, #12
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8013474:	bf00      	nop
 8013476:	370c      	adds	r7, #12
 8013478:	46bd      	mov	sp, r7
 801347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801347e:	4770      	bx	lr

08013480 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b084      	sub	sp, #16
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801348e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013496:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801349c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d150      	bne.n	8013548 <I2C_MasterTransmit_TXE+0xc8>
 80134a6:	7bfb      	ldrb	r3, [r7, #15]
 80134a8:	2b21      	cmp	r3, #33	; 0x21
 80134aa:	d14d      	bne.n	8013548 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80134ac:	68bb      	ldr	r3, [r7, #8]
 80134ae:	2b08      	cmp	r3, #8
 80134b0:	d01d      	beq.n	80134ee <I2C_MasterTransmit_TXE+0x6e>
 80134b2:	68bb      	ldr	r3, [r7, #8]
 80134b4:	2b20      	cmp	r3, #32
 80134b6:	d01a      	beq.n	80134ee <I2C_MasterTransmit_TXE+0x6e>
 80134b8:	68bb      	ldr	r3, [r7, #8]
 80134ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80134be:	d016      	beq.n	80134ee <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	685a      	ldr	r2, [r3, #4]
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80134ce:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	2211      	movs	r2, #17
 80134d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	2200      	movs	r2, #0
 80134da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	2220      	movs	r2, #32
 80134e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80134e6:	6878      	ldr	r0, [r7, #4]
 80134e8:	f7ff ff6c 	bl	80133c4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80134ec:	e060      	b.n	80135b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	685a      	ldr	r2, [r3, #4]
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80134fc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	681a      	ldr	r2, [r3, #0]
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801350c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	2200      	movs	r2, #0
 8013512:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	2220      	movs	r2, #32
 8013518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013522:	b2db      	uxtb	r3, r3
 8013524:	2b40      	cmp	r3, #64	; 0x40
 8013526:	d107      	bne.n	8013538 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	2200      	movs	r2, #0
 801352c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8013530:	6878      	ldr	r0, [r7, #4]
 8013532:	f7ff ff7d 	bl	8013430 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8013536:	e03b      	b.n	80135b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	2200      	movs	r2, #0
 801353c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8013540:	6878      	ldr	r0, [r7, #4]
 8013542:	f7ff ff3f 	bl	80133c4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8013546:	e033      	b.n	80135b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8013548:	7bfb      	ldrb	r3, [r7, #15]
 801354a:	2b21      	cmp	r3, #33	; 0x21
 801354c:	d005      	beq.n	801355a <I2C_MasterTransmit_TXE+0xda>
 801354e:	7bbb      	ldrb	r3, [r7, #14]
 8013550:	2b40      	cmp	r3, #64	; 0x40
 8013552:	d12d      	bne.n	80135b0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8013554:	7bfb      	ldrb	r3, [r7, #15]
 8013556:	2b22      	cmp	r3, #34	; 0x22
 8013558:	d12a      	bne.n	80135b0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801355e:	b29b      	uxth	r3, r3
 8013560:	2b00      	cmp	r3, #0
 8013562:	d108      	bne.n	8013576 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	685a      	ldr	r2, [r3, #4]
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013572:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8013574:	e01c      	b.n	80135b0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801357c:	b2db      	uxtb	r3, r3
 801357e:	2b40      	cmp	r3, #64	; 0x40
 8013580:	d103      	bne.n	801358a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8013582:	6878      	ldr	r0, [r7, #4]
 8013584:	f000 f880 	bl	8013688 <I2C_MemoryTransmit_TXE_BTF>
}
 8013588:	e012      	b.n	80135b0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801358e:	781a      	ldrb	r2, [r3, #0]
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801359a:	1c5a      	adds	r2, r3, #1
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80135a4:	b29b      	uxth	r3, r3
 80135a6:	3b01      	subs	r3, #1
 80135a8:	b29a      	uxth	r2, r3
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80135ae:	e7ff      	b.n	80135b0 <I2C_MasterTransmit_TXE+0x130>
 80135b0:	bf00      	nop
 80135b2:	3710      	adds	r7, #16
 80135b4:	46bd      	mov	sp, r7
 80135b6:	bd80      	pop	{r7, pc}

080135b8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b084      	sub	sp, #16
 80135bc:	af00      	add	r7, sp, #0
 80135be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135c4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80135cc:	b2db      	uxtb	r3, r3
 80135ce:	2b21      	cmp	r3, #33	; 0x21
 80135d0:	d156      	bne.n	8013680 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80135d6:	b29b      	uxth	r3, r3
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d012      	beq.n	8013602 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135e0:	781a      	ldrb	r2, [r3, #0]
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135ec:	1c5a      	adds	r2, r3, #1
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80135f6:	b29b      	uxth	r3, r3
 80135f8:	3b01      	subs	r3, #1
 80135fa:	b29a      	uxth	r2, r3
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8013600:	e03e      	b.n	8013680 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	2b08      	cmp	r3, #8
 8013606:	d01d      	beq.n	8013644 <I2C_MasterTransmit_BTF+0x8c>
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	2b20      	cmp	r3, #32
 801360c:	d01a      	beq.n	8013644 <I2C_MasterTransmit_BTF+0x8c>
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8013614:	d016      	beq.n	8013644 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	685a      	ldr	r2, [r3, #4]
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8013624:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	2211      	movs	r2, #17
 801362a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	2200      	movs	r2, #0
 8013630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	2220      	movs	r2, #32
 8013638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801363c:	6878      	ldr	r0, [r7, #4]
 801363e:	f7ff fec1 	bl	80133c4 <HAL_I2C_MasterTxCpltCallback>
}
 8013642:	e01d      	b.n	8013680 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	685a      	ldr	r2, [r3, #4]
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8013652:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	681a      	ldr	r2, [r3, #0]
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013662:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	2200      	movs	r2, #0
 8013668:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	2220      	movs	r2, #32
 801366e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	2200      	movs	r2, #0
 8013676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801367a:	6878      	ldr	r0, [r7, #4]
 801367c:	f7ff fea2 	bl	80133c4 <HAL_I2C_MasterTxCpltCallback>
}
 8013680:	bf00      	nop
 8013682:	3710      	adds	r7, #16
 8013684:	46bd      	mov	sp, r7
 8013686:	bd80      	pop	{r7, pc}

08013688 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8013688:	b580      	push	{r7, lr}
 801368a:	b084      	sub	sp, #16
 801368c:	af00      	add	r7, sp, #0
 801368e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013696:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801369c:	2b00      	cmp	r3, #0
 801369e:	d11d      	bne.n	80136dc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80136a4:	2b01      	cmp	r3, #1
 80136a6:	d10b      	bne.n	80136c0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80136ac:	b2da      	uxtb	r2, r3
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80136b8:	1c9a      	adds	r2, r3, #2
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80136be:	e06e      	b.n	801379e <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80136c4:	b29b      	uxth	r3, r3
 80136c6:	121b      	asrs	r3, r3, #8
 80136c8:	b2da      	uxtb	r2, r3
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80136d4:	1c5a      	adds	r2, r3, #1
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80136da:	e060      	b.n	801379e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80136e0:	2b01      	cmp	r3, #1
 80136e2:	d10b      	bne.n	80136fc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80136e8:	b2da      	uxtb	r2, r3
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80136f4:	1c5a      	adds	r2, r3, #1
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80136fa:	e050      	b.n	801379e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013700:	2b02      	cmp	r3, #2
 8013702:	d14c      	bne.n	801379e <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8013704:	7bfb      	ldrb	r3, [r7, #15]
 8013706:	2b22      	cmp	r3, #34	; 0x22
 8013708:	d108      	bne.n	801371c <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	681a      	ldr	r2, [r3, #0]
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013718:	601a      	str	r2, [r3, #0]
}
 801371a:	e040      	b.n	801379e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013720:	b29b      	uxth	r3, r3
 8013722:	2b00      	cmp	r3, #0
 8013724:	d015      	beq.n	8013752 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8013726:	7bfb      	ldrb	r3, [r7, #15]
 8013728:	2b21      	cmp	r3, #33	; 0x21
 801372a:	d112      	bne.n	8013752 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013730:	781a      	ldrb	r2, [r3, #0]
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801373c:	1c5a      	adds	r2, r3, #1
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013746:	b29b      	uxth	r3, r3
 8013748:	3b01      	subs	r3, #1
 801374a:	b29a      	uxth	r2, r3
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8013750:	e025      	b.n	801379e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013756:	b29b      	uxth	r3, r3
 8013758:	2b00      	cmp	r3, #0
 801375a:	d120      	bne.n	801379e <I2C_MemoryTransmit_TXE_BTF+0x116>
 801375c:	7bfb      	ldrb	r3, [r7, #15]
 801375e:	2b21      	cmp	r3, #33	; 0x21
 8013760:	d11d      	bne.n	801379e <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	685a      	ldr	r2, [r3, #4]
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8013770:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	681a      	ldr	r2, [r3, #0]
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013780:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	2200      	movs	r2, #0
 8013786:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	2220      	movs	r2, #32
 801378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	2200      	movs	r2, #0
 8013794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8013798:	6878      	ldr	r0, [r7, #4]
 801379a:	f7ff fe49 	bl	8013430 <HAL_I2C_MemTxCpltCallback>
}
 801379e:	bf00      	nop
 80137a0:	3710      	adds	r7, #16
 80137a2:	46bd      	mov	sp, r7
 80137a4:	bd80      	pop	{r7, pc}

080137a6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80137a6:	b580      	push	{r7, lr}
 80137a8:	b084      	sub	sp, #16
 80137aa:	af00      	add	r7, sp, #0
 80137ac:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80137b4:	b2db      	uxtb	r3, r3
 80137b6:	2b22      	cmp	r3, #34	; 0x22
 80137b8:	f040 80a2 	bne.w	8013900 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80137c0:	b29b      	uxth	r3, r3
 80137c2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	2b03      	cmp	r3, #3
 80137c8:	d921      	bls.n	801380e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	691a      	ldr	r2, [r3, #16]
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137d4:	b2d2      	uxtb	r2, r2
 80137d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137dc:	1c5a      	adds	r2, r3, #1
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80137e6:	b29b      	uxth	r3, r3
 80137e8:	3b01      	subs	r3, #1
 80137ea:	b29a      	uxth	r2, r3
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80137f4:	b29b      	uxth	r3, r3
 80137f6:	2b03      	cmp	r3, #3
 80137f8:	f040 8082 	bne.w	8013900 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	685a      	ldr	r2, [r3, #4]
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801380a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 801380c:	e078      	b.n	8013900 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013812:	2b02      	cmp	r3, #2
 8013814:	d074      	beq.n	8013900 <I2C_MasterReceive_RXNE+0x15a>
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	2b01      	cmp	r3, #1
 801381a:	d002      	beq.n	8013822 <I2C_MasterReceive_RXNE+0x7c>
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d16e      	bne.n	8013900 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8013822:	6878      	ldr	r0, [r7, #4]
 8013824:	f001 f92a 	bl	8014a7c <I2C_WaitOnSTOPRequestThroughIT>
 8013828:	4603      	mov	r3, r0
 801382a:	2b00      	cmp	r3, #0
 801382c:	d142      	bne.n	80138b4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	681a      	ldr	r2, [r3, #0]
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801383c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	685a      	ldr	r2, [r3, #4]
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801384c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	691a      	ldr	r2, [r3, #16]
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013858:	b2d2      	uxtb	r2, r2
 801385a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013860:	1c5a      	adds	r2, r3, #1
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801386a:	b29b      	uxth	r3, r3
 801386c:	3b01      	subs	r3, #1
 801386e:	b29a      	uxth	r2, r3
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	2220      	movs	r2, #32
 8013878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013882:	b2db      	uxtb	r3, r3
 8013884:	2b40      	cmp	r3, #64	; 0x40
 8013886:	d10a      	bne.n	801389e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	2200      	movs	r2, #0
 801388c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	2200      	movs	r2, #0
 8013894:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8013896:	6878      	ldr	r0, [r7, #4]
 8013898:	f7ff fdd4 	bl	8013444 <HAL_I2C_MemRxCpltCallback>
}
 801389c:	e030      	b.n	8013900 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	2200      	movs	r2, #0
 80138a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	2212      	movs	r2, #18
 80138aa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80138ac:	6878      	ldr	r0, [r7, #4]
 80138ae:	f7f8 fd37 	bl	800c320 <HAL_I2C_MasterRxCpltCallback>
}
 80138b2:	e025      	b.n	8013900 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	685a      	ldr	r2, [r3, #4]
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80138c2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	691a      	ldr	r2, [r3, #16]
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ce:	b2d2      	uxtb	r2, r2
 80138d0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138d6:	1c5a      	adds	r2, r3, #1
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80138e0:	b29b      	uxth	r3, r3
 80138e2:	3b01      	subs	r3, #1
 80138e4:	b29a      	uxth	r2, r3
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	2220      	movs	r2, #32
 80138ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	2200      	movs	r2, #0
 80138f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80138fa:	6878      	ldr	r0, [r7, #4]
 80138fc:	f7ff fdac 	bl	8013458 <HAL_I2C_ErrorCallback>
}
 8013900:	bf00      	nop
 8013902:	3710      	adds	r7, #16
 8013904:	46bd      	mov	sp, r7
 8013906:	bd80      	pop	{r7, pc}

08013908 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8013908:	b580      	push	{r7, lr}
 801390a:	b084      	sub	sp, #16
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013914:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801391a:	b29b      	uxth	r3, r3
 801391c:	2b04      	cmp	r3, #4
 801391e:	d11b      	bne.n	8013958 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	685a      	ldr	r2, [r3, #4]
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801392e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	691a      	ldr	r2, [r3, #16]
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801393a:	b2d2      	uxtb	r2, r2
 801393c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013942:	1c5a      	adds	r2, r3, #1
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801394c:	b29b      	uxth	r3, r3
 801394e:	3b01      	subs	r3, #1
 8013950:	b29a      	uxth	r2, r3
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8013956:	e0bd      	b.n	8013ad4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801395c:	b29b      	uxth	r3, r3
 801395e:	2b03      	cmp	r3, #3
 8013960:	d129      	bne.n	80139b6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	685a      	ldr	r2, [r3, #4]
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013970:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	2b04      	cmp	r3, #4
 8013976:	d00a      	beq.n	801398e <I2C_MasterReceive_BTF+0x86>
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	2b02      	cmp	r3, #2
 801397c:	d007      	beq.n	801398e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	681a      	ldr	r2, [r3, #0]
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801398c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	691a      	ldr	r2, [r3, #16]
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013998:	b2d2      	uxtb	r2, r2
 801399a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139a0:	1c5a      	adds	r2, r3, #1
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80139aa:	b29b      	uxth	r3, r3
 80139ac:	3b01      	subs	r3, #1
 80139ae:	b29a      	uxth	r2, r3
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80139b4:	e08e      	b.n	8013ad4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80139ba:	b29b      	uxth	r3, r3
 80139bc:	2b02      	cmp	r3, #2
 80139be:	d176      	bne.n	8013aae <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	2b01      	cmp	r3, #1
 80139c4:	d002      	beq.n	80139cc <I2C_MasterReceive_BTF+0xc4>
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	2b10      	cmp	r3, #16
 80139ca:	d108      	bne.n	80139de <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	681a      	ldr	r2, [r3, #0]
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80139da:	601a      	str	r2, [r3, #0]
 80139dc:	e019      	b.n	8013a12 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	2b04      	cmp	r3, #4
 80139e2:	d002      	beq.n	80139ea <I2C_MasterReceive_BTF+0xe2>
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	2b02      	cmp	r3, #2
 80139e8:	d108      	bne.n	80139fc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	681a      	ldr	r2, [r3, #0]
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80139f8:	601a      	str	r2, [r3, #0]
 80139fa:	e00a      	b.n	8013a12 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	2b10      	cmp	r3, #16
 8013a00:	d007      	beq.n	8013a12 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	681a      	ldr	r2, [r3, #0]
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013a10:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	691a      	ldr	r2, [r3, #16]
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a1c:	b2d2      	uxtb	r2, r2
 8013a1e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a24:	1c5a      	adds	r2, r3, #1
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013a2e:	b29b      	uxth	r3, r3
 8013a30:	3b01      	subs	r3, #1
 8013a32:	b29a      	uxth	r2, r3
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	691a      	ldr	r2, [r3, #16]
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a42:	b2d2      	uxtb	r2, r2
 8013a44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a4a:	1c5a      	adds	r2, r3, #1
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013a54:	b29b      	uxth	r3, r3
 8013a56:	3b01      	subs	r3, #1
 8013a58:	b29a      	uxth	r2, r3
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	685a      	ldr	r2, [r3, #4]
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8013a6c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	2220      	movs	r2, #32
 8013a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013a7c:	b2db      	uxtb	r3, r3
 8013a7e:	2b40      	cmp	r3, #64	; 0x40
 8013a80:	d10a      	bne.n	8013a98 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	2200      	movs	r2, #0
 8013a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	2200      	movs	r2, #0
 8013a8e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8013a90:	6878      	ldr	r0, [r7, #4]
 8013a92:	f7ff fcd7 	bl	8013444 <HAL_I2C_MemRxCpltCallback>
}
 8013a96:	e01d      	b.n	8013ad4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	2200      	movs	r2, #0
 8013a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	2212      	movs	r2, #18
 8013aa4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8013aa6:	6878      	ldr	r0, [r7, #4]
 8013aa8:	f7f8 fc3a 	bl	800c320 <HAL_I2C_MasterRxCpltCallback>
}
 8013aac:	e012      	b.n	8013ad4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	691a      	ldr	r2, [r3, #16]
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ab8:	b2d2      	uxtb	r2, r2
 8013aba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ac0:	1c5a      	adds	r2, r3, #1
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013aca:	b29b      	uxth	r3, r3
 8013acc:	3b01      	subs	r3, #1
 8013ace:	b29a      	uxth	r2, r3
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8013ad4:	bf00      	nop
 8013ad6:	3710      	adds	r7, #16
 8013ad8:	46bd      	mov	sp, r7
 8013ada:	bd80      	pop	{r7, pc}

08013adc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8013adc:	b480      	push	{r7}
 8013ade:	b083      	sub	sp, #12
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013aea:	b2db      	uxtb	r3, r3
 8013aec:	2b40      	cmp	r3, #64	; 0x40
 8013aee:	d117      	bne.n	8013b20 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d109      	bne.n	8013b0c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013afc:	b2db      	uxtb	r3, r3
 8013afe:	461a      	mov	r2, r3
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8013b08:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8013b0a:	e067      	b.n	8013bdc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b10:	b2db      	uxtb	r3, r3
 8013b12:	f043 0301 	orr.w	r3, r3, #1
 8013b16:	b2da      	uxtb	r2, r3
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	611a      	str	r2, [r3, #16]
}
 8013b1e:	e05d      	b.n	8013bdc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	691b      	ldr	r3, [r3, #16]
 8013b24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013b28:	d133      	bne.n	8013b92 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013b30:	b2db      	uxtb	r3, r3
 8013b32:	2b21      	cmp	r3, #33	; 0x21
 8013b34:	d109      	bne.n	8013b4a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b3a:	b2db      	uxtb	r3, r3
 8013b3c:	461a      	mov	r2, r3
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8013b46:	611a      	str	r2, [r3, #16]
 8013b48:	e008      	b.n	8013b5c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b4e:	b2db      	uxtb	r3, r3
 8013b50:	f043 0301 	orr.w	r3, r3, #1
 8013b54:	b2da      	uxtb	r2, r3
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d004      	beq.n	8013b6e <I2C_Master_SB+0x92>
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d108      	bne.n	8013b80 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d032      	beq.n	8013bdc <I2C_Master_SB+0x100>
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d02d      	beq.n	8013bdc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	685a      	ldr	r2, [r3, #4]
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013b8e:	605a      	str	r2, [r3, #4]
}
 8013b90:	e024      	b.n	8013bdc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d10e      	bne.n	8013bb8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b9e:	b29b      	uxth	r3, r3
 8013ba0:	11db      	asrs	r3, r3, #7
 8013ba2:	b2db      	uxtb	r3, r3
 8013ba4:	f003 0306 	and.w	r3, r3, #6
 8013ba8:	b2db      	uxtb	r3, r3
 8013baa:	f063 030f 	orn	r3, r3, #15
 8013bae:	b2da      	uxtb	r2, r3
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	611a      	str	r2, [r3, #16]
}
 8013bb6:	e011      	b.n	8013bdc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013bbc:	2b01      	cmp	r3, #1
 8013bbe:	d10d      	bne.n	8013bdc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013bc4:	b29b      	uxth	r3, r3
 8013bc6:	11db      	asrs	r3, r3, #7
 8013bc8:	b2db      	uxtb	r3, r3
 8013bca:	f003 0306 	and.w	r3, r3, #6
 8013bce:	b2db      	uxtb	r3, r3
 8013bd0:	f063 030e 	orn	r3, r3, #14
 8013bd4:	b2da      	uxtb	r2, r3
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	611a      	str	r2, [r3, #16]
}
 8013bdc:	bf00      	nop
 8013bde:	370c      	adds	r7, #12
 8013be0:	46bd      	mov	sp, r7
 8013be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be6:	4770      	bx	lr

08013be8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8013be8:	b480      	push	{r7}
 8013bea:	b083      	sub	sp, #12
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013bf4:	b2da      	uxtb	r2, r3
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d103      	bne.n	8013c0c <I2C_Master_ADD10+0x24>
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d011      	beq.n	8013c30 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d104      	bne.n	8013c20 <I2C_Master_ADD10+0x38>
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d007      	beq.n	8013c30 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	685a      	ldr	r2, [r3, #4]
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013c2e:	605a      	str	r2, [r3, #4]
    }
  }
}
 8013c30:	bf00      	nop
 8013c32:	370c      	adds	r7, #12
 8013c34:	46bd      	mov	sp, r7
 8013c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c3a:	4770      	bx	lr

08013c3c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8013c3c:	b480      	push	{r7}
 8013c3e:	b091      	sub	sp, #68	; 0x44
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013c4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c52:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c58:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013c60:	b2db      	uxtb	r3, r3
 8013c62:	2b22      	cmp	r3, #34	; 0x22
 8013c64:	f040 8169 	bne.w	8013f3a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d10f      	bne.n	8013c90 <I2C_Master_ADDR+0x54>
 8013c70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013c74:	2b40      	cmp	r3, #64	; 0x40
 8013c76:	d10b      	bne.n	8013c90 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013c78:	2300      	movs	r3, #0
 8013c7a:	633b      	str	r3, [r7, #48]	; 0x30
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	695b      	ldr	r3, [r3, #20]
 8013c82:	633b      	str	r3, [r7, #48]	; 0x30
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	699b      	ldr	r3, [r3, #24]
 8013c8a:	633b      	str	r3, [r7, #48]	; 0x30
 8013c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c8e:	e160      	b.n	8013f52 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d11d      	bne.n	8013cd4 <I2C_Master_ADDR+0x98>
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	691b      	ldr	r3, [r3, #16]
 8013c9c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8013ca0:	d118      	bne.n	8013cd4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	695b      	ldr	r3, [r3, #20]
 8013cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	699b      	ldr	r3, [r3, #24]
 8013cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	681a      	ldr	r2, [r3, #0]
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013cc6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ccc:	1c5a      	adds	r2, r3, #1
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	651a      	str	r2, [r3, #80]	; 0x50
 8013cd2:	e13e      	b.n	8013f52 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013cd8:	b29b      	uxth	r3, r3
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d113      	bne.n	8013d06 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013cde:	2300      	movs	r3, #0
 8013ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	695b      	ldr	r3, [r3, #20]
 8013ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	699b      	ldr	r3, [r3, #24]
 8013cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8013cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	681a      	ldr	r2, [r3, #0]
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013d02:	601a      	str	r2, [r3, #0]
 8013d04:	e115      	b.n	8013f32 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013d0a:	b29b      	uxth	r3, r3
 8013d0c:	2b01      	cmp	r3, #1
 8013d0e:	f040 808a 	bne.w	8013e26 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8013d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8013d18:	d137      	bne.n	8013d8a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	681a      	ldr	r2, [r3, #0]
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013d28:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	685b      	ldr	r3, [r3, #4]
 8013d30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013d34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013d38:	d113      	bne.n	8013d62 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	681a      	ldr	r2, [r3, #0]
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013d48:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	695b      	ldr	r3, [r3, #20]
 8013d54:	627b      	str	r3, [r7, #36]	; 0x24
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	699b      	ldr	r3, [r3, #24]
 8013d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8013d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d60:	e0e7      	b.n	8013f32 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013d62:	2300      	movs	r3, #0
 8013d64:	623b      	str	r3, [r7, #32]
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	695b      	ldr	r3, [r3, #20]
 8013d6c:	623b      	str	r3, [r7, #32]
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	699b      	ldr	r3, [r3, #24]
 8013d74:	623b      	str	r3, [r7, #32]
 8013d76:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	681a      	ldr	r2, [r3, #0]
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013d86:	601a      	str	r2, [r3, #0]
 8013d88:	e0d3      	b.n	8013f32 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8013d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d8c:	2b08      	cmp	r3, #8
 8013d8e:	d02e      	beq.n	8013dee <I2C_Master_ADDR+0x1b2>
 8013d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d92:	2b20      	cmp	r3, #32
 8013d94:	d02b      	beq.n	8013dee <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8013d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d98:	2b12      	cmp	r3, #18
 8013d9a:	d102      	bne.n	8013da2 <I2C_Master_ADDR+0x166>
 8013d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d9e:	2b01      	cmp	r3, #1
 8013da0:	d125      	bne.n	8013dee <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8013da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013da4:	2b04      	cmp	r3, #4
 8013da6:	d00e      	beq.n	8013dc6 <I2C_Master_ADDR+0x18a>
 8013da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013daa:	2b02      	cmp	r3, #2
 8013dac:	d00b      	beq.n	8013dc6 <I2C_Master_ADDR+0x18a>
 8013dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013db0:	2b10      	cmp	r3, #16
 8013db2:	d008      	beq.n	8013dc6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	681a      	ldr	r2, [r3, #0]
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013dc2:	601a      	str	r2, [r3, #0]
 8013dc4:	e007      	b.n	8013dd6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	681a      	ldr	r2, [r3, #0]
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013dd4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	61fb      	str	r3, [r7, #28]
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	695b      	ldr	r3, [r3, #20]
 8013de0:	61fb      	str	r3, [r7, #28]
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	699b      	ldr	r3, [r3, #24]
 8013de8:	61fb      	str	r3, [r7, #28]
 8013dea:	69fb      	ldr	r3, [r7, #28]
 8013dec:	e0a1      	b.n	8013f32 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	681a      	ldr	r2, [r3, #0]
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013dfc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013dfe:	2300      	movs	r3, #0
 8013e00:	61bb      	str	r3, [r7, #24]
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	695b      	ldr	r3, [r3, #20]
 8013e08:	61bb      	str	r3, [r7, #24]
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	699b      	ldr	r3, [r3, #24]
 8013e10:	61bb      	str	r3, [r7, #24]
 8013e12:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	681a      	ldr	r2, [r3, #0]
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013e22:	601a      	str	r2, [r3, #0]
 8013e24:	e085      	b.n	8013f32 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013e2a:	b29b      	uxth	r3, r3
 8013e2c:	2b02      	cmp	r3, #2
 8013e2e:	d14d      	bne.n	8013ecc <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8013e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e32:	2b04      	cmp	r3, #4
 8013e34:	d016      	beq.n	8013e64 <I2C_Master_ADDR+0x228>
 8013e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e38:	2b02      	cmp	r3, #2
 8013e3a:	d013      	beq.n	8013e64 <I2C_Master_ADDR+0x228>
 8013e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e3e:	2b10      	cmp	r3, #16
 8013e40:	d010      	beq.n	8013e64 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	681a      	ldr	r2, [r3, #0]
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013e50:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	681a      	ldr	r2, [r3, #0]
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013e60:	601a      	str	r2, [r3, #0]
 8013e62:	e007      	b.n	8013e74 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	681a      	ldr	r2, [r3, #0]
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013e72:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	685b      	ldr	r3, [r3, #4]
 8013e7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013e82:	d117      	bne.n	8013eb4 <I2C_Master_ADDR+0x278>
 8013e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8013e8a:	d00b      	beq.n	8013ea4 <I2C_Master_ADDR+0x268>
 8013e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e8e:	2b01      	cmp	r3, #1
 8013e90:	d008      	beq.n	8013ea4 <I2C_Master_ADDR+0x268>
 8013e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e94:	2b08      	cmp	r3, #8
 8013e96:	d005      	beq.n	8013ea4 <I2C_Master_ADDR+0x268>
 8013e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e9a:	2b10      	cmp	r3, #16
 8013e9c:	d002      	beq.n	8013ea4 <I2C_Master_ADDR+0x268>
 8013e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ea0:	2b20      	cmp	r3, #32
 8013ea2:	d107      	bne.n	8013eb4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	685a      	ldr	r2, [r3, #4]
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8013eb2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	617b      	str	r3, [r7, #20]
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	695b      	ldr	r3, [r3, #20]
 8013ebe:	617b      	str	r3, [r7, #20]
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	699b      	ldr	r3, [r3, #24]
 8013ec6:	617b      	str	r3, [r7, #20]
 8013ec8:	697b      	ldr	r3, [r7, #20]
 8013eca:	e032      	b.n	8013f32 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	681a      	ldr	r2, [r3, #0]
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013eda:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	685b      	ldr	r3, [r3, #4]
 8013ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013ee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013eea:	d117      	bne.n	8013f1c <I2C_Master_ADDR+0x2e0>
 8013eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013eee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8013ef2:	d00b      	beq.n	8013f0c <I2C_Master_ADDR+0x2d0>
 8013ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ef6:	2b01      	cmp	r3, #1
 8013ef8:	d008      	beq.n	8013f0c <I2C_Master_ADDR+0x2d0>
 8013efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013efc:	2b08      	cmp	r3, #8
 8013efe:	d005      	beq.n	8013f0c <I2C_Master_ADDR+0x2d0>
 8013f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f02:	2b10      	cmp	r3, #16
 8013f04:	d002      	beq.n	8013f0c <I2C_Master_ADDR+0x2d0>
 8013f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f08:	2b20      	cmp	r3, #32
 8013f0a:	d107      	bne.n	8013f1c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	685a      	ldr	r2, [r3, #4]
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8013f1a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	613b      	str	r3, [r7, #16]
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	695b      	ldr	r3, [r3, #20]
 8013f26:	613b      	str	r3, [r7, #16]
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	699b      	ldr	r3, [r3, #24]
 8013f2e:	613b      	str	r3, [r7, #16]
 8013f30:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	2200      	movs	r2, #0
 8013f36:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8013f38:	e00b      	b.n	8013f52 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	60fb      	str	r3, [r7, #12]
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	695b      	ldr	r3, [r3, #20]
 8013f44:	60fb      	str	r3, [r7, #12]
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	699b      	ldr	r3, [r3, #24]
 8013f4c:	60fb      	str	r3, [r7, #12]
 8013f4e:	68fb      	ldr	r3, [r7, #12]
}
 8013f50:	e7ff      	b.n	8013f52 <I2C_Master_ADDR+0x316>
 8013f52:	bf00      	nop
 8013f54:	3744      	adds	r7, #68	; 0x44
 8013f56:	46bd      	mov	sp, r7
 8013f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5c:	4770      	bx	lr

08013f5e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8013f5e:	b580      	push	{r7, lr}
 8013f60:	b084      	sub	sp, #16
 8013f62:	af00      	add	r7, sp, #0
 8013f64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013f6c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013f72:	b29b      	uxth	r3, r3
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d02b      	beq.n	8013fd0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f7c:	781a      	ldrb	r2, [r3, #0]
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f88:	1c5a      	adds	r2, r3, #1
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013f92:	b29b      	uxth	r3, r3
 8013f94:	3b01      	subs	r3, #1
 8013f96:	b29a      	uxth	r2, r3
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013fa0:	b29b      	uxth	r3, r3
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d114      	bne.n	8013fd0 <I2C_SlaveTransmit_TXE+0x72>
 8013fa6:	7bfb      	ldrb	r3, [r7, #15]
 8013fa8:	2b29      	cmp	r3, #41	; 0x29
 8013faa:	d111      	bne.n	8013fd0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	685a      	ldr	r2, [r3, #4]
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013fba:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	2221      	movs	r2, #33	; 0x21
 8013fc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	2228      	movs	r2, #40	; 0x28
 8013fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8013fca:	6878      	ldr	r0, [r7, #4]
 8013fcc:	f7ff fa04 	bl	80133d8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8013fd0:	bf00      	nop
 8013fd2:	3710      	adds	r7, #16
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	bd80      	pop	{r7, pc}

08013fd8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8013fd8:	b480      	push	{r7}
 8013fda:	b083      	sub	sp, #12
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013fe4:	b29b      	uxth	r3, r3
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d011      	beq.n	801400e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fee:	781a      	ldrb	r2, [r3, #0]
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ffa:	1c5a      	adds	r2, r3, #1
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014004:	b29b      	uxth	r3, r3
 8014006:	3b01      	subs	r3, #1
 8014008:	b29a      	uxth	r2, r3
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801400e:	bf00      	nop
 8014010:	370c      	adds	r7, #12
 8014012:	46bd      	mov	sp, r7
 8014014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014018:	4770      	bx	lr

0801401a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801401a:	b580      	push	{r7, lr}
 801401c:	b084      	sub	sp, #16
 801401e:	af00      	add	r7, sp, #0
 8014020:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014028:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801402e:	b29b      	uxth	r3, r3
 8014030:	2b00      	cmp	r3, #0
 8014032:	d02c      	beq.n	801408e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	691a      	ldr	r2, [r3, #16]
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801403e:	b2d2      	uxtb	r2, r2
 8014040:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014046:	1c5a      	adds	r2, r3, #1
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014050:	b29b      	uxth	r3, r3
 8014052:	3b01      	subs	r3, #1
 8014054:	b29a      	uxth	r2, r3
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801405e:	b29b      	uxth	r3, r3
 8014060:	2b00      	cmp	r3, #0
 8014062:	d114      	bne.n	801408e <I2C_SlaveReceive_RXNE+0x74>
 8014064:	7bfb      	ldrb	r3, [r7, #15]
 8014066:	2b2a      	cmp	r3, #42	; 0x2a
 8014068:	d111      	bne.n	801408e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	685a      	ldr	r2, [r3, #4]
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014078:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	2222      	movs	r2, #34	; 0x22
 801407e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	2228      	movs	r2, #40	; 0x28
 8014084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8014088:	6878      	ldr	r0, [r7, #4]
 801408a:	f7ff f9af 	bl	80133ec <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801408e:	bf00      	nop
 8014090:	3710      	adds	r7, #16
 8014092:	46bd      	mov	sp, r7
 8014094:	bd80      	pop	{r7, pc}

08014096 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8014096:	b480      	push	{r7}
 8014098:	b083      	sub	sp, #12
 801409a:	af00      	add	r7, sp, #0
 801409c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80140a2:	b29b      	uxth	r3, r3
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d012      	beq.n	80140ce <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	691a      	ldr	r2, [r3, #16]
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140b2:	b2d2      	uxtb	r2, r2
 80140b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140ba:	1c5a      	adds	r2, r3, #1
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80140c4:	b29b      	uxth	r3, r3
 80140c6:	3b01      	subs	r3, #1
 80140c8:	b29a      	uxth	r2, r3
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80140ce:	bf00      	nop
 80140d0:	370c      	adds	r7, #12
 80140d2:	46bd      	mov	sp, r7
 80140d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d8:	4770      	bx	lr

080140da <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80140da:	b580      	push	{r7, lr}
 80140dc:	b084      	sub	sp, #16
 80140de:	af00      	add	r7, sp, #0
 80140e0:	6078      	str	r0, [r7, #4]
 80140e2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80140e4:	2300      	movs	r3, #0
 80140e6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80140ee:	b2db      	uxtb	r3, r3
 80140f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80140f4:	2b28      	cmp	r3, #40	; 0x28
 80140f6:	d127      	bne.n	8014148 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	685a      	ldr	r2, [r3, #4]
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014106:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8014108:	683b      	ldr	r3, [r7, #0]
 801410a:	089b      	lsrs	r3, r3, #2
 801410c:	f003 0301 	and.w	r3, r3, #1
 8014110:	2b00      	cmp	r3, #0
 8014112:	d101      	bne.n	8014118 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8014114:	2301      	movs	r3, #1
 8014116:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8014118:	683b      	ldr	r3, [r7, #0]
 801411a:	09db      	lsrs	r3, r3, #7
 801411c:	f003 0301 	and.w	r3, r3, #1
 8014120:	2b00      	cmp	r3, #0
 8014122:	d103      	bne.n	801412c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	68db      	ldr	r3, [r3, #12]
 8014128:	81bb      	strh	r3, [r7, #12]
 801412a:	e002      	b.n	8014132 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	699b      	ldr	r3, [r3, #24]
 8014130:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	2200      	movs	r2, #0
 8014136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 801413a:	89ba      	ldrh	r2, [r7, #12]
 801413c:	7bfb      	ldrb	r3, [r7, #15]
 801413e:	4619      	mov	r1, r3
 8014140:	6878      	ldr	r0, [r7, #4]
 8014142:	f7ff f95d 	bl	8013400 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8014146:	e008      	b.n	801415a <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	f06f 0202 	mvn.w	r2, #2
 8014150:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	2200      	movs	r2, #0
 8014156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 801415a:	bf00      	nop
 801415c:	3710      	adds	r7, #16
 801415e:	46bd      	mov	sp, r7
 8014160:	bd80      	pop	{r7, pc}
	...

08014164 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8014164:	b580      	push	{r7, lr}
 8014166:	b084      	sub	sp, #16
 8014168:	af00      	add	r7, sp, #0
 801416a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014172:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	685a      	ldr	r2, [r3, #4]
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8014182:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8014184:	2300      	movs	r3, #0
 8014186:	60bb      	str	r3, [r7, #8]
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	695b      	ldr	r3, [r3, #20]
 801418e:	60bb      	str	r3, [r7, #8]
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	681a      	ldr	r2, [r3, #0]
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	f042 0201 	orr.w	r2, r2, #1
 801419e:	601a      	str	r2, [r3, #0]
 80141a0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	681a      	ldr	r2, [r3, #0]
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80141b0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	685b      	ldr	r3, [r3, #4]
 80141b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80141bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80141c0:	d172      	bne.n	80142a8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80141c2:	7bfb      	ldrb	r3, [r7, #15]
 80141c4:	2b22      	cmp	r3, #34	; 0x22
 80141c6:	d002      	beq.n	80141ce <I2C_Slave_STOPF+0x6a>
 80141c8:	7bfb      	ldrb	r3, [r7, #15]
 80141ca:	2b2a      	cmp	r3, #42	; 0x2a
 80141cc:	d135      	bne.n	801423a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	685b      	ldr	r3, [r3, #4]
 80141d6:	b29a      	uxth	r2, r3
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80141e0:	b29b      	uxth	r3, r3
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d005      	beq.n	80141f2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141ea:	f043 0204 	orr.w	r2, r3, #4
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	685a      	ldr	r2, [r3, #4]
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014200:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014206:	4618      	mov	r0, r3
 8014208:	f7fe f87a 	bl	8012300 <HAL_DMA_GetState>
 801420c:	4603      	mov	r3, r0
 801420e:	2b01      	cmp	r3, #1
 8014210:	d049      	beq.n	80142a6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014216:	4a69      	ldr	r2, [pc, #420]	; (80143bc <I2C_Slave_STOPF+0x258>)
 8014218:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801421e:	4618      	mov	r0, r3
 8014220:	f7fd fec2 	bl	8011fa8 <HAL_DMA_Abort_IT>
 8014224:	4603      	mov	r3, r0
 8014226:	2b00      	cmp	r3, #0
 8014228:	d03d      	beq.n	80142a6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801422e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014230:	687a      	ldr	r2, [r7, #4]
 8014232:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8014234:	4610      	mov	r0, r2
 8014236:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8014238:	e035      	b.n	80142a6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	685b      	ldr	r3, [r3, #4]
 8014242:	b29a      	uxth	r2, r3
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801424c:	b29b      	uxth	r3, r3
 801424e:	2b00      	cmp	r3, #0
 8014250:	d005      	beq.n	801425e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014256:	f043 0204 	orr.w	r2, r3, #4
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	685a      	ldr	r2, [r3, #4]
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801426c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014272:	4618      	mov	r0, r3
 8014274:	f7fe f844 	bl	8012300 <HAL_DMA_GetState>
 8014278:	4603      	mov	r3, r0
 801427a:	2b01      	cmp	r3, #1
 801427c:	d014      	beq.n	80142a8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014282:	4a4e      	ldr	r2, [pc, #312]	; (80143bc <I2C_Slave_STOPF+0x258>)
 8014284:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801428a:	4618      	mov	r0, r3
 801428c:	f7fd fe8c 	bl	8011fa8 <HAL_DMA_Abort_IT>
 8014290:	4603      	mov	r3, r0
 8014292:	2b00      	cmp	r3, #0
 8014294:	d008      	beq.n	80142a8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801429a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801429c:	687a      	ldr	r2, [r7, #4]
 801429e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80142a0:	4610      	mov	r0, r2
 80142a2:	4798      	blx	r3
 80142a4:	e000      	b.n	80142a8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80142a6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80142ac:	b29b      	uxth	r3, r3
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d03e      	beq.n	8014330 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	695b      	ldr	r3, [r3, #20]
 80142b8:	f003 0304 	and.w	r3, r3, #4
 80142bc:	2b04      	cmp	r3, #4
 80142be:	d112      	bne.n	80142e6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	691a      	ldr	r2, [r3, #16]
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142ca:	b2d2      	uxtb	r2, r2
 80142cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142d2:	1c5a      	adds	r2, r3, #1
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80142dc:	b29b      	uxth	r3, r3
 80142de:	3b01      	subs	r3, #1
 80142e0:	b29a      	uxth	r2, r3
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	695b      	ldr	r3, [r3, #20]
 80142ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80142f0:	2b40      	cmp	r3, #64	; 0x40
 80142f2:	d112      	bne.n	801431a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	691a      	ldr	r2, [r3, #16]
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142fe:	b2d2      	uxtb	r2, r2
 8014300:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014306:	1c5a      	adds	r2, r3, #1
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014310:	b29b      	uxth	r3, r3
 8014312:	3b01      	subs	r3, #1
 8014314:	b29a      	uxth	r2, r3
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801431e:	b29b      	uxth	r3, r3
 8014320:	2b00      	cmp	r3, #0
 8014322:	d005      	beq.n	8014330 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014328:	f043 0204 	orr.w	r2, r3, #4
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014334:	2b00      	cmp	r3, #0
 8014336:	d003      	beq.n	8014340 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8014338:	6878      	ldr	r0, [r7, #4]
 801433a:	f000 f8b3 	bl	80144a4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 801433e:	e039      	b.n	80143b4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8014340:	7bfb      	ldrb	r3, [r7, #15]
 8014342:	2b2a      	cmp	r3, #42	; 0x2a
 8014344:	d109      	bne.n	801435a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	2200      	movs	r2, #0
 801434a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	2228      	movs	r2, #40	; 0x28
 8014350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8014354:	6878      	ldr	r0, [r7, #4]
 8014356:	f7ff f849 	bl	80133ec <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014360:	b2db      	uxtb	r3, r3
 8014362:	2b28      	cmp	r3, #40	; 0x28
 8014364:	d111      	bne.n	801438a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	4a15      	ldr	r2, [pc, #84]	; (80143c0 <I2C_Slave_STOPF+0x25c>)
 801436a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	2200      	movs	r2, #0
 8014370:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	2220      	movs	r2, #32
 8014376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	2200      	movs	r2, #0
 801437e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8014382:	6878      	ldr	r0, [r7, #4]
 8014384:	f7ff f84a 	bl	801341c <HAL_I2C_ListenCpltCallback>
}
 8014388:	e014      	b.n	80143b4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801438e:	2b22      	cmp	r3, #34	; 0x22
 8014390:	d002      	beq.n	8014398 <I2C_Slave_STOPF+0x234>
 8014392:	7bfb      	ldrb	r3, [r7, #15]
 8014394:	2b22      	cmp	r3, #34	; 0x22
 8014396:	d10d      	bne.n	80143b4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2200      	movs	r2, #0
 801439c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	2220      	movs	r2, #32
 80143a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	2200      	movs	r2, #0
 80143aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80143ae:	6878      	ldr	r0, [r7, #4]
 80143b0:	f7ff f81c 	bl	80133ec <HAL_I2C_SlaveRxCpltCallback>
}
 80143b4:	bf00      	nop
 80143b6:	3710      	adds	r7, #16
 80143b8:	46bd      	mov	sp, r7
 80143ba:	bd80      	pop	{r7, pc}
 80143bc:	0801492d 	.word	0x0801492d
 80143c0:	ffff0000 	.word	0xffff0000

080143c4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b084      	sub	sp, #16
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80143d2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143d8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80143da:	68bb      	ldr	r3, [r7, #8]
 80143dc:	2b08      	cmp	r3, #8
 80143de:	d002      	beq.n	80143e6 <I2C_Slave_AF+0x22>
 80143e0:	68bb      	ldr	r3, [r7, #8]
 80143e2:	2b20      	cmp	r3, #32
 80143e4:	d129      	bne.n	801443a <I2C_Slave_AF+0x76>
 80143e6:	7bfb      	ldrb	r3, [r7, #15]
 80143e8:	2b28      	cmp	r3, #40	; 0x28
 80143ea:	d126      	bne.n	801443a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	4a2c      	ldr	r2, [pc, #176]	; (80144a0 <I2C_Slave_AF+0xdc>)
 80143f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	685a      	ldr	r2, [r3, #4]
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8014400:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801440a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	681a      	ldr	r2, [r3, #0]
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801441a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	2200      	movs	r2, #0
 8014420:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	2220      	movs	r2, #32
 8014426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	2200      	movs	r2, #0
 801442e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8014432:	6878      	ldr	r0, [r7, #4]
 8014434:	f7fe fff2 	bl	801341c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8014438:	e02e      	b.n	8014498 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801443a:	7bfb      	ldrb	r3, [r7, #15]
 801443c:	2b21      	cmp	r3, #33	; 0x21
 801443e:	d126      	bne.n	801448e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	4a17      	ldr	r2, [pc, #92]	; (80144a0 <I2C_Slave_AF+0xdc>)
 8014444:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	2221      	movs	r2, #33	; 0x21
 801444a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	2220      	movs	r2, #32
 8014450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	2200      	movs	r2, #0
 8014458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	685a      	ldr	r2, [r3, #4]
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801446a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8014474:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	681a      	ldr	r2, [r3, #0]
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014484:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8014486:	6878      	ldr	r0, [r7, #4]
 8014488:	f7fe ffa6 	bl	80133d8 <HAL_I2C_SlaveTxCpltCallback>
}
 801448c:	e004      	b.n	8014498 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8014496:	615a      	str	r2, [r3, #20]
}
 8014498:	bf00      	nop
 801449a:	3710      	adds	r7, #16
 801449c:	46bd      	mov	sp, r7
 801449e:	bd80      	pop	{r7, pc}
 80144a0:	ffff0000 	.word	0xffff0000

080144a4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b084      	sub	sp, #16
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80144b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80144ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80144bc:	7bbb      	ldrb	r3, [r7, #14]
 80144be:	2b10      	cmp	r3, #16
 80144c0:	d002      	beq.n	80144c8 <I2C_ITError+0x24>
 80144c2:	7bbb      	ldrb	r3, [r7, #14]
 80144c4:	2b40      	cmp	r3, #64	; 0x40
 80144c6:	d10a      	bne.n	80144de <I2C_ITError+0x3a>
 80144c8:	7bfb      	ldrb	r3, [r7, #15]
 80144ca:	2b22      	cmp	r3, #34	; 0x22
 80144cc:	d107      	bne.n	80144de <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	681a      	ldr	r2, [r3, #0]
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80144dc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80144de:	7bfb      	ldrb	r3, [r7, #15]
 80144e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80144e4:	2b28      	cmp	r3, #40	; 0x28
 80144e6:	d107      	bne.n	80144f8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	2200      	movs	r2, #0
 80144ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	2228      	movs	r2, #40	; 0x28
 80144f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80144f6:	e015      	b.n	8014524 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	685b      	ldr	r3, [r3, #4]
 80144fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014502:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014506:	d00a      	beq.n	801451e <I2C_ITError+0x7a>
 8014508:	7bfb      	ldrb	r3, [r7, #15]
 801450a:	2b60      	cmp	r3, #96	; 0x60
 801450c:	d007      	beq.n	801451e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	2220      	movs	r2, #32
 8014512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	2200      	movs	r2, #0
 801451a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	2200      	movs	r2, #0
 8014522:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	685b      	ldr	r3, [r3, #4]
 801452a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801452e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014532:	d162      	bne.n	80145fa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	685a      	ldr	r2, [r3, #4]
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014542:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014548:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801454c:	b2db      	uxtb	r3, r3
 801454e:	2b01      	cmp	r3, #1
 8014550:	d020      	beq.n	8014594 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014556:	4a6a      	ldr	r2, [pc, #424]	; (8014700 <I2C_ITError+0x25c>)
 8014558:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801455e:	4618      	mov	r0, r3
 8014560:	f7fd fd22 	bl	8011fa8 <HAL_DMA_Abort_IT>
 8014564:	4603      	mov	r3, r0
 8014566:	2b00      	cmp	r3, #0
 8014568:	f000 8089 	beq.w	801467e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	681a      	ldr	r2, [r3, #0]
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	f022 0201 	bic.w	r2, r2, #1
 801457a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	2220      	movs	r2, #32
 8014580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801458a:	687a      	ldr	r2, [r7, #4]
 801458c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801458e:	4610      	mov	r0, r2
 8014590:	4798      	blx	r3
 8014592:	e074      	b.n	801467e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014598:	4a59      	ldr	r2, [pc, #356]	; (8014700 <I2C_ITError+0x25c>)
 801459a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145a0:	4618      	mov	r0, r3
 80145a2:	f7fd fd01 	bl	8011fa8 <HAL_DMA_Abort_IT>
 80145a6:	4603      	mov	r3, r0
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d068      	beq.n	801467e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	695b      	ldr	r3, [r3, #20]
 80145b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80145b6:	2b40      	cmp	r3, #64	; 0x40
 80145b8:	d10b      	bne.n	80145d2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	691a      	ldr	r2, [r3, #16]
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145c4:	b2d2      	uxtb	r2, r2
 80145c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145cc:	1c5a      	adds	r2, r3, #1
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	681a      	ldr	r2, [r3, #0]
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	f022 0201 	bic.w	r2, r2, #1
 80145e0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	2220      	movs	r2, #32
 80145e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80145f0:	687a      	ldr	r2, [r7, #4]
 80145f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80145f4:	4610      	mov	r0, r2
 80145f6:	4798      	blx	r3
 80145f8:	e041      	b.n	801467e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014600:	b2db      	uxtb	r3, r3
 8014602:	2b60      	cmp	r3, #96	; 0x60
 8014604:	d125      	bne.n	8014652 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	2220      	movs	r2, #32
 801460a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	2200      	movs	r2, #0
 8014612:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	695b      	ldr	r3, [r3, #20]
 801461a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801461e:	2b40      	cmp	r3, #64	; 0x40
 8014620:	d10b      	bne.n	801463a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	691a      	ldr	r2, [r3, #16]
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801462c:	b2d2      	uxtb	r2, r2
 801462e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014634:	1c5a      	adds	r2, r3, #1
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	681a      	ldr	r2, [r3, #0]
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	f022 0201 	bic.w	r2, r2, #1
 8014648:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801464a:	6878      	ldr	r0, [r7, #4]
 801464c:	f7fe ff0e 	bl	801346c <HAL_I2C_AbortCpltCallback>
 8014650:	e015      	b.n	801467e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	695b      	ldr	r3, [r3, #20]
 8014658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801465c:	2b40      	cmp	r3, #64	; 0x40
 801465e:	d10b      	bne.n	8014678 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	691a      	ldr	r2, [r3, #16]
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801466a:	b2d2      	uxtb	r2, r2
 801466c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014672:	1c5a      	adds	r2, r3, #1
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8014678:	6878      	ldr	r0, [r7, #4]
 801467a:	f7fe feed 	bl	8013458 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014682:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8014684:	68bb      	ldr	r3, [r7, #8]
 8014686:	f003 0301 	and.w	r3, r3, #1
 801468a:	2b00      	cmp	r3, #0
 801468c:	d10e      	bne.n	80146ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8014694:	2b00      	cmp	r3, #0
 8014696:	d109      	bne.n	80146ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8014698:	68bb      	ldr	r3, [r7, #8]
 801469a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d104      	bne.n	80146ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80146a2:	68bb      	ldr	r3, [r7, #8]
 80146a4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d007      	beq.n	80146bc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	685a      	ldr	r2, [r3, #4]
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80146ba:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80146c2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146c8:	f003 0304 	and.w	r3, r3, #4
 80146cc:	2b04      	cmp	r3, #4
 80146ce:	d113      	bne.n	80146f8 <I2C_ITError+0x254>
 80146d0:	7bfb      	ldrb	r3, [r7, #15]
 80146d2:	2b28      	cmp	r3, #40	; 0x28
 80146d4:	d110      	bne.n	80146f8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	4a0a      	ldr	r2, [pc, #40]	; (8014704 <I2C_ITError+0x260>)
 80146da:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	2200      	movs	r2, #0
 80146e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	2220      	movs	r2, #32
 80146e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	2200      	movs	r2, #0
 80146ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80146f2:	6878      	ldr	r0, [r7, #4]
 80146f4:	f7fe fe92 	bl	801341c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80146f8:	bf00      	nop
 80146fa:	3710      	adds	r7, #16
 80146fc:	46bd      	mov	sp, r7
 80146fe:	bd80      	pop	{r7, pc}
 8014700:	0801492d 	.word	0x0801492d
 8014704:	ffff0000 	.word	0xffff0000

08014708 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8014708:	b580      	push	{r7, lr}
 801470a:	b086      	sub	sp, #24
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014714:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8014716:	697b      	ldr	r3, [r7, #20]
 8014718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801471c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801471e:	697b      	ldr	r3, [r7, #20]
 8014720:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8014724:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8014726:	697b      	ldr	r3, [r7, #20]
 8014728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801472a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801472c:	697b      	ldr	r3, [r7, #20]
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	685a      	ldr	r2, [r3, #4]
 8014732:	697b      	ldr	r3, [r7, #20]
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801473a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801473c:	697b      	ldr	r3, [r7, #20]
 801473e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014740:	2b00      	cmp	r3, #0
 8014742:	d003      	beq.n	801474c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8014744:	697b      	ldr	r3, [r7, #20]
 8014746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014748:	2200      	movs	r2, #0
 801474a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801474c:	697b      	ldr	r3, [r7, #20]
 801474e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014750:	2b00      	cmp	r3, #0
 8014752:	d003      	beq.n	801475c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8014754:	697b      	ldr	r3, [r7, #20]
 8014756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014758:	2200      	movs	r2, #0
 801475a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 801475c:	7cfb      	ldrb	r3, [r7, #19]
 801475e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8014762:	2b21      	cmp	r3, #33	; 0x21
 8014764:	d007      	beq.n	8014776 <I2C_DMAXferCplt+0x6e>
 8014766:	7cfb      	ldrb	r3, [r7, #19]
 8014768:	f003 0322 	and.w	r3, r3, #34	; 0x22
 801476c:	2b22      	cmp	r3, #34	; 0x22
 801476e:	d131      	bne.n	80147d4 <I2C_DMAXferCplt+0xcc>
 8014770:	7cbb      	ldrb	r3, [r7, #18]
 8014772:	2b20      	cmp	r3, #32
 8014774:	d12e      	bne.n	80147d4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8014776:	697b      	ldr	r3, [r7, #20]
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	685a      	ldr	r2, [r3, #4]
 801477c:	697b      	ldr	r3, [r7, #20]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014784:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8014786:	697b      	ldr	r3, [r7, #20]
 8014788:	2200      	movs	r2, #0
 801478a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 801478c:	7cfb      	ldrb	r3, [r7, #19]
 801478e:	2b29      	cmp	r3, #41	; 0x29
 8014790:	d10a      	bne.n	80147a8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8014792:	697b      	ldr	r3, [r7, #20]
 8014794:	2221      	movs	r2, #33	; 0x21
 8014796:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8014798:	697b      	ldr	r3, [r7, #20]
 801479a:	2228      	movs	r2, #40	; 0x28
 801479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80147a0:	6978      	ldr	r0, [r7, #20]
 80147a2:	f7fe fe19 	bl	80133d8 <HAL_I2C_SlaveTxCpltCallback>
 80147a6:	e00c      	b.n	80147c2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80147a8:	7cfb      	ldrb	r3, [r7, #19]
 80147aa:	2b2a      	cmp	r3, #42	; 0x2a
 80147ac:	d109      	bne.n	80147c2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80147ae:	697b      	ldr	r3, [r7, #20]
 80147b0:	2222      	movs	r2, #34	; 0x22
 80147b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80147b4:	697b      	ldr	r3, [r7, #20]
 80147b6:	2228      	movs	r2, #40	; 0x28
 80147b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80147bc:	6978      	ldr	r0, [r7, #20]
 80147be:	f7fe fe15 	bl	80133ec <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80147c2:	697b      	ldr	r3, [r7, #20]
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	685a      	ldr	r2, [r3, #4]
 80147c8:	697b      	ldr	r3, [r7, #20]
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80147d0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80147d2:	e06a      	b.n	80148aa <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80147d4:	697b      	ldr	r3, [r7, #20]
 80147d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80147da:	b2db      	uxtb	r3, r3
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d064      	beq.n	80148aa <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80147e0:	697b      	ldr	r3, [r7, #20]
 80147e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80147e4:	b29b      	uxth	r3, r3
 80147e6:	2b01      	cmp	r3, #1
 80147e8:	d107      	bne.n	80147fa <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80147ea:	697b      	ldr	r3, [r7, #20]
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	681a      	ldr	r2, [r3, #0]
 80147f0:	697b      	ldr	r3, [r7, #20]
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80147f8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80147fa:	697b      	ldr	r3, [r7, #20]
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	685a      	ldr	r2, [r3, #4]
 8014800:	697b      	ldr	r3, [r7, #20]
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8014808:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8014810:	d009      	beq.n	8014826 <I2C_DMAXferCplt+0x11e>
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	2b08      	cmp	r3, #8
 8014816:	d006      	beq.n	8014826 <I2C_DMAXferCplt+0x11e>
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801481e:	d002      	beq.n	8014826 <I2C_DMAXferCplt+0x11e>
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	2b20      	cmp	r3, #32
 8014824:	d107      	bne.n	8014836 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014826:	697b      	ldr	r3, [r7, #20]
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	681a      	ldr	r2, [r3, #0]
 801482c:	697b      	ldr	r3, [r7, #20]
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014834:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8014836:	697b      	ldr	r3, [r7, #20]
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	685a      	ldr	r2, [r3, #4]
 801483c:	697b      	ldr	r3, [r7, #20]
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8014844:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8014846:	697b      	ldr	r3, [r7, #20]
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	685a      	ldr	r2, [r3, #4]
 801484c:	697b      	ldr	r3, [r7, #20]
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014854:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8014856:	697b      	ldr	r3, [r7, #20]
 8014858:	2200      	movs	r2, #0
 801485a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801485c:	697b      	ldr	r3, [r7, #20]
 801485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014860:	2b00      	cmp	r3, #0
 8014862:	d003      	beq.n	801486c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8014864:	6978      	ldr	r0, [r7, #20]
 8014866:	f7fe fdf7 	bl	8013458 <HAL_I2C_ErrorCallback>
}
 801486a:	e01e      	b.n	80148aa <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 801486c:	697b      	ldr	r3, [r7, #20]
 801486e:	2220      	movs	r2, #32
 8014870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8014874:	697b      	ldr	r3, [r7, #20]
 8014876:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801487a:	b2db      	uxtb	r3, r3
 801487c:	2b40      	cmp	r3, #64	; 0x40
 801487e:	d10a      	bne.n	8014896 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014880:	697b      	ldr	r3, [r7, #20]
 8014882:	2200      	movs	r2, #0
 8014884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8014888:	697b      	ldr	r3, [r7, #20]
 801488a:	2200      	movs	r2, #0
 801488c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 801488e:	6978      	ldr	r0, [r7, #20]
 8014890:	f7fe fdd8 	bl	8013444 <HAL_I2C_MemRxCpltCallback>
}
 8014894:	e009      	b.n	80148aa <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014896:	697b      	ldr	r3, [r7, #20]
 8014898:	2200      	movs	r2, #0
 801489a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801489e:	697b      	ldr	r3, [r7, #20]
 80148a0:	2212      	movs	r2, #18
 80148a2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80148a4:	6978      	ldr	r0, [r7, #20]
 80148a6:	f7f7 fd3b 	bl	800c320 <HAL_I2C_MasterRxCpltCallback>
}
 80148aa:	bf00      	nop
 80148ac:	3718      	adds	r7, #24
 80148ae:	46bd      	mov	sp, r7
 80148b0:	bd80      	pop	{r7, pc}

080148b2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80148b2:	b580      	push	{r7, lr}
 80148b4:	b084      	sub	sp, #16
 80148b6:	af00      	add	r7, sp, #0
 80148b8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148be:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d003      	beq.n	80148d0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80148cc:	2200      	movs	r2, #0
 80148ce:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d003      	beq.n	80148e0 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148dc:	2200      	movs	r2, #0
 80148de:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80148e0:	6878      	ldr	r0, [r7, #4]
 80148e2:	f7fd fd1b 	bl	801231c <HAL_DMA_GetError>
 80148e6:	4603      	mov	r3, r0
 80148e8:	2b02      	cmp	r3, #2
 80148ea:	d01b      	beq.n	8014924 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	681a      	ldr	r2, [r3, #0]
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80148fa:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	2200      	movs	r2, #0
 8014900:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	2220      	movs	r2, #32
 8014906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	2200      	movs	r2, #0
 801490e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014916:	f043 0210 	orr.w	r2, r3, #16
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801491e:	68f8      	ldr	r0, [r7, #12]
 8014920:	f7fe fd9a 	bl	8013458 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8014924:	bf00      	nop
 8014926:	3710      	adds	r7, #16
 8014928:	46bd      	mov	sp, r7
 801492a:	bd80      	pop	{r7, pc}

0801492c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801492c:	b580      	push	{r7, lr}
 801492e:	b086      	sub	sp, #24
 8014930:	af00      	add	r7, sp, #0
 8014932:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014934:	2300      	movs	r3, #0
 8014936:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801493c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801493e:	697b      	ldr	r3, [r7, #20]
 8014940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014944:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8014946:	4b4b      	ldr	r3, [pc, #300]	; (8014a74 <I2C_DMAAbort+0x148>)
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	08db      	lsrs	r3, r3, #3
 801494c:	4a4a      	ldr	r2, [pc, #296]	; (8014a78 <I2C_DMAAbort+0x14c>)
 801494e:	fba2 2303 	umull	r2, r3, r2, r3
 8014952:	0a1a      	lsrs	r2, r3, #8
 8014954:	4613      	mov	r3, r2
 8014956:	009b      	lsls	r3, r3, #2
 8014958:	4413      	add	r3, r2
 801495a:	00da      	lsls	r2, r3, #3
 801495c:	1ad3      	subs	r3, r2, r3
 801495e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d106      	bne.n	8014974 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014966:	697b      	ldr	r3, [r7, #20]
 8014968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801496a:	f043 0220 	orr.w	r2, r3, #32
 801496e:	697b      	ldr	r3, [r7, #20]
 8014970:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8014972:	e00a      	b.n	801498a <I2C_DMAAbort+0x5e>
    }
    count--;
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	3b01      	subs	r3, #1
 8014978:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801497a:	697b      	ldr	r3, [r7, #20]
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014988:	d0ea      	beq.n	8014960 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801498a:	697b      	ldr	r3, [r7, #20]
 801498c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801498e:	2b00      	cmp	r3, #0
 8014990:	d003      	beq.n	801499a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8014992:	697b      	ldr	r3, [r7, #20]
 8014994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014996:	2200      	movs	r2, #0
 8014998:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801499a:	697b      	ldr	r3, [r7, #20]
 801499c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d003      	beq.n	80149aa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80149a2:	697b      	ldr	r3, [r7, #20]
 80149a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149a6:	2200      	movs	r2, #0
 80149a8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80149aa:	697b      	ldr	r3, [r7, #20]
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	681a      	ldr	r2, [r3, #0]
 80149b0:	697b      	ldr	r3, [r7, #20]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80149b8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80149ba:	697b      	ldr	r3, [r7, #20]
 80149bc:	2200      	movs	r2, #0
 80149be:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80149c0:	697b      	ldr	r3, [r7, #20]
 80149c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d003      	beq.n	80149d0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80149c8:	697b      	ldr	r3, [r7, #20]
 80149ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149cc:	2200      	movs	r2, #0
 80149ce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80149d0:	697b      	ldr	r3, [r7, #20]
 80149d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d003      	beq.n	80149e0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80149d8:	697b      	ldr	r3, [r7, #20]
 80149da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149dc:	2200      	movs	r2, #0
 80149de:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80149e0:	697b      	ldr	r3, [r7, #20]
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	681a      	ldr	r2, [r3, #0]
 80149e6:	697b      	ldr	r3, [r7, #20]
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	f022 0201 	bic.w	r2, r2, #1
 80149ee:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80149f0:	697b      	ldr	r3, [r7, #20]
 80149f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80149f6:	b2db      	uxtb	r3, r3
 80149f8:	2b60      	cmp	r3, #96	; 0x60
 80149fa:	d10e      	bne.n	8014a1a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80149fc:	697b      	ldr	r3, [r7, #20]
 80149fe:	2220      	movs	r2, #32
 8014a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8014a04:	697b      	ldr	r3, [r7, #20]
 8014a06:	2200      	movs	r2, #0
 8014a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8014a0c:	697b      	ldr	r3, [r7, #20]
 8014a0e:	2200      	movs	r2, #0
 8014a10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8014a12:	6978      	ldr	r0, [r7, #20]
 8014a14:	f7fe fd2a 	bl	801346c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8014a18:	e027      	b.n	8014a6a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8014a1a:	7cfb      	ldrb	r3, [r7, #19]
 8014a1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8014a20:	2b28      	cmp	r3, #40	; 0x28
 8014a22:	d117      	bne.n	8014a54 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8014a24:	697b      	ldr	r3, [r7, #20]
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	681a      	ldr	r2, [r3, #0]
 8014a2a:	697b      	ldr	r3, [r7, #20]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	f042 0201 	orr.w	r2, r2, #1
 8014a32:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014a34:	697b      	ldr	r3, [r7, #20]
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	681a      	ldr	r2, [r3, #0]
 8014a3a:	697b      	ldr	r3, [r7, #20]
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014a42:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8014a44:	697b      	ldr	r3, [r7, #20]
 8014a46:	2200      	movs	r2, #0
 8014a48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8014a4a:	697b      	ldr	r3, [r7, #20]
 8014a4c:	2228      	movs	r2, #40	; 0x28
 8014a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8014a52:	e007      	b.n	8014a64 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8014a54:	697b      	ldr	r3, [r7, #20]
 8014a56:	2220      	movs	r2, #32
 8014a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014a5c:	697b      	ldr	r3, [r7, #20]
 8014a5e:	2200      	movs	r2, #0
 8014a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8014a64:	6978      	ldr	r0, [r7, #20]
 8014a66:	f7fe fcf7 	bl	8013458 <HAL_I2C_ErrorCallback>
}
 8014a6a:	bf00      	nop
 8014a6c:	3718      	adds	r7, #24
 8014a6e:	46bd      	mov	sp, r7
 8014a70:	bd80      	pop	{r7, pc}
 8014a72:	bf00      	nop
 8014a74:	2000001c 	.word	0x2000001c
 8014a78:	14f8b589 	.word	0x14f8b589

08014a7c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8014a7c:	b480      	push	{r7}
 8014a7e:	b085      	sub	sp, #20
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014a84:	2300      	movs	r3, #0
 8014a86:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8014a88:	4b13      	ldr	r3, [pc, #76]	; (8014ad8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	08db      	lsrs	r3, r3, #3
 8014a8e:	4a13      	ldr	r2, [pc, #76]	; (8014adc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8014a90:	fba2 2303 	umull	r2, r3, r2, r3
 8014a94:	0a1a      	lsrs	r2, r3, #8
 8014a96:	4613      	mov	r3, r2
 8014a98:	009b      	lsls	r3, r3, #2
 8014a9a:	4413      	add	r3, r2
 8014a9c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	3b01      	subs	r3, #1
 8014aa2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d107      	bne.n	8014aba <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014aae:	f043 0220 	orr.w	r2, r3, #32
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8014ab6:	2301      	movs	r3, #1
 8014ab8:	e008      	b.n	8014acc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014ac8:	d0e9      	beq.n	8014a9e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8014aca:	2300      	movs	r3, #0
}
 8014acc:	4618      	mov	r0, r3
 8014ace:	3714      	adds	r7, #20
 8014ad0:	46bd      	mov	sp, r7
 8014ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad6:	4770      	bx	lr
 8014ad8:	2000001c 	.word	0x2000001c
 8014adc:	14f8b589 	.word	0x14f8b589

08014ae0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8014ae0:	b480      	push	{r7}
 8014ae2:	b083      	sub	sp, #12
 8014ae4:	af00      	add	r7, sp, #0
 8014ae6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014aec:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8014af0:	d103      	bne.n	8014afa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	2201      	movs	r2, #1
 8014af6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8014af8:	e007      	b.n	8014b0a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014afe:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8014b02:	d102      	bne.n	8014b0a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	2208      	movs	r2, #8
 8014b08:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8014b0a:	bf00      	nop
 8014b0c:	370c      	adds	r7, #12
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b14:	4770      	bx	lr
	...

08014b18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b086      	sub	sp, #24
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d101      	bne.n	8014b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8014b26:	2301      	movs	r3, #1
 8014b28:	e25b      	b.n	8014fe2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	f003 0301 	and.w	r3, r3, #1
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d075      	beq.n	8014c22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8014b36:	4ba3      	ldr	r3, [pc, #652]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014b38:	689b      	ldr	r3, [r3, #8]
 8014b3a:	f003 030c 	and.w	r3, r3, #12
 8014b3e:	2b04      	cmp	r3, #4
 8014b40:	d00c      	beq.n	8014b5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8014b42:	4ba0      	ldr	r3, [pc, #640]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014b44:	689b      	ldr	r3, [r3, #8]
 8014b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8014b4a:	2b08      	cmp	r3, #8
 8014b4c:	d112      	bne.n	8014b74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8014b4e:	4b9d      	ldr	r3, [pc, #628]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014b50:	685b      	ldr	r3, [r3, #4]
 8014b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014b56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014b5a:	d10b      	bne.n	8014b74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014b5c:	4b99      	ldr	r3, [pc, #612]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d05b      	beq.n	8014c20 <HAL_RCC_OscConfig+0x108>
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	685b      	ldr	r3, [r3, #4]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d157      	bne.n	8014c20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8014b70:	2301      	movs	r3, #1
 8014b72:	e236      	b.n	8014fe2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	685b      	ldr	r3, [r3, #4]
 8014b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014b7c:	d106      	bne.n	8014b8c <HAL_RCC_OscConfig+0x74>
 8014b7e:	4b91      	ldr	r3, [pc, #580]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	4a90      	ldr	r2, [pc, #576]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014b88:	6013      	str	r3, [r2, #0]
 8014b8a:	e01d      	b.n	8014bc8 <HAL_RCC_OscConfig+0xb0>
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	685b      	ldr	r3, [r3, #4]
 8014b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8014b94:	d10c      	bne.n	8014bb0 <HAL_RCC_OscConfig+0x98>
 8014b96:	4b8b      	ldr	r3, [pc, #556]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	4a8a      	ldr	r2, [pc, #552]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014ba0:	6013      	str	r3, [r2, #0]
 8014ba2:	4b88      	ldr	r3, [pc, #544]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	4a87      	ldr	r2, [pc, #540]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014bac:	6013      	str	r3, [r2, #0]
 8014bae:	e00b      	b.n	8014bc8 <HAL_RCC_OscConfig+0xb0>
 8014bb0:	4b84      	ldr	r3, [pc, #528]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	4a83      	ldr	r2, [pc, #524]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014bba:	6013      	str	r3, [r2, #0]
 8014bbc:	4b81      	ldr	r3, [pc, #516]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	4a80      	ldr	r2, [pc, #512]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	685b      	ldr	r3, [r3, #4]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d013      	beq.n	8014bf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014bd0:	f7fc f8ac 	bl	8010d2c <HAL_GetTick>
 8014bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8014bd6:	e008      	b.n	8014bea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014bd8:	f7fc f8a8 	bl	8010d2c <HAL_GetTick>
 8014bdc:	4602      	mov	r2, r0
 8014bde:	693b      	ldr	r3, [r7, #16]
 8014be0:	1ad3      	subs	r3, r2, r3
 8014be2:	2b64      	cmp	r3, #100	; 0x64
 8014be4:	d901      	bls.n	8014bea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8014be6:	2303      	movs	r3, #3
 8014be8:	e1fb      	b.n	8014fe2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8014bea:	4b76      	ldr	r3, [pc, #472]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d0f0      	beq.n	8014bd8 <HAL_RCC_OscConfig+0xc0>
 8014bf6:	e014      	b.n	8014c22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014bf8:	f7fc f898 	bl	8010d2c <HAL_GetTick>
 8014bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8014bfe:	e008      	b.n	8014c12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014c00:	f7fc f894 	bl	8010d2c <HAL_GetTick>
 8014c04:	4602      	mov	r2, r0
 8014c06:	693b      	ldr	r3, [r7, #16]
 8014c08:	1ad3      	subs	r3, r2, r3
 8014c0a:	2b64      	cmp	r3, #100	; 0x64
 8014c0c:	d901      	bls.n	8014c12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8014c0e:	2303      	movs	r3, #3
 8014c10:	e1e7      	b.n	8014fe2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8014c12:	4b6c      	ldr	r3, [pc, #432]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d1f0      	bne.n	8014c00 <HAL_RCC_OscConfig+0xe8>
 8014c1e:	e000      	b.n	8014c22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	f003 0302 	and.w	r3, r3, #2
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d063      	beq.n	8014cf6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8014c2e:	4b65      	ldr	r3, [pc, #404]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014c30:	689b      	ldr	r3, [r3, #8]
 8014c32:	f003 030c 	and.w	r3, r3, #12
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d00b      	beq.n	8014c52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8014c3a:	4b62      	ldr	r3, [pc, #392]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014c3c:	689b      	ldr	r3, [r3, #8]
 8014c3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8014c42:	2b08      	cmp	r3, #8
 8014c44:	d11c      	bne.n	8014c80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8014c46:	4b5f      	ldr	r3, [pc, #380]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014c48:	685b      	ldr	r3, [r3, #4]
 8014c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d116      	bne.n	8014c80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8014c52:	4b5c      	ldr	r3, [pc, #368]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	f003 0302 	and.w	r3, r3, #2
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d005      	beq.n	8014c6a <HAL_RCC_OscConfig+0x152>
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	68db      	ldr	r3, [r3, #12]
 8014c62:	2b01      	cmp	r3, #1
 8014c64:	d001      	beq.n	8014c6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8014c66:	2301      	movs	r3, #1
 8014c68:	e1bb      	b.n	8014fe2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014c6a:	4b56      	ldr	r3, [pc, #344]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	691b      	ldr	r3, [r3, #16]
 8014c76:	00db      	lsls	r3, r3, #3
 8014c78:	4952      	ldr	r1, [pc, #328]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014c7a:	4313      	orrs	r3, r2
 8014c7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8014c7e:	e03a      	b.n	8014cf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	68db      	ldr	r3, [r3, #12]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d020      	beq.n	8014cca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8014c88:	4b4f      	ldr	r3, [pc, #316]	; (8014dc8 <HAL_RCC_OscConfig+0x2b0>)
 8014c8a:	2201      	movs	r2, #1
 8014c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014c8e:	f7fc f84d 	bl	8010d2c <HAL_GetTick>
 8014c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8014c94:	e008      	b.n	8014ca8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014c96:	f7fc f849 	bl	8010d2c <HAL_GetTick>
 8014c9a:	4602      	mov	r2, r0
 8014c9c:	693b      	ldr	r3, [r7, #16]
 8014c9e:	1ad3      	subs	r3, r2, r3
 8014ca0:	2b02      	cmp	r3, #2
 8014ca2:	d901      	bls.n	8014ca8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8014ca4:	2303      	movs	r3, #3
 8014ca6:	e19c      	b.n	8014fe2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8014ca8:	4b46      	ldr	r3, [pc, #280]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	f003 0302 	and.w	r3, r3, #2
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d0f0      	beq.n	8014c96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014cb4:	4b43      	ldr	r3, [pc, #268]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	691b      	ldr	r3, [r3, #16]
 8014cc0:	00db      	lsls	r3, r3, #3
 8014cc2:	4940      	ldr	r1, [pc, #256]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014cc4:	4313      	orrs	r3, r2
 8014cc6:	600b      	str	r3, [r1, #0]
 8014cc8:	e015      	b.n	8014cf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8014cca:	4b3f      	ldr	r3, [pc, #252]	; (8014dc8 <HAL_RCC_OscConfig+0x2b0>)
 8014ccc:	2200      	movs	r2, #0
 8014cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014cd0:	f7fc f82c 	bl	8010d2c <HAL_GetTick>
 8014cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8014cd6:	e008      	b.n	8014cea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014cd8:	f7fc f828 	bl	8010d2c <HAL_GetTick>
 8014cdc:	4602      	mov	r2, r0
 8014cde:	693b      	ldr	r3, [r7, #16]
 8014ce0:	1ad3      	subs	r3, r2, r3
 8014ce2:	2b02      	cmp	r3, #2
 8014ce4:	d901      	bls.n	8014cea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8014ce6:	2303      	movs	r3, #3
 8014ce8:	e17b      	b.n	8014fe2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8014cea:	4b36      	ldr	r3, [pc, #216]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	f003 0302 	and.w	r3, r3, #2
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d1f0      	bne.n	8014cd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	f003 0308 	and.w	r3, r3, #8
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d030      	beq.n	8014d64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	695b      	ldr	r3, [r3, #20]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d016      	beq.n	8014d38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8014d0a:	4b30      	ldr	r3, [pc, #192]	; (8014dcc <HAL_RCC_OscConfig+0x2b4>)
 8014d0c:	2201      	movs	r2, #1
 8014d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014d10:	f7fc f80c 	bl	8010d2c <HAL_GetTick>
 8014d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8014d16:	e008      	b.n	8014d2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014d18:	f7fc f808 	bl	8010d2c <HAL_GetTick>
 8014d1c:	4602      	mov	r2, r0
 8014d1e:	693b      	ldr	r3, [r7, #16]
 8014d20:	1ad3      	subs	r3, r2, r3
 8014d22:	2b02      	cmp	r3, #2
 8014d24:	d901      	bls.n	8014d2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8014d26:	2303      	movs	r3, #3
 8014d28:	e15b      	b.n	8014fe2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8014d2a:	4b26      	ldr	r3, [pc, #152]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d2e:	f003 0302 	and.w	r3, r3, #2
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d0f0      	beq.n	8014d18 <HAL_RCC_OscConfig+0x200>
 8014d36:	e015      	b.n	8014d64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014d38:	4b24      	ldr	r3, [pc, #144]	; (8014dcc <HAL_RCC_OscConfig+0x2b4>)
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014d3e:	f7fb fff5 	bl	8010d2c <HAL_GetTick>
 8014d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8014d44:	e008      	b.n	8014d58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014d46:	f7fb fff1 	bl	8010d2c <HAL_GetTick>
 8014d4a:	4602      	mov	r2, r0
 8014d4c:	693b      	ldr	r3, [r7, #16]
 8014d4e:	1ad3      	subs	r3, r2, r3
 8014d50:	2b02      	cmp	r3, #2
 8014d52:	d901      	bls.n	8014d58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8014d54:	2303      	movs	r3, #3
 8014d56:	e144      	b.n	8014fe2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8014d58:	4b1a      	ldr	r3, [pc, #104]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d5c:	f003 0302 	and.w	r3, r3, #2
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d1f0      	bne.n	8014d46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	f003 0304 	and.w	r3, r3, #4
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	f000 80a0 	beq.w	8014eb2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8014d72:	2300      	movs	r3, #0
 8014d74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8014d76:	4b13      	ldr	r3, [pc, #76]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d10f      	bne.n	8014da2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8014d82:	2300      	movs	r3, #0
 8014d84:	60bb      	str	r3, [r7, #8]
 8014d86:	4b0f      	ldr	r3, [pc, #60]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d8a:	4a0e      	ldr	r2, [pc, #56]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014d90:	6413      	str	r3, [r2, #64]	; 0x40
 8014d92:	4b0c      	ldr	r3, [pc, #48]	; (8014dc4 <HAL_RCC_OscConfig+0x2ac>)
 8014d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014d9a:	60bb      	str	r3, [r7, #8]
 8014d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8014d9e:	2301      	movs	r3, #1
 8014da0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014da2:	4b0b      	ldr	r3, [pc, #44]	; (8014dd0 <HAL_RCC_OscConfig+0x2b8>)
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d121      	bne.n	8014df2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8014dae:	4b08      	ldr	r3, [pc, #32]	; (8014dd0 <HAL_RCC_OscConfig+0x2b8>)
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	4a07      	ldr	r2, [pc, #28]	; (8014dd0 <HAL_RCC_OscConfig+0x2b8>)
 8014db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8014dba:	f7fb ffb7 	bl	8010d2c <HAL_GetTick>
 8014dbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014dc0:	e011      	b.n	8014de6 <HAL_RCC_OscConfig+0x2ce>
 8014dc2:	bf00      	nop
 8014dc4:	40023800 	.word	0x40023800
 8014dc8:	42470000 	.word	0x42470000
 8014dcc:	42470e80 	.word	0x42470e80
 8014dd0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014dd4:	f7fb ffaa 	bl	8010d2c <HAL_GetTick>
 8014dd8:	4602      	mov	r2, r0
 8014dda:	693b      	ldr	r3, [r7, #16]
 8014ddc:	1ad3      	subs	r3, r2, r3
 8014dde:	2b02      	cmp	r3, #2
 8014de0:	d901      	bls.n	8014de6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8014de2:	2303      	movs	r3, #3
 8014de4:	e0fd      	b.n	8014fe2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014de6:	4b81      	ldr	r3, [pc, #516]	; (8014fec <HAL_RCC_OscConfig+0x4d4>)
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d0f0      	beq.n	8014dd4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	689b      	ldr	r3, [r3, #8]
 8014df6:	2b01      	cmp	r3, #1
 8014df8:	d106      	bne.n	8014e08 <HAL_RCC_OscConfig+0x2f0>
 8014dfa:	4b7d      	ldr	r3, [pc, #500]	; (8014ff0 <HAL_RCC_OscConfig+0x4d8>)
 8014dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014dfe:	4a7c      	ldr	r2, [pc, #496]	; (8014ff0 <HAL_RCC_OscConfig+0x4d8>)
 8014e00:	f043 0301 	orr.w	r3, r3, #1
 8014e04:	6713      	str	r3, [r2, #112]	; 0x70
 8014e06:	e01c      	b.n	8014e42 <HAL_RCC_OscConfig+0x32a>
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	689b      	ldr	r3, [r3, #8]
 8014e0c:	2b05      	cmp	r3, #5
 8014e0e:	d10c      	bne.n	8014e2a <HAL_RCC_OscConfig+0x312>
 8014e10:	4b77      	ldr	r3, [pc, #476]	; (8014ff0 <HAL_RCC_OscConfig+0x4d8>)
 8014e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e14:	4a76      	ldr	r2, [pc, #472]	; (8014ff0 <HAL_RCC_OscConfig+0x4d8>)
 8014e16:	f043 0304 	orr.w	r3, r3, #4
 8014e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8014e1c:	4b74      	ldr	r3, [pc, #464]	; (8014ff0 <HAL_RCC_OscConfig+0x4d8>)
 8014e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e20:	4a73      	ldr	r2, [pc, #460]	; (8014ff0 <HAL_RCC_OscConfig+0x4d8>)
 8014e22:	f043 0301 	orr.w	r3, r3, #1
 8014e26:	6713      	str	r3, [r2, #112]	; 0x70
 8014e28:	e00b      	b.n	8014e42 <HAL_RCC_OscConfig+0x32a>
 8014e2a:	4b71      	ldr	r3, [pc, #452]	; (8014ff0 <HAL_RCC_OscConfig+0x4d8>)
 8014e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e2e:	4a70      	ldr	r2, [pc, #448]	; (8014ff0 <HAL_RCC_OscConfig+0x4d8>)
 8014e30:	f023 0301 	bic.w	r3, r3, #1
 8014e34:	6713      	str	r3, [r2, #112]	; 0x70
 8014e36:	4b6e      	ldr	r3, [pc, #440]	; (8014ff0 <HAL_RCC_OscConfig+0x4d8>)
 8014e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e3a:	4a6d      	ldr	r2, [pc, #436]	; (8014ff0 <HAL_RCC_OscConfig+0x4d8>)
 8014e3c:	f023 0304 	bic.w	r3, r3, #4
 8014e40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	689b      	ldr	r3, [r3, #8]
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d015      	beq.n	8014e76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014e4a:	f7fb ff6f 	bl	8010d2c <HAL_GetTick>
 8014e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8014e50:	e00a      	b.n	8014e68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014e52:	f7fb ff6b 	bl	8010d2c <HAL_GetTick>
 8014e56:	4602      	mov	r2, r0
 8014e58:	693b      	ldr	r3, [r7, #16]
 8014e5a:	1ad3      	subs	r3, r2, r3
 8014e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8014e60:	4293      	cmp	r3, r2
 8014e62:	d901      	bls.n	8014e68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8014e64:	2303      	movs	r3, #3
 8014e66:	e0bc      	b.n	8014fe2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8014e68:	4b61      	ldr	r3, [pc, #388]	; (8014ff0 <HAL_RCC_OscConfig+0x4d8>)
 8014e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e6c:	f003 0302 	and.w	r3, r3, #2
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d0ee      	beq.n	8014e52 <HAL_RCC_OscConfig+0x33a>
 8014e74:	e014      	b.n	8014ea0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014e76:	f7fb ff59 	bl	8010d2c <HAL_GetTick>
 8014e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8014e7c:	e00a      	b.n	8014e94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014e7e:	f7fb ff55 	bl	8010d2c <HAL_GetTick>
 8014e82:	4602      	mov	r2, r0
 8014e84:	693b      	ldr	r3, [r7, #16]
 8014e86:	1ad3      	subs	r3, r2, r3
 8014e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8014e8c:	4293      	cmp	r3, r2
 8014e8e:	d901      	bls.n	8014e94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8014e90:	2303      	movs	r3, #3
 8014e92:	e0a6      	b.n	8014fe2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8014e94:	4b56      	ldr	r3, [pc, #344]	; (8014ff0 <HAL_RCC_OscConfig+0x4d8>)
 8014e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e98:	f003 0302 	and.w	r3, r3, #2
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d1ee      	bne.n	8014e7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8014ea0:	7dfb      	ldrb	r3, [r7, #23]
 8014ea2:	2b01      	cmp	r3, #1
 8014ea4:	d105      	bne.n	8014eb2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014ea6:	4b52      	ldr	r3, [pc, #328]	; (8014ff0 <HAL_RCC_OscConfig+0x4d8>)
 8014ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014eaa:	4a51      	ldr	r2, [pc, #324]	; (8014ff0 <HAL_RCC_OscConfig+0x4d8>)
 8014eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014eb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	699b      	ldr	r3, [r3, #24]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	f000 8092 	beq.w	8014fe0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8014ebc:	4b4c      	ldr	r3, [pc, #304]	; (8014ff0 <HAL_RCC_OscConfig+0x4d8>)
 8014ebe:	689b      	ldr	r3, [r3, #8]
 8014ec0:	f003 030c 	and.w	r3, r3, #12
 8014ec4:	2b08      	cmp	r3, #8
 8014ec6:	d05c      	beq.n	8014f82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	699b      	ldr	r3, [r3, #24]
 8014ecc:	2b02      	cmp	r3, #2
 8014ece:	d141      	bne.n	8014f54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014ed0:	4b48      	ldr	r3, [pc, #288]	; (8014ff4 <HAL_RCC_OscConfig+0x4dc>)
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014ed6:	f7fb ff29 	bl	8010d2c <HAL_GetTick>
 8014eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014edc:	e008      	b.n	8014ef0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014ede:	f7fb ff25 	bl	8010d2c <HAL_GetTick>
 8014ee2:	4602      	mov	r2, r0
 8014ee4:	693b      	ldr	r3, [r7, #16]
 8014ee6:	1ad3      	subs	r3, r2, r3
 8014ee8:	2b02      	cmp	r3, #2
 8014eea:	d901      	bls.n	8014ef0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8014eec:	2303      	movs	r3, #3
 8014eee:	e078      	b.n	8014fe2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014ef0:	4b3f      	ldr	r3, [pc, #252]	; (8014ff0 <HAL_RCC_OscConfig+0x4d8>)
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d1f0      	bne.n	8014ede <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	69da      	ldr	r2, [r3, #28]
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	6a1b      	ldr	r3, [r3, #32]
 8014f04:	431a      	orrs	r2, r3
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f0a:	019b      	lsls	r3, r3, #6
 8014f0c:	431a      	orrs	r2, r3
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f12:	085b      	lsrs	r3, r3, #1
 8014f14:	3b01      	subs	r3, #1
 8014f16:	041b      	lsls	r3, r3, #16
 8014f18:	431a      	orrs	r2, r3
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f1e:	061b      	lsls	r3, r3, #24
 8014f20:	4933      	ldr	r1, [pc, #204]	; (8014ff0 <HAL_RCC_OscConfig+0x4d8>)
 8014f22:	4313      	orrs	r3, r2
 8014f24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8014f26:	4b33      	ldr	r3, [pc, #204]	; (8014ff4 <HAL_RCC_OscConfig+0x4dc>)
 8014f28:	2201      	movs	r2, #1
 8014f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014f2c:	f7fb fefe 	bl	8010d2c <HAL_GetTick>
 8014f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8014f32:	e008      	b.n	8014f46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014f34:	f7fb fefa 	bl	8010d2c <HAL_GetTick>
 8014f38:	4602      	mov	r2, r0
 8014f3a:	693b      	ldr	r3, [r7, #16]
 8014f3c:	1ad3      	subs	r3, r2, r3
 8014f3e:	2b02      	cmp	r3, #2
 8014f40:	d901      	bls.n	8014f46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8014f42:	2303      	movs	r3, #3
 8014f44:	e04d      	b.n	8014fe2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8014f46:	4b2a      	ldr	r3, [pc, #168]	; (8014ff0 <HAL_RCC_OscConfig+0x4d8>)
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d0f0      	beq.n	8014f34 <HAL_RCC_OscConfig+0x41c>
 8014f52:	e045      	b.n	8014fe0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014f54:	4b27      	ldr	r3, [pc, #156]	; (8014ff4 <HAL_RCC_OscConfig+0x4dc>)
 8014f56:	2200      	movs	r2, #0
 8014f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014f5a:	f7fb fee7 	bl	8010d2c <HAL_GetTick>
 8014f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014f60:	e008      	b.n	8014f74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014f62:	f7fb fee3 	bl	8010d2c <HAL_GetTick>
 8014f66:	4602      	mov	r2, r0
 8014f68:	693b      	ldr	r3, [r7, #16]
 8014f6a:	1ad3      	subs	r3, r2, r3
 8014f6c:	2b02      	cmp	r3, #2
 8014f6e:	d901      	bls.n	8014f74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8014f70:	2303      	movs	r3, #3
 8014f72:	e036      	b.n	8014fe2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014f74:	4b1e      	ldr	r3, [pc, #120]	; (8014ff0 <HAL_RCC_OscConfig+0x4d8>)
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d1f0      	bne.n	8014f62 <HAL_RCC_OscConfig+0x44a>
 8014f80:	e02e      	b.n	8014fe0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	699b      	ldr	r3, [r3, #24]
 8014f86:	2b01      	cmp	r3, #1
 8014f88:	d101      	bne.n	8014f8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8014f8a:	2301      	movs	r3, #1
 8014f8c:	e029      	b.n	8014fe2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8014f8e:	4b18      	ldr	r3, [pc, #96]	; (8014ff0 <HAL_RCC_OscConfig+0x4d8>)
 8014f90:	685b      	ldr	r3, [r3, #4]
 8014f92:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	69db      	ldr	r3, [r3, #28]
 8014f9e:	429a      	cmp	r2, r3
 8014fa0:	d11c      	bne.n	8014fdc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014fac:	429a      	cmp	r2, r3
 8014fae:	d115      	bne.n	8014fdc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8014fb0:	68fa      	ldr	r2, [r7, #12]
 8014fb2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8014fb6:	4013      	ands	r3, r2
 8014fb8:	687a      	ldr	r2, [r7, #4]
 8014fba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8014fbc:	4293      	cmp	r3, r2
 8014fbe:	d10d      	bne.n	8014fdc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8014fca:	429a      	cmp	r2, r3
 8014fcc:	d106      	bne.n	8014fdc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8014fd8:	429a      	cmp	r2, r3
 8014fda:	d001      	beq.n	8014fe0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8014fdc:	2301      	movs	r3, #1
 8014fde:	e000      	b.n	8014fe2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8014fe0:	2300      	movs	r3, #0
}
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	3718      	adds	r7, #24
 8014fe6:	46bd      	mov	sp, r7
 8014fe8:	bd80      	pop	{r7, pc}
 8014fea:	bf00      	nop
 8014fec:	40007000 	.word	0x40007000
 8014ff0:	40023800 	.word	0x40023800
 8014ff4:	42470060 	.word	0x42470060

08014ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b084      	sub	sp, #16
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	6078      	str	r0, [r7, #4]
 8015000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d101      	bne.n	801500c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8015008:	2301      	movs	r3, #1
 801500a:	e0cc      	b.n	80151a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801500c:	4b68      	ldr	r3, [pc, #416]	; (80151b0 <HAL_RCC_ClockConfig+0x1b8>)
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	f003 030f 	and.w	r3, r3, #15
 8015014:	683a      	ldr	r2, [r7, #0]
 8015016:	429a      	cmp	r2, r3
 8015018:	d90c      	bls.n	8015034 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801501a:	4b65      	ldr	r3, [pc, #404]	; (80151b0 <HAL_RCC_ClockConfig+0x1b8>)
 801501c:	683a      	ldr	r2, [r7, #0]
 801501e:	b2d2      	uxtb	r2, r2
 8015020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8015022:	4b63      	ldr	r3, [pc, #396]	; (80151b0 <HAL_RCC_ClockConfig+0x1b8>)
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	f003 030f 	and.w	r3, r3, #15
 801502a:	683a      	ldr	r2, [r7, #0]
 801502c:	429a      	cmp	r2, r3
 801502e:	d001      	beq.n	8015034 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8015030:	2301      	movs	r3, #1
 8015032:	e0b8      	b.n	80151a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	f003 0302 	and.w	r3, r3, #2
 801503c:	2b00      	cmp	r3, #0
 801503e:	d020      	beq.n	8015082 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	f003 0304 	and.w	r3, r3, #4
 8015048:	2b00      	cmp	r3, #0
 801504a:	d005      	beq.n	8015058 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801504c:	4b59      	ldr	r3, [pc, #356]	; (80151b4 <HAL_RCC_ClockConfig+0x1bc>)
 801504e:	689b      	ldr	r3, [r3, #8]
 8015050:	4a58      	ldr	r2, [pc, #352]	; (80151b4 <HAL_RCC_ClockConfig+0x1bc>)
 8015052:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8015056:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	f003 0308 	and.w	r3, r3, #8
 8015060:	2b00      	cmp	r3, #0
 8015062:	d005      	beq.n	8015070 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8015064:	4b53      	ldr	r3, [pc, #332]	; (80151b4 <HAL_RCC_ClockConfig+0x1bc>)
 8015066:	689b      	ldr	r3, [r3, #8]
 8015068:	4a52      	ldr	r2, [pc, #328]	; (80151b4 <HAL_RCC_ClockConfig+0x1bc>)
 801506a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801506e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8015070:	4b50      	ldr	r3, [pc, #320]	; (80151b4 <HAL_RCC_ClockConfig+0x1bc>)
 8015072:	689b      	ldr	r3, [r3, #8]
 8015074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	689b      	ldr	r3, [r3, #8]
 801507c:	494d      	ldr	r1, [pc, #308]	; (80151b4 <HAL_RCC_ClockConfig+0x1bc>)
 801507e:	4313      	orrs	r3, r2
 8015080:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	f003 0301 	and.w	r3, r3, #1
 801508a:	2b00      	cmp	r3, #0
 801508c:	d044      	beq.n	8015118 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	685b      	ldr	r3, [r3, #4]
 8015092:	2b01      	cmp	r3, #1
 8015094:	d107      	bne.n	80150a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8015096:	4b47      	ldr	r3, [pc, #284]	; (80151b4 <HAL_RCC_ClockConfig+0x1bc>)
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d119      	bne.n	80150d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80150a2:	2301      	movs	r3, #1
 80150a4:	e07f      	b.n	80151a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	685b      	ldr	r3, [r3, #4]
 80150aa:	2b02      	cmp	r3, #2
 80150ac:	d003      	beq.n	80150b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80150b2:	2b03      	cmp	r3, #3
 80150b4:	d107      	bne.n	80150c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80150b6:	4b3f      	ldr	r3, [pc, #252]	; (80151b4 <HAL_RCC_ClockConfig+0x1bc>)
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d109      	bne.n	80150d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80150c2:	2301      	movs	r3, #1
 80150c4:	e06f      	b.n	80151a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80150c6:	4b3b      	ldr	r3, [pc, #236]	; (80151b4 <HAL_RCC_ClockConfig+0x1bc>)
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	f003 0302 	and.w	r3, r3, #2
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d101      	bne.n	80150d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80150d2:	2301      	movs	r3, #1
 80150d4:	e067      	b.n	80151a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80150d6:	4b37      	ldr	r3, [pc, #220]	; (80151b4 <HAL_RCC_ClockConfig+0x1bc>)
 80150d8:	689b      	ldr	r3, [r3, #8]
 80150da:	f023 0203 	bic.w	r2, r3, #3
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	685b      	ldr	r3, [r3, #4]
 80150e2:	4934      	ldr	r1, [pc, #208]	; (80151b4 <HAL_RCC_ClockConfig+0x1bc>)
 80150e4:	4313      	orrs	r3, r2
 80150e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80150e8:	f7fb fe20 	bl	8010d2c <HAL_GetTick>
 80150ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80150ee:	e00a      	b.n	8015106 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80150f0:	f7fb fe1c 	bl	8010d2c <HAL_GetTick>
 80150f4:	4602      	mov	r2, r0
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	1ad3      	subs	r3, r2, r3
 80150fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80150fe:	4293      	cmp	r3, r2
 8015100:	d901      	bls.n	8015106 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8015102:	2303      	movs	r3, #3
 8015104:	e04f      	b.n	80151a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015106:	4b2b      	ldr	r3, [pc, #172]	; (80151b4 <HAL_RCC_ClockConfig+0x1bc>)
 8015108:	689b      	ldr	r3, [r3, #8]
 801510a:	f003 020c 	and.w	r2, r3, #12
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	685b      	ldr	r3, [r3, #4]
 8015112:	009b      	lsls	r3, r3, #2
 8015114:	429a      	cmp	r2, r3
 8015116:	d1eb      	bne.n	80150f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8015118:	4b25      	ldr	r3, [pc, #148]	; (80151b0 <HAL_RCC_ClockConfig+0x1b8>)
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	f003 030f 	and.w	r3, r3, #15
 8015120:	683a      	ldr	r2, [r7, #0]
 8015122:	429a      	cmp	r2, r3
 8015124:	d20c      	bcs.n	8015140 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015126:	4b22      	ldr	r3, [pc, #136]	; (80151b0 <HAL_RCC_ClockConfig+0x1b8>)
 8015128:	683a      	ldr	r2, [r7, #0]
 801512a:	b2d2      	uxtb	r2, r2
 801512c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801512e:	4b20      	ldr	r3, [pc, #128]	; (80151b0 <HAL_RCC_ClockConfig+0x1b8>)
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	f003 030f 	and.w	r3, r3, #15
 8015136:	683a      	ldr	r2, [r7, #0]
 8015138:	429a      	cmp	r2, r3
 801513a:	d001      	beq.n	8015140 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801513c:	2301      	movs	r3, #1
 801513e:	e032      	b.n	80151a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	f003 0304 	and.w	r3, r3, #4
 8015148:	2b00      	cmp	r3, #0
 801514a:	d008      	beq.n	801515e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801514c:	4b19      	ldr	r3, [pc, #100]	; (80151b4 <HAL_RCC_ClockConfig+0x1bc>)
 801514e:	689b      	ldr	r3, [r3, #8]
 8015150:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	68db      	ldr	r3, [r3, #12]
 8015158:	4916      	ldr	r1, [pc, #88]	; (80151b4 <HAL_RCC_ClockConfig+0x1bc>)
 801515a:	4313      	orrs	r3, r2
 801515c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	f003 0308 	and.w	r3, r3, #8
 8015166:	2b00      	cmp	r3, #0
 8015168:	d009      	beq.n	801517e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801516a:	4b12      	ldr	r3, [pc, #72]	; (80151b4 <HAL_RCC_ClockConfig+0x1bc>)
 801516c:	689b      	ldr	r3, [r3, #8]
 801516e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	691b      	ldr	r3, [r3, #16]
 8015176:	00db      	lsls	r3, r3, #3
 8015178:	490e      	ldr	r1, [pc, #56]	; (80151b4 <HAL_RCC_ClockConfig+0x1bc>)
 801517a:	4313      	orrs	r3, r2
 801517c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801517e:	f000 f82d 	bl	80151dc <HAL_RCC_GetSysClockFreq>
 8015182:	4602      	mov	r2, r0
 8015184:	4b0b      	ldr	r3, [pc, #44]	; (80151b4 <HAL_RCC_ClockConfig+0x1bc>)
 8015186:	689b      	ldr	r3, [r3, #8]
 8015188:	091b      	lsrs	r3, r3, #4
 801518a:	f003 030f 	and.w	r3, r3, #15
 801518e:	490a      	ldr	r1, [pc, #40]	; (80151b8 <HAL_RCC_ClockConfig+0x1c0>)
 8015190:	5ccb      	ldrb	r3, [r1, r3]
 8015192:	fa22 f303 	lsr.w	r3, r2, r3
 8015196:	4a09      	ldr	r2, [pc, #36]	; (80151bc <HAL_RCC_ClockConfig+0x1c4>)
 8015198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801519a:	4b09      	ldr	r3, [pc, #36]	; (80151c0 <HAL_RCC_ClockConfig+0x1c8>)
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	4618      	mov	r0, r3
 80151a0:	f7f7 f8fa 	bl	800c398 <HAL_InitTick>

  return HAL_OK;
 80151a4:	2300      	movs	r3, #0
}
 80151a6:	4618      	mov	r0, r3
 80151a8:	3710      	adds	r7, #16
 80151aa:	46bd      	mov	sp, r7
 80151ac:	bd80      	pop	{r7, pc}
 80151ae:	bf00      	nop
 80151b0:	40023c00 	.word	0x40023c00
 80151b4:	40023800 	.word	0x40023800
 80151b8:	08020594 	.word	0x08020594
 80151bc:	2000001c 	.word	0x2000001c
 80151c0:	20000080 	.word	0x20000080

080151c4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80151c4:	b480      	push	{r7}
 80151c6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80151c8:	4b03      	ldr	r3, [pc, #12]	; (80151d8 <HAL_RCC_EnableCSS+0x14>)
 80151ca:	2201      	movs	r2, #1
 80151cc:	601a      	str	r2, [r3, #0]
}
 80151ce:	bf00      	nop
 80151d0:	46bd      	mov	sp, r7
 80151d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151d6:	4770      	bx	lr
 80151d8:	4247004c 	.word	0x4247004c

080151dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80151dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80151e0:	b084      	sub	sp, #16
 80151e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80151e4:	2300      	movs	r3, #0
 80151e6:	607b      	str	r3, [r7, #4]
 80151e8:	2300      	movs	r3, #0
 80151ea:	60fb      	str	r3, [r7, #12]
 80151ec:	2300      	movs	r3, #0
 80151ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80151f0:	2300      	movs	r3, #0
 80151f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80151f4:	4b67      	ldr	r3, [pc, #412]	; (8015394 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80151f6:	689b      	ldr	r3, [r3, #8]
 80151f8:	f003 030c 	and.w	r3, r3, #12
 80151fc:	2b08      	cmp	r3, #8
 80151fe:	d00d      	beq.n	801521c <HAL_RCC_GetSysClockFreq+0x40>
 8015200:	2b08      	cmp	r3, #8
 8015202:	f200 80bd 	bhi.w	8015380 <HAL_RCC_GetSysClockFreq+0x1a4>
 8015206:	2b00      	cmp	r3, #0
 8015208:	d002      	beq.n	8015210 <HAL_RCC_GetSysClockFreq+0x34>
 801520a:	2b04      	cmp	r3, #4
 801520c:	d003      	beq.n	8015216 <HAL_RCC_GetSysClockFreq+0x3a>
 801520e:	e0b7      	b.n	8015380 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8015210:	4b61      	ldr	r3, [pc, #388]	; (8015398 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8015212:	60bb      	str	r3, [r7, #8]
       break;
 8015214:	e0b7      	b.n	8015386 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8015216:	4b61      	ldr	r3, [pc, #388]	; (801539c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8015218:	60bb      	str	r3, [r7, #8]
      break;
 801521a:	e0b4      	b.n	8015386 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801521c:	4b5d      	ldr	r3, [pc, #372]	; (8015394 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801521e:	685b      	ldr	r3, [r3, #4]
 8015220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015224:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8015226:	4b5b      	ldr	r3, [pc, #364]	; (8015394 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8015228:	685b      	ldr	r3, [r3, #4]
 801522a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801522e:	2b00      	cmp	r3, #0
 8015230:	d04d      	beq.n	80152ce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8015232:	4b58      	ldr	r3, [pc, #352]	; (8015394 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8015234:	685b      	ldr	r3, [r3, #4]
 8015236:	099b      	lsrs	r3, r3, #6
 8015238:	461a      	mov	r2, r3
 801523a:	f04f 0300 	mov.w	r3, #0
 801523e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8015242:	f04f 0100 	mov.w	r1, #0
 8015246:	ea02 0800 	and.w	r8, r2, r0
 801524a:	ea03 0901 	and.w	r9, r3, r1
 801524e:	4640      	mov	r0, r8
 8015250:	4649      	mov	r1, r9
 8015252:	f04f 0200 	mov.w	r2, #0
 8015256:	f04f 0300 	mov.w	r3, #0
 801525a:	014b      	lsls	r3, r1, #5
 801525c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8015260:	0142      	lsls	r2, r0, #5
 8015262:	4610      	mov	r0, r2
 8015264:	4619      	mov	r1, r3
 8015266:	ebb0 0008 	subs.w	r0, r0, r8
 801526a:	eb61 0109 	sbc.w	r1, r1, r9
 801526e:	f04f 0200 	mov.w	r2, #0
 8015272:	f04f 0300 	mov.w	r3, #0
 8015276:	018b      	lsls	r3, r1, #6
 8015278:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801527c:	0182      	lsls	r2, r0, #6
 801527e:	1a12      	subs	r2, r2, r0
 8015280:	eb63 0301 	sbc.w	r3, r3, r1
 8015284:	f04f 0000 	mov.w	r0, #0
 8015288:	f04f 0100 	mov.w	r1, #0
 801528c:	00d9      	lsls	r1, r3, #3
 801528e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8015292:	00d0      	lsls	r0, r2, #3
 8015294:	4602      	mov	r2, r0
 8015296:	460b      	mov	r3, r1
 8015298:	eb12 0208 	adds.w	r2, r2, r8
 801529c:	eb43 0309 	adc.w	r3, r3, r9
 80152a0:	f04f 0000 	mov.w	r0, #0
 80152a4:	f04f 0100 	mov.w	r1, #0
 80152a8:	0259      	lsls	r1, r3, #9
 80152aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80152ae:	0250      	lsls	r0, r2, #9
 80152b0:	4602      	mov	r2, r0
 80152b2:	460b      	mov	r3, r1
 80152b4:	4610      	mov	r0, r2
 80152b6:	4619      	mov	r1, r3
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	461a      	mov	r2, r3
 80152bc:	f04f 0300 	mov.w	r3, #0
 80152c0:	f7eb fce2 	bl	8000c88 <__aeabi_uldivmod>
 80152c4:	4602      	mov	r2, r0
 80152c6:	460b      	mov	r3, r1
 80152c8:	4613      	mov	r3, r2
 80152ca:	60fb      	str	r3, [r7, #12]
 80152cc:	e04a      	b.n	8015364 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80152ce:	4b31      	ldr	r3, [pc, #196]	; (8015394 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80152d0:	685b      	ldr	r3, [r3, #4]
 80152d2:	099b      	lsrs	r3, r3, #6
 80152d4:	461a      	mov	r2, r3
 80152d6:	f04f 0300 	mov.w	r3, #0
 80152da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80152de:	f04f 0100 	mov.w	r1, #0
 80152e2:	ea02 0400 	and.w	r4, r2, r0
 80152e6:	ea03 0501 	and.w	r5, r3, r1
 80152ea:	4620      	mov	r0, r4
 80152ec:	4629      	mov	r1, r5
 80152ee:	f04f 0200 	mov.w	r2, #0
 80152f2:	f04f 0300 	mov.w	r3, #0
 80152f6:	014b      	lsls	r3, r1, #5
 80152f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80152fc:	0142      	lsls	r2, r0, #5
 80152fe:	4610      	mov	r0, r2
 8015300:	4619      	mov	r1, r3
 8015302:	1b00      	subs	r0, r0, r4
 8015304:	eb61 0105 	sbc.w	r1, r1, r5
 8015308:	f04f 0200 	mov.w	r2, #0
 801530c:	f04f 0300 	mov.w	r3, #0
 8015310:	018b      	lsls	r3, r1, #6
 8015312:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8015316:	0182      	lsls	r2, r0, #6
 8015318:	1a12      	subs	r2, r2, r0
 801531a:	eb63 0301 	sbc.w	r3, r3, r1
 801531e:	f04f 0000 	mov.w	r0, #0
 8015322:	f04f 0100 	mov.w	r1, #0
 8015326:	00d9      	lsls	r1, r3, #3
 8015328:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801532c:	00d0      	lsls	r0, r2, #3
 801532e:	4602      	mov	r2, r0
 8015330:	460b      	mov	r3, r1
 8015332:	1912      	adds	r2, r2, r4
 8015334:	eb45 0303 	adc.w	r3, r5, r3
 8015338:	f04f 0000 	mov.w	r0, #0
 801533c:	f04f 0100 	mov.w	r1, #0
 8015340:	0299      	lsls	r1, r3, #10
 8015342:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8015346:	0290      	lsls	r0, r2, #10
 8015348:	4602      	mov	r2, r0
 801534a:	460b      	mov	r3, r1
 801534c:	4610      	mov	r0, r2
 801534e:	4619      	mov	r1, r3
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	461a      	mov	r2, r3
 8015354:	f04f 0300 	mov.w	r3, #0
 8015358:	f7eb fc96 	bl	8000c88 <__aeabi_uldivmod>
 801535c:	4602      	mov	r2, r0
 801535e:	460b      	mov	r3, r1
 8015360:	4613      	mov	r3, r2
 8015362:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8015364:	4b0b      	ldr	r3, [pc, #44]	; (8015394 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8015366:	685b      	ldr	r3, [r3, #4]
 8015368:	0c1b      	lsrs	r3, r3, #16
 801536a:	f003 0303 	and.w	r3, r3, #3
 801536e:	3301      	adds	r3, #1
 8015370:	005b      	lsls	r3, r3, #1
 8015372:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8015374:	68fa      	ldr	r2, [r7, #12]
 8015376:	683b      	ldr	r3, [r7, #0]
 8015378:	fbb2 f3f3 	udiv	r3, r2, r3
 801537c:	60bb      	str	r3, [r7, #8]
      break;
 801537e:	e002      	b.n	8015386 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8015380:	4b05      	ldr	r3, [pc, #20]	; (8015398 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8015382:	60bb      	str	r3, [r7, #8]
      break;
 8015384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8015386:	68bb      	ldr	r3, [r7, #8]
}
 8015388:	4618      	mov	r0, r3
 801538a:	3710      	adds	r7, #16
 801538c:	46bd      	mov	sp, r7
 801538e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8015392:	bf00      	nop
 8015394:	40023800 	.word	0x40023800
 8015398:	00f42400 	.word	0x00f42400
 801539c:	007a1200 	.word	0x007a1200

080153a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80153a0:	b480      	push	{r7}
 80153a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80153a4:	4b03      	ldr	r3, [pc, #12]	; (80153b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80153a6:	681b      	ldr	r3, [r3, #0]
}
 80153a8:	4618      	mov	r0, r3
 80153aa:	46bd      	mov	sp, r7
 80153ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b0:	4770      	bx	lr
 80153b2:	bf00      	nop
 80153b4:	2000001c 	.word	0x2000001c

080153b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80153b8:	b580      	push	{r7, lr}
 80153ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80153bc:	f7ff fff0 	bl	80153a0 <HAL_RCC_GetHCLKFreq>
 80153c0:	4602      	mov	r2, r0
 80153c2:	4b05      	ldr	r3, [pc, #20]	; (80153d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80153c4:	689b      	ldr	r3, [r3, #8]
 80153c6:	0a9b      	lsrs	r3, r3, #10
 80153c8:	f003 0307 	and.w	r3, r3, #7
 80153cc:	4903      	ldr	r1, [pc, #12]	; (80153dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80153ce:	5ccb      	ldrb	r3, [r1, r3]
 80153d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80153d4:	4618      	mov	r0, r3
 80153d6:	bd80      	pop	{r7, pc}
 80153d8:	40023800 	.word	0x40023800
 80153dc:	080205a4 	.word	0x080205a4

080153e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80153e4:	f7ff ffdc 	bl	80153a0 <HAL_RCC_GetHCLKFreq>
 80153e8:	4602      	mov	r2, r0
 80153ea:	4b05      	ldr	r3, [pc, #20]	; (8015400 <HAL_RCC_GetPCLK2Freq+0x20>)
 80153ec:	689b      	ldr	r3, [r3, #8]
 80153ee:	0b5b      	lsrs	r3, r3, #13
 80153f0:	f003 0307 	and.w	r3, r3, #7
 80153f4:	4903      	ldr	r1, [pc, #12]	; (8015404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80153f6:	5ccb      	ldrb	r3, [r1, r3]
 80153f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80153fc:	4618      	mov	r0, r3
 80153fe:	bd80      	pop	{r7, pc}
 8015400:	40023800 	.word	0x40023800
 8015404:	080205a4 	.word	0x080205a4

08015408 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8015408:	b480      	push	{r7}
 801540a:	b083      	sub	sp, #12
 801540c:	af00      	add	r7, sp, #0
 801540e:	6078      	str	r0, [r7, #4]
 8015410:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	220f      	movs	r2, #15
 8015416:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8015418:	4b12      	ldr	r3, [pc, #72]	; (8015464 <HAL_RCC_GetClockConfig+0x5c>)
 801541a:	689b      	ldr	r3, [r3, #8]
 801541c:	f003 0203 	and.w	r2, r3, #3
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8015424:	4b0f      	ldr	r3, [pc, #60]	; (8015464 <HAL_RCC_GetClockConfig+0x5c>)
 8015426:	689b      	ldr	r3, [r3, #8]
 8015428:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8015430:	4b0c      	ldr	r3, [pc, #48]	; (8015464 <HAL_RCC_GetClockConfig+0x5c>)
 8015432:	689b      	ldr	r3, [r3, #8]
 8015434:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 801543c:	4b09      	ldr	r3, [pc, #36]	; (8015464 <HAL_RCC_GetClockConfig+0x5c>)
 801543e:	689b      	ldr	r3, [r3, #8]
 8015440:	08db      	lsrs	r3, r3, #3
 8015442:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801544a:	4b07      	ldr	r3, [pc, #28]	; (8015468 <HAL_RCC_GetClockConfig+0x60>)
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	f003 020f 	and.w	r2, r3, #15
 8015452:	683b      	ldr	r3, [r7, #0]
 8015454:	601a      	str	r2, [r3, #0]
}
 8015456:	bf00      	nop
 8015458:	370c      	adds	r7, #12
 801545a:	46bd      	mov	sp, r7
 801545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015460:	4770      	bx	lr
 8015462:	bf00      	nop
 8015464:	40023800 	.word	0x40023800
 8015468:	40023c00 	.word	0x40023c00

0801546c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801546c:	b580      	push	{r7, lr}
 801546e:	b088      	sub	sp, #32
 8015470:	af00      	add	r7, sp, #0
 8015472:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	685b      	ldr	r3, [r3, #4]
 801547a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	689b      	ldr	r3, [r3, #8]
 8015482:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8015484:	69bb      	ldr	r3, [r7, #24]
 8015486:	099b      	lsrs	r3, r3, #6
 8015488:	f003 0301 	and.w	r3, r3, #1
 801548c:	2b00      	cmp	r3, #0
 801548e:	d10f      	bne.n	80154b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8015490:	69bb      	ldr	r3, [r7, #24]
 8015492:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8015496:	2b00      	cmp	r3, #0
 8015498:	d00a      	beq.n	80154b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801549a:	69fb      	ldr	r3, [r7, #28]
 801549c:	099b      	lsrs	r3, r3, #6
 801549e:	f003 0301 	and.w	r3, r3, #1
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d004      	beq.n	80154b0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80154aa:	6878      	ldr	r0, [r7, #4]
 80154ac:	4798      	blx	r3
    return;
 80154ae:	e0d7      	b.n	8015660 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80154b0:	69bb      	ldr	r3, [r7, #24]
 80154b2:	085b      	lsrs	r3, r3, #1
 80154b4:	f003 0301 	and.w	r3, r3, #1
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d00a      	beq.n	80154d2 <HAL_SPI_IRQHandler+0x66>
 80154bc:	69fb      	ldr	r3, [r7, #28]
 80154be:	09db      	lsrs	r3, r3, #7
 80154c0:	f003 0301 	and.w	r3, r3, #1
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d004      	beq.n	80154d2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80154cc:	6878      	ldr	r0, [r7, #4]
 80154ce:	4798      	blx	r3
    return;
 80154d0:	e0c6      	b.n	8015660 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80154d2:	69bb      	ldr	r3, [r7, #24]
 80154d4:	095b      	lsrs	r3, r3, #5
 80154d6:	f003 0301 	and.w	r3, r3, #1
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d10c      	bne.n	80154f8 <HAL_SPI_IRQHandler+0x8c>
 80154de:	69bb      	ldr	r3, [r7, #24]
 80154e0:	099b      	lsrs	r3, r3, #6
 80154e2:	f003 0301 	and.w	r3, r3, #1
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d106      	bne.n	80154f8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80154ea:	69bb      	ldr	r3, [r7, #24]
 80154ec:	0a1b      	lsrs	r3, r3, #8
 80154ee:	f003 0301 	and.w	r3, r3, #1
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	f000 80b4 	beq.w	8015660 <HAL_SPI_IRQHandler+0x1f4>
 80154f8:	69fb      	ldr	r3, [r7, #28]
 80154fa:	095b      	lsrs	r3, r3, #5
 80154fc:	f003 0301 	and.w	r3, r3, #1
 8015500:	2b00      	cmp	r3, #0
 8015502:	f000 80ad 	beq.w	8015660 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8015506:	69bb      	ldr	r3, [r7, #24]
 8015508:	099b      	lsrs	r3, r3, #6
 801550a:	f003 0301 	and.w	r3, r3, #1
 801550e:	2b00      	cmp	r3, #0
 8015510:	d023      	beq.n	801555a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8015518:	b2db      	uxtb	r3, r3
 801551a:	2b03      	cmp	r3, #3
 801551c:	d011      	beq.n	8015542 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015522:	f043 0204 	orr.w	r2, r3, #4
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801552a:	2300      	movs	r3, #0
 801552c:	617b      	str	r3, [r7, #20]
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	68db      	ldr	r3, [r3, #12]
 8015534:	617b      	str	r3, [r7, #20]
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	689b      	ldr	r3, [r3, #8]
 801553c:	617b      	str	r3, [r7, #20]
 801553e:	697b      	ldr	r3, [r7, #20]
 8015540:	e00b      	b.n	801555a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015542:	2300      	movs	r3, #0
 8015544:	613b      	str	r3, [r7, #16]
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	68db      	ldr	r3, [r3, #12]
 801554c:	613b      	str	r3, [r7, #16]
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	689b      	ldr	r3, [r3, #8]
 8015554:	613b      	str	r3, [r7, #16]
 8015556:	693b      	ldr	r3, [r7, #16]
        return;
 8015558:	e082      	b.n	8015660 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801555a:	69bb      	ldr	r3, [r7, #24]
 801555c:	095b      	lsrs	r3, r3, #5
 801555e:	f003 0301 	and.w	r3, r3, #1
 8015562:	2b00      	cmp	r3, #0
 8015564:	d014      	beq.n	8015590 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801556a:	f043 0201 	orr.w	r2, r3, #1
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8015572:	2300      	movs	r3, #0
 8015574:	60fb      	str	r3, [r7, #12]
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	689b      	ldr	r3, [r3, #8]
 801557c:	60fb      	str	r3, [r7, #12]
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	681a      	ldr	r2, [r3, #0]
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801558c:	601a      	str	r2, [r3, #0]
 801558e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8015590:	69bb      	ldr	r3, [r7, #24]
 8015592:	0a1b      	lsrs	r3, r3, #8
 8015594:	f003 0301 	and.w	r3, r3, #1
 8015598:	2b00      	cmp	r3, #0
 801559a:	d00c      	beq.n	80155b6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80155a0:	f043 0208 	orr.w	r2, r3, #8
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80155a8:	2300      	movs	r3, #0
 80155aa:	60bb      	str	r3, [r7, #8]
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	689b      	ldr	r3, [r3, #8]
 80155b2:	60bb      	str	r3, [r7, #8]
 80155b4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d04f      	beq.n	801565e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	685a      	ldr	r2, [r3, #4]
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80155cc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	2201      	movs	r2, #1
 80155d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80155d6:	69fb      	ldr	r3, [r7, #28]
 80155d8:	f003 0302 	and.w	r3, r3, #2
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d104      	bne.n	80155ea <HAL_SPI_IRQHandler+0x17e>
 80155e0:	69fb      	ldr	r3, [r7, #28]
 80155e2:	f003 0301 	and.w	r3, r3, #1
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d034      	beq.n	8015654 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	685a      	ldr	r2, [r3, #4]
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	f022 0203 	bic.w	r2, r2, #3
 80155f8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d011      	beq.n	8015626 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015606:	4a18      	ldr	r2, [pc, #96]	; (8015668 <HAL_SPI_IRQHandler+0x1fc>)
 8015608:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801560e:	4618      	mov	r0, r3
 8015610:	f7fc fcca 	bl	8011fa8 <HAL_DMA_Abort_IT>
 8015614:	4603      	mov	r3, r0
 8015616:	2b00      	cmp	r3, #0
 8015618:	d005      	beq.n	8015626 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801561e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801562a:	2b00      	cmp	r3, #0
 801562c:	d016      	beq.n	801565c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015632:	4a0d      	ldr	r2, [pc, #52]	; (8015668 <HAL_SPI_IRQHandler+0x1fc>)
 8015634:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801563a:	4618      	mov	r0, r3
 801563c:	f7fc fcb4 	bl	8011fa8 <HAL_DMA_Abort_IT>
 8015640:	4603      	mov	r3, r0
 8015642:	2b00      	cmp	r3, #0
 8015644:	d00a      	beq.n	801565c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801564a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8015652:	e003      	b.n	801565c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8015654:	6878      	ldr	r0, [r7, #4]
 8015656:	f000 f809 	bl	801566c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801565a:	e000      	b.n	801565e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 801565c:	bf00      	nop
    return;
 801565e:	bf00      	nop
  }
}
 8015660:	3720      	adds	r7, #32
 8015662:	46bd      	mov	sp, r7
 8015664:	bd80      	pop	{r7, pc}
 8015666:	bf00      	nop
 8015668:	08015681 	.word	0x08015681

0801566c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 801566c:	b480      	push	{r7}
 801566e:	b083      	sub	sp, #12
 8015670:	af00      	add	r7, sp, #0
 8015672:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8015674:	bf00      	nop
 8015676:	370c      	adds	r7, #12
 8015678:	46bd      	mov	sp, r7
 801567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801567e:	4770      	bx	lr

08015680 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015680:	b580      	push	{r7, lr}
 8015682:	b084      	sub	sp, #16
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801568c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	2200      	movs	r2, #0
 8015692:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	2200      	movs	r2, #0
 8015698:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801569a:	68f8      	ldr	r0, [r7, #12]
 801569c:	f7ff ffe6 	bl	801566c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80156a0:	bf00      	nop
 80156a2:	3710      	adds	r7, #16
 80156a4:	46bd      	mov	sp, r7
 80156a6:	bd80      	pop	{r7, pc}

080156a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80156a8:	b580      	push	{r7, lr}
 80156aa:	b082      	sub	sp, #8
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d101      	bne.n	80156ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80156b6:	2301      	movs	r3, #1
 80156b8:	e01d      	b.n	80156f6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80156c0:	b2db      	uxtb	r3, r3
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d106      	bne.n	80156d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	2200      	movs	r2, #0
 80156ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80156ce:	6878      	ldr	r0, [r7, #4]
 80156d0:	f7ec ff5c 	bl	800258c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	2202      	movs	r2, #2
 80156d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	681a      	ldr	r2, [r3, #0]
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	3304      	adds	r3, #4
 80156e4:	4619      	mov	r1, r3
 80156e6:	4610      	mov	r0, r2
 80156e8:	f000 fc3e 	bl	8015f68 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	2201      	movs	r2, #1
 80156f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80156f4:	2300      	movs	r3, #0
}
 80156f6:	4618      	mov	r0, r3
 80156f8:	3708      	adds	r7, #8
 80156fa:	46bd      	mov	sp, r7
 80156fc:	bd80      	pop	{r7, pc}

080156fe <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80156fe:	b480      	push	{r7}
 8015700:	b085      	sub	sp, #20
 8015702:	af00      	add	r7, sp, #0
 8015704:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	2202      	movs	r2, #2
 801570a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	689b      	ldr	r3, [r3, #8]
 8015714:	f003 0307 	and.w	r3, r3, #7
 8015718:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	2b06      	cmp	r3, #6
 801571e:	d007      	beq.n	8015730 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	681a      	ldr	r2, [r3, #0]
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	f042 0201 	orr.w	r2, r2, #1
 801572e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	2201      	movs	r2, #1
 8015734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8015738:	2300      	movs	r3, #0
}
 801573a:	4618      	mov	r0, r3
 801573c:	3714      	adds	r7, #20
 801573e:	46bd      	mov	sp, r7
 8015740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015744:	4770      	bx	lr

08015746 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8015746:	b480      	push	{r7}
 8015748:	b085      	sub	sp, #20
 801574a:	af00      	add	r7, sp, #0
 801574c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	68da      	ldr	r2, [r3, #12]
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	f042 0201 	orr.w	r2, r2, #1
 801575c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	689b      	ldr	r3, [r3, #8]
 8015764:	f003 0307 	and.w	r3, r3, #7
 8015768:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	2b06      	cmp	r3, #6
 801576e:	d007      	beq.n	8015780 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	681a      	ldr	r2, [r3, #0]
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	f042 0201 	orr.w	r2, r2, #1
 801577e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8015780:	2300      	movs	r3, #0
}
 8015782:	4618      	mov	r0, r3
 8015784:	3714      	adds	r7, #20
 8015786:	46bd      	mov	sp, r7
 8015788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801578c:	4770      	bx	lr

0801578e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801578e:	b580      	push	{r7, lr}
 8015790:	b082      	sub	sp, #8
 8015792:	af00      	add	r7, sp, #0
 8015794:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d101      	bne.n	80157a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801579c:	2301      	movs	r3, #1
 801579e:	e01d      	b.n	80157dc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80157a6:	b2db      	uxtb	r3, r3
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d106      	bne.n	80157ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	2200      	movs	r2, #0
 80157b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80157b4:	6878      	ldr	r0, [r7, #4]
 80157b6:	f7ec fdab 	bl	8002310 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	2202      	movs	r2, #2
 80157be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	681a      	ldr	r2, [r3, #0]
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	3304      	adds	r3, #4
 80157ca:	4619      	mov	r1, r3
 80157cc:	4610      	mov	r0, r2
 80157ce:	f000 fbcb 	bl	8015f68 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	2201      	movs	r2, #1
 80157d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80157da:	2300      	movs	r3, #0
}
 80157dc:	4618      	mov	r0, r3
 80157de:	3708      	adds	r7, #8
 80157e0:	46bd      	mov	sp, r7
 80157e2:	bd80      	pop	{r7, pc}

080157e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b084      	sub	sp, #16
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	6078      	str	r0, [r7, #4]
 80157ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	2201      	movs	r2, #1
 80157f4:	6839      	ldr	r1, [r7, #0]
 80157f6:	4618      	mov	r0, r3
 80157f8:	f000 fea0 	bl	801653c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	4a15      	ldr	r2, [pc, #84]	; (8015858 <HAL_TIM_PWM_Start+0x74>)
 8015802:	4293      	cmp	r3, r2
 8015804:	d004      	beq.n	8015810 <HAL_TIM_PWM_Start+0x2c>
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	4a14      	ldr	r2, [pc, #80]	; (801585c <HAL_TIM_PWM_Start+0x78>)
 801580c:	4293      	cmp	r3, r2
 801580e:	d101      	bne.n	8015814 <HAL_TIM_PWM_Start+0x30>
 8015810:	2301      	movs	r3, #1
 8015812:	e000      	b.n	8015816 <HAL_TIM_PWM_Start+0x32>
 8015814:	2300      	movs	r3, #0
 8015816:	2b00      	cmp	r3, #0
 8015818:	d007      	beq.n	801582a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8015828:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	689b      	ldr	r3, [r3, #8]
 8015830:	f003 0307 	and.w	r3, r3, #7
 8015834:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	2b06      	cmp	r3, #6
 801583a:	d007      	beq.n	801584c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	681a      	ldr	r2, [r3, #0]
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	f042 0201 	orr.w	r2, r2, #1
 801584a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801584c:	2300      	movs	r3, #0
}
 801584e:	4618      	mov	r0, r3
 8015850:	3710      	adds	r7, #16
 8015852:	46bd      	mov	sp, r7
 8015854:	bd80      	pop	{r7, pc}
 8015856:	bf00      	nop
 8015858:	40010000 	.word	0x40010000
 801585c:	40010400 	.word	0x40010400

08015860 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b086      	sub	sp, #24
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
 8015868:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d101      	bne.n	8015874 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8015870:	2301      	movs	r3, #1
 8015872:	e083      	b.n	801597c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801587a:	b2db      	uxtb	r3, r3
 801587c:	2b00      	cmp	r3, #0
 801587e:	d106      	bne.n	801588e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	2200      	movs	r2, #0
 8015884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8015888:	6878      	ldr	r0, [r7, #4]
 801588a:	f7ed f933 	bl	8002af4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	2202      	movs	r2, #2
 8015892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	689b      	ldr	r3, [r3, #8]
 801589c:	687a      	ldr	r2, [r7, #4]
 801589e:	6812      	ldr	r2, [r2, #0]
 80158a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80158a4:	f023 0307 	bic.w	r3, r3, #7
 80158a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	681a      	ldr	r2, [r3, #0]
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	3304      	adds	r3, #4
 80158b2:	4619      	mov	r1, r3
 80158b4:	4610      	mov	r0, r2
 80158b6:	f000 fb57 	bl	8015f68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	689b      	ldr	r3, [r3, #8]
 80158c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	699b      	ldr	r3, [r3, #24]
 80158c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	6a1b      	ldr	r3, [r3, #32]
 80158d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80158d2:	683b      	ldr	r3, [r7, #0]
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	697a      	ldr	r2, [r7, #20]
 80158d8:	4313      	orrs	r3, r2
 80158da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80158dc:	693b      	ldr	r3, [r7, #16]
 80158de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80158e2:	f023 0303 	bic.w	r3, r3, #3
 80158e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80158e8:	683b      	ldr	r3, [r7, #0]
 80158ea:	689a      	ldr	r2, [r3, #8]
 80158ec:	683b      	ldr	r3, [r7, #0]
 80158ee:	699b      	ldr	r3, [r3, #24]
 80158f0:	021b      	lsls	r3, r3, #8
 80158f2:	4313      	orrs	r3, r2
 80158f4:	693a      	ldr	r2, [r7, #16]
 80158f6:	4313      	orrs	r3, r2
 80158f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80158fa:	693b      	ldr	r3, [r7, #16]
 80158fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8015900:	f023 030c 	bic.w	r3, r3, #12
 8015904:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8015906:	693b      	ldr	r3, [r7, #16]
 8015908:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801590c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015910:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8015912:	683b      	ldr	r3, [r7, #0]
 8015914:	68da      	ldr	r2, [r3, #12]
 8015916:	683b      	ldr	r3, [r7, #0]
 8015918:	69db      	ldr	r3, [r3, #28]
 801591a:	021b      	lsls	r3, r3, #8
 801591c:	4313      	orrs	r3, r2
 801591e:	693a      	ldr	r2, [r7, #16]
 8015920:	4313      	orrs	r3, r2
 8015922:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8015924:	683b      	ldr	r3, [r7, #0]
 8015926:	691b      	ldr	r3, [r3, #16]
 8015928:	011a      	lsls	r2, r3, #4
 801592a:	683b      	ldr	r3, [r7, #0]
 801592c:	6a1b      	ldr	r3, [r3, #32]
 801592e:	031b      	lsls	r3, r3, #12
 8015930:	4313      	orrs	r3, r2
 8015932:	693a      	ldr	r2, [r7, #16]
 8015934:	4313      	orrs	r3, r2
 8015936:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 801593e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8015946:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8015948:	683b      	ldr	r3, [r7, #0]
 801594a:	685a      	ldr	r2, [r3, #4]
 801594c:	683b      	ldr	r3, [r7, #0]
 801594e:	695b      	ldr	r3, [r3, #20]
 8015950:	011b      	lsls	r3, r3, #4
 8015952:	4313      	orrs	r3, r2
 8015954:	68fa      	ldr	r2, [r7, #12]
 8015956:	4313      	orrs	r3, r2
 8015958:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	697a      	ldr	r2, [r7, #20]
 8015960:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	693a      	ldr	r2, [r7, #16]
 8015968:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	68fa      	ldr	r2, [r7, #12]
 8015970:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	2201      	movs	r2, #1
 8015976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801597a:	2300      	movs	r3, #0
}
 801597c:	4618      	mov	r0, r3
 801597e:	3718      	adds	r7, #24
 8015980:	46bd      	mov	sp, r7
 8015982:	bd80      	pop	{r7, pc}

08015984 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015984:	b580      	push	{r7, lr}
 8015986:	b082      	sub	sp, #8
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
 801598c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 801598e:	683b      	ldr	r3, [r7, #0]
 8015990:	2b00      	cmp	r3, #0
 8015992:	d003      	beq.n	801599c <HAL_TIM_Encoder_Start+0x18>
 8015994:	683b      	ldr	r3, [r7, #0]
 8015996:	2b04      	cmp	r3, #4
 8015998:	d008      	beq.n	80159ac <HAL_TIM_Encoder_Start+0x28>
 801599a:	e00f      	b.n	80159bc <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	2201      	movs	r2, #1
 80159a2:	2100      	movs	r1, #0
 80159a4:	4618      	mov	r0, r3
 80159a6:	f000 fdc9 	bl	801653c <TIM_CCxChannelCmd>
      break;
 80159aa:	e016      	b.n	80159da <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	2201      	movs	r2, #1
 80159b2:	2104      	movs	r1, #4
 80159b4:	4618      	mov	r0, r3
 80159b6:	f000 fdc1 	bl	801653c <TIM_CCxChannelCmd>
      break;
 80159ba:	e00e      	b.n	80159da <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	2201      	movs	r2, #1
 80159c2:	2100      	movs	r1, #0
 80159c4:	4618      	mov	r0, r3
 80159c6:	f000 fdb9 	bl	801653c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	2201      	movs	r2, #1
 80159d0:	2104      	movs	r1, #4
 80159d2:	4618      	mov	r0, r3
 80159d4:	f000 fdb2 	bl	801653c <TIM_CCxChannelCmd>
      break;
 80159d8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	681a      	ldr	r2, [r3, #0]
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	f042 0201 	orr.w	r2, r2, #1
 80159e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80159ea:	2300      	movs	r3, #0
}
 80159ec:	4618      	mov	r0, r3
 80159ee:	3708      	adds	r7, #8
 80159f0:	46bd      	mov	sp, r7
 80159f2:	bd80      	pop	{r7, pc}

080159f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80159f4:	b580      	push	{r7, lr}
 80159f6:	b082      	sub	sp, #8
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	691b      	ldr	r3, [r3, #16]
 8015a02:	f003 0302 	and.w	r3, r3, #2
 8015a06:	2b02      	cmp	r3, #2
 8015a08:	d122      	bne.n	8015a50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	68db      	ldr	r3, [r3, #12]
 8015a10:	f003 0302 	and.w	r3, r3, #2
 8015a14:	2b02      	cmp	r3, #2
 8015a16:	d11b      	bne.n	8015a50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	f06f 0202 	mvn.w	r2, #2
 8015a20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	2201      	movs	r2, #1
 8015a26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	699b      	ldr	r3, [r3, #24]
 8015a2e:	f003 0303 	and.w	r3, r3, #3
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d003      	beq.n	8015a3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8015a36:	6878      	ldr	r0, [r7, #4]
 8015a38:	f000 fa78 	bl	8015f2c <HAL_TIM_IC_CaptureCallback>
 8015a3c:	e005      	b.n	8015a4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8015a3e:	6878      	ldr	r0, [r7, #4]
 8015a40:	f000 fa6a 	bl	8015f18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015a44:	6878      	ldr	r0, [r7, #4]
 8015a46:	f000 fa7b 	bl	8015f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	2200      	movs	r2, #0
 8015a4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	691b      	ldr	r3, [r3, #16]
 8015a56:	f003 0304 	and.w	r3, r3, #4
 8015a5a:	2b04      	cmp	r3, #4
 8015a5c:	d122      	bne.n	8015aa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	68db      	ldr	r3, [r3, #12]
 8015a64:	f003 0304 	and.w	r3, r3, #4
 8015a68:	2b04      	cmp	r3, #4
 8015a6a:	d11b      	bne.n	8015aa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	f06f 0204 	mvn.w	r2, #4
 8015a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	2202      	movs	r2, #2
 8015a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	699b      	ldr	r3, [r3, #24]
 8015a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d003      	beq.n	8015a92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015a8a:	6878      	ldr	r0, [r7, #4]
 8015a8c:	f000 fa4e 	bl	8015f2c <HAL_TIM_IC_CaptureCallback>
 8015a90:	e005      	b.n	8015a9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015a92:	6878      	ldr	r0, [r7, #4]
 8015a94:	f000 fa40 	bl	8015f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015a98:	6878      	ldr	r0, [r7, #4]
 8015a9a:	f000 fa51 	bl	8015f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	2200      	movs	r2, #0
 8015aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	691b      	ldr	r3, [r3, #16]
 8015aaa:	f003 0308 	and.w	r3, r3, #8
 8015aae:	2b08      	cmp	r3, #8
 8015ab0:	d122      	bne.n	8015af8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	68db      	ldr	r3, [r3, #12]
 8015ab8:	f003 0308 	and.w	r3, r3, #8
 8015abc:	2b08      	cmp	r3, #8
 8015abe:	d11b      	bne.n	8015af8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	f06f 0208 	mvn.w	r2, #8
 8015ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	2204      	movs	r2, #4
 8015ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	69db      	ldr	r3, [r3, #28]
 8015ad6:	f003 0303 	and.w	r3, r3, #3
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d003      	beq.n	8015ae6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015ade:	6878      	ldr	r0, [r7, #4]
 8015ae0:	f000 fa24 	bl	8015f2c <HAL_TIM_IC_CaptureCallback>
 8015ae4:	e005      	b.n	8015af2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015ae6:	6878      	ldr	r0, [r7, #4]
 8015ae8:	f000 fa16 	bl	8015f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015aec:	6878      	ldr	r0, [r7, #4]
 8015aee:	f000 fa27 	bl	8015f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	2200      	movs	r2, #0
 8015af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	691b      	ldr	r3, [r3, #16]
 8015afe:	f003 0310 	and.w	r3, r3, #16
 8015b02:	2b10      	cmp	r3, #16
 8015b04:	d122      	bne.n	8015b4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	68db      	ldr	r3, [r3, #12]
 8015b0c:	f003 0310 	and.w	r3, r3, #16
 8015b10:	2b10      	cmp	r3, #16
 8015b12:	d11b      	bne.n	8015b4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	f06f 0210 	mvn.w	r2, #16
 8015b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	2208      	movs	r2, #8
 8015b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	69db      	ldr	r3, [r3, #28]
 8015b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d003      	beq.n	8015b3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015b32:	6878      	ldr	r0, [r7, #4]
 8015b34:	f000 f9fa 	bl	8015f2c <HAL_TIM_IC_CaptureCallback>
 8015b38:	e005      	b.n	8015b46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015b3a:	6878      	ldr	r0, [r7, #4]
 8015b3c:	f000 f9ec 	bl	8015f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015b40:	6878      	ldr	r0, [r7, #4]
 8015b42:	f000 f9fd 	bl	8015f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	2200      	movs	r2, #0
 8015b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	691b      	ldr	r3, [r3, #16]
 8015b52:	f003 0301 	and.w	r3, r3, #1
 8015b56:	2b01      	cmp	r3, #1
 8015b58:	d10e      	bne.n	8015b78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	68db      	ldr	r3, [r3, #12]
 8015b60:	f003 0301 	and.w	r3, r3, #1
 8015b64:	2b01      	cmp	r3, #1
 8015b66:	d107      	bne.n	8015b78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	f06f 0201 	mvn.w	r2, #1
 8015b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8015b72:	6878      	ldr	r0, [r7, #4]
 8015b74:	f7f6 fbb8 	bl	800c2e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	691b      	ldr	r3, [r3, #16]
 8015b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015b82:	2b80      	cmp	r3, #128	; 0x80
 8015b84:	d10e      	bne.n	8015ba4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	68db      	ldr	r3, [r3, #12]
 8015b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015b90:	2b80      	cmp	r3, #128	; 0x80
 8015b92:	d107      	bne.n	8015ba4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8015b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8015b9e:	6878      	ldr	r0, [r7, #4]
 8015ba0:	f000 fd78 	bl	8016694 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	691b      	ldr	r3, [r3, #16]
 8015baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015bae:	2b40      	cmp	r3, #64	; 0x40
 8015bb0:	d10e      	bne.n	8015bd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	68db      	ldr	r3, [r3, #12]
 8015bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015bbc:	2b40      	cmp	r3, #64	; 0x40
 8015bbe:	d107      	bne.n	8015bd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	681b      	ldr	r3, [r3, #0]
 8015bc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8015bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8015bca:	6878      	ldr	r0, [r7, #4]
 8015bcc:	f000 f9c2 	bl	8015f54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	691b      	ldr	r3, [r3, #16]
 8015bd6:	f003 0320 	and.w	r3, r3, #32
 8015bda:	2b20      	cmp	r3, #32
 8015bdc:	d10e      	bne.n	8015bfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	68db      	ldr	r3, [r3, #12]
 8015be4:	f003 0320 	and.w	r3, r3, #32
 8015be8:	2b20      	cmp	r3, #32
 8015bea:	d107      	bne.n	8015bfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	f06f 0220 	mvn.w	r2, #32
 8015bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8015bf6:	6878      	ldr	r0, [r7, #4]
 8015bf8:	f000 fd42 	bl	8016680 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8015bfc:	bf00      	nop
 8015bfe:	3708      	adds	r7, #8
 8015c00:	46bd      	mov	sp, r7
 8015c02:	bd80      	pop	{r7, pc}

08015c04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8015c04:	b580      	push	{r7, lr}
 8015c06:	b084      	sub	sp, #16
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	60f8      	str	r0, [r7, #12]
 8015c0c:	60b9      	str	r1, [r7, #8]
 8015c0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015c16:	2b01      	cmp	r3, #1
 8015c18:	d101      	bne.n	8015c1e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8015c1a:	2302      	movs	r3, #2
 8015c1c:	e0b4      	b.n	8015d88 <HAL_TIM_PWM_ConfigChannel+0x184>
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	2201      	movs	r2, #1
 8015c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	2202      	movs	r2, #2
 8015c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	2b0c      	cmp	r3, #12
 8015c32:	f200 809f 	bhi.w	8015d74 <HAL_TIM_PWM_ConfigChannel+0x170>
 8015c36:	a201      	add	r2, pc, #4	; (adr r2, 8015c3c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8015c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c3c:	08015c71 	.word	0x08015c71
 8015c40:	08015d75 	.word	0x08015d75
 8015c44:	08015d75 	.word	0x08015d75
 8015c48:	08015d75 	.word	0x08015d75
 8015c4c:	08015cb1 	.word	0x08015cb1
 8015c50:	08015d75 	.word	0x08015d75
 8015c54:	08015d75 	.word	0x08015d75
 8015c58:	08015d75 	.word	0x08015d75
 8015c5c:	08015cf3 	.word	0x08015cf3
 8015c60:	08015d75 	.word	0x08015d75
 8015c64:	08015d75 	.word	0x08015d75
 8015c68:	08015d75 	.word	0x08015d75
 8015c6c:	08015d33 	.word	0x08015d33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	68b9      	ldr	r1, [r7, #8]
 8015c76:	4618      	mov	r0, r3
 8015c78:	f000 fa16 	bl	80160a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	699a      	ldr	r2, [r3, #24]
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	f042 0208 	orr.w	r2, r2, #8
 8015c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	699a      	ldr	r2, [r3, #24]
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	f022 0204 	bic.w	r2, r2, #4
 8015c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	6999      	ldr	r1, [r3, #24]
 8015ca2:	68bb      	ldr	r3, [r7, #8]
 8015ca4:	691a      	ldr	r2, [r3, #16]
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	430a      	orrs	r2, r1
 8015cac:	619a      	str	r2, [r3, #24]
      break;
 8015cae:	e062      	b.n	8015d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	68b9      	ldr	r1, [r7, #8]
 8015cb6:	4618      	mov	r0, r3
 8015cb8:	f000 fa66 	bl	8016188 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	699a      	ldr	r2, [r3, #24]
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8015cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	699a      	ldr	r2, [r3, #24]
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	6999      	ldr	r1, [r3, #24]
 8015ce2:	68bb      	ldr	r3, [r7, #8]
 8015ce4:	691b      	ldr	r3, [r3, #16]
 8015ce6:	021a      	lsls	r2, r3, #8
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	430a      	orrs	r2, r1
 8015cee:	619a      	str	r2, [r3, #24]
      break;
 8015cf0:	e041      	b.n	8015d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	68b9      	ldr	r1, [r7, #8]
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	f000 fabb 	bl	8016274 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	69da      	ldr	r2, [r3, #28]
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	f042 0208 	orr.w	r2, r2, #8
 8015d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	69da      	ldr	r2, [r3, #28]
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	f022 0204 	bic.w	r2, r2, #4
 8015d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8015d1e:	68fb      	ldr	r3, [r7, #12]
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	69d9      	ldr	r1, [r3, #28]
 8015d24:	68bb      	ldr	r3, [r7, #8]
 8015d26:	691a      	ldr	r2, [r3, #16]
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	681b      	ldr	r3, [r3, #0]
 8015d2c:	430a      	orrs	r2, r1
 8015d2e:	61da      	str	r2, [r3, #28]
      break;
 8015d30:	e021      	b.n	8015d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8015d32:	68fb      	ldr	r3, [r7, #12]
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	68b9      	ldr	r1, [r7, #8]
 8015d38:	4618      	mov	r0, r3
 8015d3a:	f000 fb0f 	bl	801635c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	69da      	ldr	r2, [r3, #28]
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8015d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	69da      	ldr	r2, [r3, #28]
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	69d9      	ldr	r1, [r3, #28]
 8015d64:	68bb      	ldr	r3, [r7, #8]
 8015d66:	691b      	ldr	r3, [r3, #16]
 8015d68:	021a      	lsls	r2, r3, #8
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	430a      	orrs	r2, r1
 8015d70:	61da      	str	r2, [r3, #28]
      break;
 8015d72:	e000      	b.n	8015d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8015d74:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	2201      	movs	r2, #1
 8015d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	2200      	movs	r2, #0
 8015d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015d86:	2300      	movs	r3, #0
}
 8015d88:	4618      	mov	r0, r3
 8015d8a:	3710      	adds	r7, #16
 8015d8c:	46bd      	mov	sp, r7
 8015d8e:	bd80      	pop	{r7, pc}

08015d90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8015d90:	b580      	push	{r7, lr}
 8015d92:	b084      	sub	sp, #16
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	6078      	str	r0, [r7, #4]
 8015d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015da0:	2b01      	cmp	r3, #1
 8015da2:	d101      	bne.n	8015da8 <HAL_TIM_ConfigClockSource+0x18>
 8015da4:	2302      	movs	r3, #2
 8015da6:	e0b3      	b.n	8015f10 <HAL_TIM_ConfigClockSource+0x180>
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	2201      	movs	r2, #1
 8015dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	2202      	movs	r2, #2
 8015db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	689b      	ldr	r3, [r3, #8]
 8015dbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8015dc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015dce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	68fa      	ldr	r2, [r7, #12]
 8015dd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8015dd8:	683b      	ldr	r3, [r7, #0]
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015de0:	d03e      	beq.n	8015e60 <HAL_TIM_ConfigClockSource+0xd0>
 8015de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015de6:	f200 8087 	bhi.w	8015ef8 <HAL_TIM_ConfigClockSource+0x168>
 8015dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015dee:	f000 8085 	beq.w	8015efc <HAL_TIM_ConfigClockSource+0x16c>
 8015df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015df6:	d87f      	bhi.n	8015ef8 <HAL_TIM_ConfigClockSource+0x168>
 8015df8:	2b70      	cmp	r3, #112	; 0x70
 8015dfa:	d01a      	beq.n	8015e32 <HAL_TIM_ConfigClockSource+0xa2>
 8015dfc:	2b70      	cmp	r3, #112	; 0x70
 8015dfe:	d87b      	bhi.n	8015ef8 <HAL_TIM_ConfigClockSource+0x168>
 8015e00:	2b60      	cmp	r3, #96	; 0x60
 8015e02:	d050      	beq.n	8015ea6 <HAL_TIM_ConfigClockSource+0x116>
 8015e04:	2b60      	cmp	r3, #96	; 0x60
 8015e06:	d877      	bhi.n	8015ef8 <HAL_TIM_ConfigClockSource+0x168>
 8015e08:	2b50      	cmp	r3, #80	; 0x50
 8015e0a:	d03c      	beq.n	8015e86 <HAL_TIM_ConfigClockSource+0xf6>
 8015e0c:	2b50      	cmp	r3, #80	; 0x50
 8015e0e:	d873      	bhi.n	8015ef8 <HAL_TIM_ConfigClockSource+0x168>
 8015e10:	2b40      	cmp	r3, #64	; 0x40
 8015e12:	d058      	beq.n	8015ec6 <HAL_TIM_ConfigClockSource+0x136>
 8015e14:	2b40      	cmp	r3, #64	; 0x40
 8015e16:	d86f      	bhi.n	8015ef8 <HAL_TIM_ConfigClockSource+0x168>
 8015e18:	2b30      	cmp	r3, #48	; 0x30
 8015e1a:	d064      	beq.n	8015ee6 <HAL_TIM_ConfigClockSource+0x156>
 8015e1c:	2b30      	cmp	r3, #48	; 0x30
 8015e1e:	d86b      	bhi.n	8015ef8 <HAL_TIM_ConfigClockSource+0x168>
 8015e20:	2b20      	cmp	r3, #32
 8015e22:	d060      	beq.n	8015ee6 <HAL_TIM_ConfigClockSource+0x156>
 8015e24:	2b20      	cmp	r3, #32
 8015e26:	d867      	bhi.n	8015ef8 <HAL_TIM_ConfigClockSource+0x168>
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d05c      	beq.n	8015ee6 <HAL_TIM_ConfigClockSource+0x156>
 8015e2c:	2b10      	cmp	r3, #16
 8015e2e:	d05a      	beq.n	8015ee6 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8015e30:	e062      	b.n	8015ef8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	6818      	ldr	r0, [r3, #0]
 8015e36:	683b      	ldr	r3, [r7, #0]
 8015e38:	6899      	ldr	r1, [r3, #8]
 8015e3a:	683b      	ldr	r3, [r7, #0]
 8015e3c:	685a      	ldr	r2, [r3, #4]
 8015e3e:	683b      	ldr	r3, [r7, #0]
 8015e40:	68db      	ldr	r3, [r3, #12]
 8015e42:	f000 fb5b 	bl	80164fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	689b      	ldr	r3, [r3, #8]
 8015e4c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8015e54:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	68fa      	ldr	r2, [r7, #12]
 8015e5c:	609a      	str	r2, [r3, #8]
      break;
 8015e5e:	e04e      	b.n	8015efe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	6818      	ldr	r0, [r3, #0]
 8015e64:	683b      	ldr	r3, [r7, #0]
 8015e66:	6899      	ldr	r1, [r3, #8]
 8015e68:	683b      	ldr	r3, [r7, #0]
 8015e6a:	685a      	ldr	r2, [r3, #4]
 8015e6c:	683b      	ldr	r3, [r7, #0]
 8015e6e:	68db      	ldr	r3, [r3, #12]
 8015e70:	f000 fb44 	bl	80164fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	689a      	ldr	r2, [r3, #8]
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8015e82:	609a      	str	r2, [r3, #8]
      break;
 8015e84:	e03b      	b.n	8015efe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	6818      	ldr	r0, [r3, #0]
 8015e8a:	683b      	ldr	r3, [r7, #0]
 8015e8c:	6859      	ldr	r1, [r3, #4]
 8015e8e:	683b      	ldr	r3, [r7, #0]
 8015e90:	68db      	ldr	r3, [r3, #12]
 8015e92:	461a      	mov	r2, r3
 8015e94:	f000 fab8 	bl	8016408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	2150      	movs	r1, #80	; 0x50
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	f000 fb11 	bl	80164c6 <TIM_ITRx_SetConfig>
      break;
 8015ea4:	e02b      	b.n	8015efe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	6818      	ldr	r0, [r3, #0]
 8015eaa:	683b      	ldr	r3, [r7, #0]
 8015eac:	6859      	ldr	r1, [r3, #4]
 8015eae:	683b      	ldr	r3, [r7, #0]
 8015eb0:	68db      	ldr	r3, [r3, #12]
 8015eb2:	461a      	mov	r2, r3
 8015eb4:	f000 fad7 	bl	8016466 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	2160      	movs	r1, #96	; 0x60
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	f000 fb01 	bl	80164c6 <TIM_ITRx_SetConfig>
      break;
 8015ec4:	e01b      	b.n	8015efe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	6818      	ldr	r0, [r3, #0]
 8015eca:	683b      	ldr	r3, [r7, #0]
 8015ecc:	6859      	ldr	r1, [r3, #4]
 8015ece:	683b      	ldr	r3, [r7, #0]
 8015ed0:	68db      	ldr	r3, [r3, #12]
 8015ed2:	461a      	mov	r2, r3
 8015ed4:	f000 fa98 	bl	8016408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	2140      	movs	r1, #64	; 0x40
 8015ede:	4618      	mov	r0, r3
 8015ee0:	f000 faf1 	bl	80164c6 <TIM_ITRx_SetConfig>
      break;
 8015ee4:	e00b      	b.n	8015efe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	681a      	ldr	r2, [r3, #0]
 8015eea:	683b      	ldr	r3, [r7, #0]
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	4619      	mov	r1, r3
 8015ef0:	4610      	mov	r0, r2
 8015ef2:	f000 fae8 	bl	80164c6 <TIM_ITRx_SetConfig>
      break;
 8015ef6:	e002      	b.n	8015efe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8015ef8:	bf00      	nop
 8015efa:	e000      	b.n	8015efe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8015efc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	2201      	movs	r2, #1
 8015f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	2200      	movs	r2, #0
 8015f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015f0e:	2300      	movs	r3, #0
}
 8015f10:	4618      	mov	r0, r3
 8015f12:	3710      	adds	r7, #16
 8015f14:	46bd      	mov	sp, r7
 8015f16:	bd80      	pop	{r7, pc}

08015f18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015f18:	b480      	push	{r7}
 8015f1a:	b083      	sub	sp, #12
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8015f20:	bf00      	nop
 8015f22:	370c      	adds	r7, #12
 8015f24:	46bd      	mov	sp, r7
 8015f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f2a:	4770      	bx	lr

08015f2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8015f2c:	b480      	push	{r7}
 8015f2e:	b083      	sub	sp, #12
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8015f34:	bf00      	nop
 8015f36:	370c      	adds	r7, #12
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f3e:	4770      	bx	lr

08015f40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8015f40:	b480      	push	{r7}
 8015f42:	b083      	sub	sp, #12
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8015f48:	bf00      	nop
 8015f4a:	370c      	adds	r7, #12
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f52:	4770      	bx	lr

08015f54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8015f54:	b480      	push	{r7}
 8015f56:	b083      	sub	sp, #12
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8015f5c:	bf00      	nop
 8015f5e:	370c      	adds	r7, #12
 8015f60:	46bd      	mov	sp, r7
 8015f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f66:	4770      	bx	lr

08015f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8015f68:	b480      	push	{r7}
 8015f6a:	b085      	sub	sp, #20
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	6078      	str	r0, [r7, #4]
 8015f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	4a40      	ldr	r2, [pc, #256]	; (801607c <TIM_Base_SetConfig+0x114>)
 8015f7c:	4293      	cmp	r3, r2
 8015f7e:	d013      	beq.n	8015fa8 <TIM_Base_SetConfig+0x40>
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015f86:	d00f      	beq.n	8015fa8 <TIM_Base_SetConfig+0x40>
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	4a3d      	ldr	r2, [pc, #244]	; (8016080 <TIM_Base_SetConfig+0x118>)
 8015f8c:	4293      	cmp	r3, r2
 8015f8e:	d00b      	beq.n	8015fa8 <TIM_Base_SetConfig+0x40>
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	4a3c      	ldr	r2, [pc, #240]	; (8016084 <TIM_Base_SetConfig+0x11c>)
 8015f94:	4293      	cmp	r3, r2
 8015f96:	d007      	beq.n	8015fa8 <TIM_Base_SetConfig+0x40>
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	4a3b      	ldr	r2, [pc, #236]	; (8016088 <TIM_Base_SetConfig+0x120>)
 8015f9c:	4293      	cmp	r3, r2
 8015f9e:	d003      	beq.n	8015fa8 <TIM_Base_SetConfig+0x40>
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	4a3a      	ldr	r2, [pc, #232]	; (801608c <TIM_Base_SetConfig+0x124>)
 8015fa4:	4293      	cmp	r3, r2
 8015fa6:	d108      	bne.n	8015fba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015fb0:	683b      	ldr	r3, [r7, #0]
 8015fb2:	685b      	ldr	r3, [r3, #4]
 8015fb4:	68fa      	ldr	r2, [r7, #12]
 8015fb6:	4313      	orrs	r3, r2
 8015fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	4a2f      	ldr	r2, [pc, #188]	; (801607c <TIM_Base_SetConfig+0x114>)
 8015fbe:	4293      	cmp	r3, r2
 8015fc0:	d02b      	beq.n	801601a <TIM_Base_SetConfig+0xb2>
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015fc8:	d027      	beq.n	801601a <TIM_Base_SetConfig+0xb2>
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	4a2c      	ldr	r2, [pc, #176]	; (8016080 <TIM_Base_SetConfig+0x118>)
 8015fce:	4293      	cmp	r3, r2
 8015fd0:	d023      	beq.n	801601a <TIM_Base_SetConfig+0xb2>
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	4a2b      	ldr	r2, [pc, #172]	; (8016084 <TIM_Base_SetConfig+0x11c>)
 8015fd6:	4293      	cmp	r3, r2
 8015fd8:	d01f      	beq.n	801601a <TIM_Base_SetConfig+0xb2>
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	4a2a      	ldr	r2, [pc, #168]	; (8016088 <TIM_Base_SetConfig+0x120>)
 8015fde:	4293      	cmp	r3, r2
 8015fe0:	d01b      	beq.n	801601a <TIM_Base_SetConfig+0xb2>
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	4a29      	ldr	r2, [pc, #164]	; (801608c <TIM_Base_SetConfig+0x124>)
 8015fe6:	4293      	cmp	r3, r2
 8015fe8:	d017      	beq.n	801601a <TIM_Base_SetConfig+0xb2>
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	4a28      	ldr	r2, [pc, #160]	; (8016090 <TIM_Base_SetConfig+0x128>)
 8015fee:	4293      	cmp	r3, r2
 8015ff0:	d013      	beq.n	801601a <TIM_Base_SetConfig+0xb2>
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	4a27      	ldr	r2, [pc, #156]	; (8016094 <TIM_Base_SetConfig+0x12c>)
 8015ff6:	4293      	cmp	r3, r2
 8015ff8:	d00f      	beq.n	801601a <TIM_Base_SetConfig+0xb2>
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	4a26      	ldr	r2, [pc, #152]	; (8016098 <TIM_Base_SetConfig+0x130>)
 8015ffe:	4293      	cmp	r3, r2
 8016000:	d00b      	beq.n	801601a <TIM_Base_SetConfig+0xb2>
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	4a25      	ldr	r2, [pc, #148]	; (801609c <TIM_Base_SetConfig+0x134>)
 8016006:	4293      	cmp	r3, r2
 8016008:	d007      	beq.n	801601a <TIM_Base_SetConfig+0xb2>
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	4a24      	ldr	r2, [pc, #144]	; (80160a0 <TIM_Base_SetConfig+0x138>)
 801600e:	4293      	cmp	r3, r2
 8016010:	d003      	beq.n	801601a <TIM_Base_SetConfig+0xb2>
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	4a23      	ldr	r2, [pc, #140]	; (80160a4 <TIM_Base_SetConfig+0x13c>)
 8016016:	4293      	cmp	r3, r2
 8016018:	d108      	bne.n	801602c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016022:	683b      	ldr	r3, [r7, #0]
 8016024:	68db      	ldr	r3, [r3, #12]
 8016026:	68fa      	ldr	r2, [r7, #12]
 8016028:	4313      	orrs	r3, r2
 801602a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8016032:	683b      	ldr	r3, [r7, #0]
 8016034:	695b      	ldr	r3, [r3, #20]
 8016036:	4313      	orrs	r3, r2
 8016038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	68fa      	ldr	r2, [r7, #12]
 801603e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016040:	683b      	ldr	r3, [r7, #0]
 8016042:	689a      	ldr	r2, [r3, #8]
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016048:	683b      	ldr	r3, [r7, #0]
 801604a:	681a      	ldr	r2, [r3, #0]
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	4a0a      	ldr	r2, [pc, #40]	; (801607c <TIM_Base_SetConfig+0x114>)
 8016054:	4293      	cmp	r3, r2
 8016056:	d003      	beq.n	8016060 <TIM_Base_SetConfig+0xf8>
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	4a0c      	ldr	r2, [pc, #48]	; (801608c <TIM_Base_SetConfig+0x124>)
 801605c:	4293      	cmp	r3, r2
 801605e:	d103      	bne.n	8016068 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8016060:	683b      	ldr	r3, [r7, #0]
 8016062:	691a      	ldr	r2, [r3, #16]
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	2201      	movs	r2, #1
 801606c:	615a      	str	r2, [r3, #20]
}
 801606e:	bf00      	nop
 8016070:	3714      	adds	r7, #20
 8016072:	46bd      	mov	sp, r7
 8016074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016078:	4770      	bx	lr
 801607a:	bf00      	nop
 801607c:	40010000 	.word	0x40010000
 8016080:	40000400 	.word	0x40000400
 8016084:	40000800 	.word	0x40000800
 8016088:	40000c00 	.word	0x40000c00
 801608c:	40010400 	.word	0x40010400
 8016090:	40014000 	.word	0x40014000
 8016094:	40014400 	.word	0x40014400
 8016098:	40014800 	.word	0x40014800
 801609c:	40001800 	.word	0x40001800
 80160a0:	40001c00 	.word	0x40001c00
 80160a4:	40002000 	.word	0x40002000

080160a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80160a8:	b480      	push	{r7}
 80160aa:	b087      	sub	sp, #28
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]
 80160b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	6a1b      	ldr	r3, [r3, #32]
 80160b6:	f023 0201 	bic.w	r2, r3, #1
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	6a1b      	ldr	r3, [r3, #32]
 80160c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	685b      	ldr	r3, [r3, #4]
 80160c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	699b      	ldr	r3, [r3, #24]
 80160ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80160d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	f023 0303 	bic.w	r3, r3, #3
 80160de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80160e0:	683b      	ldr	r3, [r7, #0]
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	68fa      	ldr	r2, [r7, #12]
 80160e6:	4313      	orrs	r3, r2
 80160e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80160ea:	697b      	ldr	r3, [r7, #20]
 80160ec:	f023 0302 	bic.w	r3, r3, #2
 80160f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80160f2:	683b      	ldr	r3, [r7, #0]
 80160f4:	689b      	ldr	r3, [r3, #8]
 80160f6:	697a      	ldr	r2, [r7, #20]
 80160f8:	4313      	orrs	r3, r2
 80160fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	4a20      	ldr	r2, [pc, #128]	; (8016180 <TIM_OC1_SetConfig+0xd8>)
 8016100:	4293      	cmp	r3, r2
 8016102:	d003      	beq.n	801610c <TIM_OC1_SetConfig+0x64>
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	4a1f      	ldr	r2, [pc, #124]	; (8016184 <TIM_OC1_SetConfig+0xdc>)
 8016108:	4293      	cmp	r3, r2
 801610a:	d10c      	bne.n	8016126 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801610c:	697b      	ldr	r3, [r7, #20]
 801610e:	f023 0308 	bic.w	r3, r3, #8
 8016112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8016114:	683b      	ldr	r3, [r7, #0]
 8016116:	68db      	ldr	r3, [r3, #12]
 8016118:	697a      	ldr	r2, [r7, #20]
 801611a:	4313      	orrs	r3, r2
 801611c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801611e:	697b      	ldr	r3, [r7, #20]
 8016120:	f023 0304 	bic.w	r3, r3, #4
 8016124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	4a15      	ldr	r2, [pc, #84]	; (8016180 <TIM_OC1_SetConfig+0xd8>)
 801612a:	4293      	cmp	r3, r2
 801612c:	d003      	beq.n	8016136 <TIM_OC1_SetConfig+0x8e>
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	4a14      	ldr	r2, [pc, #80]	; (8016184 <TIM_OC1_SetConfig+0xdc>)
 8016132:	4293      	cmp	r3, r2
 8016134:	d111      	bne.n	801615a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8016136:	693b      	ldr	r3, [r7, #16]
 8016138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801613c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801613e:	693b      	ldr	r3, [r7, #16]
 8016140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8016144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8016146:	683b      	ldr	r3, [r7, #0]
 8016148:	695b      	ldr	r3, [r3, #20]
 801614a:	693a      	ldr	r2, [r7, #16]
 801614c:	4313      	orrs	r3, r2
 801614e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8016150:	683b      	ldr	r3, [r7, #0]
 8016152:	699b      	ldr	r3, [r3, #24]
 8016154:	693a      	ldr	r2, [r7, #16]
 8016156:	4313      	orrs	r3, r2
 8016158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	693a      	ldr	r2, [r7, #16]
 801615e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	68fa      	ldr	r2, [r7, #12]
 8016164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016166:	683b      	ldr	r3, [r7, #0]
 8016168:	685a      	ldr	r2, [r3, #4]
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	697a      	ldr	r2, [r7, #20]
 8016172:	621a      	str	r2, [r3, #32]
}
 8016174:	bf00      	nop
 8016176:	371c      	adds	r7, #28
 8016178:	46bd      	mov	sp, r7
 801617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801617e:	4770      	bx	lr
 8016180:	40010000 	.word	0x40010000
 8016184:	40010400 	.word	0x40010400

08016188 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8016188:	b480      	push	{r7}
 801618a:	b087      	sub	sp, #28
 801618c:	af00      	add	r7, sp, #0
 801618e:	6078      	str	r0, [r7, #4]
 8016190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	6a1b      	ldr	r3, [r3, #32]
 8016196:	f023 0210 	bic.w	r2, r3, #16
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	6a1b      	ldr	r3, [r3, #32]
 80161a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	685b      	ldr	r3, [r3, #4]
 80161a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	699b      	ldr	r3, [r3, #24]
 80161ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80161b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80161be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80161c0:	683b      	ldr	r3, [r7, #0]
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	021b      	lsls	r3, r3, #8
 80161c6:	68fa      	ldr	r2, [r7, #12]
 80161c8:	4313      	orrs	r3, r2
 80161ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80161cc:	697b      	ldr	r3, [r7, #20]
 80161ce:	f023 0320 	bic.w	r3, r3, #32
 80161d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80161d4:	683b      	ldr	r3, [r7, #0]
 80161d6:	689b      	ldr	r3, [r3, #8]
 80161d8:	011b      	lsls	r3, r3, #4
 80161da:	697a      	ldr	r2, [r7, #20]
 80161dc:	4313      	orrs	r3, r2
 80161de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	4a22      	ldr	r2, [pc, #136]	; (801626c <TIM_OC2_SetConfig+0xe4>)
 80161e4:	4293      	cmp	r3, r2
 80161e6:	d003      	beq.n	80161f0 <TIM_OC2_SetConfig+0x68>
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	4a21      	ldr	r2, [pc, #132]	; (8016270 <TIM_OC2_SetConfig+0xe8>)
 80161ec:	4293      	cmp	r3, r2
 80161ee:	d10d      	bne.n	801620c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80161f0:	697b      	ldr	r3, [r7, #20]
 80161f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80161f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80161f8:	683b      	ldr	r3, [r7, #0]
 80161fa:	68db      	ldr	r3, [r3, #12]
 80161fc:	011b      	lsls	r3, r3, #4
 80161fe:	697a      	ldr	r2, [r7, #20]
 8016200:	4313      	orrs	r3, r2
 8016202:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8016204:	697b      	ldr	r3, [r7, #20]
 8016206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801620a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	4a17      	ldr	r2, [pc, #92]	; (801626c <TIM_OC2_SetConfig+0xe4>)
 8016210:	4293      	cmp	r3, r2
 8016212:	d003      	beq.n	801621c <TIM_OC2_SetConfig+0x94>
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	4a16      	ldr	r2, [pc, #88]	; (8016270 <TIM_OC2_SetConfig+0xe8>)
 8016218:	4293      	cmp	r3, r2
 801621a:	d113      	bne.n	8016244 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801621c:	693b      	ldr	r3, [r7, #16]
 801621e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8016222:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8016224:	693b      	ldr	r3, [r7, #16]
 8016226:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801622a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801622c:	683b      	ldr	r3, [r7, #0]
 801622e:	695b      	ldr	r3, [r3, #20]
 8016230:	009b      	lsls	r3, r3, #2
 8016232:	693a      	ldr	r2, [r7, #16]
 8016234:	4313      	orrs	r3, r2
 8016236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8016238:	683b      	ldr	r3, [r7, #0]
 801623a:	699b      	ldr	r3, [r3, #24]
 801623c:	009b      	lsls	r3, r3, #2
 801623e:	693a      	ldr	r2, [r7, #16]
 8016240:	4313      	orrs	r3, r2
 8016242:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	693a      	ldr	r2, [r7, #16]
 8016248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	68fa      	ldr	r2, [r7, #12]
 801624e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8016250:	683b      	ldr	r3, [r7, #0]
 8016252:	685a      	ldr	r2, [r3, #4]
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	697a      	ldr	r2, [r7, #20]
 801625c:	621a      	str	r2, [r3, #32]
}
 801625e:	bf00      	nop
 8016260:	371c      	adds	r7, #28
 8016262:	46bd      	mov	sp, r7
 8016264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016268:	4770      	bx	lr
 801626a:	bf00      	nop
 801626c:	40010000 	.word	0x40010000
 8016270:	40010400 	.word	0x40010400

08016274 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8016274:	b480      	push	{r7}
 8016276:	b087      	sub	sp, #28
 8016278:	af00      	add	r7, sp, #0
 801627a:	6078      	str	r0, [r7, #4]
 801627c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	6a1b      	ldr	r3, [r3, #32]
 8016282:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	6a1b      	ldr	r3, [r3, #32]
 801628e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	685b      	ldr	r3, [r3, #4]
 8016294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	69db      	ldr	r3, [r3, #28]
 801629a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80162a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	f023 0303 	bic.w	r3, r3, #3
 80162aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80162ac:	683b      	ldr	r3, [r7, #0]
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	68fa      	ldr	r2, [r7, #12]
 80162b2:	4313      	orrs	r3, r2
 80162b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80162b6:	697b      	ldr	r3, [r7, #20]
 80162b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80162bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80162be:	683b      	ldr	r3, [r7, #0]
 80162c0:	689b      	ldr	r3, [r3, #8]
 80162c2:	021b      	lsls	r3, r3, #8
 80162c4:	697a      	ldr	r2, [r7, #20]
 80162c6:	4313      	orrs	r3, r2
 80162c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	4a21      	ldr	r2, [pc, #132]	; (8016354 <TIM_OC3_SetConfig+0xe0>)
 80162ce:	4293      	cmp	r3, r2
 80162d0:	d003      	beq.n	80162da <TIM_OC3_SetConfig+0x66>
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	4a20      	ldr	r2, [pc, #128]	; (8016358 <TIM_OC3_SetConfig+0xe4>)
 80162d6:	4293      	cmp	r3, r2
 80162d8:	d10d      	bne.n	80162f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80162da:	697b      	ldr	r3, [r7, #20]
 80162dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80162e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80162e2:	683b      	ldr	r3, [r7, #0]
 80162e4:	68db      	ldr	r3, [r3, #12]
 80162e6:	021b      	lsls	r3, r3, #8
 80162e8:	697a      	ldr	r2, [r7, #20]
 80162ea:	4313      	orrs	r3, r2
 80162ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80162ee:	697b      	ldr	r3, [r7, #20]
 80162f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80162f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	4a16      	ldr	r2, [pc, #88]	; (8016354 <TIM_OC3_SetConfig+0xe0>)
 80162fa:	4293      	cmp	r3, r2
 80162fc:	d003      	beq.n	8016306 <TIM_OC3_SetConfig+0x92>
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	4a15      	ldr	r2, [pc, #84]	; (8016358 <TIM_OC3_SetConfig+0xe4>)
 8016302:	4293      	cmp	r3, r2
 8016304:	d113      	bne.n	801632e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8016306:	693b      	ldr	r3, [r7, #16]
 8016308:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801630c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801630e:	693b      	ldr	r3, [r7, #16]
 8016310:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8016314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8016316:	683b      	ldr	r3, [r7, #0]
 8016318:	695b      	ldr	r3, [r3, #20]
 801631a:	011b      	lsls	r3, r3, #4
 801631c:	693a      	ldr	r2, [r7, #16]
 801631e:	4313      	orrs	r3, r2
 8016320:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8016322:	683b      	ldr	r3, [r7, #0]
 8016324:	699b      	ldr	r3, [r3, #24]
 8016326:	011b      	lsls	r3, r3, #4
 8016328:	693a      	ldr	r2, [r7, #16]
 801632a:	4313      	orrs	r3, r2
 801632c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	693a      	ldr	r2, [r7, #16]
 8016332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	68fa      	ldr	r2, [r7, #12]
 8016338:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801633a:	683b      	ldr	r3, [r7, #0]
 801633c:	685a      	ldr	r2, [r3, #4]
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	697a      	ldr	r2, [r7, #20]
 8016346:	621a      	str	r2, [r3, #32]
}
 8016348:	bf00      	nop
 801634a:	371c      	adds	r7, #28
 801634c:	46bd      	mov	sp, r7
 801634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016352:	4770      	bx	lr
 8016354:	40010000 	.word	0x40010000
 8016358:	40010400 	.word	0x40010400

0801635c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801635c:	b480      	push	{r7}
 801635e:	b087      	sub	sp, #28
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
 8016364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	6a1b      	ldr	r3, [r3, #32]
 801636a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	6a1b      	ldr	r3, [r3, #32]
 8016376:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	685b      	ldr	r3, [r3, #4]
 801637c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	69db      	ldr	r3, [r3, #28]
 8016382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801638a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016394:	683b      	ldr	r3, [r7, #0]
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	021b      	lsls	r3, r3, #8
 801639a:	68fa      	ldr	r2, [r7, #12]
 801639c:	4313      	orrs	r3, r2
 801639e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80163a0:	693b      	ldr	r3, [r7, #16]
 80163a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80163a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80163a8:	683b      	ldr	r3, [r7, #0]
 80163aa:	689b      	ldr	r3, [r3, #8]
 80163ac:	031b      	lsls	r3, r3, #12
 80163ae:	693a      	ldr	r2, [r7, #16]
 80163b0:	4313      	orrs	r3, r2
 80163b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	4a12      	ldr	r2, [pc, #72]	; (8016400 <TIM_OC4_SetConfig+0xa4>)
 80163b8:	4293      	cmp	r3, r2
 80163ba:	d003      	beq.n	80163c4 <TIM_OC4_SetConfig+0x68>
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	4a11      	ldr	r2, [pc, #68]	; (8016404 <TIM_OC4_SetConfig+0xa8>)
 80163c0:	4293      	cmp	r3, r2
 80163c2:	d109      	bne.n	80163d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80163c4:	697b      	ldr	r3, [r7, #20]
 80163c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80163ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80163cc:	683b      	ldr	r3, [r7, #0]
 80163ce:	695b      	ldr	r3, [r3, #20]
 80163d0:	019b      	lsls	r3, r3, #6
 80163d2:	697a      	ldr	r2, [r7, #20]
 80163d4:	4313      	orrs	r3, r2
 80163d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	697a      	ldr	r2, [r7, #20]
 80163dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	68fa      	ldr	r2, [r7, #12]
 80163e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80163e4:	683b      	ldr	r3, [r7, #0]
 80163e6:	685a      	ldr	r2, [r3, #4]
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	693a      	ldr	r2, [r7, #16]
 80163f0:	621a      	str	r2, [r3, #32]
}
 80163f2:	bf00      	nop
 80163f4:	371c      	adds	r7, #28
 80163f6:	46bd      	mov	sp, r7
 80163f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163fc:	4770      	bx	lr
 80163fe:	bf00      	nop
 8016400:	40010000 	.word	0x40010000
 8016404:	40010400 	.word	0x40010400

08016408 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8016408:	b480      	push	{r7}
 801640a:	b087      	sub	sp, #28
 801640c:	af00      	add	r7, sp, #0
 801640e:	60f8      	str	r0, [r7, #12]
 8016410:	60b9      	str	r1, [r7, #8]
 8016412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	6a1b      	ldr	r3, [r3, #32]
 8016418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	6a1b      	ldr	r3, [r3, #32]
 801641e:	f023 0201 	bic.w	r2, r3, #1
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	699b      	ldr	r3, [r3, #24]
 801642a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801642c:	693b      	ldr	r3, [r7, #16]
 801642e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8016432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	011b      	lsls	r3, r3, #4
 8016438:	693a      	ldr	r2, [r7, #16]
 801643a:	4313      	orrs	r3, r2
 801643c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801643e:	697b      	ldr	r3, [r7, #20]
 8016440:	f023 030a 	bic.w	r3, r3, #10
 8016444:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8016446:	697a      	ldr	r2, [r7, #20]
 8016448:	68bb      	ldr	r3, [r7, #8]
 801644a:	4313      	orrs	r3, r2
 801644c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	693a      	ldr	r2, [r7, #16]
 8016452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	697a      	ldr	r2, [r7, #20]
 8016458:	621a      	str	r2, [r3, #32]
}
 801645a:	bf00      	nop
 801645c:	371c      	adds	r7, #28
 801645e:	46bd      	mov	sp, r7
 8016460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016464:	4770      	bx	lr

08016466 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8016466:	b480      	push	{r7}
 8016468:	b087      	sub	sp, #28
 801646a:	af00      	add	r7, sp, #0
 801646c:	60f8      	str	r0, [r7, #12]
 801646e:	60b9      	str	r1, [r7, #8]
 8016470:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	6a1b      	ldr	r3, [r3, #32]
 8016476:	f023 0210 	bic.w	r2, r3, #16
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	699b      	ldr	r3, [r3, #24]
 8016482:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	6a1b      	ldr	r3, [r3, #32]
 8016488:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801648a:	697b      	ldr	r3, [r7, #20]
 801648c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8016490:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	031b      	lsls	r3, r3, #12
 8016496:	697a      	ldr	r2, [r7, #20]
 8016498:	4313      	orrs	r3, r2
 801649a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801649c:	693b      	ldr	r3, [r7, #16]
 801649e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80164a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80164a4:	68bb      	ldr	r3, [r7, #8]
 80164a6:	011b      	lsls	r3, r3, #4
 80164a8:	693a      	ldr	r2, [r7, #16]
 80164aa:	4313      	orrs	r3, r2
 80164ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	697a      	ldr	r2, [r7, #20]
 80164b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	693a      	ldr	r2, [r7, #16]
 80164b8:	621a      	str	r2, [r3, #32]
}
 80164ba:	bf00      	nop
 80164bc:	371c      	adds	r7, #28
 80164be:	46bd      	mov	sp, r7
 80164c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164c4:	4770      	bx	lr

080164c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80164c6:	b480      	push	{r7}
 80164c8:	b085      	sub	sp, #20
 80164ca:	af00      	add	r7, sp, #0
 80164cc:	6078      	str	r0, [r7, #4]
 80164ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	689b      	ldr	r3, [r3, #8]
 80164d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80164dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80164de:	683a      	ldr	r2, [r7, #0]
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	4313      	orrs	r3, r2
 80164e4:	f043 0307 	orr.w	r3, r3, #7
 80164e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	68fa      	ldr	r2, [r7, #12]
 80164ee:	609a      	str	r2, [r3, #8]
}
 80164f0:	bf00      	nop
 80164f2:	3714      	adds	r7, #20
 80164f4:	46bd      	mov	sp, r7
 80164f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164fa:	4770      	bx	lr

080164fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80164fc:	b480      	push	{r7}
 80164fe:	b087      	sub	sp, #28
 8016500:	af00      	add	r7, sp, #0
 8016502:	60f8      	str	r0, [r7, #12]
 8016504:	60b9      	str	r1, [r7, #8]
 8016506:	607a      	str	r2, [r7, #4]
 8016508:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	689b      	ldr	r3, [r3, #8]
 801650e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016510:	697b      	ldr	r3, [r7, #20]
 8016512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8016516:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8016518:	683b      	ldr	r3, [r7, #0]
 801651a:	021a      	lsls	r2, r3, #8
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	431a      	orrs	r2, r3
 8016520:	68bb      	ldr	r3, [r7, #8]
 8016522:	4313      	orrs	r3, r2
 8016524:	697a      	ldr	r2, [r7, #20]
 8016526:	4313      	orrs	r3, r2
 8016528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	697a      	ldr	r2, [r7, #20]
 801652e:	609a      	str	r2, [r3, #8]
}
 8016530:	bf00      	nop
 8016532:	371c      	adds	r7, #28
 8016534:	46bd      	mov	sp, r7
 8016536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801653a:	4770      	bx	lr

0801653c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801653c:	b480      	push	{r7}
 801653e:	b087      	sub	sp, #28
 8016540:	af00      	add	r7, sp, #0
 8016542:	60f8      	str	r0, [r7, #12]
 8016544:	60b9      	str	r1, [r7, #8]
 8016546:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8016548:	68bb      	ldr	r3, [r7, #8]
 801654a:	f003 031f 	and.w	r3, r3, #31
 801654e:	2201      	movs	r2, #1
 8016550:	fa02 f303 	lsl.w	r3, r2, r3
 8016554:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8016556:	68fb      	ldr	r3, [r7, #12]
 8016558:	6a1a      	ldr	r2, [r3, #32]
 801655a:	697b      	ldr	r3, [r7, #20]
 801655c:	43db      	mvns	r3, r3
 801655e:	401a      	ands	r2, r3
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	6a1a      	ldr	r2, [r3, #32]
 8016568:	68bb      	ldr	r3, [r7, #8]
 801656a:	f003 031f 	and.w	r3, r3, #31
 801656e:	6879      	ldr	r1, [r7, #4]
 8016570:	fa01 f303 	lsl.w	r3, r1, r3
 8016574:	431a      	orrs	r2, r3
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	621a      	str	r2, [r3, #32]
}
 801657a:	bf00      	nop
 801657c:	371c      	adds	r7, #28
 801657e:	46bd      	mov	sp, r7
 8016580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016584:	4770      	bx	lr
	...

08016588 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8016588:	b480      	push	{r7}
 801658a:	b085      	sub	sp, #20
 801658c:	af00      	add	r7, sp, #0
 801658e:	6078      	str	r0, [r7, #4]
 8016590:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016598:	2b01      	cmp	r3, #1
 801659a:	d101      	bne.n	80165a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801659c:	2302      	movs	r3, #2
 801659e:	e05a      	b.n	8016656 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	2201      	movs	r2, #1
 80165a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	2202      	movs	r2, #2
 80165ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	685b      	ldr	r3, [r3, #4]
 80165b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	689b      	ldr	r3, [r3, #8]
 80165be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80165c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80165c8:	683b      	ldr	r3, [r7, #0]
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	68fa      	ldr	r2, [r7, #12]
 80165ce:	4313      	orrs	r3, r2
 80165d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	68fa      	ldr	r2, [r7, #12]
 80165d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	4a21      	ldr	r2, [pc, #132]	; (8016664 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80165e0:	4293      	cmp	r3, r2
 80165e2:	d022      	beq.n	801662a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80165ec:	d01d      	beq.n	801662a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	4a1d      	ldr	r2, [pc, #116]	; (8016668 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80165f4:	4293      	cmp	r3, r2
 80165f6:	d018      	beq.n	801662a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	4a1b      	ldr	r2, [pc, #108]	; (801666c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80165fe:	4293      	cmp	r3, r2
 8016600:	d013      	beq.n	801662a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	4a1a      	ldr	r2, [pc, #104]	; (8016670 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8016608:	4293      	cmp	r3, r2
 801660a:	d00e      	beq.n	801662a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	4a18      	ldr	r2, [pc, #96]	; (8016674 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8016612:	4293      	cmp	r3, r2
 8016614:	d009      	beq.n	801662a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	4a17      	ldr	r2, [pc, #92]	; (8016678 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801661c:	4293      	cmp	r3, r2
 801661e:	d004      	beq.n	801662a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	4a15      	ldr	r2, [pc, #84]	; (801667c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8016626:	4293      	cmp	r3, r2
 8016628:	d10c      	bne.n	8016644 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801662a:	68bb      	ldr	r3, [r7, #8]
 801662c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016630:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8016632:	683b      	ldr	r3, [r7, #0]
 8016634:	685b      	ldr	r3, [r3, #4]
 8016636:	68ba      	ldr	r2, [r7, #8]
 8016638:	4313      	orrs	r3, r2
 801663a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	68ba      	ldr	r2, [r7, #8]
 8016642:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	2201      	movs	r2, #1
 8016648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	2200      	movs	r2, #0
 8016650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016654:	2300      	movs	r3, #0
}
 8016656:	4618      	mov	r0, r3
 8016658:	3714      	adds	r7, #20
 801665a:	46bd      	mov	sp, r7
 801665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016660:	4770      	bx	lr
 8016662:	bf00      	nop
 8016664:	40010000 	.word	0x40010000
 8016668:	40000400 	.word	0x40000400
 801666c:	40000800 	.word	0x40000800
 8016670:	40000c00 	.word	0x40000c00
 8016674:	40010400 	.word	0x40010400
 8016678:	40014000 	.word	0x40014000
 801667c:	40001800 	.word	0x40001800

08016680 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8016680:	b480      	push	{r7}
 8016682:	b083      	sub	sp, #12
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8016688:	bf00      	nop
 801668a:	370c      	adds	r7, #12
 801668c:	46bd      	mov	sp, r7
 801668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016692:	4770      	bx	lr

08016694 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8016694:	b480      	push	{r7}
 8016696:	b083      	sub	sp, #12
 8016698:	af00      	add	r7, sp, #0
 801669a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801669c:	bf00      	nop
 801669e:	370c      	adds	r7, #12
 80166a0:	46bd      	mov	sp, r7
 80166a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166a6:	4770      	bx	lr

080166a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80166a8:	b580      	push	{r7, lr}
 80166aa:	b082      	sub	sp, #8
 80166ac:	af00      	add	r7, sp, #0
 80166ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d101      	bne.n	80166ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80166b6:	2301      	movs	r3, #1
 80166b8:	e03f      	b.n	801673a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80166c0:	b2db      	uxtb	r3, r3
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d106      	bne.n	80166d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	2200      	movs	r2, #0
 80166ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80166ce:	6878      	ldr	r0, [r7, #4]
 80166d0:	f7ec f89a 	bl	8002808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	2224      	movs	r2, #36	; 0x24
 80166d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	68da      	ldr	r2, [r3, #12]
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80166ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80166ec:	6878      	ldr	r0, [r7, #4]
 80166ee:	f000 fb97 	bl	8016e20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	691a      	ldr	r2, [r3, #16]
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8016700:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	695a      	ldr	r2, [r3, #20]
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8016710:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	68da      	ldr	r2, [r3, #12]
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8016720:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	2200      	movs	r2, #0
 8016726:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	2220      	movs	r2, #32
 801672c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	2220      	movs	r2, #32
 8016734:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8016738:	2300      	movs	r3, #0
}
 801673a:	4618      	mov	r0, r3
 801673c:	3708      	adds	r7, #8
 801673e:	46bd      	mov	sp, r7
 8016740:	bd80      	pop	{r7, pc}

08016742 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016742:	b580      	push	{r7, lr}
 8016744:	b088      	sub	sp, #32
 8016746:	af02      	add	r7, sp, #8
 8016748:	60f8      	str	r0, [r7, #12]
 801674a:	60b9      	str	r1, [r7, #8]
 801674c:	603b      	str	r3, [r7, #0]
 801674e:	4613      	mov	r3, r2
 8016750:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8016752:	2300      	movs	r3, #0
 8016754:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801675c:	b2db      	uxtb	r3, r3
 801675e:	2b20      	cmp	r3, #32
 8016760:	f040 8083 	bne.w	801686a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8016764:	68bb      	ldr	r3, [r7, #8]
 8016766:	2b00      	cmp	r3, #0
 8016768:	d002      	beq.n	8016770 <HAL_UART_Transmit+0x2e>
 801676a:	88fb      	ldrh	r3, [r7, #6]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d101      	bne.n	8016774 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8016770:	2301      	movs	r3, #1
 8016772:	e07b      	b.n	801686c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801677a:	2b01      	cmp	r3, #1
 801677c:	d101      	bne.n	8016782 <HAL_UART_Transmit+0x40>
 801677e:	2302      	movs	r3, #2
 8016780:	e074      	b.n	801686c <HAL_UART_Transmit+0x12a>
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	2201      	movs	r2, #1
 8016786:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	2200      	movs	r2, #0
 801678e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	2221      	movs	r2, #33	; 0x21
 8016794:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8016798:	f7fa fac8 	bl	8010d2c <HAL_GetTick>
 801679c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	88fa      	ldrh	r2, [r7, #6]
 80167a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	88fa      	ldrh	r2, [r7, #6]
 80167a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	2200      	movs	r2, #0
 80167ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80167b2:	e042      	b.n	801683a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80167b8:	b29b      	uxth	r3, r3
 80167ba:	3b01      	subs	r3, #1
 80167bc:	b29a      	uxth	r2, r3
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	689b      	ldr	r3, [r3, #8]
 80167c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80167ca:	d122      	bne.n	8016812 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80167cc:	683b      	ldr	r3, [r7, #0]
 80167ce:	9300      	str	r3, [sp, #0]
 80167d0:	697b      	ldr	r3, [r7, #20]
 80167d2:	2200      	movs	r2, #0
 80167d4:	2180      	movs	r1, #128	; 0x80
 80167d6:	68f8      	ldr	r0, [r7, #12]
 80167d8:	f000 f9b6 	bl	8016b48 <UART_WaitOnFlagUntilTimeout>
 80167dc:	4603      	mov	r3, r0
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d001      	beq.n	80167e6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80167e2:	2303      	movs	r3, #3
 80167e4:	e042      	b.n	801686c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80167e6:	68bb      	ldr	r3, [r7, #8]
 80167e8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80167ea:	693b      	ldr	r3, [r7, #16]
 80167ec:	881b      	ldrh	r3, [r3, #0]
 80167ee:	461a      	mov	r2, r3
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80167f8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	691b      	ldr	r3, [r3, #16]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d103      	bne.n	801680a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8016802:	68bb      	ldr	r3, [r7, #8]
 8016804:	3302      	adds	r3, #2
 8016806:	60bb      	str	r3, [r7, #8]
 8016808:	e017      	b.n	801683a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 801680a:	68bb      	ldr	r3, [r7, #8]
 801680c:	3301      	adds	r3, #1
 801680e:	60bb      	str	r3, [r7, #8]
 8016810:	e013      	b.n	801683a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8016812:	683b      	ldr	r3, [r7, #0]
 8016814:	9300      	str	r3, [sp, #0]
 8016816:	697b      	ldr	r3, [r7, #20]
 8016818:	2200      	movs	r2, #0
 801681a:	2180      	movs	r1, #128	; 0x80
 801681c:	68f8      	ldr	r0, [r7, #12]
 801681e:	f000 f993 	bl	8016b48 <UART_WaitOnFlagUntilTimeout>
 8016822:	4603      	mov	r3, r0
 8016824:	2b00      	cmp	r3, #0
 8016826:	d001      	beq.n	801682c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8016828:	2303      	movs	r3, #3
 801682a:	e01f      	b.n	801686c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 801682c:	68bb      	ldr	r3, [r7, #8]
 801682e:	1c5a      	adds	r2, r3, #1
 8016830:	60ba      	str	r2, [r7, #8]
 8016832:	781a      	ldrb	r2, [r3, #0]
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801683e:	b29b      	uxth	r3, r3
 8016840:	2b00      	cmp	r3, #0
 8016842:	d1b7      	bne.n	80167b4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8016844:	683b      	ldr	r3, [r7, #0]
 8016846:	9300      	str	r3, [sp, #0]
 8016848:	697b      	ldr	r3, [r7, #20]
 801684a:	2200      	movs	r2, #0
 801684c:	2140      	movs	r1, #64	; 0x40
 801684e:	68f8      	ldr	r0, [r7, #12]
 8016850:	f000 f97a 	bl	8016b48 <UART_WaitOnFlagUntilTimeout>
 8016854:	4603      	mov	r3, r0
 8016856:	2b00      	cmp	r3, #0
 8016858:	d001      	beq.n	801685e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 801685a:	2303      	movs	r3, #3
 801685c:	e006      	b.n	801686c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	2220      	movs	r2, #32
 8016862:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8016866:	2300      	movs	r3, #0
 8016868:	e000      	b.n	801686c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 801686a:	2302      	movs	r3, #2
  }
}
 801686c:	4618      	mov	r0, r3
 801686e:	3718      	adds	r7, #24
 8016870:	46bd      	mov	sp, r7
 8016872:	bd80      	pop	{r7, pc}

08016874 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016874:	b480      	push	{r7}
 8016876:	b085      	sub	sp, #20
 8016878:	af00      	add	r7, sp, #0
 801687a:	60f8      	str	r0, [r7, #12]
 801687c:	60b9      	str	r1, [r7, #8]
 801687e:	4613      	mov	r3, r2
 8016880:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8016888:	b2db      	uxtb	r3, r3
 801688a:	2b20      	cmp	r3, #32
 801688c:	d140      	bne.n	8016910 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 801688e:	68bb      	ldr	r3, [r7, #8]
 8016890:	2b00      	cmp	r3, #0
 8016892:	d002      	beq.n	801689a <HAL_UART_Receive_IT+0x26>
 8016894:	88fb      	ldrh	r3, [r7, #6]
 8016896:	2b00      	cmp	r3, #0
 8016898:	d101      	bne.n	801689e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801689a:	2301      	movs	r3, #1
 801689c:	e039      	b.n	8016912 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80168a4:	2b01      	cmp	r3, #1
 80168a6:	d101      	bne.n	80168ac <HAL_UART_Receive_IT+0x38>
 80168a8:	2302      	movs	r3, #2
 80168aa:	e032      	b.n	8016912 <HAL_UART_Receive_IT+0x9e>
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	2201      	movs	r2, #1
 80168b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	68ba      	ldr	r2, [r7, #8]
 80168b8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	88fa      	ldrh	r2, [r7, #6]
 80168be:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	88fa      	ldrh	r2, [r7, #6]
 80168c4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	2200      	movs	r2, #0
 80168ca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	2222      	movs	r2, #34	; 0x22
 80168d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	2200      	movs	r2, #0
 80168d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	68da      	ldr	r2, [r3, #12]
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80168ea:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	695a      	ldr	r2, [r3, #20]
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	f042 0201 	orr.w	r2, r2, #1
 80168fa:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	68da      	ldr	r2, [r3, #12]
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	f042 0220 	orr.w	r2, r2, #32
 801690a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 801690c:	2300      	movs	r3, #0
 801690e:	e000      	b.n	8016912 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8016910:	2302      	movs	r3, #2
  }
}
 8016912:	4618      	mov	r0, r3
 8016914:	3714      	adds	r7, #20
 8016916:	46bd      	mov	sp, r7
 8016918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801691c:	4770      	bx	lr
	...

08016920 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b088      	sub	sp, #32
 8016924:	af00      	add	r7, sp, #0
 8016926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	68db      	ldr	r3, [r3, #12]
 8016936:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	695b      	ldr	r3, [r3, #20]
 801693e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8016940:	2300      	movs	r3, #0
 8016942:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8016944:	2300      	movs	r3, #0
 8016946:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8016948:	69fb      	ldr	r3, [r7, #28]
 801694a:	f003 030f 	and.w	r3, r3, #15
 801694e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8016950:	693b      	ldr	r3, [r7, #16]
 8016952:	2b00      	cmp	r3, #0
 8016954:	d10d      	bne.n	8016972 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8016956:	69fb      	ldr	r3, [r7, #28]
 8016958:	f003 0320 	and.w	r3, r3, #32
 801695c:	2b00      	cmp	r3, #0
 801695e:	d008      	beq.n	8016972 <HAL_UART_IRQHandler+0x52>
 8016960:	69bb      	ldr	r3, [r7, #24]
 8016962:	f003 0320 	and.w	r3, r3, #32
 8016966:	2b00      	cmp	r3, #0
 8016968:	d003      	beq.n	8016972 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 801696a:	6878      	ldr	r0, [r7, #4]
 801696c:	f000 f9d6 	bl	8016d1c <UART_Receive_IT>
      return;
 8016970:	e0d0      	b.n	8016b14 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8016972:	693b      	ldr	r3, [r7, #16]
 8016974:	2b00      	cmp	r3, #0
 8016976:	f000 80b0 	beq.w	8016ada <HAL_UART_IRQHandler+0x1ba>
 801697a:	697b      	ldr	r3, [r7, #20]
 801697c:	f003 0301 	and.w	r3, r3, #1
 8016980:	2b00      	cmp	r3, #0
 8016982:	d105      	bne.n	8016990 <HAL_UART_IRQHandler+0x70>
 8016984:	69bb      	ldr	r3, [r7, #24]
 8016986:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801698a:	2b00      	cmp	r3, #0
 801698c:	f000 80a5 	beq.w	8016ada <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8016990:	69fb      	ldr	r3, [r7, #28]
 8016992:	f003 0301 	and.w	r3, r3, #1
 8016996:	2b00      	cmp	r3, #0
 8016998:	d00a      	beq.n	80169b0 <HAL_UART_IRQHandler+0x90>
 801699a:	69bb      	ldr	r3, [r7, #24]
 801699c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d005      	beq.n	80169b0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80169a8:	f043 0201 	orr.w	r2, r3, #1
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80169b0:	69fb      	ldr	r3, [r7, #28]
 80169b2:	f003 0304 	and.w	r3, r3, #4
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d00a      	beq.n	80169d0 <HAL_UART_IRQHandler+0xb0>
 80169ba:	697b      	ldr	r3, [r7, #20]
 80169bc:	f003 0301 	and.w	r3, r3, #1
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d005      	beq.n	80169d0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80169c8:	f043 0202 	orr.w	r2, r3, #2
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80169d0:	69fb      	ldr	r3, [r7, #28]
 80169d2:	f003 0302 	and.w	r3, r3, #2
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d00a      	beq.n	80169f0 <HAL_UART_IRQHandler+0xd0>
 80169da:	697b      	ldr	r3, [r7, #20]
 80169dc:	f003 0301 	and.w	r3, r3, #1
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d005      	beq.n	80169f0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80169e8:	f043 0204 	orr.w	r2, r3, #4
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80169f0:	69fb      	ldr	r3, [r7, #28]
 80169f2:	f003 0308 	and.w	r3, r3, #8
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d00f      	beq.n	8016a1a <HAL_UART_IRQHandler+0xfa>
 80169fa:	69bb      	ldr	r3, [r7, #24]
 80169fc:	f003 0320 	and.w	r3, r3, #32
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d104      	bne.n	8016a0e <HAL_UART_IRQHandler+0xee>
 8016a04:	697b      	ldr	r3, [r7, #20]
 8016a06:	f003 0301 	and.w	r3, r3, #1
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d005      	beq.n	8016a1a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016a12:	f043 0208 	orr.w	r2, r3, #8
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d077      	beq.n	8016b12 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8016a22:	69fb      	ldr	r3, [r7, #28]
 8016a24:	f003 0320 	and.w	r3, r3, #32
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d007      	beq.n	8016a3c <HAL_UART_IRQHandler+0x11c>
 8016a2c:	69bb      	ldr	r3, [r7, #24]
 8016a2e:	f003 0320 	and.w	r3, r3, #32
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d002      	beq.n	8016a3c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8016a36:	6878      	ldr	r0, [r7, #4]
 8016a38:	f000 f970 	bl	8016d1c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	695b      	ldr	r3, [r3, #20]
 8016a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016a46:	2b40      	cmp	r3, #64	; 0x40
 8016a48:	bf0c      	ite	eq
 8016a4a:	2301      	moveq	r3, #1
 8016a4c:	2300      	movne	r3, #0
 8016a4e:	b2db      	uxtb	r3, r3
 8016a50:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016a56:	f003 0308 	and.w	r3, r3, #8
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d102      	bne.n	8016a64 <HAL_UART_IRQHandler+0x144>
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d031      	beq.n	8016ac8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8016a64:	6878      	ldr	r0, [r7, #4]
 8016a66:	f000 f8b9 	bl	8016bdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	695b      	ldr	r3, [r3, #20]
 8016a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016a74:	2b40      	cmp	r3, #64	; 0x40
 8016a76:	d123      	bne.n	8016ac0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	695a      	ldr	r2, [r3, #20]
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016a86:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d013      	beq.n	8016ab8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a94:	4a21      	ldr	r2, [pc, #132]	; (8016b1c <HAL_UART_IRQHandler+0x1fc>)
 8016a96:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a9c:	4618      	mov	r0, r3
 8016a9e:	f7fb fa83 	bl	8011fa8 <HAL_DMA_Abort_IT>
 8016aa2:	4603      	mov	r3, r0
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d016      	beq.n	8016ad6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016aae:	687a      	ldr	r2, [r7, #4]
 8016ab0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8016ab2:	4610      	mov	r0, r2
 8016ab4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016ab6:	e00e      	b.n	8016ad6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8016ab8:	6878      	ldr	r0, [r7, #4]
 8016aba:	f000 f83b 	bl	8016b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016abe:	e00a      	b.n	8016ad6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016ac0:	6878      	ldr	r0, [r7, #4]
 8016ac2:	f000 f837 	bl	8016b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016ac6:	e006      	b.n	8016ad6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8016ac8:	6878      	ldr	r0, [r7, #4]
 8016aca:	f000 f833 	bl	8016b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	2200      	movs	r2, #0
 8016ad2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8016ad4:	e01d      	b.n	8016b12 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016ad6:	bf00      	nop
    return;
 8016ad8:	e01b      	b.n	8016b12 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8016ada:	69fb      	ldr	r3, [r7, #28]
 8016adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d008      	beq.n	8016af6 <HAL_UART_IRQHandler+0x1d6>
 8016ae4:	69bb      	ldr	r3, [r7, #24]
 8016ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d003      	beq.n	8016af6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8016aee:	6878      	ldr	r0, [r7, #4]
 8016af0:	f000 f8a6 	bl	8016c40 <UART_Transmit_IT>
    return;
 8016af4:	e00e      	b.n	8016b14 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8016af6:	69fb      	ldr	r3, [r7, #28]
 8016af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d009      	beq.n	8016b14 <HAL_UART_IRQHandler+0x1f4>
 8016b00:	69bb      	ldr	r3, [r7, #24]
 8016b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d004      	beq.n	8016b14 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8016b0a:	6878      	ldr	r0, [r7, #4]
 8016b0c:	f000 f8ee 	bl	8016cec <UART_EndTransmit_IT>
    return;
 8016b10:	e000      	b.n	8016b14 <HAL_UART_IRQHandler+0x1f4>
    return;
 8016b12:	bf00      	nop
  }
}
 8016b14:	3720      	adds	r7, #32
 8016b16:	46bd      	mov	sp, r7
 8016b18:	bd80      	pop	{r7, pc}
 8016b1a:	bf00      	nop
 8016b1c:	08016c19 	.word	0x08016c19

08016b20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8016b20:	b480      	push	{r7}
 8016b22:	b083      	sub	sp, #12
 8016b24:	af00      	add	r7, sp, #0
 8016b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8016b28:	bf00      	nop
 8016b2a:	370c      	adds	r7, #12
 8016b2c:	46bd      	mov	sp, r7
 8016b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b32:	4770      	bx	lr

08016b34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8016b34:	b480      	push	{r7}
 8016b36:	b083      	sub	sp, #12
 8016b38:	af00      	add	r7, sp, #0
 8016b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8016b3c:	bf00      	nop
 8016b3e:	370c      	adds	r7, #12
 8016b40:	46bd      	mov	sp, r7
 8016b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b46:	4770      	bx	lr

08016b48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8016b48:	b580      	push	{r7, lr}
 8016b4a:	b084      	sub	sp, #16
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	60f8      	str	r0, [r7, #12]
 8016b50:	60b9      	str	r1, [r7, #8]
 8016b52:	603b      	str	r3, [r7, #0]
 8016b54:	4613      	mov	r3, r2
 8016b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016b58:	e02c      	b.n	8016bb4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016b5a:	69bb      	ldr	r3, [r7, #24]
 8016b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016b60:	d028      	beq.n	8016bb4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8016b62:	69bb      	ldr	r3, [r7, #24]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d007      	beq.n	8016b78 <UART_WaitOnFlagUntilTimeout+0x30>
 8016b68:	f7fa f8e0 	bl	8010d2c <HAL_GetTick>
 8016b6c:	4602      	mov	r2, r0
 8016b6e:	683b      	ldr	r3, [r7, #0]
 8016b70:	1ad3      	subs	r3, r2, r3
 8016b72:	69ba      	ldr	r2, [r7, #24]
 8016b74:	429a      	cmp	r2, r3
 8016b76:	d21d      	bcs.n	8016bb4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	68da      	ldr	r2, [r3, #12]
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8016b86:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	695a      	ldr	r2, [r3, #20]
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	f022 0201 	bic.w	r2, r2, #1
 8016b96:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	2220      	movs	r2, #32
 8016b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	2220      	movs	r2, #32
 8016ba4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	2200      	movs	r2, #0
 8016bac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8016bb0:	2303      	movs	r3, #3
 8016bb2:	e00f      	b.n	8016bd4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	681a      	ldr	r2, [r3, #0]
 8016bba:	68bb      	ldr	r3, [r7, #8]
 8016bbc:	4013      	ands	r3, r2
 8016bbe:	68ba      	ldr	r2, [r7, #8]
 8016bc0:	429a      	cmp	r2, r3
 8016bc2:	bf0c      	ite	eq
 8016bc4:	2301      	moveq	r3, #1
 8016bc6:	2300      	movne	r3, #0
 8016bc8:	b2db      	uxtb	r3, r3
 8016bca:	461a      	mov	r2, r3
 8016bcc:	79fb      	ldrb	r3, [r7, #7]
 8016bce:	429a      	cmp	r2, r3
 8016bd0:	d0c3      	beq.n	8016b5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8016bd2:	2300      	movs	r3, #0
}
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	3710      	adds	r7, #16
 8016bd8:	46bd      	mov	sp, r7
 8016bda:	bd80      	pop	{r7, pc}

08016bdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8016bdc:	b480      	push	{r7}
 8016bde:	b083      	sub	sp, #12
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	68da      	ldr	r2, [r3, #12]
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8016bf2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	695a      	ldr	r2, [r3, #20]
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	f022 0201 	bic.w	r2, r2, #1
 8016c02:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	2220      	movs	r2, #32
 8016c08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8016c0c:	bf00      	nop
 8016c0e:	370c      	adds	r7, #12
 8016c10:	46bd      	mov	sp, r7
 8016c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c16:	4770      	bx	lr

08016c18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8016c18:	b580      	push	{r7, lr}
 8016c1a:	b084      	sub	sp, #16
 8016c1c:	af00      	add	r7, sp, #0
 8016c1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	2200      	movs	r2, #0
 8016c2a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	2200      	movs	r2, #0
 8016c30:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8016c32:	68f8      	ldr	r0, [r7, #12]
 8016c34:	f7ff ff7e 	bl	8016b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016c38:	bf00      	nop
 8016c3a:	3710      	adds	r7, #16
 8016c3c:	46bd      	mov	sp, r7
 8016c3e:	bd80      	pop	{r7, pc}

08016c40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8016c40:	b480      	push	{r7}
 8016c42:	b085      	sub	sp, #20
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8016c4e:	b2db      	uxtb	r3, r3
 8016c50:	2b21      	cmp	r3, #33	; 0x21
 8016c52:	d144      	bne.n	8016cde <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	689b      	ldr	r3, [r3, #8]
 8016c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016c5c:	d11a      	bne.n	8016c94 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	6a1b      	ldr	r3, [r3, #32]
 8016c62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8016c64:	68fb      	ldr	r3, [r7, #12]
 8016c66:	881b      	ldrh	r3, [r3, #0]
 8016c68:	461a      	mov	r2, r3
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8016c72:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	691b      	ldr	r3, [r3, #16]
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d105      	bne.n	8016c88 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	6a1b      	ldr	r3, [r3, #32]
 8016c80:	1c9a      	adds	r2, r3, #2
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	621a      	str	r2, [r3, #32]
 8016c86:	e00e      	b.n	8016ca6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	6a1b      	ldr	r3, [r3, #32]
 8016c8c:	1c5a      	adds	r2, r3, #1
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	621a      	str	r2, [r3, #32]
 8016c92:	e008      	b.n	8016ca6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	6a1b      	ldr	r3, [r3, #32]
 8016c98:	1c59      	adds	r1, r3, #1
 8016c9a:	687a      	ldr	r2, [r7, #4]
 8016c9c:	6211      	str	r1, [r2, #32]
 8016c9e:	781a      	ldrb	r2, [r3, #0]
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8016caa:	b29b      	uxth	r3, r3
 8016cac:	3b01      	subs	r3, #1
 8016cae:	b29b      	uxth	r3, r3
 8016cb0:	687a      	ldr	r2, [r7, #4]
 8016cb2:	4619      	mov	r1, r3
 8016cb4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d10f      	bne.n	8016cda <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	68da      	ldr	r2, [r3, #12]
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016cc8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	681b      	ldr	r3, [r3, #0]
 8016cce:	68da      	ldr	r2, [r3, #12]
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016cd8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8016cda:	2300      	movs	r3, #0
 8016cdc:	e000      	b.n	8016ce0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8016cde:	2302      	movs	r3, #2
  }
}
 8016ce0:	4618      	mov	r0, r3
 8016ce2:	3714      	adds	r7, #20
 8016ce4:	46bd      	mov	sp, r7
 8016ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cea:	4770      	bx	lr

08016cec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8016cec:	b580      	push	{r7, lr}
 8016cee:	b082      	sub	sp, #8
 8016cf0:	af00      	add	r7, sp, #0
 8016cf2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	68da      	ldr	r2, [r3, #12]
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016d02:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	2220      	movs	r2, #32
 8016d08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8016d0c:	6878      	ldr	r0, [r7, #4]
 8016d0e:	f7ff ff07 	bl	8016b20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8016d12:	2300      	movs	r3, #0
}
 8016d14:	4618      	mov	r0, r3
 8016d16:	3708      	adds	r7, #8
 8016d18:	46bd      	mov	sp, r7
 8016d1a:	bd80      	pop	{r7, pc}

08016d1c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8016d1c:	b580      	push	{r7, lr}
 8016d1e:	b084      	sub	sp, #16
 8016d20:	af00      	add	r7, sp, #0
 8016d22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8016d2a:	b2db      	uxtb	r3, r3
 8016d2c:	2b22      	cmp	r3, #34	; 0x22
 8016d2e:	d171      	bne.n	8016e14 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	689b      	ldr	r3, [r3, #8]
 8016d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016d38:	d123      	bne.n	8016d82 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d3e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	691b      	ldr	r3, [r3, #16]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d10e      	bne.n	8016d66 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	685b      	ldr	r3, [r3, #4]
 8016d4e:	b29b      	uxth	r3, r3
 8016d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016d54:	b29a      	uxth	r2, r3
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d5e:	1c9a      	adds	r2, r3, #2
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	629a      	str	r2, [r3, #40]	; 0x28
 8016d64:	e029      	b.n	8016dba <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	685b      	ldr	r3, [r3, #4]
 8016d6c:	b29b      	uxth	r3, r3
 8016d6e:	b2db      	uxtb	r3, r3
 8016d70:	b29a      	uxth	r2, r3
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d7a:	1c5a      	adds	r2, r3, #1
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	629a      	str	r2, [r3, #40]	; 0x28
 8016d80:	e01b      	b.n	8016dba <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	691b      	ldr	r3, [r3, #16]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d10a      	bne.n	8016da0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	6858      	ldr	r0, [r3, #4]
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d94:	1c59      	adds	r1, r3, #1
 8016d96:	687a      	ldr	r2, [r7, #4]
 8016d98:	6291      	str	r1, [r2, #40]	; 0x28
 8016d9a:	b2c2      	uxtb	r2, r0
 8016d9c:	701a      	strb	r2, [r3, #0]
 8016d9e:	e00c      	b.n	8016dba <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	685b      	ldr	r3, [r3, #4]
 8016da6:	b2da      	uxtb	r2, r3
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016dac:	1c58      	adds	r0, r3, #1
 8016dae:	6879      	ldr	r1, [r7, #4]
 8016db0:	6288      	str	r0, [r1, #40]	; 0x28
 8016db2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8016db6:	b2d2      	uxtb	r2, r2
 8016db8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016dbe:	b29b      	uxth	r3, r3
 8016dc0:	3b01      	subs	r3, #1
 8016dc2:	b29b      	uxth	r3, r3
 8016dc4:	687a      	ldr	r2, [r7, #4]
 8016dc6:	4619      	mov	r1, r3
 8016dc8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d120      	bne.n	8016e10 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	681b      	ldr	r3, [r3, #0]
 8016dd2:	68da      	ldr	r2, [r3, #12]
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	f022 0220 	bic.w	r2, r2, #32
 8016ddc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	68da      	ldr	r2, [r3, #12]
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8016dec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	695a      	ldr	r2, [r3, #20]
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	f022 0201 	bic.w	r2, r2, #1
 8016dfc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	2220      	movs	r2, #32
 8016e02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8016e06:	6878      	ldr	r0, [r7, #4]
 8016e08:	f7ed fba6 	bl	8004558 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8016e0c:	2300      	movs	r3, #0
 8016e0e:	e002      	b.n	8016e16 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8016e10:	2300      	movs	r3, #0
 8016e12:	e000      	b.n	8016e16 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8016e14:	2302      	movs	r3, #2
  }
}
 8016e16:	4618      	mov	r0, r3
 8016e18:	3710      	adds	r7, #16
 8016e1a:	46bd      	mov	sp, r7
 8016e1c:	bd80      	pop	{r7, pc}
	...

08016e20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e24:	b0bd      	sub	sp, #244	; 0xf4
 8016e26:	af00      	add	r7, sp, #0
 8016e28:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8016e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	691b      	ldr	r3, [r3, #16]
 8016e34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8016e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016e3c:	68d9      	ldr	r1, [r3, #12]
 8016e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016e42:	681a      	ldr	r2, [r3, #0]
 8016e44:	ea40 0301 	orr.w	r3, r0, r1
 8016e48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8016e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016e4e:	689a      	ldr	r2, [r3, #8]
 8016e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016e54:	691b      	ldr	r3, [r3, #16]
 8016e56:	431a      	orrs	r2, r3
 8016e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016e5c:	695b      	ldr	r3, [r3, #20]
 8016e5e:	431a      	orrs	r2, r3
 8016e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016e64:	69db      	ldr	r3, [r3, #28]
 8016e66:	4313      	orrs	r3, r2
 8016e68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8016e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	68db      	ldr	r3, [r3, #12]
 8016e74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8016e78:	f021 010c 	bic.w	r1, r1, #12
 8016e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016e80:	681a      	ldr	r2, [r3, #0]
 8016e82:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8016e86:	430b      	orrs	r3, r1
 8016e88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8016e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	695b      	ldr	r3, [r3, #20]
 8016e92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8016e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016e9a:	6999      	ldr	r1, [r3, #24]
 8016e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016ea0:	681a      	ldr	r2, [r3, #0]
 8016ea2:	ea40 0301 	orr.w	r3, r0, r1
 8016ea6:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016eac:	69db      	ldr	r3, [r3, #28]
 8016eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016eb2:	f040 81a5 	bne.w	8017200 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8016eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016eba:	681a      	ldr	r2, [r3, #0]
 8016ebc:	4bcd      	ldr	r3, [pc, #820]	; (80171f4 <UART_SetConfig+0x3d4>)
 8016ebe:	429a      	cmp	r2, r3
 8016ec0:	d006      	beq.n	8016ed0 <UART_SetConfig+0xb0>
 8016ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016ec6:	681a      	ldr	r2, [r3, #0]
 8016ec8:	4bcb      	ldr	r3, [pc, #812]	; (80171f8 <UART_SetConfig+0x3d8>)
 8016eca:	429a      	cmp	r2, r3
 8016ecc:	f040 80cb 	bne.w	8017066 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8016ed0:	f7fe fa86 	bl	80153e0 <HAL_RCC_GetPCLK2Freq>
 8016ed4:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8016ed8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016edc:	461c      	mov	r4, r3
 8016ede:	f04f 0500 	mov.w	r5, #0
 8016ee2:	4622      	mov	r2, r4
 8016ee4:	462b      	mov	r3, r5
 8016ee6:	1891      	adds	r1, r2, r2
 8016ee8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8016eec:	415b      	adcs	r3, r3
 8016eee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016ef2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8016ef6:	1912      	adds	r2, r2, r4
 8016ef8:	eb45 0303 	adc.w	r3, r5, r3
 8016efc:	f04f 0000 	mov.w	r0, #0
 8016f00:	f04f 0100 	mov.w	r1, #0
 8016f04:	00d9      	lsls	r1, r3, #3
 8016f06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8016f0a:	00d0      	lsls	r0, r2, #3
 8016f0c:	4602      	mov	r2, r0
 8016f0e:	460b      	mov	r3, r1
 8016f10:	1911      	adds	r1, r2, r4
 8016f12:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8016f16:	416b      	adcs	r3, r5
 8016f18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8016f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016f20:	685b      	ldr	r3, [r3, #4]
 8016f22:	461a      	mov	r2, r3
 8016f24:	f04f 0300 	mov.w	r3, #0
 8016f28:	1891      	adds	r1, r2, r2
 8016f2a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8016f2e:	415b      	adcs	r3, r3
 8016f30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016f34:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8016f38:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8016f3c:	f7e9 fea4 	bl	8000c88 <__aeabi_uldivmod>
 8016f40:	4602      	mov	r2, r0
 8016f42:	460b      	mov	r3, r1
 8016f44:	4bad      	ldr	r3, [pc, #692]	; (80171fc <UART_SetConfig+0x3dc>)
 8016f46:	fba3 2302 	umull	r2, r3, r3, r2
 8016f4a:	095b      	lsrs	r3, r3, #5
 8016f4c:	011e      	lsls	r6, r3, #4
 8016f4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016f52:	461c      	mov	r4, r3
 8016f54:	f04f 0500 	mov.w	r5, #0
 8016f58:	4622      	mov	r2, r4
 8016f5a:	462b      	mov	r3, r5
 8016f5c:	1891      	adds	r1, r2, r2
 8016f5e:	67b9      	str	r1, [r7, #120]	; 0x78
 8016f60:	415b      	adcs	r3, r3
 8016f62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016f64:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8016f68:	1912      	adds	r2, r2, r4
 8016f6a:	eb45 0303 	adc.w	r3, r5, r3
 8016f6e:	f04f 0000 	mov.w	r0, #0
 8016f72:	f04f 0100 	mov.w	r1, #0
 8016f76:	00d9      	lsls	r1, r3, #3
 8016f78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8016f7c:	00d0      	lsls	r0, r2, #3
 8016f7e:	4602      	mov	r2, r0
 8016f80:	460b      	mov	r3, r1
 8016f82:	1911      	adds	r1, r2, r4
 8016f84:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8016f88:	416b      	adcs	r3, r5
 8016f8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8016f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016f92:	685b      	ldr	r3, [r3, #4]
 8016f94:	461a      	mov	r2, r3
 8016f96:	f04f 0300 	mov.w	r3, #0
 8016f9a:	1891      	adds	r1, r2, r2
 8016f9c:	6739      	str	r1, [r7, #112]	; 0x70
 8016f9e:	415b      	adcs	r3, r3
 8016fa0:	677b      	str	r3, [r7, #116]	; 0x74
 8016fa2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8016fa6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8016faa:	f7e9 fe6d 	bl	8000c88 <__aeabi_uldivmod>
 8016fae:	4602      	mov	r2, r0
 8016fb0:	460b      	mov	r3, r1
 8016fb2:	4b92      	ldr	r3, [pc, #584]	; (80171fc <UART_SetConfig+0x3dc>)
 8016fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8016fb8:	095b      	lsrs	r3, r3, #5
 8016fba:	2164      	movs	r1, #100	; 0x64
 8016fbc:	fb01 f303 	mul.w	r3, r1, r3
 8016fc0:	1ad3      	subs	r3, r2, r3
 8016fc2:	00db      	lsls	r3, r3, #3
 8016fc4:	3332      	adds	r3, #50	; 0x32
 8016fc6:	4a8d      	ldr	r2, [pc, #564]	; (80171fc <UART_SetConfig+0x3dc>)
 8016fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8016fcc:	095b      	lsrs	r3, r3, #5
 8016fce:	005b      	lsls	r3, r3, #1
 8016fd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8016fd4:	441e      	add	r6, r3
 8016fd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016fda:	4618      	mov	r0, r3
 8016fdc:	f04f 0100 	mov.w	r1, #0
 8016fe0:	4602      	mov	r2, r0
 8016fe2:	460b      	mov	r3, r1
 8016fe4:	1894      	adds	r4, r2, r2
 8016fe6:	66bc      	str	r4, [r7, #104]	; 0x68
 8016fe8:	415b      	adcs	r3, r3
 8016fea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016fec:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8016ff0:	1812      	adds	r2, r2, r0
 8016ff2:	eb41 0303 	adc.w	r3, r1, r3
 8016ff6:	f04f 0400 	mov.w	r4, #0
 8016ffa:	f04f 0500 	mov.w	r5, #0
 8016ffe:	00dd      	lsls	r5, r3, #3
 8017000:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8017004:	00d4      	lsls	r4, r2, #3
 8017006:	4622      	mov	r2, r4
 8017008:	462b      	mov	r3, r5
 801700a:	1814      	adds	r4, r2, r0
 801700c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8017010:	414b      	adcs	r3, r1
 8017012:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8017016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801701a:	685b      	ldr	r3, [r3, #4]
 801701c:	461a      	mov	r2, r3
 801701e:	f04f 0300 	mov.w	r3, #0
 8017022:	1891      	adds	r1, r2, r2
 8017024:	6639      	str	r1, [r7, #96]	; 0x60
 8017026:	415b      	adcs	r3, r3
 8017028:	667b      	str	r3, [r7, #100]	; 0x64
 801702a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801702e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8017032:	f7e9 fe29 	bl	8000c88 <__aeabi_uldivmod>
 8017036:	4602      	mov	r2, r0
 8017038:	460b      	mov	r3, r1
 801703a:	4b70      	ldr	r3, [pc, #448]	; (80171fc <UART_SetConfig+0x3dc>)
 801703c:	fba3 1302 	umull	r1, r3, r3, r2
 8017040:	095b      	lsrs	r3, r3, #5
 8017042:	2164      	movs	r1, #100	; 0x64
 8017044:	fb01 f303 	mul.w	r3, r1, r3
 8017048:	1ad3      	subs	r3, r2, r3
 801704a:	00db      	lsls	r3, r3, #3
 801704c:	3332      	adds	r3, #50	; 0x32
 801704e:	4a6b      	ldr	r2, [pc, #428]	; (80171fc <UART_SetConfig+0x3dc>)
 8017050:	fba2 2303 	umull	r2, r3, r2, r3
 8017054:	095b      	lsrs	r3, r3, #5
 8017056:	f003 0207 	and.w	r2, r3, #7
 801705a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	4432      	add	r2, r6
 8017062:	609a      	str	r2, [r3, #8]
 8017064:	e26d      	b.n	8017542 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8017066:	f7fe f9a7 	bl	80153b8 <HAL_RCC_GetPCLK1Freq>
 801706a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801706e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8017072:	461c      	mov	r4, r3
 8017074:	f04f 0500 	mov.w	r5, #0
 8017078:	4622      	mov	r2, r4
 801707a:	462b      	mov	r3, r5
 801707c:	1891      	adds	r1, r2, r2
 801707e:	65b9      	str	r1, [r7, #88]	; 0x58
 8017080:	415b      	adcs	r3, r3
 8017082:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017084:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8017088:	1912      	adds	r2, r2, r4
 801708a:	eb45 0303 	adc.w	r3, r5, r3
 801708e:	f04f 0000 	mov.w	r0, #0
 8017092:	f04f 0100 	mov.w	r1, #0
 8017096:	00d9      	lsls	r1, r3, #3
 8017098:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801709c:	00d0      	lsls	r0, r2, #3
 801709e:	4602      	mov	r2, r0
 80170a0:	460b      	mov	r3, r1
 80170a2:	1911      	adds	r1, r2, r4
 80170a4:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80170a8:	416b      	adcs	r3, r5
 80170aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80170ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80170b2:	685b      	ldr	r3, [r3, #4]
 80170b4:	461a      	mov	r2, r3
 80170b6:	f04f 0300 	mov.w	r3, #0
 80170ba:	1891      	adds	r1, r2, r2
 80170bc:	6539      	str	r1, [r7, #80]	; 0x50
 80170be:	415b      	adcs	r3, r3
 80170c0:	657b      	str	r3, [r7, #84]	; 0x54
 80170c2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80170c6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80170ca:	f7e9 fddd 	bl	8000c88 <__aeabi_uldivmod>
 80170ce:	4602      	mov	r2, r0
 80170d0:	460b      	mov	r3, r1
 80170d2:	4b4a      	ldr	r3, [pc, #296]	; (80171fc <UART_SetConfig+0x3dc>)
 80170d4:	fba3 2302 	umull	r2, r3, r3, r2
 80170d8:	095b      	lsrs	r3, r3, #5
 80170da:	011e      	lsls	r6, r3, #4
 80170dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80170e0:	461c      	mov	r4, r3
 80170e2:	f04f 0500 	mov.w	r5, #0
 80170e6:	4622      	mov	r2, r4
 80170e8:	462b      	mov	r3, r5
 80170ea:	1891      	adds	r1, r2, r2
 80170ec:	64b9      	str	r1, [r7, #72]	; 0x48
 80170ee:	415b      	adcs	r3, r3
 80170f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80170f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80170f6:	1912      	adds	r2, r2, r4
 80170f8:	eb45 0303 	adc.w	r3, r5, r3
 80170fc:	f04f 0000 	mov.w	r0, #0
 8017100:	f04f 0100 	mov.w	r1, #0
 8017104:	00d9      	lsls	r1, r3, #3
 8017106:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801710a:	00d0      	lsls	r0, r2, #3
 801710c:	4602      	mov	r2, r0
 801710e:	460b      	mov	r3, r1
 8017110:	1911      	adds	r1, r2, r4
 8017112:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8017116:	416b      	adcs	r3, r5
 8017118:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801711c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017120:	685b      	ldr	r3, [r3, #4]
 8017122:	461a      	mov	r2, r3
 8017124:	f04f 0300 	mov.w	r3, #0
 8017128:	1891      	adds	r1, r2, r2
 801712a:	6439      	str	r1, [r7, #64]	; 0x40
 801712c:	415b      	adcs	r3, r3
 801712e:	647b      	str	r3, [r7, #68]	; 0x44
 8017130:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8017134:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8017138:	f7e9 fda6 	bl	8000c88 <__aeabi_uldivmod>
 801713c:	4602      	mov	r2, r0
 801713e:	460b      	mov	r3, r1
 8017140:	4b2e      	ldr	r3, [pc, #184]	; (80171fc <UART_SetConfig+0x3dc>)
 8017142:	fba3 1302 	umull	r1, r3, r3, r2
 8017146:	095b      	lsrs	r3, r3, #5
 8017148:	2164      	movs	r1, #100	; 0x64
 801714a:	fb01 f303 	mul.w	r3, r1, r3
 801714e:	1ad3      	subs	r3, r2, r3
 8017150:	00db      	lsls	r3, r3, #3
 8017152:	3332      	adds	r3, #50	; 0x32
 8017154:	4a29      	ldr	r2, [pc, #164]	; (80171fc <UART_SetConfig+0x3dc>)
 8017156:	fba2 2303 	umull	r2, r3, r2, r3
 801715a:	095b      	lsrs	r3, r3, #5
 801715c:	005b      	lsls	r3, r3, #1
 801715e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8017162:	441e      	add	r6, r3
 8017164:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8017168:	4618      	mov	r0, r3
 801716a:	f04f 0100 	mov.w	r1, #0
 801716e:	4602      	mov	r2, r0
 8017170:	460b      	mov	r3, r1
 8017172:	1894      	adds	r4, r2, r2
 8017174:	63bc      	str	r4, [r7, #56]	; 0x38
 8017176:	415b      	adcs	r3, r3
 8017178:	63fb      	str	r3, [r7, #60]	; 0x3c
 801717a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801717e:	1812      	adds	r2, r2, r0
 8017180:	eb41 0303 	adc.w	r3, r1, r3
 8017184:	f04f 0400 	mov.w	r4, #0
 8017188:	f04f 0500 	mov.w	r5, #0
 801718c:	00dd      	lsls	r5, r3, #3
 801718e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8017192:	00d4      	lsls	r4, r2, #3
 8017194:	4622      	mov	r2, r4
 8017196:	462b      	mov	r3, r5
 8017198:	1814      	adds	r4, r2, r0
 801719a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 801719e:	414b      	adcs	r3, r1
 80171a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80171a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80171a8:	685b      	ldr	r3, [r3, #4]
 80171aa:	461a      	mov	r2, r3
 80171ac:	f04f 0300 	mov.w	r3, #0
 80171b0:	1891      	adds	r1, r2, r2
 80171b2:	6339      	str	r1, [r7, #48]	; 0x30
 80171b4:	415b      	adcs	r3, r3
 80171b6:	637b      	str	r3, [r7, #52]	; 0x34
 80171b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80171bc:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80171c0:	f7e9 fd62 	bl	8000c88 <__aeabi_uldivmod>
 80171c4:	4602      	mov	r2, r0
 80171c6:	460b      	mov	r3, r1
 80171c8:	4b0c      	ldr	r3, [pc, #48]	; (80171fc <UART_SetConfig+0x3dc>)
 80171ca:	fba3 1302 	umull	r1, r3, r3, r2
 80171ce:	095b      	lsrs	r3, r3, #5
 80171d0:	2164      	movs	r1, #100	; 0x64
 80171d2:	fb01 f303 	mul.w	r3, r1, r3
 80171d6:	1ad3      	subs	r3, r2, r3
 80171d8:	00db      	lsls	r3, r3, #3
 80171da:	3332      	adds	r3, #50	; 0x32
 80171dc:	4a07      	ldr	r2, [pc, #28]	; (80171fc <UART_SetConfig+0x3dc>)
 80171de:	fba2 2303 	umull	r2, r3, r2, r3
 80171e2:	095b      	lsrs	r3, r3, #5
 80171e4:	f003 0207 	and.w	r2, r3, #7
 80171e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	4432      	add	r2, r6
 80171f0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80171f2:	e1a6      	b.n	8017542 <UART_SetConfig+0x722>
 80171f4:	40011000 	.word	0x40011000
 80171f8:	40011400 	.word	0x40011400
 80171fc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8017200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017204:	681a      	ldr	r2, [r3, #0]
 8017206:	4bd1      	ldr	r3, [pc, #836]	; (801754c <UART_SetConfig+0x72c>)
 8017208:	429a      	cmp	r2, r3
 801720a:	d006      	beq.n	801721a <UART_SetConfig+0x3fa>
 801720c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017210:	681a      	ldr	r2, [r3, #0]
 8017212:	4bcf      	ldr	r3, [pc, #828]	; (8017550 <UART_SetConfig+0x730>)
 8017214:	429a      	cmp	r2, r3
 8017216:	f040 80ca 	bne.w	80173ae <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 801721a:	f7fe f8e1 	bl	80153e0 <HAL_RCC_GetPCLK2Freq>
 801721e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8017222:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8017226:	461c      	mov	r4, r3
 8017228:	f04f 0500 	mov.w	r5, #0
 801722c:	4622      	mov	r2, r4
 801722e:	462b      	mov	r3, r5
 8017230:	1891      	adds	r1, r2, r2
 8017232:	62b9      	str	r1, [r7, #40]	; 0x28
 8017234:	415b      	adcs	r3, r3
 8017236:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017238:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801723c:	1912      	adds	r2, r2, r4
 801723e:	eb45 0303 	adc.w	r3, r5, r3
 8017242:	f04f 0000 	mov.w	r0, #0
 8017246:	f04f 0100 	mov.w	r1, #0
 801724a:	00d9      	lsls	r1, r3, #3
 801724c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8017250:	00d0      	lsls	r0, r2, #3
 8017252:	4602      	mov	r2, r0
 8017254:	460b      	mov	r3, r1
 8017256:	eb12 0a04 	adds.w	sl, r2, r4
 801725a:	eb43 0b05 	adc.w	fp, r3, r5
 801725e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017262:	685b      	ldr	r3, [r3, #4]
 8017264:	4618      	mov	r0, r3
 8017266:	f04f 0100 	mov.w	r1, #0
 801726a:	f04f 0200 	mov.w	r2, #0
 801726e:	f04f 0300 	mov.w	r3, #0
 8017272:	008b      	lsls	r3, r1, #2
 8017274:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8017278:	0082      	lsls	r2, r0, #2
 801727a:	4650      	mov	r0, sl
 801727c:	4659      	mov	r1, fp
 801727e:	f7e9 fd03 	bl	8000c88 <__aeabi_uldivmod>
 8017282:	4602      	mov	r2, r0
 8017284:	460b      	mov	r3, r1
 8017286:	4bb3      	ldr	r3, [pc, #716]	; (8017554 <UART_SetConfig+0x734>)
 8017288:	fba3 2302 	umull	r2, r3, r3, r2
 801728c:	095b      	lsrs	r3, r3, #5
 801728e:	011e      	lsls	r6, r3, #4
 8017290:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8017294:	4618      	mov	r0, r3
 8017296:	f04f 0100 	mov.w	r1, #0
 801729a:	4602      	mov	r2, r0
 801729c:	460b      	mov	r3, r1
 801729e:	1894      	adds	r4, r2, r2
 80172a0:	623c      	str	r4, [r7, #32]
 80172a2:	415b      	adcs	r3, r3
 80172a4:	627b      	str	r3, [r7, #36]	; 0x24
 80172a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80172aa:	1812      	adds	r2, r2, r0
 80172ac:	eb41 0303 	adc.w	r3, r1, r3
 80172b0:	f04f 0400 	mov.w	r4, #0
 80172b4:	f04f 0500 	mov.w	r5, #0
 80172b8:	00dd      	lsls	r5, r3, #3
 80172ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80172be:	00d4      	lsls	r4, r2, #3
 80172c0:	4622      	mov	r2, r4
 80172c2:	462b      	mov	r3, r5
 80172c4:	1814      	adds	r4, r2, r0
 80172c6:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80172ca:	414b      	adcs	r3, r1
 80172cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80172d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80172d4:	685b      	ldr	r3, [r3, #4]
 80172d6:	4618      	mov	r0, r3
 80172d8:	f04f 0100 	mov.w	r1, #0
 80172dc:	f04f 0200 	mov.w	r2, #0
 80172e0:	f04f 0300 	mov.w	r3, #0
 80172e4:	008b      	lsls	r3, r1, #2
 80172e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80172ea:	0082      	lsls	r2, r0, #2
 80172ec:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80172f0:	f7e9 fcca 	bl	8000c88 <__aeabi_uldivmod>
 80172f4:	4602      	mov	r2, r0
 80172f6:	460b      	mov	r3, r1
 80172f8:	4b96      	ldr	r3, [pc, #600]	; (8017554 <UART_SetConfig+0x734>)
 80172fa:	fba3 1302 	umull	r1, r3, r3, r2
 80172fe:	095b      	lsrs	r3, r3, #5
 8017300:	2164      	movs	r1, #100	; 0x64
 8017302:	fb01 f303 	mul.w	r3, r1, r3
 8017306:	1ad3      	subs	r3, r2, r3
 8017308:	011b      	lsls	r3, r3, #4
 801730a:	3332      	adds	r3, #50	; 0x32
 801730c:	4a91      	ldr	r2, [pc, #580]	; (8017554 <UART_SetConfig+0x734>)
 801730e:	fba2 2303 	umull	r2, r3, r2, r3
 8017312:	095b      	lsrs	r3, r3, #5
 8017314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017318:	441e      	add	r6, r3
 801731a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801731e:	4618      	mov	r0, r3
 8017320:	f04f 0100 	mov.w	r1, #0
 8017324:	4602      	mov	r2, r0
 8017326:	460b      	mov	r3, r1
 8017328:	1894      	adds	r4, r2, r2
 801732a:	61bc      	str	r4, [r7, #24]
 801732c:	415b      	adcs	r3, r3
 801732e:	61fb      	str	r3, [r7, #28]
 8017330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8017334:	1812      	adds	r2, r2, r0
 8017336:	eb41 0303 	adc.w	r3, r1, r3
 801733a:	f04f 0400 	mov.w	r4, #0
 801733e:	f04f 0500 	mov.w	r5, #0
 8017342:	00dd      	lsls	r5, r3, #3
 8017344:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8017348:	00d4      	lsls	r4, r2, #3
 801734a:	4622      	mov	r2, r4
 801734c:	462b      	mov	r3, r5
 801734e:	1814      	adds	r4, r2, r0
 8017350:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8017354:	414b      	adcs	r3, r1
 8017356:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801735a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801735e:	685b      	ldr	r3, [r3, #4]
 8017360:	4618      	mov	r0, r3
 8017362:	f04f 0100 	mov.w	r1, #0
 8017366:	f04f 0200 	mov.w	r2, #0
 801736a:	f04f 0300 	mov.w	r3, #0
 801736e:	008b      	lsls	r3, r1, #2
 8017370:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8017374:	0082      	lsls	r2, r0, #2
 8017376:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 801737a:	f7e9 fc85 	bl	8000c88 <__aeabi_uldivmod>
 801737e:	4602      	mov	r2, r0
 8017380:	460b      	mov	r3, r1
 8017382:	4b74      	ldr	r3, [pc, #464]	; (8017554 <UART_SetConfig+0x734>)
 8017384:	fba3 1302 	umull	r1, r3, r3, r2
 8017388:	095b      	lsrs	r3, r3, #5
 801738a:	2164      	movs	r1, #100	; 0x64
 801738c:	fb01 f303 	mul.w	r3, r1, r3
 8017390:	1ad3      	subs	r3, r2, r3
 8017392:	011b      	lsls	r3, r3, #4
 8017394:	3332      	adds	r3, #50	; 0x32
 8017396:	4a6f      	ldr	r2, [pc, #444]	; (8017554 <UART_SetConfig+0x734>)
 8017398:	fba2 2303 	umull	r2, r3, r2, r3
 801739c:	095b      	lsrs	r3, r3, #5
 801739e:	f003 020f 	and.w	r2, r3, #15
 80173a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80173a6:	681b      	ldr	r3, [r3, #0]
 80173a8:	4432      	add	r2, r6
 80173aa:	609a      	str	r2, [r3, #8]
 80173ac:	e0c9      	b.n	8017542 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80173ae:	f7fe f803 	bl	80153b8 <HAL_RCC_GetPCLK1Freq>
 80173b2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80173b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80173ba:	461c      	mov	r4, r3
 80173bc:	f04f 0500 	mov.w	r5, #0
 80173c0:	4622      	mov	r2, r4
 80173c2:	462b      	mov	r3, r5
 80173c4:	1891      	adds	r1, r2, r2
 80173c6:	6139      	str	r1, [r7, #16]
 80173c8:	415b      	adcs	r3, r3
 80173ca:	617b      	str	r3, [r7, #20]
 80173cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80173d0:	1912      	adds	r2, r2, r4
 80173d2:	eb45 0303 	adc.w	r3, r5, r3
 80173d6:	f04f 0000 	mov.w	r0, #0
 80173da:	f04f 0100 	mov.w	r1, #0
 80173de:	00d9      	lsls	r1, r3, #3
 80173e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80173e4:	00d0      	lsls	r0, r2, #3
 80173e6:	4602      	mov	r2, r0
 80173e8:	460b      	mov	r3, r1
 80173ea:	eb12 0804 	adds.w	r8, r2, r4
 80173ee:	eb43 0905 	adc.w	r9, r3, r5
 80173f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80173f6:	685b      	ldr	r3, [r3, #4]
 80173f8:	4618      	mov	r0, r3
 80173fa:	f04f 0100 	mov.w	r1, #0
 80173fe:	f04f 0200 	mov.w	r2, #0
 8017402:	f04f 0300 	mov.w	r3, #0
 8017406:	008b      	lsls	r3, r1, #2
 8017408:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801740c:	0082      	lsls	r2, r0, #2
 801740e:	4640      	mov	r0, r8
 8017410:	4649      	mov	r1, r9
 8017412:	f7e9 fc39 	bl	8000c88 <__aeabi_uldivmod>
 8017416:	4602      	mov	r2, r0
 8017418:	460b      	mov	r3, r1
 801741a:	4b4e      	ldr	r3, [pc, #312]	; (8017554 <UART_SetConfig+0x734>)
 801741c:	fba3 2302 	umull	r2, r3, r3, r2
 8017420:	095b      	lsrs	r3, r3, #5
 8017422:	011e      	lsls	r6, r3, #4
 8017424:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8017428:	4618      	mov	r0, r3
 801742a:	f04f 0100 	mov.w	r1, #0
 801742e:	4602      	mov	r2, r0
 8017430:	460b      	mov	r3, r1
 8017432:	1894      	adds	r4, r2, r2
 8017434:	60bc      	str	r4, [r7, #8]
 8017436:	415b      	adcs	r3, r3
 8017438:	60fb      	str	r3, [r7, #12]
 801743a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801743e:	1812      	adds	r2, r2, r0
 8017440:	eb41 0303 	adc.w	r3, r1, r3
 8017444:	f04f 0400 	mov.w	r4, #0
 8017448:	f04f 0500 	mov.w	r5, #0
 801744c:	00dd      	lsls	r5, r3, #3
 801744e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8017452:	00d4      	lsls	r4, r2, #3
 8017454:	4622      	mov	r2, r4
 8017456:	462b      	mov	r3, r5
 8017458:	1814      	adds	r4, r2, r0
 801745a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 801745e:	414b      	adcs	r3, r1
 8017460:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8017464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017468:	685b      	ldr	r3, [r3, #4]
 801746a:	4618      	mov	r0, r3
 801746c:	f04f 0100 	mov.w	r1, #0
 8017470:	f04f 0200 	mov.w	r2, #0
 8017474:	f04f 0300 	mov.w	r3, #0
 8017478:	008b      	lsls	r3, r1, #2
 801747a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801747e:	0082      	lsls	r2, r0, #2
 8017480:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8017484:	f7e9 fc00 	bl	8000c88 <__aeabi_uldivmod>
 8017488:	4602      	mov	r2, r0
 801748a:	460b      	mov	r3, r1
 801748c:	4b31      	ldr	r3, [pc, #196]	; (8017554 <UART_SetConfig+0x734>)
 801748e:	fba3 1302 	umull	r1, r3, r3, r2
 8017492:	095b      	lsrs	r3, r3, #5
 8017494:	2164      	movs	r1, #100	; 0x64
 8017496:	fb01 f303 	mul.w	r3, r1, r3
 801749a:	1ad3      	subs	r3, r2, r3
 801749c:	011b      	lsls	r3, r3, #4
 801749e:	3332      	adds	r3, #50	; 0x32
 80174a0:	4a2c      	ldr	r2, [pc, #176]	; (8017554 <UART_SetConfig+0x734>)
 80174a2:	fba2 2303 	umull	r2, r3, r2, r3
 80174a6:	095b      	lsrs	r3, r3, #5
 80174a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80174ac:	441e      	add	r6, r3
 80174ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80174b2:	4618      	mov	r0, r3
 80174b4:	f04f 0100 	mov.w	r1, #0
 80174b8:	4602      	mov	r2, r0
 80174ba:	460b      	mov	r3, r1
 80174bc:	1894      	adds	r4, r2, r2
 80174be:	603c      	str	r4, [r7, #0]
 80174c0:	415b      	adcs	r3, r3
 80174c2:	607b      	str	r3, [r7, #4]
 80174c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80174c8:	1812      	adds	r2, r2, r0
 80174ca:	eb41 0303 	adc.w	r3, r1, r3
 80174ce:	f04f 0400 	mov.w	r4, #0
 80174d2:	f04f 0500 	mov.w	r5, #0
 80174d6:	00dd      	lsls	r5, r3, #3
 80174d8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80174dc:	00d4      	lsls	r4, r2, #3
 80174de:	4622      	mov	r2, r4
 80174e0:	462b      	mov	r3, r5
 80174e2:	1814      	adds	r4, r2, r0
 80174e4:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80174e8:	414b      	adcs	r3, r1
 80174ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80174ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80174f2:	685b      	ldr	r3, [r3, #4]
 80174f4:	4618      	mov	r0, r3
 80174f6:	f04f 0100 	mov.w	r1, #0
 80174fa:	f04f 0200 	mov.w	r2, #0
 80174fe:	f04f 0300 	mov.w	r3, #0
 8017502:	008b      	lsls	r3, r1, #2
 8017504:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8017508:	0082      	lsls	r2, r0, #2
 801750a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 801750e:	f7e9 fbbb 	bl	8000c88 <__aeabi_uldivmod>
 8017512:	4602      	mov	r2, r0
 8017514:	460b      	mov	r3, r1
 8017516:	4b0f      	ldr	r3, [pc, #60]	; (8017554 <UART_SetConfig+0x734>)
 8017518:	fba3 1302 	umull	r1, r3, r3, r2
 801751c:	095b      	lsrs	r3, r3, #5
 801751e:	2164      	movs	r1, #100	; 0x64
 8017520:	fb01 f303 	mul.w	r3, r1, r3
 8017524:	1ad3      	subs	r3, r2, r3
 8017526:	011b      	lsls	r3, r3, #4
 8017528:	3332      	adds	r3, #50	; 0x32
 801752a:	4a0a      	ldr	r2, [pc, #40]	; (8017554 <UART_SetConfig+0x734>)
 801752c:	fba2 2303 	umull	r2, r3, r2, r3
 8017530:	095b      	lsrs	r3, r3, #5
 8017532:	f003 020f 	and.w	r2, r3, #15
 8017536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801753a:	681b      	ldr	r3, [r3, #0]
 801753c:	4432      	add	r2, r6
 801753e:	609a      	str	r2, [r3, #8]
}
 8017540:	e7ff      	b.n	8017542 <UART_SetConfig+0x722>
 8017542:	bf00      	nop
 8017544:	37f4      	adds	r7, #244	; 0xf4
 8017546:	46bd      	mov	sp, r7
 8017548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801754c:	40011000 	.word	0x40011000
 8017550:	40011400 	.word	0x40011400
 8017554:	51eb851f 	.word	0x51eb851f

08017558 <__NVIC_SetPriority>:
{
 8017558:	b480      	push	{r7}
 801755a:	b083      	sub	sp, #12
 801755c:	af00      	add	r7, sp, #0
 801755e:	4603      	mov	r3, r0
 8017560:	6039      	str	r1, [r7, #0]
 8017562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017568:	2b00      	cmp	r3, #0
 801756a:	db0a      	blt.n	8017582 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801756c:	683b      	ldr	r3, [r7, #0]
 801756e:	b2da      	uxtb	r2, r3
 8017570:	490c      	ldr	r1, [pc, #48]	; (80175a4 <__NVIC_SetPriority+0x4c>)
 8017572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017576:	0112      	lsls	r2, r2, #4
 8017578:	b2d2      	uxtb	r2, r2
 801757a:	440b      	add	r3, r1
 801757c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8017580:	e00a      	b.n	8017598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017582:	683b      	ldr	r3, [r7, #0]
 8017584:	b2da      	uxtb	r2, r3
 8017586:	4908      	ldr	r1, [pc, #32]	; (80175a8 <__NVIC_SetPriority+0x50>)
 8017588:	79fb      	ldrb	r3, [r7, #7]
 801758a:	f003 030f 	and.w	r3, r3, #15
 801758e:	3b04      	subs	r3, #4
 8017590:	0112      	lsls	r2, r2, #4
 8017592:	b2d2      	uxtb	r2, r2
 8017594:	440b      	add	r3, r1
 8017596:	761a      	strb	r2, [r3, #24]
}
 8017598:	bf00      	nop
 801759a:	370c      	adds	r7, #12
 801759c:	46bd      	mov	sp, r7
 801759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a2:	4770      	bx	lr
 80175a4:	e000e100 	.word	0xe000e100
 80175a8:	e000ed00 	.word	0xe000ed00

080175ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80175ac:	b580      	push	{r7, lr}
 80175ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80175b0:	4b05      	ldr	r3, [pc, #20]	; (80175c8 <SysTick_Handler+0x1c>)
 80175b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80175b4:	f001 fe02 	bl	80191bc <xTaskGetSchedulerState>
 80175b8:	4603      	mov	r3, r0
 80175ba:	2b01      	cmp	r3, #1
 80175bc:	d001      	beq.n	80175c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80175be:	f002 fbeb 	bl	8019d98 <xPortSysTickHandler>
  }
}
 80175c2:	bf00      	nop
 80175c4:	bd80      	pop	{r7, pc}
 80175c6:	bf00      	nop
 80175c8:	e000e010 	.word	0xe000e010

080175cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80175cc:	b580      	push	{r7, lr}
 80175ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80175d0:	2100      	movs	r1, #0
 80175d2:	f06f 0004 	mvn.w	r0, #4
 80175d6:	f7ff ffbf 	bl	8017558 <__NVIC_SetPriority>
#endif
}
 80175da:	bf00      	nop
 80175dc:	bd80      	pop	{r7, pc}
	...

080175e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80175e0:	b480      	push	{r7}
 80175e2:	b083      	sub	sp, #12
 80175e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80175e6:	f3ef 8305 	mrs	r3, IPSR
 80175ea:	603b      	str	r3, [r7, #0]
  return(result);
 80175ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d003      	beq.n	80175fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80175f2:	f06f 0305 	mvn.w	r3, #5
 80175f6:	607b      	str	r3, [r7, #4]
 80175f8:	e00c      	b.n	8017614 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80175fa:	4b0a      	ldr	r3, [pc, #40]	; (8017624 <osKernelInitialize+0x44>)
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d105      	bne.n	801760e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8017602:	4b08      	ldr	r3, [pc, #32]	; (8017624 <osKernelInitialize+0x44>)
 8017604:	2201      	movs	r2, #1
 8017606:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8017608:	2300      	movs	r3, #0
 801760a:	607b      	str	r3, [r7, #4]
 801760c:	e002      	b.n	8017614 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801760e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017612:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8017614:	687b      	ldr	r3, [r7, #4]
}
 8017616:	4618      	mov	r0, r3
 8017618:	370c      	adds	r7, #12
 801761a:	46bd      	mov	sp, r7
 801761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017620:	4770      	bx	lr
 8017622:	bf00      	nop
 8017624:	200015ec 	.word	0x200015ec

08017628 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8017628:	b580      	push	{r7, lr}
 801762a:	b082      	sub	sp, #8
 801762c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801762e:	f3ef 8305 	mrs	r3, IPSR
 8017632:	603b      	str	r3, [r7, #0]
  return(result);
 8017634:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017636:	2b00      	cmp	r3, #0
 8017638:	d003      	beq.n	8017642 <osKernelStart+0x1a>
    stat = osErrorISR;
 801763a:	f06f 0305 	mvn.w	r3, #5
 801763e:	607b      	str	r3, [r7, #4]
 8017640:	e010      	b.n	8017664 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8017642:	4b0b      	ldr	r3, [pc, #44]	; (8017670 <osKernelStart+0x48>)
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	2b01      	cmp	r3, #1
 8017648:	d109      	bne.n	801765e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801764a:	f7ff ffbf 	bl	80175cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801764e:	4b08      	ldr	r3, [pc, #32]	; (8017670 <osKernelStart+0x48>)
 8017650:	2202      	movs	r2, #2
 8017652:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8017654:	f001 f96a 	bl	801892c <vTaskStartScheduler>
      stat = osOK;
 8017658:	2300      	movs	r3, #0
 801765a:	607b      	str	r3, [r7, #4]
 801765c:	e002      	b.n	8017664 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801765e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017662:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8017664:	687b      	ldr	r3, [r7, #4]
}
 8017666:	4618      	mov	r0, r3
 8017668:	3708      	adds	r7, #8
 801766a:	46bd      	mov	sp, r7
 801766c:	bd80      	pop	{r7, pc}
 801766e:	bf00      	nop
 8017670:	200015ec 	.word	0x200015ec

08017674 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8017674:	b580      	push	{r7, lr}
 8017676:	b08e      	sub	sp, #56	; 0x38
 8017678:	af04      	add	r7, sp, #16
 801767a:	60f8      	str	r0, [r7, #12]
 801767c:	60b9      	str	r1, [r7, #8]
 801767e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8017680:	2300      	movs	r3, #0
 8017682:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017684:	f3ef 8305 	mrs	r3, IPSR
 8017688:	617b      	str	r3, [r7, #20]
  return(result);
 801768a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801768c:	2b00      	cmp	r3, #0
 801768e:	d17e      	bne.n	801778e <osThreadNew+0x11a>
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	2b00      	cmp	r3, #0
 8017694:	d07b      	beq.n	801778e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8017696:	2380      	movs	r3, #128	; 0x80
 8017698:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801769a:	2318      	movs	r3, #24
 801769c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801769e:	2300      	movs	r3, #0
 80176a0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80176a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80176a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d045      	beq.n	801773a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d002      	beq.n	80176bc <osThreadNew+0x48>
        name = attr->name;
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	681b      	ldr	r3, [r3, #0]
 80176ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	699b      	ldr	r3, [r3, #24]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d002      	beq.n	80176ca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	699b      	ldr	r3, [r3, #24]
 80176c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80176ca:	69fb      	ldr	r3, [r7, #28]
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d008      	beq.n	80176e2 <osThreadNew+0x6e>
 80176d0:	69fb      	ldr	r3, [r7, #28]
 80176d2:	2b38      	cmp	r3, #56	; 0x38
 80176d4:	d805      	bhi.n	80176e2 <osThreadNew+0x6e>
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	685b      	ldr	r3, [r3, #4]
 80176da:	f003 0301 	and.w	r3, r3, #1
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d001      	beq.n	80176e6 <osThreadNew+0x72>
        return (NULL);
 80176e2:	2300      	movs	r3, #0
 80176e4:	e054      	b.n	8017790 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	695b      	ldr	r3, [r3, #20]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d003      	beq.n	80176f6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	695b      	ldr	r3, [r3, #20]
 80176f2:	089b      	lsrs	r3, r3, #2
 80176f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	689b      	ldr	r3, [r3, #8]
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d00e      	beq.n	801771c <osThreadNew+0xa8>
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	68db      	ldr	r3, [r3, #12]
 8017702:	2b5b      	cmp	r3, #91	; 0x5b
 8017704:	d90a      	bls.n	801771c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801770a:	2b00      	cmp	r3, #0
 801770c:	d006      	beq.n	801771c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	695b      	ldr	r3, [r3, #20]
 8017712:	2b00      	cmp	r3, #0
 8017714:	d002      	beq.n	801771c <osThreadNew+0xa8>
        mem = 1;
 8017716:	2301      	movs	r3, #1
 8017718:	61bb      	str	r3, [r7, #24]
 801771a:	e010      	b.n	801773e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	689b      	ldr	r3, [r3, #8]
 8017720:	2b00      	cmp	r3, #0
 8017722:	d10c      	bne.n	801773e <osThreadNew+0xca>
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	68db      	ldr	r3, [r3, #12]
 8017728:	2b00      	cmp	r3, #0
 801772a:	d108      	bne.n	801773e <osThreadNew+0xca>
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	691b      	ldr	r3, [r3, #16]
 8017730:	2b00      	cmp	r3, #0
 8017732:	d104      	bne.n	801773e <osThreadNew+0xca>
          mem = 0;
 8017734:	2300      	movs	r3, #0
 8017736:	61bb      	str	r3, [r7, #24]
 8017738:	e001      	b.n	801773e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801773a:	2300      	movs	r3, #0
 801773c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801773e:	69bb      	ldr	r3, [r7, #24]
 8017740:	2b01      	cmp	r3, #1
 8017742:	d110      	bne.n	8017766 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8017748:	687a      	ldr	r2, [r7, #4]
 801774a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801774c:	9202      	str	r2, [sp, #8]
 801774e:	9301      	str	r3, [sp, #4]
 8017750:	69fb      	ldr	r3, [r7, #28]
 8017752:	9300      	str	r3, [sp, #0]
 8017754:	68bb      	ldr	r3, [r7, #8]
 8017756:	6a3a      	ldr	r2, [r7, #32]
 8017758:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801775a:	68f8      	ldr	r0, [r7, #12]
 801775c:	f000 fe38 	bl	80183d0 <xTaskCreateStatic>
 8017760:	4603      	mov	r3, r0
 8017762:	613b      	str	r3, [r7, #16]
 8017764:	e013      	b.n	801778e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8017766:	69bb      	ldr	r3, [r7, #24]
 8017768:	2b00      	cmp	r3, #0
 801776a:	d110      	bne.n	801778e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801776c:	6a3b      	ldr	r3, [r7, #32]
 801776e:	b29a      	uxth	r2, r3
 8017770:	f107 0310 	add.w	r3, r7, #16
 8017774:	9301      	str	r3, [sp, #4]
 8017776:	69fb      	ldr	r3, [r7, #28]
 8017778:	9300      	str	r3, [sp, #0]
 801777a:	68bb      	ldr	r3, [r7, #8]
 801777c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801777e:	68f8      	ldr	r0, [r7, #12]
 8017780:	f000 fe83 	bl	801848a <xTaskCreate>
 8017784:	4603      	mov	r3, r0
 8017786:	2b01      	cmp	r3, #1
 8017788:	d001      	beq.n	801778e <osThreadNew+0x11a>
            hTask = NULL;
 801778a:	2300      	movs	r3, #0
 801778c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801778e:	693b      	ldr	r3, [r7, #16]
}
 8017790:	4618      	mov	r0, r3
 8017792:	3728      	adds	r7, #40	; 0x28
 8017794:	46bd      	mov	sp, r7
 8017796:	bd80      	pop	{r7, pc}

08017798 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8017798:	b580      	push	{r7, lr}
 801779a:	b086      	sub	sp, #24
 801779c:	af00      	add	r7, sp, #0
 801779e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80177a4:	f3ef 8305 	mrs	r3, IPSR
 80177a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80177aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d003      	beq.n	80177b8 <osThreadTerminate+0x20>
    stat = osErrorISR;
 80177b0:	f06f 0305 	mvn.w	r3, #5
 80177b4:	617b      	str	r3, [r7, #20]
 80177b6:	e017      	b.n	80177e8 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 80177b8:	693b      	ldr	r3, [r7, #16]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d103      	bne.n	80177c6 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 80177be:	f06f 0303 	mvn.w	r3, #3
 80177c2:	617b      	str	r3, [r7, #20]
 80177c4:	e010      	b.n	80177e8 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 80177c6:	6938      	ldr	r0, [r7, #16]
 80177c8:	f001 f84a 	bl	8018860 <eTaskGetState>
 80177cc:	4603      	mov	r3, r0
 80177ce:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 80177d0:	7bfb      	ldrb	r3, [r7, #15]
 80177d2:	2b04      	cmp	r3, #4
 80177d4:	d005      	beq.n	80177e2 <osThreadTerminate+0x4a>
      stat = osOK;
 80177d6:	2300      	movs	r3, #0
 80177d8:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 80177da:	6938      	ldr	r0, [r7, #16]
 80177dc:	f000 ff9a 	bl	8018714 <vTaskDelete>
 80177e0:	e002      	b.n	80177e8 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 80177e2:	f06f 0302 	mvn.w	r3, #2
 80177e6:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 80177e8:	697b      	ldr	r3, [r7, #20]
}
 80177ea:	4618      	mov	r0, r3
 80177ec:	3718      	adds	r7, #24
 80177ee:	46bd      	mov	sp, r7
 80177f0:	bd80      	pop	{r7, pc}

080177f2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80177f2:	b580      	push	{r7, lr}
 80177f4:	b084      	sub	sp, #16
 80177f6:	af00      	add	r7, sp, #0
 80177f8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80177fa:	f3ef 8305 	mrs	r3, IPSR
 80177fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8017800:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017802:	2b00      	cmp	r3, #0
 8017804:	d003      	beq.n	801780e <osDelay+0x1c>
    stat = osErrorISR;
 8017806:	f06f 0305 	mvn.w	r3, #5
 801780a:	60fb      	str	r3, [r7, #12]
 801780c:	e007      	b.n	801781e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801780e:	2300      	movs	r3, #0
 8017810:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	2b00      	cmp	r3, #0
 8017816:	d002      	beq.n	801781e <osDelay+0x2c>
      vTaskDelay(ticks);
 8017818:	6878      	ldr	r0, [r7, #4]
 801781a:	f000 ffed 	bl	80187f8 <vTaskDelay>
    }
  }

  return (stat);
 801781e:	68fb      	ldr	r3, [r7, #12]
}
 8017820:	4618      	mov	r0, r3
 8017822:	3710      	adds	r7, #16
 8017824:	46bd      	mov	sp, r7
 8017826:	bd80      	pop	{r7, pc}

08017828 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8017828:	b480      	push	{r7}
 801782a:	b085      	sub	sp, #20
 801782c:	af00      	add	r7, sp, #0
 801782e:	60f8      	str	r0, [r7, #12]
 8017830:	60b9      	str	r1, [r7, #8]
 8017832:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	4a07      	ldr	r2, [pc, #28]	; (8017854 <vApplicationGetIdleTaskMemory+0x2c>)
 8017838:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801783a:	68bb      	ldr	r3, [r7, #8]
 801783c:	4a06      	ldr	r2, [pc, #24]	; (8017858 <vApplicationGetIdleTaskMemory+0x30>)
 801783e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	2280      	movs	r2, #128	; 0x80
 8017844:	601a      	str	r2, [r3, #0]
}
 8017846:	bf00      	nop
 8017848:	3714      	adds	r7, #20
 801784a:	46bd      	mov	sp, r7
 801784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017850:	4770      	bx	lr
 8017852:	bf00      	nop
 8017854:	200015f0 	.word	0x200015f0
 8017858:	2000164c 	.word	0x2000164c

0801785c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801785c:	b480      	push	{r7}
 801785e:	b085      	sub	sp, #20
 8017860:	af00      	add	r7, sp, #0
 8017862:	60f8      	str	r0, [r7, #12]
 8017864:	60b9      	str	r1, [r7, #8]
 8017866:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	4a07      	ldr	r2, [pc, #28]	; (8017888 <vApplicationGetTimerTaskMemory+0x2c>)
 801786c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801786e:	68bb      	ldr	r3, [r7, #8]
 8017870:	4a06      	ldr	r2, [pc, #24]	; (801788c <vApplicationGetTimerTaskMemory+0x30>)
 8017872:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	f44f 7280 	mov.w	r2, #256	; 0x100
 801787a:	601a      	str	r2, [r3, #0]
}
 801787c:	bf00      	nop
 801787e:	3714      	adds	r7, #20
 8017880:	46bd      	mov	sp, r7
 8017882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017886:	4770      	bx	lr
 8017888:	2000184c 	.word	0x2000184c
 801788c:	200018a8 	.word	0x200018a8

08017890 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8017890:	b480      	push	{r7}
 8017892:	b083      	sub	sp, #12
 8017894:	af00      	add	r7, sp, #0
 8017896:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	f103 0208 	add.w	r2, r3, #8
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80178a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	f103 0208 	add.w	r2, r3, #8
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	f103 0208 	add.w	r2, r3, #8
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	2200      	movs	r2, #0
 80178c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80178c4:	bf00      	nop
 80178c6:	370c      	adds	r7, #12
 80178c8:	46bd      	mov	sp, r7
 80178ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ce:	4770      	bx	lr

080178d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80178d0:	b480      	push	{r7}
 80178d2:	b083      	sub	sp, #12
 80178d4:	af00      	add	r7, sp, #0
 80178d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	2200      	movs	r2, #0
 80178dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80178de:	bf00      	nop
 80178e0:	370c      	adds	r7, #12
 80178e2:	46bd      	mov	sp, r7
 80178e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178e8:	4770      	bx	lr

080178ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80178ea:	b480      	push	{r7}
 80178ec:	b085      	sub	sp, #20
 80178ee:	af00      	add	r7, sp, #0
 80178f0:	6078      	str	r0, [r7, #4]
 80178f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	685b      	ldr	r3, [r3, #4]
 80178f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80178fa:	683b      	ldr	r3, [r7, #0]
 80178fc:	68fa      	ldr	r2, [r7, #12]
 80178fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	689a      	ldr	r2, [r3, #8]
 8017904:	683b      	ldr	r3, [r7, #0]
 8017906:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	689b      	ldr	r3, [r3, #8]
 801790c:	683a      	ldr	r2, [r7, #0]
 801790e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	683a      	ldr	r2, [r7, #0]
 8017914:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8017916:	683b      	ldr	r3, [r7, #0]
 8017918:	687a      	ldr	r2, [r7, #4]
 801791a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	1c5a      	adds	r2, r3, #1
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	601a      	str	r2, [r3, #0]
}
 8017926:	bf00      	nop
 8017928:	3714      	adds	r7, #20
 801792a:	46bd      	mov	sp, r7
 801792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017930:	4770      	bx	lr

08017932 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017932:	b480      	push	{r7}
 8017934:	b085      	sub	sp, #20
 8017936:	af00      	add	r7, sp, #0
 8017938:	6078      	str	r0, [r7, #4]
 801793a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801793c:	683b      	ldr	r3, [r7, #0]
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8017942:	68bb      	ldr	r3, [r7, #8]
 8017944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017948:	d103      	bne.n	8017952 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	691b      	ldr	r3, [r3, #16]
 801794e:	60fb      	str	r3, [r7, #12]
 8017950:	e00c      	b.n	801796c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	3308      	adds	r3, #8
 8017956:	60fb      	str	r3, [r7, #12]
 8017958:	e002      	b.n	8017960 <vListInsert+0x2e>
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	685b      	ldr	r3, [r3, #4]
 801795e:	60fb      	str	r3, [r7, #12]
 8017960:	68fb      	ldr	r3, [r7, #12]
 8017962:	685b      	ldr	r3, [r3, #4]
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	68ba      	ldr	r2, [r7, #8]
 8017968:	429a      	cmp	r2, r3
 801796a:	d2f6      	bcs.n	801795a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	685a      	ldr	r2, [r3, #4]
 8017970:	683b      	ldr	r3, [r7, #0]
 8017972:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017974:	683b      	ldr	r3, [r7, #0]
 8017976:	685b      	ldr	r3, [r3, #4]
 8017978:	683a      	ldr	r2, [r7, #0]
 801797a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801797c:	683b      	ldr	r3, [r7, #0]
 801797e:	68fa      	ldr	r2, [r7, #12]
 8017980:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	683a      	ldr	r2, [r7, #0]
 8017986:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8017988:	683b      	ldr	r3, [r7, #0]
 801798a:	687a      	ldr	r2, [r7, #4]
 801798c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	1c5a      	adds	r2, r3, #1
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	601a      	str	r2, [r3, #0]
}
 8017998:	bf00      	nop
 801799a:	3714      	adds	r7, #20
 801799c:	46bd      	mov	sp, r7
 801799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179a2:	4770      	bx	lr

080179a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80179a4:	b480      	push	{r7}
 80179a6:	b085      	sub	sp, #20
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	691b      	ldr	r3, [r3, #16]
 80179b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	685b      	ldr	r3, [r3, #4]
 80179b6:	687a      	ldr	r2, [r7, #4]
 80179b8:	6892      	ldr	r2, [r2, #8]
 80179ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	689b      	ldr	r3, [r3, #8]
 80179c0:	687a      	ldr	r2, [r7, #4]
 80179c2:	6852      	ldr	r2, [r2, #4]
 80179c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80179c6:	68fb      	ldr	r3, [r7, #12]
 80179c8:	685b      	ldr	r3, [r3, #4]
 80179ca:	687a      	ldr	r2, [r7, #4]
 80179cc:	429a      	cmp	r2, r3
 80179ce:	d103      	bne.n	80179d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	689a      	ldr	r2, [r3, #8]
 80179d4:	68fb      	ldr	r3, [r7, #12]
 80179d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	2200      	movs	r2, #0
 80179dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80179de:	68fb      	ldr	r3, [r7, #12]
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	1e5a      	subs	r2, r3, #1
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80179e8:	68fb      	ldr	r3, [r7, #12]
 80179ea:	681b      	ldr	r3, [r3, #0]
}
 80179ec:	4618      	mov	r0, r3
 80179ee:	3714      	adds	r7, #20
 80179f0:	46bd      	mov	sp, r7
 80179f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179f6:	4770      	bx	lr

080179f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80179f8:	b580      	push	{r7, lr}
 80179fa:	b084      	sub	sp, #16
 80179fc:	af00      	add	r7, sp, #0
 80179fe:	6078      	str	r0, [r7, #4]
 8017a00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	d10a      	bne.n	8017a22 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8017a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a10:	f383 8811 	msr	BASEPRI, r3
 8017a14:	f3bf 8f6f 	isb	sy
 8017a18:	f3bf 8f4f 	dsb	sy
 8017a1c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8017a1e:	bf00      	nop
 8017a20:	e7fe      	b.n	8017a20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8017a22:	f002 f927 	bl	8019c74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	681a      	ldr	r2, [r3, #0]
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a2e:	68f9      	ldr	r1, [r7, #12]
 8017a30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017a32:	fb01 f303 	mul.w	r3, r1, r3
 8017a36:	441a      	add	r2, r3
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	2200      	movs	r2, #0
 8017a40:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017a42:	68fb      	ldr	r3, [r7, #12]
 8017a44:	681a      	ldr	r2, [r3, #0]
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017a4a:	68fb      	ldr	r3, [r7, #12]
 8017a4c:	681a      	ldr	r2, [r3, #0]
 8017a4e:	68fb      	ldr	r3, [r7, #12]
 8017a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a52:	3b01      	subs	r3, #1
 8017a54:	68f9      	ldr	r1, [r7, #12]
 8017a56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017a58:	fb01 f303 	mul.w	r3, r1, r3
 8017a5c:	441a      	add	r2, r3
 8017a5e:	68fb      	ldr	r3, [r7, #12]
 8017a60:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	22ff      	movs	r2, #255	; 0xff
 8017a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	22ff      	movs	r2, #255	; 0xff
 8017a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8017a72:	683b      	ldr	r3, [r7, #0]
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d114      	bne.n	8017aa2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	691b      	ldr	r3, [r3, #16]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d01a      	beq.n	8017ab6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	3310      	adds	r3, #16
 8017a84:	4618      	mov	r0, r3
 8017a86:	f001 f9db 	bl	8018e40 <xTaskRemoveFromEventList>
 8017a8a:	4603      	mov	r3, r0
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d012      	beq.n	8017ab6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8017a90:	4b0c      	ldr	r3, [pc, #48]	; (8017ac4 <xQueueGenericReset+0xcc>)
 8017a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a96:	601a      	str	r2, [r3, #0]
 8017a98:	f3bf 8f4f 	dsb	sy
 8017a9c:	f3bf 8f6f 	isb	sy
 8017aa0:	e009      	b.n	8017ab6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	3310      	adds	r3, #16
 8017aa6:	4618      	mov	r0, r3
 8017aa8:	f7ff fef2 	bl	8017890 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017aac:	68fb      	ldr	r3, [r7, #12]
 8017aae:	3324      	adds	r3, #36	; 0x24
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	f7ff feed 	bl	8017890 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8017ab6:	f002 f90d 	bl	8019cd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8017aba:	2301      	movs	r3, #1
}
 8017abc:	4618      	mov	r0, r3
 8017abe:	3710      	adds	r7, #16
 8017ac0:	46bd      	mov	sp, r7
 8017ac2:	bd80      	pop	{r7, pc}
 8017ac4:	e000ed04 	.word	0xe000ed04

08017ac8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8017ac8:	b580      	push	{r7, lr}
 8017aca:	b08e      	sub	sp, #56	; 0x38
 8017acc:	af02      	add	r7, sp, #8
 8017ace:	60f8      	str	r0, [r7, #12]
 8017ad0:	60b9      	str	r1, [r7, #8]
 8017ad2:	607a      	str	r2, [r7, #4]
 8017ad4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017ad6:	68fb      	ldr	r3, [r7, #12]
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d10a      	bne.n	8017af2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8017adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ae0:	f383 8811 	msr	BASEPRI, r3
 8017ae4:	f3bf 8f6f 	isb	sy
 8017ae8:	f3bf 8f4f 	dsb	sy
 8017aec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017aee:	bf00      	nop
 8017af0:	e7fe      	b.n	8017af0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8017af2:	683b      	ldr	r3, [r7, #0]
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d10a      	bne.n	8017b0e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8017af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017afc:	f383 8811 	msr	BASEPRI, r3
 8017b00:	f3bf 8f6f 	isb	sy
 8017b04:	f3bf 8f4f 	dsb	sy
 8017b08:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017b0a:	bf00      	nop
 8017b0c:	e7fe      	b.n	8017b0c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d002      	beq.n	8017b1a <xQueueGenericCreateStatic+0x52>
 8017b14:	68bb      	ldr	r3, [r7, #8]
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d001      	beq.n	8017b1e <xQueueGenericCreateStatic+0x56>
 8017b1a:	2301      	movs	r3, #1
 8017b1c:	e000      	b.n	8017b20 <xQueueGenericCreateStatic+0x58>
 8017b1e:	2300      	movs	r3, #0
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d10a      	bne.n	8017b3a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8017b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b28:	f383 8811 	msr	BASEPRI, r3
 8017b2c:	f3bf 8f6f 	isb	sy
 8017b30:	f3bf 8f4f 	dsb	sy
 8017b34:	623b      	str	r3, [r7, #32]
}
 8017b36:	bf00      	nop
 8017b38:	e7fe      	b.n	8017b38 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d102      	bne.n	8017b46 <xQueueGenericCreateStatic+0x7e>
 8017b40:	68bb      	ldr	r3, [r7, #8]
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d101      	bne.n	8017b4a <xQueueGenericCreateStatic+0x82>
 8017b46:	2301      	movs	r3, #1
 8017b48:	e000      	b.n	8017b4c <xQueueGenericCreateStatic+0x84>
 8017b4a:	2300      	movs	r3, #0
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d10a      	bne.n	8017b66 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8017b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b54:	f383 8811 	msr	BASEPRI, r3
 8017b58:	f3bf 8f6f 	isb	sy
 8017b5c:	f3bf 8f4f 	dsb	sy
 8017b60:	61fb      	str	r3, [r7, #28]
}
 8017b62:	bf00      	nop
 8017b64:	e7fe      	b.n	8017b64 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8017b66:	2350      	movs	r3, #80	; 0x50
 8017b68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8017b6a:	697b      	ldr	r3, [r7, #20]
 8017b6c:	2b50      	cmp	r3, #80	; 0x50
 8017b6e:	d00a      	beq.n	8017b86 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8017b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b74:	f383 8811 	msr	BASEPRI, r3
 8017b78:	f3bf 8f6f 	isb	sy
 8017b7c:	f3bf 8f4f 	dsb	sy
 8017b80:	61bb      	str	r3, [r7, #24]
}
 8017b82:	bf00      	nop
 8017b84:	e7fe      	b.n	8017b84 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8017b86:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017b88:	683b      	ldr	r3, [r7, #0]
 8017b8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8017b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d00d      	beq.n	8017bae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8017b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b94:	2201      	movs	r2, #1
 8017b96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017b9a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ba0:	9300      	str	r3, [sp, #0]
 8017ba2:	4613      	mov	r3, r2
 8017ba4:	687a      	ldr	r2, [r7, #4]
 8017ba6:	68b9      	ldr	r1, [r7, #8]
 8017ba8:	68f8      	ldr	r0, [r7, #12]
 8017baa:	f000 f805 	bl	8017bb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	3730      	adds	r7, #48	; 0x30
 8017bb4:	46bd      	mov	sp, r7
 8017bb6:	bd80      	pop	{r7, pc}

08017bb8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b084      	sub	sp, #16
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	60f8      	str	r0, [r7, #12]
 8017bc0:	60b9      	str	r1, [r7, #8]
 8017bc2:	607a      	str	r2, [r7, #4]
 8017bc4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8017bc6:	68bb      	ldr	r3, [r7, #8]
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d103      	bne.n	8017bd4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017bcc:	69bb      	ldr	r3, [r7, #24]
 8017bce:	69ba      	ldr	r2, [r7, #24]
 8017bd0:	601a      	str	r2, [r3, #0]
 8017bd2:	e002      	b.n	8017bda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8017bd4:	69bb      	ldr	r3, [r7, #24]
 8017bd6:	687a      	ldr	r2, [r7, #4]
 8017bd8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8017bda:	69bb      	ldr	r3, [r7, #24]
 8017bdc:	68fa      	ldr	r2, [r7, #12]
 8017bde:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017be0:	69bb      	ldr	r3, [r7, #24]
 8017be2:	68ba      	ldr	r2, [r7, #8]
 8017be4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8017be6:	2101      	movs	r1, #1
 8017be8:	69b8      	ldr	r0, [r7, #24]
 8017bea:	f7ff ff05 	bl	80179f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8017bee:	69bb      	ldr	r3, [r7, #24]
 8017bf0:	78fa      	ldrb	r2, [r7, #3]
 8017bf2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8017bf6:	bf00      	nop
 8017bf8:	3710      	adds	r7, #16
 8017bfa:	46bd      	mov	sp, r7
 8017bfc:	bd80      	pop	{r7, pc}
	...

08017c00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017c00:	b580      	push	{r7, lr}
 8017c02:	b08e      	sub	sp, #56	; 0x38
 8017c04:	af00      	add	r7, sp, #0
 8017c06:	60f8      	str	r0, [r7, #12]
 8017c08:	60b9      	str	r1, [r7, #8]
 8017c0a:	607a      	str	r2, [r7, #4]
 8017c0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017c0e:	2300      	movs	r3, #0
 8017c10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017c12:	68fb      	ldr	r3, [r7, #12]
 8017c14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d10a      	bne.n	8017c32 <xQueueGenericSend+0x32>
	__asm volatile
 8017c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c20:	f383 8811 	msr	BASEPRI, r3
 8017c24:	f3bf 8f6f 	isb	sy
 8017c28:	f3bf 8f4f 	dsb	sy
 8017c2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017c2e:	bf00      	nop
 8017c30:	e7fe      	b.n	8017c30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017c32:	68bb      	ldr	r3, [r7, #8]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d103      	bne.n	8017c40 <xQueueGenericSend+0x40>
 8017c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d101      	bne.n	8017c44 <xQueueGenericSend+0x44>
 8017c40:	2301      	movs	r3, #1
 8017c42:	e000      	b.n	8017c46 <xQueueGenericSend+0x46>
 8017c44:	2300      	movs	r3, #0
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d10a      	bne.n	8017c60 <xQueueGenericSend+0x60>
	__asm volatile
 8017c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c4e:	f383 8811 	msr	BASEPRI, r3
 8017c52:	f3bf 8f6f 	isb	sy
 8017c56:	f3bf 8f4f 	dsb	sy
 8017c5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017c5c:	bf00      	nop
 8017c5e:	e7fe      	b.n	8017c5e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017c60:	683b      	ldr	r3, [r7, #0]
 8017c62:	2b02      	cmp	r3, #2
 8017c64:	d103      	bne.n	8017c6e <xQueueGenericSend+0x6e>
 8017c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c6a:	2b01      	cmp	r3, #1
 8017c6c:	d101      	bne.n	8017c72 <xQueueGenericSend+0x72>
 8017c6e:	2301      	movs	r3, #1
 8017c70:	e000      	b.n	8017c74 <xQueueGenericSend+0x74>
 8017c72:	2300      	movs	r3, #0
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d10a      	bne.n	8017c8e <xQueueGenericSend+0x8e>
	__asm volatile
 8017c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c7c:	f383 8811 	msr	BASEPRI, r3
 8017c80:	f3bf 8f6f 	isb	sy
 8017c84:	f3bf 8f4f 	dsb	sy
 8017c88:	623b      	str	r3, [r7, #32]
}
 8017c8a:	bf00      	nop
 8017c8c:	e7fe      	b.n	8017c8c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017c8e:	f001 fa95 	bl	80191bc <xTaskGetSchedulerState>
 8017c92:	4603      	mov	r3, r0
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d102      	bne.n	8017c9e <xQueueGenericSend+0x9e>
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d101      	bne.n	8017ca2 <xQueueGenericSend+0xa2>
 8017c9e:	2301      	movs	r3, #1
 8017ca0:	e000      	b.n	8017ca4 <xQueueGenericSend+0xa4>
 8017ca2:	2300      	movs	r3, #0
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d10a      	bne.n	8017cbe <xQueueGenericSend+0xbe>
	__asm volatile
 8017ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cac:	f383 8811 	msr	BASEPRI, r3
 8017cb0:	f3bf 8f6f 	isb	sy
 8017cb4:	f3bf 8f4f 	dsb	sy
 8017cb8:	61fb      	str	r3, [r7, #28]
}
 8017cba:	bf00      	nop
 8017cbc:	e7fe      	b.n	8017cbc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017cbe:	f001 ffd9 	bl	8019c74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017cca:	429a      	cmp	r2, r3
 8017ccc:	d302      	bcc.n	8017cd4 <xQueueGenericSend+0xd4>
 8017cce:	683b      	ldr	r3, [r7, #0]
 8017cd0:	2b02      	cmp	r3, #2
 8017cd2:	d129      	bne.n	8017d28 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017cd4:	683a      	ldr	r2, [r7, #0]
 8017cd6:	68b9      	ldr	r1, [r7, #8]
 8017cd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017cda:	f000 fa0b 	bl	80180f4 <prvCopyDataToQueue>
 8017cde:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d010      	beq.n	8017d0a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cea:	3324      	adds	r3, #36	; 0x24
 8017cec:	4618      	mov	r0, r3
 8017cee:	f001 f8a7 	bl	8018e40 <xTaskRemoveFromEventList>
 8017cf2:	4603      	mov	r3, r0
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d013      	beq.n	8017d20 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017cf8:	4b3f      	ldr	r3, [pc, #252]	; (8017df8 <xQueueGenericSend+0x1f8>)
 8017cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017cfe:	601a      	str	r2, [r3, #0]
 8017d00:	f3bf 8f4f 	dsb	sy
 8017d04:	f3bf 8f6f 	isb	sy
 8017d08:	e00a      	b.n	8017d20 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8017d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d007      	beq.n	8017d20 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017d10:	4b39      	ldr	r3, [pc, #228]	; (8017df8 <xQueueGenericSend+0x1f8>)
 8017d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017d16:	601a      	str	r2, [r3, #0]
 8017d18:	f3bf 8f4f 	dsb	sy
 8017d1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017d20:	f001 ffd8 	bl	8019cd4 <vPortExitCritical>
				return pdPASS;
 8017d24:	2301      	movs	r3, #1
 8017d26:	e063      	b.n	8017df0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	d103      	bne.n	8017d36 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017d2e:	f001 ffd1 	bl	8019cd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017d32:	2300      	movs	r3, #0
 8017d34:	e05c      	b.n	8017df0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d106      	bne.n	8017d4a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017d3c:	f107 0314 	add.w	r3, r7, #20
 8017d40:	4618      	mov	r0, r3
 8017d42:	f001 f8e1 	bl	8018f08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017d46:	2301      	movs	r3, #1
 8017d48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017d4a:	f001 ffc3 	bl	8019cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017d4e:	f000 fe53 	bl	80189f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017d52:	f001 ff8f 	bl	8019c74 <vPortEnterCritical>
 8017d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017d5c:	b25b      	sxtb	r3, r3
 8017d5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017d62:	d103      	bne.n	8017d6c <xQueueGenericSend+0x16c>
 8017d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d66:	2200      	movs	r2, #0
 8017d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017d72:	b25b      	sxtb	r3, r3
 8017d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017d78:	d103      	bne.n	8017d82 <xQueueGenericSend+0x182>
 8017d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d7c:	2200      	movs	r2, #0
 8017d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017d82:	f001 ffa7 	bl	8019cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017d86:	1d3a      	adds	r2, r7, #4
 8017d88:	f107 0314 	add.w	r3, r7, #20
 8017d8c:	4611      	mov	r1, r2
 8017d8e:	4618      	mov	r0, r3
 8017d90:	f001 f8d0 	bl	8018f34 <xTaskCheckForTimeOut>
 8017d94:	4603      	mov	r3, r0
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d124      	bne.n	8017de4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017d9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017d9c:	f000 faa2 	bl	80182e4 <prvIsQueueFull>
 8017da0:	4603      	mov	r3, r0
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d018      	beq.n	8017dd8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017da8:	3310      	adds	r3, #16
 8017daa:	687a      	ldr	r2, [r7, #4]
 8017dac:	4611      	mov	r1, r2
 8017dae:	4618      	mov	r0, r3
 8017db0:	f000 fff6 	bl	8018da0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017db4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017db6:	f000 fa2d 	bl	8018214 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017dba:	f000 fe2b 	bl	8018a14 <xTaskResumeAll>
 8017dbe:	4603      	mov	r3, r0
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	f47f af7c 	bne.w	8017cbe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8017dc6:	4b0c      	ldr	r3, [pc, #48]	; (8017df8 <xQueueGenericSend+0x1f8>)
 8017dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017dcc:	601a      	str	r2, [r3, #0]
 8017dce:	f3bf 8f4f 	dsb	sy
 8017dd2:	f3bf 8f6f 	isb	sy
 8017dd6:	e772      	b.n	8017cbe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017dda:	f000 fa1b 	bl	8018214 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017dde:	f000 fe19 	bl	8018a14 <xTaskResumeAll>
 8017de2:	e76c      	b.n	8017cbe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017de6:	f000 fa15 	bl	8018214 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017dea:	f000 fe13 	bl	8018a14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8017dee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017df0:	4618      	mov	r0, r3
 8017df2:	3738      	adds	r7, #56	; 0x38
 8017df4:	46bd      	mov	sp, r7
 8017df6:	bd80      	pop	{r7, pc}
 8017df8:	e000ed04 	.word	0xe000ed04

08017dfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017dfc:	b580      	push	{r7, lr}
 8017dfe:	b090      	sub	sp, #64	; 0x40
 8017e00:	af00      	add	r7, sp, #0
 8017e02:	60f8      	str	r0, [r7, #12]
 8017e04:	60b9      	str	r1, [r7, #8]
 8017e06:	607a      	str	r2, [r7, #4]
 8017e08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017e0a:	68fb      	ldr	r3, [r7, #12]
 8017e0c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8017e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d10a      	bne.n	8017e2a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8017e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e18:	f383 8811 	msr	BASEPRI, r3
 8017e1c:	f3bf 8f6f 	isb	sy
 8017e20:	f3bf 8f4f 	dsb	sy
 8017e24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017e26:	bf00      	nop
 8017e28:	e7fe      	b.n	8017e28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017e2a:	68bb      	ldr	r3, [r7, #8]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d103      	bne.n	8017e38 <xQueueGenericSendFromISR+0x3c>
 8017e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d101      	bne.n	8017e3c <xQueueGenericSendFromISR+0x40>
 8017e38:	2301      	movs	r3, #1
 8017e3a:	e000      	b.n	8017e3e <xQueueGenericSendFromISR+0x42>
 8017e3c:	2300      	movs	r3, #0
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d10a      	bne.n	8017e58 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8017e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e46:	f383 8811 	msr	BASEPRI, r3
 8017e4a:	f3bf 8f6f 	isb	sy
 8017e4e:	f3bf 8f4f 	dsb	sy
 8017e52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017e54:	bf00      	nop
 8017e56:	e7fe      	b.n	8017e56 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017e58:	683b      	ldr	r3, [r7, #0]
 8017e5a:	2b02      	cmp	r3, #2
 8017e5c:	d103      	bne.n	8017e66 <xQueueGenericSendFromISR+0x6a>
 8017e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e62:	2b01      	cmp	r3, #1
 8017e64:	d101      	bne.n	8017e6a <xQueueGenericSendFromISR+0x6e>
 8017e66:	2301      	movs	r3, #1
 8017e68:	e000      	b.n	8017e6c <xQueueGenericSendFromISR+0x70>
 8017e6a:	2300      	movs	r3, #0
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d10a      	bne.n	8017e86 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8017e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e74:	f383 8811 	msr	BASEPRI, r3
 8017e78:	f3bf 8f6f 	isb	sy
 8017e7c:	f3bf 8f4f 	dsb	sy
 8017e80:	623b      	str	r3, [r7, #32]
}
 8017e82:	bf00      	nop
 8017e84:	e7fe      	b.n	8017e84 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017e86:	f001 ffd7 	bl	8019e38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017e8a:	f3ef 8211 	mrs	r2, BASEPRI
 8017e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e92:	f383 8811 	msr	BASEPRI, r3
 8017e96:	f3bf 8f6f 	isb	sy
 8017e9a:	f3bf 8f4f 	dsb	sy
 8017e9e:	61fa      	str	r2, [r7, #28]
 8017ea0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017ea2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017ea4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017eae:	429a      	cmp	r2, r3
 8017eb0:	d302      	bcc.n	8017eb8 <xQueueGenericSendFromISR+0xbc>
 8017eb2:	683b      	ldr	r3, [r7, #0]
 8017eb4:	2b02      	cmp	r3, #2
 8017eb6:	d12f      	bne.n	8017f18 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017eba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017ec8:	683a      	ldr	r2, [r7, #0]
 8017eca:	68b9      	ldr	r1, [r7, #8]
 8017ecc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017ece:	f000 f911 	bl	80180f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017ed2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8017ed6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017eda:	d112      	bne.n	8017f02 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d016      	beq.n	8017f12 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ee6:	3324      	adds	r3, #36	; 0x24
 8017ee8:	4618      	mov	r0, r3
 8017eea:	f000 ffa9 	bl	8018e40 <xTaskRemoveFromEventList>
 8017eee:	4603      	mov	r3, r0
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	d00e      	beq.n	8017f12 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d00b      	beq.n	8017f12 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	2201      	movs	r2, #1
 8017efe:	601a      	str	r2, [r3, #0]
 8017f00:	e007      	b.n	8017f12 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017f02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017f06:	3301      	adds	r3, #1
 8017f08:	b2db      	uxtb	r3, r3
 8017f0a:	b25a      	sxtb	r2, r3
 8017f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017f12:	2301      	movs	r3, #1
 8017f14:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8017f16:	e001      	b.n	8017f1c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017f18:	2300      	movs	r3, #0
 8017f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f1e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017f20:	697b      	ldr	r3, [r7, #20]
 8017f22:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8017f26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017f2a:	4618      	mov	r0, r3
 8017f2c:	3740      	adds	r7, #64	; 0x40
 8017f2e:	46bd      	mov	sp, r7
 8017f30:	bd80      	pop	{r7, pc}
	...

08017f34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017f34:	b580      	push	{r7, lr}
 8017f36:	b08c      	sub	sp, #48	; 0x30
 8017f38:	af00      	add	r7, sp, #0
 8017f3a:	60f8      	str	r0, [r7, #12]
 8017f3c:	60b9      	str	r1, [r7, #8]
 8017f3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017f40:	2300      	movs	r3, #0
 8017f42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017f44:	68fb      	ldr	r3, [r7, #12]
 8017f46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d10a      	bne.n	8017f64 <xQueueReceive+0x30>
	__asm volatile
 8017f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f52:	f383 8811 	msr	BASEPRI, r3
 8017f56:	f3bf 8f6f 	isb	sy
 8017f5a:	f3bf 8f4f 	dsb	sy
 8017f5e:	623b      	str	r3, [r7, #32]
}
 8017f60:	bf00      	nop
 8017f62:	e7fe      	b.n	8017f62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017f64:	68bb      	ldr	r3, [r7, #8]
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d103      	bne.n	8017f72 <xQueueReceive+0x3e>
 8017f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d101      	bne.n	8017f76 <xQueueReceive+0x42>
 8017f72:	2301      	movs	r3, #1
 8017f74:	e000      	b.n	8017f78 <xQueueReceive+0x44>
 8017f76:	2300      	movs	r3, #0
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d10a      	bne.n	8017f92 <xQueueReceive+0x5e>
	__asm volatile
 8017f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f80:	f383 8811 	msr	BASEPRI, r3
 8017f84:	f3bf 8f6f 	isb	sy
 8017f88:	f3bf 8f4f 	dsb	sy
 8017f8c:	61fb      	str	r3, [r7, #28]
}
 8017f8e:	bf00      	nop
 8017f90:	e7fe      	b.n	8017f90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017f92:	f001 f913 	bl	80191bc <xTaskGetSchedulerState>
 8017f96:	4603      	mov	r3, r0
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d102      	bne.n	8017fa2 <xQueueReceive+0x6e>
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d101      	bne.n	8017fa6 <xQueueReceive+0x72>
 8017fa2:	2301      	movs	r3, #1
 8017fa4:	e000      	b.n	8017fa8 <xQueueReceive+0x74>
 8017fa6:	2300      	movs	r3, #0
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d10a      	bne.n	8017fc2 <xQueueReceive+0x8e>
	__asm volatile
 8017fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fb0:	f383 8811 	msr	BASEPRI, r3
 8017fb4:	f3bf 8f6f 	isb	sy
 8017fb8:	f3bf 8f4f 	dsb	sy
 8017fbc:	61bb      	str	r3, [r7, #24]
}
 8017fbe:	bf00      	nop
 8017fc0:	e7fe      	b.n	8017fc0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017fc2:	f001 fe57 	bl	8019c74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d01f      	beq.n	8018012 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017fd2:	68b9      	ldr	r1, [r7, #8]
 8017fd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017fd6:	f000 f8f7 	bl	80181c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fdc:	1e5a      	subs	r2, r3, #1
 8017fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fe0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fe4:	691b      	ldr	r3, [r3, #16]
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d00f      	beq.n	801800a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fec:	3310      	adds	r3, #16
 8017fee:	4618      	mov	r0, r3
 8017ff0:	f000 ff26 	bl	8018e40 <xTaskRemoveFromEventList>
 8017ff4:	4603      	mov	r3, r0
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d007      	beq.n	801800a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017ffa:	4b3d      	ldr	r3, [pc, #244]	; (80180f0 <xQueueReceive+0x1bc>)
 8017ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018000:	601a      	str	r2, [r3, #0]
 8018002:	f3bf 8f4f 	dsb	sy
 8018006:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801800a:	f001 fe63 	bl	8019cd4 <vPortExitCritical>
				return pdPASS;
 801800e:	2301      	movs	r3, #1
 8018010:	e069      	b.n	80180e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	2b00      	cmp	r3, #0
 8018016:	d103      	bne.n	8018020 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018018:	f001 fe5c 	bl	8019cd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801801c:	2300      	movs	r3, #0
 801801e:	e062      	b.n	80180e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018022:	2b00      	cmp	r3, #0
 8018024:	d106      	bne.n	8018034 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018026:	f107 0310 	add.w	r3, r7, #16
 801802a:	4618      	mov	r0, r3
 801802c:	f000 ff6c 	bl	8018f08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018030:	2301      	movs	r3, #1
 8018032:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018034:	f001 fe4e 	bl	8019cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018038:	f000 fcde 	bl	80189f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801803c:	f001 fe1a 	bl	8019c74 <vPortEnterCritical>
 8018040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018042:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018046:	b25b      	sxtb	r3, r3
 8018048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801804c:	d103      	bne.n	8018056 <xQueueReceive+0x122>
 801804e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018050:	2200      	movs	r2, #0
 8018052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018058:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801805c:	b25b      	sxtb	r3, r3
 801805e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018062:	d103      	bne.n	801806c <xQueueReceive+0x138>
 8018064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018066:	2200      	movs	r2, #0
 8018068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801806c:	f001 fe32 	bl	8019cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018070:	1d3a      	adds	r2, r7, #4
 8018072:	f107 0310 	add.w	r3, r7, #16
 8018076:	4611      	mov	r1, r2
 8018078:	4618      	mov	r0, r3
 801807a:	f000 ff5b 	bl	8018f34 <xTaskCheckForTimeOut>
 801807e:	4603      	mov	r3, r0
 8018080:	2b00      	cmp	r3, #0
 8018082:	d123      	bne.n	80180cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018086:	f000 f917 	bl	80182b8 <prvIsQueueEmpty>
 801808a:	4603      	mov	r3, r0
 801808c:	2b00      	cmp	r3, #0
 801808e:	d017      	beq.n	80180c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018092:	3324      	adds	r3, #36	; 0x24
 8018094:	687a      	ldr	r2, [r7, #4]
 8018096:	4611      	mov	r1, r2
 8018098:	4618      	mov	r0, r3
 801809a:	f000 fe81 	bl	8018da0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801809e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180a0:	f000 f8b8 	bl	8018214 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80180a4:	f000 fcb6 	bl	8018a14 <xTaskResumeAll>
 80180a8:	4603      	mov	r3, r0
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d189      	bne.n	8017fc2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80180ae:	4b10      	ldr	r3, [pc, #64]	; (80180f0 <xQueueReceive+0x1bc>)
 80180b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80180b4:	601a      	str	r2, [r3, #0]
 80180b6:	f3bf 8f4f 	dsb	sy
 80180ba:	f3bf 8f6f 	isb	sy
 80180be:	e780      	b.n	8017fc2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80180c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180c2:	f000 f8a7 	bl	8018214 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80180c6:	f000 fca5 	bl	8018a14 <xTaskResumeAll>
 80180ca:	e77a      	b.n	8017fc2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80180cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180ce:	f000 f8a1 	bl	8018214 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80180d2:	f000 fc9f 	bl	8018a14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80180d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180d8:	f000 f8ee 	bl	80182b8 <prvIsQueueEmpty>
 80180dc:	4603      	mov	r3, r0
 80180de:	2b00      	cmp	r3, #0
 80180e0:	f43f af6f 	beq.w	8017fc2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80180e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80180e6:	4618      	mov	r0, r3
 80180e8:	3730      	adds	r7, #48	; 0x30
 80180ea:	46bd      	mov	sp, r7
 80180ec:	bd80      	pop	{r7, pc}
 80180ee:	bf00      	nop
 80180f0:	e000ed04 	.word	0xe000ed04

080180f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80180f4:	b580      	push	{r7, lr}
 80180f6:	b086      	sub	sp, #24
 80180f8:	af00      	add	r7, sp, #0
 80180fa:	60f8      	str	r0, [r7, #12]
 80180fc:	60b9      	str	r1, [r7, #8]
 80180fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8018100:	2300      	movs	r3, #0
 8018102:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018104:	68fb      	ldr	r3, [r7, #12]
 8018106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018108:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801810a:	68fb      	ldr	r3, [r7, #12]
 801810c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801810e:	2b00      	cmp	r3, #0
 8018110:	d10d      	bne.n	801812e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018112:	68fb      	ldr	r3, [r7, #12]
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	2b00      	cmp	r3, #0
 8018118:	d14d      	bne.n	80181b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801811a:	68fb      	ldr	r3, [r7, #12]
 801811c:	689b      	ldr	r3, [r3, #8]
 801811e:	4618      	mov	r0, r3
 8018120:	f001 f86a 	bl	80191f8 <xTaskPriorityDisinherit>
 8018124:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	2200      	movs	r2, #0
 801812a:	609a      	str	r2, [r3, #8]
 801812c:	e043      	b.n	80181b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	2b00      	cmp	r3, #0
 8018132:	d119      	bne.n	8018168 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	6858      	ldr	r0, [r3, #4]
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801813c:	461a      	mov	r2, r3
 801813e:	68b9      	ldr	r1, [r7, #8]
 8018140:	f002 f8d6 	bl	801a2f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018144:	68fb      	ldr	r3, [r7, #12]
 8018146:	685a      	ldr	r2, [r3, #4]
 8018148:	68fb      	ldr	r3, [r7, #12]
 801814a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801814c:	441a      	add	r2, r3
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018152:	68fb      	ldr	r3, [r7, #12]
 8018154:	685a      	ldr	r2, [r3, #4]
 8018156:	68fb      	ldr	r3, [r7, #12]
 8018158:	689b      	ldr	r3, [r3, #8]
 801815a:	429a      	cmp	r2, r3
 801815c:	d32b      	bcc.n	80181b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801815e:	68fb      	ldr	r3, [r7, #12]
 8018160:	681a      	ldr	r2, [r3, #0]
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	605a      	str	r2, [r3, #4]
 8018166:	e026      	b.n	80181b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8018168:	68fb      	ldr	r3, [r7, #12]
 801816a:	68d8      	ldr	r0, [r3, #12]
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018170:	461a      	mov	r2, r3
 8018172:	68b9      	ldr	r1, [r7, #8]
 8018174:	f002 f8bc 	bl	801a2f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8018178:	68fb      	ldr	r3, [r7, #12]
 801817a:	68da      	ldr	r2, [r3, #12]
 801817c:	68fb      	ldr	r3, [r7, #12]
 801817e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018180:	425b      	negs	r3, r3
 8018182:	441a      	add	r2, r3
 8018184:	68fb      	ldr	r3, [r7, #12]
 8018186:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018188:	68fb      	ldr	r3, [r7, #12]
 801818a:	68da      	ldr	r2, [r3, #12]
 801818c:	68fb      	ldr	r3, [r7, #12]
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	429a      	cmp	r2, r3
 8018192:	d207      	bcs.n	80181a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	689a      	ldr	r2, [r3, #8]
 8018198:	68fb      	ldr	r3, [r7, #12]
 801819a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801819c:	425b      	negs	r3, r3
 801819e:	441a      	add	r2, r3
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	2b02      	cmp	r3, #2
 80181a8:	d105      	bne.n	80181b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80181aa:	693b      	ldr	r3, [r7, #16]
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d002      	beq.n	80181b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80181b0:	693b      	ldr	r3, [r7, #16]
 80181b2:	3b01      	subs	r3, #1
 80181b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80181b6:	693b      	ldr	r3, [r7, #16]
 80181b8:	1c5a      	adds	r2, r3, #1
 80181ba:	68fb      	ldr	r3, [r7, #12]
 80181bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80181be:	697b      	ldr	r3, [r7, #20]
}
 80181c0:	4618      	mov	r0, r3
 80181c2:	3718      	adds	r7, #24
 80181c4:	46bd      	mov	sp, r7
 80181c6:	bd80      	pop	{r7, pc}

080181c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80181c8:	b580      	push	{r7, lr}
 80181ca:	b082      	sub	sp, #8
 80181cc:	af00      	add	r7, sp, #0
 80181ce:	6078      	str	r0, [r7, #4]
 80181d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d018      	beq.n	801820c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	68da      	ldr	r2, [r3, #12]
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181e2:	441a      	add	r2, r3
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	68da      	ldr	r2, [r3, #12]
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	689b      	ldr	r3, [r3, #8]
 80181f0:	429a      	cmp	r2, r3
 80181f2:	d303      	bcc.n	80181fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	681a      	ldr	r2, [r3, #0]
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	68d9      	ldr	r1, [r3, #12]
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018204:	461a      	mov	r2, r3
 8018206:	6838      	ldr	r0, [r7, #0]
 8018208:	f002 f872 	bl	801a2f0 <memcpy>
	}
}
 801820c:	bf00      	nop
 801820e:	3708      	adds	r7, #8
 8018210:	46bd      	mov	sp, r7
 8018212:	bd80      	pop	{r7, pc}

08018214 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8018214:	b580      	push	{r7, lr}
 8018216:	b084      	sub	sp, #16
 8018218:	af00      	add	r7, sp, #0
 801821a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801821c:	f001 fd2a 	bl	8019c74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018226:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018228:	e011      	b.n	801824e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801822e:	2b00      	cmp	r3, #0
 8018230:	d012      	beq.n	8018258 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	3324      	adds	r3, #36	; 0x24
 8018236:	4618      	mov	r0, r3
 8018238:	f000 fe02 	bl	8018e40 <xTaskRemoveFromEventList>
 801823c:	4603      	mov	r3, r0
 801823e:	2b00      	cmp	r3, #0
 8018240:	d001      	beq.n	8018246 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8018242:	f000 fed9 	bl	8018ff8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8018246:	7bfb      	ldrb	r3, [r7, #15]
 8018248:	3b01      	subs	r3, #1
 801824a:	b2db      	uxtb	r3, r3
 801824c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801824e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018252:	2b00      	cmp	r3, #0
 8018254:	dce9      	bgt.n	801822a <prvUnlockQueue+0x16>
 8018256:	e000      	b.n	801825a <prvUnlockQueue+0x46>
					break;
 8018258:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	22ff      	movs	r2, #255	; 0xff
 801825e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8018262:	f001 fd37 	bl	8019cd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8018266:	f001 fd05 	bl	8019c74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018270:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018272:	e011      	b.n	8018298 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	691b      	ldr	r3, [r3, #16]
 8018278:	2b00      	cmp	r3, #0
 801827a:	d012      	beq.n	80182a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	3310      	adds	r3, #16
 8018280:	4618      	mov	r0, r3
 8018282:	f000 fddd 	bl	8018e40 <xTaskRemoveFromEventList>
 8018286:	4603      	mov	r3, r0
 8018288:	2b00      	cmp	r3, #0
 801828a:	d001      	beq.n	8018290 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801828c:	f000 feb4 	bl	8018ff8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8018290:	7bbb      	ldrb	r3, [r7, #14]
 8018292:	3b01      	subs	r3, #1
 8018294:	b2db      	uxtb	r3, r3
 8018296:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018298:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801829c:	2b00      	cmp	r3, #0
 801829e:	dce9      	bgt.n	8018274 <prvUnlockQueue+0x60>
 80182a0:	e000      	b.n	80182a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80182a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	22ff      	movs	r2, #255	; 0xff
 80182a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80182ac:	f001 fd12 	bl	8019cd4 <vPortExitCritical>
}
 80182b0:	bf00      	nop
 80182b2:	3710      	adds	r7, #16
 80182b4:	46bd      	mov	sp, r7
 80182b6:	bd80      	pop	{r7, pc}

080182b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80182b8:	b580      	push	{r7, lr}
 80182ba:	b084      	sub	sp, #16
 80182bc:	af00      	add	r7, sp, #0
 80182be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80182c0:	f001 fcd8 	bl	8019c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d102      	bne.n	80182d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80182cc:	2301      	movs	r3, #1
 80182ce:	60fb      	str	r3, [r7, #12]
 80182d0:	e001      	b.n	80182d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80182d2:	2300      	movs	r3, #0
 80182d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80182d6:	f001 fcfd 	bl	8019cd4 <vPortExitCritical>

	return xReturn;
 80182da:	68fb      	ldr	r3, [r7, #12]
}
 80182dc:	4618      	mov	r0, r3
 80182de:	3710      	adds	r7, #16
 80182e0:	46bd      	mov	sp, r7
 80182e2:	bd80      	pop	{r7, pc}

080182e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80182e4:	b580      	push	{r7, lr}
 80182e6:	b084      	sub	sp, #16
 80182e8:	af00      	add	r7, sp, #0
 80182ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80182ec:	f001 fcc2 	bl	8019c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80182f8:	429a      	cmp	r2, r3
 80182fa:	d102      	bne.n	8018302 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80182fc:	2301      	movs	r3, #1
 80182fe:	60fb      	str	r3, [r7, #12]
 8018300:	e001      	b.n	8018306 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8018302:	2300      	movs	r3, #0
 8018304:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018306:	f001 fce5 	bl	8019cd4 <vPortExitCritical>

	return xReturn;
 801830a:	68fb      	ldr	r3, [r7, #12]
}
 801830c:	4618      	mov	r0, r3
 801830e:	3710      	adds	r7, #16
 8018310:	46bd      	mov	sp, r7
 8018312:	bd80      	pop	{r7, pc}

08018314 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8018314:	b480      	push	{r7}
 8018316:	b085      	sub	sp, #20
 8018318:	af00      	add	r7, sp, #0
 801831a:	6078      	str	r0, [r7, #4]
 801831c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801831e:	2300      	movs	r3, #0
 8018320:	60fb      	str	r3, [r7, #12]
 8018322:	e014      	b.n	801834e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8018324:	4a0f      	ldr	r2, [pc, #60]	; (8018364 <vQueueAddToRegistry+0x50>)
 8018326:	68fb      	ldr	r3, [r7, #12]
 8018328:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801832c:	2b00      	cmp	r3, #0
 801832e:	d10b      	bne.n	8018348 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8018330:	490c      	ldr	r1, [pc, #48]	; (8018364 <vQueueAddToRegistry+0x50>)
 8018332:	68fb      	ldr	r3, [r7, #12]
 8018334:	683a      	ldr	r2, [r7, #0]
 8018336:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801833a:	4a0a      	ldr	r2, [pc, #40]	; (8018364 <vQueueAddToRegistry+0x50>)
 801833c:	68fb      	ldr	r3, [r7, #12]
 801833e:	00db      	lsls	r3, r3, #3
 8018340:	4413      	add	r3, r2
 8018342:	687a      	ldr	r2, [r7, #4]
 8018344:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8018346:	e006      	b.n	8018356 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018348:	68fb      	ldr	r3, [r7, #12]
 801834a:	3301      	adds	r3, #1
 801834c:	60fb      	str	r3, [r7, #12]
 801834e:	68fb      	ldr	r3, [r7, #12]
 8018350:	2b07      	cmp	r3, #7
 8018352:	d9e7      	bls.n	8018324 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8018354:	bf00      	nop
 8018356:	bf00      	nop
 8018358:	3714      	adds	r7, #20
 801835a:	46bd      	mov	sp, r7
 801835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018360:	4770      	bx	lr
 8018362:	bf00      	nop
 8018364:	2000aa64 	.word	0x2000aa64

08018368 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018368:	b580      	push	{r7, lr}
 801836a:	b086      	sub	sp, #24
 801836c:	af00      	add	r7, sp, #0
 801836e:	60f8      	str	r0, [r7, #12]
 8018370:	60b9      	str	r1, [r7, #8]
 8018372:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8018378:	f001 fc7c 	bl	8019c74 <vPortEnterCritical>
 801837c:	697b      	ldr	r3, [r7, #20]
 801837e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018382:	b25b      	sxtb	r3, r3
 8018384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018388:	d103      	bne.n	8018392 <vQueueWaitForMessageRestricted+0x2a>
 801838a:	697b      	ldr	r3, [r7, #20]
 801838c:	2200      	movs	r2, #0
 801838e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018392:	697b      	ldr	r3, [r7, #20]
 8018394:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018398:	b25b      	sxtb	r3, r3
 801839a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801839e:	d103      	bne.n	80183a8 <vQueueWaitForMessageRestricted+0x40>
 80183a0:	697b      	ldr	r3, [r7, #20]
 80183a2:	2200      	movs	r2, #0
 80183a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80183a8:	f001 fc94 	bl	8019cd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80183ac:	697b      	ldr	r3, [r7, #20]
 80183ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d106      	bne.n	80183c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80183b4:	697b      	ldr	r3, [r7, #20]
 80183b6:	3324      	adds	r3, #36	; 0x24
 80183b8:	687a      	ldr	r2, [r7, #4]
 80183ba:	68b9      	ldr	r1, [r7, #8]
 80183bc:	4618      	mov	r0, r3
 80183be:	f000 fd13 	bl	8018de8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80183c2:	6978      	ldr	r0, [r7, #20]
 80183c4:	f7ff ff26 	bl	8018214 <prvUnlockQueue>
	}
 80183c8:	bf00      	nop
 80183ca:	3718      	adds	r7, #24
 80183cc:	46bd      	mov	sp, r7
 80183ce:	bd80      	pop	{r7, pc}

080183d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80183d0:	b580      	push	{r7, lr}
 80183d2:	b08e      	sub	sp, #56	; 0x38
 80183d4:	af04      	add	r7, sp, #16
 80183d6:	60f8      	str	r0, [r7, #12]
 80183d8:	60b9      	str	r1, [r7, #8]
 80183da:	607a      	str	r2, [r7, #4]
 80183dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80183de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d10a      	bne.n	80183fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80183e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183e8:	f383 8811 	msr	BASEPRI, r3
 80183ec:	f3bf 8f6f 	isb	sy
 80183f0:	f3bf 8f4f 	dsb	sy
 80183f4:	623b      	str	r3, [r7, #32]
}
 80183f6:	bf00      	nop
 80183f8:	e7fe      	b.n	80183f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80183fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d10a      	bne.n	8018416 <xTaskCreateStatic+0x46>
	__asm volatile
 8018400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018404:	f383 8811 	msr	BASEPRI, r3
 8018408:	f3bf 8f6f 	isb	sy
 801840c:	f3bf 8f4f 	dsb	sy
 8018410:	61fb      	str	r3, [r7, #28]
}
 8018412:	bf00      	nop
 8018414:	e7fe      	b.n	8018414 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8018416:	235c      	movs	r3, #92	; 0x5c
 8018418:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801841a:	693b      	ldr	r3, [r7, #16]
 801841c:	2b5c      	cmp	r3, #92	; 0x5c
 801841e:	d00a      	beq.n	8018436 <xTaskCreateStatic+0x66>
	__asm volatile
 8018420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018424:	f383 8811 	msr	BASEPRI, r3
 8018428:	f3bf 8f6f 	isb	sy
 801842c:	f3bf 8f4f 	dsb	sy
 8018430:	61bb      	str	r3, [r7, #24]
}
 8018432:	bf00      	nop
 8018434:	e7fe      	b.n	8018434 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8018436:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8018438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801843a:	2b00      	cmp	r3, #0
 801843c:	d01e      	beq.n	801847c <xTaskCreateStatic+0xac>
 801843e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018440:	2b00      	cmp	r3, #0
 8018442:	d01b      	beq.n	801847c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018446:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8018448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801844a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801844c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018450:	2202      	movs	r2, #2
 8018452:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8018456:	2300      	movs	r3, #0
 8018458:	9303      	str	r3, [sp, #12]
 801845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801845c:	9302      	str	r3, [sp, #8]
 801845e:	f107 0314 	add.w	r3, r7, #20
 8018462:	9301      	str	r3, [sp, #4]
 8018464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018466:	9300      	str	r3, [sp, #0]
 8018468:	683b      	ldr	r3, [r7, #0]
 801846a:	687a      	ldr	r2, [r7, #4]
 801846c:	68b9      	ldr	r1, [r7, #8]
 801846e:	68f8      	ldr	r0, [r7, #12]
 8018470:	f000 f850 	bl	8018514 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018474:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018476:	f000 f8dd 	bl	8018634 <prvAddNewTaskToReadyList>
 801847a:	e001      	b.n	8018480 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801847c:	2300      	movs	r3, #0
 801847e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8018480:	697b      	ldr	r3, [r7, #20]
	}
 8018482:	4618      	mov	r0, r3
 8018484:	3728      	adds	r7, #40	; 0x28
 8018486:	46bd      	mov	sp, r7
 8018488:	bd80      	pop	{r7, pc}

0801848a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801848a:	b580      	push	{r7, lr}
 801848c:	b08c      	sub	sp, #48	; 0x30
 801848e:	af04      	add	r7, sp, #16
 8018490:	60f8      	str	r0, [r7, #12]
 8018492:	60b9      	str	r1, [r7, #8]
 8018494:	603b      	str	r3, [r7, #0]
 8018496:	4613      	mov	r3, r2
 8018498:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801849a:	88fb      	ldrh	r3, [r7, #6]
 801849c:	009b      	lsls	r3, r3, #2
 801849e:	4618      	mov	r0, r3
 80184a0:	f001 fd0a 	bl	8019eb8 <pvPortMalloc>
 80184a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80184a6:	697b      	ldr	r3, [r7, #20]
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d00e      	beq.n	80184ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80184ac:	205c      	movs	r0, #92	; 0x5c
 80184ae:	f001 fd03 	bl	8019eb8 <pvPortMalloc>
 80184b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80184b4:	69fb      	ldr	r3, [r7, #28]
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d003      	beq.n	80184c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80184ba:	69fb      	ldr	r3, [r7, #28]
 80184bc:	697a      	ldr	r2, [r7, #20]
 80184be:	631a      	str	r2, [r3, #48]	; 0x30
 80184c0:	e005      	b.n	80184ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80184c2:	6978      	ldr	r0, [r7, #20]
 80184c4:	f001 fdc4 	bl	801a050 <vPortFree>
 80184c8:	e001      	b.n	80184ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80184ca:	2300      	movs	r3, #0
 80184cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80184ce:	69fb      	ldr	r3, [r7, #28]
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d017      	beq.n	8018504 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80184d4:	69fb      	ldr	r3, [r7, #28]
 80184d6:	2200      	movs	r2, #0
 80184d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80184dc:	88fa      	ldrh	r2, [r7, #6]
 80184de:	2300      	movs	r3, #0
 80184e0:	9303      	str	r3, [sp, #12]
 80184e2:	69fb      	ldr	r3, [r7, #28]
 80184e4:	9302      	str	r3, [sp, #8]
 80184e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184e8:	9301      	str	r3, [sp, #4]
 80184ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184ec:	9300      	str	r3, [sp, #0]
 80184ee:	683b      	ldr	r3, [r7, #0]
 80184f0:	68b9      	ldr	r1, [r7, #8]
 80184f2:	68f8      	ldr	r0, [r7, #12]
 80184f4:	f000 f80e 	bl	8018514 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80184f8:	69f8      	ldr	r0, [r7, #28]
 80184fa:	f000 f89b 	bl	8018634 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80184fe:	2301      	movs	r3, #1
 8018500:	61bb      	str	r3, [r7, #24]
 8018502:	e002      	b.n	801850a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8018504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018508:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801850a:	69bb      	ldr	r3, [r7, #24]
	}
 801850c:	4618      	mov	r0, r3
 801850e:	3720      	adds	r7, #32
 8018510:	46bd      	mov	sp, r7
 8018512:	bd80      	pop	{r7, pc}

08018514 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8018514:	b580      	push	{r7, lr}
 8018516:	b088      	sub	sp, #32
 8018518:	af00      	add	r7, sp, #0
 801851a:	60f8      	str	r0, [r7, #12]
 801851c:	60b9      	str	r1, [r7, #8]
 801851e:	607a      	str	r2, [r7, #4]
 8018520:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8018522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018524:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	009b      	lsls	r3, r3, #2
 801852a:	461a      	mov	r2, r3
 801852c:	21a5      	movs	r1, #165	; 0xa5
 801852e:	f001 feed 	bl	801a30c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8018532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801853c:	3b01      	subs	r3, #1
 801853e:	009b      	lsls	r3, r3, #2
 8018540:	4413      	add	r3, r2
 8018542:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8018544:	69bb      	ldr	r3, [r7, #24]
 8018546:	f023 0307 	bic.w	r3, r3, #7
 801854a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801854c:	69bb      	ldr	r3, [r7, #24]
 801854e:	f003 0307 	and.w	r3, r3, #7
 8018552:	2b00      	cmp	r3, #0
 8018554:	d00a      	beq.n	801856c <prvInitialiseNewTask+0x58>
	__asm volatile
 8018556:	f04f 0350 	mov.w	r3, #80	; 0x50
 801855a:	f383 8811 	msr	BASEPRI, r3
 801855e:	f3bf 8f6f 	isb	sy
 8018562:	f3bf 8f4f 	dsb	sy
 8018566:	617b      	str	r3, [r7, #20]
}
 8018568:	bf00      	nop
 801856a:	e7fe      	b.n	801856a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801856c:	68bb      	ldr	r3, [r7, #8]
 801856e:	2b00      	cmp	r3, #0
 8018570:	d01f      	beq.n	80185b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018572:	2300      	movs	r3, #0
 8018574:	61fb      	str	r3, [r7, #28]
 8018576:	e012      	b.n	801859e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8018578:	68ba      	ldr	r2, [r7, #8]
 801857a:	69fb      	ldr	r3, [r7, #28]
 801857c:	4413      	add	r3, r2
 801857e:	7819      	ldrb	r1, [r3, #0]
 8018580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018582:	69fb      	ldr	r3, [r7, #28]
 8018584:	4413      	add	r3, r2
 8018586:	3334      	adds	r3, #52	; 0x34
 8018588:	460a      	mov	r2, r1
 801858a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801858c:	68ba      	ldr	r2, [r7, #8]
 801858e:	69fb      	ldr	r3, [r7, #28]
 8018590:	4413      	add	r3, r2
 8018592:	781b      	ldrb	r3, [r3, #0]
 8018594:	2b00      	cmp	r3, #0
 8018596:	d006      	beq.n	80185a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018598:	69fb      	ldr	r3, [r7, #28]
 801859a:	3301      	adds	r3, #1
 801859c:	61fb      	str	r3, [r7, #28]
 801859e:	69fb      	ldr	r3, [r7, #28]
 80185a0:	2b0f      	cmp	r3, #15
 80185a2:	d9e9      	bls.n	8018578 <prvInitialiseNewTask+0x64>
 80185a4:	e000      	b.n	80185a8 <prvInitialiseNewTask+0x94>
			{
				break;
 80185a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80185a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185aa:	2200      	movs	r2, #0
 80185ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80185b0:	e003      	b.n	80185ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80185b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185b4:	2200      	movs	r2, #0
 80185b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80185ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185bc:	2b37      	cmp	r3, #55	; 0x37
 80185be:	d901      	bls.n	80185c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80185c0:	2337      	movs	r3, #55	; 0x37
 80185c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80185c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80185c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80185ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80185ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80185d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185d2:	2200      	movs	r2, #0
 80185d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80185d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185d8:	3304      	adds	r3, #4
 80185da:	4618      	mov	r0, r3
 80185dc:	f7ff f978 	bl	80178d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80185e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185e2:	3318      	adds	r3, #24
 80185e4:	4618      	mov	r0, r3
 80185e6:	f7ff f973 	bl	80178d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80185ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80185ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80185f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80185f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80185fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80185fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8018600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018602:	2200      	movs	r2, #0
 8018604:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018608:	2200      	movs	r2, #0
 801860a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801860e:	683a      	ldr	r2, [r7, #0]
 8018610:	68f9      	ldr	r1, [r7, #12]
 8018612:	69b8      	ldr	r0, [r7, #24]
 8018614:	f001 fa00 	bl	8019a18 <pxPortInitialiseStack>
 8018618:	4602      	mov	r2, r0
 801861a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801861c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801861e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018620:	2b00      	cmp	r3, #0
 8018622:	d002      	beq.n	801862a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8018624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018626:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018628:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801862a:	bf00      	nop
 801862c:	3720      	adds	r7, #32
 801862e:	46bd      	mov	sp, r7
 8018630:	bd80      	pop	{r7, pc}
	...

08018634 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8018634:	b580      	push	{r7, lr}
 8018636:	b082      	sub	sp, #8
 8018638:	af00      	add	r7, sp, #0
 801863a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801863c:	f001 fb1a 	bl	8019c74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8018640:	4b2d      	ldr	r3, [pc, #180]	; (80186f8 <prvAddNewTaskToReadyList+0xc4>)
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	3301      	adds	r3, #1
 8018646:	4a2c      	ldr	r2, [pc, #176]	; (80186f8 <prvAddNewTaskToReadyList+0xc4>)
 8018648:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801864a:	4b2c      	ldr	r3, [pc, #176]	; (80186fc <prvAddNewTaskToReadyList+0xc8>)
 801864c:	681b      	ldr	r3, [r3, #0]
 801864e:	2b00      	cmp	r3, #0
 8018650:	d109      	bne.n	8018666 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8018652:	4a2a      	ldr	r2, [pc, #168]	; (80186fc <prvAddNewTaskToReadyList+0xc8>)
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8018658:	4b27      	ldr	r3, [pc, #156]	; (80186f8 <prvAddNewTaskToReadyList+0xc4>)
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	2b01      	cmp	r3, #1
 801865e:	d110      	bne.n	8018682 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018660:	f000 fcee 	bl	8019040 <prvInitialiseTaskLists>
 8018664:	e00d      	b.n	8018682 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8018666:	4b26      	ldr	r3, [pc, #152]	; (8018700 <prvAddNewTaskToReadyList+0xcc>)
 8018668:	681b      	ldr	r3, [r3, #0]
 801866a:	2b00      	cmp	r3, #0
 801866c:	d109      	bne.n	8018682 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801866e:	4b23      	ldr	r3, [pc, #140]	; (80186fc <prvAddNewTaskToReadyList+0xc8>)
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018678:	429a      	cmp	r2, r3
 801867a:	d802      	bhi.n	8018682 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801867c:	4a1f      	ldr	r2, [pc, #124]	; (80186fc <prvAddNewTaskToReadyList+0xc8>)
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8018682:	4b20      	ldr	r3, [pc, #128]	; (8018704 <prvAddNewTaskToReadyList+0xd0>)
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	3301      	adds	r3, #1
 8018688:	4a1e      	ldr	r2, [pc, #120]	; (8018704 <prvAddNewTaskToReadyList+0xd0>)
 801868a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801868c:	4b1d      	ldr	r3, [pc, #116]	; (8018704 <prvAddNewTaskToReadyList+0xd0>)
 801868e:	681a      	ldr	r2, [r3, #0]
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018698:	4b1b      	ldr	r3, [pc, #108]	; (8018708 <prvAddNewTaskToReadyList+0xd4>)
 801869a:	681b      	ldr	r3, [r3, #0]
 801869c:	429a      	cmp	r2, r3
 801869e:	d903      	bls.n	80186a8 <prvAddNewTaskToReadyList+0x74>
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186a4:	4a18      	ldr	r2, [pc, #96]	; (8018708 <prvAddNewTaskToReadyList+0xd4>)
 80186a6:	6013      	str	r3, [r2, #0]
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80186ac:	4613      	mov	r3, r2
 80186ae:	009b      	lsls	r3, r3, #2
 80186b0:	4413      	add	r3, r2
 80186b2:	009b      	lsls	r3, r3, #2
 80186b4:	4a15      	ldr	r2, [pc, #84]	; (801870c <prvAddNewTaskToReadyList+0xd8>)
 80186b6:	441a      	add	r2, r3
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	3304      	adds	r3, #4
 80186bc:	4619      	mov	r1, r3
 80186be:	4610      	mov	r0, r2
 80186c0:	f7ff f913 	bl	80178ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80186c4:	f001 fb06 	bl	8019cd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80186c8:	4b0d      	ldr	r3, [pc, #52]	; (8018700 <prvAddNewTaskToReadyList+0xcc>)
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d00e      	beq.n	80186ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80186d0:	4b0a      	ldr	r3, [pc, #40]	; (80186fc <prvAddNewTaskToReadyList+0xc8>)
 80186d2:	681b      	ldr	r3, [r3, #0]
 80186d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186da:	429a      	cmp	r2, r3
 80186dc:	d207      	bcs.n	80186ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80186de:	4b0c      	ldr	r3, [pc, #48]	; (8018710 <prvAddNewTaskToReadyList+0xdc>)
 80186e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80186e4:	601a      	str	r2, [r3, #0]
 80186e6:	f3bf 8f4f 	dsb	sy
 80186ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80186ee:	bf00      	nop
 80186f0:	3708      	adds	r7, #8
 80186f2:	46bd      	mov	sp, r7
 80186f4:	bd80      	pop	{r7, pc}
 80186f6:	bf00      	nop
 80186f8:	2000217c 	.word	0x2000217c
 80186fc:	20001ca8 	.word	0x20001ca8
 8018700:	20002188 	.word	0x20002188
 8018704:	20002198 	.word	0x20002198
 8018708:	20002184 	.word	0x20002184
 801870c:	20001cac 	.word	0x20001cac
 8018710:	e000ed04 	.word	0xe000ed04

08018714 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8018714:	b580      	push	{r7, lr}
 8018716:	b084      	sub	sp, #16
 8018718:	af00      	add	r7, sp, #0
 801871a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801871c:	f001 faaa 	bl	8019c74 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	2b00      	cmp	r3, #0
 8018724:	d102      	bne.n	801872c <vTaskDelete+0x18>
 8018726:	4b2c      	ldr	r3, [pc, #176]	; (80187d8 <vTaskDelete+0xc4>)
 8018728:	681b      	ldr	r3, [r3, #0]
 801872a:	e000      	b.n	801872e <vTaskDelete+0x1a>
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018730:	68fb      	ldr	r3, [r7, #12]
 8018732:	3304      	adds	r3, #4
 8018734:	4618      	mov	r0, r3
 8018736:	f7ff f935 	bl	80179a4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801873a:	68fb      	ldr	r3, [r7, #12]
 801873c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801873e:	2b00      	cmp	r3, #0
 8018740:	d004      	beq.n	801874c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	3318      	adds	r3, #24
 8018746:	4618      	mov	r0, r3
 8018748:	f7ff f92c 	bl	80179a4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 801874c:	4b23      	ldr	r3, [pc, #140]	; (80187dc <vTaskDelete+0xc8>)
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	3301      	adds	r3, #1
 8018752:	4a22      	ldr	r2, [pc, #136]	; (80187dc <vTaskDelete+0xc8>)
 8018754:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8018756:	4b20      	ldr	r3, [pc, #128]	; (80187d8 <vTaskDelete+0xc4>)
 8018758:	681b      	ldr	r3, [r3, #0]
 801875a:	68fa      	ldr	r2, [r7, #12]
 801875c:	429a      	cmp	r2, r3
 801875e:	d10b      	bne.n	8018778 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8018760:	68fb      	ldr	r3, [r7, #12]
 8018762:	3304      	adds	r3, #4
 8018764:	4619      	mov	r1, r3
 8018766:	481e      	ldr	r0, [pc, #120]	; (80187e0 <vTaskDelete+0xcc>)
 8018768:	f7ff f8bf 	bl	80178ea <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 801876c:	4b1d      	ldr	r3, [pc, #116]	; (80187e4 <vTaskDelete+0xd0>)
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	3301      	adds	r3, #1
 8018772:	4a1c      	ldr	r2, [pc, #112]	; (80187e4 <vTaskDelete+0xd0>)
 8018774:	6013      	str	r3, [r2, #0]
 8018776:	e009      	b.n	801878c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8018778:	4b1b      	ldr	r3, [pc, #108]	; (80187e8 <vTaskDelete+0xd4>)
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	3b01      	subs	r3, #1
 801877e:	4a1a      	ldr	r2, [pc, #104]	; (80187e8 <vTaskDelete+0xd4>)
 8018780:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8018782:	68f8      	ldr	r0, [r7, #12]
 8018784:	f000 fcca 	bl	801911c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8018788:	f000 fcf8 	bl	801917c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 801878c:	f001 faa2 	bl	8019cd4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8018790:	4b16      	ldr	r3, [pc, #88]	; (80187ec <vTaskDelete+0xd8>)
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	2b00      	cmp	r3, #0
 8018796:	d01b      	beq.n	80187d0 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8018798:	4b0f      	ldr	r3, [pc, #60]	; (80187d8 <vTaskDelete+0xc4>)
 801879a:	681b      	ldr	r3, [r3, #0]
 801879c:	68fa      	ldr	r2, [r7, #12]
 801879e:	429a      	cmp	r2, r3
 80187a0:	d116      	bne.n	80187d0 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80187a2:	4b13      	ldr	r3, [pc, #76]	; (80187f0 <vTaskDelete+0xdc>)
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d00a      	beq.n	80187c0 <vTaskDelete+0xac>
	__asm volatile
 80187aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187ae:	f383 8811 	msr	BASEPRI, r3
 80187b2:	f3bf 8f6f 	isb	sy
 80187b6:	f3bf 8f4f 	dsb	sy
 80187ba:	60bb      	str	r3, [r7, #8]
}
 80187bc:	bf00      	nop
 80187be:	e7fe      	b.n	80187be <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80187c0:	4b0c      	ldr	r3, [pc, #48]	; (80187f4 <vTaskDelete+0xe0>)
 80187c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80187c6:	601a      	str	r2, [r3, #0]
 80187c8:	f3bf 8f4f 	dsb	sy
 80187cc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80187d0:	bf00      	nop
 80187d2:	3710      	adds	r7, #16
 80187d4:	46bd      	mov	sp, r7
 80187d6:	bd80      	pop	{r7, pc}
 80187d8:	20001ca8 	.word	0x20001ca8
 80187dc:	20002198 	.word	0x20002198
 80187e0:	20002150 	.word	0x20002150
 80187e4:	20002164 	.word	0x20002164
 80187e8:	2000217c 	.word	0x2000217c
 80187ec:	20002188 	.word	0x20002188
 80187f0:	200021a4 	.word	0x200021a4
 80187f4:	e000ed04 	.word	0xe000ed04

080187f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80187f8:	b580      	push	{r7, lr}
 80187fa:	b084      	sub	sp, #16
 80187fc:	af00      	add	r7, sp, #0
 80187fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018800:	2300      	movs	r3, #0
 8018802:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	2b00      	cmp	r3, #0
 8018808:	d017      	beq.n	801883a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801880a:	4b13      	ldr	r3, [pc, #76]	; (8018858 <vTaskDelay+0x60>)
 801880c:	681b      	ldr	r3, [r3, #0]
 801880e:	2b00      	cmp	r3, #0
 8018810:	d00a      	beq.n	8018828 <vTaskDelay+0x30>
	__asm volatile
 8018812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018816:	f383 8811 	msr	BASEPRI, r3
 801881a:	f3bf 8f6f 	isb	sy
 801881e:	f3bf 8f4f 	dsb	sy
 8018822:	60bb      	str	r3, [r7, #8]
}
 8018824:	bf00      	nop
 8018826:	e7fe      	b.n	8018826 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8018828:	f000 f8e6 	bl	80189f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801882c:	2100      	movs	r1, #0
 801882e:	6878      	ldr	r0, [r7, #4]
 8018830:	f000 fd50 	bl	80192d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8018834:	f000 f8ee 	bl	8018a14 <xTaskResumeAll>
 8018838:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	2b00      	cmp	r3, #0
 801883e:	d107      	bne.n	8018850 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8018840:	4b06      	ldr	r3, [pc, #24]	; (801885c <vTaskDelay+0x64>)
 8018842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018846:	601a      	str	r2, [r3, #0]
 8018848:	f3bf 8f4f 	dsb	sy
 801884c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018850:	bf00      	nop
 8018852:	3710      	adds	r7, #16
 8018854:	46bd      	mov	sp, r7
 8018856:	bd80      	pop	{r7, pc}
 8018858:	200021a4 	.word	0x200021a4
 801885c:	e000ed04 	.word	0xe000ed04

08018860 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8018860:	b580      	push	{r7, lr}
 8018862:	b088      	sub	sp, #32
 8018864:	af00      	add	r7, sp, #0
 8018866:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 801886c:	69bb      	ldr	r3, [r7, #24]
 801886e:	2b00      	cmp	r3, #0
 8018870:	d10a      	bne.n	8018888 <eTaskGetState+0x28>
	__asm volatile
 8018872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018876:	f383 8811 	msr	BASEPRI, r3
 801887a:	f3bf 8f6f 	isb	sy
 801887e:	f3bf 8f4f 	dsb	sy
 8018882:	60bb      	str	r3, [r7, #8]
}
 8018884:	bf00      	nop
 8018886:	e7fe      	b.n	8018886 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8018888:	4b23      	ldr	r3, [pc, #140]	; (8018918 <eTaskGetState+0xb8>)
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	69ba      	ldr	r2, [r7, #24]
 801888e:	429a      	cmp	r2, r3
 8018890:	d102      	bne.n	8018898 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8018892:	2300      	movs	r3, #0
 8018894:	77fb      	strb	r3, [r7, #31]
 8018896:	e03a      	b.n	801890e <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8018898:	f001 f9ec 	bl	8019c74 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801889c:	69bb      	ldr	r3, [r7, #24]
 801889e:	695b      	ldr	r3, [r3, #20]
 80188a0:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80188a2:	4b1e      	ldr	r3, [pc, #120]	; (801891c <eTaskGetState+0xbc>)
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80188a8:	4b1d      	ldr	r3, [pc, #116]	; (8018920 <eTaskGetState+0xc0>)
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80188ae:	f001 fa11 	bl	8019cd4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80188b2:	697a      	ldr	r2, [r7, #20]
 80188b4:	693b      	ldr	r3, [r7, #16]
 80188b6:	429a      	cmp	r2, r3
 80188b8:	d003      	beq.n	80188c2 <eTaskGetState+0x62>
 80188ba:	697a      	ldr	r2, [r7, #20]
 80188bc:	68fb      	ldr	r3, [r7, #12]
 80188be:	429a      	cmp	r2, r3
 80188c0:	d102      	bne.n	80188c8 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80188c2:	2302      	movs	r3, #2
 80188c4:	77fb      	strb	r3, [r7, #31]
 80188c6:	e022      	b.n	801890e <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80188c8:	697b      	ldr	r3, [r7, #20]
 80188ca:	4a16      	ldr	r2, [pc, #88]	; (8018924 <eTaskGetState+0xc4>)
 80188cc:	4293      	cmp	r3, r2
 80188ce:	d112      	bne.n	80188f6 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80188d0:	69bb      	ldr	r3, [r7, #24]
 80188d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d10b      	bne.n	80188f0 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80188d8:	69bb      	ldr	r3, [r7, #24]
 80188da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80188de:	b2db      	uxtb	r3, r3
 80188e0:	2b01      	cmp	r3, #1
 80188e2:	d102      	bne.n	80188ea <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 80188e4:	2302      	movs	r3, #2
 80188e6:	77fb      	strb	r3, [r7, #31]
 80188e8:	e011      	b.n	801890e <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 80188ea:	2303      	movs	r3, #3
 80188ec:	77fb      	strb	r3, [r7, #31]
 80188ee:	e00e      	b.n	801890e <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80188f0:	2302      	movs	r3, #2
 80188f2:	77fb      	strb	r3, [r7, #31]
 80188f4:	e00b      	b.n	801890e <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80188f6:	697b      	ldr	r3, [r7, #20]
 80188f8:	4a0b      	ldr	r2, [pc, #44]	; (8018928 <eTaskGetState+0xc8>)
 80188fa:	4293      	cmp	r3, r2
 80188fc:	d002      	beq.n	8018904 <eTaskGetState+0xa4>
 80188fe:	697b      	ldr	r3, [r7, #20]
 8018900:	2b00      	cmp	r3, #0
 8018902:	d102      	bne.n	801890a <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8018904:	2304      	movs	r3, #4
 8018906:	77fb      	strb	r3, [r7, #31]
 8018908:	e001      	b.n	801890e <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 801890a:	2301      	movs	r3, #1
 801890c:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 801890e:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8018910:	4618      	mov	r0, r3
 8018912:	3720      	adds	r7, #32
 8018914:	46bd      	mov	sp, r7
 8018916:	bd80      	pop	{r7, pc}
 8018918:	20001ca8 	.word	0x20001ca8
 801891c:	20002134 	.word	0x20002134
 8018920:	20002138 	.word	0x20002138
 8018924:	20002168 	.word	0x20002168
 8018928:	20002150 	.word	0x20002150

0801892c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801892c:	b580      	push	{r7, lr}
 801892e:	b08a      	sub	sp, #40	; 0x28
 8018930:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8018932:	2300      	movs	r3, #0
 8018934:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8018936:	2300      	movs	r3, #0
 8018938:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801893a:	463a      	mov	r2, r7
 801893c:	1d39      	adds	r1, r7, #4
 801893e:	f107 0308 	add.w	r3, r7, #8
 8018942:	4618      	mov	r0, r3
 8018944:	f7fe ff70 	bl	8017828 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8018948:	6839      	ldr	r1, [r7, #0]
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	68ba      	ldr	r2, [r7, #8]
 801894e:	9202      	str	r2, [sp, #8]
 8018950:	9301      	str	r3, [sp, #4]
 8018952:	2300      	movs	r3, #0
 8018954:	9300      	str	r3, [sp, #0]
 8018956:	2300      	movs	r3, #0
 8018958:	460a      	mov	r2, r1
 801895a:	4921      	ldr	r1, [pc, #132]	; (80189e0 <vTaskStartScheduler+0xb4>)
 801895c:	4821      	ldr	r0, [pc, #132]	; (80189e4 <vTaskStartScheduler+0xb8>)
 801895e:	f7ff fd37 	bl	80183d0 <xTaskCreateStatic>
 8018962:	4603      	mov	r3, r0
 8018964:	4a20      	ldr	r2, [pc, #128]	; (80189e8 <vTaskStartScheduler+0xbc>)
 8018966:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8018968:	4b1f      	ldr	r3, [pc, #124]	; (80189e8 <vTaskStartScheduler+0xbc>)
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	2b00      	cmp	r3, #0
 801896e:	d002      	beq.n	8018976 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8018970:	2301      	movs	r3, #1
 8018972:	617b      	str	r3, [r7, #20]
 8018974:	e001      	b.n	801897a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8018976:	2300      	movs	r3, #0
 8018978:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801897a:	697b      	ldr	r3, [r7, #20]
 801897c:	2b01      	cmp	r3, #1
 801897e:	d102      	bne.n	8018986 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8018980:	f000 fcfc 	bl	801937c <xTimerCreateTimerTask>
 8018984:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8018986:	697b      	ldr	r3, [r7, #20]
 8018988:	2b01      	cmp	r3, #1
 801898a:	d116      	bne.n	80189ba <vTaskStartScheduler+0x8e>
	__asm volatile
 801898c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018990:	f383 8811 	msr	BASEPRI, r3
 8018994:	f3bf 8f6f 	isb	sy
 8018998:	f3bf 8f4f 	dsb	sy
 801899c:	613b      	str	r3, [r7, #16]
}
 801899e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80189a0:	4b12      	ldr	r3, [pc, #72]	; (80189ec <vTaskStartScheduler+0xc0>)
 80189a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80189a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80189a8:	4b11      	ldr	r3, [pc, #68]	; (80189f0 <vTaskStartScheduler+0xc4>)
 80189aa:	2201      	movs	r2, #1
 80189ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80189ae:	4b11      	ldr	r3, [pc, #68]	; (80189f4 <vTaskStartScheduler+0xc8>)
 80189b0:	2200      	movs	r2, #0
 80189b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80189b4:	f001 f8bc 	bl	8019b30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80189b8:	e00e      	b.n	80189d8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80189ba:	697b      	ldr	r3, [r7, #20]
 80189bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80189c0:	d10a      	bne.n	80189d8 <vTaskStartScheduler+0xac>
	__asm volatile
 80189c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189c6:	f383 8811 	msr	BASEPRI, r3
 80189ca:	f3bf 8f6f 	isb	sy
 80189ce:	f3bf 8f4f 	dsb	sy
 80189d2:	60fb      	str	r3, [r7, #12]
}
 80189d4:	bf00      	nop
 80189d6:	e7fe      	b.n	80189d6 <vTaskStartScheduler+0xaa>
}
 80189d8:	bf00      	nop
 80189da:	3718      	adds	r7, #24
 80189dc:	46bd      	mov	sp, r7
 80189de:	bd80      	pop	{r7, pc}
 80189e0:	0802057c 	.word	0x0802057c
 80189e4:	08019011 	.word	0x08019011
 80189e8:	200021a0 	.word	0x200021a0
 80189ec:	2000219c 	.word	0x2000219c
 80189f0:	20002188 	.word	0x20002188
 80189f4:	20002180 	.word	0x20002180

080189f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80189f8:	b480      	push	{r7}
 80189fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80189fc:	4b04      	ldr	r3, [pc, #16]	; (8018a10 <vTaskSuspendAll+0x18>)
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	3301      	adds	r3, #1
 8018a02:	4a03      	ldr	r2, [pc, #12]	; (8018a10 <vTaskSuspendAll+0x18>)
 8018a04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8018a06:	bf00      	nop
 8018a08:	46bd      	mov	sp, r7
 8018a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a0e:	4770      	bx	lr
 8018a10:	200021a4 	.word	0x200021a4

08018a14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018a14:	b580      	push	{r7, lr}
 8018a16:	b084      	sub	sp, #16
 8018a18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018a1a:	2300      	movs	r3, #0
 8018a1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018a1e:	2300      	movs	r3, #0
 8018a20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8018a22:	4b42      	ldr	r3, [pc, #264]	; (8018b2c <xTaskResumeAll+0x118>)
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d10a      	bne.n	8018a40 <xTaskResumeAll+0x2c>
	__asm volatile
 8018a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a2e:	f383 8811 	msr	BASEPRI, r3
 8018a32:	f3bf 8f6f 	isb	sy
 8018a36:	f3bf 8f4f 	dsb	sy
 8018a3a:	603b      	str	r3, [r7, #0]
}
 8018a3c:	bf00      	nop
 8018a3e:	e7fe      	b.n	8018a3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018a40:	f001 f918 	bl	8019c74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018a44:	4b39      	ldr	r3, [pc, #228]	; (8018b2c <xTaskResumeAll+0x118>)
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	3b01      	subs	r3, #1
 8018a4a:	4a38      	ldr	r2, [pc, #224]	; (8018b2c <xTaskResumeAll+0x118>)
 8018a4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018a4e:	4b37      	ldr	r3, [pc, #220]	; (8018b2c <xTaskResumeAll+0x118>)
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d162      	bne.n	8018b1c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8018a56:	4b36      	ldr	r3, [pc, #216]	; (8018b30 <xTaskResumeAll+0x11c>)
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d05e      	beq.n	8018b1c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018a5e:	e02f      	b.n	8018ac0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018a60:	4b34      	ldr	r3, [pc, #208]	; (8018b34 <xTaskResumeAll+0x120>)
 8018a62:	68db      	ldr	r3, [r3, #12]
 8018a64:	68db      	ldr	r3, [r3, #12]
 8018a66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018a68:	68fb      	ldr	r3, [r7, #12]
 8018a6a:	3318      	adds	r3, #24
 8018a6c:	4618      	mov	r0, r3
 8018a6e:	f7fe ff99 	bl	80179a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018a72:	68fb      	ldr	r3, [r7, #12]
 8018a74:	3304      	adds	r3, #4
 8018a76:	4618      	mov	r0, r3
 8018a78:	f7fe ff94 	bl	80179a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018a7c:	68fb      	ldr	r3, [r7, #12]
 8018a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a80:	4b2d      	ldr	r3, [pc, #180]	; (8018b38 <xTaskResumeAll+0x124>)
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	429a      	cmp	r2, r3
 8018a86:	d903      	bls.n	8018a90 <xTaskResumeAll+0x7c>
 8018a88:	68fb      	ldr	r3, [r7, #12]
 8018a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a8c:	4a2a      	ldr	r2, [pc, #168]	; (8018b38 <xTaskResumeAll+0x124>)
 8018a8e:	6013      	str	r3, [r2, #0]
 8018a90:	68fb      	ldr	r3, [r7, #12]
 8018a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a94:	4613      	mov	r3, r2
 8018a96:	009b      	lsls	r3, r3, #2
 8018a98:	4413      	add	r3, r2
 8018a9a:	009b      	lsls	r3, r3, #2
 8018a9c:	4a27      	ldr	r2, [pc, #156]	; (8018b3c <xTaskResumeAll+0x128>)
 8018a9e:	441a      	add	r2, r3
 8018aa0:	68fb      	ldr	r3, [r7, #12]
 8018aa2:	3304      	adds	r3, #4
 8018aa4:	4619      	mov	r1, r3
 8018aa6:	4610      	mov	r0, r2
 8018aa8:	f7fe ff1f 	bl	80178ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018aac:	68fb      	ldr	r3, [r7, #12]
 8018aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ab0:	4b23      	ldr	r3, [pc, #140]	; (8018b40 <xTaskResumeAll+0x12c>)
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ab6:	429a      	cmp	r2, r3
 8018ab8:	d302      	bcc.n	8018ac0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8018aba:	4b22      	ldr	r3, [pc, #136]	; (8018b44 <xTaskResumeAll+0x130>)
 8018abc:	2201      	movs	r2, #1
 8018abe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018ac0:	4b1c      	ldr	r3, [pc, #112]	; (8018b34 <xTaskResumeAll+0x120>)
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d1cb      	bne.n	8018a60 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d001      	beq.n	8018ad2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018ace:	f000 fb55 	bl	801917c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8018ad2:	4b1d      	ldr	r3, [pc, #116]	; (8018b48 <xTaskResumeAll+0x134>)
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d010      	beq.n	8018b00 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018ade:	f000 f847 	bl	8018b70 <xTaskIncrementTick>
 8018ae2:	4603      	mov	r3, r0
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	d002      	beq.n	8018aee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8018ae8:	4b16      	ldr	r3, [pc, #88]	; (8018b44 <xTaskResumeAll+0x130>)
 8018aea:	2201      	movs	r2, #1
 8018aec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	3b01      	subs	r3, #1
 8018af2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d1f1      	bne.n	8018ade <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8018afa:	4b13      	ldr	r3, [pc, #76]	; (8018b48 <xTaskResumeAll+0x134>)
 8018afc:	2200      	movs	r2, #0
 8018afe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018b00:	4b10      	ldr	r3, [pc, #64]	; (8018b44 <xTaskResumeAll+0x130>)
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	d009      	beq.n	8018b1c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018b08:	2301      	movs	r3, #1
 8018b0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018b0c:	4b0f      	ldr	r3, [pc, #60]	; (8018b4c <xTaskResumeAll+0x138>)
 8018b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018b12:	601a      	str	r2, [r3, #0]
 8018b14:	f3bf 8f4f 	dsb	sy
 8018b18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018b1c:	f001 f8da 	bl	8019cd4 <vPortExitCritical>

	return xAlreadyYielded;
 8018b20:	68bb      	ldr	r3, [r7, #8]
}
 8018b22:	4618      	mov	r0, r3
 8018b24:	3710      	adds	r7, #16
 8018b26:	46bd      	mov	sp, r7
 8018b28:	bd80      	pop	{r7, pc}
 8018b2a:	bf00      	nop
 8018b2c:	200021a4 	.word	0x200021a4
 8018b30:	2000217c 	.word	0x2000217c
 8018b34:	2000213c 	.word	0x2000213c
 8018b38:	20002184 	.word	0x20002184
 8018b3c:	20001cac 	.word	0x20001cac
 8018b40:	20001ca8 	.word	0x20001ca8
 8018b44:	20002190 	.word	0x20002190
 8018b48:	2000218c 	.word	0x2000218c
 8018b4c:	e000ed04 	.word	0xe000ed04

08018b50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018b50:	b480      	push	{r7}
 8018b52:	b083      	sub	sp, #12
 8018b54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8018b56:	4b05      	ldr	r3, [pc, #20]	; (8018b6c <xTaskGetTickCount+0x1c>)
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018b5c:	687b      	ldr	r3, [r7, #4]
}
 8018b5e:	4618      	mov	r0, r3
 8018b60:	370c      	adds	r7, #12
 8018b62:	46bd      	mov	sp, r7
 8018b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b68:	4770      	bx	lr
 8018b6a:	bf00      	nop
 8018b6c:	20002180 	.word	0x20002180

08018b70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018b70:	b580      	push	{r7, lr}
 8018b72:	b086      	sub	sp, #24
 8018b74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8018b76:	2300      	movs	r3, #0
 8018b78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018b7a:	4b4f      	ldr	r3, [pc, #316]	; (8018cb8 <xTaskIncrementTick+0x148>)
 8018b7c:	681b      	ldr	r3, [r3, #0]
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	f040 808f 	bne.w	8018ca2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018b84:	4b4d      	ldr	r3, [pc, #308]	; (8018cbc <xTaskIncrementTick+0x14c>)
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	3301      	adds	r3, #1
 8018b8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018b8c:	4a4b      	ldr	r2, [pc, #300]	; (8018cbc <xTaskIncrementTick+0x14c>)
 8018b8e:	693b      	ldr	r3, [r7, #16]
 8018b90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018b92:	693b      	ldr	r3, [r7, #16]
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d120      	bne.n	8018bda <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8018b98:	4b49      	ldr	r3, [pc, #292]	; (8018cc0 <xTaskIncrementTick+0x150>)
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	681b      	ldr	r3, [r3, #0]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d00a      	beq.n	8018bb8 <xTaskIncrementTick+0x48>
	__asm volatile
 8018ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ba6:	f383 8811 	msr	BASEPRI, r3
 8018baa:	f3bf 8f6f 	isb	sy
 8018bae:	f3bf 8f4f 	dsb	sy
 8018bb2:	603b      	str	r3, [r7, #0]
}
 8018bb4:	bf00      	nop
 8018bb6:	e7fe      	b.n	8018bb6 <xTaskIncrementTick+0x46>
 8018bb8:	4b41      	ldr	r3, [pc, #260]	; (8018cc0 <xTaskIncrementTick+0x150>)
 8018bba:	681b      	ldr	r3, [r3, #0]
 8018bbc:	60fb      	str	r3, [r7, #12]
 8018bbe:	4b41      	ldr	r3, [pc, #260]	; (8018cc4 <xTaskIncrementTick+0x154>)
 8018bc0:	681b      	ldr	r3, [r3, #0]
 8018bc2:	4a3f      	ldr	r2, [pc, #252]	; (8018cc0 <xTaskIncrementTick+0x150>)
 8018bc4:	6013      	str	r3, [r2, #0]
 8018bc6:	4a3f      	ldr	r2, [pc, #252]	; (8018cc4 <xTaskIncrementTick+0x154>)
 8018bc8:	68fb      	ldr	r3, [r7, #12]
 8018bca:	6013      	str	r3, [r2, #0]
 8018bcc:	4b3e      	ldr	r3, [pc, #248]	; (8018cc8 <xTaskIncrementTick+0x158>)
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	3301      	adds	r3, #1
 8018bd2:	4a3d      	ldr	r2, [pc, #244]	; (8018cc8 <xTaskIncrementTick+0x158>)
 8018bd4:	6013      	str	r3, [r2, #0]
 8018bd6:	f000 fad1 	bl	801917c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018bda:	4b3c      	ldr	r3, [pc, #240]	; (8018ccc <xTaskIncrementTick+0x15c>)
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	693a      	ldr	r2, [r7, #16]
 8018be0:	429a      	cmp	r2, r3
 8018be2:	d349      	bcc.n	8018c78 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018be4:	4b36      	ldr	r3, [pc, #216]	; (8018cc0 <xTaskIncrementTick+0x150>)
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	681b      	ldr	r3, [r3, #0]
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d104      	bne.n	8018bf8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018bee:	4b37      	ldr	r3, [pc, #220]	; (8018ccc <xTaskIncrementTick+0x15c>)
 8018bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018bf4:	601a      	str	r2, [r3, #0]
					break;
 8018bf6:	e03f      	b.n	8018c78 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018bf8:	4b31      	ldr	r3, [pc, #196]	; (8018cc0 <xTaskIncrementTick+0x150>)
 8018bfa:	681b      	ldr	r3, [r3, #0]
 8018bfc:	68db      	ldr	r3, [r3, #12]
 8018bfe:	68db      	ldr	r3, [r3, #12]
 8018c00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018c02:	68bb      	ldr	r3, [r7, #8]
 8018c04:	685b      	ldr	r3, [r3, #4]
 8018c06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018c08:	693a      	ldr	r2, [r7, #16]
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	429a      	cmp	r2, r3
 8018c0e:	d203      	bcs.n	8018c18 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018c10:	4a2e      	ldr	r2, [pc, #184]	; (8018ccc <xTaskIncrementTick+0x15c>)
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018c16:	e02f      	b.n	8018c78 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018c18:	68bb      	ldr	r3, [r7, #8]
 8018c1a:	3304      	adds	r3, #4
 8018c1c:	4618      	mov	r0, r3
 8018c1e:	f7fe fec1 	bl	80179a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018c22:	68bb      	ldr	r3, [r7, #8]
 8018c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d004      	beq.n	8018c34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018c2a:	68bb      	ldr	r3, [r7, #8]
 8018c2c:	3318      	adds	r3, #24
 8018c2e:	4618      	mov	r0, r3
 8018c30:	f7fe feb8 	bl	80179a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018c34:	68bb      	ldr	r3, [r7, #8]
 8018c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c38:	4b25      	ldr	r3, [pc, #148]	; (8018cd0 <xTaskIncrementTick+0x160>)
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	429a      	cmp	r2, r3
 8018c3e:	d903      	bls.n	8018c48 <xTaskIncrementTick+0xd8>
 8018c40:	68bb      	ldr	r3, [r7, #8]
 8018c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c44:	4a22      	ldr	r2, [pc, #136]	; (8018cd0 <xTaskIncrementTick+0x160>)
 8018c46:	6013      	str	r3, [r2, #0]
 8018c48:	68bb      	ldr	r3, [r7, #8]
 8018c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c4c:	4613      	mov	r3, r2
 8018c4e:	009b      	lsls	r3, r3, #2
 8018c50:	4413      	add	r3, r2
 8018c52:	009b      	lsls	r3, r3, #2
 8018c54:	4a1f      	ldr	r2, [pc, #124]	; (8018cd4 <xTaskIncrementTick+0x164>)
 8018c56:	441a      	add	r2, r3
 8018c58:	68bb      	ldr	r3, [r7, #8]
 8018c5a:	3304      	adds	r3, #4
 8018c5c:	4619      	mov	r1, r3
 8018c5e:	4610      	mov	r0, r2
 8018c60:	f7fe fe43 	bl	80178ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018c64:	68bb      	ldr	r3, [r7, #8]
 8018c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c68:	4b1b      	ldr	r3, [pc, #108]	; (8018cd8 <xTaskIncrementTick+0x168>)
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c6e:	429a      	cmp	r2, r3
 8018c70:	d3b8      	bcc.n	8018be4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8018c72:	2301      	movs	r3, #1
 8018c74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018c76:	e7b5      	b.n	8018be4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018c78:	4b17      	ldr	r3, [pc, #92]	; (8018cd8 <xTaskIncrementTick+0x168>)
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c7e:	4915      	ldr	r1, [pc, #84]	; (8018cd4 <xTaskIncrementTick+0x164>)
 8018c80:	4613      	mov	r3, r2
 8018c82:	009b      	lsls	r3, r3, #2
 8018c84:	4413      	add	r3, r2
 8018c86:	009b      	lsls	r3, r3, #2
 8018c88:	440b      	add	r3, r1
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	2b01      	cmp	r3, #1
 8018c8e:	d901      	bls.n	8018c94 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8018c90:	2301      	movs	r3, #1
 8018c92:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018c94:	4b11      	ldr	r3, [pc, #68]	; (8018cdc <xTaskIncrementTick+0x16c>)
 8018c96:	681b      	ldr	r3, [r3, #0]
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	d007      	beq.n	8018cac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8018c9c:	2301      	movs	r3, #1
 8018c9e:	617b      	str	r3, [r7, #20]
 8018ca0:	e004      	b.n	8018cac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018ca2:	4b0f      	ldr	r3, [pc, #60]	; (8018ce0 <xTaskIncrementTick+0x170>)
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	3301      	adds	r3, #1
 8018ca8:	4a0d      	ldr	r2, [pc, #52]	; (8018ce0 <xTaskIncrementTick+0x170>)
 8018caa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8018cac:	697b      	ldr	r3, [r7, #20]
}
 8018cae:	4618      	mov	r0, r3
 8018cb0:	3718      	adds	r7, #24
 8018cb2:	46bd      	mov	sp, r7
 8018cb4:	bd80      	pop	{r7, pc}
 8018cb6:	bf00      	nop
 8018cb8:	200021a4 	.word	0x200021a4
 8018cbc:	20002180 	.word	0x20002180
 8018cc0:	20002134 	.word	0x20002134
 8018cc4:	20002138 	.word	0x20002138
 8018cc8:	20002194 	.word	0x20002194
 8018ccc:	2000219c 	.word	0x2000219c
 8018cd0:	20002184 	.word	0x20002184
 8018cd4:	20001cac 	.word	0x20001cac
 8018cd8:	20001ca8 	.word	0x20001ca8
 8018cdc:	20002190 	.word	0x20002190
 8018ce0:	2000218c 	.word	0x2000218c

08018ce4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018ce4:	b480      	push	{r7}
 8018ce6:	b085      	sub	sp, #20
 8018ce8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018cea:	4b28      	ldr	r3, [pc, #160]	; (8018d8c <vTaskSwitchContext+0xa8>)
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d003      	beq.n	8018cfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018cf2:	4b27      	ldr	r3, [pc, #156]	; (8018d90 <vTaskSwitchContext+0xac>)
 8018cf4:	2201      	movs	r2, #1
 8018cf6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018cf8:	e041      	b.n	8018d7e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8018cfa:	4b25      	ldr	r3, [pc, #148]	; (8018d90 <vTaskSwitchContext+0xac>)
 8018cfc:	2200      	movs	r2, #0
 8018cfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018d00:	4b24      	ldr	r3, [pc, #144]	; (8018d94 <vTaskSwitchContext+0xb0>)
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	60fb      	str	r3, [r7, #12]
 8018d06:	e010      	b.n	8018d2a <vTaskSwitchContext+0x46>
 8018d08:	68fb      	ldr	r3, [r7, #12]
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d10a      	bne.n	8018d24 <vTaskSwitchContext+0x40>
	__asm volatile
 8018d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d12:	f383 8811 	msr	BASEPRI, r3
 8018d16:	f3bf 8f6f 	isb	sy
 8018d1a:	f3bf 8f4f 	dsb	sy
 8018d1e:	607b      	str	r3, [r7, #4]
}
 8018d20:	bf00      	nop
 8018d22:	e7fe      	b.n	8018d22 <vTaskSwitchContext+0x3e>
 8018d24:	68fb      	ldr	r3, [r7, #12]
 8018d26:	3b01      	subs	r3, #1
 8018d28:	60fb      	str	r3, [r7, #12]
 8018d2a:	491b      	ldr	r1, [pc, #108]	; (8018d98 <vTaskSwitchContext+0xb4>)
 8018d2c:	68fa      	ldr	r2, [r7, #12]
 8018d2e:	4613      	mov	r3, r2
 8018d30:	009b      	lsls	r3, r3, #2
 8018d32:	4413      	add	r3, r2
 8018d34:	009b      	lsls	r3, r3, #2
 8018d36:	440b      	add	r3, r1
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	d0e4      	beq.n	8018d08 <vTaskSwitchContext+0x24>
 8018d3e:	68fa      	ldr	r2, [r7, #12]
 8018d40:	4613      	mov	r3, r2
 8018d42:	009b      	lsls	r3, r3, #2
 8018d44:	4413      	add	r3, r2
 8018d46:	009b      	lsls	r3, r3, #2
 8018d48:	4a13      	ldr	r2, [pc, #76]	; (8018d98 <vTaskSwitchContext+0xb4>)
 8018d4a:	4413      	add	r3, r2
 8018d4c:	60bb      	str	r3, [r7, #8]
 8018d4e:	68bb      	ldr	r3, [r7, #8]
 8018d50:	685b      	ldr	r3, [r3, #4]
 8018d52:	685a      	ldr	r2, [r3, #4]
 8018d54:	68bb      	ldr	r3, [r7, #8]
 8018d56:	605a      	str	r2, [r3, #4]
 8018d58:	68bb      	ldr	r3, [r7, #8]
 8018d5a:	685a      	ldr	r2, [r3, #4]
 8018d5c:	68bb      	ldr	r3, [r7, #8]
 8018d5e:	3308      	adds	r3, #8
 8018d60:	429a      	cmp	r2, r3
 8018d62:	d104      	bne.n	8018d6e <vTaskSwitchContext+0x8a>
 8018d64:	68bb      	ldr	r3, [r7, #8]
 8018d66:	685b      	ldr	r3, [r3, #4]
 8018d68:	685a      	ldr	r2, [r3, #4]
 8018d6a:	68bb      	ldr	r3, [r7, #8]
 8018d6c:	605a      	str	r2, [r3, #4]
 8018d6e:	68bb      	ldr	r3, [r7, #8]
 8018d70:	685b      	ldr	r3, [r3, #4]
 8018d72:	68db      	ldr	r3, [r3, #12]
 8018d74:	4a09      	ldr	r2, [pc, #36]	; (8018d9c <vTaskSwitchContext+0xb8>)
 8018d76:	6013      	str	r3, [r2, #0]
 8018d78:	4a06      	ldr	r2, [pc, #24]	; (8018d94 <vTaskSwitchContext+0xb0>)
 8018d7a:	68fb      	ldr	r3, [r7, #12]
 8018d7c:	6013      	str	r3, [r2, #0]
}
 8018d7e:	bf00      	nop
 8018d80:	3714      	adds	r7, #20
 8018d82:	46bd      	mov	sp, r7
 8018d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d88:	4770      	bx	lr
 8018d8a:	bf00      	nop
 8018d8c:	200021a4 	.word	0x200021a4
 8018d90:	20002190 	.word	0x20002190
 8018d94:	20002184 	.word	0x20002184
 8018d98:	20001cac 	.word	0x20001cac
 8018d9c:	20001ca8 	.word	0x20001ca8

08018da0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018da0:	b580      	push	{r7, lr}
 8018da2:	b084      	sub	sp, #16
 8018da4:	af00      	add	r7, sp, #0
 8018da6:	6078      	str	r0, [r7, #4]
 8018da8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	d10a      	bne.n	8018dc6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8018db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018db4:	f383 8811 	msr	BASEPRI, r3
 8018db8:	f3bf 8f6f 	isb	sy
 8018dbc:	f3bf 8f4f 	dsb	sy
 8018dc0:	60fb      	str	r3, [r7, #12]
}
 8018dc2:	bf00      	nop
 8018dc4:	e7fe      	b.n	8018dc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018dc6:	4b07      	ldr	r3, [pc, #28]	; (8018de4 <vTaskPlaceOnEventList+0x44>)
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	3318      	adds	r3, #24
 8018dcc:	4619      	mov	r1, r3
 8018dce:	6878      	ldr	r0, [r7, #4]
 8018dd0:	f7fe fdaf 	bl	8017932 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018dd4:	2101      	movs	r1, #1
 8018dd6:	6838      	ldr	r0, [r7, #0]
 8018dd8:	f000 fa7c 	bl	80192d4 <prvAddCurrentTaskToDelayedList>
}
 8018ddc:	bf00      	nop
 8018dde:	3710      	adds	r7, #16
 8018de0:	46bd      	mov	sp, r7
 8018de2:	bd80      	pop	{r7, pc}
 8018de4:	20001ca8 	.word	0x20001ca8

08018de8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018de8:	b580      	push	{r7, lr}
 8018dea:	b086      	sub	sp, #24
 8018dec:	af00      	add	r7, sp, #0
 8018dee:	60f8      	str	r0, [r7, #12]
 8018df0:	60b9      	str	r1, [r7, #8]
 8018df2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018df4:	68fb      	ldr	r3, [r7, #12]
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d10a      	bne.n	8018e10 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8018dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018dfe:	f383 8811 	msr	BASEPRI, r3
 8018e02:	f3bf 8f6f 	isb	sy
 8018e06:	f3bf 8f4f 	dsb	sy
 8018e0a:	617b      	str	r3, [r7, #20]
}
 8018e0c:	bf00      	nop
 8018e0e:	e7fe      	b.n	8018e0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018e10:	4b0a      	ldr	r3, [pc, #40]	; (8018e3c <vTaskPlaceOnEventListRestricted+0x54>)
 8018e12:	681b      	ldr	r3, [r3, #0]
 8018e14:	3318      	adds	r3, #24
 8018e16:	4619      	mov	r1, r3
 8018e18:	68f8      	ldr	r0, [r7, #12]
 8018e1a:	f7fe fd66 	bl	80178ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d002      	beq.n	8018e2a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8018e24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018e28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8018e2a:	6879      	ldr	r1, [r7, #4]
 8018e2c:	68b8      	ldr	r0, [r7, #8]
 8018e2e:	f000 fa51 	bl	80192d4 <prvAddCurrentTaskToDelayedList>
	}
 8018e32:	bf00      	nop
 8018e34:	3718      	adds	r7, #24
 8018e36:	46bd      	mov	sp, r7
 8018e38:	bd80      	pop	{r7, pc}
 8018e3a:	bf00      	nop
 8018e3c:	20001ca8 	.word	0x20001ca8

08018e40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018e40:	b580      	push	{r7, lr}
 8018e42:	b086      	sub	sp, #24
 8018e44:	af00      	add	r7, sp, #0
 8018e46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	68db      	ldr	r3, [r3, #12]
 8018e4c:	68db      	ldr	r3, [r3, #12]
 8018e4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018e50:	693b      	ldr	r3, [r7, #16]
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	d10a      	bne.n	8018e6c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8018e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e5a:	f383 8811 	msr	BASEPRI, r3
 8018e5e:	f3bf 8f6f 	isb	sy
 8018e62:	f3bf 8f4f 	dsb	sy
 8018e66:	60fb      	str	r3, [r7, #12]
}
 8018e68:	bf00      	nop
 8018e6a:	e7fe      	b.n	8018e6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018e6c:	693b      	ldr	r3, [r7, #16]
 8018e6e:	3318      	adds	r3, #24
 8018e70:	4618      	mov	r0, r3
 8018e72:	f7fe fd97 	bl	80179a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018e76:	4b1e      	ldr	r3, [pc, #120]	; (8018ef0 <xTaskRemoveFromEventList+0xb0>)
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	2b00      	cmp	r3, #0
 8018e7c:	d11d      	bne.n	8018eba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018e7e:	693b      	ldr	r3, [r7, #16]
 8018e80:	3304      	adds	r3, #4
 8018e82:	4618      	mov	r0, r3
 8018e84:	f7fe fd8e 	bl	80179a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018e88:	693b      	ldr	r3, [r7, #16]
 8018e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e8c:	4b19      	ldr	r3, [pc, #100]	; (8018ef4 <xTaskRemoveFromEventList+0xb4>)
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	429a      	cmp	r2, r3
 8018e92:	d903      	bls.n	8018e9c <xTaskRemoveFromEventList+0x5c>
 8018e94:	693b      	ldr	r3, [r7, #16]
 8018e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e98:	4a16      	ldr	r2, [pc, #88]	; (8018ef4 <xTaskRemoveFromEventList+0xb4>)
 8018e9a:	6013      	str	r3, [r2, #0]
 8018e9c:	693b      	ldr	r3, [r7, #16]
 8018e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ea0:	4613      	mov	r3, r2
 8018ea2:	009b      	lsls	r3, r3, #2
 8018ea4:	4413      	add	r3, r2
 8018ea6:	009b      	lsls	r3, r3, #2
 8018ea8:	4a13      	ldr	r2, [pc, #76]	; (8018ef8 <xTaskRemoveFromEventList+0xb8>)
 8018eaa:	441a      	add	r2, r3
 8018eac:	693b      	ldr	r3, [r7, #16]
 8018eae:	3304      	adds	r3, #4
 8018eb0:	4619      	mov	r1, r3
 8018eb2:	4610      	mov	r0, r2
 8018eb4:	f7fe fd19 	bl	80178ea <vListInsertEnd>
 8018eb8:	e005      	b.n	8018ec6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018eba:	693b      	ldr	r3, [r7, #16]
 8018ebc:	3318      	adds	r3, #24
 8018ebe:	4619      	mov	r1, r3
 8018ec0:	480e      	ldr	r0, [pc, #56]	; (8018efc <xTaskRemoveFromEventList+0xbc>)
 8018ec2:	f7fe fd12 	bl	80178ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018ec6:	693b      	ldr	r3, [r7, #16]
 8018ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018eca:	4b0d      	ldr	r3, [pc, #52]	; (8018f00 <xTaskRemoveFromEventList+0xc0>)
 8018ecc:	681b      	ldr	r3, [r3, #0]
 8018ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ed0:	429a      	cmp	r2, r3
 8018ed2:	d905      	bls.n	8018ee0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018ed4:	2301      	movs	r3, #1
 8018ed6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018ed8:	4b0a      	ldr	r3, [pc, #40]	; (8018f04 <xTaskRemoveFromEventList+0xc4>)
 8018eda:	2201      	movs	r2, #1
 8018edc:	601a      	str	r2, [r3, #0]
 8018ede:	e001      	b.n	8018ee4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8018ee0:	2300      	movs	r3, #0
 8018ee2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018ee4:	697b      	ldr	r3, [r7, #20]
}
 8018ee6:	4618      	mov	r0, r3
 8018ee8:	3718      	adds	r7, #24
 8018eea:	46bd      	mov	sp, r7
 8018eec:	bd80      	pop	{r7, pc}
 8018eee:	bf00      	nop
 8018ef0:	200021a4 	.word	0x200021a4
 8018ef4:	20002184 	.word	0x20002184
 8018ef8:	20001cac 	.word	0x20001cac
 8018efc:	2000213c 	.word	0x2000213c
 8018f00:	20001ca8 	.word	0x20001ca8
 8018f04:	20002190 	.word	0x20002190

08018f08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018f08:	b480      	push	{r7}
 8018f0a:	b083      	sub	sp, #12
 8018f0c:	af00      	add	r7, sp, #0
 8018f0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018f10:	4b06      	ldr	r3, [pc, #24]	; (8018f2c <vTaskInternalSetTimeOutState+0x24>)
 8018f12:	681a      	ldr	r2, [r3, #0]
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018f18:	4b05      	ldr	r3, [pc, #20]	; (8018f30 <vTaskInternalSetTimeOutState+0x28>)
 8018f1a:	681a      	ldr	r2, [r3, #0]
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	605a      	str	r2, [r3, #4]
}
 8018f20:	bf00      	nop
 8018f22:	370c      	adds	r7, #12
 8018f24:	46bd      	mov	sp, r7
 8018f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f2a:	4770      	bx	lr
 8018f2c:	20002194 	.word	0x20002194
 8018f30:	20002180 	.word	0x20002180

08018f34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018f34:	b580      	push	{r7, lr}
 8018f36:	b088      	sub	sp, #32
 8018f38:	af00      	add	r7, sp, #0
 8018f3a:	6078      	str	r0, [r7, #4]
 8018f3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	d10a      	bne.n	8018f5a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8018f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f48:	f383 8811 	msr	BASEPRI, r3
 8018f4c:	f3bf 8f6f 	isb	sy
 8018f50:	f3bf 8f4f 	dsb	sy
 8018f54:	613b      	str	r3, [r7, #16]
}
 8018f56:	bf00      	nop
 8018f58:	e7fe      	b.n	8018f58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8018f5a:	683b      	ldr	r3, [r7, #0]
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d10a      	bne.n	8018f76 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8018f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f64:	f383 8811 	msr	BASEPRI, r3
 8018f68:	f3bf 8f6f 	isb	sy
 8018f6c:	f3bf 8f4f 	dsb	sy
 8018f70:	60fb      	str	r3, [r7, #12]
}
 8018f72:	bf00      	nop
 8018f74:	e7fe      	b.n	8018f74 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8018f76:	f000 fe7d 	bl	8019c74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018f7a:	4b1d      	ldr	r3, [pc, #116]	; (8018ff0 <xTaskCheckForTimeOut+0xbc>)
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	685b      	ldr	r3, [r3, #4]
 8018f84:	69ba      	ldr	r2, [r7, #24]
 8018f86:	1ad3      	subs	r3, r2, r3
 8018f88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8018f8a:	683b      	ldr	r3, [r7, #0]
 8018f8c:	681b      	ldr	r3, [r3, #0]
 8018f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018f92:	d102      	bne.n	8018f9a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018f94:	2300      	movs	r3, #0
 8018f96:	61fb      	str	r3, [r7, #28]
 8018f98:	e023      	b.n	8018fe2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	681a      	ldr	r2, [r3, #0]
 8018f9e:	4b15      	ldr	r3, [pc, #84]	; (8018ff4 <xTaskCheckForTimeOut+0xc0>)
 8018fa0:	681b      	ldr	r3, [r3, #0]
 8018fa2:	429a      	cmp	r2, r3
 8018fa4:	d007      	beq.n	8018fb6 <xTaskCheckForTimeOut+0x82>
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	685b      	ldr	r3, [r3, #4]
 8018faa:	69ba      	ldr	r2, [r7, #24]
 8018fac:	429a      	cmp	r2, r3
 8018fae:	d302      	bcc.n	8018fb6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018fb0:	2301      	movs	r3, #1
 8018fb2:	61fb      	str	r3, [r7, #28]
 8018fb4:	e015      	b.n	8018fe2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018fb6:	683b      	ldr	r3, [r7, #0]
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	697a      	ldr	r2, [r7, #20]
 8018fbc:	429a      	cmp	r2, r3
 8018fbe:	d20b      	bcs.n	8018fd8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018fc0:	683b      	ldr	r3, [r7, #0]
 8018fc2:	681a      	ldr	r2, [r3, #0]
 8018fc4:	697b      	ldr	r3, [r7, #20]
 8018fc6:	1ad2      	subs	r2, r2, r3
 8018fc8:	683b      	ldr	r3, [r7, #0]
 8018fca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018fcc:	6878      	ldr	r0, [r7, #4]
 8018fce:	f7ff ff9b 	bl	8018f08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018fd2:	2300      	movs	r3, #0
 8018fd4:	61fb      	str	r3, [r7, #28]
 8018fd6:	e004      	b.n	8018fe2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8018fd8:	683b      	ldr	r3, [r7, #0]
 8018fda:	2200      	movs	r2, #0
 8018fdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018fde:	2301      	movs	r3, #1
 8018fe0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018fe2:	f000 fe77 	bl	8019cd4 <vPortExitCritical>

	return xReturn;
 8018fe6:	69fb      	ldr	r3, [r7, #28]
}
 8018fe8:	4618      	mov	r0, r3
 8018fea:	3720      	adds	r7, #32
 8018fec:	46bd      	mov	sp, r7
 8018fee:	bd80      	pop	{r7, pc}
 8018ff0:	20002180 	.word	0x20002180
 8018ff4:	20002194 	.word	0x20002194

08018ff8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018ff8:	b480      	push	{r7}
 8018ffa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018ffc:	4b03      	ldr	r3, [pc, #12]	; (801900c <vTaskMissedYield+0x14>)
 8018ffe:	2201      	movs	r2, #1
 8019000:	601a      	str	r2, [r3, #0]
}
 8019002:	bf00      	nop
 8019004:	46bd      	mov	sp, r7
 8019006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801900a:	4770      	bx	lr
 801900c:	20002190 	.word	0x20002190

08019010 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8019010:	b580      	push	{r7, lr}
 8019012:	b082      	sub	sp, #8
 8019014:	af00      	add	r7, sp, #0
 8019016:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8019018:	f000 f852 	bl	80190c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801901c:	4b06      	ldr	r3, [pc, #24]	; (8019038 <prvIdleTask+0x28>)
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	2b01      	cmp	r3, #1
 8019022:	d9f9      	bls.n	8019018 <prvIdleTask+0x8>
			{
				taskYIELD();
 8019024:	4b05      	ldr	r3, [pc, #20]	; (801903c <prvIdleTask+0x2c>)
 8019026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801902a:	601a      	str	r2, [r3, #0]
 801902c:	f3bf 8f4f 	dsb	sy
 8019030:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8019034:	e7f0      	b.n	8019018 <prvIdleTask+0x8>
 8019036:	bf00      	nop
 8019038:	20001cac 	.word	0x20001cac
 801903c:	e000ed04 	.word	0xe000ed04

08019040 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8019040:	b580      	push	{r7, lr}
 8019042:	b082      	sub	sp, #8
 8019044:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019046:	2300      	movs	r3, #0
 8019048:	607b      	str	r3, [r7, #4]
 801904a:	e00c      	b.n	8019066 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801904c:	687a      	ldr	r2, [r7, #4]
 801904e:	4613      	mov	r3, r2
 8019050:	009b      	lsls	r3, r3, #2
 8019052:	4413      	add	r3, r2
 8019054:	009b      	lsls	r3, r3, #2
 8019056:	4a12      	ldr	r2, [pc, #72]	; (80190a0 <prvInitialiseTaskLists+0x60>)
 8019058:	4413      	add	r3, r2
 801905a:	4618      	mov	r0, r3
 801905c:	f7fe fc18 	bl	8017890 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	3301      	adds	r3, #1
 8019064:	607b      	str	r3, [r7, #4]
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	2b37      	cmp	r3, #55	; 0x37
 801906a:	d9ef      	bls.n	801904c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801906c:	480d      	ldr	r0, [pc, #52]	; (80190a4 <prvInitialiseTaskLists+0x64>)
 801906e:	f7fe fc0f 	bl	8017890 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8019072:	480d      	ldr	r0, [pc, #52]	; (80190a8 <prvInitialiseTaskLists+0x68>)
 8019074:	f7fe fc0c 	bl	8017890 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8019078:	480c      	ldr	r0, [pc, #48]	; (80190ac <prvInitialiseTaskLists+0x6c>)
 801907a:	f7fe fc09 	bl	8017890 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801907e:	480c      	ldr	r0, [pc, #48]	; (80190b0 <prvInitialiseTaskLists+0x70>)
 8019080:	f7fe fc06 	bl	8017890 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8019084:	480b      	ldr	r0, [pc, #44]	; (80190b4 <prvInitialiseTaskLists+0x74>)
 8019086:	f7fe fc03 	bl	8017890 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801908a:	4b0b      	ldr	r3, [pc, #44]	; (80190b8 <prvInitialiseTaskLists+0x78>)
 801908c:	4a05      	ldr	r2, [pc, #20]	; (80190a4 <prvInitialiseTaskLists+0x64>)
 801908e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8019090:	4b0a      	ldr	r3, [pc, #40]	; (80190bc <prvInitialiseTaskLists+0x7c>)
 8019092:	4a05      	ldr	r2, [pc, #20]	; (80190a8 <prvInitialiseTaskLists+0x68>)
 8019094:	601a      	str	r2, [r3, #0]
}
 8019096:	bf00      	nop
 8019098:	3708      	adds	r7, #8
 801909a:	46bd      	mov	sp, r7
 801909c:	bd80      	pop	{r7, pc}
 801909e:	bf00      	nop
 80190a0:	20001cac 	.word	0x20001cac
 80190a4:	2000210c 	.word	0x2000210c
 80190a8:	20002120 	.word	0x20002120
 80190ac:	2000213c 	.word	0x2000213c
 80190b0:	20002150 	.word	0x20002150
 80190b4:	20002168 	.word	0x20002168
 80190b8:	20002134 	.word	0x20002134
 80190bc:	20002138 	.word	0x20002138

080190c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80190c0:	b580      	push	{r7, lr}
 80190c2:	b082      	sub	sp, #8
 80190c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80190c6:	e019      	b.n	80190fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80190c8:	f000 fdd4 	bl	8019c74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80190cc:	4b10      	ldr	r3, [pc, #64]	; (8019110 <prvCheckTasksWaitingTermination+0x50>)
 80190ce:	68db      	ldr	r3, [r3, #12]
 80190d0:	68db      	ldr	r3, [r3, #12]
 80190d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	3304      	adds	r3, #4
 80190d8:	4618      	mov	r0, r3
 80190da:	f7fe fc63 	bl	80179a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80190de:	4b0d      	ldr	r3, [pc, #52]	; (8019114 <prvCheckTasksWaitingTermination+0x54>)
 80190e0:	681b      	ldr	r3, [r3, #0]
 80190e2:	3b01      	subs	r3, #1
 80190e4:	4a0b      	ldr	r2, [pc, #44]	; (8019114 <prvCheckTasksWaitingTermination+0x54>)
 80190e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80190e8:	4b0b      	ldr	r3, [pc, #44]	; (8019118 <prvCheckTasksWaitingTermination+0x58>)
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	3b01      	subs	r3, #1
 80190ee:	4a0a      	ldr	r2, [pc, #40]	; (8019118 <prvCheckTasksWaitingTermination+0x58>)
 80190f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80190f2:	f000 fdef 	bl	8019cd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80190f6:	6878      	ldr	r0, [r7, #4]
 80190f8:	f000 f810 	bl	801911c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80190fc:	4b06      	ldr	r3, [pc, #24]	; (8019118 <prvCheckTasksWaitingTermination+0x58>)
 80190fe:	681b      	ldr	r3, [r3, #0]
 8019100:	2b00      	cmp	r3, #0
 8019102:	d1e1      	bne.n	80190c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8019104:	bf00      	nop
 8019106:	bf00      	nop
 8019108:	3708      	adds	r7, #8
 801910a:	46bd      	mov	sp, r7
 801910c:	bd80      	pop	{r7, pc}
 801910e:	bf00      	nop
 8019110:	20002150 	.word	0x20002150
 8019114:	2000217c 	.word	0x2000217c
 8019118:	20002164 	.word	0x20002164

0801911c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801911c:	b580      	push	{r7, lr}
 801911e:	b084      	sub	sp, #16
 8019120:	af00      	add	r7, sp, #0
 8019122:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801912a:	2b00      	cmp	r3, #0
 801912c:	d108      	bne.n	8019140 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801912e:	687b      	ldr	r3, [r7, #4]
 8019130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019132:	4618      	mov	r0, r3
 8019134:	f000 ff8c 	bl	801a050 <vPortFree>
				vPortFree( pxTCB );
 8019138:	6878      	ldr	r0, [r7, #4]
 801913a:	f000 ff89 	bl	801a050 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801913e:	e018      	b.n	8019172 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8019146:	2b01      	cmp	r3, #1
 8019148:	d103      	bne.n	8019152 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801914a:	6878      	ldr	r0, [r7, #4]
 801914c:	f000 ff80 	bl	801a050 <vPortFree>
	}
 8019150:	e00f      	b.n	8019172 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8019158:	2b02      	cmp	r3, #2
 801915a:	d00a      	beq.n	8019172 <prvDeleteTCB+0x56>
	__asm volatile
 801915c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019160:	f383 8811 	msr	BASEPRI, r3
 8019164:	f3bf 8f6f 	isb	sy
 8019168:	f3bf 8f4f 	dsb	sy
 801916c:	60fb      	str	r3, [r7, #12]
}
 801916e:	bf00      	nop
 8019170:	e7fe      	b.n	8019170 <prvDeleteTCB+0x54>
	}
 8019172:	bf00      	nop
 8019174:	3710      	adds	r7, #16
 8019176:	46bd      	mov	sp, r7
 8019178:	bd80      	pop	{r7, pc}
	...

0801917c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801917c:	b480      	push	{r7}
 801917e:	b083      	sub	sp, #12
 8019180:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019182:	4b0c      	ldr	r3, [pc, #48]	; (80191b4 <prvResetNextTaskUnblockTime+0x38>)
 8019184:	681b      	ldr	r3, [r3, #0]
 8019186:	681b      	ldr	r3, [r3, #0]
 8019188:	2b00      	cmp	r3, #0
 801918a:	d104      	bne.n	8019196 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801918c:	4b0a      	ldr	r3, [pc, #40]	; (80191b8 <prvResetNextTaskUnblockTime+0x3c>)
 801918e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019192:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8019194:	e008      	b.n	80191a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019196:	4b07      	ldr	r3, [pc, #28]	; (80191b4 <prvResetNextTaskUnblockTime+0x38>)
 8019198:	681b      	ldr	r3, [r3, #0]
 801919a:	68db      	ldr	r3, [r3, #12]
 801919c:	68db      	ldr	r3, [r3, #12]
 801919e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	685b      	ldr	r3, [r3, #4]
 80191a4:	4a04      	ldr	r2, [pc, #16]	; (80191b8 <prvResetNextTaskUnblockTime+0x3c>)
 80191a6:	6013      	str	r3, [r2, #0]
}
 80191a8:	bf00      	nop
 80191aa:	370c      	adds	r7, #12
 80191ac:	46bd      	mov	sp, r7
 80191ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191b2:	4770      	bx	lr
 80191b4:	20002134 	.word	0x20002134
 80191b8:	2000219c 	.word	0x2000219c

080191bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80191bc:	b480      	push	{r7}
 80191be:	b083      	sub	sp, #12
 80191c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80191c2:	4b0b      	ldr	r3, [pc, #44]	; (80191f0 <xTaskGetSchedulerState+0x34>)
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	d102      	bne.n	80191d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80191ca:	2301      	movs	r3, #1
 80191cc:	607b      	str	r3, [r7, #4]
 80191ce:	e008      	b.n	80191e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80191d0:	4b08      	ldr	r3, [pc, #32]	; (80191f4 <xTaskGetSchedulerState+0x38>)
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	2b00      	cmp	r3, #0
 80191d6:	d102      	bne.n	80191de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80191d8:	2302      	movs	r3, #2
 80191da:	607b      	str	r3, [r7, #4]
 80191dc:	e001      	b.n	80191e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80191de:	2300      	movs	r3, #0
 80191e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80191e2:	687b      	ldr	r3, [r7, #4]
	}
 80191e4:	4618      	mov	r0, r3
 80191e6:	370c      	adds	r7, #12
 80191e8:	46bd      	mov	sp, r7
 80191ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ee:	4770      	bx	lr
 80191f0:	20002188 	.word	0x20002188
 80191f4:	200021a4 	.word	0x200021a4

080191f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80191f8:	b580      	push	{r7, lr}
 80191fa:	b086      	sub	sp, #24
 80191fc:	af00      	add	r7, sp, #0
 80191fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8019204:	2300      	movs	r3, #0
 8019206:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	2b00      	cmp	r3, #0
 801920c:	d056      	beq.n	80192bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801920e:	4b2e      	ldr	r3, [pc, #184]	; (80192c8 <xTaskPriorityDisinherit+0xd0>)
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	693a      	ldr	r2, [r7, #16]
 8019214:	429a      	cmp	r2, r3
 8019216:	d00a      	beq.n	801922e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8019218:	f04f 0350 	mov.w	r3, #80	; 0x50
 801921c:	f383 8811 	msr	BASEPRI, r3
 8019220:	f3bf 8f6f 	isb	sy
 8019224:	f3bf 8f4f 	dsb	sy
 8019228:	60fb      	str	r3, [r7, #12]
}
 801922a:	bf00      	nop
 801922c:	e7fe      	b.n	801922c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801922e:	693b      	ldr	r3, [r7, #16]
 8019230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019232:	2b00      	cmp	r3, #0
 8019234:	d10a      	bne.n	801924c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8019236:	f04f 0350 	mov.w	r3, #80	; 0x50
 801923a:	f383 8811 	msr	BASEPRI, r3
 801923e:	f3bf 8f6f 	isb	sy
 8019242:	f3bf 8f4f 	dsb	sy
 8019246:	60bb      	str	r3, [r7, #8]
}
 8019248:	bf00      	nop
 801924a:	e7fe      	b.n	801924a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801924c:	693b      	ldr	r3, [r7, #16]
 801924e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019250:	1e5a      	subs	r2, r3, #1
 8019252:	693b      	ldr	r3, [r7, #16]
 8019254:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8019256:	693b      	ldr	r3, [r7, #16]
 8019258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801925a:	693b      	ldr	r3, [r7, #16]
 801925c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801925e:	429a      	cmp	r2, r3
 8019260:	d02c      	beq.n	80192bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8019262:	693b      	ldr	r3, [r7, #16]
 8019264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019266:	2b00      	cmp	r3, #0
 8019268:	d128      	bne.n	80192bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801926a:	693b      	ldr	r3, [r7, #16]
 801926c:	3304      	adds	r3, #4
 801926e:	4618      	mov	r0, r3
 8019270:	f7fe fb98 	bl	80179a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8019274:	693b      	ldr	r3, [r7, #16]
 8019276:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019278:	693b      	ldr	r3, [r7, #16]
 801927a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801927c:	693b      	ldr	r3, [r7, #16]
 801927e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019280:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8019284:	693b      	ldr	r3, [r7, #16]
 8019286:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8019288:	693b      	ldr	r3, [r7, #16]
 801928a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801928c:	4b0f      	ldr	r3, [pc, #60]	; (80192cc <xTaskPriorityDisinherit+0xd4>)
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	429a      	cmp	r2, r3
 8019292:	d903      	bls.n	801929c <xTaskPriorityDisinherit+0xa4>
 8019294:	693b      	ldr	r3, [r7, #16]
 8019296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019298:	4a0c      	ldr	r2, [pc, #48]	; (80192cc <xTaskPriorityDisinherit+0xd4>)
 801929a:	6013      	str	r3, [r2, #0]
 801929c:	693b      	ldr	r3, [r7, #16]
 801929e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80192a0:	4613      	mov	r3, r2
 80192a2:	009b      	lsls	r3, r3, #2
 80192a4:	4413      	add	r3, r2
 80192a6:	009b      	lsls	r3, r3, #2
 80192a8:	4a09      	ldr	r2, [pc, #36]	; (80192d0 <xTaskPriorityDisinherit+0xd8>)
 80192aa:	441a      	add	r2, r3
 80192ac:	693b      	ldr	r3, [r7, #16]
 80192ae:	3304      	adds	r3, #4
 80192b0:	4619      	mov	r1, r3
 80192b2:	4610      	mov	r0, r2
 80192b4:	f7fe fb19 	bl	80178ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80192b8:	2301      	movs	r3, #1
 80192ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80192bc:	697b      	ldr	r3, [r7, #20]
	}
 80192be:	4618      	mov	r0, r3
 80192c0:	3718      	adds	r7, #24
 80192c2:	46bd      	mov	sp, r7
 80192c4:	bd80      	pop	{r7, pc}
 80192c6:	bf00      	nop
 80192c8:	20001ca8 	.word	0x20001ca8
 80192cc:	20002184 	.word	0x20002184
 80192d0:	20001cac 	.word	0x20001cac

080192d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80192d4:	b580      	push	{r7, lr}
 80192d6:	b084      	sub	sp, #16
 80192d8:	af00      	add	r7, sp, #0
 80192da:	6078      	str	r0, [r7, #4]
 80192dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80192de:	4b21      	ldr	r3, [pc, #132]	; (8019364 <prvAddCurrentTaskToDelayedList+0x90>)
 80192e0:	681b      	ldr	r3, [r3, #0]
 80192e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80192e4:	4b20      	ldr	r3, [pc, #128]	; (8019368 <prvAddCurrentTaskToDelayedList+0x94>)
 80192e6:	681b      	ldr	r3, [r3, #0]
 80192e8:	3304      	adds	r3, #4
 80192ea:	4618      	mov	r0, r3
 80192ec:	f7fe fb5a 	bl	80179a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80192f6:	d10a      	bne.n	801930e <prvAddCurrentTaskToDelayedList+0x3a>
 80192f8:	683b      	ldr	r3, [r7, #0]
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d007      	beq.n	801930e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80192fe:	4b1a      	ldr	r3, [pc, #104]	; (8019368 <prvAddCurrentTaskToDelayedList+0x94>)
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	3304      	adds	r3, #4
 8019304:	4619      	mov	r1, r3
 8019306:	4819      	ldr	r0, [pc, #100]	; (801936c <prvAddCurrentTaskToDelayedList+0x98>)
 8019308:	f7fe faef 	bl	80178ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801930c:	e026      	b.n	801935c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801930e:	68fa      	ldr	r2, [r7, #12]
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	4413      	add	r3, r2
 8019314:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8019316:	4b14      	ldr	r3, [pc, #80]	; (8019368 <prvAddCurrentTaskToDelayedList+0x94>)
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	68ba      	ldr	r2, [r7, #8]
 801931c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801931e:	68ba      	ldr	r2, [r7, #8]
 8019320:	68fb      	ldr	r3, [r7, #12]
 8019322:	429a      	cmp	r2, r3
 8019324:	d209      	bcs.n	801933a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019326:	4b12      	ldr	r3, [pc, #72]	; (8019370 <prvAddCurrentTaskToDelayedList+0x9c>)
 8019328:	681a      	ldr	r2, [r3, #0]
 801932a:	4b0f      	ldr	r3, [pc, #60]	; (8019368 <prvAddCurrentTaskToDelayedList+0x94>)
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	3304      	adds	r3, #4
 8019330:	4619      	mov	r1, r3
 8019332:	4610      	mov	r0, r2
 8019334:	f7fe fafd 	bl	8017932 <vListInsert>
}
 8019338:	e010      	b.n	801935c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801933a:	4b0e      	ldr	r3, [pc, #56]	; (8019374 <prvAddCurrentTaskToDelayedList+0xa0>)
 801933c:	681a      	ldr	r2, [r3, #0]
 801933e:	4b0a      	ldr	r3, [pc, #40]	; (8019368 <prvAddCurrentTaskToDelayedList+0x94>)
 8019340:	681b      	ldr	r3, [r3, #0]
 8019342:	3304      	adds	r3, #4
 8019344:	4619      	mov	r1, r3
 8019346:	4610      	mov	r0, r2
 8019348:	f7fe faf3 	bl	8017932 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801934c:	4b0a      	ldr	r3, [pc, #40]	; (8019378 <prvAddCurrentTaskToDelayedList+0xa4>)
 801934e:	681b      	ldr	r3, [r3, #0]
 8019350:	68ba      	ldr	r2, [r7, #8]
 8019352:	429a      	cmp	r2, r3
 8019354:	d202      	bcs.n	801935c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8019356:	4a08      	ldr	r2, [pc, #32]	; (8019378 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019358:	68bb      	ldr	r3, [r7, #8]
 801935a:	6013      	str	r3, [r2, #0]
}
 801935c:	bf00      	nop
 801935e:	3710      	adds	r7, #16
 8019360:	46bd      	mov	sp, r7
 8019362:	bd80      	pop	{r7, pc}
 8019364:	20002180 	.word	0x20002180
 8019368:	20001ca8 	.word	0x20001ca8
 801936c:	20002168 	.word	0x20002168
 8019370:	20002138 	.word	0x20002138
 8019374:	20002134 	.word	0x20002134
 8019378:	2000219c 	.word	0x2000219c

0801937c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801937c:	b580      	push	{r7, lr}
 801937e:	b08a      	sub	sp, #40	; 0x28
 8019380:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8019382:	2300      	movs	r3, #0
 8019384:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8019386:	f000 fb07 	bl	8019998 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801938a:	4b1c      	ldr	r3, [pc, #112]	; (80193fc <xTimerCreateTimerTask+0x80>)
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	2b00      	cmp	r3, #0
 8019390:	d021      	beq.n	80193d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8019392:	2300      	movs	r3, #0
 8019394:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8019396:	2300      	movs	r3, #0
 8019398:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801939a:	1d3a      	adds	r2, r7, #4
 801939c:	f107 0108 	add.w	r1, r7, #8
 80193a0:	f107 030c 	add.w	r3, r7, #12
 80193a4:	4618      	mov	r0, r3
 80193a6:	f7fe fa59 	bl	801785c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80193aa:	6879      	ldr	r1, [r7, #4]
 80193ac:	68bb      	ldr	r3, [r7, #8]
 80193ae:	68fa      	ldr	r2, [r7, #12]
 80193b0:	9202      	str	r2, [sp, #8]
 80193b2:	9301      	str	r3, [sp, #4]
 80193b4:	2302      	movs	r3, #2
 80193b6:	9300      	str	r3, [sp, #0]
 80193b8:	2300      	movs	r3, #0
 80193ba:	460a      	mov	r2, r1
 80193bc:	4910      	ldr	r1, [pc, #64]	; (8019400 <xTimerCreateTimerTask+0x84>)
 80193be:	4811      	ldr	r0, [pc, #68]	; (8019404 <xTimerCreateTimerTask+0x88>)
 80193c0:	f7ff f806 	bl	80183d0 <xTaskCreateStatic>
 80193c4:	4603      	mov	r3, r0
 80193c6:	4a10      	ldr	r2, [pc, #64]	; (8019408 <xTimerCreateTimerTask+0x8c>)
 80193c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80193ca:	4b0f      	ldr	r3, [pc, #60]	; (8019408 <xTimerCreateTimerTask+0x8c>)
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	2b00      	cmp	r3, #0
 80193d0:	d001      	beq.n	80193d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80193d2:	2301      	movs	r3, #1
 80193d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80193d6:	697b      	ldr	r3, [r7, #20]
 80193d8:	2b00      	cmp	r3, #0
 80193da:	d10a      	bne.n	80193f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80193dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193e0:	f383 8811 	msr	BASEPRI, r3
 80193e4:	f3bf 8f6f 	isb	sy
 80193e8:	f3bf 8f4f 	dsb	sy
 80193ec:	613b      	str	r3, [r7, #16]
}
 80193ee:	bf00      	nop
 80193f0:	e7fe      	b.n	80193f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80193f2:	697b      	ldr	r3, [r7, #20]
}
 80193f4:	4618      	mov	r0, r3
 80193f6:	3718      	adds	r7, #24
 80193f8:	46bd      	mov	sp, r7
 80193fa:	bd80      	pop	{r7, pc}
 80193fc:	200021d8 	.word	0x200021d8
 8019400:	08020584 	.word	0x08020584
 8019404:	08019541 	.word	0x08019541
 8019408:	200021dc 	.word	0x200021dc

0801940c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801940c:	b580      	push	{r7, lr}
 801940e:	b08a      	sub	sp, #40	; 0x28
 8019410:	af00      	add	r7, sp, #0
 8019412:	60f8      	str	r0, [r7, #12]
 8019414:	60b9      	str	r1, [r7, #8]
 8019416:	607a      	str	r2, [r7, #4]
 8019418:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801941a:	2300      	movs	r3, #0
 801941c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801941e:	68fb      	ldr	r3, [r7, #12]
 8019420:	2b00      	cmp	r3, #0
 8019422:	d10a      	bne.n	801943a <xTimerGenericCommand+0x2e>
	__asm volatile
 8019424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019428:	f383 8811 	msr	BASEPRI, r3
 801942c:	f3bf 8f6f 	isb	sy
 8019430:	f3bf 8f4f 	dsb	sy
 8019434:	623b      	str	r3, [r7, #32]
}
 8019436:	bf00      	nop
 8019438:	e7fe      	b.n	8019438 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801943a:	4b1a      	ldr	r3, [pc, #104]	; (80194a4 <xTimerGenericCommand+0x98>)
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	2b00      	cmp	r3, #0
 8019440:	d02a      	beq.n	8019498 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8019442:	68bb      	ldr	r3, [r7, #8]
 8019444:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801944a:	68fb      	ldr	r3, [r7, #12]
 801944c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801944e:	68bb      	ldr	r3, [r7, #8]
 8019450:	2b05      	cmp	r3, #5
 8019452:	dc18      	bgt.n	8019486 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8019454:	f7ff feb2 	bl	80191bc <xTaskGetSchedulerState>
 8019458:	4603      	mov	r3, r0
 801945a:	2b02      	cmp	r3, #2
 801945c:	d109      	bne.n	8019472 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801945e:	4b11      	ldr	r3, [pc, #68]	; (80194a4 <xTimerGenericCommand+0x98>)
 8019460:	6818      	ldr	r0, [r3, #0]
 8019462:	f107 0110 	add.w	r1, r7, #16
 8019466:	2300      	movs	r3, #0
 8019468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801946a:	f7fe fbc9 	bl	8017c00 <xQueueGenericSend>
 801946e:	6278      	str	r0, [r7, #36]	; 0x24
 8019470:	e012      	b.n	8019498 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8019472:	4b0c      	ldr	r3, [pc, #48]	; (80194a4 <xTimerGenericCommand+0x98>)
 8019474:	6818      	ldr	r0, [r3, #0]
 8019476:	f107 0110 	add.w	r1, r7, #16
 801947a:	2300      	movs	r3, #0
 801947c:	2200      	movs	r2, #0
 801947e:	f7fe fbbf 	bl	8017c00 <xQueueGenericSend>
 8019482:	6278      	str	r0, [r7, #36]	; 0x24
 8019484:	e008      	b.n	8019498 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019486:	4b07      	ldr	r3, [pc, #28]	; (80194a4 <xTimerGenericCommand+0x98>)
 8019488:	6818      	ldr	r0, [r3, #0]
 801948a:	f107 0110 	add.w	r1, r7, #16
 801948e:	2300      	movs	r3, #0
 8019490:	683a      	ldr	r2, [r7, #0]
 8019492:	f7fe fcb3 	bl	8017dfc <xQueueGenericSendFromISR>
 8019496:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8019498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801949a:	4618      	mov	r0, r3
 801949c:	3728      	adds	r7, #40	; 0x28
 801949e:	46bd      	mov	sp, r7
 80194a0:	bd80      	pop	{r7, pc}
 80194a2:	bf00      	nop
 80194a4:	200021d8 	.word	0x200021d8

080194a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80194a8:	b580      	push	{r7, lr}
 80194aa:	b088      	sub	sp, #32
 80194ac:	af02      	add	r7, sp, #8
 80194ae:	6078      	str	r0, [r7, #4]
 80194b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80194b2:	4b22      	ldr	r3, [pc, #136]	; (801953c <prvProcessExpiredTimer+0x94>)
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	68db      	ldr	r3, [r3, #12]
 80194b8:	68db      	ldr	r3, [r3, #12]
 80194ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80194bc:	697b      	ldr	r3, [r7, #20]
 80194be:	3304      	adds	r3, #4
 80194c0:	4618      	mov	r0, r3
 80194c2:	f7fe fa6f 	bl	80179a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80194c6:	697b      	ldr	r3, [r7, #20]
 80194c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80194cc:	f003 0304 	and.w	r3, r3, #4
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d022      	beq.n	801951a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80194d4:	697b      	ldr	r3, [r7, #20]
 80194d6:	699a      	ldr	r2, [r3, #24]
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	18d1      	adds	r1, r2, r3
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	683a      	ldr	r2, [r7, #0]
 80194e0:	6978      	ldr	r0, [r7, #20]
 80194e2:	f000 f8d1 	bl	8019688 <prvInsertTimerInActiveList>
 80194e6:	4603      	mov	r3, r0
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d01f      	beq.n	801952c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80194ec:	2300      	movs	r3, #0
 80194ee:	9300      	str	r3, [sp, #0]
 80194f0:	2300      	movs	r3, #0
 80194f2:	687a      	ldr	r2, [r7, #4]
 80194f4:	2100      	movs	r1, #0
 80194f6:	6978      	ldr	r0, [r7, #20]
 80194f8:	f7ff ff88 	bl	801940c <xTimerGenericCommand>
 80194fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80194fe:	693b      	ldr	r3, [r7, #16]
 8019500:	2b00      	cmp	r3, #0
 8019502:	d113      	bne.n	801952c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8019504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019508:	f383 8811 	msr	BASEPRI, r3
 801950c:	f3bf 8f6f 	isb	sy
 8019510:	f3bf 8f4f 	dsb	sy
 8019514:	60fb      	str	r3, [r7, #12]
}
 8019516:	bf00      	nop
 8019518:	e7fe      	b.n	8019518 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801951a:	697b      	ldr	r3, [r7, #20]
 801951c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019520:	f023 0301 	bic.w	r3, r3, #1
 8019524:	b2da      	uxtb	r2, r3
 8019526:	697b      	ldr	r3, [r7, #20]
 8019528:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801952c:	697b      	ldr	r3, [r7, #20]
 801952e:	6a1b      	ldr	r3, [r3, #32]
 8019530:	6978      	ldr	r0, [r7, #20]
 8019532:	4798      	blx	r3
}
 8019534:	bf00      	nop
 8019536:	3718      	adds	r7, #24
 8019538:	46bd      	mov	sp, r7
 801953a:	bd80      	pop	{r7, pc}
 801953c:	200021d0 	.word	0x200021d0

08019540 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8019540:	b580      	push	{r7, lr}
 8019542:	b084      	sub	sp, #16
 8019544:	af00      	add	r7, sp, #0
 8019546:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019548:	f107 0308 	add.w	r3, r7, #8
 801954c:	4618      	mov	r0, r3
 801954e:	f000 f857 	bl	8019600 <prvGetNextExpireTime>
 8019552:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019554:	68bb      	ldr	r3, [r7, #8]
 8019556:	4619      	mov	r1, r3
 8019558:	68f8      	ldr	r0, [r7, #12]
 801955a:	f000 f803 	bl	8019564 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801955e:	f000 f8d5 	bl	801970c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019562:	e7f1      	b.n	8019548 <prvTimerTask+0x8>

08019564 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8019564:	b580      	push	{r7, lr}
 8019566:	b084      	sub	sp, #16
 8019568:	af00      	add	r7, sp, #0
 801956a:	6078      	str	r0, [r7, #4]
 801956c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801956e:	f7ff fa43 	bl	80189f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019572:	f107 0308 	add.w	r3, r7, #8
 8019576:	4618      	mov	r0, r3
 8019578:	f000 f866 	bl	8019648 <prvSampleTimeNow>
 801957c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801957e:	68bb      	ldr	r3, [r7, #8]
 8019580:	2b00      	cmp	r3, #0
 8019582:	d130      	bne.n	80195e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8019584:	683b      	ldr	r3, [r7, #0]
 8019586:	2b00      	cmp	r3, #0
 8019588:	d10a      	bne.n	80195a0 <prvProcessTimerOrBlockTask+0x3c>
 801958a:	687a      	ldr	r2, [r7, #4]
 801958c:	68fb      	ldr	r3, [r7, #12]
 801958e:	429a      	cmp	r2, r3
 8019590:	d806      	bhi.n	80195a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8019592:	f7ff fa3f 	bl	8018a14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8019596:	68f9      	ldr	r1, [r7, #12]
 8019598:	6878      	ldr	r0, [r7, #4]
 801959a:	f7ff ff85 	bl	80194a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801959e:	e024      	b.n	80195ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80195a0:	683b      	ldr	r3, [r7, #0]
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	d008      	beq.n	80195b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80195a6:	4b13      	ldr	r3, [pc, #76]	; (80195f4 <prvProcessTimerOrBlockTask+0x90>)
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	681b      	ldr	r3, [r3, #0]
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	d101      	bne.n	80195b4 <prvProcessTimerOrBlockTask+0x50>
 80195b0:	2301      	movs	r3, #1
 80195b2:	e000      	b.n	80195b6 <prvProcessTimerOrBlockTask+0x52>
 80195b4:	2300      	movs	r3, #0
 80195b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80195b8:	4b0f      	ldr	r3, [pc, #60]	; (80195f8 <prvProcessTimerOrBlockTask+0x94>)
 80195ba:	6818      	ldr	r0, [r3, #0]
 80195bc:	687a      	ldr	r2, [r7, #4]
 80195be:	68fb      	ldr	r3, [r7, #12]
 80195c0:	1ad3      	subs	r3, r2, r3
 80195c2:	683a      	ldr	r2, [r7, #0]
 80195c4:	4619      	mov	r1, r3
 80195c6:	f7fe fecf 	bl	8018368 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80195ca:	f7ff fa23 	bl	8018a14 <xTaskResumeAll>
 80195ce:	4603      	mov	r3, r0
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d10a      	bne.n	80195ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80195d4:	4b09      	ldr	r3, [pc, #36]	; (80195fc <prvProcessTimerOrBlockTask+0x98>)
 80195d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80195da:	601a      	str	r2, [r3, #0]
 80195dc:	f3bf 8f4f 	dsb	sy
 80195e0:	f3bf 8f6f 	isb	sy
}
 80195e4:	e001      	b.n	80195ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80195e6:	f7ff fa15 	bl	8018a14 <xTaskResumeAll>
}
 80195ea:	bf00      	nop
 80195ec:	3710      	adds	r7, #16
 80195ee:	46bd      	mov	sp, r7
 80195f0:	bd80      	pop	{r7, pc}
 80195f2:	bf00      	nop
 80195f4:	200021d4 	.word	0x200021d4
 80195f8:	200021d8 	.word	0x200021d8
 80195fc:	e000ed04 	.word	0xe000ed04

08019600 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019600:	b480      	push	{r7}
 8019602:	b085      	sub	sp, #20
 8019604:	af00      	add	r7, sp, #0
 8019606:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019608:	4b0e      	ldr	r3, [pc, #56]	; (8019644 <prvGetNextExpireTime+0x44>)
 801960a:	681b      	ldr	r3, [r3, #0]
 801960c:	681b      	ldr	r3, [r3, #0]
 801960e:	2b00      	cmp	r3, #0
 8019610:	d101      	bne.n	8019616 <prvGetNextExpireTime+0x16>
 8019612:	2201      	movs	r2, #1
 8019614:	e000      	b.n	8019618 <prvGetNextExpireTime+0x18>
 8019616:	2200      	movs	r2, #0
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	681b      	ldr	r3, [r3, #0]
 8019620:	2b00      	cmp	r3, #0
 8019622:	d105      	bne.n	8019630 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019624:	4b07      	ldr	r3, [pc, #28]	; (8019644 <prvGetNextExpireTime+0x44>)
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	68db      	ldr	r3, [r3, #12]
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	60fb      	str	r3, [r7, #12]
 801962e:	e001      	b.n	8019634 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019630:	2300      	movs	r3, #0
 8019632:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019634:	68fb      	ldr	r3, [r7, #12]
}
 8019636:	4618      	mov	r0, r3
 8019638:	3714      	adds	r7, #20
 801963a:	46bd      	mov	sp, r7
 801963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019640:	4770      	bx	lr
 8019642:	bf00      	nop
 8019644:	200021d0 	.word	0x200021d0

08019648 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8019648:	b580      	push	{r7, lr}
 801964a:	b084      	sub	sp, #16
 801964c:	af00      	add	r7, sp, #0
 801964e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8019650:	f7ff fa7e 	bl	8018b50 <xTaskGetTickCount>
 8019654:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8019656:	4b0b      	ldr	r3, [pc, #44]	; (8019684 <prvSampleTimeNow+0x3c>)
 8019658:	681b      	ldr	r3, [r3, #0]
 801965a:	68fa      	ldr	r2, [r7, #12]
 801965c:	429a      	cmp	r2, r3
 801965e:	d205      	bcs.n	801966c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8019660:	f000 f936 	bl	80198d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	2201      	movs	r2, #1
 8019668:	601a      	str	r2, [r3, #0]
 801966a:	e002      	b.n	8019672 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	2200      	movs	r2, #0
 8019670:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8019672:	4a04      	ldr	r2, [pc, #16]	; (8019684 <prvSampleTimeNow+0x3c>)
 8019674:	68fb      	ldr	r3, [r7, #12]
 8019676:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8019678:	68fb      	ldr	r3, [r7, #12]
}
 801967a:	4618      	mov	r0, r3
 801967c:	3710      	adds	r7, #16
 801967e:	46bd      	mov	sp, r7
 8019680:	bd80      	pop	{r7, pc}
 8019682:	bf00      	nop
 8019684:	200021e0 	.word	0x200021e0

08019688 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019688:	b580      	push	{r7, lr}
 801968a:	b086      	sub	sp, #24
 801968c:	af00      	add	r7, sp, #0
 801968e:	60f8      	str	r0, [r7, #12]
 8019690:	60b9      	str	r1, [r7, #8]
 8019692:	607a      	str	r2, [r7, #4]
 8019694:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8019696:	2300      	movs	r3, #0
 8019698:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801969a:	68fb      	ldr	r3, [r7, #12]
 801969c:	68ba      	ldr	r2, [r7, #8]
 801969e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80196a0:	68fb      	ldr	r3, [r7, #12]
 80196a2:	68fa      	ldr	r2, [r7, #12]
 80196a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80196a6:	68ba      	ldr	r2, [r7, #8]
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	429a      	cmp	r2, r3
 80196ac:	d812      	bhi.n	80196d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80196ae:	687a      	ldr	r2, [r7, #4]
 80196b0:	683b      	ldr	r3, [r7, #0]
 80196b2:	1ad2      	subs	r2, r2, r3
 80196b4:	68fb      	ldr	r3, [r7, #12]
 80196b6:	699b      	ldr	r3, [r3, #24]
 80196b8:	429a      	cmp	r2, r3
 80196ba:	d302      	bcc.n	80196c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80196bc:	2301      	movs	r3, #1
 80196be:	617b      	str	r3, [r7, #20]
 80196c0:	e01b      	b.n	80196fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80196c2:	4b10      	ldr	r3, [pc, #64]	; (8019704 <prvInsertTimerInActiveList+0x7c>)
 80196c4:	681a      	ldr	r2, [r3, #0]
 80196c6:	68fb      	ldr	r3, [r7, #12]
 80196c8:	3304      	adds	r3, #4
 80196ca:	4619      	mov	r1, r3
 80196cc:	4610      	mov	r0, r2
 80196ce:	f7fe f930 	bl	8017932 <vListInsert>
 80196d2:	e012      	b.n	80196fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80196d4:	687a      	ldr	r2, [r7, #4]
 80196d6:	683b      	ldr	r3, [r7, #0]
 80196d8:	429a      	cmp	r2, r3
 80196da:	d206      	bcs.n	80196ea <prvInsertTimerInActiveList+0x62>
 80196dc:	68ba      	ldr	r2, [r7, #8]
 80196de:	683b      	ldr	r3, [r7, #0]
 80196e0:	429a      	cmp	r2, r3
 80196e2:	d302      	bcc.n	80196ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80196e4:	2301      	movs	r3, #1
 80196e6:	617b      	str	r3, [r7, #20]
 80196e8:	e007      	b.n	80196fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80196ea:	4b07      	ldr	r3, [pc, #28]	; (8019708 <prvInsertTimerInActiveList+0x80>)
 80196ec:	681a      	ldr	r2, [r3, #0]
 80196ee:	68fb      	ldr	r3, [r7, #12]
 80196f0:	3304      	adds	r3, #4
 80196f2:	4619      	mov	r1, r3
 80196f4:	4610      	mov	r0, r2
 80196f6:	f7fe f91c 	bl	8017932 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80196fa:	697b      	ldr	r3, [r7, #20]
}
 80196fc:	4618      	mov	r0, r3
 80196fe:	3718      	adds	r7, #24
 8019700:	46bd      	mov	sp, r7
 8019702:	bd80      	pop	{r7, pc}
 8019704:	200021d4 	.word	0x200021d4
 8019708:	200021d0 	.word	0x200021d0

0801970c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801970c:	b580      	push	{r7, lr}
 801970e:	b08e      	sub	sp, #56	; 0x38
 8019710:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019712:	e0ca      	b.n	80198aa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	2b00      	cmp	r3, #0
 8019718:	da18      	bge.n	801974c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801971a:	1d3b      	adds	r3, r7, #4
 801971c:	3304      	adds	r3, #4
 801971e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8019720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019722:	2b00      	cmp	r3, #0
 8019724:	d10a      	bne.n	801973c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8019726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801972a:	f383 8811 	msr	BASEPRI, r3
 801972e:	f3bf 8f6f 	isb	sy
 8019732:	f3bf 8f4f 	dsb	sy
 8019736:	61fb      	str	r3, [r7, #28]
}
 8019738:	bf00      	nop
 801973a:	e7fe      	b.n	801973a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801973c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801973e:	681b      	ldr	r3, [r3, #0]
 8019740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019742:	6850      	ldr	r0, [r2, #4]
 8019744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019746:	6892      	ldr	r2, [r2, #8]
 8019748:	4611      	mov	r1, r2
 801974a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	2b00      	cmp	r3, #0
 8019750:	f2c0 80aa 	blt.w	80198a8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019754:	68fb      	ldr	r3, [r7, #12]
 8019756:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801975a:	695b      	ldr	r3, [r3, #20]
 801975c:	2b00      	cmp	r3, #0
 801975e:	d004      	beq.n	801976a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019762:	3304      	adds	r3, #4
 8019764:	4618      	mov	r0, r3
 8019766:	f7fe f91d 	bl	80179a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801976a:	463b      	mov	r3, r7
 801976c:	4618      	mov	r0, r3
 801976e:	f7ff ff6b 	bl	8019648 <prvSampleTimeNow>
 8019772:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	2b09      	cmp	r3, #9
 8019778:	f200 8097 	bhi.w	80198aa <prvProcessReceivedCommands+0x19e>
 801977c:	a201      	add	r2, pc, #4	; (adr r2, 8019784 <prvProcessReceivedCommands+0x78>)
 801977e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019782:	bf00      	nop
 8019784:	080197ad 	.word	0x080197ad
 8019788:	080197ad 	.word	0x080197ad
 801978c:	080197ad 	.word	0x080197ad
 8019790:	08019821 	.word	0x08019821
 8019794:	08019835 	.word	0x08019835
 8019798:	0801987f 	.word	0x0801987f
 801979c:	080197ad 	.word	0x080197ad
 80197a0:	080197ad 	.word	0x080197ad
 80197a4:	08019821 	.word	0x08019821
 80197a8:	08019835 	.word	0x08019835
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80197ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80197b2:	f043 0301 	orr.w	r3, r3, #1
 80197b6:	b2da      	uxtb	r2, r3
 80197b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80197be:	68ba      	ldr	r2, [r7, #8]
 80197c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197c2:	699b      	ldr	r3, [r3, #24]
 80197c4:	18d1      	adds	r1, r2, r3
 80197c6:	68bb      	ldr	r3, [r7, #8]
 80197c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80197ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80197cc:	f7ff ff5c 	bl	8019688 <prvInsertTimerInActiveList>
 80197d0:	4603      	mov	r3, r0
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d069      	beq.n	80198aa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80197d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197d8:	6a1b      	ldr	r3, [r3, #32]
 80197da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80197dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80197de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80197e4:	f003 0304 	and.w	r3, r3, #4
 80197e8:	2b00      	cmp	r3, #0
 80197ea:	d05e      	beq.n	80198aa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80197ec:	68ba      	ldr	r2, [r7, #8]
 80197ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197f0:	699b      	ldr	r3, [r3, #24]
 80197f2:	441a      	add	r2, r3
 80197f4:	2300      	movs	r3, #0
 80197f6:	9300      	str	r3, [sp, #0]
 80197f8:	2300      	movs	r3, #0
 80197fa:	2100      	movs	r1, #0
 80197fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80197fe:	f7ff fe05 	bl	801940c <xTimerGenericCommand>
 8019802:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019804:	6a3b      	ldr	r3, [r7, #32]
 8019806:	2b00      	cmp	r3, #0
 8019808:	d14f      	bne.n	80198aa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801980a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801980e:	f383 8811 	msr	BASEPRI, r3
 8019812:	f3bf 8f6f 	isb	sy
 8019816:	f3bf 8f4f 	dsb	sy
 801981a:	61bb      	str	r3, [r7, #24]
}
 801981c:	bf00      	nop
 801981e:	e7fe      	b.n	801981e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019822:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019826:	f023 0301 	bic.w	r3, r3, #1
 801982a:	b2da      	uxtb	r2, r3
 801982c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801982e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8019832:	e03a      	b.n	80198aa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019836:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801983a:	f043 0301 	orr.w	r3, r3, #1
 801983e:	b2da      	uxtb	r2, r3
 8019840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019842:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019846:	68ba      	ldr	r2, [r7, #8]
 8019848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801984a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801984c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801984e:	699b      	ldr	r3, [r3, #24]
 8019850:	2b00      	cmp	r3, #0
 8019852:	d10a      	bne.n	801986a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8019854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019858:	f383 8811 	msr	BASEPRI, r3
 801985c:	f3bf 8f6f 	isb	sy
 8019860:	f3bf 8f4f 	dsb	sy
 8019864:	617b      	str	r3, [r7, #20]
}
 8019866:	bf00      	nop
 8019868:	e7fe      	b.n	8019868 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801986a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801986c:	699a      	ldr	r2, [r3, #24]
 801986e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019870:	18d1      	adds	r1, r2, r3
 8019872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019876:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019878:	f7ff ff06 	bl	8019688 <prvInsertTimerInActiveList>
					break;
 801987c:	e015      	b.n	80198aa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801987e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019884:	f003 0302 	and.w	r3, r3, #2
 8019888:	2b00      	cmp	r3, #0
 801988a:	d103      	bne.n	8019894 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801988c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801988e:	f000 fbdf 	bl	801a050 <vPortFree>
 8019892:	e00a      	b.n	80198aa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019896:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801989a:	f023 0301 	bic.w	r3, r3, #1
 801989e:	b2da      	uxtb	r2, r3
 80198a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80198a6:	e000      	b.n	80198aa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80198a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80198aa:	4b08      	ldr	r3, [pc, #32]	; (80198cc <prvProcessReceivedCommands+0x1c0>)
 80198ac:	681b      	ldr	r3, [r3, #0]
 80198ae:	1d39      	adds	r1, r7, #4
 80198b0:	2200      	movs	r2, #0
 80198b2:	4618      	mov	r0, r3
 80198b4:	f7fe fb3e 	bl	8017f34 <xQueueReceive>
 80198b8:	4603      	mov	r3, r0
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	f47f af2a 	bne.w	8019714 <prvProcessReceivedCommands+0x8>
	}
}
 80198c0:	bf00      	nop
 80198c2:	bf00      	nop
 80198c4:	3730      	adds	r7, #48	; 0x30
 80198c6:	46bd      	mov	sp, r7
 80198c8:	bd80      	pop	{r7, pc}
 80198ca:	bf00      	nop
 80198cc:	200021d8 	.word	0x200021d8

080198d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80198d0:	b580      	push	{r7, lr}
 80198d2:	b088      	sub	sp, #32
 80198d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80198d6:	e048      	b.n	801996a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80198d8:	4b2d      	ldr	r3, [pc, #180]	; (8019990 <prvSwitchTimerLists+0xc0>)
 80198da:	681b      	ldr	r3, [r3, #0]
 80198dc:	68db      	ldr	r3, [r3, #12]
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80198e2:	4b2b      	ldr	r3, [pc, #172]	; (8019990 <prvSwitchTimerLists+0xc0>)
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	68db      	ldr	r3, [r3, #12]
 80198e8:	68db      	ldr	r3, [r3, #12]
 80198ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80198ec:	68fb      	ldr	r3, [r7, #12]
 80198ee:	3304      	adds	r3, #4
 80198f0:	4618      	mov	r0, r3
 80198f2:	f7fe f857 	bl	80179a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80198f6:	68fb      	ldr	r3, [r7, #12]
 80198f8:	6a1b      	ldr	r3, [r3, #32]
 80198fa:	68f8      	ldr	r0, [r7, #12]
 80198fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80198fe:	68fb      	ldr	r3, [r7, #12]
 8019900:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019904:	f003 0304 	and.w	r3, r3, #4
 8019908:	2b00      	cmp	r3, #0
 801990a:	d02e      	beq.n	801996a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801990c:	68fb      	ldr	r3, [r7, #12]
 801990e:	699b      	ldr	r3, [r3, #24]
 8019910:	693a      	ldr	r2, [r7, #16]
 8019912:	4413      	add	r3, r2
 8019914:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019916:	68ba      	ldr	r2, [r7, #8]
 8019918:	693b      	ldr	r3, [r7, #16]
 801991a:	429a      	cmp	r2, r3
 801991c:	d90e      	bls.n	801993c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801991e:	68fb      	ldr	r3, [r7, #12]
 8019920:	68ba      	ldr	r2, [r7, #8]
 8019922:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019924:	68fb      	ldr	r3, [r7, #12]
 8019926:	68fa      	ldr	r2, [r7, #12]
 8019928:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801992a:	4b19      	ldr	r3, [pc, #100]	; (8019990 <prvSwitchTimerLists+0xc0>)
 801992c:	681a      	ldr	r2, [r3, #0]
 801992e:	68fb      	ldr	r3, [r7, #12]
 8019930:	3304      	adds	r3, #4
 8019932:	4619      	mov	r1, r3
 8019934:	4610      	mov	r0, r2
 8019936:	f7fd fffc 	bl	8017932 <vListInsert>
 801993a:	e016      	b.n	801996a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801993c:	2300      	movs	r3, #0
 801993e:	9300      	str	r3, [sp, #0]
 8019940:	2300      	movs	r3, #0
 8019942:	693a      	ldr	r2, [r7, #16]
 8019944:	2100      	movs	r1, #0
 8019946:	68f8      	ldr	r0, [r7, #12]
 8019948:	f7ff fd60 	bl	801940c <xTimerGenericCommand>
 801994c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	2b00      	cmp	r3, #0
 8019952:	d10a      	bne.n	801996a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019958:	f383 8811 	msr	BASEPRI, r3
 801995c:	f3bf 8f6f 	isb	sy
 8019960:	f3bf 8f4f 	dsb	sy
 8019964:	603b      	str	r3, [r7, #0]
}
 8019966:	bf00      	nop
 8019968:	e7fe      	b.n	8019968 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801996a:	4b09      	ldr	r3, [pc, #36]	; (8019990 <prvSwitchTimerLists+0xc0>)
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	681b      	ldr	r3, [r3, #0]
 8019970:	2b00      	cmp	r3, #0
 8019972:	d1b1      	bne.n	80198d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019974:	4b06      	ldr	r3, [pc, #24]	; (8019990 <prvSwitchTimerLists+0xc0>)
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801997a:	4b06      	ldr	r3, [pc, #24]	; (8019994 <prvSwitchTimerLists+0xc4>)
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	4a04      	ldr	r2, [pc, #16]	; (8019990 <prvSwitchTimerLists+0xc0>)
 8019980:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019982:	4a04      	ldr	r2, [pc, #16]	; (8019994 <prvSwitchTimerLists+0xc4>)
 8019984:	697b      	ldr	r3, [r7, #20]
 8019986:	6013      	str	r3, [r2, #0]
}
 8019988:	bf00      	nop
 801998a:	3718      	adds	r7, #24
 801998c:	46bd      	mov	sp, r7
 801998e:	bd80      	pop	{r7, pc}
 8019990:	200021d0 	.word	0x200021d0
 8019994:	200021d4 	.word	0x200021d4

08019998 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019998:	b580      	push	{r7, lr}
 801999a:	b082      	sub	sp, #8
 801999c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801999e:	f000 f969 	bl	8019c74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80199a2:	4b15      	ldr	r3, [pc, #84]	; (80199f8 <prvCheckForValidListAndQueue+0x60>)
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d120      	bne.n	80199ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80199aa:	4814      	ldr	r0, [pc, #80]	; (80199fc <prvCheckForValidListAndQueue+0x64>)
 80199ac:	f7fd ff70 	bl	8017890 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80199b0:	4813      	ldr	r0, [pc, #76]	; (8019a00 <prvCheckForValidListAndQueue+0x68>)
 80199b2:	f7fd ff6d 	bl	8017890 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80199b6:	4b13      	ldr	r3, [pc, #76]	; (8019a04 <prvCheckForValidListAndQueue+0x6c>)
 80199b8:	4a10      	ldr	r2, [pc, #64]	; (80199fc <prvCheckForValidListAndQueue+0x64>)
 80199ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80199bc:	4b12      	ldr	r3, [pc, #72]	; (8019a08 <prvCheckForValidListAndQueue+0x70>)
 80199be:	4a10      	ldr	r2, [pc, #64]	; (8019a00 <prvCheckForValidListAndQueue+0x68>)
 80199c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80199c2:	2300      	movs	r3, #0
 80199c4:	9300      	str	r3, [sp, #0]
 80199c6:	4b11      	ldr	r3, [pc, #68]	; (8019a0c <prvCheckForValidListAndQueue+0x74>)
 80199c8:	4a11      	ldr	r2, [pc, #68]	; (8019a10 <prvCheckForValidListAndQueue+0x78>)
 80199ca:	2110      	movs	r1, #16
 80199cc:	200a      	movs	r0, #10
 80199ce:	f7fe f87b 	bl	8017ac8 <xQueueGenericCreateStatic>
 80199d2:	4603      	mov	r3, r0
 80199d4:	4a08      	ldr	r2, [pc, #32]	; (80199f8 <prvCheckForValidListAndQueue+0x60>)
 80199d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80199d8:	4b07      	ldr	r3, [pc, #28]	; (80199f8 <prvCheckForValidListAndQueue+0x60>)
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	2b00      	cmp	r3, #0
 80199de:	d005      	beq.n	80199ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80199e0:	4b05      	ldr	r3, [pc, #20]	; (80199f8 <prvCheckForValidListAndQueue+0x60>)
 80199e2:	681b      	ldr	r3, [r3, #0]
 80199e4:	490b      	ldr	r1, [pc, #44]	; (8019a14 <prvCheckForValidListAndQueue+0x7c>)
 80199e6:	4618      	mov	r0, r3
 80199e8:	f7fe fc94 	bl	8018314 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80199ec:	f000 f972 	bl	8019cd4 <vPortExitCritical>
}
 80199f0:	bf00      	nop
 80199f2:	46bd      	mov	sp, r7
 80199f4:	bd80      	pop	{r7, pc}
 80199f6:	bf00      	nop
 80199f8:	200021d8 	.word	0x200021d8
 80199fc:	200021a8 	.word	0x200021a8
 8019a00:	200021bc 	.word	0x200021bc
 8019a04:	200021d0 	.word	0x200021d0
 8019a08:	200021d4 	.word	0x200021d4
 8019a0c:	20002284 	.word	0x20002284
 8019a10:	200021e4 	.word	0x200021e4
 8019a14:	0802058c 	.word	0x0802058c

08019a18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019a18:	b480      	push	{r7}
 8019a1a:	b085      	sub	sp, #20
 8019a1c:	af00      	add	r7, sp, #0
 8019a1e:	60f8      	str	r0, [r7, #12]
 8019a20:	60b9      	str	r1, [r7, #8]
 8019a22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019a24:	68fb      	ldr	r3, [r7, #12]
 8019a26:	3b04      	subs	r3, #4
 8019a28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8019a30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	3b04      	subs	r3, #4
 8019a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019a38:	68bb      	ldr	r3, [r7, #8]
 8019a3a:	f023 0201 	bic.w	r2, r3, #1
 8019a3e:	68fb      	ldr	r3, [r7, #12]
 8019a40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019a42:	68fb      	ldr	r3, [r7, #12]
 8019a44:	3b04      	subs	r3, #4
 8019a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019a48:	4a0c      	ldr	r2, [pc, #48]	; (8019a7c <pxPortInitialiseStack+0x64>)
 8019a4a:	68fb      	ldr	r3, [r7, #12]
 8019a4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8019a4e:	68fb      	ldr	r3, [r7, #12]
 8019a50:	3b14      	subs	r3, #20
 8019a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019a54:	687a      	ldr	r2, [r7, #4]
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8019a5a:	68fb      	ldr	r3, [r7, #12]
 8019a5c:	3b04      	subs	r3, #4
 8019a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019a60:	68fb      	ldr	r3, [r7, #12]
 8019a62:	f06f 0202 	mvn.w	r2, #2
 8019a66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019a68:	68fb      	ldr	r3, [r7, #12]
 8019a6a:	3b20      	subs	r3, #32
 8019a6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8019a6e:	68fb      	ldr	r3, [r7, #12]
}
 8019a70:	4618      	mov	r0, r3
 8019a72:	3714      	adds	r7, #20
 8019a74:	46bd      	mov	sp, r7
 8019a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a7a:	4770      	bx	lr
 8019a7c:	08019a81 	.word	0x08019a81

08019a80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019a80:	b480      	push	{r7}
 8019a82:	b085      	sub	sp, #20
 8019a84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019a86:	2300      	movs	r3, #0
 8019a88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019a8a:	4b12      	ldr	r3, [pc, #72]	; (8019ad4 <prvTaskExitError+0x54>)
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019a92:	d00a      	beq.n	8019aaa <prvTaskExitError+0x2a>
	__asm volatile
 8019a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a98:	f383 8811 	msr	BASEPRI, r3
 8019a9c:	f3bf 8f6f 	isb	sy
 8019aa0:	f3bf 8f4f 	dsb	sy
 8019aa4:	60fb      	str	r3, [r7, #12]
}
 8019aa6:	bf00      	nop
 8019aa8:	e7fe      	b.n	8019aa8 <prvTaskExitError+0x28>
	__asm volatile
 8019aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019aae:	f383 8811 	msr	BASEPRI, r3
 8019ab2:	f3bf 8f6f 	isb	sy
 8019ab6:	f3bf 8f4f 	dsb	sy
 8019aba:	60bb      	str	r3, [r7, #8]
}
 8019abc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8019abe:	bf00      	nop
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d0fc      	beq.n	8019ac0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019ac6:	bf00      	nop
 8019ac8:	bf00      	nop
 8019aca:	3714      	adds	r7, #20
 8019acc:	46bd      	mov	sp, r7
 8019ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ad2:	4770      	bx	lr
 8019ad4:	20000088 	.word	0x20000088
	...

08019ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019ae0:	4b07      	ldr	r3, [pc, #28]	; (8019b00 <pxCurrentTCBConst2>)
 8019ae2:	6819      	ldr	r1, [r3, #0]
 8019ae4:	6808      	ldr	r0, [r1, #0]
 8019ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019aea:	f380 8809 	msr	PSP, r0
 8019aee:	f3bf 8f6f 	isb	sy
 8019af2:	f04f 0000 	mov.w	r0, #0
 8019af6:	f380 8811 	msr	BASEPRI, r0
 8019afa:	4770      	bx	lr
 8019afc:	f3af 8000 	nop.w

08019b00 <pxCurrentTCBConst2>:
 8019b00:	20001ca8 	.word	0x20001ca8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019b04:	bf00      	nop
 8019b06:	bf00      	nop

08019b08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019b08:	4808      	ldr	r0, [pc, #32]	; (8019b2c <prvPortStartFirstTask+0x24>)
 8019b0a:	6800      	ldr	r0, [r0, #0]
 8019b0c:	6800      	ldr	r0, [r0, #0]
 8019b0e:	f380 8808 	msr	MSP, r0
 8019b12:	f04f 0000 	mov.w	r0, #0
 8019b16:	f380 8814 	msr	CONTROL, r0
 8019b1a:	b662      	cpsie	i
 8019b1c:	b661      	cpsie	f
 8019b1e:	f3bf 8f4f 	dsb	sy
 8019b22:	f3bf 8f6f 	isb	sy
 8019b26:	df00      	svc	0
 8019b28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8019b2a:	bf00      	nop
 8019b2c:	e000ed08 	.word	0xe000ed08

08019b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019b30:	b580      	push	{r7, lr}
 8019b32:	b086      	sub	sp, #24
 8019b34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019b36:	4b46      	ldr	r3, [pc, #280]	; (8019c50 <xPortStartScheduler+0x120>)
 8019b38:	681b      	ldr	r3, [r3, #0]
 8019b3a:	4a46      	ldr	r2, [pc, #280]	; (8019c54 <xPortStartScheduler+0x124>)
 8019b3c:	4293      	cmp	r3, r2
 8019b3e:	d10a      	bne.n	8019b56 <xPortStartScheduler+0x26>
	__asm volatile
 8019b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b44:	f383 8811 	msr	BASEPRI, r3
 8019b48:	f3bf 8f6f 	isb	sy
 8019b4c:	f3bf 8f4f 	dsb	sy
 8019b50:	613b      	str	r3, [r7, #16]
}
 8019b52:	bf00      	nop
 8019b54:	e7fe      	b.n	8019b54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019b56:	4b3e      	ldr	r3, [pc, #248]	; (8019c50 <xPortStartScheduler+0x120>)
 8019b58:	681b      	ldr	r3, [r3, #0]
 8019b5a:	4a3f      	ldr	r2, [pc, #252]	; (8019c58 <xPortStartScheduler+0x128>)
 8019b5c:	4293      	cmp	r3, r2
 8019b5e:	d10a      	bne.n	8019b76 <xPortStartScheduler+0x46>
	__asm volatile
 8019b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b64:	f383 8811 	msr	BASEPRI, r3
 8019b68:	f3bf 8f6f 	isb	sy
 8019b6c:	f3bf 8f4f 	dsb	sy
 8019b70:	60fb      	str	r3, [r7, #12]
}
 8019b72:	bf00      	nop
 8019b74:	e7fe      	b.n	8019b74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019b76:	4b39      	ldr	r3, [pc, #228]	; (8019c5c <xPortStartScheduler+0x12c>)
 8019b78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8019b7a:	697b      	ldr	r3, [r7, #20]
 8019b7c:	781b      	ldrb	r3, [r3, #0]
 8019b7e:	b2db      	uxtb	r3, r3
 8019b80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019b82:	697b      	ldr	r3, [r7, #20]
 8019b84:	22ff      	movs	r2, #255	; 0xff
 8019b86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019b88:	697b      	ldr	r3, [r7, #20]
 8019b8a:	781b      	ldrb	r3, [r3, #0]
 8019b8c:	b2db      	uxtb	r3, r3
 8019b8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019b90:	78fb      	ldrb	r3, [r7, #3]
 8019b92:	b2db      	uxtb	r3, r3
 8019b94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019b98:	b2da      	uxtb	r2, r3
 8019b9a:	4b31      	ldr	r3, [pc, #196]	; (8019c60 <xPortStartScheduler+0x130>)
 8019b9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8019b9e:	4b31      	ldr	r3, [pc, #196]	; (8019c64 <xPortStartScheduler+0x134>)
 8019ba0:	2207      	movs	r2, #7
 8019ba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019ba4:	e009      	b.n	8019bba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019ba6:	4b2f      	ldr	r3, [pc, #188]	; (8019c64 <xPortStartScheduler+0x134>)
 8019ba8:	681b      	ldr	r3, [r3, #0]
 8019baa:	3b01      	subs	r3, #1
 8019bac:	4a2d      	ldr	r2, [pc, #180]	; (8019c64 <xPortStartScheduler+0x134>)
 8019bae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019bb0:	78fb      	ldrb	r3, [r7, #3]
 8019bb2:	b2db      	uxtb	r3, r3
 8019bb4:	005b      	lsls	r3, r3, #1
 8019bb6:	b2db      	uxtb	r3, r3
 8019bb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019bba:	78fb      	ldrb	r3, [r7, #3]
 8019bbc:	b2db      	uxtb	r3, r3
 8019bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019bc2:	2b80      	cmp	r3, #128	; 0x80
 8019bc4:	d0ef      	beq.n	8019ba6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019bc6:	4b27      	ldr	r3, [pc, #156]	; (8019c64 <xPortStartScheduler+0x134>)
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	f1c3 0307 	rsb	r3, r3, #7
 8019bce:	2b04      	cmp	r3, #4
 8019bd0:	d00a      	beq.n	8019be8 <xPortStartScheduler+0xb8>
	__asm volatile
 8019bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019bd6:	f383 8811 	msr	BASEPRI, r3
 8019bda:	f3bf 8f6f 	isb	sy
 8019bde:	f3bf 8f4f 	dsb	sy
 8019be2:	60bb      	str	r3, [r7, #8]
}
 8019be4:	bf00      	nop
 8019be6:	e7fe      	b.n	8019be6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019be8:	4b1e      	ldr	r3, [pc, #120]	; (8019c64 <xPortStartScheduler+0x134>)
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	021b      	lsls	r3, r3, #8
 8019bee:	4a1d      	ldr	r2, [pc, #116]	; (8019c64 <xPortStartScheduler+0x134>)
 8019bf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019bf2:	4b1c      	ldr	r3, [pc, #112]	; (8019c64 <xPortStartScheduler+0x134>)
 8019bf4:	681b      	ldr	r3, [r3, #0]
 8019bf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8019bfa:	4a1a      	ldr	r2, [pc, #104]	; (8019c64 <xPortStartScheduler+0x134>)
 8019bfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	b2da      	uxtb	r2, r3
 8019c02:	697b      	ldr	r3, [r7, #20]
 8019c04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8019c06:	4b18      	ldr	r3, [pc, #96]	; (8019c68 <xPortStartScheduler+0x138>)
 8019c08:	681b      	ldr	r3, [r3, #0]
 8019c0a:	4a17      	ldr	r2, [pc, #92]	; (8019c68 <xPortStartScheduler+0x138>)
 8019c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019c10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019c12:	4b15      	ldr	r3, [pc, #84]	; (8019c68 <xPortStartScheduler+0x138>)
 8019c14:	681b      	ldr	r3, [r3, #0]
 8019c16:	4a14      	ldr	r2, [pc, #80]	; (8019c68 <xPortStartScheduler+0x138>)
 8019c18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8019c1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8019c1e:	f000 f8dd 	bl	8019ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8019c22:	4b12      	ldr	r3, [pc, #72]	; (8019c6c <xPortStartScheduler+0x13c>)
 8019c24:	2200      	movs	r2, #0
 8019c26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8019c28:	f000 f8fc 	bl	8019e24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8019c2c:	4b10      	ldr	r3, [pc, #64]	; (8019c70 <xPortStartScheduler+0x140>)
 8019c2e:	681b      	ldr	r3, [r3, #0]
 8019c30:	4a0f      	ldr	r2, [pc, #60]	; (8019c70 <xPortStartScheduler+0x140>)
 8019c32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8019c36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8019c38:	f7ff ff66 	bl	8019b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8019c3c:	f7ff f852 	bl	8018ce4 <vTaskSwitchContext>
	prvTaskExitError();
 8019c40:	f7ff ff1e 	bl	8019a80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8019c44:	2300      	movs	r3, #0
}
 8019c46:	4618      	mov	r0, r3
 8019c48:	3718      	adds	r7, #24
 8019c4a:	46bd      	mov	sp, r7
 8019c4c:	bd80      	pop	{r7, pc}
 8019c4e:	bf00      	nop
 8019c50:	e000ed00 	.word	0xe000ed00
 8019c54:	410fc271 	.word	0x410fc271
 8019c58:	410fc270 	.word	0x410fc270
 8019c5c:	e000e400 	.word	0xe000e400
 8019c60:	200022d4 	.word	0x200022d4
 8019c64:	200022d8 	.word	0x200022d8
 8019c68:	e000ed20 	.word	0xe000ed20
 8019c6c:	20000088 	.word	0x20000088
 8019c70:	e000ef34 	.word	0xe000ef34

08019c74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019c74:	b480      	push	{r7}
 8019c76:	b083      	sub	sp, #12
 8019c78:	af00      	add	r7, sp, #0
	__asm volatile
 8019c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c7e:	f383 8811 	msr	BASEPRI, r3
 8019c82:	f3bf 8f6f 	isb	sy
 8019c86:	f3bf 8f4f 	dsb	sy
 8019c8a:	607b      	str	r3, [r7, #4]
}
 8019c8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8019c8e:	4b0f      	ldr	r3, [pc, #60]	; (8019ccc <vPortEnterCritical+0x58>)
 8019c90:	681b      	ldr	r3, [r3, #0]
 8019c92:	3301      	adds	r3, #1
 8019c94:	4a0d      	ldr	r2, [pc, #52]	; (8019ccc <vPortEnterCritical+0x58>)
 8019c96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019c98:	4b0c      	ldr	r3, [pc, #48]	; (8019ccc <vPortEnterCritical+0x58>)
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	2b01      	cmp	r3, #1
 8019c9e:	d10f      	bne.n	8019cc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019ca0:	4b0b      	ldr	r3, [pc, #44]	; (8019cd0 <vPortEnterCritical+0x5c>)
 8019ca2:	681b      	ldr	r3, [r3, #0]
 8019ca4:	b2db      	uxtb	r3, r3
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d00a      	beq.n	8019cc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8019caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019cae:	f383 8811 	msr	BASEPRI, r3
 8019cb2:	f3bf 8f6f 	isb	sy
 8019cb6:	f3bf 8f4f 	dsb	sy
 8019cba:	603b      	str	r3, [r7, #0]
}
 8019cbc:	bf00      	nop
 8019cbe:	e7fe      	b.n	8019cbe <vPortEnterCritical+0x4a>
	}
}
 8019cc0:	bf00      	nop
 8019cc2:	370c      	adds	r7, #12
 8019cc4:	46bd      	mov	sp, r7
 8019cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cca:	4770      	bx	lr
 8019ccc:	20000088 	.word	0x20000088
 8019cd0:	e000ed04 	.word	0xe000ed04

08019cd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019cd4:	b480      	push	{r7}
 8019cd6:	b083      	sub	sp, #12
 8019cd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8019cda:	4b12      	ldr	r3, [pc, #72]	; (8019d24 <vPortExitCritical+0x50>)
 8019cdc:	681b      	ldr	r3, [r3, #0]
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	d10a      	bne.n	8019cf8 <vPortExitCritical+0x24>
	__asm volatile
 8019ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ce6:	f383 8811 	msr	BASEPRI, r3
 8019cea:	f3bf 8f6f 	isb	sy
 8019cee:	f3bf 8f4f 	dsb	sy
 8019cf2:	607b      	str	r3, [r7, #4]
}
 8019cf4:	bf00      	nop
 8019cf6:	e7fe      	b.n	8019cf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019cf8:	4b0a      	ldr	r3, [pc, #40]	; (8019d24 <vPortExitCritical+0x50>)
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	3b01      	subs	r3, #1
 8019cfe:	4a09      	ldr	r2, [pc, #36]	; (8019d24 <vPortExitCritical+0x50>)
 8019d00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019d02:	4b08      	ldr	r3, [pc, #32]	; (8019d24 <vPortExitCritical+0x50>)
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d105      	bne.n	8019d16 <vPortExitCritical+0x42>
 8019d0a:	2300      	movs	r3, #0
 8019d0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019d0e:	683b      	ldr	r3, [r7, #0]
 8019d10:	f383 8811 	msr	BASEPRI, r3
}
 8019d14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019d16:	bf00      	nop
 8019d18:	370c      	adds	r7, #12
 8019d1a:	46bd      	mov	sp, r7
 8019d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d20:	4770      	bx	lr
 8019d22:	bf00      	nop
 8019d24:	20000088 	.word	0x20000088
	...

08019d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019d30:	f3ef 8009 	mrs	r0, PSP
 8019d34:	f3bf 8f6f 	isb	sy
 8019d38:	4b15      	ldr	r3, [pc, #84]	; (8019d90 <pxCurrentTCBConst>)
 8019d3a:	681a      	ldr	r2, [r3, #0]
 8019d3c:	f01e 0f10 	tst.w	lr, #16
 8019d40:	bf08      	it	eq
 8019d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d4a:	6010      	str	r0, [r2, #0]
 8019d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8019d54:	f380 8811 	msr	BASEPRI, r0
 8019d58:	f3bf 8f4f 	dsb	sy
 8019d5c:	f3bf 8f6f 	isb	sy
 8019d60:	f7fe ffc0 	bl	8018ce4 <vTaskSwitchContext>
 8019d64:	f04f 0000 	mov.w	r0, #0
 8019d68:	f380 8811 	msr	BASEPRI, r0
 8019d6c:	bc09      	pop	{r0, r3}
 8019d6e:	6819      	ldr	r1, [r3, #0]
 8019d70:	6808      	ldr	r0, [r1, #0]
 8019d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d76:	f01e 0f10 	tst.w	lr, #16
 8019d7a:	bf08      	it	eq
 8019d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019d80:	f380 8809 	msr	PSP, r0
 8019d84:	f3bf 8f6f 	isb	sy
 8019d88:	4770      	bx	lr
 8019d8a:	bf00      	nop
 8019d8c:	f3af 8000 	nop.w

08019d90 <pxCurrentTCBConst>:
 8019d90:	20001ca8 	.word	0x20001ca8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019d94:	bf00      	nop
 8019d96:	bf00      	nop

08019d98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019d98:	b580      	push	{r7, lr}
 8019d9a:	b082      	sub	sp, #8
 8019d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8019d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019da2:	f383 8811 	msr	BASEPRI, r3
 8019da6:	f3bf 8f6f 	isb	sy
 8019daa:	f3bf 8f4f 	dsb	sy
 8019dae:	607b      	str	r3, [r7, #4]
}
 8019db0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019db2:	f7fe fedd 	bl	8018b70 <xTaskIncrementTick>
 8019db6:	4603      	mov	r3, r0
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	d003      	beq.n	8019dc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8019dbc:	4b06      	ldr	r3, [pc, #24]	; (8019dd8 <xPortSysTickHandler+0x40>)
 8019dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019dc2:	601a      	str	r2, [r3, #0]
 8019dc4:	2300      	movs	r3, #0
 8019dc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019dc8:	683b      	ldr	r3, [r7, #0]
 8019dca:	f383 8811 	msr	BASEPRI, r3
}
 8019dce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019dd0:	bf00      	nop
 8019dd2:	3708      	adds	r7, #8
 8019dd4:	46bd      	mov	sp, r7
 8019dd6:	bd80      	pop	{r7, pc}
 8019dd8:	e000ed04 	.word	0xe000ed04

08019ddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8019ddc:	b480      	push	{r7}
 8019dde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019de0:	4b0b      	ldr	r3, [pc, #44]	; (8019e10 <vPortSetupTimerInterrupt+0x34>)
 8019de2:	2200      	movs	r2, #0
 8019de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019de6:	4b0b      	ldr	r3, [pc, #44]	; (8019e14 <vPortSetupTimerInterrupt+0x38>)
 8019de8:	2200      	movs	r2, #0
 8019dea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8019dec:	4b0a      	ldr	r3, [pc, #40]	; (8019e18 <vPortSetupTimerInterrupt+0x3c>)
 8019dee:	681b      	ldr	r3, [r3, #0]
 8019df0:	4a0a      	ldr	r2, [pc, #40]	; (8019e1c <vPortSetupTimerInterrupt+0x40>)
 8019df2:	fba2 2303 	umull	r2, r3, r2, r3
 8019df6:	099b      	lsrs	r3, r3, #6
 8019df8:	4a09      	ldr	r2, [pc, #36]	; (8019e20 <vPortSetupTimerInterrupt+0x44>)
 8019dfa:	3b01      	subs	r3, #1
 8019dfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8019dfe:	4b04      	ldr	r3, [pc, #16]	; (8019e10 <vPortSetupTimerInterrupt+0x34>)
 8019e00:	2207      	movs	r2, #7
 8019e02:	601a      	str	r2, [r3, #0]
}
 8019e04:	bf00      	nop
 8019e06:	46bd      	mov	sp, r7
 8019e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e0c:	4770      	bx	lr
 8019e0e:	bf00      	nop
 8019e10:	e000e010 	.word	0xe000e010
 8019e14:	e000e018 	.word	0xe000e018
 8019e18:	2000001c 	.word	0x2000001c
 8019e1c:	10624dd3 	.word	0x10624dd3
 8019e20:	e000e014 	.word	0xe000e014

08019e24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019e24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019e34 <vPortEnableVFP+0x10>
 8019e28:	6801      	ldr	r1, [r0, #0]
 8019e2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8019e2e:	6001      	str	r1, [r0, #0]
 8019e30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019e32:	bf00      	nop
 8019e34:	e000ed88 	.word	0xe000ed88

08019e38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019e38:	b480      	push	{r7}
 8019e3a:	b085      	sub	sp, #20
 8019e3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8019e3e:	f3ef 8305 	mrs	r3, IPSR
 8019e42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019e44:	68fb      	ldr	r3, [r7, #12]
 8019e46:	2b0f      	cmp	r3, #15
 8019e48:	d914      	bls.n	8019e74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8019e4a:	4a17      	ldr	r2, [pc, #92]	; (8019ea8 <vPortValidateInterruptPriority+0x70>)
 8019e4c:	68fb      	ldr	r3, [r7, #12]
 8019e4e:	4413      	add	r3, r2
 8019e50:	781b      	ldrb	r3, [r3, #0]
 8019e52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019e54:	4b15      	ldr	r3, [pc, #84]	; (8019eac <vPortValidateInterruptPriority+0x74>)
 8019e56:	781b      	ldrb	r3, [r3, #0]
 8019e58:	7afa      	ldrb	r2, [r7, #11]
 8019e5a:	429a      	cmp	r2, r3
 8019e5c:	d20a      	bcs.n	8019e74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8019e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e62:	f383 8811 	msr	BASEPRI, r3
 8019e66:	f3bf 8f6f 	isb	sy
 8019e6a:	f3bf 8f4f 	dsb	sy
 8019e6e:	607b      	str	r3, [r7, #4]
}
 8019e70:	bf00      	nop
 8019e72:	e7fe      	b.n	8019e72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019e74:	4b0e      	ldr	r3, [pc, #56]	; (8019eb0 <vPortValidateInterruptPriority+0x78>)
 8019e76:	681b      	ldr	r3, [r3, #0]
 8019e78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8019e7c:	4b0d      	ldr	r3, [pc, #52]	; (8019eb4 <vPortValidateInterruptPriority+0x7c>)
 8019e7e:	681b      	ldr	r3, [r3, #0]
 8019e80:	429a      	cmp	r2, r3
 8019e82:	d90a      	bls.n	8019e9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e88:	f383 8811 	msr	BASEPRI, r3
 8019e8c:	f3bf 8f6f 	isb	sy
 8019e90:	f3bf 8f4f 	dsb	sy
 8019e94:	603b      	str	r3, [r7, #0]
}
 8019e96:	bf00      	nop
 8019e98:	e7fe      	b.n	8019e98 <vPortValidateInterruptPriority+0x60>
	}
 8019e9a:	bf00      	nop
 8019e9c:	3714      	adds	r7, #20
 8019e9e:	46bd      	mov	sp, r7
 8019ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ea4:	4770      	bx	lr
 8019ea6:	bf00      	nop
 8019ea8:	e000e3f0 	.word	0xe000e3f0
 8019eac:	200022d4 	.word	0x200022d4
 8019eb0:	e000ed0c 	.word	0xe000ed0c
 8019eb4:	200022d8 	.word	0x200022d8

08019eb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019eb8:	b580      	push	{r7, lr}
 8019eba:	b08a      	sub	sp, #40	; 0x28
 8019ebc:	af00      	add	r7, sp, #0
 8019ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019ec0:	2300      	movs	r3, #0
 8019ec2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019ec4:	f7fe fd98 	bl	80189f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019ec8:	4b5b      	ldr	r3, [pc, #364]	; (801a038 <pvPortMalloc+0x180>)
 8019eca:	681b      	ldr	r3, [r3, #0]
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	d101      	bne.n	8019ed4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019ed0:	f000 f920 	bl	801a114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019ed4:	4b59      	ldr	r3, [pc, #356]	; (801a03c <pvPortMalloc+0x184>)
 8019ed6:	681a      	ldr	r2, [r3, #0]
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	4013      	ands	r3, r2
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	f040 8093 	bne.w	801a008 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019ee2:	687b      	ldr	r3, [r7, #4]
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	d01d      	beq.n	8019f24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8019ee8:	2208      	movs	r2, #8
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	4413      	add	r3, r2
 8019eee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	f003 0307 	and.w	r3, r3, #7
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	d014      	beq.n	8019f24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	f023 0307 	bic.w	r3, r3, #7
 8019f00:	3308      	adds	r3, #8
 8019f02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	f003 0307 	and.w	r3, r3, #7
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	d00a      	beq.n	8019f24 <pvPortMalloc+0x6c>
	__asm volatile
 8019f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f12:	f383 8811 	msr	BASEPRI, r3
 8019f16:	f3bf 8f6f 	isb	sy
 8019f1a:	f3bf 8f4f 	dsb	sy
 8019f1e:	617b      	str	r3, [r7, #20]
}
 8019f20:	bf00      	nop
 8019f22:	e7fe      	b.n	8019f22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	d06e      	beq.n	801a008 <pvPortMalloc+0x150>
 8019f2a:	4b45      	ldr	r3, [pc, #276]	; (801a040 <pvPortMalloc+0x188>)
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	687a      	ldr	r2, [r7, #4]
 8019f30:	429a      	cmp	r2, r3
 8019f32:	d869      	bhi.n	801a008 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019f34:	4b43      	ldr	r3, [pc, #268]	; (801a044 <pvPortMalloc+0x18c>)
 8019f36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019f38:	4b42      	ldr	r3, [pc, #264]	; (801a044 <pvPortMalloc+0x18c>)
 8019f3a:	681b      	ldr	r3, [r3, #0]
 8019f3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019f3e:	e004      	b.n	8019f4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8019f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f46:	681b      	ldr	r3, [r3, #0]
 8019f48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f4c:	685b      	ldr	r3, [r3, #4]
 8019f4e:	687a      	ldr	r2, [r7, #4]
 8019f50:	429a      	cmp	r2, r3
 8019f52:	d903      	bls.n	8019f5c <pvPortMalloc+0xa4>
 8019f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f56:	681b      	ldr	r3, [r3, #0]
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	d1f1      	bne.n	8019f40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8019f5c:	4b36      	ldr	r3, [pc, #216]	; (801a038 <pvPortMalloc+0x180>)
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f62:	429a      	cmp	r2, r3
 8019f64:	d050      	beq.n	801a008 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019f66:	6a3b      	ldr	r3, [r7, #32]
 8019f68:	681b      	ldr	r3, [r3, #0]
 8019f6a:	2208      	movs	r2, #8
 8019f6c:	4413      	add	r3, r2
 8019f6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f72:	681a      	ldr	r2, [r3, #0]
 8019f74:	6a3b      	ldr	r3, [r7, #32]
 8019f76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f7a:	685a      	ldr	r2, [r3, #4]
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	1ad2      	subs	r2, r2, r3
 8019f80:	2308      	movs	r3, #8
 8019f82:	005b      	lsls	r3, r3, #1
 8019f84:	429a      	cmp	r2, r3
 8019f86:	d91f      	bls.n	8019fc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	4413      	add	r3, r2
 8019f8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019f90:	69bb      	ldr	r3, [r7, #24]
 8019f92:	f003 0307 	and.w	r3, r3, #7
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	d00a      	beq.n	8019fb0 <pvPortMalloc+0xf8>
	__asm volatile
 8019f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f9e:	f383 8811 	msr	BASEPRI, r3
 8019fa2:	f3bf 8f6f 	isb	sy
 8019fa6:	f3bf 8f4f 	dsb	sy
 8019faa:	613b      	str	r3, [r7, #16]
}
 8019fac:	bf00      	nop
 8019fae:	e7fe      	b.n	8019fae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fb2:	685a      	ldr	r2, [r3, #4]
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	1ad2      	subs	r2, r2, r3
 8019fb8:	69bb      	ldr	r3, [r7, #24]
 8019fba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fbe:	687a      	ldr	r2, [r7, #4]
 8019fc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019fc2:	69b8      	ldr	r0, [r7, #24]
 8019fc4:	f000 f908 	bl	801a1d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019fc8:	4b1d      	ldr	r3, [pc, #116]	; (801a040 <pvPortMalloc+0x188>)
 8019fca:	681a      	ldr	r2, [r3, #0]
 8019fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fce:	685b      	ldr	r3, [r3, #4]
 8019fd0:	1ad3      	subs	r3, r2, r3
 8019fd2:	4a1b      	ldr	r2, [pc, #108]	; (801a040 <pvPortMalloc+0x188>)
 8019fd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019fd6:	4b1a      	ldr	r3, [pc, #104]	; (801a040 <pvPortMalloc+0x188>)
 8019fd8:	681a      	ldr	r2, [r3, #0]
 8019fda:	4b1b      	ldr	r3, [pc, #108]	; (801a048 <pvPortMalloc+0x190>)
 8019fdc:	681b      	ldr	r3, [r3, #0]
 8019fde:	429a      	cmp	r2, r3
 8019fe0:	d203      	bcs.n	8019fea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019fe2:	4b17      	ldr	r3, [pc, #92]	; (801a040 <pvPortMalloc+0x188>)
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	4a18      	ldr	r2, [pc, #96]	; (801a048 <pvPortMalloc+0x190>)
 8019fe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8019fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fec:	685a      	ldr	r2, [r3, #4]
 8019fee:	4b13      	ldr	r3, [pc, #76]	; (801a03c <pvPortMalloc+0x184>)
 8019ff0:	681b      	ldr	r3, [r3, #0]
 8019ff2:	431a      	orrs	r2, r3
 8019ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ff6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ffa:	2200      	movs	r2, #0
 8019ffc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8019ffe:	4b13      	ldr	r3, [pc, #76]	; (801a04c <pvPortMalloc+0x194>)
 801a000:	681b      	ldr	r3, [r3, #0]
 801a002:	3301      	adds	r3, #1
 801a004:	4a11      	ldr	r2, [pc, #68]	; (801a04c <pvPortMalloc+0x194>)
 801a006:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801a008:	f7fe fd04 	bl	8018a14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a00c:	69fb      	ldr	r3, [r7, #28]
 801a00e:	f003 0307 	and.w	r3, r3, #7
 801a012:	2b00      	cmp	r3, #0
 801a014:	d00a      	beq.n	801a02c <pvPortMalloc+0x174>
	__asm volatile
 801a016:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a01a:	f383 8811 	msr	BASEPRI, r3
 801a01e:	f3bf 8f6f 	isb	sy
 801a022:	f3bf 8f4f 	dsb	sy
 801a026:	60fb      	str	r3, [r7, #12]
}
 801a028:	bf00      	nop
 801a02a:	e7fe      	b.n	801a02a <pvPortMalloc+0x172>
	return pvReturn;
 801a02c:	69fb      	ldr	r3, [r7, #28]
}
 801a02e:	4618      	mov	r0, r3
 801a030:	3728      	adds	r7, #40	; 0x28
 801a032:	46bd      	mov	sp, r7
 801a034:	bd80      	pop	{r7, pc}
 801a036:	bf00      	nop
 801a038:	20005ee4 	.word	0x20005ee4
 801a03c:	20005ef8 	.word	0x20005ef8
 801a040:	20005ee8 	.word	0x20005ee8
 801a044:	20005edc 	.word	0x20005edc
 801a048:	20005eec 	.word	0x20005eec
 801a04c:	20005ef0 	.word	0x20005ef0

0801a050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801a050:	b580      	push	{r7, lr}
 801a052:	b086      	sub	sp, #24
 801a054:	af00      	add	r7, sp, #0
 801a056:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801a058:	687b      	ldr	r3, [r7, #4]
 801a05a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d04d      	beq.n	801a0fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801a062:	2308      	movs	r3, #8
 801a064:	425b      	negs	r3, r3
 801a066:	697a      	ldr	r2, [r7, #20]
 801a068:	4413      	add	r3, r2
 801a06a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801a06c:	697b      	ldr	r3, [r7, #20]
 801a06e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a070:	693b      	ldr	r3, [r7, #16]
 801a072:	685a      	ldr	r2, [r3, #4]
 801a074:	4b24      	ldr	r3, [pc, #144]	; (801a108 <vPortFree+0xb8>)
 801a076:	681b      	ldr	r3, [r3, #0]
 801a078:	4013      	ands	r3, r2
 801a07a:	2b00      	cmp	r3, #0
 801a07c:	d10a      	bne.n	801a094 <vPortFree+0x44>
	__asm volatile
 801a07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a082:	f383 8811 	msr	BASEPRI, r3
 801a086:	f3bf 8f6f 	isb	sy
 801a08a:	f3bf 8f4f 	dsb	sy
 801a08e:	60fb      	str	r3, [r7, #12]
}
 801a090:	bf00      	nop
 801a092:	e7fe      	b.n	801a092 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a094:	693b      	ldr	r3, [r7, #16]
 801a096:	681b      	ldr	r3, [r3, #0]
 801a098:	2b00      	cmp	r3, #0
 801a09a:	d00a      	beq.n	801a0b2 <vPortFree+0x62>
	__asm volatile
 801a09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0a0:	f383 8811 	msr	BASEPRI, r3
 801a0a4:	f3bf 8f6f 	isb	sy
 801a0a8:	f3bf 8f4f 	dsb	sy
 801a0ac:	60bb      	str	r3, [r7, #8]
}
 801a0ae:	bf00      	nop
 801a0b0:	e7fe      	b.n	801a0b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801a0b2:	693b      	ldr	r3, [r7, #16]
 801a0b4:	685a      	ldr	r2, [r3, #4]
 801a0b6:	4b14      	ldr	r3, [pc, #80]	; (801a108 <vPortFree+0xb8>)
 801a0b8:	681b      	ldr	r3, [r3, #0]
 801a0ba:	4013      	ands	r3, r2
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d01e      	beq.n	801a0fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801a0c0:	693b      	ldr	r3, [r7, #16]
 801a0c2:	681b      	ldr	r3, [r3, #0]
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	d11a      	bne.n	801a0fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a0c8:	693b      	ldr	r3, [r7, #16]
 801a0ca:	685a      	ldr	r2, [r3, #4]
 801a0cc:	4b0e      	ldr	r3, [pc, #56]	; (801a108 <vPortFree+0xb8>)
 801a0ce:	681b      	ldr	r3, [r3, #0]
 801a0d0:	43db      	mvns	r3, r3
 801a0d2:	401a      	ands	r2, r3
 801a0d4:	693b      	ldr	r3, [r7, #16]
 801a0d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801a0d8:	f7fe fc8e 	bl	80189f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a0dc:	693b      	ldr	r3, [r7, #16]
 801a0de:	685a      	ldr	r2, [r3, #4]
 801a0e0:	4b0a      	ldr	r3, [pc, #40]	; (801a10c <vPortFree+0xbc>)
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	4413      	add	r3, r2
 801a0e6:	4a09      	ldr	r2, [pc, #36]	; (801a10c <vPortFree+0xbc>)
 801a0e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a0ea:	6938      	ldr	r0, [r7, #16]
 801a0ec:	f000 f874 	bl	801a1d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801a0f0:	4b07      	ldr	r3, [pc, #28]	; (801a110 <vPortFree+0xc0>)
 801a0f2:	681b      	ldr	r3, [r3, #0]
 801a0f4:	3301      	adds	r3, #1
 801a0f6:	4a06      	ldr	r2, [pc, #24]	; (801a110 <vPortFree+0xc0>)
 801a0f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801a0fa:	f7fe fc8b 	bl	8018a14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801a0fe:	bf00      	nop
 801a100:	3718      	adds	r7, #24
 801a102:	46bd      	mov	sp, r7
 801a104:	bd80      	pop	{r7, pc}
 801a106:	bf00      	nop
 801a108:	20005ef8 	.word	0x20005ef8
 801a10c:	20005ee8 	.word	0x20005ee8
 801a110:	20005ef4 	.word	0x20005ef4

0801a114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801a114:	b480      	push	{r7}
 801a116:	b085      	sub	sp, #20
 801a118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a11a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801a11e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a120:	4b27      	ldr	r3, [pc, #156]	; (801a1c0 <prvHeapInit+0xac>)
 801a122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a124:	68fb      	ldr	r3, [r7, #12]
 801a126:	f003 0307 	and.w	r3, r3, #7
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	d00c      	beq.n	801a148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a12e:	68fb      	ldr	r3, [r7, #12]
 801a130:	3307      	adds	r3, #7
 801a132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a134:	68fb      	ldr	r3, [r7, #12]
 801a136:	f023 0307 	bic.w	r3, r3, #7
 801a13a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a13c:	68ba      	ldr	r2, [r7, #8]
 801a13e:	68fb      	ldr	r3, [r7, #12]
 801a140:	1ad3      	subs	r3, r2, r3
 801a142:	4a1f      	ldr	r2, [pc, #124]	; (801a1c0 <prvHeapInit+0xac>)
 801a144:	4413      	add	r3, r2
 801a146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801a148:	68fb      	ldr	r3, [r7, #12]
 801a14a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a14c:	4a1d      	ldr	r2, [pc, #116]	; (801a1c4 <prvHeapInit+0xb0>)
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a152:	4b1c      	ldr	r3, [pc, #112]	; (801a1c4 <prvHeapInit+0xb0>)
 801a154:	2200      	movs	r2, #0
 801a156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	68ba      	ldr	r2, [r7, #8]
 801a15c:	4413      	add	r3, r2
 801a15e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801a160:	2208      	movs	r2, #8
 801a162:	68fb      	ldr	r3, [r7, #12]
 801a164:	1a9b      	subs	r3, r3, r2
 801a166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a168:	68fb      	ldr	r3, [r7, #12]
 801a16a:	f023 0307 	bic.w	r3, r3, #7
 801a16e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801a170:	68fb      	ldr	r3, [r7, #12]
 801a172:	4a15      	ldr	r2, [pc, #84]	; (801a1c8 <prvHeapInit+0xb4>)
 801a174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801a176:	4b14      	ldr	r3, [pc, #80]	; (801a1c8 <prvHeapInit+0xb4>)
 801a178:	681b      	ldr	r3, [r3, #0]
 801a17a:	2200      	movs	r2, #0
 801a17c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a17e:	4b12      	ldr	r3, [pc, #72]	; (801a1c8 <prvHeapInit+0xb4>)
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	2200      	movs	r2, #0
 801a184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801a186:	687b      	ldr	r3, [r7, #4]
 801a188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a18a:	683b      	ldr	r3, [r7, #0]
 801a18c:	68fa      	ldr	r2, [r7, #12]
 801a18e:	1ad2      	subs	r2, r2, r3
 801a190:	683b      	ldr	r3, [r7, #0]
 801a192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a194:	4b0c      	ldr	r3, [pc, #48]	; (801a1c8 <prvHeapInit+0xb4>)
 801a196:	681a      	ldr	r2, [r3, #0]
 801a198:	683b      	ldr	r3, [r7, #0]
 801a19a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a19c:	683b      	ldr	r3, [r7, #0]
 801a19e:	685b      	ldr	r3, [r3, #4]
 801a1a0:	4a0a      	ldr	r2, [pc, #40]	; (801a1cc <prvHeapInit+0xb8>)
 801a1a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a1a4:	683b      	ldr	r3, [r7, #0]
 801a1a6:	685b      	ldr	r3, [r3, #4]
 801a1a8:	4a09      	ldr	r2, [pc, #36]	; (801a1d0 <prvHeapInit+0xbc>)
 801a1aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a1ac:	4b09      	ldr	r3, [pc, #36]	; (801a1d4 <prvHeapInit+0xc0>)
 801a1ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a1b2:	601a      	str	r2, [r3, #0]
}
 801a1b4:	bf00      	nop
 801a1b6:	3714      	adds	r7, #20
 801a1b8:	46bd      	mov	sp, r7
 801a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1be:	4770      	bx	lr
 801a1c0:	200022dc 	.word	0x200022dc
 801a1c4:	20005edc 	.word	0x20005edc
 801a1c8:	20005ee4 	.word	0x20005ee4
 801a1cc:	20005eec 	.word	0x20005eec
 801a1d0:	20005ee8 	.word	0x20005ee8
 801a1d4:	20005ef8 	.word	0x20005ef8

0801a1d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801a1d8:	b480      	push	{r7}
 801a1da:	b085      	sub	sp, #20
 801a1dc:	af00      	add	r7, sp, #0
 801a1de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a1e0:	4b28      	ldr	r3, [pc, #160]	; (801a284 <prvInsertBlockIntoFreeList+0xac>)
 801a1e2:	60fb      	str	r3, [r7, #12]
 801a1e4:	e002      	b.n	801a1ec <prvInsertBlockIntoFreeList+0x14>
 801a1e6:	68fb      	ldr	r3, [r7, #12]
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	60fb      	str	r3, [r7, #12]
 801a1ec:	68fb      	ldr	r3, [r7, #12]
 801a1ee:	681b      	ldr	r3, [r3, #0]
 801a1f0:	687a      	ldr	r2, [r7, #4]
 801a1f2:	429a      	cmp	r2, r3
 801a1f4:	d8f7      	bhi.n	801a1e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801a1f6:	68fb      	ldr	r3, [r7, #12]
 801a1f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a1fa:	68fb      	ldr	r3, [r7, #12]
 801a1fc:	685b      	ldr	r3, [r3, #4]
 801a1fe:	68ba      	ldr	r2, [r7, #8]
 801a200:	4413      	add	r3, r2
 801a202:	687a      	ldr	r2, [r7, #4]
 801a204:	429a      	cmp	r2, r3
 801a206:	d108      	bne.n	801a21a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a208:	68fb      	ldr	r3, [r7, #12]
 801a20a:	685a      	ldr	r2, [r3, #4]
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	685b      	ldr	r3, [r3, #4]
 801a210:	441a      	add	r2, r3
 801a212:	68fb      	ldr	r3, [r7, #12]
 801a214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801a216:	68fb      	ldr	r3, [r7, #12]
 801a218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	685b      	ldr	r3, [r3, #4]
 801a222:	68ba      	ldr	r2, [r7, #8]
 801a224:	441a      	add	r2, r3
 801a226:	68fb      	ldr	r3, [r7, #12]
 801a228:	681b      	ldr	r3, [r3, #0]
 801a22a:	429a      	cmp	r2, r3
 801a22c:	d118      	bne.n	801a260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a22e:	68fb      	ldr	r3, [r7, #12]
 801a230:	681a      	ldr	r2, [r3, #0]
 801a232:	4b15      	ldr	r3, [pc, #84]	; (801a288 <prvInsertBlockIntoFreeList+0xb0>)
 801a234:	681b      	ldr	r3, [r3, #0]
 801a236:	429a      	cmp	r2, r3
 801a238:	d00d      	beq.n	801a256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	685a      	ldr	r2, [r3, #4]
 801a23e:	68fb      	ldr	r3, [r7, #12]
 801a240:	681b      	ldr	r3, [r3, #0]
 801a242:	685b      	ldr	r3, [r3, #4]
 801a244:	441a      	add	r2, r3
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a24a:	68fb      	ldr	r3, [r7, #12]
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	681a      	ldr	r2, [r3, #0]
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	601a      	str	r2, [r3, #0]
 801a254:	e008      	b.n	801a268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a256:	4b0c      	ldr	r3, [pc, #48]	; (801a288 <prvInsertBlockIntoFreeList+0xb0>)
 801a258:	681a      	ldr	r2, [r3, #0]
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	601a      	str	r2, [r3, #0]
 801a25e:	e003      	b.n	801a268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a260:	68fb      	ldr	r3, [r7, #12]
 801a262:	681a      	ldr	r2, [r3, #0]
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a268:	68fa      	ldr	r2, [r7, #12]
 801a26a:	687b      	ldr	r3, [r7, #4]
 801a26c:	429a      	cmp	r2, r3
 801a26e:	d002      	beq.n	801a276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a270:	68fb      	ldr	r3, [r7, #12]
 801a272:	687a      	ldr	r2, [r7, #4]
 801a274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a276:	bf00      	nop
 801a278:	3714      	adds	r7, #20
 801a27a:	46bd      	mov	sp, r7
 801a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a280:	4770      	bx	lr
 801a282:	bf00      	nop
 801a284:	20005edc 	.word	0x20005edc
 801a288:	20005ee4 	.word	0x20005ee4

0801a28c <__errno>:
 801a28c:	4b01      	ldr	r3, [pc, #4]	; (801a294 <__errno+0x8>)
 801a28e:	6818      	ldr	r0, [r3, #0]
 801a290:	4770      	bx	lr
 801a292:	bf00      	nop
 801a294:	2000008c 	.word	0x2000008c

0801a298 <__libc_init_array>:
 801a298:	b570      	push	{r4, r5, r6, lr}
 801a29a:	4d0d      	ldr	r5, [pc, #52]	; (801a2d0 <__libc_init_array+0x38>)
 801a29c:	4c0d      	ldr	r4, [pc, #52]	; (801a2d4 <__libc_init_array+0x3c>)
 801a29e:	1b64      	subs	r4, r4, r5
 801a2a0:	10a4      	asrs	r4, r4, #2
 801a2a2:	2600      	movs	r6, #0
 801a2a4:	42a6      	cmp	r6, r4
 801a2a6:	d109      	bne.n	801a2bc <__libc_init_array+0x24>
 801a2a8:	4d0b      	ldr	r5, [pc, #44]	; (801a2d8 <__libc_init_array+0x40>)
 801a2aa:	4c0c      	ldr	r4, [pc, #48]	; (801a2dc <__libc_init_array+0x44>)
 801a2ac:	f005 ff68 	bl	8020180 <_init>
 801a2b0:	1b64      	subs	r4, r4, r5
 801a2b2:	10a4      	asrs	r4, r4, #2
 801a2b4:	2600      	movs	r6, #0
 801a2b6:	42a6      	cmp	r6, r4
 801a2b8:	d105      	bne.n	801a2c6 <__libc_init_array+0x2e>
 801a2ba:	bd70      	pop	{r4, r5, r6, pc}
 801a2bc:	f855 3b04 	ldr.w	r3, [r5], #4
 801a2c0:	4798      	blx	r3
 801a2c2:	3601      	adds	r6, #1
 801a2c4:	e7ee      	b.n	801a2a4 <__libc_init_array+0xc>
 801a2c6:	f855 3b04 	ldr.w	r3, [r5], #4
 801a2ca:	4798      	blx	r3
 801a2cc:	3601      	adds	r6, #1
 801a2ce:	e7f2      	b.n	801a2b6 <__libc_init_array+0x1e>
 801a2d0:	0802109c 	.word	0x0802109c
 801a2d4:	0802109c 	.word	0x0802109c
 801a2d8:	0802109c 	.word	0x0802109c
 801a2dc:	080210a0 	.word	0x080210a0

0801a2e0 <malloc>:
 801a2e0:	4b02      	ldr	r3, [pc, #8]	; (801a2ec <malloc+0xc>)
 801a2e2:	4601      	mov	r1, r0
 801a2e4:	6818      	ldr	r0, [r3, #0]
 801a2e6:	f000 b869 	b.w	801a3bc <_malloc_r>
 801a2ea:	bf00      	nop
 801a2ec:	2000008c 	.word	0x2000008c

0801a2f0 <memcpy>:
 801a2f0:	440a      	add	r2, r1
 801a2f2:	4291      	cmp	r1, r2
 801a2f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a2f8:	d100      	bne.n	801a2fc <memcpy+0xc>
 801a2fa:	4770      	bx	lr
 801a2fc:	b510      	push	{r4, lr}
 801a2fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a302:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a306:	4291      	cmp	r1, r2
 801a308:	d1f9      	bne.n	801a2fe <memcpy+0xe>
 801a30a:	bd10      	pop	{r4, pc}

0801a30c <memset>:
 801a30c:	4402      	add	r2, r0
 801a30e:	4603      	mov	r3, r0
 801a310:	4293      	cmp	r3, r2
 801a312:	d100      	bne.n	801a316 <memset+0xa>
 801a314:	4770      	bx	lr
 801a316:	f803 1b01 	strb.w	r1, [r3], #1
 801a31a:	e7f9      	b.n	801a310 <memset+0x4>

0801a31c <_free_r>:
 801a31c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a31e:	2900      	cmp	r1, #0
 801a320:	d048      	beq.n	801a3b4 <_free_r+0x98>
 801a322:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a326:	9001      	str	r0, [sp, #4]
 801a328:	2b00      	cmp	r3, #0
 801a32a:	f1a1 0404 	sub.w	r4, r1, #4
 801a32e:	bfb8      	it	lt
 801a330:	18e4      	addlt	r4, r4, r3
 801a332:	f003 f925 	bl	801d580 <__malloc_lock>
 801a336:	4a20      	ldr	r2, [pc, #128]	; (801a3b8 <_free_r+0x9c>)
 801a338:	9801      	ldr	r0, [sp, #4]
 801a33a:	6813      	ldr	r3, [r2, #0]
 801a33c:	4615      	mov	r5, r2
 801a33e:	b933      	cbnz	r3, 801a34e <_free_r+0x32>
 801a340:	6063      	str	r3, [r4, #4]
 801a342:	6014      	str	r4, [r2, #0]
 801a344:	b003      	add	sp, #12
 801a346:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a34a:	f003 b91f 	b.w	801d58c <__malloc_unlock>
 801a34e:	42a3      	cmp	r3, r4
 801a350:	d90b      	bls.n	801a36a <_free_r+0x4e>
 801a352:	6821      	ldr	r1, [r4, #0]
 801a354:	1862      	adds	r2, r4, r1
 801a356:	4293      	cmp	r3, r2
 801a358:	bf04      	itt	eq
 801a35a:	681a      	ldreq	r2, [r3, #0]
 801a35c:	685b      	ldreq	r3, [r3, #4]
 801a35e:	6063      	str	r3, [r4, #4]
 801a360:	bf04      	itt	eq
 801a362:	1852      	addeq	r2, r2, r1
 801a364:	6022      	streq	r2, [r4, #0]
 801a366:	602c      	str	r4, [r5, #0]
 801a368:	e7ec      	b.n	801a344 <_free_r+0x28>
 801a36a:	461a      	mov	r2, r3
 801a36c:	685b      	ldr	r3, [r3, #4]
 801a36e:	b10b      	cbz	r3, 801a374 <_free_r+0x58>
 801a370:	42a3      	cmp	r3, r4
 801a372:	d9fa      	bls.n	801a36a <_free_r+0x4e>
 801a374:	6811      	ldr	r1, [r2, #0]
 801a376:	1855      	adds	r5, r2, r1
 801a378:	42a5      	cmp	r5, r4
 801a37a:	d10b      	bne.n	801a394 <_free_r+0x78>
 801a37c:	6824      	ldr	r4, [r4, #0]
 801a37e:	4421      	add	r1, r4
 801a380:	1854      	adds	r4, r2, r1
 801a382:	42a3      	cmp	r3, r4
 801a384:	6011      	str	r1, [r2, #0]
 801a386:	d1dd      	bne.n	801a344 <_free_r+0x28>
 801a388:	681c      	ldr	r4, [r3, #0]
 801a38a:	685b      	ldr	r3, [r3, #4]
 801a38c:	6053      	str	r3, [r2, #4]
 801a38e:	4421      	add	r1, r4
 801a390:	6011      	str	r1, [r2, #0]
 801a392:	e7d7      	b.n	801a344 <_free_r+0x28>
 801a394:	d902      	bls.n	801a39c <_free_r+0x80>
 801a396:	230c      	movs	r3, #12
 801a398:	6003      	str	r3, [r0, #0]
 801a39a:	e7d3      	b.n	801a344 <_free_r+0x28>
 801a39c:	6825      	ldr	r5, [r4, #0]
 801a39e:	1961      	adds	r1, r4, r5
 801a3a0:	428b      	cmp	r3, r1
 801a3a2:	bf04      	itt	eq
 801a3a4:	6819      	ldreq	r1, [r3, #0]
 801a3a6:	685b      	ldreq	r3, [r3, #4]
 801a3a8:	6063      	str	r3, [r4, #4]
 801a3aa:	bf04      	itt	eq
 801a3ac:	1949      	addeq	r1, r1, r5
 801a3ae:	6021      	streq	r1, [r4, #0]
 801a3b0:	6054      	str	r4, [r2, #4]
 801a3b2:	e7c7      	b.n	801a344 <_free_r+0x28>
 801a3b4:	b003      	add	sp, #12
 801a3b6:	bd30      	pop	{r4, r5, pc}
 801a3b8:	20005efc 	.word	0x20005efc

0801a3bc <_malloc_r>:
 801a3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3be:	1ccd      	adds	r5, r1, #3
 801a3c0:	f025 0503 	bic.w	r5, r5, #3
 801a3c4:	3508      	adds	r5, #8
 801a3c6:	2d0c      	cmp	r5, #12
 801a3c8:	bf38      	it	cc
 801a3ca:	250c      	movcc	r5, #12
 801a3cc:	2d00      	cmp	r5, #0
 801a3ce:	4606      	mov	r6, r0
 801a3d0:	db01      	blt.n	801a3d6 <_malloc_r+0x1a>
 801a3d2:	42a9      	cmp	r1, r5
 801a3d4:	d903      	bls.n	801a3de <_malloc_r+0x22>
 801a3d6:	230c      	movs	r3, #12
 801a3d8:	6033      	str	r3, [r6, #0]
 801a3da:	2000      	movs	r0, #0
 801a3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3de:	f003 f8cf 	bl	801d580 <__malloc_lock>
 801a3e2:	4921      	ldr	r1, [pc, #132]	; (801a468 <_malloc_r+0xac>)
 801a3e4:	680a      	ldr	r2, [r1, #0]
 801a3e6:	4614      	mov	r4, r2
 801a3e8:	b99c      	cbnz	r4, 801a412 <_malloc_r+0x56>
 801a3ea:	4f20      	ldr	r7, [pc, #128]	; (801a46c <_malloc_r+0xb0>)
 801a3ec:	683b      	ldr	r3, [r7, #0]
 801a3ee:	b923      	cbnz	r3, 801a3fa <_malloc_r+0x3e>
 801a3f0:	4621      	mov	r1, r4
 801a3f2:	4630      	mov	r0, r6
 801a3f4:	f000 febe 	bl	801b174 <_sbrk_r>
 801a3f8:	6038      	str	r0, [r7, #0]
 801a3fa:	4629      	mov	r1, r5
 801a3fc:	4630      	mov	r0, r6
 801a3fe:	f000 feb9 	bl	801b174 <_sbrk_r>
 801a402:	1c43      	adds	r3, r0, #1
 801a404:	d123      	bne.n	801a44e <_malloc_r+0x92>
 801a406:	230c      	movs	r3, #12
 801a408:	6033      	str	r3, [r6, #0]
 801a40a:	4630      	mov	r0, r6
 801a40c:	f003 f8be 	bl	801d58c <__malloc_unlock>
 801a410:	e7e3      	b.n	801a3da <_malloc_r+0x1e>
 801a412:	6823      	ldr	r3, [r4, #0]
 801a414:	1b5b      	subs	r3, r3, r5
 801a416:	d417      	bmi.n	801a448 <_malloc_r+0x8c>
 801a418:	2b0b      	cmp	r3, #11
 801a41a:	d903      	bls.n	801a424 <_malloc_r+0x68>
 801a41c:	6023      	str	r3, [r4, #0]
 801a41e:	441c      	add	r4, r3
 801a420:	6025      	str	r5, [r4, #0]
 801a422:	e004      	b.n	801a42e <_malloc_r+0x72>
 801a424:	6863      	ldr	r3, [r4, #4]
 801a426:	42a2      	cmp	r2, r4
 801a428:	bf0c      	ite	eq
 801a42a:	600b      	streq	r3, [r1, #0]
 801a42c:	6053      	strne	r3, [r2, #4]
 801a42e:	4630      	mov	r0, r6
 801a430:	f003 f8ac 	bl	801d58c <__malloc_unlock>
 801a434:	f104 000b 	add.w	r0, r4, #11
 801a438:	1d23      	adds	r3, r4, #4
 801a43a:	f020 0007 	bic.w	r0, r0, #7
 801a43e:	1ac2      	subs	r2, r0, r3
 801a440:	d0cc      	beq.n	801a3dc <_malloc_r+0x20>
 801a442:	1a1b      	subs	r3, r3, r0
 801a444:	50a3      	str	r3, [r4, r2]
 801a446:	e7c9      	b.n	801a3dc <_malloc_r+0x20>
 801a448:	4622      	mov	r2, r4
 801a44a:	6864      	ldr	r4, [r4, #4]
 801a44c:	e7cc      	b.n	801a3e8 <_malloc_r+0x2c>
 801a44e:	1cc4      	adds	r4, r0, #3
 801a450:	f024 0403 	bic.w	r4, r4, #3
 801a454:	42a0      	cmp	r0, r4
 801a456:	d0e3      	beq.n	801a420 <_malloc_r+0x64>
 801a458:	1a21      	subs	r1, r4, r0
 801a45a:	4630      	mov	r0, r6
 801a45c:	f000 fe8a 	bl	801b174 <_sbrk_r>
 801a460:	3001      	adds	r0, #1
 801a462:	d1dd      	bne.n	801a420 <_malloc_r+0x64>
 801a464:	e7cf      	b.n	801a406 <_malloc_r+0x4a>
 801a466:	bf00      	nop
 801a468:	20005efc 	.word	0x20005efc
 801a46c:	20005f00 	.word	0x20005f00

0801a470 <__cvt>:
 801a470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a474:	ec55 4b10 	vmov	r4, r5, d0
 801a478:	2d00      	cmp	r5, #0
 801a47a:	460e      	mov	r6, r1
 801a47c:	4619      	mov	r1, r3
 801a47e:	462b      	mov	r3, r5
 801a480:	bfbb      	ittet	lt
 801a482:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801a486:	461d      	movlt	r5, r3
 801a488:	2300      	movge	r3, #0
 801a48a:	232d      	movlt	r3, #45	; 0x2d
 801a48c:	700b      	strb	r3, [r1, #0]
 801a48e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a490:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801a494:	4691      	mov	r9, r2
 801a496:	f023 0820 	bic.w	r8, r3, #32
 801a49a:	bfbc      	itt	lt
 801a49c:	4622      	movlt	r2, r4
 801a49e:	4614      	movlt	r4, r2
 801a4a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a4a4:	d005      	beq.n	801a4b2 <__cvt+0x42>
 801a4a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801a4aa:	d100      	bne.n	801a4ae <__cvt+0x3e>
 801a4ac:	3601      	adds	r6, #1
 801a4ae:	2102      	movs	r1, #2
 801a4b0:	e000      	b.n	801a4b4 <__cvt+0x44>
 801a4b2:	2103      	movs	r1, #3
 801a4b4:	ab03      	add	r3, sp, #12
 801a4b6:	9301      	str	r3, [sp, #4]
 801a4b8:	ab02      	add	r3, sp, #8
 801a4ba:	9300      	str	r3, [sp, #0]
 801a4bc:	ec45 4b10 	vmov	d0, r4, r5
 801a4c0:	4653      	mov	r3, sl
 801a4c2:	4632      	mov	r2, r6
 801a4c4:	f001 fed8 	bl	801c278 <_dtoa_r>
 801a4c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801a4cc:	4607      	mov	r7, r0
 801a4ce:	d102      	bne.n	801a4d6 <__cvt+0x66>
 801a4d0:	f019 0f01 	tst.w	r9, #1
 801a4d4:	d022      	beq.n	801a51c <__cvt+0xac>
 801a4d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a4da:	eb07 0906 	add.w	r9, r7, r6
 801a4de:	d110      	bne.n	801a502 <__cvt+0x92>
 801a4e0:	783b      	ldrb	r3, [r7, #0]
 801a4e2:	2b30      	cmp	r3, #48	; 0x30
 801a4e4:	d10a      	bne.n	801a4fc <__cvt+0x8c>
 801a4e6:	2200      	movs	r2, #0
 801a4e8:	2300      	movs	r3, #0
 801a4ea:	4620      	mov	r0, r4
 801a4ec:	4629      	mov	r1, r5
 801a4ee:	f7e6 faeb 	bl	8000ac8 <__aeabi_dcmpeq>
 801a4f2:	b918      	cbnz	r0, 801a4fc <__cvt+0x8c>
 801a4f4:	f1c6 0601 	rsb	r6, r6, #1
 801a4f8:	f8ca 6000 	str.w	r6, [sl]
 801a4fc:	f8da 3000 	ldr.w	r3, [sl]
 801a500:	4499      	add	r9, r3
 801a502:	2200      	movs	r2, #0
 801a504:	2300      	movs	r3, #0
 801a506:	4620      	mov	r0, r4
 801a508:	4629      	mov	r1, r5
 801a50a:	f7e6 fadd 	bl	8000ac8 <__aeabi_dcmpeq>
 801a50e:	b108      	cbz	r0, 801a514 <__cvt+0xa4>
 801a510:	f8cd 900c 	str.w	r9, [sp, #12]
 801a514:	2230      	movs	r2, #48	; 0x30
 801a516:	9b03      	ldr	r3, [sp, #12]
 801a518:	454b      	cmp	r3, r9
 801a51a:	d307      	bcc.n	801a52c <__cvt+0xbc>
 801a51c:	9b03      	ldr	r3, [sp, #12]
 801a51e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a520:	1bdb      	subs	r3, r3, r7
 801a522:	4638      	mov	r0, r7
 801a524:	6013      	str	r3, [r2, #0]
 801a526:	b004      	add	sp, #16
 801a528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a52c:	1c59      	adds	r1, r3, #1
 801a52e:	9103      	str	r1, [sp, #12]
 801a530:	701a      	strb	r2, [r3, #0]
 801a532:	e7f0      	b.n	801a516 <__cvt+0xa6>

0801a534 <__exponent>:
 801a534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a536:	4603      	mov	r3, r0
 801a538:	2900      	cmp	r1, #0
 801a53a:	bfb8      	it	lt
 801a53c:	4249      	neglt	r1, r1
 801a53e:	f803 2b02 	strb.w	r2, [r3], #2
 801a542:	bfb4      	ite	lt
 801a544:	222d      	movlt	r2, #45	; 0x2d
 801a546:	222b      	movge	r2, #43	; 0x2b
 801a548:	2909      	cmp	r1, #9
 801a54a:	7042      	strb	r2, [r0, #1]
 801a54c:	dd2a      	ble.n	801a5a4 <__exponent+0x70>
 801a54e:	f10d 0407 	add.w	r4, sp, #7
 801a552:	46a4      	mov	ip, r4
 801a554:	270a      	movs	r7, #10
 801a556:	46a6      	mov	lr, r4
 801a558:	460a      	mov	r2, r1
 801a55a:	fb91 f6f7 	sdiv	r6, r1, r7
 801a55e:	fb07 1516 	mls	r5, r7, r6, r1
 801a562:	3530      	adds	r5, #48	; 0x30
 801a564:	2a63      	cmp	r2, #99	; 0x63
 801a566:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801a56a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801a56e:	4631      	mov	r1, r6
 801a570:	dcf1      	bgt.n	801a556 <__exponent+0x22>
 801a572:	3130      	adds	r1, #48	; 0x30
 801a574:	f1ae 0502 	sub.w	r5, lr, #2
 801a578:	f804 1c01 	strb.w	r1, [r4, #-1]
 801a57c:	1c44      	adds	r4, r0, #1
 801a57e:	4629      	mov	r1, r5
 801a580:	4561      	cmp	r1, ip
 801a582:	d30a      	bcc.n	801a59a <__exponent+0x66>
 801a584:	f10d 0209 	add.w	r2, sp, #9
 801a588:	eba2 020e 	sub.w	r2, r2, lr
 801a58c:	4565      	cmp	r5, ip
 801a58e:	bf88      	it	hi
 801a590:	2200      	movhi	r2, #0
 801a592:	4413      	add	r3, r2
 801a594:	1a18      	subs	r0, r3, r0
 801a596:	b003      	add	sp, #12
 801a598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a59a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a59e:	f804 2f01 	strb.w	r2, [r4, #1]!
 801a5a2:	e7ed      	b.n	801a580 <__exponent+0x4c>
 801a5a4:	2330      	movs	r3, #48	; 0x30
 801a5a6:	3130      	adds	r1, #48	; 0x30
 801a5a8:	7083      	strb	r3, [r0, #2]
 801a5aa:	70c1      	strb	r1, [r0, #3]
 801a5ac:	1d03      	adds	r3, r0, #4
 801a5ae:	e7f1      	b.n	801a594 <__exponent+0x60>

0801a5b0 <_printf_float>:
 801a5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5b4:	ed2d 8b02 	vpush	{d8}
 801a5b8:	b08d      	sub	sp, #52	; 0x34
 801a5ba:	460c      	mov	r4, r1
 801a5bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801a5c0:	4616      	mov	r6, r2
 801a5c2:	461f      	mov	r7, r3
 801a5c4:	4605      	mov	r5, r0
 801a5c6:	f002 ffb3 	bl	801d530 <_localeconv_r>
 801a5ca:	f8d0 a000 	ldr.w	sl, [r0]
 801a5ce:	4650      	mov	r0, sl
 801a5d0:	f7e5 fdfe 	bl	80001d0 <strlen>
 801a5d4:	2300      	movs	r3, #0
 801a5d6:	930a      	str	r3, [sp, #40]	; 0x28
 801a5d8:	6823      	ldr	r3, [r4, #0]
 801a5da:	9305      	str	r3, [sp, #20]
 801a5dc:	f8d8 3000 	ldr.w	r3, [r8]
 801a5e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 801a5e4:	3307      	adds	r3, #7
 801a5e6:	f023 0307 	bic.w	r3, r3, #7
 801a5ea:	f103 0208 	add.w	r2, r3, #8
 801a5ee:	f8c8 2000 	str.w	r2, [r8]
 801a5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801a5fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801a5fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a602:	9307      	str	r3, [sp, #28]
 801a604:	f8cd 8018 	str.w	r8, [sp, #24]
 801a608:	ee08 0a10 	vmov	s16, r0
 801a60c:	4b9f      	ldr	r3, [pc, #636]	; (801a88c <_printf_float+0x2dc>)
 801a60e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a612:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a616:	f7e6 fa89 	bl	8000b2c <__aeabi_dcmpun>
 801a61a:	bb88      	cbnz	r0, 801a680 <_printf_float+0xd0>
 801a61c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a620:	4b9a      	ldr	r3, [pc, #616]	; (801a88c <_printf_float+0x2dc>)
 801a622:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a626:	f7e6 fa63 	bl	8000af0 <__aeabi_dcmple>
 801a62a:	bb48      	cbnz	r0, 801a680 <_printf_float+0xd0>
 801a62c:	2200      	movs	r2, #0
 801a62e:	2300      	movs	r3, #0
 801a630:	4640      	mov	r0, r8
 801a632:	4649      	mov	r1, r9
 801a634:	f7e6 fa52 	bl	8000adc <__aeabi_dcmplt>
 801a638:	b110      	cbz	r0, 801a640 <_printf_float+0x90>
 801a63a:	232d      	movs	r3, #45	; 0x2d
 801a63c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a640:	4b93      	ldr	r3, [pc, #588]	; (801a890 <_printf_float+0x2e0>)
 801a642:	4894      	ldr	r0, [pc, #592]	; (801a894 <_printf_float+0x2e4>)
 801a644:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801a648:	bf94      	ite	ls
 801a64a:	4698      	movls	r8, r3
 801a64c:	4680      	movhi	r8, r0
 801a64e:	2303      	movs	r3, #3
 801a650:	6123      	str	r3, [r4, #16]
 801a652:	9b05      	ldr	r3, [sp, #20]
 801a654:	f023 0204 	bic.w	r2, r3, #4
 801a658:	6022      	str	r2, [r4, #0]
 801a65a:	f04f 0900 	mov.w	r9, #0
 801a65e:	9700      	str	r7, [sp, #0]
 801a660:	4633      	mov	r3, r6
 801a662:	aa0b      	add	r2, sp, #44	; 0x2c
 801a664:	4621      	mov	r1, r4
 801a666:	4628      	mov	r0, r5
 801a668:	f000 f9d8 	bl	801aa1c <_printf_common>
 801a66c:	3001      	adds	r0, #1
 801a66e:	f040 8090 	bne.w	801a792 <_printf_float+0x1e2>
 801a672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a676:	b00d      	add	sp, #52	; 0x34
 801a678:	ecbd 8b02 	vpop	{d8}
 801a67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a680:	4642      	mov	r2, r8
 801a682:	464b      	mov	r3, r9
 801a684:	4640      	mov	r0, r8
 801a686:	4649      	mov	r1, r9
 801a688:	f7e6 fa50 	bl	8000b2c <__aeabi_dcmpun>
 801a68c:	b140      	cbz	r0, 801a6a0 <_printf_float+0xf0>
 801a68e:	464b      	mov	r3, r9
 801a690:	2b00      	cmp	r3, #0
 801a692:	bfbc      	itt	lt
 801a694:	232d      	movlt	r3, #45	; 0x2d
 801a696:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801a69a:	487f      	ldr	r0, [pc, #508]	; (801a898 <_printf_float+0x2e8>)
 801a69c:	4b7f      	ldr	r3, [pc, #508]	; (801a89c <_printf_float+0x2ec>)
 801a69e:	e7d1      	b.n	801a644 <_printf_float+0x94>
 801a6a0:	6863      	ldr	r3, [r4, #4]
 801a6a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801a6a6:	9206      	str	r2, [sp, #24]
 801a6a8:	1c5a      	adds	r2, r3, #1
 801a6aa:	d13f      	bne.n	801a72c <_printf_float+0x17c>
 801a6ac:	2306      	movs	r3, #6
 801a6ae:	6063      	str	r3, [r4, #4]
 801a6b0:	9b05      	ldr	r3, [sp, #20]
 801a6b2:	6861      	ldr	r1, [r4, #4]
 801a6b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801a6b8:	2300      	movs	r3, #0
 801a6ba:	9303      	str	r3, [sp, #12]
 801a6bc:	ab0a      	add	r3, sp, #40	; 0x28
 801a6be:	e9cd b301 	strd	fp, r3, [sp, #4]
 801a6c2:	ab09      	add	r3, sp, #36	; 0x24
 801a6c4:	ec49 8b10 	vmov	d0, r8, r9
 801a6c8:	9300      	str	r3, [sp, #0]
 801a6ca:	6022      	str	r2, [r4, #0]
 801a6cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a6d0:	4628      	mov	r0, r5
 801a6d2:	f7ff fecd 	bl	801a470 <__cvt>
 801a6d6:	9b06      	ldr	r3, [sp, #24]
 801a6d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a6da:	2b47      	cmp	r3, #71	; 0x47
 801a6dc:	4680      	mov	r8, r0
 801a6de:	d108      	bne.n	801a6f2 <_printf_float+0x142>
 801a6e0:	1cc8      	adds	r0, r1, #3
 801a6e2:	db02      	blt.n	801a6ea <_printf_float+0x13a>
 801a6e4:	6863      	ldr	r3, [r4, #4]
 801a6e6:	4299      	cmp	r1, r3
 801a6e8:	dd41      	ble.n	801a76e <_printf_float+0x1be>
 801a6ea:	f1ab 0b02 	sub.w	fp, fp, #2
 801a6ee:	fa5f fb8b 	uxtb.w	fp, fp
 801a6f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a6f6:	d820      	bhi.n	801a73a <_printf_float+0x18a>
 801a6f8:	3901      	subs	r1, #1
 801a6fa:	465a      	mov	r2, fp
 801a6fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a700:	9109      	str	r1, [sp, #36]	; 0x24
 801a702:	f7ff ff17 	bl	801a534 <__exponent>
 801a706:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a708:	1813      	adds	r3, r2, r0
 801a70a:	2a01      	cmp	r2, #1
 801a70c:	4681      	mov	r9, r0
 801a70e:	6123      	str	r3, [r4, #16]
 801a710:	dc02      	bgt.n	801a718 <_printf_float+0x168>
 801a712:	6822      	ldr	r2, [r4, #0]
 801a714:	07d2      	lsls	r2, r2, #31
 801a716:	d501      	bpl.n	801a71c <_printf_float+0x16c>
 801a718:	3301      	adds	r3, #1
 801a71a:	6123      	str	r3, [r4, #16]
 801a71c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801a720:	2b00      	cmp	r3, #0
 801a722:	d09c      	beq.n	801a65e <_printf_float+0xae>
 801a724:	232d      	movs	r3, #45	; 0x2d
 801a726:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a72a:	e798      	b.n	801a65e <_printf_float+0xae>
 801a72c:	9a06      	ldr	r2, [sp, #24]
 801a72e:	2a47      	cmp	r2, #71	; 0x47
 801a730:	d1be      	bne.n	801a6b0 <_printf_float+0x100>
 801a732:	2b00      	cmp	r3, #0
 801a734:	d1bc      	bne.n	801a6b0 <_printf_float+0x100>
 801a736:	2301      	movs	r3, #1
 801a738:	e7b9      	b.n	801a6ae <_printf_float+0xfe>
 801a73a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801a73e:	d118      	bne.n	801a772 <_printf_float+0x1c2>
 801a740:	2900      	cmp	r1, #0
 801a742:	6863      	ldr	r3, [r4, #4]
 801a744:	dd0b      	ble.n	801a75e <_printf_float+0x1ae>
 801a746:	6121      	str	r1, [r4, #16]
 801a748:	b913      	cbnz	r3, 801a750 <_printf_float+0x1a0>
 801a74a:	6822      	ldr	r2, [r4, #0]
 801a74c:	07d0      	lsls	r0, r2, #31
 801a74e:	d502      	bpl.n	801a756 <_printf_float+0x1a6>
 801a750:	3301      	adds	r3, #1
 801a752:	440b      	add	r3, r1
 801a754:	6123      	str	r3, [r4, #16]
 801a756:	65a1      	str	r1, [r4, #88]	; 0x58
 801a758:	f04f 0900 	mov.w	r9, #0
 801a75c:	e7de      	b.n	801a71c <_printf_float+0x16c>
 801a75e:	b913      	cbnz	r3, 801a766 <_printf_float+0x1b6>
 801a760:	6822      	ldr	r2, [r4, #0]
 801a762:	07d2      	lsls	r2, r2, #31
 801a764:	d501      	bpl.n	801a76a <_printf_float+0x1ba>
 801a766:	3302      	adds	r3, #2
 801a768:	e7f4      	b.n	801a754 <_printf_float+0x1a4>
 801a76a:	2301      	movs	r3, #1
 801a76c:	e7f2      	b.n	801a754 <_printf_float+0x1a4>
 801a76e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801a772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a774:	4299      	cmp	r1, r3
 801a776:	db05      	blt.n	801a784 <_printf_float+0x1d4>
 801a778:	6823      	ldr	r3, [r4, #0]
 801a77a:	6121      	str	r1, [r4, #16]
 801a77c:	07d8      	lsls	r0, r3, #31
 801a77e:	d5ea      	bpl.n	801a756 <_printf_float+0x1a6>
 801a780:	1c4b      	adds	r3, r1, #1
 801a782:	e7e7      	b.n	801a754 <_printf_float+0x1a4>
 801a784:	2900      	cmp	r1, #0
 801a786:	bfd4      	ite	le
 801a788:	f1c1 0202 	rsble	r2, r1, #2
 801a78c:	2201      	movgt	r2, #1
 801a78e:	4413      	add	r3, r2
 801a790:	e7e0      	b.n	801a754 <_printf_float+0x1a4>
 801a792:	6823      	ldr	r3, [r4, #0]
 801a794:	055a      	lsls	r2, r3, #21
 801a796:	d407      	bmi.n	801a7a8 <_printf_float+0x1f8>
 801a798:	6923      	ldr	r3, [r4, #16]
 801a79a:	4642      	mov	r2, r8
 801a79c:	4631      	mov	r1, r6
 801a79e:	4628      	mov	r0, r5
 801a7a0:	47b8      	blx	r7
 801a7a2:	3001      	adds	r0, #1
 801a7a4:	d12c      	bne.n	801a800 <_printf_float+0x250>
 801a7a6:	e764      	b.n	801a672 <_printf_float+0xc2>
 801a7a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a7ac:	f240 80e0 	bls.w	801a970 <_printf_float+0x3c0>
 801a7b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a7b4:	2200      	movs	r2, #0
 801a7b6:	2300      	movs	r3, #0
 801a7b8:	f7e6 f986 	bl	8000ac8 <__aeabi_dcmpeq>
 801a7bc:	2800      	cmp	r0, #0
 801a7be:	d034      	beq.n	801a82a <_printf_float+0x27a>
 801a7c0:	4a37      	ldr	r2, [pc, #220]	; (801a8a0 <_printf_float+0x2f0>)
 801a7c2:	2301      	movs	r3, #1
 801a7c4:	4631      	mov	r1, r6
 801a7c6:	4628      	mov	r0, r5
 801a7c8:	47b8      	blx	r7
 801a7ca:	3001      	adds	r0, #1
 801a7cc:	f43f af51 	beq.w	801a672 <_printf_float+0xc2>
 801a7d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a7d4:	429a      	cmp	r2, r3
 801a7d6:	db02      	blt.n	801a7de <_printf_float+0x22e>
 801a7d8:	6823      	ldr	r3, [r4, #0]
 801a7da:	07d8      	lsls	r0, r3, #31
 801a7dc:	d510      	bpl.n	801a800 <_printf_float+0x250>
 801a7de:	ee18 3a10 	vmov	r3, s16
 801a7e2:	4652      	mov	r2, sl
 801a7e4:	4631      	mov	r1, r6
 801a7e6:	4628      	mov	r0, r5
 801a7e8:	47b8      	blx	r7
 801a7ea:	3001      	adds	r0, #1
 801a7ec:	f43f af41 	beq.w	801a672 <_printf_float+0xc2>
 801a7f0:	f04f 0800 	mov.w	r8, #0
 801a7f4:	f104 091a 	add.w	r9, r4, #26
 801a7f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a7fa:	3b01      	subs	r3, #1
 801a7fc:	4543      	cmp	r3, r8
 801a7fe:	dc09      	bgt.n	801a814 <_printf_float+0x264>
 801a800:	6823      	ldr	r3, [r4, #0]
 801a802:	079b      	lsls	r3, r3, #30
 801a804:	f100 8105 	bmi.w	801aa12 <_printf_float+0x462>
 801a808:	68e0      	ldr	r0, [r4, #12]
 801a80a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a80c:	4298      	cmp	r0, r3
 801a80e:	bfb8      	it	lt
 801a810:	4618      	movlt	r0, r3
 801a812:	e730      	b.n	801a676 <_printf_float+0xc6>
 801a814:	2301      	movs	r3, #1
 801a816:	464a      	mov	r2, r9
 801a818:	4631      	mov	r1, r6
 801a81a:	4628      	mov	r0, r5
 801a81c:	47b8      	blx	r7
 801a81e:	3001      	adds	r0, #1
 801a820:	f43f af27 	beq.w	801a672 <_printf_float+0xc2>
 801a824:	f108 0801 	add.w	r8, r8, #1
 801a828:	e7e6      	b.n	801a7f8 <_printf_float+0x248>
 801a82a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	dc39      	bgt.n	801a8a4 <_printf_float+0x2f4>
 801a830:	4a1b      	ldr	r2, [pc, #108]	; (801a8a0 <_printf_float+0x2f0>)
 801a832:	2301      	movs	r3, #1
 801a834:	4631      	mov	r1, r6
 801a836:	4628      	mov	r0, r5
 801a838:	47b8      	blx	r7
 801a83a:	3001      	adds	r0, #1
 801a83c:	f43f af19 	beq.w	801a672 <_printf_float+0xc2>
 801a840:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a844:	4313      	orrs	r3, r2
 801a846:	d102      	bne.n	801a84e <_printf_float+0x29e>
 801a848:	6823      	ldr	r3, [r4, #0]
 801a84a:	07d9      	lsls	r1, r3, #31
 801a84c:	d5d8      	bpl.n	801a800 <_printf_float+0x250>
 801a84e:	ee18 3a10 	vmov	r3, s16
 801a852:	4652      	mov	r2, sl
 801a854:	4631      	mov	r1, r6
 801a856:	4628      	mov	r0, r5
 801a858:	47b8      	blx	r7
 801a85a:	3001      	adds	r0, #1
 801a85c:	f43f af09 	beq.w	801a672 <_printf_float+0xc2>
 801a860:	f04f 0900 	mov.w	r9, #0
 801a864:	f104 0a1a 	add.w	sl, r4, #26
 801a868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a86a:	425b      	negs	r3, r3
 801a86c:	454b      	cmp	r3, r9
 801a86e:	dc01      	bgt.n	801a874 <_printf_float+0x2c4>
 801a870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a872:	e792      	b.n	801a79a <_printf_float+0x1ea>
 801a874:	2301      	movs	r3, #1
 801a876:	4652      	mov	r2, sl
 801a878:	4631      	mov	r1, r6
 801a87a:	4628      	mov	r0, r5
 801a87c:	47b8      	blx	r7
 801a87e:	3001      	adds	r0, #1
 801a880:	f43f aef7 	beq.w	801a672 <_printf_float+0xc2>
 801a884:	f109 0901 	add.w	r9, r9, #1
 801a888:	e7ee      	b.n	801a868 <_printf_float+0x2b8>
 801a88a:	bf00      	nop
 801a88c:	7fefffff 	.word	0x7fefffff
 801a890:	080207b8 	.word	0x080207b8
 801a894:	080207bc 	.word	0x080207bc
 801a898:	080207c4 	.word	0x080207c4
 801a89c:	080207c0 	.word	0x080207c0
 801a8a0:	080207c8 	.word	0x080207c8
 801a8a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a8a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a8a8:	429a      	cmp	r2, r3
 801a8aa:	bfa8      	it	ge
 801a8ac:	461a      	movge	r2, r3
 801a8ae:	2a00      	cmp	r2, #0
 801a8b0:	4691      	mov	r9, r2
 801a8b2:	dc37      	bgt.n	801a924 <_printf_float+0x374>
 801a8b4:	f04f 0b00 	mov.w	fp, #0
 801a8b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a8bc:	f104 021a 	add.w	r2, r4, #26
 801a8c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a8c2:	9305      	str	r3, [sp, #20]
 801a8c4:	eba3 0309 	sub.w	r3, r3, r9
 801a8c8:	455b      	cmp	r3, fp
 801a8ca:	dc33      	bgt.n	801a934 <_printf_float+0x384>
 801a8cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a8d0:	429a      	cmp	r2, r3
 801a8d2:	db3b      	blt.n	801a94c <_printf_float+0x39c>
 801a8d4:	6823      	ldr	r3, [r4, #0]
 801a8d6:	07da      	lsls	r2, r3, #31
 801a8d8:	d438      	bmi.n	801a94c <_printf_float+0x39c>
 801a8da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a8dc:	9b05      	ldr	r3, [sp, #20]
 801a8de:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a8e0:	1ad3      	subs	r3, r2, r3
 801a8e2:	eba2 0901 	sub.w	r9, r2, r1
 801a8e6:	4599      	cmp	r9, r3
 801a8e8:	bfa8      	it	ge
 801a8ea:	4699      	movge	r9, r3
 801a8ec:	f1b9 0f00 	cmp.w	r9, #0
 801a8f0:	dc35      	bgt.n	801a95e <_printf_float+0x3ae>
 801a8f2:	f04f 0800 	mov.w	r8, #0
 801a8f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a8fa:	f104 0a1a 	add.w	sl, r4, #26
 801a8fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a902:	1a9b      	subs	r3, r3, r2
 801a904:	eba3 0309 	sub.w	r3, r3, r9
 801a908:	4543      	cmp	r3, r8
 801a90a:	f77f af79 	ble.w	801a800 <_printf_float+0x250>
 801a90e:	2301      	movs	r3, #1
 801a910:	4652      	mov	r2, sl
 801a912:	4631      	mov	r1, r6
 801a914:	4628      	mov	r0, r5
 801a916:	47b8      	blx	r7
 801a918:	3001      	adds	r0, #1
 801a91a:	f43f aeaa 	beq.w	801a672 <_printf_float+0xc2>
 801a91e:	f108 0801 	add.w	r8, r8, #1
 801a922:	e7ec      	b.n	801a8fe <_printf_float+0x34e>
 801a924:	4613      	mov	r3, r2
 801a926:	4631      	mov	r1, r6
 801a928:	4642      	mov	r2, r8
 801a92a:	4628      	mov	r0, r5
 801a92c:	47b8      	blx	r7
 801a92e:	3001      	adds	r0, #1
 801a930:	d1c0      	bne.n	801a8b4 <_printf_float+0x304>
 801a932:	e69e      	b.n	801a672 <_printf_float+0xc2>
 801a934:	2301      	movs	r3, #1
 801a936:	4631      	mov	r1, r6
 801a938:	4628      	mov	r0, r5
 801a93a:	9205      	str	r2, [sp, #20]
 801a93c:	47b8      	blx	r7
 801a93e:	3001      	adds	r0, #1
 801a940:	f43f ae97 	beq.w	801a672 <_printf_float+0xc2>
 801a944:	9a05      	ldr	r2, [sp, #20]
 801a946:	f10b 0b01 	add.w	fp, fp, #1
 801a94a:	e7b9      	b.n	801a8c0 <_printf_float+0x310>
 801a94c:	ee18 3a10 	vmov	r3, s16
 801a950:	4652      	mov	r2, sl
 801a952:	4631      	mov	r1, r6
 801a954:	4628      	mov	r0, r5
 801a956:	47b8      	blx	r7
 801a958:	3001      	adds	r0, #1
 801a95a:	d1be      	bne.n	801a8da <_printf_float+0x32a>
 801a95c:	e689      	b.n	801a672 <_printf_float+0xc2>
 801a95e:	9a05      	ldr	r2, [sp, #20]
 801a960:	464b      	mov	r3, r9
 801a962:	4442      	add	r2, r8
 801a964:	4631      	mov	r1, r6
 801a966:	4628      	mov	r0, r5
 801a968:	47b8      	blx	r7
 801a96a:	3001      	adds	r0, #1
 801a96c:	d1c1      	bne.n	801a8f2 <_printf_float+0x342>
 801a96e:	e680      	b.n	801a672 <_printf_float+0xc2>
 801a970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a972:	2a01      	cmp	r2, #1
 801a974:	dc01      	bgt.n	801a97a <_printf_float+0x3ca>
 801a976:	07db      	lsls	r3, r3, #31
 801a978:	d538      	bpl.n	801a9ec <_printf_float+0x43c>
 801a97a:	2301      	movs	r3, #1
 801a97c:	4642      	mov	r2, r8
 801a97e:	4631      	mov	r1, r6
 801a980:	4628      	mov	r0, r5
 801a982:	47b8      	blx	r7
 801a984:	3001      	adds	r0, #1
 801a986:	f43f ae74 	beq.w	801a672 <_printf_float+0xc2>
 801a98a:	ee18 3a10 	vmov	r3, s16
 801a98e:	4652      	mov	r2, sl
 801a990:	4631      	mov	r1, r6
 801a992:	4628      	mov	r0, r5
 801a994:	47b8      	blx	r7
 801a996:	3001      	adds	r0, #1
 801a998:	f43f ae6b 	beq.w	801a672 <_printf_float+0xc2>
 801a99c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a9a0:	2200      	movs	r2, #0
 801a9a2:	2300      	movs	r3, #0
 801a9a4:	f7e6 f890 	bl	8000ac8 <__aeabi_dcmpeq>
 801a9a8:	b9d8      	cbnz	r0, 801a9e2 <_printf_float+0x432>
 801a9aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a9ac:	f108 0201 	add.w	r2, r8, #1
 801a9b0:	3b01      	subs	r3, #1
 801a9b2:	4631      	mov	r1, r6
 801a9b4:	4628      	mov	r0, r5
 801a9b6:	47b8      	blx	r7
 801a9b8:	3001      	adds	r0, #1
 801a9ba:	d10e      	bne.n	801a9da <_printf_float+0x42a>
 801a9bc:	e659      	b.n	801a672 <_printf_float+0xc2>
 801a9be:	2301      	movs	r3, #1
 801a9c0:	4652      	mov	r2, sl
 801a9c2:	4631      	mov	r1, r6
 801a9c4:	4628      	mov	r0, r5
 801a9c6:	47b8      	blx	r7
 801a9c8:	3001      	adds	r0, #1
 801a9ca:	f43f ae52 	beq.w	801a672 <_printf_float+0xc2>
 801a9ce:	f108 0801 	add.w	r8, r8, #1
 801a9d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a9d4:	3b01      	subs	r3, #1
 801a9d6:	4543      	cmp	r3, r8
 801a9d8:	dcf1      	bgt.n	801a9be <_printf_float+0x40e>
 801a9da:	464b      	mov	r3, r9
 801a9dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a9e0:	e6dc      	b.n	801a79c <_printf_float+0x1ec>
 801a9e2:	f04f 0800 	mov.w	r8, #0
 801a9e6:	f104 0a1a 	add.w	sl, r4, #26
 801a9ea:	e7f2      	b.n	801a9d2 <_printf_float+0x422>
 801a9ec:	2301      	movs	r3, #1
 801a9ee:	4642      	mov	r2, r8
 801a9f0:	e7df      	b.n	801a9b2 <_printf_float+0x402>
 801a9f2:	2301      	movs	r3, #1
 801a9f4:	464a      	mov	r2, r9
 801a9f6:	4631      	mov	r1, r6
 801a9f8:	4628      	mov	r0, r5
 801a9fa:	47b8      	blx	r7
 801a9fc:	3001      	adds	r0, #1
 801a9fe:	f43f ae38 	beq.w	801a672 <_printf_float+0xc2>
 801aa02:	f108 0801 	add.w	r8, r8, #1
 801aa06:	68e3      	ldr	r3, [r4, #12]
 801aa08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801aa0a:	1a5b      	subs	r3, r3, r1
 801aa0c:	4543      	cmp	r3, r8
 801aa0e:	dcf0      	bgt.n	801a9f2 <_printf_float+0x442>
 801aa10:	e6fa      	b.n	801a808 <_printf_float+0x258>
 801aa12:	f04f 0800 	mov.w	r8, #0
 801aa16:	f104 0919 	add.w	r9, r4, #25
 801aa1a:	e7f4      	b.n	801aa06 <_printf_float+0x456>

0801aa1c <_printf_common>:
 801aa1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa20:	4616      	mov	r6, r2
 801aa22:	4699      	mov	r9, r3
 801aa24:	688a      	ldr	r2, [r1, #8]
 801aa26:	690b      	ldr	r3, [r1, #16]
 801aa28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801aa2c:	4293      	cmp	r3, r2
 801aa2e:	bfb8      	it	lt
 801aa30:	4613      	movlt	r3, r2
 801aa32:	6033      	str	r3, [r6, #0]
 801aa34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801aa38:	4607      	mov	r7, r0
 801aa3a:	460c      	mov	r4, r1
 801aa3c:	b10a      	cbz	r2, 801aa42 <_printf_common+0x26>
 801aa3e:	3301      	adds	r3, #1
 801aa40:	6033      	str	r3, [r6, #0]
 801aa42:	6823      	ldr	r3, [r4, #0]
 801aa44:	0699      	lsls	r1, r3, #26
 801aa46:	bf42      	ittt	mi
 801aa48:	6833      	ldrmi	r3, [r6, #0]
 801aa4a:	3302      	addmi	r3, #2
 801aa4c:	6033      	strmi	r3, [r6, #0]
 801aa4e:	6825      	ldr	r5, [r4, #0]
 801aa50:	f015 0506 	ands.w	r5, r5, #6
 801aa54:	d106      	bne.n	801aa64 <_printf_common+0x48>
 801aa56:	f104 0a19 	add.w	sl, r4, #25
 801aa5a:	68e3      	ldr	r3, [r4, #12]
 801aa5c:	6832      	ldr	r2, [r6, #0]
 801aa5e:	1a9b      	subs	r3, r3, r2
 801aa60:	42ab      	cmp	r3, r5
 801aa62:	dc26      	bgt.n	801aab2 <_printf_common+0x96>
 801aa64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801aa68:	1e13      	subs	r3, r2, #0
 801aa6a:	6822      	ldr	r2, [r4, #0]
 801aa6c:	bf18      	it	ne
 801aa6e:	2301      	movne	r3, #1
 801aa70:	0692      	lsls	r2, r2, #26
 801aa72:	d42b      	bmi.n	801aacc <_printf_common+0xb0>
 801aa74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801aa78:	4649      	mov	r1, r9
 801aa7a:	4638      	mov	r0, r7
 801aa7c:	47c0      	blx	r8
 801aa7e:	3001      	adds	r0, #1
 801aa80:	d01e      	beq.n	801aac0 <_printf_common+0xa4>
 801aa82:	6823      	ldr	r3, [r4, #0]
 801aa84:	68e5      	ldr	r5, [r4, #12]
 801aa86:	6832      	ldr	r2, [r6, #0]
 801aa88:	f003 0306 	and.w	r3, r3, #6
 801aa8c:	2b04      	cmp	r3, #4
 801aa8e:	bf08      	it	eq
 801aa90:	1aad      	subeq	r5, r5, r2
 801aa92:	68a3      	ldr	r3, [r4, #8]
 801aa94:	6922      	ldr	r2, [r4, #16]
 801aa96:	bf0c      	ite	eq
 801aa98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801aa9c:	2500      	movne	r5, #0
 801aa9e:	4293      	cmp	r3, r2
 801aaa0:	bfc4      	itt	gt
 801aaa2:	1a9b      	subgt	r3, r3, r2
 801aaa4:	18ed      	addgt	r5, r5, r3
 801aaa6:	2600      	movs	r6, #0
 801aaa8:	341a      	adds	r4, #26
 801aaaa:	42b5      	cmp	r5, r6
 801aaac:	d11a      	bne.n	801aae4 <_printf_common+0xc8>
 801aaae:	2000      	movs	r0, #0
 801aab0:	e008      	b.n	801aac4 <_printf_common+0xa8>
 801aab2:	2301      	movs	r3, #1
 801aab4:	4652      	mov	r2, sl
 801aab6:	4649      	mov	r1, r9
 801aab8:	4638      	mov	r0, r7
 801aaba:	47c0      	blx	r8
 801aabc:	3001      	adds	r0, #1
 801aabe:	d103      	bne.n	801aac8 <_printf_common+0xac>
 801aac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aac8:	3501      	adds	r5, #1
 801aaca:	e7c6      	b.n	801aa5a <_printf_common+0x3e>
 801aacc:	18e1      	adds	r1, r4, r3
 801aace:	1c5a      	adds	r2, r3, #1
 801aad0:	2030      	movs	r0, #48	; 0x30
 801aad2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801aad6:	4422      	add	r2, r4
 801aad8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801aadc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801aae0:	3302      	adds	r3, #2
 801aae2:	e7c7      	b.n	801aa74 <_printf_common+0x58>
 801aae4:	2301      	movs	r3, #1
 801aae6:	4622      	mov	r2, r4
 801aae8:	4649      	mov	r1, r9
 801aaea:	4638      	mov	r0, r7
 801aaec:	47c0      	blx	r8
 801aaee:	3001      	adds	r0, #1
 801aaf0:	d0e6      	beq.n	801aac0 <_printf_common+0xa4>
 801aaf2:	3601      	adds	r6, #1
 801aaf4:	e7d9      	b.n	801aaaa <_printf_common+0x8e>
	...

0801aaf8 <_printf_i>:
 801aaf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aafc:	460c      	mov	r4, r1
 801aafe:	4691      	mov	r9, r2
 801ab00:	7e27      	ldrb	r7, [r4, #24]
 801ab02:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ab04:	2f78      	cmp	r7, #120	; 0x78
 801ab06:	4680      	mov	r8, r0
 801ab08:	469a      	mov	sl, r3
 801ab0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ab0e:	d807      	bhi.n	801ab20 <_printf_i+0x28>
 801ab10:	2f62      	cmp	r7, #98	; 0x62
 801ab12:	d80a      	bhi.n	801ab2a <_printf_i+0x32>
 801ab14:	2f00      	cmp	r7, #0
 801ab16:	f000 80d8 	beq.w	801acca <_printf_i+0x1d2>
 801ab1a:	2f58      	cmp	r7, #88	; 0x58
 801ab1c:	f000 80a3 	beq.w	801ac66 <_printf_i+0x16e>
 801ab20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801ab24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ab28:	e03a      	b.n	801aba0 <_printf_i+0xa8>
 801ab2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ab2e:	2b15      	cmp	r3, #21
 801ab30:	d8f6      	bhi.n	801ab20 <_printf_i+0x28>
 801ab32:	a001      	add	r0, pc, #4	; (adr r0, 801ab38 <_printf_i+0x40>)
 801ab34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801ab38:	0801ab91 	.word	0x0801ab91
 801ab3c:	0801aba5 	.word	0x0801aba5
 801ab40:	0801ab21 	.word	0x0801ab21
 801ab44:	0801ab21 	.word	0x0801ab21
 801ab48:	0801ab21 	.word	0x0801ab21
 801ab4c:	0801ab21 	.word	0x0801ab21
 801ab50:	0801aba5 	.word	0x0801aba5
 801ab54:	0801ab21 	.word	0x0801ab21
 801ab58:	0801ab21 	.word	0x0801ab21
 801ab5c:	0801ab21 	.word	0x0801ab21
 801ab60:	0801ab21 	.word	0x0801ab21
 801ab64:	0801acb1 	.word	0x0801acb1
 801ab68:	0801abd5 	.word	0x0801abd5
 801ab6c:	0801ac93 	.word	0x0801ac93
 801ab70:	0801ab21 	.word	0x0801ab21
 801ab74:	0801ab21 	.word	0x0801ab21
 801ab78:	0801acd3 	.word	0x0801acd3
 801ab7c:	0801ab21 	.word	0x0801ab21
 801ab80:	0801abd5 	.word	0x0801abd5
 801ab84:	0801ab21 	.word	0x0801ab21
 801ab88:	0801ab21 	.word	0x0801ab21
 801ab8c:	0801ac9b 	.word	0x0801ac9b
 801ab90:	680b      	ldr	r3, [r1, #0]
 801ab92:	1d1a      	adds	r2, r3, #4
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	600a      	str	r2, [r1, #0]
 801ab98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801ab9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801aba0:	2301      	movs	r3, #1
 801aba2:	e0a3      	b.n	801acec <_printf_i+0x1f4>
 801aba4:	6825      	ldr	r5, [r4, #0]
 801aba6:	6808      	ldr	r0, [r1, #0]
 801aba8:	062e      	lsls	r6, r5, #24
 801abaa:	f100 0304 	add.w	r3, r0, #4
 801abae:	d50a      	bpl.n	801abc6 <_printf_i+0xce>
 801abb0:	6805      	ldr	r5, [r0, #0]
 801abb2:	600b      	str	r3, [r1, #0]
 801abb4:	2d00      	cmp	r5, #0
 801abb6:	da03      	bge.n	801abc0 <_printf_i+0xc8>
 801abb8:	232d      	movs	r3, #45	; 0x2d
 801abba:	426d      	negs	r5, r5
 801abbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801abc0:	485e      	ldr	r0, [pc, #376]	; (801ad3c <_printf_i+0x244>)
 801abc2:	230a      	movs	r3, #10
 801abc4:	e019      	b.n	801abfa <_printf_i+0x102>
 801abc6:	f015 0f40 	tst.w	r5, #64	; 0x40
 801abca:	6805      	ldr	r5, [r0, #0]
 801abcc:	600b      	str	r3, [r1, #0]
 801abce:	bf18      	it	ne
 801abd0:	b22d      	sxthne	r5, r5
 801abd2:	e7ef      	b.n	801abb4 <_printf_i+0xbc>
 801abd4:	680b      	ldr	r3, [r1, #0]
 801abd6:	6825      	ldr	r5, [r4, #0]
 801abd8:	1d18      	adds	r0, r3, #4
 801abda:	6008      	str	r0, [r1, #0]
 801abdc:	0628      	lsls	r0, r5, #24
 801abde:	d501      	bpl.n	801abe4 <_printf_i+0xec>
 801abe0:	681d      	ldr	r5, [r3, #0]
 801abe2:	e002      	b.n	801abea <_printf_i+0xf2>
 801abe4:	0669      	lsls	r1, r5, #25
 801abe6:	d5fb      	bpl.n	801abe0 <_printf_i+0xe8>
 801abe8:	881d      	ldrh	r5, [r3, #0]
 801abea:	4854      	ldr	r0, [pc, #336]	; (801ad3c <_printf_i+0x244>)
 801abec:	2f6f      	cmp	r7, #111	; 0x6f
 801abee:	bf0c      	ite	eq
 801abf0:	2308      	moveq	r3, #8
 801abf2:	230a      	movne	r3, #10
 801abf4:	2100      	movs	r1, #0
 801abf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801abfa:	6866      	ldr	r6, [r4, #4]
 801abfc:	60a6      	str	r6, [r4, #8]
 801abfe:	2e00      	cmp	r6, #0
 801ac00:	bfa2      	ittt	ge
 801ac02:	6821      	ldrge	r1, [r4, #0]
 801ac04:	f021 0104 	bicge.w	r1, r1, #4
 801ac08:	6021      	strge	r1, [r4, #0]
 801ac0a:	b90d      	cbnz	r5, 801ac10 <_printf_i+0x118>
 801ac0c:	2e00      	cmp	r6, #0
 801ac0e:	d04d      	beq.n	801acac <_printf_i+0x1b4>
 801ac10:	4616      	mov	r6, r2
 801ac12:	fbb5 f1f3 	udiv	r1, r5, r3
 801ac16:	fb03 5711 	mls	r7, r3, r1, r5
 801ac1a:	5dc7      	ldrb	r7, [r0, r7]
 801ac1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ac20:	462f      	mov	r7, r5
 801ac22:	42bb      	cmp	r3, r7
 801ac24:	460d      	mov	r5, r1
 801ac26:	d9f4      	bls.n	801ac12 <_printf_i+0x11a>
 801ac28:	2b08      	cmp	r3, #8
 801ac2a:	d10b      	bne.n	801ac44 <_printf_i+0x14c>
 801ac2c:	6823      	ldr	r3, [r4, #0]
 801ac2e:	07df      	lsls	r7, r3, #31
 801ac30:	d508      	bpl.n	801ac44 <_printf_i+0x14c>
 801ac32:	6923      	ldr	r3, [r4, #16]
 801ac34:	6861      	ldr	r1, [r4, #4]
 801ac36:	4299      	cmp	r1, r3
 801ac38:	bfde      	ittt	le
 801ac3a:	2330      	movle	r3, #48	; 0x30
 801ac3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ac40:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801ac44:	1b92      	subs	r2, r2, r6
 801ac46:	6122      	str	r2, [r4, #16]
 801ac48:	f8cd a000 	str.w	sl, [sp]
 801ac4c:	464b      	mov	r3, r9
 801ac4e:	aa03      	add	r2, sp, #12
 801ac50:	4621      	mov	r1, r4
 801ac52:	4640      	mov	r0, r8
 801ac54:	f7ff fee2 	bl	801aa1c <_printf_common>
 801ac58:	3001      	adds	r0, #1
 801ac5a:	d14c      	bne.n	801acf6 <_printf_i+0x1fe>
 801ac5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ac60:	b004      	add	sp, #16
 801ac62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac66:	4835      	ldr	r0, [pc, #212]	; (801ad3c <_printf_i+0x244>)
 801ac68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ac6c:	6823      	ldr	r3, [r4, #0]
 801ac6e:	680e      	ldr	r6, [r1, #0]
 801ac70:	061f      	lsls	r7, r3, #24
 801ac72:	f856 5b04 	ldr.w	r5, [r6], #4
 801ac76:	600e      	str	r6, [r1, #0]
 801ac78:	d514      	bpl.n	801aca4 <_printf_i+0x1ac>
 801ac7a:	07d9      	lsls	r1, r3, #31
 801ac7c:	bf44      	itt	mi
 801ac7e:	f043 0320 	orrmi.w	r3, r3, #32
 801ac82:	6023      	strmi	r3, [r4, #0]
 801ac84:	b91d      	cbnz	r5, 801ac8e <_printf_i+0x196>
 801ac86:	6823      	ldr	r3, [r4, #0]
 801ac88:	f023 0320 	bic.w	r3, r3, #32
 801ac8c:	6023      	str	r3, [r4, #0]
 801ac8e:	2310      	movs	r3, #16
 801ac90:	e7b0      	b.n	801abf4 <_printf_i+0xfc>
 801ac92:	6823      	ldr	r3, [r4, #0]
 801ac94:	f043 0320 	orr.w	r3, r3, #32
 801ac98:	6023      	str	r3, [r4, #0]
 801ac9a:	2378      	movs	r3, #120	; 0x78
 801ac9c:	4828      	ldr	r0, [pc, #160]	; (801ad40 <_printf_i+0x248>)
 801ac9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801aca2:	e7e3      	b.n	801ac6c <_printf_i+0x174>
 801aca4:	065e      	lsls	r6, r3, #25
 801aca6:	bf48      	it	mi
 801aca8:	b2ad      	uxthmi	r5, r5
 801acaa:	e7e6      	b.n	801ac7a <_printf_i+0x182>
 801acac:	4616      	mov	r6, r2
 801acae:	e7bb      	b.n	801ac28 <_printf_i+0x130>
 801acb0:	680b      	ldr	r3, [r1, #0]
 801acb2:	6826      	ldr	r6, [r4, #0]
 801acb4:	6960      	ldr	r0, [r4, #20]
 801acb6:	1d1d      	adds	r5, r3, #4
 801acb8:	600d      	str	r5, [r1, #0]
 801acba:	0635      	lsls	r5, r6, #24
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	d501      	bpl.n	801acc4 <_printf_i+0x1cc>
 801acc0:	6018      	str	r0, [r3, #0]
 801acc2:	e002      	b.n	801acca <_printf_i+0x1d2>
 801acc4:	0671      	lsls	r1, r6, #25
 801acc6:	d5fb      	bpl.n	801acc0 <_printf_i+0x1c8>
 801acc8:	8018      	strh	r0, [r3, #0]
 801acca:	2300      	movs	r3, #0
 801accc:	6123      	str	r3, [r4, #16]
 801acce:	4616      	mov	r6, r2
 801acd0:	e7ba      	b.n	801ac48 <_printf_i+0x150>
 801acd2:	680b      	ldr	r3, [r1, #0]
 801acd4:	1d1a      	adds	r2, r3, #4
 801acd6:	600a      	str	r2, [r1, #0]
 801acd8:	681e      	ldr	r6, [r3, #0]
 801acda:	6862      	ldr	r2, [r4, #4]
 801acdc:	2100      	movs	r1, #0
 801acde:	4630      	mov	r0, r6
 801ace0:	f7e5 fa7e 	bl	80001e0 <memchr>
 801ace4:	b108      	cbz	r0, 801acea <_printf_i+0x1f2>
 801ace6:	1b80      	subs	r0, r0, r6
 801ace8:	6060      	str	r0, [r4, #4]
 801acea:	6863      	ldr	r3, [r4, #4]
 801acec:	6123      	str	r3, [r4, #16]
 801acee:	2300      	movs	r3, #0
 801acf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801acf4:	e7a8      	b.n	801ac48 <_printf_i+0x150>
 801acf6:	6923      	ldr	r3, [r4, #16]
 801acf8:	4632      	mov	r2, r6
 801acfa:	4649      	mov	r1, r9
 801acfc:	4640      	mov	r0, r8
 801acfe:	47d0      	blx	sl
 801ad00:	3001      	adds	r0, #1
 801ad02:	d0ab      	beq.n	801ac5c <_printf_i+0x164>
 801ad04:	6823      	ldr	r3, [r4, #0]
 801ad06:	079b      	lsls	r3, r3, #30
 801ad08:	d413      	bmi.n	801ad32 <_printf_i+0x23a>
 801ad0a:	68e0      	ldr	r0, [r4, #12]
 801ad0c:	9b03      	ldr	r3, [sp, #12]
 801ad0e:	4298      	cmp	r0, r3
 801ad10:	bfb8      	it	lt
 801ad12:	4618      	movlt	r0, r3
 801ad14:	e7a4      	b.n	801ac60 <_printf_i+0x168>
 801ad16:	2301      	movs	r3, #1
 801ad18:	4632      	mov	r2, r6
 801ad1a:	4649      	mov	r1, r9
 801ad1c:	4640      	mov	r0, r8
 801ad1e:	47d0      	blx	sl
 801ad20:	3001      	adds	r0, #1
 801ad22:	d09b      	beq.n	801ac5c <_printf_i+0x164>
 801ad24:	3501      	adds	r5, #1
 801ad26:	68e3      	ldr	r3, [r4, #12]
 801ad28:	9903      	ldr	r1, [sp, #12]
 801ad2a:	1a5b      	subs	r3, r3, r1
 801ad2c:	42ab      	cmp	r3, r5
 801ad2e:	dcf2      	bgt.n	801ad16 <_printf_i+0x21e>
 801ad30:	e7eb      	b.n	801ad0a <_printf_i+0x212>
 801ad32:	2500      	movs	r5, #0
 801ad34:	f104 0619 	add.w	r6, r4, #25
 801ad38:	e7f5      	b.n	801ad26 <_printf_i+0x22e>
 801ad3a:	bf00      	nop
 801ad3c:	080207ca 	.word	0x080207ca
 801ad40:	080207db 	.word	0x080207db

0801ad44 <_scanf_float>:
 801ad44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad48:	b087      	sub	sp, #28
 801ad4a:	4617      	mov	r7, r2
 801ad4c:	9303      	str	r3, [sp, #12]
 801ad4e:	688b      	ldr	r3, [r1, #8]
 801ad50:	1e5a      	subs	r2, r3, #1
 801ad52:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801ad56:	bf83      	ittte	hi
 801ad58:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801ad5c:	195b      	addhi	r3, r3, r5
 801ad5e:	9302      	strhi	r3, [sp, #8]
 801ad60:	2300      	movls	r3, #0
 801ad62:	bf86      	itte	hi
 801ad64:	f240 135d 	movwhi	r3, #349	; 0x15d
 801ad68:	608b      	strhi	r3, [r1, #8]
 801ad6a:	9302      	strls	r3, [sp, #8]
 801ad6c:	680b      	ldr	r3, [r1, #0]
 801ad6e:	468b      	mov	fp, r1
 801ad70:	2500      	movs	r5, #0
 801ad72:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801ad76:	f84b 3b1c 	str.w	r3, [fp], #28
 801ad7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801ad7e:	4680      	mov	r8, r0
 801ad80:	460c      	mov	r4, r1
 801ad82:	465e      	mov	r6, fp
 801ad84:	46aa      	mov	sl, r5
 801ad86:	46a9      	mov	r9, r5
 801ad88:	9501      	str	r5, [sp, #4]
 801ad8a:	68a2      	ldr	r2, [r4, #8]
 801ad8c:	b152      	cbz	r2, 801ada4 <_scanf_float+0x60>
 801ad8e:	683b      	ldr	r3, [r7, #0]
 801ad90:	781b      	ldrb	r3, [r3, #0]
 801ad92:	2b4e      	cmp	r3, #78	; 0x4e
 801ad94:	d864      	bhi.n	801ae60 <_scanf_float+0x11c>
 801ad96:	2b40      	cmp	r3, #64	; 0x40
 801ad98:	d83c      	bhi.n	801ae14 <_scanf_float+0xd0>
 801ad9a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801ad9e:	b2c8      	uxtb	r0, r1
 801ada0:	280e      	cmp	r0, #14
 801ada2:	d93a      	bls.n	801ae1a <_scanf_float+0xd6>
 801ada4:	f1b9 0f00 	cmp.w	r9, #0
 801ada8:	d003      	beq.n	801adb2 <_scanf_float+0x6e>
 801adaa:	6823      	ldr	r3, [r4, #0]
 801adac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801adb0:	6023      	str	r3, [r4, #0]
 801adb2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801adb6:	f1ba 0f01 	cmp.w	sl, #1
 801adba:	f200 8113 	bhi.w	801afe4 <_scanf_float+0x2a0>
 801adbe:	455e      	cmp	r6, fp
 801adc0:	f200 8105 	bhi.w	801afce <_scanf_float+0x28a>
 801adc4:	2501      	movs	r5, #1
 801adc6:	4628      	mov	r0, r5
 801adc8:	b007      	add	sp, #28
 801adca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801add2:	2a0d      	cmp	r2, #13
 801add4:	d8e6      	bhi.n	801ada4 <_scanf_float+0x60>
 801add6:	a101      	add	r1, pc, #4	; (adr r1, 801addc <_scanf_float+0x98>)
 801add8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801addc:	0801af1b 	.word	0x0801af1b
 801ade0:	0801ada5 	.word	0x0801ada5
 801ade4:	0801ada5 	.word	0x0801ada5
 801ade8:	0801ada5 	.word	0x0801ada5
 801adec:	0801af7b 	.word	0x0801af7b
 801adf0:	0801af53 	.word	0x0801af53
 801adf4:	0801ada5 	.word	0x0801ada5
 801adf8:	0801ada5 	.word	0x0801ada5
 801adfc:	0801af29 	.word	0x0801af29
 801ae00:	0801ada5 	.word	0x0801ada5
 801ae04:	0801ada5 	.word	0x0801ada5
 801ae08:	0801ada5 	.word	0x0801ada5
 801ae0c:	0801ada5 	.word	0x0801ada5
 801ae10:	0801aee1 	.word	0x0801aee1
 801ae14:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801ae18:	e7db      	b.n	801add2 <_scanf_float+0x8e>
 801ae1a:	290e      	cmp	r1, #14
 801ae1c:	d8c2      	bhi.n	801ada4 <_scanf_float+0x60>
 801ae1e:	a001      	add	r0, pc, #4	; (adr r0, 801ae24 <_scanf_float+0xe0>)
 801ae20:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801ae24:	0801aed3 	.word	0x0801aed3
 801ae28:	0801ada5 	.word	0x0801ada5
 801ae2c:	0801aed3 	.word	0x0801aed3
 801ae30:	0801af67 	.word	0x0801af67
 801ae34:	0801ada5 	.word	0x0801ada5
 801ae38:	0801ae81 	.word	0x0801ae81
 801ae3c:	0801aebd 	.word	0x0801aebd
 801ae40:	0801aebd 	.word	0x0801aebd
 801ae44:	0801aebd 	.word	0x0801aebd
 801ae48:	0801aebd 	.word	0x0801aebd
 801ae4c:	0801aebd 	.word	0x0801aebd
 801ae50:	0801aebd 	.word	0x0801aebd
 801ae54:	0801aebd 	.word	0x0801aebd
 801ae58:	0801aebd 	.word	0x0801aebd
 801ae5c:	0801aebd 	.word	0x0801aebd
 801ae60:	2b6e      	cmp	r3, #110	; 0x6e
 801ae62:	d809      	bhi.n	801ae78 <_scanf_float+0x134>
 801ae64:	2b60      	cmp	r3, #96	; 0x60
 801ae66:	d8b2      	bhi.n	801adce <_scanf_float+0x8a>
 801ae68:	2b54      	cmp	r3, #84	; 0x54
 801ae6a:	d077      	beq.n	801af5c <_scanf_float+0x218>
 801ae6c:	2b59      	cmp	r3, #89	; 0x59
 801ae6e:	d199      	bne.n	801ada4 <_scanf_float+0x60>
 801ae70:	2d07      	cmp	r5, #7
 801ae72:	d197      	bne.n	801ada4 <_scanf_float+0x60>
 801ae74:	2508      	movs	r5, #8
 801ae76:	e029      	b.n	801aecc <_scanf_float+0x188>
 801ae78:	2b74      	cmp	r3, #116	; 0x74
 801ae7a:	d06f      	beq.n	801af5c <_scanf_float+0x218>
 801ae7c:	2b79      	cmp	r3, #121	; 0x79
 801ae7e:	e7f6      	b.n	801ae6e <_scanf_float+0x12a>
 801ae80:	6821      	ldr	r1, [r4, #0]
 801ae82:	05c8      	lsls	r0, r1, #23
 801ae84:	d51a      	bpl.n	801aebc <_scanf_float+0x178>
 801ae86:	9b02      	ldr	r3, [sp, #8]
 801ae88:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801ae8c:	6021      	str	r1, [r4, #0]
 801ae8e:	f109 0901 	add.w	r9, r9, #1
 801ae92:	b11b      	cbz	r3, 801ae9c <_scanf_float+0x158>
 801ae94:	3b01      	subs	r3, #1
 801ae96:	3201      	adds	r2, #1
 801ae98:	9302      	str	r3, [sp, #8]
 801ae9a:	60a2      	str	r2, [r4, #8]
 801ae9c:	68a3      	ldr	r3, [r4, #8]
 801ae9e:	3b01      	subs	r3, #1
 801aea0:	60a3      	str	r3, [r4, #8]
 801aea2:	6923      	ldr	r3, [r4, #16]
 801aea4:	3301      	adds	r3, #1
 801aea6:	6123      	str	r3, [r4, #16]
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	3b01      	subs	r3, #1
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	607b      	str	r3, [r7, #4]
 801aeb0:	f340 8084 	ble.w	801afbc <_scanf_float+0x278>
 801aeb4:	683b      	ldr	r3, [r7, #0]
 801aeb6:	3301      	adds	r3, #1
 801aeb8:	603b      	str	r3, [r7, #0]
 801aeba:	e766      	b.n	801ad8a <_scanf_float+0x46>
 801aebc:	eb1a 0f05 	cmn.w	sl, r5
 801aec0:	f47f af70 	bne.w	801ada4 <_scanf_float+0x60>
 801aec4:	6822      	ldr	r2, [r4, #0]
 801aec6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801aeca:	6022      	str	r2, [r4, #0]
 801aecc:	f806 3b01 	strb.w	r3, [r6], #1
 801aed0:	e7e4      	b.n	801ae9c <_scanf_float+0x158>
 801aed2:	6822      	ldr	r2, [r4, #0]
 801aed4:	0610      	lsls	r0, r2, #24
 801aed6:	f57f af65 	bpl.w	801ada4 <_scanf_float+0x60>
 801aeda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801aede:	e7f4      	b.n	801aeca <_scanf_float+0x186>
 801aee0:	f1ba 0f00 	cmp.w	sl, #0
 801aee4:	d10e      	bne.n	801af04 <_scanf_float+0x1c0>
 801aee6:	f1b9 0f00 	cmp.w	r9, #0
 801aeea:	d10e      	bne.n	801af0a <_scanf_float+0x1c6>
 801aeec:	6822      	ldr	r2, [r4, #0]
 801aeee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801aef2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801aef6:	d108      	bne.n	801af0a <_scanf_float+0x1c6>
 801aef8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801aefc:	6022      	str	r2, [r4, #0]
 801aefe:	f04f 0a01 	mov.w	sl, #1
 801af02:	e7e3      	b.n	801aecc <_scanf_float+0x188>
 801af04:	f1ba 0f02 	cmp.w	sl, #2
 801af08:	d055      	beq.n	801afb6 <_scanf_float+0x272>
 801af0a:	2d01      	cmp	r5, #1
 801af0c:	d002      	beq.n	801af14 <_scanf_float+0x1d0>
 801af0e:	2d04      	cmp	r5, #4
 801af10:	f47f af48 	bne.w	801ada4 <_scanf_float+0x60>
 801af14:	3501      	adds	r5, #1
 801af16:	b2ed      	uxtb	r5, r5
 801af18:	e7d8      	b.n	801aecc <_scanf_float+0x188>
 801af1a:	f1ba 0f01 	cmp.w	sl, #1
 801af1e:	f47f af41 	bne.w	801ada4 <_scanf_float+0x60>
 801af22:	f04f 0a02 	mov.w	sl, #2
 801af26:	e7d1      	b.n	801aecc <_scanf_float+0x188>
 801af28:	b97d      	cbnz	r5, 801af4a <_scanf_float+0x206>
 801af2a:	f1b9 0f00 	cmp.w	r9, #0
 801af2e:	f47f af3c 	bne.w	801adaa <_scanf_float+0x66>
 801af32:	6822      	ldr	r2, [r4, #0]
 801af34:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801af38:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801af3c:	f47f af39 	bne.w	801adb2 <_scanf_float+0x6e>
 801af40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801af44:	6022      	str	r2, [r4, #0]
 801af46:	2501      	movs	r5, #1
 801af48:	e7c0      	b.n	801aecc <_scanf_float+0x188>
 801af4a:	2d03      	cmp	r5, #3
 801af4c:	d0e2      	beq.n	801af14 <_scanf_float+0x1d0>
 801af4e:	2d05      	cmp	r5, #5
 801af50:	e7de      	b.n	801af10 <_scanf_float+0x1cc>
 801af52:	2d02      	cmp	r5, #2
 801af54:	f47f af26 	bne.w	801ada4 <_scanf_float+0x60>
 801af58:	2503      	movs	r5, #3
 801af5a:	e7b7      	b.n	801aecc <_scanf_float+0x188>
 801af5c:	2d06      	cmp	r5, #6
 801af5e:	f47f af21 	bne.w	801ada4 <_scanf_float+0x60>
 801af62:	2507      	movs	r5, #7
 801af64:	e7b2      	b.n	801aecc <_scanf_float+0x188>
 801af66:	6822      	ldr	r2, [r4, #0]
 801af68:	0591      	lsls	r1, r2, #22
 801af6a:	f57f af1b 	bpl.w	801ada4 <_scanf_float+0x60>
 801af6e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801af72:	6022      	str	r2, [r4, #0]
 801af74:	f8cd 9004 	str.w	r9, [sp, #4]
 801af78:	e7a8      	b.n	801aecc <_scanf_float+0x188>
 801af7a:	6822      	ldr	r2, [r4, #0]
 801af7c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801af80:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801af84:	d006      	beq.n	801af94 <_scanf_float+0x250>
 801af86:	0550      	lsls	r0, r2, #21
 801af88:	f57f af0c 	bpl.w	801ada4 <_scanf_float+0x60>
 801af8c:	f1b9 0f00 	cmp.w	r9, #0
 801af90:	f43f af0f 	beq.w	801adb2 <_scanf_float+0x6e>
 801af94:	0591      	lsls	r1, r2, #22
 801af96:	bf58      	it	pl
 801af98:	9901      	ldrpl	r1, [sp, #4]
 801af9a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801af9e:	bf58      	it	pl
 801afa0:	eba9 0101 	subpl.w	r1, r9, r1
 801afa4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801afa8:	bf58      	it	pl
 801afaa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801afae:	6022      	str	r2, [r4, #0]
 801afb0:	f04f 0900 	mov.w	r9, #0
 801afb4:	e78a      	b.n	801aecc <_scanf_float+0x188>
 801afb6:	f04f 0a03 	mov.w	sl, #3
 801afba:	e787      	b.n	801aecc <_scanf_float+0x188>
 801afbc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801afc0:	4639      	mov	r1, r7
 801afc2:	4640      	mov	r0, r8
 801afc4:	4798      	blx	r3
 801afc6:	2800      	cmp	r0, #0
 801afc8:	f43f aedf 	beq.w	801ad8a <_scanf_float+0x46>
 801afcc:	e6ea      	b.n	801ada4 <_scanf_float+0x60>
 801afce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801afd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801afd6:	463a      	mov	r2, r7
 801afd8:	4640      	mov	r0, r8
 801afda:	4798      	blx	r3
 801afdc:	6923      	ldr	r3, [r4, #16]
 801afde:	3b01      	subs	r3, #1
 801afe0:	6123      	str	r3, [r4, #16]
 801afe2:	e6ec      	b.n	801adbe <_scanf_float+0x7a>
 801afe4:	1e6b      	subs	r3, r5, #1
 801afe6:	2b06      	cmp	r3, #6
 801afe8:	d825      	bhi.n	801b036 <_scanf_float+0x2f2>
 801afea:	2d02      	cmp	r5, #2
 801afec:	d836      	bhi.n	801b05c <_scanf_float+0x318>
 801afee:	455e      	cmp	r6, fp
 801aff0:	f67f aee8 	bls.w	801adc4 <_scanf_float+0x80>
 801aff4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801aff8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801affc:	463a      	mov	r2, r7
 801affe:	4640      	mov	r0, r8
 801b000:	4798      	blx	r3
 801b002:	6923      	ldr	r3, [r4, #16]
 801b004:	3b01      	subs	r3, #1
 801b006:	6123      	str	r3, [r4, #16]
 801b008:	e7f1      	b.n	801afee <_scanf_float+0x2aa>
 801b00a:	9802      	ldr	r0, [sp, #8]
 801b00c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b010:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801b014:	9002      	str	r0, [sp, #8]
 801b016:	463a      	mov	r2, r7
 801b018:	4640      	mov	r0, r8
 801b01a:	4798      	blx	r3
 801b01c:	6923      	ldr	r3, [r4, #16]
 801b01e:	3b01      	subs	r3, #1
 801b020:	6123      	str	r3, [r4, #16]
 801b022:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801b026:	fa5f fa8a 	uxtb.w	sl, sl
 801b02a:	f1ba 0f02 	cmp.w	sl, #2
 801b02e:	d1ec      	bne.n	801b00a <_scanf_float+0x2c6>
 801b030:	3d03      	subs	r5, #3
 801b032:	b2ed      	uxtb	r5, r5
 801b034:	1b76      	subs	r6, r6, r5
 801b036:	6823      	ldr	r3, [r4, #0]
 801b038:	05da      	lsls	r2, r3, #23
 801b03a:	d52f      	bpl.n	801b09c <_scanf_float+0x358>
 801b03c:	055b      	lsls	r3, r3, #21
 801b03e:	d510      	bpl.n	801b062 <_scanf_float+0x31e>
 801b040:	455e      	cmp	r6, fp
 801b042:	f67f aebf 	bls.w	801adc4 <_scanf_float+0x80>
 801b046:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b04a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b04e:	463a      	mov	r2, r7
 801b050:	4640      	mov	r0, r8
 801b052:	4798      	blx	r3
 801b054:	6923      	ldr	r3, [r4, #16]
 801b056:	3b01      	subs	r3, #1
 801b058:	6123      	str	r3, [r4, #16]
 801b05a:	e7f1      	b.n	801b040 <_scanf_float+0x2fc>
 801b05c:	46aa      	mov	sl, r5
 801b05e:	9602      	str	r6, [sp, #8]
 801b060:	e7df      	b.n	801b022 <_scanf_float+0x2de>
 801b062:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b066:	6923      	ldr	r3, [r4, #16]
 801b068:	2965      	cmp	r1, #101	; 0x65
 801b06a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801b06e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801b072:	6123      	str	r3, [r4, #16]
 801b074:	d00c      	beq.n	801b090 <_scanf_float+0x34c>
 801b076:	2945      	cmp	r1, #69	; 0x45
 801b078:	d00a      	beq.n	801b090 <_scanf_float+0x34c>
 801b07a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b07e:	463a      	mov	r2, r7
 801b080:	4640      	mov	r0, r8
 801b082:	4798      	blx	r3
 801b084:	6923      	ldr	r3, [r4, #16]
 801b086:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b08a:	3b01      	subs	r3, #1
 801b08c:	1eb5      	subs	r5, r6, #2
 801b08e:	6123      	str	r3, [r4, #16]
 801b090:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b094:	463a      	mov	r2, r7
 801b096:	4640      	mov	r0, r8
 801b098:	4798      	blx	r3
 801b09a:	462e      	mov	r6, r5
 801b09c:	6825      	ldr	r5, [r4, #0]
 801b09e:	f015 0510 	ands.w	r5, r5, #16
 801b0a2:	d158      	bne.n	801b156 <_scanf_float+0x412>
 801b0a4:	7035      	strb	r5, [r6, #0]
 801b0a6:	6823      	ldr	r3, [r4, #0]
 801b0a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801b0ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b0b0:	d11c      	bne.n	801b0ec <_scanf_float+0x3a8>
 801b0b2:	9b01      	ldr	r3, [sp, #4]
 801b0b4:	454b      	cmp	r3, r9
 801b0b6:	eba3 0209 	sub.w	r2, r3, r9
 801b0ba:	d124      	bne.n	801b106 <_scanf_float+0x3c2>
 801b0bc:	2200      	movs	r2, #0
 801b0be:	4659      	mov	r1, fp
 801b0c0:	4640      	mov	r0, r8
 801b0c2:	f000 ff9f 	bl	801c004 <_strtod_r>
 801b0c6:	9b03      	ldr	r3, [sp, #12]
 801b0c8:	6821      	ldr	r1, [r4, #0]
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	f011 0f02 	tst.w	r1, #2
 801b0d0:	ec57 6b10 	vmov	r6, r7, d0
 801b0d4:	f103 0204 	add.w	r2, r3, #4
 801b0d8:	d020      	beq.n	801b11c <_scanf_float+0x3d8>
 801b0da:	9903      	ldr	r1, [sp, #12]
 801b0dc:	600a      	str	r2, [r1, #0]
 801b0de:	681b      	ldr	r3, [r3, #0]
 801b0e0:	e9c3 6700 	strd	r6, r7, [r3]
 801b0e4:	68e3      	ldr	r3, [r4, #12]
 801b0e6:	3301      	adds	r3, #1
 801b0e8:	60e3      	str	r3, [r4, #12]
 801b0ea:	e66c      	b.n	801adc6 <_scanf_float+0x82>
 801b0ec:	9b04      	ldr	r3, [sp, #16]
 801b0ee:	2b00      	cmp	r3, #0
 801b0f0:	d0e4      	beq.n	801b0bc <_scanf_float+0x378>
 801b0f2:	9905      	ldr	r1, [sp, #20]
 801b0f4:	230a      	movs	r3, #10
 801b0f6:	462a      	mov	r2, r5
 801b0f8:	3101      	adds	r1, #1
 801b0fa:	4640      	mov	r0, r8
 801b0fc:	f001 f80c 	bl	801c118 <_strtol_r>
 801b100:	9b04      	ldr	r3, [sp, #16]
 801b102:	9e05      	ldr	r6, [sp, #20]
 801b104:	1ac2      	subs	r2, r0, r3
 801b106:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801b10a:	429e      	cmp	r6, r3
 801b10c:	bf28      	it	cs
 801b10e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801b112:	4912      	ldr	r1, [pc, #72]	; (801b15c <_scanf_float+0x418>)
 801b114:	4630      	mov	r0, r6
 801b116:	f000 f8db 	bl	801b2d0 <siprintf>
 801b11a:	e7cf      	b.n	801b0bc <_scanf_float+0x378>
 801b11c:	f011 0f04 	tst.w	r1, #4
 801b120:	9903      	ldr	r1, [sp, #12]
 801b122:	600a      	str	r2, [r1, #0]
 801b124:	d1db      	bne.n	801b0de <_scanf_float+0x39a>
 801b126:	f8d3 8000 	ldr.w	r8, [r3]
 801b12a:	ee10 2a10 	vmov	r2, s0
 801b12e:	ee10 0a10 	vmov	r0, s0
 801b132:	463b      	mov	r3, r7
 801b134:	4639      	mov	r1, r7
 801b136:	f7e5 fcf9 	bl	8000b2c <__aeabi_dcmpun>
 801b13a:	b128      	cbz	r0, 801b148 <_scanf_float+0x404>
 801b13c:	4808      	ldr	r0, [pc, #32]	; (801b160 <_scanf_float+0x41c>)
 801b13e:	f000 f84f 	bl	801b1e0 <nanf>
 801b142:	ed88 0a00 	vstr	s0, [r8]
 801b146:	e7cd      	b.n	801b0e4 <_scanf_float+0x3a0>
 801b148:	4630      	mov	r0, r6
 801b14a:	4639      	mov	r1, r7
 801b14c:	f7e5 fd4c 	bl	8000be8 <__aeabi_d2f>
 801b150:	f8c8 0000 	str.w	r0, [r8]
 801b154:	e7c6      	b.n	801b0e4 <_scanf_float+0x3a0>
 801b156:	2500      	movs	r5, #0
 801b158:	e635      	b.n	801adc6 <_scanf_float+0x82>
 801b15a:	bf00      	nop
 801b15c:	080207ec 	.word	0x080207ec
 801b160:	08020c08 	.word	0x08020c08

0801b164 <realloc>:
 801b164:	4b02      	ldr	r3, [pc, #8]	; (801b170 <realloc+0xc>)
 801b166:	460a      	mov	r2, r1
 801b168:	4601      	mov	r1, r0
 801b16a:	6818      	ldr	r0, [r3, #0]
 801b16c:	f002 bede 	b.w	801df2c <_realloc_r>
 801b170:	2000008c 	.word	0x2000008c

0801b174 <_sbrk_r>:
 801b174:	b538      	push	{r3, r4, r5, lr}
 801b176:	4d06      	ldr	r5, [pc, #24]	; (801b190 <_sbrk_r+0x1c>)
 801b178:	2300      	movs	r3, #0
 801b17a:	4604      	mov	r4, r0
 801b17c:	4608      	mov	r0, r1
 801b17e:	602b      	str	r3, [r5, #0]
 801b180:	f7f1 f9f4 	bl	800c56c <_sbrk>
 801b184:	1c43      	adds	r3, r0, #1
 801b186:	d102      	bne.n	801b18e <_sbrk_r+0x1a>
 801b188:	682b      	ldr	r3, [r5, #0]
 801b18a:	b103      	cbz	r3, 801b18e <_sbrk_r+0x1a>
 801b18c:	6023      	str	r3, [r4, #0]
 801b18e:	bd38      	pop	{r3, r4, r5, pc}
 801b190:	2000aaa4 	.word	0x2000aaa4

0801b194 <ldexpf>:
 801b194:	b510      	push	{r4, lr}
 801b196:	ed2d 8b02 	vpush	{d8}
 801b19a:	4604      	mov	r4, r0
 801b19c:	eeb0 8a40 	vmov.f32	s16, s0
 801b1a0:	f003 f862 	bl	801e268 <finitef>
 801b1a4:	b1b8      	cbz	r0, 801b1d6 <ldexpf+0x42>
 801b1a6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1ae:	d012      	beq.n	801b1d6 <ldexpf+0x42>
 801b1b0:	eeb0 0a48 	vmov.f32	s0, s16
 801b1b4:	4620      	mov	r0, r4
 801b1b6:	f000 f819 	bl	801b1ec <scalbnf>
 801b1ba:	eeb0 8a40 	vmov.f32	s16, s0
 801b1be:	f003 f853 	bl	801e268 <finitef>
 801b1c2:	b120      	cbz	r0, 801b1ce <ldexpf+0x3a>
 801b1c4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1cc:	d103      	bne.n	801b1d6 <ldexpf+0x42>
 801b1ce:	f7ff f85d 	bl	801a28c <__errno>
 801b1d2:	2322      	movs	r3, #34	; 0x22
 801b1d4:	6003      	str	r3, [r0, #0]
 801b1d6:	eeb0 0a48 	vmov.f32	s0, s16
 801b1da:	ecbd 8b02 	vpop	{d8}
 801b1de:	bd10      	pop	{r4, pc}

0801b1e0 <nanf>:
 801b1e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b1e8 <nanf+0x8>
 801b1e4:	4770      	bx	lr
 801b1e6:	bf00      	nop
 801b1e8:	7fc00000 	.word	0x7fc00000

0801b1ec <scalbnf>:
 801b1ec:	ee10 3a10 	vmov	r3, s0
 801b1f0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801b1f4:	d025      	beq.n	801b242 <scalbnf+0x56>
 801b1f6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801b1fa:	d302      	bcc.n	801b202 <scalbnf+0x16>
 801b1fc:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b200:	4770      	bx	lr
 801b202:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801b206:	d122      	bne.n	801b24e <scalbnf+0x62>
 801b208:	4b2a      	ldr	r3, [pc, #168]	; (801b2b4 <scalbnf+0xc8>)
 801b20a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801b2b8 <scalbnf+0xcc>
 801b20e:	4298      	cmp	r0, r3
 801b210:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b214:	db16      	blt.n	801b244 <scalbnf+0x58>
 801b216:	ee10 3a10 	vmov	r3, s0
 801b21a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b21e:	3a19      	subs	r2, #25
 801b220:	4402      	add	r2, r0
 801b222:	2afe      	cmp	r2, #254	; 0xfe
 801b224:	dd15      	ble.n	801b252 <scalbnf+0x66>
 801b226:	ee10 3a10 	vmov	r3, s0
 801b22a:	eddf 7a24 	vldr	s15, [pc, #144]	; 801b2bc <scalbnf+0xd0>
 801b22e:	eddf 6a24 	vldr	s13, [pc, #144]	; 801b2c0 <scalbnf+0xd4>
 801b232:	2b00      	cmp	r3, #0
 801b234:	eeb0 7a67 	vmov.f32	s14, s15
 801b238:	bfb8      	it	lt
 801b23a:	eef0 7a66 	vmovlt.f32	s15, s13
 801b23e:	ee27 0a27 	vmul.f32	s0, s14, s15
 801b242:	4770      	bx	lr
 801b244:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801b2c4 <scalbnf+0xd8>
 801b248:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b24c:	4770      	bx	lr
 801b24e:	0dd2      	lsrs	r2, r2, #23
 801b250:	e7e6      	b.n	801b220 <scalbnf+0x34>
 801b252:	2a00      	cmp	r2, #0
 801b254:	dd06      	ble.n	801b264 <scalbnf+0x78>
 801b256:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b25a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801b25e:	ee00 3a10 	vmov	s0, r3
 801b262:	4770      	bx	lr
 801b264:	f112 0f16 	cmn.w	r2, #22
 801b268:	da1a      	bge.n	801b2a0 <scalbnf+0xb4>
 801b26a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b26e:	4298      	cmp	r0, r3
 801b270:	ee10 3a10 	vmov	r3, s0
 801b274:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b278:	dd0a      	ble.n	801b290 <scalbnf+0xa4>
 801b27a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801b2bc <scalbnf+0xd0>
 801b27e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801b2c0 <scalbnf+0xd4>
 801b282:	eef0 7a40 	vmov.f32	s15, s0
 801b286:	2b00      	cmp	r3, #0
 801b288:	bf18      	it	ne
 801b28a:	eeb0 0a47 	vmovne.f32	s0, s14
 801b28e:	e7db      	b.n	801b248 <scalbnf+0x5c>
 801b290:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801b2c4 <scalbnf+0xd8>
 801b294:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801b2c8 <scalbnf+0xdc>
 801b298:	eef0 7a40 	vmov.f32	s15, s0
 801b29c:	2b00      	cmp	r3, #0
 801b29e:	e7f3      	b.n	801b288 <scalbnf+0x9c>
 801b2a0:	3219      	adds	r2, #25
 801b2a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b2a6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801b2aa:	eddf 7a08 	vldr	s15, [pc, #32]	; 801b2cc <scalbnf+0xe0>
 801b2ae:	ee07 3a10 	vmov	s14, r3
 801b2b2:	e7c4      	b.n	801b23e <scalbnf+0x52>
 801b2b4:	ffff3cb0 	.word	0xffff3cb0
 801b2b8:	4c000000 	.word	0x4c000000
 801b2bc:	7149f2ca 	.word	0x7149f2ca
 801b2c0:	f149f2ca 	.word	0xf149f2ca
 801b2c4:	0da24260 	.word	0x0da24260
 801b2c8:	8da24260 	.word	0x8da24260
 801b2cc:	33000000 	.word	0x33000000

0801b2d0 <siprintf>:
 801b2d0:	b40e      	push	{r1, r2, r3}
 801b2d2:	b500      	push	{lr}
 801b2d4:	b09c      	sub	sp, #112	; 0x70
 801b2d6:	ab1d      	add	r3, sp, #116	; 0x74
 801b2d8:	9002      	str	r0, [sp, #8]
 801b2da:	9006      	str	r0, [sp, #24]
 801b2dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b2e0:	4809      	ldr	r0, [pc, #36]	; (801b308 <siprintf+0x38>)
 801b2e2:	9107      	str	r1, [sp, #28]
 801b2e4:	9104      	str	r1, [sp, #16]
 801b2e6:	4909      	ldr	r1, [pc, #36]	; (801b30c <siprintf+0x3c>)
 801b2e8:	f853 2b04 	ldr.w	r2, [r3], #4
 801b2ec:	9105      	str	r1, [sp, #20]
 801b2ee:	6800      	ldr	r0, [r0, #0]
 801b2f0:	9301      	str	r3, [sp, #4]
 801b2f2:	a902      	add	r1, sp, #8
 801b2f4:	f002 fe9c 	bl	801e030 <_svfiprintf_r>
 801b2f8:	9b02      	ldr	r3, [sp, #8]
 801b2fa:	2200      	movs	r2, #0
 801b2fc:	701a      	strb	r2, [r3, #0]
 801b2fe:	b01c      	add	sp, #112	; 0x70
 801b300:	f85d eb04 	ldr.w	lr, [sp], #4
 801b304:	b003      	add	sp, #12
 801b306:	4770      	bx	lr
 801b308:	2000008c 	.word	0x2000008c
 801b30c:	ffff0208 	.word	0xffff0208

0801b310 <__sread>:
 801b310:	b510      	push	{r4, lr}
 801b312:	460c      	mov	r4, r1
 801b314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b318:	f002 ff8a 	bl	801e230 <_read_r>
 801b31c:	2800      	cmp	r0, #0
 801b31e:	bfab      	itete	ge
 801b320:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b322:	89a3      	ldrhlt	r3, [r4, #12]
 801b324:	181b      	addge	r3, r3, r0
 801b326:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b32a:	bfac      	ite	ge
 801b32c:	6563      	strge	r3, [r4, #84]	; 0x54
 801b32e:	81a3      	strhlt	r3, [r4, #12]
 801b330:	bd10      	pop	{r4, pc}

0801b332 <__swrite>:
 801b332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b336:	461f      	mov	r7, r3
 801b338:	898b      	ldrh	r3, [r1, #12]
 801b33a:	05db      	lsls	r3, r3, #23
 801b33c:	4605      	mov	r5, r0
 801b33e:	460c      	mov	r4, r1
 801b340:	4616      	mov	r6, r2
 801b342:	d505      	bpl.n	801b350 <__swrite+0x1e>
 801b344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b348:	2302      	movs	r3, #2
 801b34a:	2200      	movs	r2, #0
 801b34c:	f002 f8f4 	bl	801d538 <_lseek_r>
 801b350:	89a3      	ldrh	r3, [r4, #12]
 801b352:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b356:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b35a:	81a3      	strh	r3, [r4, #12]
 801b35c:	4632      	mov	r2, r6
 801b35e:	463b      	mov	r3, r7
 801b360:	4628      	mov	r0, r5
 801b362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b366:	f000 bed9 	b.w	801c11c <_write_r>

0801b36a <__sseek>:
 801b36a:	b510      	push	{r4, lr}
 801b36c:	460c      	mov	r4, r1
 801b36e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b372:	f002 f8e1 	bl	801d538 <_lseek_r>
 801b376:	1c43      	adds	r3, r0, #1
 801b378:	89a3      	ldrh	r3, [r4, #12]
 801b37a:	bf15      	itete	ne
 801b37c:	6560      	strne	r0, [r4, #84]	; 0x54
 801b37e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b382:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b386:	81a3      	strheq	r3, [r4, #12]
 801b388:	bf18      	it	ne
 801b38a:	81a3      	strhne	r3, [r4, #12]
 801b38c:	bd10      	pop	{r4, pc}

0801b38e <__sclose>:
 801b38e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b392:	f000 bed5 	b.w	801c140 <_close_r>

0801b396 <strcat>:
 801b396:	b510      	push	{r4, lr}
 801b398:	4602      	mov	r2, r0
 801b39a:	7814      	ldrb	r4, [r2, #0]
 801b39c:	4613      	mov	r3, r2
 801b39e:	3201      	adds	r2, #1
 801b3a0:	2c00      	cmp	r4, #0
 801b3a2:	d1fa      	bne.n	801b39a <strcat+0x4>
 801b3a4:	3b01      	subs	r3, #1
 801b3a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b3aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b3ae:	2a00      	cmp	r2, #0
 801b3b0:	d1f9      	bne.n	801b3a6 <strcat+0x10>
 801b3b2:	bd10      	pop	{r4, pc}

0801b3b4 <sulp>:
 801b3b4:	b570      	push	{r4, r5, r6, lr}
 801b3b6:	4604      	mov	r4, r0
 801b3b8:	460d      	mov	r5, r1
 801b3ba:	ec45 4b10 	vmov	d0, r4, r5
 801b3be:	4616      	mov	r6, r2
 801b3c0:	f002 fc56 	bl	801dc70 <__ulp>
 801b3c4:	ec51 0b10 	vmov	r0, r1, d0
 801b3c8:	b17e      	cbz	r6, 801b3ea <sulp+0x36>
 801b3ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801b3ce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b3d2:	2b00      	cmp	r3, #0
 801b3d4:	dd09      	ble.n	801b3ea <sulp+0x36>
 801b3d6:	051b      	lsls	r3, r3, #20
 801b3d8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801b3dc:	2400      	movs	r4, #0
 801b3de:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801b3e2:	4622      	mov	r2, r4
 801b3e4:	462b      	mov	r3, r5
 801b3e6:	f7e5 f907 	bl	80005f8 <__aeabi_dmul>
 801b3ea:	bd70      	pop	{r4, r5, r6, pc}
 801b3ec:	0000      	movs	r0, r0
	...

0801b3f0 <_strtod_l>:
 801b3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3f4:	b0a3      	sub	sp, #140	; 0x8c
 801b3f6:	461f      	mov	r7, r3
 801b3f8:	2300      	movs	r3, #0
 801b3fa:	931e      	str	r3, [sp, #120]	; 0x78
 801b3fc:	4ba4      	ldr	r3, [pc, #656]	; (801b690 <_strtod_l+0x2a0>)
 801b3fe:	9219      	str	r2, [sp, #100]	; 0x64
 801b400:	681b      	ldr	r3, [r3, #0]
 801b402:	9307      	str	r3, [sp, #28]
 801b404:	4604      	mov	r4, r0
 801b406:	4618      	mov	r0, r3
 801b408:	4688      	mov	r8, r1
 801b40a:	f7e4 fee1 	bl	80001d0 <strlen>
 801b40e:	f04f 0a00 	mov.w	sl, #0
 801b412:	4605      	mov	r5, r0
 801b414:	f04f 0b00 	mov.w	fp, #0
 801b418:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b41c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b41e:	781a      	ldrb	r2, [r3, #0]
 801b420:	2a2b      	cmp	r2, #43	; 0x2b
 801b422:	d04c      	beq.n	801b4be <_strtod_l+0xce>
 801b424:	d839      	bhi.n	801b49a <_strtod_l+0xaa>
 801b426:	2a0d      	cmp	r2, #13
 801b428:	d832      	bhi.n	801b490 <_strtod_l+0xa0>
 801b42a:	2a08      	cmp	r2, #8
 801b42c:	d832      	bhi.n	801b494 <_strtod_l+0xa4>
 801b42e:	2a00      	cmp	r2, #0
 801b430:	d03c      	beq.n	801b4ac <_strtod_l+0xbc>
 801b432:	2300      	movs	r3, #0
 801b434:	930e      	str	r3, [sp, #56]	; 0x38
 801b436:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801b438:	7833      	ldrb	r3, [r6, #0]
 801b43a:	2b30      	cmp	r3, #48	; 0x30
 801b43c:	f040 80b4 	bne.w	801b5a8 <_strtod_l+0x1b8>
 801b440:	7873      	ldrb	r3, [r6, #1]
 801b442:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b446:	2b58      	cmp	r3, #88	; 0x58
 801b448:	d16c      	bne.n	801b524 <_strtod_l+0x134>
 801b44a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b44c:	9301      	str	r3, [sp, #4]
 801b44e:	ab1e      	add	r3, sp, #120	; 0x78
 801b450:	9702      	str	r7, [sp, #8]
 801b452:	9300      	str	r3, [sp, #0]
 801b454:	4a8f      	ldr	r2, [pc, #572]	; (801b694 <_strtod_l+0x2a4>)
 801b456:	ab1f      	add	r3, sp, #124	; 0x7c
 801b458:	a91d      	add	r1, sp, #116	; 0x74
 801b45a:	4620      	mov	r0, r4
 801b45c:	f001 fd60 	bl	801cf20 <__gethex>
 801b460:	f010 0707 	ands.w	r7, r0, #7
 801b464:	4605      	mov	r5, r0
 801b466:	d005      	beq.n	801b474 <_strtod_l+0x84>
 801b468:	2f06      	cmp	r7, #6
 801b46a:	d12a      	bne.n	801b4c2 <_strtod_l+0xd2>
 801b46c:	3601      	adds	r6, #1
 801b46e:	2300      	movs	r3, #0
 801b470:	961d      	str	r6, [sp, #116]	; 0x74
 801b472:	930e      	str	r3, [sp, #56]	; 0x38
 801b474:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b476:	2b00      	cmp	r3, #0
 801b478:	f040 8596 	bne.w	801bfa8 <_strtod_l+0xbb8>
 801b47c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b47e:	b1db      	cbz	r3, 801b4b8 <_strtod_l+0xc8>
 801b480:	4652      	mov	r2, sl
 801b482:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b486:	ec43 2b10 	vmov	d0, r2, r3
 801b48a:	b023      	add	sp, #140	; 0x8c
 801b48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b490:	2a20      	cmp	r2, #32
 801b492:	d1ce      	bne.n	801b432 <_strtod_l+0x42>
 801b494:	3301      	adds	r3, #1
 801b496:	931d      	str	r3, [sp, #116]	; 0x74
 801b498:	e7c0      	b.n	801b41c <_strtod_l+0x2c>
 801b49a:	2a2d      	cmp	r2, #45	; 0x2d
 801b49c:	d1c9      	bne.n	801b432 <_strtod_l+0x42>
 801b49e:	2201      	movs	r2, #1
 801b4a0:	920e      	str	r2, [sp, #56]	; 0x38
 801b4a2:	1c5a      	adds	r2, r3, #1
 801b4a4:	921d      	str	r2, [sp, #116]	; 0x74
 801b4a6:	785b      	ldrb	r3, [r3, #1]
 801b4a8:	2b00      	cmp	r3, #0
 801b4aa:	d1c4      	bne.n	801b436 <_strtod_l+0x46>
 801b4ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b4ae:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	f040 8576 	bne.w	801bfa4 <_strtod_l+0xbb4>
 801b4b8:	4652      	mov	r2, sl
 801b4ba:	465b      	mov	r3, fp
 801b4bc:	e7e3      	b.n	801b486 <_strtod_l+0x96>
 801b4be:	2200      	movs	r2, #0
 801b4c0:	e7ee      	b.n	801b4a0 <_strtod_l+0xb0>
 801b4c2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801b4c4:	b13a      	cbz	r2, 801b4d6 <_strtod_l+0xe6>
 801b4c6:	2135      	movs	r1, #53	; 0x35
 801b4c8:	a820      	add	r0, sp, #128	; 0x80
 801b4ca:	f002 fcdc 	bl	801de86 <__copybits>
 801b4ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b4d0:	4620      	mov	r0, r4
 801b4d2:	f002 f8a1 	bl	801d618 <_Bfree>
 801b4d6:	3f01      	subs	r7, #1
 801b4d8:	2f05      	cmp	r7, #5
 801b4da:	d807      	bhi.n	801b4ec <_strtod_l+0xfc>
 801b4dc:	e8df f007 	tbb	[pc, r7]
 801b4e0:	1d180b0e 	.word	0x1d180b0e
 801b4e4:	030e      	.short	0x030e
 801b4e6:	f04f 0b00 	mov.w	fp, #0
 801b4ea:	46da      	mov	sl, fp
 801b4ec:	0728      	lsls	r0, r5, #28
 801b4ee:	d5c1      	bpl.n	801b474 <_strtod_l+0x84>
 801b4f0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801b4f4:	e7be      	b.n	801b474 <_strtod_l+0x84>
 801b4f6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801b4fa:	e7f7      	b.n	801b4ec <_strtod_l+0xfc>
 801b4fc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801b500:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801b502:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801b506:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801b50a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801b50e:	e7ed      	b.n	801b4ec <_strtod_l+0xfc>
 801b510:	f8df b184 	ldr.w	fp, [pc, #388]	; 801b698 <_strtod_l+0x2a8>
 801b514:	f04f 0a00 	mov.w	sl, #0
 801b518:	e7e8      	b.n	801b4ec <_strtod_l+0xfc>
 801b51a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801b51e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801b522:	e7e3      	b.n	801b4ec <_strtod_l+0xfc>
 801b524:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b526:	1c5a      	adds	r2, r3, #1
 801b528:	921d      	str	r2, [sp, #116]	; 0x74
 801b52a:	785b      	ldrb	r3, [r3, #1]
 801b52c:	2b30      	cmp	r3, #48	; 0x30
 801b52e:	d0f9      	beq.n	801b524 <_strtod_l+0x134>
 801b530:	2b00      	cmp	r3, #0
 801b532:	d09f      	beq.n	801b474 <_strtod_l+0x84>
 801b534:	2301      	movs	r3, #1
 801b536:	f04f 0900 	mov.w	r9, #0
 801b53a:	9304      	str	r3, [sp, #16]
 801b53c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b53e:	930a      	str	r3, [sp, #40]	; 0x28
 801b540:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801b544:	464f      	mov	r7, r9
 801b546:	220a      	movs	r2, #10
 801b548:	981d      	ldr	r0, [sp, #116]	; 0x74
 801b54a:	7806      	ldrb	r6, [r0, #0]
 801b54c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801b550:	b2d9      	uxtb	r1, r3
 801b552:	2909      	cmp	r1, #9
 801b554:	d92a      	bls.n	801b5ac <_strtod_l+0x1bc>
 801b556:	9907      	ldr	r1, [sp, #28]
 801b558:	462a      	mov	r2, r5
 801b55a:	f002 fe92 	bl	801e282 <strncmp>
 801b55e:	b398      	cbz	r0, 801b5c8 <_strtod_l+0x1d8>
 801b560:	2000      	movs	r0, #0
 801b562:	4633      	mov	r3, r6
 801b564:	463d      	mov	r5, r7
 801b566:	9007      	str	r0, [sp, #28]
 801b568:	4602      	mov	r2, r0
 801b56a:	2b65      	cmp	r3, #101	; 0x65
 801b56c:	d001      	beq.n	801b572 <_strtod_l+0x182>
 801b56e:	2b45      	cmp	r3, #69	; 0x45
 801b570:	d118      	bne.n	801b5a4 <_strtod_l+0x1b4>
 801b572:	b91d      	cbnz	r5, 801b57c <_strtod_l+0x18c>
 801b574:	9b04      	ldr	r3, [sp, #16]
 801b576:	4303      	orrs	r3, r0
 801b578:	d098      	beq.n	801b4ac <_strtod_l+0xbc>
 801b57a:	2500      	movs	r5, #0
 801b57c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801b580:	f108 0301 	add.w	r3, r8, #1
 801b584:	931d      	str	r3, [sp, #116]	; 0x74
 801b586:	f898 3001 	ldrb.w	r3, [r8, #1]
 801b58a:	2b2b      	cmp	r3, #43	; 0x2b
 801b58c:	d075      	beq.n	801b67a <_strtod_l+0x28a>
 801b58e:	2b2d      	cmp	r3, #45	; 0x2d
 801b590:	d07b      	beq.n	801b68a <_strtod_l+0x29a>
 801b592:	f04f 0c00 	mov.w	ip, #0
 801b596:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801b59a:	2909      	cmp	r1, #9
 801b59c:	f240 8082 	bls.w	801b6a4 <_strtod_l+0x2b4>
 801b5a0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b5a4:	2600      	movs	r6, #0
 801b5a6:	e09d      	b.n	801b6e4 <_strtod_l+0x2f4>
 801b5a8:	2300      	movs	r3, #0
 801b5aa:	e7c4      	b.n	801b536 <_strtod_l+0x146>
 801b5ac:	2f08      	cmp	r7, #8
 801b5ae:	bfd8      	it	le
 801b5b0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801b5b2:	f100 0001 	add.w	r0, r0, #1
 801b5b6:	bfda      	itte	le
 801b5b8:	fb02 3301 	mlale	r3, r2, r1, r3
 801b5bc:	9309      	strle	r3, [sp, #36]	; 0x24
 801b5be:	fb02 3909 	mlagt	r9, r2, r9, r3
 801b5c2:	3701      	adds	r7, #1
 801b5c4:	901d      	str	r0, [sp, #116]	; 0x74
 801b5c6:	e7bf      	b.n	801b548 <_strtod_l+0x158>
 801b5c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b5ca:	195a      	adds	r2, r3, r5
 801b5cc:	921d      	str	r2, [sp, #116]	; 0x74
 801b5ce:	5d5b      	ldrb	r3, [r3, r5]
 801b5d0:	2f00      	cmp	r7, #0
 801b5d2:	d037      	beq.n	801b644 <_strtod_l+0x254>
 801b5d4:	9007      	str	r0, [sp, #28]
 801b5d6:	463d      	mov	r5, r7
 801b5d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801b5dc:	2a09      	cmp	r2, #9
 801b5de:	d912      	bls.n	801b606 <_strtod_l+0x216>
 801b5e0:	2201      	movs	r2, #1
 801b5e2:	e7c2      	b.n	801b56a <_strtod_l+0x17a>
 801b5e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b5e6:	1c5a      	adds	r2, r3, #1
 801b5e8:	921d      	str	r2, [sp, #116]	; 0x74
 801b5ea:	785b      	ldrb	r3, [r3, #1]
 801b5ec:	3001      	adds	r0, #1
 801b5ee:	2b30      	cmp	r3, #48	; 0x30
 801b5f0:	d0f8      	beq.n	801b5e4 <_strtod_l+0x1f4>
 801b5f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801b5f6:	2a08      	cmp	r2, #8
 801b5f8:	f200 84db 	bhi.w	801bfb2 <_strtod_l+0xbc2>
 801b5fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b5fe:	9007      	str	r0, [sp, #28]
 801b600:	2000      	movs	r0, #0
 801b602:	920a      	str	r2, [sp, #40]	; 0x28
 801b604:	4605      	mov	r5, r0
 801b606:	3b30      	subs	r3, #48	; 0x30
 801b608:	f100 0201 	add.w	r2, r0, #1
 801b60c:	d014      	beq.n	801b638 <_strtod_l+0x248>
 801b60e:	9907      	ldr	r1, [sp, #28]
 801b610:	4411      	add	r1, r2
 801b612:	9107      	str	r1, [sp, #28]
 801b614:	462a      	mov	r2, r5
 801b616:	eb00 0e05 	add.w	lr, r0, r5
 801b61a:	210a      	movs	r1, #10
 801b61c:	4572      	cmp	r2, lr
 801b61e:	d113      	bne.n	801b648 <_strtod_l+0x258>
 801b620:	182a      	adds	r2, r5, r0
 801b622:	2a08      	cmp	r2, #8
 801b624:	f105 0501 	add.w	r5, r5, #1
 801b628:	4405      	add	r5, r0
 801b62a:	dc1c      	bgt.n	801b666 <_strtod_l+0x276>
 801b62c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b62e:	220a      	movs	r2, #10
 801b630:	fb02 3301 	mla	r3, r2, r1, r3
 801b634:	9309      	str	r3, [sp, #36]	; 0x24
 801b636:	2200      	movs	r2, #0
 801b638:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b63a:	1c59      	adds	r1, r3, #1
 801b63c:	911d      	str	r1, [sp, #116]	; 0x74
 801b63e:	785b      	ldrb	r3, [r3, #1]
 801b640:	4610      	mov	r0, r2
 801b642:	e7c9      	b.n	801b5d8 <_strtod_l+0x1e8>
 801b644:	4638      	mov	r0, r7
 801b646:	e7d2      	b.n	801b5ee <_strtod_l+0x1fe>
 801b648:	2a08      	cmp	r2, #8
 801b64a:	dc04      	bgt.n	801b656 <_strtod_l+0x266>
 801b64c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801b64e:	434e      	muls	r6, r1
 801b650:	9609      	str	r6, [sp, #36]	; 0x24
 801b652:	3201      	adds	r2, #1
 801b654:	e7e2      	b.n	801b61c <_strtod_l+0x22c>
 801b656:	f102 0c01 	add.w	ip, r2, #1
 801b65a:	f1bc 0f10 	cmp.w	ip, #16
 801b65e:	bfd8      	it	le
 801b660:	fb01 f909 	mulle.w	r9, r1, r9
 801b664:	e7f5      	b.n	801b652 <_strtod_l+0x262>
 801b666:	2d10      	cmp	r5, #16
 801b668:	bfdc      	itt	le
 801b66a:	220a      	movle	r2, #10
 801b66c:	fb02 3909 	mlale	r9, r2, r9, r3
 801b670:	e7e1      	b.n	801b636 <_strtod_l+0x246>
 801b672:	2300      	movs	r3, #0
 801b674:	9307      	str	r3, [sp, #28]
 801b676:	2201      	movs	r2, #1
 801b678:	e77c      	b.n	801b574 <_strtod_l+0x184>
 801b67a:	f04f 0c00 	mov.w	ip, #0
 801b67e:	f108 0302 	add.w	r3, r8, #2
 801b682:	931d      	str	r3, [sp, #116]	; 0x74
 801b684:	f898 3002 	ldrb.w	r3, [r8, #2]
 801b688:	e785      	b.n	801b596 <_strtod_l+0x1a6>
 801b68a:	f04f 0c01 	mov.w	ip, #1
 801b68e:	e7f6      	b.n	801b67e <_strtod_l+0x28e>
 801b690:	08020a48 	.word	0x08020a48
 801b694:	080207f4 	.word	0x080207f4
 801b698:	7ff00000 	.word	0x7ff00000
 801b69c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b69e:	1c59      	adds	r1, r3, #1
 801b6a0:	911d      	str	r1, [sp, #116]	; 0x74
 801b6a2:	785b      	ldrb	r3, [r3, #1]
 801b6a4:	2b30      	cmp	r3, #48	; 0x30
 801b6a6:	d0f9      	beq.n	801b69c <_strtod_l+0x2ac>
 801b6a8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801b6ac:	2908      	cmp	r1, #8
 801b6ae:	f63f af79 	bhi.w	801b5a4 <_strtod_l+0x1b4>
 801b6b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801b6b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b6b8:	9308      	str	r3, [sp, #32]
 801b6ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b6bc:	1c59      	adds	r1, r3, #1
 801b6be:	911d      	str	r1, [sp, #116]	; 0x74
 801b6c0:	785b      	ldrb	r3, [r3, #1]
 801b6c2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801b6c6:	2e09      	cmp	r6, #9
 801b6c8:	d937      	bls.n	801b73a <_strtod_l+0x34a>
 801b6ca:	9e08      	ldr	r6, [sp, #32]
 801b6cc:	1b89      	subs	r1, r1, r6
 801b6ce:	2908      	cmp	r1, #8
 801b6d0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801b6d4:	dc02      	bgt.n	801b6dc <_strtod_l+0x2ec>
 801b6d6:	4576      	cmp	r6, lr
 801b6d8:	bfa8      	it	ge
 801b6da:	4676      	movge	r6, lr
 801b6dc:	f1bc 0f00 	cmp.w	ip, #0
 801b6e0:	d000      	beq.n	801b6e4 <_strtod_l+0x2f4>
 801b6e2:	4276      	negs	r6, r6
 801b6e4:	2d00      	cmp	r5, #0
 801b6e6:	d14f      	bne.n	801b788 <_strtod_l+0x398>
 801b6e8:	9904      	ldr	r1, [sp, #16]
 801b6ea:	4301      	orrs	r1, r0
 801b6ec:	f47f aec2 	bne.w	801b474 <_strtod_l+0x84>
 801b6f0:	2a00      	cmp	r2, #0
 801b6f2:	f47f aedb 	bne.w	801b4ac <_strtod_l+0xbc>
 801b6f6:	2b69      	cmp	r3, #105	; 0x69
 801b6f8:	d027      	beq.n	801b74a <_strtod_l+0x35a>
 801b6fa:	dc24      	bgt.n	801b746 <_strtod_l+0x356>
 801b6fc:	2b49      	cmp	r3, #73	; 0x49
 801b6fe:	d024      	beq.n	801b74a <_strtod_l+0x35a>
 801b700:	2b4e      	cmp	r3, #78	; 0x4e
 801b702:	f47f aed3 	bne.w	801b4ac <_strtod_l+0xbc>
 801b706:	499e      	ldr	r1, [pc, #632]	; (801b980 <_strtod_l+0x590>)
 801b708:	a81d      	add	r0, sp, #116	; 0x74
 801b70a:	f001 fe61 	bl	801d3d0 <__match>
 801b70e:	2800      	cmp	r0, #0
 801b710:	f43f aecc 	beq.w	801b4ac <_strtod_l+0xbc>
 801b714:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b716:	781b      	ldrb	r3, [r3, #0]
 801b718:	2b28      	cmp	r3, #40	; 0x28
 801b71a:	d12d      	bne.n	801b778 <_strtod_l+0x388>
 801b71c:	4999      	ldr	r1, [pc, #612]	; (801b984 <_strtod_l+0x594>)
 801b71e:	aa20      	add	r2, sp, #128	; 0x80
 801b720:	a81d      	add	r0, sp, #116	; 0x74
 801b722:	f001 fe69 	bl	801d3f8 <__hexnan>
 801b726:	2805      	cmp	r0, #5
 801b728:	d126      	bne.n	801b778 <_strtod_l+0x388>
 801b72a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b72c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801b730:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801b734:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801b738:	e69c      	b.n	801b474 <_strtod_l+0x84>
 801b73a:	210a      	movs	r1, #10
 801b73c:	fb01 3e0e 	mla	lr, r1, lr, r3
 801b740:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801b744:	e7b9      	b.n	801b6ba <_strtod_l+0x2ca>
 801b746:	2b6e      	cmp	r3, #110	; 0x6e
 801b748:	e7db      	b.n	801b702 <_strtod_l+0x312>
 801b74a:	498f      	ldr	r1, [pc, #572]	; (801b988 <_strtod_l+0x598>)
 801b74c:	a81d      	add	r0, sp, #116	; 0x74
 801b74e:	f001 fe3f 	bl	801d3d0 <__match>
 801b752:	2800      	cmp	r0, #0
 801b754:	f43f aeaa 	beq.w	801b4ac <_strtod_l+0xbc>
 801b758:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b75a:	498c      	ldr	r1, [pc, #560]	; (801b98c <_strtod_l+0x59c>)
 801b75c:	3b01      	subs	r3, #1
 801b75e:	a81d      	add	r0, sp, #116	; 0x74
 801b760:	931d      	str	r3, [sp, #116]	; 0x74
 801b762:	f001 fe35 	bl	801d3d0 <__match>
 801b766:	b910      	cbnz	r0, 801b76e <_strtod_l+0x37e>
 801b768:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b76a:	3301      	adds	r3, #1
 801b76c:	931d      	str	r3, [sp, #116]	; 0x74
 801b76e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801b99c <_strtod_l+0x5ac>
 801b772:	f04f 0a00 	mov.w	sl, #0
 801b776:	e67d      	b.n	801b474 <_strtod_l+0x84>
 801b778:	4885      	ldr	r0, [pc, #532]	; (801b990 <_strtod_l+0x5a0>)
 801b77a:	f002 fd6d 	bl	801e258 <nan>
 801b77e:	ed8d 0b04 	vstr	d0, [sp, #16]
 801b782:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801b786:	e675      	b.n	801b474 <_strtod_l+0x84>
 801b788:	9b07      	ldr	r3, [sp, #28]
 801b78a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b78c:	1af3      	subs	r3, r6, r3
 801b78e:	2f00      	cmp	r7, #0
 801b790:	bf08      	it	eq
 801b792:	462f      	moveq	r7, r5
 801b794:	2d10      	cmp	r5, #16
 801b796:	9308      	str	r3, [sp, #32]
 801b798:	46a8      	mov	r8, r5
 801b79a:	bfa8      	it	ge
 801b79c:	f04f 0810 	movge.w	r8, #16
 801b7a0:	f7e4 feb0 	bl	8000504 <__aeabi_ui2d>
 801b7a4:	2d09      	cmp	r5, #9
 801b7a6:	4682      	mov	sl, r0
 801b7a8:	468b      	mov	fp, r1
 801b7aa:	dd13      	ble.n	801b7d4 <_strtod_l+0x3e4>
 801b7ac:	4b79      	ldr	r3, [pc, #484]	; (801b994 <_strtod_l+0x5a4>)
 801b7ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801b7b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801b7b6:	f7e4 ff1f 	bl	80005f8 <__aeabi_dmul>
 801b7ba:	4682      	mov	sl, r0
 801b7bc:	4648      	mov	r0, r9
 801b7be:	468b      	mov	fp, r1
 801b7c0:	f7e4 fea0 	bl	8000504 <__aeabi_ui2d>
 801b7c4:	4602      	mov	r2, r0
 801b7c6:	460b      	mov	r3, r1
 801b7c8:	4650      	mov	r0, sl
 801b7ca:	4659      	mov	r1, fp
 801b7cc:	f7e4 fd5e 	bl	800028c <__adddf3>
 801b7d0:	4682      	mov	sl, r0
 801b7d2:	468b      	mov	fp, r1
 801b7d4:	2d0f      	cmp	r5, #15
 801b7d6:	dc38      	bgt.n	801b84a <_strtod_l+0x45a>
 801b7d8:	9b08      	ldr	r3, [sp, #32]
 801b7da:	2b00      	cmp	r3, #0
 801b7dc:	f43f ae4a 	beq.w	801b474 <_strtod_l+0x84>
 801b7e0:	dd24      	ble.n	801b82c <_strtod_l+0x43c>
 801b7e2:	2b16      	cmp	r3, #22
 801b7e4:	dc0b      	bgt.n	801b7fe <_strtod_l+0x40e>
 801b7e6:	4d6b      	ldr	r5, [pc, #428]	; (801b994 <_strtod_l+0x5a4>)
 801b7e8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801b7ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 801b7f0:	4652      	mov	r2, sl
 801b7f2:	465b      	mov	r3, fp
 801b7f4:	f7e4 ff00 	bl	80005f8 <__aeabi_dmul>
 801b7f8:	4682      	mov	sl, r0
 801b7fa:	468b      	mov	fp, r1
 801b7fc:	e63a      	b.n	801b474 <_strtod_l+0x84>
 801b7fe:	9a08      	ldr	r2, [sp, #32]
 801b800:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801b804:	4293      	cmp	r3, r2
 801b806:	db20      	blt.n	801b84a <_strtod_l+0x45a>
 801b808:	4c62      	ldr	r4, [pc, #392]	; (801b994 <_strtod_l+0x5a4>)
 801b80a:	f1c5 050f 	rsb	r5, r5, #15
 801b80e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801b812:	4652      	mov	r2, sl
 801b814:	465b      	mov	r3, fp
 801b816:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b81a:	f7e4 feed 	bl	80005f8 <__aeabi_dmul>
 801b81e:	9b08      	ldr	r3, [sp, #32]
 801b820:	1b5d      	subs	r5, r3, r5
 801b822:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801b826:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b82a:	e7e3      	b.n	801b7f4 <_strtod_l+0x404>
 801b82c:	9b08      	ldr	r3, [sp, #32]
 801b82e:	3316      	adds	r3, #22
 801b830:	db0b      	blt.n	801b84a <_strtod_l+0x45a>
 801b832:	9b07      	ldr	r3, [sp, #28]
 801b834:	4a57      	ldr	r2, [pc, #348]	; (801b994 <_strtod_l+0x5a4>)
 801b836:	1b9e      	subs	r6, r3, r6
 801b838:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801b83c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b840:	4650      	mov	r0, sl
 801b842:	4659      	mov	r1, fp
 801b844:	f7e5 f802 	bl	800084c <__aeabi_ddiv>
 801b848:	e7d6      	b.n	801b7f8 <_strtod_l+0x408>
 801b84a:	9b08      	ldr	r3, [sp, #32]
 801b84c:	eba5 0808 	sub.w	r8, r5, r8
 801b850:	4498      	add	r8, r3
 801b852:	f1b8 0f00 	cmp.w	r8, #0
 801b856:	dd71      	ble.n	801b93c <_strtod_l+0x54c>
 801b858:	f018 030f 	ands.w	r3, r8, #15
 801b85c:	d00a      	beq.n	801b874 <_strtod_l+0x484>
 801b85e:	494d      	ldr	r1, [pc, #308]	; (801b994 <_strtod_l+0x5a4>)
 801b860:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801b864:	4652      	mov	r2, sl
 801b866:	465b      	mov	r3, fp
 801b868:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b86c:	f7e4 fec4 	bl	80005f8 <__aeabi_dmul>
 801b870:	4682      	mov	sl, r0
 801b872:	468b      	mov	fp, r1
 801b874:	f038 080f 	bics.w	r8, r8, #15
 801b878:	d04d      	beq.n	801b916 <_strtod_l+0x526>
 801b87a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801b87e:	dd22      	ble.n	801b8c6 <_strtod_l+0x4d6>
 801b880:	2500      	movs	r5, #0
 801b882:	462e      	mov	r6, r5
 801b884:	9509      	str	r5, [sp, #36]	; 0x24
 801b886:	9507      	str	r5, [sp, #28]
 801b888:	2322      	movs	r3, #34	; 0x22
 801b88a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801b99c <_strtod_l+0x5ac>
 801b88e:	6023      	str	r3, [r4, #0]
 801b890:	f04f 0a00 	mov.w	sl, #0
 801b894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b896:	2b00      	cmp	r3, #0
 801b898:	f43f adec 	beq.w	801b474 <_strtod_l+0x84>
 801b89c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b89e:	4620      	mov	r0, r4
 801b8a0:	f001 feba 	bl	801d618 <_Bfree>
 801b8a4:	9907      	ldr	r1, [sp, #28]
 801b8a6:	4620      	mov	r0, r4
 801b8a8:	f001 feb6 	bl	801d618 <_Bfree>
 801b8ac:	4631      	mov	r1, r6
 801b8ae:	4620      	mov	r0, r4
 801b8b0:	f001 feb2 	bl	801d618 <_Bfree>
 801b8b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b8b6:	4620      	mov	r0, r4
 801b8b8:	f001 feae 	bl	801d618 <_Bfree>
 801b8bc:	4629      	mov	r1, r5
 801b8be:	4620      	mov	r0, r4
 801b8c0:	f001 feaa 	bl	801d618 <_Bfree>
 801b8c4:	e5d6      	b.n	801b474 <_strtod_l+0x84>
 801b8c6:	2300      	movs	r3, #0
 801b8c8:	ea4f 1828 	mov.w	r8, r8, asr #4
 801b8cc:	4650      	mov	r0, sl
 801b8ce:	4659      	mov	r1, fp
 801b8d0:	4699      	mov	r9, r3
 801b8d2:	f1b8 0f01 	cmp.w	r8, #1
 801b8d6:	dc21      	bgt.n	801b91c <_strtod_l+0x52c>
 801b8d8:	b10b      	cbz	r3, 801b8de <_strtod_l+0x4ee>
 801b8da:	4682      	mov	sl, r0
 801b8dc:	468b      	mov	fp, r1
 801b8de:	4b2e      	ldr	r3, [pc, #184]	; (801b998 <_strtod_l+0x5a8>)
 801b8e0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801b8e4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801b8e8:	4652      	mov	r2, sl
 801b8ea:	465b      	mov	r3, fp
 801b8ec:	e9d9 0100 	ldrd	r0, r1, [r9]
 801b8f0:	f7e4 fe82 	bl	80005f8 <__aeabi_dmul>
 801b8f4:	4b29      	ldr	r3, [pc, #164]	; (801b99c <_strtod_l+0x5ac>)
 801b8f6:	460a      	mov	r2, r1
 801b8f8:	400b      	ands	r3, r1
 801b8fa:	4929      	ldr	r1, [pc, #164]	; (801b9a0 <_strtod_l+0x5b0>)
 801b8fc:	428b      	cmp	r3, r1
 801b8fe:	4682      	mov	sl, r0
 801b900:	d8be      	bhi.n	801b880 <_strtod_l+0x490>
 801b902:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801b906:	428b      	cmp	r3, r1
 801b908:	bf86      	itte	hi
 801b90a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801b9a4 <_strtod_l+0x5b4>
 801b90e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801b912:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801b916:	2300      	movs	r3, #0
 801b918:	9304      	str	r3, [sp, #16]
 801b91a:	e081      	b.n	801ba20 <_strtod_l+0x630>
 801b91c:	f018 0f01 	tst.w	r8, #1
 801b920:	d007      	beq.n	801b932 <_strtod_l+0x542>
 801b922:	4b1d      	ldr	r3, [pc, #116]	; (801b998 <_strtod_l+0x5a8>)
 801b924:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801b928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b92c:	f7e4 fe64 	bl	80005f8 <__aeabi_dmul>
 801b930:	2301      	movs	r3, #1
 801b932:	f109 0901 	add.w	r9, r9, #1
 801b936:	ea4f 0868 	mov.w	r8, r8, asr #1
 801b93a:	e7ca      	b.n	801b8d2 <_strtod_l+0x4e2>
 801b93c:	d0eb      	beq.n	801b916 <_strtod_l+0x526>
 801b93e:	f1c8 0800 	rsb	r8, r8, #0
 801b942:	f018 020f 	ands.w	r2, r8, #15
 801b946:	d00a      	beq.n	801b95e <_strtod_l+0x56e>
 801b948:	4b12      	ldr	r3, [pc, #72]	; (801b994 <_strtod_l+0x5a4>)
 801b94a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b94e:	4650      	mov	r0, sl
 801b950:	4659      	mov	r1, fp
 801b952:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b956:	f7e4 ff79 	bl	800084c <__aeabi_ddiv>
 801b95a:	4682      	mov	sl, r0
 801b95c:	468b      	mov	fp, r1
 801b95e:	ea5f 1828 	movs.w	r8, r8, asr #4
 801b962:	d0d8      	beq.n	801b916 <_strtod_l+0x526>
 801b964:	f1b8 0f1f 	cmp.w	r8, #31
 801b968:	dd1e      	ble.n	801b9a8 <_strtod_l+0x5b8>
 801b96a:	2500      	movs	r5, #0
 801b96c:	462e      	mov	r6, r5
 801b96e:	9509      	str	r5, [sp, #36]	; 0x24
 801b970:	9507      	str	r5, [sp, #28]
 801b972:	2322      	movs	r3, #34	; 0x22
 801b974:	f04f 0a00 	mov.w	sl, #0
 801b978:	f04f 0b00 	mov.w	fp, #0
 801b97c:	6023      	str	r3, [r4, #0]
 801b97e:	e789      	b.n	801b894 <_strtod_l+0x4a4>
 801b980:	080207c5 	.word	0x080207c5
 801b984:	08020808 	.word	0x08020808
 801b988:	080207bd 	.word	0x080207bd
 801b98c:	0802094c 	.word	0x0802094c
 801b990:	08020c08 	.word	0x08020c08
 801b994:	08020ae8 	.word	0x08020ae8
 801b998:	08020ac0 	.word	0x08020ac0
 801b99c:	7ff00000 	.word	0x7ff00000
 801b9a0:	7ca00000 	.word	0x7ca00000
 801b9a4:	7fefffff 	.word	0x7fefffff
 801b9a8:	f018 0310 	ands.w	r3, r8, #16
 801b9ac:	bf18      	it	ne
 801b9ae:	236a      	movne	r3, #106	; 0x6a
 801b9b0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801bd68 <_strtod_l+0x978>
 801b9b4:	9304      	str	r3, [sp, #16]
 801b9b6:	4650      	mov	r0, sl
 801b9b8:	4659      	mov	r1, fp
 801b9ba:	2300      	movs	r3, #0
 801b9bc:	f018 0f01 	tst.w	r8, #1
 801b9c0:	d004      	beq.n	801b9cc <_strtod_l+0x5dc>
 801b9c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 801b9c6:	f7e4 fe17 	bl	80005f8 <__aeabi_dmul>
 801b9ca:	2301      	movs	r3, #1
 801b9cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 801b9d0:	f109 0908 	add.w	r9, r9, #8
 801b9d4:	d1f2      	bne.n	801b9bc <_strtod_l+0x5cc>
 801b9d6:	b10b      	cbz	r3, 801b9dc <_strtod_l+0x5ec>
 801b9d8:	4682      	mov	sl, r0
 801b9da:	468b      	mov	fp, r1
 801b9dc:	9b04      	ldr	r3, [sp, #16]
 801b9de:	b1bb      	cbz	r3, 801ba10 <_strtod_l+0x620>
 801b9e0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801b9e4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	4659      	mov	r1, fp
 801b9ec:	dd10      	ble.n	801ba10 <_strtod_l+0x620>
 801b9ee:	2b1f      	cmp	r3, #31
 801b9f0:	f340 8128 	ble.w	801bc44 <_strtod_l+0x854>
 801b9f4:	2b34      	cmp	r3, #52	; 0x34
 801b9f6:	bfde      	ittt	le
 801b9f8:	3b20      	suble	r3, #32
 801b9fa:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 801b9fe:	fa02 f303 	lslle.w	r3, r2, r3
 801ba02:	f04f 0a00 	mov.w	sl, #0
 801ba06:	bfcc      	ite	gt
 801ba08:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801ba0c:	ea03 0b01 	andle.w	fp, r3, r1
 801ba10:	2200      	movs	r2, #0
 801ba12:	2300      	movs	r3, #0
 801ba14:	4650      	mov	r0, sl
 801ba16:	4659      	mov	r1, fp
 801ba18:	f7e5 f856 	bl	8000ac8 <__aeabi_dcmpeq>
 801ba1c:	2800      	cmp	r0, #0
 801ba1e:	d1a4      	bne.n	801b96a <_strtod_l+0x57a>
 801ba20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba22:	9300      	str	r3, [sp, #0]
 801ba24:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ba26:	462b      	mov	r3, r5
 801ba28:	463a      	mov	r2, r7
 801ba2a:	4620      	mov	r0, r4
 801ba2c:	f001 fe60 	bl	801d6f0 <__s2b>
 801ba30:	9009      	str	r0, [sp, #36]	; 0x24
 801ba32:	2800      	cmp	r0, #0
 801ba34:	f43f af24 	beq.w	801b880 <_strtod_l+0x490>
 801ba38:	9b07      	ldr	r3, [sp, #28]
 801ba3a:	1b9e      	subs	r6, r3, r6
 801ba3c:	9b08      	ldr	r3, [sp, #32]
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	bfb4      	ite	lt
 801ba42:	4633      	movlt	r3, r6
 801ba44:	2300      	movge	r3, #0
 801ba46:	9310      	str	r3, [sp, #64]	; 0x40
 801ba48:	9b08      	ldr	r3, [sp, #32]
 801ba4a:	2500      	movs	r5, #0
 801ba4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ba50:	9318      	str	r3, [sp, #96]	; 0x60
 801ba52:	462e      	mov	r6, r5
 801ba54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba56:	4620      	mov	r0, r4
 801ba58:	6859      	ldr	r1, [r3, #4]
 801ba5a:	f001 fd9d 	bl	801d598 <_Balloc>
 801ba5e:	9007      	str	r0, [sp, #28]
 801ba60:	2800      	cmp	r0, #0
 801ba62:	f43f af11 	beq.w	801b888 <_strtod_l+0x498>
 801ba66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba68:	691a      	ldr	r2, [r3, #16]
 801ba6a:	3202      	adds	r2, #2
 801ba6c:	f103 010c 	add.w	r1, r3, #12
 801ba70:	0092      	lsls	r2, r2, #2
 801ba72:	300c      	adds	r0, #12
 801ba74:	f7fe fc3c 	bl	801a2f0 <memcpy>
 801ba78:	ec4b ab10 	vmov	d0, sl, fp
 801ba7c:	aa20      	add	r2, sp, #128	; 0x80
 801ba7e:	a91f      	add	r1, sp, #124	; 0x7c
 801ba80:	4620      	mov	r0, r4
 801ba82:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801ba86:	f002 f96f 	bl	801dd68 <__d2b>
 801ba8a:	901e      	str	r0, [sp, #120]	; 0x78
 801ba8c:	2800      	cmp	r0, #0
 801ba8e:	f43f aefb 	beq.w	801b888 <_strtod_l+0x498>
 801ba92:	2101      	movs	r1, #1
 801ba94:	4620      	mov	r0, r4
 801ba96:	f001 fec5 	bl	801d824 <__i2b>
 801ba9a:	4606      	mov	r6, r0
 801ba9c:	2800      	cmp	r0, #0
 801ba9e:	f43f aef3 	beq.w	801b888 <_strtod_l+0x498>
 801baa2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801baa4:	9904      	ldr	r1, [sp, #16]
 801baa6:	2b00      	cmp	r3, #0
 801baa8:	bfab      	itete	ge
 801baaa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801baac:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801baae:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801bab0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801bab4:	bfac      	ite	ge
 801bab6:	eb03 0902 	addge.w	r9, r3, r2
 801baba:	1ad7      	sublt	r7, r2, r3
 801babc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801babe:	eba3 0801 	sub.w	r8, r3, r1
 801bac2:	4490      	add	r8, r2
 801bac4:	4ba3      	ldr	r3, [pc, #652]	; (801bd54 <_strtod_l+0x964>)
 801bac6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801baca:	4598      	cmp	r8, r3
 801bacc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801bad0:	f280 80cc 	bge.w	801bc6c <_strtod_l+0x87c>
 801bad4:	eba3 0308 	sub.w	r3, r3, r8
 801bad8:	2b1f      	cmp	r3, #31
 801bada:	eba2 0203 	sub.w	r2, r2, r3
 801bade:	f04f 0101 	mov.w	r1, #1
 801bae2:	f300 80b6 	bgt.w	801bc52 <_strtod_l+0x862>
 801bae6:	fa01 f303 	lsl.w	r3, r1, r3
 801baea:	9311      	str	r3, [sp, #68]	; 0x44
 801baec:	2300      	movs	r3, #0
 801baee:	930c      	str	r3, [sp, #48]	; 0x30
 801baf0:	eb09 0802 	add.w	r8, r9, r2
 801baf4:	9b04      	ldr	r3, [sp, #16]
 801baf6:	45c1      	cmp	r9, r8
 801baf8:	4417      	add	r7, r2
 801bafa:	441f      	add	r7, r3
 801bafc:	464b      	mov	r3, r9
 801bafe:	bfa8      	it	ge
 801bb00:	4643      	movge	r3, r8
 801bb02:	42bb      	cmp	r3, r7
 801bb04:	bfa8      	it	ge
 801bb06:	463b      	movge	r3, r7
 801bb08:	2b00      	cmp	r3, #0
 801bb0a:	bfc2      	ittt	gt
 801bb0c:	eba8 0803 	subgt.w	r8, r8, r3
 801bb10:	1aff      	subgt	r7, r7, r3
 801bb12:	eba9 0903 	subgt.w	r9, r9, r3
 801bb16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bb18:	2b00      	cmp	r3, #0
 801bb1a:	dd17      	ble.n	801bb4c <_strtod_l+0x75c>
 801bb1c:	4631      	mov	r1, r6
 801bb1e:	461a      	mov	r2, r3
 801bb20:	4620      	mov	r0, r4
 801bb22:	f001 ff3b 	bl	801d99c <__pow5mult>
 801bb26:	4606      	mov	r6, r0
 801bb28:	2800      	cmp	r0, #0
 801bb2a:	f43f aead 	beq.w	801b888 <_strtod_l+0x498>
 801bb2e:	4601      	mov	r1, r0
 801bb30:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801bb32:	4620      	mov	r0, r4
 801bb34:	f001 fe8c 	bl	801d850 <__multiply>
 801bb38:	900f      	str	r0, [sp, #60]	; 0x3c
 801bb3a:	2800      	cmp	r0, #0
 801bb3c:	f43f aea4 	beq.w	801b888 <_strtod_l+0x498>
 801bb40:	991e      	ldr	r1, [sp, #120]	; 0x78
 801bb42:	4620      	mov	r0, r4
 801bb44:	f001 fd68 	bl	801d618 <_Bfree>
 801bb48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bb4a:	931e      	str	r3, [sp, #120]	; 0x78
 801bb4c:	f1b8 0f00 	cmp.w	r8, #0
 801bb50:	f300 8091 	bgt.w	801bc76 <_strtod_l+0x886>
 801bb54:	9b08      	ldr	r3, [sp, #32]
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	dd08      	ble.n	801bb6c <_strtod_l+0x77c>
 801bb5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801bb5c:	9907      	ldr	r1, [sp, #28]
 801bb5e:	4620      	mov	r0, r4
 801bb60:	f001 ff1c 	bl	801d99c <__pow5mult>
 801bb64:	9007      	str	r0, [sp, #28]
 801bb66:	2800      	cmp	r0, #0
 801bb68:	f43f ae8e 	beq.w	801b888 <_strtod_l+0x498>
 801bb6c:	2f00      	cmp	r7, #0
 801bb6e:	dd08      	ble.n	801bb82 <_strtod_l+0x792>
 801bb70:	9907      	ldr	r1, [sp, #28]
 801bb72:	463a      	mov	r2, r7
 801bb74:	4620      	mov	r0, r4
 801bb76:	f001 ff6b 	bl	801da50 <__lshift>
 801bb7a:	9007      	str	r0, [sp, #28]
 801bb7c:	2800      	cmp	r0, #0
 801bb7e:	f43f ae83 	beq.w	801b888 <_strtod_l+0x498>
 801bb82:	f1b9 0f00 	cmp.w	r9, #0
 801bb86:	dd08      	ble.n	801bb9a <_strtod_l+0x7aa>
 801bb88:	4631      	mov	r1, r6
 801bb8a:	464a      	mov	r2, r9
 801bb8c:	4620      	mov	r0, r4
 801bb8e:	f001 ff5f 	bl	801da50 <__lshift>
 801bb92:	4606      	mov	r6, r0
 801bb94:	2800      	cmp	r0, #0
 801bb96:	f43f ae77 	beq.w	801b888 <_strtod_l+0x498>
 801bb9a:	9a07      	ldr	r2, [sp, #28]
 801bb9c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801bb9e:	4620      	mov	r0, r4
 801bba0:	f001 ffde 	bl	801db60 <__mdiff>
 801bba4:	4605      	mov	r5, r0
 801bba6:	2800      	cmp	r0, #0
 801bba8:	f43f ae6e 	beq.w	801b888 <_strtod_l+0x498>
 801bbac:	68c3      	ldr	r3, [r0, #12]
 801bbae:	930f      	str	r3, [sp, #60]	; 0x3c
 801bbb0:	2300      	movs	r3, #0
 801bbb2:	60c3      	str	r3, [r0, #12]
 801bbb4:	4631      	mov	r1, r6
 801bbb6:	f001 ffb7 	bl	801db28 <__mcmp>
 801bbba:	2800      	cmp	r0, #0
 801bbbc:	da65      	bge.n	801bc8a <_strtod_l+0x89a>
 801bbbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bbc0:	ea53 030a 	orrs.w	r3, r3, sl
 801bbc4:	f040 8087 	bne.w	801bcd6 <_strtod_l+0x8e6>
 801bbc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bbcc:	2b00      	cmp	r3, #0
 801bbce:	f040 8082 	bne.w	801bcd6 <_strtod_l+0x8e6>
 801bbd2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bbd6:	0d1b      	lsrs	r3, r3, #20
 801bbd8:	051b      	lsls	r3, r3, #20
 801bbda:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801bbde:	d97a      	bls.n	801bcd6 <_strtod_l+0x8e6>
 801bbe0:	696b      	ldr	r3, [r5, #20]
 801bbe2:	b913      	cbnz	r3, 801bbea <_strtod_l+0x7fa>
 801bbe4:	692b      	ldr	r3, [r5, #16]
 801bbe6:	2b01      	cmp	r3, #1
 801bbe8:	dd75      	ble.n	801bcd6 <_strtod_l+0x8e6>
 801bbea:	4629      	mov	r1, r5
 801bbec:	2201      	movs	r2, #1
 801bbee:	4620      	mov	r0, r4
 801bbf0:	f001 ff2e 	bl	801da50 <__lshift>
 801bbf4:	4631      	mov	r1, r6
 801bbf6:	4605      	mov	r5, r0
 801bbf8:	f001 ff96 	bl	801db28 <__mcmp>
 801bbfc:	2800      	cmp	r0, #0
 801bbfe:	dd6a      	ble.n	801bcd6 <_strtod_l+0x8e6>
 801bc00:	9904      	ldr	r1, [sp, #16]
 801bc02:	4a55      	ldr	r2, [pc, #340]	; (801bd58 <_strtod_l+0x968>)
 801bc04:	465b      	mov	r3, fp
 801bc06:	2900      	cmp	r1, #0
 801bc08:	f000 8085 	beq.w	801bd16 <_strtod_l+0x926>
 801bc0c:	ea02 010b 	and.w	r1, r2, fp
 801bc10:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801bc14:	dc7f      	bgt.n	801bd16 <_strtod_l+0x926>
 801bc16:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801bc1a:	f77f aeaa 	ble.w	801b972 <_strtod_l+0x582>
 801bc1e:	4a4f      	ldr	r2, [pc, #316]	; (801bd5c <_strtod_l+0x96c>)
 801bc20:	2300      	movs	r3, #0
 801bc22:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801bc26:	4650      	mov	r0, sl
 801bc28:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801bc2c:	4659      	mov	r1, fp
 801bc2e:	f7e4 fce3 	bl	80005f8 <__aeabi_dmul>
 801bc32:	460b      	mov	r3, r1
 801bc34:	4303      	orrs	r3, r0
 801bc36:	bf08      	it	eq
 801bc38:	2322      	moveq	r3, #34	; 0x22
 801bc3a:	4682      	mov	sl, r0
 801bc3c:	468b      	mov	fp, r1
 801bc3e:	bf08      	it	eq
 801bc40:	6023      	streq	r3, [r4, #0]
 801bc42:	e62b      	b.n	801b89c <_strtod_l+0x4ac>
 801bc44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bc48:	fa02 f303 	lsl.w	r3, r2, r3
 801bc4c:	ea03 0a0a 	and.w	sl, r3, sl
 801bc50:	e6de      	b.n	801ba10 <_strtod_l+0x620>
 801bc52:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801bc56:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801bc5a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801bc5e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801bc62:	fa01 f308 	lsl.w	r3, r1, r8
 801bc66:	930c      	str	r3, [sp, #48]	; 0x30
 801bc68:	9111      	str	r1, [sp, #68]	; 0x44
 801bc6a:	e741      	b.n	801baf0 <_strtod_l+0x700>
 801bc6c:	2300      	movs	r3, #0
 801bc6e:	930c      	str	r3, [sp, #48]	; 0x30
 801bc70:	2301      	movs	r3, #1
 801bc72:	9311      	str	r3, [sp, #68]	; 0x44
 801bc74:	e73c      	b.n	801baf0 <_strtod_l+0x700>
 801bc76:	991e      	ldr	r1, [sp, #120]	; 0x78
 801bc78:	4642      	mov	r2, r8
 801bc7a:	4620      	mov	r0, r4
 801bc7c:	f001 fee8 	bl	801da50 <__lshift>
 801bc80:	901e      	str	r0, [sp, #120]	; 0x78
 801bc82:	2800      	cmp	r0, #0
 801bc84:	f47f af66 	bne.w	801bb54 <_strtod_l+0x764>
 801bc88:	e5fe      	b.n	801b888 <_strtod_l+0x498>
 801bc8a:	465f      	mov	r7, fp
 801bc8c:	d16e      	bne.n	801bd6c <_strtod_l+0x97c>
 801bc8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bc90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bc94:	b342      	cbz	r2, 801bce8 <_strtod_l+0x8f8>
 801bc96:	4a32      	ldr	r2, [pc, #200]	; (801bd60 <_strtod_l+0x970>)
 801bc98:	4293      	cmp	r3, r2
 801bc9a:	d128      	bne.n	801bcee <_strtod_l+0x8fe>
 801bc9c:	9b04      	ldr	r3, [sp, #16]
 801bc9e:	4650      	mov	r0, sl
 801bca0:	b1eb      	cbz	r3, 801bcde <_strtod_l+0x8ee>
 801bca2:	4a2d      	ldr	r2, [pc, #180]	; (801bd58 <_strtod_l+0x968>)
 801bca4:	403a      	ands	r2, r7
 801bca6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801bcaa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801bcae:	d819      	bhi.n	801bce4 <_strtod_l+0x8f4>
 801bcb0:	0d12      	lsrs	r2, r2, #20
 801bcb2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801bcb6:	fa01 f303 	lsl.w	r3, r1, r3
 801bcba:	4298      	cmp	r0, r3
 801bcbc:	d117      	bne.n	801bcee <_strtod_l+0x8fe>
 801bcbe:	4b29      	ldr	r3, [pc, #164]	; (801bd64 <_strtod_l+0x974>)
 801bcc0:	429f      	cmp	r7, r3
 801bcc2:	d102      	bne.n	801bcca <_strtod_l+0x8da>
 801bcc4:	3001      	adds	r0, #1
 801bcc6:	f43f addf 	beq.w	801b888 <_strtod_l+0x498>
 801bcca:	4b23      	ldr	r3, [pc, #140]	; (801bd58 <_strtod_l+0x968>)
 801bccc:	403b      	ands	r3, r7
 801bcce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801bcd2:	f04f 0a00 	mov.w	sl, #0
 801bcd6:	9b04      	ldr	r3, [sp, #16]
 801bcd8:	2b00      	cmp	r3, #0
 801bcda:	d1a0      	bne.n	801bc1e <_strtod_l+0x82e>
 801bcdc:	e5de      	b.n	801b89c <_strtod_l+0x4ac>
 801bcde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bce2:	e7ea      	b.n	801bcba <_strtod_l+0x8ca>
 801bce4:	460b      	mov	r3, r1
 801bce6:	e7e8      	b.n	801bcba <_strtod_l+0x8ca>
 801bce8:	ea53 030a 	orrs.w	r3, r3, sl
 801bcec:	d088      	beq.n	801bc00 <_strtod_l+0x810>
 801bcee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bcf0:	b1db      	cbz	r3, 801bd2a <_strtod_l+0x93a>
 801bcf2:	423b      	tst	r3, r7
 801bcf4:	d0ef      	beq.n	801bcd6 <_strtod_l+0x8e6>
 801bcf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bcf8:	9a04      	ldr	r2, [sp, #16]
 801bcfa:	4650      	mov	r0, sl
 801bcfc:	4659      	mov	r1, fp
 801bcfe:	b1c3      	cbz	r3, 801bd32 <_strtod_l+0x942>
 801bd00:	f7ff fb58 	bl	801b3b4 <sulp>
 801bd04:	4602      	mov	r2, r0
 801bd06:	460b      	mov	r3, r1
 801bd08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bd0c:	f7e4 fabe 	bl	800028c <__adddf3>
 801bd10:	4682      	mov	sl, r0
 801bd12:	468b      	mov	fp, r1
 801bd14:	e7df      	b.n	801bcd6 <_strtod_l+0x8e6>
 801bd16:	4013      	ands	r3, r2
 801bd18:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801bd1c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801bd20:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801bd24:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801bd28:	e7d5      	b.n	801bcd6 <_strtod_l+0x8e6>
 801bd2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bd2c:	ea13 0f0a 	tst.w	r3, sl
 801bd30:	e7e0      	b.n	801bcf4 <_strtod_l+0x904>
 801bd32:	f7ff fb3f 	bl	801b3b4 <sulp>
 801bd36:	4602      	mov	r2, r0
 801bd38:	460b      	mov	r3, r1
 801bd3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bd3e:	f7e4 faa3 	bl	8000288 <__aeabi_dsub>
 801bd42:	2200      	movs	r2, #0
 801bd44:	2300      	movs	r3, #0
 801bd46:	4682      	mov	sl, r0
 801bd48:	468b      	mov	fp, r1
 801bd4a:	f7e4 febd 	bl	8000ac8 <__aeabi_dcmpeq>
 801bd4e:	2800      	cmp	r0, #0
 801bd50:	d0c1      	beq.n	801bcd6 <_strtod_l+0x8e6>
 801bd52:	e60e      	b.n	801b972 <_strtod_l+0x582>
 801bd54:	fffffc02 	.word	0xfffffc02
 801bd58:	7ff00000 	.word	0x7ff00000
 801bd5c:	39500000 	.word	0x39500000
 801bd60:	000fffff 	.word	0x000fffff
 801bd64:	7fefffff 	.word	0x7fefffff
 801bd68:	08020820 	.word	0x08020820
 801bd6c:	4631      	mov	r1, r6
 801bd6e:	4628      	mov	r0, r5
 801bd70:	f002 f856 	bl	801de20 <__ratio>
 801bd74:	ec59 8b10 	vmov	r8, r9, d0
 801bd78:	ee10 0a10 	vmov	r0, s0
 801bd7c:	2200      	movs	r2, #0
 801bd7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801bd82:	4649      	mov	r1, r9
 801bd84:	f7e4 feb4 	bl	8000af0 <__aeabi_dcmple>
 801bd88:	2800      	cmp	r0, #0
 801bd8a:	d07c      	beq.n	801be86 <_strtod_l+0xa96>
 801bd8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bd8e:	2b00      	cmp	r3, #0
 801bd90:	d04c      	beq.n	801be2c <_strtod_l+0xa3c>
 801bd92:	4b95      	ldr	r3, [pc, #596]	; (801bfe8 <_strtod_l+0xbf8>)
 801bd94:	2200      	movs	r2, #0
 801bd96:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801bd9a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801bfe8 <_strtod_l+0xbf8>
 801bd9e:	f04f 0800 	mov.w	r8, #0
 801bda2:	4b92      	ldr	r3, [pc, #584]	; (801bfec <_strtod_l+0xbfc>)
 801bda4:	403b      	ands	r3, r7
 801bda6:	9311      	str	r3, [sp, #68]	; 0x44
 801bda8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bdaa:	4b91      	ldr	r3, [pc, #580]	; (801bff0 <_strtod_l+0xc00>)
 801bdac:	429a      	cmp	r2, r3
 801bdae:	f040 80b2 	bne.w	801bf16 <_strtod_l+0xb26>
 801bdb2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bdb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801bdba:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801bdbe:	ec4b ab10 	vmov	d0, sl, fp
 801bdc2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801bdc6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801bdca:	f001 ff51 	bl	801dc70 <__ulp>
 801bdce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801bdd2:	ec53 2b10 	vmov	r2, r3, d0
 801bdd6:	f7e4 fc0f 	bl	80005f8 <__aeabi_dmul>
 801bdda:	4652      	mov	r2, sl
 801bddc:	465b      	mov	r3, fp
 801bdde:	f7e4 fa55 	bl	800028c <__adddf3>
 801bde2:	460b      	mov	r3, r1
 801bde4:	4981      	ldr	r1, [pc, #516]	; (801bfec <_strtod_l+0xbfc>)
 801bde6:	4a83      	ldr	r2, [pc, #524]	; (801bff4 <_strtod_l+0xc04>)
 801bde8:	4019      	ands	r1, r3
 801bdea:	4291      	cmp	r1, r2
 801bdec:	4682      	mov	sl, r0
 801bdee:	d95e      	bls.n	801beae <_strtod_l+0xabe>
 801bdf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bdf2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801bdf6:	4293      	cmp	r3, r2
 801bdf8:	d103      	bne.n	801be02 <_strtod_l+0xa12>
 801bdfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bdfc:	3301      	adds	r3, #1
 801bdfe:	f43f ad43 	beq.w	801b888 <_strtod_l+0x498>
 801be02:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801c000 <_strtod_l+0xc10>
 801be06:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801be0a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801be0c:	4620      	mov	r0, r4
 801be0e:	f001 fc03 	bl	801d618 <_Bfree>
 801be12:	9907      	ldr	r1, [sp, #28]
 801be14:	4620      	mov	r0, r4
 801be16:	f001 fbff 	bl	801d618 <_Bfree>
 801be1a:	4631      	mov	r1, r6
 801be1c:	4620      	mov	r0, r4
 801be1e:	f001 fbfb 	bl	801d618 <_Bfree>
 801be22:	4629      	mov	r1, r5
 801be24:	4620      	mov	r0, r4
 801be26:	f001 fbf7 	bl	801d618 <_Bfree>
 801be2a:	e613      	b.n	801ba54 <_strtod_l+0x664>
 801be2c:	f1ba 0f00 	cmp.w	sl, #0
 801be30:	d11b      	bne.n	801be6a <_strtod_l+0xa7a>
 801be32:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801be36:	b9f3      	cbnz	r3, 801be76 <_strtod_l+0xa86>
 801be38:	4b6b      	ldr	r3, [pc, #428]	; (801bfe8 <_strtod_l+0xbf8>)
 801be3a:	2200      	movs	r2, #0
 801be3c:	4640      	mov	r0, r8
 801be3e:	4649      	mov	r1, r9
 801be40:	f7e4 fe4c 	bl	8000adc <__aeabi_dcmplt>
 801be44:	b9d0      	cbnz	r0, 801be7c <_strtod_l+0xa8c>
 801be46:	4640      	mov	r0, r8
 801be48:	4649      	mov	r1, r9
 801be4a:	4b6b      	ldr	r3, [pc, #428]	; (801bff8 <_strtod_l+0xc08>)
 801be4c:	2200      	movs	r2, #0
 801be4e:	f7e4 fbd3 	bl	80005f8 <__aeabi_dmul>
 801be52:	4680      	mov	r8, r0
 801be54:	4689      	mov	r9, r1
 801be56:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801be5a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801be5e:	931b      	str	r3, [sp, #108]	; 0x6c
 801be60:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801be64:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801be68:	e79b      	b.n	801bda2 <_strtod_l+0x9b2>
 801be6a:	f1ba 0f01 	cmp.w	sl, #1
 801be6e:	d102      	bne.n	801be76 <_strtod_l+0xa86>
 801be70:	2f00      	cmp	r7, #0
 801be72:	f43f ad7e 	beq.w	801b972 <_strtod_l+0x582>
 801be76:	4b61      	ldr	r3, [pc, #388]	; (801bffc <_strtod_l+0xc0c>)
 801be78:	2200      	movs	r2, #0
 801be7a:	e78c      	b.n	801bd96 <_strtod_l+0x9a6>
 801be7c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801bff8 <_strtod_l+0xc08>
 801be80:	f04f 0800 	mov.w	r8, #0
 801be84:	e7e7      	b.n	801be56 <_strtod_l+0xa66>
 801be86:	4b5c      	ldr	r3, [pc, #368]	; (801bff8 <_strtod_l+0xc08>)
 801be88:	4640      	mov	r0, r8
 801be8a:	4649      	mov	r1, r9
 801be8c:	2200      	movs	r2, #0
 801be8e:	f7e4 fbb3 	bl	80005f8 <__aeabi_dmul>
 801be92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801be94:	4680      	mov	r8, r0
 801be96:	4689      	mov	r9, r1
 801be98:	b933      	cbnz	r3, 801bea8 <_strtod_l+0xab8>
 801be9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801be9e:	9012      	str	r0, [sp, #72]	; 0x48
 801bea0:	9313      	str	r3, [sp, #76]	; 0x4c
 801bea2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801bea6:	e7dd      	b.n	801be64 <_strtod_l+0xa74>
 801bea8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801beac:	e7f9      	b.n	801bea2 <_strtod_l+0xab2>
 801beae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801beb2:	9b04      	ldr	r3, [sp, #16]
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	d1a8      	bne.n	801be0a <_strtod_l+0xa1a>
 801beb8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bebc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bebe:	0d1b      	lsrs	r3, r3, #20
 801bec0:	051b      	lsls	r3, r3, #20
 801bec2:	429a      	cmp	r2, r3
 801bec4:	d1a1      	bne.n	801be0a <_strtod_l+0xa1a>
 801bec6:	4640      	mov	r0, r8
 801bec8:	4649      	mov	r1, r9
 801beca:	f7e4 fef5 	bl	8000cb8 <__aeabi_d2lz>
 801bece:	f7e4 fb65 	bl	800059c <__aeabi_l2d>
 801bed2:	4602      	mov	r2, r0
 801bed4:	460b      	mov	r3, r1
 801bed6:	4640      	mov	r0, r8
 801bed8:	4649      	mov	r1, r9
 801beda:	f7e4 f9d5 	bl	8000288 <__aeabi_dsub>
 801bede:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bee0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bee4:	ea43 030a 	orr.w	r3, r3, sl
 801bee8:	4313      	orrs	r3, r2
 801beea:	4680      	mov	r8, r0
 801beec:	4689      	mov	r9, r1
 801beee:	d053      	beq.n	801bf98 <_strtod_l+0xba8>
 801bef0:	a335      	add	r3, pc, #212	; (adr r3, 801bfc8 <_strtod_l+0xbd8>)
 801bef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bef6:	f7e4 fdf1 	bl	8000adc <__aeabi_dcmplt>
 801befa:	2800      	cmp	r0, #0
 801befc:	f47f acce 	bne.w	801b89c <_strtod_l+0x4ac>
 801bf00:	a333      	add	r3, pc, #204	; (adr r3, 801bfd0 <_strtod_l+0xbe0>)
 801bf02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf06:	4640      	mov	r0, r8
 801bf08:	4649      	mov	r1, r9
 801bf0a:	f7e4 fe05 	bl	8000b18 <__aeabi_dcmpgt>
 801bf0e:	2800      	cmp	r0, #0
 801bf10:	f43f af7b 	beq.w	801be0a <_strtod_l+0xa1a>
 801bf14:	e4c2      	b.n	801b89c <_strtod_l+0x4ac>
 801bf16:	9b04      	ldr	r3, [sp, #16]
 801bf18:	b333      	cbz	r3, 801bf68 <_strtod_l+0xb78>
 801bf1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bf1c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801bf20:	d822      	bhi.n	801bf68 <_strtod_l+0xb78>
 801bf22:	a32d      	add	r3, pc, #180	; (adr r3, 801bfd8 <_strtod_l+0xbe8>)
 801bf24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf28:	4640      	mov	r0, r8
 801bf2a:	4649      	mov	r1, r9
 801bf2c:	f7e4 fde0 	bl	8000af0 <__aeabi_dcmple>
 801bf30:	b1a0      	cbz	r0, 801bf5c <_strtod_l+0xb6c>
 801bf32:	4649      	mov	r1, r9
 801bf34:	4640      	mov	r0, r8
 801bf36:	f7e4 fe37 	bl	8000ba8 <__aeabi_d2uiz>
 801bf3a:	2801      	cmp	r0, #1
 801bf3c:	bf38      	it	cc
 801bf3e:	2001      	movcc	r0, #1
 801bf40:	f7e4 fae0 	bl	8000504 <__aeabi_ui2d>
 801bf44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bf46:	4680      	mov	r8, r0
 801bf48:	4689      	mov	r9, r1
 801bf4a:	bb13      	cbnz	r3, 801bf92 <_strtod_l+0xba2>
 801bf4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bf50:	9014      	str	r0, [sp, #80]	; 0x50
 801bf52:	9315      	str	r3, [sp, #84]	; 0x54
 801bf54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801bf58:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801bf5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bf5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bf60:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801bf64:	1a9b      	subs	r3, r3, r2
 801bf66:	930d      	str	r3, [sp, #52]	; 0x34
 801bf68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801bf6c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801bf70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801bf74:	f001 fe7c 	bl	801dc70 <__ulp>
 801bf78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801bf7c:	ec53 2b10 	vmov	r2, r3, d0
 801bf80:	f7e4 fb3a 	bl	80005f8 <__aeabi_dmul>
 801bf84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bf88:	f7e4 f980 	bl	800028c <__adddf3>
 801bf8c:	4682      	mov	sl, r0
 801bf8e:	468b      	mov	fp, r1
 801bf90:	e78f      	b.n	801beb2 <_strtod_l+0xac2>
 801bf92:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801bf96:	e7dd      	b.n	801bf54 <_strtod_l+0xb64>
 801bf98:	a311      	add	r3, pc, #68	; (adr r3, 801bfe0 <_strtod_l+0xbf0>)
 801bf9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf9e:	f7e4 fd9d 	bl	8000adc <__aeabi_dcmplt>
 801bfa2:	e7b4      	b.n	801bf0e <_strtod_l+0xb1e>
 801bfa4:	2300      	movs	r3, #0
 801bfa6:	930e      	str	r3, [sp, #56]	; 0x38
 801bfa8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801bfaa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bfac:	6013      	str	r3, [r2, #0]
 801bfae:	f7ff ba65 	b.w	801b47c <_strtod_l+0x8c>
 801bfb2:	2b65      	cmp	r3, #101	; 0x65
 801bfb4:	f43f ab5d 	beq.w	801b672 <_strtod_l+0x282>
 801bfb8:	2b45      	cmp	r3, #69	; 0x45
 801bfba:	f43f ab5a 	beq.w	801b672 <_strtod_l+0x282>
 801bfbe:	2201      	movs	r2, #1
 801bfc0:	f7ff bb92 	b.w	801b6e8 <_strtod_l+0x2f8>
 801bfc4:	f3af 8000 	nop.w
 801bfc8:	94a03595 	.word	0x94a03595
 801bfcc:	3fdfffff 	.word	0x3fdfffff
 801bfd0:	35afe535 	.word	0x35afe535
 801bfd4:	3fe00000 	.word	0x3fe00000
 801bfd8:	ffc00000 	.word	0xffc00000
 801bfdc:	41dfffff 	.word	0x41dfffff
 801bfe0:	94a03595 	.word	0x94a03595
 801bfe4:	3fcfffff 	.word	0x3fcfffff
 801bfe8:	3ff00000 	.word	0x3ff00000
 801bfec:	7ff00000 	.word	0x7ff00000
 801bff0:	7fe00000 	.word	0x7fe00000
 801bff4:	7c9fffff 	.word	0x7c9fffff
 801bff8:	3fe00000 	.word	0x3fe00000
 801bffc:	bff00000 	.word	0xbff00000
 801c000:	7fefffff 	.word	0x7fefffff

0801c004 <_strtod_r>:
 801c004:	4b01      	ldr	r3, [pc, #4]	; (801c00c <_strtod_r+0x8>)
 801c006:	f7ff b9f3 	b.w	801b3f0 <_strtod_l>
 801c00a:	bf00      	nop
 801c00c:	200000f4 	.word	0x200000f4

0801c010 <_strtol_l.isra.0>:
 801c010:	2b01      	cmp	r3, #1
 801c012:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c016:	d001      	beq.n	801c01c <_strtol_l.isra.0+0xc>
 801c018:	2b24      	cmp	r3, #36	; 0x24
 801c01a:	d906      	bls.n	801c02a <_strtol_l.isra.0+0x1a>
 801c01c:	f7fe f936 	bl	801a28c <__errno>
 801c020:	2316      	movs	r3, #22
 801c022:	6003      	str	r3, [r0, #0]
 801c024:	2000      	movs	r0, #0
 801c026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c02a:	4f3a      	ldr	r7, [pc, #232]	; (801c114 <_strtol_l.isra.0+0x104>)
 801c02c:	468e      	mov	lr, r1
 801c02e:	4676      	mov	r6, lr
 801c030:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c034:	5de5      	ldrb	r5, [r4, r7]
 801c036:	f015 0508 	ands.w	r5, r5, #8
 801c03a:	d1f8      	bne.n	801c02e <_strtol_l.isra.0+0x1e>
 801c03c:	2c2d      	cmp	r4, #45	; 0x2d
 801c03e:	d134      	bne.n	801c0aa <_strtol_l.isra.0+0x9a>
 801c040:	f89e 4000 	ldrb.w	r4, [lr]
 801c044:	f04f 0801 	mov.w	r8, #1
 801c048:	f106 0e02 	add.w	lr, r6, #2
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	d05c      	beq.n	801c10a <_strtol_l.isra.0+0xfa>
 801c050:	2b10      	cmp	r3, #16
 801c052:	d10c      	bne.n	801c06e <_strtol_l.isra.0+0x5e>
 801c054:	2c30      	cmp	r4, #48	; 0x30
 801c056:	d10a      	bne.n	801c06e <_strtol_l.isra.0+0x5e>
 801c058:	f89e 4000 	ldrb.w	r4, [lr]
 801c05c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801c060:	2c58      	cmp	r4, #88	; 0x58
 801c062:	d14d      	bne.n	801c100 <_strtol_l.isra.0+0xf0>
 801c064:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801c068:	2310      	movs	r3, #16
 801c06a:	f10e 0e02 	add.w	lr, lr, #2
 801c06e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801c072:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801c076:	2600      	movs	r6, #0
 801c078:	fbbc f9f3 	udiv	r9, ip, r3
 801c07c:	4635      	mov	r5, r6
 801c07e:	fb03 ca19 	mls	sl, r3, r9, ip
 801c082:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801c086:	2f09      	cmp	r7, #9
 801c088:	d818      	bhi.n	801c0bc <_strtol_l.isra.0+0xac>
 801c08a:	463c      	mov	r4, r7
 801c08c:	42a3      	cmp	r3, r4
 801c08e:	dd24      	ble.n	801c0da <_strtol_l.isra.0+0xca>
 801c090:	2e00      	cmp	r6, #0
 801c092:	db1f      	blt.n	801c0d4 <_strtol_l.isra.0+0xc4>
 801c094:	45a9      	cmp	r9, r5
 801c096:	d31d      	bcc.n	801c0d4 <_strtol_l.isra.0+0xc4>
 801c098:	d101      	bne.n	801c09e <_strtol_l.isra.0+0x8e>
 801c09a:	45a2      	cmp	sl, r4
 801c09c:	db1a      	blt.n	801c0d4 <_strtol_l.isra.0+0xc4>
 801c09e:	fb05 4503 	mla	r5, r5, r3, r4
 801c0a2:	2601      	movs	r6, #1
 801c0a4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c0a8:	e7eb      	b.n	801c082 <_strtol_l.isra.0+0x72>
 801c0aa:	2c2b      	cmp	r4, #43	; 0x2b
 801c0ac:	bf08      	it	eq
 801c0ae:	f89e 4000 	ldrbeq.w	r4, [lr]
 801c0b2:	46a8      	mov	r8, r5
 801c0b4:	bf08      	it	eq
 801c0b6:	f106 0e02 	addeq.w	lr, r6, #2
 801c0ba:	e7c7      	b.n	801c04c <_strtol_l.isra.0+0x3c>
 801c0bc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801c0c0:	2f19      	cmp	r7, #25
 801c0c2:	d801      	bhi.n	801c0c8 <_strtol_l.isra.0+0xb8>
 801c0c4:	3c37      	subs	r4, #55	; 0x37
 801c0c6:	e7e1      	b.n	801c08c <_strtol_l.isra.0+0x7c>
 801c0c8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801c0cc:	2f19      	cmp	r7, #25
 801c0ce:	d804      	bhi.n	801c0da <_strtol_l.isra.0+0xca>
 801c0d0:	3c57      	subs	r4, #87	; 0x57
 801c0d2:	e7db      	b.n	801c08c <_strtol_l.isra.0+0x7c>
 801c0d4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801c0d8:	e7e4      	b.n	801c0a4 <_strtol_l.isra.0+0x94>
 801c0da:	2e00      	cmp	r6, #0
 801c0dc:	da05      	bge.n	801c0ea <_strtol_l.isra.0+0xda>
 801c0de:	2322      	movs	r3, #34	; 0x22
 801c0e0:	6003      	str	r3, [r0, #0]
 801c0e2:	4665      	mov	r5, ip
 801c0e4:	b942      	cbnz	r2, 801c0f8 <_strtol_l.isra.0+0xe8>
 801c0e6:	4628      	mov	r0, r5
 801c0e8:	e79d      	b.n	801c026 <_strtol_l.isra.0+0x16>
 801c0ea:	f1b8 0f00 	cmp.w	r8, #0
 801c0ee:	d000      	beq.n	801c0f2 <_strtol_l.isra.0+0xe2>
 801c0f0:	426d      	negs	r5, r5
 801c0f2:	2a00      	cmp	r2, #0
 801c0f4:	d0f7      	beq.n	801c0e6 <_strtol_l.isra.0+0xd6>
 801c0f6:	b10e      	cbz	r6, 801c0fc <_strtol_l.isra.0+0xec>
 801c0f8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 801c0fc:	6011      	str	r1, [r2, #0]
 801c0fe:	e7f2      	b.n	801c0e6 <_strtol_l.isra.0+0xd6>
 801c100:	2430      	movs	r4, #48	; 0x30
 801c102:	2b00      	cmp	r3, #0
 801c104:	d1b3      	bne.n	801c06e <_strtol_l.isra.0+0x5e>
 801c106:	2308      	movs	r3, #8
 801c108:	e7b1      	b.n	801c06e <_strtol_l.isra.0+0x5e>
 801c10a:	2c30      	cmp	r4, #48	; 0x30
 801c10c:	d0a4      	beq.n	801c058 <_strtol_l.isra.0+0x48>
 801c10e:	230a      	movs	r3, #10
 801c110:	e7ad      	b.n	801c06e <_strtol_l.isra.0+0x5e>
 801c112:	bf00      	nop
 801c114:	08020849 	.word	0x08020849

0801c118 <_strtol_r>:
 801c118:	f7ff bf7a 	b.w	801c010 <_strtol_l.isra.0>

0801c11c <_write_r>:
 801c11c:	b538      	push	{r3, r4, r5, lr}
 801c11e:	4d07      	ldr	r5, [pc, #28]	; (801c13c <_write_r+0x20>)
 801c120:	4604      	mov	r4, r0
 801c122:	4608      	mov	r0, r1
 801c124:	4611      	mov	r1, r2
 801c126:	2200      	movs	r2, #0
 801c128:	602a      	str	r2, [r5, #0]
 801c12a:	461a      	mov	r2, r3
 801c12c:	f7f0 f9cd 	bl	800c4ca <_write>
 801c130:	1c43      	adds	r3, r0, #1
 801c132:	d102      	bne.n	801c13a <_write_r+0x1e>
 801c134:	682b      	ldr	r3, [r5, #0]
 801c136:	b103      	cbz	r3, 801c13a <_write_r+0x1e>
 801c138:	6023      	str	r3, [r4, #0]
 801c13a:	bd38      	pop	{r3, r4, r5, pc}
 801c13c:	2000aaa4 	.word	0x2000aaa4

0801c140 <_close_r>:
 801c140:	b538      	push	{r3, r4, r5, lr}
 801c142:	4d06      	ldr	r5, [pc, #24]	; (801c15c <_close_r+0x1c>)
 801c144:	2300      	movs	r3, #0
 801c146:	4604      	mov	r4, r0
 801c148:	4608      	mov	r0, r1
 801c14a:	602b      	str	r3, [r5, #0]
 801c14c:	f7f0 f9d9 	bl	800c502 <_close>
 801c150:	1c43      	adds	r3, r0, #1
 801c152:	d102      	bne.n	801c15a <_close_r+0x1a>
 801c154:	682b      	ldr	r3, [r5, #0]
 801c156:	b103      	cbz	r3, 801c15a <_close_r+0x1a>
 801c158:	6023      	str	r3, [r4, #0]
 801c15a:	bd38      	pop	{r3, r4, r5, pc}
 801c15c:	2000aaa4 	.word	0x2000aaa4

0801c160 <quorem>:
 801c160:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c164:	6903      	ldr	r3, [r0, #16]
 801c166:	690c      	ldr	r4, [r1, #16]
 801c168:	42a3      	cmp	r3, r4
 801c16a:	4607      	mov	r7, r0
 801c16c:	f2c0 8081 	blt.w	801c272 <quorem+0x112>
 801c170:	3c01      	subs	r4, #1
 801c172:	f101 0814 	add.w	r8, r1, #20
 801c176:	f100 0514 	add.w	r5, r0, #20
 801c17a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c17e:	9301      	str	r3, [sp, #4]
 801c180:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c184:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c188:	3301      	adds	r3, #1
 801c18a:	429a      	cmp	r2, r3
 801c18c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c190:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c194:	fbb2 f6f3 	udiv	r6, r2, r3
 801c198:	d331      	bcc.n	801c1fe <quorem+0x9e>
 801c19a:	f04f 0e00 	mov.w	lr, #0
 801c19e:	4640      	mov	r0, r8
 801c1a0:	46ac      	mov	ip, r5
 801c1a2:	46f2      	mov	sl, lr
 801c1a4:	f850 2b04 	ldr.w	r2, [r0], #4
 801c1a8:	b293      	uxth	r3, r2
 801c1aa:	fb06 e303 	mla	r3, r6, r3, lr
 801c1ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801c1b2:	b29b      	uxth	r3, r3
 801c1b4:	ebaa 0303 	sub.w	r3, sl, r3
 801c1b8:	0c12      	lsrs	r2, r2, #16
 801c1ba:	f8dc a000 	ldr.w	sl, [ip]
 801c1be:	fb06 e202 	mla	r2, r6, r2, lr
 801c1c2:	fa13 f38a 	uxtah	r3, r3, sl
 801c1c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c1ca:	fa1f fa82 	uxth.w	sl, r2
 801c1ce:	f8dc 2000 	ldr.w	r2, [ip]
 801c1d2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801c1d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c1da:	b29b      	uxth	r3, r3
 801c1dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c1e0:	4581      	cmp	r9, r0
 801c1e2:	f84c 3b04 	str.w	r3, [ip], #4
 801c1e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c1ea:	d2db      	bcs.n	801c1a4 <quorem+0x44>
 801c1ec:	f855 300b 	ldr.w	r3, [r5, fp]
 801c1f0:	b92b      	cbnz	r3, 801c1fe <quorem+0x9e>
 801c1f2:	9b01      	ldr	r3, [sp, #4]
 801c1f4:	3b04      	subs	r3, #4
 801c1f6:	429d      	cmp	r5, r3
 801c1f8:	461a      	mov	r2, r3
 801c1fa:	d32e      	bcc.n	801c25a <quorem+0xfa>
 801c1fc:	613c      	str	r4, [r7, #16]
 801c1fe:	4638      	mov	r0, r7
 801c200:	f001 fc92 	bl	801db28 <__mcmp>
 801c204:	2800      	cmp	r0, #0
 801c206:	db24      	blt.n	801c252 <quorem+0xf2>
 801c208:	3601      	adds	r6, #1
 801c20a:	4628      	mov	r0, r5
 801c20c:	f04f 0c00 	mov.w	ip, #0
 801c210:	f858 2b04 	ldr.w	r2, [r8], #4
 801c214:	f8d0 e000 	ldr.w	lr, [r0]
 801c218:	b293      	uxth	r3, r2
 801c21a:	ebac 0303 	sub.w	r3, ip, r3
 801c21e:	0c12      	lsrs	r2, r2, #16
 801c220:	fa13 f38e 	uxtah	r3, r3, lr
 801c224:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c228:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c22c:	b29b      	uxth	r3, r3
 801c22e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c232:	45c1      	cmp	r9, r8
 801c234:	f840 3b04 	str.w	r3, [r0], #4
 801c238:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c23c:	d2e8      	bcs.n	801c210 <quorem+0xb0>
 801c23e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c242:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c246:	b922      	cbnz	r2, 801c252 <quorem+0xf2>
 801c248:	3b04      	subs	r3, #4
 801c24a:	429d      	cmp	r5, r3
 801c24c:	461a      	mov	r2, r3
 801c24e:	d30a      	bcc.n	801c266 <quorem+0x106>
 801c250:	613c      	str	r4, [r7, #16]
 801c252:	4630      	mov	r0, r6
 801c254:	b003      	add	sp, #12
 801c256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c25a:	6812      	ldr	r2, [r2, #0]
 801c25c:	3b04      	subs	r3, #4
 801c25e:	2a00      	cmp	r2, #0
 801c260:	d1cc      	bne.n	801c1fc <quorem+0x9c>
 801c262:	3c01      	subs	r4, #1
 801c264:	e7c7      	b.n	801c1f6 <quorem+0x96>
 801c266:	6812      	ldr	r2, [r2, #0]
 801c268:	3b04      	subs	r3, #4
 801c26a:	2a00      	cmp	r2, #0
 801c26c:	d1f0      	bne.n	801c250 <quorem+0xf0>
 801c26e:	3c01      	subs	r4, #1
 801c270:	e7eb      	b.n	801c24a <quorem+0xea>
 801c272:	2000      	movs	r0, #0
 801c274:	e7ee      	b.n	801c254 <quorem+0xf4>
	...

0801c278 <_dtoa_r>:
 801c278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c27c:	ed2d 8b02 	vpush	{d8}
 801c280:	ec57 6b10 	vmov	r6, r7, d0
 801c284:	b095      	sub	sp, #84	; 0x54
 801c286:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c288:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801c28c:	9105      	str	r1, [sp, #20]
 801c28e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801c292:	4604      	mov	r4, r0
 801c294:	9209      	str	r2, [sp, #36]	; 0x24
 801c296:	930f      	str	r3, [sp, #60]	; 0x3c
 801c298:	b975      	cbnz	r5, 801c2b8 <_dtoa_r+0x40>
 801c29a:	2010      	movs	r0, #16
 801c29c:	f7fe f820 	bl	801a2e0 <malloc>
 801c2a0:	4602      	mov	r2, r0
 801c2a2:	6260      	str	r0, [r4, #36]	; 0x24
 801c2a4:	b920      	cbnz	r0, 801c2b0 <_dtoa_r+0x38>
 801c2a6:	4bb2      	ldr	r3, [pc, #712]	; (801c570 <_dtoa_r+0x2f8>)
 801c2a8:	21ea      	movs	r1, #234	; 0xea
 801c2aa:	48b2      	ldr	r0, [pc, #712]	; (801c574 <_dtoa_r+0x2fc>)
 801c2ac:	f002 f808 	bl	801e2c0 <__assert_func>
 801c2b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c2b4:	6005      	str	r5, [r0, #0]
 801c2b6:	60c5      	str	r5, [r0, #12]
 801c2b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c2ba:	6819      	ldr	r1, [r3, #0]
 801c2bc:	b151      	cbz	r1, 801c2d4 <_dtoa_r+0x5c>
 801c2be:	685a      	ldr	r2, [r3, #4]
 801c2c0:	604a      	str	r2, [r1, #4]
 801c2c2:	2301      	movs	r3, #1
 801c2c4:	4093      	lsls	r3, r2
 801c2c6:	608b      	str	r3, [r1, #8]
 801c2c8:	4620      	mov	r0, r4
 801c2ca:	f001 f9a5 	bl	801d618 <_Bfree>
 801c2ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c2d0:	2200      	movs	r2, #0
 801c2d2:	601a      	str	r2, [r3, #0]
 801c2d4:	1e3b      	subs	r3, r7, #0
 801c2d6:	bfb9      	ittee	lt
 801c2d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c2dc:	9303      	strlt	r3, [sp, #12]
 801c2de:	2300      	movge	r3, #0
 801c2e0:	f8c8 3000 	strge.w	r3, [r8]
 801c2e4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801c2e8:	4ba3      	ldr	r3, [pc, #652]	; (801c578 <_dtoa_r+0x300>)
 801c2ea:	bfbc      	itt	lt
 801c2ec:	2201      	movlt	r2, #1
 801c2ee:	f8c8 2000 	strlt.w	r2, [r8]
 801c2f2:	ea33 0309 	bics.w	r3, r3, r9
 801c2f6:	d11b      	bne.n	801c330 <_dtoa_r+0xb8>
 801c2f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c2fa:	f242 730f 	movw	r3, #9999	; 0x270f
 801c2fe:	6013      	str	r3, [r2, #0]
 801c300:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c304:	4333      	orrs	r3, r6
 801c306:	f000 857a 	beq.w	801cdfe <_dtoa_r+0xb86>
 801c30a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c30c:	b963      	cbnz	r3, 801c328 <_dtoa_r+0xb0>
 801c30e:	4b9b      	ldr	r3, [pc, #620]	; (801c57c <_dtoa_r+0x304>)
 801c310:	e024      	b.n	801c35c <_dtoa_r+0xe4>
 801c312:	4b9b      	ldr	r3, [pc, #620]	; (801c580 <_dtoa_r+0x308>)
 801c314:	9300      	str	r3, [sp, #0]
 801c316:	3308      	adds	r3, #8
 801c318:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c31a:	6013      	str	r3, [r2, #0]
 801c31c:	9800      	ldr	r0, [sp, #0]
 801c31e:	b015      	add	sp, #84	; 0x54
 801c320:	ecbd 8b02 	vpop	{d8}
 801c324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c328:	4b94      	ldr	r3, [pc, #592]	; (801c57c <_dtoa_r+0x304>)
 801c32a:	9300      	str	r3, [sp, #0]
 801c32c:	3303      	adds	r3, #3
 801c32e:	e7f3      	b.n	801c318 <_dtoa_r+0xa0>
 801c330:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c334:	2200      	movs	r2, #0
 801c336:	ec51 0b17 	vmov	r0, r1, d7
 801c33a:	2300      	movs	r3, #0
 801c33c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801c340:	f7e4 fbc2 	bl	8000ac8 <__aeabi_dcmpeq>
 801c344:	4680      	mov	r8, r0
 801c346:	b158      	cbz	r0, 801c360 <_dtoa_r+0xe8>
 801c348:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c34a:	2301      	movs	r3, #1
 801c34c:	6013      	str	r3, [r2, #0]
 801c34e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c350:	2b00      	cmp	r3, #0
 801c352:	f000 8551 	beq.w	801cdf8 <_dtoa_r+0xb80>
 801c356:	488b      	ldr	r0, [pc, #556]	; (801c584 <_dtoa_r+0x30c>)
 801c358:	6018      	str	r0, [r3, #0]
 801c35a:	1e43      	subs	r3, r0, #1
 801c35c:	9300      	str	r3, [sp, #0]
 801c35e:	e7dd      	b.n	801c31c <_dtoa_r+0xa4>
 801c360:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801c364:	aa12      	add	r2, sp, #72	; 0x48
 801c366:	a913      	add	r1, sp, #76	; 0x4c
 801c368:	4620      	mov	r0, r4
 801c36a:	f001 fcfd 	bl	801dd68 <__d2b>
 801c36e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c372:	4683      	mov	fp, r0
 801c374:	2d00      	cmp	r5, #0
 801c376:	d07c      	beq.n	801c472 <_dtoa_r+0x1fa>
 801c378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c37a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801c37e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c382:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801c386:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801c38a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801c38e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801c392:	4b7d      	ldr	r3, [pc, #500]	; (801c588 <_dtoa_r+0x310>)
 801c394:	2200      	movs	r2, #0
 801c396:	4630      	mov	r0, r6
 801c398:	4639      	mov	r1, r7
 801c39a:	f7e3 ff75 	bl	8000288 <__aeabi_dsub>
 801c39e:	a36e      	add	r3, pc, #440	; (adr r3, 801c558 <_dtoa_r+0x2e0>)
 801c3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3a4:	f7e4 f928 	bl	80005f8 <__aeabi_dmul>
 801c3a8:	a36d      	add	r3, pc, #436	; (adr r3, 801c560 <_dtoa_r+0x2e8>)
 801c3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3ae:	f7e3 ff6d 	bl	800028c <__adddf3>
 801c3b2:	4606      	mov	r6, r0
 801c3b4:	4628      	mov	r0, r5
 801c3b6:	460f      	mov	r7, r1
 801c3b8:	f7e4 f8b4 	bl	8000524 <__aeabi_i2d>
 801c3bc:	a36a      	add	r3, pc, #424	; (adr r3, 801c568 <_dtoa_r+0x2f0>)
 801c3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3c2:	f7e4 f919 	bl	80005f8 <__aeabi_dmul>
 801c3c6:	4602      	mov	r2, r0
 801c3c8:	460b      	mov	r3, r1
 801c3ca:	4630      	mov	r0, r6
 801c3cc:	4639      	mov	r1, r7
 801c3ce:	f7e3 ff5d 	bl	800028c <__adddf3>
 801c3d2:	4606      	mov	r6, r0
 801c3d4:	460f      	mov	r7, r1
 801c3d6:	f7e4 fbbf 	bl	8000b58 <__aeabi_d2iz>
 801c3da:	2200      	movs	r2, #0
 801c3dc:	4682      	mov	sl, r0
 801c3de:	2300      	movs	r3, #0
 801c3e0:	4630      	mov	r0, r6
 801c3e2:	4639      	mov	r1, r7
 801c3e4:	f7e4 fb7a 	bl	8000adc <__aeabi_dcmplt>
 801c3e8:	b148      	cbz	r0, 801c3fe <_dtoa_r+0x186>
 801c3ea:	4650      	mov	r0, sl
 801c3ec:	f7e4 f89a 	bl	8000524 <__aeabi_i2d>
 801c3f0:	4632      	mov	r2, r6
 801c3f2:	463b      	mov	r3, r7
 801c3f4:	f7e4 fb68 	bl	8000ac8 <__aeabi_dcmpeq>
 801c3f8:	b908      	cbnz	r0, 801c3fe <_dtoa_r+0x186>
 801c3fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801c3fe:	f1ba 0f16 	cmp.w	sl, #22
 801c402:	d854      	bhi.n	801c4ae <_dtoa_r+0x236>
 801c404:	4b61      	ldr	r3, [pc, #388]	; (801c58c <_dtoa_r+0x314>)
 801c406:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801c40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c40e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c412:	f7e4 fb63 	bl	8000adc <__aeabi_dcmplt>
 801c416:	2800      	cmp	r0, #0
 801c418:	d04b      	beq.n	801c4b2 <_dtoa_r+0x23a>
 801c41a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801c41e:	2300      	movs	r3, #0
 801c420:	930e      	str	r3, [sp, #56]	; 0x38
 801c422:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c424:	1b5d      	subs	r5, r3, r5
 801c426:	1e6b      	subs	r3, r5, #1
 801c428:	9304      	str	r3, [sp, #16]
 801c42a:	bf43      	ittte	mi
 801c42c:	2300      	movmi	r3, #0
 801c42e:	f1c5 0801 	rsbmi	r8, r5, #1
 801c432:	9304      	strmi	r3, [sp, #16]
 801c434:	f04f 0800 	movpl.w	r8, #0
 801c438:	f1ba 0f00 	cmp.w	sl, #0
 801c43c:	db3b      	blt.n	801c4b6 <_dtoa_r+0x23e>
 801c43e:	9b04      	ldr	r3, [sp, #16]
 801c440:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801c444:	4453      	add	r3, sl
 801c446:	9304      	str	r3, [sp, #16]
 801c448:	2300      	movs	r3, #0
 801c44a:	9306      	str	r3, [sp, #24]
 801c44c:	9b05      	ldr	r3, [sp, #20]
 801c44e:	2b09      	cmp	r3, #9
 801c450:	d869      	bhi.n	801c526 <_dtoa_r+0x2ae>
 801c452:	2b05      	cmp	r3, #5
 801c454:	bfc4      	itt	gt
 801c456:	3b04      	subgt	r3, #4
 801c458:	9305      	strgt	r3, [sp, #20]
 801c45a:	9b05      	ldr	r3, [sp, #20]
 801c45c:	f1a3 0302 	sub.w	r3, r3, #2
 801c460:	bfcc      	ite	gt
 801c462:	2500      	movgt	r5, #0
 801c464:	2501      	movle	r5, #1
 801c466:	2b03      	cmp	r3, #3
 801c468:	d869      	bhi.n	801c53e <_dtoa_r+0x2c6>
 801c46a:	e8df f003 	tbb	[pc, r3]
 801c46e:	4e2c      	.short	0x4e2c
 801c470:	5a4c      	.short	0x5a4c
 801c472:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801c476:	441d      	add	r5, r3
 801c478:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801c47c:	2b20      	cmp	r3, #32
 801c47e:	bfc1      	itttt	gt
 801c480:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801c484:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801c488:	fa09 f303 	lslgt.w	r3, r9, r3
 801c48c:	fa26 f000 	lsrgt.w	r0, r6, r0
 801c490:	bfda      	itte	le
 801c492:	f1c3 0320 	rsble	r3, r3, #32
 801c496:	fa06 f003 	lslle.w	r0, r6, r3
 801c49a:	4318      	orrgt	r0, r3
 801c49c:	f7e4 f832 	bl	8000504 <__aeabi_ui2d>
 801c4a0:	2301      	movs	r3, #1
 801c4a2:	4606      	mov	r6, r0
 801c4a4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801c4a8:	3d01      	subs	r5, #1
 801c4aa:	9310      	str	r3, [sp, #64]	; 0x40
 801c4ac:	e771      	b.n	801c392 <_dtoa_r+0x11a>
 801c4ae:	2301      	movs	r3, #1
 801c4b0:	e7b6      	b.n	801c420 <_dtoa_r+0x1a8>
 801c4b2:	900e      	str	r0, [sp, #56]	; 0x38
 801c4b4:	e7b5      	b.n	801c422 <_dtoa_r+0x1aa>
 801c4b6:	f1ca 0300 	rsb	r3, sl, #0
 801c4ba:	9306      	str	r3, [sp, #24]
 801c4bc:	2300      	movs	r3, #0
 801c4be:	eba8 080a 	sub.w	r8, r8, sl
 801c4c2:	930d      	str	r3, [sp, #52]	; 0x34
 801c4c4:	e7c2      	b.n	801c44c <_dtoa_r+0x1d4>
 801c4c6:	2300      	movs	r3, #0
 801c4c8:	9308      	str	r3, [sp, #32]
 801c4ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c4cc:	2b00      	cmp	r3, #0
 801c4ce:	dc39      	bgt.n	801c544 <_dtoa_r+0x2cc>
 801c4d0:	f04f 0901 	mov.w	r9, #1
 801c4d4:	f8cd 9004 	str.w	r9, [sp, #4]
 801c4d8:	464b      	mov	r3, r9
 801c4da:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801c4de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c4e0:	2200      	movs	r2, #0
 801c4e2:	6042      	str	r2, [r0, #4]
 801c4e4:	2204      	movs	r2, #4
 801c4e6:	f102 0614 	add.w	r6, r2, #20
 801c4ea:	429e      	cmp	r6, r3
 801c4ec:	6841      	ldr	r1, [r0, #4]
 801c4ee:	d92f      	bls.n	801c550 <_dtoa_r+0x2d8>
 801c4f0:	4620      	mov	r0, r4
 801c4f2:	f001 f851 	bl	801d598 <_Balloc>
 801c4f6:	9000      	str	r0, [sp, #0]
 801c4f8:	2800      	cmp	r0, #0
 801c4fa:	d14b      	bne.n	801c594 <_dtoa_r+0x31c>
 801c4fc:	4b24      	ldr	r3, [pc, #144]	; (801c590 <_dtoa_r+0x318>)
 801c4fe:	4602      	mov	r2, r0
 801c500:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801c504:	e6d1      	b.n	801c2aa <_dtoa_r+0x32>
 801c506:	2301      	movs	r3, #1
 801c508:	e7de      	b.n	801c4c8 <_dtoa_r+0x250>
 801c50a:	2300      	movs	r3, #0
 801c50c:	9308      	str	r3, [sp, #32]
 801c50e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c510:	eb0a 0903 	add.w	r9, sl, r3
 801c514:	f109 0301 	add.w	r3, r9, #1
 801c518:	2b01      	cmp	r3, #1
 801c51a:	9301      	str	r3, [sp, #4]
 801c51c:	bfb8      	it	lt
 801c51e:	2301      	movlt	r3, #1
 801c520:	e7dd      	b.n	801c4de <_dtoa_r+0x266>
 801c522:	2301      	movs	r3, #1
 801c524:	e7f2      	b.n	801c50c <_dtoa_r+0x294>
 801c526:	2501      	movs	r5, #1
 801c528:	2300      	movs	r3, #0
 801c52a:	9305      	str	r3, [sp, #20]
 801c52c:	9508      	str	r5, [sp, #32]
 801c52e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801c532:	2200      	movs	r2, #0
 801c534:	f8cd 9004 	str.w	r9, [sp, #4]
 801c538:	2312      	movs	r3, #18
 801c53a:	9209      	str	r2, [sp, #36]	; 0x24
 801c53c:	e7cf      	b.n	801c4de <_dtoa_r+0x266>
 801c53e:	2301      	movs	r3, #1
 801c540:	9308      	str	r3, [sp, #32]
 801c542:	e7f4      	b.n	801c52e <_dtoa_r+0x2b6>
 801c544:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801c548:	f8cd 9004 	str.w	r9, [sp, #4]
 801c54c:	464b      	mov	r3, r9
 801c54e:	e7c6      	b.n	801c4de <_dtoa_r+0x266>
 801c550:	3101      	adds	r1, #1
 801c552:	6041      	str	r1, [r0, #4]
 801c554:	0052      	lsls	r2, r2, #1
 801c556:	e7c6      	b.n	801c4e6 <_dtoa_r+0x26e>
 801c558:	636f4361 	.word	0x636f4361
 801c55c:	3fd287a7 	.word	0x3fd287a7
 801c560:	8b60c8b3 	.word	0x8b60c8b3
 801c564:	3fc68a28 	.word	0x3fc68a28
 801c568:	509f79fb 	.word	0x509f79fb
 801c56c:	3fd34413 	.word	0x3fd34413
 801c570:	08020956 	.word	0x08020956
 801c574:	0802096d 	.word	0x0802096d
 801c578:	7ff00000 	.word	0x7ff00000
 801c57c:	08020952 	.word	0x08020952
 801c580:	08020949 	.word	0x08020949
 801c584:	080207c9 	.word	0x080207c9
 801c588:	3ff80000 	.word	0x3ff80000
 801c58c:	08020ae8 	.word	0x08020ae8
 801c590:	080209cc 	.word	0x080209cc
 801c594:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c596:	9a00      	ldr	r2, [sp, #0]
 801c598:	601a      	str	r2, [r3, #0]
 801c59a:	9b01      	ldr	r3, [sp, #4]
 801c59c:	2b0e      	cmp	r3, #14
 801c59e:	f200 80ad 	bhi.w	801c6fc <_dtoa_r+0x484>
 801c5a2:	2d00      	cmp	r5, #0
 801c5a4:	f000 80aa 	beq.w	801c6fc <_dtoa_r+0x484>
 801c5a8:	f1ba 0f00 	cmp.w	sl, #0
 801c5ac:	dd36      	ble.n	801c61c <_dtoa_r+0x3a4>
 801c5ae:	4ac3      	ldr	r2, [pc, #780]	; (801c8bc <_dtoa_r+0x644>)
 801c5b0:	f00a 030f 	and.w	r3, sl, #15
 801c5b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801c5b8:	ed93 7b00 	vldr	d7, [r3]
 801c5bc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801c5c0:	ea4f 172a 	mov.w	r7, sl, asr #4
 801c5c4:	eeb0 8a47 	vmov.f32	s16, s14
 801c5c8:	eef0 8a67 	vmov.f32	s17, s15
 801c5cc:	d016      	beq.n	801c5fc <_dtoa_r+0x384>
 801c5ce:	4bbc      	ldr	r3, [pc, #752]	; (801c8c0 <_dtoa_r+0x648>)
 801c5d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c5d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c5d8:	f7e4 f938 	bl	800084c <__aeabi_ddiv>
 801c5dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c5e0:	f007 070f 	and.w	r7, r7, #15
 801c5e4:	2503      	movs	r5, #3
 801c5e6:	4eb6      	ldr	r6, [pc, #728]	; (801c8c0 <_dtoa_r+0x648>)
 801c5e8:	b957      	cbnz	r7, 801c600 <_dtoa_r+0x388>
 801c5ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c5ee:	ec53 2b18 	vmov	r2, r3, d8
 801c5f2:	f7e4 f92b 	bl	800084c <__aeabi_ddiv>
 801c5f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c5fa:	e029      	b.n	801c650 <_dtoa_r+0x3d8>
 801c5fc:	2502      	movs	r5, #2
 801c5fe:	e7f2      	b.n	801c5e6 <_dtoa_r+0x36e>
 801c600:	07f9      	lsls	r1, r7, #31
 801c602:	d508      	bpl.n	801c616 <_dtoa_r+0x39e>
 801c604:	ec51 0b18 	vmov	r0, r1, d8
 801c608:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c60c:	f7e3 fff4 	bl	80005f8 <__aeabi_dmul>
 801c610:	ec41 0b18 	vmov	d8, r0, r1
 801c614:	3501      	adds	r5, #1
 801c616:	107f      	asrs	r7, r7, #1
 801c618:	3608      	adds	r6, #8
 801c61a:	e7e5      	b.n	801c5e8 <_dtoa_r+0x370>
 801c61c:	f000 80a6 	beq.w	801c76c <_dtoa_r+0x4f4>
 801c620:	f1ca 0600 	rsb	r6, sl, #0
 801c624:	4ba5      	ldr	r3, [pc, #660]	; (801c8bc <_dtoa_r+0x644>)
 801c626:	4fa6      	ldr	r7, [pc, #664]	; (801c8c0 <_dtoa_r+0x648>)
 801c628:	f006 020f 	and.w	r2, r6, #15
 801c62c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c630:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c634:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c638:	f7e3 ffde 	bl	80005f8 <__aeabi_dmul>
 801c63c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c640:	1136      	asrs	r6, r6, #4
 801c642:	2300      	movs	r3, #0
 801c644:	2502      	movs	r5, #2
 801c646:	2e00      	cmp	r6, #0
 801c648:	f040 8085 	bne.w	801c756 <_dtoa_r+0x4de>
 801c64c:	2b00      	cmp	r3, #0
 801c64e:	d1d2      	bne.n	801c5f6 <_dtoa_r+0x37e>
 801c650:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c652:	2b00      	cmp	r3, #0
 801c654:	f000 808c 	beq.w	801c770 <_dtoa_r+0x4f8>
 801c658:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801c65c:	4b99      	ldr	r3, [pc, #612]	; (801c8c4 <_dtoa_r+0x64c>)
 801c65e:	2200      	movs	r2, #0
 801c660:	4630      	mov	r0, r6
 801c662:	4639      	mov	r1, r7
 801c664:	f7e4 fa3a 	bl	8000adc <__aeabi_dcmplt>
 801c668:	2800      	cmp	r0, #0
 801c66a:	f000 8081 	beq.w	801c770 <_dtoa_r+0x4f8>
 801c66e:	9b01      	ldr	r3, [sp, #4]
 801c670:	2b00      	cmp	r3, #0
 801c672:	d07d      	beq.n	801c770 <_dtoa_r+0x4f8>
 801c674:	f1b9 0f00 	cmp.w	r9, #0
 801c678:	dd3c      	ble.n	801c6f4 <_dtoa_r+0x47c>
 801c67a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801c67e:	9307      	str	r3, [sp, #28]
 801c680:	2200      	movs	r2, #0
 801c682:	4b91      	ldr	r3, [pc, #580]	; (801c8c8 <_dtoa_r+0x650>)
 801c684:	4630      	mov	r0, r6
 801c686:	4639      	mov	r1, r7
 801c688:	f7e3 ffb6 	bl	80005f8 <__aeabi_dmul>
 801c68c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c690:	3501      	adds	r5, #1
 801c692:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801c696:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801c69a:	4628      	mov	r0, r5
 801c69c:	f7e3 ff42 	bl	8000524 <__aeabi_i2d>
 801c6a0:	4632      	mov	r2, r6
 801c6a2:	463b      	mov	r3, r7
 801c6a4:	f7e3 ffa8 	bl	80005f8 <__aeabi_dmul>
 801c6a8:	4b88      	ldr	r3, [pc, #544]	; (801c8cc <_dtoa_r+0x654>)
 801c6aa:	2200      	movs	r2, #0
 801c6ac:	f7e3 fdee 	bl	800028c <__adddf3>
 801c6b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801c6b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c6b8:	9303      	str	r3, [sp, #12]
 801c6ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c6bc:	2b00      	cmp	r3, #0
 801c6be:	d15c      	bne.n	801c77a <_dtoa_r+0x502>
 801c6c0:	4b83      	ldr	r3, [pc, #524]	; (801c8d0 <_dtoa_r+0x658>)
 801c6c2:	2200      	movs	r2, #0
 801c6c4:	4630      	mov	r0, r6
 801c6c6:	4639      	mov	r1, r7
 801c6c8:	f7e3 fdde 	bl	8000288 <__aeabi_dsub>
 801c6cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c6d0:	4606      	mov	r6, r0
 801c6d2:	460f      	mov	r7, r1
 801c6d4:	f7e4 fa20 	bl	8000b18 <__aeabi_dcmpgt>
 801c6d8:	2800      	cmp	r0, #0
 801c6da:	f040 8296 	bne.w	801cc0a <_dtoa_r+0x992>
 801c6de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801c6e2:	4630      	mov	r0, r6
 801c6e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c6e8:	4639      	mov	r1, r7
 801c6ea:	f7e4 f9f7 	bl	8000adc <__aeabi_dcmplt>
 801c6ee:	2800      	cmp	r0, #0
 801c6f0:	f040 8288 	bne.w	801cc04 <_dtoa_r+0x98c>
 801c6f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c6f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c6fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c6fe:	2b00      	cmp	r3, #0
 801c700:	f2c0 8158 	blt.w	801c9b4 <_dtoa_r+0x73c>
 801c704:	f1ba 0f0e 	cmp.w	sl, #14
 801c708:	f300 8154 	bgt.w	801c9b4 <_dtoa_r+0x73c>
 801c70c:	4b6b      	ldr	r3, [pc, #428]	; (801c8bc <_dtoa_r+0x644>)
 801c70e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801c712:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c718:	2b00      	cmp	r3, #0
 801c71a:	f280 80e3 	bge.w	801c8e4 <_dtoa_r+0x66c>
 801c71e:	9b01      	ldr	r3, [sp, #4]
 801c720:	2b00      	cmp	r3, #0
 801c722:	f300 80df 	bgt.w	801c8e4 <_dtoa_r+0x66c>
 801c726:	f040 826d 	bne.w	801cc04 <_dtoa_r+0x98c>
 801c72a:	4b69      	ldr	r3, [pc, #420]	; (801c8d0 <_dtoa_r+0x658>)
 801c72c:	2200      	movs	r2, #0
 801c72e:	4640      	mov	r0, r8
 801c730:	4649      	mov	r1, r9
 801c732:	f7e3 ff61 	bl	80005f8 <__aeabi_dmul>
 801c736:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c73a:	f7e4 f9e3 	bl	8000b04 <__aeabi_dcmpge>
 801c73e:	9e01      	ldr	r6, [sp, #4]
 801c740:	4637      	mov	r7, r6
 801c742:	2800      	cmp	r0, #0
 801c744:	f040 8243 	bne.w	801cbce <_dtoa_r+0x956>
 801c748:	9d00      	ldr	r5, [sp, #0]
 801c74a:	2331      	movs	r3, #49	; 0x31
 801c74c:	f805 3b01 	strb.w	r3, [r5], #1
 801c750:	f10a 0a01 	add.w	sl, sl, #1
 801c754:	e23f      	b.n	801cbd6 <_dtoa_r+0x95e>
 801c756:	07f2      	lsls	r2, r6, #31
 801c758:	d505      	bpl.n	801c766 <_dtoa_r+0x4ee>
 801c75a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c75e:	f7e3 ff4b 	bl	80005f8 <__aeabi_dmul>
 801c762:	3501      	adds	r5, #1
 801c764:	2301      	movs	r3, #1
 801c766:	1076      	asrs	r6, r6, #1
 801c768:	3708      	adds	r7, #8
 801c76a:	e76c      	b.n	801c646 <_dtoa_r+0x3ce>
 801c76c:	2502      	movs	r5, #2
 801c76e:	e76f      	b.n	801c650 <_dtoa_r+0x3d8>
 801c770:	9b01      	ldr	r3, [sp, #4]
 801c772:	f8cd a01c 	str.w	sl, [sp, #28]
 801c776:	930c      	str	r3, [sp, #48]	; 0x30
 801c778:	e78d      	b.n	801c696 <_dtoa_r+0x41e>
 801c77a:	9900      	ldr	r1, [sp, #0]
 801c77c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801c77e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c780:	4b4e      	ldr	r3, [pc, #312]	; (801c8bc <_dtoa_r+0x644>)
 801c782:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c786:	4401      	add	r1, r0
 801c788:	9102      	str	r1, [sp, #8]
 801c78a:	9908      	ldr	r1, [sp, #32]
 801c78c:	eeb0 8a47 	vmov.f32	s16, s14
 801c790:	eef0 8a67 	vmov.f32	s17, s15
 801c794:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c798:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c79c:	2900      	cmp	r1, #0
 801c79e:	d045      	beq.n	801c82c <_dtoa_r+0x5b4>
 801c7a0:	494c      	ldr	r1, [pc, #304]	; (801c8d4 <_dtoa_r+0x65c>)
 801c7a2:	2000      	movs	r0, #0
 801c7a4:	f7e4 f852 	bl	800084c <__aeabi_ddiv>
 801c7a8:	ec53 2b18 	vmov	r2, r3, d8
 801c7ac:	f7e3 fd6c 	bl	8000288 <__aeabi_dsub>
 801c7b0:	9d00      	ldr	r5, [sp, #0]
 801c7b2:	ec41 0b18 	vmov	d8, r0, r1
 801c7b6:	4639      	mov	r1, r7
 801c7b8:	4630      	mov	r0, r6
 801c7ba:	f7e4 f9cd 	bl	8000b58 <__aeabi_d2iz>
 801c7be:	900c      	str	r0, [sp, #48]	; 0x30
 801c7c0:	f7e3 feb0 	bl	8000524 <__aeabi_i2d>
 801c7c4:	4602      	mov	r2, r0
 801c7c6:	460b      	mov	r3, r1
 801c7c8:	4630      	mov	r0, r6
 801c7ca:	4639      	mov	r1, r7
 801c7cc:	f7e3 fd5c 	bl	8000288 <__aeabi_dsub>
 801c7d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c7d2:	3330      	adds	r3, #48	; 0x30
 801c7d4:	f805 3b01 	strb.w	r3, [r5], #1
 801c7d8:	ec53 2b18 	vmov	r2, r3, d8
 801c7dc:	4606      	mov	r6, r0
 801c7de:	460f      	mov	r7, r1
 801c7e0:	f7e4 f97c 	bl	8000adc <__aeabi_dcmplt>
 801c7e4:	2800      	cmp	r0, #0
 801c7e6:	d165      	bne.n	801c8b4 <_dtoa_r+0x63c>
 801c7e8:	4632      	mov	r2, r6
 801c7ea:	463b      	mov	r3, r7
 801c7ec:	4935      	ldr	r1, [pc, #212]	; (801c8c4 <_dtoa_r+0x64c>)
 801c7ee:	2000      	movs	r0, #0
 801c7f0:	f7e3 fd4a 	bl	8000288 <__aeabi_dsub>
 801c7f4:	ec53 2b18 	vmov	r2, r3, d8
 801c7f8:	f7e4 f970 	bl	8000adc <__aeabi_dcmplt>
 801c7fc:	2800      	cmp	r0, #0
 801c7fe:	f040 80b9 	bne.w	801c974 <_dtoa_r+0x6fc>
 801c802:	9b02      	ldr	r3, [sp, #8]
 801c804:	429d      	cmp	r5, r3
 801c806:	f43f af75 	beq.w	801c6f4 <_dtoa_r+0x47c>
 801c80a:	4b2f      	ldr	r3, [pc, #188]	; (801c8c8 <_dtoa_r+0x650>)
 801c80c:	ec51 0b18 	vmov	r0, r1, d8
 801c810:	2200      	movs	r2, #0
 801c812:	f7e3 fef1 	bl	80005f8 <__aeabi_dmul>
 801c816:	4b2c      	ldr	r3, [pc, #176]	; (801c8c8 <_dtoa_r+0x650>)
 801c818:	ec41 0b18 	vmov	d8, r0, r1
 801c81c:	2200      	movs	r2, #0
 801c81e:	4630      	mov	r0, r6
 801c820:	4639      	mov	r1, r7
 801c822:	f7e3 fee9 	bl	80005f8 <__aeabi_dmul>
 801c826:	4606      	mov	r6, r0
 801c828:	460f      	mov	r7, r1
 801c82a:	e7c4      	b.n	801c7b6 <_dtoa_r+0x53e>
 801c82c:	ec51 0b17 	vmov	r0, r1, d7
 801c830:	f7e3 fee2 	bl	80005f8 <__aeabi_dmul>
 801c834:	9b02      	ldr	r3, [sp, #8]
 801c836:	9d00      	ldr	r5, [sp, #0]
 801c838:	930c      	str	r3, [sp, #48]	; 0x30
 801c83a:	ec41 0b18 	vmov	d8, r0, r1
 801c83e:	4639      	mov	r1, r7
 801c840:	4630      	mov	r0, r6
 801c842:	f7e4 f989 	bl	8000b58 <__aeabi_d2iz>
 801c846:	9011      	str	r0, [sp, #68]	; 0x44
 801c848:	f7e3 fe6c 	bl	8000524 <__aeabi_i2d>
 801c84c:	4602      	mov	r2, r0
 801c84e:	460b      	mov	r3, r1
 801c850:	4630      	mov	r0, r6
 801c852:	4639      	mov	r1, r7
 801c854:	f7e3 fd18 	bl	8000288 <__aeabi_dsub>
 801c858:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c85a:	3330      	adds	r3, #48	; 0x30
 801c85c:	f805 3b01 	strb.w	r3, [r5], #1
 801c860:	9b02      	ldr	r3, [sp, #8]
 801c862:	429d      	cmp	r5, r3
 801c864:	4606      	mov	r6, r0
 801c866:	460f      	mov	r7, r1
 801c868:	f04f 0200 	mov.w	r2, #0
 801c86c:	d134      	bne.n	801c8d8 <_dtoa_r+0x660>
 801c86e:	4b19      	ldr	r3, [pc, #100]	; (801c8d4 <_dtoa_r+0x65c>)
 801c870:	ec51 0b18 	vmov	r0, r1, d8
 801c874:	f7e3 fd0a 	bl	800028c <__adddf3>
 801c878:	4602      	mov	r2, r0
 801c87a:	460b      	mov	r3, r1
 801c87c:	4630      	mov	r0, r6
 801c87e:	4639      	mov	r1, r7
 801c880:	f7e4 f94a 	bl	8000b18 <__aeabi_dcmpgt>
 801c884:	2800      	cmp	r0, #0
 801c886:	d175      	bne.n	801c974 <_dtoa_r+0x6fc>
 801c888:	ec53 2b18 	vmov	r2, r3, d8
 801c88c:	4911      	ldr	r1, [pc, #68]	; (801c8d4 <_dtoa_r+0x65c>)
 801c88e:	2000      	movs	r0, #0
 801c890:	f7e3 fcfa 	bl	8000288 <__aeabi_dsub>
 801c894:	4602      	mov	r2, r0
 801c896:	460b      	mov	r3, r1
 801c898:	4630      	mov	r0, r6
 801c89a:	4639      	mov	r1, r7
 801c89c:	f7e4 f91e 	bl	8000adc <__aeabi_dcmplt>
 801c8a0:	2800      	cmp	r0, #0
 801c8a2:	f43f af27 	beq.w	801c6f4 <_dtoa_r+0x47c>
 801c8a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c8a8:	1e6b      	subs	r3, r5, #1
 801c8aa:	930c      	str	r3, [sp, #48]	; 0x30
 801c8ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c8b0:	2b30      	cmp	r3, #48	; 0x30
 801c8b2:	d0f8      	beq.n	801c8a6 <_dtoa_r+0x62e>
 801c8b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801c8b8:	e04a      	b.n	801c950 <_dtoa_r+0x6d8>
 801c8ba:	bf00      	nop
 801c8bc:	08020ae8 	.word	0x08020ae8
 801c8c0:	08020ac0 	.word	0x08020ac0
 801c8c4:	3ff00000 	.word	0x3ff00000
 801c8c8:	40240000 	.word	0x40240000
 801c8cc:	401c0000 	.word	0x401c0000
 801c8d0:	40140000 	.word	0x40140000
 801c8d4:	3fe00000 	.word	0x3fe00000
 801c8d8:	4baf      	ldr	r3, [pc, #700]	; (801cb98 <_dtoa_r+0x920>)
 801c8da:	f7e3 fe8d 	bl	80005f8 <__aeabi_dmul>
 801c8de:	4606      	mov	r6, r0
 801c8e0:	460f      	mov	r7, r1
 801c8e2:	e7ac      	b.n	801c83e <_dtoa_r+0x5c6>
 801c8e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801c8e8:	9d00      	ldr	r5, [sp, #0]
 801c8ea:	4642      	mov	r2, r8
 801c8ec:	464b      	mov	r3, r9
 801c8ee:	4630      	mov	r0, r6
 801c8f0:	4639      	mov	r1, r7
 801c8f2:	f7e3 ffab 	bl	800084c <__aeabi_ddiv>
 801c8f6:	f7e4 f92f 	bl	8000b58 <__aeabi_d2iz>
 801c8fa:	9002      	str	r0, [sp, #8]
 801c8fc:	f7e3 fe12 	bl	8000524 <__aeabi_i2d>
 801c900:	4642      	mov	r2, r8
 801c902:	464b      	mov	r3, r9
 801c904:	f7e3 fe78 	bl	80005f8 <__aeabi_dmul>
 801c908:	4602      	mov	r2, r0
 801c90a:	460b      	mov	r3, r1
 801c90c:	4630      	mov	r0, r6
 801c90e:	4639      	mov	r1, r7
 801c910:	f7e3 fcba 	bl	8000288 <__aeabi_dsub>
 801c914:	9e02      	ldr	r6, [sp, #8]
 801c916:	9f01      	ldr	r7, [sp, #4]
 801c918:	3630      	adds	r6, #48	; 0x30
 801c91a:	f805 6b01 	strb.w	r6, [r5], #1
 801c91e:	9e00      	ldr	r6, [sp, #0]
 801c920:	1bae      	subs	r6, r5, r6
 801c922:	42b7      	cmp	r7, r6
 801c924:	4602      	mov	r2, r0
 801c926:	460b      	mov	r3, r1
 801c928:	d137      	bne.n	801c99a <_dtoa_r+0x722>
 801c92a:	f7e3 fcaf 	bl	800028c <__adddf3>
 801c92e:	4642      	mov	r2, r8
 801c930:	464b      	mov	r3, r9
 801c932:	4606      	mov	r6, r0
 801c934:	460f      	mov	r7, r1
 801c936:	f7e4 f8ef 	bl	8000b18 <__aeabi_dcmpgt>
 801c93a:	b9c8      	cbnz	r0, 801c970 <_dtoa_r+0x6f8>
 801c93c:	4642      	mov	r2, r8
 801c93e:	464b      	mov	r3, r9
 801c940:	4630      	mov	r0, r6
 801c942:	4639      	mov	r1, r7
 801c944:	f7e4 f8c0 	bl	8000ac8 <__aeabi_dcmpeq>
 801c948:	b110      	cbz	r0, 801c950 <_dtoa_r+0x6d8>
 801c94a:	9b02      	ldr	r3, [sp, #8]
 801c94c:	07d9      	lsls	r1, r3, #31
 801c94e:	d40f      	bmi.n	801c970 <_dtoa_r+0x6f8>
 801c950:	4620      	mov	r0, r4
 801c952:	4659      	mov	r1, fp
 801c954:	f000 fe60 	bl	801d618 <_Bfree>
 801c958:	2300      	movs	r3, #0
 801c95a:	702b      	strb	r3, [r5, #0]
 801c95c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c95e:	f10a 0001 	add.w	r0, sl, #1
 801c962:	6018      	str	r0, [r3, #0]
 801c964:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c966:	2b00      	cmp	r3, #0
 801c968:	f43f acd8 	beq.w	801c31c <_dtoa_r+0xa4>
 801c96c:	601d      	str	r5, [r3, #0]
 801c96e:	e4d5      	b.n	801c31c <_dtoa_r+0xa4>
 801c970:	f8cd a01c 	str.w	sl, [sp, #28]
 801c974:	462b      	mov	r3, r5
 801c976:	461d      	mov	r5, r3
 801c978:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c97c:	2a39      	cmp	r2, #57	; 0x39
 801c97e:	d108      	bne.n	801c992 <_dtoa_r+0x71a>
 801c980:	9a00      	ldr	r2, [sp, #0]
 801c982:	429a      	cmp	r2, r3
 801c984:	d1f7      	bne.n	801c976 <_dtoa_r+0x6fe>
 801c986:	9a07      	ldr	r2, [sp, #28]
 801c988:	9900      	ldr	r1, [sp, #0]
 801c98a:	3201      	adds	r2, #1
 801c98c:	9207      	str	r2, [sp, #28]
 801c98e:	2230      	movs	r2, #48	; 0x30
 801c990:	700a      	strb	r2, [r1, #0]
 801c992:	781a      	ldrb	r2, [r3, #0]
 801c994:	3201      	adds	r2, #1
 801c996:	701a      	strb	r2, [r3, #0]
 801c998:	e78c      	b.n	801c8b4 <_dtoa_r+0x63c>
 801c99a:	4b7f      	ldr	r3, [pc, #508]	; (801cb98 <_dtoa_r+0x920>)
 801c99c:	2200      	movs	r2, #0
 801c99e:	f7e3 fe2b 	bl	80005f8 <__aeabi_dmul>
 801c9a2:	2200      	movs	r2, #0
 801c9a4:	2300      	movs	r3, #0
 801c9a6:	4606      	mov	r6, r0
 801c9a8:	460f      	mov	r7, r1
 801c9aa:	f7e4 f88d 	bl	8000ac8 <__aeabi_dcmpeq>
 801c9ae:	2800      	cmp	r0, #0
 801c9b0:	d09b      	beq.n	801c8ea <_dtoa_r+0x672>
 801c9b2:	e7cd      	b.n	801c950 <_dtoa_r+0x6d8>
 801c9b4:	9a08      	ldr	r2, [sp, #32]
 801c9b6:	2a00      	cmp	r2, #0
 801c9b8:	f000 80c4 	beq.w	801cb44 <_dtoa_r+0x8cc>
 801c9bc:	9a05      	ldr	r2, [sp, #20]
 801c9be:	2a01      	cmp	r2, #1
 801c9c0:	f300 80a8 	bgt.w	801cb14 <_dtoa_r+0x89c>
 801c9c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c9c6:	2a00      	cmp	r2, #0
 801c9c8:	f000 80a0 	beq.w	801cb0c <_dtoa_r+0x894>
 801c9cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c9d0:	9e06      	ldr	r6, [sp, #24]
 801c9d2:	4645      	mov	r5, r8
 801c9d4:	9a04      	ldr	r2, [sp, #16]
 801c9d6:	2101      	movs	r1, #1
 801c9d8:	441a      	add	r2, r3
 801c9da:	4620      	mov	r0, r4
 801c9dc:	4498      	add	r8, r3
 801c9de:	9204      	str	r2, [sp, #16]
 801c9e0:	f000 ff20 	bl	801d824 <__i2b>
 801c9e4:	4607      	mov	r7, r0
 801c9e6:	2d00      	cmp	r5, #0
 801c9e8:	dd0b      	ble.n	801ca02 <_dtoa_r+0x78a>
 801c9ea:	9b04      	ldr	r3, [sp, #16]
 801c9ec:	2b00      	cmp	r3, #0
 801c9ee:	dd08      	ble.n	801ca02 <_dtoa_r+0x78a>
 801c9f0:	42ab      	cmp	r3, r5
 801c9f2:	9a04      	ldr	r2, [sp, #16]
 801c9f4:	bfa8      	it	ge
 801c9f6:	462b      	movge	r3, r5
 801c9f8:	eba8 0803 	sub.w	r8, r8, r3
 801c9fc:	1aed      	subs	r5, r5, r3
 801c9fe:	1ad3      	subs	r3, r2, r3
 801ca00:	9304      	str	r3, [sp, #16]
 801ca02:	9b06      	ldr	r3, [sp, #24]
 801ca04:	b1fb      	cbz	r3, 801ca46 <_dtoa_r+0x7ce>
 801ca06:	9b08      	ldr	r3, [sp, #32]
 801ca08:	2b00      	cmp	r3, #0
 801ca0a:	f000 809f 	beq.w	801cb4c <_dtoa_r+0x8d4>
 801ca0e:	2e00      	cmp	r6, #0
 801ca10:	dd11      	ble.n	801ca36 <_dtoa_r+0x7be>
 801ca12:	4639      	mov	r1, r7
 801ca14:	4632      	mov	r2, r6
 801ca16:	4620      	mov	r0, r4
 801ca18:	f000 ffc0 	bl	801d99c <__pow5mult>
 801ca1c:	465a      	mov	r2, fp
 801ca1e:	4601      	mov	r1, r0
 801ca20:	4607      	mov	r7, r0
 801ca22:	4620      	mov	r0, r4
 801ca24:	f000 ff14 	bl	801d850 <__multiply>
 801ca28:	4659      	mov	r1, fp
 801ca2a:	9007      	str	r0, [sp, #28]
 801ca2c:	4620      	mov	r0, r4
 801ca2e:	f000 fdf3 	bl	801d618 <_Bfree>
 801ca32:	9b07      	ldr	r3, [sp, #28]
 801ca34:	469b      	mov	fp, r3
 801ca36:	9b06      	ldr	r3, [sp, #24]
 801ca38:	1b9a      	subs	r2, r3, r6
 801ca3a:	d004      	beq.n	801ca46 <_dtoa_r+0x7ce>
 801ca3c:	4659      	mov	r1, fp
 801ca3e:	4620      	mov	r0, r4
 801ca40:	f000 ffac 	bl	801d99c <__pow5mult>
 801ca44:	4683      	mov	fp, r0
 801ca46:	2101      	movs	r1, #1
 801ca48:	4620      	mov	r0, r4
 801ca4a:	f000 feeb 	bl	801d824 <__i2b>
 801ca4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ca50:	2b00      	cmp	r3, #0
 801ca52:	4606      	mov	r6, r0
 801ca54:	dd7c      	ble.n	801cb50 <_dtoa_r+0x8d8>
 801ca56:	461a      	mov	r2, r3
 801ca58:	4601      	mov	r1, r0
 801ca5a:	4620      	mov	r0, r4
 801ca5c:	f000 ff9e 	bl	801d99c <__pow5mult>
 801ca60:	9b05      	ldr	r3, [sp, #20]
 801ca62:	2b01      	cmp	r3, #1
 801ca64:	4606      	mov	r6, r0
 801ca66:	dd76      	ble.n	801cb56 <_dtoa_r+0x8de>
 801ca68:	2300      	movs	r3, #0
 801ca6a:	9306      	str	r3, [sp, #24]
 801ca6c:	6933      	ldr	r3, [r6, #16]
 801ca6e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801ca72:	6918      	ldr	r0, [r3, #16]
 801ca74:	f000 fe86 	bl	801d784 <__hi0bits>
 801ca78:	f1c0 0020 	rsb	r0, r0, #32
 801ca7c:	9b04      	ldr	r3, [sp, #16]
 801ca7e:	4418      	add	r0, r3
 801ca80:	f010 001f 	ands.w	r0, r0, #31
 801ca84:	f000 8086 	beq.w	801cb94 <_dtoa_r+0x91c>
 801ca88:	f1c0 0320 	rsb	r3, r0, #32
 801ca8c:	2b04      	cmp	r3, #4
 801ca8e:	dd7f      	ble.n	801cb90 <_dtoa_r+0x918>
 801ca90:	f1c0 001c 	rsb	r0, r0, #28
 801ca94:	9b04      	ldr	r3, [sp, #16]
 801ca96:	4403      	add	r3, r0
 801ca98:	4480      	add	r8, r0
 801ca9a:	4405      	add	r5, r0
 801ca9c:	9304      	str	r3, [sp, #16]
 801ca9e:	f1b8 0f00 	cmp.w	r8, #0
 801caa2:	dd05      	ble.n	801cab0 <_dtoa_r+0x838>
 801caa4:	4659      	mov	r1, fp
 801caa6:	4642      	mov	r2, r8
 801caa8:	4620      	mov	r0, r4
 801caaa:	f000 ffd1 	bl	801da50 <__lshift>
 801caae:	4683      	mov	fp, r0
 801cab0:	9b04      	ldr	r3, [sp, #16]
 801cab2:	2b00      	cmp	r3, #0
 801cab4:	dd05      	ble.n	801cac2 <_dtoa_r+0x84a>
 801cab6:	4631      	mov	r1, r6
 801cab8:	461a      	mov	r2, r3
 801caba:	4620      	mov	r0, r4
 801cabc:	f000 ffc8 	bl	801da50 <__lshift>
 801cac0:	4606      	mov	r6, r0
 801cac2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cac4:	2b00      	cmp	r3, #0
 801cac6:	d069      	beq.n	801cb9c <_dtoa_r+0x924>
 801cac8:	4631      	mov	r1, r6
 801caca:	4658      	mov	r0, fp
 801cacc:	f001 f82c 	bl	801db28 <__mcmp>
 801cad0:	2800      	cmp	r0, #0
 801cad2:	da63      	bge.n	801cb9c <_dtoa_r+0x924>
 801cad4:	2300      	movs	r3, #0
 801cad6:	4659      	mov	r1, fp
 801cad8:	220a      	movs	r2, #10
 801cada:	4620      	mov	r0, r4
 801cadc:	f000 fdbe 	bl	801d65c <__multadd>
 801cae0:	9b08      	ldr	r3, [sp, #32]
 801cae2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801cae6:	4683      	mov	fp, r0
 801cae8:	2b00      	cmp	r3, #0
 801caea:	f000 818f 	beq.w	801ce0c <_dtoa_r+0xb94>
 801caee:	4639      	mov	r1, r7
 801caf0:	2300      	movs	r3, #0
 801caf2:	220a      	movs	r2, #10
 801caf4:	4620      	mov	r0, r4
 801caf6:	f000 fdb1 	bl	801d65c <__multadd>
 801cafa:	f1b9 0f00 	cmp.w	r9, #0
 801cafe:	4607      	mov	r7, r0
 801cb00:	f300 808e 	bgt.w	801cc20 <_dtoa_r+0x9a8>
 801cb04:	9b05      	ldr	r3, [sp, #20]
 801cb06:	2b02      	cmp	r3, #2
 801cb08:	dc50      	bgt.n	801cbac <_dtoa_r+0x934>
 801cb0a:	e089      	b.n	801cc20 <_dtoa_r+0x9a8>
 801cb0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cb0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801cb12:	e75d      	b.n	801c9d0 <_dtoa_r+0x758>
 801cb14:	9b01      	ldr	r3, [sp, #4]
 801cb16:	1e5e      	subs	r6, r3, #1
 801cb18:	9b06      	ldr	r3, [sp, #24]
 801cb1a:	42b3      	cmp	r3, r6
 801cb1c:	bfbf      	itttt	lt
 801cb1e:	9b06      	ldrlt	r3, [sp, #24]
 801cb20:	9606      	strlt	r6, [sp, #24]
 801cb22:	1af2      	sublt	r2, r6, r3
 801cb24:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801cb26:	bfb6      	itet	lt
 801cb28:	189b      	addlt	r3, r3, r2
 801cb2a:	1b9e      	subge	r6, r3, r6
 801cb2c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801cb2e:	9b01      	ldr	r3, [sp, #4]
 801cb30:	bfb8      	it	lt
 801cb32:	2600      	movlt	r6, #0
 801cb34:	2b00      	cmp	r3, #0
 801cb36:	bfb5      	itete	lt
 801cb38:	eba8 0503 	sublt.w	r5, r8, r3
 801cb3c:	9b01      	ldrge	r3, [sp, #4]
 801cb3e:	2300      	movlt	r3, #0
 801cb40:	4645      	movge	r5, r8
 801cb42:	e747      	b.n	801c9d4 <_dtoa_r+0x75c>
 801cb44:	9e06      	ldr	r6, [sp, #24]
 801cb46:	9f08      	ldr	r7, [sp, #32]
 801cb48:	4645      	mov	r5, r8
 801cb4a:	e74c      	b.n	801c9e6 <_dtoa_r+0x76e>
 801cb4c:	9a06      	ldr	r2, [sp, #24]
 801cb4e:	e775      	b.n	801ca3c <_dtoa_r+0x7c4>
 801cb50:	9b05      	ldr	r3, [sp, #20]
 801cb52:	2b01      	cmp	r3, #1
 801cb54:	dc18      	bgt.n	801cb88 <_dtoa_r+0x910>
 801cb56:	9b02      	ldr	r3, [sp, #8]
 801cb58:	b9b3      	cbnz	r3, 801cb88 <_dtoa_r+0x910>
 801cb5a:	9b03      	ldr	r3, [sp, #12]
 801cb5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801cb60:	b9a3      	cbnz	r3, 801cb8c <_dtoa_r+0x914>
 801cb62:	9b03      	ldr	r3, [sp, #12]
 801cb64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801cb68:	0d1b      	lsrs	r3, r3, #20
 801cb6a:	051b      	lsls	r3, r3, #20
 801cb6c:	b12b      	cbz	r3, 801cb7a <_dtoa_r+0x902>
 801cb6e:	9b04      	ldr	r3, [sp, #16]
 801cb70:	3301      	adds	r3, #1
 801cb72:	9304      	str	r3, [sp, #16]
 801cb74:	f108 0801 	add.w	r8, r8, #1
 801cb78:	2301      	movs	r3, #1
 801cb7a:	9306      	str	r3, [sp, #24]
 801cb7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cb7e:	2b00      	cmp	r3, #0
 801cb80:	f47f af74 	bne.w	801ca6c <_dtoa_r+0x7f4>
 801cb84:	2001      	movs	r0, #1
 801cb86:	e779      	b.n	801ca7c <_dtoa_r+0x804>
 801cb88:	2300      	movs	r3, #0
 801cb8a:	e7f6      	b.n	801cb7a <_dtoa_r+0x902>
 801cb8c:	9b02      	ldr	r3, [sp, #8]
 801cb8e:	e7f4      	b.n	801cb7a <_dtoa_r+0x902>
 801cb90:	d085      	beq.n	801ca9e <_dtoa_r+0x826>
 801cb92:	4618      	mov	r0, r3
 801cb94:	301c      	adds	r0, #28
 801cb96:	e77d      	b.n	801ca94 <_dtoa_r+0x81c>
 801cb98:	40240000 	.word	0x40240000
 801cb9c:	9b01      	ldr	r3, [sp, #4]
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	dc38      	bgt.n	801cc14 <_dtoa_r+0x99c>
 801cba2:	9b05      	ldr	r3, [sp, #20]
 801cba4:	2b02      	cmp	r3, #2
 801cba6:	dd35      	ble.n	801cc14 <_dtoa_r+0x99c>
 801cba8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801cbac:	f1b9 0f00 	cmp.w	r9, #0
 801cbb0:	d10d      	bne.n	801cbce <_dtoa_r+0x956>
 801cbb2:	4631      	mov	r1, r6
 801cbb4:	464b      	mov	r3, r9
 801cbb6:	2205      	movs	r2, #5
 801cbb8:	4620      	mov	r0, r4
 801cbba:	f000 fd4f 	bl	801d65c <__multadd>
 801cbbe:	4601      	mov	r1, r0
 801cbc0:	4606      	mov	r6, r0
 801cbc2:	4658      	mov	r0, fp
 801cbc4:	f000 ffb0 	bl	801db28 <__mcmp>
 801cbc8:	2800      	cmp	r0, #0
 801cbca:	f73f adbd 	bgt.w	801c748 <_dtoa_r+0x4d0>
 801cbce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cbd0:	9d00      	ldr	r5, [sp, #0]
 801cbd2:	ea6f 0a03 	mvn.w	sl, r3
 801cbd6:	f04f 0800 	mov.w	r8, #0
 801cbda:	4631      	mov	r1, r6
 801cbdc:	4620      	mov	r0, r4
 801cbde:	f000 fd1b 	bl	801d618 <_Bfree>
 801cbe2:	2f00      	cmp	r7, #0
 801cbe4:	f43f aeb4 	beq.w	801c950 <_dtoa_r+0x6d8>
 801cbe8:	f1b8 0f00 	cmp.w	r8, #0
 801cbec:	d005      	beq.n	801cbfa <_dtoa_r+0x982>
 801cbee:	45b8      	cmp	r8, r7
 801cbf0:	d003      	beq.n	801cbfa <_dtoa_r+0x982>
 801cbf2:	4641      	mov	r1, r8
 801cbf4:	4620      	mov	r0, r4
 801cbf6:	f000 fd0f 	bl	801d618 <_Bfree>
 801cbfa:	4639      	mov	r1, r7
 801cbfc:	4620      	mov	r0, r4
 801cbfe:	f000 fd0b 	bl	801d618 <_Bfree>
 801cc02:	e6a5      	b.n	801c950 <_dtoa_r+0x6d8>
 801cc04:	2600      	movs	r6, #0
 801cc06:	4637      	mov	r7, r6
 801cc08:	e7e1      	b.n	801cbce <_dtoa_r+0x956>
 801cc0a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801cc0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801cc10:	4637      	mov	r7, r6
 801cc12:	e599      	b.n	801c748 <_dtoa_r+0x4d0>
 801cc14:	9b08      	ldr	r3, [sp, #32]
 801cc16:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801cc1a:	2b00      	cmp	r3, #0
 801cc1c:	f000 80fd 	beq.w	801ce1a <_dtoa_r+0xba2>
 801cc20:	2d00      	cmp	r5, #0
 801cc22:	dd05      	ble.n	801cc30 <_dtoa_r+0x9b8>
 801cc24:	4639      	mov	r1, r7
 801cc26:	462a      	mov	r2, r5
 801cc28:	4620      	mov	r0, r4
 801cc2a:	f000 ff11 	bl	801da50 <__lshift>
 801cc2e:	4607      	mov	r7, r0
 801cc30:	9b06      	ldr	r3, [sp, #24]
 801cc32:	2b00      	cmp	r3, #0
 801cc34:	d05c      	beq.n	801ccf0 <_dtoa_r+0xa78>
 801cc36:	6879      	ldr	r1, [r7, #4]
 801cc38:	4620      	mov	r0, r4
 801cc3a:	f000 fcad 	bl	801d598 <_Balloc>
 801cc3e:	4605      	mov	r5, r0
 801cc40:	b928      	cbnz	r0, 801cc4e <_dtoa_r+0x9d6>
 801cc42:	4b80      	ldr	r3, [pc, #512]	; (801ce44 <_dtoa_r+0xbcc>)
 801cc44:	4602      	mov	r2, r0
 801cc46:	f240 21ea 	movw	r1, #746	; 0x2ea
 801cc4a:	f7ff bb2e 	b.w	801c2aa <_dtoa_r+0x32>
 801cc4e:	693a      	ldr	r2, [r7, #16]
 801cc50:	3202      	adds	r2, #2
 801cc52:	0092      	lsls	r2, r2, #2
 801cc54:	f107 010c 	add.w	r1, r7, #12
 801cc58:	300c      	adds	r0, #12
 801cc5a:	f7fd fb49 	bl	801a2f0 <memcpy>
 801cc5e:	2201      	movs	r2, #1
 801cc60:	4629      	mov	r1, r5
 801cc62:	4620      	mov	r0, r4
 801cc64:	f000 fef4 	bl	801da50 <__lshift>
 801cc68:	9b00      	ldr	r3, [sp, #0]
 801cc6a:	3301      	adds	r3, #1
 801cc6c:	9301      	str	r3, [sp, #4]
 801cc6e:	9b00      	ldr	r3, [sp, #0]
 801cc70:	444b      	add	r3, r9
 801cc72:	9307      	str	r3, [sp, #28]
 801cc74:	9b02      	ldr	r3, [sp, #8]
 801cc76:	f003 0301 	and.w	r3, r3, #1
 801cc7a:	46b8      	mov	r8, r7
 801cc7c:	9306      	str	r3, [sp, #24]
 801cc7e:	4607      	mov	r7, r0
 801cc80:	9b01      	ldr	r3, [sp, #4]
 801cc82:	4631      	mov	r1, r6
 801cc84:	3b01      	subs	r3, #1
 801cc86:	4658      	mov	r0, fp
 801cc88:	9302      	str	r3, [sp, #8]
 801cc8a:	f7ff fa69 	bl	801c160 <quorem>
 801cc8e:	4603      	mov	r3, r0
 801cc90:	3330      	adds	r3, #48	; 0x30
 801cc92:	9004      	str	r0, [sp, #16]
 801cc94:	4641      	mov	r1, r8
 801cc96:	4658      	mov	r0, fp
 801cc98:	9308      	str	r3, [sp, #32]
 801cc9a:	f000 ff45 	bl	801db28 <__mcmp>
 801cc9e:	463a      	mov	r2, r7
 801cca0:	4681      	mov	r9, r0
 801cca2:	4631      	mov	r1, r6
 801cca4:	4620      	mov	r0, r4
 801cca6:	f000 ff5b 	bl	801db60 <__mdiff>
 801ccaa:	68c2      	ldr	r2, [r0, #12]
 801ccac:	9b08      	ldr	r3, [sp, #32]
 801ccae:	4605      	mov	r5, r0
 801ccb0:	bb02      	cbnz	r2, 801ccf4 <_dtoa_r+0xa7c>
 801ccb2:	4601      	mov	r1, r0
 801ccb4:	4658      	mov	r0, fp
 801ccb6:	f000 ff37 	bl	801db28 <__mcmp>
 801ccba:	9b08      	ldr	r3, [sp, #32]
 801ccbc:	4602      	mov	r2, r0
 801ccbe:	4629      	mov	r1, r5
 801ccc0:	4620      	mov	r0, r4
 801ccc2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801ccc6:	f000 fca7 	bl	801d618 <_Bfree>
 801ccca:	9b05      	ldr	r3, [sp, #20]
 801cccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ccce:	9d01      	ldr	r5, [sp, #4]
 801ccd0:	ea43 0102 	orr.w	r1, r3, r2
 801ccd4:	9b06      	ldr	r3, [sp, #24]
 801ccd6:	430b      	orrs	r3, r1
 801ccd8:	9b08      	ldr	r3, [sp, #32]
 801ccda:	d10d      	bne.n	801ccf8 <_dtoa_r+0xa80>
 801ccdc:	2b39      	cmp	r3, #57	; 0x39
 801ccde:	d029      	beq.n	801cd34 <_dtoa_r+0xabc>
 801cce0:	f1b9 0f00 	cmp.w	r9, #0
 801cce4:	dd01      	ble.n	801ccea <_dtoa_r+0xa72>
 801cce6:	9b04      	ldr	r3, [sp, #16]
 801cce8:	3331      	adds	r3, #49	; 0x31
 801ccea:	9a02      	ldr	r2, [sp, #8]
 801ccec:	7013      	strb	r3, [r2, #0]
 801ccee:	e774      	b.n	801cbda <_dtoa_r+0x962>
 801ccf0:	4638      	mov	r0, r7
 801ccf2:	e7b9      	b.n	801cc68 <_dtoa_r+0x9f0>
 801ccf4:	2201      	movs	r2, #1
 801ccf6:	e7e2      	b.n	801ccbe <_dtoa_r+0xa46>
 801ccf8:	f1b9 0f00 	cmp.w	r9, #0
 801ccfc:	db06      	blt.n	801cd0c <_dtoa_r+0xa94>
 801ccfe:	9905      	ldr	r1, [sp, #20]
 801cd00:	ea41 0909 	orr.w	r9, r1, r9
 801cd04:	9906      	ldr	r1, [sp, #24]
 801cd06:	ea59 0101 	orrs.w	r1, r9, r1
 801cd0a:	d120      	bne.n	801cd4e <_dtoa_r+0xad6>
 801cd0c:	2a00      	cmp	r2, #0
 801cd0e:	ddec      	ble.n	801ccea <_dtoa_r+0xa72>
 801cd10:	4659      	mov	r1, fp
 801cd12:	2201      	movs	r2, #1
 801cd14:	4620      	mov	r0, r4
 801cd16:	9301      	str	r3, [sp, #4]
 801cd18:	f000 fe9a 	bl	801da50 <__lshift>
 801cd1c:	4631      	mov	r1, r6
 801cd1e:	4683      	mov	fp, r0
 801cd20:	f000 ff02 	bl	801db28 <__mcmp>
 801cd24:	2800      	cmp	r0, #0
 801cd26:	9b01      	ldr	r3, [sp, #4]
 801cd28:	dc02      	bgt.n	801cd30 <_dtoa_r+0xab8>
 801cd2a:	d1de      	bne.n	801ccea <_dtoa_r+0xa72>
 801cd2c:	07da      	lsls	r2, r3, #31
 801cd2e:	d5dc      	bpl.n	801ccea <_dtoa_r+0xa72>
 801cd30:	2b39      	cmp	r3, #57	; 0x39
 801cd32:	d1d8      	bne.n	801cce6 <_dtoa_r+0xa6e>
 801cd34:	9a02      	ldr	r2, [sp, #8]
 801cd36:	2339      	movs	r3, #57	; 0x39
 801cd38:	7013      	strb	r3, [r2, #0]
 801cd3a:	462b      	mov	r3, r5
 801cd3c:	461d      	mov	r5, r3
 801cd3e:	3b01      	subs	r3, #1
 801cd40:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801cd44:	2a39      	cmp	r2, #57	; 0x39
 801cd46:	d050      	beq.n	801cdea <_dtoa_r+0xb72>
 801cd48:	3201      	adds	r2, #1
 801cd4a:	701a      	strb	r2, [r3, #0]
 801cd4c:	e745      	b.n	801cbda <_dtoa_r+0x962>
 801cd4e:	2a00      	cmp	r2, #0
 801cd50:	dd03      	ble.n	801cd5a <_dtoa_r+0xae2>
 801cd52:	2b39      	cmp	r3, #57	; 0x39
 801cd54:	d0ee      	beq.n	801cd34 <_dtoa_r+0xabc>
 801cd56:	3301      	adds	r3, #1
 801cd58:	e7c7      	b.n	801ccea <_dtoa_r+0xa72>
 801cd5a:	9a01      	ldr	r2, [sp, #4]
 801cd5c:	9907      	ldr	r1, [sp, #28]
 801cd5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801cd62:	428a      	cmp	r2, r1
 801cd64:	d02a      	beq.n	801cdbc <_dtoa_r+0xb44>
 801cd66:	4659      	mov	r1, fp
 801cd68:	2300      	movs	r3, #0
 801cd6a:	220a      	movs	r2, #10
 801cd6c:	4620      	mov	r0, r4
 801cd6e:	f000 fc75 	bl	801d65c <__multadd>
 801cd72:	45b8      	cmp	r8, r7
 801cd74:	4683      	mov	fp, r0
 801cd76:	f04f 0300 	mov.w	r3, #0
 801cd7a:	f04f 020a 	mov.w	r2, #10
 801cd7e:	4641      	mov	r1, r8
 801cd80:	4620      	mov	r0, r4
 801cd82:	d107      	bne.n	801cd94 <_dtoa_r+0xb1c>
 801cd84:	f000 fc6a 	bl	801d65c <__multadd>
 801cd88:	4680      	mov	r8, r0
 801cd8a:	4607      	mov	r7, r0
 801cd8c:	9b01      	ldr	r3, [sp, #4]
 801cd8e:	3301      	adds	r3, #1
 801cd90:	9301      	str	r3, [sp, #4]
 801cd92:	e775      	b.n	801cc80 <_dtoa_r+0xa08>
 801cd94:	f000 fc62 	bl	801d65c <__multadd>
 801cd98:	4639      	mov	r1, r7
 801cd9a:	4680      	mov	r8, r0
 801cd9c:	2300      	movs	r3, #0
 801cd9e:	220a      	movs	r2, #10
 801cda0:	4620      	mov	r0, r4
 801cda2:	f000 fc5b 	bl	801d65c <__multadd>
 801cda6:	4607      	mov	r7, r0
 801cda8:	e7f0      	b.n	801cd8c <_dtoa_r+0xb14>
 801cdaa:	f1b9 0f00 	cmp.w	r9, #0
 801cdae:	9a00      	ldr	r2, [sp, #0]
 801cdb0:	bfcc      	ite	gt
 801cdb2:	464d      	movgt	r5, r9
 801cdb4:	2501      	movle	r5, #1
 801cdb6:	4415      	add	r5, r2
 801cdb8:	f04f 0800 	mov.w	r8, #0
 801cdbc:	4659      	mov	r1, fp
 801cdbe:	2201      	movs	r2, #1
 801cdc0:	4620      	mov	r0, r4
 801cdc2:	9301      	str	r3, [sp, #4]
 801cdc4:	f000 fe44 	bl	801da50 <__lshift>
 801cdc8:	4631      	mov	r1, r6
 801cdca:	4683      	mov	fp, r0
 801cdcc:	f000 feac 	bl	801db28 <__mcmp>
 801cdd0:	2800      	cmp	r0, #0
 801cdd2:	dcb2      	bgt.n	801cd3a <_dtoa_r+0xac2>
 801cdd4:	d102      	bne.n	801cddc <_dtoa_r+0xb64>
 801cdd6:	9b01      	ldr	r3, [sp, #4]
 801cdd8:	07db      	lsls	r3, r3, #31
 801cdda:	d4ae      	bmi.n	801cd3a <_dtoa_r+0xac2>
 801cddc:	462b      	mov	r3, r5
 801cdde:	461d      	mov	r5, r3
 801cde0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cde4:	2a30      	cmp	r2, #48	; 0x30
 801cde6:	d0fa      	beq.n	801cdde <_dtoa_r+0xb66>
 801cde8:	e6f7      	b.n	801cbda <_dtoa_r+0x962>
 801cdea:	9a00      	ldr	r2, [sp, #0]
 801cdec:	429a      	cmp	r2, r3
 801cdee:	d1a5      	bne.n	801cd3c <_dtoa_r+0xac4>
 801cdf0:	f10a 0a01 	add.w	sl, sl, #1
 801cdf4:	2331      	movs	r3, #49	; 0x31
 801cdf6:	e779      	b.n	801ccec <_dtoa_r+0xa74>
 801cdf8:	4b13      	ldr	r3, [pc, #76]	; (801ce48 <_dtoa_r+0xbd0>)
 801cdfa:	f7ff baaf 	b.w	801c35c <_dtoa_r+0xe4>
 801cdfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	f47f aa86 	bne.w	801c312 <_dtoa_r+0x9a>
 801ce06:	4b11      	ldr	r3, [pc, #68]	; (801ce4c <_dtoa_r+0xbd4>)
 801ce08:	f7ff baa8 	b.w	801c35c <_dtoa_r+0xe4>
 801ce0c:	f1b9 0f00 	cmp.w	r9, #0
 801ce10:	dc03      	bgt.n	801ce1a <_dtoa_r+0xba2>
 801ce12:	9b05      	ldr	r3, [sp, #20]
 801ce14:	2b02      	cmp	r3, #2
 801ce16:	f73f aec9 	bgt.w	801cbac <_dtoa_r+0x934>
 801ce1a:	9d00      	ldr	r5, [sp, #0]
 801ce1c:	4631      	mov	r1, r6
 801ce1e:	4658      	mov	r0, fp
 801ce20:	f7ff f99e 	bl	801c160 <quorem>
 801ce24:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801ce28:	f805 3b01 	strb.w	r3, [r5], #1
 801ce2c:	9a00      	ldr	r2, [sp, #0]
 801ce2e:	1aaa      	subs	r2, r5, r2
 801ce30:	4591      	cmp	r9, r2
 801ce32:	ddba      	ble.n	801cdaa <_dtoa_r+0xb32>
 801ce34:	4659      	mov	r1, fp
 801ce36:	2300      	movs	r3, #0
 801ce38:	220a      	movs	r2, #10
 801ce3a:	4620      	mov	r0, r4
 801ce3c:	f000 fc0e 	bl	801d65c <__multadd>
 801ce40:	4683      	mov	fp, r0
 801ce42:	e7eb      	b.n	801ce1c <_dtoa_r+0xba4>
 801ce44:	080209cc 	.word	0x080209cc
 801ce48:	080207c8 	.word	0x080207c8
 801ce4c:	08020949 	.word	0x08020949

0801ce50 <rshift>:
 801ce50:	6903      	ldr	r3, [r0, #16]
 801ce52:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801ce56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ce5a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801ce5e:	f100 0414 	add.w	r4, r0, #20
 801ce62:	dd45      	ble.n	801cef0 <rshift+0xa0>
 801ce64:	f011 011f 	ands.w	r1, r1, #31
 801ce68:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801ce6c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801ce70:	d10c      	bne.n	801ce8c <rshift+0x3c>
 801ce72:	f100 0710 	add.w	r7, r0, #16
 801ce76:	4629      	mov	r1, r5
 801ce78:	42b1      	cmp	r1, r6
 801ce7a:	d334      	bcc.n	801cee6 <rshift+0x96>
 801ce7c:	1a9b      	subs	r3, r3, r2
 801ce7e:	009b      	lsls	r3, r3, #2
 801ce80:	1eea      	subs	r2, r5, #3
 801ce82:	4296      	cmp	r6, r2
 801ce84:	bf38      	it	cc
 801ce86:	2300      	movcc	r3, #0
 801ce88:	4423      	add	r3, r4
 801ce8a:	e015      	b.n	801ceb8 <rshift+0x68>
 801ce8c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801ce90:	f1c1 0820 	rsb	r8, r1, #32
 801ce94:	40cf      	lsrs	r7, r1
 801ce96:	f105 0e04 	add.w	lr, r5, #4
 801ce9a:	46a1      	mov	r9, r4
 801ce9c:	4576      	cmp	r6, lr
 801ce9e:	46f4      	mov	ip, lr
 801cea0:	d815      	bhi.n	801cece <rshift+0x7e>
 801cea2:	1a9b      	subs	r3, r3, r2
 801cea4:	009a      	lsls	r2, r3, #2
 801cea6:	3a04      	subs	r2, #4
 801cea8:	3501      	adds	r5, #1
 801ceaa:	42ae      	cmp	r6, r5
 801ceac:	bf38      	it	cc
 801ceae:	2200      	movcc	r2, #0
 801ceb0:	18a3      	adds	r3, r4, r2
 801ceb2:	50a7      	str	r7, [r4, r2]
 801ceb4:	b107      	cbz	r7, 801ceb8 <rshift+0x68>
 801ceb6:	3304      	adds	r3, #4
 801ceb8:	1b1a      	subs	r2, r3, r4
 801ceba:	42a3      	cmp	r3, r4
 801cebc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801cec0:	bf08      	it	eq
 801cec2:	2300      	moveq	r3, #0
 801cec4:	6102      	str	r2, [r0, #16]
 801cec6:	bf08      	it	eq
 801cec8:	6143      	streq	r3, [r0, #20]
 801ceca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cece:	f8dc c000 	ldr.w	ip, [ip]
 801ced2:	fa0c fc08 	lsl.w	ip, ip, r8
 801ced6:	ea4c 0707 	orr.w	r7, ip, r7
 801ceda:	f849 7b04 	str.w	r7, [r9], #4
 801cede:	f85e 7b04 	ldr.w	r7, [lr], #4
 801cee2:	40cf      	lsrs	r7, r1
 801cee4:	e7da      	b.n	801ce9c <rshift+0x4c>
 801cee6:	f851 cb04 	ldr.w	ip, [r1], #4
 801ceea:	f847 cf04 	str.w	ip, [r7, #4]!
 801ceee:	e7c3      	b.n	801ce78 <rshift+0x28>
 801cef0:	4623      	mov	r3, r4
 801cef2:	e7e1      	b.n	801ceb8 <rshift+0x68>

0801cef4 <__hexdig_fun>:
 801cef4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801cef8:	2b09      	cmp	r3, #9
 801cefa:	d802      	bhi.n	801cf02 <__hexdig_fun+0xe>
 801cefc:	3820      	subs	r0, #32
 801cefe:	b2c0      	uxtb	r0, r0
 801cf00:	4770      	bx	lr
 801cf02:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801cf06:	2b05      	cmp	r3, #5
 801cf08:	d801      	bhi.n	801cf0e <__hexdig_fun+0x1a>
 801cf0a:	3847      	subs	r0, #71	; 0x47
 801cf0c:	e7f7      	b.n	801cefe <__hexdig_fun+0xa>
 801cf0e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801cf12:	2b05      	cmp	r3, #5
 801cf14:	d801      	bhi.n	801cf1a <__hexdig_fun+0x26>
 801cf16:	3827      	subs	r0, #39	; 0x27
 801cf18:	e7f1      	b.n	801cefe <__hexdig_fun+0xa>
 801cf1a:	2000      	movs	r0, #0
 801cf1c:	4770      	bx	lr
	...

0801cf20 <__gethex>:
 801cf20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf24:	ed2d 8b02 	vpush	{d8}
 801cf28:	b089      	sub	sp, #36	; 0x24
 801cf2a:	ee08 0a10 	vmov	s16, r0
 801cf2e:	9304      	str	r3, [sp, #16]
 801cf30:	4bbc      	ldr	r3, [pc, #752]	; (801d224 <__gethex+0x304>)
 801cf32:	681b      	ldr	r3, [r3, #0]
 801cf34:	9301      	str	r3, [sp, #4]
 801cf36:	4618      	mov	r0, r3
 801cf38:	468b      	mov	fp, r1
 801cf3a:	4690      	mov	r8, r2
 801cf3c:	f7e3 f948 	bl	80001d0 <strlen>
 801cf40:	9b01      	ldr	r3, [sp, #4]
 801cf42:	f8db 2000 	ldr.w	r2, [fp]
 801cf46:	4403      	add	r3, r0
 801cf48:	4682      	mov	sl, r0
 801cf4a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801cf4e:	9305      	str	r3, [sp, #20]
 801cf50:	1c93      	adds	r3, r2, #2
 801cf52:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801cf56:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801cf5a:	32fe      	adds	r2, #254	; 0xfe
 801cf5c:	18d1      	adds	r1, r2, r3
 801cf5e:	461f      	mov	r7, r3
 801cf60:	f813 0b01 	ldrb.w	r0, [r3], #1
 801cf64:	9100      	str	r1, [sp, #0]
 801cf66:	2830      	cmp	r0, #48	; 0x30
 801cf68:	d0f8      	beq.n	801cf5c <__gethex+0x3c>
 801cf6a:	f7ff ffc3 	bl	801cef4 <__hexdig_fun>
 801cf6e:	4604      	mov	r4, r0
 801cf70:	2800      	cmp	r0, #0
 801cf72:	d13a      	bne.n	801cfea <__gethex+0xca>
 801cf74:	9901      	ldr	r1, [sp, #4]
 801cf76:	4652      	mov	r2, sl
 801cf78:	4638      	mov	r0, r7
 801cf7a:	f001 f982 	bl	801e282 <strncmp>
 801cf7e:	4605      	mov	r5, r0
 801cf80:	2800      	cmp	r0, #0
 801cf82:	d168      	bne.n	801d056 <__gethex+0x136>
 801cf84:	f817 000a 	ldrb.w	r0, [r7, sl]
 801cf88:	eb07 060a 	add.w	r6, r7, sl
 801cf8c:	f7ff ffb2 	bl	801cef4 <__hexdig_fun>
 801cf90:	2800      	cmp	r0, #0
 801cf92:	d062      	beq.n	801d05a <__gethex+0x13a>
 801cf94:	4633      	mov	r3, r6
 801cf96:	7818      	ldrb	r0, [r3, #0]
 801cf98:	2830      	cmp	r0, #48	; 0x30
 801cf9a:	461f      	mov	r7, r3
 801cf9c:	f103 0301 	add.w	r3, r3, #1
 801cfa0:	d0f9      	beq.n	801cf96 <__gethex+0x76>
 801cfa2:	f7ff ffa7 	bl	801cef4 <__hexdig_fun>
 801cfa6:	2301      	movs	r3, #1
 801cfa8:	fab0 f480 	clz	r4, r0
 801cfac:	0964      	lsrs	r4, r4, #5
 801cfae:	4635      	mov	r5, r6
 801cfb0:	9300      	str	r3, [sp, #0]
 801cfb2:	463a      	mov	r2, r7
 801cfb4:	4616      	mov	r6, r2
 801cfb6:	3201      	adds	r2, #1
 801cfb8:	7830      	ldrb	r0, [r6, #0]
 801cfba:	f7ff ff9b 	bl	801cef4 <__hexdig_fun>
 801cfbe:	2800      	cmp	r0, #0
 801cfc0:	d1f8      	bne.n	801cfb4 <__gethex+0x94>
 801cfc2:	9901      	ldr	r1, [sp, #4]
 801cfc4:	4652      	mov	r2, sl
 801cfc6:	4630      	mov	r0, r6
 801cfc8:	f001 f95b 	bl	801e282 <strncmp>
 801cfcc:	b980      	cbnz	r0, 801cff0 <__gethex+0xd0>
 801cfce:	b94d      	cbnz	r5, 801cfe4 <__gethex+0xc4>
 801cfd0:	eb06 050a 	add.w	r5, r6, sl
 801cfd4:	462a      	mov	r2, r5
 801cfd6:	4616      	mov	r6, r2
 801cfd8:	3201      	adds	r2, #1
 801cfda:	7830      	ldrb	r0, [r6, #0]
 801cfdc:	f7ff ff8a 	bl	801cef4 <__hexdig_fun>
 801cfe0:	2800      	cmp	r0, #0
 801cfe2:	d1f8      	bne.n	801cfd6 <__gethex+0xb6>
 801cfe4:	1bad      	subs	r5, r5, r6
 801cfe6:	00ad      	lsls	r5, r5, #2
 801cfe8:	e004      	b.n	801cff4 <__gethex+0xd4>
 801cfea:	2400      	movs	r4, #0
 801cfec:	4625      	mov	r5, r4
 801cfee:	e7e0      	b.n	801cfb2 <__gethex+0x92>
 801cff0:	2d00      	cmp	r5, #0
 801cff2:	d1f7      	bne.n	801cfe4 <__gethex+0xc4>
 801cff4:	7833      	ldrb	r3, [r6, #0]
 801cff6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801cffa:	2b50      	cmp	r3, #80	; 0x50
 801cffc:	d13b      	bne.n	801d076 <__gethex+0x156>
 801cffe:	7873      	ldrb	r3, [r6, #1]
 801d000:	2b2b      	cmp	r3, #43	; 0x2b
 801d002:	d02c      	beq.n	801d05e <__gethex+0x13e>
 801d004:	2b2d      	cmp	r3, #45	; 0x2d
 801d006:	d02e      	beq.n	801d066 <__gethex+0x146>
 801d008:	1c71      	adds	r1, r6, #1
 801d00a:	f04f 0900 	mov.w	r9, #0
 801d00e:	7808      	ldrb	r0, [r1, #0]
 801d010:	f7ff ff70 	bl	801cef4 <__hexdig_fun>
 801d014:	1e43      	subs	r3, r0, #1
 801d016:	b2db      	uxtb	r3, r3
 801d018:	2b18      	cmp	r3, #24
 801d01a:	d82c      	bhi.n	801d076 <__gethex+0x156>
 801d01c:	f1a0 0210 	sub.w	r2, r0, #16
 801d020:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801d024:	f7ff ff66 	bl	801cef4 <__hexdig_fun>
 801d028:	1e43      	subs	r3, r0, #1
 801d02a:	b2db      	uxtb	r3, r3
 801d02c:	2b18      	cmp	r3, #24
 801d02e:	d91d      	bls.n	801d06c <__gethex+0x14c>
 801d030:	f1b9 0f00 	cmp.w	r9, #0
 801d034:	d000      	beq.n	801d038 <__gethex+0x118>
 801d036:	4252      	negs	r2, r2
 801d038:	4415      	add	r5, r2
 801d03a:	f8cb 1000 	str.w	r1, [fp]
 801d03e:	b1e4      	cbz	r4, 801d07a <__gethex+0x15a>
 801d040:	9b00      	ldr	r3, [sp, #0]
 801d042:	2b00      	cmp	r3, #0
 801d044:	bf14      	ite	ne
 801d046:	2700      	movne	r7, #0
 801d048:	2706      	moveq	r7, #6
 801d04a:	4638      	mov	r0, r7
 801d04c:	b009      	add	sp, #36	; 0x24
 801d04e:	ecbd 8b02 	vpop	{d8}
 801d052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d056:	463e      	mov	r6, r7
 801d058:	4625      	mov	r5, r4
 801d05a:	2401      	movs	r4, #1
 801d05c:	e7ca      	b.n	801cff4 <__gethex+0xd4>
 801d05e:	f04f 0900 	mov.w	r9, #0
 801d062:	1cb1      	adds	r1, r6, #2
 801d064:	e7d3      	b.n	801d00e <__gethex+0xee>
 801d066:	f04f 0901 	mov.w	r9, #1
 801d06a:	e7fa      	b.n	801d062 <__gethex+0x142>
 801d06c:	230a      	movs	r3, #10
 801d06e:	fb03 0202 	mla	r2, r3, r2, r0
 801d072:	3a10      	subs	r2, #16
 801d074:	e7d4      	b.n	801d020 <__gethex+0x100>
 801d076:	4631      	mov	r1, r6
 801d078:	e7df      	b.n	801d03a <__gethex+0x11a>
 801d07a:	1bf3      	subs	r3, r6, r7
 801d07c:	3b01      	subs	r3, #1
 801d07e:	4621      	mov	r1, r4
 801d080:	2b07      	cmp	r3, #7
 801d082:	dc0b      	bgt.n	801d09c <__gethex+0x17c>
 801d084:	ee18 0a10 	vmov	r0, s16
 801d088:	f000 fa86 	bl	801d598 <_Balloc>
 801d08c:	4604      	mov	r4, r0
 801d08e:	b940      	cbnz	r0, 801d0a2 <__gethex+0x182>
 801d090:	4b65      	ldr	r3, [pc, #404]	; (801d228 <__gethex+0x308>)
 801d092:	4602      	mov	r2, r0
 801d094:	21de      	movs	r1, #222	; 0xde
 801d096:	4865      	ldr	r0, [pc, #404]	; (801d22c <__gethex+0x30c>)
 801d098:	f001 f912 	bl	801e2c0 <__assert_func>
 801d09c:	3101      	adds	r1, #1
 801d09e:	105b      	asrs	r3, r3, #1
 801d0a0:	e7ee      	b.n	801d080 <__gethex+0x160>
 801d0a2:	f100 0914 	add.w	r9, r0, #20
 801d0a6:	f04f 0b00 	mov.w	fp, #0
 801d0aa:	f1ca 0301 	rsb	r3, sl, #1
 801d0ae:	f8cd 9008 	str.w	r9, [sp, #8]
 801d0b2:	f8cd b000 	str.w	fp, [sp]
 801d0b6:	9306      	str	r3, [sp, #24]
 801d0b8:	42b7      	cmp	r7, r6
 801d0ba:	d340      	bcc.n	801d13e <__gethex+0x21e>
 801d0bc:	9802      	ldr	r0, [sp, #8]
 801d0be:	9b00      	ldr	r3, [sp, #0]
 801d0c0:	f840 3b04 	str.w	r3, [r0], #4
 801d0c4:	eba0 0009 	sub.w	r0, r0, r9
 801d0c8:	1080      	asrs	r0, r0, #2
 801d0ca:	0146      	lsls	r6, r0, #5
 801d0cc:	6120      	str	r0, [r4, #16]
 801d0ce:	4618      	mov	r0, r3
 801d0d0:	f000 fb58 	bl	801d784 <__hi0bits>
 801d0d4:	1a30      	subs	r0, r6, r0
 801d0d6:	f8d8 6000 	ldr.w	r6, [r8]
 801d0da:	42b0      	cmp	r0, r6
 801d0dc:	dd63      	ble.n	801d1a6 <__gethex+0x286>
 801d0de:	1b87      	subs	r7, r0, r6
 801d0e0:	4639      	mov	r1, r7
 801d0e2:	4620      	mov	r0, r4
 801d0e4:	f000 fef2 	bl	801decc <__any_on>
 801d0e8:	4682      	mov	sl, r0
 801d0ea:	b1a8      	cbz	r0, 801d118 <__gethex+0x1f8>
 801d0ec:	1e7b      	subs	r3, r7, #1
 801d0ee:	1159      	asrs	r1, r3, #5
 801d0f0:	f003 021f 	and.w	r2, r3, #31
 801d0f4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801d0f8:	f04f 0a01 	mov.w	sl, #1
 801d0fc:	fa0a f202 	lsl.w	r2, sl, r2
 801d100:	420a      	tst	r2, r1
 801d102:	d009      	beq.n	801d118 <__gethex+0x1f8>
 801d104:	4553      	cmp	r3, sl
 801d106:	dd05      	ble.n	801d114 <__gethex+0x1f4>
 801d108:	1eb9      	subs	r1, r7, #2
 801d10a:	4620      	mov	r0, r4
 801d10c:	f000 fede 	bl	801decc <__any_on>
 801d110:	2800      	cmp	r0, #0
 801d112:	d145      	bne.n	801d1a0 <__gethex+0x280>
 801d114:	f04f 0a02 	mov.w	sl, #2
 801d118:	4639      	mov	r1, r7
 801d11a:	4620      	mov	r0, r4
 801d11c:	f7ff fe98 	bl	801ce50 <rshift>
 801d120:	443d      	add	r5, r7
 801d122:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d126:	42ab      	cmp	r3, r5
 801d128:	da4c      	bge.n	801d1c4 <__gethex+0x2a4>
 801d12a:	ee18 0a10 	vmov	r0, s16
 801d12e:	4621      	mov	r1, r4
 801d130:	f000 fa72 	bl	801d618 <_Bfree>
 801d134:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d136:	2300      	movs	r3, #0
 801d138:	6013      	str	r3, [r2, #0]
 801d13a:	27a3      	movs	r7, #163	; 0xa3
 801d13c:	e785      	b.n	801d04a <__gethex+0x12a>
 801d13e:	1e73      	subs	r3, r6, #1
 801d140:	9a05      	ldr	r2, [sp, #20]
 801d142:	9303      	str	r3, [sp, #12]
 801d144:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d148:	4293      	cmp	r3, r2
 801d14a:	d019      	beq.n	801d180 <__gethex+0x260>
 801d14c:	f1bb 0f20 	cmp.w	fp, #32
 801d150:	d107      	bne.n	801d162 <__gethex+0x242>
 801d152:	9b02      	ldr	r3, [sp, #8]
 801d154:	9a00      	ldr	r2, [sp, #0]
 801d156:	f843 2b04 	str.w	r2, [r3], #4
 801d15a:	9302      	str	r3, [sp, #8]
 801d15c:	2300      	movs	r3, #0
 801d15e:	9300      	str	r3, [sp, #0]
 801d160:	469b      	mov	fp, r3
 801d162:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801d166:	f7ff fec5 	bl	801cef4 <__hexdig_fun>
 801d16a:	9b00      	ldr	r3, [sp, #0]
 801d16c:	f000 000f 	and.w	r0, r0, #15
 801d170:	fa00 f00b 	lsl.w	r0, r0, fp
 801d174:	4303      	orrs	r3, r0
 801d176:	9300      	str	r3, [sp, #0]
 801d178:	f10b 0b04 	add.w	fp, fp, #4
 801d17c:	9b03      	ldr	r3, [sp, #12]
 801d17e:	e00d      	b.n	801d19c <__gethex+0x27c>
 801d180:	9b03      	ldr	r3, [sp, #12]
 801d182:	9a06      	ldr	r2, [sp, #24]
 801d184:	4413      	add	r3, r2
 801d186:	42bb      	cmp	r3, r7
 801d188:	d3e0      	bcc.n	801d14c <__gethex+0x22c>
 801d18a:	4618      	mov	r0, r3
 801d18c:	9901      	ldr	r1, [sp, #4]
 801d18e:	9307      	str	r3, [sp, #28]
 801d190:	4652      	mov	r2, sl
 801d192:	f001 f876 	bl	801e282 <strncmp>
 801d196:	9b07      	ldr	r3, [sp, #28]
 801d198:	2800      	cmp	r0, #0
 801d19a:	d1d7      	bne.n	801d14c <__gethex+0x22c>
 801d19c:	461e      	mov	r6, r3
 801d19e:	e78b      	b.n	801d0b8 <__gethex+0x198>
 801d1a0:	f04f 0a03 	mov.w	sl, #3
 801d1a4:	e7b8      	b.n	801d118 <__gethex+0x1f8>
 801d1a6:	da0a      	bge.n	801d1be <__gethex+0x29e>
 801d1a8:	1a37      	subs	r7, r6, r0
 801d1aa:	4621      	mov	r1, r4
 801d1ac:	ee18 0a10 	vmov	r0, s16
 801d1b0:	463a      	mov	r2, r7
 801d1b2:	f000 fc4d 	bl	801da50 <__lshift>
 801d1b6:	1bed      	subs	r5, r5, r7
 801d1b8:	4604      	mov	r4, r0
 801d1ba:	f100 0914 	add.w	r9, r0, #20
 801d1be:	f04f 0a00 	mov.w	sl, #0
 801d1c2:	e7ae      	b.n	801d122 <__gethex+0x202>
 801d1c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801d1c8:	42a8      	cmp	r0, r5
 801d1ca:	dd72      	ble.n	801d2b2 <__gethex+0x392>
 801d1cc:	1b45      	subs	r5, r0, r5
 801d1ce:	42ae      	cmp	r6, r5
 801d1d0:	dc36      	bgt.n	801d240 <__gethex+0x320>
 801d1d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d1d6:	2b02      	cmp	r3, #2
 801d1d8:	d02a      	beq.n	801d230 <__gethex+0x310>
 801d1da:	2b03      	cmp	r3, #3
 801d1dc:	d02c      	beq.n	801d238 <__gethex+0x318>
 801d1de:	2b01      	cmp	r3, #1
 801d1e0:	d115      	bne.n	801d20e <__gethex+0x2ee>
 801d1e2:	42ae      	cmp	r6, r5
 801d1e4:	d113      	bne.n	801d20e <__gethex+0x2ee>
 801d1e6:	2e01      	cmp	r6, #1
 801d1e8:	d10b      	bne.n	801d202 <__gethex+0x2e2>
 801d1ea:	9a04      	ldr	r2, [sp, #16]
 801d1ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d1f0:	6013      	str	r3, [r2, #0]
 801d1f2:	2301      	movs	r3, #1
 801d1f4:	6123      	str	r3, [r4, #16]
 801d1f6:	f8c9 3000 	str.w	r3, [r9]
 801d1fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d1fc:	2762      	movs	r7, #98	; 0x62
 801d1fe:	601c      	str	r4, [r3, #0]
 801d200:	e723      	b.n	801d04a <__gethex+0x12a>
 801d202:	1e71      	subs	r1, r6, #1
 801d204:	4620      	mov	r0, r4
 801d206:	f000 fe61 	bl	801decc <__any_on>
 801d20a:	2800      	cmp	r0, #0
 801d20c:	d1ed      	bne.n	801d1ea <__gethex+0x2ca>
 801d20e:	ee18 0a10 	vmov	r0, s16
 801d212:	4621      	mov	r1, r4
 801d214:	f000 fa00 	bl	801d618 <_Bfree>
 801d218:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d21a:	2300      	movs	r3, #0
 801d21c:	6013      	str	r3, [r2, #0]
 801d21e:	2750      	movs	r7, #80	; 0x50
 801d220:	e713      	b.n	801d04a <__gethex+0x12a>
 801d222:	bf00      	nop
 801d224:	08020a48 	.word	0x08020a48
 801d228:	080209cc 	.word	0x080209cc
 801d22c:	080209dd 	.word	0x080209dd
 801d230:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d232:	2b00      	cmp	r3, #0
 801d234:	d1eb      	bne.n	801d20e <__gethex+0x2ee>
 801d236:	e7d8      	b.n	801d1ea <__gethex+0x2ca>
 801d238:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d23a:	2b00      	cmp	r3, #0
 801d23c:	d1d5      	bne.n	801d1ea <__gethex+0x2ca>
 801d23e:	e7e6      	b.n	801d20e <__gethex+0x2ee>
 801d240:	1e6f      	subs	r7, r5, #1
 801d242:	f1ba 0f00 	cmp.w	sl, #0
 801d246:	d131      	bne.n	801d2ac <__gethex+0x38c>
 801d248:	b127      	cbz	r7, 801d254 <__gethex+0x334>
 801d24a:	4639      	mov	r1, r7
 801d24c:	4620      	mov	r0, r4
 801d24e:	f000 fe3d 	bl	801decc <__any_on>
 801d252:	4682      	mov	sl, r0
 801d254:	117b      	asrs	r3, r7, #5
 801d256:	2101      	movs	r1, #1
 801d258:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801d25c:	f007 071f 	and.w	r7, r7, #31
 801d260:	fa01 f707 	lsl.w	r7, r1, r7
 801d264:	421f      	tst	r7, r3
 801d266:	4629      	mov	r1, r5
 801d268:	4620      	mov	r0, r4
 801d26a:	bf18      	it	ne
 801d26c:	f04a 0a02 	orrne.w	sl, sl, #2
 801d270:	1b76      	subs	r6, r6, r5
 801d272:	f7ff fded 	bl	801ce50 <rshift>
 801d276:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d27a:	2702      	movs	r7, #2
 801d27c:	f1ba 0f00 	cmp.w	sl, #0
 801d280:	d048      	beq.n	801d314 <__gethex+0x3f4>
 801d282:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d286:	2b02      	cmp	r3, #2
 801d288:	d015      	beq.n	801d2b6 <__gethex+0x396>
 801d28a:	2b03      	cmp	r3, #3
 801d28c:	d017      	beq.n	801d2be <__gethex+0x39e>
 801d28e:	2b01      	cmp	r3, #1
 801d290:	d109      	bne.n	801d2a6 <__gethex+0x386>
 801d292:	f01a 0f02 	tst.w	sl, #2
 801d296:	d006      	beq.n	801d2a6 <__gethex+0x386>
 801d298:	f8d9 0000 	ldr.w	r0, [r9]
 801d29c:	ea4a 0a00 	orr.w	sl, sl, r0
 801d2a0:	f01a 0f01 	tst.w	sl, #1
 801d2a4:	d10e      	bne.n	801d2c4 <__gethex+0x3a4>
 801d2a6:	f047 0710 	orr.w	r7, r7, #16
 801d2aa:	e033      	b.n	801d314 <__gethex+0x3f4>
 801d2ac:	f04f 0a01 	mov.w	sl, #1
 801d2b0:	e7d0      	b.n	801d254 <__gethex+0x334>
 801d2b2:	2701      	movs	r7, #1
 801d2b4:	e7e2      	b.n	801d27c <__gethex+0x35c>
 801d2b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d2b8:	f1c3 0301 	rsb	r3, r3, #1
 801d2bc:	9315      	str	r3, [sp, #84]	; 0x54
 801d2be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d2c0:	2b00      	cmp	r3, #0
 801d2c2:	d0f0      	beq.n	801d2a6 <__gethex+0x386>
 801d2c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801d2c8:	f104 0314 	add.w	r3, r4, #20
 801d2cc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801d2d0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801d2d4:	f04f 0c00 	mov.w	ip, #0
 801d2d8:	4618      	mov	r0, r3
 801d2da:	f853 2b04 	ldr.w	r2, [r3], #4
 801d2de:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801d2e2:	d01c      	beq.n	801d31e <__gethex+0x3fe>
 801d2e4:	3201      	adds	r2, #1
 801d2e6:	6002      	str	r2, [r0, #0]
 801d2e8:	2f02      	cmp	r7, #2
 801d2ea:	f104 0314 	add.w	r3, r4, #20
 801d2ee:	d13f      	bne.n	801d370 <__gethex+0x450>
 801d2f0:	f8d8 2000 	ldr.w	r2, [r8]
 801d2f4:	3a01      	subs	r2, #1
 801d2f6:	42b2      	cmp	r2, r6
 801d2f8:	d10a      	bne.n	801d310 <__gethex+0x3f0>
 801d2fa:	1171      	asrs	r1, r6, #5
 801d2fc:	2201      	movs	r2, #1
 801d2fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d302:	f006 061f 	and.w	r6, r6, #31
 801d306:	fa02 f606 	lsl.w	r6, r2, r6
 801d30a:	421e      	tst	r6, r3
 801d30c:	bf18      	it	ne
 801d30e:	4617      	movne	r7, r2
 801d310:	f047 0720 	orr.w	r7, r7, #32
 801d314:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d316:	601c      	str	r4, [r3, #0]
 801d318:	9b04      	ldr	r3, [sp, #16]
 801d31a:	601d      	str	r5, [r3, #0]
 801d31c:	e695      	b.n	801d04a <__gethex+0x12a>
 801d31e:	4299      	cmp	r1, r3
 801d320:	f843 cc04 	str.w	ip, [r3, #-4]
 801d324:	d8d8      	bhi.n	801d2d8 <__gethex+0x3b8>
 801d326:	68a3      	ldr	r3, [r4, #8]
 801d328:	459b      	cmp	fp, r3
 801d32a:	db19      	blt.n	801d360 <__gethex+0x440>
 801d32c:	6861      	ldr	r1, [r4, #4]
 801d32e:	ee18 0a10 	vmov	r0, s16
 801d332:	3101      	adds	r1, #1
 801d334:	f000 f930 	bl	801d598 <_Balloc>
 801d338:	4681      	mov	r9, r0
 801d33a:	b918      	cbnz	r0, 801d344 <__gethex+0x424>
 801d33c:	4b1a      	ldr	r3, [pc, #104]	; (801d3a8 <__gethex+0x488>)
 801d33e:	4602      	mov	r2, r0
 801d340:	2184      	movs	r1, #132	; 0x84
 801d342:	e6a8      	b.n	801d096 <__gethex+0x176>
 801d344:	6922      	ldr	r2, [r4, #16]
 801d346:	3202      	adds	r2, #2
 801d348:	f104 010c 	add.w	r1, r4, #12
 801d34c:	0092      	lsls	r2, r2, #2
 801d34e:	300c      	adds	r0, #12
 801d350:	f7fc ffce 	bl	801a2f0 <memcpy>
 801d354:	4621      	mov	r1, r4
 801d356:	ee18 0a10 	vmov	r0, s16
 801d35a:	f000 f95d 	bl	801d618 <_Bfree>
 801d35e:	464c      	mov	r4, r9
 801d360:	6923      	ldr	r3, [r4, #16]
 801d362:	1c5a      	adds	r2, r3, #1
 801d364:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d368:	6122      	str	r2, [r4, #16]
 801d36a:	2201      	movs	r2, #1
 801d36c:	615a      	str	r2, [r3, #20]
 801d36e:	e7bb      	b.n	801d2e8 <__gethex+0x3c8>
 801d370:	6922      	ldr	r2, [r4, #16]
 801d372:	455a      	cmp	r2, fp
 801d374:	dd0b      	ble.n	801d38e <__gethex+0x46e>
 801d376:	2101      	movs	r1, #1
 801d378:	4620      	mov	r0, r4
 801d37a:	f7ff fd69 	bl	801ce50 <rshift>
 801d37e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d382:	3501      	adds	r5, #1
 801d384:	42ab      	cmp	r3, r5
 801d386:	f6ff aed0 	blt.w	801d12a <__gethex+0x20a>
 801d38a:	2701      	movs	r7, #1
 801d38c:	e7c0      	b.n	801d310 <__gethex+0x3f0>
 801d38e:	f016 061f 	ands.w	r6, r6, #31
 801d392:	d0fa      	beq.n	801d38a <__gethex+0x46a>
 801d394:	449a      	add	sl, r3
 801d396:	f1c6 0620 	rsb	r6, r6, #32
 801d39a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801d39e:	f000 f9f1 	bl	801d784 <__hi0bits>
 801d3a2:	42b0      	cmp	r0, r6
 801d3a4:	dbe7      	blt.n	801d376 <__gethex+0x456>
 801d3a6:	e7f0      	b.n	801d38a <__gethex+0x46a>
 801d3a8:	080209cc 	.word	0x080209cc

0801d3ac <L_shift>:
 801d3ac:	f1c2 0208 	rsb	r2, r2, #8
 801d3b0:	0092      	lsls	r2, r2, #2
 801d3b2:	b570      	push	{r4, r5, r6, lr}
 801d3b4:	f1c2 0620 	rsb	r6, r2, #32
 801d3b8:	6843      	ldr	r3, [r0, #4]
 801d3ba:	6804      	ldr	r4, [r0, #0]
 801d3bc:	fa03 f506 	lsl.w	r5, r3, r6
 801d3c0:	432c      	orrs	r4, r5
 801d3c2:	40d3      	lsrs	r3, r2
 801d3c4:	6004      	str	r4, [r0, #0]
 801d3c6:	f840 3f04 	str.w	r3, [r0, #4]!
 801d3ca:	4288      	cmp	r0, r1
 801d3cc:	d3f4      	bcc.n	801d3b8 <L_shift+0xc>
 801d3ce:	bd70      	pop	{r4, r5, r6, pc}

0801d3d0 <__match>:
 801d3d0:	b530      	push	{r4, r5, lr}
 801d3d2:	6803      	ldr	r3, [r0, #0]
 801d3d4:	3301      	adds	r3, #1
 801d3d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d3da:	b914      	cbnz	r4, 801d3e2 <__match+0x12>
 801d3dc:	6003      	str	r3, [r0, #0]
 801d3de:	2001      	movs	r0, #1
 801d3e0:	bd30      	pop	{r4, r5, pc}
 801d3e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d3e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801d3ea:	2d19      	cmp	r5, #25
 801d3ec:	bf98      	it	ls
 801d3ee:	3220      	addls	r2, #32
 801d3f0:	42a2      	cmp	r2, r4
 801d3f2:	d0f0      	beq.n	801d3d6 <__match+0x6>
 801d3f4:	2000      	movs	r0, #0
 801d3f6:	e7f3      	b.n	801d3e0 <__match+0x10>

0801d3f8 <__hexnan>:
 801d3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3fc:	680b      	ldr	r3, [r1, #0]
 801d3fe:	6801      	ldr	r1, [r0, #0]
 801d400:	115e      	asrs	r6, r3, #5
 801d402:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801d406:	f013 031f 	ands.w	r3, r3, #31
 801d40a:	b087      	sub	sp, #28
 801d40c:	bf18      	it	ne
 801d40e:	3604      	addne	r6, #4
 801d410:	2500      	movs	r5, #0
 801d412:	1f37      	subs	r7, r6, #4
 801d414:	4682      	mov	sl, r0
 801d416:	4690      	mov	r8, r2
 801d418:	9301      	str	r3, [sp, #4]
 801d41a:	f846 5c04 	str.w	r5, [r6, #-4]
 801d41e:	46b9      	mov	r9, r7
 801d420:	463c      	mov	r4, r7
 801d422:	9502      	str	r5, [sp, #8]
 801d424:	46ab      	mov	fp, r5
 801d426:	784a      	ldrb	r2, [r1, #1]
 801d428:	1c4b      	adds	r3, r1, #1
 801d42a:	9303      	str	r3, [sp, #12]
 801d42c:	b342      	cbz	r2, 801d480 <__hexnan+0x88>
 801d42e:	4610      	mov	r0, r2
 801d430:	9105      	str	r1, [sp, #20]
 801d432:	9204      	str	r2, [sp, #16]
 801d434:	f7ff fd5e 	bl	801cef4 <__hexdig_fun>
 801d438:	2800      	cmp	r0, #0
 801d43a:	d14f      	bne.n	801d4dc <__hexnan+0xe4>
 801d43c:	9a04      	ldr	r2, [sp, #16]
 801d43e:	9905      	ldr	r1, [sp, #20]
 801d440:	2a20      	cmp	r2, #32
 801d442:	d818      	bhi.n	801d476 <__hexnan+0x7e>
 801d444:	9b02      	ldr	r3, [sp, #8]
 801d446:	459b      	cmp	fp, r3
 801d448:	dd13      	ble.n	801d472 <__hexnan+0x7a>
 801d44a:	454c      	cmp	r4, r9
 801d44c:	d206      	bcs.n	801d45c <__hexnan+0x64>
 801d44e:	2d07      	cmp	r5, #7
 801d450:	dc04      	bgt.n	801d45c <__hexnan+0x64>
 801d452:	462a      	mov	r2, r5
 801d454:	4649      	mov	r1, r9
 801d456:	4620      	mov	r0, r4
 801d458:	f7ff ffa8 	bl	801d3ac <L_shift>
 801d45c:	4544      	cmp	r4, r8
 801d45e:	d950      	bls.n	801d502 <__hexnan+0x10a>
 801d460:	2300      	movs	r3, #0
 801d462:	f1a4 0904 	sub.w	r9, r4, #4
 801d466:	f844 3c04 	str.w	r3, [r4, #-4]
 801d46a:	f8cd b008 	str.w	fp, [sp, #8]
 801d46e:	464c      	mov	r4, r9
 801d470:	461d      	mov	r5, r3
 801d472:	9903      	ldr	r1, [sp, #12]
 801d474:	e7d7      	b.n	801d426 <__hexnan+0x2e>
 801d476:	2a29      	cmp	r2, #41	; 0x29
 801d478:	d156      	bne.n	801d528 <__hexnan+0x130>
 801d47a:	3102      	adds	r1, #2
 801d47c:	f8ca 1000 	str.w	r1, [sl]
 801d480:	f1bb 0f00 	cmp.w	fp, #0
 801d484:	d050      	beq.n	801d528 <__hexnan+0x130>
 801d486:	454c      	cmp	r4, r9
 801d488:	d206      	bcs.n	801d498 <__hexnan+0xa0>
 801d48a:	2d07      	cmp	r5, #7
 801d48c:	dc04      	bgt.n	801d498 <__hexnan+0xa0>
 801d48e:	462a      	mov	r2, r5
 801d490:	4649      	mov	r1, r9
 801d492:	4620      	mov	r0, r4
 801d494:	f7ff ff8a 	bl	801d3ac <L_shift>
 801d498:	4544      	cmp	r4, r8
 801d49a:	d934      	bls.n	801d506 <__hexnan+0x10e>
 801d49c:	f1a8 0204 	sub.w	r2, r8, #4
 801d4a0:	4623      	mov	r3, r4
 801d4a2:	f853 1b04 	ldr.w	r1, [r3], #4
 801d4a6:	f842 1f04 	str.w	r1, [r2, #4]!
 801d4aa:	429f      	cmp	r7, r3
 801d4ac:	d2f9      	bcs.n	801d4a2 <__hexnan+0xaa>
 801d4ae:	1b3b      	subs	r3, r7, r4
 801d4b0:	f023 0303 	bic.w	r3, r3, #3
 801d4b4:	3304      	adds	r3, #4
 801d4b6:	3401      	adds	r4, #1
 801d4b8:	3e03      	subs	r6, #3
 801d4ba:	42b4      	cmp	r4, r6
 801d4bc:	bf88      	it	hi
 801d4be:	2304      	movhi	r3, #4
 801d4c0:	4443      	add	r3, r8
 801d4c2:	2200      	movs	r2, #0
 801d4c4:	f843 2b04 	str.w	r2, [r3], #4
 801d4c8:	429f      	cmp	r7, r3
 801d4ca:	d2fb      	bcs.n	801d4c4 <__hexnan+0xcc>
 801d4cc:	683b      	ldr	r3, [r7, #0]
 801d4ce:	b91b      	cbnz	r3, 801d4d8 <__hexnan+0xe0>
 801d4d0:	4547      	cmp	r7, r8
 801d4d2:	d127      	bne.n	801d524 <__hexnan+0x12c>
 801d4d4:	2301      	movs	r3, #1
 801d4d6:	603b      	str	r3, [r7, #0]
 801d4d8:	2005      	movs	r0, #5
 801d4da:	e026      	b.n	801d52a <__hexnan+0x132>
 801d4dc:	3501      	adds	r5, #1
 801d4de:	2d08      	cmp	r5, #8
 801d4e0:	f10b 0b01 	add.w	fp, fp, #1
 801d4e4:	dd06      	ble.n	801d4f4 <__hexnan+0xfc>
 801d4e6:	4544      	cmp	r4, r8
 801d4e8:	d9c3      	bls.n	801d472 <__hexnan+0x7a>
 801d4ea:	2300      	movs	r3, #0
 801d4ec:	f844 3c04 	str.w	r3, [r4, #-4]
 801d4f0:	2501      	movs	r5, #1
 801d4f2:	3c04      	subs	r4, #4
 801d4f4:	6822      	ldr	r2, [r4, #0]
 801d4f6:	f000 000f 	and.w	r0, r0, #15
 801d4fa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801d4fe:	6022      	str	r2, [r4, #0]
 801d500:	e7b7      	b.n	801d472 <__hexnan+0x7a>
 801d502:	2508      	movs	r5, #8
 801d504:	e7b5      	b.n	801d472 <__hexnan+0x7a>
 801d506:	9b01      	ldr	r3, [sp, #4]
 801d508:	2b00      	cmp	r3, #0
 801d50a:	d0df      	beq.n	801d4cc <__hexnan+0xd4>
 801d50c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d510:	f1c3 0320 	rsb	r3, r3, #32
 801d514:	fa22 f303 	lsr.w	r3, r2, r3
 801d518:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d51c:	401a      	ands	r2, r3
 801d51e:	f846 2c04 	str.w	r2, [r6, #-4]
 801d522:	e7d3      	b.n	801d4cc <__hexnan+0xd4>
 801d524:	3f04      	subs	r7, #4
 801d526:	e7d1      	b.n	801d4cc <__hexnan+0xd4>
 801d528:	2004      	movs	r0, #4
 801d52a:	b007      	add	sp, #28
 801d52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d530 <_localeconv_r>:
 801d530:	4800      	ldr	r0, [pc, #0]	; (801d534 <_localeconv_r+0x4>)
 801d532:	4770      	bx	lr
 801d534:	200001e4 	.word	0x200001e4

0801d538 <_lseek_r>:
 801d538:	b538      	push	{r3, r4, r5, lr}
 801d53a:	4d07      	ldr	r5, [pc, #28]	; (801d558 <_lseek_r+0x20>)
 801d53c:	4604      	mov	r4, r0
 801d53e:	4608      	mov	r0, r1
 801d540:	4611      	mov	r1, r2
 801d542:	2200      	movs	r2, #0
 801d544:	602a      	str	r2, [r5, #0]
 801d546:	461a      	mov	r2, r3
 801d548:	f7ef f802 	bl	800c550 <_lseek>
 801d54c:	1c43      	adds	r3, r0, #1
 801d54e:	d102      	bne.n	801d556 <_lseek_r+0x1e>
 801d550:	682b      	ldr	r3, [r5, #0]
 801d552:	b103      	cbz	r3, 801d556 <_lseek_r+0x1e>
 801d554:	6023      	str	r3, [r4, #0]
 801d556:	bd38      	pop	{r3, r4, r5, pc}
 801d558:	2000aaa4 	.word	0x2000aaa4

0801d55c <__ascii_mbtowc>:
 801d55c:	b082      	sub	sp, #8
 801d55e:	b901      	cbnz	r1, 801d562 <__ascii_mbtowc+0x6>
 801d560:	a901      	add	r1, sp, #4
 801d562:	b142      	cbz	r2, 801d576 <__ascii_mbtowc+0x1a>
 801d564:	b14b      	cbz	r3, 801d57a <__ascii_mbtowc+0x1e>
 801d566:	7813      	ldrb	r3, [r2, #0]
 801d568:	600b      	str	r3, [r1, #0]
 801d56a:	7812      	ldrb	r2, [r2, #0]
 801d56c:	1e10      	subs	r0, r2, #0
 801d56e:	bf18      	it	ne
 801d570:	2001      	movne	r0, #1
 801d572:	b002      	add	sp, #8
 801d574:	4770      	bx	lr
 801d576:	4610      	mov	r0, r2
 801d578:	e7fb      	b.n	801d572 <__ascii_mbtowc+0x16>
 801d57a:	f06f 0001 	mvn.w	r0, #1
 801d57e:	e7f8      	b.n	801d572 <__ascii_mbtowc+0x16>

0801d580 <__malloc_lock>:
 801d580:	4801      	ldr	r0, [pc, #4]	; (801d588 <__malloc_lock+0x8>)
 801d582:	f001 b885 	b.w	801e690 <__retarget_lock_acquire_recursive>
 801d586:	bf00      	nop
 801d588:	2000aaac 	.word	0x2000aaac

0801d58c <__malloc_unlock>:
 801d58c:	4801      	ldr	r0, [pc, #4]	; (801d594 <__malloc_unlock+0x8>)
 801d58e:	f001 b880 	b.w	801e692 <__retarget_lock_release_recursive>
 801d592:	bf00      	nop
 801d594:	2000aaac 	.word	0x2000aaac

0801d598 <_Balloc>:
 801d598:	b570      	push	{r4, r5, r6, lr}
 801d59a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d59c:	4604      	mov	r4, r0
 801d59e:	460d      	mov	r5, r1
 801d5a0:	b976      	cbnz	r6, 801d5c0 <_Balloc+0x28>
 801d5a2:	2010      	movs	r0, #16
 801d5a4:	f7fc fe9c 	bl	801a2e0 <malloc>
 801d5a8:	4602      	mov	r2, r0
 801d5aa:	6260      	str	r0, [r4, #36]	; 0x24
 801d5ac:	b920      	cbnz	r0, 801d5b8 <_Balloc+0x20>
 801d5ae:	4b18      	ldr	r3, [pc, #96]	; (801d610 <_Balloc+0x78>)
 801d5b0:	4818      	ldr	r0, [pc, #96]	; (801d614 <_Balloc+0x7c>)
 801d5b2:	2166      	movs	r1, #102	; 0x66
 801d5b4:	f000 fe84 	bl	801e2c0 <__assert_func>
 801d5b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d5bc:	6006      	str	r6, [r0, #0]
 801d5be:	60c6      	str	r6, [r0, #12]
 801d5c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801d5c2:	68f3      	ldr	r3, [r6, #12]
 801d5c4:	b183      	cbz	r3, 801d5e8 <_Balloc+0x50>
 801d5c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d5c8:	68db      	ldr	r3, [r3, #12]
 801d5ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d5ce:	b9b8      	cbnz	r0, 801d600 <_Balloc+0x68>
 801d5d0:	2101      	movs	r1, #1
 801d5d2:	fa01 f605 	lsl.w	r6, r1, r5
 801d5d6:	1d72      	adds	r2, r6, #5
 801d5d8:	0092      	lsls	r2, r2, #2
 801d5da:	4620      	mov	r0, r4
 801d5dc:	f000 fc97 	bl	801df0e <_calloc_r>
 801d5e0:	b160      	cbz	r0, 801d5fc <_Balloc+0x64>
 801d5e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d5e6:	e00e      	b.n	801d606 <_Balloc+0x6e>
 801d5e8:	2221      	movs	r2, #33	; 0x21
 801d5ea:	2104      	movs	r1, #4
 801d5ec:	4620      	mov	r0, r4
 801d5ee:	f000 fc8e 	bl	801df0e <_calloc_r>
 801d5f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d5f4:	60f0      	str	r0, [r6, #12]
 801d5f6:	68db      	ldr	r3, [r3, #12]
 801d5f8:	2b00      	cmp	r3, #0
 801d5fa:	d1e4      	bne.n	801d5c6 <_Balloc+0x2e>
 801d5fc:	2000      	movs	r0, #0
 801d5fe:	bd70      	pop	{r4, r5, r6, pc}
 801d600:	6802      	ldr	r2, [r0, #0]
 801d602:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d606:	2300      	movs	r3, #0
 801d608:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d60c:	e7f7      	b.n	801d5fe <_Balloc+0x66>
 801d60e:	bf00      	nop
 801d610:	08020956 	.word	0x08020956
 801d614:	08020a5c 	.word	0x08020a5c

0801d618 <_Bfree>:
 801d618:	b570      	push	{r4, r5, r6, lr}
 801d61a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d61c:	4605      	mov	r5, r0
 801d61e:	460c      	mov	r4, r1
 801d620:	b976      	cbnz	r6, 801d640 <_Bfree+0x28>
 801d622:	2010      	movs	r0, #16
 801d624:	f7fc fe5c 	bl	801a2e0 <malloc>
 801d628:	4602      	mov	r2, r0
 801d62a:	6268      	str	r0, [r5, #36]	; 0x24
 801d62c:	b920      	cbnz	r0, 801d638 <_Bfree+0x20>
 801d62e:	4b09      	ldr	r3, [pc, #36]	; (801d654 <_Bfree+0x3c>)
 801d630:	4809      	ldr	r0, [pc, #36]	; (801d658 <_Bfree+0x40>)
 801d632:	218a      	movs	r1, #138	; 0x8a
 801d634:	f000 fe44 	bl	801e2c0 <__assert_func>
 801d638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d63c:	6006      	str	r6, [r0, #0]
 801d63e:	60c6      	str	r6, [r0, #12]
 801d640:	b13c      	cbz	r4, 801d652 <_Bfree+0x3a>
 801d642:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801d644:	6862      	ldr	r2, [r4, #4]
 801d646:	68db      	ldr	r3, [r3, #12]
 801d648:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d64c:	6021      	str	r1, [r4, #0]
 801d64e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d652:	bd70      	pop	{r4, r5, r6, pc}
 801d654:	08020956 	.word	0x08020956
 801d658:	08020a5c 	.word	0x08020a5c

0801d65c <__multadd>:
 801d65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d660:	690e      	ldr	r6, [r1, #16]
 801d662:	4607      	mov	r7, r0
 801d664:	4698      	mov	r8, r3
 801d666:	460c      	mov	r4, r1
 801d668:	f101 0014 	add.w	r0, r1, #20
 801d66c:	2300      	movs	r3, #0
 801d66e:	6805      	ldr	r5, [r0, #0]
 801d670:	b2a9      	uxth	r1, r5
 801d672:	fb02 8101 	mla	r1, r2, r1, r8
 801d676:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801d67a:	0c2d      	lsrs	r5, r5, #16
 801d67c:	fb02 c505 	mla	r5, r2, r5, ip
 801d680:	b289      	uxth	r1, r1
 801d682:	3301      	adds	r3, #1
 801d684:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801d688:	429e      	cmp	r6, r3
 801d68a:	f840 1b04 	str.w	r1, [r0], #4
 801d68e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801d692:	dcec      	bgt.n	801d66e <__multadd+0x12>
 801d694:	f1b8 0f00 	cmp.w	r8, #0
 801d698:	d022      	beq.n	801d6e0 <__multadd+0x84>
 801d69a:	68a3      	ldr	r3, [r4, #8]
 801d69c:	42b3      	cmp	r3, r6
 801d69e:	dc19      	bgt.n	801d6d4 <__multadd+0x78>
 801d6a0:	6861      	ldr	r1, [r4, #4]
 801d6a2:	4638      	mov	r0, r7
 801d6a4:	3101      	adds	r1, #1
 801d6a6:	f7ff ff77 	bl	801d598 <_Balloc>
 801d6aa:	4605      	mov	r5, r0
 801d6ac:	b928      	cbnz	r0, 801d6ba <__multadd+0x5e>
 801d6ae:	4602      	mov	r2, r0
 801d6b0:	4b0d      	ldr	r3, [pc, #52]	; (801d6e8 <__multadd+0x8c>)
 801d6b2:	480e      	ldr	r0, [pc, #56]	; (801d6ec <__multadd+0x90>)
 801d6b4:	21b5      	movs	r1, #181	; 0xb5
 801d6b6:	f000 fe03 	bl	801e2c0 <__assert_func>
 801d6ba:	6922      	ldr	r2, [r4, #16]
 801d6bc:	3202      	adds	r2, #2
 801d6be:	f104 010c 	add.w	r1, r4, #12
 801d6c2:	0092      	lsls	r2, r2, #2
 801d6c4:	300c      	adds	r0, #12
 801d6c6:	f7fc fe13 	bl	801a2f0 <memcpy>
 801d6ca:	4621      	mov	r1, r4
 801d6cc:	4638      	mov	r0, r7
 801d6ce:	f7ff ffa3 	bl	801d618 <_Bfree>
 801d6d2:	462c      	mov	r4, r5
 801d6d4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801d6d8:	3601      	adds	r6, #1
 801d6da:	f8c3 8014 	str.w	r8, [r3, #20]
 801d6de:	6126      	str	r6, [r4, #16]
 801d6e0:	4620      	mov	r0, r4
 801d6e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d6e6:	bf00      	nop
 801d6e8:	080209cc 	.word	0x080209cc
 801d6ec:	08020a5c 	.word	0x08020a5c

0801d6f0 <__s2b>:
 801d6f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d6f4:	460c      	mov	r4, r1
 801d6f6:	4615      	mov	r5, r2
 801d6f8:	461f      	mov	r7, r3
 801d6fa:	2209      	movs	r2, #9
 801d6fc:	3308      	adds	r3, #8
 801d6fe:	4606      	mov	r6, r0
 801d700:	fb93 f3f2 	sdiv	r3, r3, r2
 801d704:	2100      	movs	r1, #0
 801d706:	2201      	movs	r2, #1
 801d708:	429a      	cmp	r2, r3
 801d70a:	db09      	blt.n	801d720 <__s2b+0x30>
 801d70c:	4630      	mov	r0, r6
 801d70e:	f7ff ff43 	bl	801d598 <_Balloc>
 801d712:	b940      	cbnz	r0, 801d726 <__s2b+0x36>
 801d714:	4602      	mov	r2, r0
 801d716:	4b19      	ldr	r3, [pc, #100]	; (801d77c <__s2b+0x8c>)
 801d718:	4819      	ldr	r0, [pc, #100]	; (801d780 <__s2b+0x90>)
 801d71a:	21ce      	movs	r1, #206	; 0xce
 801d71c:	f000 fdd0 	bl	801e2c0 <__assert_func>
 801d720:	0052      	lsls	r2, r2, #1
 801d722:	3101      	adds	r1, #1
 801d724:	e7f0      	b.n	801d708 <__s2b+0x18>
 801d726:	9b08      	ldr	r3, [sp, #32]
 801d728:	6143      	str	r3, [r0, #20]
 801d72a:	2d09      	cmp	r5, #9
 801d72c:	f04f 0301 	mov.w	r3, #1
 801d730:	6103      	str	r3, [r0, #16]
 801d732:	dd16      	ble.n	801d762 <__s2b+0x72>
 801d734:	f104 0909 	add.w	r9, r4, #9
 801d738:	46c8      	mov	r8, r9
 801d73a:	442c      	add	r4, r5
 801d73c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801d740:	4601      	mov	r1, r0
 801d742:	3b30      	subs	r3, #48	; 0x30
 801d744:	220a      	movs	r2, #10
 801d746:	4630      	mov	r0, r6
 801d748:	f7ff ff88 	bl	801d65c <__multadd>
 801d74c:	45a0      	cmp	r8, r4
 801d74e:	d1f5      	bne.n	801d73c <__s2b+0x4c>
 801d750:	f1a5 0408 	sub.w	r4, r5, #8
 801d754:	444c      	add	r4, r9
 801d756:	1b2d      	subs	r5, r5, r4
 801d758:	1963      	adds	r3, r4, r5
 801d75a:	42bb      	cmp	r3, r7
 801d75c:	db04      	blt.n	801d768 <__s2b+0x78>
 801d75e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d762:	340a      	adds	r4, #10
 801d764:	2509      	movs	r5, #9
 801d766:	e7f6      	b.n	801d756 <__s2b+0x66>
 801d768:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d76c:	4601      	mov	r1, r0
 801d76e:	3b30      	subs	r3, #48	; 0x30
 801d770:	220a      	movs	r2, #10
 801d772:	4630      	mov	r0, r6
 801d774:	f7ff ff72 	bl	801d65c <__multadd>
 801d778:	e7ee      	b.n	801d758 <__s2b+0x68>
 801d77a:	bf00      	nop
 801d77c:	080209cc 	.word	0x080209cc
 801d780:	08020a5c 	.word	0x08020a5c

0801d784 <__hi0bits>:
 801d784:	0c03      	lsrs	r3, r0, #16
 801d786:	041b      	lsls	r3, r3, #16
 801d788:	b9d3      	cbnz	r3, 801d7c0 <__hi0bits+0x3c>
 801d78a:	0400      	lsls	r0, r0, #16
 801d78c:	2310      	movs	r3, #16
 801d78e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801d792:	bf04      	itt	eq
 801d794:	0200      	lsleq	r0, r0, #8
 801d796:	3308      	addeq	r3, #8
 801d798:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d79c:	bf04      	itt	eq
 801d79e:	0100      	lsleq	r0, r0, #4
 801d7a0:	3304      	addeq	r3, #4
 801d7a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d7a6:	bf04      	itt	eq
 801d7a8:	0080      	lsleq	r0, r0, #2
 801d7aa:	3302      	addeq	r3, #2
 801d7ac:	2800      	cmp	r0, #0
 801d7ae:	db05      	blt.n	801d7bc <__hi0bits+0x38>
 801d7b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801d7b4:	f103 0301 	add.w	r3, r3, #1
 801d7b8:	bf08      	it	eq
 801d7ba:	2320      	moveq	r3, #32
 801d7bc:	4618      	mov	r0, r3
 801d7be:	4770      	bx	lr
 801d7c0:	2300      	movs	r3, #0
 801d7c2:	e7e4      	b.n	801d78e <__hi0bits+0xa>

0801d7c4 <__lo0bits>:
 801d7c4:	6803      	ldr	r3, [r0, #0]
 801d7c6:	f013 0207 	ands.w	r2, r3, #7
 801d7ca:	4601      	mov	r1, r0
 801d7cc:	d00b      	beq.n	801d7e6 <__lo0bits+0x22>
 801d7ce:	07da      	lsls	r2, r3, #31
 801d7d0:	d424      	bmi.n	801d81c <__lo0bits+0x58>
 801d7d2:	0798      	lsls	r0, r3, #30
 801d7d4:	bf49      	itett	mi
 801d7d6:	085b      	lsrmi	r3, r3, #1
 801d7d8:	089b      	lsrpl	r3, r3, #2
 801d7da:	2001      	movmi	r0, #1
 801d7dc:	600b      	strmi	r3, [r1, #0]
 801d7de:	bf5c      	itt	pl
 801d7e0:	600b      	strpl	r3, [r1, #0]
 801d7e2:	2002      	movpl	r0, #2
 801d7e4:	4770      	bx	lr
 801d7e6:	b298      	uxth	r0, r3
 801d7e8:	b9b0      	cbnz	r0, 801d818 <__lo0bits+0x54>
 801d7ea:	0c1b      	lsrs	r3, r3, #16
 801d7ec:	2010      	movs	r0, #16
 801d7ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 801d7f2:	bf04      	itt	eq
 801d7f4:	0a1b      	lsreq	r3, r3, #8
 801d7f6:	3008      	addeq	r0, #8
 801d7f8:	071a      	lsls	r2, r3, #28
 801d7fa:	bf04      	itt	eq
 801d7fc:	091b      	lsreq	r3, r3, #4
 801d7fe:	3004      	addeq	r0, #4
 801d800:	079a      	lsls	r2, r3, #30
 801d802:	bf04      	itt	eq
 801d804:	089b      	lsreq	r3, r3, #2
 801d806:	3002      	addeq	r0, #2
 801d808:	07da      	lsls	r2, r3, #31
 801d80a:	d403      	bmi.n	801d814 <__lo0bits+0x50>
 801d80c:	085b      	lsrs	r3, r3, #1
 801d80e:	f100 0001 	add.w	r0, r0, #1
 801d812:	d005      	beq.n	801d820 <__lo0bits+0x5c>
 801d814:	600b      	str	r3, [r1, #0]
 801d816:	4770      	bx	lr
 801d818:	4610      	mov	r0, r2
 801d81a:	e7e8      	b.n	801d7ee <__lo0bits+0x2a>
 801d81c:	2000      	movs	r0, #0
 801d81e:	4770      	bx	lr
 801d820:	2020      	movs	r0, #32
 801d822:	4770      	bx	lr

0801d824 <__i2b>:
 801d824:	b510      	push	{r4, lr}
 801d826:	460c      	mov	r4, r1
 801d828:	2101      	movs	r1, #1
 801d82a:	f7ff feb5 	bl	801d598 <_Balloc>
 801d82e:	4602      	mov	r2, r0
 801d830:	b928      	cbnz	r0, 801d83e <__i2b+0x1a>
 801d832:	4b05      	ldr	r3, [pc, #20]	; (801d848 <__i2b+0x24>)
 801d834:	4805      	ldr	r0, [pc, #20]	; (801d84c <__i2b+0x28>)
 801d836:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801d83a:	f000 fd41 	bl	801e2c0 <__assert_func>
 801d83e:	2301      	movs	r3, #1
 801d840:	6144      	str	r4, [r0, #20]
 801d842:	6103      	str	r3, [r0, #16]
 801d844:	bd10      	pop	{r4, pc}
 801d846:	bf00      	nop
 801d848:	080209cc 	.word	0x080209cc
 801d84c:	08020a5c 	.word	0x08020a5c

0801d850 <__multiply>:
 801d850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d854:	4614      	mov	r4, r2
 801d856:	690a      	ldr	r2, [r1, #16]
 801d858:	6923      	ldr	r3, [r4, #16]
 801d85a:	429a      	cmp	r2, r3
 801d85c:	bfb8      	it	lt
 801d85e:	460b      	movlt	r3, r1
 801d860:	460d      	mov	r5, r1
 801d862:	bfbc      	itt	lt
 801d864:	4625      	movlt	r5, r4
 801d866:	461c      	movlt	r4, r3
 801d868:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801d86c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801d870:	68ab      	ldr	r3, [r5, #8]
 801d872:	6869      	ldr	r1, [r5, #4]
 801d874:	eb0a 0709 	add.w	r7, sl, r9
 801d878:	42bb      	cmp	r3, r7
 801d87a:	b085      	sub	sp, #20
 801d87c:	bfb8      	it	lt
 801d87e:	3101      	addlt	r1, #1
 801d880:	f7ff fe8a 	bl	801d598 <_Balloc>
 801d884:	b930      	cbnz	r0, 801d894 <__multiply+0x44>
 801d886:	4602      	mov	r2, r0
 801d888:	4b42      	ldr	r3, [pc, #264]	; (801d994 <__multiply+0x144>)
 801d88a:	4843      	ldr	r0, [pc, #268]	; (801d998 <__multiply+0x148>)
 801d88c:	f240 115d 	movw	r1, #349	; 0x15d
 801d890:	f000 fd16 	bl	801e2c0 <__assert_func>
 801d894:	f100 0614 	add.w	r6, r0, #20
 801d898:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801d89c:	4633      	mov	r3, r6
 801d89e:	2200      	movs	r2, #0
 801d8a0:	4543      	cmp	r3, r8
 801d8a2:	d31e      	bcc.n	801d8e2 <__multiply+0x92>
 801d8a4:	f105 0c14 	add.w	ip, r5, #20
 801d8a8:	f104 0314 	add.w	r3, r4, #20
 801d8ac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801d8b0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801d8b4:	9202      	str	r2, [sp, #8]
 801d8b6:	ebac 0205 	sub.w	r2, ip, r5
 801d8ba:	3a15      	subs	r2, #21
 801d8bc:	f022 0203 	bic.w	r2, r2, #3
 801d8c0:	3204      	adds	r2, #4
 801d8c2:	f105 0115 	add.w	r1, r5, #21
 801d8c6:	458c      	cmp	ip, r1
 801d8c8:	bf38      	it	cc
 801d8ca:	2204      	movcc	r2, #4
 801d8cc:	9201      	str	r2, [sp, #4]
 801d8ce:	9a02      	ldr	r2, [sp, #8]
 801d8d0:	9303      	str	r3, [sp, #12]
 801d8d2:	429a      	cmp	r2, r3
 801d8d4:	d808      	bhi.n	801d8e8 <__multiply+0x98>
 801d8d6:	2f00      	cmp	r7, #0
 801d8d8:	dc55      	bgt.n	801d986 <__multiply+0x136>
 801d8da:	6107      	str	r7, [r0, #16]
 801d8dc:	b005      	add	sp, #20
 801d8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8e2:	f843 2b04 	str.w	r2, [r3], #4
 801d8e6:	e7db      	b.n	801d8a0 <__multiply+0x50>
 801d8e8:	f8b3 a000 	ldrh.w	sl, [r3]
 801d8ec:	f1ba 0f00 	cmp.w	sl, #0
 801d8f0:	d020      	beq.n	801d934 <__multiply+0xe4>
 801d8f2:	f105 0e14 	add.w	lr, r5, #20
 801d8f6:	46b1      	mov	r9, r6
 801d8f8:	2200      	movs	r2, #0
 801d8fa:	f85e 4b04 	ldr.w	r4, [lr], #4
 801d8fe:	f8d9 b000 	ldr.w	fp, [r9]
 801d902:	b2a1      	uxth	r1, r4
 801d904:	fa1f fb8b 	uxth.w	fp, fp
 801d908:	fb0a b101 	mla	r1, sl, r1, fp
 801d90c:	4411      	add	r1, r2
 801d90e:	f8d9 2000 	ldr.w	r2, [r9]
 801d912:	0c24      	lsrs	r4, r4, #16
 801d914:	0c12      	lsrs	r2, r2, #16
 801d916:	fb0a 2404 	mla	r4, sl, r4, r2
 801d91a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801d91e:	b289      	uxth	r1, r1
 801d920:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801d924:	45f4      	cmp	ip, lr
 801d926:	f849 1b04 	str.w	r1, [r9], #4
 801d92a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801d92e:	d8e4      	bhi.n	801d8fa <__multiply+0xaa>
 801d930:	9901      	ldr	r1, [sp, #4]
 801d932:	5072      	str	r2, [r6, r1]
 801d934:	9a03      	ldr	r2, [sp, #12]
 801d936:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d93a:	3304      	adds	r3, #4
 801d93c:	f1b9 0f00 	cmp.w	r9, #0
 801d940:	d01f      	beq.n	801d982 <__multiply+0x132>
 801d942:	6834      	ldr	r4, [r6, #0]
 801d944:	f105 0114 	add.w	r1, r5, #20
 801d948:	46b6      	mov	lr, r6
 801d94a:	f04f 0a00 	mov.w	sl, #0
 801d94e:	880a      	ldrh	r2, [r1, #0]
 801d950:	f8be b002 	ldrh.w	fp, [lr, #2]
 801d954:	fb09 b202 	mla	r2, r9, r2, fp
 801d958:	4492      	add	sl, r2
 801d95a:	b2a4      	uxth	r4, r4
 801d95c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801d960:	f84e 4b04 	str.w	r4, [lr], #4
 801d964:	f851 4b04 	ldr.w	r4, [r1], #4
 801d968:	f8be 2000 	ldrh.w	r2, [lr]
 801d96c:	0c24      	lsrs	r4, r4, #16
 801d96e:	fb09 2404 	mla	r4, r9, r4, r2
 801d972:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801d976:	458c      	cmp	ip, r1
 801d978:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801d97c:	d8e7      	bhi.n	801d94e <__multiply+0xfe>
 801d97e:	9a01      	ldr	r2, [sp, #4]
 801d980:	50b4      	str	r4, [r6, r2]
 801d982:	3604      	adds	r6, #4
 801d984:	e7a3      	b.n	801d8ce <__multiply+0x7e>
 801d986:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d98a:	2b00      	cmp	r3, #0
 801d98c:	d1a5      	bne.n	801d8da <__multiply+0x8a>
 801d98e:	3f01      	subs	r7, #1
 801d990:	e7a1      	b.n	801d8d6 <__multiply+0x86>
 801d992:	bf00      	nop
 801d994:	080209cc 	.word	0x080209cc
 801d998:	08020a5c 	.word	0x08020a5c

0801d99c <__pow5mult>:
 801d99c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d9a0:	4615      	mov	r5, r2
 801d9a2:	f012 0203 	ands.w	r2, r2, #3
 801d9a6:	4606      	mov	r6, r0
 801d9a8:	460f      	mov	r7, r1
 801d9aa:	d007      	beq.n	801d9bc <__pow5mult+0x20>
 801d9ac:	4c25      	ldr	r4, [pc, #148]	; (801da44 <__pow5mult+0xa8>)
 801d9ae:	3a01      	subs	r2, #1
 801d9b0:	2300      	movs	r3, #0
 801d9b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d9b6:	f7ff fe51 	bl	801d65c <__multadd>
 801d9ba:	4607      	mov	r7, r0
 801d9bc:	10ad      	asrs	r5, r5, #2
 801d9be:	d03d      	beq.n	801da3c <__pow5mult+0xa0>
 801d9c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801d9c2:	b97c      	cbnz	r4, 801d9e4 <__pow5mult+0x48>
 801d9c4:	2010      	movs	r0, #16
 801d9c6:	f7fc fc8b 	bl	801a2e0 <malloc>
 801d9ca:	4602      	mov	r2, r0
 801d9cc:	6270      	str	r0, [r6, #36]	; 0x24
 801d9ce:	b928      	cbnz	r0, 801d9dc <__pow5mult+0x40>
 801d9d0:	4b1d      	ldr	r3, [pc, #116]	; (801da48 <__pow5mult+0xac>)
 801d9d2:	481e      	ldr	r0, [pc, #120]	; (801da4c <__pow5mult+0xb0>)
 801d9d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801d9d8:	f000 fc72 	bl	801e2c0 <__assert_func>
 801d9dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d9e0:	6004      	str	r4, [r0, #0]
 801d9e2:	60c4      	str	r4, [r0, #12]
 801d9e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801d9e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d9ec:	b94c      	cbnz	r4, 801da02 <__pow5mult+0x66>
 801d9ee:	f240 2171 	movw	r1, #625	; 0x271
 801d9f2:	4630      	mov	r0, r6
 801d9f4:	f7ff ff16 	bl	801d824 <__i2b>
 801d9f8:	2300      	movs	r3, #0
 801d9fa:	f8c8 0008 	str.w	r0, [r8, #8]
 801d9fe:	4604      	mov	r4, r0
 801da00:	6003      	str	r3, [r0, #0]
 801da02:	f04f 0900 	mov.w	r9, #0
 801da06:	07eb      	lsls	r3, r5, #31
 801da08:	d50a      	bpl.n	801da20 <__pow5mult+0x84>
 801da0a:	4639      	mov	r1, r7
 801da0c:	4622      	mov	r2, r4
 801da0e:	4630      	mov	r0, r6
 801da10:	f7ff ff1e 	bl	801d850 <__multiply>
 801da14:	4639      	mov	r1, r7
 801da16:	4680      	mov	r8, r0
 801da18:	4630      	mov	r0, r6
 801da1a:	f7ff fdfd 	bl	801d618 <_Bfree>
 801da1e:	4647      	mov	r7, r8
 801da20:	106d      	asrs	r5, r5, #1
 801da22:	d00b      	beq.n	801da3c <__pow5mult+0xa0>
 801da24:	6820      	ldr	r0, [r4, #0]
 801da26:	b938      	cbnz	r0, 801da38 <__pow5mult+0x9c>
 801da28:	4622      	mov	r2, r4
 801da2a:	4621      	mov	r1, r4
 801da2c:	4630      	mov	r0, r6
 801da2e:	f7ff ff0f 	bl	801d850 <__multiply>
 801da32:	6020      	str	r0, [r4, #0]
 801da34:	f8c0 9000 	str.w	r9, [r0]
 801da38:	4604      	mov	r4, r0
 801da3a:	e7e4      	b.n	801da06 <__pow5mult+0x6a>
 801da3c:	4638      	mov	r0, r7
 801da3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801da42:	bf00      	nop
 801da44:	08020bb0 	.word	0x08020bb0
 801da48:	08020956 	.word	0x08020956
 801da4c:	08020a5c 	.word	0x08020a5c

0801da50 <__lshift>:
 801da50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801da54:	460c      	mov	r4, r1
 801da56:	6849      	ldr	r1, [r1, #4]
 801da58:	6923      	ldr	r3, [r4, #16]
 801da5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801da5e:	68a3      	ldr	r3, [r4, #8]
 801da60:	4607      	mov	r7, r0
 801da62:	4691      	mov	r9, r2
 801da64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801da68:	f108 0601 	add.w	r6, r8, #1
 801da6c:	42b3      	cmp	r3, r6
 801da6e:	db0b      	blt.n	801da88 <__lshift+0x38>
 801da70:	4638      	mov	r0, r7
 801da72:	f7ff fd91 	bl	801d598 <_Balloc>
 801da76:	4605      	mov	r5, r0
 801da78:	b948      	cbnz	r0, 801da8e <__lshift+0x3e>
 801da7a:	4602      	mov	r2, r0
 801da7c:	4b28      	ldr	r3, [pc, #160]	; (801db20 <__lshift+0xd0>)
 801da7e:	4829      	ldr	r0, [pc, #164]	; (801db24 <__lshift+0xd4>)
 801da80:	f240 11d9 	movw	r1, #473	; 0x1d9
 801da84:	f000 fc1c 	bl	801e2c0 <__assert_func>
 801da88:	3101      	adds	r1, #1
 801da8a:	005b      	lsls	r3, r3, #1
 801da8c:	e7ee      	b.n	801da6c <__lshift+0x1c>
 801da8e:	2300      	movs	r3, #0
 801da90:	f100 0114 	add.w	r1, r0, #20
 801da94:	f100 0210 	add.w	r2, r0, #16
 801da98:	4618      	mov	r0, r3
 801da9a:	4553      	cmp	r3, sl
 801da9c:	db33      	blt.n	801db06 <__lshift+0xb6>
 801da9e:	6920      	ldr	r0, [r4, #16]
 801daa0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801daa4:	f104 0314 	add.w	r3, r4, #20
 801daa8:	f019 091f 	ands.w	r9, r9, #31
 801daac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801dab0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801dab4:	d02b      	beq.n	801db0e <__lshift+0xbe>
 801dab6:	f1c9 0e20 	rsb	lr, r9, #32
 801daba:	468a      	mov	sl, r1
 801dabc:	2200      	movs	r2, #0
 801dabe:	6818      	ldr	r0, [r3, #0]
 801dac0:	fa00 f009 	lsl.w	r0, r0, r9
 801dac4:	4302      	orrs	r2, r0
 801dac6:	f84a 2b04 	str.w	r2, [sl], #4
 801daca:	f853 2b04 	ldr.w	r2, [r3], #4
 801dace:	459c      	cmp	ip, r3
 801dad0:	fa22 f20e 	lsr.w	r2, r2, lr
 801dad4:	d8f3      	bhi.n	801dabe <__lshift+0x6e>
 801dad6:	ebac 0304 	sub.w	r3, ip, r4
 801dada:	3b15      	subs	r3, #21
 801dadc:	f023 0303 	bic.w	r3, r3, #3
 801dae0:	3304      	adds	r3, #4
 801dae2:	f104 0015 	add.w	r0, r4, #21
 801dae6:	4584      	cmp	ip, r0
 801dae8:	bf38      	it	cc
 801daea:	2304      	movcc	r3, #4
 801daec:	50ca      	str	r2, [r1, r3]
 801daee:	b10a      	cbz	r2, 801daf4 <__lshift+0xa4>
 801daf0:	f108 0602 	add.w	r6, r8, #2
 801daf4:	3e01      	subs	r6, #1
 801daf6:	4638      	mov	r0, r7
 801daf8:	612e      	str	r6, [r5, #16]
 801dafa:	4621      	mov	r1, r4
 801dafc:	f7ff fd8c 	bl	801d618 <_Bfree>
 801db00:	4628      	mov	r0, r5
 801db02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801db06:	f842 0f04 	str.w	r0, [r2, #4]!
 801db0a:	3301      	adds	r3, #1
 801db0c:	e7c5      	b.n	801da9a <__lshift+0x4a>
 801db0e:	3904      	subs	r1, #4
 801db10:	f853 2b04 	ldr.w	r2, [r3], #4
 801db14:	f841 2f04 	str.w	r2, [r1, #4]!
 801db18:	459c      	cmp	ip, r3
 801db1a:	d8f9      	bhi.n	801db10 <__lshift+0xc0>
 801db1c:	e7ea      	b.n	801daf4 <__lshift+0xa4>
 801db1e:	bf00      	nop
 801db20:	080209cc 	.word	0x080209cc
 801db24:	08020a5c 	.word	0x08020a5c

0801db28 <__mcmp>:
 801db28:	b530      	push	{r4, r5, lr}
 801db2a:	6902      	ldr	r2, [r0, #16]
 801db2c:	690c      	ldr	r4, [r1, #16]
 801db2e:	1b12      	subs	r2, r2, r4
 801db30:	d10e      	bne.n	801db50 <__mcmp+0x28>
 801db32:	f100 0314 	add.w	r3, r0, #20
 801db36:	3114      	adds	r1, #20
 801db38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801db3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801db40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801db44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801db48:	42a5      	cmp	r5, r4
 801db4a:	d003      	beq.n	801db54 <__mcmp+0x2c>
 801db4c:	d305      	bcc.n	801db5a <__mcmp+0x32>
 801db4e:	2201      	movs	r2, #1
 801db50:	4610      	mov	r0, r2
 801db52:	bd30      	pop	{r4, r5, pc}
 801db54:	4283      	cmp	r3, r0
 801db56:	d3f3      	bcc.n	801db40 <__mcmp+0x18>
 801db58:	e7fa      	b.n	801db50 <__mcmp+0x28>
 801db5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801db5e:	e7f7      	b.n	801db50 <__mcmp+0x28>

0801db60 <__mdiff>:
 801db60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db64:	460c      	mov	r4, r1
 801db66:	4606      	mov	r6, r0
 801db68:	4611      	mov	r1, r2
 801db6a:	4620      	mov	r0, r4
 801db6c:	4617      	mov	r7, r2
 801db6e:	f7ff ffdb 	bl	801db28 <__mcmp>
 801db72:	1e05      	subs	r5, r0, #0
 801db74:	d110      	bne.n	801db98 <__mdiff+0x38>
 801db76:	4629      	mov	r1, r5
 801db78:	4630      	mov	r0, r6
 801db7a:	f7ff fd0d 	bl	801d598 <_Balloc>
 801db7e:	b930      	cbnz	r0, 801db8e <__mdiff+0x2e>
 801db80:	4b39      	ldr	r3, [pc, #228]	; (801dc68 <__mdiff+0x108>)
 801db82:	4602      	mov	r2, r0
 801db84:	f240 2132 	movw	r1, #562	; 0x232
 801db88:	4838      	ldr	r0, [pc, #224]	; (801dc6c <__mdiff+0x10c>)
 801db8a:	f000 fb99 	bl	801e2c0 <__assert_func>
 801db8e:	2301      	movs	r3, #1
 801db90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801db94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db98:	bfa4      	itt	ge
 801db9a:	463b      	movge	r3, r7
 801db9c:	4627      	movge	r7, r4
 801db9e:	4630      	mov	r0, r6
 801dba0:	6879      	ldr	r1, [r7, #4]
 801dba2:	bfa6      	itte	ge
 801dba4:	461c      	movge	r4, r3
 801dba6:	2500      	movge	r5, #0
 801dba8:	2501      	movlt	r5, #1
 801dbaa:	f7ff fcf5 	bl	801d598 <_Balloc>
 801dbae:	b920      	cbnz	r0, 801dbba <__mdiff+0x5a>
 801dbb0:	4b2d      	ldr	r3, [pc, #180]	; (801dc68 <__mdiff+0x108>)
 801dbb2:	4602      	mov	r2, r0
 801dbb4:	f44f 7110 	mov.w	r1, #576	; 0x240
 801dbb8:	e7e6      	b.n	801db88 <__mdiff+0x28>
 801dbba:	693e      	ldr	r6, [r7, #16]
 801dbbc:	60c5      	str	r5, [r0, #12]
 801dbbe:	6925      	ldr	r5, [r4, #16]
 801dbc0:	f107 0114 	add.w	r1, r7, #20
 801dbc4:	f104 0914 	add.w	r9, r4, #20
 801dbc8:	f100 0e14 	add.w	lr, r0, #20
 801dbcc:	f107 0210 	add.w	r2, r7, #16
 801dbd0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801dbd4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801dbd8:	46f2      	mov	sl, lr
 801dbda:	2700      	movs	r7, #0
 801dbdc:	f859 3b04 	ldr.w	r3, [r9], #4
 801dbe0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801dbe4:	fa1f f883 	uxth.w	r8, r3
 801dbe8:	fa17 f78b 	uxtah	r7, r7, fp
 801dbec:	0c1b      	lsrs	r3, r3, #16
 801dbee:	eba7 0808 	sub.w	r8, r7, r8
 801dbf2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801dbf6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801dbfa:	fa1f f888 	uxth.w	r8, r8
 801dbfe:	141f      	asrs	r7, r3, #16
 801dc00:	454d      	cmp	r5, r9
 801dc02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801dc06:	f84a 3b04 	str.w	r3, [sl], #4
 801dc0a:	d8e7      	bhi.n	801dbdc <__mdiff+0x7c>
 801dc0c:	1b2b      	subs	r3, r5, r4
 801dc0e:	3b15      	subs	r3, #21
 801dc10:	f023 0303 	bic.w	r3, r3, #3
 801dc14:	3304      	adds	r3, #4
 801dc16:	3415      	adds	r4, #21
 801dc18:	42a5      	cmp	r5, r4
 801dc1a:	bf38      	it	cc
 801dc1c:	2304      	movcc	r3, #4
 801dc1e:	4419      	add	r1, r3
 801dc20:	4473      	add	r3, lr
 801dc22:	469e      	mov	lr, r3
 801dc24:	460d      	mov	r5, r1
 801dc26:	4565      	cmp	r5, ip
 801dc28:	d30e      	bcc.n	801dc48 <__mdiff+0xe8>
 801dc2a:	f10c 0203 	add.w	r2, ip, #3
 801dc2e:	1a52      	subs	r2, r2, r1
 801dc30:	f022 0203 	bic.w	r2, r2, #3
 801dc34:	3903      	subs	r1, #3
 801dc36:	458c      	cmp	ip, r1
 801dc38:	bf38      	it	cc
 801dc3a:	2200      	movcc	r2, #0
 801dc3c:	441a      	add	r2, r3
 801dc3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801dc42:	b17b      	cbz	r3, 801dc64 <__mdiff+0x104>
 801dc44:	6106      	str	r6, [r0, #16]
 801dc46:	e7a5      	b.n	801db94 <__mdiff+0x34>
 801dc48:	f855 8b04 	ldr.w	r8, [r5], #4
 801dc4c:	fa17 f488 	uxtah	r4, r7, r8
 801dc50:	1422      	asrs	r2, r4, #16
 801dc52:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801dc56:	b2a4      	uxth	r4, r4
 801dc58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801dc5c:	f84e 4b04 	str.w	r4, [lr], #4
 801dc60:	1417      	asrs	r7, r2, #16
 801dc62:	e7e0      	b.n	801dc26 <__mdiff+0xc6>
 801dc64:	3e01      	subs	r6, #1
 801dc66:	e7ea      	b.n	801dc3e <__mdiff+0xde>
 801dc68:	080209cc 	.word	0x080209cc
 801dc6c:	08020a5c 	.word	0x08020a5c

0801dc70 <__ulp>:
 801dc70:	b082      	sub	sp, #8
 801dc72:	ed8d 0b00 	vstr	d0, [sp]
 801dc76:	9b01      	ldr	r3, [sp, #4]
 801dc78:	4912      	ldr	r1, [pc, #72]	; (801dcc4 <__ulp+0x54>)
 801dc7a:	4019      	ands	r1, r3
 801dc7c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801dc80:	2900      	cmp	r1, #0
 801dc82:	dd05      	ble.n	801dc90 <__ulp+0x20>
 801dc84:	2200      	movs	r2, #0
 801dc86:	460b      	mov	r3, r1
 801dc88:	ec43 2b10 	vmov	d0, r2, r3
 801dc8c:	b002      	add	sp, #8
 801dc8e:	4770      	bx	lr
 801dc90:	4249      	negs	r1, r1
 801dc92:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801dc96:	ea4f 5021 	mov.w	r0, r1, asr #20
 801dc9a:	f04f 0200 	mov.w	r2, #0
 801dc9e:	f04f 0300 	mov.w	r3, #0
 801dca2:	da04      	bge.n	801dcae <__ulp+0x3e>
 801dca4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801dca8:	fa41 f300 	asr.w	r3, r1, r0
 801dcac:	e7ec      	b.n	801dc88 <__ulp+0x18>
 801dcae:	f1a0 0114 	sub.w	r1, r0, #20
 801dcb2:	291e      	cmp	r1, #30
 801dcb4:	bfda      	itte	le
 801dcb6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801dcba:	fa20 f101 	lsrle.w	r1, r0, r1
 801dcbe:	2101      	movgt	r1, #1
 801dcc0:	460a      	mov	r2, r1
 801dcc2:	e7e1      	b.n	801dc88 <__ulp+0x18>
 801dcc4:	7ff00000 	.word	0x7ff00000

0801dcc8 <__b2d>:
 801dcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dcca:	6905      	ldr	r5, [r0, #16]
 801dccc:	f100 0714 	add.w	r7, r0, #20
 801dcd0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801dcd4:	1f2e      	subs	r6, r5, #4
 801dcd6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801dcda:	4620      	mov	r0, r4
 801dcdc:	f7ff fd52 	bl	801d784 <__hi0bits>
 801dce0:	f1c0 0320 	rsb	r3, r0, #32
 801dce4:	280a      	cmp	r0, #10
 801dce6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801dd64 <__b2d+0x9c>
 801dcea:	600b      	str	r3, [r1, #0]
 801dcec:	dc14      	bgt.n	801dd18 <__b2d+0x50>
 801dcee:	f1c0 0e0b 	rsb	lr, r0, #11
 801dcf2:	fa24 f10e 	lsr.w	r1, r4, lr
 801dcf6:	42b7      	cmp	r7, r6
 801dcf8:	ea41 030c 	orr.w	r3, r1, ip
 801dcfc:	bf34      	ite	cc
 801dcfe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801dd02:	2100      	movcs	r1, #0
 801dd04:	3015      	adds	r0, #21
 801dd06:	fa04 f000 	lsl.w	r0, r4, r0
 801dd0a:	fa21 f10e 	lsr.w	r1, r1, lr
 801dd0e:	ea40 0201 	orr.w	r2, r0, r1
 801dd12:	ec43 2b10 	vmov	d0, r2, r3
 801dd16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dd18:	42b7      	cmp	r7, r6
 801dd1a:	bf3a      	itte	cc
 801dd1c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801dd20:	f1a5 0608 	subcc.w	r6, r5, #8
 801dd24:	2100      	movcs	r1, #0
 801dd26:	380b      	subs	r0, #11
 801dd28:	d017      	beq.n	801dd5a <__b2d+0x92>
 801dd2a:	f1c0 0c20 	rsb	ip, r0, #32
 801dd2e:	fa04 f500 	lsl.w	r5, r4, r0
 801dd32:	42be      	cmp	r6, r7
 801dd34:	fa21 f40c 	lsr.w	r4, r1, ip
 801dd38:	ea45 0504 	orr.w	r5, r5, r4
 801dd3c:	bf8c      	ite	hi
 801dd3e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801dd42:	2400      	movls	r4, #0
 801dd44:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801dd48:	fa01 f000 	lsl.w	r0, r1, r0
 801dd4c:	fa24 f40c 	lsr.w	r4, r4, ip
 801dd50:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801dd54:	ea40 0204 	orr.w	r2, r0, r4
 801dd58:	e7db      	b.n	801dd12 <__b2d+0x4a>
 801dd5a:	ea44 030c 	orr.w	r3, r4, ip
 801dd5e:	460a      	mov	r2, r1
 801dd60:	e7d7      	b.n	801dd12 <__b2d+0x4a>
 801dd62:	bf00      	nop
 801dd64:	3ff00000 	.word	0x3ff00000

0801dd68 <__d2b>:
 801dd68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801dd6c:	4689      	mov	r9, r1
 801dd6e:	2101      	movs	r1, #1
 801dd70:	ec57 6b10 	vmov	r6, r7, d0
 801dd74:	4690      	mov	r8, r2
 801dd76:	f7ff fc0f 	bl	801d598 <_Balloc>
 801dd7a:	4604      	mov	r4, r0
 801dd7c:	b930      	cbnz	r0, 801dd8c <__d2b+0x24>
 801dd7e:	4602      	mov	r2, r0
 801dd80:	4b25      	ldr	r3, [pc, #148]	; (801de18 <__d2b+0xb0>)
 801dd82:	4826      	ldr	r0, [pc, #152]	; (801de1c <__d2b+0xb4>)
 801dd84:	f240 310a 	movw	r1, #778	; 0x30a
 801dd88:	f000 fa9a 	bl	801e2c0 <__assert_func>
 801dd8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801dd90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801dd94:	bb35      	cbnz	r5, 801dde4 <__d2b+0x7c>
 801dd96:	2e00      	cmp	r6, #0
 801dd98:	9301      	str	r3, [sp, #4]
 801dd9a:	d028      	beq.n	801ddee <__d2b+0x86>
 801dd9c:	4668      	mov	r0, sp
 801dd9e:	9600      	str	r6, [sp, #0]
 801dda0:	f7ff fd10 	bl	801d7c4 <__lo0bits>
 801dda4:	9900      	ldr	r1, [sp, #0]
 801dda6:	b300      	cbz	r0, 801ddea <__d2b+0x82>
 801dda8:	9a01      	ldr	r2, [sp, #4]
 801ddaa:	f1c0 0320 	rsb	r3, r0, #32
 801ddae:	fa02 f303 	lsl.w	r3, r2, r3
 801ddb2:	430b      	orrs	r3, r1
 801ddb4:	40c2      	lsrs	r2, r0
 801ddb6:	6163      	str	r3, [r4, #20]
 801ddb8:	9201      	str	r2, [sp, #4]
 801ddba:	9b01      	ldr	r3, [sp, #4]
 801ddbc:	61a3      	str	r3, [r4, #24]
 801ddbe:	2b00      	cmp	r3, #0
 801ddc0:	bf14      	ite	ne
 801ddc2:	2202      	movne	r2, #2
 801ddc4:	2201      	moveq	r2, #1
 801ddc6:	6122      	str	r2, [r4, #16]
 801ddc8:	b1d5      	cbz	r5, 801de00 <__d2b+0x98>
 801ddca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801ddce:	4405      	add	r5, r0
 801ddd0:	f8c9 5000 	str.w	r5, [r9]
 801ddd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801ddd8:	f8c8 0000 	str.w	r0, [r8]
 801dddc:	4620      	mov	r0, r4
 801ddde:	b003      	add	sp, #12
 801dde0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dde4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801dde8:	e7d5      	b.n	801dd96 <__d2b+0x2e>
 801ddea:	6161      	str	r1, [r4, #20]
 801ddec:	e7e5      	b.n	801ddba <__d2b+0x52>
 801ddee:	a801      	add	r0, sp, #4
 801ddf0:	f7ff fce8 	bl	801d7c4 <__lo0bits>
 801ddf4:	9b01      	ldr	r3, [sp, #4]
 801ddf6:	6163      	str	r3, [r4, #20]
 801ddf8:	2201      	movs	r2, #1
 801ddfa:	6122      	str	r2, [r4, #16]
 801ddfc:	3020      	adds	r0, #32
 801ddfe:	e7e3      	b.n	801ddc8 <__d2b+0x60>
 801de00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801de04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801de08:	f8c9 0000 	str.w	r0, [r9]
 801de0c:	6918      	ldr	r0, [r3, #16]
 801de0e:	f7ff fcb9 	bl	801d784 <__hi0bits>
 801de12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801de16:	e7df      	b.n	801ddd8 <__d2b+0x70>
 801de18:	080209cc 	.word	0x080209cc
 801de1c:	08020a5c 	.word	0x08020a5c

0801de20 <__ratio>:
 801de20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de24:	4688      	mov	r8, r1
 801de26:	4669      	mov	r1, sp
 801de28:	4681      	mov	r9, r0
 801de2a:	f7ff ff4d 	bl	801dcc8 <__b2d>
 801de2e:	a901      	add	r1, sp, #4
 801de30:	4640      	mov	r0, r8
 801de32:	ec55 4b10 	vmov	r4, r5, d0
 801de36:	f7ff ff47 	bl	801dcc8 <__b2d>
 801de3a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801de3e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801de42:	eba3 0c02 	sub.w	ip, r3, r2
 801de46:	e9dd 3200 	ldrd	r3, r2, [sp]
 801de4a:	1a9b      	subs	r3, r3, r2
 801de4c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801de50:	ec51 0b10 	vmov	r0, r1, d0
 801de54:	2b00      	cmp	r3, #0
 801de56:	bfd6      	itet	le
 801de58:	460a      	movle	r2, r1
 801de5a:	462a      	movgt	r2, r5
 801de5c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801de60:	468b      	mov	fp, r1
 801de62:	462f      	mov	r7, r5
 801de64:	bfd4      	ite	le
 801de66:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801de6a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801de6e:	4620      	mov	r0, r4
 801de70:	ee10 2a10 	vmov	r2, s0
 801de74:	465b      	mov	r3, fp
 801de76:	4639      	mov	r1, r7
 801de78:	f7e2 fce8 	bl	800084c <__aeabi_ddiv>
 801de7c:	ec41 0b10 	vmov	d0, r0, r1
 801de80:	b003      	add	sp, #12
 801de82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801de86 <__copybits>:
 801de86:	3901      	subs	r1, #1
 801de88:	b570      	push	{r4, r5, r6, lr}
 801de8a:	1149      	asrs	r1, r1, #5
 801de8c:	6914      	ldr	r4, [r2, #16]
 801de8e:	3101      	adds	r1, #1
 801de90:	f102 0314 	add.w	r3, r2, #20
 801de94:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801de98:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801de9c:	1f05      	subs	r5, r0, #4
 801de9e:	42a3      	cmp	r3, r4
 801dea0:	d30c      	bcc.n	801debc <__copybits+0x36>
 801dea2:	1aa3      	subs	r3, r4, r2
 801dea4:	3b11      	subs	r3, #17
 801dea6:	f023 0303 	bic.w	r3, r3, #3
 801deaa:	3211      	adds	r2, #17
 801deac:	42a2      	cmp	r2, r4
 801deae:	bf88      	it	hi
 801deb0:	2300      	movhi	r3, #0
 801deb2:	4418      	add	r0, r3
 801deb4:	2300      	movs	r3, #0
 801deb6:	4288      	cmp	r0, r1
 801deb8:	d305      	bcc.n	801dec6 <__copybits+0x40>
 801deba:	bd70      	pop	{r4, r5, r6, pc}
 801debc:	f853 6b04 	ldr.w	r6, [r3], #4
 801dec0:	f845 6f04 	str.w	r6, [r5, #4]!
 801dec4:	e7eb      	b.n	801de9e <__copybits+0x18>
 801dec6:	f840 3b04 	str.w	r3, [r0], #4
 801deca:	e7f4      	b.n	801deb6 <__copybits+0x30>

0801decc <__any_on>:
 801decc:	f100 0214 	add.w	r2, r0, #20
 801ded0:	6900      	ldr	r0, [r0, #16]
 801ded2:	114b      	asrs	r3, r1, #5
 801ded4:	4298      	cmp	r0, r3
 801ded6:	b510      	push	{r4, lr}
 801ded8:	db11      	blt.n	801defe <__any_on+0x32>
 801deda:	dd0a      	ble.n	801def2 <__any_on+0x26>
 801dedc:	f011 011f 	ands.w	r1, r1, #31
 801dee0:	d007      	beq.n	801def2 <__any_on+0x26>
 801dee2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801dee6:	fa24 f001 	lsr.w	r0, r4, r1
 801deea:	fa00 f101 	lsl.w	r1, r0, r1
 801deee:	428c      	cmp	r4, r1
 801def0:	d10b      	bne.n	801df0a <__any_on+0x3e>
 801def2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801def6:	4293      	cmp	r3, r2
 801def8:	d803      	bhi.n	801df02 <__any_on+0x36>
 801defa:	2000      	movs	r0, #0
 801defc:	bd10      	pop	{r4, pc}
 801defe:	4603      	mov	r3, r0
 801df00:	e7f7      	b.n	801def2 <__any_on+0x26>
 801df02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801df06:	2900      	cmp	r1, #0
 801df08:	d0f5      	beq.n	801def6 <__any_on+0x2a>
 801df0a:	2001      	movs	r0, #1
 801df0c:	e7f6      	b.n	801defc <__any_on+0x30>

0801df0e <_calloc_r>:
 801df0e:	b513      	push	{r0, r1, r4, lr}
 801df10:	434a      	muls	r2, r1
 801df12:	4611      	mov	r1, r2
 801df14:	9201      	str	r2, [sp, #4]
 801df16:	f7fc fa51 	bl	801a3bc <_malloc_r>
 801df1a:	4604      	mov	r4, r0
 801df1c:	b118      	cbz	r0, 801df26 <_calloc_r+0x18>
 801df1e:	9a01      	ldr	r2, [sp, #4]
 801df20:	2100      	movs	r1, #0
 801df22:	f7fc f9f3 	bl	801a30c <memset>
 801df26:	4620      	mov	r0, r4
 801df28:	b002      	add	sp, #8
 801df2a:	bd10      	pop	{r4, pc}

0801df2c <_realloc_r>:
 801df2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df2e:	4607      	mov	r7, r0
 801df30:	4614      	mov	r4, r2
 801df32:	460e      	mov	r6, r1
 801df34:	b921      	cbnz	r1, 801df40 <_realloc_r+0x14>
 801df36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801df3a:	4611      	mov	r1, r2
 801df3c:	f7fc ba3e 	b.w	801a3bc <_malloc_r>
 801df40:	b922      	cbnz	r2, 801df4c <_realloc_r+0x20>
 801df42:	f7fc f9eb 	bl	801a31c <_free_r>
 801df46:	4625      	mov	r5, r4
 801df48:	4628      	mov	r0, r5
 801df4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801df4c:	f000 fbbc 	bl	801e6c8 <_malloc_usable_size_r>
 801df50:	42a0      	cmp	r0, r4
 801df52:	d20f      	bcs.n	801df74 <_realloc_r+0x48>
 801df54:	4621      	mov	r1, r4
 801df56:	4638      	mov	r0, r7
 801df58:	f7fc fa30 	bl	801a3bc <_malloc_r>
 801df5c:	4605      	mov	r5, r0
 801df5e:	2800      	cmp	r0, #0
 801df60:	d0f2      	beq.n	801df48 <_realloc_r+0x1c>
 801df62:	4631      	mov	r1, r6
 801df64:	4622      	mov	r2, r4
 801df66:	f7fc f9c3 	bl	801a2f0 <memcpy>
 801df6a:	4631      	mov	r1, r6
 801df6c:	4638      	mov	r0, r7
 801df6e:	f7fc f9d5 	bl	801a31c <_free_r>
 801df72:	e7e9      	b.n	801df48 <_realloc_r+0x1c>
 801df74:	4635      	mov	r5, r6
 801df76:	e7e7      	b.n	801df48 <_realloc_r+0x1c>

0801df78 <__ssputs_r>:
 801df78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801df7c:	688e      	ldr	r6, [r1, #8]
 801df7e:	429e      	cmp	r6, r3
 801df80:	4682      	mov	sl, r0
 801df82:	460c      	mov	r4, r1
 801df84:	4690      	mov	r8, r2
 801df86:	461f      	mov	r7, r3
 801df88:	d838      	bhi.n	801dffc <__ssputs_r+0x84>
 801df8a:	898a      	ldrh	r2, [r1, #12]
 801df8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801df90:	d032      	beq.n	801dff8 <__ssputs_r+0x80>
 801df92:	6825      	ldr	r5, [r4, #0]
 801df94:	6909      	ldr	r1, [r1, #16]
 801df96:	eba5 0901 	sub.w	r9, r5, r1
 801df9a:	6965      	ldr	r5, [r4, #20]
 801df9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dfa0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801dfa4:	3301      	adds	r3, #1
 801dfa6:	444b      	add	r3, r9
 801dfa8:	106d      	asrs	r5, r5, #1
 801dfaa:	429d      	cmp	r5, r3
 801dfac:	bf38      	it	cc
 801dfae:	461d      	movcc	r5, r3
 801dfb0:	0553      	lsls	r3, r2, #21
 801dfb2:	d531      	bpl.n	801e018 <__ssputs_r+0xa0>
 801dfb4:	4629      	mov	r1, r5
 801dfb6:	f7fc fa01 	bl	801a3bc <_malloc_r>
 801dfba:	4606      	mov	r6, r0
 801dfbc:	b950      	cbnz	r0, 801dfd4 <__ssputs_r+0x5c>
 801dfbe:	230c      	movs	r3, #12
 801dfc0:	f8ca 3000 	str.w	r3, [sl]
 801dfc4:	89a3      	ldrh	r3, [r4, #12]
 801dfc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dfca:	81a3      	strh	r3, [r4, #12]
 801dfcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dfd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dfd4:	6921      	ldr	r1, [r4, #16]
 801dfd6:	464a      	mov	r2, r9
 801dfd8:	f7fc f98a 	bl	801a2f0 <memcpy>
 801dfdc:	89a3      	ldrh	r3, [r4, #12]
 801dfde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801dfe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dfe6:	81a3      	strh	r3, [r4, #12]
 801dfe8:	6126      	str	r6, [r4, #16]
 801dfea:	6165      	str	r5, [r4, #20]
 801dfec:	444e      	add	r6, r9
 801dfee:	eba5 0509 	sub.w	r5, r5, r9
 801dff2:	6026      	str	r6, [r4, #0]
 801dff4:	60a5      	str	r5, [r4, #8]
 801dff6:	463e      	mov	r6, r7
 801dff8:	42be      	cmp	r6, r7
 801dffa:	d900      	bls.n	801dffe <__ssputs_r+0x86>
 801dffc:	463e      	mov	r6, r7
 801dffe:	4632      	mov	r2, r6
 801e000:	6820      	ldr	r0, [r4, #0]
 801e002:	4641      	mov	r1, r8
 801e004:	f000 fb46 	bl	801e694 <memmove>
 801e008:	68a3      	ldr	r3, [r4, #8]
 801e00a:	6822      	ldr	r2, [r4, #0]
 801e00c:	1b9b      	subs	r3, r3, r6
 801e00e:	4432      	add	r2, r6
 801e010:	60a3      	str	r3, [r4, #8]
 801e012:	6022      	str	r2, [r4, #0]
 801e014:	2000      	movs	r0, #0
 801e016:	e7db      	b.n	801dfd0 <__ssputs_r+0x58>
 801e018:	462a      	mov	r2, r5
 801e01a:	f7ff ff87 	bl	801df2c <_realloc_r>
 801e01e:	4606      	mov	r6, r0
 801e020:	2800      	cmp	r0, #0
 801e022:	d1e1      	bne.n	801dfe8 <__ssputs_r+0x70>
 801e024:	6921      	ldr	r1, [r4, #16]
 801e026:	4650      	mov	r0, sl
 801e028:	f7fc f978 	bl	801a31c <_free_r>
 801e02c:	e7c7      	b.n	801dfbe <__ssputs_r+0x46>
	...

0801e030 <_svfiprintf_r>:
 801e030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e034:	4698      	mov	r8, r3
 801e036:	898b      	ldrh	r3, [r1, #12]
 801e038:	061b      	lsls	r3, r3, #24
 801e03a:	b09d      	sub	sp, #116	; 0x74
 801e03c:	4607      	mov	r7, r0
 801e03e:	460d      	mov	r5, r1
 801e040:	4614      	mov	r4, r2
 801e042:	d50e      	bpl.n	801e062 <_svfiprintf_r+0x32>
 801e044:	690b      	ldr	r3, [r1, #16]
 801e046:	b963      	cbnz	r3, 801e062 <_svfiprintf_r+0x32>
 801e048:	2140      	movs	r1, #64	; 0x40
 801e04a:	f7fc f9b7 	bl	801a3bc <_malloc_r>
 801e04e:	6028      	str	r0, [r5, #0]
 801e050:	6128      	str	r0, [r5, #16]
 801e052:	b920      	cbnz	r0, 801e05e <_svfiprintf_r+0x2e>
 801e054:	230c      	movs	r3, #12
 801e056:	603b      	str	r3, [r7, #0]
 801e058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e05c:	e0d1      	b.n	801e202 <_svfiprintf_r+0x1d2>
 801e05e:	2340      	movs	r3, #64	; 0x40
 801e060:	616b      	str	r3, [r5, #20]
 801e062:	2300      	movs	r3, #0
 801e064:	9309      	str	r3, [sp, #36]	; 0x24
 801e066:	2320      	movs	r3, #32
 801e068:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e06c:	f8cd 800c 	str.w	r8, [sp, #12]
 801e070:	2330      	movs	r3, #48	; 0x30
 801e072:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801e21c <_svfiprintf_r+0x1ec>
 801e076:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e07a:	f04f 0901 	mov.w	r9, #1
 801e07e:	4623      	mov	r3, r4
 801e080:	469a      	mov	sl, r3
 801e082:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e086:	b10a      	cbz	r2, 801e08c <_svfiprintf_r+0x5c>
 801e088:	2a25      	cmp	r2, #37	; 0x25
 801e08a:	d1f9      	bne.n	801e080 <_svfiprintf_r+0x50>
 801e08c:	ebba 0b04 	subs.w	fp, sl, r4
 801e090:	d00b      	beq.n	801e0aa <_svfiprintf_r+0x7a>
 801e092:	465b      	mov	r3, fp
 801e094:	4622      	mov	r2, r4
 801e096:	4629      	mov	r1, r5
 801e098:	4638      	mov	r0, r7
 801e09a:	f7ff ff6d 	bl	801df78 <__ssputs_r>
 801e09e:	3001      	adds	r0, #1
 801e0a0:	f000 80aa 	beq.w	801e1f8 <_svfiprintf_r+0x1c8>
 801e0a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e0a6:	445a      	add	r2, fp
 801e0a8:	9209      	str	r2, [sp, #36]	; 0x24
 801e0aa:	f89a 3000 	ldrb.w	r3, [sl]
 801e0ae:	2b00      	cmp	r3, #0
 801e0b0:	f000 80a2 	beq.w	801e1f8 <_svfiprintf_r+0x1c8>
 801e0b4:	2300      	movs	r3, #0
 801e0b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e0ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e0be:	f10a 0a01 	add.w	sl, sl, #1
 801e0c2:	9304      	str	r3, [sp, #16]
 801e0c4:	9307      	str	r3, [sp, #28]
 801e0c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e0ca:	931a      	str	r3, [sp, #104]	; 0x68
 801e0cc:	4654      	mov	r4, sl
 801e0ce:	2205      	movs	r2, #5
 801e0d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e0d4:	4851      	ldr	r0, [pc, #324]	; (801e21c <_svfiprintf_r+0x1ec>)
 801e0d6:	f7e2 f883 	bl	80001e0 <memchr>
 801e0da:	9a04      	ldr	r2, [sp, #16]
 801e0dc:	b9d8      	cbnz	r0, 801e116 <_svfiprintf_r+0xe6>
 801e0de:	06d0      	lsls	r0, r2, #27
 801e0e0:	bf44      	itt	mi
 801e0e2:	2320      	movmi	r3, #32
 801e0e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e0e8:	0711      	lsls	r1, r2, #28
 801e0ea:	bf44      	itt	mi
 801e0ec:	232b      	movmi	r3, #43	; 0x2b
 801e0ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e0f2:	f89a 3000 	ldrb.w	r3, [sl]
 801e0f6:	2b2a      	cmp	r3, #42	; 0x2a
 801e0f8:	d015      	beq.n	801e126 <_svfiprintf_r+0xf6>
 801e0fa:	9a07      	ldr	r2, [sp, #28]
 801e0fc:	4654      	mov	r4, sl
 801e0fe:	2000      	movs	r0, #0
 801e100:	f04f 0c0a 	mov.w	ip, #10
 801e104:	4621      	mov	r1, r4
 801e106:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e10a:	3b30      	subs	r3, #48	; 0x30
 801e10c:	2b09      	cmp	r3, #9
 801e10e:	d94e      	bls.n	801e1ae <_svfiprintf_r+0x17e>
 801e110:	b1b0      	cbz	r0, 801e140 <_svfiprintf_r+0x110>
 801e112:	9207      	str	r2, [sp, #28]
 801e114:	e014      	b.n	801e140 <_svfiprintf_r+0x110>
 801e116:	eba0 0308 	sub.w	r3, r0, r8
 801e11a:	fa09 f303 	lsl.w	r3, r9, r3
 801e11e:	4313      	orrs	r3, r2
 801e120:	9304      	str	r3, [sp, #16]
 801e122:	46a2      	mov	sl, r4
 801e124:	e7d2      	b.n	801e0cc <_svfiprintf_r+0x9c>
 801e126:	9b03      	ldr	r3, [sp, #12]
 801e128:	1d19      	adds	r1, r3, #4
 801e12a:	681b      	ldr	r3, [r3, #0]
 801e12c:	9103      	str	r1, [sp, #12]
 801e12e:	2b00      	cmp	r3, #0
 801e130:	bfbb      	ittet	lt
 801e132:	425b      	neglt	r3, r3
 801e134:	f042 0202 	orrlt.w	r2, r2, #2
 801e138:	9307      	strge	r3, [sp, #28]
 801e13a:	9307      	strlt	r3, [sp, #28]
 801e13c:	bfb8      	it	lt
 801e13e:	9204      	strlt	r2, [sp, #16]
 801e140:	7823      	ldrb	r3, [r4, #0]
 801e142:	2b2e      	cmp	r3, #46	; 0x2e
 801e144:	d10c      	bne.n	801e160 <_svfiprintf_r+0x130>
 801e146:	7863      	ldrb	r3, [r4, #1]
 801e148:	2b2a      	cmp	r3, #42	; 0x2a
 801e14a:	d135      	bne.n	801e1b8 <_svfiprintf_r+0x188>
 801e14c:	9b03      	ldr	r3, [sp, #12]
 801e14e:	1d1a      	adds	r2, r3, #4
 801e150:	681b      	ldr	r3, [r3, #0]
 801e152:	9203      	str	r2, [sp, #12]
 801e154:	2b00      	cmp	r3, #0
 801e156:	bfb8      	it	lt
 801e158:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801e15c:	3402      	adds	r4, #2
 801e15e:	9305      	str	r3, [sp, #20]
 801e160:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801e22c <_svfiprintf_r+0x1fc>
 801e164:	7821      	ldrb	r1, [r4, #0]
 801e166:	2203      	movs	r2, #3
 801e168:	4650      	mov	r0, sl
 801e16a:	f7e2 f839 	bl	80001e0 <memchr>
 801e16e:	b140      	cbz	r0, 801e182 <_svfiprintf_r+0x152>
 801e170:	2340      	movs	r3, #64	; 0x40
 801e172:	eba0 000a 	sub.w	r0, r0, sl
 801e176:	fa03 f000 	lsl.w	r0, r3, r0
 801e17a:	9b04      	ldr	r3, [sp, #16]
 801e17c:	4303      	orrs	r3, r0
 801e17e:	3401      	adds	r4, #1
 801e180:	9304      	str	r3, [sp, #16]
 801e182:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e186:	4826      	ldr	r0, [pc, #152]	; (801e220 <_svfiprintf_r+0x1f0>)
 801e188:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e18c:	2206      	movs	r2, #6
 801e18e:	f7e2 f827 	bl	80001e0 <memchr>
 801e192:	2800      	cmp	r0, #0
 801e194:	d038      	beq.n	801e208 <_svfiprintf_r+0x1d8>
 801e196:	4b23      	ldr	r3, [pc, #140]	; (801e224 <_svfiprintf_r+0x1f4>)
 801e198:	bb1b      	cbnz	r3, 801e1e2 <_svfiprintf_r+0x1b2>
 801e19a:	9b03      	ldr	r3, [sp, #12]
 801e19c:	3307      	adds	r3, #7
 801e19e:	f023 0307 	bic.w	r3, r3, #7
 801e1a2:	3308      	adds	r3, #8
 801e1a4:	9303      	str	r3, [sp, #12]
 801e1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e1a8:	4433      	add	r3, r6
 801e1aa:	9309      	str	r3, [sp, #36]	; 0x24
 801e1ac:	e767      	b.n	801e07e <_svfiprintf_r+0x4e>
 801e1ae:	fb0c 3202 	mla	r2, ip, r2, r3
 801e1b2:	460c      	mov	r4, r1
 801e1b4:	2001      	movs	r0, #1
 801e1b6:	e7a5      	b.n	801e104 <_svfiprintf_r+0xd4>
 801e1b8:	2300      	movs	r3, #0
 801e1ba:	3401      	adds	r4, #1
 801e1bc:	9305      	str	r3, [sp, #20]
 801e1be:	4619      	mov	r1, r3
 801e1c0:	f04f 0c0a 	mov.w	ip, #10
 801e1c4:	4620      	mov	r0, r4
 801e1c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e1ca:	3a30      	subs	r2, #48	; 0x30
 801e1cc:	2a09      	cmp	r2, #9
 801e1ce:	d903      	bls.n	801e1d8 <_svfiprintf_r+0x1a8>
 801e1d0:	2b00      	cmp	r3, #0
 801e1d2:	d0c5      	beq.n	801e160 <_svfiprintf_r+0x130>
 801e1d4:	9105      	str	r1, [sp, #20]
 801e1d6:	e7c3      	b.n	801e160 <_svfiprintf_r+0x130>
 801e1d8:	fb0c 2101 	mla	r1, ip, r1, r2
 801e1dc:	4604      	mov	r4, r0
 801e1de:	2301      	movs	r3, #1
 801e1e0:	e7f0      	b.n	801e1c4 <_svfiprintf_r+0x194>
 801e1e2:	ab03      	add	r3, sp, #12
 801e1e4:	9300      	str	r3, [sp, #0]
 801e1e6:	462a      	mov	r2, r5
 801e1e8:	4b0f      	ldr	r3, [pc, #60]	; (801e228 <_svfiprintf_r+0x1f8>)
 801e1ea:	a904      	add	r1, sp, #16
 801e1ec:	4638      	mov	r0, r7
 801e1ee:	f7fc f9df 	bl	801a5b0 <_printf_float>
 801e1f2:	1c42      	adds	r2, r0, #1
 801e1f4:	4606      	mov	r6, r0
 801e1f6:	d1d6      	bne.n	801e1a6 <_svfiprintf_r+0x176>
 801e1f8:	89ab      	ldrh	r3, [r5, #12]
 801e1fa:	065b      	lsls	r3, r3, #25
 801e1fc:	f53f af2c 	bmi.w	801e058 <_svfiprintf_r+0x28>
 801e200:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e202:	b01d      	add	sp, #116	; 0x74
 801e204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e208:	ab03      	add	r3, sp, #12
 801e20a:	9300      	str	r3, [sp, #0]
 801e20c:	462a      	mov	r2, r5
 801e20e:	4b06      	ldr	r3, [pc, #24]	; (801e228 <_svfiprintf_r+0x1f8>)
 801e210:	a904      	add	r1, sp, #16
 801e212:	4638      	mov	r0, r7
 801e214:	f7fc fc70 	bl	801aaf8 <_printf_i>
 801e218:	e7eb      	b.n	801e1f2 <_svfiprintf_r+0x1c2>
 801e21a:	bf00      	nop
 801e21c:	08020bbc 	.word	0x08020bbc
 801e220:	08020bc6 	.word	0x08020bc6
 801e224:	0801a5b1 	.word	0x0801a5b1
 801e228:	0801df79 	.word	0x0801df79
 801e22c:	08020bc2 	.word	0x08020bc2

0801e230 <_read_r>:
 801e230:	b538      	push	{r3, r4, r5, lr}
 801e232:	4d07      	ldr	r5, [pc, #28]	; (801e250 <_read_r+0x20>)
 801e234:	4604      	mov	r4, r0
 801e236:	4608      	mov	r0, r1
 801e238:	4611      	mov	r1, r2
 801e23a:	2200      	movs	r2, #0
 801e23c:	602a      	str	r2, [r5, #0]
 801e23e:	461a      	mov	r2, r3
 801e240:	f7ee f926 	bl	800c490 <_read>
 801e244:	1c43      	adds	r3, r0, #1
 801e246:	d102      	bne.n	801e24e <_read_r+0x1e>
 801e248:	682b      	ldr	r3, [r5, #0]
 801e24a:	b103      	cbz	r3, 801e24e <_read_r+0x1e>
 801e24c:	6023      	str	r3, [r4, #0]
 801e24e:	bd38      	pop	{r3, r4, r5, pc}
 801e250:	2000aaa4 	.word	0x2000aaa4
 801e254:	00000000 	.word	0x00000000

0801e258 <nan>:
 801e258:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801e260 <nan+0x8>
 801e25c:	4770      	bx	lr
 801e25e:	bf00      	nop
 801e260:	00000000 	.word	0x00000000
 801e264:	7ff80000 	.word	0x7ff80000

0801e268 <finitef>:
 801e268:	b082      	sub	sp, #8
 801e26a:	ed8d 0a01 	vstr	s0, [sp, #4]
 801e26e:	9801      	ldr	r0, [sp, #4]
 801e270:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801e274:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801e278:	bfac      	ite	ge
 801e27a:	2000      	movge	r0, #0
 801e27c:	2001      	movlt	r0, #1
 801e27e:	b002      	add	sp, #8
 801e280:	4770      	bx	lr

0801e282 <strncmp>:
 801e282:	b510      	push	{r4, lr}
 801e284:	b16a      	cbz	r2, 801e2a2 <strncmp+0x20>
 801e286:	3901      	subs	r1, #1
 801e288:	1884      	adds	r4, r0, r2
 801e28a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801e28e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801e292:	4293      	cmp	r3, r2
 801e294:	d103      	bne.n	801e29e <strncmp+0x1c>
 801e296:	42a0      	cmp	r0, r4
 801e298:	d001      	beq.n	801e29e <strncmp+0x1c>
 801e29a:	2b00      	cmp	r3, #0
 801e29c:	d1f5      	bne.n	801e28a <strncmp+0x8>
 801e29e:	1a98      	subs	r0, r3, r2
 801e2a0:	bd10      	pop	{r4, pc}
 801e2a2:	4610      	mov	r0, r2
 801e2a4:	e7fc      	b.n	801e2a0 <strncmp+0x1e>

0801e2a6 <__ascii_wctomb>:
 801e2a6:	b149      	cbz	r1, 801e2bc <__ascii_wctomb+0x16>
 801e2a8:	2aff      	cmp	r2, #255	; 0xff
 801e2aa:	bf85      	ittet	hi
 801e2ac:	238a      	movhi	r3, #138	; 0x8a
 801e2ae:	6003      	strhi	r3, [r0, #0]
 801e2b0:	700a      	strbls	r2, [r1, #0]
 801e2b2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801e2b6:	bf98      	it	ls
 801e2b8:	2001      	movls	r0, #1
 801e2ba:	4770      	bx	lr
 801e2bc:	4608      	mov	r0, r1
 801e2be:	4770      	bx	lr

0801e2c0 <__assert_func>:
 801e2c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e2c2:	4614      	mov	r4, r2
 801e2c4:	461a      	mov	r2, r3
 801e2c6:	4b09      	ldr	r3, [pc, #36]	; (801e2ec <__assert_func+0x2c>)
 801e2c8:	681b      	ldr	r3, [r3, #0]
 801e2ca:	4605      	mov	r5, r0
 801e2cc:	68d8      	ldr	r0, [r3, #12]
 801e2ce:	b14c      	cbz	r4, 801e2e4 <__assert_func+0x24>
 801e2d0:	4b07      	ldr	r3, [pc, #28]	; (801e2f0 <__assert_func+0x30>)
 801e2d2:	9100      	str	r1, [sp, #0]
 801e2d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e2d8:	4906      	ldr	r1, [pc, #24]	; (801e2f4 <__assert_func+0x34>)
 801e2da:	462b      	mov	r3, r5
 801e2dc:	f000 f9a6 	bl	801e62c <fiprintf>
 801e2e0:	f000 fc14 	bl	801eb0c <abort>
 801e2e4:	4b04      	ldr	r3, [pc, #16]	; (801e2f8 <__assert_func+0x38>)
 801e2e6:	461c      	mov	r4, r3
 801e2e8:	e7f3      	b.n	801e2d2 <__assert_func+0x12>
 801e2ea:	bf00      	nop
 801e2ec:	2000008c 	.word	0x2000008c
 801e2f0:	08020bcd 	.word	0x08020bcd
 801e2f4:	08020bda 	.word	0x08020bda
 801e2f8:	08020c08 	.word	0x08020c08

0801e2fc <__sflush_r>:
 801e2fc:	898a      	ldrh	r2, [r1, #12]
 801e2fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e302:	4605      	mov	r5, r0
 801e304:	0710      	lsls	r0, r2, #28
 801e306:	460c      	mov	r4, r1
 801e308:	d458      	bmi.n	801e3bc <__sflush_r+0xc0>
 801e30a:	684b      	ldr	r3, [r1, #4]
 801e30c:	2b00      	cmp	r3, #0
 801e30e:	dc05      	bgt.n	801e31c <__sflush_r+0x20>
 801e310:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e312:	2b00      	cmp	r3, #0
 801e314:	dc02      	bgt.n	801e31c <__sflush_r+0x20>
 801e316:	2000      	movs	r0, #0
 801e318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e31c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e31e:	2e00      	cmp	r6, #0
 801e320:	d0f9      	beq.n	801e316 <__sflush_r+0x1a>
 801e322:	2300      	movs	r3, #0
 801e324:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e328:	682f      	ldr	r7, [r5, #0]
 801e32a:	602b      	str	r3, [r5, #0]
 801e32c:	d032      	beq.n	801e394 <__sflush_r+0x98>
 801e32e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e330:	89a3      	ldrh	r3, [r4, #12]
 801e332:	075a      	lsls	r2, r3, #29
 801e334:	d505      	bpl.n	801e342 <__sflush_r+0x46>
 801e336:	6863      	ldr	r3, [r4, #4]
 801e338:	1ac0      	subs	r0, r0, r3
 801e33a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e33c:	b10b      	cbz	r3, 801e342 <__sflush_r+0x46>
 801e33e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e340:	1ac0      	subs	r0, r0, r3
 801e342:	2300      	movs	r3, #0
 801e344:	4602      	mov	r2, r0
 801e346:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e348:	6a21      	ldr	r1, [r4, #32]
 801e34a:	4628      	mov	r0, r5
 801e34c:	47b0      	blx	r6
 801e34e:	1c43      	adds	r3, r0, #1
 801e350:	89a3      	ldrh	r3, [r4, #12]
 801e352:	d106      	bne.n	801e362 <__sflush_r+0x66>
 801e354:	6829      	ldr	r1, [r5, #0]
 801e356:	291d      	cmp	r1, #29
 801e358:	d82c      	bhi.n	801e3b4 <__sflush_r+0xb8>
 801e35a:	4a2a      	ldr	r2, [pc, #168]	; (801e404 <__sflush_r+0x108>)
 801e35c:	40ca      	lsrs	r2, r1
 801e35e:	07d6      	lsls	r6, r2, #31
 801e360:	d528      	bpl.n	801e3b4 <__sflush_r+0xb8>
 801e362:	2200      	movs	r2, #0
 801e364:	6062      	str	r2, [r4, #4]
 801e366:	04d9      	lsls	r1, r3, #19
 801e368:	6922      	ldr	r2, [r4, #16]
 801e36a:	6022      	str	r2, [r4, #0]
 801e36c:	d504      	bpl.n	801e378 <__sflush_r+0x7c>
 801e36e:	1c42      	adds	r2, r0, #1
 801e370:	d101      	bne.n	801e376 <__sflush_r+0x7a>
 801e372:	682b      	ldr	r3, [r5, #0]
 801e374:	b903      	cbnz	r3, 801e378 <__sflush_r+0x7c>
 801e376:	6560      	str	r0, [r4, #84]	; 0x54
 801e378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e37a:	602f      	str	r7, [r5, #0]
 801e37c:	2900      	cmp	r1, #0
 801e37e:	d0ca      	beq.n	801e316 <__sflush_r+0x1a>
 801e380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e384:	4299      	cmp	r1, r3
 801e386:	d002      	beq.n	801e38e <__sflush_r+0x92>
 801e388:	4628      	mov	r0, r5
 801e38a:	f7fb ffc7 	bl	801a31c <_free_r>
 801e38e:	2000      	movs	r0, #0
 801e390:	6360      	str	r0, [r4, #52]	; 0x34
 801e392:	e7c1      	b.n	801e318 <__sflush_r+0x1c>
 801e394:	6a21      	ldr	r1, [r4, #32]
 801e396:	2301      	movs	r3, #1
 801e398:	4628      	mov	r0, r5
 801e39a:	47b0      	blx	r6
 801e39c:	1c41      	adds	r1, r0, #1
 801e39e:	d1c7      	bne.n	801e330 <__sflush_r+0x34>
 801e3a0:	682b      	ldr	r3, [r5, #0]
 801e3a2:	2b00      	cmp	r3, #0
 801e3a4:	d0c4      	beq.n	801e330 <__sflush_r+0x34>
 801e3a6:	2b1d      	cmp	r3, #29
 801e3a8:	d001      	beq.n	801e3ae <__sflush_r+0xb2>
 801e3aa:	2b16      	cmp	r3, #22
 801e3ac:	d101      	bne.n	801e3b2 <__sflush_r+0xb6>
 801e3ae:	602f      	str	r7, [r5, #0]
 801e3b0:	e7b1      	b.n	801e316 <__sflush_r+0x1a>
 801e3b2:	89a3      	ldrh	r3, [r4, #12]
 801e3b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e3b8:	81a3      	strh	r3, [r4, #12]
 801e3ba:	e7ad      	b.n	801e318 <__sflush_r+0x1c>
 801e3bc:	690f      	ldr	r7, [r1, #16]
 801e3be:	2f00      	cmp	r7, #0
 801e3c0:	d0a9      	beq.n	801e316 <__sflush_r+0x1a>
 801e3c2:	0793      	lsls	r3, r2, #30
 801e3c4:	680e      	ldr	r6, [r1, #0]
 801e3c6:	bf08      	it	eq
 801e3c8:	694b      	ldreq	r3, [r1, #20]
 801e3ca:	600f      	str	r7, [r1, #0]
 801e3cc:	bf18      	it	ne
 801e3ce:	2300      	movne	r3, #0
 801e3d0:	eba6 0807 	sub.w	r8, r6, r7
 801e3d4:	608b      	str	r3, [r1, #8]
 801e3d6:	f1b8 0f00 	cmp.w	r8, #0
 801e3da:	dd9c      	ble.n	801e316 <__sflush_r+0x1a>
 801e3dc:	6a21      	ldr	r1, [r4, #32]
 801e3de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e3e0:	4643      	mov	r3, r8
 801e3e2:	463a      	mov	r2, r7
 801e3e4:	4628      	mov	r0, r5
 801e3e6:	47b0      	blx	r6
 801e3e8:	2800      	cmp	r0, #0
 801e3ea:	dc06      	bgt.n	801e3fa <__sflush_r+0xfe>
 801e3ec:	89a3      	ldrh	r3, [r4, #12]
 801e3ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e3f2:	81a3      	strh	r3, [r4, #12]
 801e3f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e3f8:	e78e      	b.n	801e318 <__sflush_r+0x1c>
 801e3fa:	4407      	add	r7, r0
 801e3fc:	eba8 0800 	sub.w	r8, r8, r0
 801e400:	e7e9      	b.n	801e3d6 <__sflush_r+0xda>
 801e402:	bf00      	nop
 801e404:	20400001 	.word	0x20400001

0801e408 <_fflush_r>:
 801e408:	b538      	push	{r3, r4, r5, lr}
 801e40a:	690b      	ldr	r3, [r1, #16]
 801e40c:	4605      	mov	r5, r0
 801e40e:	460c      	mov	r4, r1
 801e410:	b913      	cbnz	r3, 801e418 <_fflush_r+0x10>
 801e412:	2500      	movs	r5, #0
 801e414:	4628      	mov	r0, r5
 801e416:	bd38      	pop	{r3, r4, r5, pc}
 801e418:	b118      	cbz	r0, 801e422 <_fflush_r+0x1a>
 801e41a:	6983      	ldr	r3, [r0, #24]
 801e41c:	b90b      	cbnz	r3, 801e422 <_fflush_r+0x1a>
 801e41e:	f000 f887 	bl	801e530 <__sinit>
 801e422:	4b14      	ldr	r3, [pc, #80]	; (801e474 <_fflush_r+0x6c>)
 801e424:	429c      	cmp	r4, r3
 801e426:	d11b      	bne.n	801e460 <_fflush_r+0x58>
 801e428:	686c      	ldr	r4, [r5, #4]
 801e42a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e42e:	2b00      	cmp	r3, #0
 801e430:	d0ef      	beq.n	801e412 <_fflush_r+0xa>
 801e432:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e434:	07d0      	lsls	r0, r2, #31
 801e436:	d404      	bmi.n	801e442 <_fflush_r+0x3a>
 801e438:	0599      	lsls	r1, r3, #22
 801e43a:	d402      	bmi.n	801e442 <_fflush_r+0x3a>
 801e43c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e43e:	f000 f927 	bl	801e690 <__retarget_lock_acquire_recursive>
 801e442:	4628      	mov	r0, r5
 801e444:	4621      	mov	r1, r4
 801e446:	f7ff ff59 	bl	801e2fc <__sflush_r>
 801e44a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e44c:	07da      	lsls	r2, r3, #31
 801e44e:	4605      	mov	r5, r0
 801e450:	d4e0      	bmi.n	801e414 <_fflush_r+0xc>
 801e452:	89a3      	ldrh	r3, [r4, #12]
 801e454:	059b      	lsls	r3, r3, #22
 801e456:	d4dd      	bmi.n	801e414 <_fflush_r+0xc>
 801e458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e45a:	f000 f91a 	bl	801e692 <__retarget_lock_release_recursive>
 801e45e:	e7d9      	b.n	801e414 <_fflush_r+0xc>
 801e460:	4b05      	ldr	r3, [pc, #20]	; (801e478 <_fflush_r+0x70>)
 801e462:	429c      	cmp	r4, r3
 801e464:	d101      	bne.n	801e46a <_fflush_r+0x62>
 801e466:	68ac      	ldr	r4, [r5, #8]
 801e468:	e7df      	b.n	801e42a <_fflush_r+0x22>
 801e46a:	4b04      	ldr	r3, [pc, #16]	; (801e47c <_fflush_r+0x74>)
 801e46c:	429c      	cmp	r4, r3
 801e46e:	bf08      	it	eq
 801e470:	68ec      	ldreq	r4, [r5, #12]
 801e472:	e7da      	b.n	801e42a <_fflush_r+0x22>
 801e474:	08020c2c 	.word	0x08020c2c
 801e478:	08020c4c 	.word	0x08020c4c
 801e47c:	08020c0c 	.word	0x08020c0c

0801e480 <std>:
 801e480:	2300      	movs	r3, #0
 801e482:	b510      	push	{r4, lr}
 801e484:	4604      	mov	r4, r0
 801e486:	e9c0 3300 	strd	r3, r3, [r0]
 801e48a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e48e:	6083      	str	r3, [r0, #8]
 801e490:	8181      	strh	r1, [r0, #12]
 801e492:	6643      	str	r3, [r0, #100]	; 0x64
 801e494:	81c2      	strh	r2, [r0, #14]
 801e496:	6183      	str	r3, [r0, #24]
 801e498:	4619      	mov	r1, r3
 801e49a:	2208      	movs	r2, #8
 801e49c:	305c      	adds	r0, #92	; 0x5c
 801e49e:	f7fb ff35 	bl	801a30c <memset>
 801e4a2:	4b05      	ldr	r3, [pc, #20]	; (801e4b8 <std+0x38>)
 801e4a4:	6263      	str	r3, [r4, #36]	; 0x24
 801e4a6:	4b05      	ldr	r3, [pc, #20]	; (801e4bc <std+0x3c>)
 801e4a8:	62a3      	str	r3, [r4, #40]	; 0x28
 801e4aa:	4b05      	ldr	r3, [pc, #20]	; (801e4c0 <std+0x40>)
 801e4ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e4ae:	4b05      	ldr	r3, [pc, #20]	; (801e4c4 <std+0x44>)
 801e4b0:	6224      	str	r4, [r4, #32]
 801e4b2:	6323      	str	r3, [r4, #48]	; 0x30
 801e4b4:	bd10      	pop	{r4, pc}
 801e4b6:	bf00      	nop
 801e4b8:	0801b311 	.word	0x0801b311
 801e4bc:	0801b333 	.word	0x0801b333
 801e4c0:	0801b36b 	.word	0x0801b36b
 801e4c4:	0801b38f 	.word	0x0801b38f

0801e4c8 <_cleanup_r>:
 801e4c8:	4901      	ldr	r1, [pc, #4]	; (801e4d0 <_cleanup_r+0x8>)
 801e4ca:	f000 b8c1 	b.w	801e650 <_fwalk_reent>
 801e4ce:	bf00      	nop
 801e4d0:	0801e409 	.word	0x0801e409

0801e4d4 <__sfmoreglue>:
 801e4d4:	b570      	push	{r4, r5, r6, lr}
 801e4d6:	1e4a      	subs	r2, r1, #1
 801e4d8:	2568      	movs	r5, #104	; 0x68
 801e4da:	4355      	muls	r5, r2
 801e4dc:	460e      	mov	r6, r1
 801e4de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e4e2:	f7fb ff6b 	bl	801a3bc <_malloc_r>
 801e4e6:	4604      	mov	r4, r0
 801e4e8:	b140      	cbz	r0, 801e4fc <__sfmoreglue+0x28>
 801e4ea:	2100      	movs	r1, #0
 801e4ec:	e9c0 1600 	strd	r1, r6, [r0]
 801e4f0:	300c      	adds	r0, #12
 801e4f2:	60a0      	str	r0, [r4, #8]
 801e4f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e4f8:	f7fb ff08 	bl	801a30c <memset>
 801e4fc:	4620      	mov	r0, r4
 801e4fe:	bd70      	pop	{r4, r5, r6, pc}

0801e500 <__sfp_lock_acquire>:
 801e500:	4801      	ldr	r0, [pc, #4]	; (801e508 <__sfp_lock_acquire+0x8>)
 801e502:	f000 b8c5 	b.w	801e690 <__retarget_lock_acquire_recursive>
 801e506:	bf00      	nop
 801e508:	2000aab0 	.word	0x2000aab0

0801e50c <__sfp_lock_release>:
 801e50c:	4801      	ldr	r0, [pc, #4]	; (801e514 <__sfp_lock_release+0x8>)
 801e50e:	f000 b8c0 	b.w	801e692 <__retarget_lock_release_recursive>
 801e512:	bf00      	nop
 801e514:	2000aab0 	.word	0x2000aab0

0801e518 <__sinit_lock_acquire>:
 801e518:	4801      	ldr	r0, [pc, #4]	; (801e520 <__sinit_lock_acquire+0x8>)
 801e51a:	f000 b8b9 	b.w	801e690 <__retarget_lock_acquire_recursive>
 801e51e:	bf00      	nop
 801e520:	2000aaab 	.word	0x2000aaab

0801e524 <__sinit_lock_release>:
 801e524:	4801      	ldr	r0, [pc, #4]	; (801e52c <__sinit_lock_release+0x8>)
 801e526:	f000 b8b4 	b.w	801e692 <__retarget_lock_release_recursive>
 801e52a:	bf00      	nop
 801e52c:	2000aaab 	.word	0x2000aaab

0801e530 <__sinit>:
 801e530:	b510      	push	{r4, lr}
 801e532:	4604      	mov	r4, r0
 801e534:	f7ff fff0 	bl	801e518 <__sinit_lock_acquire>
 801e538:	69a3      	ldr	r3, [r4, #24]
 801e53a:	b11b      	cbz	r3, 801e544 <__sinit+0x14>
 801e53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e540:	f7ff bff0 	b.w	801e524 <__sinit_lock_release>
 801e544:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e548:	6523      	str	r3, [r4, #80]	; 0x50
 801e54a:	4b13      	ldr	r3, [pc, #76]	; (801e598 <__sinit+0x68>)
 801e54c:	4a13      	ldr	r2, [pc, #76]	; (801e59c <__sinit+0x6c>)
 801e54e:	681b      	ldr	r3, [r3, #0]
 801e550:	62a2      	str	r2, [r4, #40]	; 0x28
 801e552:	42a3      	cmp	r3, r4
 801e554:	bf04      	itt	eq
 801e556:	2301      	moveq	r3, #1
 801e558:	61a3      	streq	r3, [r4, #24]
 801e55a:	4620      	mov	r0, r4
 801e55c:	f000 f820 	bl	801e5a0 <__sfp>
 801e560:	6060      	str	r0, [r4, #4]
 801e562:	4620      	mov	r0, r4
 801e564:	f000 f81c 	bl	801e5a0 <__sfp>
 801e568:	60a0      	str	r0, [r4, #8]
 801e56a:	4620      	mov	r0, r4
 801e56c:	f000 f818 	bl	801e5a0 <__sfp>
 801e570:	2200      	movs	r2, #0
 801e572:	60e0      	str	r0, [r4, #12]
 801e574:	2104      	movs	r1, #4
 801e576:	6860      	ldr	r0, [r4, #4]
 801e578:	f7ff ff82 	bl	801e480 <std>
 801e57c:	68a0      	ldr	r0, [r4, #8]
 801e57e:	2201      	movs	r2, #1
 801e580:	2109      	movs	r1, #9
 801e582:	f7ff ff7d 	bl	801e480 <std>
 801e586:	68e0      	ldr	r0, [r4, #12]
 801e588:	2202      	movs	r2, #2
 801e58a:	2112      	movs	r1, #18
 801e58c:	f7ff ff78 	bl	801e480 <std>
 801e590:	2301      	movs	r3, #1
 801e592:	61a3      	str	r3, [r4, #24]
 801e594:	e7d2      	b.n	801e53c <__sinit+0xc>
 801e596:	bf00      	nop
 801e598:	080207b4 	.word	0x080207b4
 801e59c:	0801e4c9 	.word	0x0801e4c9

0801e5a0 <__sfp>:
 801e5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e5a2:	4607      	mov	r7, r0
 801e5a4:	f7ff ffac 	bl	801e500 <__sfp_lock_acquire>
 801e5a8:	4b1e      	ldr	r3, [pc, #120]	; (801e624 <__sfp+0x84>)
 801e5aa:	681e      	ldr	r6, [r3, #0]
 801e5ac:	69b3      	ldr	r3, [r6, #24]
 801e5ae:	b913      	cbnz	r3, 801e5b6 <__sfp+0x16>
 801e5b0:	4630      	mov	r0, r6
 801e5b2:	f7ff ffbd 	bl	801e530 <__sinit>
 801e5b6:	3648      	adds	r6, #72	; 0x48
 801e5b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e5bc:	3b01      	subs	r3, #1
 801e5be:	d503      	bpl.n	801e5c8 <__sfp+0x28>
 801e5c0:	6833      	ldr	r3, [r6, #0]
 801e5c2:	b30b      	cbz	r3, 801e608 <__sfp+0x68>
 801e5c4:	6836      	ldr	r6, [r6, #0]
 801e5c6:	e7f7      	b.n	801e5b8 <__sfp+0x18>
 801e5c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e5cc:	b9d5      	cbnz	r5, 801e604 <__sfp+0x64>
 801e5ce:	4b16      	ldr	r3, [pc, #88]	; (801e628 <__sfp+0x88>)
 801e5d0:	60e3      	str	r3, [r4, #12]
 801e5d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e5d6:	6665      	str	r5, [r4, #100]	; 0x64
 801e5d8:	f000 f859 	bl	801e68e <__retarget_lock_init_recursive>
 801e5dc:	f7ff ff96 	bl	801e50c <__sfp_lock_release>
 801e5e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e5e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e5e8:	6025      	str	r5, [r4, #0]
 801e5ea:	61a5      	str	r5, [r4, #24]
 801e5ec:	2208      	movs	r2, #8
 801e5ee:	4629      	mov	r1, r5
 801e5f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e5f4:	f7fb fe8a 	bl	801a30c <memset>
 801e5f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e5fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e600:	4620      	mov	r0, r4
 801e602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e604:	3468      	adds	r4, #104	; 0x68
 801e606:	e7d9      	b.n	801e5bc <__sfp+0x1c>
 801e608:	2104      	movs	r1, #4
 801e60a:	4638      	mov	r0, r7
 801e60c:	f7ff ff62 	bl	801e4d4 <__sfmoreglue>
 801e610:	4604      	mov	r4, r0
 801e612:	6030      	str	r0, [r6, #0]
 801e614:	2800      	cmp	r0, #0
 801e616:	d1d5      	bne.n	801e5c4 <__sfp+0x24>
 801e618:	f7ff ff78 	bl	801e50c <__sfp_lock_release>
 801e61c:	230c      	movs	r3, #12
 801e61e:	603b      	str	r3, [r7, #0]
 801e620:	e7ee      	b.n	801e600 <__sfp+0x60>
 801e622:	bf00      	nop
 801e624:	080207b4 	.word	0x080207b4
 801e628:	ffff0001 	.word	0xffff0001

0801e62c <fiprintf>:
 801e62c:	b40e      	push	{r1, r2, r3}
 801e62e:	b503      	push	{r0, r1, lr}
 801e630:	4601      	mov	r1, r0
 801e632:	ab03      	add	r3, sp, #12
 801e634:	4805      	ldr	r0, [pc, #20]	; (801e64c <fiprintf+0x20>)
 801e636:	f853 2b04 	ldr.w	r2, [r3], #4
 801e63a:	6800      	ldr	r0, [r0, #0]
 801e63c:	9301      	str	r3, [sp, #4]
 801e63e:	f000 f875 	bl	801e72c <_vfiprintf_r>
 801e642:	b002      	add	sp, #8
 801e644:	f85d eb04 	ldr.w	lr, [sp], #4
 801e648:	b003      	add	sp, #12
 801e64a:	4770      	bx	lr
 801e64c:	2000008c 	.word	0x2000008c

0801e650 <_fwalk_reent>:
 801e650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e654:	4606      	mov	r6, r0
 801e656:	4688      	mov	r8, r1
 801e658:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e65c:	2700      	movs	r7, #0
 801e65e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e662:	f1b9 0901 	subs.w	r9, r9, #1
 801e666:	d505      	bpl.n	801e674 <_fwalk_reent+0x24>
 801e668:	6824      	ldr	r4, [r4, #0]
 801e66a:	2c00      	cmp	r4, #0
 801e66c:	d1f7      	bne.n	801e65e <_fwalk_reent+0xe>
 801e66e:	4638      	mov	r0, r7
 801e670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e674:	89ab      	ldrh	r3, [r5, #12]
 801e676:	2b01      	cmp	r3, #1
 801e678:	d907      	bls.n	801e68a <_fwalk_reent+0x3a>
 801e67a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e67e:	3301      	adds	r3, #1
 801e680:	d003      	beq.n	801e68a <_fwalk_reent+0x3a>
 801e682:	4629      	mov	r1, r5
 801e684:	4630      	mov	r0, r6
 801e686:	47c0      	blx	r8
 801e688:	4307      	orrs	r7, r0
 801e68a:	3568      	adds	r5, #104	; 0x68
 801e68c:	e7e9      	b.n	801e662 <_fwalk_reent+0x12>

0801e68e <__retarget_lock_init_recursive>:
 801e68e:	4770      	bx	lr

0801e690 <__retarget_lock_acquire_recursive>:
 801e690:	4770      	bx	lr

0801e692 <__retarget_lock_release_recursive>:
 801e692:	4770      	bx	lr

0801e694 <memmove>:
 801e694:	4288      	cmp	r0, r1
 801e696:	b510      	push	{r4, lr}
 801e698:	eb01 0402 	add.w	r4, r1, r2
 801e69c:	d902      	bls.n	801e6a4 <memmove+0x10>
 801e69e:	4284      	cmp	r4, r0
 801e6a0:	4623      	mov	r3, r4
 801e6a2:	d807      	bhi.n	801e6b4 <memmove+0x20>
 801e6a4:	1e43      	subs	r3, r0, #1
 801e6a6:	42a1      	cmp	r1, r4
 801e6a8:	d008      	beq.n	801e6bc <memmove+0x28>
 801e6aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e6ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e6b2:	e7f8      	b.n	801e6a6 <memmove+0x12>
 801e6b4:	4402      	add	r2, r0
 801e6b6:	4601      	mov	r1, r0
 801e6b8:	428a      	cmp	r2, r1
 801e6ba:	d100      	bne.n	801e6be <memmove+0x2a>
 801e6bc:	bd10      	pop	{r4, pc}
 801e6be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e6c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e6c6:	e7f7      	b.n	801e6b8 <memmove+0x24>

0801e6c8 <_malloc_usable_size_r>:
 801e6c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e6cc:	1f18      	subs	r0, r3, #4
 801e6ce:	2b00      	cmp	r3, #0
 801e6d0:	bfbc      	itt	lt
 801e6d2:	580b      	ldrlt	r3, [r1, r0]
 801e6d4:	18c0      	addlt	r0, r0, r3
 801e6d6:	4770      	bx	lr

0801e6d8 <__sfputc_r>:
 801e6d8:	6893      	ldr	r3, [r2, #8]
 801e6da:	3b01      	subs	r3, #1
 801e6dc:	2b00      	cmp	r3, #0
 801e6de:	b410      	push	{r4}
 801e6e0:	6093      	str	r3, [r2, #8]
 801e6e2:	da08      	bge.n	801e6f6 <__sfputc_r+0x1e>
 801e6e4:	6994      	ldr	r4, [r2, #24]
 801e6e6:	42a3      	cmp	r3, r4
 801e6e8:	db01      	blt.n	801e6ee <__sfputc_r+0x16>
 801e6ea:	290a      	cmp	r1, #10
 801e6ec:	d103      	bne.n	801e6f6 <__sfputc_r+0x1e>
 801e6ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e6f2:	f000 b94b 	b.w	801e98c <__swbuf_r>
 801e6f6:	6813      	ldr	r3, [r2, #0]
 801e6f8:	1c58      	adds	r0, r3, #1
 801e6fa:	6010      	str	r0, [r2, #0]
 801e6fc:	7019      	strb	r1, [r3, #0]
 801e6fe:	4608      	mov	r0, r1
 801e700:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e704:	4770      	bx	lr

0801e706 <__sfputs_r>:
 801e706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e708:	4606      	mov	r6, r0
 801e70a:	460f      	mov	r7, r1
 801e70c:	4614      	mov	r4, r2
 801e70e:	18d5      	adds	r5, r2, r3
 801e710:	42ac      	cmp	r4, r5
 801e712:	d101      	bne.n	801e718 <__sfputs_r+0x12>
 801e714:	2000      	movs	r0, #0
 801e716:	e007      	b.n	801e728 <__sfputs_r+0x22>
 801e718:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e71c:	463a      	mov	r2, r7
 801e71e:	4630      	mov	r0, r6
 801e720:	f7ff ffda 	bl	801e6d8 <__sfputc_r>
 801e724:	1c43      	adds	r3, r0, #1
 801e726:	d1f3      	bne.n	801e710 <__sfputs_r+0xa>
 801e728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e72c <_vfiprintf_r>:
 801e72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e730:	460d      	mov	r5, r1
 801e732:	b09d      	sub	sp, #116	; 0x74
 801e734:	4614      	mov	r4, r2
 801e736:	4698      	mov	r8, r3
 801e738:	4606      	mov	r6, r0
 801e73a:	b118      	cbz	r0, 801e744 <_vfiprintf_r+0x18>
 801e73c:	6983      	ldr	r3, [r0, #24]
 801e73e:	b90b      	cbnz	r3, 801e744 <_vfiprintf_r+0x18>
 801e740:	f7ff fef6 	bl	801e530 <__sinit>
 801e744:	4b89      	ldr	r3, [pc, #548]	; (801e96c <_vfiprintf_r+0x240>)
 801e746:	429d      	cmp	r5, r3
 801e748:	d11b      	bne.n	801e782 <_vfiprintf_r+0x56>
 801e74a:	6875      	ldr	r5, [r6, #4]
 801e74c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e74e:	07d9      	lsls	r1, r3, #31
 801e750:	d405      	bmi.n	801e75e <_vfiprintf_r+0x32>
 801e752:	89ab      	ldrh	r3, [r5, #12]
 801e754:	059a      	lsls	r2, r3, #22
 801e756:	d402      	bmi.n	801e75e <_vfiprintf_r+0x32>
 801e758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e75a:	f7ff ff99 	bl	801e690 <__retarget_lock_acquire_recursive>
 801e75e:	89ab      	ldrh	r3, [r5, #12]
 801e760:	071b      	lsls	r3, r3, #28
 801e762:	d501      	bpl.n	801e768 <_vfiprintf_r+0x3c>
 801e764:	692b      	ldr	r3, [r5, #16]
 801e766:	b9eb      	cbnz	r3, 801e7a4 <_vfiprintf_r+0x78>
 801e768:	4629      	mov	r1, r5
 801e76a:	4630      	mov	r0, r6
 801e76c:	f000 f960 	bl	801ea30 <__swsetup_r>
 801e770:	b1c0      	cbz	r0, 801e7a4 <_vfiprintf_r+0x78>
 801e772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e774:	07dc      	lsls	r4, r3, #31
 801e776:	d50e      	bpl.n	801e796 <_vfiprintf_r+0x6a>
 801e778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e77c:	b01d      	add	sp, #116	; 0x74
 801e77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e782:	4b7b      	ldr	r3, [pc, #492]	; (801e970 <_vfiprintf_r+0x244>)
 801e784:	429d      	cmp	r5, r3
 801e786:	d101      	bne.n	801e78c <_vfiprintf_r+0x60>
 801e788:	68b5      	ldr	r5, [r6, #8]
 801e78a:	e7df      	b.n	801e74c <_vfiprintf_r+0x20>
 801e78c:	4b79      	ldr	r3, [pc, #484]	; (801e974 <_vfiprintf_r+0x248>)
 801e78e:	429d      	cmp	r5, r3
 801e790:	bf08      	it	eq
 801e792:	68f5      	ldreq	r5, [r6, #12]
 801e794:	e7da      	b.n	801e74c <_vfiprintf_r+0x20>
 801e796:	89ab      	ldrh	r3, [r5, #12]
 801e798:	0598      	lsls	r0, r3, #22
 801e79a:	d4ed      	bmi.n	801e778 <_vfiprintf_r+0x4c>
 801e79c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e79e:	f7ff ff78 	bl	801e692 <__retarget_lock_release_recursive>
 801e7a2:	e7e9      	b.n	801e778 <_vfiprintf_r+0x4c>
 801e7a4:	2300      	movs	r3, #0
 801e7a6:	9309      	str	r3, [sp, #36]	; 0x24
 801e7a8:	2320      	movs	r3, #32
 801e7aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e7ae:	f8cd 800c 	str.w	r8, [sp, #12]
 801e7b2:	2330      	movs	r3, #48	; 0x30
 801e7b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e978 <_vfiprintf_r+0x24c>
 801e7b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e7bc:	f04f 0901 	mov.w	r9, #1
 801e7c0:	4623      	mov	r3, r4
 801e7c2:	469a      	mov	sl, r3
 801e7c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e7c8:	b10a      	cbz	r2, 801e7ce <_vfiprintf_r+0xa2>
 801e7ca:	2a25      	cmp	r2, #37	; 0x25
 801e7cc:	d1f9      	bne.n	801e7c2 <_vfiprintf_r+0x96>
 801e7ce:	ebba 0b04 	subs.w	fp, sl, r4
 801e7d2:	d00b      	beq.n	801e7ec <_vfiprintf_r+0xc0>
 801e7d4:	465b      	mov	r3, fp
 801e7d6:	4622      	mov	r2, r4
 801e7d8:	4629      	mov	r1, r5
 801e7da:	4630      	mov	r0, r6
 801e7dc:	f7ff ff93 	bl	801e706 <__sfputs_r>
 801e7e0:	3001      	adds	r0, #1
 801e7e2:	f000 80aa 	beq.w	801e93a <_vfiprintf_r+0x20e>
 801e7e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e7e8:	445a      	add	r2, fp
 801e7ea:	9209      	str	r2, [sp, #36]	; 0x24
 801e7ec:	f89a 3000 	ldrb.w	r3, [sl]
 801e7f0:	2b00      	cmp	r3, #0
 801e7f2:	f000 80a2 	beq.w	801e93a <_vfiprintf_r+0x20e>
 801e7f6:	2300      	movs	r3, #0
 801e7f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e7fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e800:	f10a 0a01 	add.w	sl, sl, #1
 801e804:	9304      	str	r3, [sp, #16]
 801e806:	9307      	str	r3, [sp, #28]
 801e808:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e80c:	931a      	str	r3, [sp, #104]	; 0x68
 801e80e:	4654      	mov	r4, sl
 801e810:	2205      	movs	r2, #5
 801e812:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e816:	4858      	ldr	r0, [pc, #352]	; (801e978 <_vfiprintf_r+0x24c>)
 801e818:	f7e1 fce2 	bl	80001e0 <memchr>
 801e81c:	9a04      	ldr	r2, [sp, #16]
 801e81e:	b9d8      	cbnz	r0, 801e858 <_vfiprintf_r+0x12c>
 801e820:	06d1      	lsls	r1, r2, #27
 801e822:	bf44      	itt	mi
 801e824:	2320      	movmi	r3, #32
 801e826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e82a:	0713      	lsls	r3, r2, #28
 801e82c:	bf44      	itt	mi
 801e82e:	232b      	movmi	r3, #43	; 0x2b
 801e830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e834:	f89a 3000 	ldrb.w	r3, [sl]
 801e838:	2b2a      	cmp	r3, #42	; 0x2a
 801e83a:	d015      	beq.n	801e868 <_vfiprintf_r+0x13c>
 801e83c:	9a07      	ldr	r2, [sp, #28]
 801e83e:	4654      	mov	r4, sl
 801e840:	2000      	movs	r0, #0
 801e842:	f04f 0c0a 	mov.w	ip, #10
 801e846:	4621      	mov	r1, r4
 801e848:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e84c:	3b30      	subs	r3, #48	; 0x30
 801e84e:	2b09      	cmp	r3, #9
 801e850:	d94e      	bls.n	801e8f0 <_vfiprintf_r+0x1c4>
 801e852:	b1b0      	cbz	r0, 801e882 <_vfiprintf_r+0x156>
 801e854:	9207      	str	r2, [sp, #28]
 801e856:	e014      	b.n	801e882 <_vfiprintf_r+0x156>
 801e858:	eba0 0308 	sub.w	r3, r0, r8
 801e85c:	fa09 f303 	lsl.w	r3, r9, r3
 801e860:	4313      	orrs	r3, r2
 801e862:	9304      	str	r3, [sp, #16]
 801e864:	46a2      	mov	sl, r4
 801e866:	e7d2      	b.n	801e80e <_vfiprintf_r+0xe2>
 801e868:	9b03      	ldr	r3, [sp, #12]
 801e86a:	1d19      	adds	r1, r3, #4
 801e86c:	681b      	ldr	r3, [r3, #0]
 801e86e:	9103      	str	r1, [sp, #12]
 801e870:	2b00      	cmp	r3, #0
 801e872:	bfbb      	ittet	lt
 801e874:	425b      	neglt	r3, r3
 801e876:	f042 0202 	orrlt.w	r2, r2, #2
 801e87a:	9307      	strge	r3, [sp, #28]
 801e87c:	9307      	strlt	r3, [sp, #28]
 801e87e:	bfb8      	it	lt
 801e880:	9204      	strlt	r2, [sp, #16]
 801e882:	7823      	ldrb	r3, [r4, #0]
 801e884:	2b2e      	cmp	r3, #46	; 0x2e
 801e886:	d10c      	bne.n	801e8a2 <_vfiprintf_r+0x176>
 801e888:	7863      	ldrb	r3, [r4, #1]
 801e88a:	2b2a      	cmp	r3, #42	; 0x2a
 801e88c:	d135      	bne.n	801e8fa <_vfiprintf_r+0x1ce>
 801e88e:	9b03      	ldr	r3, [sp, #12]
 801e890:	1d1a      	adds	r2, r3, #4
 801e892:	681b      	ldr	r3, [r3, #0]
 801e894:	9203      	str	r2, [sp, #12]
 801e896:	2b00      	cmp	r3, #0
 801e898:	bfb8      	it	lt
 801e89a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801e89e:	3402      	adds	r4, #2
 801e8a0:	9305      	str	r3, [sp, #20]
 801e8a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e988 <_vfiprintf_r+0x25c>
 801e8a6:	7821      	ldrb	r1, [r4, #0]
 801e8a8:	2203      	movs	r2, #3
 801e8aa:	4650      	mov	r0, sl
 801e8ac:	f7e1 fc98 	bl	80001e0 <memchr>
 801e8b0:	b140      	cbz	r0, 801e8c4 <_vfiprintf_r+0x198>
 801e8b2:	2340      	movs	r3, #64	; 0x40
 801e8b4:	eba0 000a 	sub.w	r0, r0, sl
 801e8b8:	fa03 f000 	lsl.w	r0, r3, r0
 801e8bc:	9b04      	ldr	r3, [sp, #16]
 801e8be:	4303      	orrs	r3, r0
 801e8c0:	3401      	adds	r4, #1
 801e8c2:	9304      	str	r3, [sp, #16]
 801e8c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e8c8:	482c      	ldr	r0, [pc, #176]	; (801e97c <_vfiprintf_r+0x250>)
 801e8ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e8ce:	2206      	movs	r2, #6
 801e8d0:	f7e1 fc86 	bl	80001e0 <memchr>
 801e8d4:	2800      	cmp	r0, #0
 801e8d6:	d03f      	beq.n	801e958 <_vfiprintf_r+0x22c>
 801e8d8:	4b29      	ldr	r3, [pc, #164]	; (801e980 <_vfiprintf_r+0x254>)
 801e8da:	bb1b      	cbnz	r3, 801e924 <_vfiprintf_r+0x1f8>
 801e8dc:	9b03      	ldr	r3, [sp, #12]
 801e8de:	3307      	adds	r3, #7
 801e8e0:	f023 0307 	bic.w	r3, r3, #7
 801e8e4:	3308      	adds	r3, #8
 801e8e6:	9303      	str	r3, [sp, #12]
 801e8e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e8ea:	443b      	add	r3, r7
 801e8ec:	9309      	str	r3, [sp, #36]	; 0x24
 801e8ee:	e767      	b.n	801e7c0 <_vfiprintf_r+0x94>
 801e8f0:	fb0c 3202 	mla	r2, ip, r2, r3
 801e8f4:	460c      	mov	r4, r1
 801e8f6:	2001      	movs	r0, #1
 801e8f8:	e7a5      	b.n	801e846 <_vfiprintf_r+0x11a>
 801e8fa:	2300      	movs	r3, #0
 801e8fc:	3401      	adds	r4, #1
 801e8fe:	9305      	str	r3, [sp, #20]
 801e900:	4619      	mov	r1, r3
 801e902:	f04f 0c0a 	mov.w	ip, #10
 801e906:	4620      	mov	r0, r4
 801e908:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e90c:	3a30      	subs	r2, #48	; 0x30
 801e90e:	2a09      	cmp	r2, #9
 801e910:	d903      	bls.n	801e91a <_vfiprintf_r+0x1ee>
 801e912:	2b00      	cmp	r3, #0
 801e914:	d0c5      	beq.n	801e8a2 <_vfiprintf_r+0x176>
 801e916:	9105      	str	r1, [sp, #20]
 801e918:	e7c3      	b.n	801e8a2 <_vfiprintf_r+0x176>
 801e91a:	fb0c 2101 	mla	r1, ip, r1, r2
 801e91e:	4604      	mov	r4, r0
 801e920:	2301      	movs	r3, #1
 801e922:	e7f0      	b.n	801e906 <_vfiprintf_r+0x1da>
 801e924:	ab03      	add	r3, sp, #12
 801e926:	9300      	str	r3, [sp, #0]
 801e928:	462a      	mov	r2, r5
 801e92a:	4b16      	ldr	r3, [pc, #88]	; (801e984 <_vfiprintf_r+0x258>)
 801e92c:	a904      	add	r1, sp, #16
 801e92e:	4630      	mov	r0, r6
 801e930:	f7fb fe3e 	bl	801a5b0 <_printf_float>
 801e934:	4607      	mov	r7, r0
 801e936:	1c78      	adds	r0, r7, #1
 801e938:	d1d6      	bne.n	801e8e8 <_vfiprintf_r+0x1bc>
 801e93a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e93c:	07d9      	lsls	r1, r3, #31
 801e93e:	d405      	bmi.n	801e94c <_vfiprintf_r+0x220>
 801e940:	89ab      	ldrh	r3, [r5, #12]
 801e942:	059a      	lsls	r2, r3, #22
 801e944:	d402      	bmi.n	801e94c <_vfiprintf_r+0x220>
 801e946:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e948:	f7ff fea3 	bl	801e692 <__retarget_lock_release_recursive>
 801e94c:	89ab      	ldrh	r3, [r5, #12]
 801e94e:	065b      	lsls	r3, r3, #25
 801e950:	f53f af12 	bmi.w	801e778 <_vfiprintf_r+0x4c>
 801e954:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e956:	e711      	b.n	801e77c <_vfiprintf_r+0x50>
 801e958:	ab03      	add	r3, sp, #12
 801e95a:	9300      	str	r3, [sp, #0]
 801e95c:	462a      	mov	r2, r5
 801e95e:	4b09      	ldr	r3, [pc, #36]	; (801e984 <_vfiprintf_r+0x258>)
 801e960:	a904      	add	r1, sp, #16
 801e962:	4630      	mov	r0, r6
 801e964:	f7fc f8c8 	bl	801aaf8 <_printf_i>
 801e968:	e7e4      	b.n	801e934 <_vfiprintf_r+0x208>
 801e96a:	bf00      	nop
 801e96c:	08020c2c 	.word	0x08020c2c
 801e970:	08020c4c 	.word	0x08020c4c
 801e974:	08020c0c 	.word	0x08020c0c
 801e978:	08020bbc 	.word	0x08020bbc
 801e97c:	08020bc6 	.word	0x08020bc6
 801e980:	0801a5b1 	.word	0x0801a5b1
 801e984:	0801e707 	.word	0x0801e707
 801e988:	08020bc2 	.word	0x08020bc2

0801e98c <__swbuf_r>:
 801e98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e98e:	460e      	mov	r6, r1
 801e990:	4614      	mov	r4, r2
 801e992:	4605      	mov	r5, r0
 801e994:	b118      	cbz	r0, 801e99e <__swbuf_r+0x12>
 801e996:	6983      	ldr	r3, [r0, #24]
 801e998:	b90b      	cbnz	r3, 801e99e <__swbuf_r+0x12>
 801e99a:	f7ff fdc9 	bl	801e530 <__sinit>
 801e99e:	4b21      	ldr	r3, [pc, #132]	; (801ea24 <__swbuf_r+0x98>)
 801e9a0:	429c      	cmp	r4, r3
 801e9a2:	d12b      	bne.n	801e9fc <__swbuf_r+0x70>
 801e9a4:	686c      	ldr	r4, [r5, #4]
 801e9a6:	69a3      	ldr	r3, [r4, #24]
 801e9a8:	60a3      	str	r3, [r4, #8]
 801e9aa:	89a3      	ldrh	r3, [r4, #12]
 801e9ac:	071a      	lsls	r2, r3, #28
 801e9ae:	d52f      	bpl.n	801ea10 <__swbuf_r+0x84>
 801e9b0:	6923      	ldr	r3, [r4, #16]
 801e9b2:	b36b      	cbz	r3, 801ea10 <__swbuf_r+0x84>
 801e9b4:	6923      	ldr	r3, [r4, #16]
 801e9b6:	6820      	ldr	r0, [r4, #0]
 801e9b8:	1ac0      	subs	r0, r0, r3
 801e9ba:	6963      	ldr	r3, [r4, #20]
 801e9bc:	b2f6      	uxtb	r6, r6
 801e9be:	4283      	cmp	r3, r0
 801e9c0:	4637      	mov	r7, r6
 801e9c2:	dc04      	bgt.n	801e9ce <__swbuf_r+0x42>
 801e9c4:	4621      	mov	r1, r4
 801e9c6:	4628      	mov	r0, r5
 801e9c8:	f7ff fd1e 	bl	801e408 <_fflush_r>
 801e9cc:	bb30      	cbnz	r0, 801ea1c <__swbuf_r+0x90>
 801e9ce:	68a3      	ldr	r3, [r4, #8]
 801e9d0:	3b01      	subs	r3, #1
 801e9d2:	60a3      	str	r3, [r4, #8]
 801e9d4:	6823      	ldr	r3, [r4, #0]
 801e9d6:	1c5a      	adds	r2, r3, #1
 801e9d8:	6022      	str	r2, [r4, #0]
 801e9da:	701e      	strb	r6, [r3, #0]
 801e9dc:	6963      	ldr	r3, [r4, #20]
 801e9de:	3001      	adds	r0, #1
 801e9e0:	4283      	cmp	r3, r0
 801e9e2:	d004      	beq.n	801e9ee <__swbuf_r+0x62>
 801e9e4:	89a3      	ldrh	r3, [r4, #12]
 801e9e6:	07db      	lsls	r3, r3, #31
 801e9e8:	d506      	bpl.n	801e9f8 <__swbuf_r+0x6c>
 801e9ea:	2e0a      	cmp	r6, #10
 801e9ec:	d104      	bne.n	801e9f8 <__swbuf_r+0x6c>
 801e9ee:	4621      	mov	r1, r4
 801e9f0:	4628      	mov	r0, r5
 801e9f2:	f7ff fd09 	bl	801e408 <_fflush_r>
 801e9f6:	b988      	cbnz	r0, 801ea1c <__swbuf_r+0x90>
 801e9f8:	4638      	mov	r0, r7
 801e9fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e9fc:	4b0a      	ldr	r3, [pc, #40]	; (801ea28 <__swbuf_r+0x9c>)
 801e9fe:	429c      	cmp	r4, r3
 801ea00:	d101      	bne.n	801ea06 <__swbuf_r+0x7a>
 801ea02:	68ac      	ldr	r4, [r5, #8]
 801ea04:	e7cf      	b.n	801e9a6 <__swbuf_r+0x1a>
 801ea06:	4b09      	ldr	r3, [pc, #36]	; (801ea2c <__swbuf_r+0xa0>)
 801ea08:	429c      	cmp	r4, r3
 801ea0a:	bf08      	it	eq
 801ea0c:	68ec      	ldreq	r4, [r5, #12]
 801ea0e:	e7ca      	b.n	801e9a6 <__swbuf_r+0x1a>
 801ea10:	4621      	mov	r1, r4
 801ea12:	4628      	mov	r0, r5
 801ea14:	f000 f80c 	bl	801ea30 <__swsetup_r>
 801ea18:	2800      	cmp	r0, #0
 801ea1a:	d0cb      	beq.n	801e9b4 <__swbuf_r+0x28>
 801ea1c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801ea20:	e7ea      	b.n	801e9f8 <__swbuf_r+0x6c>
 801ea22:	bf00      	nop
 801ea24:	08020c2c 	.word	0x08020c2c
 801ea28:	08020c4c 	.word	0x08020c4c
 801ea2c:	08020c0c 	.word	0x08020c0c

0801ea30 <__swsetup_r>:
 801ea30:	4b32      	ldr	r3, [pc, #200]	; (801eafc <__swsetup_r+0xcc>)
 801ea32:	b570      	push	{r4, r5, r6, lr}
 801ea34:	681d      	ldr	r5, [r3, #0]
 801ea36:	4606      	mov	r6, r0
 801ea38:	460c      	mov	r4, r1
 801ea3a:	b125      	cbz	r5, 801ea46 <__swsetup_r+0x16>
 801ea3c:	69ab      	ldr	r3, [r5, #24]
 801ea3e:	b913      	cbnz	r3, 801ea46 <__swsetup_r+0x16>
 801ea40:	4628      	mov	r0, r5
 801ea42:	f7ff fd75 	bl	801e530 <__sinit>
 801ea46:	4b2e      	ldr	r3, [pc, #184]	; (801eb00 <__swsetup_r+0xd0>)
 801ea48:	429c      	cmp	r4, r3
 801ea4a:	d10f      	bne.n	801ea6c <__swsetup_r+0x3c>
 801ea4c:	686c      	ldr	r4, [r5, #4]
 801ea4e:	89a3      	ldrh	r3, [r4, #12]
 801ea50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ea54:	0719      	lsls	r1, r3, #28
 801ea56:	d42c      	bmi.n	801eab2 <__swsetup_r+0x82>
 801ea58:	06dd      	lsls	r5, r3, #27
 801ea5a:	d411      	bmi.n	801ea80 <__swsetup_r+0x50>
 801ea5c:	2309      	movs	r3, #9
 801ea5e:	6033      	str	r3, [r6, #0]
 801ea60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ea64:	81a3      	strh	r3, [r4, #12]
 801ea66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ea6a:	e03e      	b.n	801eaea <__swsetup_r+0xba>
 801ea6c:	4b25      	ldr	r3, [pc, #148]	; (801eb04 <__swsetup_r+0xd4>)
 801ea6e:	429c      	cmp	r4, r3
 801ea70:	d101      	bne.n	801ea76 <__swsetup_r+0x46>
 801ea72:	68ac      	ldr	r4, [r5, #8]
 801ea74:	e7eb      	b.n	801ea4e <__swsetup_r+0x1e>
 801ea76:	4b24      	ldr	r3, [pc, #144]	; (801eb08 <__swsetup_r+0xd8>)
 801ea78:	429c      	cmp	r4, r3
 801ea7a:	bf08      	it	eq
 801ea7c:	68ec      	ldreq	r4, [r5, #12]
 801ea7e:	e7e6      	b.n	801ea4e <__swsetup_r+0x1e>
 801ea80:	0758      	lsls	r0, r3, #29
 801ea82:	d512      	bpl.n	801eaaa <__swsetup_r+0x7a>
 801ea84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ea86:	b141      	cbz	r1, 801ea9a <__swsetup_r+0x6a>
 801ea88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ea8c:	4299      	cmp	r1, r3
 801ea8e:	d002      	beq.n	801ea96 <__swsetup_r+0x66>
 801ea90:	4630      	mov	r0, r6
 801ea92:	f7fb fc43 	bl	801a31c <_free_r>
 801ea96:	2300      	movs	r3, #0
 801ea98:	6363      	str	r3, [r4, #52]	; 0x34
 801ea9a:	89a3      	ldrh	r3, [r4, #12]
 801ea9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801eaa0:	81a3      	strh	r3, [r4, #12]
 801eaa2:	2300      	movs	r3, #0
 801eaa4:	6063      	str	r3, [r4, #4]
 801eaa6:	6923      	ldr	r3, [r4, #16]
 801eaa8:	6023      	str	r3, [r4, #0]
 801eaaa:	89a3      	ldrh	r3, [r4, #12]
 801eaac:	f043 0308 	orr.w	r3, r3, #8
 801eab0:	81a3      	strh	r3, [r4, #12]
 801eab2:	6923      	ldr	r3, [r4, #16]
 801eab4:	b94b      	cbnz	r3, 801eaca <__swsetup_r+0x9a>
 801eab6:	89a3      	ldrh	r3, [r4, #12]
 801eab8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801eabc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801eac0:	d003      	beq.n	801eaca <__swsetup_r+0x9a>
 801eac2:	4621      	mov	r1, r4
 801eac4:	4630      	mov	r0, r6
 801eac6:	f000 f84d 	bl	801eb64 <__smakebuf_r>
 801eaca:	89a0      	ldrh	r0, [r4, #12]
 801eacc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ead0:	f010 0301 	ands.w	r3, r0, #1
 801ead4:	d00a      	beq.n	801eaec <__swsetup_r+0xbc>
 801ead6:	2300      	movs	r3, #0
 801ead8:	60a3      	str	r3, [r4, #8]
 801eada:	6963      	ldr	r3, [r4, #20]
 801eadc:	425b      	negs	r3, r3
 801eade:	61a3      	str	r3, [r4, #24]
 801eae0:	6923      	ldr	r3, [r4, #16]
 801eae2:	b943      	cbnz	r3, 801eaf6 <__swsetup_r+0xc6>
 801eae4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801eae8:	d1ba      	bne.n	801ea60 <__swsetup_r+0x30>
 801eaea:	bd70      	pop	{r4, r5, r6, pc}
 801eaec:	0781      	lsls	r1, r0, #30
 801eaee:	bf58      	it	pl
 801eaf0:	6963      	ldrpl	r3, [r4, #20]
 801eaf2:	60a3      	str	r3, [r4, #8]
 801eaf4:	e7f4      	b.n	801eae0 <__swsetup_r+0xb0>
 801eaf6:	2000      	movs	r0, #0
 801eaf8:	e7f7      	b.n	801eaea <__swsetup_r+0xba>
 801eafa:	bf00      	nop
 801eafc:	2000008c 	.word	0x2000008c
 801eb00:	08020c2c 	.word	0x08020c2c
 801eb04:	08020c4c 	.word	0x08020c4c
 801eb08:	08020c0c 	.word	0x08020c0c

0801eb0c <abort>:
 801eb0c:	b508      	push	{r3, lr}
 801eb0e:	2006      	movs	r0, #6
 801eb10:	f000 f890 	bl	801ec34 <raise>
 801eb14:	2001      	movs	r0, #1
 801eb16:	f7ed fcb1 	bl	800c47c <_exit>

0801eb1a <__swhatbuf_r>:
 801eb1a:	b570      	push	{r4, r5, r6, lr}
 801eb1c:	460e      	mov	r6, r1
 801eb1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb22:	2900      	cmp	r1, #0
 801eb24:	b096      	sub	sp, #88	; 0x58
 801eb26:	4614      	mov	r4, r2
 801eb28:	461d      	mov	r5, r3
 801eb2a:	da07      	bge.n	801eb3c <__swhatbuf_r+0x22>
 801eb2c:	2300      	movs	r3, #0
 801eb2e:	602b      	str	r3, [r5, #0]
 801eb30:	89b3      	ldrh	r3, [r6, #12]
 801eb32:	061a      	lsls	r2, r3, #24
 801eb34:	d410      	bmi.n	801eb58 <__swhatbuf_r+0x3e>
 801eb36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801eb3a:	e00e      	b.n	801eb5a <__swhatbuf_r+0x40>
 801eb3c:	466a      	mov	r2, sp
 801eb3e:	f000 f895 	bl	801ec6c <_fstat_r>
 801eb42:	2800      	cmp	r0, #0
 801eb44:	dbf2      	blt.n	801eb2c <__swhatbuf_r+0x12>
 801eb46:	9a01      	ldr	r2, [sp, #4]
 801eb48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801eb4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801eb50:	425a      	negs	r2, r3
 801eb52:	415a      	adcs	r2, r3
 801eb54:	602a      	str	r2, [r5, #0]
 801eb56:	e7ee      	b.n	801eb36 <__swhatbuf_r+0x1c>
 801eb58:	2340      	movs	r3, #64	; 0x40
 801eb5a:	2000      	movs	r0, #0
 801eb5c:	6023      	str	r3, [r4, #0]
 801eb5e:	b016      	add	sp, #88	; 0x58
 801eb60:	bd70      	pop	{r4, r5, r6, pc}
	...

0801eb64 <__smakebuf_r>:
 801eb64:	898b      	ldrh	r3, [r1, #12]
 801eb66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801eb68:	079d      	lsls	r5, r3, #30
 801eb6a:	4606      	mov	r6, r0
 801eb6c:	460c      	mov	r4, r1
 801eb6e:	d507      	bpl.n	801eb80 <__smakebuf_r+0x1c>
 801eb70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801eb74:	6023      	str	r3, [r4, #0]
 801eb76:	6123      	str	r3, [r4, #16]
 801eb78:	2301      	movs	r3, #1
 801eb7a:	6163      	str	r3, [r4, #20]
 801eb7c:	b002      	add	sp, #8
 801eb7e:	bd70      	pop	{r4, r5, r6, pc}
 801eb80:	ab01      	add	r3, sp, #4
 801eb82:	466a      	mov	r2, sp
 801eb84:	f7ff ffc9 	bl	801eb1a <__swhatbuf_r>
 801eb88:	9900      	ldr	r1, [sp, #0]
 801eb8a:	4605      	mov	r5, r0
 801eb8c:	4630      	mov	r0, r6
 801eb8e:	f7fb fc15 	bl	801a3bc <_malloc_r>
 801eb92:	b948      	cbnz	r0, 801eba8 <__smakebuf_r+0x44>
 801eb94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eb98:	059a      	lsls	r2, r3, #22
 801eb9a:	d4ef      	bmi.n	801eb7c <__smakebuf_r+0x18>
 801eb9c:	f023 0303 	bic.w	r3, r3, #3
 801eba0:	f043 0302 	orr.w	r3, r3, #2
 801eba4:	81a3      	strh	r3, [r4, #12]
 801eba6:	e7e3      	b.n	801eb70 <__smakebuf_r+0xc>
 801eba8:	4b0d      	ldr	r3, [pc, #52]	; (801ebe0 <__smakebuf_r+0x7c>)
 801ebaa:	62b3      	str	r3, [r6, #40]	; 0x28
 801ebac:	89a3      	ldrh	r3, [r4, #12]
 801ebae:	6020      	str	r0, [r4, #0]
 801ebb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ebb4:	81a3      	strh	r3, [r4, #12]
 801ebb6:	9b00      	ldr	r3, [sp, #0]
 801ebb8:	6163      	str	r3, [r4, #20]
 801ebba:	9b01      	ldr	r3, [sp, #4]
 801ebbc:	6120      	str	r0, [r4, #16]
 801ebbe:	b15b      	cbz	r3, 801ebd8 <__smakebuf_r+0x74>
 801ebc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ebc4:	4630      	mov	r0, r6
 801ebc6:	f000 f863 	bl	801ec90 <_isatty_r>
 801ebca:	b128      	cbz	r0, 801ebd8 <__smakebuf_r+0x74>
 801ebcc:	89a3      	ldrh	r3, [r4, #12]
 801ebce:	f023 0303 	bic.w	r3, r3, #3
 801ebd2:	f043 0301 	orr.w	r3, r3, #1
 801ebd6:	81a3      	strh	r3, [r4, #12]
 801ebd8:	89a0      	ldrh	r0, [r4, #12]
 801ebda:	4305      	orrs	r5, r0
 801ebdc:	81a5      	strh	r5, [r4, #12]
 801ebde:	e7cd      	b.n	801eb7c <__smakebuf_r+0x18>
 801ebe0:	0801e4c9 	.word	0x0801e4c9

0801ebe4 <_raise_r>:
 801ebe4:	291f      	cmp	r1, #31
 801ebe6:	b538      	push	{r3, r4, r5, lr}
 801ebe8:	4604      	mov	r4, r0
 801ebea:	460d      	mov	r5, r1
 801ebec:	d904      	bls.n	801ebf8 <_raise_r+0x14>
 801ebee:	2316      	movs	r3, #22
 801ebf0:	6003      	str	r3, [r0, #0]
 801ebf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ebf6:	bd38      	pop	{r3, r4, r5, pc}
 801ebf8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ebfa:	b112      	cbz	r2, 801ec02 <_raise_r+0x1e>
 801ebfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ec00:	b94b      	cbnz	r3, 801ec16 <_raise_r+0x32>
 801ec02:	4620      	mov	r0, r4
 801ec04:	f000 f830 	bl	801ec68 <_getpid_r>
 801ec08:	462a      	mov	r2, r5
 801ec0a:	4601      	mov	r1, r0
 801ec0c:	4620      	mov	r0, r4
 801ec0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ec12:	f000 b817 	b.w	801ec44 <_kill_r>
 801ec16:	2b01      	cmp	r3, #1
 801ec18:	d00a      	beq.n	801ec30 <_raise_r+0x4c>
 801ec1a:	1c59      	adds	r1, r3, #1
 801ec1c:	d103      	bne.n	801ec26 <_raise_r+0x42>
 801ec1e:	2316      	movs	r3, #22
 801ec20:	6003      	str	r3, [r0, #0]
 801ec22:	2001      	movs	r0, #1
 801ec24:	e7e7      	b.n	801ebf6 <_raise_r+0x12>
 801ec26:	2400      	movs	r4, #0
 801ec28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ec2c:	4628      	mov	r0, r5
 801ec2e:	4798      	blx	r3
 801ec30:	2000      	movs	r0, #0
 801ec32:	e7e0      	b.n	801ebf6 <_raise_r+0x12>

0801ec34 <raise>:
 801ec34:	4b02      	ldr	r3, [pc, #8]	; (801ec40 <raise+0xc>)
 801ec36:	4601      	mov	r1, r0
 801ec38:	6818      	ldr	r0, [r3, #0]
 801ec3a:	f7ff bfd3 	b.w	801ebe4 <_raise_r>
 801ec3e:	bf00      	nop
 801ec40:	2000008c 	.word	0x2000008c

0801ec44 <_kill_r>:
 801ec44:	b538      	push	{r3, r4, r5, lr}
 801ec46:	4d07      	ldr	r5, [pc, #28]	; (801ec64 <_kill_r+0x20>)
 801ec48:	2300      	movs	r3, #0
 801ec4a:	4604      	mov	r4, r0
 801ec4c:	4608      	mov	r0, r1
 801ec4e:	4611      	mov	r1, r2
 801ec50:	602b      	str	r3, [r5, #0]
 801ec52:	f7ed fc03 	bl	800c45c <_kill>
 801ec56:	1c43      	adds	r3, r0, #1
 801ec58:	d102      	bne.n	801ec60 <_kill_r+0x1c>
 801ec5a:	682b      	ldr	r3, [r5, #0]
 801ec5c:	b103      	cbz	r3, 801ec60 <_kill_r+0x1c>
 801ec5e:	6023      	str	r3, [r4, #0]
 801ec60:	bd38      	pop	{r3, r4, r5, pc}
 801ec62:	bf00      	nop
 801ec64:	2000aaa4 	.word	0x2000aaa4

0801ec68 <_getpid_r>:
 801ec68:	f7ed bbf0 	b.w	800c44c <_getpid>

0801ec6c <_fstat_r>:
 801ec6c:	b538      	push	{r3, r4, r5, lr}
 801ec6e:	4d07      	ldr	r5, [pc, #28]	; (801ec8c <_fstat_r+0x20>)
 801ec70:	2300      	movs	r3, #0
 801ec72:	4604      	mov	r4, r0
 801ec74:	4608      	mov	r0, r1
 801ec76:	4611      	mov	r1, r2
 801ec78:	602b      	str	r3, [r5, #0]
 801ec7a:	f7ed fc4e 	bl	800c51a <_fstat>
 801ec7e:	1c43      	adds	r3, r0, #1
 801ec80:	d102      	bne.n	801ec88 <_fstat_r+0x1c>
 801ec82:	682b      	ldr	r3, [r5, #0]
 801ec84:	b103      	cbz	r3, 801ec88 <_fstat_r+0x1c>
 801ec86:	6023      	str	r3, [r4, #0]
 801ec88:	bd38      	pop	{r3, r4, r5, pc}
 801ec8a:	bf00      	nop
 801ec8c:	2000aaa4 	.word	0x2000aaa4

0801ec90 <_isatty_r>:
 801ec90:	b538      	push	{r3, r4, r5, lr}
 801ec92:	4d06      	ldr	r5, [pc, #24]	; (801ecac <_isatty_r+0x1c>)
 801ec94:	2300      	movs	r3, #0
 801ec96:	4604      	mov	r4, r0
 801ec98:	4608      	mov	r0, r1
 801ec9a:	602b      	str	r3, [r5, #0]
 801ec9c:	f7ed fc4d 	bl	800c53a <_isatty>
 801eca0:	1c43      	adds	r3, r0, #1
 801eca2:	d102      	bne.n	801ecaa <_isatty_r+0x1a>
 801eca4:	682b      	ldr	r3, [r5, #0]
 801eca6:	b103      	cbz	r3, 801ecaa <_isatty_r+0x1a>
 801eca8:	6023      	str	r3, [r4, #0]
 801ecaa:	bd38      	pop	{r3, r4, r5, pc}
 801ecac:	2000aaa4 	.word	0x2000aaa4

0801ecb0 <atanf>:
 801ecb0:	b538      	push	{r3, r4, r5, lr}
 801ecb2:	ee10 5a10 	vmov	r5, s0
 801ecb6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801ecba:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801ecbe:	eef0 7a40 	vmov.f32	s15, s0
 801ecc2:	db10      	blt.n	801ece6 <atanf+0x36>
 801ecc4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801ecc8:	dd04      	ble.n	801ecd4 <atanf+0x24>
 801ecca:	ee70 7a00 	vadd.f32	s15, s0, s0
 801ecce:	eeb0 0a67 	vmov.f32	s0, s15
 801ecd2:	bd38      	pop	{r3, r4, r5, pc}
 801ecd4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801ee0c <atanf+0x15c>
 801ecd8:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801ee10 <atanf+0x160>
 801ecdc:	2d00      	cmp	r5, #0
 801ecde:	bfd8      	it	le
 801ece0:	eef0 7a40 	vmovle.f32	s15, s0
 801ece4:	e7f3      	b.n	801ecce <atanf+0x1e>
 801ece6:	4b4b      	ldr	r3, [pc, #300]	; (801ee14 <atanf+0x164>)
 801ece8:	429c      	cmp	r4, r3
 801ecea:	dc10      	bgt.n	801ed0e <atanf+0x5e>
 801ecec:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801ecf0:	da0a      	bge.n	801ed08 <atanf+0x58>
 801ecf2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801ee18 <atanf+0x168>
 801ecf6:	ee30 7a07 	vadd.f32	s14, s0, s14
 801ecfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ecfe:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801ed02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed06:	dce2      	bgt.n	801ecce <atanf+0x1e>
 801ed08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ed0c:	e013      	b.n	801ed36 <atanf+0x86>
 801ed0e:	f000 f8e3 	bl	801eed8 <fabsf>
 801ed12:	4b42      	ldr	r3, [pc, #264]	; (801ee1c <atanf+0x16c>)
 801ed14:	429c      	cmp	r4, r3
 801ed16:	dc4f      	bgt.n	801edb8 <atanf+0x108>
 801ed18:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801ed1c:	429c      	cmp	r4, r3
 801ed1e:	dc41      	bgt.n	801eda4 <atanf+0xf4>
 801ed20:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801ed24:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801ed28:	eea0 7a27 	vfma.f32	s14, s0, s15
 801ed2c:	2300      	movs	r3, #0
 801ed2e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ed32:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ed36:	1c5a      	adds	r2, r3, #1
 801ed38:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801ed3c:	eddf 5a38 	vldr	s11, [pc, #224]	; 801ee20 <atanf+0x170>
 801ed40:	ed9f 6a38 	vldr	s12, [pc, #224]	; 801ee24 <atanf+0x174>
 801ed44:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801ee28 <atanf+0x178>
 801ed48:	ed9f 0a38 	vldr	s0, [pc, #224]	; 801ee2c <atanf+0x17c>
 801ed4c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801ed50:	eea7 6a25 	vfma.f32	s12, s14, s11
 801ed54:	eddf 5a36 	vldr	s11, [pc, #216]	; 801ee30 <atanf+0x180>
 801ed58:	eee6 5a07 	vfma.f32	s11, s12, s14
 801ed5c:	ed9f 6a35 	vldr	s12, [pc, #212]	; 801ee34 <atanf+0x184>
 801ed60:	eea5 6a87 	vfma.f32	s12, s11, s14
 801ed64:	eddf 5a34 	vldr	s11, [pc, #208]	; 801ee38 <atanf+0x188>
 801ed68:	eee6 5a07 	vfma.f32	s11, s12, s14
 801ed6c:	ed9f 6a33 	vldr	s12, [pc, #204]	; 801ee3c <atanf+0x18c>
 801ed70:	eea5 6a87 	vfma.f32	s12, s11, s14
 801ed74:	eddf 5a32 	vldr	s11, [pc, #200]	; 801ee40 <atanf+0x190>
 801ed78:	eee7 5a05 	vfma.f32	s11, s14, s10
 801ed7c:	ed9f 5a31 	vldr	s10, [pc, #196]	; 801ee44 <atanf+0x194>
 801ed80:	eea5 5a87 	vfma.f32	s10, s11, s14
 801ed84:	eddf 5a30 	vldr	s11, [pc, #192]	; 801ee48 <atanf+0x198>
 801ed88:	eee5 5a07 	vfma.f32	s11, s10, s14
 801ed8c:	eea5 0a87 	vfma.f32	s0, s11, s14
 801ed90:	ee20 0a07 	vmul.f32	s0, s0, s14
 801ed94:	eea6 0a26 	vfma.f32	s0, s12, s13
 801ed98:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ed9c:	d121      	bne.n	801ede2 <atanf+0x132>
 801ed9e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801eda2:	e794      	b.n	801ecce <atanf+0x1e>
 801eda4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801eda8:	ee30 7a67 	vsub.f32	s14, s0, s15
 801edac:	ee30 0a27 	vadd.f32	s0, s0, s15
 801edb0:	2301      	movs	r3, #1
 801edb2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801edb6:	e7be      	b.n	801ed36 <atanf+0x86>
 801edb8:	4b24      	ldr	r3, [pc, #144]	; (801ee4c <atanf+0x19c>)
 801edba:	429c      	cmp	r4, r3
 801edbc:	dc0b      	bgt.n	801edd6 <atanf+0x126>
 801edbe:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801edc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801edc6:	eea0 7a27 	vfma.f32	s14, s0, s15
 801edca:	2302      	movs	r3, #2
 801edcc:	ee70 6a67 	vsub.f32	s13, s0, s15
 801edd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801edd4:	e7af      	b.n	801ed36 <atanf+0x86>
 801edd6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801edda:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801edde:	2303      	movs	r3, #3
 801ede0:	e7a9      	b.n	801ed36 <atanf+0x86>
 801ede2:	4a1b      	ldr	r2, [pc, #108]	; (801ee50 <atanf+0x1a0>)
 801ede4:	491b      	ldr	r1, [pc, #108]	; (801ee54 <atanf+0x1a4>)
 801ede6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801edea:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801edee:	ed93 7a00 	vldr	s14, [r3]
 801edf2:	ee30 0a47 	vsub.f32	s0, s0, s14
 801edf6:	2d00      	cmp	r5, #0
 801edf8:	ee70 7a67 	vsub.f32	s15, s0, s15
 801edfc:	ed92 0a00 	vldr	s0, [r2]
 801ee00:	ee70 7a67 	vsub.f32	s15, s0, s15
 801ee04:	bfb8      	it	lt
 801ee06:	eef1 7a67 	vneglt.f32	s15, s15
 801ee0a:	e760      	b.n	801ecce <atanf+0x1e>
 801ee0c:	3fc90fdb 	.word	0x3fc90fdb
 801ee10:	bfc90fdb 	.word	0xbfc90fdb
 801ee14:	3edfffff 	.word	0x3edfffff
 801ee18:	7149f2ca 	.word	0x7149f2ca
 801ee1c:	3f97ffff 	.word	0x3f97ffff
 801ee20:	3c8569d7 	.word	0x3c8569d7
 801ee24:	3d4bda59 	.word	0x3d4bda59
 801ee28:	bd15a221 	.word	0xbd15a221
 801ee2c:	be4ccccd 	.word	0xbe4ccccd
 801ee30:	3d886b35 	.word	0x3d886b35
 801ee34:	3dba2e6e 	.word	0x3dba2e6e
 801ee38:	3e124925 	.word	0x3e124925
 801ee3c:	3eaaaaab 	.word	0x3eaaaaab
 801ee40:	bd6ef16b 	.word	0xbd6ef16b
 801ee44:	bd9d8795 	.word	0xbd9d8795
 801ee48:	bde38e38 	.word	0xbde38e38
 801ee4c:	401bffff 	.word	0x401bffff
 801ee50:	08020c6c 	.word	0x08020c6c
 801ee54:	08020c7c 	.word	0x08020c7c

0801ee58 <cosf>:
 801ee58:	ee10 3a10 	vmov	r3, s0
 801ee5c:	b507      	push	{r0, r1, r2, lr}
 801ee5e:	4a1c      	ldr	r2, [pc, #112]	; (801eed0 <cosf+0x78>)
 801ee60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ee64:	4293      	cmp	r3, r2
 801ee66:	dc04      	bgt.n	801ee72 <cosf+0x1a>
 801ee68:	eddf 0a1a 	vldr	s1, [pc, #104]	; 801eed4 <cosf+0x7c>
 801ee6c:	f000 fdb8 	bl	801f9e0 <__kernel_cosf>
 801ee70:	e004      	b.n	801ee7c <cosf+0x24>
 801ee72:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801ee76:	db04      	blt.n	801ee82 <cosf+0x2a>
 801ee78:	ee30 0a40 	vsub.f32	s0, s0, s0
 801ee7c:	b003      	add	sp, #12
 801ee7e:	f85d fb04 	ldr.w	pc, [sp], #4
 801ee82:	4668      	mov	r0, sp
 801ee84:	f000 fc6c 	bl	801f760 <__ieee754_rem_pio2f>
 801ee88:	f000 0003 	and.w	r0, r0, #3
 801ee8c:	2801      	cmp	r0, #1
 801ee8e:	d007      	beq.n	801eea0 <cosf+0x48>
 801ee90:	2802      	cmp	r0, #2
 801ee92:	d00e      	beq.n	801eeb2 <cosf+0x5a>
 801ee94:	b9a0      	cbnz	r0, 801eec0 <cosf+0x68>
 801ee96:	eddd 0a01 	vldr	s1, [sp, #4]
 801ee9a:	ed9d 0a00 	vldr	s0, [sp]
 801ee9e:	e7e5      	b.n	801ee6c <cosf+0x14>
 801eea0:	eddd 0a01 	vldr	s1, [sp, #4]
 801eea4:	ed9d 0a00 	vldr	s0, [sp]
 801eea8:	f001 f884 	bl	801ffb4 <__kernel_sinf>
 801eeac:	eeb1 0a40 	vneg.f32	s0, s0
 801eeb0:	e7e4      	b.n	801ee7c <cosf+0x24>
 801eeb2:	eddd 0a01 	vldr	s1, [sp, #4]
 801eeb6:	ed9d 0a00 	vldr	s0, [sp]
 801eeba:	f000 fd91 	bl	801f9e0 <__kernel_cosf>
 801eebe:	e7f5      	b.n	801eeac <cosf+0x54>
 801eec0:	eddd 0a01 	vldr	s1, [sp, #4]
 801eec4:	ed9d 0a00 	vldr	s0, [sp]
 801eec8:	2001      	movs	r0, #1
 801eeca:	f001 f873 	bl	801ffb4 <__kernel_sinf>
 801eece:	e7d5      	b.n	801ee7c <cosf+0x24>
 801eed0:	3f490fd8 	.word	0x3f490fd8
 801eed4:	00000000 	.word	0x00000000

0801eed8 <fabsf>:
 801eed8:	ee10 3a10 	vmov	r3, s0
 801eedc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801eee0:	ee00 3a10 	vmov	s0, r3
 801eee4:	4770      	bx	lr
	...

0801eee8 <sinf>:
 801eee8:	ee10 3a10 	vmov	r3, s0
 801eeec:	b507      	push	{r0, r1, r2, lr}
 801eeee:	4a1d      	ldr	r2, [pc, #116]	; (801ef64 <sinf+0x7c>)
 801eef0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801eef4:	4293      	cmp	r3, r2
 801eef6:	dc05      	bgt.n	801ef04 <sinf+0x1c>
 801eef8:	eddf 0a1b 	vldr	s1, [pc, #108]	; 801ef68 <sinf+0x80>
 801eefc:	2000      	movs	r0, #0
 801eefe:	f001 f859 	bl	801ffb4 <__kernel_sinf>
 801ef02:	e004      	b.n	801ef0e <sinf+0x26>
 801ef04:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801ef08:	db04      	blt.n	801ef14 <sinf+0x2c>
 801ef0a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801ef0e:	b003      	add	sp, #12
 801ef10:	f85d fb04 	ldr.w	pc, [sp], #4
 801ef14:	4668      	mov	r0, sp
 801ef16:	f000 fc23 	bl	801f760 <__ieee754_rem_pio2f>
 801ef1a:	f000 0003 	and.w	r0, r0, #3
 801ef1e:	2801      	cmp	r0, #1
 801ef20:	d008      	beq.n	801ef34 <sinf+0x4c>
 801ef22:	2802      	cmp	r0, #2
 801ef24:	d00d      	beq.n	801ef42 <sinf+0x5a>
 801ef26:	b9b0      	cbnz	r0, 801ef56 <sinf+0x6e>
 801ef28:	eddd 0a01 	vldr	s1, [sp, #4]
 801ef2c:	ed9d 0a00 	vldr	s0, [sp]
 801ef30:	2001      	movs	r0, #1
 801ef32:	e7e4      	b.n	801eefe <sinf+0x16>
 801ef34:	eddd 0a01 	vldr	s1, [sp, #4]
 801ef38:	ed9d 0a00 	vldr	s0, [sp]
 801ef3c:	f000 fd50 	bl	801f9e0 <__kernel_cosf>
 801ef40:	e7e5      	b.n	801ef0e <sinf+0x26>
 801ef42:	eddd 0a01 	vldr	s1, [sp, #4]
 801ef46:	ed9d 0a00 	vldr	s0, [sp]
 801ef4a:	2001      	movs	r0, #1
 801ef4c:	f001 f832 	bl	801ffb4 <__kernel_sinf>
 801ef50:	eeb1 0a40 	vneg.f32	s0, s0
 801ef54:	e7db      	b.n	801ef0e <sinf+0x26>
 801ef56:	eddd 0a01 	vldr	s1, [sp, #4]
 801ef5a:	ed9d 0a00 	vldr	s0, [sp]
 801ef5e:	f000 fd3f 	bl	801f9e0 <__kernel_cosf>
 801ef62:	e7f5      	b.n	801ef50 <sinf+0x68>
 801ef64:	3f490fd8 	.word	0x3f490fd8
 801ef68:	00000000 	.word	0x00000000

0801ef6c <atan2f>:
 801ef6c:	f000 b898 	b.w	801f0a0 <__ieee754_atan2f>

0801ef70 <powf>:
 801ef70:	b508      	push	{r3, lr}
 801ef72:	ed2d 8b04 	vpush	{d8-d9}
 801ef76:	eeb0 9a40 	vmov.f32	s18, s0
 801ef7a:	eef0 8a60 	vmov.f32	s17, s1
 801ef7e:	f000 f92f 	bl	801f1e0 <__ieee754_powf>
 801ef82:	4b43      	ldr	r3, [pc, #268]	; (801f090 <powf+0x120>)
 801ef84:	f993 3000 	ldrsb.w	r3, [r3]
 801ef88:	3301      	adds	r3, #1
 801ef8a:	eeb0 8a40 	vmov.f32	s16, s0
 801ef8e:	d012      	beq.n	801efb6 <powf+0x46>
 801ef90:	eef4 8a68 	vcmp.f32	s17, s17
 801ef94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef98:	d60d      	bvs.n	801efb6 <powf+0x46>
 801ef9a:	eeb4 9a49 	vcmp.f32	s18, s18
 801ef9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efa2:	d70d      	bvc.n	801efc0 <powf+0x50>
 801efa4:	eef5 8a40 	vcmp.f32	s17, #0.0
 801efa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801efb0:	bf08      	it	eq
 801efb2:	eeb0 8a67 	vmoveq.f32	s16, s15
 801efb6:	eeb0 0a48 	vmov.f32	s0, s16
 801efba:	ecbd 8b04 	vpop	{d8-d9}
 801efbe:	bd08      	pop	{r3, pc}
 801efc0:	eddf 9a34 	vldr	s19, [pc, #208]	; 801f094 <powf+0x124>
 801efc4:	eeb4 9a69 	vcmp.f32	s18, s19
 801efc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efcc:	d116      	bne.n	801effc <powf+0x8c>
 801efce:	eef4 8a69 	vcmp.f32	s17, s19
 801efd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efd6:	d057      	beq.n	801f088 <powf+0x118>
 801efd8:	eeb0 0a68 	vmov.f32	s0, s17
 801efdc:	f7ff f944 	bl	801e268 <finitef>
 801efe0:	2800      	cmp	r0, #0
 801efe2:	d0e8      	beq.n	801efb6 <powf+0x46>
 801efe4:	eef4 8ae9 	vcmpe.f32	s17, s19
 801efe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efec:	d5e3      	bpl.n	801efb6 <powf+0x46>
 801efee:	f7fb f94d 	bl	801a28c <__errno>
 801eff2:	2321      	movs	r3, #33	; 0x21
 801eff4:	6003      	str	r3, [r0, #0]
 801eff6:	ed9f 8a28 	vldr	s16, [pc, #160]	; 801f098 <powf+0x128>
 801effa:	e7dc      	b.n	801efb6 <powf+0x46>
 801effc:	f7ff f934 	bl	801e268 <finitef>
 801f000:	bb50      	cbnz	r0, 801f058 <powf+0xe8>
 801f002:	eeb0 0a49 	vmov.f32	s0, s18
 801f006:	f7ff f92f 	bl	801e268 <finitef>
 801f00a:	b328      	cbz	r0, 801f058 <powf+0xe8>
 801f00c:	eeb0 0a68 	vmov.f32	s0, s17
 801f010:	f7ff f92a 	bl	801e268 <finitef>
 801f014:	b300      	cbz	r0, 801f058 <powf+0xe8>
 801f016:	eeb4 8a48 	vcmp.f32	s16, s16
 801f01a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f01e:	d706      	bvc.n	801f02e <powf+0xbe>
 801f020:	f7fb f934 	bl	801a28c <__errno>
 801f024:	2321      	movs	r3, #33	; 0x21
 801f026:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 801f02a:	6003      	str	r3, [r0, #0]
 801f02c:	e7c3      	b.n	801efb6 <powf+0x46>
 801f02e:	f7fb f92d 	bl	801a28c <__errno>
 801f032:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 801f036:	2322      	movs	r3, #34	; 0x22
 801f038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f03c:	6003      	str	r3, [r0, #0]
 801f03e:	d508      	bpl.n	801f052 <powf+0xe2>
 801f040:	eeb0 0a68 	vmov.f32	s0, s17
 801f044:	f001 f840 	bl	80200c8 <rintf>
 801f048:	eeb4 0a68 	vcmp.f32	s0, s17
 801f04c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f050:	d1d1      	bne.n	801eff6 <powf+0x86>
 801f052:	ed9f 8a12 	vldr	s16, [pc, #72]	; 801f09c <powf+0x12c>
 801f056:	e7ae      	b.n	801efb6 <powf+0x46>
 801f058:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801f05c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f060:	d1a9      	bne.n	801efb6 <powf+0x46>
 801f062:	eeb0 0a49 	vmov.f32	s0, s18
 801f066:	f7ff f8ff 	bl	801e268 <finitef>
 801f06a:	2800      	cmp	r0, #0
 801f06c:	d0a3      	beq.n	801efb6 <powf+0x46>
 801f06e:	eeb0 0a68 	vmov.f32	s0, s17
 801f072:	f7ff f8f9 	bl	801e268 <finitef>
 801f076:	2800      	cmp	r0, #0
 801f078:	d09d      	beq.n	801efb6 <powf+0x46>
 801f07a:	f7fb f907 	bl	801a28c <__errno>
 801f07e:	2322      	movs	r3, #34	; 0x22
 801f080:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801f094 <powf+0x124>
 801f084:	6003      	str	r3, [r0, #0]
 801f086:	e796      	b.n	801efb6 <powf+0x46>
 801f088:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801f08c:	e793      	b.n	801efb6 <powf+0x46>
 801f08e:	bf00      	nop
 801f090:	20000260 	.word	0x20000260
 801f094:	00000000 	.word	0x00000000
 801f098:	ff800000 	.word	0xff800000
 801f09c:	7f800000 	.word	0x7f800000

0801f0a0 <__ieee754_atan2f>:
 801f0a0:	ee10 2a90 	vmov	r2, s1
 801f0a4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801f0a8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801f0ac:	b510      	push	{r4, lr}
 801f0ae:	eef0 7a40 	vmov.f32	s15, s0
 801f0b2:	dc06      	bgt.n	801f0c2 <__ieee754_atan2f+0x22>
 801f0b4:	ee10 0a10 	vmov	r0, s0
 801f0b8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801f0bc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801f0c0:	dd04      	ble.n	801f0cc <__ieee754_atan2f+0x2c>
 801f0c2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801f0c6:	eeb0 0a67 	vmov.f32	s0, s15
 801f0ca:	bd10      	pop	{r4, pc}
 801f0cc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801f0d0:	d103      	bne.n	801f0da <__ieee754_atan2f+0x3a>
 801f0d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f0d6:	f7ff bdeb 	b.w	801ecb0 <atanf>
 801f0da:	1794      	asrs	r4, r2, #30
 801f0dc:	f004 0402 	and.w	r4, r4, #2
 801f0e0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801f0e4:	b943      	cbnz	r3, 801f0f8 <__ieee754_atan2f+0x58>
 801f0e6:	2c02      	cmp	r4, #2
 801f0e8:	d05e      	beq.n	801f1a8 <__ieee754_atan2f+0x108>
 801f0ea:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801f1bc <__ieee754_atan2f+0x11c>
 801f0ee:	2c03      	cmp	r4, #3
 801f0f0:	bf08      	it	eq
 801f0f2:	eef0 7a47 	vmoveq.f32	s15, s14
 801f0f6:	e7e6      	b.n	801f0c6 <__ieee754_atan2f+0x26>
 801f0f8:	b941      	cbnz	r1, 801f10c <__ieee754_atan2f+0x6c>
 801f0fa:	eddf 7a31 	vldr	s15, [pc, #196]	; 801f1c0 <__ieee754_atan2f+0x120>
 801f0fe:	ed9f 0a31 	vldr	s0, [pc, #196]	; 801f1c4 <__ieee754_atan2f+0x124>
 801f102:	2800      	cmp	r0, #0
 801f104:	bfb8      	it	lt
 801f106:	eef0 7a40 	vmovlt.f32	s15, s0
 801f10a:	e7dc      	b.n	801f0c6 <__ieee754_atan2f+0x26>
 801f10c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801f110:	d110      	bne.n	801f134 <__ieee754_atan2f+0x94>
 801f112:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801f116:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801f11a:	d107      	bne.n	801f12c <__ieee754_atan2f+0x8c>
 801f11c:	2c02      	cmp	r4, #2
 801f11e:	d846      	bhi.n	801f1ae <__ieee754_atan2f+0x10e>
 801f120:	4b29      	ldr	r3, [pc, #164]	; (801f1c8 <__ieee754_atan2f+0x128>)
 801f122:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f126:	edd4 7a00 	vldr	s15, [r4]
 801f12a:	e7cc      	b.n	801f0c6 <__ieee754_atan2f+0x26>
 801f12c:	2c02      	cmp	r4, #2
 801f12e:	d841      	bhi.n	801f1b4 <__ieee754_atan2f+0x114>
 801f130:	4b26      	ldr	r3, [pc, #152]	; (801f1cc <__ieee754_atan2f+0x12c>)
 801f132:	e7f6      	b.n	801f122 <__ieee754_atan2f+0x82>
 801f134:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801f138:	d0df      	beq.n	801f0fa <__ieee754_atan2f+0x5a>
 801f13a:	1a5b      	subs	r3, r3, r1
 801f13c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801f140:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801f144:	da1a      	bge.n	801f17c <__ieee754_atan2f+0xdc>
 801f146:	2a00      	cmp	r2, #0
 801f148:	da01      	bge.n	801f14e <__ieee754_atan2f+0xae>
 801f14a:	313c      	adds	r1, #60	; 0x3c
 801f14c:	db19      	blt.n	801f182 <__ieee754_atan2f+0xe2>
 801f14e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801f152:	f7ff fec1 	bl	801eed8 <fabsf>
 801f156:	f7ff fdab 	bl	801ecb0 <atanf>
 801f15a:	eef0 7a40 	vmov.f32	s15, s0
 801f15e:	2c01      	cmp	r4, #1
 801f160:	d012      	beq.n	801f188 <__ieee754_atan2f+0xe8>
 801f162:	2c02      	cmp	r4, #2
 801f164:	d017      	beq.n	801f196 <__ieee754_atan2f+0xf6>
 801f166:	2c00      	cmp	r4, #0
 801f168:	d0ad      	beq.n	801f0c6 <__ieee754_atan2f+0x26>
 801f16a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801f1d0 <__ieee754_atan2f+0x130>
 801f16e:	ee77 7a80 	vadd.f32	s15, s15, s0
 801f172:	ed9f 0a18 	vldr	s0, [pc, #96]	; 801f1d4 <__ieee754_atan2f+0x134>
 801f176:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f17a:	e7a4      	b.n	801f0c6 <__ieee754_atan2f+0x26>
 801f17c:	eddf 7a10 	vldr	s15, [pc, #64]	; 801f1c0 <__ieee754_atan2f+0x120>
 801f180:	e7ed      	b.n	801f15e <__ieee754_atan2f+0xbe>
 801f182:	eddf 7a15 	vldr	s15, [pc, #84]	; 801f1d8 <__ieee754_atan2f+0x138>
 801f186:	e7ea      	b.n	801f15e <__ieee754_atan2f+0xbe>
 801f188:	ee17 3a90 	vmov	r3, s15
 801f18c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801f190:	ee07 3a90 	vmov	s15, r3
 801f194:	e797      	b.n	801f0c6 <__ieee754_atan2f+0x26>
 801f196:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801f1d0 <__ieee754_atan2f+0x130>
 801f19a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801f19e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 801f1d4 <__ieee754_atan2f+0x134>
 801f1a2:	ee70 7a67 	vsub.f32	s15, s0, s15
 801f1a6:	e78e      	b.n	801f0c6 <__ieee754_atan2f+0x26>
 801f1a8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801f1d4 <__ieee754_atan2f+0x134>
 801f1ac:	e78b      	b.n	801f0c6 <__ieee754_atan2f+0x26>
 801f1ae:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801f1dc <__ieee754_atan2f+0x13c>
 801f1b2:	e788      	b.n	801f0c6 <__ieee754_atan2f+0x26>
 801f1b4:	eddf 7a08 	vldr	s15, [pc, #32]	; 801f1d8 <__ieee754_atan2f+0x138>
 801f1b8:	e785      	b.n	801f0c6 <__ieee754_atan2f+0x26>
 801f1ba:	bf00      	nop
 801f1bc:	c0490fdb 	.word	0xc0490fdb
 801f1c0:	3fc90fdb 	.word	0x3fc90fdb
 801f1c4:	bfc90fdb 	.word	0xbfc90fdb
 801f1c8:	08020c8c 	.word	0x08020c8c
 801f1cc:	08020c98 	.word	0x08020c98
 801f1d0:	33bbbd2e 	.word	0x33bbbd2e
 801f1d4:	40490fdb 	.word	0x40490fdb
 801f1d8:	00000000 	.word	0x00000000
 801f1dc:	3f490fdb 	.word	0x3f490fdb

0801f1e0 <__ieee754_powf>:
 801f1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f1e4:	ee10 5a90 	vmov	r5, s1
 801f1e8:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 801f1ec:	ed2d 8b02 	vpush	{d8}
 801f1f0:	eeb0 8a40 	vmov.f32	s16, s0
 801f1f4:	eef0 8a60 	vmov.f32	s17, s1
 801f1f8:	f000 8291 	beq.w	801f71e <__ieee754_powf+0x53e>
 801f1fc:	ee10 8a10 	vmov	r8, s0
 801f200:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 801f204:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801f208:	dc06      	bgt.n	801f218 <__ieee754_powf+0x38>
 801f20a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801f20e:	dd0a      	ble.n	801f226 <__ieee754_powf+0x46>
 801f210:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801f214:	f000 8283 	beq.w	801f71e <__ieee754_powf+0x53e>
 801f218:	ecbd 8b02 	vpop	{d8}
 801f21c:	48d8      	ldr	r0, [pc, #864]	; (801f580 <__ieee754_powf+0x3a0>)
 801f21e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f222:	f7fb bfdd 	b.w	801b1e0 <nanf>
 801f226:	f1b8 0f00 	cmp.w	r8, #0
 801f22a:	da1f      	bge.n	801f26c <__ieee754_powf+0x8c>
 801f22c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801f230:	da2e      	bge.n	801f290 <__ieee754_powf+0xb0>
 801f232:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801f236:	f2c0 827b 	blt.w	801f730 <__ieee754_powf+0x550>
 801f23a:	15fb      	asrs	r3, r7, #23
 801f23c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801f240:	fa47 f603 	asr.w	r6, r7, r3
 801f244:	fa06 f303 	lsl.w	r3, r6, r3
 801f248:	42bb      	cmp	r3, r7
 801f24a:	f040 8271 	bne.w	801f730 <__ieee754_powf+0x550>
 801f24e:	f006 0601 	and.w	r6, r6, #1
 801f252:	f1c6 0602 	rsb	r6, r6, #2
 801f256:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801f25a:	d120      	bne.n	801f29e <__ieee754_powf+0xbe>
 801f25c:	2d00      	cmp	r5, #0
 801f25e:	f280 8264 	bge.w	801f72a <__ieee754_powf+0x54a>
 801f262:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f266:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801f26a:	e00d      	b.n	801f288 <__ieee754_powf+0xa8>
 801f26c:	2600      	movs	r6, #0
 801f26e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801f272:	d1f0      	bne.n	801f256 <__ieee754_powf+0x76>
 801f274:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801f278:	f000 8251 	beq.w	801f71e <__ieee754_powf+0x53e>
 801f27c:	dd0a      	ble.n	801f294 <__ieee754_powf+0xb4>
 801f27e:	2d00      	cmp	r5, #0
 801f280:	f280 8250 	bge.w	801f724 <__ieee754_powf+0x544>
 801f284:	ed9f 0abf 	vldr	s0, [pc, #764]	; 801f584 <__ieee754_powf+0x3a4>
 801f288:	ecbd 8b02 	vpop	{d8}
 801f28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f290:	2602      	movs	r6, #2
 801f292:	e7ec      	b.n	801f26e <__ieee754_powf+0x8e>
 801f294:	2d00      	cmp	r5, #0
 801f296:	daf5      	bge.n	801f284 <__ieee754_powf+0xa4>
 801f298:	eeb1 0a68 	vneg.f32	s0, s17
 801f29c:	e7f4      	b.n	801f288 <__ieee754_powf+0xa8>
 801f29e:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801f2a2:	d102      	bne.n	801f2aa <__ieee754_powf+0xca>
 801f2a4:	ee28 0a08 	vmul.f32	s0, s16, s16
 801f2a8:	e7ee      	b.n	801f288 <__ieee754_powf+0xa8>
 801f2aa:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 801f2ae:	eeb0 0a48 	vmov.f32	s0, s16
 801f2b2:	d108      	bne.n	801f2c6 <__ieee754_powf+0xe6>
 801f2b4:	f1b8 0f00 	cmp.w	r8, #0
 801f2b8:	db05      	blt.n	801f2c6 <__ieee754_powf+0xe6>
 801f2ba:	ecbd 8b02 	vpop	{d8}
 801f2be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f2c2:	f000 bb89 	b.w	801f9d8 <__ieee754_sqrtf>
 801f2c6:	f7ff fe07 	bl	801eed8 <fabsf>
 801f2ca:	b124      	cbz	r4, 801f2d6 <__ieee754_powf+0xf6>
 801f2cc:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 801f2d0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801f2d4:	d117      	bne.n	801f306 <__ieee754_powf+0x126>
 801f2d6:	2d00      	cmp	r5, #0
 801f2d8:	bfbc      	itt	lt
 801f2da:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801f2de:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801f2e2:	f1b8 0f00 	cmp.w	r8, #0
 801f2e6:	dacf      	bge.n	801f288 <__ieee754_powf+0xa8>
 801f2e8:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 801f2ec:	ea54 0306 	orrs.w	r3, r4, r6
 801f2f0:	d104      	bne.n	801f2fc <__ieee754_powf+0x11c>
 801f2f2:	ee70 7a40 	vsub.f32	s15, s0, s0
 801f2f6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801f2fa:	e7c5      	b.n	801f288 <__ieee754_powf+0xa8>
 801f2fc:	2e01      	cmp	r6, #1
 801f2fe:	d1c3      	bne.n	801f288 <__ieee754_powf+0xa8>
 801f300:	eeb1 0a40 	vneg.f32	s0, s0
 801f304:	e7c0      	b.n	801f288 <__ieee754_powf+0xa8>
 801f306:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801f30a:	3801      	subs	r0, #1
 801f30c:	ea56 0300 	orrs.w	r3, r6, r0
 801f310:	d104      	bne.n	801f31c <__ieee754_powf+0x13c>
 801f312:	ee38 8a48 	vsub.f32	s16, s16, s16
 801f316:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801f31a:	e7b5      	b.n	801f288 <__ieee754_powf+0xa8>
 801f31c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 801f320:	dd6b      	ble.n	801f3fa <__ieee754_powf+0x21a>
 801f322:	4b99      	ldr	r3, [pc, #612]	; (801f588 <__ieee754_powf+0x3a8>)
 801f324:	429c      	cmp	r4, r3
 801f326:	dc06      	bgt.n	801f336 <__ieee754_powf+0x156>
 801f328:	2d00      	cmp	r5, #0
 801f32a:	daab      	bge.n	801f284 <__ieee754_powf+0xa4>
 801f32c:	ed9f 0a97 	vldr	s0, [pc, #604]	; 801f58c <__ieee754_powf+0x3ac>
 801f330:	ee20 0a00 	vmul.f32	s0, s0, s0
 801f334:	e7a8      	b.n	801f288 <__ieee754_powf+0xa8>
 801f336:	4b96      	ldr	r3, [pc, #600]	; (801f590 <__ieee754_powf+0x3b0>)
 801f338:	429c      	cmp	r4, r3
 801f33a:	dd02      	ble.n	801f342 <__ieee754_powf+0x162>
 801f33c:	2d00      	cmp	r5, #0
 801f33e:	dcf5      	bgt.n	801f32c <__ieee754_powf+0x14c>
 801f340:	e7a0      	b.n	801f284 <__ieee754_powf+0xa4>
 801f342:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f346:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f34a:	eddf 6a92 	vldr	s13, [pc, #584]	; 801f594 <__ieee754_powf+0x3b4>
 801f34e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801f352:	eee0 6a67 	vfms.f32	s13, s0, s15
 801f356:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f35a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801f35e:	ee20 7a00 	vmul.f32	s14, s0, s0
 801f362:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f366:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 801f598 <__ieee754_powf+0x3b8>
 801f36a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801f36e:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 801f59c <__ieee754_powf+0x3bc>
 801f372:	eee0 7a07 	vfma.f32	s15, s0, s14
 801f376:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801f5a0 <__ieee754_powf+0x3c0>
 801f37a:	eef0 6a67 	vmov.f32	s13, s15
 801f37e:	eee0 6a07 	vfma.f32	s13, s0, s14
 801f382:	ee16 3a90 	vmov	r3, s13
 801f386:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801f38a:	f023 030f 	bic.w	r3, r3, #15
 801f38e:	ee00 3a90 	vmov	s1, r3
 801f392:	eee0 0a47 	vfms.f32	s1, s0, s14
 801f396:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801f39a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 801f39e:	f025 050f 	bic.w	r5, r5, #15
 801f3a2:	ee07 5a10 	vmov	s14, r5
 801f3a6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801f3aa:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801f3ae:	ee07 3a90 	vmov	s15, r3
 801f3b2:	eee7 0a27 	vfma.f32	s1, s14, s15
 801f3b6:	3e01      	subs	r6, #1
 801f3b8:	ea56 0200 	orrs.w	r2, r6, r0
 801f3bc:	ee07 5a10 	vmov	s14, r5
 801f3c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f3c4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801f3c8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801f3cc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801f3d0:	ee17 4a10 	vmov	r4, s14
 801f3d4:	bf08      	it	eq
 801f3d6:	eeb0 8a40 	vmoveq.f32	s16, s0
 801f3da:	2c00      	cmp	r4, #0
 801f3dc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801f3e0:	f340 8184 	ble.w	801f6ec <__ieee754_powf+0x50c>
 801f3e4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801f3e8:	f340 80fc 	ble.w	801f5e4 <__ieee754_powf+0x404>
 801f3ec:	eddf 7a67 	vldr	s15, [pc, #412]	; 801f58c <__ieee754_powf+0x3ac>
 801f3f0:	ee28 0a27 	vmul.f32	s0, s16, s15
 801f3f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 801f3f8:	e746      	b.n	801f288 <__ieee754_powf+0xa8>
 801f3fa:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 801f3fe:	bf01      	itttt	eq
 801f400:	eddf 7a68 	vldreq	s15, [pc, #416]	; 801f5a4 <__ieee754_powf+0x3c4>
 801f404:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801f408:	f06f 0217 	mvneq.w	r2, #23
 801f40c:	ee17 4a90 	vmoveq	r4, s15
 801f410:	ea4f 53e4 	mov.w	r3, r4, asr #23
 801f414:	bf18      	it	ne
 801f416:	2200      	movne	r2, #0
 801f418:	3b7f      	subs	r3, #127	; 0x7f
 801f41a:	4413      	add	r3, r2
 801f41c:	4a62      	ldr	r2, [pc, #392]	; (801f5a8 <__ieee754_powf+0x3c8>)
 801f41e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801f422:	4294      	cmp	r4, r2
 801f424:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 801f428:	dd06      	ble.n	801f438 <__ieee754_powf+0x258>
 801f42a:	4a60      	ldr	r2, [pc, #384]	; (801f5ac <__ieee754_powf+0x3cc>)
 801f42c:	4294      	cmp	r4, r2
 801f42e:	f340 80a4 	ble.w	801f57a <__ieee754_powf+0x39a>
 801f432:	3301      	adds	r3, #1
 801f434:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801f438:	2400      	movs	r4, #0
 801f43a:	4a5d      	ldr	r2, [pc, #372]	; (801f5b0 <__ieee754_powf+0x3d0>)
 801f43c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801f440:	ee07 1a90 	vmov	s15, r1
 801f444:	ed92 7a00 	vldr	s14, [r2]
 801f448:	4a5a      	ldr	r2, [pc, #360]	; (801f5b4 <__ieee754_powf+0x3d4>)
 801f44a:	ee37 6a27 	vadd.f32	s12, s14, s15
 801f44e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801f452:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801f456:	1049      	asrs	r1, r1, #1
 801f458:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801f45c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801f460:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801f464:	ee37 5ac7 	vsub.f32	s10, s15, s14
 801f468:	ee06 1a10 	vmov	s12, r1
 801f46c:	ee65 4a26 	vmul.f32	s9, s10, s13
 801f470:	ee36 7a47 	vsub.f32	s14, s12, s14
 801f474:	ee14 7a90 	vmov	r7, s9
 801f478:	4017      	ands	r7, r2
 801f47a:	ee05 7a90 	vmov	s11, r7
 801f47e:	eea5 5ac6 	vfms.f32	s10, s11, s12
 801f482:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f486:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 801f5b8 <__ieee754_powf+0x3d8>
 801f48a:	eea5 5ae7 	vfms.f32	s10, s11, s15
 801f48e:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801f492:	ee25 6a26 	vmul.f32	s12, s10, s13
 801f496:	eddf 6a49 	vldr	s13, [pc, #292]	; 801f5bc <__ieee754_powf+0x3dc>
 801f49a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801f49e:	eddf 6a48 	vldr	s13, [pc, #288]	; 801f5c0 <__ieee754_powf+0x3e0>
 801f4a2:	eee7 6a27 	vfma.f32	s13, s14, s15
 801f4a6:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 801f594 <__ieee754_powf+0x3b4>
 801f4aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801f4ae:	eddf 6a45 	vldr	s13, [pc, #276]	; 801f5c4 <__ieee754_powf+0x3e4>
 801f4b2:	eee7 6a27 	vfma.f32	s13, s14, s15
 801f4b6:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801f5c8 <__ieee754_powf+0x3e8>
 801f4ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801f4be:	ee74 6aa5 	vadd.f32	s13, s9, s11
 801f4c2:	ee27 5aa7 	vmul.f32	s10, s15, s15
 801f4c6:	ee66 6a86 	vmul.f32	s13, s13, s12
 801f4ca:	eee5 6a07 	vfma.f32	s13, s10, s14
 801f4ce:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 801f4d2:	eef0 7a45 	vmov.f32	s15, s10
 801f4d6:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801f4da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f4de:	ee17 1a90 	vmov	r1, s15
 801f4e2:	4011      	ands	r1, r2
 801f4e4:	ee07 1a90 	vmov	s15, r1
 801f4e8:	ee37 7ac5 	vsub.f32	s14, s15, s10
 801f4ec:	eea5 7ae5 	vfms.f32	s14, s11, s11
 801f4f0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801f4f4:	ee27 7a24 	vmul.f32	s14, s14, s9
 801f4f8:	eea6 7a27 	vfma.f32	s14, s12, s15
 801f4fc:	eeb0 6a47 	vmov.f32	s12, s14
 801f500:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801f504:	ee16 1a10 	vmov	r1, s12
 801f508:	4011      	ands	r1, r2
 801f50a:	ee06 1a90 	vmov	s13, r1
 801f50e:	eee5 6ae7 	vfms.f32	s13, s11, s15
 801f512:	eddf 7a2e 	vldr	s15, [pc, #184]	; 801f5cc <__ieee754_powf+0x3ec>
 801f516:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801f5d0 <__ieee754_powf+0x3f0>
 801f51a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801f51e:	ee06 1a10 	vmov	s12, r1
 801f522:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f526:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801f5d4 <__ieee754_powf+0x3f4>
 801f52a:	492b      	ldr	r1, [pc, #172]	; (801f5d8 <__ieee754_powf+0x3f8>)
 801f52c:	eea6 7a27 	vfma.f32	s14, s12, s15
 801f530:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801f534:	edd1 7a00 	vldr	s15, [r1]
 801f538:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f53c:	ee07 3a90 	vmov	s15, r3
 801f540:	4b26      	ldr	r3, [pc, #152]	; (801f5dc <__ieee754_powf+0x3fc>)
 801f542:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801f546:	eef0 7a47 	vmov.f32	s15, s14
 801f54a:	eee6 7a25 	vfma.f32	s15, s12, s11
 801f54e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f552:	edd4 0a00 	vldr	s1, [r4]
 801f556:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801f55a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f55e:	ee17 3a90 	vmov	r3, s15
 801f562:	4013      	ands	r3, r2
 801f564:	ee07 3a90 	vmov	s15, r3
 801f568:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801f56c:	ee76 6ae0 	vsub.f32	s13, s13, s1
 801f570:	eee6 6a65 	vfms.f32	s13, s12, s11
 801f574:	ee77 7a66 	vsub.f32	s15, s14, s13
 801f578:	e70f      	b.n	801f39a <__ieee754_powf+0x1ba>
 801f57a:	2401      	movs	r4, #1
 801f57c:	e75d      	b.n	801f43a <__ieee754_powf+0x25a>
 801f57e:	bf00      	nop
 801f580:	08020c08 	.word	0x08020c08
 801f584:	00000000 	.word	0x00000000
 801f588:	3f7ffff7 	.word	0x3f7ffff7
 801f58c:	7149f2ca 	.word	0x7149f2ca
 801f590:	3f800007 	.word	0x3f800007
 801f594:	3eaaaaab 	.word	0x3eaaaaab
 801f598:	3fb8aa3b 	.word	0x3fb8aa3b
 801f59c:	36eca570 	.word	0x36eca570
 801f5a0:	3fb8aa00 	.word	0x3fb8aa00
 801f5a4:	4b800000 	.word	0x4b800000
 801f5a8:	001cc471 	.word	0x001cc471
 801f5ac:	005db3d6 	.word	0x005db3d6
 801f5b0:	08020ca4 	.word	0x08020ca4
 801f5b4:	fffff000 	.word	0xfffff000
 801f5b8:	3e6c3255 	.word	0x3e6c3255
 801f5bc:	3e53f142 	.word	0x3e53f142
 801f5c0:	3e8ba305 	.word	0x3e8ba305
 801f5c4:	3edb6db7 	.word	0x3edb6db7
 801f5c8:	3f19999a 	.word	0x3f19999a
 801f5cc:	3f76384f 	.word	0x3f76384f
 801f5d0:	3f763800 	.word	0x3f763800
 801f5d4:	369dc3a0 	.word	0x369dc3a0
 801f5d8:	08020cb4 	.word	0x08020cb4
 801f5dc:	08020cac 	.word	0x08020cac
 801f5e0:	3338aa3c 	.word	0x3338aa3c
 801f5e4:	f040 8092 	bne.w	801f70c <__ieee754_powf+0x52c>
 801f5e8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801f5e0 <__ieee754_powf+0x400>
 801f5ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 801f5f0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801f5f4:	eef4 6ac7 	vcmpe.f32	s13, s14
 801f5f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f5fc:	f73f aef6 	bgt.w	801f3ec <__ieee754_powf+0x20c>
 801f600:	15db      	asrs	r3, r3, #23
 801f602:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801f606:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801f60a:	4103      	asrs	r3, r0
 801f60c:	4423      	add	r3, r4
 801f60e:	4949      	ldr	r1, [pc, #292]	; (801f734 <__ieee754_powf+0x554>)
 801f610:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801f614:	3a7f      	subs	r2, #127	; 0x7f
 801f616:	4111      	asrs	r1, r2
 801f618:	ea23 0101 	bic.w	r1, r3, r1
 801f61c:	ee07 1a10 	vmov	s14, r1
 801f620:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801f624:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801f628:	f1c2 0217 	rsb	r2, r2, #23
 801f62c:	4110      	asrs	r0, r2
 801f62e:	2c00      	cmp	r4, #0
 801f630:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f634:	bfb8      	it	lt
 801f636:	4240      	neglt	r0, r0
 801f638:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801f63c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 801f738 <__ieee754_powf+0x558>
 801f640:	ee17 3a10 	vmov	r3, s14
 801f644:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801f648:	f023 030f 	bic.w	r3, r3, #15
 801f64c:	ee07 3a10 	vmov	s14, r3
 801f650:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f654:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801f658:	eddf 7a38 	vldr	s15, [pc, #224]	; 801f73c <__ieee754_powf+0x55c>
 801f65c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f660:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801f664:	eddf 6a36 	vldr	s13, [pc, #216]	; 801f740 <__ieee754_powf+0x560>
 801f668:	eeb0 0a67 	vmov.f32	s0, s15
 801f66c:	eea7 0a26 	vfma.f32	s0, s14, s13
 801f670:	eeb0 6a40 	vmov.f32	s12, s0
 801f674:	eea7 6a66 	vfms.f32	s12, s14, s13
 801f678:	ee20 7a00 	vmul.f32	s14, s0, s0
 801f67c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801f680:	eddf 6a30 	vldr	s13, [pc, #192]	; 801f744 <__ieee754_powf+0x564>
 801f684:	ed9f 6a30 	vldr	s12, [pc, #192]	; 801f748 <__ieee754_powf+0x568>
 801f688:	eea7 6a26 	vfma.f32	s12, s14, s13
 801f68c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 801f74c <__ieee754_powf+0x56c>
 801f690:	eee6 6a07 	vfma.f32	s13, s12, s14
 801f694:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 801f750 <__ieee754_powf+0x570>
 801f698:	eea6 6a87 	vfma.f32	s12, s13, s14
 801f69c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 801f754 <__ieee754_powf+0x574>
 801f6a0:	eee6 6a07 	vfma.f32	s13, s12, s14
 801f6a4:	eeb0 6a40 	vmov.f32	s12, s0
 801f6a8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801f6ac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801f6b0:	eeb0 7a46 	vmov.f32	s14, s12
 801f6b4:	ee77 6a66 	vsub.f32	s13, s14, s13
 801f6b8:	ee20 6a06 	vmul.f32	s12, s0, s12
 801f6bc:	eee0 7a27 	vfma.f32	s15, s0, s15
 801f6c0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801f6c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f6c8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801f6cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f6d0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801f6d4:	ee10 3a10 	vmov	r3, s0
 801f6d8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801f6dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801f6e0:	da1a      	bge.n	801f718 <__ieee754_powf+0x538>
 801f6e2:	f7fb fd83 	bl	801b1ec <scalbnf>
 801f6e6:	ee20 0a08 	vmul.f32	s0, s0, s16
 801f6ea:	e5cd      	b.n	801f288 <__ieee754_powf+0xa8>
 801f6ec:	4a1a      	ldr	r2, [pc, #104]	; (801f758 <__ieee754_powf+0x578>)
 801f6ee:	4293      	cmp	r3, r2
 801f6f0:	dd02      	ble.n	801f6f8 <__ieee754_powf+0x518>
 801f6f2:	eddf 7a1a 	vldr	s15, [pc, #104]	; 801f75c <__ieee754_powf+0x57c>
 801f6f6:	e67b      	b.n	801f3f0 <__ieee754_powf+0x210>
 801f6f8:	d108      	bne.n	801f70c <__ieee754_powf+0x52c>
 801f6fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 801f6fe:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801f702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f706:	f6ff af7b 	blt.w	801f600 <__ieee754_powf+0x420>
 801f70a:	e7f2      	b.n	801f6f2 <__ieee754_powf+0x512>
 801f70c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801f710:	f73f af76 	bgt.w	801f600 <__ieee754_powf+0x420>
 801f714:	2000      	movs	r0, #0
 801f716:	e78f      	b.n	801f638 <__ieee754_powf+0x458>
 801f718:	ee00 3a10 	vmov	s0, r3
 801f71c:	e7e3      	b.n	801f6e6 <__ieee754_powf+0x506>
 801f71e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f722:	e5b1      	b.n	801f288 <__ieee754_powf+0xa8>
 801f724:	eeb0 0a68 	vmov.f32	s0, s17
 801f728:	e5ae      	b.n	801f288 <__ieee754_powf+0xa8>
 801f72a:	eeb0 0a48 	vmov.f32	s0, s16
 801f72e:	e5ab      	b.n	801f288 <__ieee754_powf+0xa8>
 801f730:	2600      	movs	r6, #0
 801f732:	e590      	b.n	801f256 <__ieee754_powf+0x76>
 801f734:	007fffff 	.word	0x007fffff
 801f738:	3f317218 	.word	0x3f317218
 801f73c:	35bfbe8c 	.word	0x35bfbe8c
 801f740:	3f317200 	.word	0x3f317200
 801f744:	3331bb4c 	.word	0x3331bb4c
 801f748:	b5ddea0e 	.word	0xb5ddea0e
 801f74c:	388ab355 	.word	0x388ab355
 801f750:	bb360b61 	.word	0xbb360b61
 801f754:	3e2aaaab 	.word	0x3e2aaaab
 801f758:	43160000 	.word	0x43160000
 801f75c:	0da24260 	.word	0x0da24260

0801f760 <__ieee754_rem_pio2f>:
 801f760:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f762:	ee10 6a10 	vmov	r6, s0
 801f766:	4b8e      	ldr	r3, [pc, #568]	; (801f9a0 <__ieee754_rem_pio2f+0x240>)
 801f768:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801f76c:	429d      	cmp	r5, r3
 801f76e:	b087      	sub	sp, #28
 801f770:	eef0 7a40 	vmov.f32	s15, s0
 801f774:	4604      	mov	r4, r0
 801f776:	dc05      	bgt.n	801f784 <__ieee754_rem_pio2f+0x24>
 801f778:	2300      	movs	r3, #0
 801f77a:	ed80 0a00 	vstr	s0, [r0]
 801f77e:	6043      	str	r3, [r0, #4]
 801f780:	2000      	movs	r0, #0
 801f782:	e01a      	b.n	801f7ba <__ieee754_rem_pio2f+0x5a>
 801f784:	4b87      	ldr	r3, [pc, #540]	; (801f9a4 <__ieee754_rem_pio2f+0x244>)
 801f786:	429d      	cmp	r5, r3
 801f788:	dc46      	bgt.n	801f818 <__ieee754_rem_pio2f+0xb8>
 801f78a:	2e00      	cmp	r6, #0
 801f78c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801f9a8 <__ieee754_rem_pio2f+0x248>
 801f790:	4b86      	ldr	r3, [pc, #536]	; (801f9ac <__ieee754_rem_pio2f+0x24c>)
 801f792:	f025 050f 	bic.w	r5, r5, #15
 801f796:	dd1f      	ble.n	801f7d8 <__ieee754_rem_pio2f+0x78>
 801f798:	429d      	cmp	r5, r3
 801f79a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f79e:	d00e      	beq.n	801f7be <__ieee754_rem_pio2f+0x5e>
 801f7a0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801f9b0 <__ieee754_rem_pio2f+0x250>
 801f7a4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801f7a8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f7ac:	ed80 0a00 	vstr	s0, [r0]
 801f7b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f7b4:	2001      	movs	r0, #1
 801f7b6:	edc4 7a01 	vstr	s15, [r4, #4]
 801f7ba:	b007      	add	sp, #28
 801f7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f7be:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801f9b4 <__ieee754_rem_pio2f+0x254>
 801f7c2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801f9b8 <__ieee754_rem_pio2f+0x258>
 801f7c6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f7ca:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801f7ce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f7d2:	edc0 6a00 	vstr	s13, [r0]
 801f7d6:	e7eb      	b.n	801f7b0 <__ieee754_rem_pio2f+0x50>
 801f7d8:	429d      	cmp	r5, r3
 801f7da:	ee77 7a80 	vadd.f32	s15, s15, s0
 801f7de:	d00e      	beq.n	801f7fe <__ieee754_rem_pio2f+0x9e>
 801f7e0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801f9b0 <__ieee754_rem_pio2f+0x250>
 801f7e4:	ee37 0a87 	vadd.f32	s0, s15, s14
 801f7e8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f7ec:	ed80 0a00 	vstr	s0, [r0]
 801f7f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f7f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f7f8:	edc4 7a01 	vstr	s15, [r4, #4]
 801f7fc:	e7dd      	b.n	801f7ba <__ieee754_rem_pio2f+0x5a>
 801f7fe:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801f9b4 <__ieee754_rem_pio2f+0x254>
 801f802:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801f9b8 <__ieee754_rem_pio2f+0x258>
 801f806:	ee77 7a80 	vadd.f32	s15, s15, s0
 801f80a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801f80e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f812:	edc0 6a00 	vstr	s13, [r0]
 801f816:	e7eb      	b.n	801f7f0 <__ieee754_rem_pio2f+0x90>
 801f818:	4b68      	ldr	r3, [pc, #416]	; (801f9bc <__ieee754_rem_pio2f+0x25c>)
 801f81a:	429d      	cmp	r5, r3
 801f81c:	dc72      	bgt.n	801f904 <__ieee754_rem_pio2f+0x1a4>
 801f81e:	f7ff fb5b 	bl	801eed8 <fabsf>
 801f822:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801f9c0 <__ieee754_rem_pio2f+0x260>
 801f826:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f82a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801f82e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f832:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f836:	ee17 0a90 	vmov	r0, s15
 801f83a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801f9a8 <__ieee754_rem_pio2f+0x248>
 801f83e:	eea7 0a67 	vfms.f32	s0, s14, s15
 801f842:	281f      	cmp	r0, #31
 801f844:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801f9b0 <__ieee754_rem_pio2f+0x250>
 801f848:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f84c:	eeb1 6a47 	vneg.f32	s12, s14
 801f850:	ee70 6a67 	vsub.f32	s13, s0, s15
 801f854:	ee16 2a90 	vmov	r2, s13
 801f858:	dc1c      	bgt.n	801f894 <__ieee754_rem_pio2f+0x134>
 801f85a:	495a      	ldr	r1, [pc, #360]	; (801f9c4 <__ieee754_rem_pio2f+0x264>)
 801f85c:	1e47      	subs	r7, r0, #1
 801f85e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801f862:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801f866:	428b      	cmp	r3, r1
 801f868:	d014      	beq.n	801f894 <__ieee754_rem_pio2f+0x134>
 801f86a:	6022      	str	r2, [r4, #0]
 801f86c:	ed94 7a00 	vldr	s14, [r4]
 801f870:	ee30 0a47 	vsub.f32	s0, s0, s14
 801f874:	2e00      	cmp	r6, #0
 801f876:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f87a:	ed84 0a01 	vstr	s0, [r4, #4]
 801f87e:	da9c      	bge.n	801f7ba <__ieee754_rem_pio2f+0x5a>
 801f880:	eeb1 7a47 	vneg.f32	s14, s14
 801f884:	eeb1 0a40 	vneg.f32	s0, s0
 801f888:	ed84 7a00 	vstr	s14, [r4]
 801f88c:	ed84 0a01 	vstr	s0, [r4, #4]
 801f890:	4240      	negs	r0, r0
 801f892:	e792      	b.n	801f7ba <__ieee754_rem_pio2f+0x5a>
 801f894:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801f898:	15eb      	asrs	r3, r5, #23
 801f89a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801f89e:	2d08      	cmp	r5, #8
 801f8a0:	dde3      	ble.n	801f86a <__ieee754_rem_pio2f+0x10a>
 801f8a2:	eddf 7a44 	vldr	s15, [pc, #272]	; 801f9b4 <__ieee754_rem_pio2f+0x254>
 801f8a6:	eef0 6a40 	vmov.f32	s13, s0
 801f8aa:	eee6 6a27 	vfma.f32	s13, s12, s15
 801f8ae:	ee30 0a66 	vsub.f32	s0, s0, s13
 801f8b2:	eea6 0a27 	vfma.f32	s0, s12, s15
 801f8b6:	eddf 7a40 	vldr	s15, [pc, #256]	; 801f9b8 <__ieee754_rem_pio2f+0x258>
 801f8ba:	ee97 0a27 	vfnms.f32	s0, s14, s15
 801f8be:	ee76 5ac0 	vsub.f32	s11, s13, s0
 801f8c2:	eef0 7a40 	vmov.f32	s15, s0
 801f8c6:	ee15 2a90 	vmov	r2, s11
 801f8ca:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801f8ce:	1a5b      	subs	r3, r3, r1
 801f8d0:	2b19      	cmp	r3, #25
 801f8d2:	dc04      	bgt.n	801f8de <__ieee754_rem_pio2f+0x17e>
 801f8d4:	edc4 5a00 	vstr	s11, [r4]
 801f8d8:	eeb0 0a66 	vmov.f32	s0, s13
 801f8dc:	e7c6      	b.n	801f86c <__ieee754_rem_pio2f+0x10c>
 801f8de:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801f9c8 <__ieee754_rem_pio2f+0x268>
 801f8e2:	eeb0 0a66 	vmov.f32	s0, s13
 801f8e6:	eea6 0a25 	vfma.f32	s0, s12, s11
 801f8ea:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801f8ee:	eddf 6a37 	vldr	s13, [pc, #220]	; 801f9cc <__ieee754_rem_pio2f+0x26c>
 801f8f2:	eee6 7a25 	vfma.f32	s15, s12, s11
 801f8f6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801f8fa:	ee30 7a67 	vsub.f32	s14, s0, s15
 801f8fe:	ed84 7a00 	vstr	s14, [r4]
 801f902:	e7b3      	b.n	801f86c <__ieee754_rem_pio2f+0x10c>
 801f904:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801f908:	db06      	blt.n	801f918 <__ieee754_rem_pio2f+0x1b8>
 801f90a:	ee70 7a40 	vsub.f32	s15, s0, s0
 801f90e:	edc0 7a01 	vstr	s15, [r0, #4]
 801f912:	edc0 7a00 	vstr	s15, [r0]
 801f916:	e733      	b.n	801f780 <__ieee754_rem_pio2f+0x20>
 801f918:	15ea      	asrs	r2, r5, #23
 801f91a:	3a86      	subs	r2, #134	; 0x86
 801f91c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801f920:	ee07 3a90 	vmov	s15, r3
 801f924:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f928:	eddf 6a29 	vldr	s13, [pc, #164]	; 801f9d0 <__ieee754_rem_pio2f+0x270>
 801f92c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f930:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f934:	ed8d 7a03 	vstr	s14, [sp, #12]
 801f938:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f93c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f940:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f944:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f948:	ed8d 7a04 	vstr	s14, [sp, #16]
 801f94c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f950:	eef5 7a40 	vcmp.f32	s15, #0.0
 801f954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f958:	edcd 7a05 	vstr	s15, [sp, #20]
 801f95c:	d11e      	bne.n	801f99c <__ieee754_rem_pio2f+0x23c>
 801f95e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801f962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f966:	bf14      	ite	ne
 801f968:	2302      	movne	r3, #2
 801f96a:	2301      	moveq	r3, #1
 801f96c:	4919      	ldr	r1, [pc, #100]	; (801f9d4 <__ieee754_rem_pio2f+0x274>)
 801f96e:	9101      	str	r1, [sp, #4]
 801f970:	2102      	movs	r1, #2
 801f972:	9100      	str	r1, [sp, #0]
 801f974:	a803      	add	r0, sp, #12
 801f976:	4621      	mov	r1, r4
 801f978:	f000 f892 	bl	801faa0 <__kernel_rem_pio2f>
 801f97c:	2e00      	cmp	r6, #0
 801f97e:	f6bf af1c 	bge.w	801f7ba <__ieee754_rem_pio2f+0x5a>
 801f982:	edd4 7a00 	vldr	s15, [r4]
 801f986:	eef1 7a67 	vneg.f32	s15, s15
 801f98a:	edc4 7a00 	vstr	s15, [r4]
 801f98e:	edd4 7a01 	vldr	s15, [r4, #4]
 801f992:	eef1 7a67 	vneg.f32	s15, s15
 801f996:	edc4 7a01 	vstr	s15, [r4, #4]
 801f99a:	e779      	b.n	801f890 <__ieee754_rem_pio2f+0x130>
 801f99c:	2303      	movs	r3, #3
 801f99e:	e7e5      	b.n	801f96c <__ieee754_rem_pio2f+0x20c>
 801f9a0:	3f490fd8 	.word	0x3f490fd8
 801f9a4:	4016cbe3 	.word	0x4016cbe3
 801f9a8:	3fc90f80 	.word	0x3fc90f80
 801f9ac:	3fc90fd0 	.word	0x3fc90fd0
 801f9b0:	37354443 	.word	0x37354443
 801f9b4:	37354400 	.word	0x37354400
 801f9b8:	2e85a308 	.word	0x2e85a308
 801f9bc:	43490f80 	.word	0x43490f80
 801f9c0:	3f22f984 	.word	0x3f22f984
 801f9c4:	08020cbc 	.word	0x08020cbc
 801f9c8:	2e85a300 	.word	0x2e85a300
 801f9cc:	248d3132 	.word	0x248d3132
 801f9d0:	43800000 	.word	0x43800000
 801f9d4:	08020d3c 	.word	0x08020d3c

0801f9d8 <__ieee754_sqrtf>:
 801f9d8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801f9dc:	4770      	bx	lr
	...

0801f9e0 <__kernel_cosf>:
 801f9e0:	ee10 3a10 	vmov	r3, s0
 801f9e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f9e8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801f9ec:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801f9f0:	da05      	bge.n	801f9fe <__kernel_cosf+0x1e>
 801f9f2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801f9f6:	ee17 2a90 	vmov	r2, s15
 801f9fa:	2a00      	cmp	r2, #0
 801f9fc:	d03d      	beq.n	801fa7a <__kernel_cosf+0x9a>
 801f9fe:	ee60 5a00 	vmul.f32	s11, s0, s0
 801fa02:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801fa80 <__kernel_cosf+0xa0>
 801fa06:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801fa84 <__kernel_cosf+0xa4>
 801fa0a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801fa88 <__kernel_cosf+0xa8>
 801fa0e:	4a1f      	ldr	r2, [pc, #124]	; (801fa8c <__kernel_cosf+0xac>)
 801fa10:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801fa14:	4293      	cmp	r3, r2
 801fa16:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801fa90 <__kernel_cosf+0xb0>
 801fa1a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801fa1e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801fa94 <__kernel_cosf+0xb4>
 801fa22:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801fa26:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801fa98 <__kernel_cosf+0xb8>
 801fa2a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801fa2e:	eeb0 7a66 	vmov.f32	s14, s13
 801fa32:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801fa36:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801fa3a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801fa3e:	ee67 6a25 	vmul.f32	s13, s14, s11
 801fa42:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801fa46:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801fa4a:	dc04      	bgt.n	801fa56 <__kernel_cosf+0x76>
 801fa4c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801fa50:	ee36 0a47 	vsub.f32	s0, s12, s14
 801fa54:	4770      	bx	lr
 801fa56:	4a11      	ldr	r2, [pc, #68]	; (801fa9c <__kernel_cosf+0xbc>)
 801fa58:	4293      	cmp	r3, r2
 801fa5a:	bfda      	itte	le
 801fa5c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801fa60:	ee06 3a90 	vmovle	s13, r3
 801fa64:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801fa68:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801fa6c:	ee36 0a66 	vsub.f32	s0, s12, s13
 801fa70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801fa74:	ee30 0a67 	vsub.f32	s0, s0, s15
 801fa78:	4770      	bx	lr
 801fa7a:	eeb0 0a46 	vmov.f32	s0, s12
 801fa7e:	4770      	bx	lr
 801fa80:	ad47d74e 	.word	0xad47d74e
 801fa84:	310f74f6 	.word	0x310f74f6
 801fa88:	3d2aaaab 	.word	0x3d2aaaab
 801fa8c:	3e999999 	.word	0x3e999999
 801fa90:	b493f27c 	.word	0xb493f27c
 801fa94:	37d00d01 	.word	0x37d00d01
 801fa98:	bab60b61 	.word	0xbab60b61
 801fa9c:	3f480000 	.word	0x3f480000

0801faa0 <__kernel_rem_pio2f>:
 801faa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801faa4:	ed2d 8b04 	vpush	{d8-d9}
 801faa8:	b0d7      	sub	sp, #348	; 0x15c
 801faaa:	4616      	mov	r6, r2
 801faac:	4698      	mov	r8, r3
 801faae:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801fab0:	4bbb      	ldr	r3, [pc, #748]	; (801fda0 <__kernel_rem_pio2f+0x300>)
 801fab2:	9001      	str	r0, [sp, #4]
 801fab4:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801fab8:	1d33      	adds	r3, r6, #4
 801faba:	460d      	mov	r5, r1
 801fabc:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 801fac0:	db29      	blt.n	801fb16 <__kernel_rem_pio2f+0x76>
 801fac2:	1ef1      	subs	r1, r6, #3
 801fac4:	bf48      	it	mi
 801fac6:	1d31      	addmi	r1, r6, #4
 801fac8:	10c9      	asrs	r1, r1, #3
 801faca:	1c4c      	adds	r4, r1, #1
 801facc:	00e3      	lsls	r3, r4, #3
 801face:	9302      	str	r3, [sp, #8]
 801fad0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801fad2:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 801fdb0 <__kernel_rem_pio2f+0x310>
 801fad6:	eba1 0009 	sub.w	r0, r1, r9
 801fada:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 801fade:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 801fae2:	eb07 0c09 	add.w	ip, r7, r9
 801fae6:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 801faea:	2300      	movs	r3, #0
 801faec:	4563      	cmp	r3, ip
 801faee:	dd14      	ble.n	801fb1a <__kernel_rem_pio2f+0x7a>
 801faf0:	ab1a      	add	r3, sp, #104	; 0x68
 801faf2:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 801faf6:	46cc      	mov	ip, r9
 801faf8:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 801fafc:	f1c8 0b01 	rsb	fp, r8, #1
 801fb00:	eb0b 020c 	add.w	r2, fp, ip
 801fb04:	4297      	cmp	r7, r2
 801fb06:	db27      	blt.n	801fb58 <__kernel_rem_pio2f+0xb8>
 801fb08:	f8dd e004 	ldr.w	lr, [sp, #4]
 801fb0c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801fdb0 <__kernel_rem_pio2f+0x310>
 801fb10:	4618      	mov	r0, r3
 801fb12:	2200      	movs	r2, #0
 801fb14:	e016      	b.n	801fb44 <__kernel_rem_pio2f+0xa4>
 801fb16:	2100      	movs	r1, #0
 801fb18:	e7d7      	b.n	801faca <__kernel_rem_pio2f+0x2a>
 801fb1a:	42d8      	cmn	r0, r3
 801fb1c:	bf5d      	ittte	pl
 801fb1e:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 801fb22:	ee07 2a90 	vmovpl	s15, r2
 801fb26:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801fb2a:	eef0 7a47 	vmovmi.f32	s15, s14
 801fb2e:	ecea 7a01 	vstmia	sl!, {s15}
 801fb32:	3301      	adds	r3, #1
 801fb34:	e7da      	b.n	801faec <__kernel_rem_pio2f+0x4c>
 801fb36:	ecfe 6a01 	vldmia	lr!, {s13}
 801fb3a:	ed90 7a00 	vldr	s14, [r0]
 801fb3e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801fb42:	3201      	adds	r2, #1
 801fb44:	454a      	cmp	r2, r9
 801fb46:	f1a0 0004 	sub.w	r0, r0, #4
 801fb4a:	ddf4      	ble.n	801fb36 <__kernel_rem_pio2f+0x96>
 801fb4c:	ecea 7a01 	vstmia	sl!, {s15}
 801fb50:	3304      	adds	r3, #4
 801fb52:	f10c 0c01 	add.w	ip, ip, #1
 801fb56:	e7d3      	b.n	801fb00 <__kernel_rem_pio2f+0x60>
 801fb58:	ab06      	add	r3, sp, #24
 801fb5a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801fb5e:	9304      	str	r3, [sp, #16]
 801fb60:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801fb62:	eddf 8a92 	vldr	s17, [pc, #584]	; 801fdac <__kernel_rem_pio2f+0x30c>
 801fb66:	ed9f 9a90 	vldr	s18, [pc, #576]	; 801fda8 <__kernel_rem_pio2f+0x308>
 801fb6a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801fb6e:	9303      	str	r3, [sp, #12]
 801fb70:	46ba      	mov	sl, r7
 801fb72:	ab56      	add	r3, sp, #344	; 0x158
 801fb74:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801fb78:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 801fb7c:	ab06      	add	r3, sp, #24
 801fb7e:	4618      	mov	r0, r3
 801fb80:	4652      	mov	r2, sl
 801fb82:	2a00      	cmp	r2, #0
 801fb84:	dc51      	bgt.n	801fc2a <__kernel_rem_pio2f+0x18a>
 801fb86:	4620      	mov	r0, r4
 801fb88:	9305      	str	r3, [sp, #20]
 801fb8a:	f7fb fb2f 	bl	801b1ec <scalbnf>
 801fb8e:	eeb0 8a40 	vmov.f32	s16, s0
 801fb92:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801fb96:	ee28 0a00 	vmul.f32	s0, s16, s0
 801fb9a:	f000 fa53 	bl	8020044 <floorf>
 801fb9e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801fba2:	eea0 8a67 	vfms.f32	s16, s0, s15
 801fba6:	2c00      	cmp	r4, #0
 801fba8:	9b05      	ldr	r3, [sp, #20]
 801fbaa:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801fbae:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801fbb2:	edcd 7a00 	vstr	s15, [sp]
 801fbb6:	ee38 8a40 	vsub.f32	s16, s16, s0
 801fbba:	dd4b      	ble.n	801fc54 <__kernel_rem_pio2f+0x1b4>
 801fbbc:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801fbc0:	aa06      	add	r2, sp, #24
 801fbc2:	f1c4 0e08 	rsb	lr, r4, #8
 801fbc6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801fbca:	ee17 1a90 	vmov	r1, s15
 801fbce:	fa42 f00e 	asr.w	r0, r2, lr
 801fbd2:	4401      	add	r1, r0
 801fbd4:	9100      	str	r1, [sp, #0]
 801fbd6:	fa00 f00e 	lsl.w	r0, r0, lr
 801fbda:	a906      	add	r1, sp, #24
 801fbdc:	1a12      	subs	r2, r2, r0
 801fbde:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801fbe2:	f1c4 0007 	rsb	r0, r4, #7
 801fbe6:	fa42 fb00 	asr.w	fp, r2, r0
 801fbea:	f1bb 0f00 	cmp.w	fp, #0
 801fbee:	dd43      	ble.n	801fc78 <__kernel_rem_pio2f+0x1d8>
 801fbf0:	9a00      	ldr	r2, [sp, #0]
 801fbf2:	f04f 0e00 	mov.w	lr, #0
 801fbf6:	3201      	adds	r2, #1
 801fbf8:	9200      	str	r2, [sp, #0]
 801fbfa:	4670      	mov	r0, lr
 801fbfc:	45f2      	cmp	sl, lr
 801fbfe:	dc6c      	bgt.n	801fcda <__kernel_rem_pio2f+0x23a>
 801fc00:	2c00      	cmp	r4, #0
 801fc02:	dd04      	ble.n	801fc0e <__kernel_rem_pio2f+0x16e>
 801fc04:	2c01      	cmp	r4, #1
 801fc06:	d079      	beq.n	801fcfc <__kernel_rem_pio2f+0x25c>
 801fc08:	2c02      	cmp	r4, #2
 801fc0a:	f000 8082 	beq.w	801fd12 <__kernel_rem_pio2f+0x272>
 801fc0e:	f1bb 0f02 	cmp.w	fp, #2
 801fc12:	d131      	bne.n	801fc78 <__kernel_rem_pio2f+0x1d8>
 801fc14:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801fc18:	ee30 8a48 	vsub.f32	s16, s0, s16
 801fc1c:	b360      	cbz	r0, 801fc78 <__kernel_rem_pio2f+0x1d8>
 801fc1e:	4620      	mov	r0, r4
 801fc20:	f7fb fae4 	bl	801b1ec <scalbnf>
 801fc24:	ee38 8a40 	vsub.f32	s16, s16, s0
 801fc28:	e026      	b.n	801fc78 <__kernel_rem_pio2f+0x1d8>
 801fc2a:	ee60 7a28 	vmul.f32	s15, s0, s17
 801fc2e:	3a01      	subs	r2, #1
 801fc30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fc34:	a942      	add	r1, sp, #264	; 0x108
 801fc36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fc3a:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801fc3e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801fc42:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801fc46:	eca0 0a01 	vstmia	r0!, {s0}
 801fc4a:	ed9c 0a00 	vldr	s0, [ip]
 801fc4e:	ee37 0a80 	vadd.f32	s0, s15, s0
 801fc52:	e796      	b.n	801fb82 <__kernel_rem_pio2f+0xe2>
 801fc54:	d107      	bne.n	801fc66 <__kernel_rem_pio2f+0x1c6>
 801fc56:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 801fc5a:	a906      	add	r1, sp, #24
 801fc5c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801fc60:	ea4f 2b22 	mov.w	fp, r2, asr #8
 801fc64:	e7c1      	b.n	801fbea <__kernel_rem_pio2f+0x14a>
 801fc66:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801fc6a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801fc6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc72:	da2f      	bge.n	801fcd4 <__kernel_rem_pio2f+0x234>
 801fc74:	f04f 0b00 	mov.w	fp, #0
 801fc78:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801fc7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc80:	f040 8098 	bne.w	801fdb4 <__kernel_rem_pio2f+0x314>
 801fc84:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801fc88:	469c      	mov	ip, r3
 801fc8a:	2200      	movs	r2, #0
 801fc8c:	45bc      	cmp	ip, r7
 801fc8e:	da48      	bge.n	801fd22 <__kernel_rem_pio2f+0x282>
 801fc90:	2a00      	cmp	r2, #0
 801fc92:	d05f      	beq.n	801fd54 <__kernel_rem_pio2f+0x2b4>
 801fc94:	aa06      	add	r2, sp, #24
 801fc96:	3c08      	subs	r4, #8
 801fc98:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801fc9c:	2900      	cmp	r1, #0
 801fc9e:	d07d      	beq.n	801fd9c <__kernel_rem_pio2f+0x2fc>
 801fca0:	4620      	mov	r0, r4
 801fca2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801fca6:	9301      	str	r3, [sp, #4]
 801fca8:	f7fb faa0 	bl	801b1ec <scalbnf>
 801fcac:	9b01      	ldr	r3, [sp, #4]
 801fcae:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 801fdac <__kernel_rem_pio2f+0x30c>
 801fcb2:	4619      	mov	r1, r3
 801fcb4:	2900      	cmp	r1, #0
 801fcb6:	f280 80af 	bge.w	801fe18 <__kernel_rem_pio2f+0x378>
 801fcba:	4618      	mov	r0, r3
 801fcbc:	2400      	movs	r4, #0
 801fcbe:	2800      	cmp	r0, #0
 801fcc0:	f2c0 80d0 	blt.w	801fe64 <__kernel_rem_pio2f+0x3c4>
 801fcc4:	a942      	add	r1, sp, #264	; 0x108
 801fcc6:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 801fcca:	4a36      	ldr	r2, [pc, #216]	; (801fda4 <__kernel_rem_pio2f+0x304>)
 801fccc:	eddf 7a38 	vldr	s15, [pc, #224]	; 801fdb0 <__kernel_rem_pio2f+0x310>
 801fcd0:	2100      	movs	r1, #0
 801fcd2:	e0bb      	b.n	801fe4c <__kernel_rem_pio2f+0x3ac>
 801fcd4:	f04f 0b02 	mov.w	fp, #2
 801fcd8:	e78a      	b.n	801fbf0 <__kernel_rem_pio2f+0x150>
 801fcda:	681a      	ldr	r2, [r3, #0]
 801fcdc:	b948      	cbnz	r0, 801fcf2 <__kernel_rem_pio2f+0x252>
 801fcde:	b11a      	cbz	r2, 801fce8 <__kernel_rem_pio2f+0x248>
 801fce0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801fce4:	601a      	str	r2, [r3, #0]
 801fce6:	2201      	movs	r2, #1
 801fce8:	f10e 0e01 	add.w	lr, lr, #1
 801fcec:	3304      	adds	r3, #4
 801fcee:	4610      	mov	r0, r2
 801fcf0:	e784      	b.n	801fbfc <__kernel_rem_pio2f+0x15c>
 801fcf2:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801fcf6:	601a      	str	r2, [r3, #0]
 801fcf8:	4602      	mov	r2, r0
 801fcfa:	e7f5      	b.n	801fce8 <__kernel_rem_pio2f+0x248>
 801fcfc:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801fd00:	ab06      	add	r3, sp, #24
 801fd02:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801fd06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801fd0a:	aa06      	add	r2, sp, #24
 801fd0c:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 801fd10:	e77d      	b.n	801fc0e <__kernel_rem_pio2f+0x16e>
 801fd12:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801fd16:	ab06      	add	r3, sp, #24
 801fd18:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801fd1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801fd20:	e7f3      	b.n	801fd0a <__kernel_rem_pio2f+0x26a>
 801fd22:	a906      	add	r1, sp, #24
 801fd24:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 801fd28:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801fd2c:	4302      	orrs	r2, r0
 801fd2e:	e7ad      	b.n	801fc8c <__kernel_rem_pio2f+0x1ec>
 801fd30:	3001      	adds	r0, #1
 801fd32:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801fd36:	2a00      	cmp	r2, #0
 801fd38:	d0fa      	beq.n	801fd30 <__kernel_rem_pio2f+0x290>
 801fd3a:	a91a      	add	r1, sp, #104	; 0x68
 801fd3c:	eb0a 0208 	add.w	r2, sl, r8
 801fd40:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801fd44:	f10a 0301 	add.w	r3, sl, #1
 801fd48:	eb0a 0100 	add.w	r1, sl, r0
 801fd4c:	4299      	cmp	r1, r3
 801fd4e:	da04      	bge.n	801fd5a <__kernel_rem_pio2f+0x2ba>
 801fd50:	468a      	mov	sl, r1
 801fd52:	e70e      	b.n	801fb72 <__kernel_rem_pio2f+0xd2>
 801fd54:	9b04      	ldr	r3, [sp, #16]
 801fd56:	2001      	movs	r0, #1
 801fd58:	e7eb      	b.n	801fd32 <__kernel_rem_pio2f+0x292>
 801fd5a:	9803      	ldr	r0, [sp, #12]
 801fd5c:	f8dd c004 	ldr.w	ip, [sp, #4]
 801fd60:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801fd64:	9000      	str	r0, [sp, #0]
 801fd66:	ee07 0a90 	vmov	s15, r0
 801fd6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fd6e:	2000      	movs	r0, #0
 801fd70:	ece2 7a01 	vstmia	r2!, {s15}
 801fd74:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801fdb0 <__kernel_rem_pio2f+0x310>
 801fd78:	4696      	mov	lr, r2
 801fd7a:	4548      	cmp	r0, r9
 801fd7c:	dd06      	ble.n	801fd8c <__kernel_rem_pio2f+0x2ec>
 801fd7e:	a842      	add	r0, sp, #264	; 0x108
 801fd80:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801fd84:	edc0 7a00 	vstr	s15, [r0]
 801fd88:	3301      	adds	r3, #1
 801fd8a:	e7df      	b.n	801fd4c <__kernel_rem_pio2f+0x2ac>
 801fd8c:	ecfc 6a01 	vldmia	ip!, {s13}
 801fd90:	ed3e 7a01 	vldmdb	lr!, {s14}
 801fd94:	3001      	adds	r0, #1
 801fd96:	eee6 7a87 	vfma.f32	s15, s13, s14
 801fd9a:	e7ee      	b.n	801fd7a <__kernel_rem_pio2f+0x2da>
 801fd9c:	3b01      	subs	r3, #1
 801fd9e:	e779      	b.n	801fc94 <__kernel_rem_pio2f+0x1f4>
 801fda0:	08021080 	.word	0x08021080
 801fda4:	08021054 	.word	0x08021054
 801fda8:	43800000 	.word	0x43800000
 801fdac:	3b800000 	.word	0x3b800000
 801fdb0:	00000000 	.word	0x00000000
 801fdb4:	9b02      	ldr	r3, [sp, #8]
 801fdb6:	eeb0 0a48 	vmov.f32	s0, s16
 801fdba:	1b98      	subs	r0, r3, r6
 801fdbc:	f7fb fa16 	bl	801b1ec <scalbnf>
 801fdc0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801fda8 <__kernel_rem_pio2f+0x308>
 801fdc4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801fdc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fdcc:	db1b      	blt.n	801fe06 <__kernel_rem_pio2f+0x366>
 801fdce:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801fdac <__kernel_rem_pio2f+0x30c>
 801fdd2:	ee60 7a27 	vmul.f32	s15, s0, s15
 801fdd6:	aa06      	add	r2, sp, #24
 801fdd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fddc:	a906      	add	r1, sp, #24
 801fdde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fde2:	3408      	adds	r4, #8
 801fde4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801fde8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fdec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801fdf0:	ee10 3a10 	vmov	r3, s0
 801fdf4:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801fdf8:	ee17 2a90 	vmov	r2, s15
 801fdfc:	f10a 0301 	add.w	r3, sl, #1
 801fe00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801fe04:	e74c      	b.n	801fca0 <__kernel_rem_pio2f+0x200>
 801fe06:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801fe0a:	aa06      	add	r2, sp, #24
 801fe0c:	ee10 3a10 	vmov	r3, s0
 801fe10:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801fe14:	4653      	mov	r3, sl
 801fe16:	e743      	b.n	801fca0 <__kernel_rem_pio2f+0x200>
 801fe18:	aa42      	add	r2, sp, #264	; 0x108
 801fe1a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801fe1e:	aa06      	add	r2, sp, #24
 801fe20:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801fe24:	9201      	str	r2, [sp, #4]
 801fe26:	ee07 2a90 	vmov	s15, r2
 801fe2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fe2e:	3901      	subs	r1, #1
 801fe30:	ee67 7a80 	vmul.f32	s15, s15, s0
 801fe34:	ee20 0a07 	vmul.f32	s0, s0, s14
 801fe38:	edc0 7a00 	vstr	s15, [r0]
 801fe3c:	e73a      	b.n	801fcb4 <__kernel_rem_pio2f+0x214>
 801fe3e:	ecf2 6a01 	vldmia	r2!, {s13}
 801fe42:	ecb6 7a01 	vldmia	r6!, {s14}
 801fe46:	eee6 7a87 	vfma.f32	s15, s13, s14
 801fe4a:	3101      	adds	r1, #1
 801fe4c:	42b9      	cmp	r1, r7
 801fe4e:	dc01      	bgt.n	801fe54 <__kernel_rem_pio2f+0x3b4>
 801fe50:	428c      	cmp	r4, r1
 801fe52:	daf4      	bge.n	801fe3e <__kernel_rem_pio2f+0x39e>
 801fe54:	aa56      	add	r2, sp, #344	; 0x158
 801fe56:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 801fe5a:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801fe5e:	3801      	subs	r0, #1
 801fe60:	3401      	adds	r4, #1
 801fe62:	e72c      	b.n	801fcbe <__kernel_rem_pio2f+0x21e>
 801fe64:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801fe66:	2a02      	cmp	r2, #2
 801fe68:	dc0a      	bgt.n	801fe80 <__kernel_rem_pio2f+0x3e0>
 801fe6a:	2a00      	cmp	r2, #0
 801fe6c:	dc61      	bgt.n	801ff32 <__kernel_rem_pio2f+0x492>
 801fe6e:	d03c      	beq.n	801feea <__kernel_rem_pio2f+0x44a>
 801fe70:	9b00      	ldr	r3, [sp, #0]
 801fe72:	f003 0007 	and.w	r0, r3, #7
 801fe76:	b057      	add	sp, #348	; 0x15c
 801fe78:	ecbd 8b04 	vpop	{d8-d9}
 801fe7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe80:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801fe82:	2a03      	cmp	r2, #3
 801fe84:	d1f4      	bne.n	801fe70 <__kernel_rem_pio2f+0x3d0>
 801fe86:	aa2e      	add	r2, sp, #184	; 0xb8
 801fe88:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801fe8c:	4608      	mov	r0, r1
 801fe8e:	461c      	mov	r4, r3
 801fe90:	2c00      	cmp	r4, #0
 801fe92:	f1a0 0004 	sub.w	r0, r0, #4
 801fe96:	dc59      	bgt.n	801ff4c <__kernel_rem_pio2f+0x4ac>
 801fe98:	4618      	mov	r0, r3
 801fe9a:	2801      	cmp	r0, #1
 801fe9c:	f1a1 0104 	sub.w	r1, r1, #4
 801fea0:	dc64      	bgt.n	801ff6c <__kernel_rem_pio2f+0x4cc>
 801fea2:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 801fdb0 <__kernel_rem_pio2f+0x310>
 801fea6:	2b01      	cmp	r3, #1
 801fea8:	dc70      	bgt.n	801ff8c <__kernel_rem_pio2f+0x4ec>
 801feaa:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801feae:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801feb2:	f1bb 0f00 	cmp.w	fp, #0
 801feb6:	d172      	bne.n	801ff9e <__kernel_rem_pio2f+0x4fe>
 801feb8:	edc5 6a00 	vstr	s13, [r5]
 801febc:	ed85 7a01 	vstr	s14, [r5, #4]
 801fec0:	edc5 7a02 	vstr	s15, [r5, #8]
 801fec4:	e7d4      	b.n	801fe70 <__kernel_rem_pio2f+0x3d0>
 801fec6:	aa2e      	add	r2, sp, #184	; 0xb8
 801fec8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801fecc:	ed91 7a00 	vldr	s14, [r1]
 801fed0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801fed4:	3b01      	subs	r3, #1
 801fed6:	2b00      	cmp	r3, #0
 801fed8:	daf5      	bge.n	801fec6 <__kernel_rem_pio2f+0x426>
 801feda:	f1bb 0f00 	cmp.w	fp, #0
 801fede:	d001      	beq.n	801fee4 <__kernel_rem_pio2f+0x444>
 801fee0:	eef1 7a67 	vneg.f32	s15, s15
 801fee4:	edc5 7a00 	vstr	s15, [r5]
 801fee8:	e7c2      	b.n	801fe70 <__kernel_rem_pio2f+0x3d0>
 801feea:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 801fdb0 <__kernel_rem_pio2f+0x310>
 801feee:	e7f2      	b.n	801fed6 <__kernel_rem_pio2f+0x436>
 801fef0:	aa2e      	add	r2, sp, #184	; 0xb8
 801fef2:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801fef6:	edd0 7a00 	vldr	s15, [r0]
 801fefa:	ee37 7a27 	vadd.f32	s14, s14, s15
 801fefe:	3901      	subs	r1, #1
 801ff00:	2900      	cmp	r1, #0
 801ff02:	daf5      	bge.n	801fef0 <__kernel_rem_pio2f+0x450>
 801ff04:	f1bb 0f00 	cmp.w	fp, #0
 801ff08:	d017      	beq.n	801ff3a <__kernel_rem_pio2f+0x49a>
 801ff0a:	eef1 7a47 	vneg.f32	s15, s14
 801ff0e:	edc5 7a00 	vstr	s15, [r5]
 801ff12:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801ff16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ff1a:	a82f      	add	r0, sp, #188	; 0xbc
 801ff1c:	2101      	movs	r1, #1
 801ff1e:	428b      	cmp	r3, r1
 801ff20:	da0e      	bge.n	801ff40 <__kernel_rem_pio2f+0x4a0>
 801ff22:	f1bb 0f00 	cmp.w	fp, #0
 801ff26:	d001      	beq.n	801ff2c <__kernel_rem_pio2f+0x48c>
 801ff28:	eef1 7a67 	vneg.f32	s15, s15
 801ff2c:	edc5 7a01 	vstr	s15, [r5, #4]
 801ff30:	e79e      	b.n	801fe70 <__kernel_rem_pio2f+0x3d0>
 801ff32:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 801fdb0 <__kernel_rem_pio2f+0x310>
 801ff36:	4619      	mov	r1, r3
 801ff38:	e7e2      	b.n	801ff00 <__kernel_rem_pio2f+0x460>
 801ff3a:	eef0 7a47 	vmov.f32	s15, s14
 801ff3e:	e7e6      	b.n	801ff0e <__kernel_rem_pio2f+0x46e>
 801ff40:	ecb0 7a01 	vldmia	r0!, {s14}
 801ff44:	3101      	adds	r1, #1
 801ff46:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ff4a:	e7e8      	b.n	801ff1e <__kernel_rem_pio2f+0x47e>
 801ff4c:	edd0 7a00 	vldr	s15, [r0]
 801ff50:	edd0 6a01 	vldr	s13, [r0, #4]
 801ff54:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801ff58:	3c01      	subs	r4, #1
 801ff5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ff5e:	ed80 7a00 	vstr	s14, [r0]
 801ff62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ff66:	edc0 7a01 	vstr	s15, [r0, #4]
 801ff6a:	e791      	b.n	801fe90 <__kernel_rem_pio2f+0x3f0>
 801ff6c:	edd1 7a00 	vldr	s15, [r1]
 801ff70:	edd1 6a01 	vldr	s13, [r1, #4]
 801ff74:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801ff78:	3801      	subs	r0, #1
 801ff7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ff7e:	ed81 7a00 	vstr	s14, [r1]
 801ff82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ff86:	edc1 7a01 	vstr	s15, [r1, #4]
 801ff8a:	e786      	b.n	801fe9a <__kernel_rem_pio2f+0x3fa>
 801ff8c:	aa2e      	add	r2, sp, #184	; 0xb8
 801ff8e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801ff92:	ed91 7a00 	vldr	s14, [r1]
 801ff96:	3b01      	subs	r3, #1
 801ff98:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ff9c:	e783      	b.n	801fea6 <__kernel_rem_pio2f+0x406>
 801ff9e:	eef1 6a66 	vneg.f32	s13, s13
 801ffa2:	eeb1 7a47 	vneg.f32	s14, s14
 801ffa6:	edc5 6a00 	vstr	s13, [r5]
 801ffaa:	ed85 7a01 	vstr	s14, [r5, #4]
 801ffae:	eef1 7a67 	vneg.f32	s15, s15
 801ffb2:	e785      	b.n	801fec0 <__kernel_rem_pio2f+0x420>

0801ffb4 <__kernel_sinf>:
 801ffb4:	ee10 3a10 	vmov	r3, s0
 801ffb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ffbc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801ffc0:	da04      	bge.n	801ffcc <__kernel_sinf+0x18>
 801ffc2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801ffc6:	ee17 3a90 	vmov	r3, s15
 801ffca:	b35b      	cbz	r3, 8020024 <__kernel_sinf+0x70>
 801ffcc:	ee20 7a00 	vmul.f32	s14, s0, s0
 801ffd0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8020028 <__kernel_sinf+0x74>
 801ffd4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 802002c <__kernel_sinf+0x78>
 801ffd8:	eea7 6a27 	vfma.f32	s12, s14, s15
 801ffdc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8020030 <__kernel_sinf+0x7c>
 801ffe0:	eee6 7a07 	vfma.f32	s15, s12, s14
 801ffe4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8020034 <__kernel_sinf+0x80>
 801ffe8:	eea7 6a87 	vfma.f32	s12, s15, s14
 801ffec:	eddf 7a12 	vldr	s15, [pc, #72]	; 8020038 <__kernel_sinf+0x84>
 801fff0:	ee60 6a07 	vmul.f32	s13, s0, s14
 801fff4:	eee6 7a07 	vfma.f32	s15, s12, s14
 801fff8:	b930      	cbnz	r0, 8020008 <__kernel_sinf+0x54>
 801fffa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 802003c <__kernel_sinf+0x88>
 801fffe:	eea7 6a27 	vfma.f32	s12, s14, s15
 8020002:	eea6 0a26 	vfma.f32	s0, s12, s13
 8020006:	4770      	bx	lr
 8020008:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802000c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8020010:	eee0 7a86 	vfma.f32	s15, s1, s12
 8020014:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8020018:	eddf 7a09 	vldr	s15, [pc, #36]	; 8020040 <__kernel_sinf+0x8c>
 802001c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8020020:	ee30 0a60 	vsub.f32	s0, s0, s1
 8020024:	4770      	bx	lr
 8020026:	bf00      	nop
 8020028:	2f2ec9d3 	.word	0x2f2ec9d3
 802002c:	b2d72f34 	.word	0xb2d72f34
 8020030:	3638ef1b 	.word	0x3638ef1b
 8020034:	b9500d01 	.word	0xb9500d01
 8020038:	3c088889 	.word	0x3c088889
 802003c:	be2aaaab 	.word	0xbe2aaaab
 8020040:	3e2aaaab 	.word	0x3e2aaaab

08020044 <floorf>:
 8020044:	ee10 3a10 	vmov	r3, s0
 8020048:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802004c:	3a7f      	subs	r2, #127	; 0x7f
 802004e:	2a16      	cmp	r2, #22
 8020050:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8020054:	dc2a      	bgt.n	80200ac <floorf+0x68>
 8020056:	2a00      	cmp	r2, #0
 8020058:	da11      	bge.n	802007e <floorf+0x3a>
 802005a:	eddf 7a18 	vldr	s15, [pc, #96]	; 80200bc <floorf+0x78>
 802005e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8020062:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8020066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802006a:	dd05      	ble.n	8020078 <floorf+0x34>
 802006c:	2b00      	cmp	r3, #0
 802006e:	da23      	bge.n	80200b8 <floorf+0x74>
 8020070:	4a13      	ldr	r2, [pc, #76]	; (80200c0 <floorf+0x7c>)
 8020072:	2900      	cmp	r1, #0
 8020074:	bf18      	it	ne
 8020076:	4613      	movne	r3, r2
 8020078:	ee00 3a10 	vmov	s0, r3
 802007c:	4770      	bx	lr
 802007e:	4911      	ldr	r1, [pc, #68]	; (80200c4 <floorf+0x80>)
 8020080:	4111      	asrs	r1, r2
 8020082:	420b      	tst	r3, r1
 8020084:	d0fa      	beq.n	802007c <floorf+0x38>
 8020086:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80200bc <floorf+0x78>
 802008a:	ee30 0a27 	vadd.f32	s0, s0, s15
 802008e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8020092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020096:	ddef      	ble.n	8020078 <floorf+0x34>
 8020098:	2b00      	cmp	r3, #0
 802009a:	bfbe      	ittt	lt
 802009c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80200a0:	fa40 f202 	asrlt.w	r2, r0, r2
 80200a4:	189b      	addlt	r3, r3, r2
 80200a6:	ea23 0301 	bic.w	r3, r3, r1
 80200aa:	e7e5      	b.n	8020078 <floorf+0x34>
 80200ac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80200b0:	d3e4      	bcc.n	802007c <floorf+0x38>
 80200b2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80200b6:	4770      	bx	lr
 80200b8:	2300      	movs	r3, #0
 80200ba:	e7dd      	b.n	8020078 <floorf+0x34>
 80200bc:	7149f2ca 	.word	0x7149f2ca
 80200c0:	bf800000 	.word	0xbf800000
 80200c4:	007fffff 	.word	0x007fffff

080200c8 <rintf>:
 80200c8:	ee10 2a10 	vmov	r2, s0
 80200cc:	b513      	push	{r0, r1, r4, lr}
 80200ce:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80200d2:	397f      	subs	r1, #127	; 0x7f
 80200d4:	2916      	cmp	r1, #22
 80200d6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80200da:	dc47      	bgt.n	802016c <rintf+0xa4>
 80200dc:	b32b      	cbz	r3, 802012a <rintf+0x62>
 80200de:	2900      	cmp	r1, #0
 80200e0:	ee10 3a10 	vmov	r3, s0
 80200e4:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 80200e8:	da21      	bge.n	802012e <rintf+0x66>
 80200ea:	f3c2 0316 	ubfx	r3, r2, #0, #23
 80200ee:	425b      	negs	r3, r3
 80200f0:	4921      	ldr	r1, [pc, #132]	; (8020178 <rintf+0xb0>)
 80200f2:	0a5b      	lsrs	r3, r3, #9
 80200f4:	0d12      	lsrs	r2, r2, #20
 80200f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80200fa:	0512      	lsls	r2, r2, #20
 80200fc:	4313      	orrs	r3, r2
 80200fe:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8020102:	ee07 3a90 	vmov	s15, r3
 8020106:	edd1 6a00 	vldr	s13, [r1]
 802010a:	ee36 7aa7 	vadd.f32	s14, s13, s15
 802010e:	ed8d 7a01 	vstr	s14, [sp, #4]
 8020112:	eddd 7a01 	vldr	s15, [sp, #4]
 8020116:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802011a:	ee17 3a90 	vmov	r3, s15
 802011e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020122:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8020126:	ee00 3a10 	vmov	s0, r3
 802012a:	b002      	add	sp, #8
 802012c:	bd10      	pop	{r4, pc}
 802012e:	4a13      	ldr	r2, [pc, #76]	; (802017c <rintf+0xb4>)
 8020130:	410a      	asrs	r2, r1
 8020132:	4213      	tst	r3, r2
 8020134:	d0f9      	beq.n	802012a <rintf+0x62>
 8020136:	0854      	lsrs	r4, r2, #1
 8020138:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 802013c:	d006      	beq.n	802014c <rintf+0x84>
 802013e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8020142:	ea23 0304 	bic.w	r3, r3, r4
 8020146:	fa42 f101 	asr.w	r1, r2, r1
 802014a:	430b      	orrs	r3, r1
 802014c:	4a0a      	ldr	r2, [pc, #40]	; (8020178 <rintf+0xb0>)
 802014e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8020152:	ed90 7a00 	vldr	s14, [r0]
 8020156:	ee07 3a90 	vmov	s15, r3
 802015a:	ee77 7a27 	vadd.f32	s15, s14, s15
 802015e:	edcd 7a01 	vstr	s15, [sp, #4]
 8020162:	ed9d 0a01 	vldr	s0, [sp, #4]
 8020166:	ee30 0a47 	vsub.f32	s0, s0, s14
 802016a:	e7de      	b.n	802012a <rintf+0x62>
 802016c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8020170:	d3db      	bcc.n	802012a <rintf+0x62>
 8020172:	ee30 0a00 	vadd.f32	s0, s0, s0
 8020176:	e7d8      	b.n	802012a <rintf+0x62>
 8020178:	0802108c 	.word	0x0802108c
 802017c:	007fffff 	.word	0x007fffff

08020180 <_init>:
 8020180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020182:	bf00      	nop
 8020184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020186:	bc08      	pop	{r3}
 8020188:	469e      	mov	lr, r3
 802018a:	4770      	bx	lr

0802018c <_fini>:
 802018c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802018e:	bf00      	nop
 8020190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020192:	bc08      	pop	{r3}
 8020194:	469e      	mov	lr, r3
 8020196:	4770      	bx	lr
