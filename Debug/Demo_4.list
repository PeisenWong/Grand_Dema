
Demo_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020428  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f34  080205b8  080205b8  000305b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080214ec  080214ec  00040264  2**0
                  CONTENTS
  4 .ARM          00000008  080214ec  080214ec  000314ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080214f4  080214f4  00040264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080214f4  080214f4  000314f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080214f8  080214f8  000314f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  080214fc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a860  20000268  08021760  00040268  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000aac8  08021760  0004aac8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040264  2**0
                  CONTENTS, READONLY
 12 .debug_info   000a4d91  00000000  00000000  00040294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a36f  00000000  00000000  000e5025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002830  00000000  00000000  000ef398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002578  00000000  00000000  000f1bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000316c1  00000000  00000000  000f4140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046984  00000000  00000000  00125801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eaf33  00000000  00000000  0016c185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002570b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bf78  00000000  00000000  0025710c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000268 	.word	0x20000268
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080205a0 	.word	0x080205a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000026c 	.word	0x2000026c
 80001cc:	080205a0 	.word	0x080205a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <ABTInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void ABTInit(float samp_time, float a, float b, float g, float *ip, float *pos, float *vel, float *acc, ABT_t *filt)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	ed87 0a07 	vstr	s0, [r7, #28]
 8000ff6:	edc7 0a06 	vstr	s1, [r7, #24]
 8000ffa:	ed87 1a05 	vstr	s2, [r7, #20]
 8000ffe:	edc7 1a04 	vstr	s3, [r7, #16]
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	603b      	str	r3, [r7, #0]
	filt->sample_time = samp_time;
 800100a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100c:	69fa      	ldr	r2, [r7, #28]
 800100e:	601a      	str	r2, [r3, #0]
	filt->alpha = a;
 8001010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	605a      	str	r2, [r3, #4]
	filt->beta = b;
 8001016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	609a      	str	r2, [r3, #8]
	filt->gamma = g;
 800101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	60da      	str	r2, [r3, #12]
	filt->input = ip;
 8001022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	611a      	str	r2, [r3, #16]
	filt->pos_output = pos;
 8001028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	615a      	str	r2, [r3, #20]
	filt->vel_output = vel;
 800102e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
	filt->acc_output = acc;
 8001034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	61da      	str	r2, [r3, #28]
}
 800103a:	bf00      	nop
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <ABTEstimateInit>:

void ABTEstimateInit(ABT_t *filt)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
	*(filt->pos_output) = 0;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	*(filt->vel_output) = 0;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
	*(filt->acc_output) = 0;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <BDCInit>:
 * Function Return		: None
 * Function Example		: BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 * 						  BDCInit(&BDC2, &htim3, TIM_CHANNEL_1, GPIO, GPIOA, GPIO_Pin_9, GPIOA, GPIO_Pin_10);
 */

void BDCInit(BDC_t* bdc,TIM_HandleTypeDef* htimx,uint32_t Channel, BCDDIRPINType Dirpintype, ...){
 8001078:	b408      	push	{r3}
 800107a:	b580      	push	{r7, lr}
 800107c:	b089      	sub	sp, #36	; 0x24
 800107e:	af02      	add	r7, sp, #8
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]

	bdc->htim = htimx;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	68ba      	ldr	r2, [r7, #8]
 800108a:	61da      	str	r2, [r3, #28]
	bdc->Channel = Channel;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	621a      	str	r2, [r3, #32]
	bdc->Dirpintype =  Dirpintype;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001098:	701a      	strb	r2, [r3, #0]

	va_list pinconfig;
	va_start(pinconfig, Dirpintype);
 800109a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109e:	617b      	str	r3, [r7, #20]

	if( bdc->Dirpintype == GPIO){
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d12e      	bne.n	8001106 <BDCInit+0x8e>

		bdc->GPIOx_DIR1 = va_arg(pinconfig, GPIO_TypeDef*);
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	1d1a      	adds	r2, r3, #4
 80010ac:	617a      	str	r2, [r7, #20]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	605a      	str	r2, [r3, #4]
		bdc->GPIO_Pin_DIR1	= va_arg(pinconfig, int);
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	1d1a      	adds	r2, r3, #4
 80010b8:	617a      	str	r2, [r7, #20]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	b29a      	uxth	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	811a      	strh	r2, [r3, #8]
		bdc->GPIOx_DIR2 = va_arg(pinconfig, GPIO_TypeDef*);
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	1d1a      	adds	r2, r3, #4
 80010c6:	617a      	str	r2, [r7, #20]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	60da      	str	r2, [r3, #12]
		bdc->GPIO_Pin_DIR2	= va_arg(pinconfig, int);
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	1d1a      	adds	r2, r3, #4
 80010d2:	617a      	str	r2, [r7, #20]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	821a      	strh	r2, [r3, #16]



		GPIOPinsInit(bdc->GPIOx_DIR1, bdc->GPIO_Pin_DIR1,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6858      	ldr	r0, [r3, #4]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	8919      	ldrh	r1, [r3, #8]
 80010e4:	2301      	movs	r3, #1
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2302      	movs	r3, #2
 80010ea:	2201      	movs	r2, #1
 80010ec:	f000 f908 	bl	8001300 <GPIOPinsInit>
		GPIOPinsInit(bdc->GPIOx_DIR2, bdc->GPIO_Pin_DIR2,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	68d8      	ldr	r0, [r3, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8a19      	ldrh	r1, [r3, #16]
 80010f8:	2301      	movs	r3, #1
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2302      	movs	r3, #2
 80010fe:	2201      	movs	r2, #1
 8001100:	f000 f8fe 	bl	8001300 <GPIOPinsInit>
 8001104:	e017      	b.n	8001136 <BDCInit+0xbe>

	}else if(bdc->Dirpintype == SHIFTREG){
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d113      	bne.n	8001136 <BDCInit+0xbe>

		bdc->shiftreg = va_arg(pinconfig, byte_t *);
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	1d1a      	adds	r2, r3, #4
 8001112:	617a      	str	r2, [r7, #20]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	615a      	str	r2, [r3, #20]
		bdc->dir1 = va_arg(pinconfig, int);
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	1d1a      	adds	r2, r3, #4
 800111e:	617a      	str	r2, [r7, #20]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	761a      	strb	r2, [r3, #24]
		bdc->dir2 = va_arg(pinconfig, int);
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	1d1a      	adds	r2, r3, #4
 800112c:	617a      	str	r2, [r7, #20]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	765a      	strb	r2, [r3, #25]
	}

	va_end(pinconfig);
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6a1b      	ldr	r3, [r3, #32]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d105      	bne.n	800114a <BDCInit+0xd2>
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2200      	movs	r2, #0
 8001146:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001148:	e018      	b.n	800117c <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	2b04      	cmp	r3, #4
 8001150:	d105      	bne.n	800115e <BDCInit+0xe6>
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	2300      	movs	r3, #0
 800115a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800115c:	e00e      	b.n	800117c <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	2b08      	cmp	r3, #8
 8001164:	d105      	bne.n	8001172 <BDCInit+0xfa>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	2300      	movs	r3, #0
 800116e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001170:	e004      	b.n	800117c <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2300      	movs	r3, #0
 800117a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800117c:	bf00      	nop
 800117e:	371c      	adds	r7, #28
 8001180:	46bd      	mov	sp, r7
 8001182:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001186:	b001      	add	sp, #4
 8001188:	4770      	bx	lr

0800118a <WriteBDC>:
 * Function Return		: None
 * Function Example		: WriteBDC(&BDC1,20000);
 */

void WriteBDC(BDC_t* bdc, int32_t pwm)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	6039      	str	r1, [r7, #0]

	if(pwm >= 0){
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db52      	blt.n	8001240 <WriteBDC+0xb6>

		//*(bdc-> speed) = pwm;
		__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), pwm);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a1b      	ldr	r3, [r3, #32]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d105      	bne.n	80011ae <WriteBDC+0x24>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34
 80011ac:	e018      	b.n	80011e0 <WriteBDC+0x56>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d105      	bne.n	80011c2 <WriteBDC+0x38>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	6393      	str	r3, [r2, #56]	; 0x38
 80011c0:	e00e      	b.n	80011e0 <WriteBDC+0x56>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d105      	bne.n	80011d6 <WriteBDC+0x4c>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011d4:	e004      	b.n	80011e0 <WriteBDC+0x56>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	6413      	str	r3, [r2, #64]	; 0x40

		if( bdc->Dirpintype == GPIO){
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d110      	bne.n	800120a <WriteBDC+0x80>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_SET);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6858      	ldr	r0, [r3, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	891b      	ldrh	r3, [r3, #8]
 80011f0:	2201      	movs	r2, #1
 80011f2:	4619      	mov	r1, r3
 80011f4:	f011 fe3e 	bl	8012e74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_RESET);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68d8      	ldr	r0, [r3, #12]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	8a1b      	ldrh	r3, [r3, #16]
 8001200:	2200      	movs	r2, #0
 8001202:	4619      	mov	r1, r3
 8001204:	f011 fe36 	bl	8012e74 <HAL_GPIO_WritePin>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
			bdc->shiftreg->Byte |= bdc->dir2;

		}
	}
}
 8001208:	e076      	b.n	80012f8 <WriteBDC+0x16e>
		}else if(bdc->Dirpintype == SHIFTREG){
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d172      	bne.n	80012f8 <WriteBDC+0x16e>
			bdc->shiftreg->Byte |= bdc->dir1;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	7819      	ldrb	r1, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7e1a      	ldrb	r2, [r3, #24]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	430a      	orrs	r2, r1
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir2);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	7819      	ldrb	r1, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7e5b      	ldrb	r3, [r3, #25]
 8001230:	43db      	mvns	r3, r3
 8001232:	b2da      	uxtb	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	400a      	ands	r2, r1
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	701a      	strb	r2, [r3, #0]
}
 800123e:	e05b      	b.n	80012f8 <WriteBDC+0x16e>
	}else if (pwm < 0){
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	da58      	bge.n	80012f8 <WriteBDC+0x16e>
		__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), pwm*(-1));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d106      	bne.n	800125c <WriteBDC+0xd2>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	425a      	negs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
 800125a:	e01e      	b.n	800129a <WriteBDC+0x110>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	2b04      	cmp	r3, #4
 8001262:	d107      	bne.n	8001274 <WriteBDC+0xea>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	4259      	negs	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	460b      	mov	r3, r1
 8001270:	6393      	str	r3, [r2, #56]	; 0x38
 8001272:	e012      	b.n	800129a <WriteBDC+0x110>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	2b08      	cmp	r3, #8
 800127a:	d107      	bne.n	800128c <WriteBDC+0x102>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	4259      	negs	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	460b      	mov	r3, r1
 8001288:	63d3      	str	r3, [r2, #60]	; 0x3c
 800128a:	e006      	b.n	800129a <WriteBDC+0x110>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	4259      	negs	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	460b      	mov	r3, r1
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
		if( bdc->Dirpintype == GPIO){
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d110      	bne.n	80012c4 <WriteBDC+0x13a>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_RESET);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6858      	ldr	r0, [r3, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	891b      	ldrh	r3, [r3, #8]
 80012aa:	2200      	movs	r2, #0
 80012ac:	4619      	mov	r1, r3
 80012ae:	f011 fde1 	bl	8012e74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_SET);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68d8      	ldr	r0, [r3, #12]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	8a1b      	ldrh	r3, [r3, #16]
 80012ba:	2201      	movs	r2, #1
 80012bc:	4619      	mov	r1, r3
 80012be:	f011 fdd9 	bl	8012e74 <HAL_GPIO_WritePin>
}
 80012c2:	e019      	b.n	80012f8 <WriteBDC+0x16e>
		}else if(bdc->Dirpintype == SHIFTREG){
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d115      	bne.n	80012f8 <WriteBDC+0x16e>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	7819      	ldrb	r1, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7e1b      	ldrb	r3, [r3, #24]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	400a      	ands	r2, r1
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte |= bdc->dir2;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	7819      	ldrb	r1, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	7e5a      	ldrb	r2, [r3, #25]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	701a      	strb	r2, [r3, #0]
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <GPIOPinsInit>:
 * Function Return		: None
 * Function Example		: GPIOPinsInit(GPIOA, GPIO_Pin_2, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 */

void GPIOPinsInit (GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin,uint32_t Mode, uint32_t GPIO_Speed,  uint32_t GPIO_PuPd)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b092      	sub	sp, #72	; 0x48
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	460b      	mov	r3, r1
 800130e:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]

	switch((uint32_t)GPIOx){
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4a6a      	ldr	r2, [pc, #424]	; (80014cc <GPIOPinsInit+0x1cc>)
 8001324:	4293      	cmp	r3, r2
 8001326:	f000 80af 	beq.w	8001488 <GPIOPinsInit+0x188>
 800132a:	4a68      	ldr	r2, [pc, #416]	; (80014cc <GPIOPinsInit+0x1cc>)
 800132c:	4293      	cmp	r3, r2
 800132e:	f200 80ba 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001332:	4a67      	ldr	r2, [pc, #412]	; (80014d0 <GPIOPinsInit+0x1d0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	f000 8098 	beq.w	800146a <GPIOPinsInit+0x16a>
 800133a:	4a65      	ldr	r2, [pc, #404]	; (80014d0 <GPIOPinsInit+0x1d0>)
 800133c:	4293      	cmp	r3, r2
 800133e:	f200 80b2 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001342:	4a64      	ldr	r2, [pc, #400]	; (80014d4 <GPIOPinsInit+0x1d4>)
 8001344:	4293      	cmp	r3, r2
 8001346:	f000 8081 	beq.w	800144c <GPIOPinsInit+0x14c>
 800134a:	4a62      	ldr	r2, [pc, #392]	; (80014d4 <GPIOPinsInit+0x1d4>)
 800134c:	4293      	cmp	r3, r2
 800134e:	f200 80aa 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001352:	4a61      	ldr	r2, [pc, #388]	; (80014d8 <GPIOPinsInit+0x1d8>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d06a      	beq.n	800142e <GPIOPinsInit+0x12e>
 8001358:	4a5f      	ldr	r2, [pc, #380]	; (80014d8 <GPIOPinsInit+0x1d8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	f200 80a3 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001360:	4a5e      	ldr	r2, [pc, #376]	; (80014dc <GPIOPinsInit+0x1dc>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d054      	beq.n	8001410 <GPIOPinsInit+0x110>
 8001366:	4a5d      	ldr	r2, [pc, #372]	; (80014dc <GPIOPinsInit+0x1dc>)
 8001368:	4293      	cmp	r3, r2
 800136a:	f200 809c 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 800136e:	4a5c      	ldr	r2, [pc, #368]	; (80014e0 <GPIOPinsInit+0x1e0>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d03e      	beq.n	80013f2 <GPIOPinsInit+0xf2>
 8001374:	4a5a      	ldr	r2, [pc, #360]	; (80014e0 <GPIOPinsInit+0x1e0>)
 8001376:	4293      	cmp	r3, r2
 8001378:	f200 8095 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 800137c:	4a59      	ldr	r2, [pc, #356]	; (80014e4 <GPIOPinsInit+0x1e4>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d028      	beq.n	80013d4 <GPIOPinsInit+0xd4>
 8001382:	4a58      	ldr	r2, [pc, #352]	; (80014e4 <GPIOPinsInit+0x1e4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	f200 808e 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 800138a:	4a57      	ldr	r2, [pc, #348]	; (80014e8 <GPIOPinsInit+0x1e8>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d003      	beq.n	8001398 <GPIOPinsInit+0x98>
 8001390:	4a56      	ldr	r2, [pc, #344]	; (80014ec <GPIOPinsInit+0x1ec>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00f      	beq.n	80013b6 <GPIOPinsInit+0xb6>
	break;

	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
	break;

	default: break;
 8001396:	e086      	b.n	80014a6 <GPIOPinsInit+0x1a6>
	case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	633b      	str	r3, [r7, #48]	; 0x30
 800139c:	4b54      	ldr	r3, [pc, #336]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	4a53      	ldr	r2, [pc, #332]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6313      	str	r3, [r2, #48]	; 0x30
 80013a8:	4b51      	ldr	r3, [pc, #324]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	633b      	str	r3, [r7, #48]	; 0x30
 80013b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	break;
 80013b4:	e078      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ba:	4b4d      	ldr	r3, [pc, #308]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a4c      	ldr	r2, [pc, #304]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b4a      	ldr	r3, [pc, #296]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	break;
 80013d2:	e069      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013d4:	2300      	movs	r3, #0
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80013d8:	4b45      	ldr	r3, [pc, #276]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	4a44      	ldr	r2, [pc, #272]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	6313      	str	r3, [r2, #48]	; 0x30
 80013e4:	4b42      	ldr	r3, [pc, #264]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
	break;
 80013f0:	e05a      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
 80013f6:	4b3e      	ldr	r3, [pc, #248]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a3d      	ldr	r2, [pc, #244]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b3b      	ldr	r3, [pc, #236]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	break;
 800140e:	e04b      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
 8001414:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	4a35      	ldr	r2, [pc, #212]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800141a:	f043 0310 	orr.w	r3, r3, #16
 800141e:	6313      	str	r3, [r2, #48]	; 0x30
 8001420:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	f003 0310 	and.w	r3, r3, #16
 8001428:	623b      	str	r3, [r7, #32]
 800142a:	6a3b      	ldr	r3, [r7, #32]
	break;
 800142c:	e03c      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	4b2f      	ldr	r3, [pc, #188]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a2e      	ldr	r2, [pc, #184]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001438:	f043 0320 	orr.w	r3, r3, #32
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0320 	and.w	r3, r3, #32
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	69fb      	ldr	r3, [r7, #28]
	break;
 800144a:	e02d      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 800144c:	2300      	movs	r3, #0
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	4a26      	ldr	r2, [pc, #152]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800145a:	6313      	str	r3, [r2, #48]	; 0x30
 800145c:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001464:	61bb      	str	r3, [r7, #24]
 8001466:	69bb      	ldr	r3, [r7, #24]
	break;
 8001468:	e01e      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a1f      	ldr	r2, [pc, #124]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697b      	ldr	r3, [r7, #20]
	break;
 8001486:	e00f      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001496:	6313      	str	r3, [r2, #48]	; 0x30
 8001498:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]
	break;
 80014a4:	e000      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	default: break;
 80014a6:	bf00      	nop
	}


	GPIO_InitStruct.Pin = GPIO_Pin;
 80014a8:	897b      	ldrh	r3, [r7, #10]
 80014aa:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Mode = Mode;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PuPd;
 80014b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_Speed;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80014b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014bc:	4619      	mov	r1, r3
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f011 fa28 	bl	8012914 <HAL_GPIO_Init>

}
 80014c4:	bf00      	nop
 80014c6:	3748      	adds	r7, #72	; 0x48
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40022000 	.word	0x40022000
 80014d0:	40021c00 	.word	0x40021c00
 80014d4:	40021800 	.word	0x40021800
 80014d8:	40021400 	.word	0x40021400
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40020c00 	.word	0x40020c00
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020400 	.word	0x40020400
 80014f0:	40023800 	.word	0x40023800

080014f4 <PWMTimeBaseInit>:
 * 						  Prescaler 	Prescaler value to divide TIM clock (1 to 65535)
 * Function Return		: None
 * Function Example		: PWMTimeBaseInit(&htim3, 20000, 84);
 */
void PWMTimeBaseInit(TIM_HandleTypeDef* htimx, uint32_t Period, uint32_t Prescaler)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001500:	f107 0318 	add.w	r3, r7, #24
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150e:	f107 0310 	add.w	r3, r7, #16
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]


	if(htimx == &htim1){
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4a52      	ldr	r2, [pc, #328]	; (8001664 <PWMTimeBaseInit+0x170>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d103      	bne.n	8001528 <PWMTimeBaseInit+0x34>
		htimx->Instance = TIM1;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4a51      	ldr	r2, [pc, #324]	; (8001668 <PWMTimeBaseInit+0x174>)
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	e057      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim2)	{
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4a50      	ldr	r2, [pc, #320]	; (800166c <PWMTimeBaseInit+0x178>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d104      	bne.n	800153a <PWMTimeBaseInit+0x46>
		htimx->Instance = TIM2;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	e04e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim3)	{
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4a4c      	ldr	r2, [pc, #304]	; (8001670 <PWMTimeBaseInit+0x17c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d103      	bne.n	800154a <PWMTimeBaseInit+0x56>
		htimx->Instance = TIM3;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4a4b      	ldr	r2, [pc, #300]	; (8001674 <PWMTimeBaseInit+0x180>)
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	e046      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim4)	{
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4a4a      	ldr	r2, [pc, #296]	; (8001678 <PWMTimeBaseInit+0x184>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d103      	bne.n	800155a <PWMTimeBaseInit+0x66>
		htimx->Instance = TIM4;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4a49      	ldr	r2, [pc, #292]	; (800167c <PWMTimeBaseInit+0x188>)
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	e03e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim5)	{
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4a48      	ldr	r2, [pc, #288]	; (8001680 <PWMTimeBaseInit+0x18c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d103      	bne.n	800156a <PWMTimeBaseInit+0x76>
		htimx->Instance = TIM5;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4a47      	ldr	r2, [pc, #284]	; (8001684 <PWMTimeBaseInit+0x190>)
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	e036      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim8)	{
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4a46      	ldr	r2, [pc, #280]	; (8001688 <PWMTimeBaseInit+0x194>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d103      	bne.n	800157a <PWMTimeBaseInit+0x86>
		htimx->Instance = TIM8;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4a45      	ldr	r2, [pc, #276]	; (800168c <PWMTimeBaseInit+0x198>)
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	e02e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim9)	{
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4a44      	ldr	r2, [pc, #272]	; (8001690 <PWMTimeBaseInit+0x19c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d103      	bne.n	800158a <PWMTimeBaseInit+0x96>
		htimx->Instance = TIM9;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4a43      	ldr	r2, [pc, #268]	; (8001694 <PWMTimeBaseInit+0x1a0>)
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	e026      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim10)	{
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4a42      	ldr	r2, [pc, #264]	; (8001698 <PWMTimeBaseInit+0x1a4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d103      	bne.n	800159a <PWMTimeBaseInit+0xa6>
		htimx->Instance = TIM10;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4a41      	ldr	r2, [pc, #260]	; (800169c <PWMTimeBaseInit+0x1a8>)
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	e01e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim11)	{
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4a40      	ldr	r2, [pc, #256]	; (80016a0 <PWMTimeBaseInit+0x1ac>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d103      	bne.n	80015aa <PWMTimeBaseInit+0xb6>
		htimx->Instance = TIM11;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4a3f      	ldr	r2, [pc, #252]	; (80016a4 <PWMTimeBaseInit+0x1b0>)
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	e016      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim12)	{
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4a3e      	ldr	r2, [pc, #248]	; (80016a8 <PWMTimeBaseInit+0x1b4>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d103      	bne.n	80015ba <PWMTimeBaseInit+0xc6>
		htimx->Instance = TIM12;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4a3d      	ldr	r2, [pc, #244]	; (80016ac <PWMTimeBaseInit+0x1b8>)
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	e00e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim13)	{
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4a3c      	ldr	r2, [pc, #240]	; (80016b0 <PWMTimeBaseInit+0x1bc>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d103      	bne.n	80015ca <PWMTimeBaseInit+0xd6>
		htimx->Instance = TIM13;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4a3b      	ldr	r2, [pc, #236]	; (80016b4 <PWMTimeBaseInit+0x1c0>)
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	e006      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
		}
	else if(htimx == &htim14)	{
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4a3a      	ldr	r2, [pc, #232]	; (80016b8 <PWMTimeBaseInit+0x1c4>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d102      	bne.n	80015d8 <PWMTimeBaseInit+0xe4>
		htimx->Instance = TIM14;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4a39      	ldr	r2, [pc, #228]	; (80016bc <PWMTimeBaseInit+0x1c8>)
 80015d6:	601a      	str	r2, [r3, #0]
		}

	htimx->Init.Prescaler = Prescaler - 1;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	1e5a      	subs	r2, r3, #1
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = Period - 1;
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	1e5a      	subs	r2, r3, #1
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2280      	movs	r2, #128	; 0x80
 80015f8:	619a      	str	r2, [r3, #24]
	 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f014 fa64 	bl	8015ac8 <HAL_TIM_Base_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <PWMTimeBaseInit+0x116>
	  {
	    Error_Handler();
 8001606:	f002 ffc3 	bl	8004590 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160e:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 8001610:	f107 0318 	add.w	r3, r7, #24
 8001614:	4619      	mov	r1, r3
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f014 fdca 	bl	80161b0 <HAL_TIM_ConfigClockSource>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <PWMTimeBaseInit+0x132>
	  {
	    Error_Handler();
 8001622:	f002 ffb5 	bl	8004590 <Error_Handler>
	  }
	if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f014 fac1 	bl	8015bae <HAL_TIM_PWM_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <PWMTimeBaseInit+0x142>
		{
			Error_Handler();
 8001632:	f002 ffad 	bl	8004590 <Error_Handler>
		}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	4619      	mov	r1, r3
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f015 f9af 	bl	80169a8 <HAL_TIMEx_MasterConfigSynchronization>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <PWMTimeBaseInit+0x160>
	{
		Error_Handler();
 8001650:	f002 ff9e 	bl	8004590 <Error_Handler>
	}


    HAL_TIM_Base_Start(htimx);
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f014 fa62 	bl	8015b1e <HAL_TIM_Base_Start>

}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	; 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20006418 	.word	0x20006418
 8001668:	40010000 	.word	0x40010000
 800166c:	2000651c 	.word	0x2000651c
 8001670:	200061cc 	.word	0x200061cc
 8001674:	40000400 	.word	0x40000400
 8001678:	20006008 	.word	0x20006008
 800167c:	40000800 	.word	0x40000800
 8001680:	2000618c 	.word	0x2000618c
 8001684:	40000c00 	.word	0x40000c00
 8001688:	20005fc8 	.word	0x20005fc8
 800168c:	40010400 	.word	0x40010400
 8001690:	20006458 	.word	0x20006458
 8001694:	40014000 	.word	0x40014000
 8001698:	200060e8 	.word	0x200060e8
 800169c:	40014400 	.word	0x40014400
 80016a0:	20006330 	.word	0x20006330
 80016a4:	40014800 	.word	0x40014800
 80016a8:	2000663c 	.word	0x2000663c
 80016ac:	40001800 	.word	0x40001800
 80016b0:	200062b0 	.word	0x200062b0
 80016b4:	40001c00 	.word	0x40001c00
 80016b8:	200065fc 	.word	0x200065fc
 80016bc:	40002000 	.word	0x40002000

080016c0 <PWMChannelConfig>:
 * 						  GPIO_Pin_x	GPIO_Pin_x of PWM pin(x = 0,1,2,...or 15)
 * Function Return		: None
 * Function Example		: PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 */

void PWMChannelConfig(TIM_HandleTypeDef* htimx, uint32_t Channel , GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_x){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b09a      	sub	sp, #104	; 0x68
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	807b      	strh	r3, [r7, #2]

	TIM_OC_InitTypeDef sConfigOC = {0};
 80016ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
 80016dc:	611a      	str	r2, [r3, #16]
 80016de:	615a      	str	r2, [r3, #20]
 80016e0:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]

	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80016f2:	2370      	movs	r3, #112	; 0x70
 80016f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.Pulse = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80016fa:	2302      	movs	r3, #2
 80016fc:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80016fe:	2308      	movs	r3, #8
 8001700:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	65fb      	str	r3, [r7, #92]	; 0x5c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	667b      	str	r3, [r7, #100]	; 0x64

	if (HAL_TIM_PWM_ConfigChannel(htimx, &sConfigOC, Channel) != HAL_OK)
 800170e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	4619      	mov	r1, r3
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f014 fc84 	bl	8016024 <HAL_TIM_PWM_ConfigChannel>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <PWMChannelConfig+0x66>
	{
		Error_Handler();
 8001722:	f002 ff35 	bl	8004590 <Error_Handler>
	}

	switch((uint32_t)GPIOx){
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a95      	ldr	r2, [pc, #596]	; (8001980 <PWMChannelConfig+0x2c0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	f000 80af 	beq.w	800188e <PWMChannelConfig+0x1ce>
 8001730:	4a93      	ldr	r2, [pc, #588]	; (8001980 <PWMChannelConfig+0x2c0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	f200 80ba 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001738:	4a92      	ldr	r2, [pc, #584]	; (8001984 <PWMChannelConfig+0x2c4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	f000 8098 	beq.w	8001870 <PWMChannelConfig+0x1b0>
 8001740:	4a90      	ldr	r2, [pc, #576]	; (8001984 <PWMChannelConfig+0x2c4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	f200 80b2 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001748:	4a8f      	ldr	r2, [pc, #572]	; (8001988 <PWMChannelConfig+0x2c8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	f000 8081 	beq.w	8001852 <PWMChannelConfig+0x192>
 8001750:	4a8d      	ldr	r2, [pc, #564]	; (8001988 <PWMChannelConfig+0x2c8>)
 8001752:	4293      	cmp	r3, r2
 8001754:	f200 80aa 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001758:	4a8c      	ldr	r2, [pc, #560]	; (800198c <PWMChannelConfig+0x2cc>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d06a      	beq.n	8001834 <PWMChannelConfig+0x174>
 800175e:	4a8b      	ldr	r2, [pc, #556]	; (800198c <PWMChannelConfig+0x2cc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	f200 80a3 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001766:	4a8a      	ldr	r2, [pc, #552]	; (8001990 <PWMChannelConfig+0x2d0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d054      	beq.n	8001816 <PWMChannelConfig+0x156>
 800176c:	4a88      	ldr	r2, [pc, #544]	; (8001990 <PWMChannelConfig+0x2d0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	f200 809c 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001774:	4a87      	ldr	r2, [pc, #540]	; (8001994 <PWMChannelConfig+0x2d4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d03e      	beq.n	80017f8 <PWMChannelConfig+0x138>
 800177a:	4a86      	ldr	r2, [pc, #536]	; (8001994 <PWMChannelConfig+0x2d4>)
 800177c:	4293      	cmp	r3, r2
 800177e:	f200 8095 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001782:	4a85      	ldr	r2, [pc, #532]	; (8001998 <PWMChannelConfig+0x2d8>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d028      	beq.n	80017da <PWMChannelConfig+0x11a>
 8001788:	4a83      	ldr	r2, [pc, #524]	; (8001998 <PWMChannelConfig+0x2d8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	f200 808e 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001790:	4a82      	ldr	r2, [pc, #520]	; (800199c <PWMChannelConfig+0x2dc>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d003      	beq.n	800179e <PWMChannelConfig+0xde>
 8001796:	4a82      	ldr	r2, [pc, #520]	; (80019a0 <PWMChannelConfig+0x2e0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d00f      	beq.n	80017bc <PWMChannelConfig+0xfc>
		break;

		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
		break;

		default: break;
 800179c:	e086      	b.n	80018ac <PWMChannelConfig+0x1ec>
		case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
 80017a2:	4b80      	ldr	r3, [pc, #512]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a7f      	ldr	r2, [pc, #508]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b7d      	ldr	r3, [pc, #500]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	637b      	str	r3, [r7, #52]	; 0x34
 80017b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		break;
 80017ba:	e078      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	633b      	str	r3, [r7, #48]	; 0x30
 80017c0:	4b78      	ldr	r3, [pc, #480]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	4a77      	ldr	r2, [pc, #476]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017c6:	f043 0302 	orr.w	r3, r3, #2
 80017ca:	6313      	str	r3, [r2, #48]	; 0x30
 80017cc:	4b75      	ldr	r3, [pc, #468]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
 80017d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		break;
 80017d8:	e069      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017de:	4b71      	ldr	r3, [pc, #452]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a70      	ldr	r2, [pc, #448]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b6e      	ldr	r3, [pc, #440]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		break;
 80017f6:	e05a      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80017f8:	2300      	movs	r3, #0
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80017fc:	4b69      	ldr	r3, [pc, #420]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001800:	4a68      	ldr	r2, [pc, #416]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001802:	f043 0308 	orr.w	r3, r3, #8
 8001806:	6313      	str	r3, [r2, #48]	; 0x30
 8001808:	4b66      	ldr	r3, [pc, #408]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
 8001812:	6abb      	ldr	r3, [r7, #40]	; 0x28
		break;
 8001814:	e04b      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
 800181a:	4b62      	ldr	r3, [pc, #392]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a61      	ldr	r2, [pc, #388]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001820:	f043 0310 	orr.w	r3, r3, #16
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b5f      	ldr	r3, [pc, #380]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		break;
 8001832:	e03c      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001834:	2300      	movs	r3, #0
 8001836:	623b      	str	r3, [r7, #32]
 8001838:	4b5a      	ldr	r3, [pc, #360]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183c:	4a59      	ldr	r2, [pc, #356]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800183e:	f043 0320 	orr.w	r3, r3, #32
 8001842:	6313      	str	r3, [r2, #48]	; 0x30
 8001844:	4b57      	ldr	r3, [pc, #348]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	f003 0320 	and.w	r3, r3, #32
 800184c:	623b      	str	r3, [r7, #32]
 800184e:	6a3b      	ldr	r3, [r7, #32]
		break;
 8001850:	e02d      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
 8001856:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a52      	ldr	r2, [pc, #328]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800185c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b50      	ldr	r3, [pc, #320]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	69fb      	ldr	r3, [r7, #28]
		break;
 800186e:	e01e      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	4b4b      	ldr	r3, [pc, #300]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	4a4a      	ldr	r2, [pc, #296]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800187a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800187e:	6313      	str	r3, [r2, #48]	; 0x30
 8001880:	4b48      	ldr	r3, [pc, #288]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	69bb      	ldr	r3, [r7, #24]
		break;
 800188c:	e00f      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	4b44      	ldr	r3, [pc, #272]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a43      	ldr	r2, [pc, #268]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	697b      	ldr	r3, [r7, #20]
		break;
 80018aa:	e000      	b.n	80018ae <PWMChannelConfig+0x1ee>
		default: break;
 80018ac:	bf00      	nop
		}

	    GPIO_InitStruct.Pin = GPIO_Pin_x;
 80018ae:	887b      	ldrh	r3, [r7, #2]
 80018b0:	63bb      	str	r3, [r7, #56]	; 0x38
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	643b      	str	r3, [r7, #64]	; 0x40
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ba:	2303      	movs	r3, #3
 80018bc:	647b      	str	r3, [r7, #68]	; 0x44
		if(htimx == &htim1){
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4a39      	ldr	r2, [pc, #228]	; (80019a8 <PWMChannelConfig+0x2e8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d102      	bne.n	80018cc <PWMChannelConfig+0x20c>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018c6:	2301      	movs	r3, #1
 80018c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80018ca:	e04b      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim2)	{
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4a37      	ldr	r2, [pc, #220]	; (80019ac <PWMChannelConfig+0x2ec>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d102      	bne.n	80018da <PWMChannelConfig+0x21a>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM2 ;
 80018d4:	2301      	movs	r3, #1
 80018d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80018d8:	e044      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim3)	{
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4a34      	ldr	r2, [pc, #208]	; (80019b0 <PWMChannelConfig+0x2f0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d102      	bne.n	80018e8 <PWMChannelConfig+0x228>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018e2:	2302      	movs	r3, #2
 80018e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80018e6:	e03d      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim4)	{
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4a32      	ldr	r2, [pc, #200]	; (80019b4 <PWMChannelConfig+0x2f4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d102      	bne.n	80018f6 <PWMChannelConfig+0x236>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018f0:	2302      	movs	r3, #2
 80018f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80018f4:	e036      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim5)	{
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4a2f      	ldr	r2, [pc, #188]	; (80019b8 <PWMChannelConfig+0x2f8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d102      	bne.n	8001904 <PWMChannelConfig+0x244>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80018fe:	2302      	movs	r3, #2
 8001900:	64bb      	str	r3, [r7, #72]	; 0x48
 8001902:	e02f      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim8)	{
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4a2d      	ldr	r2, [pc, #180]	; (80019bc <PWMChannelConfig+0x2fc>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d102      	bne.n	8001912 <PWMChannelConfig+0x252>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800190c:	2303      	movs	r3, #3
 800190e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001910:	e028      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim9)	{
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4a2a      	ldr	r2, [pc, #168]	; (80019c0 <PWMChannelConfig+0x300>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d102      	bne.n	8001920 <PWMChannelConfig+0x260>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800191a:	2303      	movs	r3, #3
 800191c:	64bb      	str	r3, [r7, #72]	; 0x48
 800191e:	e021      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim10)	{
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4a28      	ldr	r2, [pc, #160]	; (80019c4 <PWMChannelConfig+0x304>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d102      	bne.n	800192e <PWMChannelConfig+0x26e>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001928:	2303      	movs	r3, #3
 800192a:	64bb      	str	r3, [r7, #72]	; 0x48
 800192c:	e01a      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim11)	{
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4a25      	ldr	r2, [pc, #148]	; (80019c8 <PWMChannelConfig+0x308>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d102      	bne.n	800193c <PWMChannelConfig+0x27c>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001936:	2303      	movs	r3, #3
 8001938:	64bb      	str	r3, [r7, #72]	; 0x48
 800193a:	e013      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim12)	{
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4a23      	ldr	r2, [pc, #140]	; (80019cc <PWMChannelConfig+0x30c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d102      	bne.n	800194a <PWMChannelConfig+0x28a>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001944:	2309      	movs	r3, #9
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48
 8001948:	e00c      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim13)	{
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4a20      	ldr	r2, [pc, #128]	; (80019d0 <PWMChannelConfig+0x310>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d102      	bne.n	8001958 <PWMChannelConfig+0x298>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001952:	2309      	movs	r3, #9
 8001954:	64bb      	str	r3, [r7, #72]	; 0x48
 8001956:	e005      	b.n	8001964 <PWMChannelConfig+0x2a4>
			}
		else if(htimx == &htim14)	{
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4a1e      	ldr	r2, [pc, #120]	; (80019d4 <PWMChannelConfig+0x314>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d101      	bne.n	8001964 <PWMChannelConfig+0x2a4>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001960:	2309      	movs	r3, #9
 8001962:	64bb      	str	r3, [r7, #72]	; 0x48
			}

	    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001964:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001968:	4619      	mov	r1, r3
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f010 ffd2 	bl	8012914 <HAL_GPIO_Init>


	    HAL_TIM_PWM_Start(htimx,Channel);
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f014 f946 	bl	8015c04 <HAL_TIM_PWM_Start>

}
 8001978:	bf00      	nop
 800197a:	3768      	adds	r7, #104	; 0x68
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40022000 	.word	0x40022000
 8001984:	40021c00 	.word	0x40021c00
 8001988:	40021800 	.word	0x40021800
 800198c:	40021400 	.word	0x40021400
 8001990:	40021000 	.word	0x40021000
 8001994:	40020c00 	.word	0x40020c00
 8001998:	40020800 	.word	0x40020800
 800199c:	40020000 	.word	0x40020000
 80019a0:	40020400 	.word	0x40020400
 80019a4:	40023800 	.word	0x40023800
 80019a8:	20006418 	.word	0x20006418
 80019ac:	2000651c 	.word	0x2000651c
 80019b0:	200061cc 	.word	0x200061cc
 80019b4:	20006008 	.word	0x20006008
 80019b8:	2000618c 	.word	0x2000618c
 80019bc:	20005fc8 	.word	0x20005fc8
 80019c0:	20006458 	.word	0x20006458
 80019c4:	200060e8 	.word	0x200060e8
 80019c8:	20006330 	.word	0x20006330
 80019cc:	2000663c 	.word	0x2000663c
 80019d0:	200062b0 	.word	0x200062b0
 80019d4:	200065fc 	.word	0x200065fc

080019d8 <QEIInit>:
 * Function Arguments	: htimx					Pointer to timer handle
 * Function Return		: None
 * Function Example		: QEIInit(&htim1,5,5);  	//Initialize QEI1
 */
void QEIInit(TIM_HandleTypeDef* htimx)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08e      	sub	sp, #56	; 0x38
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	TIM_Encoder_InitTypeDef sConfig = {0};
 80019e0:	f107 0310 	add.w	r3, r7, #16
 80019e4:	2224      	movs	r2, #36	; 0x24
 80019e6:	2100      	movs	r1, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f018 fe9f 	bl	801a72c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]

	IRQn_Type nvic;

	if(htimx == &htim1){
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a6b      	ldr	r2, [pc, #428]	; (8001ba8 <QEIInit+0x1d0>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d106      	bne.n	8001a0e <QEIInit+0x36>
		htimx->Instance = TIM1;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a6a      	ldr	r2, [pc, #424]	; (8001bac <QEIInit+0x1d4>)
 8001a04:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8001a06:	2319      	movs	r3, #25
 8001a08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a0c:	e036      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim2)	{
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a67      	ldr	r2, [pc, #412]	; (8001bb0 <QEIInit+0x1d8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d107      	bne.n	8001a26 <QEIInit+0x4e>
		htimx->Instance = TIM2;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a1c:	601a      	str	r2, [r3, #0]
		nvic=TIM2_IRQn;
 8001a1e:	231c      	movs	r3, #28
 8001a20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a24:	e02a      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim3)	{
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a62      	ldr	r2, [pc, #392]	; (8001bb4 <QEIInit+0x1dc>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d106      	bne.n	8001a3c <QEIInit+0x64>
		htimx->Instance = TIM3;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a61      	ldr	r2, [pc, #388]	; (8001bb8 <QEIInit+0x1e0>)
 8001a32:	601a      	str	r2, [r3, #0]
		nvic=TIM3_IRQn;
 8001a34:	231d      	movs	r3, #29
 8001a36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a3a:	e01f      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim4)	{
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a5f      	ldr	r2, [pc, #380]	; (8001bbc <QEIInit+0x1e4>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d106      	bne.n	8001a52 <QEIInit+0x7a>
		htimx->Instance = TIM4;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a5e      	ldr	r2, [pc, #376]	; (8001bc0 <QEIInit+0x1e8>)
 8001a48:	601a      	str	r2, [r3, #0]
		nvic=TIM4_IRQn;
 8001a4a:	231e      	movs	r3, #30
 8001a4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a50:	e014      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim5)	{
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a5b      	ldr	r2, [pc, #364]	; (8001bc4 <QEIInit+0x1ec>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d106      	bne.n	8001a68 <QEIInit+0x90>
		htimx->Instance = TIM5;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a5a      	ldr	r2, [pc, #360]	; (8001bc8 <QEIInit+0x1f0>)
 8001a5e:	601a      	str	r2, [r3, #0]
		nvic=TIM5_IRQn;
 8001a60:	2332      	movs	r3, #50	; 0x32
 8001a62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a66:	e009      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim8)	{
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a58      	ldr	r2, [pc, #352]	; (8001bcc <QEIInit+0x1f4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d105      	bne.n	8001a7c <QEIInit+0xa4>
		htimx->Instance = TIM8;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a57      	ldr	r2, [pc, #348]	; (8001bd0 <QEIInit+0x1f8>)
 8001a74:	601a      	str	r2, [r3, #0]
		nvic=TIM8_UP_TIM13_IRQn;
 8001a76:	232c      	movs	r3, #44	; 0x2c
 8001a78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	htimx->Init.Prescaler = 0;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = 0xFFFF;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a8e:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
	htimx->Init.RepetitionCounter = 0;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	615a      	str	r2, [r3, #20]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	613b      	str	r3, [r7, #16]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
	sConfig.IC1Filter = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001aba:	2301      	movs	r3, #1
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.IC2Filter = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_Encoder_Init(htimx, &sConfig) != HAL_OK)
 8001ac6:	f107 0310 	add.w	r3, r7, #16
 8001aca:	4619      	mov	r1, r3
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f014 f8d7 	bl	8015c80 <HAL_TIM_Encoder_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <QEIInit+0x104>
	{
		Error_Handler();
 8001ad8:	f002 fd5a 	bl	8004590 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8001ae4:	f107 0308 	add.w	r3, r7, #8
 8001ae8:	4619      	mov	r1, r3
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f014 ff5c 	bl	80169a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <QEIInit+0x122>
	{
		Error_Handler();
 8001af6:	f002 fd4b 	bl	8004590 <Error_Handler>
	}

	__HAL_TIM_CLEAR_IT(htimx, TIM_IT_UPDATE);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f06f 0201 	mvn.w	r2, #1
 8001b02:	611a      	str	r2, [r3, #16]
	__HAL_TIM_ENABLE_IT(htimx, TIM_IT_UPDATE);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	60da      	str	r2, [r3, #12]

	if(htimx == &htim1){
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a24      	ldr	r2, [pc, #144]	; (8001ba8 <QEIInit+0x1d0>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d111      	bne.n	8001b40 <QEIInit+0x168>
		HAL_NVIC_SetPriority(nvic, QEI1_IRQ_PRIO, 0);
 8001b1c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b20:	2200      	movs	r2, #0
 8001b22:	210e      	movs	r1, #14
 8001b24:	4618      	mov	r0, r3
 8001b26:	f010 faa5 	bl	8012074 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001b2a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f010 fad8 	bl	80120e4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001b34:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f010 fab7 	bl	80120ac <HAL_NVIC_EnableIRQ>
 8001b3e:	e02a      	b.n	8001b96 <QEIInit+0x1be>
	}else if(htimx == &htim4){
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a1e      	ldr	r2, [pc, #120]	; (8001bbc <QEIInit+0x1e4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d111      	bne.n	8001b6c <QEIInit+0x194>
		HAL_NVIC_SetPriority(nvic, QEI4_IRQ_PRIO, 0);
 8001b48:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	210e      	movs	r1, #14
 8001b50:	4618      	mov	r0, r3
 8001b52:	f010 fa8f 	bl	8012074 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001b56:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f010 fac2 	bl	80120e4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001b60:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b64:	4618      	mov	r0, r3
 8001b66:	f010 faa1 	bl	80120ac <HAL_NVIC_EnableIRQ>
 8001b6a:	e014      	b.n	8001b96 <QEIInit+0x1be>
	}else if(htimx == &htim8){
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a17      	ldr	r2, [pc, #92]	; (8001bcc <QEIInit+0x1f4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d110      	bne.n	8001b96 <QEIInit+0x1be>
		HAL_NVIC_SetPriority(nvic, QEI6_IRQ_PRIO, 0);
 8001b74:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b78:	2200      	movs	r2, #0
 8001b7a:	210e      	movs	r1, #14
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f010 fa79 	bl	8012074 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001b82:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b86:	4618      	mov	r0, r3
 8001b88:	f010 faac 	bl	80120e4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001b8c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b90:	4618      	mov	r0, r3
 8001b92:	f010 fa8b 	bl	80120ac <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8001b96:	213c      	movs	r1, #60	; 0x3c
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f014 f903 	bl	8015da4 <HAL_TIM_Encoder_Start>
}
 8001b9e:	bf00      	nop
 8001ba0:	3738      	adds	r7, #56	; 0x38
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20006418 	.word	0x20006418
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	2000651c 	.word	0x2000651c
 8001bb4:	200061cc 	.word	0x200061cc
 8001bb8:	40000400 	.word	0x40000400
 8001bbc:	20006008 	.word	0x20006008
 8001bc0:	40000800 	.word	0x40000800
 8001bc4:	2000618c 	.word	0x2000618c
 8001bc8:	40000c00 	.word	0x40000c00
 8001bcc:	20005fc8 	.word	0x20005fc8
 8001bd0:	40010400 	.word	0x40010400

08001bd4 <QEIReset>:
 * Function Return		: None
 * Function Example		: QEIReset(QEI1);
 */

void QEIReset(QEI_TypeDef QEIx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]

	switch (QEIx){
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	2b05      	cmp	r3, #5
 8001be4:	d839      	bhi.n	8001c5a <QEIReset+0x86>
 8001be6:	a201      	add	r2, pc, #4	; (adr r2, 8001bec <QEIReset+0x18>)
 8001be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bec:	08001c05 	.word	0x08001c05
 8001bf0:	08001c13 	.word	0x08001c13
 8001bf4:	08001c23 	.word	0x08001c23
 8001bf8:	08001c31 	.word	0x08001c31
 8001bfc:	08001c3f 	.word	0x08001c3f
 8001c00:	08001c4d 	.word	0x08001c4d

	case QEI1:	TIM1->CNT = 0;
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <QEIReset+0x94>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI1.count = 0;
 8001c0a:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <QEIReset+0x98>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
	break;
 8001c10:	e023      	b.n	8001c5a <QEIReset+0x86>

	case QEI2:	TIM2->CNT = 0;
 8001c12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c16:	2200      	movs	r2, #0
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI2.count = 0;
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <QEIReset+0x9c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
	break;
 8001c20:	e01b      	b.n	8001c5a <QEIReset+0x86>

	case QEI3:	TIM3->CNT = 0;
 8001c22:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <QEIReset+0xa0>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI3.count = 0;
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <QEIReset+0xa4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
	break;
 8001c2e:	e014      	b.n	8001c5a <QEIReset+0x86>

	case QEI4:	TIM4->CNT = 0;
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <QEIReset+0xa8>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI4.count = 0;
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <QEIReset+0xac>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
	break;
 8001c3c:	e00d      	b.n	8001c5a <QEIReset+0x86>

	case QEI5:	TIM5->CNT = 0;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <QEIReset+0xb0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI5.count = 0;
 8001c44:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <QEIReset+0xb4>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
	break;
 8001c4a:	e006      	b.n	8001c5a <QEIReset+0x86>

	case QEI6:	TIM8->CNT = 0;
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <QEIReset+0xb8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI6.count = 0;
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <QEIReset+0xbc>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
	break;
 8001c58:	bf00      	nop

	}
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40010000 	.word	0x40010000
 8001c6c:	20006978 	.word	0x20006978
 8001c70:	2000697c 	.word	0x2000697c
 8001c74:	40000400 	.word	0x40000400
 8001c78:	20006974 	.word	0x20006974
 8001c7c:	40000800 	.word	0x40000800
 8001c80:	2000699c 	.word	0x2000699c
 8001c84:	40000c00 	.word	0x40000c00
 8001c88:	20006998 	.word	0x20006998
 8001c8c:	40010400 	.word	0x40010400
 8001c90:	200069a0 	.word	0x200069a0

08001c94 <QEIDelay>:
 * Function Return		: None
 * Function Example		: QEIDelay(100);
 */

void QEIDelay(uint8_t value)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
	uint8_t currentvalues;
	value = value * 8400;
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	71fb      	strb	r3, [r7, #7]
	while(currentvalues < value)
 8001caa:	e002      	b.n	8001cb2 <QEIDelay+0x1e>
	{
		currentvalues++;
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	73fb      	strb	r3, [r7, #15]
	while(currentvalues < value)
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d3f8      	bcc.n	8001cac <QEIDelay+0x18>
	}
	currentvalues = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	73fb      	strb	r3, [r7, #15]
}
 8001cbe:	bf00      	nop
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <QEIRead>:
 * Function Arguments	: QEIx		where x can be 1 to 5.
 * Function Return		: QEI's count with 32 bits with sign.
 * Function Example		: QEIRead(QEI1);
 */

int32_t QEIRead(QEI_TypeDef QEIx){
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]

	int32_t value;
	switch(QEIx){
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	2b05      	cmp	r3, #5
 8001cdc:	d845      	bhi.n	8001d6a <QEIRead+0x9e>
 8001cde:	a201      	add	r2, pc, #4	; (adr r2, 8001ce4 <QEIRead+0x18>)
 8001ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce4:	08001cfd 	.word	0x08001cfd
 8001ce8:	08001d0f 	.word	0x08001d0f
 8001cec:	08001d23 	.word	0x08001d23
 8001cf0:	08001d35 	.word	0x08001d35
 8001cf4:	08001d47 	.word	0x08001d47
 8001cf8:	08001d59 	.word	0x08001d59

	case QEI1:	BIOS_QEI1.poscnt = TIM1-> CNT;
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <QEIRead+0xb0>)
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <QEIRead+0xb4>)
 8001d04:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI1.count;
 8001d06:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <QEIRead+0xb4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	60fb      	str	r3, [r7, #12]
	break;
 8001d0c:	e02e      	b.n	8001d6c <QEIRead+0xa0>

	case QEI2:	BIOS_QEI2.poscnt = TIM2-> CNT;
 8001d0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <QEIRead+0xb8>)
 8001d18:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI2.count;
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <QEIRead+0xb8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	60fb      	str	r3, [r7, #12]
	break;
 8001d20:	e024      	b.n	8001d6c <QEIRead+0xa0>

	case QEI3:	BIOS_QEI3.poscnt = TIM3-> CNT;
 8001d22:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <QEIRead+0xbc>)
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <QEIRead+0xc0>)
 8001d2a:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI3.count;
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <QEIRead+0xc0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
	break;
 8001d32:	e01b      	b.n	8001d6c <QEIRead+0xa0>

	case QEI4:	BIOS_QEI4.poscnt = TIM4-> CNT;
 8001d34:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <QEIRead+0xc4>)
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <QEIRead+0xc8>)
 8001d3c:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI4.count;
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <QEIRead+0xc8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	60fb      	str	r3, [r7, #12]
	break;
 8001d44:	e012      	b.n	8001d6c <QEIRead+0xa0>

	case QEI5:	BIOS_QEI5.poscnt = TIM5-> CNT;
 8001d46:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <QEIRead+0xcc>)
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <QEIRead+0xd0>)
 8001d4e:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI5.count;
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <QEIRead+0xd0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]
	break;
 8001d56:	e009      	b.n	8001d6c <QEIRead+0xa0>

	case QEI6:	BIOS_QEI6.poscnt = TIM8-> CNT;
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <QEIRead+0xd4>)
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <QEIRead+0xd8>)
 8001d60:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI6.count;
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <QEIRead+0xd8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	60fb      	str	r3, [r7, #12]
	break;
 8001d68:	e000      	b.n	8001d6c <QEIRead+0xa0>

	default: break;
 8001d6a:	bf00      	nop
	}

	return value;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40010000 	.word	0x40010000
 8001d80:	20006978 	.word	0x20006978
 8001d84:	2000697c 	.word	0x2000697c
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	20006974 	.word	0x20006974
 8001d90:	40000800 	.word	0x40000800
 8001d94:	2000699c 	.word	0x2000699c
 8001d98:	40000c00 	.word	0x40000c00
 8001d9c:	20006998 	.word	0x20006998
 8001da0:	40010400 	.word	0x40010400
 8001da4:	200069a0 	.word	0x200069a0

08001da8 <SHIFTREGInit>:
 * Function Return		: None
 * Function Example		: SHIFTREGInit(&shiftreg, CASCADE_1, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1, GPIOD, GPIO_Pin_2);
 */

void SHIFTREGInit (shiftreg_t* shiftreg, fSR cascade, GPIO_TypeDef *GPIOx_sck, uint16_t GPIO_Pin_sck,
		           GPIO_TypeDef *GPIOx_rck , uint16_t GPIO_Pin_rck,GPIO_TypeDef *GPIOx_si, uint16_t GPIO_Pin_si){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	461a      	mov	r2, r3
 8001db4:	460b      	mov	r3, r1
 8001db6:	72fb      	strb	r3, [r7, #11]
 8001db8:	4613      	mov	r3, r2
 8001dba:	813b      	strh	r3, [r7, #8]

	shiftreg->flag = cascade;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	7afa      	ldrb	r2, [r7, #11]
 8001dc0:	759a      	strb	r2, [r3, #22]

	shiftreg->GPIOx_sck = GPIOx_sck;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	601a      	str	r2, [r3, #0]
	shiftreg->GPIO_Pin_sck = GPIO_Pin_sck;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	893a      	ldrh	r2, [r7, #8]
 8001dcc:	809a      	strh	r2, [r3, #4]

	shiftreg->GPIOx_rck = GPIOx_rck;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	609a      	str	r2, [r3, #8]
	shiftreg->GPIO_Pin_rck = GPIO_Pin_rck;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8bba      	ldrh	r2, [r7, #28]
 8001dd8:	819a      	strh	r2, [r3, #12]

	shiftreg->GPIOx_si = GPIOx_si;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a3a      	ldr	r2, [r7, #32]
 8001dde:	611a      	str	r2, [r3, #16]
	shiftreg->GPIO_Pin_si = GPIO_Pin_si;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001de4:	829a      	strh	r2, [r3, #20]

	GPIOPinsInit(shiftreg->GPIOx_sck, shiftreg->GPIO_Pin_sck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8899      	ldrh	r1, [r3, #4]
 8001dee:	2301      	movs	r3, #1
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	2302      	movs	r3, #2
 8001df4:	2201      	movs	r2, #1
 8001df6:	f7ff fa83 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_rck, shiftreg->GPIO_Pin_rck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6898      	ldr	r0, [r3, #8]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8999      	ldrh	r1, [r3, #12]
 8001e02:	2301      	movs	r3, #1
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	2302      	movs	r3, #2
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f7ff fa79 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_si, shiftreg->GPIO_Pin_si , GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6918      	ldr	r0, [r3, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8a99      	ldrh	r1, [r3, #20]
 8001e16:	2301      	movs	r3, #1
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f7ff fa6f 	bl	8001300 <GPIOPinsInit>

}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <SHIFTREGShift>:
 * Function Arguments	: shiftreg			pointer to structure
 * Function Return		: None
 * Function Example		: SHIFTREGShift (&shiftreg);
 */

void SHIFTREGShift(shiftreg_t* shiftreg){
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b084      	sub	sp, #16
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]

	uint8_t out, i, j;

	i = shiftreg->flag;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	7d9b      	ldrb	r3, [r3, #22]
 8001e36:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	889b      	ldrh	r3, [r3, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	4619      	mov	r1, r3
 8001e44:	f011 f816 	bl	8012e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6898      	ldr	r0, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	899b      	ldrh	r3, [r3, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	4619      	mov	r1, r3
 8001e54:	f011 f80e 	bl	8012e74 <HAL_GPIO_WritePin>

	do{
		out = shiftreg->cast[i].Byte;
 8001e58:	7bba      	ldrb	r2, [r7, #14]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3206      	adds	r2, #6
 8001e5e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8001e62:	73fb      	strb	r3, [r7, #15]
		for (j = 8; j; j--){
 8001e64:	2308      	movs	r3, #8
 8001e66:	737b      	strb	r3, [r7, #13]
 8001e68:	e02a      	b.n	8001ec0 <SHIFTREGShift+0x96>
			(out & 0x80) ? HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_SET) : HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_RESET);
 8001e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	da08      	bge.n	8001e84 <SHIFTREGShift+0x5a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6918      	ldr	r0, [r3, #16]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	8a9b      	ldrh	r3, [r3, #20]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f010 fff9 	bl	8012e74 <HAL_GPIO_WritePin>
 8001e82:	e007      	b.n	8001e94 <SHIFTREGShift+0x6a>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6918      	ldr	r0, [r3, #16]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	8a9b      	ldrh	r3, [r3, #20]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f010 fff0 	bl	8012e74 <HAL_GPIO_WritePin>
			out <<= 1;
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_SET);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	889b      	ldrh	r3, [r3, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f010 ffe5 	bl	8012e74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	889b      	ldrh	r3, [r3, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f010 ffdd 	bl	8012e74 <HAL_GPIO_WritePin>
		for (j = 8; j; j--){
 8001eba:	7b7b      	ldrb	r3, [r7, #13]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	737b      	strb	r3, [r7, #13]
 8001ec0:	7b7b      	ldrb	r3, [r7, #13]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1d1      	bne.n	8001e6a <SHIFTREGShift+0x40>
		}
	}while(i--);
 8001ec6:	7bbb      	ldrb	r3, [r7, #14]
 8001ec8:	1e5a      	subs	r2, r3, #1
 8001eca:	73ba      	strb	r2, [r7, #14]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1c3      	bne.n	8001e58 <SHIFTREGShift+0x2e>

	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_SET);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6898      	ldr	r0, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	899b      	ldrh	r3, [r3, #12]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	4619      	mov	r1, r3
 8001edc:	f010 ffca 	bl	8012e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6898      	ldr	r0, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	899b      	ldrh	r3, [r3, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	4619      	mov	r1, r3
 8001eec:	f010 ffc2 	bl	8012e74 <HAL_GPIO_WritePin>

}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_MspInit+0x54>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4a11      	ldr	r2, [pc, #68]	; (8001f4c <HAL_MspInit+0x54>)
 8001f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <HAL_MspInit+0x54>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_MspInit+0x54>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <HAL_MspInit+0x54>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f28:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <HAL_MspInit+0x54>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	210f      	movs	r1, #15
 8001f3a:	f06f 0001 	mvn.w	r0, #1
 8001f3e:	f010 f899 	bl	8012074 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800

08001f50 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08c      	sub	sp, #48	; 0x30
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a42      	ldr	r2, [pc, #264]	; (8002078 <HAL_CAN_MspInit+0x128>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d135      	bne.n	8001fde <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001f72:	4b42      	ldr	r3, [pc, #264]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	3301      	adds	r3, #1
 8001f78:	4a40      	ldr	r2, [pc, #256]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8001f7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001f7c:	4b3f      	ldr	r3, [pc, #252]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d10d      	bne.n	8001fa0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001f84:	2300      	movs	r3, #0
 8001f86:	61bb      	str	r3, [r7, #24]
 8001f88:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	4a3c      	ldr	r2, [pc, #240]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001f8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f92:	6413      	str	r3, [r2, #64]	; 0x40
 8001f94:	4b3a      	ldr	r3, [pc, #232]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	61bb      	str	r3, [r7, #24]
 8001f9e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	4b36      	ldr	r3, [pc, #216]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	4a35      	ldr	r2, [pc, #212]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001faa:	f043 0308 	orr.w	r3, r3, #8
 8001fae:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb0:	4b33      	ldr	r3, [pc, #204]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	697b      	ldr	r3, [r7, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001fcc:	2309      	movs	r3, #9
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	482b      	ldr	r0, [pc, #172]	; (8002084 <HAL_CAN_MspInit+0x134>)
 8001fd8:	f010 fc9c 	bl	8012914 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001fdc:	e048      	b.n	8002070 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a29      	ldr	r2, [pc, #164]	; (8002088 <HAL_CAN_MspInit+0x138>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d143      	bne.n	8002070 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001fe8:	2300      	movs	r3, #0
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	4b24      	ldr	r3, [pc, #144]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	4a23      	ldr	r2, [pc, #140]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001ff2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff8:	4b21      	ldr	r3, [pc, #132]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002004:	4b1d      	ldr	r3, [pc, #116]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	4a1c      	ldr	r2, [pc, #112]	; (800207c <HAL_CAN_MspInit+0x12c>)
 800200c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d10d      	bne.n	8002032 <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_CAN_MspInit+0x130>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	4a18      	ldr	r2, [pc, #96]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002020:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a11      	ldr	r2, [pc, #68]	; (8002080 <HAL_CAN_MspInit+0x130>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800204e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002060:	2309      	movs	r3, #9
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	4619      	mov	r1, r3
 800206a:	4808      	ldr	r0, [pc, #32]	; (800208c <HAL_CAN_MspInit+0x13c>)
 800206c:	f010 fc52 	bl	8012914 <HAL_GPIO_Init>
}
 8002070:	bf00      	nop
 8002072:	3730      	adds	r7, #48	; 0x30
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40006400 	.word	0x40006400
 800207c:	20000284 	.word	0x20000284
 8002080:	40023800 	.word	0x40023800
 8002084:	40020c00 	.word	0x40020c00
 8002088:	40006800 	.word	0x40006800
 800208c:	40020400 	.word	0x40020400

08002090 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08e      	sub	sp, #56	; 0x38
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a5c      	ldr	r2, [pc, #368]	; (8002220 <HAL_I2C_MspInit+0x190>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d12d      	bne.n	800210e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
 80020b6:	4b5b      	ldr	r3, [pc, #364]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a5a      	ldr	r2, [pc, #360]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b58      	ldr	r3, [pc, #352]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	623b      	str	r3, [r7, #32]
 80020cc:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d4:	2312      	movs	r3, #18
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020d8:	2301      	movs	r3, #1
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020dc:	2303      	movs	r3, #3
 80020de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020e0:	2304      	movs	r3, #4
 80020e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e8:	4619      	mov	r1, r3
 80020ea:	484f      	ldr	r0, [pc, #316]	; (8002228 <HAL_I2C_MspInit+0x198>)
 80020ec:	f010 fc12 	bl	8012914 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020f0:	2300      	movs	r3, #0
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	4b4b      	ldr	r3, [pc, #300]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	4a4a      	ldr	r2, [pc, #296]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002100:	4b48      	ldr	r3, [pc, #288]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800210c:	e083      	b.n	8002216 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a46      	ldr	r2, [pc, #280]	; (800222c <HAL_I2C_MspInit+0x19c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d12d      	bne.n	8002174 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002118:	2300      	movs	r3, #0
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	4b41      	ldr	r3, [pc, #260]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	4a40      	ldr	r2, [pc, #256]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002122:	f043 0302 	orr.w	r3, r3, #2
 8002126:	6313      	str	r3, [r2, #48]	; 0x30
 8002128:	4b3e      	ldr	r3, [pc, #248]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	61bb      	str	r3, [r7, #24]
 8002132:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002134:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800213a:	2312      	movs	r3, #18
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800213e:	2301      	movs	r3, #1
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002146:	2304      	movs	r3, #4
 8002148:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214e:	4619      	mov	r1, r3
 8002150:	4835      	ldr	r0, [pc, #212]	; (8002228 <HAL_I2C_MspInit+0x198>)
 8002152:	f010 fbdf 	bl	8012914 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	4b32      	ldr	r3, [pc, #200]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	4a31      	ldr	r2, [pc, #196]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002160:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
 8002166:	4b2f      	ldr	r3, [pc, #188]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	697b      	ldr	r3, [r7, #20]
}
 8002172:	e050      	b.n	8002216 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a2d      	ldr	r2, [pc, #180]	; (8002230 <HAL_I2C_MspInit+0x1a0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d14b      	bne.n	8002216 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	4b28      	ldr	r3, [pc, #160]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a27      	ldr	r2, [pc, #156]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b25      	ldr	r3, [pc, #148]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	4b21      	ldr	r3, [pc, #132]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a20      	ldr	r2, [pc, #128]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021bc:	2312      	movs	r3, #18
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021c0:	2301      	movs	r3, #1
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c4:	2303      	movs	r3, #3
 80021c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021c8:	2304      	movs	r3, #4
 80021ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d0:	4619      	mov	r1, r3
 80021d2:	4818      	ldr	r0, [pc, #96]	; (8002234 <HAL_I2C_MspInit+0x1a4>)
 80021d4:	f010 fb9e 	bl	8012914 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021de:	2312      	movs	r3, #18
 80021e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021e2:	2301      	movs	r3, #1
 80021e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e6:	2303      	movs	r3, #3
 80021e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021ea:	2304      	movs	r3, #4
 80021ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f2:	4619      	mov	r1, r3
 80021f4:	4810      	ldr	r0, [pc, #64]	; (8002238 <HAL_I2C_MspInit+0x1a8>)
 80021f6:	f010 fb8d 	bl	8012914 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	4a08      	ldr	r2, [pc, #32]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002204:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002208:	6413      	str	r3, [r2, #64]	; 0x40
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
}
 8002216:	bf00      	nop
 8002218:	3738      	adds	r7, #56	; 0x38
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40005400 	.word	0x40005400
 8002224:	40023800 	.word	0x40023800
 8002228:	40020400 	.word	0x40020400
 800222c:	40005800 	.word	0x40005800
 8002230:	40005c00 	.word	0x40005c00
 8002234:	40020800 	.word	0x40020800
 8002238:	40020000 	.word	0x40020000

0800223c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a2a      	ldr	r2, [pc, #168]	; (80022f4 <HAL_I2C_MspDeInit+0xb8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d116      	bne.n	800227c <HAL_I2C_MspDeInit+0x40>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800224e:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a29      	ldr	r2, [pc, #164]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 8002254:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002258:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800225a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800225e:	4827      	ldr	r0, [pc, #156]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 8002260:	f010 fcf4 	bl	8012c4c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002268:	4824      	ldr	r0, [pc, #144]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 800226a:	f010 fcef 	bl	8012c4c <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800226e:	201f      	movs	r0, #31
 8002270:	f00f ff2a 	bl	80120c8 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8002274:	2020      	movs	r0, #32
 8002276:	f00f ff27 	bl	80120c8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800227a:	e036      	b.n	80022ea <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1f      	ldr	r2, [pc, #124]	; (8002300 <HAL_I2C_MspDeInit+0xc4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d116      	bne.n	80022b4 <HAL_I2C_MspDeInit+0x78>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002286:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	4a1b      	ldr	r2, [pc, #108]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 800228c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002290:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002292:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002296:	4819      	ldr	r0, [pc, #100]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 8002298:	f010 fcd8 	bl	8012c4c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800229c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022a0:	4816      	ldr	r0, [pc, #88]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 80022a2:	f010 fcd3 	bl	8012c4c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 80022a6:	2021      	movs	r0, #33	; 0x21
 80022a8:	f00f ff0e 	bl	80120c8 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 80022ac:	2022      	movs	r0, #34	; 0x22
 80022ae:	f00f ff0b 	bl	80120c8 <HAL_NVIC_DisableIRQ>
}
 80022b2:	e01a      	b.n	80022ea <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C3)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a12      	ldr	r2, [pc, #72]	; (8002304 <HAL_I2C_MspDeInit+0xc8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d115      	bne.n	80022ea <HAL_I2C_MspDeInit+0xae>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	4a0d      	ldr	r2, [pc, #52]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 80022c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022c8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 80022ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ce:	480e      	ldr	r0, [pc, #56]	; (8002308 <HAL_I2C_MspDeInit+0xcc>)
 80022d0:	f010 fcbc 	bl	8012c4c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80022d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022d8:	480c      	ldr	r0, [pc, #48]	; (800230c <HAL_I2C_MspDeInit+0xd0>)
 80022da:	f010 fcb7 	bl	8012c4c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 80022de:	2048      	movs	r0, #72	; 0x48
 80022e0:	f00f fef2 	bl	80120c8 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 80022e4:	2049      	movs	r0, #73	; 0x49
 80022e6:	f00f feef 	bl	80120c8 <HAL_NVIC_DisableIRQ>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40005400 	.word	0x40005400
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020400 	.word	0x40020400
 8002300:	40005800 	.word	0x40005800
 8002304:	40005c00 	.word	0x40005c00
 8002308:	40020800 	.word	0x40020800
 800230c:	40020000 	.word	0x40020000

08002310 <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002310:	b480      	push	{r7}
 8002312:	b091      	sub	sp, #68	; 0x44
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	if(htim_pwm->Instance==TIM1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a8d      	ldr	r2, [pc, #564]	; (8002554 <HAL_TIM_PWM_MspInit+0x244>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d10e      	bne.n	8002340 <HAL_TIM_PWM_MspInit+0x30>
		{
			/* Peripheral clock enable */
			__HAL_RCC_TIM1_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002326:	4b8c      	ldr	r3, [pc, #560]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a8b      	ldr	r2, [pc, #556]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
 8002332:	4b89      	ldr	r3, [pc, #548]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800233c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	  {
	    /* Peripheral clock enable */
	    __HAL_RCC_TIM14_CLK_ENABLE();
	  }

}
 800233e:	e102      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002348:	d10e      	bne.n	8002368 <HAL_TIM_PWM_MspInit+0x58>
			__HAL_RCC_TIM2_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	63bb      	str	r3, [r7, #56]	; 0x38
 800234e:	4b82      	ldr	r3, [pc, #520]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	4a81      	ldr	r2, [pc, #516]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6413      	str	r3, [r2, #64]	; 0x40
 800235a:	4b7f      	ldr	r3, [pc, #508]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	63bb      	str	r3, [r7, #56]	; 0x38
 8002364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002366:	e0ee      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM3)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a7b      	ldr	r2, [pc, #492]	; (800255c <HAL_TIM_PWM_MspInit+0x24c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d10e      	bne.n	8002390 <HAL_TIM_PWM_MspInit+0x80>
			__HAL_RCC_TIM3_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	637b      	str	r3, [r7, #52]	; 0x34
 8002376:	4b78      	ldr	r3, [pc, #480]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a77      	ldr	r2, [pc, #476]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
 8002382:	4b75      	ldr	r3, [pc, #468]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	637b      	str	r3, [r7, #52]	; 0x34
 800238c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800238e:	e0da      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM4)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a72      	ldr	r2, [pc, #456]	; (8002560 <HAL_TIM_PWM_MspInit+0x250>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10e      	bne.n	80023b8 <HAL_TIM_PWM_MspInit+0xa8>
			__HAL_RCC_TIM4_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	633b      	str	r3, [r7, #48]	; 0x30
 800239e:	4b6e      	ldr	r3, [pc, #440]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a6d      	ldr	r2, [pc, #436]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023a4:	f043 0304 	orr.w	r3, r3, #4
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40
 80023aa:	4b6b      	ldr	r3, [pc, #428]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
 80023b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80023b6:	e0c6      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM5)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a69      	ldr	r2, [pc, #420]	; (8002564 <HAL_TIM_PWM_MspInit+0x254>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d10e      	bne.n	80023e0 <HAL_TIM_PWM_MspInit+0xd0>
	    __HAL_RCC_TIM5_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c6:	4b64      	ldr	r3, [pc, #400]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	4a63      	ldr	r2, [pc, #396]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023cc:	f043 0308 	orr.w	r3, r3, #8
 80023d0:	6413      	str	r3, [r2, #64]	; 0x40
 80023d2:	4b61      	ldr	r3, [pc, #388]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80023de:	e0b2      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM6)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a60      	ldr	r2, [pc, #384]	; (8002568 <HAL_TIM_PWM_MspInit+0x258>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d10e      	bne.n	8002408 <HAL_TIM_PWM_MspInit+0xf8>
	    __HAL_RCC_TIM6_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ee:	4b5a      	ldr	r3, [pc, #360]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	4a59      	ldr	r2, [pc, #356]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023f4:	f043 0310 	orr.w	r3, r3, #16
 80023f8:	6413      	str	r3, [r2, #64]	; 0x40
 80023fa:	4b57      	ldr	r3, [pc, #348]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
 8002404:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002406:	e09e      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM7)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a57      	ldr	r2, [pc, #348]	; (800256c <HAL_TIM_PWM_MspInit+0x25c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d10e      	bne.n	8002430 <HAL_TIM_PWM_MspInit+0x120>
	     __HAL_RCC_TIM7_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
 8002416:	4b50      	ldr	r3, [pc, #320]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	4a4f      	ldr	r2, [pc, #316]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800241c:	f043 0320 	orr.w	r3, r3, #32
 8002420:	6413      	str	r3, [r2, #64]	; 0x40
 8002422:	4b4d      	ldr	r3, [pc, #308]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f003 0320 	and.w	r3, r3, #32
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800242e:	e08a      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM8)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a4e      	ldr	r2, [pc, #312]	; (8002570 <HAL_TIM_PWM_MspInit+0x260>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d10e      	bne.n	8002458 <HAL_TIM_PWM_MspInit+0x148>
	     __HAL_RCC_TIM8_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	623b      	str	r3, [r7, #32]
 800243e:	4b46      	ldr	r3, [pc, #280]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	4a45      	ldr	r2, [pc, #276]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	6453      	str	r3, [r2, #68]	; 0x44
 800244a:	4b43      	ldr	r3, [pc, #268]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	623b      	str	r3, [r7, #32]
 8002454:	6a3b      	ldr	r3, [r7, #32]
}
 8002456:	e076      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM9)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a45      	ldr	r2, [pc, #276]	; (8002574 <HAL_TIM_PWM_MspInit+0x264>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d10e      	bne.n	8002480 <HAL_TIM_PWM_MspInit+0x170>
	    __HAL_RCC_TIM9_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	4b3c      	ldr	r3, [pc, #240]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	4a3b      	ldr	r2, [pc, #236]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002470:	6453      	str	r3, [r2, #68]	; 0x44
 8002472:	4b39      	ldr	r3, [pc, #228]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247a:	61fb      	str	r3, [r7, #28]
 800247c:	69fb      	ldr	r3, [r7, #28]
}
 800247e:	e062      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM10)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a3c      	ldr	r2, [pc, #240]	; (8002578 <HAL_TIM_PWM_MspInit+0x268>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d10e      	bne.n	80024a8 <HAL_TIM_PWM_MspInit+0x198>
	    __HAL_RCC_TIM10_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	4b32      	ldr	r3, [pc, #200]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	4a31      	ldr	r2, [pc, #196]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002498:	6453      	str	r3, [r2, #68]	; 0x44
 800249a:	4b2f      	ldr	r3, [pc, #188]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	61bb      	str	r3, [r7, #24]
 80024a4:	69bb      	ldr	r3, [r7, #24]
}
 80024a6:	e04e      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM11)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a33      	ldr	r2, [pc, #204]	; (800257c <HAL_TIM_PWM_MspInit+0x26c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d10e      	bne.n	80024d0 <HAL_TIM_PWM_MspInit+0x1c0>
	    __HAL_RCC_TIM11_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	4b28      	ldr	r3, [pc, #160]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	4a27      	ldr	r2, [pc, #156]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c0:	6453      	str	r3, [r2, #68]	; 0x44
 80024c2:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	697b      	ldr	r3, [r7, #20]
}
 80024ce:	e03a      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM12)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a2a      	ldr	r2, [pc, #168]	; (8002580 <HAL_TIM_PWM_MspInit+0x270>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d10e      	bne.n	80024f8 <HAL_TIM_PWM_MspInit+0x1e8>
	    __HAL_RCC_TIM12_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	4a1d      	ldr	r2, [pc, #116]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ea:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	693b      	ldr	r3, [r7, #16]
}
 80024f6:	e026      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM13)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a21      	ldr	r2, [pc, #132]	; (8002584 <HAL_TIM_PWM_MspInit+0x274>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d10e      	bne.n	8002520 <HAL_TIM_PWM_MspInit+0x210>
	    __HAL_RCC_TIM13_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	4a13      	ldr	r2, [pc, #76]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800250c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002510:	6413      	str	r3, [r2, #64]	; 0x40
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
}
 800251e:	e012      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM14)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a18      	ldr	r2, [pc, #96]	; (8002588 <HAL_TIM_PWM_MspInit+0x278>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d10d      	bne.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	    __HAL_RCC_TIM14_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	4a09      	ldr	r2, [pc, #36]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002538:	6413      	str	r3, [r2, #64]	; 0x40
 800253a:	4b07      	ldr	r3, [pc, #28]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	68bb      	ldr	r3, [r7, #8]
}
 8002546:	bf00      	nop
 8002548:	3744      	adds	r7, #68	; 0x44
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40010000 	.word	0x40010000
 8002558:	40023800 	.word	0x40023800
 800255c:	40000400 	.word	0x40000400
 8002560:	40000800 	.word	0x40000800
 8002564:	40000c00 	.word	0x40000c00
 8002568:	40001000 	.word	0x40001000
 800256c:	40001400 	.word	0x40001400
 8002570:	40010400 	.word	0x40010400
 8002574:	40014000 	.word	0x40014000
 8002578:	40014400 	.word	0x40014400
 800257c:	40014800 	.word	0x40014800
 8002580:	40001800 	.word	0x40001800
 8002584:	40001c00 	.word	0x40001c00
 8002588:	40002000 	.word	0x40002000

0800258c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800258c:	b480      	push	{r7}
 800258e:	b091      	sub	sp, #68	; 0x44
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]

	if(htim_base->Instance==TIM1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a8d      	ldr	r2, [pc, #564]	; (80027d0 <HAL_TIM_Base_MspInit+0x244>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d10e      	bne.n	80025bc <HAL_TIM_Base_MspInit+0x30>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025a2:	4b8c      	ldr	r3, [pc, #560]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	4a8b      	ldr	r2, [pc, #556]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6453      	str	r3, [r2, #68]	; 0x44
 80025ae:	4b89      	ldr	r3, [pc, #548]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  else if(htim_base->Instance==TIM14)
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
  }
}
 80025ba:	e102      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c4:	d10e      	bne.n	80025e4 <HAL_TIM_Base_MspInit+0x58>
		__HAL_RCC_TIM2_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80025ca:	4b82      	ldr	r3, [pc, #520]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	4a81      	ldr	r2, [pc, #516]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6413      	str	r3, [r2, #64]	; 0x40
 80025d6:	4b7f      	ldr	r3, [pc, #508]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	63bb      	str	r3, [r7, #56]	; 0x38
 80025e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025e2:	e0ee      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM3)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a7b      	ldr	r2, [pc, #492]	; (80027d8 <HAL_TIM_Base_MspInit+0x24c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d10e      	bne.n	800260c <HAL_TIM_Base_MspInit+0x80>
		__HAL_RCC_TIM3_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	637b      	str	r3, [r7, #52]	; 0x34
 80025f2:	4b78      	ldr	r3, [pc, #480]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	4a77      	ldr	r2, [pc, #476]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025f8:	f043 0302 	orr.w	r3, r3, #2
 80025fc:	6413      	str	r3, [r2, #64]	; 0x40
 80025fe:	4b75      	ldr	r3, [pc, #468]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	637b      	str	r3, [r7, #52]	; 0x34
 8002608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800260a:	e0da      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM4)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a72      	ldr	r2, [pc, #456]	; (80027dc <HAL_TIM_Base_MspInit+0x250>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d10e      	bne.n	8002634 <HAL_TIM_Base_MspInit+0xa8>
		__HAL_RCC_TIM4_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	633b      	str	r3, [r7, #48]	; 0x30
 800261a:	4b6e      	ldr	r3, [pc, #440]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4a6d      	ldr	r2, [pc, #436]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	6413      	str	r3, [r2, #64]	; 0x40
 8002626:	4b6b      	ldr	r3, [pc, #428]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	633b      	str	r3, [r7, #48]	; 0x30
 8002630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002632:	e0c6      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM5)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a69      	ldr	r2, [pc, #420]	; (80027e0 <HAL_TIM_Base_MspInit+0x254>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d10e      	bne.n	800265c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002642:	4b64      	ldr	r3, [pc, #400]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	4a63      	ldr	r2, [pc, #396]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002648:	f043 0308 	orr.w	r3, r3, #8
 800264c:	6413      	str	r3, [r2, #64]	; 0x40
 800264e:	4b61      	ldr	r3, [pc, #388]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800265a:	e0b2      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM6)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a60      	ldr	r2, [pc, #384]	; (80027e4 <HAL_TIM_Base_MspInit+0x258>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d10e      	bne.n	8002684 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
 800266a:	4b5a      	ldr	r3, [pc, #360]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	4a59      	ldr	r2, [pc, #356]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002670:	f043 0310 	orr.w	r3, r3, #16
 8002674:	6413      	str	r3, [r2, #64]	; 0x40
 8002676:	4b57      	ldr	r3, [pc, #348]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002682:	e09e      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM7)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a57      	ldr	r2, [pc, #348]	; (80027e8 <HAL_TIM_Base_MspInit+0x25c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d10e      	bne.n	80026ac <HAL_TIM_Base_MspInit+0x120>
     __HAL_RCC_TIM7_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
 8002692:	4b50      	ldr	r3, [pc, #320]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	4a4f      	ldr	r2, [pc, #316]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002698:	f043 0320 	orr.w	r3, r3, #32
 800269c:	6413      	str	r3, [r2, #64]	; 0x40
 800269e:	4b4d      	ldr	r3, [pc, #308]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80026aa:	e08a      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM8)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a4e      	ldr	r2, [pc, #312]	; (80027ec <HAL_TIM_Base_MspInit+0x260>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d10e      	bne.n	80026d4 <HAL_TIM_Base_MspInit+0x148>
     __HAL_RCC_TIM8_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	623b      	str	r3, [r7, #32]
 80026ba:	4b46      	ldr	r3, [pc, #280]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	4a45      	ldr	r2, [pc, #276]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026c0:	f043 0302 	orr.w	r3, r3, #2
 80026c4:	6453      	str	r3, [r2, #68]	; 0x44
 80026c6:	4b43      	ldr	r3, [pc, #268]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	623b      	str	r3, [r7, #32]
 80026d0:	6a3b      	ldr	r3, [r7, #32]
}
 80026d2:	e076      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM9)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a45      	ldr	r2, [pc, #276]	; (80027f0 <HAL_TIM_Base_MspInit+0x264>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d10e      	bne.n	80026fc <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	4b3c      	ldr	r3, [pc, #240]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	4a3b      	ldr	r2, [pc, #236]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ec:	6453      	str	r3, [r2, #68]	; 0x44
 80026ee:	4b39      	ldr	r3, [pc, #228]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	69fb      	ldr	r3, [r7, #28]
}
 80026fa:	e062      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM10)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a3c      	ldr	r2, [pc, #240]	; (80027f4 <HAL_TIM_Base_MspInit+0x268>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d10e      	bne.n	8002724 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	4b32      	ldr	r3, [pc, #200]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	4a31      	ldr	r2, [pc, #196]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002714:	6453      	str	r3, [r2, #68]	; 0x44
 8002716:	4b2f      	ldr	r3, [pc, #188]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	61bb      	str	r3, [r7, #24]
 8002720:	69bb      	ldr	r3, [r7, #24]
}
 8002722:	e04e      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM11)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a33      	ldr	r2, [pc, #204]	; (80027f8 <HAL_TIM_Base_MspInit+0x26c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d10e      	bne.n	800274c <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	4b28      	ldr	r3, [pc, #160]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	4a27      	ldr	r2, [pc, #156]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800273c:	6453      	str	r3, [r2, #68]	; 0x44
 800273e:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	697b      	ldr	r3, [r7, #20]
}
 800274a:	e03a      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM12)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a2a      	ldr	r2, [pc, #168]	; (80027fc <HAL_TIM_Base_MspInit+0x270>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d10e      	bne.n	8002774 <HAL_TIM_Base_MspInit+0x1e8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	4b1e      	ldr	r3, [pc, #120]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002764:	6413      	str	r3, [r2, #64]	; 0x40
 8002766:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	693b      	ldr	r3, [r7, #16]
}
 8002772:	e026      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM13)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a21      	ldr	r2, [pc, #132]	; (8002800 <HAL_TIM_Base_MspInit+0x274>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d10e      	bne.n	800279c <HAL_TIM_Base_MspInit+0x210>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	4a13      	ldr	r2, [pc, #76]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800278c:	6413      	str	r3, [r2, #64]	; 0x40
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
}
 800279a:	e012      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM14)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a18      	ldr	r2, [pc, #96]	; (8002804 <HAL_TIM_Base_MspInit+0x278>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d10d      	bne.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80027b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b4:	6413      	str	r3, [r2, #64]	; 0x40
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
}
 80027c2:	bf00      	nop
 80027c4:	3744      	adds	r7, #68	; 0x44
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40010000 	.word	0x40010000
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40000800 	.word	0x40000800
 80027e0:	40000c00 	.word	0x40000c00
 80027e4:	40001000 	.word	0x40001000
 80027e8:	40001400 	.word	0x40001400
 80027ec:	40010400 	.word	0x40010400
 80027f0:	40014000 	.word	0x40014000
 80027f4:	40014400 	.word	0x40014400
 80027f8:	40014800 	.word	0x40014800
 80027fc:	40001800 	.word	0x40001800
 8002800:	40001c00 	.word	0x40001c00
 8002804:	40002000 	.word	0x40002000

08002808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b094      	sub	sp, #80	; 0x50
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]

  if(huart->Instance==USART1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a8c      	ldr	r2, [pc, #560]	; (8002a58 <HAL_UART_MspInit+0x250>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d12d      	bne.n	8002886 <HAL_UART_MspInit+0x7e>
    {
	  __HAL_RCC_USART1_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	63bb      	str	r3, [r7, #56]	; 0x38
 800282e:	4b8b      	ldr	r3, [pc, #556]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	4a8a      	ldr	r2, [pc, #552]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002834:	f043 0310 	orr.w	r3, r3, #16
 8002838:	6453      	str	r3, [r2, #68]	; 0x44
 800283a:	4b88      	ldr	r3, [pc, #544]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	63bb      	str	r3, [r7, #56]	; 0x38
 8002844:	6bbb      	ldr	r3, [r7, #56]	; 0x38

	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	637b      	str	r3, [r7, #52]	; 0x34
 800284a:	4b84      	ldr	r3, [pc, #528]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a83      	ldr	r2, [pc, #524]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b81      	ldr	r3, [pc, #516]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
 8002860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	  /**USART1 GPIO Configuration
	      PA9     ------> USART1_TX
	      PA10     ------> USART1_RX
	   */
	  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002862:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002866:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002868:	2302      	movs	r3, #2
 800286a:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002870:	2303      	movs	r3, #3
 8002872:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002874:	2307      	movs	r3, #7
 8002876:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002878:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800287c:	4619      	mov	r1, r3
 800287e:	4878      	ldr	r0, [pc, #480]	; (8002a60 <HAL_UART_MspInit+0x258>)
 8002880:	f010 f848 	bl	8012914 <HAL_GPIO_Init>
   /* USER CODE BEGIN USART6_MspInit 1 */

   /* USER CODE END USART6_MspInit 1 */
   }

}
 8002884:	e12b      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART2)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a76      	ldr	r2, [pc, #472]	; (8002a64 <HAL_UART_MspInit+0x25c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d12c      	bne.n	80028ea <HAL_UART_MspInit+0xe2>
      __HAL_RCC_USART2_CLK_ENABLE();
 8002890:	2300      	movs	r3, #0
 8002892:	633b      	str	r3, [r7, #48]	; 0x30
 8002894:	4b71      	ldr	r3, [pc, #452]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	4a70      	ldr	r2, [pc, #448]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800289a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289e:	6413      	str	r3, [r2, #64]	; 0x40
 80028a0:	4b6e      	ldr	r3, [pc, #440]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	633b      	str	r3, [r7, #48]	; 0x30
 80028aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ac:	2300      	movs	r3, #0
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b0:	4b6a      	ldr	r3, [pc, #424]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	4a69      	ldr	r2, [pc, #420]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028b6:	f043 0308 	orr.w	r3, r3, #8
 80028ba:	6313      	str	r3, [r2, #48]	; 0x30
 80028bc:	4b67      	ldr	r3, [pc, #412]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80028c8:	2360      	movs	r3, #96	; 0x60
 80028ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028cc:	2302      	movs	r3, #2
 80028ce:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d4:	2303      	movs	r3, #3
 80028d6:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028d8:	2307      	movs	r3, #7
 80028da:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028e0:	4619      	mov	r1, r3
 80028e2:	4861      	ldr	r0, [pc, #388]	; (8002a68 <HAL_UART_MspInit+0x260>)
 80028e4:	f010 f816 	bl	8012914 <HAL_GPIO_Init>
}
 80028e8:	e0f9      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART3)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a5f      	ldr	r2, [pc, #380]	; (8002a6c <HAL_UART_MspInit+0x264>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d12d      	bne.n	8002950 <HAL_UART_MspInit+0x148>
      __HAL_RCC_USART3_CLK_ENABLE();
 80028f4:	2300      	movs	r3, #0
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028f8:	4b58      	ldr	r3, [pc, #352]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	4a57      	ldr	r2, [pc, #348]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002902:	6413      	str	r3, [r2, #64]	; 0x40
 8002904:	4b55      	ldr	r3, [pc, #340]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800290c:	62bb      	str	r3, [r7, #40]	; 0x28
 800290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8002910:	2300      	movs	r3, #0
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
 8002914:	4b51      	ldr	r3, [pc, #324]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	4a50      	ldr	r2, [pc, #320]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800291a:	f043 0308 	orr.w	r3, r3, #8
 800291e:	6313      	str	r3, [r2, #48]	; 0x30
 8002920:	4b4e      	ldr	r3, [pc, #312]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800292c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002930:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002932:	2302      	movs	r3, #2
 8002934:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293a:	2303      	movs	r3, #3
 800293c:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800293e:	2307      	movs	r3, #7
 8002940:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002942:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002946:	4619      	mov	r1, r3
 8002948:	4847      	ldr	r0, [pc, #284]	; (8002a68 <HAL_UART_MspInit+0x260>)
 800294a:	f00f ffe3 	bl	8012914 <HAL_GPIO_Init>
}
 800294e:	e0c6      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART4)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a46      	ldr	r2, [pc, #280]	; (8002a70 <HAL_UART_MspInit+0x268>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d12d      	bne.n	80029b6 <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_UART4_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	623b      	str	r3, [r7, #32]
 800295e:	4b3f      	ldr	r3, [pc, #252]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	4a3e      	ldr	r2, [pc, #248]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002968:	6413      	str	r3, [r2, #64]	; 0x40
 800296a:	4b3c      	ldr	r3, [pc, #240]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002972:	623b      	str	r3, [r7, #32]
 8002974:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	4b38      	ldr	r3, [pc, #224]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a37      	ldr	r2, [pc, #220]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002980:	f043 0304 	orr.w	r3, r3, #4
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b35      	ldr	r3, [pc, #212]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	61fb      	str	r3, [r7, #28]
 8002990:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002992:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002996:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002998:	2302      	movs	r3, #2
 800299a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800299c:	2301      	movs	r3, #1
 800299e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a0:	2303      	movs	r3, #3
 80029a2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80029a4:	2308      	movs	r3, #8
 80029a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029ac:	4619      	mov	r1, r3
 80029ae:	4831      	ldr	r0, [pc, #196]	; (8002a74 <HAL_UART_MspInit+0x26c>)
 80029b0:	f00f ffb0 	bl	8012914 <HAL_GPIO_Init>
}
 80029b4:	e093      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART5)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a2f      	ldr	r2, [pc, #188]	; (8002a78 <HAL_UART_MspInit+0x270>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d15d      	bne.n	8002a7c <HAL_UART_MspInit+0x274>
    __HAL_RCC_UART5_CLK_ENABLE();
 80029c0:	2300      	movs	r3, #0
 80029c2:	61bb      	str	r3, [r7, #24]
 80029c4:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	4a24      	ldr	r2, [pc, #144]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ce:	6413      	str	r3, [r2, #64]	; 0x40
 80029d0:	4b22      	ldr	r3, [pc, #136]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	4a1d      	ldr	r2, [pc, #116]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029e6:	f043 0304 	orr.w	r3, r3, #4
 80029ea:	6313      	str	r3, [r2, #48]	; 0x30
 80029ec:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029f8:	2300      	movs	r3, #0
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	4a16      	ldr	r2, [pc, #88]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002a02:	f043 0308 	orr.w	r3, r3, #8
 8002a06:	6313      	str	r3, [r2, #48]	; 0x30
 8002a08:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a18:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a22:	2303      	movs	r3, #3
 8002a24:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a26:	2308      	movs	r3, #8
 8002a28:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4810      	ldr	r0, [pc, #64]	; (8002a74 <HAL_UART_MspInit+0x26c>)
 8002a32:	f00f ff6f 	bl	8012914 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a36:	2304      	movs	r3, #4
 8002a38:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a42:	2303      	movs	r3, #3
 8002a44:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a46:	2308      	movs	r3, #8
 8002a48:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4805      	ldr	r0, [pc, #20]	; (8002a68 <HAL_UART_MspInit+0x260>)
 8002a52:	f00f ff5f 	bl	8012914 <HAL_GPIO_Init>
}
 8002a56:	e042      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
 8002a58:	40011000 	.word	0x40011000
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40020000 	.word	0x40020000
 8002a64:	40004400 	.word	0x40004400
 8002a68:	40020c00 	.word	0x40020c00
 8002a6c:	40004800 	.word	0x40004800
 8002a70:	40004c00 	.word	0x40004c00
 8002a74:	40020800 	.word	0x40020800
 8002a78:	40005000 	.word	0x40005000
  else if(huart->Instance==USART6)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <HAL_UART_MspInit+0x2e0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d12b      	bne.n	8002ade <HAL_UART_MspInit+0x2d6>
     __HAL_RCC_USART6_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	4b18      	ldr	r3, [pc, #96]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	4a17      	ldr	r2, [pc, #92]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002a90:	f043 0320 	orr.w	r3, r3, #32
 8002a94:	6453      	str	r3, [r2, #68]	; 0x44
 8002a96:	4b15      	ldr	r3, [pc, #84]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f003 0320 	and.w	r3, r3, #32
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
     __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a10      	ldr	r2, [pc, #64]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002aac:	f043 0304 	orr.w	r3, r3, #4
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]
     GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002abe:	23c0      	movs	r3, #192	; 0xc0
 8002ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	643b      	str	r3, [r7, #64]	; 0x40
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	647b      	str	r3, [r7, #68]	; 0x44
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aca:	2303      	movs	r3, #3
 8002acc:	64bb      	str	r3, [r7, #72]	; 0x48
     GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ace:	2308      	movs	r3, #8
 8002ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ad2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4805      	ldr	r0, [pc, #20]	; (8002af0 <HAL_UART_MspInit+0x2e8>)
 8002ada:	f00f ff1b 	bl	8012914 <HAL_GPIO_Init>
}
 8002ade:	bf00      	nop
 8002ae0:	3750      	adds	r7, #80	; 0x50
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40011400 	.word	0x40011400
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40020800 	.word	0x40020800

08002af4 <HAL_TIM_Encoder_MspInit>:
  }

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b094      	sub	sp, #80	; 0x50
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a8c      	ldr	r2, [pc, #560]	; (8002d44 <HAL_TIM_Encoder_MspInit+0x250>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d12d      	bne.n	8002b72 <HAL_TIM_Encoder_MspInit+0x7e>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b1a:	4b8b      	ldr	r3, [pc, #556]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	4a8a      	ldr	r2, [pc, #552]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	6453      	str	r3, [r2, #68]	; 0x44
 8002b26:	4b88      	ldr	r3, [pc, #544]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	637b      	str	r3, [r7, #52]	; 0x34
 8002b36:	4b84      	ldr	r3, [pc, #528]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	4a83      	ldr	r2, [pc, #524]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b3c:	f043 0310 	orr.w	r3, r3, #16
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30
 8002b42:	4b81      	ldr	r3, [pc, #516]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34


    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002b4e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002b52:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b60:	2301      	movs	r3, #1
 8002b62:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4878      	ldr	r0, [pc, #480]	; (8002d4c <HAL_TIM_Encoder_MspInit+0x258>)
 8002b6c:	f00f fed2 	bl	8012914 <HAL_GPIO_Init>
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  }

}
 8002b70:	e12b      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM2){
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7a:	d14b      	bne.n	8002c14 <HAL_TIM_Encoder_MspInit+0x120>
	  __HAL_RCC_TIM2_CLK_ENABLE();
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	633b      	str	r3, [r7, #48]	; 0x30
 8002b80:	4b71      	ldr	r3, [pc, #452]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	4a70      	ldr	r2, [pc, #448]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8c:	4b6e      	ldr	r3, [pc, #440]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	633b      	str	r3, [r7, #48]	; 0x30
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b98:	2300      	movs	r3, #0
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b9c:	4b6a      	ldr	r3, [pc, #424]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	4a69      	ldr	r2, [pc, #420]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba8:	4b67      	ldr	r3, [pc, #412]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bb8:	4b63      	ldr	r3, [pc, #396]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	4a62      	ldr	r2, [pc, #392]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002bbe:	f043 0302 	orr.w	r3, r3, #2
 8002bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc4:	4b60      	ldr	r3, [pc, #384]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002bd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002be2:	2301      	movs	r3, #1
 8002be4:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bea:	4619      	mov	r1, r3
 8002bec:	4858      	ldr	r0, [pc, #352]	; (8002d50 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002bee:	f00f fe91 	bl	8012914 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bf2:	2308      	movs	r3, #8
 8002bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c02:	2301      	movs	r3, #1
 8002c04:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4851      	ldr	r0, [pc, #324]	; (8002d54 <HAL_TIM_Encoder_MspInit+0x260>)
 8002c0e:	f00f fe81 	bl	8012914 <HAL_GPIO_Init>
}
 8002c12:	e0da      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM3){
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a4f      	ldr	r2, [pc, #316]	; (8002d58 <HAL_TIM_Encoder_MspInit+0x264>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d12c      	bne.n	8002c78 <HAL_TIM_Encoder_MspInit+0x184>
	  __HAL_RCC_TIM3_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
 8002c22:	4b49      	ldr	r3, [pc, #292]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	4a48      	ldr	r2, [pc, #288]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c28:	f043 0302 	orr.w	r3, r3, #2
 8002c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2e:	4b46      	ldr	r3, [pc, #280]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	623b      	str	r3, [r7, #32]
 8002c3e:	4b42      	ldr	r3, [pc, #264]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	4a41      	ldr	r2, [pc, #260]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4a:	4b3f      	ldr	r3, [pc, #252]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	623b      	str	r3, [r7, #32]
 8002c54:	6a3b      	ldr	r3, [r7, #32]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c56:	23c0      	movs	r3, #192	; 0xc0
 8002c58:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c62:	2300      	movs	r3, #0
 8002c64:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c66:	2302      	movs	r3, #2
 8002c68:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4837      	ldr	r0, [pc, #220]	; (8002d50 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002c72:	f00f fe4f 	bl	8012914 <HAL_GPIO_Init>
}
 8002c76:	e0a8      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM4){
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a37      	ldr	r2, [pc, #220]	; (8002d5c <HAL_TIM_Encoder_MspInit+0x268>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d12d      	bne.n	8002cde <HAL_TIM_Encoder_MspInit+0x1ea>
	  __HAL_RCC_TIM4_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	4b30      	ldr	r3, [pc, #192]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	4a2f      	ldr	r2, [pc, #188]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c8c:	f043 0304 	orr.w	r3, r3, #4
 8002c90:	6413      	str	r3, [r2, #64]	; 0x40
 8002c92:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	61fb      	str	r3, [r7, #28]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	4a28      	ldr	r2, [pc, #160]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ca8:	f043 0308 	orr.w	r3, r3, #8
 8002cac:	6313      	str	r3, [r2, #48]	; 0x30
 8002cae:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	61bb      	str	r3, [r7, #24]
 8002cb8:	69bb      	ldr	r3, [r7, #24]
	  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002cba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4822      	ldr	r0, [pc, #136]	; (8002d60 <HAL_TIM_Encoder_MspInit+0x26c>)
 8002cd8:	f00f fe1c 	bl	8012914 <HAL_GPIO_Init>
}
 8002cdc:	e075      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM5){
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a20      	ldr	r2, [pc, #128]	; (8002d64 <HAL_TIM_Encoder_MspInit+0x270>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d13f      	bne.n	8002d68 <HAL_TIM_Encoder_MspInit+0x274>
	  __HAL_RCC_TIM5_CLK_ENABLE();
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	4a15      	ldr	r2, [pc, #84]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cf2:	f043 0308 	orr.w	r3, r3, #8
 8002cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf8:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d04:	2300      	movs	r3, #0
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6313      	str	r3, [r2, #48]	; 0x30
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	693b      	ldr	r3, [r7, #16]
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d20:	2303      	movs	r3, #3
 8002d22:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d24:	2302      	movs	r3, #2
 8002d26:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002d30:	2302      	movs	r3, #2
 8002d32:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4805      	ldr	r0, [pc, #20]	; (8002d50 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002d3c:	f00f fdea 	bl	8012914 <HAL_GPIO_Init>
}
 8002d40:	e043      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
 8002d42:	bf00      	nop
 8002d44:	40010000 	.word	0x40010000
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40020000 	.word	0x40020000
 8002d54:	40020400 	.word	0x40020400
 8002d58:	40000400 	.word	0x40000400
 8002d5c:	40000800 	.word	0x40000800
 8002d60:	40020c00 	.word	0x40020c00
 8002d64:	40000c00 	.word	0x40000c00
  }else if(htim_encoder->Instance==TIM8){
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a19      	ldr	r2, [pc, #100]	; (8002dd4 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d12b      	bne.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
	  __HAL_RCC_TIM8_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d7c:	f043 0302 	orr.w	r3, r3, #2
 8002d80:	6453      	str	r3, [r2, #68]	; 0x44
 8002d82:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	4a10      	ldr	r2, [pc, #64]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002daa:	23c0      	movs	r3, #192	; 0xc0
 8002dac:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dae:	2302      	movs	r3, #2
 8002db0:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db6:	2300      	movs	r3, #0
 8002db8:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dbe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4805      	ldr	r0, [pc, #20]	; (8002ddc <HAL_TIM_Encoder_MspInit+0x2e8>)
 8002dc6:	f00f fda5 	bl	8012914 <HAL_GPIO_Init>
}
 8002dca:	bf00      	nop
 8002dcc:	3750      	adds	r7, #80	; 0x50
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40010400 	.word	0x40010400
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40020800 	.word	0x40020800

08002de0 <SystemClock_Config>:

	}
}

void SystemClock_Config(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b094      	sub	sp, #80	; 0x50
 8002de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002de6:	f107 0320 	add.w	r3, r7, #32
 8002dea:	2230      	movs	r2, #48	; 0x30
 8002dec:	2100      	movs	r1, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	f017 fc9c 	bl	801a72c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002df4:	f107 030c 	add.w	r3, r7, #12
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e04:	2300      	movs	r3, #0
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	4b29      	ldr	r3, [pc, #164]	; (8002eb0 <SystemClock_Config+0xd0>)
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	4a28      	ldr	r2, [pc, #160]	; (8002eb0 <SystemClock_Config+0xd0>)
 8002e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e12:	6413      	str	r3, [r2, #64]	; 0x40
 8002e14:	4b26      	ldr	r3, [pc, #152]	; (8002eb0 <SystemClock_Config+0xd0>)
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e20:	2300      	movs	r3, #0
 8002e22:	607b      	str	r3, [r7, #4]
 8002e24:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <SystemClock_Config+0xd4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a22      	ldr	r2, [pc, #136]	; (8002eb4 <SystemClock_Config+0xd4>)
 8002e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e2e:	6013      	str	r3, [r2, #0]
 8002e30:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <SystemClock_Config+0xd4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e38:	607b      	str	r3, [r7, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e46:	2302      	movs	r3, #2
 8002e48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002e50:	2308      	movs	r3, #8
 8002e52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002e54:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002e58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e5e:	2304      	movs	r3, #4
 8002e60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e62:	f107 0320 	add.w	r3, r7, #32
 8002e66:	4618      	mov	r0, r3
 8002e68:	f012 f866 	bl	8014f38 <HAL_RCC_OscConfig>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002e72:	f001 fb8d 	bl	8004590 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e76:	230f      	movs	r3, #15
 8002e78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e82:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002e8e:	f107 030c 	add.w	r3, r7, #12
 8002e92:	2105      	movs	r1, #5
 8002e94:	4618      	mov	r0, r3
 8002e96:	f012 fabf 	bl	8015418 <HAL_RCC_ClockConfig>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002ea0:	f001 fb76 	bl	8004590 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002ea4:	f012 fb9e 	bl	80155e4 <HAL_RCC_EnableCSS>
}
 8002ea8:	bf00      	nop
 8002eaa:	3750      	adds	r7, #80	; 0x50
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40007000 	.word	0x40007000

08002eb8 <TIMxInit>:
 * 						  BIOSTIMx_Init (&htim2, 1000, 84);  //1ms  interrupt
 * 						  BIOSTIMx_Init (&htim3, 20000, 84); //20ms interrupt
 */

void TIMxInit(TIM_HandleTypeDef* htimx, uint16_t period, uint16_t prescaler)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	807b      	strh	r3, [r7, #2]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	803b      	strh	r3, [r7, #0]

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec8:	f107 030c 	add.w	r3, r7, #12
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
	int nvic = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]

	if(htimx == &htim1){
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a9b      	ldr	r2, [pc, #620]	; (8003148 <TIMxInit+0x290>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d105      	bne.n	8002eea <TIMxInit+0x32>
		htimx->Instance = TIM1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a9a      	ldr	r2, [pc, #616]	; (800314c <TIMxInit+0x294>)
 8002ee2:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8002ee4:	2319      	movs	r3, #25
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	e081      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim2)	{
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a98      	ldr	r2, [pc, #608]	; (8003150 <TIMxInit+0x298>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d106      	bne.n	8002f00 <TIMxInit+0x48>
		htimx->Instance = TIM2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ef8:	601a      	str	r2, [r3, #0]
		nvic = TIM2_IRQn;
 8002efa:	231c      	movs	r3, #28
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	e076      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim3)	{
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a94      	ldr	r2, [pc, #592]	; (8003154 <TIMxInit+0x29c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d105      	bne.n	8002f14 <TIMxInit+0x5c>
		htimx->Instance = TIM3;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a93      	ldr	r2, [pc, #588]	; (8003158 <TIMxInit+0x2a0>)
 8002f0c:	601a      	str	r2, [r3, #0]
		nvic = TIM3_IRQn;
 8002f0e:	231d      	movs	r3, #29
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	e06c      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim4)	{
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a91      	ldr	r2, [pc, #580]	; (800315c <TIMxInit+0x2a4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d105      	bne.n	8002f28 <TIMxInit+0x70>
		htimx->Instance = TIM4;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a90      	ldr	r2, [pc, #576]	; (8003160 <TIMxInit+0x2a8>)
 8002f20:	601a      	str	r2, [r3, #0]
		nvic = TIM4_IRQn;
 8002f22:	231e      	movs	r3, #30
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	e062      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim5)	{
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a8e      	ldr	r2, [pc, #568]	; (8003164 <TIMxInit+0x2ac>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d105      	bne.n	8002f3c <TIMxInit+0x84>
		htimx->Instance = TIM5;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a8d      	ldr	r2, [pc, #564]	; (8003168 <TIMxInit+0x2b0>)
 8002f34:	601a      	str	r2, [r3, #0]
		nvic = TIM5_IRQn;
 8002f36:	2332      	movs	r3, #50	; 0x32
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	e058      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim6)	{
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a8b      	ldr	r2, [pc, #556]	; (800316c <TIMxInit+0x2b4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d105      	bne.n	8002f50 <TIMxInit+0x98>
		htimx->Instance = TIM6;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a8a      	ldr	r2, [pc, #552]	; (8003170 <TIMxInit+0x2b8>)
 8002f48:	601a      	str	r2, [r3, #0]
		nvic = TIM6_DAC_IRQn;
 8002f4a:	2336      	movs	r3, #54	; 0x36
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	e04e      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim7)	{
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a88      	ldr	r2, [pc, #544]	; (8003174 <TIMxInit+0x2bc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d105      	bne.n	8002f64 <TIMxInit+0xac>
		htimx->Instance = TIM7;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a87      	ldr	r2, [pc, #540]	; (8003178 <TIMxInit+0x2c0>)
 8002f5c:	601a      	str	r2, [r3, #0]
		nvic = TIM7_IRQn;
 8002f5e:	2337      	movs	r3, #55	; 0x37
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	e044      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim8)	{
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a85      	ldr	r2, [pc, #532]	; (800317c <TIMxInit+0x2c4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d105      	bne.n	8002f78 <TIMxInit+0xc0>
		htimx->Instance = TIM8;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a84      	ldr	r2, [pc, #528]	; (8003180 <TIMxInit+0x2c8>)
 8002f70:	601a      	str	r2, [r3, #0]
		nvic = TIM8_CC_IRQn;
 8002f72:	232e      	movs	r3, #46	; 0x2e
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	e03a      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim9)	{
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a82      	ldr	r2, [pc, #520]	; (8003184 <TIMxInit+0x2cc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d105      	bne.n	8002f8c <TIMxInit+0xd4>
		htimx->Instance = TIM9;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a81      	ldr	r2, [pc, #516]	; (8003188 <TIMxInit+0x2d0>)
 8002f84:	601a      	str	r2, [r3, #0]
		nvic = TIM1_BRK_TIM9_IRQn;
 8002f86:	2318      	movs	r3, #24
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	e030      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim10)	{
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a7f      	ldr	r2, [pc, #508]	; (800318c <TIMxInit+0x2d4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d105      	bne.n	8002fa0 <TIMxInit+0xe8>
		htimx->Instance = TIM10;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a7e      	ldr	r2, [pc, #504]	; (8003190 <TIMxInit+0x2d8>)
 8002f98:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8002f9a:	2319      	movs	r3, #25
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	e026      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim11)	{
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a7c      	ldr	r2, [pc, #496]	; (8003194 <TIMxInit+0x2dc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d105      	bne.n	8002fb4 <TIMxInit+0xfc>
		htimx->Instance = TIM11;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a7b      	ldr	r2, [pc, #492]	; (8003198 <TIMxInit+0x2e0>)
 8002fac:	601a      	str	r2, [r3, #0]
		nvic = TIM1_TRG_COM_TIM11_IRQn;
 8002fae:	231a      	movs	r3, #26
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	e01c      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim12)	{
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a79      	ldr	r2, [pc, #484]	; (800319c <TIMxInit+0x2e4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d105      	bne.n	8002fc8 <TIMxInit+0x110>
		htimx->Instance = TIM12;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a78      	ldr	r2, [pc, #480]	; (80031a0 <TIMxInit+0x2e8>)
 8002fc0:	601a      	str	r2, [r3, #0]
		nvic = TIM8_BRK_TIM12_IRQn;
 8002fc2:	232b      	movs	r3, #43	; 0x2b
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	e012      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim13)	{
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a76      	ldr	r2, [pc, #472]	; (80031a4 <TIMxInit+0x2ec>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d105      	bne.n	8002fdc <TIMxInit+0x124>
		htimx->Instance = TIM13;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a75      	ldr	r2, [pc, #468]	; (80031a8 <TIMxInit+0x2f0>)
 8002fd4:	601a      	str	r2, [r3, #0]
		nvic = TIM8_UP_TIM13_IRQn;
 8002fd6:	232c      	movs	r3, #44	; 0x2c
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	e008      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim14)	{
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a73      	ldr	r2, [pc, #460]	; (80031ac <TIMxInit+0x2f4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d104      	bne.n	8002fee <TIMxInit+0x136>
		htimx->Instance = TIM14;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a72      	ldr	r2, [pc, #456]	; (80031b0 <TIMxInit+0x2f8>)
 8002fe8:	601a      	str	r2, [r3, #0]
		nvic = TIM8_TRG_COM_TIM14_IRQn;
 8002fea:	232d      	movs	r3, #45	; 0x2d
 8002fec:	617b      	str	r3, [r7, #20]
	}


	htimx->Init.Prescaler = prescaler;
 8002fee:	883a      	ldrh	r2, [r7, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = period;
 8002ffa:	887a      	ldrh	r2, [r7, #2]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	60da      	str	r2, [r3, #12]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f012 fd5e 	bl	8015ac8 <HAL_TIM_Base_Init>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <TIMxInit+0x15e>
	{
		Error_Handler();
 8003012:	f001 fabd 	bl	8004590 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 800301e:	f107 030c 	add.w	r3, r7, #12
 8003022:	4619      	mov	r1, r3
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f013 fcbf 	bl	80169a8 <HAL_TIMEx_MasterConfigSynchronization>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <TIMxInit+0x17c>
	{
		Error_Handler();
 8003030:	f001 faae 	bl	8004590 <Error_Handler>
	}

	if(htimx == &htim1){
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a44      	ldr	r2, [pc, #272]	; (8003148 <TIMxInit+0x290>)
 8003038:	4293      	cmp	r3, r2
 800303a:	f000 80cb 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef QEI1_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM1_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim2)	{
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a43      	ldr	r2, [pc, #268]	; (8003150 <TIMxInit+0x298>)
 8003042:	4293      	cmp	r3, r2
 8003044:	f000 80c6 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef FREERTOS_USED
		HAL_NVIC_SetPriority(nvic, TIM2_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim3)	{
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a42      	ldr	r2, [pc, #264]	; (8003154 <TIMxInit+0x29c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	f000 80c1 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM3_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim4)	{
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a41      	ldr	r2, [pc, #260]	; (800315c <TIMxInit+0x2a4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	f000 80bc 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef QEI4_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM4_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim5)	{
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a41      	ldr	r2, [pc, #260]	; (8003164 <TIMxInit+0x2ac>)
 8003060:	4293      	cmp	r3, r2
 8003062:	f000 80b7 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM5_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim6)	{
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a40      	ldr	r2, [pc, #256]	; (800316c <TIMxInit+0x2b4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d10c      	bne.n	8003088 <TIMxInit+0x1d0>
		HAL_NVIC_SetPriority(nvic, TIM6_IRQ_PRIO, 0);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	b25b      	sxtb	r3, r3
 8003072:	2200      	movs	r2, #0
 8003074:	2107      	movs	r1, #7
 8003076:	4618      	mov	r0, r3
 8003078:	f00e fffc 	bl	8012074 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	b25b      	sxtb	r3, r3
 8003080:	4618      	mov	r0, r3
 8003082:	f00f f813 	bl	80120ac <HAL_NVIC_EnableIRQ>
 8003086:	e0a5      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim7)	{
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a3a      	ldr	r2, [pc, #232]	; (8003174 <TIMxInit+0x2bc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d10c      	bne.n	80030aa <TIMxInit+0x1f2>
		HAL_NVIC_SetPriority(nvic, TIM7_IRQ_PRIO, 0);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	b25b      	sxtb	r3, r3
 8003094:	2200      	movs	r2, #0
 8003096:	210e      	movs	r1, #14
 8003098:	4618      	mov	r0, r3
 800309a:	f00e ffeb 	bl	8012074 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	b25b      	sxtb	r3, r3
 80030a2:	4618      	mov	r0, r3
 80030a4:	f00f f802 	bl	80120ac <HAL_NVIC_EnableIRQ>
 80030a8:	e094      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim8)	{
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a33      	ldr	r2, [pc, #204]	; (800317c <TIMxInit+0x2c4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	f000 8090 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef QEI6_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM8_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim9)	{
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a33      	ldr	r2, [pc, #204]	; (8003184 <TIMxInit+0x2cc>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	f000 808b 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM9_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim10)	{
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a32      	ldr	r2, [pc, #200]	; (800318c <TIMxInit+0x2d4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d10c      	bne.n	80030e0 <TIMxInit+0x228>
		HAL_NVIC_SetPriority(nvic, TIM10_IRQ_PRIO, 0);
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	b25b      	sxtb	r3, r3
 80030ca:	2200      	movs	r2, #0
 80030cc:	210e      	movs	r1, #14
 80030ce:	4618      	mov	r0, r3
 80030d0:	f00e ffd0 	bl	8012074 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	b25b      	sxtb	r3, r3
 80030d8:	4618      	mov	r0, r3
 80030da:	f00e ffe7 	bl	80120ac <HAL_NVIC_EnableIRQ>
 80030de:	e079      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim11)	{
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a2c      	ldr	r2, [pc, #176]	; (8003194 <TIMxInit+0x2dc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d10c      	bne.n	8003102 <TIMxInit+0x24a>
		HAL_NVIC_SetPriority(nvic, TIM11_IRQ_PRIO, 0);
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	b25b      	sxtb	r3, r3
 80030ec:	2200      	movs	r2, #0
 80030ee:	210e      	movs	r1, #14
 80030f0:	4618      	mov	r0, r3
 80030f2:	f00e ffbf 	bl	8012074 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	b25b      	sxtb	r3, r3
 80030fa:	4618      	mov	r0, r3
 80030fc:	f00e ffd6 	bl	80120ac <HAL_NVIC_EnableIRQ>
 8003100:	e068      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim12)	{
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a25      	ldr	r2, [pc, #148]	; (800319c <TIMxInit+0x2e4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d10c      	bne.n	8003124 <TIMxInit+0x26c>
		HAL_NVIC_SetPriority(nvic, TIM12_IRQ_PRIO, 0);
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	b25b      	sxtb	r3, r3
 800310e:	2200      	movs	r2, #0
 8003110:	210e      	movs	r1, #14
 8003112:	4618      	mov	r0, r3
 8003114:	f00e ffae 	bl	8012074 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	b25b      	sxtb	r3, r3
 800311c:	4618      	mov	r0, r3
 800311e:	f00e ffc5 	bl	80120ac <HAL_NVIC_EnableIRQ>
 8003122:	e057      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim13)	{
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a1f      	ldr	r2, [pc, #124]	; (80031a4 <TIMxInit+0x2ec>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d143      	bne.n	80031b4 <TIMxInit+0x2fc>
		HAL_NVIC_SetPriority(nvic, TIM13_IRQ_PRIO, 0);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	b25b      	sxtb	r3, r3
 8003130:	2200      	movs	r2, #0
 8003132:	210e      	movs	r1, #14
 8003134:	4618      	mov	r0, r3
 8003136:	f00e ff9d 	bl	8012074 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	b25b      	sxtb	r3, r3
 800313e:	4618      	mov	r0, r3
 8003140:	f00e ffb4 	bl	80120ac <HAL_NVIC_EnableIRQ>
 8003144:	e046      	b.n	80031d4 <TIMxInit+0x31c>
 8003146:	bf00      	nop
 8003148:	20006418 	.word	0x20006418
 800314c:	40010000 	.word	0x40010000
 8003150:	2000651c 	.word	0x2000651c
 8003154:	200061cc 	.word	0x200061cc
 8003158:	40000400 	.word	0x40000400
 800315c:	20006008 	.word	0x20006008
 8003160:	40000800 	.word	0x40000800
 8003164:	2000618c 	.word	0x2000618c
 8003168:	40000c00 	.word	0x40000c00
 800316c:	200063d8 	.word	0x200063d8
 8003170:	40001000 	.word	0x40001000
 8003174:	2000667c 	.word	0x2000667c
 8003178:	40001400 	.word	0x40001400
 800317c:	20005fc8 	.word	0x20005fc8
 8003180:	40010400 	.word	0x40010400
 8003184:	20006458 	.word	0x20006458
 8003188:	40014000 	.word	0x40014000
 800318c:	200060e8 	.word	0x200060e8
 8003190:	40014400 	.word	0x40014400
 8003194:	20006330 	.word	0x20006330
 8003198:	40014800 	.word	0x40014800
 800319c:	2000663c 	.word	0x2000663c
 80031a0:	40001800 	.word	0x40001800
 80031a4:	200062b0 	.word	0x200062b0
 80031a8:	40001c00 	.word	0x40001c00
 80031ac:	200065fc 	.word	0x200065fc
 80031b0:	40002000 	.word	0x40002000
	}
	else if(htimx == &htim14)	{
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a0c      	ldr	r2, [pc, #48]	; (80031e8 <TIMxInit+0x330>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d10b      	bne.n	80031d4 <TIMxInit+0x31c>
		HAL_NVIC_SetPriority(nvic, TIM14_IRQ_PRIO, 0);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	b25b      	sxtb	r3, r3
 80031c0:	2200      	movs	r2, #0
 80031c2:	210e      	movs	r1, #14
 80031c4:	4618      	mov	r0, r3
 80031c6:	f00e ff55 	bl	8012074 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	b25b      	sxtb	r3, r3
 80031ce:	4618      	mov	r0, r3
 80031d0:	f00e ff6c 	bl	80120ac <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Base_Start(htimx);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f012 fca2 	bl	8015b1e <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(htimx);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f012 fcc3 	bl	8015b66 <HAL_TIM_Base_Start_IT>

}
 80031e0:	bf00      	nop
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	200065fc 	.word	0x200065fc

080031ec <UARTInit>:
 * 						  rxstate				,can be ENABLE (enable USART1 receive interrupt) or DISBALE
 * Function Return		: None
 * Function Example		: UARTxInit(&huart1, 115200, ENABLE, 0, 0);
 */
void UARTInit(UART_HandleTypeDef* huartx, uint32_t baudrate, FunctionalState rxstate)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	4613      	mov	r3, r2
 80031f8:	71fb      	strb	r3, [r7, #7]
	IRQn_Type nvic;
	uint8_t *rcv_data;

	if (huartx == &huart1){
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4a6e      	ldr	r2, [pc, #440]	; (80033b8 <UARTInit+0x1cc>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d107      	bne.n	8003212 <UARTInit+0x26>
		huartx->Instance = USART1;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4a6d      	ldr	r2, [pc, #436]	; (80033bc <UARTInit+0x1d0>)
 8003206:	601a      	str	r2, [r3, #0]
		nvic = USART1_IRQn;
 8003208:	2325      	movs	r3, #37	; 0x25
 800320a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart1_data;
 800320c:	4b6c      	ldr	r3, [pc, #432]	; (80033c0 <UARTInit+0x1d4>)
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	e036      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart2){
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4a6b      	ldr	r2, [pc, #428]	; (80033c4 <UARTInit+0x1d8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d107      	bne.n	800322a <UARTInit+0x3e>
		huartx->Instance = USART2;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4a6a      	ldr	r2, [pc, #424]	; (80033c8 <UARTInit+0x1dc>)
 800321e:	601a      	str	r2, [r3, #0]
		nvic = USART2_IRQn;
 8003220:	2326      	movs	r3, #38	; 0x26
 8003222:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart2_data;
 8003224:	4b69      	ldr	r3, [pc, #420]	; (80033cc <UARTInit+0x1e0>)
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	e02a      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart3){
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4a68      	ldr	r2, [pc, #416]	; (80033d0 <UARTInit+0x1e4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d107      	bne.n	8003242 <UARTInit+0x56>
		huartx->Instance = USART3;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4a67      	ldr	r2, [pc, #412]	; (80033d4 <UARTInit+0x1e8>)
 8003236:	601a      	str	r2, [r3, #0]
		nvic = USART3_IRQn;
 8003238:	2327      	movs	r3, #39	; 0x27
 800323a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart3_data;
 800323c:	4b66      	ldr	r3, [pc, #408]	; (80033d8 <UARTInit+0x1ec>)
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	e01e      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart4){
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4a65      	ldr	r2, [pc, #404]	; (80033dc <UARTInit+0x1f0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d107      	bne.n	800325a <UARTInit+0x6e>
		huartx->Instance = UART4;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4a64      	ldr	r2, [pc, #400]	; (80033e0 <UARTInit+0x1f4>)
 800324e:	601a      	str	r2, [r3, #0]
		nvic = UART4_IRQn;
 8003250:	2334      	movs	r3, #52	; 0x34
 8003252:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart4_data;
 8003254:	4b63      	ldr	r3, [pc, #396]	; (80033e4 <UARTInit+0x1f8>)
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	e012      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart5){
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4a62      	ldr	r2, [pc, #392]	; (80033e8 <UARTInit+0x1fc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d107      	bne.n	8003272 <UARTInit+0x86>
		huartx->Instance = UART5;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4a61      	ldr	r2, [pc, #388]	; (80033ec <UARTInit+0x200>)
 8003266:	601a      	str	r2, [r3, #0]
		nvic = UART5_IRQn;
 8003268:	2335      	movs	r3, #53	; 0x35
 800326a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart5_data;
 800326c:	4b60      	ldr	r3, [pc, #384]	; (80033f0 <UARTInit+0x204>)
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	e006      	b.n	8003280 <UARTInit+0x94>
	}else{
		huartx->Instance = USART6;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4a5f      	ldr	r2, [pc, #380]	; (80033f4 <UARTInit+0x208>)
 8003276:	601a      	str	r2, [r3, #0]
		nvic = USART6_IRQn;
 8003278:	2347      	movs	r3, #71	; 0x47
 800327a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart6_data;
 800327c:	4b5e      	ldr	r3, [pc, #376]	; (80033f8 <UARTInit+0x20c>)
 800327e:	613b      	str	r3, [r7, #16]
	}


	huartx->Init.BaudRate = baudrate;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	605a      	str	r2, [r3, #4]
	huartx->Init.WordLength = UART_WORDLENGTH_8B;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	609a      	str	r2, [r3, #8]
	huartx->Init.StopBits = UART_STOPBITS_1;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	60da      	str	r2, [r3, #12]
	huartx->Init.Parity = UART_PARITY_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	611a      	str	r2, [r3, #16]
	huartx->Init.Mode = UART_MODE_TX_RX;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	220c      	movs	r2, #12
 800329c:	615a      	str	r2, [r3, #20]
	huartx->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	619a      	str	r2, [r3, #24]
	huartx->Init.OverSampling = UART_OVERSAMPLING_16;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	61da      	str	r2, [r3, #28]


	if (HAL_UART_Init(huartx) != HAL_OK)
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f013 fc0c 	bl	8016ac8 <HAL_UART_Init>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <UARTInit+0xce>
	{
		Error_Handler();
 80032b6:	f001 f96b 	bl	8004590 <Error_Handler>
	}

	if(rxstate == ENABLE){
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d176      	bne.n	80033ae <UARTInit+0x1c2>
		if(huartx == &huart2){
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4a40      	ldr	r2, [pc, #256]	; (80033c4 <UARTInit+0x1d8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d119      	bne.n	80032fc <UARTInit+0x110>

			HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 80032c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032cc:	2200      	movs	r2, #0
 80032ce:	2105      	movs	r1, #5
 80032d0:	4618      	mov	r0, r3
 80032d2:	f00e fecf 	bl	8012074 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 80032d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032da:	4618      	mov	r0, r3
 80032dc:	f00e ff02 	bl	80120e4 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 80032e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f00e fee1 	bl	80120ac <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0220 	orr.w	r2, r2, #32
 80032f8:	60da      	str	r2, [r3, #12]
			HAL_NVIC_EnableIRQ(nvic);
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);

		}
	}
}
 80032fa:	e058      	b.n	80033ae <UARTInit+0x1c2>
		}else if(huartx == &huart3){
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4a34      	ldr	r2, [pc, #208]	; (80033d0 <UARTInit+0x1e4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d119      	bne.n	8003338 <UARTInit+0x14c>
			HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 8003304:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003308:	2200      	movs	r2, #0
 800330a:	2104      	movs	r1, #4
 800330c:	4618      	mov	r0, r3
 800330e:	f00e feb1 	bl	8012074 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 8003312:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003316:	4618      	mov	r0, r3
 8003318:	f00e fee4 	bl	80120e4 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 800331c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003320:	4618      	mov	r0, r3
 8003322:	f00e fec3 	bl	80120ac <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0220 	orr.w	r2, r2, #32
 8003334:	60da      	str	r2, [r3, #12]
}
 8003336:	e03a      	b.n	80033ae <UARTInit+0x1c2>
		}else if(huartx == &huart4){
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4a28      	ldr	r2, [pc, #160]	; (80033dc <UARTInit+0x1f0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d119      	bne.n	8003374 <UARTInit+0x188>
			HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 8003340:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003344:	2200      	movs	r2, #0
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f00e fe93 	bl	8012074 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 800334e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003352:	4618      	mov	r0, r3
 8003354:	f00e fec6 	bl	80120e4 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8003358:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800335c:	4618      	mov	r0, r3
 800335e:	f00e fea5 	bl	80120ac <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0220 	orr.w	r2, r2, #32
 8003370:	60da      	str	r2, [r3, #12]
}
 8003372:	e01c      	b.n	80033ae <UARTInit+0x1c2>
		}else if(huartx == &huart5){
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4a1c      	ldr	r2, [pc, #112]	; (80033e8 <UARTInit+0x1fc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d118      	bne.n	80033ae <UARTInit+0x1c2>
			HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 800337c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003380:	2200      	movs	r2, #0
 8003382:	210e      	movs	r1, #14
 8003384:	4618      	mov	r0, r3
 8003386:	f00e fe75 	bl	8012074 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 800338a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800338e:	4618      	mov	r0, r3
 8003390:	f00e fea8 	bl	80120e4 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8003394:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003398:	4618      	mov	r0, r3
 800339a:	f00e fe87 	bl	80120ac <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0220 	orr.w	r2, r2, #32
 80033ac:	60da      	str	r2, [r3, #12]
}
 80033ae:	bf00      	nop
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	200062f0 	.word	0x200062f0
 80033bc:	40011000 	.word	0x40011000
 80033c0:	20005fc4 	.word	0x20005fc4
 80033c4:	2000655c 	.word	0x2000655c
 80033c8:	40004400 	.word	0x40004400
 80033cc:	20006370 	.word	0x20006370
 80033d0:	200060a8 	.word	0x200060a8
 80033d4:	40004800 	.word	0x40004800
 80033d8:	2000620d 	.word	0x2000620d
 80033dc:	200064dc 	.word	0x200064dc
 80033e0:	40004c00 	.word	0x40004c00
 80033e4:	200064d8 	.word	0x200064d8
 80033e8:	20006210 	.word	0x20006210
 80033ec:	40005000 	.word	0x40005000
 80033f0:	20006188 	.word	0x20006188
 80033f4:	40011400 	.word	0x40011400
 80033f8:	2000620c 	.word	0x2000620c

080033fc <UARTx_DMA_Rx_Init>:
 * 						  baudrate				,normally set to 115200 according to UTM ROBOCON UART COMMUNICATION PROTOCOL.
 * Function Return		: None
 * Function Example		: UARTx_DMA_Rx_Init(&huart1, &hdma_usart2_rx, 115200);
 */
void UARTx_DMA_Rx_Init(UART_HandleTypeDef* huartx, DMA_HandleTypeDef* hdma_usart_rx,  uint32_t baudrate)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	4b5a      	ldr	r3, [pc, #360]	; (8003578 <UARTx_DMA_Rx_Init+0x17c>)
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	4a59      	ldr	r2, [pc, #356]	; (8003578 <UARTx_DMA_Rx_Init+0x17c>)
 8003412:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003416:	6313      	str	r3, [r2, #48]	; 0x30
 8003418:	4b57      	ldr	r3, [pc, #348]	; (8003578 <UARTx_DMA_Rx_Init+0x17c>)
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	697b      	ldr	r3, [r7, #20]
	IRQn_Type nvic;
	uint32_t DMA_CHANNEL;

	if(hdma_usart_rx == &hdma_usart2_rx){
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	4a55      	ldr	r2, [pc, #340]	; (800357c <UARTx_DMA_Rx_Init+0x180>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d119      	bne.n	8003460 <UARTx_DMA_Rx_Init+0x64>

		nvic = DMA1_Stream5_IRQn;
 800342c:	2310      	movs	r3, #16
 800342e:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream5;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	4a53      	ldr	r2, [pc, #332]	; (8003580 <UARTx_DMA_Rx_Init+0x184>)
 8003434:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8003436:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800343a:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 800343c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003440:	2200      	movs	r2, #0
 8003442:	2105      	movs	r1, #5
 8003444:	4618      	mov	r0, r3
 8003446:	f00e fe15 	bl	8012074 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 800344a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800344e:	4618      	mov	r0, r3
 8003450:	f00e fe48 	bl	80120e4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003454:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003458:	4618      	mov	r0, r3
 800345a:	f00e fe27 	bl	80120ac <HAL_NVIC_EnableIRQ>
 800345e:	e058      	b.n	8003512 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_usart3_rx){
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4a48      	ldr	r2, [pc, #288]	; (8003584 <UARTx_DMA_Rx_Init+0x188>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d119      	bne.n	800349c <UARTx_DMA_Rx_Init+0xa0>

		nvic = DMA1_Stream1_IRQn;
 8003468:	230c      	movs	r3, #12
 800346a:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream1;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	4a46      	ldr	r2, [pc, #280]	; (8003588 <UARTx_DMA_Rx_Init+0x18c>)
 8003470:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8003472:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003476:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 8003478:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800347c:	2200      	movs	r2, #0
 800347e:	2104      	movs	r1, #4
 8003480:	4618      	mov	r0, r3
 8003482:	f00e fdf7 	bl	8012074 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003486:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800348a:	4618      	mov	r0, r3
 800348c:	f00e fe2a 	bl	80120e4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003490:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003494:	4618      	mov	r0, r3
 8003496:	f00e fe09 	bl	80120ac <HAL_NVIC_EnableIRQ>
 800349a:	e03a      	b.n	8003512 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_uart4_rx){
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4a3b      	ldr	r2, [pc, #236]	; (800358c <UARTx_DMA_Rx_Init+0x190>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d119      	bne.n	80034d8 <UARTx_DMA_Rx_Init+0xdc>

		nvic = DMA1_Stream2_IRQn;
 80034a4:	230d      	movs	r3, #13
 80034a6:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream2;
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4a39      	ldr	r2, [pc, #228]	; (8003590 <UARTx_DMA_Rx_Init+0x194>)
 80034ac:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 80034ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034b2:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 80034b4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034b8:	2200      	movs	r2, #0
 80034ba:	2100      	movs	r1, #0
 80034bc:	4618      	mov	r0, r3
 80034be:	f00e fdd9 	bl	8012074 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 80034c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f00e fe0c 	bl	80120e4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 80034cc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f00e fdeb 	bl	80120ac <HAL_NVIC_EnableIRQ>
 80034d6:	e01c      	b.n	8003512 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_uart5_rx){
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	4a2e      	ldr	r2, [pc, #184]	; (8003594 <UARTx_DMA_Rx_Init+0x198>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d118      	bne.n	8003512 <UARTx_DMA_Rx_Init+0x116>

		nvic = DMA1_Stream0_IRQn;
 80034e0:	230b      	movs	r3, #11
 80034e2:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream0;
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	4a2c      	ldr	r2, [pc, #176]	; (8003598 <UARTx_DMA_Rx_Init+0x19c>)
 80034e8:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 80034ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034ee:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 80034f0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034f4:	2200      	movs	r2, #0
 80034f6:	210e      	movs	r1, #14
 80034f8:	4618      	mov	r0, r3
 80034fa:	f00e fdbb 	bl	8012074 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 80034fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003502:	4618      	mov	r0, r3
 8003504:	f00e fdee 	bl	80120e4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003508:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800350c:	4618      	mov	r0, r3
 800350e:	f00e fdcd 	bl	80120ac <HAL_NVIC_EnableIRQ>

	}

	UARTInit(huartx, baudrate, DISABLE);
 8003512:	2200      	movs	r2, #0
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f7ff fe68 	bl	80031ec <UARTInit>

	hdma_usart_rx->Init.Channel = DMA_CHANNEL;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	605a      	str	r2, [r3, #4]
	hdma_usart_rx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2200      	movs	r2, #0
 8003526:	609a      	str	r2, [r3, #8]
	hdma_usart_rx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2200      	movs	r2, #0
 800352c:	60da      	str	r2, [r3, #12]
	hdma_usart_rx->Init.MemInc = DMA_MINC_ENABLE;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003534:	611a      	str	r2, [r3, #16]
	hdma_usart_rx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2200      	movs	r2, #0
 800353a:	615a      	str	r2, [r3, #20]
	hdma_usart_rx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2200      	movs	r2, #0
 8003540:	619a      	str	r2, [r3, #24]
	hdma_usart_rx->Init.Mode = DMA_NORMAL;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2200      	movs	r2, #0
 8003546:	61da      	str	r2, [r3, #28]
	hdma_usart_rx->Init.Priority = DMA_PRIORITY_LOW;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2200      	movs	r2, #0
 800354c:	621a      	str	r2, [r3, #32]
	hdma_usart_rx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2200      	movs	r2, #0
 8003552:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DMA_Init(hdma_usart_rx) != HAL_OK)
 8003554:	68b8      	ldr	r0, [r7, #8]
 8003556:	f00e fdd3 	bl	8012100 <HAL_DMA_Init>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <UARTx_DMA_Rx_Init+0x168>
	{
		Error_Handler();
 8003560:	f001 f816 	bl	8004590 <Error_Handler>
	}

	__HAL_LINKDMA(huartx,hdmarx, *hdma_usart_rx);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	635a      	str	r2, [r3, #52]	; 0x34
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003570:	bf00      	nop
 8003572:	3720      	adds	r7, #32
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40023800 	.word	0x40023800
 800357c:	20005f64 	.word	0x20005f64
 8003580:	40026088 	.word	0x40026088
 8003584:	20006048 	.word	0x20006048
 8003588:	40026028 	.word	0x40026028
 800358c:	20005f04 	.word	0x20005f04
 8003590:	40026040 	.word	0x40026040
 8003594:	2000659c 	.word	0x2000659c
 8003598:	40026010 	.word	0x40026010

0800359c <USART1_IRQHandler>:
void UARTPrintString_IT(UART_HandleTypeDef* huartx, char s[]){
	if(HAL_UART_GetState(huartx) == HAL_UART_STATE_READY)
		HAL_UART_Transmit_IT(huartx, (uint8_t *)s, strlen(s));
}

void  USART1_IRQHandler(void){
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0


	HAL_UART_IRQHandler(&huart1);
 80035a0:	4802      	ldr	r0, [pc, #8]	; (80035ac <USART1_IRQHandler+0x10>)
 80035a2:	f013 fbcd 	bl	8016d40 <HAL_UART_IRQHandler>
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	200062f0 	.word	0x200062f0

080035b0 <USART2_IRQHandler>:

void  USART2_IRQHandler(void){
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart2);
 80035b4:	4802      	ldr	r0, [pc, #8]	; (80035c0 <USART2_IRQHandler+0x10>)
 80035b6:	f013 fbc3 	bl	8016d40 <HAL_UART_IRQHandler>
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	2000655c 	.word	0x2000655c

080035c4 <USART3_IRQHandler>:

void  USART3_IRQHandler(void){
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart3);
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <USART3_IRQHandler+0x10>)
 80035ca:	f013 fbb9 	bl	8016d40 <HAL_UART_IRQHandler>
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	200060a8 	.word	0x200060a8

080035d8 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart4);
 80035dc:	4802      	ldr	r0, [pc, #8]	; (80035e8 <UART4_IRQHandler+0x10>)
 80035de:	f013 fbaf 	bl	8016d40 <HAL_UART_IRQHandler>
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	200064dc 	.word	0x200064dc

080035ec <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart5);
 80035f0:	4802      	ldr	r0, [pc, #8]	; (80035fc <UART5_IRQHandler+0x10>)
 80035f2:	f013 fba5 	bl	8016d40 <HAL_UART_IRQHandler>
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20006210 	.word	0x20006210

08003600 <USART6_IRQHandler>:

void  USART6_IRQHandler(void){
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart6);
 8003604:	4802      	ldr	r0, [pc, #8]	; (8003610 <USART6_IRQHandler+0x10>)
 8003606:	f013 fb9b 	bl	8016d40 <HAL_UART_IRQHandler>
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20006498 	.word	0x20006498

08003614 <CANxInit>:
 * Function Return		: CAN_InitStatus				Constant indicates initialization succeed which will be
  *        											    CAN_InitStatus_Failed or CAN_InitStatus_Success.
 * Function Example		: CAN1_Init(&hcan1,4,CAN_Filter_FIFO0,0,0,13,1,1);
 */
void CANxInit(CAN_HandleTypeDef* hcanx,uint16_t prescaler,uint32_t FilterFIFOAssignment,uint16_t CAN_FilterId_11bits,
		uint16_t CAN_FilterMaskId_11bits,uint8_t CAN_FilterNumber, uint8_t rate){
 8003614:	b580      	push	{r7, lr}
 8003616:	b08e      	sub	sp, #56	; 0x38
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	607a      	str	r2, [r7, #4]
 800361e:	461a      	mov	r2, r3
 8003620:	460b      	mov	r3, r1
 8003622:	817b      	strh	r3, [r7, #10]
 8003624:	4613      	mov	r3, r2
 8003626:	813b      	strh	r3, [r7, #8]

	CAN_FilterTypeDef sFilterConfig = {0};
 8003628:	f107 0310 	add.w	r3, r7, #16
 800362c:	2228      	movs	r2, #40	; 0x28
 800362e:	2100      	movs	r1, #0
 8003630:	4618      	mov	r0, r3
 8003632:	f017 f87b 	bl	801a72c <memset>

	if(hcanx == &hcan1){
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4a53      	ldr	r2, [pc, #332]	; (8003788 <CANxInit+0x174>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d103      	bne.n	8003646 <CANxInit+0x32>
		hcanx->Instance = CAN1;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4a52      	ldr	r2, [pc, #328]	; (800378c <CANxInit+0x178>)
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	e002      	b.n	800364c <CANxInit+0x38>
	}else{
		hcanx->Instance = CAN2;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a51      	ldr	r2, [pc, #324]	; (8003790 <CANxInit+0x17c>)
 800364a:	601a      	str	r2, [r3, #0]
	}


	hcanx->Init.Prescaler = prescaler;
 800364c:	897a      	ldrh	r2, [r7, #10]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	605a      	str	r2, [r3, #4]
	hcanx->Init.Mode = CAN_MODE_NORMAL;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	609a      	str	r2, [r3, #8]

	hcanx->Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	60da      	str	r2, [r3, #12]
	if(rate == CAN_1MHz){
 800365e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003662:	2b01      	cmp	r3, #1
 8003664:	d108      	bne.n	8003678 <CANxInit+0x64>
		//sampling point 85.71%
		hcanx->Init.TimeSeg1 = CAN_BS1_11TQ;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800366c:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_2TQ;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003674:	615a      	str	r2, [r3, #20]
 8003676:	e00b      	b.n	8003690 <CANxInit+0x7c>
	}else if(rate == CAN_500KHz){
 8003678:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800367c:	2b00      	cmp	r3, #0
 800367e:	d107      	bne.n	8003690 <CANxInit+0x7c>
		//sampling point 71.42%
		hcanx->Init.TimeSeg1 = CAN_BS1_14TQ;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8003686:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_6TQ;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 800368e:	615a      	str	r2, [r3, #20]
	}
	hcanx->Init.TimeTriggeredMode = DISABLE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	761a      	strb	r2, [r3, #24]
	hcanx->Init.AutoBusOff = ENABLE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	765a      	strb	r2, [r3, #25]
	hcanx->Init.AutoWakeUp = DISABLE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	769a      	strb	r2, [r3, #26]
	hcanx->Init.AutoRetransmission = DISABLE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	76da      	strb	r2, [r3, #27]
	hcanx->Init.ReceiveFifoLocked = DISABLE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	771a      	strb	r2, [r3, #28]
	hcanx->Init.TransmitFifoPriority = DISABLE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(hcanx) != HAL_OK)
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f00d fd55 	bl	8011164 <HAL_CAN_Init>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <CANxInit+0xb0>
	{
		Error_Handler();
 80036c0:	f000 ff66 	bl	8004590 <Error_Handler>
	}

	sFilterConfig.SlaveStartFilterBank = 14;
 80036c4:	230e      	movs	r3, #14
 80036c6:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80036c8:	2301      	movs	r3, #1
 80036ca:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment=FilterFIFOAssignment; //set fifo assignment
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh= CAN_FilterId_11bits <<5; //the ID that the filter looks for (switch this for the other microcontroller)
 80036d4:	893b      	ldrh	r3, [r7, #8]
 80036d6:	015b      	lsls	r3, r3, #5
 80036d8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow=0;
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh=CAN_FilterMaskId_11bits <<5;
 80036de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80036e2:	015b      	lsls	r3, r3, #5
 80036e4:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow=0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 80036ea:	2301      	movs	r3, #1
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterBank = CAN_FilterNumber;
 80036ee:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(hcanx, &sFilterConfig);
 80036f4:	f107 0310 	add.w	r3, r7, #16
 80036f8:	4619      	mov	r1, r3
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f00d fe2e 	bl	801135c <HAL_CAN_ConfigFilter>



	if(hcanx == &hcan1){
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4a21      	ldr	r2, [pc, #132]	; (8003788 <CANxInit+0x174>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d11c      	bne.n	8003742 <CANxInit+0x12e>

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10c      	bne.n	8003728 <CANxInit+0x114>
			/* CAN1_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX0_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 800370e:	2200      	movs	r2, #0
 8003710:	2101      	movs	r1, #1
 8003712:	2014      	movs	r0, #20
 8003714:	f00e fcae 	bl	8012074 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003718:	2014      	movs	r0, #20
 800371a:	f00e fcc7 	bl	80120ac <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 800371e:	2102      	movs	r1, #2
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f00e f961 	bl	80119e8 <HAL_CAN_ActivateNotification>
 8003726:	e028      	b.n	800377a <CANxInit+0x166>

		}else{
			/* CAN1_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX1_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 8003728:	2200      	movs	r2, #0
 800372a:	2101      	movs	r1, #1
 800372c:	2015      	movs	r0, #21
 800372e:	f00e fca1 	bl	8012074 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003732:	2015      	movs	r0, #21
 8003734:	f00e fcba 	bl	80120ac <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003738:	2110      	movs	r1, #16
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f00e f954 	bl	80119e8 <HAL_CAN_ActivateNotification>
 8003740:	e01b      	b.n	800377a <CANxInit+0x166>
		}
	}else{

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10c      	bne.n	8003762 <CANxInit+0x14e>
			/* CAN2_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX0_IRQn, CAN2_FIFO0_IRQ_PRIO, 0);
 8003748:	2200      	movs	r2, #0
 800374a:	2101      	movs	r1, #1
 800374c:	2040      	movs	r0, #64	; 0x40
 800374e:	f00e fc91 	bl	8012074 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003752:	2040      	movs	r0, #64	; 0x40
 8003754:	f00e fcaa 	bl	80120ac <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003758:	2102      	movs	r1, #2
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f00e f944 	bl	80119e8 <HAL_CAN_ActivateNotification>
 8003760:	e00b      	b.n	800377a <CANxInit+0x166>
		}else{
			/* CAN2_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX1_IRQn, CAN2_FIFO1_IRQ_PRIO, 0);
 8003762:	2200      	movs	r2, #0
 8003764:	2102      	movs	r1, #2
 8003766:	2041      	movs	r0, #65	; 0x41
 8003768:	f00e fc84 	bl	8012074 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800376c:	2041      	movs	r0, #65	; 0x41
 800376e:	f00e fc9d 	bl	80120ac <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003772:	2110      	movs	r1, #16
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f00e f937 	bl	80119e8 <HAL_CAN_ActivateNotification>
		}
	}

	HAL_CAN_Start(hcanx);
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f00d fece 	bl	801151c <HAL_CAN_Start>

}
 8003780:	bf00      	nop
 8003782:	3738      	adds	r7, #56	; 0x38
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	2000a370 	.word	0x2000a370
 800378c:	40006400 	.word	0x40006400
 8003790:	40006800 	.word	0x40006800

08003794 <CAN_TxMsg>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsg(CAN_HandleTypeDef* hcanx,uint32_t StdId_11bits,uint8_t *Msg,uint8_t len)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b090      	sub	sp, #64	; 0x40
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	70fb      	strb	r3, [r7, #3]
//	sys.rns_busy = 1;
	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 80037a2:	bf00      	nop
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f00d ffd8 	bl	801175a <HAL_CAN_GetTxMailboxesFreeLevel>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f9      	beq.n	80037a4 <CAN_TxMsg+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 80037b4:	2300      	movs	r3, #0
 80037b6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=StdId_11bits;					 // standard identifier=0
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=0;					 // extended identifier=StdId
 80037c0:	2300      	movs	r3, #0
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Standard;			 // type of identifier for the message is Standard
 80037c4:	2300      	movs	r3, #0
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 80037c8:	2300      	movs	r3, #0
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 80037cc:	2300      	movs	r3, #0
 80037ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 80037d2:	e00c      	b.n	80037ee <CAN_TxMsg+0x5a>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 80037d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80037dc:	1c51      	adds	r1, r2, #1
 80037de:	8779      	strh	r1, [r7, #58]	; 0x3a
 80037e0:	4611      	mov	r1, r2
 80037e2:	781a      	ldrb	r2, [r3, #0]
 80037e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037e8:	440b      	add	r3, r1
 80037ea:	f803 2c2c 	strb.w	r2, [r3, #-44]
	while(datalen--)
 80037ee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80037f0:	1e5a      	subs	r2, r3, #1
 80037f2:	873a      	strh	r2, [r7, #56]	; 0x38
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1ed      	bne.n	80037d4 <CAN_TxMsg+0x40>
//			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
//				Error_Handler();
//			}
//		}
	}
	if(i>0){
 80037f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00f      	beq.n	800381e <CAN_TxMsg+0x8a>
		TxMessage.DLC = i;
 80037fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003800:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 8003802:	f107 031c 	add.w	r3, r7, #28
 8003806:	f107 0214 	add.w	r2, r7, #20
 800380a:	f107 0120 	add.w	r1, r7, #32
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f00d fec8 	bl	80115a4 <HAL_CAN_AddTxMessage>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <CAN_TxMsg+0x8a>
			Error_Handler();
 800381a:	f000 feb9 	bl	8004590 <Error_Handler>
		}

	}
//	sys.rns_busy = 0;

	return(canMailbox);
 800381e:	69fb      	ldr	r3, [r7, #28]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3740      	adds	r7, #64	; 0x40
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <CAN_TxMsgEID>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsgEID(CAN_HandleTypeDef* hcanx,uint32_t EID,uint8_t *Msg,uint8_t len)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b090      	sub	sp, #64	; 0x40
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	70fb      	strb	r3, [r7, #3]


	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 8003836:	bf00      	nop
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f00d ff8e 	bl	801175a <HAL_CAN_GetTxMailboxesFreeLevel>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f9      	beq.n	8003838 <CAN_TxMsgEID+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 8003848:	2300      	movs	r3, #0
 800384a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=0;					 // standard identifier=0
 8003850:	2300      	movs	r3, #0
 8003852:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=EID;					 // extended identifier=StdId
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Extended;			 // type of identifier for the message is Standard
 8003858:	2304      	movs	r3, #4
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 800385c:	2300      	movs	r3, #0
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 8003860:	2300      	movs	r3, #0
 8003862:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 8003866:	e01f      	b.n	80038a8 <CAN_TxMsgEID+0x80>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 8003868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800386e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003870:	1c51      	adds	r1, r2, #1
 8003872:	8779      	strh	r1, [r7, #58]	; 0x3a
 8003874:	4611      	mov	r1, r2
 8003876:	781a      	ldrb	r2, [r3, #0]
 8003878:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800387c:	440b      	add	r3, r1
 800387e:	f803 2c2c 	strb.w	r2, [r3, #-44]
		if(i == 8){
 8003882:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003884:	2b08      	cmp	r3, #8
 8003886:	d10f      	bne.n	80038a8 <CAN_TxMsgEID+0x80>
			TxMessage.DLC=8;
 8003888:	2308      	movs	r3, #8
 800388a:	633b      	str	r3, [r7, #48]	; 0x30
			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 800388c:	f107 031c 	add.w	r3, r7, #28
 8003890:	f107 0214 	add.w	r2, r7, #20
 8003894:	f107 0120 	add.w	r1, r7, #32
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f00d fe83 	bl	80115a4 <HAL_CAN_AddTxMessage>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <CAN_TxMsgEID+0x80>
				Error_Handler();
 80038a4:	f000 fe74 	bl	8004590 <Error_Handler>
	while(datalen--)
 80038a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80038aa:	1e5a      	subs	r2, r3, #1
 80038ac:	873a      	strh	r2, [r7, #56]	; 0x38
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1da      	bne.n	8003868 <CAN_TxMsgEID+0x40>
			}
		}
	}
	if(i>0){
 80038b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00f      	beq.n	80038d8 <CAN_TxMsgEID+0xb0>
		TxMessage.DLC = i;
 80038b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80038ba:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 80038bc:	f107 031c 	add.w	r3, r7, #28
 80038c0:	f107 0214 	add.w	r2, r7, #20
 80038c4:	f107 0120 	add.w	r1, r7, #32
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f00d fe6b 	bl	80115a4 <HAL_CAN_AddTxMessage>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <CAN_TxMsgEID+0xb0>
			Error_Handler();
 80038d4:	f000 fe5c 	bl	8004590 <Error_Handler>
		}

	}

	return(canMailbox);
 80038d8:	69fb      	ldr	r3, [r7, #28]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3740      	adds	r7, #64	; 0x40
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <FH_CheckCAN>:
 * Function Arguments	: 	*fh	, pointer to structure FaulHaber_t
 * 							dat	, data received by CAN
 * Function Return		: 	0(FaulHaber ID found) or 1(not from FaulHaber)
 * Function Example		: 	FH_CheckCAN(&fh1, temp);
 */
uint8_t FH_CheckCAN(FaulHaber_t *fh, uint8_t dat[8]){
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
	uint32_t id;
	if(fh->hcanx==&hcan1){
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	4a6a      	ldr	r2, [pc, #424]	; (8003a9c <FH_CheckCAN+0x1b8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d103      	bne.n	8003900 <FH_CheckCAN+0x1c>
		id=CAN1RxMessage.StdId;
 80038f8:	4b69      	ldr	r3, [pc, #420]	; (8003aa0 <FH_CheckCAN+0x1bc>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	e002      	b.n	8003906 <FH_CheckCAN+0x22>
	}else{
		id=CAN2RxMessage.StdId;
 8003900:	4b68      	ldr	r3, [pc, #416]	; (8003aa4 <FH_CheckCAN+0x1c0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60fb      	str	r3, [r7, #12]
	}

	if((id - fh->nodeID) & 0b00001111111)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	791b      	ldrb	r3, [r3, #4]
 800390a:	461a      	mov	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <FH_CheckCAN+0x38>
		return 1;
 8003918:	2301      	movs	r3, #1
 800391a:	e0b8      	b.n	8003a8e <FH_CheckCAN+0x1aa>
	switch((id)>>7){
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	09db      	lsrs	r3, r3, #7
 8003920:	2b0e      	cmp	r3, #14
 8003922:	d821      	bhi.n	8003968 <FH_CheckCAN+0x84>
 8003924:	2b03      	cmp	r3, #3
 8003926:	f0c0 80b1 	bcc.w	8003a8c <FH_CheckCAN+0x1a8>
 800392a:	3b03      	subs	r3, #3
 800392c:	2b0b      	cmp	r3, #11
 800392e:	f200 80ad 	bhi.w	8003a8c <FH_CheckCAN+0x1a8>
 8003932:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <FH_CheckCAN+0x54>)
 8003934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003938:	08003977 	.word	0x08003977
 800393c:	08003a8d 	.word	0x08003a8d
 8003940:	080039dd 	.word	0x080039dd
 8003944:	08003a8d 	.word	0x08003a8d
 8003948:	08003a09 	.word	0x08003a09
 800394c:	08003a8d 	.word	0x08003a8d
 8003950:	08003a27 	.word	0x08003a27
 8003954:	08003a8d 	.word	0x08003a8d
 8003958:	08003a45 	.word	0x08003a45
 800395c:	08003a8d 	.word	0x08003a8d
 8003960:	08003a8d 	.word	0x08003a8d
 8003964:	0800396f 	.word	0x0800396f
 8003968:	2b80      	cmp	r3, #128	; 0x80
 800396a:	d002      	beq.n	8003972 <FH_CheckCAN+0x8e>
 800396c:	e08e      	b.n	8003a8c <FH_CheckCAN+0x1a8>

		case 0b1110:		//boot up messege
			return 0;
 800396e:	2300      	movs	r3, #0
 8003970:	e08d      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case 0x80:		//error messege
			return 0;
 8003972:	2300      	movs	r3, #0
 8003974:	e08b      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO1Tx:		//PDO1/statusword
			fh->target=(dat[1]>>2) & 0b01;		//target reached bit in PP mode
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	3301      	adds	r3, #1
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	089b      	lsrs	r3, r3, #2
 800397e:	b2db      	uxtb	r3, r3
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	b2d9      	uxtb	r1, r3
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800398c:	f361 1304 	bfi	r3, r1, #4, #1
 8003990:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			if(dat[0] & 0b01000000)				//switch on disabled bit
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	d007      	beq.n	80039b0 <FH_CheckCAN+0xcc>
				fh->PDOInit=1;
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039a6:	f043 0304 	orr.w	r3, r3, #4
 80039aa:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80039ae:	e00c      	b.n	80039ca <FH_CheckCAN+0xe6>
			else if(dat[0] & 0b00000100)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d006      	beq.n	80039ca <FH_CheckCAN+0xe6>
				fh->start=1;
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039c2:	f043 0320 	orr.w	r3, r3, #32
 80039c6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			fh->waiting=0;
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039d0:	f36f 0341 	bfc	r3, #1, #1
 80039d4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	e058      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO2Tx:		//PDO2/position
			memcpy(fh->rx_buff, &dat[2], 4);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3324      	adds	r3, #36	; 0x24
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	3202      	adds	r2, #2
 80039e4:	6812      	ldr	r2, [r2, #0]
 80039e6:	601a      	str	r2, [r3, #0]
			fh->rx-=fh->offset;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	1ad2      	subs	r2, r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	625a      	str	r2, [r3, #36]	; 0x24
			fh->waiting=0;
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039fc:	f36f 0341 	bfc	r3, #1, #1
 8003a00:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e042      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO3Tx:		//PDO3/velocity
			memcpy(fh->rx_buff, &dat[2], 4);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3324      	adds	r3, #36	; 0x24
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	3202      	adds	r2, #2
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	601a      	str	r2, [r3, #0]
			fh->waiting=0;
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003a1a:	f36f 0341 	bfc	r3, #1, #1
 8003a1e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e033      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO4Tx:		//PDO4/torque
			memcpy(fh->rx_buff, &dat[2], 4);//not sure if need to convert to int16, because datasheet says type is S16, not S32
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3324      	adds	r3, #36	; 0x24
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	3202      	adds	r2, #2
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	601a      	str	r2, [r3, #0]
			fh->waiting=0;
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003a38:	f36f 0341 	bfc	r3, #1, #1
 8003a3c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	e024      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case SDOTx:		//SDO
			if((dat[0]=0x60)&&(dat[1]==fh->conf[0])&&(dat[2]==fh->conf[1])&&(dat[3]==fh->conf[2]))
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2260      	movs	r2, #96	; 0x60
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	781a      	ldrb	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d116      	bne.n	8003a88 <FH_CheckCAN+0x1a4>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	3302      	adds	r3, #2
 8003a5e:	781a      	ldrb	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d10e      	bne.n	8003a88 <FH_CheckCAN+0x1a4>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	3303      	adds	r3, #3
 8003a6e:	781a      	ldrb	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d106      	bne.n	8003a88 <FH_CheckCAN+0x1a4>
				fh->waiting=0;
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003a80:	f36f 0341 	bfc	r3, #1, #1
 8003a84:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e000      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		default :
			return 1;
 8003a8c:	2301      	movs	r3, #1
			break;
	}
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	2000a370 	.word	0x2000a370
 8003aa0:	2000a8d8 	.word	0x2000a8d8
 8003aa4:	20006f94 	.word	0x20006f94

08003aa8 <FaulHaber_Handler>:
 * 							the CAN data is from FaulHaber or not
 * Function Arguments	: 	dat	, data received by CAN
 * Function Return		: 	None
 * Function Example		: 	FaulHaber_Handler(aData);
 */
void FaulHaber_Handler(uint8_t dat[8]){
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	led2 = 1;
 8003ab0:	4a11      	ldr	r2, [pc, #68]	; (8003af8 <FaulHaber_Handler+0x50>)
 8003ab2:	7853      	ldrb	r3, [r2, #1]
 8003ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ab8:	7053      	strb	r3, [r2, #1]
	uint8_t bflag=1, ad=0;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	73bb      	strb	r3, [r7, #14]
	while(bflag && pfh[ad]!=0)
 8003ac2:	e00c      	b.n	8003ade <FaulHaber_Handler+0x36>
		bflag=FH_CheckCAN(pfh[ad++], dat);
 8003ac4:	7bbb      	ldrb	r3, [r7, #14]
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	73ba      	strb	r2, [r7, #14]
 8003aca:	461a      	mov	r2, r3
 8003acc:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <FaulHaber_Handler+0x54>)
 8003ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff ff05 	bl	80038e4 <FH_CheckCAN>
 8003ada:	4603      	mov	r3, r0
 8003adc:	73fb      	strb	r3, [r7, #15]
	while(bflag && pfh[ad]!=0)
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <FaulHaber_Handler+0x48>
 8003ae4:	7bbb      	ldrb	r3, [r7, #14]
 8003ae6:	4a05      	ldr	r2, [pc, #20]	; (8003afc <FaulHaber_Handler+0x54>)
 8003ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1e9      	bne.n	8003ac4 <FaulHaber_Handler+0x1c>

}
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40020814 	.word	0x40020814
 8003afc:	20006f00 	.word	0x20006f00

08003b00 <I2CxInit>:
 * 						  InterruptEnable				interrupt enable for I2C can be ENABLE or DISABLE
 * Function Return		: NONE
 * Function Example		: I2CxInit (&hi2c1,main_board_1, CLOCK_SPEED_400KHz,ENABLE);
 */
void I2CxInit(I2C_HandleTypeDef* hi2cx,uint8_t OwnAddress,uint32_t ClockSpeed,int InterruptEnable)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	607a      	str	r2, [r7, #4]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	72fb      	strb	r3, [r7, #11]

	IRQn_Type nvicER = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	75fb      	strb	r3, [r7, #23]
	IRQn_Type nvicEV = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	75bb      	strb	r3, [r7, #22]

	if(hi2cx == &hi2c1){
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4a4d      	ldr	r2, [pc, #308]	; (8003c50 <I2CxInit+0x150>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d107      	bne.n	8003b30 <I2CxInit+0x30>
		hi2cx->Instance = I2C1;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4a4c      	ldr	r2, [pc, #304]	; (8003c54 <I2CxInit+0x154>)
 8003b24:	601a      	str	r2, [r3, #0]
		nvicER = I2C1_ER_IRQn;
 8003b26:	2320      	movs	r3, #32
 8003b28:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C1_EV_IRQn;
 8003b2a:	231f      	movs	r3, #31
 8003b2c:	75bb      	strb	r3, [r7, #22]
 8003b2e:	e012      	b.n	8003b56 <I2CxInit+0x56>
	}else if(hi2cx == &hi2c2){
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4a49      	ldr	r2, [pc, #292]	; (8003c58 <I2CxInit+0x158>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d107      	bne.n	8003b48 <I2CxInit+0x48>
		hi2cx->Instance = I2C2;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4a48      	ldr	r2, [pc, #288]	; (8003c5c <I2CxInit+0x15c>)
 8003b3c:	601a      	str	r2, [r3, #0]
		nvicER = I2C2_ER_IRQn;
 8003b3e:	2322      	movs	r3, #34	; 0x22
 8003b40:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C2_EV_IRQn;
 8003b42:	2321      	movs	r3, #33	; 0x21
 8003b44:	75bb      	strb	r3, [r7, #22]
 8003b46:	e006      	b.n	8003b56 <I2CxInit+0x56>
	}else{
		hi2cx->Instance = I2C3;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4a45      	ldr	r2, [pc, #276]	; (8003c60 <I2CxInit+0x160>)
 8003b4c:	601a      	str	r2, [r3, #0]
		nvicER = I2C3_ER_IRQn;
 8003b4e:	2349      	movs	r3, #73	; 0x49
 8003b50:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C3_EV_IRQn;
 8003b52:	2348      	movs	r3, #72	; 0x48
 8003b54:	75bb      	strb	r3, [r7, #22]
	}

	hi2cx->Init.ClockSpeed = ClockSpeed;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	605a      	str	r2, [r3, #4]
	hi2cx->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	609a      	str	r2, [r3, #8]
	hi2cx->Init.OwnAddress1 = OwnAddress<<1;
 8003b62:	7afb      	ldrb	r3, [r7, #11]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	461a      	mov	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	60da      	str	r2, [r3, #12]
	hi2cx->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b72:	611a      	str	r2, [r3, #16]
	hi2cx->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	615a      	str	r2, [r3, #20]
	hi2cx->Init.OwnAddress2 = 0;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	619a      	str	r2, [r3, #24]
	hi2cx->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	61da      	str	r2, [r3, #28]
	hi2cx->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	621a      	str	r2, [r3, #32]



	if(InterruptEnable){
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d051      	beq.n	8003c36 <I2CxInit+0x136>
		if(hi2cx == &hi2c1){
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4a2e      	ldr	r2, [pc, #184]	; (8003c50 <I2CxInit+0x150>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d118      	bne.n	8003bcc <I2CxInit+0xcc>
			HAL_NVIC_SetPriority(nvicER, I2C1_ER_IRQ_PRIO, 0);
 8003b9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f00e fa66 	bl	8012074 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 8003ba8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f00e fa7d 	bl	80120ac <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C1_EV_IRQ_PRIO, 0);
 8003bb2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f00e fa5a 	bl	8012074 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 8003bc0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f00e fa71 	bl	80120ac <HAL_NVIC_EnableIRQ>
 8003bca:	e034      	b.n	8003c36 <I2CxInit+0x136>
		}else if(hi2cx == &hi2c2){
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4a22      	ldr	r2, [pc, #136]	; (8003c58 <I2CxInit+0x158>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d118      	bne.n	8003c06 <I2CxInit+0x106>
			HAL_NVIC_SetPriority(nvicER, I2C2_ER_IRQ_PRIO, 0);
 8003bd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	210e      	movs	r1, #14
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f00e fa49 	bl	8012074 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 8003be2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f00e fa60 	bl	80120ac <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C2_EV_IRQ_PRIO, 0);
 8003bec:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	210e      	movs	r1, #14
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f00e fa3d 	bl	8012074 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 8003bfa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f00e fa54 	bl	80120ac <HAL_NVIC_EnableIRQ>
 8003c04:	e017      	b.n	8003c36 <I2CxInit+0x136>
		}else{
			HAL_NVIC_SetPriority(nvicER, I2C3_ER_IRQ_PRIO, 0);
 8003c06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	210e      	movs	r1, #14
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f00e fa30 	bl	8012074 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 8003c14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f00e fa47 	bl	80120ac <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C3_EV_IRQ_PRIO, 0);
 8003c1e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c22:	2200      	movs	r2, #0
 8003c24:	210e      	movs	r1, #14
 8003c26:	4618      	mov	r0, r3
 8003c28:	f00e fa24 	bl	8012074 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 8003c2c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f00e fa3b 	bl	80120ac <HAL_NVIC_EnableIRQ>
		}
	}


	if (HAL_I2C_Init(hi2cx) != HAL_OK)
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f00f f936 	bl	8012ea8 <HAL_I2C_Init>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <I2CxInit+0x146>
	{
		Error_Handler();
 8003c42:	f000 fca5 	bl	8004590 <Error_Handler>
	}

}
 8003c46:	bf00      	nop
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20007050 	.word	0x20007050
 8003c54:	40005400 	.word	0x40005400
 8003c58:	200070ac 	.word	0x200070ac
 8003c5c:	40005800 	.word	0x40005800
 8003c60:	40005c00 	.word	0x40005c00

08003c64 <I2CX_DMA_RX_Init>:
 * 						  ClockSpeed					Speed of transmission can be CLOCK_SPEED_100KHz or CLOCK_SPEED_400KHz
 * Function Return		: NONE
 * Function Example		: I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 *
 */
void I2CX_DMA_RX_Init(I2C_HandleTypeDef *hi2cx,DMA_HandleTypeDef* hdma_i2cx,uint8_t OwnAddress,uint32_t ClockSpeed){
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	4613      	mov	r3, r2
 8003c72:	71fb      	strb	r3, [r7, #7]

	IRQn_Type nvic,nvicER,nvicEV;
	uint32_t DMA_CHANNEL;
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	4b9e      	ldr	r3, [pc, #632]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7c:	4a9d      	ldr	r2, [pc, #628]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003c7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c82:	6313      	str	r3, [r2, #48]	; 0x30
 8003c84:	4b9b      	ldr	r3, [pc, #620]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	697b      	ldr	r3, [r7, #20]
	if(hi2cx == &hi2c1){
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4a99      	ldr	r2, [pc, #612]	; (8003ef8 <I2CX_DMA_RX_Init+0x294>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d11d      	bne.n	8003cd4 <I2CX_DMA_RX_Init+0x70>

		hi2cx->Instance = I2C1;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4a98      	ldr	r2, [pc, #608]	; (8003efc <I2CX_DMA_RX_Init+0x298>)
 8003c9c:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream0;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	4a97      	ldr	r2, [pc, #604]	; (8003f00 <I2CX_DMA_RX_Init+0x29c>)
 8003ca2:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_1;
 8003ca4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ca8:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream0_IRQn;
 8003caa:	230b      	movs	r3, #11
 8003cac:	77fb      	strb	r3, [r7, #31]

		nvicER = I2C1_ER_IRQn;
 8003cae:	2320      	movs	r3, #32
 8003cb0:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C1_EV_IRQn;
 8003cb2:	231f      	movs	r3, #31
 8003cb4:	777b      	strb	r3, [r7, #29]
		__HAL_RCC_DMA1_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	4b8e      	ldr	r3, [pc, #568]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	4a8d      	ldr	r2, [pc, #564]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003cc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc6:	4b8b      	ldr	r3, [pc, #556]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	e022      	b.n	8003d1a <I2CX_DMA_RX_Init+0xb6>
	}else if(hi2cx == &hi2c2){
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4a8b      	ldr	r2, [pc, #556]	; (8003f04 <I2CX_DMA_RX_Init+0x2a0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d10f      	bne.n	8003cfc <I2CX_DMA_RX_Init+0x98>

		hi2cx->Instance = I2C2;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4a8a      	ldr	r2, [pc, #552]	; (8003f08 <I2CX_DMA_RX_Init+0x2a4>)
 8003ce0:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream3;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4a89      	ldr	r2, [pc, #548]	; (8003f0c <I2CX_DMA_RX_Init+0x2a8>)
 8003ce6:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_7;
 8003ce8:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8003cec:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream3_IRQn;
 8003cee:	230e      	movs	r3, #14
 8003cf0:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C2_ER_IRQn;
 8003cf2:	2322      	movs	r3, #34	; 0x22
 8003cf4:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C2_EV_IRQn;
 8003cf6:	2321      	movs	r3, #33	; 0x21
 8003cf8:	777b      	strb	r3, [r7, #29]
 8003cfa:	e00e      	b.n	8003d1a <I2CX_DMA_RX_Init+0xb6>

	}else{
		hi2cx->Instance = I2C3;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4a84      	ldr	r2, [pc, #528]	; (8003f10 <I2CX_DMA_RX_Init+0x2ac>)
 8003d00:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream2;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	4a83      	ldr	r2, [pc, #524]	; (8003f14 <I2CX_DMA_RX_Init+0x2b0>)
 8003d06:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_3;
 8003d08:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8003d0c:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream2_IRQn;
 8003d0e:	230d      	movs	r3, #13
 8003d10:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C3_ER_IRQn;
 8003d12:	2349      	movs	r3, #73	; 0x49
 8003d14:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C3_EV_IRQn;
 8003d16:	2348      	movs	r3, #72	; 0x48
 8003d18:	777b      	strb	r3, [r7, #29]
	}

	hdma_i2cx->Init.Channel = DMA_CHANNEL;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	605a      	str	r2, [r3, #4]
	hdma_i2cx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2200      	movs	r2, #0
 8003d24:	609a      	str	r2, [r3, #8]
	hdma_i2cx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	60da      	str	r2, [r3, #12]
	hdma_i2cx->Init.MemInc = DMA_MINC_ENABLE;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d32:	611a      	str	r2, [r3, #16]
	hdma_i2cx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2200      	movs	r2, #0
 8003d38:	615a      	str	r2, [r3, #20]
	hdma_i2cx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	619a      	str	r2, [r3, #24]
	hdma_i2cx->Init.Mode = DMA_NORMAL;
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2200      	movs	r2, #0
 8003d44:	61da      	str	r2, [r3, #28]
	hdma_i2cx->Init.Priority = DMA_PRIORITY_HIGH;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d4c:	621a      	str	r2, [r3, #32]
	hdma_i2cx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2200      	movs	r2, #0
 8003d52:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_i2cx->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2203      	movs	r2, #3
 8003d58:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_i2cx->Init.MemBurst = DMA_MBURST_INC4;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003d60:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_i2cx->Init.PeriphBurst = DMA_PBURST_INC4;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003d68:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(hdma_i2cx) != HAL_OK)
 8003d6a:	68b8      	ldr	r0, [r7, #8]
 8003d6c:	f00e f9c8 	bl	8012100 <HAL_DMA_Init>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <I2CX_DMA_RX_Init+0x116>
	{

		Error_Handler();
 8003d76:	f000 fc0b 	bl	8004590 <Error_Handler>

	}
	__HAL_LINKDMA(hi2cx,hdmarx,*hdma_i2cx);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	639a      	str	r2, [r3, #56]	; 0x38
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	639a      	str	r2, [r3, #56]	; 0x38

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */

	//	__HAL_DMA_ENABLE_IT(hdma_i2cx,DMA_IT_TC);
	if(hi2cx == &hi2c1){
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4a5b      	ldr	r2, [pc, #364]	; (8003ef8 <I2CX_DMA_RX_Init+0x294>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d111      	bne.n	8003db2 <I2CX_DMA_RX_Init+0x14e>
		HAL_NVIC_SetPriority(nvic, DMA1_Str0__IRQ_PRIO, 0);
 8003d8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d92:	2200      	movs	r2, #0
 8003d94:	210a      	movs	r1, #10
 8003d96:	4618      	mov	r0, r3
 8003d98:	f00e f96c 	bl	8012074 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003d9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f00e f99f 	bl	80120e4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003da6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f00e f97e 	bl	80120ac <HAL_NVIC_EnableIRQ>
 8003db0:	e026      	b.n	8003e00 <I2CX_DMA_RX_Init+0x19c>
	}else if(hi2cx == &hi2c2){
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4a53      	ldr	r2, [pc, #332]	; (8003f04 <I2CX_DMA_RX_Init+0x2a0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d111      	bne.n	8003dde <I2CX_DMA_RX_Init+0x17a>
		HAL_NVIC_SetPriority(nvic, DMA1_Str3__IRQ_PRIO, 0);
 8003dba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	210e      	movs	r1, #14
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f00e f956 	bl	8012074 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003dc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f00e f989 	bl	80120e4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003dd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f00e f968 	bl	80120ac <HAL_NVIC_EnableIRQ>
 8003ddc:	e010      	b.n	8003e00 <I2CX_DMA_RX_Init+0x19c>
	}else{
		HAL_NVIC_SetPriority(nvic, DMA1_Str2__IRQ_PRIO, 0);
 8003dde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003de2:	2200      	movs	r2, #0
 8003de4:	210e      	movs	r1, #14
 8003de6:	4618      	mov	r0, r3
 8003de8:	f00e f944 	bl	8012074 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003dec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f00e f977 	bl	80120e4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003df6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f00e f956 	bl	80120ac <HAL_NVIC_EnableIRQ>
	}

	hi2cx->Init.ClockSpeed = ClockSpeed;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	605a      	str	r2, [r3, #4]
	hi2cx->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	609a      	str	r2, [r3, #8]
	hi2cx->Init.OwnAddress1 = OwnAddress<<1;
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	461a      	mov	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	60da      	str	r2, [r3, #12]
	hi2cx->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e1c:	611a      	str	r2, [r3, #16]
	hi2cx->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	615a      	str	r2, [r3, #20]
	hi2cx->Init.OwnAddress2 = 0;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	619a      	str	r2, [r3, #24]
	hi2cx->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	61da      	str	r2, [r3, #28]
	hi2cx->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	621a      	str	r2, [r3, #32]

	if(hi2cx == &hi2c1){
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4a2f      	ldr	r2, [pc, #188]	; (8003ef8 <I2CX_DMA_RX_Init+0x294>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d118      	bne.n	8003e70 <I2CX_DMA_RX_Init+0x20c>
		HAL_NVIC_SetPriority(nvicER, I2C1_ER_IRQ_PRIO, 0);
 8003e3e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e42:	2200      	movs	r2, #0
 8003e44:	2100      	movs	r1, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f00e f914 	bl	8012074 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003e4c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f00e f92b 	bl	80120ac <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C1_EV_IRQ_PRIO, 0);
 8003e56:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f00e f908 	bl	8012074 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003e64:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f00e f91f 	bl	80120ac <HAL_NVIC_EnableIRQ>
 8003e6e:	e034      	b.n	8003eda <I2CX_DMA_RX_Init+0x276>
	}else if(hi2cx == &hi2c2){
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4a24      	ldr	r2, [pc, #144]	; (8003f04 <I2CX_DMA_RX_Init+0x2a0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d118      	bne.n	8003eaa <I2CX_DMA_RX_Init+0x246>
		HAL_NVIC_SetPriority(nvicER, I2C2_ER_IRQ_PRIO, 0);
 8003e78:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	210e      	movs	r1, #14
 8003e80:	4618      	mov	r0, r3
 8003e82:	f00e f8f7 	bl	8012074 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003e86:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f00e f90e 	bl	80120ac <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C2_EV_IRQ_PRIO, 0);
 8003e90:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e94:	2200      	movs	r2, #0
 8003e96:	210e      	movs	r1, #14
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f00e f8eb 	bl	8012074 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003e9e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f00e f902 	bl	80120ac <HAL_NVIC_EnableIRQ>
 8003ea8:	e017      	b.n	8003eda <I2CX_DMA_RX_Init+0x276>
	}else{
		HAL_NVIC_SetPriority(nvicER, I2C3_ER_IRQ_PRIO, 0);
 8003eaa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	210e      	movs	r1, #14
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f00e f8de 	bl	8012074 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003eb8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f00e f8f5 	bl	80120ac <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C3_EV_IRQ_PRIO, 0);
 8003ec2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	210e      	movs	r1, #14
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f00e f8d2 	bl	8012074 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003ed0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f00e f8e9 	bl	80120ac <HAL_NVIC_EnableIRQ>
	}

	if (HAL_I2C_Init(hi2cx) != HAL_OK)
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f00e ffe4 	bl	8012ea8 <HAL_I2C_Init>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <I2CX_DMA_RX_Init+0x286>
	{

		Error_Handler();
 8003ee6:	f000 fb53 	bl	8004590 <Error_Handler>
	}
}
 8003eea:	bf00      	nop
 8003eec:	3720      	adds	r7, #32
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	20007050 	.word	0x20007050
 8003efc:	40005400 	.word	0x40005400
 8003f00:	40026010 	.word	0x40026010
 8003f04:	200070ac 	.word	0x200070ac
 8003f08:	40005800 	.word	0x40005800
 8003f0c:	40026058 	.word	0x40026058
 8003f10:	40005c00 	.word	0x40005c00
 8003f14:	40026040 	.word	0x40026040

08003f18 <I2C2_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_EV_IRQHandler(void){
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0


	HAL_I2C_EV_IRQHandler(&hi2c2);
 8003f1c:	4802      	ldr	r0, [pc, #8]	; (8003f28 <I2C2_EV_IRQHandler+0x10>)
 8003f1e:	f00f fa4d 	bl	80133bc <HAL_I2C_EV_IRQHandler>


}
 8003f22:	bf00      	nop
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	200070ac 	.word	0x200070ac

08003f2c <I2C2_ER_IRQHandler>:
 * Function Remarks		: This interrupt handle the error event of I2C2.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_ER_IRQHandler(void){
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0

	HAL_I2C_ER_IRQHandler(&hi2c2);
 8003f30:	4802      	ldr	r0, [pc, #8]	; (8003f3c <I2C2_ER_IRQHandler+0x10>)
 8003f32:	f00f fbb0 	bl	8013696 <HAL_I2C_ER_IRQHandler>


}
 8003f36:	bf00      	nop
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	200070ac 	.word	0x200070ac

08003f40 <I2C3_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C3_EV_IRQHandler(void){
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0

	//	taskENTER_CRITICAL();
	HAL_I2C_EV_IRQHandler(&hi2c3);
 8003f44:	4802      	ldr	r0, [pc, #8]	; (8003f50 <I2C3_EV_IRQHandler+0x10>)
 8003f46:	f00f fa39 	bl	80133bc <HAL_I2C_EV_IRQHandler>
	//	taskEXIT_CRITICAL();

}
 8003f4a:	bf00      	nop
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20006cbc 	.word	0x20006cbc

08003f54 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b0a4      	sub	sp, #144	; 0x90
 8003f58:	af00      	add	r7, sp, #0
	set();
 8003f5a:	f006 fd03 	bl	800a964 <set>
	const osThreadAttr_t MainTask_attributes =
 8003f5e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f62:	2224      	movs	r2, #36	; 0x24
 8003f64:	2100      	movs	r1, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f016 fbe0 	bl	801a72c <memset>
 8003f6c:	4b31      	ldr	r3, [pc, #196]	; (8004034 <main+0xe0>)
 8003f6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f78:	2318      	movs	r3, #24
 8003f7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			{ .name = "MainTask", .stack_size = 512 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	const osThreadAttr_t CheckingTask_attributes =
 8003f7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f82:	2224      	movs	r2, #36	; 0x24
 8003f84:	2100      	movs	r1, #0
 8003f86:	4618      	mov	r0, r3
 8003f88:	f016 fbd0 	bl	801a72c <memset>
 8003f8c:	4b2a      	ldr	r3, [pc, #168]	; (8004038 <main+0xe4>)
 8003f8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f96:	2318      	movs	r3, #24
 8003f98:	663b      	str	r3, [r7, #96]	; 0x60
			{ .name = "CheckingTask", .stack_size =512 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	const osThreadAttr_t NaviTask_attributes =
 8003f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f9e:	2224      	movs	r2, #36	; 0x24
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f016 fbc2 	bl	801a72c <memset>
 8003fa8:	4b24      	ldr	r3, [pc, #144]	; (800403c <main+0xe8>)
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
 8003fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fb2:	2318      	movs	r3, #24
 8003fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
			{ .name = "NaviTask", .stack_size = 1024 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	const osThreadAttr_t EmergencyTask_attributes =
 8003fb6:	463b      	mov	r3, r7
 8003fb8:	2224      	movs	r2, #36	; 0x24
 8003fba:	2100      	movs	r1, #0
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f016 fbb5 	bl	801a72c <memset>
 8003fc2:	4b1f      	ldr	r3, [pc, #124]	; (8004040 <main+0xec>)
 8003fc4:	603b      	str	r3, [r7, #0]
 8003fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	2318      	movs	r3, #24
 8003fce:	61bb      	str	r3, [r7, #24]
			{ .name = "EmergencyTask", .stack_size = 256 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	osKernelInitialize();
 8003fd0:	f013 fd16 	bl	8017a00 <osKernelInitialize>

	MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 8003fd4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003fd8:	461a      	mov	r2, r3
 8003fda:	2100      	movs	r1, #0
 8003fdc:	4819      	ldr	r0, [pc, #100]	; (8004044 <main+0xf0>)
 8003fde:	f013 fd59 	bl	8017a94 <osThreadNew>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4a18      	ldr	r2, [pc, #96]	; (8004048 <main+0xf4>)
 8003fe6:	6013      	str	r3, [r2, #0]
	NaviTaskHandle = osThreadNew(NaviTask, NULL, &NaviTask_attributes);
 8003fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fec:	461a      	mov	r2, r3
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4816      	ldr	r0, [pc, #88]	; (800404c <main+0xf8>)
 8003ff2:	f013 fd4f 	bl	8017a94 <osThreadNew>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4a15      	ldr	r2, [pc, #84]	; (8004050 <main+0xfc>)
 8003ffa:	6013      	str	r3, [r2, #0]
	CheckingTaskHandle = osThreadNew(CheckingTask, NULL,
 8003ffc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004000:	461a      	mov	r2, r3
 8004002:	2100      	movs	r1, #0
 8004004:	4813      	ldr	r0, [pc, #76]	; (8004054 <main+0x100>)
 8004006:	f013 fd45 	bl	8017a94 <osThreadNew>
 800400a:	4603      	mov	r3, r0
 800400c:	4a12      	ldr	r2, [pc, #72]	; (8004058 <main+0x104>)
 800400e:	6013      	str	r3, [r2, #0]
			&CheckingTask_attributes);
	EmergencyTaskHandle = osThreadNew(EmergencyTask, NULL,
 8004010:	463b      	mov	r3, r7
 8004012:	461a      	mov	r2, r3
 8004014:	2100      	movs	r1, #0
 8004016:	4811      	ldr	r0, [pc, #68]	; (800405c <main+0x108>)
 8004018:	f013 fd3c 	bl	8017a94 <osThreadNew>
 800401c:	4603      	mov	r3, r0
 800401e:	4a10      	ldr	r2, [pc, #64]	; (8004060 <main+0x10c>)
 8004020:	6013      	str	r3, [r2, #0]
			&EmergencyTask_attributes);
	led2 = 1;
 8004022:	4a10      	ldr	r2, [pc, #64]	; (8004064 <main+0x110>)
 8004024:	7853      	ldrb	r3, [r2, #1]
 8004026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800402a:	7053      	strb	r3, [r2, #1]
	osKernelStart();
 800402c:	f013 fd0c 	bl	8017a48 <osKernelStart>

	while (1) {
 8004030:	e7fe      	b.n	8004030 <main+0xdc>
 8004032:	bf00      	nop
 8004034:	080205b8 	.word	0x080205b8
 8004038:	080205c4 	.word	0x080205c4
 800403c:	080205d4 	.word	0x080205d4
 8004040:	080205e0 	.word	0x080205e0
 8004044:	08004199 	.word	0x08004199
 8004048:	20007d2c 	.word	0x20007d2c
 800404c:	08004291 	.word	0x08004291
 8004050:	20007768 	.word	0x20007768
 8004054:	08004395 	.word	0x08004395
 8004058:	2000a304 	.word	0x2000a304
 800405c:	080044b5 	.word	0x080044b5
 8004060:	2000a1f8 	.word	0x2000a1f8
 8004064:	40020814 	.word	0x40020814

08004068 <TIM6_DAC_IRQHandler>:

	}
}

void TIM6_DAC_IRQHandler(void) {
 8004068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800406c:	b096      	sub	sp, #88	; 0x58
 800406e:	af0e      	add	r7, sp, #56	; 0x38

	static int counter = 0;
	counter++;
 8004070:	4b40      	ldr	r3, [pc, #256]	; (8004174 <TIM6_DAC_IRQHandler+0x10c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3301      	adds	r3, #1
 8004076:	4a3f      	ldr	r2, [pc, #252]	; (8004174 <TIM6_DAC_IRQHandler+0x10c>)
 8004078:	6013      	str	r3, [r2, #0]

	if(counter % 4 == 0)
 800407a:	4b3e      	ldr	r3, [pc, #248]	; (8004174 <TIM6_DAC_IRQHandler+0x10c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d168      	bne.n	8004158 <TIM6_DAC_IRQHandler+0xf0>
	{
		led1 = !led1;
 8004086:	4b3c      	ldr	r3, [pc, #240]	; (8004178 <TIM6_DAC_IRQHandler+0x110>)
 8004088:	785b      	ldrb	r3, [r3, #1]
 800408a:	f003 0320 	and.w	r3, r3, #32
 800408e:	b2db      	uxtb	r3, r3
 8004090:	4a39      	ldr	r2, [pc, #228]	; (8004178 <TIM6_DAC_IRQHandler+0x110>)
 8004092:	2b00      	cmp	r3, #0
 8004094:	bf0c      	ite	eq
 8004096:	2301      	moveq	r3, #1
 8004098:	2300      	movne	r3, #0
 800409a:	b2d9      	uxtb	r1, r3
 800409c:	7853      	ldrb	r3, [r2, #1]
 800409e:	f361 1345 	bfi	r3, r1, #5, #1
 80040a2:	7053      	strb	r3, [r2, #1]
		counter = 0;
 80040a4:	4b33      	ldr	r3, [pc, #204]	; (8004174 <TIM6_DAC_IRQHandler+0x10c>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
//	//		sprintf((char*)debug, "pos: %d errX: %.2f errY: %.2f X: %.2f Y: %.2f Z: %.2f Pick: %ld\n",
//	//				lidar.pos_counter, pp.error_x, pp.error_y, pp.real_x, pp.real_y, pp.real_z, pick_enc);
//	//		sprintf((char*)debug, "VESC: %f\n", vesc_duty);
//		}
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f LX: %.2lf LY: %.2lf LAx: %.2f LAy: %.2f VESC: %.3f\n",
				pp.real_x, pp.real_y, pp.real_z, lidar.pole.x, lidar.pole.y, lidar.adj_x, lidar.adj_y, vesc_duty);
 80040aa:	4b34      	ldr	r3, [pc, #208]	; (800417c <TIM6_DAC_IRQHandler+0x114>)
 80040ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f LX: %.2lf LY: %.2lf LAx: %.2f LAy: %.2f VESC: %.3f\n",
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fc fa4a 	bl	8000548 <__aeabi_f2d>
 80040b4:	e9c7 0106 	strd	r0, r1, [r7, #24]
				pp.real_x, pp.real_y, pp.real_z, lidar.pole.x, lidar.pole.y, lidar.adj_x, lidar.adj_y, vesc_duty);
 80040b8:	4b30      	ldr	r3, [pc, #192]	; (800417c <TIM6_DAC_IRQHandler+0x114>)
 80040ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f LX: %.2lf LY: %.2lf LAx: %.2f LAy: %.2f VESC: %.3f\n",
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fc fa43 	bl	8000548 <__aeabi_f2d>
 80040c2:	e9c7 0104 	strd	r0, r1, [r7, #16]
				pp.real_x, pp.real_y, pp.real_z, lidar.pole.x, lidar.pole.y, lidar.adj_x, lidar.adj_y, vesc_duty);
 80040c6:	4b2d      	ldr	r3, [pc, #180]	; (800417c <TIM6_DAC_IRQHandler+0x114>)
 80040c8:	691b      	ldr	r3, [r3, #16]
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f LX: %.2lf LY: %.2lf LAx: %.2f LAy: %.2f VESC: %.3f\n",
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fc fa3c 	bl	8000548 <__aeabi_f2d>
 80040d0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80040d4:	4b2a      	ldr	r3, [pc, #168]	; (8004180 <TIM6_DAC_IRQHandler+0x118>)
 80040d6:	e9d3 896a 	ldrd	r8, r9, [r3, #424]	; 0x1a8
 80040da:	4b29      	ldr	r3, [pc, #164]	; (8004180 <TIM6_DAC_IRQHandler+0x118>)
 80040dc:	e9d3 ab6c 	ldrd	sl, fp, [r3, #432]	; 0x1b0
				pp.real_x, pp.real_y, pp.real_z, lidar.pole.x, lidar.pole.y, lidar.adj_x, lidar.adj_y, vesc_duty);
 80040e0:	4b27      	ldr	r3, [pc, #156]	; (8004180 <TIM6_DAC_IRQHandler+0x118>)
 80040e2:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f LX: %.2lf LY: %.2lf LAx: %.2f LAy: %.2f VESC: %.3f\n",
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fc fa2e 	bl	8000548 <__aeabi_f2d>
 80040ec:	e9c7 0100 	strd	r0, r1, [r7]
				pp.real_x, pp.real_y, pp.real_z, lidar.pole.x, lidar.pole.y, lidar.adj_x, lidar.adj_y, vesc_duty);
 80040f0:	4b23      	ldr	r3, [pc, #140]	; (8004180 <TIM6_DAC_IRQHandler+0x118>)
 80040f2:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f LX: %.2lf LY: %.2lf LAx: %.2f LAy: %.2f VESC: %.3f\n",
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fc fa26 	bl	8000548 <__aeabi_f2d>
 80040fc:	4604      	mov	r4, r0
 80040fe:	460d      	mov	r5, r1
 8004100:	4b20      	ldr	r3, [pc, #128]	; (8004184 <TIM6_DAC_IRQHandler+0x11c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4618      	mov	r0, r3
 8004106:	f7fc fa1f 	bl	8000548 <__aeabi_f2d>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004112:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8004116:	ed97 7b00 	vldr	d7, [r7]
 800411a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800411e:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8004122:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8004126:	ed97 7b02 	vldr	d7, [r7, #8]
 800412a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800412e:	ed97 7b04 	vldr	d7, [r7, #16]
 8004132:	ed8d 7b00 	vstr	d7, [sp]
 8004136:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800413a:	4913      	ldr	r1, [pc, #76]	; (8004188 <TIM6_DAC_IRQHandler+0x120>)
 800413c:	4813      	ldr	r0, [pc, #76]	; (800418c <TIM6_DAC_IRQHandler+0x124>)
 800413e:	f017 fad7 	bl	801b6f0 <siprintf>
		HAL_UART_Transmit(&huart5, debug, strlen((char*) debug), HAL_MAX_DELAY);
 8004142:	4812      	ldr	r0, [pc, #72]	; (800418c <TIM6_DAC_IRQHandler+0x124>)
 8004144:	f7fc f844 	bl	80001d0 <strlen>
 8004148:	4603      	mov	r3, r0
 800414a:	b29a      	uxth	r2, r3
 800414c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004150:	490e      	ldr	r1, [pc, #56]	; (800418c <TIM6_DAC_IRQHandler+0x124>)
 8004152:	480f      	ldr	r0, [pc, #60]	; (8004190 <TIM6_DAC_IRQHandler+0x128>)
 8004154:	f012 fd05 	bl	8016b62 <HAL_UART_Transmit>
//	ABT(&y_data);
//
//	fyaw = (fyaw >= 0.0) ? fyaw : 360.0 + fyaw;
//	enq();

	PathPlan(&pp);
 8004158:	4808      	ldr	r0, [pc, #32]	; (800417c <TIM6_DAC_IRQHandler+0x114>)
 800415a:	f001 fe71 	bl	8005e40 <PathPlan>
	CheckPickEnc();
 800415e:	f007 f93f 	bl	800b3e0 <CheckPickEnc>

//	sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f \n", fXPos, fYPos, fyaw);
//	HAL_UART_Transmit(&huart4, debug, strlen((char*) debug), HAL_MAX_DELAY);
	HAL_TIM_IRQHandler(&htim6);
 8004162:	480c      	ldr	r0, [pc, #48]	; (8004194 <TIM6_DAC_IRQHandler+0x12c>)
 8004164:	f011 fe56 	bl	8015e14 <HAL_TIM_IRQHandler>

}
 8004168:	bf00      	nop
 800416a:	3720      	adds	r7, #32
 800416c:	46bd      	mov	sp, r7
 800416e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004172:	bf00      	nop
 8004174:	20000288 	.word	0x20000288
 8004178:	40020814 	.word	0x40020814
 800417c:	2000718c 	.word	0x2000718c
 8004180:	200094a0 	.word	0x200094a0
 8004184:	20007848 	.word	0x20007848
 8004188:	080205f0 	.word	0x080205f0
 800418c:	20007950 	.word	0x20007950
 8004190:	20006210 	.word	0x20006210
 8004194:	200063d8 	.word	0x200063d8

08004198 <MainTask>:

// Can be polling
void MainTask(void *argument) {
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
	RobotStart();
 80041a0:	f006 fe80 	bl	800aea4 <RobotStart>
	while (1) {
		if (ps4.button == SELECT)
 80041a4:	4b36      	ldr	r3, [pc, #216]	; (8004280 <MainTask+0xe8>)
 80041a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d110      	bne.n	80041ce <MainTask+0x36>
		{
			while (ps4.button == SELECT);
 80041ac:	bf00      	nop
 80041ae:	4b34      	ldr	r3, [pc, #208]	; (8004280 <MainTask+0xe8>)
 80041b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d0fb      	beq.n	80041ae <MainTask+0x16>
			mode++;
 80041b6:	4b33      	ldr	r3, [pc, #204]	; (8004284 <MainTask+0xec>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3301      	adds	r3, #1
 80041bc:	4a31      	ldr	r2, [pc, #196]	; (8004284 <MainTask+0xec>)
 80041be:	6013      	str	r3, [r2, #0]

			if (mode > 1)
 80041c0:	4b30      	ldr	r3, [pc, #192]	; (8004284 <MainTask+0xec>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	dd02      	ble.n	80041ce <MainTask+0x36>
				mode = 0;
 80041c8:	4b2e      	ldr	r3, [pc, #184]	; (8004284 <MainTask+0xec>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]
		}

		if(ps4.button == L1)
 80041ce:	4b2c      	ldr	r3, [pc, #176]	; (8004280 <MainTask+0xe8>)
 80041d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d6:	d118      	bne.n	800420a <MainTask+0x72>
		{
			while(ps4.button == L1);
 80041d8:	bf00      	nop
 80041da:	4b29      	ldr	r3, [pc, #164]	; (8004280 <MainTask+0xe8>)
 80041dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e2:	d0fa      	beq.n	80041da <MainTask+0x42>
			vesc_duty += 0.005;
 80041e4:	4b28      	ldr	r3, [pc, #160]	; (8004288 <MainTask+0xf0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fc f9ad 	bl	8000548 <__aeabi_f2d>
 80041ee:	a322      	add	r3, pc, #136	; (adr r3, 8004278 <MainTask+0xe0>)
 80041f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f4:	f7fc f84a 	bl	800028c <__adddf3>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4610      	mov	r0, r2
 80041fe:	4619      	mov	r1, r3
 8004200:	f7fc fcf2 	bl	8000be8 <__aeabi_d2f>
 8004204:	4603      	mov	r3, r0
 8004206:	4a20      	ldr	r2, [pc, #128]	; (8004288 <MainTask+0xf0>)
 8004208:	6013      	str	r3, [r2, #0]
		}

		if(ps4.button == R1)
 800420a:	4b1d      	ldr	r3, [pc, #116]	; (8004280 <MainTask+0xe8>)
 800420c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800420e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004212:	d118      	bne.n	8004246 <MainTask+0xae>
		{
			while(ps4.button == R1);
 8004214:	bf00      	nop
 8004216:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <MainTask+0xe8>)
 8004218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800421a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800421e:	d0fa      	beq.n	8004216 <MainTask+0x7e>
			vesc_duty -= 0.005;
 8004220:	4b19      	ldr	r3, [pc, #100]	; (8004288 <MainTask+0xf0>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4618      	mov	r0, r3
 8004226:	f7fc f98f 	bl	8000548 <__aeabi_f2d>
 800422a:	a313      	add	r3, pc, #76	; (adr r3, 8004278 <MainTask+0xe0>)
 800422c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004230:	f7fc f82a 	bl	8000288 <__aeabi_dsub>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4610      	mov	r0, r2
 800423a:	4619      	mov	r1, r3
 800423c:	f7fc fcd4 	bl	8000be8 <__aeabi_d2f>
 8004240:	4603      	mov	r3, r0
 8004242:	4a11      	ldr	r2, [pc, #68]	; (8004288 <MainTask+0xf0>)
 8004244:	6013      	str	r3, [r2, #0]
		}

		switch (mode)
 8004246:	4b0f      	ldr	r3, [pc, #60]	; (8004284 <MainTask+0xec>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d00f      	beq.n	800426e <MainTask+0xd6>
 800424e:	2b02      	cmp	r3, #2
 8004250:	dca8      	bgt.n	80041a4 <MainTask+0xc>
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <MainTask+0xc4>
 8004256:	2b01      	cmp	r3, #1
 8004258:	d003      	beq.n	8004262 <MainTask+0xca>
 800425a:	e00b      	b.n	8004274 <MainTask+0xdc>
		{
			case NORMAL:
				NormalControl();
 800425c:	f006 fea4 	bl	800afa8 <NormalControl>
			break;
 8004260:	e008      	b.n	8004274 <MainTask+0xdc>

			case AUTO:
				Auto();
 8004262:	f006 ff89 	bl	800b178 <Auto>
				LidarControl(&lidar);
 8004266:	4809      	ldr	r0, [pc, #36]	; (800428c <MainTask+0xf4>)
 8004268:	f00c fc30 	bl	8010acc <LidarControl>
			break;
 800426c:	e002      	b.n	8004274 <MainTask+0xdc>

			case TUNE:
				tune();
 800426e:	f007 fc57 	bl	800bb20 <tune>
			break;
 8004272:	bf00      	nop
		if (ps4.button == SELECT)
 8004274:	e796      	b.n	80041a4 <MainTask+0xc>
 8004276:	bf00      	nop
 8004278:	47ae147b 	.word	0x47ae147b
 800427c:	3f747ae1 	.word	0x3f747ae1
 8004280:	2000a3fc 	.word	0x2000a3fc
 8004284:	20009740 	.word	0x20009740
 8004288:	20007848 	.word	0x20007848
 800428c:	200094a0 	.word	0x200094a0

08004290 <NaviTask>:
		}
	}
}

// Cannot Polling
void NaviTask(void *argument) {
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
//			{
//				pitch_stop;
//			}
//		}

		if(!load_start && !set_pick_enc && !reload)
 8004298:	4b31      	ldr	r3, [pc, #196]	; (8004360 <NaviTask+0xd0>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d115      	bne.n	80042cc <NaviTask+0x3c>
 80042a0:	4b30      	ldr	r3, [pc, #192]	; (8004364 <NaviTask+0xd4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d111      	bne.n	80042cc <NaviTask+0x3c>
 80042a8:	4b2f      	ldr	r3, [pc, #188]	; (8004368 <NaviTask+0xd8>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10d      	bne.n	80042cc <NaviTask+0x3c>
			pick_manual(ps4.joyR_y * 14000);
 80042b0:	4b2e      	ldr	r3, [pc, #184]	; (800436c <NaviTask+0xdc>)
 80042b2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80042b6:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8004370 <NaviTask+0xe0>
 80042ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042c2:	ee17 1a90 	vmov	r1, s15
 80042c6:	482b      	ldr	r0, [pc, #172]	; (8004374 <NaviTask+0xe4>)
 80042c8:	f7fc ff5f 	bl	800118a <WriteBDC>

//		if(stick_fence && MODN.x_vel == 0.0 && MODN.y_vel == 0.0)
//			RNSVelocity(0.25, 0.25, 0.25, 0.25, &rns);

		enq();
 80042cc:	f007 fc0a 	bl	800bae4 <enq>
		pick_enc = QEIRead(QEI1);
 80042d0:	2001      	movs	r0, #1
 80042d2:	f7fd fcfb 	bl	8001ccc <QEIRead>
 80042d6:	4603      	mov	r3, r0
 80042d8:	4a27      	ldr	r2, [pc, #156]	; (8004378 <NaviTask+0xe8>)
 80042da:	6013      	str	r3, [r2, #0]

		VESCPDC(vesc_duty, &vesc1);
 80042dc:	4b27      	ldr	r3, [pc, #156]	; (800437c <NaviTask+0xec>)
 80042de:	edd3 7a00 	vldr	s15, [r3]
 80042e2:	4827      	ldr	r0, [pc, #156]	; (8004380 <NaviTask+0xf0>)
 80042e4:	eeb0 0a67 	vmov.f32	s0, s15
 80042e8:	f00a fb1a 	bl	800e920 <VESCPDC>
		VESCPDC(vesc_duty, &vesc2);
 80042ec:	4b23      	ldr	r3, [pc, #140]	; (800437c <NaviTask+0xec>)
 80042ee:	edd3 7a00 	vldr	s15, [r3]
 80042f2:	4824      	ldr	r0, [pc, #144]	; (8004384 <NaviTask+0xf4>)
 80042f4:	eeb0 0a67 	vmov.f32	s0, s15
 80042f8:	f00a fb12 	bl	800e920 <VESCPDC>

		if(!pp.pp_start && !vel_adjust)
 80042fc:	4b22      	ldr	r3, [pc, #136]	; (8004388 <NaviTask+0xf8>)
 80042fe:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d108      	bne.n	800431e <NaviTask+0x8e>
 800430c:	4b1f      	ldr	r3, [pc, #124]	; (800438c <NaviTask+0xfc>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d104      	bne.n	800431e <NaviTask+0x8e>
//			if (ps4.button == R1) {
//				while (ps4.button == R1);
//				moveSpeed--;
//				setSpeedMODN(moveSpeed);
//			}
			realMODN(&ps4, &rns);
 8004314:	491e      	ldr	r1, [pc, #120]	; (8004390 <NaviTask+0x100>)
 8004316:	4815      	ldr	r0, [pc, #84]	; (800436c <NaviTask+0xdc>)
 8004318:	f000 f99e 	bl	8004658 <realMODN>
 800431c:	e01e      	b.n	800435c <NaviTask+0xcc>
		}
		else if(pp.pp_start)
 800431e:	4b1a      	ldr	r3, [pc, #104]	; (8004388 <NaviTask+0xf8>)
 8004320:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0b4      	beq.n	8004298 <NaviTask+0x8>
			RNSVelocity(pp.v1, pp.v2, pp.v3, pp.v4, &rns);
 800432e:	4b16      	ldr	r3, [pc, #88]	; (8004388 <NaviTask+0xf8>)
 8004330:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8004334:	4b14      	ldr	r3, [pc, #80]	; (8004388 <NaviTask+0xf8>)
 8004336:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 800433a:	4b13      	ldr	r3, [pc, #76]	; (8004388 <NaviTask+0xf8>)
 800433c:	edd3 6abc 	vldr	s13, [r3, #752]	; 0x2f0
 8004340:	4b11      	ldr	r3, [pc, #68]	; (8004388 <NaviTask+0xf8>)
 8004342:	ed93 6abd 	vldr	s12, [r3, #756]	; 0x2f4
 8004346:	4812      	ldr	r0, [pc, #72]	; (8004390 <NaviTask+0x100>)
 8004348:	eef0 1a46 	vmov.f32	s3, s12
 800434c:	eeb0 1a66 	vmov.f32	s2, s13
 8004350:	eef0 0a47 	vmov.f32	s1, s14
 8004354:	eeb0 0a67 	vmov.f32	s0, s15
 8004358:	f005 f8ce 	bl	80094f8 <RNSVelocity>
		if(!load_start && !set_pick_enc && !reload)
 800435c:	e79c      	b.n	8004298 <NaviTask+0x8>
 800435e:	bf00      	nop
 8004360:	20007810 	.word	0x20007810
 8004364:	20007bf8 	.word	0x20007bf8
 8004368:	20007c14 	.word	0x20007c14
 800436c:	2000a3fc 	.word	0x2000a3fc
 8004370:	465ac000 	.word	0x465ac000
 8004374:	20007bd4 	.word	0x20007bd4
 8004378:	200070a8 	.word	0x200070a8
 800437c:	20007848 	.word	0x20007848
 8004380:	20006fdc 	.word	0x20006fdc
 8004384:	20009dd8 	.word	0x20009dd8
 8004388:	2000718c 	.word	0x2000718c
 800438c:	20009498 	.word	0x20009498
 8004390:	20009378 	.word	0x20009378

08004394 <CheckingTask>:

	}
}

void CheckingTask(void *argument)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
	while (1)
	{
		Checking();
 800439c:	f007 fb2a 	bl	800b9f4 <Checking>

		if(In_LS_Shot_1 && In_LS_Shot_2)
 80043a0:	2108      	movs	r1, #8
 80043a2:	483d      	ldr	r0, [pc, #244]	; (8004498 <CheckingTask+0x104>)
 80043a4:	f00e fd4e 	bl	8012e44 <HAL_GPIO_ReadPin>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10c      	bne.n	80043c8 <CheckingTask+0x34>
 80043ae:	2110      	movs	r1, #16
 80043b0:	4839      	ldr	r0, [pc, #228]	; (8004498 <CheckingTask+0x104>)
 80043b2:	f00e fd47 	bl	8012e44 <HAL_GPIO_ReadPin>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d105      	bne.n	80043c8 <CheckingTask+0x34>
		{
			led4_on;
 80043bc:	4b37      	ldr	r3, [pc, #220]	; (800449c <CheckingTask+0x108>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80043c4:	641a      	str	r2, [r3, #64]	; 0x40
 80043c6:	e003      	b.n	80043d0 <CheckingTask+0x3c>
		}
		else
		{
			led4_off;
 80043c8:	4b34      	ldr	r3, [pc, #208]	; (800449c <CheckingTask+0x108>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2200      	movs	r2, #0
 80043ce:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(In_LS_Left_1 && In_LS_Left_2)
 80043d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80043d4:	4830      	ldr	r0, [pc, #192]	; (8004498 <CheckingTask+0x104>)
 80043d6:	f00e fd35 	bl	8012e44 <HAL_GPIO_ReadPin>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10d      	bne.n	80043fc <CheckingTask+0x68>
 80043e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80043e4:	482c      	ldr	r0, [pc, #176]	; (8004498 <CheckingTask+0x104>)
 80043e6:	f00e fd2d 	bl	8012e44 <HAL_GPIO_ReadPin>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d105      	bne.n	80043fc <CheckingTask+0x68>
		{
			led5_on;
 80043f0:	4a2b      	ldr	r2, [pc, #172]	; (80044a0 <CheckingTask+0x10c>)
 80043f2:	7e13      	ldrb	r3, [r2, #24]
 80043f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f8:	7613      	strb	r3, [r2, #24]
 80043fa:	e004      	b.n	8004406 <CheckingTask+0x72>
		}
		else
		{
			led5_off;
 80043fc:	4a28      	ldr	r2, [pc, #160]	; (80044a0 <CheckingTask+0x10c>)
 80043fe:	7e13      	ldrb	r3, [r2, #24]
 8004400:	f36f 13c7 	bfc	r3, #7, #1
 8004404:	7613      	strb	r3, [r2, #24]
		}

		if(In_Load)
 8004406:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800440a:	4826      	ldr	r0, [pc, #152]	; (80044a4 <CheckingTask+0x110>)
 800440c:	f00e fd1a 	bl	8012e44 <HAL_GPIO_ReadPin>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d105      	bne.n	8004422 <CheckingTask+0x8e>
		{
			led6_on;
 8004416:	4a22      	ldr	r2, [pc, #136]	; (80044a0 <CheckingTask+0x10c>)
 8004418:	7e13      	ldrb	r3, [r2, #24]
 800441a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800441e:	7613      	strb	r3, [r2, #24]
 8004420:	e004      	b.n	800442c <CheckingTask+0x98>
		}
		else
		{
			led6_off;
 8004422:	4a1f      	ldr	r2, [pc, #124]	; (80044a0 <CheckingTask+0x10c>)
 8004424:	7e13      	ldrb	r3, [r2, #24]
 8004426:	f36f 1386 	bfc	r3, #6, #1
 800442a:	7613      	strb	r3, [r2, #24]
		}

		if(In_Pick)
 800442c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004430:	481c      	ldr	r0, [pc, #112]	; (80044a4 <CheckingTask+0x110>)
 8004432:	f00e fd07 	bl	8012e44 <HAL_GPIO_ReadPin>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d105      	bne.n	8004448 <CheckingTask+0xb4>
		{
			led7_on;
 800443c:	4b17      	ldr	r3, [pc, #92]	; (800449c <CheckingTask+0x108>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004444:	63da      	str	r2, [r3, #60]	; 0x3c
 8004446:	e003      	b.n	8004450 <CheckingTask+0xbc>
		}
		else
		{
			led7_off;
 8004448:	4b14      	ldr	r3, [pc, #80]	; (800449c <CheckingTask+0x108>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2200      	movs	r2, #0
 800444e:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		if(led_enb)
 8004450:	4b15      	ldr	r3, [pc, #84]	; (80044a8 <CheckingTask+0x114>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0a1      	beq.n	800439c <CheckingTask+0x8>
		{
			if (HAL_GetTick() - before_shot >= shot_prd)
 8004458:	f00c fe78 	bl	801114c <HAL_GetTick>
 800445c:	4603      	mov	r3, r0
 800445e:	4a13      	ldr	r2, [pc, #76]	; (80044ac <CheckingTask+0x118>)
 8004460:	6812      	ldr	r2, [r2, #0]
 8004462:	1a9b      	subs	r3, r3, r2
 8004464:	4a12      	ldr	r2, [pc, #72]	; (80044b0 <CheckingTask+0x11c>)
 8004466:	6812      	ldr	r2, [r2, #0]
 8004468:	4293      	cmp	r3, r2
 800446a:	d397      	bcc.n	800439c <CheckingTask+0x8>
			{
				led8 = !led8;
 800446c:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <CheckingTask+0x10c>)
 800446e:	7e1b      	ldrb	r3, [r3, #24]
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	bf0c      	ite	eq
 800447a:	2301      	moveq	r3, #1
 800447c:	2300      	movne	r3, #0
 800447e:	b2d9      	uxtb	r1, r3
 8004480:	4a07      	ldr	r2, [pc, #28]	; (80044a0 <CheckingTask+0x10c>)
 8004482:	7e13      	ldrb	r3, [r2, #24]
 8004484:	f361 1345 	bfi	r3, r1, #5, #1
 8004488:	7613      	strb	r3, [r2, #24]
				before_shot = HAL_GetTick();
 800448a:	f00c fe5f 	bl	801114c <HAL_GetTick>
 800448e:	4603      	mov	r3, r0
 8004490:	461a      	mov	r2, r3
 8004492:	4b06      	ldr	r3, [pc, #24]	; (80044ac <CheckingTask+0x118>)
 8004494:	601a      	str	r2, [r3, #0]
		Checking();
 8004496:	e781      	b.n	800439c <CheckingTask+0x8>
 8004498:	40020c00 	.word	0x40020c00
 800449c:	2000618c 	.word	0x2000618c
 80044a0:	200099fc 	.word	0x200099fc
 80044a4:	40021000 	.word	0x40021000
 80044a8:	2000a9c4 	.word	0x2000a9c4
 80044ac:	20006fb0 	.word	0x20006fb0
 80044b0:	2000a770 	.word	0x2000a770

080044b4 <EmergencyTask>:
			}
		}
	}
}

void EmergencyTask(void *argument) {
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08c      	sub	sp, #48	; 0x30
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]

	while (1) {

		if (ps4.button == TOUCH) {
 80044bc:	4b1c      	ldr	r3, [pc, #112]	; (8004530 <EmergencyTask+0x7c>)
 80044be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044c4:	d1fa      	bne.n	80044bc <EmergencyTask+0x8>
//			led3 = 1;
			RNSStop(&rns);
 80044c6:	481b      	ldr	r0, [pc, #108]	; (8004534 <EmergencyTask+0x80>)
 80044c8:	f004 ff92 	bl	80093f0 <RNSStop>
			PP_stop(&pp);
 80044cc:	481a      	ldr	r0, [pc, #104]	; (8004538 <EmergencyTask+0x84>)
 80044ce:	f001 fc2c 	bl	8005d2a <PP_stop>
			pitch_stop;
 80044d2:	2100      	movs	r1, #0
 80044d4:	4819      	ldr	r0, [pc, #100]	; (800453c <EmergencyTask+0x88>)
 80044d6:	f7fc fe58 	bl	800118a <WriteBDC>
			pick_stop;
 80044da:	2100      	movs	r1, #0
 80044dc:	4818      	ldr	r0, [pc, #96]	; (8004540 <EmergencyTask+0x8c>)
 80044de:	f7fc fe54 	bl	800118a <WriteBDC>
			push_stop;
 80044e2:	2100      	movs	r1, #0
 80044e4:	4817      	ldr	r0, [pc, #92]	; (8004544 <EmergencyTask+0x90>)
 80044e6:	f7fc fe50 	bl	800118a <WriteBDC>
			ResetPickEnc();
 80044ea:	f007 faef 	bl	800bacc <ResetPickEnc>
			osThreadTerminate(MainTaskHandle);
 80044ee:	4b16      	ldr	r3, [pc, #88]	; (8004548 <EmergencyTask+0x94>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f013 fb60 	bl	8017bb8 <osThreadTerminate>
			osDelay(5);
 80044f8:	2005      	movs	r0, #5
 80044fa:	f013 fb8a 	bl	8017c12 <osDelay>

			const osThreadAttr_t MainTask_attributes = { .name = "MainTask",
 80044fe:	f107 030c 	add.w	r3, r7, #12
 8004502:	2224      	movs	r2, #36	; 0x24
 8004504:	2100      	movs	r1, #0
 8004506:	4618      	mov	r0, r3
 8004508:	f016 f910 	bl	801a72c <memset>
 800450c:	4b0f      	ldr	r3, [pc, #60]	; (800454c <EmergencyTask+0x98>)
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004514:	623b      	str	r3, [r7, #32]
 8004516:	2318      	movs	r3, #24
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
					.stack_size = 256 * 4, .priority =
							(osPriority_t) osPriorityNormal, };

			MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 800451a:	f107 030c 	add.w	r3, r7, #12
 800451e:	461a      	mov	r2, r3
 8004520:	2100      	movs	r1, #0
 8004522:	480b      	ldr	r0, [pc, #44]	; (8004550 <EmergencyTask+0x9c>)
 8004524:	f013 fab6 	bl	8017a94 <osThreadNew>
 8004528:	4603      	mov	r3, r0
 800452a:	4a07      	ldr	r2, [pc, #28]	; (8004548 <EmergencyTask+0x94>)
 800452c:	6013      	str	r3, [r2, #0]
		if (ps4.button == TOUCH) {
 800452e:	e7c5      	b.n	80044bc <EmergencyTask+0x8>
 8004530:	2000a3fc 	.word	0x2000a3fc
 8004534:	20009378 	.word	0x20009378
 8004538:	2000718c 	.word	0x2000718c
 800453c:	2000710c 	.word	0x2000710c
 8004540:	20007bd4 	.word	0x20007bd4
 8004544:	20009ad4 	.word	0x20009ad4
 8004548:	20007d2c 	.word	0x20007d2c
 800454c:	080205b8 	.word	0x080205b8
 8004550:	08004199 	.word	0x08004199

08004554 <HAL_UART_RxCpltCallback>:
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
	if (huart == IMU.huartx) {
 800455c:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <HAL_UART_RxCpltCallback+0x34>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	429a      	cmp	r2, r3
 8004564:	d102      	bne.n	800456c <HAL_UART_RxCpltCallback+0x18>
		R6091U_Handler(&IMU);
 8004566:	4808      	ldr	r0, [pc, #32]	; (8004588 <HAL_UART_RxCpltCallback+0x34>)
 8004568:	f004 fe18 	bl	800919c <R6091U_Handler>
	}

	if(huart == lidar.lidar_UART)
 800456c:	4b07      	ldr	r3, [pc, #28]	; (800458c <HAL_UART_RxCpltCallback+0x38>)
 800456e:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	429a      	cmp	r2, r3
 8004576:	d102      	bne.n	800457e <HAL_UART_RxCpltCallback+0x2a>
	{
		ObstacleHandler(&lidar);
 8004578:	4804      	ldr	r0, [pc, #16]	; (800458c <HAL_UART_RxCpltCallback+0x38>)
 800457a:	f00c fb7f 	bl	8010c7c <ObstacleHandler>
	}
}
 800457e:	bf00      	nop
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20007130 	.word	0x20007130
 800458c:	200094a0 	.word	0x200094a0

08004590 <Error_Handler>:

/**
 * @brief  This function is executed in case of errorYaw occurrence.
 */
void Error_Handler(void) {
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0

}
 8004594:	bf00      	nop
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
	...

080045a0 <MODNInit>:
 * 						  								gain added to four wheels based on the speed
 * Function Return		: NONE
 * Function Example		: void MODNInit(MODN_FWD_OMNI, 3.0, 0.5, 2.0, 0.1);
 */
void MODNInit(RobotBaseType_t base, float speed, float turnSpeed, float angleTol, float imuGain)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	ed87 0a04 	vstr	s0, [r7, #16]
 80045ac:	edc7 0a03 	vstr	s1, [r7, #12]
 80045b0:	ed87 1a02 	vstr	s2, [r7, #8]
 80045b4:	edc7 1a01 	vstr	s3, [r7, #4]
 80045b8:	75fb      	strb	r3, [r7, #23]
	MODN.base = base;
 80045ba:	4a23      	ldr	r2, [pc, #140]	; (8004648 <MODNInit+0xa8>)
 80045bc:	7dfb      	ldrb	r3, [r7, #23]
 80045be:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	MODN.speed = speed;
 80045c2:	4a21      	ldr	r2, [pc, #132]	; (8004648 <MODNInit+0xa8>)
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	61d3      	str	r3, [r2, #28]
	MODN.d	= turnSpeed;
 80045c8:	4a1f      	ldr	r2, [pc, #124]	; (8004648 <MODNInit+0xa8>)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6213      	str	r3, [r2, #32]
	MODN.radTol = angleTol/180.0*3.14159265359;
 80045ce:	68b8      	ldr	r0, [r7, #8]
 80045d0:	f7fb ffba 	bl	8000548 <__aeabi_f2d>
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	4b1c      	ldr	r3, [pc, #112]	; (800464c <MODNInit+0xac>)
 80045da:	f7fc f937 	bl	800084c <__aeabi_ddiv>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	4610      	mov	r0, r2
 80045e4:	4619      	mov	r1, r3
 80045e6:	a316      	add	r3, pc, #88	; (adr r3, 8004640 <MODNInit+0xa0>)
 80045e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ec:	f7fc f804 	bl	80005f8 <__aeabi_dmul>
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4610      	mov	r0, r2
 80045f6:	4619      	mov	r1, r3
 80045f8:	f7fc faf6 	bl	8000be8 <__aeabi_d2f>
 80045fc:	4603      	mov	r3, r0
 80045fe:	4a12      	ldr	r2, [pc, #72]	; (8004648 <MODNInit+0xa8>)
 8004600:	62d3      	str	r3, [r2, #44]	; 0x2c
	MODN.imuGain = speed*imuGain/MODN.radTol;
 8004602:	ed97 7a04 	vldr	s14, [r7, #16]
 8004606:	edd7 7a01 	vldr	s15, [r7, #4]
 800460a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800460e:	4b0e      	ldr	r3, [pc, #56]	; (8004648 <MODNInit+0xa8>)
 8004610:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004618:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <MODNInit+0xa8>)
 800461a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	MODN.radTarget = 0.0;
 800461e:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <MODNInit+0xa8>)
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	639a      	str	r2, [r3, #56]	; 0x38
	MODN.orientation = 0;
 8004626:	4b08      	ldr	r3, [pc, #32]	; (8004648 <MODNInit+0xa8>)
 8004628:	2200      	movs	r2, #0
 800462a:	641a      	str	r2, [r3, #64]	; 0x40
	MODN.real_x_vel = &(MODN.x_vel);
 800462c:	4b06      	ldr	r3, [pc, #24]	; (8004648 <MODNInit+0xa8>)
 800462e:	4a06      	ldr	r2, [pc, #24]	; (8004648 <MODNInit+0xa8>)
 8004630:	645a      	str	r2, [r3, #68]	; 0x44
	MODN.real_y_vel = &(MODN.y_vel);
 8004632:	4b05      	ldr	r3, [pc, #20]	; (8004648 <MODNInit+0xa8>)
 8004634:	4a06      	ldr	r2, [pc, #24]	; (8004650 <MODNInit+0xb0>)
 8004636:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004638:	bf00      	nop
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	54442eea 	.word	0x54442eea
 8004644:	400921fb 	.word	0x400921fb
 8004648:	20006f48 	.word	0x20006f48
 800464c:	40668000 	.word	0x40668000
 8004650:	20006f4c 	.word	0x20006f4c
 8004654:	00000000 	.word	0x00000000

08004658 <realMODN>:
 * Function Return		: NONE
 * Function Example		: realMODN(ps4, &rns);
 */

void realMODN(PSxBT_t *psx, RNS_interface_t* rns)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	ed2d 8b02 	vpush	{d8}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
	MODN.x_vel = -(psx->joyL_x) * MODN.speed;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800466c:	eeb1 7a67 	vneg.f32	s14, s15
 8004670:	4bc5      	ldr	r3, [pc, #788]	; (8004988 <realMODN+0x330>)
 8004672:	edd3 7a07 	vldr	s15, [r3, #28]
 8004676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467a:	4bc3      	ldr	r3, [pc, #780]	; (8004988 <realMODN+0x330>)
 800467c:	edc3 7a00 	vstr	s15, [r3]
	MODN.y_vel =  (psx->joyL_y) * MODN.speed;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8004686:	4bc0      	ldr	r3, [pc, #768]	; (8004988 <realMODN+0x330>)
 8004688:	edd3 7a07 	vldr	s15, [r3, #28]
 800468c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004690:	4bbd      	ldr	r3, [pc, #756]	; (8004988 <realMODN+0x330>)
 8004692:	edc3 7a01 	vstr	s15, [r3, #4]
	MODN.w_vel = ((psx->joyR_2) - (psx->joyL_2))* MODN.speed;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80046a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046a6:	4bb8      	ldr	r3, [pc, #736]	; (8004988 <realMODN+0x330>)
 80046a8:	edd3 7a07 	vldr	s15, [r3, #28]
 80046ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b0:	4bb5      	ldr	r3, [pc, #724]	; (8004988 <realMODN+0x330>)
 80046b2:	edc3 7a02 	vstr	s15, [r3, #8]
	if(MODN.x_vel==0.0 && MODN.y_vel==0.0 && MODN.w_vel==0.0){
 80046b6:	4bb4      	ldr	r3, [pc, #720]	; (8004988 <realMODN+0x330>)
 80046b8:	edd3 7a00 	vldr	s15, [r3]
 80046bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c4:	d119      	bne.n	80046fa <realMODN+0xa2>
 80046c6:	4bb0      	ldr	r3, [pc, #704]	; (8004988 <realMODN+0x330>)
 80046c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80046cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d4:	d111      	bne.n	80046fa <realMODN+0xa2>
 80046d6:	4bac      	ldr	r3, [pc, #688]	; (8004988 <realMODN+0x330>)
 80046d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80046dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e4:	d109      	bne.n	80046fa <realMODN+0xa2>
		if(rns->RNS_data.common_instruction != RNS_BUSY)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	f000 8225 	beq.w	8004b3c <realMODN+0x4e4>
			RNSStop(rns);
 80046f2:	6838      	ldr	r0, [r7, #0]
 80046f4:	f004 fe7c 	bl	80093f0 <RNSStop>
		if(rns->RNS_data.common_instruction != RNS_BUSY)
 80046f8:	e220      	b.n	8004b3c <realMODN+0x4e4>
	}else{
//		RNSEnquire(RNS_COORDINATE_X_Y_Z_Zrad, rns);
//		float realZrad = rns->enq.enq_buffer[3].data;
		float realZrad = pp.real_z_rad;
 80046fa:	4ba4      	ldr	r3, [pc, #656]	; (800498c <realMODN+0x334>)
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	60fb      	str	r3, [r7, #12]

		if(MODN.base == MODN_FWD_OMNI) {
 8004700:	4ba1      	ldr	r3, [pc, #644]	; (8004988 <realMODN+0x330>)
 8004702:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004706:	2b00      	cmp	r3, #0
 8004708:	f040 8142 	bne.w	8004990 <realMODN+0x338>
			MODN.vel1 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) + MODN.w_vel*MODN.d;
 800470c:	4b9e      	ldr	r3, [pc, #632]	; (8004988 <realMODN+0x330>)
 800470e:	ed93 8a00 	vldr	s16, [r3]
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f7fb ff18 	bl	8000548 <__aeabi_f2d>
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	a196      	add	r1, pc, #600	; (adr r1, 8004978 <realMODN+0x320>)
 800471e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004722:	f7fb fdb1 	bl	8000288 <__aeabi_dsub>
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	4610      	mov	r0, r2
 800472c:	4619      	mov	r1, r3
 800472e:	f7fc fa5b 	bl	8000be8 <__aeabi_d2f>
 8004732:	4603      	mov	r3, r0
 8004734:	ee00 3a10 	vmov	s0, r3
 8004738:	f01a fd9e 	bl	801f278 <cosf>
 800473c:	eef0 7a40 	vmov.f32	s15, s0
 8004740:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004744:	4b90      	ldr	r3, [pc, #576]	; (8004988 <realMODN+0x330>)
 8004746:	edd3 8a01 	vldr	s17, [r3, #4]
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f7fb fefc 	bl	8000548 <__aeabi_f2d>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	a188      	add	r1, pc, #544	; (adr r1, 8004978 <realMODN+0x320>)
 8004756:	e9d1 0100 	ldrd	r0, r1, [r1]
 800475a:	f7fb fd95 	bl	8000288 <__aeabi_dsub>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	4610      	mov	r0, r2
 8004764:	4619      	mov	r1, r3
 8004766:	f7fc fa3f 	bl	8000be8 <__aeabi_d2f>
 800476a:	4603      	mov	r3, r0
 800476c:	ee00 3a10 	vmov	s0, r3
 8004770:	f01a fdca 	bl	801f308 <sinf>
 8004774:	eef0 7a40 	vmov.f32	s15, s0
 8004778:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800477c:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004780:	4b81      	ldr	r3, [pc, #516]	; (8004988 <realMODN+0x330>)
 8004782:	edd3 6a02 	vldr	s13, [r3, #8]
 8004786:	4b80      	ldr	r3, [pc, #512]	; (8004988 <realMODN+0x330>)
 8004788:	edd3 7a08 	vldr	s15, [r3, #32]
 800478c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004794:	4b7c      	ldr	r3, [pc, #496]	; (8004988 <realMODN+0x330>)
 8004796:	edc3 7a03 	vstr	s15, [r3, #12]
			MODN.vel2 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) - MODN.w_vel*MODN.d;
 800479a:	4b7b      	ldr	r3, [pc, #492]	; (8004988 <realMODN+0x330>)
 800479c:	ed93 8a00 	vldr	s16, [r3]
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f7fb fed1 	bl	8000548 <__aeabi_f2d>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	a175      	add	r1, pc, #468	; (adr r1, 8004980 <realMODN+0x328>)
 80047ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047b0:	f7fb fd6a 	bl	8000288 <__aeabi_dsub>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4610      	mov	r0, r2
 80047ba:	4619      	mov	r1, r3
 80047bc:	f7fc fa14 	bl	8000be8 <__aeabi_d2f>
 80047c0:	4603      	mov	r3, r0
 80047c2:	ee00 3a10 	vmov	s0, r3
 80047c6:	f01a fd57 	bl	801f278 <cosf>
 80047ca:	eef0 7a40 	vmov.f32	s15, s0
 80047ce:	ee28 8a27 	vmul.f32	s16, s16, s15
 80047d2:	4b6d      	ldr	r3, [pc, #436]	; (8004988 <realMODN+0x330>)
 80047d4:	edd3 8a01 	vldr	s17, [r3, #4]
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f7fb feb5 	bl	8000548 <__aeabi_f2d>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	a167      	add	r1, pc, #412	; (adr r1, 8004980 <realMODN+0x328>)
 80047e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047e8:	f7fb fd4e 	bl	8000288 <__aeabi_dsub>
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	4610      	mov	r0, r2
 80047f2:	4619      	mov	r1, r3
 80047f4:	f7fc f9f8 	bl	8000be8 <__aeabi_d2f>
 80047f8:	4603      	mov	r3, r0
 80047fa:	ee00 3a10 	vmov	s0, r3
 80047fe:	f01a fd83 	bl	801f308 <sinf>
 8004802:	eef0 7a40 	vmov.f32	s15, s0
 8004806:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800480a:	ee38 7a27 	vadd.f32	s14, s16, s15
 800480e:	4b5e      	ldr	r3, [pc, #376]	; (8004988 <realMODN+0x330>)
 8004810:	edd3 6a02 	vldr	s13, [r3, #8]
 8004814:	4b5c      	ldr	r3, [pc, #368]	; (8004988 <realMODN+0x330>)
 8004816:	edd3 7a08 	vldr	s15, [r3, #32]
 800481a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800481e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004822:	4b59      	ldr	r3, [pc, #356]	; (8004988 <realMODN+0x330>)
 8004824:	edc3 7a04 	vstr	s15, [r3, #16]
			MODN.vel3 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) + MODN.w_vel*MODN.d;
 8004828:	4b57      	ldr	r3, [pc, #348]	; (8004988 <realMODN+0x330>)
 800482a:	ed93 8a00 	vldr	s16, [r3]
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f7fb fe8a 	bl	8000548 <__aeabi_f2d>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	a151      	add	r1, pc, #324	; (adr r1, 8004980 <realMODN+0x328>)
 800483a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800483e:	f7fb fd23 	bl	8000288 <__aeabi_dsub>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4610      	mov	r0, r2
 8004848:	4619      	mov	r1, r3
 800484a:	f7fc f9cd 	bl	8000be8 <__aeabi_d2f>
 800484e:	4603      	mov	r3, r0
 8004850:	ee00 3a10 	vmov	s0, r3
 8004854:	f01a fd10 	bl	801f278 <cosf>
 8004858:	eef0 7a40 	vmov.f32	s15, s0
 800485c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004860:	4b49      	ldr	r3, [pc, #292]	; (8004988 <realMODN+0x330>)
 8004862:	edd3 8a01 	vldr	s17, [r3, #4]
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f7fb fe6e 	bl	8000548 <__aeabi_f2d>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	a143      	add	r1, pc, #268	; (adr r1, 8004980 <realMODN+0x328>)
 8004872:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004876:	f7fb fd07 	bl	8000288 <__aeabi_dsub>
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	4610      	mov	r0, r2
 8004880:	4619      	mov	r1, r3
 8004882:	f7fc f9b1 	bl	8000be8 <__aeabi_d2f>
 8004886:	4603      	mov	r3, r0
 8004888:	ee00 3a10 	vmov	s0, r3
 800488c:	f01a fd3c 	bl	801f308 <sinf>
 8004890:	eef0 7a40 	vmov.f32	s15, s0
 8004894:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004898:	ee38 7a27 	vadd.f32	s14, s16, s15
 800489c:	4b3a      	ldr	r3, [pc, #232]	; (8004988 <realMODN+0x330>)
 800489e:	edd3 6a02 	vldr	s13, [r3, #8]
 80048a2:	4b39      	ldr	r3, [pc, #228]	; (8004988 <realMODN+0x330>)
 80048a4:	edd3 7a08 	vldr	s15, [r3, #32]
 80048a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048b0:	4b35      	ldr	r3, [pc, #212]	; (8004988 <realMODN+0x330>)
 80048b2:	edc3 7a05 	vstr	s15, [r3, #20]
			MODN.vel4 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) - MODN.w_vel*MODN.d;
 80048b6:	4b34      	ldr	r3, [pc, #208]	; (8004988 <realMODN+0x330>)
 80048b8:	ed93 8a00 	vldr	s16, [r3]
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f7fb fe43 	bl	8000548 <__aeabi_f2d>
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	a12c      	add	r1, pc, #176	; (adr r1, 8004978 <realMODN+0x320>)
 80048c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048cc:	f7fb fcdc 	bl	8000288 <__aeabi_dsub>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4610      	mov	r0, r2
 80048d6:	4619      	mov	r1, r3
 80048d8:	f7fc f986 	bl	8000be8 <__aeabi_d2f>
 80048dc:	4603      	mov	r3, r0
 80048de:	ee00 3a10 	vmov	s0, r3
 80048e2:	f01a fcc9 	bl	801f278 <cosf>
 80048e6:	eef0 7a40 	vmov.f32	s15, s0
 80048ea:	ee28 8a27 	vmul.f32	s16, s16, s15
 80048ee:	4b26      	ldr	r3, [pc, #152]	; (8004988 <realMODN+0x330>)
 80048f0:	edd3 8a01 	vldr	s17, [r3, #4]
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f7fb fe27 	bl	8000548 <__aeabi_f2d>
 80048fa:	4602      	mov	r2, r0
 80048fc:	460b      	mov	r3, r1
 80048fe:	a11e      	add	r1, pc, #120	; (adr r1, 8004978 <realMODN+0x320>)
 8004900:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004904:	f7fb fcc0 	bl	8000288 <__aeabi_dsub>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4610      	mov	r0, r2
 800490e:	4619      	mov	r1, r3
 8004910:	f7fc f96a 	bl	8000be8 <__aeabi_d2f>
 8004914:	4603      	mov	r3, r0
 8004916:	ee00 3a10 	vmov	s0, r3
 800491a:	f01a fcf5 	bl	801f308 <sinf>
 800491e:	eef0 7a40 	vmov.f32	s15, s0
 8004922:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004926:	ee38 7a27 	vadd.f32	s14, s16, s15
 800492a:	4b17      	ldr	r3, [pc, #92]	; (8004988 <realMODN+0x330>)
 800492c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004930:	4b15      	ldr	r3, [pc, #84]	; (8004988 <realMODN+0x330>)
 8004932:	edd3 7a08 	vldr	s15, [r3, #32]
 8004936:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800493a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800493e:	4b12      	ldr	r3, [pc, #72]	; (8004988 <realMODN+0x330>)
 8004940:	edc3 7a06 	vstr	s15, [r3, #24]
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, MODN.vel4, rns);
 8004944:	4b10      	ldr	r3, [pc, #64]	; (8004988 <realMODN+0x330>)
 8004946:	edd3 7a03 	vldr	s15, [r3, #12]
 800494a:	4b0f      	ldr	r3, [pc, #60]	; (8004988 <realMODN+0x330>)
 800494c:	ed93 7a04 	vldr	s14, [r3, #16]
 8004950:	4b0d      	ldr	r3, [pc, #52]	; (8004988 <realMODN+0x330>)
 8004952:	edd3 6a05 	vldr	s13, [r3, #20]
 8004956:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <realMODN+0x330>)
 8004958:	ed93 6a06 	vldr	s12, [r3, #24]
 800495c:	6838      	ldr	r0, [r7, #0]
 800495e:	eef0 1a46 	vmov.f32	s3, s12
 8004962:	eeb0 1a66 	vmov.f32	s2, s13
 8004966:	eef0 0a47 	vmov.f32	s1, s14
 800496a:	eeb0 0a67 	vmov.f32	s0, s15
 800496e:	f004 fdc3 	bl	80094f8 <RNSVelocity>
			MODN.vel1 = MODN.y_vel*sinf(2.0944-realZrad) + MODN.x_vel*cosf(2.0944-realZrad) + MODN.w_vel*MODN.d;
			MODN.vel2 = MODN.y_vel*sinf(1.0472-realZrad) + MODN.x_vel*cosf(1.0472-realZrad) - MODN.w_vel*MODN.d;
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
		}
	}
}
 8004972:	e0e3      	b.n	8004b3c <realMODN+0x4e4>
 8004974:	f3af 8000 	nop.w
 8004978:	2e48e8a7 	.word	0x2e48e8a7
 800497c:	3fe921ff 	.word	0x3fe921ff
 8004980:	62b6ae7d 	.word	0x62b6ae7d
 8004984:	4002d97f 	.word	0x4002d97f
 8004988:	20006f48 	.word	0x20006f48
 800498c:	2000718c 	.word	0x2000718c
		else if (MODN.base == MODN_TRI_OMNI){
 8004990:	4b71      	ldr	r3, [pc, #452]	; (8004b58 <realMODN+0x500>)
 8004992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004996:	2b01      	cmp	r3, #1
 8004998:	f040 80d0 	bne.w	8004b3c <realMODN+0x4e4>
			MODN.vel3 = MODN.y_vel*sinf(-realZrad) 		 + MODN.x_vel*cosf(-realZrad)  	    + MODN.w_vel*MODN.d;
 800499c:	4b6e      	ldr	r3, [pc, #440]	; (8004b58 <realMODN+0x500>)
 800499e:	ed93 8a01 	vldr	s16, [r3, #4]
 80049a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80049a6:	eef1 7a67 	vneg.f32	s15, s15
 80049aa:	eeb0 0a67 	vmov.f32	s0, s15
 80049ae:	f01a fcab 	bl	801f308 <sinf>
 80049b2:	eef0 7a40 	vmov.f32	s15, s0
 80049b6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80049ba:	4b67      	ldr	r3, [pc, #412]	; (8004b58 <realMODN+0x500>)
 80049bc:	edd3 8a00 	vldr	s17, [r3]
 80049c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80049c4:	eef1 7a67 	vneg.f32	s15, s15
 80049c8:	eeb0 0a67 	vmov.f32	s0, s15
 80049cc:	f01a fc54 	bl	801f278 <cosf>
 80049d0:	eef0 7a40 	vmov.f32	s15, s0
 80049d4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80049d8:	ee38 7a27 	vadd.f32	s14, s16, s15
 80049dc:	4b5e      	ldr	r3, [pc, #376]	; (8004b58 <realMODN+0x500>)
 80049de:	edd3 6a02 	vldr	s13, [r3, #8]
 80049e2:	4b5d      	ldr	r3, [pc, #372]	; (8004b58 <realMODN+0x500>)
 80049e4:	edd3 7a08 	vldr	s15, [r3, #32]
 80049e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049f0:	4b59      	ldr	r3, [pc, #356]	; (8004b58 <realMODN+0x500>)
 80049f2:	edc3 7a05 	vstr	s15, [r3, #20]
			MODN.vel1 = MODN.y_vel*sinf(2.0944-realZrad) + MODN.x_vel*cosf(2.0944-realZrad) + MODN.w_vel*MODN.d;
 80049f6:	4b58      	ldr	r3, [pc, #352]	; (8004b58 <realMODN+0x500>)
 80049f8:	ed93 8a01 	vldr	s16, [r3, #4]
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f7fb fda3 	bl	8000548 <__aeabi_f2d>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	a150      	add	r1, pc, #320	; (adr r1, 8004b48 <realMODN+0x4f0>)
 8004a08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a0c:	f7fb fc3c 	bl	8000288 <__aeabi_dsub>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4610      	mov	r0, r2
 8004a16:	4619      	mov	r1, r3
 8004a18:	f7fc f8e6 	bl	8000be8 <__aeabi_d2f>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	ee00 3a10 	vmov	s0, r3
 8004a22:	f01a fc71 	bl	801f308 <sinf>
 8004a26:	eef0 7a40 	vmov.f32	s15, s0
 8004a2a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004a2e:	4b4a      	ldr	r3, [pc, #296]	; (8004b58 <realMODN+0x500>)
 8004a30:	edd3 8a00 	vldr	s17, [r3]
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f7fb fd87 	bl	8000548 <__aeabi_f2d>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	a142      	add	r1, pc, #264	; (adr r1, 8004b48 <realMODN+0x4f0>)
 8004a40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a44:	f7fb fc20 	bl	8000288 <__aeabi_dsub>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	4619      	mov	r1, r3
 8004a50:	f7fc f8ca 	bl	8000be8 <__aeabi_d2f>
 8004a54:	4603      	mov	r3, r0
 8004a56:	ee00 3a10 	vmov	s0, r3
 8004a5a:	f01a fc0d 	bl	801f278 <cosf>
 8004a5e:	eef0 7a40 	vmov.f32	s15, s0
 8004a62:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004a66:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004a6a:	4b3b      	ldr	r3, [pc, #236]	; (8004b58 <realMODN+0x500>)
 8004a6c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a70:	4b39      	ldr	r3, [pc, #228]	; (8004b58 <realMODN+0x500>)
 8004a72:	edd3 7a08 	vldr	s15, [r3, #32]
 8004a76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a7e:	4b36      	ldr	r3, [pc, #216]	; (8004b58 <realMODN+0x500>)
 8004a80:	edc3 7a03 	vstr	s15, [r3, #12]
			MODN.vel2 = MODN.y_vel*sinf(1.0472-realZrad) + MODN.x_vel*cosf(1.0472-realZrad) - MODN.w_vel*MODN.d;
 8004a84:	4b34      	ldr	r3, [pc, #208]	; (8004b58 <realMODN+0x500>)
 8004a86:	ed93 8a01 	vldr	s16, [r3, #4]
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f7fb fd5c 	bl	8000548 <__aeabi_f2d>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	a12e      	add	r1, pc, #184	; (adr r1, 8004b50 <realMODN+0x4f8>)
 8004a96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a9a:	f7fb fbf5 	bl	8000288 <__aeabi_dsub>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	f7fc f89f 	bl	8000be8 <__aeabi_d2f>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	ee00 3a10 	vmov	s0, r3
 8004ab0:	f01a fc2a 	bl	801f308 <sinf>
 8004ab4:	eef0 7a40 	vmov.f32	s15, s0
 8004ab8:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004abc:	4b26      	ldr	r3, [pc, #152]	; (8004b58 <realMODN+0x500>)
 8004abe:	edd3 8a00 	vldr	s17, [r3]
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f7fb fd40 	bl	8000548 <__aeabi_f2d>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	a120      	add	r1, pc, #128	; (adr r1, 8004b50 <realMODN+0x4f8>)
 8004ace:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ad2:	f7fb fbd9 	bl	8000288 <__aeabi_dsub>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	4610      	mov	r0, r2
 8004adc:	4619      	mov	r1, r3
 8004ade:	f7fc f883 	bl	8000be8 <__aeabi_d2f>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	ee00 3a10 	vmov	s0, r3
 8004ae8:	f01a fbc6 	bl	801f278 <cosf>
 8004aec:	eef0 7a40 	vmov.f32	s15, s0
 8004af0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004af4:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004af8:	4b17      	ldr	r3, [pc, #92]	; (8004b58 <realMODN+0x500>)
 8004afa:	edd3 6a02 	vldr	s13, [r3, #8]
 8004afe:	4b16      	ldr	r3, [pc, #88]	; (8004b58 <realMODN+0x500>)
 8004b00:	edd3 7a08 	vldr	s15, [r3, #32]
 8004b04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b0c:	4b12      	ldr	r3, [pc, #72]	; (8004b58 <realMODN+0x500>)
 8004b0e:	edc3 7a04 	vstr	s15, [r3, #16]
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
 8004b12:	4b11      	ldr	r3, [pc, #68]	; (8004b58 <realMODN+0x500>)
 8004b14:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b18:	4b0f      	ldr	r3, [pc, #60]	; (8004b58 <realMODN+0x500>)
 8004b1a:	ed93 7a04 	vldr	s14, [r3, #16]
 8004b1e:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <realMODN+0x500>)
 8004b20:	edd3 6a05 	vldr	s13, [r3, #20]
 8004b24:	6838      	ldr	r0, [r7, #0]
 8004b26:	eddf 1a0d 	vldr	s3, [pc, #52]	; 8004b5c <realMODN+0x504>
 8004b2a:	eeb0 1a66 	vmov.f32	s2, s13
 8004b2e:	eef0 0a47 	vmov.f32	s1, s14
 8004b32:	eeb0 0a67 	vmov.f32	s0, s15
 8004b36:	f004 fcdf 	bl	80094f8 <RNSVelocity>
}
 8004b3a:	e7ff      	b.n	8004b3c <realMODN+0x4e4>
 8004b3c:	bf00      	nop
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	ecbd 8b02 	vpop	{d8}
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	c985f06f 	.word	0xc985f06f
 8004b4c:	4000c154 	.word	0x4000c154
 8004b50:	c985f06f 	.word	0xc985f06f
 8004b54:	3ff0c154 	.word	0x3ff0c154
 8004b58:	20006f48 	.word	0x20006f48
 8004b5c:	00000000 	.word	0x00000000

08004b60 <decode_Odrive>:
		break;
	}

 * */
void decode_Odrive(Odrv_t* odrive)
{
 8004b60:	b5b0      	push	{r4, r5, r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
	float data=0;
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]
	uint16_t id = Odrvmsg.RXmsg.StdId;
 8004b6e:	4b72      	ldr	r3, [pc, #456]	; (8004d38 <decode_Odrive+0x1d8>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	82fb      	strh	r3, [r7, #22]
	uint16_t mask = 0x01F;
 8004b74:	231f      	movs	r3, #31
 8004b76:	82bb      	strh	r3, [r7, #20]
	uint16_t command=id&mask;
 8004b78:	8afa      	ldrh	r2, [r7, #22]
 8004b7a:	8abb      	ldrh	r3, [r7, #20]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	827b      	strh	r3, [r7, #18]
	if(command==GET_ENCODER_ESTIMATE){
 8004b80:	8a7b      	ldrh	r3, [r7, #18]
 8004b82:	2b09      	cmp	r3, #9
 8004b84:	d136      	bne.n	8004bf4 <decode_Odrive+0x94>

		if(odrive->type==DENG_FOC)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d102      	bne.n	8004b96 <decode_Odrive+0x36>
			odrive->busy[TURN_COUNT_AND_VELOCITY]=0;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	749a      	strb	r2, [r3, #18]
 8004b96:	4b68      	ldr	r3, [pc, #416]	; (8004d38 <decode_Odrive+0x1d8>)
 8004b98:	69db      	ldr	r3, [r3, #28]

		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004b9a:	60fb      	str	r3, [r7, #12]
		odrive->feedback.encoder=data;
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	629a      	str	r2, [r3, #40]	; 0x28
 8004ba2:	4b65      	ldr	r3, [pc, #404]	; (8004d38 <decode_Odrive+0x1d8>)
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004ba6:	60fb      	str	r3, [r7, #12]
		odrive->feedback.round_per_second=data;
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	62da      	str	r2, [r3, #44]	; 0x2c
		odrive->feedback.velocity=odrive->feedback.round_per_second*M_PI*odrive->wheel_diameter;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fb fcc8 	bl	8000548 <__aeabi_f2d>
 8004bb8:	a35d      	add	r3, pc, #372	; (adr r3, 8004d30 <decode_Odrive+0x1d0>)
 8004bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbe:	f7fb fd1b 	bl	80005f8 <__aeabi_dmul>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4614      	mov	r4, r2
 8004bc8:	461d      	mov	r5, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fb fcba 	bl	8000548 <__aeabi_f2d>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4620      	mov	r0, r4
 8004bda:	4629      	mov	r1, r5
 8004bdc:	f7fb fd0c 	bl	80005f8 <__aeabi_dmul>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	4610      	mov	r0, r2
 8004be6:	4619      	mov	r1, r3
 8004be8:	f7fb fffe 	bl	8000be8 <__aeabi_d2f>
 8004bec:	4602      	mov	r2, r0
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	625a      	str	r2, [r3, #36]	; 0x24
		odrive->feedback.shadow_count=data;
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
		odrive->feedback.cpr=data;
		odrive->busy[SHADOW_COUNT]=0;
	}
}
 8004bf2:	e097      	b.n	8004d24 <decode_Odrive+0x1c4>
	else if(command==HEARTBEAT){
 8004bf4:	8a7b      	ldrh	r3, [r7, #18]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d123      	bne.n	8004c42 <decode_Odrive+0xe2>
 8004bfa:	4b4f      	ldr	r3, [pc, #316]	; (8004d38 <decode_Odrive+0x1d8>)
 8004bfc:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004bfe:	60fb      	str	r3, [r7, #12]
		odrive->feedback.error=data;
 8004c00:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c08:	ee17 2a90 	vmov	r2, s15
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	645a      	str	r2, [r3, #68]	; 0x44
		odrive->feedback.state=Odrvmsg.Data[4];
 8004c10:	4b49      	ldr	r3, [pc, #292]	; (8004d38 <decode_Odrive+0x1d8>)
 8004c12:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		odrive->feedback.traj_state = Odrvmsg.Data[7];
 8004c1c:	4b46      	ldr	r3, [pc, #280]	; (8004d38 <decode_Odrive+0x1d8>)
 8004c1e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		if(odrive->feedback.traj_state == TRAJECTORY_DONE && odrive->turning == 1)//TRAJECTORY
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004c2e:	2b80      	cmp	r3, #128	; 0x80
 8004c30:	d178      	bne.n	8004d24 <decode_Odrive+0x1c4>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	7c1b      	ldrb	r3, [r3, #16]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d174      	bne.n	8004d24 <decode_Odrive+0x1c4>
			odrive->turning = 0; // Done turning
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	741a      	strb	r2, [r3, #16]
}
 8004c40:	e070      	b.n	8004d24 <decode_Odrive+0x1c4>
	else if(command==GET_BUS_VOLTAGE){
 8004c42:	8a7b      	ldrh	r3, [r7, #18]
 8004c44:	2b17      	cmp	r3, #23
 8004c46:	d109      	bne.n	8004c5c <decode_Odrive+0xfc>
 8004c48:	4b3b      	ldr	r3, [pc, #236]	; (8004d38 <decode_Odrive+0x1d8>)
 8004c4a:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004c4c:	60fb      	str	r3, [r7, #12]
		odrive->feedback.bus_voltage=data;
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	639a      	str	r2, [r3, #56]	; 0x38
		odrive->busy[BUS_VOLTAGE]=0;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	745a      	strb	r2, [r3, #17]
}
 8004c5a:	e063      	b.n	8004d24 <decode_Odrive+0x1c4>
	else if(command==GET_SENSORLESS_ESTIMATES){
 8004c5c:	8a7b      	ldrh	r3, [r7, #18]
 8004c5e:	2b15      	cmp	r3, #21
 8004c60:	d10f      	bne.n	8004c82 <decode_Odrive+0x122>
 8004c62:	4b35      	ldr	r3, [pc, #212]	; (8004d38 <decode_Odrive+0x1d8>)
 8004c64:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004c66:	60fb      	str	r3, [r7, #12]
		odrive->feedback.sensorless_estimates.position=data;
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c6e:	4b32      	ldr	r3, [pc, #200]	; (8004d38 <decode_Odrive+0x1d8>)
 8004c70:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004c72:	60fb      	str	r3, [r7, #12]
		odrive->feedback.sensorless_estimates.velocity=data;
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	661a      	str	r2, [r3, #96]	; 0x60
		odrive->busy[SENSORLESS_ESTIMATE]=0;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	75da      	strb	r2, [r3, #23]
}
 8004c80:	e050      	b.n	8004d24 <decode_Odrive+0x1c4>
	else if(command==GET_IQ){
 8004c82:	8a7b      	ldrh	r3, [r7, #18]
 8004c84:	2b14      	cmp	r3, #20
 8004c86:	d10f      	bne.n	8004ca8 <decode_Odrive+0x148>
 8004c88:	4b2b      	ldr	r3, [pc, #172]	; (8004d38 <decode_Odrive+0x1d8>)
 8004c8a:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004c8c:	60fb      	str	r3, [r7, #12]
		odrive->feedback.Iq.iq_setpoint=data;
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	665a      	str	r2, [r3, #100]	; 0x64
 8004c94:	4b28      	ldr	r3, [pc, #160]	; (8004d38 <decode_Odrive+0x1d8>)
 8004c96:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004c98:	60fb      	str	r3, [r7, #12]
		odrive->feedback.Iq.iq_measured=data;
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	669a      	str	r2, [r3, #104]	; 0x68
		odrive->busy[IQ_VALUE]=0;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	755a      	strb	r2, [r3, #21]
}
 8004ca6:	e03d      	b.n	8004d24 <decode_Odrive+0x1c4>
	else if(command==GET_MOTOR_ERROR){
 8004ca8:	8a7b      	ldrh	r3, [r7, #18]
 8004caa:	2b03      	cmp	r3, #3
 8004cac:	d128      	bne.n	8004d00 <decode_Odrive+0x1a0>
 8004cae:	4b22      	ldr	r3, [pc, #136]	; (8004d38 <decode_Odrive+0x1d8>)
 8004cb0:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004cb2:	60fb      	str	r3, [r7, #12]
		odrive->feedback.error_code=data;
 8004cb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cbc:	ee17 2a90 	vmov	r2, s15
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	671a      	str	r2, [r3, #112]	; 0x70
		strcat(odrive->feedback.error_msg, Odrive_Error_To_String(odrive->feedback.error_code));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 f836 	bl	8004d40 <Odrive_Error_To_String>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4620      	mov	r0, r4
 8004cda:	f016 fd6c 	bl	801b7b6 <strcat>
		strcat(odrive->feedback.error_msg, "\n");
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	f7fb fa73 	bl	80001d0 <strlen>
 8004cea:	4603      	mov	r3, r0
 8004cec:	4423      	add	r3, r4
 8004cee:	4913      	ldr	r1, [pc, #76]	; (8004d3c <decode_Odrive+0x1dc>)
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	8013      	strh	r3, [r2, #0]
		odrive->busy[ODRIVE_ERROR_CODE]=0;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	759a      	strb	r2, [r3, #22]
}
 8004cfe:	e011      	b.n	8004d24 <decode_Odrive+0x1c4>
	else if(command==GET_SHADOW_COUNT){
 8004d00:	8a7b      	ldrh	r3, [r7, #18]
 8004d02:	2b0a      	cmp	r3, #10
 8004d04:	d10e      	bne.n	8004d24 <decode_Odrive+0x1c4>
 8004d06:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <decode_Odrive+0x1d8>)
 8004d08:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004d0a:	60fb      	str	r3, [r7, #12]
		odrive->feedback.shadow_count=data;
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d12:	4b09      	ldr	r3, [pc, #36]	; (8004d38 <decode_Odrive+0x1d8>)
 8004d14:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004d16:	60fb      	str	r3, [r7, #12]
		odrive->feedback.cpr=data;
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	641a      	str	r2, [r3, #64]	; 0x40
		odrive->busy[SHADOW_COUNT]=0;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	751a      	strb	r2, [r3, #20]
}
 8004d24:	bf00      	nop
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bdb0      	pop	{r4, r5, r7, pc}
 8004d2c:	f3af 8000 	nop.w
 8004d30:	54442d18 	.word	0x54442d18
 8004d34:	400921fb 	.word	0x400921fb
 8004d38:	20006d68 	.word	0x20006d68
 8004d3c:	08020728 	.word	0x08020728

08004d40 <Odrive_Error_To_String>:
	memcpy(&TxBuffer[0],&vel_gains,4);
	memcpy(&TxBuffer[4],&vel_integrator_gains,4);
	OdriveSendCAN(odrive,SET_VEL_GAIN,TxBuffer);
}

const char* Odrive_Error_To_String(error_code fault) {
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
	switch (fault) {
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4e:	f000 80fd 	beq.w	8004f4c <Odrive_Error_To_String+0x20c>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d58:	f200 80fa 	bhi.w	8004f50 <Odrive_Error_To_String+0x210>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d62:	f000 80f1 	beq.w	8004f48 <Odrive_Error_To_String+0x208>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d6c:	f200 80f0 	bhi.w	8004f50 <Odrive_Error_To_String+0x210>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d76:	f000 80e5 	beq.w	8004f44 <Odrive_Error_To_String+0x204>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d80:	f200 80e6 	bhi.w	8004f50 <Odrive_Error_To_String+0x210>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d8a:	f000 80d9 	beq.w	8004f40 <Odrive_Error_To_String+0x200>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d94:	f200 80dc 	bhi.w	8004f50 <Odrive_Error_To_String+0x210>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d9e:	f000 80cd 	beq.w	8004f3c <Odrive_Error_To_String+0x1fc>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004da8:	f200 80d2 	bhi.w	8004f50 <Odrive_Error_To_String+0x210>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db2:	f000 80c1 	beq.w	8004f38 <Odrive_Error_To_String+0x1f8>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dbc:	f200 80c8 	bhi.w	8004f50 <Odrive_Error_To_String+0x210>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc6:	f000 80b5 	beq.w	8004f34 <Odrive_Error_To_String+0x1f4>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dd0:	f200 80be 	bhi.w	8004f50 <Odrive_Error_To_String+0x210>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dda:	f000 80a9 	beq.w	8004f30 <Odrive_Error_To_String+0x1f0>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004de4:	f200 80b4 	bhi.w	8004f50 <Odrive_Error_To_String+0x210>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dee:	f000 809d 	beq.w	8004f2c <Odrive_Error_To_String+0x1ec>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df8:	f200 80aa 	bhi.w	8004f50 <Odrive_Error_To_String+0x210>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e02:	f000 8091 	beq.w	8004f28 <Odrive_Error_To_String+0x1e8>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0c:	f200 80a0 	bhi.w	8004f50 <Odrive_Error_To_String+0x210>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e16:	f000 8085 	beq.w	8004f24 <Odrive_Error_To_String+0x1e4>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e20:	f200 8096 	bhi.w	8004f50 <Odrive_Error_To_String+0x210>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e2a:	d079      	beq.n	8004f20 <Odrive_Error_To_String+0x1e0>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e32:	f200 808d 	bhi.w	8004f50 <Odrive_Error_To_String+0x210>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e3c:	d06e      	beq.n	8004f1c <Odrive_Error_To_String+0x1dc>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e44:	f200 8084 	bhi.w	8004f50 <Odrive_Error_To_String+0x210>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e4e:	d063      	beq.n	8004f18 <Odrive_Error_To_String+0x1d8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e56:	d87b      	bhi.n	8004f50 <Odrive_Error_To_String+0x210>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b20      	cmp	r3, #32
 8004e5c:	d848      	bhi.n	8004ef0 <Odrive_Error_To_String+0x1b0>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b20      	cmp	r3, #32
 8004e62:	d875      	bhi.n	8004f50 <Odrive_Error_To_String+0x210>
 8004e64:	a201      	add	r2, pc, #4	; (adr r2, 8004e6c <Odrive_Error_To_String+0x12c>)
 8004e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6a:	bf00      	nop
 8004e6c:	08004ef9 	.word	0x08004ef9
 8004e70:	08004efd 	.word	0x08004efd
 8004e74:	08004f01 	.word	0x08004f01
 8004e78:	08004f51 	.word	0x08004f51
 8004e7c:	08004f05 	.word	0x08004f05
 8004e80:	08004f51 	.word	0x08004f51
 8004e84:	08004f51 	.word	0x08004f51
 8004e88:	08004f51 	.word	0x08004f51
 8004e8c:	08004f09 	.word	0x08004f09
 8004e90:	08004f51 	.word	0x08004f51
 8004e94:	08004f51 	.word	0x08004f51
 8004e98:	08004f51 	.word	0x08004f51
 8004e9c:	08004f51 	.word	0x08004f51
 8004ea0:	08004f51 	.word	0x08004f51
 8004ea4:	08004f51 	.word	0x08004f51
 8004ea8:	08004f51 	.word	0x08004f51
 8004eac:	08004f0d 	.word	0x08004f0d
 8004eb0:	08004f51 	.word	0x08004f51
 8004eb4:	08004f51 	.word	0x08004f51
 8004eb8:	08004f51 	.word	0x08004f51
 8004ebc:	08004f51 	.word	0x08004f51
 8004ec0:	08004f51 	.word	0x08004f51
 8004ec4:	08004f51 	.word	0x08004f51
 8004ec8:	08004f51 	.word	0x08004f51
 8004ecc:	08004f51 	.word	0x08004f51
 8004ed0:	08004f51 	.word	0x08004f51
 8004ed4:	08004f51 	.word	0x08004f51
 8004ed8:	08004f51 	.word	0x08004f51
 8004edc:	08004f51 	.word	0x08004f51
 8004ee0:	08004f51 	.word	0x08004f51
 8004ee4:	08004f51 	.word	0x08004f51
 8004ee8:	08004f51 	.word	0x08004f51
 8004eec:	08004f11 	.word	0x08004f11
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b40      	cmp	r3, #64	; 0x40
 8004ef4:	d00e      	beq.n	8004f14 <Odrive_Error_To_String+0x1d4>
 8004ef6:	e02b      	b.n	8004f50 <Odrive_Error_To_String+0x210>
	case NO_ERROR: return "NO_ERROR";
 8004ef8:	4b19      	ldr	r3, [pc, #100]	; (8004f60 <Odrive_Error_To_String+0x220>)
 8004efa:	e02a      	b.n	8004f52 <Odrive_Error_To_String+0x212>
	case INITIALIZING: return "INITIALIZING";
 8004efc:	4b19      	ldr	r3, [pc, #100]	; (8004f64 <Odrive_Error_To_String+0x224>)
 8004efe:	e028      	b.n	8004f52 <Odrive_Error_To_String+0x212>
	case SYSTEM_LEVEL: return "SYSTEM_LEVEL";	//firmware bug / system error: memory corruption, stack overflow, frozen thread
 8004f00:	4b19      	ldr	r3, [pc, #100]	; (8004f68 <Odrive_Error_To_String+0x228>)
 8004f02:	e026      	b.n	8004f52 <Odrive_Error_To_String+0x212>
	case TIMING_ERROR: return "TIMING_ERROR";
 8004f04:	4b19      	ldr	r3, [pc, #100]	; (8004f6c <Odrive_Error_To_String+0x22c>)
 8004f06:	e024      	b.n	8004f52 <Odrive_Error_To_String+0x212>
	case MISSING_ESTIMATE: return "MISSING_ESTIMATE";
 8004f08:	4b19      	ldr	r3, [pc, #100]	; (8004f70 <Odrive_Error_To_String+0x230>)
 8004f0a:	e022      	b.n	8004f52 <Odrive_Error_To_String+0x212>
	case BAD_CONFIG: return "BAD_CONFIG";
 8004f0c:	4b19      	ldr	r3, [pc, #100]	; (8004f74 <Odrive_Error_To_String+0x234>)
 8004f0e:	e020      	b.n	8004f52 <Odrive_Error_To_String+0x212>
	case DRV_FAULT: return "DRV_FAULT";
 8004f10:	4b19      	ldr	r3, [pc, #100]	; (8004f78 <Odrive_Error_To_String+0x238>)
 8004f12:	e01e      	b.n	8004f52 <Odrive_Error_To_String+0x212>
	case MISSING_INPUT: return "MISSING_INPUT";
 8004f14:	4b19      	ldr	r3, [pc, #100]	; (8004f7c <Odrive_Error_To_String+0x23c>)
 8004f16:	e01c      	b.n	8004f52 <Odrive_Error_To_String+0x212>
	case DC_BUS_OVER_VOLTAGE: return "DC_BUS_OVER_VOLTAGE";
 8004f18:	4b19      	ldr	r3, [pc, #100]	; (8004f80 <Odrive_Error_To_String+0x240>)
 8004f1a:	e01a      	b.n	8004f52 <Odrive_Error_To_String+0x212>
	case DC_BUS_UNDER_VOLTAGE: return "DC_BUS_UNDER_VOLTAGE";
 8004f1c:	4b19      	ldr	r3, [pc, #100]	; (8004f84 <Odrive_Error_To_String+0x244>)
 8004f1e:	e018      	b.n	8004f52 <Odrive_Error_To_String+0x212>
	case DC_BUS_OVER_CURRENT: return "DC_BUS_OVER_CURRENT";
 8004f20:	4b19      	ldr	r3, [pc, #100]	; (8004f88 <Odrive_Error_To_String+0x248>)
 8004f22:	e016      	b.n	8004f52 <Odrive_Error_To_String+0x212>
	case DC_BUS_OVER_REGEN_CURRENT: return "DC_BUS_OVER_REGEN_CURRENT";
 8004f24:	4b19      	ldr	r3, [pc, #100]	; (8004f8c <Odrive_Error_To_String+0x24c>)
 8004f26:	e014      	b.n	8004f52 <Odrive_Error_To_String+0x212>
	case CURRENT_LIMIT_VIOLATION: return "CURRENT_LIMIT_VIOLATION";
 8004f28:	4b19      	ldr	r3, [pc, #100]	; (8004f90 <Odrive_Error_To_String+0x250>)
 8004f2a:	e012      	b.n	8004f52 <Odrive_Error_To_String+0x212>
	case MOTOR_OVER_TEMP: return "MOTOR_OVER_TEMP";
 8004f2c:	4b19      	ldr	r3, [pc, #100]	; (8004f94 <Odrive_Error_To_String+0x254>)
 8004f2e:	e010      	b.n	8004f52 <Odrive_Error_To_String+0x212>
	case INVERTER_OVER_TEMP: return "INVERTER_OVER_TEMP";
 8004f30:	4b19      	ldr	r3, [pc, #100]	; (8004f98 <Odrive_Error_To_String+0x258>)
 8004f32:	e00e      	b.n	8004f52 <Odrive_Error_To_String+0x212>
	case VELOCITY_LIMIT_VIOLATION: return "VELOCITY_LIMIT_VIOLATION";
 8004f34:	4b19      	ldr	r3, [pc, #100]	; (8004f9c <Odrive_Error_To_String+0x25c>)
 8004f36:	e00c      	b.n	8004f52 <Odrive_Error_To_String+0x212>
	case POSITION_LIMIT_VIOLATION: return "POSITION_LIMIT_VIOLATION";
 8004f38:	4b19      	ldr	r3, [pc, #100]	; (8004fa0 <Odrive_Error_To_String+0x260>)
 8004f3a:	e00a      	b.n	8004f52 <Odrive_Error_To_String+0x212>
	case WATCHDOG_TIMER_EXPIRED: return "WATCHDOG_TIMER_EXPIRED";
 8004f3c:	4b19      	ldr	r3, [pc, #100]	; (8004fa4 <Odrive_Error_To_String+0x264>)
 8004f3e:	e008      	b.n	8004f52 <Odrive_Error_To_String+0x212>
	case ESTOP_REQUESTED: return "ESTOP_REQUESTED";
 8004f40:	4b19      	ldr	r3, [pc, #100]	; (8004fa8 <Odrive_Error_To_String+0x268>)
 8004f42:	e006      	b.n	8004f52 <Odrive_Error_To_String+0x212>
	case SPINOUT_DETECTED: return "SPINOUT_DETECTED";
 8004f44:	4b19      	ldr	r3, [pc, #100]	; (8004fac <Odrive_Error_To_String+0x26c>)
 8004f46:	e004      	b.n	8004f52 <Odrive_Error_To_String+0x212>
	case OTHER_DEVICE_FAILED: return "OTHER_DEVICE_FAILED";
 8004f48:	4b19      	ldr	r3, [pc, #100]	; (8004fb0 <Odrive_Error_To_String+0x270>)
 8004f4a:	e002      	b.n	8004f52 <Odrive_Error_To_String+0x212>
	case CALIBRATION_ERROR: return "CALIBRATION_ERROR";
 8004f4c:	4b19      	ldr	r3, [pc, #100]	; (8004fb4 <Odrive_Error_To_String+0x274>)
 8004f4e:	e000      	b.n	8004f52 <Odrive_Error_To_String+0x212>
	}

	return "Unknown fault";
 8004f50:	4b19      	ldr	r3, [pc, #100]	; (8004fb8 <Odrive_Error_To_String+0x278>)
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	0802072c 	.word	0x0802072c
 8004f64:	08020738 	.word	0x08020738
 8004f68:	08020748 	.word	0x08020748
 8004f6c:	08020758 	.word	0x08020758
 8004f70:	08020768 	.word	0x08020768
 8004f74:	0802077c 	.word	0x0802077c
 8004f78:	08020788 	.word	0x08020788
 8004f7c:	08020794 	.word	0x08020794
 8004f80:	080207a4 	.word	0x080207a4
 8004f84:	080207b8 	.word	0x080207b8
 8004f88:	080207d0 	.word	0x080207d0
 8004f8c:	080207e4 	.word	0x080207e4
 8004f90:	08020800 	.word	0x08020800
 8004f94:	08020818 	.word	0x08020818
 8004f98:	08020828 	.word	0x08020828
 8004f9c:	0802083c 	.word	0x0802083c
 8004fa0:	08020858 	.word	0x08020858
 8004fa4:	08020874 	.word	0x08020874
 8004fa8:	0802088c 	.word	0x0802088c
 8004fac:	0802089c 	.word	0x0802089c
 8004fb0:	080208b0 	.word	0x080208b0
 8004fb4:	080208c4 	.word	0x080208c4
 8004fb8:	080208d8 	.word	0x080208d8

08004fbc <OdriveCAN_Handler>:
}



void OdriveCAN_Handler()
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
	static int c[2];
	uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 8004fc2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004fc6:	807b      	strh	r3, [r7, #2]
	uint16_t id = CAN1RxMessage.StdId&command_mask;
 8004fc8:	4b2f      	ldr	r3, [pc, #188]	; (8005088 <OdriveCAN_Handler+0xcc>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	887b      	ldrh	r3, [r7, #2]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	803b      	strh	r3, [r7, #0]
	id=id>>5;
 8004fd4:	883b      	ldrh	r3, [r7, #0]
 8004fd6:	095b      	lsrs	r3, r3, #5
 8004fd8:	803b      	strh	r3, [r7, #0]
	int i=0;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	607b      	str	r3, [r7, #4]
	for( i=0 ; i < number_of_odrive; i++)
 8004fde:	2300      	movs	r3, #0
 8004fe0:	607b      	str	r3, [r7, #4]
 8004fe2:	e01f      	b.n	8005024 <OdriveCAN_Handler+0x68>
	{
		if(id == P_to_Odrive[i]->Instance)
 8004fe4:	4b29      	ldr	r3, [pc, #164]	; (800508c <OdriveCAN_Handler+0xd0>)
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	8b1b      	ldrh	r3, [r3, #24]
 8004ff2:	883a      	ldrh	r2, [r7, #0]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d112      	bne.n	800501e <OdriveCAN_Handler+0x62>
		{
			decode_Odrive(P_to_Odrive[i]);
 8004ff8:	4b24      	ldr	r3, [pc, #144]	; (800508c <OdriveCAN_Handler+0xd0>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff fdab 	bl	8004b60 <decode_Odrive>
			c[i]++;
 800500a:	4a21      	ldr	r2, [pc, #132]	; (8005090 <OdriveCAN_Handler+0xd4>)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	491e      	ldr	r1, [pc, #120]	; (8005090 <OdriveCAN_Handler+0xd4>)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 800501c:	e007      	b.n	800502e <OdriveCAN_Handler+0x72>
	for( i=0 ; i < number_of_odrive; i++)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	3301      	adds	r3, #1
 8005022:	607b      	str	r3, [r7, #4]
 8005024:	4b1b      	ldr	r3, [pc, #108]	; (8005094 <OdriveCAN_Handler+0xd8>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	429a      	cmp	r2, r3
 800502c:	dbda      	blt.n	8004fe4 <OdriveCAN_Handler+0x28>
		//			decode_Odrive(&Odrv2);
		//			break;
		//		}
	}

	if(c[0]==100)
 800502e:	4b18      	ldr	r3, [pc, #96]	; (8005090 <OdriveCAN_Handler+0xd4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b64      	cmp	r3, #100	; 0x64
 8005034:	d111      	bne.n	800505a <OdriveCAN_Handler+0x9e>
	{
		c[0]=0;
 8005036:	4b16      	ldr	r3, [pc, #88]	; (8005090 <OdriveCAN_Handler+0xd4>)
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]
		GPIOC_OUT->bit14=!GPIOC_OUT->bit14;
 800503c:	4b16      	ldr	r3, [pc, #88]	; (8005098 <OdriveCAN_Handler+0xdc>)
 800503e:	785b      	ldrb	r3, [r3, #1]
 8005040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005044:	b2db      	uxtb	r3, r3
 8005046:	4a14      	ldr	r2, [pc, #80]	; (8005098 <OdriveCAN_Handler+0xdc>)
 8005048:	2b00      	cmp	r3, #0
 800504a:	bf0c      	ite	eq
 800504c:	2301      	moveq	r3, #1
 800504e:	2300      	movne	r3, #0
 8005050:	b2d9      	uxtb	r1, r3
 8005052:	7853      	ldrb	r3, [r2, #1]
 8005054:	f361 1386 	bfi	r3, r1, #6, #1
 8005058:	7053      	strb	r3, [r2, #1]
	}

	if(c[1]==100)
 800505a:	4b0d      	ldr	r3, [pc, #52]	; (8005090 <OdriveCAN_Handler+0xd4>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b64      	cmp	r3, #100	; 0x64
 8005060:	d10e      	bne.n	8005080 <OdriveCAN_Handler+0xc4>
	{
		c[1]=0;
 8005062:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <OdriveCAN_Handler+0xd4>)
 8005064:	2200      	movs	r2, #0
 8005066:	605a      	str	r2, [r3, #4]
		GPIOC_OUT->bit15=!GPIOC_OUT->bit15;
 8005068:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <OdriveCAN_Handler+0xdc>)
 800506a:	785b      	ldrb	r3, [r3, #1]
 800506c:	b25b      	sxtb	r3, r3
 800506e:	4a0a      	ldr	r2, [pc, #40]	; (8005098 <OdriveCAN_Handler+0xdc>)
 8005070:	43db      	mvns	r3, r3
 8005072:	b2db      	uxtb	r3, r3
 8005074:	09db      	lsrs	r3, r3, #7
 8005076:	b2d9      	uxtb	r1, r3
 8005078:	7853      	ldrb	r3, [r2, #1]
 800507a:	f361 13c7 	bfi	r3, r1, #7, #1
 800507e:	7053      	strb	r3, [r2, #1]
	}

}
 8005080:	bf00      	nop
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	2000a8d8 	.word	0x2000a8d8
 800508c:	2000a9f8 	.word	0x2000a9f8
 8005090:	20000290 	.word	0x20000290
 8005094:	2000028c 	.word	0x2000028c
 8005098:	40020814 	.word	0x40020814

0800509c <PIDSourceInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void PIDSourceInit (float *in, float *out, PID_t *pid)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
	pid->error = in;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	605a      	str	r2, [r3, #4]
	pid->out_put = out;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	609a      	str	r2, [r3, #8]
}
 80050b4:	bf00      	nop
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <PIDGainInit>:

void PIDGainInit(float ts, float sat, float ke, float ku, float kp, float ki,
									float kd, float kn, PID_t *pid)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08a      	sub	sp, #40	; 0x28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80050ca:	edc7 0a08 	vstr	s1, [r7, #32]
 80050ce:	ed87 1a07 	vstr	s2, [r7, #28]
 80050d2:	edc7 1a06 	vstr	s3, [r7, #24]
 80050d6:	ed87 2a05 	vstr	s4, [r7, #20]
 80050da:	edc7 2a04 	vstr	s5, [r7, #16]
 80050de:	ed87 3a03 	vstr	s6, [r7, #12]
 80050e2:	edc7 3a02 	vstr	s7, [r7, #8]
 80050e6:	6078      	str	r0, [r7, #4]
	pid->K[TS] = ts;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ec:	60da      	str	r2, [r3, #12]
	pid->K[SAT] = sat;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a3a      	ldr	r2, [r7, #32]
 80050f2:	611a      	str	r2, [r3, #16]
	pid->K[KE] = ke;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	69fa      	ldr	r2, [r7, #28]
 80050f8:	615a      	str	r2, [r3, #20]
	pid->K[KU] = ku;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	619a      	str	r2, [r3, #24]
	pid->K[KP] = kp;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	61da      	str	r2, [r3, #28]
	pid->K[KI] = ki;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	621a      	str	r2, [r3, #32]
	pid->K[KD] = kd;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	625a      	str	r2, [r3, #36]	; 0x24
	pid->K[KN] = kn;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	629a      	str	r2, [r3, #40]	; 0x28
	PIDCoeffCalc(pid);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f81b 	bl	8005154 <PIDCoeffCalc>
//	pid->K[D_1] = (((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) / (pid->K[KN] * pid->K[TS] + 2);
//	} else {
//		pid->pd_flag = 0;
//		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0;
//	}
}
 800511e:	bf00      	nop
 8005120:	3728      	adds	r7, #40	; 0x28
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <PIDGainSet>:

void PIDGainSet (unsigned char a, float value, PID_t *pid)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b084      	sub	sp, #16
 800512a:	af00      	add	r7, sp, #0
 800512c:	4603      	mov	r3, r0
 800512e:	ed87 0a02 	vstr	s0, [r7, #8]
 8005132:	6079      	str	r1, [r7, #4]
 8005134:	73fb      	strb	r3, [r7, #15]
	pid->K[a] = value;
 8005136:	7bfb      	ldrb	r3, [r7, #15]
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	3302      	adds	r3, #2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	3304      	adds	r3, #4
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	601a      	str	r2, [r3, #0]
	PIDCoeffCalc(pid);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f804 	bl	8005154 <PIDCoeffCalc>
}
 800514c:	bf00      	nop
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <PIDCoeffCalc>:

void PIDCoeffCalc (PID_t *pid)
{
 8005154:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
	if (pid->K[KI] != 0){
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	edd3 7a08 	vldr	s15, [r3, #32]
 8005164:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800516c:	d013      	beq.n	8005196 <PIDCoeffCalc+0x42>
		pid->K[B_0] = (pid->K[TS] * pid->K[KI]) * 0.5;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	ed93 7a03 	vldr	s14, [r3, #12]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	edd3 7a08 	vldr	s15, [r3, #32]
 800517a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005182:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		pid->K[B_1] = pid->K[B_0];
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	631a      	str	r2, [r3, #48]	; 0x30
 8005194:	e007      	b.n	80051a6 <PIDCoeffCalc+0x52>
	} else {
		pid->K[B_0] = pid->K[B_1] = 0;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f04f 0200 	mov.w	r2, #0
 800519c:	631a      	str	r2, [r3, #48]	; 0x30
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	edd3 7a07 	vldr	s15, [r3, #28]
 80051ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80051b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b4:	d108      	bne.n	80051c8 <PIDCoeffCalc+0x74>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80051bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80051c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c4:	f000 80ef 	beq.w	80053a6 <PIDCoeffCalc+0x252>
	pid->K[C_1] = -((pid->K[TS] * pid->K[KN] - 2.0) / (pid->K[TS] * pid->K[KN] + 2.0));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	ed93 7a03 	vldr	s14, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80051d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d8:	ee17 0a90 	vmov	r0, s15
 80051dc:	f7fb f9b4 	bl	8000548 <__aeabi_f2d>
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051e8:	f7fb f84e 	bl	8000288 <__aeabi_dsub>
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	4614      	mov	r4, r2
 80051f2:	461d      	mov	r5, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	ed93 7a03 	vldr	s14, [r3, #12]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005204:	ee17 0a90 	vmov	r0, s15
 8005208:	f7fb f99e 	bl	8000548 <__aeabi_f2d>
 800520c:	f04f 0200 	mov.w	r2, #0
 8005210:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005214:	f7fb f83a 	bl	800028c <__adddf3>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4620      	mov	r0, r4
 800521e:	4629      	mov	r1, r5
 8005220:	f7fb fb14 	bl	800084c <__aeabi_ddiv>
 8005224:	4602      	mov	r2, r0
 8005226:	460b      	mov	r3, r1
 8005228:	4610      	mov	r0, r2
 800522a:	4619      	mov	r1, r3
 800522c:	f7fb fcdc 	bl	8000be8 <__aeabi_d2f>
 8005230:	4603      	mov	r3, r0
 8005232:	ee07 3a90 	vmov	s15, r3
 8005236:	eef1 7a67 	vneg.f32	s15, s15
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->K[D_0] = (pid->K[KP] + ((2.0 * pid->K[KD] * pid->K[KN]) / (pid->K[KN] * pid->K[TS] + 2.0)));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	4618      	mov	r0, r3
 8005246:	f7fb f97f 	bl	8000548 <__aeabi_f2d>
 800524a:	4604      	mov	r4, r0
 800524c:	460d      	mov	r5, r1
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	4618      	mov	r0, r3
 8005254:	f7fb f978 	bl	8000548 <__aeabi_f2d>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	f7fb f816 	bl	800028c <__adddf3>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4690      	mov	r8, r2
 8005266:	4699      	mov	r9, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526c:	4618      	mov	r0, r3
 800526e:	f7fb f96b 	bl	8000548 <__aeabi_f2d>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4640      	mov	r0, r8
 8005278:	4649      	mov	r1, r9
 800527a:	f7fb f9bd 	bl	80005f8 <__aeabi_dmul>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	4690      	mov	r8, r2
 8005284:	4699      	mov	r9, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005296:	ee17 0a90 	vmov	r0, s15
 800529a:	f7fb f955 	bl	8000548 <__aeabi_f2d>
 800529e:	f04f 0200 	mov.w	r2, #0
 80052a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052a6:	f7fa fff1 	bl	800028c <__adddf3>
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
 80052ae:	4640      	mov	r0, r8
 80052b0:	4649      	mov	r1, r9
 80052b2:	f7fb facb 	bl	800084c <__aeabi_ddiv>
 80052b6:	4602      	mov	r2, r0
 80052b8:	460b      	mov	r3, r1
 80052ba:	4620      	mov	r0, r4
 80052bc:	4629      	mov	r1, r5
 80052be:	f7fa ffe5 	bl	800028c <__adddf3>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4610      	mov	r0, r2
 80052c8:	4619      	mov	r1, r3
 80052ca:	f7fb fc8d 	bl	8000be8 <__aeabi_d2f>
 80052ce:	4602      	mov	r2, r0
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	639a      	str	r2, [r3, #56]	; 0x38
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80052e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052e4:	ee17 0a90 	vmov	r0, s15
 80052e8:	f7fb f92e 	bl	8000548 <__aeabi_f2d>
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052f4:	f7fa ffc8 	bl	8000288 <__aeabi_dsub>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4614      	mov	r4, r2
 80052fe:	461d      	mov	r5, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	69db      	ldr	r3, [r3, #28]
 8005304:	4618      	mov	r0, r3
 8005306:	f7fb f91f 	bl	8000548 <__aeabi_f2d>
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	4620      	mov	r0, r4
 8005310:	4629      	mov	r1, r5
 8005312:	f7fb f971 	bl	80005f8 <__aeabi_dmul>
 8005316:	4602      	mov	r2, r0
 8005318:	460b      	mov	r3, r1
 800531a:	4614      	mov	r4, r2
 800531c:	461d      	mov	r5, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	4618      	mov	r0, r3
 8005324:	f7fb f910 	bl	8000548 <__aeabi_f2d>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	f7fa ffae 	bl	800028c <__adddf3>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4690      	mov	r8, r2
 8005336:	4699      	mov	r9, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533c:	4618      	mov	r0, r3
 800533e:	f7fb f903 	bl	8000548 <__aeabi_f2d>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4640      	mov	r0, r8
 8005348:	4649      	mov	r1, r9
 800534a:	f7fb f955 	bl	80005f8 <__aeabi_dmul>
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	4620      	mov	r0, r4
 8005354:	4629      	mov	r1, r5
 8005356:	f7fa ff97 	bl	8000288 <__aeabi_dsub>
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	4614      	mov	r4, r2
 8005360:	461d      	mov	r5, r3
					(pid->K[KN] * pid->K[TS] + 2.0));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	edd3 7a03 	vldr	s15, [r3, #12]
 800536e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005372:	ee17 0a90 	vmov	r0, s15
 8005376:	f7fb f8e7 	bl	8000548 <__aeabi_f2d>
 800537a:	f04f 0200 	mov.w	r2, #0
 800537e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005382:	f7fa ff83 	bl	800028c <__adddf3>
 8005386:	4602      	mov	r2, r0
 8005388:	460b      	mov	r3, r1
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 800538a:	4620      	mov	r0, r4
 800538c:	4629      	mov	r1, r5
 800538e:	f7fb fa5d 	bl	800084c <__aeabi_ddiv>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	4610      	mov	r0, r2
 8005398:	4619      	mov	r1, r3
 800539a:	f7fb fc25 	bl	8000be8 <__aeabi_d2f>
 800539e:	4602      	mov	r2, r0
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80053a4:	e00c      	b.n	80053c0 <PIDCoeffCalc+0x26c>
	} else {
		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0.0;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f04f 0200 	mov.w	r2, #0
 80053ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	639a      	str	r2, [r3, #56]	; 0x38
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80053be:	bf00      	nop
 80053c0:	bf00      	nop
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080053ca <PIDDelayInit>:

void PIDDelayInit (PID_t *pid)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
//	unsigned char i;
//	for(i = 0; i < 2; i++){
//		pid->i_delay[i] = 0;
//		pid->d_delay[i] = 0;
//	}
	pid->i_delay[0] = 0.0;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	641a      	str	r2, [r3, #64]	; 0x40
	pid->i_delay[1] = 0.0;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	645a      	str	r2, [r3, #68]	; 0x44
	pid->d_delay[0] = 0.0;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	649a      	str	r2, [r3, #72]	; 0x48
	pid->d_delay[1] = 0.0;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f04f 0200 	mov.w	r2, #0
 80053f0:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->s_delay = 0.0;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f04f 0200 	mov.w	r2, #0
 80053f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80053fa:	bf00      	nop
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <PID>:
{
	return !pid->s_flag;	/* 1 is not saturated, 0 is saturated */
}

void PID (PID_t *pid)
{
 8005406:	b480      	push	{r7}
 8005408:	b087      	sub	sp, #28
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
	/* Error ******************************************************************/
	float input_buffer, error;

	input_buffer = *pid->error;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	613b      	str	r3, [r7, #16]
	error = input_buffer * pid->K[KE];
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	edd3 7a05 	vldr	s15, [r3, #20]
 800541c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005424:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Reset previous sum *****************************************************/
	pid->s_delay = 0;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f04f 0200 	mov.w	r2, #0
 800542e:	651a      	str	r2, [r3, #80]	; 0x50

	/* I algorithm ************************************************************/

	if (pid->K[KI] != 0){
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	edd3 7a08 	vldr	s15, [r3, #32]
 8005436:	eef5 7a40 	vcmp.f32	s15, #0.0
 800543a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800543e:	d033      	beq.n	80054a8 <PID+0xa2>
		if (pid->s_flag){     //flag only, so 0 or 1...
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00a      	beq.n	8005464 <PID+0x5e>
			pid->i_delay[1] = error + pid->i_delay[0];      //it is not saturated, so it will continue add error
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8005454:	edd7 7a03 	vldr	s15, [r7, #12]
 8005458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8005462:	e003      	b.n	800546c <PID+0x66>
		} else {
			pid->i_delay[1] = pid->i_delay[0];				//it is saturated already, so all pid->i_delay will be constant
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800547e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005482:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ (pid->K[B_1] * pid->i_delay[0]);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005492:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005496:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->i_delay[0] = pid->i_delay[1];
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40

// since final output is addition of 2 outputs, so pid->s_delay will combine with the equation in document..

	/* PD algorithm ***********************************************************/

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){       				// i has change behind KP to KD..
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	edd3 7a07 	vldr	s15, [r3, #28]
 80054ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80054b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b6:	d107      	bne.n	80054c8 <PID+0xc2>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80054be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80054c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c6:	d02c      	beq.n	8005522 <PID+0x11c>
		pid->d_delay[1] = error + pid->K[C_1] * pid->d_delay[0];  		//pid->d_delay[0] is old value,pid->d_delay[1]is new value,so both are different values
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80054d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80054dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80054f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054fc:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ pid->K[D_1] * pid->d_delay[0];
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800550c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005510:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->d_delay[0] = pid->d_delay[1];
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	649a      	str	r2, [r3, #72]	; 0x48
	}

	/* Saturation element *****************************************************/
	float output_buffer, output;

	output_buffer = pid->s_delay;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005526:	60bb      	str	r3, [r7, #8]
	if (output_buffer > pid->K[SAT]){
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	edd3 7a04 	vldr	s15, [r3, #16]
 800552e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005532:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800553a:	dd0f      	ble.n	800555c <PID+0x156>
		output = (pid->K[SAT] * pid->K[KU]);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	ed93 7a04 	vldr	s14, [r3, #16]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	edd3 7a06 	vldr	s15, [r3, #24]
 8005548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800554c:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	7813      	ldrb	r3, [r2, #0]
 8005554:	f36f 0300 	bfc	r3, #0, #1
 8005558:	7013      	strb	r3, [r2, #0]
 800555a:	e02b      	b.n	80055b4 <PID+0x1ae>
	}else if (output_buffer < -(pid->K[SAT])){
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	edd3 7a04 	vldr	s15, [r3, #16]
 8005562:	eef1 7a67 	vneg.f32	s15, s15
 8005566:	ed97 7a02 	vldr	s14, [r7, #8]
 800556a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800556e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005572:	d511      	bpl.n	8005598 <PID+0x192>
		output = -(pid->K[SAT] * pid->K[KU]);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	ed93 7a04 	vldr	s14, [r3, #16]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005584:	eef1 7a67 	vneg.f32	s15, s15
 8005588:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	7813      	ldrb	r3, [r2, #0]
 8005590:	f36f 0300 	bfc	r3, #0, #1
 8005594:	7013      	strb	r3, [r2, #0]
 8005596:	e00d      	b.n	80055b4 <PID+0x1ae>
	}else {
		output = (output_buffer * pid->K[KU]);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	edd3 7a06 	vldr	s15, [r3, #24]
 800559e:	ed97 7a02 	vldr	s14, [r7, #8]
 80055a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a6:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 1;							/* Not saturated */
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	7813      	ldrb	r3, [r2, #0]
 80055ae:	f043 0301 	orr.w	r3, r3, #1
 80055b2:	7013      	strb	r3, [r2, #0]
	}

	/* Output *****************************************************************/
	*pid->out_put = output;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	601a      	str	r2, [r3, #0]
}
 80055bc:	bf00      	nop
 80055be:	371c      	adds	r7, #28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <PPInit>:
#include "../adapter.h"

void PPInit(uint8_t base,float *qeix, float *qeiy, float*imu,PathPlan_t *pp)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60b9      	str	r1, [r7, #8]
 80055d0:	607a      	str	r2, [r7, #4]
 80055d2:	603b      	str	r3, [r7, #0]
 80055d4:	4603      	mov	r3, r0
 80055d6:	73fb      	strb	r3, [r7, #15]
	pp->base_shape=base;
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	7bfa      	ldrb	r2, [r7, #15]
 80055dc:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
	pp->qeix = qeix;
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	601a      	str	r2, [r3, #0]
	pp->qeiy = qeiy;
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	605a      	str	r2, [r3, #4]
	pp->yaw = imu;
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	609a      	str	r2, [r3, #8]
	pp->point_start=1;
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 80055f8:	f043 0302 	orr.w	r3, r3, #2
 80055fc:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538

	PIDSourceInit(&(pp->error_x), &(pp->outx), &(pp->x));
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	f503 702c 	add.w	r0, r3, #688	; 0x2b0
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005612:	461a      	mov	r2, r3
 8005614:	f7ff fd42 	bl	800509c <PIDSourceInit>
	PIDGainInit(0.005, 1.0, 1.0, 1.0, 1.0, 0.0, 0.4, 30.0, &(pp->x));
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800561e:	4618      	mov	r0, r3
 8005620:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8005624:	ed9f 3a49 	vldr	s6, [pc, #292]	; 800574c <PPInit+0x184>
 8005628:	eddf 2a49 	vldr	s5, [pc, #292]	; 8005750 <PPInit+0x188>
 800562c:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8005630:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8005634:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005638:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800563c:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8005754 <PPInit+0x18c>
 8005640:	f7ff fd3e 	bl	80050c0 <PIDGainInit>
	PIDDelayInit(&(pp->x));
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800564a:	4618      	mov	r0, r3
 800564c:	f7ff febd 	bl	80053ca <PIDDelayInit>

	PIDSourceInit(&(pp->error_y), &(pp->outy), &(pp->y));
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005662:	461a      	mov	r2, r3
 8005664:	f7ff fd1a 	bl	800509c <PIDSourceInit>
	PIDGainInit(0.005, 1.0, 1.0, 1.0, 1.0, 0.0, 0.4, 30.0, &(pp->y));
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800566e:	4618      	mov	r0, r3
 8005670:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8005674:	ed9f 3a35 	vldr	s6, [pc, #212]	; 800574c <PPInit+0x184>
 8005678:	eddf 2a35 	vldr	s5, [pc, #212]	; 8005750 <PPInit+0x188>
 800567c:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8005680:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8005684:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005688:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800568c:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8005754 <PPInit+0x18c>
 8005690:	f7ff fd16 	bl	80050c0 <PIDGainInit>
	PIDDelayInit(&(pp->y));
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff fe95 	bl	80053ca <PIDDelayInit>

	PIDSourceInit(&(pp->error_z), &(pp->outz), &(pp->z));
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	f503 702e 	add.w	r0, r3, #696	; 0x2b8
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80056b2:	461a      	mov	r2, r3
 80056b4:	f7ff fcf2 	bl	800509c <PIDSourceInit>
	PIDGainInit(0.005, 1.0, (1.0 / 30.0), 0.5, 5.0, 0.2, 0.2, 30.0, &(pp->z));
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80056be:	4618      	mov	r0, r3
 80056c0:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80056c4:	ed9f 3a24 	vldr	s6, [pc, #144]	; 8005758 <PPInit+0x190>
 80056c8:	eddf 2a23 	vldr	s5, [pc, #140]	; 8005758 <PPInit+0x190>
 80056cc:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 80056d0:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 80056d4:	ed9f 1a21 	vldr	s2, [pc, #132]	; 800575c <PPInit+0x194>
 80056d8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80056dc:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8005754 <PPInit+0x18c>
 80056e0:	f7ff fcee 	bl	80050c0 <PIDGainInit>
	PIDDelayInit(&(pp->z));
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7ff fe6d 	bl	80053ca <PIDDelayInit>

	pp->tol_xy=0.20;
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	4a1b      	ldr	r2, [pc, #108]	; (8005760 <PPInit+0x198>)
 80056f4:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	pp->tol_z=2.0;
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80056fe:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc

	pp->tol_xy_crv= 0.6;
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	4a17      	ldr	r2, [pc, #92]	; (8005764 <PPInit+0x19c>)
 8005706:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

	pp->f_tol_xy=0.06;
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	4a16      	ldr	r2, [pc, #88]	; (8005768 <PPInit+0x1a0>)
 800570e:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
	pp->f_tol_z=1.0;
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005718:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	pp->yaw_offset=*(pp->yaw);
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	625a      	str	r2, [r3, #36]	; 0x24
	pp->prev_real_z = 0;
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	615a      	str	r2, [r3, #20]
	pp->real_z = 0;
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	611a      	str	r2, [r3, #16]
	pp->rotate_only = 0;
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 800573c:	f36f 1304 	bfc	r3, #4, #1
 8005740:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
}
 8005744:	bf00      	nop
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	3ecccccd 	.word	0x3ecccccd
 8005750:	00000000 	.word	0x00000000
 8005754:	3ba3d70a 	.word	0x3ba3d70a
 8005758:	3e4ccccd 	.word	0x3e4ccccd
 800575c:	3d088889 	.word	0x3d088889
 8005760:	3e4ccccd 	.word	0x3e4ccccd
 8005764:	3f19999a 	.word	0x3f19999a
 8005768:	3d75c28f 	.word	0x3d75c28f

0800576c <PP_PIDPathSet>:

void PP_PIDPathSet(float kp, float ki, float kd, PathPlan_t *pp)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	ed87 0a03 	vstr	s0, [r7, #12]
 8005776:	edc7 0a02 	vstr	s1, [r7, #8]
 800577a:	ed87 1a01 	vstr	s2, [r7, #4]
 800577e:	6038      	str	r0, [r7, #0]
	pp->kp[0]=kp;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	pp->ki[0]=ki;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	pp->kd[0]=kd;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c

	PIDGainSet(KP,kp,&(pp->x));
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800579e:	4619      	mov	r1, r3
 80057a0:	ed97 0a03 	vldr	s0, [r7, #12]
 80057a4:	2004      	movs	r0, #4
 80057a6:	f7ff fcbe 	bl	8005126 <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->x));
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80057b0:	4619      	mov	r1, r3
 80057b2:	ed97 0a02 	vldr	s0, [r7, #8]
 80057b6:	2005      	movs	r0, #5
 80057b8:	f7ff fcb5 	bl	8005126 <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->x));
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80057c2:	4619      	mov	r1, r3
 80057c4:	ed97 0a01 	vldr	s0, [r7, #4]
 80057c8:	2006      	movs	r0, #6
 80057ca:	f7ff fcac 	bl	8005126 <PIDGainSet>

	PIDGainSet(KP,kp,&(pp->y));
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80057d4:	4619      	mov	r1, r3
 80057d6:	ed97 0a03 	vldr	s0, [r7, #12]
 80057da:	2004      	movs	r0, #4
 80057dc:	f7ff fca3 	bl	8005126 <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->y));
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80057e6:	4619      	mov	r1, r3
 80057e8:	ed97 0a02 	vldr	s0, [r7, #8]
 80057ec:	2005      	movs	r0, #5
 80057ee:	f7ff fc9a 	bl	8005126 <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->y));
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80057f8:	4619      	mov	r1, r3
 80057fa:	ed97 0a01 	vldr	s0, [r7, #4]
 80057fe:	2006      	movs	r0, #6
 8005800:	f7ff fc91 	bl	8005126 <PIDGainSet>
}
 8005804:	bf00      	nop
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <PP_PIDZSet>:

void PP_PIDZSet(float kp, float ki, float kd, float ku, PathPlan_t *pp){
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	ed87 0a05 	vstr	s0, [r7, #20]
 8005816:	edc7 0a04 	vstr	s1, [r7, #16]
 800581a:	ed87 1a03 	vstr	s2, [r7, #12]
 800581e:	edc7 1a02 	vstr	s3, [r7, #8]
 8005822:	6078      	str	r0, [r7, #4]

	PIDGainSet(KP,kp,&(pp->z));
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800582a:	4619      	mov	r1, r3
 800582c:	ed97 0a05 	vldr	s0, [r7, #20]
 8005830:	2004      	movs	r0, #4
 8005832:	f7ff fc78 	bl	8005126 <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->z));
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800583c:	4619      	mov	r1, r3
 800583e:	ed97 0a04 	vldr	s0, [r7, #16]
 8005842:	2005      	movs	r0, #5
 8005844:	f7ff fc6f 	bl	8005126 <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->z));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800584e:	4619      	mov	r1, r3
 8005850:	ed97 0a03 	vldr	s0, [r7, #12]
 8005854:	2006      	movs	r0, #6
 8005856:	f7ff fc66 	bl	8005126 <PIDGainSet>
	PIDGainSet(KU,ku,&(pp->z));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005860:	4619      	mov	r1, r3
 8005862:	ed97 0a02 	vldr	s0, [r7, #8]
 8005866:	2003      	movs	r0, #3
 8005868:	f7ff fc5d 	bl	8005126 <PIDGainSet>
	pp->pp_orgz_kp = kp;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	601a      	str	r2, [r3, #0]
}
 8005876:	bf00      	nop
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <PP_PIDEndSet>:

void PP_PIDEndSet(float kp, float ki, float kd, PathPlan_t *pp)
{
 800587e:	b480      	push	{r7}
 8005880:	b085      	sub	sp, #20
 8005882:	af00      	add	r7, sp, #0
 8005884:	ed87 0a03 	vstr	s0, [r7, #12]
 8005888:	edc7 0a02 	vstr	s1, [r7, #8]
 800588c:	ed87 1a01 	vstr	s2, [r7, #4]
 8005890:	6038      	str	r0, [r7, #0]
	pp->kp[1]=kp;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	pp->ki[1]=ki;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	pp->kd[1]=kd;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
}
 80058aa:	bf00      	nop
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <PP_start>:

void PP_start(float point[][7],int no_point,PathPlan_t *pp)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	ed2d 8b02 	vpush	{d8}
 80058bc:	b086      	sub	sp, #24
 80058be:	af00      	add	r7, sp, #0
 80058c0:	60f8      	str	r0, [r7, #12]
 80058c2:	60b9      	str	r1, [r7, #8]
 80058c4:	607a      	str	r2, [r7, #4]
	int i;
	for(i=0;i<no_point;i++)
 80058c6:	2300      	movs	r3, #0
 80058c8:	617b      	str	r3, [r7, #20]
 80058ca:	e114      	b.n	8005af6 <PP_start+0x240>
	{
		pp->target_vel[i] = point[i][0];
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	4613      	mov	r3, r2
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	1a9b      	subs	r3, r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	461a      	mov	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	4413      	add	r3, r2
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	6879      	ldr	r1, [r7, #4]
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	3374      	adds	r3, #116	; 0x74
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	440b      	add	r3, r1
 80058e8:	601a      	str	r2, [r3, #0]
		pp->target_x[i] = point[i][1] + pp->real_x;
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	4613      	mov	r3, r2
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	1a9b      	subs	r3, r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	461a      	mov	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4413      	add	r3, r2
 80058fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005904:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	331a      	adds	r3, #26
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	edc3 7a00 	vstr	s15, [r3]
		pp->target_y[i] = point[i][2] + pp->real_y;
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	4613      	mov	r3, r2
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	1a9b      	subs	r3, r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	461a      	mov	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	4413      	add	r3, r2
 8005926:	ed93 7a02 	vldr	s14, [r3, #8]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	3328      	adds	r3, #40	; 0x28
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	3304      	adds	r3, #4
 8005940:	edc3 7a00 	vstr	s15, [r3]
		pp->target_accurate[i] = point[i][5]; // point_lock
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	4613      	mov	r3, r2
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	1a9b      	subs	r3, r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	461a      	mov	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4413      	add	r3, r2
 8005954:	695a      	ldr	r2, [r3, #20]
 8005956:	6879      	ldr	r1, [r7, #4]
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	3346      	adds	r3, #70	; 0x46
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	440b      	add	r3, r1
 8005960:	3304      	adds	r3, #4
 8005962:	601a      	str	r2, [r3, #0]
		pp->pp_crv_radius[i] =  point[i][6];
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	4613      	mov	r3, r2
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	1a9b      	subs	r3, r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	461a      	mov	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4413      	add	r3, r2
 8005974:	699a      	ldr	r2, [r3, #24]
 8005976:	6879      	ldr	r1, [r7, #4]
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	440b      	add	r3, r1
 8005982:	3304      	adds	r3, #4
 8005984:	601a      	str	r2, [r3, #0]
		if(i == 0)
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d11f      	bne.n	80059cc <PP_start+0x116>
			pp->target_angle1[0] = atanf((fabs)(point[0][2] - pp->real_y) / (fabs)(point[0][1]- pp->real_x));
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	ed93 7a02 	vldr	s14, [r3, #8]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005998:	ee77 7a67 	vsub.f32	s15, s14, s15
 800599c:	eeb0 7ae7 	vabs.f32	s14, s15
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	edd3 6a01 	vldr	s13, [r3, #4]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80059ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80059b0:	eef0 7ae7 	vabs.f32	s15, s15
 80059b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80059b8:	eeb0 0a66 	vmov.f32	s0, s13
 80059bc:	f019 fb88 	bl	801f0d0 <atanf>
 80059c0:	eef0 7a40 	vmov.f32	s15, s0
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	edc3 7a65 	vstr	s15, [r3, #404]	; 0x194
 80059ca:	e03f      	b.n	8005a4c <PP_start+0x196>
		else
			pp->target_angle1[i]= atanf((fabs)(point[i][2]-point[i-1][2]) / (fabs)(point[i][1]-point[i-1][1]));
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	4613      	mov	r3, r2
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	1a9b      	subs	r3, r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	461a      	mov	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	ed93 7a02 	vldr	s14, [r3, #8]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	4613      	mov	r3, r2
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	1a9b      	subs	r3, r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	3b1c      	subs	r3, #28
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	4413      	add	r3, r2
 80059f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80059f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059f8:	eeb0 7ae7 	vabs.f32	s14, s15
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4613      	mov	r3, r2
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	1a9b      	subs	r3, r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	461a      	mov	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	edd3 6a01 	vldr	s13, [r3, #4]
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	4613      	mov	r3, r2
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	1a9b      	subs	r3, r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	3b1c      	subs	r3, #28
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4413      	add	r3, r2
 8005a20:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a24:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005a28:	eef0 7ae7 	vabs.f32	s15, s15
 8005a2c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005a30:	eeb0 0a66 	vmov.f32	s0, s13
 8005a34:	f019 fb4c 	bl	801f0d0 <atanf>
 8005a38:	eef0 7a40 	vmov.f32	s15, s0
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	3364      	adds	r3, #100	; 0x64
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	3304      	adds	r3, #4
 8005a48:	edc3 7a00 	vstr	s15, [r3]
		pp->target_z[i] = point[i][3];
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	1a9b      	subs	r3, r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	461a      	mov	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	6879      	ldr	r1, [r7, #4]
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	3338      	adds	r3, #56	; 0x38
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	440b      	add	r3, r1
 8005a68:	601a      	str	r2, [r3, #0]
		pp->ku_x[i] = point[i][4]* cosf(pp->target_angle1[i]);  // xy-pid
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	1a9b      	subs	r3, r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	461a      	mov	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4413      	add	r3, r2
 8005a7a:	ed93 8a04 	vldr	s16, [r3, #16]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	3364      	adds	r3, #100	; 0x64
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	3304      	adds	r3, #4
 8005a8a:	edd3 7a00 	vldr	s15, [r3]
 8005a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8005a92:	f019 fbf1 	bl	801f278 <cosf>
 8005a96:	eef0 7a40 	vmov.f32	s15, s0
 8005a9a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	3384      	adds	r3, #132	; 0x84
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	edc3 7a00 	vstr	s15, [r3]
		pp->ku_y[i] = point[i][4]* sinf(pp->target_angle1[i]);
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	1a9b      	subs	r3, r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	461a      	mov	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4413      	add	r3, r2
 8005abe:	ed93 8a04 	vldr	s16, [r3, #16]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	3364      	adds	r3, #100	; 0x64
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	3304      	adds	r3, #4
 8005ace:	edd3 7a00 	vldr	s15, [r3]
 8005ad2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ad6:	f019 fc17 	bl	801f308 <sinf>
 8005ada:	eef0 7a40 	vmov.f32	s15, s0
 8005ade:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	3394      	adds	r3, #148	; 0x94
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	edc3 7a00 	vstr	s15, [r3]
	for(i=0;i<no_point;i++)
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	3301      	adds	r3, #1
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	f6ff aee6 	blt.w	80058cc <PP_start+0x16>
	}

	pp->target_point=no_point;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414

	if(pp->target_point == 1)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d166      	bne.n	8005be0 <PP_start+0x32a>
	{
		if(fabs(pp->real_x - pp->target_x[0]) >= pp->f_tol_xy)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8005b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b22:	eeb0 7ae7 	vabs.f32	s14, s15
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8005b2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b34:	db17      	blt.n	8005b66 <PP_start+0x2b0>
			PIDGainSet(KE,1.0/fabs(pp->real_x - pp->target_x[0]),&(pp->x));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8005b42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b46:	eef0 7ae7 	vabs.f32	s15, s15
 8005b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005b58:	4619      	mov	r1, r3
 8005b5a:	eeb0 0a47 	vmov.f32	s0, s14
 8005b5e:	2002      	movs	r0, #2
 8005b60:	f7ff fae1 	bl	8005126 <PIDGainSet>
 8005b64:	e008      	b.n	8005b78 <PP_start+0x2c2>
		else
			PIDGainSet(KE,1.0,&(pp->x));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005b72:	2002      	movs	r0, #2
 8005b74:	f7ff fad7 	bl	8005126 <PIDGainSet>

		if(fabs(pp->real_y - pp->target_y[0]) >= pp->f_tol_xy)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005b84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b88:	eeb0 7ae7 	vabs.f32	s14, s15
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8005b92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b9a:	db17      	blt.n	8005bcc <PP_start+0x316>
			PIDGainSet(KE,1.0/fabs(pp->real_y - pp->target_y[0]),&(pp->y));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005ba8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bac:	eef0 7ae7 	vabs.f32	s15, s15
 8005bb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	eeb0 0a47 	vmov.f32	s0, s14
 8005bc4:	2002      	movs	r0, #2
 8005bc6:	f7ff faae 	bl	8005126 <PIDGainSet>
 8005bca:	e06f      	b.n	8005cac <PP_start+0x3f6>

		else
			PIDGainSet(KE,1.0,&(pp->y));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005bd8:	2002      	movs	r0, #2
 8005bda:	f7ff faa4 	bl	8005126 <PIDGainSet>
 8005bde:	e065      	b.n	8005cac <PP_start+0x3f6>
	}
	else
	{
		if(fabs(pp->real_x - pp->target_x[0]) >= pp->tol_xy)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8005bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bf0:	eeb0 7ae7 	vabs.f32	s14, s15
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	edd3 7abe 	vldr	s15, [r3, #760]	; 0x2f8
 8005bfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c02:	db17      	blt.n	8005c34 <PP_start+0x37e>
			PIDGainSet(KE,1.0/fabs(pp->real_x - pp->target_x[0]),&(pp->x));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8005c10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c14:	eef0 7ae7 	vabs.f32	s15, s15
 8005c18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005c26:	4619      	mov	r1, r3
 8005c28:	eeb0 0a47 	vmov.f32	s0, s14
 8005c2c:	2002      	movs	r0, #2
 8005c2e:	f7ff fa7a 	bl	8005126 <PIDGainSet>
 8005c32:	e008      	b.n	8005c46 <PP_start+0x390>
		else
			PIDGainSet(KE,1.0,&(pp->x));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005c40:	2002      	movs	r0, #2
 8005c42:	f7ff fa70 	bl	8005126 <PIDGainSet>

		if(fabs(pp->real_y - pp->target_y[0]) >= pp->tol_xy)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005c52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c56:	eeb0 7ae7 	vabs.f32	s14, s15
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	edd3 7abe 	vldr	s15, [r3, #760]	; 0x2f8
 8005c60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c68:	db17      	blt.n	8005c9a <PP_start+0x3e4>
			PIDGainSet(KE,1.0/fabs(pp->real_y - pp->target_y[0]),&(pp->y));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005c76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c7a:	eef0 7ae7 	vabs.f32	s15, s15
 8005c7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	eeb0 0a47 	vmov.f32	s0, s14
 8005c92:	2002      	movs	r0, #2
 8005c94:	f7ff fa47 	bl	8005126 <PIDGainSet>
 8005c98:	e008      	b.n	8005cac <PP_start+0x3f6>

		else
			PIDGainSet(KE,1.0,&(pp->y));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005ca6:	2002      	movs	r0, #2
 8005ca8:	f7ff fa3d 	bl	8005126 <PIDGainSet>
	}

	PIDGainSet(KU,pp->ku_x[0],&(pp->x));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	edd3 7a85 	vldr	s15, [r3, #532]	; 0x214
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005cb8:	4619      	mov	r1, r3
 8005cba:	eeb0 0a67 	vmov.f32	s0, s15
 8005cbe:	2003      	movs	r0, #3
 8005cc0:	f7ff fa31 	bl	8005126 <PIDGainSet>
	PIDGainSet(KU,pp->ku_y[0],&(pp->y));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	edd3 7a94 	vldr	s15, [r3, #592]	; 0x250
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8005cd6:	2003      	movs	r0, #3
 8005cd8:	f7ff fa25 	bl	8005126 <PIDGainSet>

	pp->point_count=0;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
	pp->crnt_crv_pt=0;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	pp->pp_crv_calc=0;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	pp->pp_start=1;
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005cfa:	f043 0301 	orr.w	r3, r3, #1
 8005cfe:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
//	sys.navi_vel = 1;
	pp->final_f=0;
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005d08:	f36f 0382 	bfc	r3, #2, #1
 8005d0c:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
	pp->rotate=0;
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005d16:	f36f 03c3 	bfc	r3, #3, #1
 8005d1a:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
}
 8005d1e:	bf00      	nop
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	ecbd 8b02 	vpop	{d8}
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <PP_stop>:
	pp->final_f=0;
	pp->rotate=0;
}

void PP_stop (PathPlan_t *pp)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b082      	sub	sp, #8
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
	pp->pp_start=0;
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005d38:	f36f 0300 	bfc	r3, #0, #1
 8005d3c:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
	PIDDelayInit(&(pp->x));
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7ff fb3f 	bl	80053ca <PIDDelayInit>
	PIDDelayInit(&(pp->y));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff fb39 	bl	80053ca <PIDDelayInit>
	PIDDelayInit(&(pp->z));
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7ff fb33 	bl	80053ca <PIDDelayInit>

}
 8005d64:	bf00      	nop
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <PP_reset>:

void PP_reset (PathPlan_t *pp)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
	pp->pos_x = 0.0;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f04f 0200 	mov.w	r2, #0
 8005d7a:	62da      	str	r2, [r3, #44]	; 0x2c
	pp->pos_y = 0.0;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f04f 0200 	mov.w	r2, #0
 8005d82:	63da      	str	r2, [r3, #60]	; 0x3c
	pp->prev_x = 0.0;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f04f 0200 	mov.w	r2, #0
 8005d8a:	631a      	str	r2, [r3, #48]	; 0x30
	pp->prev_y = 0.0;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f04f 0200 	mov.w	r2, #0
 8005d92:	641a      	str	r2, [r3, #64]	; 0x40
	pp->prev_real_x = 0.0;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f04f 0200 	mov.w	r2, #0
 8005d9a:	639a      	str	r2, [r3, #56]	; 0x38
	pp->prev_real_y = 0.0;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f04f 0200 	mov.w	r2, #0
 8005da2:	649a      	str	r2, [r3, #72]	; 0x48
	pp->del_pos_x = 0.0;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f04f 0200 	mov.w	r2, #0
 8005daa:	64da      	str	r2, [r3, #76]	; 0x4c
	pp->del_pos_y = 0.0;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f04f 0200 	mov.w	r2, #0
 8005db2:	651a      	str	r2, [r3, #80]	; 0x50
//		pp->yaw_constant = 0.0;
//		pp->yaw_offset = *(pp->yaw);
//		pp->prev_yaw = *(pp->yaw);
	pp->real_x=0.0;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f04f 0200 	mov.w	r2, #0
 8005dba:	635a      	str	r2, [r3, #52]	; 0x34
	pp->real_y=0.0;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f04f 0200 	mov.w	r2, #0
 8005dc2:	645a      	str	r2, [r3, #68]	; 0x44
	PIDDelayInit(&(pp->x));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff fafd 	bl	80053ca <PIDDelayInit>
	PIDDelayInit(&(pp->y));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff faf7 	bl	80053ca <PIDDelayInit>
	PIDDelayInit(&(pp->z));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7ff faf1 	bl	80053ca <PIDDelayInit>
//		pp->real_z=0.0;
//	PP_SetZ(0, pp);
}
 8005de8:	bf00      	nop
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <PP_SetZ>:


void PP_SetZ (float z,PathPlan_t *pp)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	ed87 0a01 	vstr	s0, [r7, #4]
 8005dfa:	6038      	str	r0, [r7, #0]

	pp->setz=z;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	621a      	str	r2, [r3, #32]
	pp->yaw_constant=0;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	f04f 0200 	mov.w	r2, #0
 8005e08:	629a      	str	r2, [r3, #40]	; 0x28
	//	pp->yaw_offset=*(pp->yaw);
	pp->prev_yaw=*(pp->yaw);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	60da      	str	r2, [r3, #12]
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <PP_SetCrv_Points>:

void PP_SetCrv_Points (int z,PathPlan_t *pp)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
	pp->pp_no_crv_pts = z;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
}
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
	...

08005e40 <PathPlan>:



void PathPlan (PathPlan_t *pp)
{
 8005e40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005e44:	ed2d 8b02 	vpush	{d8}
 8005e48:	b084      	sub	sp, #16
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
	// Called every 5ms
	if(pp->point_start) // The start of program
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8005e54:	f003 0302 	and.w	r3, r3, #2
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 8134 	beq.w	80060c8 <PathPlan+0x288>
	{
		pp->pos_x=*(pp->qeix);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	62da      	str	r2, [r3, #44]	; 0x2c
		pp->pos_y=*(pp->qeiy);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	63da      	str	r2, [r3, #60]	; 0x3c

		if(*(pp->yaw) < 30.0){
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	edd3 7a00 	vldr	s15, [r3]
 8005e7c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8005e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e88:	d516      	bpl.n	8005eb8 <PathPlan+0x78>
			if(pp->prev_yaw > 330.0){
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005e90:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005eb4 <PathPlan+0x74>
 8005e94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e9c:	dd2b      	ble.n	8005ef6 <PathPlan+0xb6>
				pp->yaw_constant++;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005ea4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ea8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 8005eb2:	e020      	b.n	8005ef6 <PathPlan+0xb6>
 8005eb4:	43a50000 	.word	0x43a50000
			}
		}else if(*(pp->yaw) > 330.0){
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	edd3 7a00 	vldr	s15, [r3]
 8005ec0:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8005eb4 <PathPlan+0x74>
 8005ec4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ecc:	dd13      	ble.n	8005ef6 <PathPlan+0xb6>
			if(pp->prev_yaw < 30.0){
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	edd3 7a03 	vldr	s15, [r3, #12]
 8005ed4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8005ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ee0:	d509      	bpl.n	8005ef6 <PathPlan+0xb6>
				pp->yaw_constant--;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005ee8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005eec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			}
		}

		pp->prev_yaw = *(pp->yaw);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	60da      	str	r2, [r3, #12]
		pp->real_z = *(pp->yaw) + (pp->yaw_constant)*360.0 - pp->yaw_offset+pp->setz;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fa fb1e 	bl	8000548 <__aeabi_f2d>
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	460d      	mov	r5, r1
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7fa fb17 	bl	8000548 <__aeabi_f2d>
 8005f1a:	f04f 0200 	mov.w	r2, #0
 8005f1e:	4b68      	ldr	r3, [pc, #416]	; (80060c0 <PathPlan+0x280>)
 8005f20:	f7fa fb6a 	bl	80005f8 <__aeabi_dmul>
 8005f24:	4602      	mov	r2, r0
 8005f26:	460b      	mov	r3, r1
 8005f28:	4620      	mov	r0, r4
 8005f2a:	4629      	mov	r1, r5
 8005f2c:	f7fa f9ae 	bl	800028c <__adddf3>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4614      	mov	r4, r2
 8005f36:	461d      	mov	r5, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fa fb03 	bl	8000548 <__aeabi_f2d>
 8005f42:	4602      	mov	r2, r0
 8005f44:	460b      	mov	r3, r1
 8005f46:	4620      	mov	r0, r4
 8005f48:	4629      	mov	r1, r5
 8005f4a:	f7fa f99d 	bl	8000288 <__aeabi_dsub>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	460b      	mov	r3, r1
 8005f52:	4614      	mov	r4, r2
 8005f54:	461d      	mov	r5, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fa faf4 	bl	8000548 <__aeabi_f2d>
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4620      	mov	r0, r4
 8005f66:	4629      	mov	r1, r5
 8005f68:	f7fa f990 	bl	800028c <__adddf3>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	460b      	mov	r3, r1
 8005f70:	4610      	mov	r0, r2
 8005f72:	4619      	mov	r1, r3
 8005f74:	f7fa fe38 	bl	8000be8 <__aeabi_d2f>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	611a      	str	r2, [r3, #16]
		pp->real_z_rad = (pp->real_z / 180.0) * M_PI;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fa fae0 	bl	8000548 <__aeabi_f2d>
 8005f88:	f04f 0200 	mov.w	r2, #0
 8005f8c:	4b4d      	ldr	r3, [pc, #308]	; (80060c4 <PathPlan+0x284>)
 8005f8e:	f7fa fc5d 	bl	800084c <__aeabi_ddiv>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	4610      	mov	r0, r2
 8005f98:	4619      	mov	r1, r3
 8005f9a:	a347      	add	r3, pc, #284	; (adr r3, 80060b8 <PathPlan+0x278>)
 8005f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa0:	f7fa fb2a 	bl	80005f8 <__aeabi_dmul>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4619      	mov	r1, r3
 8005fac:	f7fa fe1c 	bl	8000be8 <__aeabi_d2f>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	619a      	str	r2, [r3, #24]

		pp->del_pos_x =  (pp->pos_x - pp->prev_x) * cosf(pp->real_z_rad) +
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005fc2:	ee37 8a67 	vsub.f32	s16, s14, s15
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	edd3 7a06 	vldr	s15, [r3, #24]
 8005fcc:	eeb0 0a67 	vmov.f32	s0, s15
 8005fd0:	f019 f952 	bl	801f278 <cosf>
 8005fd4:	eef0 7a40 	vmov.f32	s15, s0
 8005fd8:	ee28 8a27 	vmul.f32	s16, s16, s15
				(pp->pos_y - pp->prev_y) * sinf(pp->real_z_rad);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005fe8:	ee77 8a67 	vsub.f32	s17, s14, s15
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	edd3 7a06 	vldr	s15, [r3, #24]
 8005ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ff6:	f019 f987 	bl	801f308 <sinf>
 8005ffa:	eef0 7a40 	vmov.f32	s15, s0
 8005ffe:	ee68 7aa7 	vmul.f32	s15, s17, s15
		pp->del_pos_x =  (pp->pos_x - pp->prev_x) * cosf(pp->real_z_rad) +
 8006002:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		pp->del_pos_y = -(pp->pos_x - pp->prev_x) * sinf(pp->real_z_rad) +
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800601c:	eeb1 8a67 	vneg.f32	s16, s15
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	edd3 7a06 	vldr	s15, [r3, #24]
 8006026:	eeb0 0a67 	vmov.f32	s0, s15
 800602a:	f019 f96d 	bl	801f308 <sinf>
 800602e:	eef0 7a40 	vmov.f32	s15, s0
 8006032:	ee28 8a27 	vmul.f32	s16, s16, s15
				(pp->pos_y - pp->prev_y) * cosf(pp->real_z_rad);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006042:	ee77 8a67 	vsub.f32	s17, s14, s15
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	edd3 7a06 	vldr	s15, [r3, #24]
 800604c:	eeb0 0a67 	vmov.f32	s0, s15
 8006050:	f019 f912 	bl	801f278 <cosf>
 8006054:	eef0 7a40 	vmov.f32	s15, s0
 8006058:	ee68 7aa7 	vmul.f32	s15, s17, s15
		pp->del_pos_y = -(pp->pos_x - pp->prev_x) * sinf(pp->real_z_rad) +
 800605c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		pp->real_x = pp->real_x + pp->del_pos_x;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8006072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		pp->real_y = pp->real_y + pp->del_pos_y;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8006088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

		pp->prev_x = pp->pos_x;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	631a      	str	r2, [r3, #48]	; 0x30
		pp->prev_y = pp->pos_y;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	641a      	str	r2, [r3, #64]	; 0x40

		pp->prev_real_x = pp->real_x;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	639a      	str	r2, [r3, #56]	; 0x38
		pp->prev_real_y = pp->real_y;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	649a      	str	r2, [r3, #72]	; 0x48
 80060b2:	e009      	b.n	80060c8 <PathPlan+0x288>
 80060b4:	f3af 8000 	nop.w
 80060b8:	54442d18 	.word	0x54442d18
 80060bc:	400921fb 	.word	0x400921fb
 80060c0:	40768000 	.word	0x40768000
 80060c4:	40668000 	.word	0x40668000
	}


	if(pp->point_start && pp->pp_start){ // If path plan started
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f002 8513 	beq.w	8008b00 <PathPlan+0x2cc0>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f002 850a 	beq.w	8008b00 <PathPlan+0x2cc0>

		if(pp->pp_crv_radius[pp->point_count]){
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	3304      	adds	r3, #4
 80060fe:	edd3 7a00 	vldr	s15, [r3]
 8006102:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800610a:	f001 8389 	beq.w	8007820 <PathPlan+0x19e0>


			if(!pp->pp_crv_calc){
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 3528 	ldr.w	r3, [r3, #1320]	; 0x528
 8006114:	2b00      	cmp	r3, #0
 8006116:	f040 8208 	bne.w	800652a <PathPlan+0x6ea>
				pp->pp_rad_ptx = ((pp->target_x[pp->point_count] - pp->real_x)/(float)2.0) + (pp->pp_crv_radius[pp->point_count] * sinf(atan2f(pp->target_y[pp->point_count] - pp->real_y, pp->target_x[pp->point_count] - pp->real_x)));
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	331a      	adds	r3, #26
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	ed93 7a00 	vldr	s14, [r3]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006132:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006136:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800613a:	ee87 8a87 	vdiv.f32	s16, s15, s14
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	3304      	adds	r3, #4
 8006150:	edd3 8a00 	vldr	s17, [r3]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	3328      	adds	r3, #40	; 0x28
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	3304      	adds	r3, #4
 8006164:	ed93 7a00 	vldr	s14, [r3]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800616e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	331a      	adds	r3, #26
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	ed93 7a00 	vldr	s14, [r3]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800618a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800618e:	eef0 0a67 	vmov.f32	s1, s15
 8006192:	eeb0 0a66 	vmov.f32	s0, s13
 8006196:	f019 f8f9 	bl	801f38c <atan2f>
 800619a:	eef0 7a40 	vmov.f32	s15, s0
 800619e:	eeb0 0a67 	vmov.f32	s0, s15
 80061a2:	f019 f8b1 	bl	801f308 <sinf>
 80061a6:	eef0 7a40 	vmov.f32	s15, s0
 80061aa:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80061ae:	ee78 7a27 	vadd.f32	s15, s16, s15
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 80061b8:	edc3 7a00 	vstr	s15, [r3]
				pp->pp_rad_pty = ((pp->target_y[pp->point_count] - pp->real_y)/(float)2.0) - (pp->pp_crv_radius[pp->point_count] * cosf(atan2f(pp->target_y[pp->point_count] - pp->real_y, pp->target_x[pp->point_count] - pp->real_x)));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	3328      	adds	r3, #40	; 0x28
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	3304      	adds	r3, #4
 80061cc:	ed93 7a00 	vldr	s14, [r3]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80061d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061da:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80061de:	ee87 8a87 	vdiv.f32	s16, s15, s14
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	3304      	adds	r3, #4
 80061f4:	edd3 8a00 	vldr	s17, [r3]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	3328      	adds	r3, #40	; 0x28
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	3304      	adds	r3, #4
 8006208:	ed93 7a00 	vldr	s14, [r3]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006212:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	331a      	adds	r3, #26
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	ed93 7a00 	vldr	s14, [r3]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800622e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006232:	eef0 0a67 	vmov.f32	s1, s15
 8006236:	eeb0 0a66 	vmov.f32	s0, s13
 800623a:	f019 f8a7 	bl	801f38c <atan2f>
 800623e:	eef0 7a40 	vmov.f32	s15, s0
 8006242:	eeb0 0a67 	vmov.f32	s0, s15
 8006246:	f019 f817 	bl	801f278 <cosf>
 800624a:	eef0 7a40 	vmov.f32	s15, s0
 800624e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8006252:	ee78 7a67 	vsub.f32	s15, s16, s15
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 800625c:	edc3 7a00 	vstr	s15, [r3]
				pp->pp_crv_const[pp->point_count] = pp->target_z[pp->point_count]/pp->pp_no_crv_pts;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	3338      	adds	r3, #56	; 0x38
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	edd3 6a00 	vldr	s13, [r3]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006278:	ee07 3a90 	vmov	s15, r3
 800627c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	edc3 7a00 	vstr	s15, [r3]

				float crvpath = (float)1.0/pp->pp_no_crv_pts;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 800629e:	ee07 3a90 	vmov	s15, r3
 80062a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062ae:	edc7 7a03 	vstr	s15, [r7, #12]
				for(int i = 0;i<pp->pp_no_crv_pts;i++){
 80062b2:	2300      	movs	r3, #0
 80062b4:	60bb      	str	r3, [r7, #8]
 80062b6:	e12d      	b.n	8006514 <PathPlan+0x6d4>
					pp->pp_crv_x[i]= powf((1-crvpath),2) * pp->real_x + 2.0*(1-crvpath)*crvpath*pp->pp_rad_ptx + powf(crvpath,2) * pp->target_x[pp->point_count];
 80062b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80062c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062c4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80062c8:	eeb0 0a67 	vmov.f32	s0, s15
 80062cc:	f019 f860 	bl	801f390 <powf>
 80062d0:	eeb0 7a40 	vmov.f32	s14, s0
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80062da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062de:	ee17 0a90 	vmov	r0, s15
 80062e2:	f7fa f931 	bl	8000548 <__aeabi_f2d>
 80062e6:	4604      	mov	r4, r0
 80062e8:	460d      	mov	r5, r1
 80062ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80062f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062f6:	ee17 0a90 	vmov	r0, s15
 80062fa:	f7fa f925 	bl	8000548 <__aeabi_f2d>
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	f7f9 ffc3 	bl	800028c <__adddf3>
 8006306:	4602      	mov	r2, r0
 8006308:	460b      	mov	r3, r1
 800630a:	4690      	mov	r8, r2
 800630c:	4699      	mov	r9, r3
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f7fa f91a 	bl	8000548 <__aeabi_f2d>
 8006314:	4602      	mov	r2, r0
 8006316:	460b      	mov	r3, r1
 8006318:	4640      	mov	r0, r8
 800631a:	4649      	mov	r1, r9
 800631c:	f7fa f96c 	bl	80005f8 <__aeabi_dmul>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	4690      	mov	r8, r2
 8006326:	4699      	mov	r9, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4618      	mov	r0, r3
 8006332:	f7fa f909 	bl	8000548 <__aeabi_f2d>
 8006336:	4602      	mov	r2, r0
 8006338:	460b      	mov	r3, r1
 800633a:	4640      	mov	r0, r8
 800633c:	4649      	mov	r1, r9
 800633e:	f7fa f95b 	bl	80005f8 <__aeabi_dmul>
 8006342:	4602      	mov	r2, r0
 8006344:	460b      	mov	r3, r1
 8006346:	4620      	mov	r0, r4
 8006348:	4629      	mov	r1, r5
 800634a:	f7f9 ff9f 	bl	800028c <__adddf3>
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	4614      	mov	r4, r2
 8006354:	461d      	mov	r5, r3
 8006356:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800635a:	ed97 0a03 	vldr	s0, [r7, #12]
 800635e:	f019 f817 	bl	801f390 <powf>
 8006362:	eeb0 7a40 	vmov.f32	s14, s0
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	331a      	adds	r3, #26
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	edd3 7a00 	vldr	s15, [r3]
 8006378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800637c:	ee17 0a90 	vmov	r0, s15
 8006380:	f7fa f8e2 	bl	8000548 <__aeabi_f2d>
 8006384:	4602      	mov	r2, r0
 8006386:	460b      	mov	r3, r1
 8006388:	4620      	mov	r0, r4
 800638a:	4629      	mov	r1, r5
 800638c:	f7f9 ff7e 	bl	800028c <__adddf3>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	4610      	mov	r0, r2
 8006396:	4619      	mov	r1, r3
 8006398:	f7fa fc26 	bl	8000be8 <__aeabi_d2f>
 800639c:	4601      	mov	r1, r0
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	6019      	str	r1, [r3, #0]
					pp->pp_crv_y[i]= powf((1-crvpath),2) * pp->real_y + 2.0*(1-crvpath)*crvpath*pp->pp_rad_pty + powf(crvpath,2) * pp->target_y[pp->point_count];
 80063ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80063b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063b8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80063bc:	eeb0 0a67 	vmov.f32	s0, s15
 80063c0:	f018 ffe6 	bl	801f390 <powf>
 80063c4:	eeb0 7a40 	vmov.f32	s14, s0
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80063ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063d2:	ee17 0a90 	vmov	r0, s15
 80063d6:	f7fa f8b7 	bl	8000548 <__aeabi_f2d>
 80063da:	4604      	mov	r4, r0
 80063dc:	460d      	mov	r5, r1
 80063de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80063e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063ea:	ee17 0a90 	vmov	r0, s15
 80063ee:	f7fa f8ab 	bl	8000548 <__aeabi_f2d>
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	f7f9 ff49 	bl	800028c <__adddf3>
 80063fa:	4602      	mov	r2, r0
 80063fc:	460b      	mov	r3, r1
 80063fe:	4690      	mov	r8, r2
 8006400:	4699      	mov	r9, r3
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f7fa f8a0 	bl	8000548 <__aeabi_f2d>
 8006408:	4602      	mov	r2, r0
 800640a:	460b      	mov	r3, r1
 800640c:	4640      	mov	r0, r8
 800640e:	4649      	mov	r1, r9
 8006410:	f7fa f8f2 	bl	80005f8 <__aeabi_dmul>
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	4690      	mov	r8, r2
 800641a:	4699      	mov	r9, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4618      	mov	r0, r3
 8006426:	f7fa f88f 	bl	8000548 <__aeabi_f2d>
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	4640      	mov	r0, r8
 8006430:	4649      	mov	r1, r9
 8006432:	f7fa f8e1 	bl	80005f8 <__aeabi_dmul>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	4620      	mov	r0, r4
 800643c:	4629      	mov	r1, r5
 800643e:	f7f9 ff25 	bl	800028c <__adddf3>
 8006442:	4602      	mov	r2, r0
 8006444:	460b      	mov	r3, r1
 8006446:	4614      	mov	r4, r2
 8006448:	461d      	mov	r5, r3
 800644a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800644e:	ed97 0a03 	vldr	s0, [r7, #12]
 8006452:	f018 ff9d 	bl	801f390 <powf>
 8006456:	eeb0 7a40 	vmov.f32	s14, s0
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	3328      	adds	r3, #40	; 0x28
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4413      	add	r3, r2
 8006468:	3304      	adds	r3, #4
 800646a:	edd3 7a00 	vldr	s15, [r3]
 800646e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006472:	ee17 0a90 	vmov	r0, s15
 8006476:	f7fa f867 	bl	8000548 <__aeabi_f2d>
 800647a:	4602      	mov	r2, r0
 800647c:	460b      	mov	r3, r1
 800647e:	4620      	mov	r0, r4
 8006480:	4629      	mov	r1, r5
 8006482:	f7f9 ff03 	bl	800028c <__adddf3>
 8006486:	4602      	mov	r2, r0
 8006488:	460b      	mov	r3, r1
 800648a:	4610      	mov	r0, r2
 800648c:	4619      	mov	r1, r3
 800648e:	f7fa fbab 	bl	8000be8 <__aeabi_d2f>
 8006492:	4601      	mov	r1, r0
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
 80064a0:	6019      	str	r1, [r3, #0]
					pp->pp_crv_z[i] = pp->pp_crv_const[pp->point_count] + pp->pp_crv_const[pp->point_count]*i;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	ed93 7a00 	vldr	s14, [r3]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	edd3 6a00 	vldr	s13, [r3]
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	ee07 3a90 	vmov	s15, r3
 80064d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	edc3 7a00 	vstr	s15, [r3]
					crvpath+=(float)1.0/pp->pp_no_crv_pts;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 80064f2:	ee07 3a90 	vmov	s15, r3
 80064f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006502:	ed97 7a03 	vldr	s14, [r7, #12]
 8006506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800650a:	edc7 7a03 	vstr	s15, [r7, #12]
				for(int i = 0;i<pp->pp_no_crv_pts;i++){
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	3301      	adds	r3, #1
 8006512:	60bb      	str	r3, [r7, #8]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	429a      	cmp	r2, r3
 800651e:	f6ff aecb 	blt.w	80062b8 <PathPlan+0x478>
				}
				//				PIDGainSet(KP,(pp->target_vel[pp->point_count]/(float)4.0),&(pp->z));
				pp->pp_crv_calc = 1;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
			}

			pp->error_x = pp->pp_crv_x[pp->crnt_crv_pt] - pp->real_x;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	ed93 7a00 	vldr	s14, [r3]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006544:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
			pp->error_y = pp->pp_crv_y[pp->crnt_crv_pt] - pp->real_y;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	ed93 7a00 	vldr	s14, [r3]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
			pp->error_z = pp->pp_crv_z[pp->crnt_crv_pt] - pp->real_z;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	ed93 7a00 	vldr	s14, [r3]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	edd3 7a04 	vldr	s15, [r3, #16]
 800658c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8


			if( pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && ((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 80065a2:	3b01      	subs	r3, #1
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d14a      	bne.n	800663e <PathPlan+0x7fe>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 80065ae:	eef0 7ae7 	vabs.f32	s15, s15
 80065b2:	ee17 0a90 	vmov	r0, s15
 80065b6:	f7f9 ffc7 	bl	8000548 <__aeabi_f2d>
 80065ba:	4604      	mov	r4, r0
 80065bc:	460d      	mov	r5, r1
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 80065c4:	eef0 7ae7 	vabs.f32	s15, s15
 80065c8:	ee17 0a90 	vmov	r0, s15
 80065cc:	f7f9 ffbc 	bl	8000548 <__aeabi_f2d>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	4620      	mov	r0, r4
 80065d6:	4629      	mov	r1, r5
 80065d8:	f7f9 fe58 	bl	800028c <__adddf3>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	4610      	mov	r0, r2
 80065e2:	4619      	mov	r1, r3
 80065e4:	f04f 0200 	mov.w	r2, #0
 80065e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80065ec:	f7fa f92e 	bl	800084c <__aeabi_ddiv>
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	4614      	mov	r4, r2
 80065f6:	461d      	mov	r5, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80065fe:	4618      	mov	r0, r3
 8006600:	f7f9 ffa2 	bl	8000548 <__aeabi_f2d>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	4620      	mov	r0, r4
 800660a:	4629      	mov	r1, r5
 800660c:	f7fa fa66 	bl	8000adc <__aeabi_dcmplt>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d013      	beq.n	800663e <PathPlan+0x7fe>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 800661c:	eeb0 7ae7 	vabs.f32	s14, s15
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 8006626:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800662a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800662e:	d506      	bpl.n	800663e <PathPlan+0x7fe>
				pp->pp_lck = 1.0;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006636:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	e005      	b.n	800664a <PathPlan+0x80a>
			else
				pp->pp_lck = 0.0;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006644:	f04f 0200 	mov.w	r2, #0
 8006648:	601a      	str	r2, [r3, #0]

			pp->pp_lck_count = pp->pp_lck_count + 1.0;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8006650:	edd3 7a00 	vldr	s15, [r3]
 8006654:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006658:	ee77 7a87 	vadd.f32	s15, s15, s14
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8006662:	edc3 7a00 	vstr	s15, [r3]

			if(pp->pp_lck_count <= 60.0)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800666c:	edd3 7a00 	vldr	s15, [r3]
 8006670:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8006908 <PathPlan+0xac8>
 8006674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800667c:	d811      	bhi.n	80066a2 <PathPlan+0x862>
				pp->pp_lck_cal = pp->pp_lck_cal + pp->pp_lck;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8006684:	ed93 7a00 	vldr	s14, [r3]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800668e:	edd3 7a00 	vldr	s15, [r3]
 8006692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800669c:	edc3 7a00 	vstr	s15, [r3]
 80066a0:	e034      	b.n	800670c <PathPlan+0x8cc>
			else{
				pp->pp_lck_final = (pp->pp_lck_cal) / (pp->pp_lck_count) ;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80066a8:	edd3 6a00 	vldr	s13, [r3]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80066b2:	ed93 7a00 	vldr	s14, [r3]
 80066b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80066c0:	edc3 7a00 	vstr	s15, [r3]
				if(pp->pp_lck_final >= 0.95)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7f9 ff3b 	bl	8000548 <__aeabi_f2d>
 80066d2:	a38b      	add	r3, pc, #556	; (adr r3, 8006900 <PathPlan+0xac0>)
 80066d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d8:	f7fa fa14 	bl	8000b04 <__aeabi_dcmpge>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d004      	beq.n	80066ec <PathPlan+0x8ac>
					pp->pp_lck_enb = 1;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 80066ea:	e003      	b.n	80066f4 <PathPlan+0x8b4>
				else
					pp->pp_lck_enb = 0;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
				pp->pp_lck_count = 0.0;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80066fa:	f04f 0200 	mov.w	r2, #0
 80066fe:	601a      	str	r2, [r3, #0]
				pp->pp_lck_cal   = 0.0;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8006706:	f04f 0200 	mov.w	r2, #0
 800670a:	601a      	str	r2, [r3, #0]
			}


			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy_crv){
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8006712:	eef0 7ae7 	vabs.f32	s15, s15
 8006716:	ee17 0a90 	vmov	r0, s15
 800671a:	f7f9 ff15 	bl	8000548 <__aeabi_f2d>
 800671e:	4604      	mov	r4, r0
 8006720:	460d      	mov	r5, r1
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8006728:	eef0 7ae7 	vabs.f32	s15, s15
 800672c:	ee17 0a90 	vmov	r0, s15
 8006730:	f7f9 ff0a 	bl	8000548 <__aeabi_f2d>
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
 8006738:	4620      	mov	r0, r4
 800673a:	4629      	mov	r1, r5
 800673c:	f7f9 fda6 	bl	800028c <__adddf3>
 8006740:	4602      	mov	r2, r0
 8006742:	460b      	mov	r3, r1
 8006744:	4610      	mov	r0, r2
 8006746:	4619      	mov	r1, r3
 8006748:	f04f 0200 	mov.w	r2, #0
 800674c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006750:	f7fa f87c 	bl	800084c <__aeabi_ddiv>
 8006754:	4602      	mov	r2, r0
 8006756:	460b      	mov	r3, r1
 8006758:	4614      	mov	r4, r2
 800675a:	461d      	mov	r5, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8006762:	4618      	mov	r0, r3
 8006764:	f7f9 fef0 	bl	8000548 <__aeabi_f2d>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	4620      	mov	r0, r4
 800676e:	4629      	mov	r1, r5
 8006770:	f7fa f9b4 	bl	8000adc <__aeabi_dcmplt>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 8462 	beq.w	8007040 <PathPlan+0x1200>
				if(pp->crnt_crv_pt < pp->pp_no_crv_pts - 1){
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006788:	3b01      	subs	r3, #1
 800678a:	429a      	cmp	r2, r3
 800678c:	f280 8135 	bge.w	80069fa <PathPlan+0xbba>
					PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8006796:	edd3 7a00 	vldr	s15, [r3]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80067a0:	4619      	mov	r1, r3
 80067a2:	eeb0 0a67 	vmov.f32	s0, s15
 80067a6:	2004      	movs	r0, #4
 80067a8:	f7fe fcbd 	bl	8005126 <PIDGainSet>
					pp->crnt_crv_pt++;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 80067b2:	1c5a      	adds	r2, r3, #1
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
					pp->error_x = pp->pp_crv_x[pp->crnt_crv_pt] - pp->real_x;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	ed93 7a00 	vldr	s14, [r3]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80067d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
					pp->error_y = pp->pp_crv_y[pp->crnt_crv_pt] - pp->real_y;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	ed93 7a00 	vldr	s14, [r3]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80067f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
					pp->error_z = pp->pp_crv_z[pp->crnt_crv_pt] - pp->real_z;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	ed93 7a00 	vldr	s14, [r3]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	edd3 7a04 	vldr	s15, [r3, #16]
 800681c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8

					if(pp->target_x[pp->point_count]-pp->real_x){
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	331a      	adds	r3, #26
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	ed93 7a00 	vldr	s14, [r3]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800683e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006842:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800684a:	d01d      	beq.n	8006888 <PathPlan+0xa48>
						PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	331a      	adds	r3, #26
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	ed93 7a00 	vldr	s14, [r3]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006864:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006868:	eef0 7ae7 	vabs.f32	s15, s15
 800686c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006870:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800687a:	4619      	mov	r1, r3
 800687c:	eeb0 0a47 	vmov.f32	s0, s14
 8006880:	2002      	movs	r0, #2
 8006882:	f7fe fc50 	bl	8005126 <PIDGainSet>
 8006886:	e008      	b.n	800689a <PathPlan+0xa5a>
					} else {
						PIDGainSet(KE,1.0,&(pp->x));
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800688e:	4619      	mov	r1, r3
 8006890:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006894:	2002      	movs	r0, #2
 8006896:	f7fe fc46 	bl	8005126 <PIDGainSet>
					}
					if(pp->target_y[pp->point_count]-pp->real_y){
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	3328      	adds	r3, #40	; 0x28
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	3304      	adds	r3, #4
 80068aa:	ed93 7a00 	vldr	s14, [r3]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80068b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80068bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c0:	d024      	beq.n	800690c <PathPlan+0xacc>
						PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	3328      	adds	r3, #40	; 0x28
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	3304      	adds	r3, #4
 80068d2:	ed93 7a00 	vldr	s14, [r3]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80068dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068e0:	eef0 7ae7 	vabs.f32	s15, s15
 80068e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80068f2:	4619      	mov	r1, r3
 80068f4:	eeb0 0a47 	vmov.f32	s0, s14
 80068f8:	2002      	movs	r0, #2
 80068fa:	f7fe fc14 	bl	8005126 <PIDGainSet>
 80068fe:	e00e      	b.n	800691e <PathPlan+0xade>
 8006900:	66666666 	.word	0x66666666
 8006904:	3fee6666 	.word	0x3fee6666
 8006908:	42700000 	.word	0x42700000
					} else {
						PIDGainSet(KE,1.0,&(pp->y));
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006912:	4619      	mov	r1, r3
 8006914:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006918:	2002      	movs	r0, #2
 800691a:	f7fe fc04 	bl	8005126 <PIDGainSet>
					}
					PIDGainSet(KP,pp->kp[0],&(pp->x));
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800692a:	4619      	mov	r1, r3
 800692c:	eeb0 0a67 	vmov.f32	s0, s15
 8006930:	2004      	movs	r0, #4
 8006932:	f7fe fbf8 	bl	8005126 <PIDGainSet>
					PIDGainSet(KP,pp->kp[0],&(pp->y));
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006942:	4619      	mov	r1, r3
 8006944:	eeb0 0a67 	vmov.f32	s0, s15
 8006948:	2004      	movs	r0, #4
 800694a:	f7fe fbec 	bl	8005126 <PIDGainSet>
					PIDGainSet(KI,pp->ki[0],&(pp->x));
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800695a:	4619      	mov	r1, r3
 800695c:	eeb0 0a67 	vmov.f32	s0, s15
 8006960:	2005      	movs	r0, #5
 8006962:	f7fe fbe0 	bl	8005126 <PIDGainSet>
					PIDGainSet(KI,pp->ki[0],&(pp->y));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006972:	4619      	mov	r1, r3
 8006974:	eeb0 0a67 	vmov.f32	s0, s15
 8006978:	2005      	movs	r0, #5
 800697a:	f7fe fbd4 	bl	8005126 <PIDGainSet>
					PIDGainSet(KD,pp->kd[0],&(pp->x));
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800698a:	4619      	mov	r1, r3
 800698c:	eeb0 0a67 	vmov.f32	s0, s15
 8006990:	2006      	movs	r0, #6
 8006992:	f7fe fbc8 	bl	8005126 <PIDGainSet>
					PIDGainSet(KD,pp->kd[0],&(pp->y));
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80069a2:	4619      	mov	r1, r3
 80069a4:	eeb0 0a67 	vmov.f32	s0, s15
 80069a8:	2006      	movs	r0, #6
 80069aa:	f7fe fbbc 	bl	8005126 <PIDGainSet>
					PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	3384      	adds	r3, #132	; 0x84
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	3304      	adds	r3, #4
 80069be:	edd3 7a00 	vldr	s15, [r3]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80069c8:	4619      	mov	r1, r3
 80069ca:	eeb0 0a67 	vmov.f32	s0, s15
 80069ce:	2003      	movs	r0, #3
 80069d0:	f7fe fba9 	bl	8005126 <PIDGainSet>
					PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	3394      	adds	r3, #148	; 0x94
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	edd3 7a00 	vldr	s15, [r3]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80069ec:	4619      	mov	r1, r3
 80069ee:	eeb0 0a67 	vmov.f32	s0, s15
 80069f2:	2003      	movs	r0, #3
 80069f4:	f7fe fb97 	bl	8005126 <PIDGainSet>
 80069f8:	e322      	b.n	8007040 <PathPlan+0x1200>


				}else if(pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && (pp->point_count < (pp->target_point - 1)) ){
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006a06:	3b01      	subs	r3, #1
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	f040 8252 	bne.w	8006eb2 <PathPlan+0x1072>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	f280 8248 	bge.w	8006eb2 <PathPlan+0x1072>
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8006a28:	eef0 7ae7 	vabs.f32	s15, s15
 8006a2c:	ee17 0a90 	vmov	r0, s15
 8006a30:	f7f9 fd8a 	bl	8000548 <__aeabi_f2d>
 8006a34:	4604      	mov	r4, r0
 8006a36:	460d      	mov	r5, r1
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8006a3e:	eef0 7ae7 	vabs.f32	s15, s15
 8006a42:	ee17 0a90 	vmov	r0, s15
 8006a46:	f7f9 fd7f 	bl	8000548 <__aeabi_f2d>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4620      	mov	r0, r4
 8006a50:	4629      	mov	r1, r5
 8006a52:	f7f9 fc1b 	bl	800028c <__adddf3>
 8006a56:	4602      	mov	r2, r0
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	f04f 0200 	mov.w	r2, #0
 8006a62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a66:	f7f9 fef1 	bl	800084c <__aeabi_ddiv>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	4614      	mov	r4, r2
 8006a70:	461d      	mov	r5, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7f9 fd65 	bl	8000548 <__aeabi_f2d>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	4620      	mov	r0, r4
 8006a84:	4629      	mov	r1, r5
 8006a86:	f7fa f829 	bl	8000adc <__aeabi_dcmplt>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 82d6 	beq.w	800703e <PathPlan+0x11fe>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8006a98:	eeb0 7ae7 	vabs.f32	s14, s15
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 8006aa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aaa:	d400      	bmi.n	8006aae <PathPlan+0xc6e>
 8006aac:	e2c7      	b.n	800703e <PathPlan+0x11fe>
						if(pp->target_accurate[pp->point_count] == 1.0){
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	3346      	adds	r3, #70	; 0x46
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	3304      	adds	r3, #4
 8006abe:	edd3 7a00 	vldr	s15, [r3]
 8006ac2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ac6:	eef4 7a47 	vcmp.f32	s15, s14
 8006aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ace:	f040 80fd 	bne.w	8006ccc <PathPlan+0xe8c>
							if(pp->pp_lck_enb == 1){
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	f040 82b0 	bne.w	800703e <PathPlan+0x11fe>

								pp->point_count++;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
								if(pp->target_x[pp->point_count]-pp->real_x){
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	331a      	adds	r3, #26
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	ed93 7a00 	vldr	s14, [r3]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006b04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b08:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b10:	d01d      	beq.n	8006b4e <PathPlan+0xd0e>
									PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	331a      	adds	r3, #26
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	ed93 7a00 	vldr	s14, [r3]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b2e:	eef0 7ae7 	vabs.f32	s15, s15
 8006b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006b40:	4619      	mov	r1, r3
 8006b42:	eeb0 0a47 	vmov.f32	s0, s14
 8006b46:	2002      	movs	r0, #2
 8006b48:	f7fe faed 	bl	8005126 <PIDGainSet>
 8006b4c:	e008      	b.n	8006b60 <PathPlan+0xd20>
								} else {
									PIDGainSet(KE,1.0,&(pp->x));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006b54:	4619      	mov	r1, r3
 8006b56:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006b5a:	2002      	movs	r0, #2
 8006b5c:	f7fe fae3 	bl	8005126 <PIDGainSet>
								}
								if(pp->target_y[pp->point_count]-pp->real_y){
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	3328      	adds	r3, #40	; 0x28
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	3304      	adds	r3, #4
 8006b70:	ed93 7a00 	vldr	s14, [r3]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006b7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b86:	d01e      	beq.n	8006bc6 <PathPlan+0xd86>
									PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	3328      	adds	r3, #40	; 0x28
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	3304      	adds	r3, #4
 8006b98:	ed93 7a00 	vldr	s14, [r3]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006ba2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ba6:	eef0 7ae7 	vabs.f32	s15, s15
 8006baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006bb8:	4619      	mov	r1, r3
 8006bba:	eeb0 0a47 	vmov.f32	s0, s14
 8006bbe:	2002      	movs	r0, #2
 8006bc0:	f7fe fab1 	bl	8005126 <PIDGainSet>
 8006bc4:	e008      	b.n	8006bd8 <PathPlan+0xd98>
								} else {
									PIDGainSet(KE,1.0,&(pp->y));
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006bcc:	4619      	mov	r1, r3
 8006bce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006bd2:	2002      	movs	r0, #2
 8006bd4:	f7fe faa7 	bl	8005126 <PIDGainSet>
								}
								PIDGainSet(KP,pp->kp[0],&(pp->x));
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006be4:	4619      	mov	r1, r3
 8006be6:	eeb0 0a67 	vmov.f32	s0, s15
 8006bea:	2004      	movs	r0, #4
 8006bec:	f7fe fa9b 	bl	8005126 <PIDGainSet>
								PIDGainSet(KP,pp->kp[0],&(pp->y));
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8006c02:	2004      	movs	r0, #4
 8006c04:	f7fe fa8f 	bl	8005126 <PIDGainSet>
								PIDGainSet(KI,pp->ki[0],&(pp->x));
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006c14:	4619      	mov	r1, r3
 8006c16:	eeb0 0a67 	vmov.f32	s0, s15
 8006c1a:	2005      	movs	r0, #5
 8006c1c:	f7fe fa83 	bl	8005126 <PIDGainSet>
								PIDGainSet(KI,pp->ki[0],&(pp->y));
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8006c32:	2005      	movs	r0, #5
 8006c34:	f7fe fa77 	bl	8005126 <PIDGainSet>
								PIDGainSet(KD,pp->kd[0],&(pp->x));
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006c44:	4619      	mov	r1, r3
 8006c46:	eeb0 0a67 	vmov.f32	s0, s15
 8006c4a:	2006      	movs	r0, #6
 8006c4c:	f7fe fa6b 	bl	8005126 <PIDGainSet>
								PIDGainSet(KD,pp->kd[0],&(pp->y));
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8006c62:	2006      	movs	r0, #6
 8006c64:	f7fe fa5f 	bl	8005126 <PIDGainSet>
								PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	3384      	adds	r3, #132	; 0x84
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	3304      	adds	r3, #4
 8006c78:	edd3 7a00 	vldr	s15, [r3]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006c82:	4619      	mov	r1, r3
 8006c84:	eeb0 0a67 	vmov.f32	s0, s15
 8006c88:	2003      	movs	r0, #3
 8006c8a:	f7fe fa4c 	bl	8005126 <PIDGainSet>
								PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	3394      	adds	r3, #148	; 0x94
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	edd3 7a00 	vldr	s15, [r3]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8006cac:	2003      	movs	r0, #3
 8006cae:	f7fe fa3a 	bl	8005126 <PIDGainSet>
								pp->crnt_crv_pt=0;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
								pp->pp_crv_calc = 0;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528

								pp->pp_lck_enb = 0;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8006cca:	e1b8      	b.n	800703e <PathPlan+0x11fe>

							}
						}else{
							pp->point_count++;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006cd2:	1c5a      	adds	r2, r3, #1
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							if(pp->target_x[pp->point_count]-pp->real_x){
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	331a      	adds	r3, #26
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	ed93 7a00 	vldr	s14, [r3]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006cf6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cfe:	d01d      	beq.n	8006d3c <PathPlan+0xefc>
								PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	331a      	adds	r3, #26
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	4413      	add	r3, r2
 8006d0e:	ed93 7a00 	vldr	s14, [r3]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006d18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d1c:	eef0 7ae7 	vabs.f32	s15, s15
 8006d20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006d2e:	4619      	mov	r1, r3
 8006d30:	eeb0 0a47 	vmov.f32	s0, s14
 8006d34:	2002      	movs	r0, #2
 8006d36:	f7fe f9f6 	bl	8005126 <PIDGainSet>
 8006d3a:	e008      	b.n	8006d4e <PathPlan+0xf0e>
							} else {
								PIDGainSet(KE,1.0,&(pp->x));
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006d42:	4619      	mov	r1, r3
 8006d44:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006d48:	2002      	movs	r0, #2
 8006d4a:	f7fe f9ec 	bl	8005126 <PIDGainSet>
							}
							if(pp->target_y[pp->point_count]-pp->real_y){
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	3328      	adds	r3, #40	; 0x28
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	ed93 7a00 	vldr	s14, [r3]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006d68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d6c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d74:	d01e      	beq.n	8006db4 <PathPlan+0xf74>
								PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	3328      	adds	r3, #40	; 0x28
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	3304      	adds	r3, #4
 8006d86:	ed93 7a00 	vldr	s14, [r3]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006d90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d94:	eef0 7ae7 	vabs.f32	s15, s15
 8006d98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006da6:	4619      	mov	r1, r3
 8006da8:	eeb0 0a47 	vmov.f32	s0, s14
 8006dac:	2002      	movs	r0, #2
 8006dae:	f7fe f9ba 	bl	8005126 <PIDGainSet>
 8006db2:	e008      	b.n	8006dc6 <PathPlan+0xf86>
							} else {
								PIDGainSet(KE,1.0,&(pp->y));
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006dba:	4619      	mov	r1, r3
 8006dbc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006dc0:	2002      	movs	r0, #2
 8006dc2:	f7fe f9b0 	bl	8005126 <PIDGainSet>
							}
							PIDGainSet(KP,pp->kp[0],&(pp->x));
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	eeb0 0a67 	vmov.f32	s0, s15
 8006dd8:	2004      	movs	r0, #4
 8006dda:	f7fe f9a4 	bl	8005126 <PIDGainSet>
							PIDGainSet(KP,pp->kp[0],&(pp->y));
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006dea:	4619      	mov	r1, r3
 8006dec:	eeb0 0a67 	vmov.f32	s0, s15
 8006df0:	2004      	movs	r0, #4
 8006df2:	f7fe f998 	bl	8005126 <PIDGainSet>
							PIDGainSet(KI,pp->ki[0],&(pp->x));
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006e02:	4619      	mov	r1, r3
 8006e04:	eeb0 0a67 	vmov.f32	s0, s15
 8006e08:	2005      	movs	r0, #5
 8006e0a:	f7fe f98c 	bl	8005126 <PIDGainSet>
							PIDGainSet(KI,pp->ki[0],&(pp->y));
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8006e20:	2005      	movs	r0, #5
 8006e22:	f7fe f980 	bl	8005126 <PIDGainSet>
							PIDGainSet(KD,pp->kd[0],&(pp->x));
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006e32:	4619      	mov	r1, r3
 8006e34:	eeb0 0a67 	vmov.f32	s0, s15
 8006e38:	2006      	movs	r0, #6
 8006e3a:	f7fe f974 	bl	8005126 <PIDGainSet>
							PIDGainSet(KD,pp->kd[0],&(pp->y));
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8006e50:	2006      	movs	r0, #6
 8006e52:	f7fe f968 	bl	8005126 <PIDGainSet>
							PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	3384      	adds	r3, #132	; 0x84
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	3304      	adds	r3, #4
 8006e66:	edd3 7a00 	vldr	s15, [r3]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006e70:	4619      	mov	r1, r3
 8006e72:	eeb0 0a67 	vmov.f32	s0, s15
 8006e76:	2003      	movs	r0, #3
 8006e78:	f7fe f955 	bl	8005126 <PIDGainSet>
							PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	3394      	adds	r3, #148	; 0x94
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	edd3 7a00 	vldr	s15, [r3]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006e94:	4619      	mov	r1, r3
 8006e96:	eeb0 0a67 	vmov.f32	s0, s15
 8006e9a:	2003      	movs	r0, #3
 8006e9c:	f7fe f943 	bl	8005126 <PIDGainSet>
							pp->crnt_crv_pt=0;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
							pp->pp_crv_calc = 0;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8006eb0:	e0c5      	b.n	800703e <PathPlan+0x11fe>
						}
					}

				}else if(pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && pp->point_count == (pp->target_point - 1) ){
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	f040 80bd 	bne.w	8007040 <PathPlan+0x1200>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	f040 80b3 	bne.w	8007040 <PathPlan+0x1200>

					if(fabs(pp->error_x)<pp->f_tol_xy && fabs(pp->error_y)<pp->f_tol_xy && (int)pp->error_z<=pp->f_tol_z){
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8006ee0:	eeb0 7ae7 	vabs.f32	s14, s15
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8006eea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ef2:	f140 80a5 	bpl.w	8007040 <PathPlan+0x1200>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8006efc:	eeb0 7ae7 	vabs.f32	s14, s15
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8006f06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f0e:	f140 8097 	bpl.w	8007040 <PathPlan+0x1200>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8006f18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	edd3 7ac1 	vldr	s15, [r3, #772]	; 0x304
 8006f26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f2e:	f200 8087 	bhi.w	8007040 <PathPlan+0x1200>

						if(pp->target_accurate[pp->point_count] == 1.0){
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	3346      	adds	r3, #70	; 0x46
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	3304      	adds	r3, #4
 8006f42:	edd3 7a00 	vldr	s15, [r3]
 8006f46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f4a:	eef4 7a47 	vcmp.f32	s15, s14
 8006f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f52:	d13e      	bne.n	8006fd2 <PathPlan+0x1192>
							if(pp->pp_lck_enb == 1){
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d170      	bne.n	8007040 <PathPlan+0x1200>
								PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8006f64:	edd3 7a00 	vldr	s15, [r3]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8006f6e:	4619      	mov	r1, r3
 8006f70:	eeb0 0a67 	vmov.f32	s0, s15
 8006f74:	2004      	movs	r0, #4
 8006f76:	f7fe f8d6 	bl	8005126 <PIDGainSet>
								//								APPStop();
//								RNSStop(&rns);
//								PP_stop(&pp);
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f80:	487e      	ldr	r0, [pc, #504]	; (800717c <PathPlan+0x133c>)
 8006f82:	f00b ff77 	bl	8012e74 <HAL_GPIO_WritePin>
								//								LED4 = 1;
								PIDDelayInit(&(pp->x));
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fe fa1c 	bl	80053ca <PIDDelayInit>
								PIDDelayInit(&(pp->y));
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7fe fa16 	bl	80053ca <PIDDelayInit>
								PIDDelayInit(&(pp->z));
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7fe fa10 	bl	80053ca <PIDDelayInit>
								pp->crnt_crv_pt=0;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
								pp->pp_crv_calc = 0;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
								pp->pp_start=0;
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8006fc0:	f36f 0300 	bfc	r3, #0, #1
 8006fc4:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
								pp->pp_lck_enb = 0;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8006fd0:	e036      	b.n	8007040 <PathPlan+0x1200>
							}
						}else{
							PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8006fd8:	edd3 7a00 	vldr	s15, [r3]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8006fe8:	2004      	movs	r0, #4
 8006fea:	f7fe f89c 	bl	8005126 <PIDGainSet>
//							RNSStop(&rns);
//							PP_stop(&pp);
							//							APPStop();
							//							LED4 = 1;
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ff4:	4861      	ldr	r0, [pc, #388]	; (800717c <PathPlan+0x133c>)
 8006ff6:	f00b ff3d 	bl	8012e74 <HAL_GPIO_WritePin>
							PIDDelayInit(&(pp->x));
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007000:	4618      	mov	r0, r3
 8007002:	f7fe f9e2 	bl	80053ca <PIDDelayInit>
							PIDDelayInit(&(pp->y));
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800700c:	4618      	mov	r0, r3
 800700e:	f7fe f9dc 	bl	80053ca <PIDDelayInit>
							PIDDelayInit(&(pp->z));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8007018:	4618      	mov	r0, r3
 800701a:	f7fe f9d6 	bl	80053ca <PIDDelayInit>
							pp->crnt_crv_pt=0;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
							pp->pp_crv_calc = 0;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
							pp->pp_start=0;
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8007034:	f36f 0300 	bfc	r3, #0, #1
 8007038:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
 800703c:	e000      	b.n	8007040 <PathPlan+0x1200>
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 800703e:	bf00      	nop

				}
			}


			if(pp->pp_start){
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b00      	cmp	r3, #0
 800704e:	f001 8557 	beq.w	8008b00 <PathPlan+0x2cc0>

				pp->dx = pp->pp_crv_x[pp->crnt_crv_pt] - pp->prev_real_x;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	ed93 7a00 	vldr	s14, [r3]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800706c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
				pp->dy = pp->pp_crv_y[pp->crnt_crv_pt] - pp->prev_real_y;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	ed93 7a00 	vldr	s14, [r3]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8007090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

				pp->rotate=0;
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 80070a0:	f36f 03c3 	bfc	r3, #3, #1
 80070a4:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538

				if ((pp->dx != 0.0 || pp->dx != -0.0)&&(pp->dy != -0.0 || pp->dy != 0.0)){
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80070ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80070b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070b6:	d107      	bne.n	80070c8 <PathPlan+0x1288>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80070be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80070c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070c6:	d021      	beq.n	800710c <PathPlan+0x12cc>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80070ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80070d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070d6:	d107      	bne.n	80070e8 <PathPlan+0x12a8>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80070de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80070e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070e6:	d011      	beq.n	800710c <PathPlan+0x12cc>
					pp->heading = atan2f(pp->dy, pp->dx);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80070f4:	eef0 0a47 	vmov.f32	s1, s14
 80070f8:	eeb0 0a67 	vmov.f32	s0, s15
 80070fc:	f018 f946 	bl	801f38c <atan2f>
 8007100:	eef0 7a40 	vmov.f32	s15, s0
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 800710a:	e048      	b.n	800719e <PathPlan+0x135e>
				} else {
					if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy < 0.0) {
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007112:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800711a:	d007      	beq.n	800712c <PathPlan+0x12ec>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007122:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800712a:	d10b      	bne.n	8007144 <PathPlan+0x1304>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007132:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800713a:	d503      	bpl.n	8007144 <PathPlan+0x1304>
						pp->heading = 1.5708;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a10      	ldr	r2, [pc, #64]	; (8007180 <PathPlan+0x1340>)
 8007140:	65da      	str	r2, [r3, #92]	; 0x5c
 8007142:	e02c      	b.n	800719e <PathPlan+0x135e>
					} else if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy > 0.0) {
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800714a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800714e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007152:	d007      	beq.n	8007164 <PathPlan+0x1324>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800715a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800715e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007162:	d111      	bne.n	8007188 <PathPlan+0x1348>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800716a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800716e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007172:	dd09      	ble.n	8007188 <PathPlan+0x1348>
						pp->heading = -1.5708;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a03      	ldr	r2, [pc, #12]	; (8007184 <PathPlan+0x1344>)
 8007178:	65da      	str	r2, [r3, #92]	; 0x5c
 800717a:	e010      	b.n	800719e <PathPlan+0x135e>
 800717c:	40020800 	.word	0x40020800
 8007180:	3fc90ff9 	.word	0x3fc90ff9
 8007184:	bfc90ff9 	.word	0xbfc90ff9
					} else {
						pp->heading = 0.0;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f04f 0200 	mov.w	r2, #0
 800718e:	65da      	str	r2, [r3, #92]	; 0x5c
						pp->rotate = 1;
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8007196:	f043 0308 	orr.w	r3, r3, #8
 800719a:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
					}
				}

				pp->vx  = pp->target_vel[pp->point_count] * cosf(pp->heading);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	3374      	adds	r3, #116	; 0x74
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4413      	add	r3, r2
 80071ac:	ed93 8a00 	vldr	s16, [r3]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80071b6:	eeb0 0a67 	vmov.f32	s0, s15
 80071ba:	f018 f85d 	bl	801f278 <cosf>
 80071be:	eef0 7a40 	vmov.f32	s15, s0
 80071c2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				pp->vy  = pp->target_vel[pp->point_count] * sinf(pp->heading);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	3374      	adds	r3, #116	; 0x74
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4413      	add	r3, r2
 80071da:	ed93 8a00 	vldr	s16, [r3]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80071e4:	eeb0 0a67 	vmov.f32	s0, s15
 80071e8:	f018 f88e 	bl	801f308 <sinf>
 80071ec:	eef0 7a40 	vmov.f32	s15, s0
 80071f0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

				if(pp->rotate){
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8007200:	f003 0308 	and.w	r3, r3, #8
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d007      	beq.n	800721a <PathPlan+0x13da>
					pp->vx = pp->vy = 0.0;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f04f 0200 	mov.w	r2, #0
 8007210:	665a      	str	r2, [r3, #100]	; 0x64
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	661a      	str	r2, [r3, #96]	; 0x60
				}

				PID(&(pp->x));
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007220:	4618      	mov	r0, r3
 8007222:	f7fe f8f0 	bl	8005406 <PID>
				PID(&(pp->y));
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800722c:	4618      	mov	r0, r3
 800722e:	f7fe f8ea 	bl	8005406 <PID>
				PID(&(pp->z));
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8007238:	4618      	mov	r0, r3
 800723a:	f7fe f8e4 	bl	8005406 <PID>

				pp->rux =   pp->outx*cosf(pp->real_z_rad) - pp->outy*sinf(pp->real_z_rad);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	edd3 7a06 	vldr	s15, [r3, #24]
 800724a:	eeb0 0a67 	vmov.f32	s0, s15
 800724e:	f018 f813 	bl	801f278 <cosf>
 8007252:	eef0 7a40 	vmov.f32	s15, s0
 8007256:	ee28 8a27 	vmul.f32	s16, s16, s15
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	edd3 7a06 	vldr	s15, [r3, #24]
 8007266:	eeb0 0a67 	vmov.f32	s0, s15
 800726a:	f018 f84d 	bl	801f308 <sinf>
 800726e:	eef0 7a40 	vmov.f32	s15, s0
 8007272:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007276:	ee78 7a67 	vsub.f32	s15, s16, s15
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
				pp->ruy =   pp->outx*sinf(pp->real_z_rad) + pp->outy*cosf(pp->real_z_rad);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	edd3 7a06 	vldr	s15, [r3, #24]
 800728c:	eeb0 0a67 	vmov.f32	s0, s15
 8007290:	f018 f83a 	bl	801f308 <sinf>
 8007294:	eef0 7a40 	vmov.f32	s15, s0
 8007298:	ee28 8a27 	vmul.f32	s16, s16, s15
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80072a8:	eeb0 0a67 	vmov.f32	s0, s15
 80072ac:	f017 ffe4 	bl	801f278 <cosf>
 80072b0:	eef0 7a40 	vmov.f32	s15, s0
 80072b4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80072b8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	edc3 7ab3 	vstr	s15, [r3, #716]	; 0x2cc
				pp->rvx =   pp->vx*cosf(pp->real_z_rad) - pp->vy*sinf(pp->real_z_rad);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80072ce:	eeb0 0a67 	vmov.f32	s0, s15
 80072d2:	f017 ffd1 	bl	801f278 <cosf>
 80072d6:	eef0 7a40 	vmov.f32	s15, s0
 80072da:	ee28 8a27 	vmul.f32	s16, s16, s15
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	edd3 7a06 	vldr	s15, [r3, #24]
 80072ea:	eeb0 0a67 	vmov.f32	s0, s15
 80072ee:	f018 f80b 	bl	801f308 <sinf>
 80072f2:	eef0 7a40 	vmov.f32	s15, s0
 80072f6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80072fa:	ee78 7a67 	vsub.f32	s15, s16, s15
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	edc3 7ab4 	vstr	s15, [r3, #720]	; 0x2d0
				pp->rvy =   pp->vx*sinf(pp->real_z_rad) + pp->vy*cosf(pp->real_z_rad);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	edd3 7a06 	vldr	s15, [r3, #24]
 8007310:	eeb0 0a67 	vmov.f32	s0, s15
 8007314:	f017 fff8 	bl	801f308 <sinf>
 8007318:	eef0 7a40 	vmov.f32	s15, s0
 800731c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	edd3 7a06 	vldr	s15, [r3, #24]
 800732c:	eeb0 0a67 	vmov.f32	s0, s15
 8007330:	f017 ffa2 	bl	801f278 <cosf>
 8007334:	eef0 7a40 	vmov.f32	s15, s0
 8007338:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800733c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	edc3 7ab5 	vstr	s15, [r3, #724]	; 0x2d4

				if(pp->base_shape== 0){
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 800734c:	2b00      	cmp	r3, #0
 800734e:	f040 8161 	bne.w	8007614 <PathPlan+0x17d4>
					pp->u1 = 0.707107 * ( pp->ruy - pp->rux) - (pp->outz * 1.0);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800735e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007362:	ee17 0a90 	vmov	r0, s15
 8007366:	f7f9 f8ef 	bl	8000548 <__aeabi_f2d>
 800736a:	f20f 6338 	addw	r3, pc, #1592	; 0x638
 800736e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007372:	f7f9 f941 	bl	80005f8 <__aeabi_dmul>
 8007376:	4602      	mov	r2, r0
 8007378:	460b      	mov	r3, r1
 800737a:	4614      	mov	r4, r2
 800737c:	461d      	mov	r5, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007384:	4618      	mov	r0, r3
 8007386:	f7f9 f8df 	bl	8000548 <__aeabi_f2d>
 800738a:	4602      	mov	r2, r0
 800738c:	460b      	mov	r3, r1
 800738e:	4620      	mov	r0, r4
 8007390:	4629      	mov	r1, r5
 8007392:	f7f8 ff79 	bl	8000288 <__aeabi_dsub>
 8007396:	4602      	mov	r2, r0
 8007398:	460b      	mov	r3, r1
 800739a:	4610      	mov	r0, r2
 800739c:	4619      	mov	r1, r3
 800739e:	f7f9 fc23 	bl	8000be8 <__aeabi_d2f>
 80073a2:	4602      	mov	r2, r0
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = 0.707107 * ( pp->ruy + pp->rux) + (pp->outz * 1.0);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80073b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073ba:	ee17 0a90 	vmov	r0, s15
 80073be:	f7f9 f8c3 	bl	8000548 <__aeabi_f2d>
 80073c2:	f20f 53e0 	addw	r3, pc, #1504	; 0x5e0
 80073c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ca:	f7f9 f915 	bl	80005f8 <__aeabi_dmul>
 80073ce:	4602      	mov	r2, r0
 80073d0:	460b      	mov	r3, r1
 80073d2:	4614      	mov	r4, r2
 80073d4:	461d      	mov	r5, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80073dc:	4618      	mov	r0, r3
 80073de:	f7f9 f8b3 	bl	8000548 <__aeabi_f2d>
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	4620      	mov	r0, r4
 80073e8:	4629      	mov	r1, r5
 80073ea:	f7f8 ff4f 	bl	800028c <__adddf3>
 80073ee:	4602      	mov	r2, r0
 80073f0:	460b      	mov	r3, r1
 80073f2:	4610      	mov	r0, r2
 80073f4:	4619      	mov	r1, r3
 80073f6:	f7f9 fbf7 	bl	8000be8 <__aeabi_d2f>
 80073fa:	4602      	mov	r2, r0
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 0.707107 * ( pp->ruy - pp->rux) + (pp->outz * 1.0);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800740e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007412:	ee17 0a90 	vmov	r0, s15
 8007416:	f7f9 f897 	bl	8000548 <__aeabi_f2d>
 800741a:	f20f 5388 	addw	r3, pc, #1416	; 0x588
 800741e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007422:	f7f9 f8e9 	bl	80005f8 <__aeabi_dmul>
 8007426:	4602      	mov	r2, r0
 8007428:	460b      	mov	r3, r1
 800742a:	4614      	mov	r4, r2
 800742c:	461d      	mov	r5, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007434:	4618      	mov	r0, r3
 8007436:	f7f9 f887 	bl	8000548 <__aeabi_f2d>
 800743a:	4602      	mov	r2, r0
 800743c:	460b      	mov	r3, r1
 800743e:	4620      	mov	r0, r4
 8007440:	4629      	mov	r1, r5
 8007442:	f7f8 ff23 	bl	800028c <__adddf3>
 8007446:	4602      	mov	r2, r0
 8007448:	460b      	mov	r3, r1
 800744a:	4610      	mov	r0, r2
 800744c:	4619      	mov	r1, r3
 800744e:	f7f9 fbcb 	bl	8000be8 <__aeabi_d2f>
 8007452:	4602      	mov	r2, r0
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
					pp->u4 = 0.707107 * ( pp->ruy + pp->rux) - (pp->outz * 1.0);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8007466:	ee77 7a27 	vadd.f32	s15, s14, s15
 800746a:	ee17 0a90 	vmov	r0, s15
 800746e:	f7f9 f86b 	bl	8000548 <__aeabi_f2d>
 8007472:	f20f 5330 	addw	r3, pc, #1328	; 0x530
 8007476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747a:	f7f9 f8bd 	bl	80005f8 <__aeabi_dmul>
 800747e:	4602      	mov	r2, r0
 8007480:	460b      	mov	r3, r1
 8007482:	4614      	mov	r4, r2
 8007484:	461d      	mov	r5, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800748c:	4618      	mov	r0, r3
 800748e:	f7f9 f85b 	bl	8000548 <__aeabi_f2d>
 8007492:	4602      	mov	r2, r0
 8007494:	460b      	mov	r3, r1
 8007496:	4620      	mov	r0, r4
 8007498:	4629      	mov	r1, r5
 800749a:	f7f8 fef5 	bl	8000288 <__aeabi_dsub>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	4610      	mov	r0, r2
 80074a4:	4619      	mov	r1, r3
 80074a6:	f7f9 fb9f 	bl	8000be8 <__aeabi_d2f>
 80074aa:	4602      	mov	r2, r0
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4

					pp->v1 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u1;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80074be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074c2:	ee17 0a90 	vmov	r0, s15
 80074c6:	f7f9 f83f 	bl	8000548 <__aeabi_f2d>
 80074ca:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 80074ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d2:	f7f9 f891 	bl	80005f8 <__aeabi_dmul>
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	4614      	mov	r4, r2
 80074dc:	461d      	mov	r5, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7f9 f82f 	bl	8000548 <__aeabi_f2d>
 80074ea:	4602      	mov	r2, r0
 80074ec:	460b      	mov	r3, r1
 80074ee:	4620      	mov	r0, r4
 80074f0:	4629      	mov	r1, r5
 80074f2:	f7f8 fecb 	bl	800028c <__adddf3>
 80074f6:	4602      	mov	r2, r0
 80074f8:	460b      	mov	r3, r1
 80074fa:	4610      	mov	r0, r2
 80074fc:	4619      	mov	r1, r3
 80074fe:	f7f9 fb73 	bl	8000be8 <__aeabi_d2f>
 8007502:	4602      	mov	r2, r0
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u2;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8007516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800751a:	ee17 0a90 	vmov	r0, s15
 800751e:	f7f9 f813 	bl	8000548 <__aeabi_f2d>
 8007522:	f20f 4380 	addw	r3, pc, #1152	; 0x480
 8007526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752a:	f7f9 f865 	bl	80005f8 <__aeabi_dmul>
 800752e:	4602      	mov	r2, r0
 8007530:	460b      	mov	r3, r1
 8007532:	4614      	mov	r4, r2
 8007534:	461d      	mov	r5, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800753c:	4618      	mov	r0, r3
 800753e:	f7f9 f803 	bl	8000548 <__aeabi_f2d>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	4620      	mov	r0, r4
 8007548:	4629      	mov	r1, r5
 800754a:	f7f8 fe9f 	bl	800028c <__adddf3>
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	4610      	mov	r0, r2
 8007554:	4619      	mov	r1, r3
 8007556:	f7f9 fb47 	bl	8000be8 <__aeabi_d2f>
 800755a:	4602      	mov	r2, r0
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u3;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800756e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007572:	ee17 0a90 	vmov	r0, s15
 8007576:	f7f8 ffe7 	bl	8000548 <__aeabi_f2d>
 800757a:	f20f 4328 	addw	r3, pc, #1064	; 0x428
 800757e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007582:	f7f9 f839 	bl	80005f8 <__aeabi_dmul>
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	4614      	mov	r4, r2
 800758c:	461d      	mov	r5, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8007594:	4618      	mov	r0, r3
 8007596:	f7f8 ffd7 	bl	8000548 <__aeabi_f2d>
 800759a:	4602      	mov	r2, r0
 800759c:	460b      	mov	r3, r1
 800759e:	4620      	mov	r0, r4
 80075a0:	4629      	mov	r1, r5
 80075a2:	f7f8 fe73 	bl	800028c <__adddf3>
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	4610      	mov	r0, r2
 80075ac:	4619      	mov	r1, r3
 80075ae:	f7f9 fb1b 	bl	8000be8 <__aeabi_d2f>
 80075b2:	4602      	mov	r2, r0
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
					pp->v4 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u4;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80075c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075ca:	ee17 0a90 	vmov	r0, s15
 80075ce:	f7f8 ffbb 	bl	8000548 <__aeabi_f2d>
 80075d2:	a3f4      	add	r3, pc, #976	; (adr r3, 80079a4 <PathPlan+0x1b64>)
 80075d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d8:	f7f9 f80e 	bl	80005f8 <__aeabi_dmul>
 80075dc:	4602      	mov	r2, r0
 80075de:	460b      	mov	r3, r1
 80075e0:	4614      	mov	r4, r2
 80075e2:	461d      	mov	r5, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7f8 ffac 	bl	8000548 <__aeabi_f2d>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	4620      	mov	r0, r4
 80075f6:	4629      	mov	r1, r5
 80075f8:	f7f8 fe48 	bl	800028c <__adddf3>
 80075fc:	4602      	mov	r2, r0
 80075fe:	460b      	mov	r3, r1
 8007600:	4610      	mov	r0, r2
 8007602:	4619      	mov	r1, r3
 8007604:	f7f9 faf0 	bl	8000be8 <__aeabi_d2f>
 8007608:	4602      	mov	r2, r0
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
//				hb_count = HAL_GetTick();

			}
		}
	}
}
 8007610:	f001 ba76 	b.w	8008b00 <PathPlan+0x2cc0>
				} else if(pp->base_shape==1){
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 800761a:	2b01      	cmp	r3, #1
 800761c:	f041 8270 	bne.w	8008b00 <PathPlan+0x2cc0>
					pp->u1 = (0.866 * pp->ruy) - (0.5 * pp->rux) + (pp->outz * 1.0);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007626:	4618      	mov	r0, r3
 8007628:	f7f8 ff8e 	bl	8000548 <__aeabi_f2d>
 800762c:	a3d8      	add	r3, pc, #864	; (adr r3, 8007990 <PathPlan+0x1b50>)
 800762e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007632:	f7f8 ffe1 	bl	80005f8 <__aeabi_dmul>
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	4614      	mov	r4, r2
 800763c:	461d      	mov	r5, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007644:	4618      	mov	r0, r3
 8007646:	f7f8 ff7f 	bl	8000548 <__aeabi_f2d>
 800764a:	f04f 0200 	mov.w	r2, #0
 800764e:	4bd2      	ldr	r3, [pc, #840]	; (8007998 <PathPlan+0x1b58>)
 8007650:	f7f8 ffd2 	bl	80005f8 <__aeabi_dmul>
 8007654:	4602      	mov	r2, r0
 8007656:	460b      	mov	r3, r1
 8007658:	4620      	mov	r0, r4
 800765a:	4629      	mov	r1, r5
 800765c:	f7f8 fe14 	bl	8000288 <__aeabi_dsub>
 8007660:	4602      	mov	r2, r0
 8007662:	460b      	mov	r3, r1
 8007664:	4614      	mov	r4, r2
 8007666:	461d      	mov	r5, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800766e:	4618      	mov	r0, r3
 8007670:	f7f8 ff6a 	bl	8000548 <__aeabi_f2d>
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	4620      	mov	r0, r4
 800767a:	4629      	mov	r1, r5
 800767c:	f7f8 fe06 	bl	800028c <__adddf3>
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	4610      	mov	r0, r2
 8007686:	4619      	mov	r1, r3
 8007688:	f7f9 faae 	bl	8000be8 <__aeabi_d2f>
 800768c:	4602      	mov	r2, r0
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = (0.866 * pp->ruy) + (0.5 * pp->rux) - (pp->outz * 1.0);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800769a:	4618      	mov	r0, r3
 800769c:	f7f8 ff54 	bl	8000548 <__aeabi_f2d>
 80076a0:	a3bb      	add	r3, pc, #748	; (adr r3, 8007990 <PathPlan+0x1b50>)
 80076a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a6:	f7f8 ffa7 	bl	80005f8 <__aeabi_dmul>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4614      	mov	r4, r2
 80076b0:	461d      	mov	r5, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7f8 ff45 	bl	8000548 <__aeabi_f2d>
 80076be:	f04f 0200 	mov.w	r2, #0
 80076c2:	4bb5      	ldr	r3, [pc, #724]	; (8007998 <PathPlan+0x1b58>)
 80076c4:	f7f8 ff98 	bl	80005f8 <__aeabi_dmul>
 80076c8:	4602      	mov	r2, r0
 80076ca:	460b      	mov	r3, r1
 80076cc:	4620      	mov	r0, r4
 80076ce:	4629      	mov	r1, r5
 80076d0:	f7f8 fddc 	bl	800028c <__adddf3>
 80076d4:	4602      	mov	r2, r0
 80076d6:	460b      	mov	r3, r1
 80076d8:	4614      	mov	r4, r2
 80076da:	461d      	mov	r5, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7f8 ff30 	bl	8000548 <__aeabi_f2d>
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	4620      	mov	r0, r4
 80076ee:	4629      	mov	r1, r5
 80076f0:	f7f8 fdca 	bl	8000288 <__aeabi_dsub>
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	4610      	mov	r0, r2
 80076fa:	4619      	mov	r1, r3
 80076fc:	f7f9 fa74 	bl	8000be8 <__aeabi_d2f>
 8007700:	4602      	mov	r2, r0
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 1.0 * pp->rux + (pp->outz * 1.0);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8007714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	edc3 7ab8 	vstr	s15, [r3, #736]	; 0x2e0
					pp->v1 = (0.866 * pp->rvy) - (0.5 * pp->rvx) + pp->u1;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007724:	4618      	mov	r0, r3
 8007726:	f7f8 ff0f 	bl	8000548 <__aeabi_f2d>
 800772a:	a399      	add	r3, pc, #612	; (adr r3, 8007990 <PathPlan+0x1b50>)
 800772c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007730:	f7f8 ff62 	bl	80005f8 <__aeabi_dmul>
 8007734:	4602      	mov	r2, r0
 8007736:	460b      	mov	r3, r1
 8007738:	4614      	mov	r4, r2
 800773a:	461d      	mov	r5, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8007742:	4618      	mov	r0, r3
 8007744:	f7f8 ff00 	bl	8000548 <__aeabi_f2d>
 8007748:	f04f 0200 	mov.w	r2, #0
 800774c:	4b92      	ldr	r3, [pc, #584]	; (8007998 <PathPlan+0x1b58>)
 800774e:	f7f8 ff53 	bl	80005f8 <__aeabi_dmul>
 8007752:	4602      	mov	r2, r0
 8007754:	460b      	mov	r3, r1
 8007756:	4620      	mov	r0, r4
 8007758:	4629      	mov	r1, r5
 800775a:	f7f8 fd95 	bl	8000288 <__aeabi_dsub>
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	4614      	mov	r4, r2
 8007764:	461d      	mov	r5, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800776c:	4618      	mov	r0, r3
 800776e:	f7f8 feeb 	bl	8000548 <__aeabi_f2d>
 8007772:	4602      	mov	r2, r0
 8007774:	460b      	mov	r3, r1
 8007776:	4620      	mov	r0, r4
 8007778:	4629      	mov	r1, r5
 800777a:	f7f8 fd87 	bl	800028c <__adddf3>
 800777e:	4602      	mov	r2, r0
 8007780:	460b      	mov	r3, r1
 8007782:	4610      	mov	r0, r2
 8007784:	4619      	mov	r1, r3
 8007786:	f7f9 fa2f 	bl	8000be8 <__aeabi_d2f>
 800778a:	4602      	mov	r2, r0
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = (0.866 * pp->rvy) + (0.5 * pp->rvx) + pp->u2;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007798:	4618      	mov	r0, r3
 800779a:	f7f8 fed5 	bl	8000548 <__aeabi_f2d>
 800779e:	a37c      	add	r3, pc, #496	; (adr r3, 8007990 <PathPlan+0x1b50>)
 80077a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a4:	f7f8 ff28 	bl	80005f8 <__aeabi_dmul>
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	4614      	mov	r4, r2
 80077ae:	461d      	mov	r5, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7f8 fec6 	bl	8000548 <__aeabi_f2d>
 80077bc:	f04f 0200 	mov.w	r2, #0
 80077c0:	4b75      	ldr	r3, [pc, #468]	; (8007998 <PathPlan+0x1b58>)
 80077c2:	f7f8 ff19 	bl	80005f8 <__aeabi_dmul>
 80077c6:	4602      	mov	r2, r0
 80077c8:	460b      	mov	r3, r1
 80077ca:	4620      	mov	r0, r4
 80077cc:	4629      	mov	r1, r5
 80077ce:	f7f8 fd5d 	bl	800028c <__adddf3>
 80077d2:	4602      	mov	r2, r0
 80077d4:	460b      	mov	r3, r1
 80077d6:	4614      	mov	r4, r2
 80077d8:	461d      	mov	r5, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7f8 feb1 	bl	8000548 <__aeabi_f2d>
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	4620      	mov	r0, r4
 80077ec:	4629      	mov	r1, r5
 80077ee:	f7f8 fd4d 	bl	800028c <__adddf3>
 80077f2:	4602      	mov	r2, r0
 80077f4:	460b      	mov	r3, r1
 80077f6:	4610      	mov	r0, r2
 80077f8:	4619      	mov	r1, r3
 80077fa:	f7f9 f9f5 	bl	8000be8 <__aeabi_d2f>
 80077fe:	4602      	mov	r2, r0
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 1.0 * pp->rvx + pp->u3;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	ed93 7ab4 	vldr	s14, [r3, #720]	; 0x2d0
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8007812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	edc3 7abc 	vstr	s15, [r3, #752]	; 0x2f0
}
 800781c:	f001 b970 	b.w	8008b00 <PathPlan+0x2cc0>
			led3 = 1;
 8007820:	4a5e      	ldr	r2, [pc, #376]	; (800799c <PathPlan+0x1b5c>)
 8007822:	7853      	ldrb	r3, [r2, #1]
 8007824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007828:	7053      	strb	r3, [r2, #1]
			pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	331a      	adds	r3, #26
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4413      	add	r3, r2
 8007838:	ed93 7a00 	vldr	s14, [r3]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
			pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	3328      	adds	r3, #40	; 0x28
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4413      	add	r3, r2
 800785a:	3304      	adds	r3, #4
 800785c:	ed93 7a00 	vldr	s14, [r3]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
			pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	3338      	adds	r3, #56	; 0x38
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4413      	add	r3, r2
 800787e:	ed93 7a00 	vldr	s14, [r3]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	edd3 7a04 	vldr	s15, [r3, #16]
 8007888:	ee77 7a67 	vsub.f32	s15, s14, s15
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8007898:	eef0 7ae7 	vabs.f32	s15, s15
 800789c:	ee17 0a90 	vmov	r0, s15
 80078a0:	f7f8 fe52 	bl	8000548 <__aeabi_f2d>
 80078a4:	4604      	mov	r4, r0
 80078a6:	460d      	mov	r5, r1
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 80078ae:	eef0 7ae7 	vabs.f32	s15, s15
 80078b2:	ee17 0a90 	vmov	r0, s15
 80078b6:	f7f8 fe47 	bl	8000548 <__aeabi_f2d>
 80078ba:	4602      	mov	r2, r0
 80078bc:	460b      	mov	r3, r1
 80078be:	4620      	mov	r0, r4
 80078c0:	4629      	mov	r1, r5
 80078c2:	f7f8 fce3 	bl	800028c <__adddf3>
 80078c6:	4602      	mov	r2, r0
 80078c8:	460b      	mov	r3, r1
 80078ca:	4610      	mov	r0, r2
 80078cc:	4619      	mov	r1, r3
 80078ce:	f04f 0200 	mov.w	r2, #0
 80078d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80078d6:	f7f8 ffb9 	bl	800084c <__aeabi_ddiv>
 80078da:	4602      	mov	r2, r0
 80078dc:	460b      	mov	r3, r1
 80078de:	4614      	mov	r4, r2
 80078e0:	461d      	mov	r5, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7f8 fe2d 	bl	8000548 <__aeabi_f2d>
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4620      	mov	r0, r4
 80078f4:	4629      	mov	r1, r5
 80078f6:	f7f9 f8f1 	bl	8000adc <__aeabi_dcmplt>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d013      	beq.n	8007928 <PathPlan+0x1ae8>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8007906:	eeb0 7ae7 	vabs.f32	s14, s15
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 8007910:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007918:	d506      	bpl.n	8007928 <PathPlan+0x1ae8>
				pp->pp_lck = 1.0;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007920:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007924:	601a      	str	r2, [r3, #0]
 8007926:	e005      	b.n	8007934 <PathPlan+0x1af4>
				pp->pp_lck = 0.0;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800792e:	f04f 0200 	mov.w	r2, #0
 8007932:	601a      	str	r2, [r3, #0]
			pp->pp_lck_count = pp->pp_lck_count + 1.0;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800793a:	edd3 7a00 	vldr	s15, [r3]
 800793e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007942:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800794c:	edc3 7a00 	vstr	s15, [r3]
			if(pp->pp_lck_count <= 60.0)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007956:	edd3 7a00 	vldr	s15, [r3]
 800795a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80079a0 <PathPlan+0x1b60>
 800795e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007966:	d821      	bhi.n	80079ac <PathPlan+0x1b6c>
				pp->pp_lck_cal = pp->pp_lck_cal + pp->pp_lck;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800796e:	ed93 7a00 	vldr	s14, [r3]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007978:	edd3 7a00 	vldr	s15, [r3]
 800797c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007986:	edc3 7a00 	vstr	s15, [r3]
 800798a:	e045      	b.n	8007a18 <PathPlan+0x1bd8>
 800798c:	f3af 8000 	nop.w
 8007990:	a1cac083 	.word	0xa1cac083
 8007994:	3febb645 	.word	0x3febb645
 8007998:	3fe00000 	.word	0x3fe00000
 800799c:	40020814 	.word	0x40020814
 80079a0:	42700000 	.word	0x42700000
 80079a4:	dbf8b9bb 	.word	0xdbf8b9bb
 80079a8:	3fe6a09e 	.word	0x3fe6a09e
				pp->pp_lck_final = (pp->pp_lck_cal) / (pp->pp_lck_count) ;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80079b2:	edd3 6a00 	vldr	s13, [r3]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80079bc:	ed93 7a00 	vldr	s14, [r3]
 80079c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80079ca:	edc3 7a00 	vstr	s15, [r3]
				if(pp->pp_lck_final >= 0.95)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7f8 fdb6 	bl	8000548 <__aeabi_f2d>
 80079dc:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 80079e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e4:	f7f9 f88e 	bl	8000b04 <__aeabi_dcmpge>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d004      	beq.n	80079f8 <PathPlan+0x1bb8>
					pp->pp_lck_enb = 1;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 80079f6:	e003      	b.n	8007a00 <PathPlan+0x1bc0>
					pp->pp_lck_enb = 0;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
				pp->pp_lck_count = 0.0;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007a06:	f04f 0200 	mov.w	r2, #0
 8007a0a:	601a      	str	r2, [r3, #0]
				pp->pp_lck_cal   = 0.0;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007a12:	f04f 0200 	mov.w	r2, #0
 8007a16:	601a      	str	r2, [r3, #0]
			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){ // Already almost at destination
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8007a1e:	eef0 7ae7 	vabs.f32	s15, s15
 8007a22:	ee17 0a90 	vmov	r0, s15
 8007a26:	f7f8 fd8f 	bl	8000548 <__aeabi_f2d>
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	460d      	mov	r5, r1
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8007a34:	eef0 7ae7 	vabs.f32	s15, s15
 8007a38:	ee17 0a90 	vmov	r0, s15
 8007a3c:	f7f8 fd84 	bl	8000548 <__aeabi_f2d>
 8007a40:	4602      	mov	r2, r0
 8007a42:	460b      	mov	r3, r1
 8007a44:	4620      	mov	r0, r4
 8007a46:	4629      	mov	r1, r5
 8007a48:	f7f8 fc20 	bl	800028c <__adddf3>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4610      	mov	r0, r2
 8007a52:	4619      	mov	r1, r3
 8007a54:	f04f 0200 	mov.w	r2, #0
 8007a58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a5c:	f7f8 fef6 	bl	800084c <__aeabi_ddiv>
 8007a60:	4602      	mov	r2, r0
 8007a62:	460b      	mov	r3, r1
 8007a64:	4614      	mov	r4, r2
 8007a66:	461d      	mov	r5, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7f8 fd6a 	bl	8000548 <__aeabi_f2d>
 8007a74:	4602      	mov	r2, r0
 8007a76:	460b      	mov	r3, r1
 8007a78:	4620      	mov	r0, r4
 8007a7a:	4629      	mov	r1, r5
 8007a7c:	f7f9 f82e 	bl	8000adc <__aeabi_dcmplt>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f000 84a6 	beq.w	80083d4 <PathPlan+0x2594>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8007a8e:	eeb0 7ae7 	vabs.f32	s14, s15
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 8007a98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa0:	f140 8498 	bpl.w	80083d4 <PathPlan+0x2594>
				if(pp->point_count < (pp->target_point - 2)){ // Checking is second last point or not
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007ab0:	3b02      	subs	r3, #2
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	f280 8206 	bge.w	8007ec4 <PathPlan+0x2084>
					if(pp->target_accurate[pp->point_count] == 1.0){ // point_lock enable
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	3346      	adds	r3, #70	; 0x46
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	4413      	add	r3, r2
 8007ac6:	3304      	adds	r3, #4
 8007ac8:	edd3 7a00 	vldr	s15, [r3]
 8007acc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ad0:	eef4 7a47 	vcmp.f32	s15, s14
 8007ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad8:	f040 813a 	bne.w	8007d50 <PathPlan+0x1f10>
						if(pp->pp_lck_enb == 1){ // After < tol some time, lck_enb = 1
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	f040 8476 	bne.w	80083d4 <PathPlan+0x2594>
							pp->point_count++; // Showing reached previous destination
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	331a      	adds	r3, #26
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	ed93 7a00 	vldr	s14, [r3]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
							pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	3328      	adds	r3, #40	; 0x28
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	3304      	adds	r3, #4
 8007b28:	ed93 7a00 	vldr	s14, [r3]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
							pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	3338      	adds	r3, #56	; 0x38
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	4413      	add	r3, r2
 8007b4a:	ed93 7a00 	vldr	s14, [r3]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	edd3 7a04 	vldr	s15, [r3, #16]
 8007b54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
							if(pp->target_x[pp->point_count]-pp->real_x){
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	331a      	adds	r3, #26
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	ed93 7a00 	vldr	s14, [r3]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007b76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b7a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b82:	d03d      	beq.n	8007c00 <PathPlan+0x1dc0>
										1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	331a      	adds	r3, #26
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	ed93 7a00 	vldr	s14, [r3]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007b9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ba0:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8007ba4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ba8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_x[pp->point_count],
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	3384      	adds	r3, #132	; 0x84
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4413      	add	r3, r2
 8007bba:	3304      	adds	r3, #4
 8007bbc:	edd3 7a00 	vldr	s15, [r3]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	edd3 6aa3 	vldr	s13, [r3, #652]	; 0x28c
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	ed93 6aa5 	vldr	s12, [r3, #660]	; 0x294
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	edd3 5aa7 	vldr	s11, [r3, #668]	; 0x29c
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007bd8:	4618      	mov	r0, r3
 8007bda:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007bde:	eeb0 3a65 	vmov.f32	s6, s11
 8007be2:	eef0 2a46 	vmov.f32	s5, s12
 8007be6:	eeb0 2a66 	vmov.f32	s4, s13
 8007bea:	eef0 1a67 	vmov.f32	s3, s15
 8007bee:	eeb0 1a47 	vmov.f32	s2, s14
 8007bf2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007bf6:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8007ec0 <PathPlan+0x2080>
 8007bfa:	f7fd fa61 	bl	80050c0 <PIDGainInit>
 8007bfe:	e028      	b.n	8007c52 <PathPlan+0x1e12>
										pp->ku_x[pp->point_count],
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	3384      	adds	r3, #132	; 0x84
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	3304      	adds	r3, #4
 8007c10:	edd3 7a00 	vldr	s15, [r3]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	ed93 7aa3 	vldr	s14, [r3, #652]	; 0x28c
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	edd3 6aa5 	vldr	s13, [r3, #660]	; 0x294
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	ed93 6aa7 	vldr	s12, [r3, #668]	; 0x29c
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007c32:	eeb0 3a46 	vmov.f32	s6, s12
 8007c36:	eef0 2a66 	vmov.f32	s5, s13
 8007c3a:	eeb0 2a47 	vmov.f32	s4, s14
 8007c3e:	eef0 1a67 	vmov.f32	s3, s15
 8007c42:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8007c46:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007c4a:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8007ec0 <PathPlan+0x2080>
 8007c4e:	f7fd fa37 	bl	80050c0 <PIDGainInit>
							if(pp->target_y[pp->point_count]-pp->real_y){
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	3328      	adds	r3, #40	; 0x28
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	4413      	add	r3, r2
 8007c60:	3304      	adds	r3, #4
 8007c62:	ed93 7a00 	vldr	s14, [r3]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007c6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c70:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c78:	d03d      	beq.n	8007cf6 <PathPlan+0x1eb6>
										1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	3328      	adds	r3, #40	; 0x28
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	4413      	add	r3, r2
 8007c88:	3304      	adds	r3, #4
 8007c8a:	ed93 7a00 	vldr	s14, [r3]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007c94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c98:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8007c9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ca0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_y[pp->point_count],
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	3394      	adds	r3, #148	; 0x94
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4413      	add	r3, r2
 8007cb2:	edd3 7a00 	vldr	s15, [r3]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	edd3 6aa3 	vldr	s13, [r3, #652]	; 0x28c
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	ed93 6aa5 	vldr	s12, [r3, #660]	; 0x294
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	edd3 5aa7 	vldr	s11, [r3, #668]	; 0x29c
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007cce:	4618      	mov	r0, r3
 8007cd0:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007cd4:	eeb0 3a65 	vmov.f32	s6, s11
 8007cd8:	eef0 2a46 	vmov.f32	s5, s12
 8007cdc:	eeb0 2a66 	vmov.f32	s4, s13
 8007ce0:	eef0 1a67 	vmov.f32	s3, s15
 8007ce4:	eeb0 1a47 	vmov.f32	s2, s14
 8007ce8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007cec:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8007ec0 <PathPlan+0x2080>
 8007cf0:	f7fd f9e6 	bl	80050c0 <PIDGainInit>
 8007cf4:	e027      	b.n	8007d46 <PathPlan+0x1f06>
										pp->ku_y[pp->point_count],
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	3394      	adds	r3, #148	; 0x94
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	edd3 7a00 	vldr	s15, [r3]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	ed93 7aa3 	vldr	s14, [r3, #652]	; 0x28c
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	edd3 6aa5 	vldr	s13, [r3, #660]	; 0x294
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	ed93 6aa7 	vldr	s12, [r3, #668]	; 0x29c
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007d20:	4618      	mov	r0, r3
 8007d22:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007d26:	eeb0 3a46 	vmov.f32	s6, s12
 8007d2a:	eef0 2a66 	vmov.f32	s5, s13
 8007d2e:	eeb0 2a47 	vmov.f32	s4, s14
 8007d32:	eef0 1a67 	vmov.f32	s3, s15
 8007d36:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8007d3a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007d3e:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8007ec0 <PathPlan+0x2080>
 8007d42:	f7fd f9bd 	bl	80050c0 <PIDGainInit>
							pp->pp_lck_enb = 0;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8007d4e:	e341      	b.n	80083d4 <PathPlan+0x2594>
						pp->point_count++; // Assuming reached previous point
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
						pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	331a      	adds	r3, #26
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	ed93 7a00 	vldr	s14, [r3]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007d76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	3328      	adds	r3, #40	; 0x28
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4413      	add	r3, r2
 8007d8e:	3304      	adds	r3, #4
 8007d90:	ed93 7a00 	vldr	s14, [r3]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007d9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	3338      	adds	r3, #56	; 0x38
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	4413      	add	r3, r2
 8007db2:	ed93 7a00 	vldr	s14, [r3]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	edd3 7a04 	vldr	s15, [r3, #16]
 8007dbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
						if(pp->target_x[pp->point_count]-pp->real_x){
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	331a      	adds	r3, #26
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	ed93 7a00 	vldr	s14, [r3]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007dde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007de2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dea:	d01d      	beq.n	8007e28 <PathPlan+0x1fe8>
							PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	331a      	adds	r3, #26
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4413      	add	r3, r2
 8007dfa:	ed93 7a00 	vldr	s14, [r3]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007e04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e08:	eef0 7ae7 	vabs.f32	s15, s15
 8007e0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	eeb0 0a47 	vmov.f32	s0, s14
 8007e20:	2002      	movs	r0, #2
 8007e22:	f7fd f980 	bl	8005126 <PIDGainSet>
 8007e26:	e008      	b.n	8007e3a <PathPlan+0x1ffa>
							PIDGainSet(KE,1.0,&(pp->x));
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007e2e:	4619      	mov	r1, r3
 8007e30:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007e34:	2002      	movs	r0, #2
 8007e36:	f7fd f976 	bl	8005126 <PIDGainSet>
						if(pp->target_y[pp->point_count]-pp->real_y){
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	3328      	adds	r3, #40	; 0x28
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	3304      	adds	r3, #4
 8007e4a:	ed93 7a00 	vldr	s14, [r3]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007e54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e60:	d01e      	beq.n	8007ea0 <PathPlan+0x2060>
							PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	3328      	adds	r3, #40	; 0x28
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	4413      	add	r3, r2
 8007e70:	3304      	adds	r3, #4
 8007e72:	ed93 7a00 	vldr	s14, [r3]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e80:	eef0 7ae7 	vabs.f32	s15, s15
 8007e84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007e92:	4619      	mov	r1, r3
 8007e94:	eeb0 0a47 	vmov.f32	s0, s14
 8007e98:	2002      	movs	r0, #2
 8007e9a:	f7fd f944 	bl	8005126 <PIDGainSet>
 8007e9e:	e299      	b.n	80083d4 <PathPlan+0x2594>
							PIDGainSet(KE,1.0,&(pp->y));
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007eac:	2002      	movs	r0, #2
 8007eae:	f7fd f93a 	bl	8005126 <PIDGainSet>
 8007eb2:	e28f      	b.n	80083d4 <PathPlan+0x2594>
 8007eb4:	f3af 8000 	nop.w
 8007eb8:	66666666 	.word	0x66666666
 8007ebc:	3fee6666 	.word	0x3fee6666
 8007ec0:	3ba3d70a 	.word	0x3ba3d70a
				} else if(pp->point_count == (pp->target_point - 2)){ // Reached second last going last point
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007ed0:	3b02      	subs	r3, #2
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	f040 81fe 	bne.w	80082d4 <PathPlan+0x2494>
					if(pp->target_accurate[pp->point_count] == 1.0){ // point_lock enable
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	3346      	adds	r3, #70	; 0x46
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	3304      	adds	r3, #4
 8007ee8:	edd3 7a00 	vldr	s15, [r3]
 8007eec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ef0:	eef4 7a47 	vcmp.f32	s15, s14
 8007ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ef8:	f040 813a 	bne.w	8008170 <PathPlan+0x2330>
						if(pp->pp_lck_enb == 1){
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	f040 8266 	bne.w	80083d4 <PathPlan+0x2594>
							pp->point_count++;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f0e:	1c5a      	adds	r2, r3, #1
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	331a      	adds	r3, #26
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	4413      	add	r3, r2
 8007f24:	ed93 7a00 	vldr	s14, [r3]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007f2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
							pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	3328      	adds	r3, #40	; 0x28
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	4413      	add	r3, r2
 8007f46:	3304      	adds	r3, #4
 8007f48:	ed93 7a00 	vldr	s14, [r3]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007f52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
							pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	3338      	adds	r3, #56	; 0x38
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	4413      	add	r3, r2
 8007f6a:	ed93 7a00 	vldr	s14, [r3]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	edd3 7a04 	vldr	s15, [r3, #16]
 8007f74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
							if(pp->target_x[pp->point_count]-pp->real_x){
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	331a      	adds	r3, #26
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	4413      	add	r3, r2
 8007f8c:	ed93 7a00 	vldr	s14, [r3]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fa2:	d03d      	beq.n	8008020 <PathPlan+0x21e0>
										1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	331a      	adds	r3, #26
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4413      	add	r3, r2
 8007fb2:	ed93 7a00 	vldr	s14, [r3]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007fbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fc0:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8007fc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_x[pp->point_count],
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	3384      	adds	r3, #132	; 0x84
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	4413      	add	r3, r2
 8007fda:	3304      	adds	r3, #4
 8007fdc:	edd3 7a00 	vldr	s15, [r3]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	edd3 6aa4 	vldr	s13, [r3, #656]	; 0x290
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	ed93 6aa6 	vldr	s12, [r3, #664]	; 0x298
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	edd3 5aa8 	vldr	s11, [r3, #672]	; 0x2a0
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007ffe:	eeb0 3a65 	vmov.f32	s6, s11
 8008002:	eef0 2a46 	vmov.f32	s5, s12
 8008006:	eeb0 2a66 	vmov.f32	s4, s13
 800800a:	eef0 1a67 	vmov.f32	s3, s15
 800800e:	eeb0 1a47 	vmov.f32	s2, s14
 8008012:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8008016:	ed1f 0a56 	vldr	s0, [pc, #-344]	; 8007ec0 <PathPlan+0x2080>
 800801a:	f7fd f851 	bl	80050c0 <PIDGainInit>
 800801e:	e028      	b.n	8008072 <PathPlan+0x2232>
										pp->ku_x[pp->point_count],
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	3384      	adds	r3, #132	; 0x84
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	3304      	adds	r3, #4
 8008030:	edd3 7a00 	vldr	s15, [r3]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	ed93 7aa4 	vldr	s14, [r3, #656]	; 0x290
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	edd3 6aa6 	vldr	s13, [r3, #664]	; 0x298
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	ed93 6aa8 	vldr	s12, [r3, #672]	; 0x2a0
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800804c:	4618      	mov	r0, r3
 800804e:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8008052:	eeb0 3a46 	vmov.f32	s6, s12
 8008056:	eef0 2a66 	vmov.f32	s5, s13
 800805a:	eeb0 2a47 	vmov.f32	s4, s14
 800805e:	eef0 1a67 	vmov.f32	s3, s15
 8008062:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8008066:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800806a:	ed1f 0a6b 	vldr	s0, [pc, #-428]	; 8007ec0 <PathPlan+0x2080>
 800806e:	f7fd f827 	bl	80050c0 <PIDGainInit>
							if(pp->target_y[pp->point_count]-pp->real_y){
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	3328      	adds	r3, #40	; 0x28
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4413      	add	r3, r2
 8008080:	3304      	adds	r3, #4
 8008082:	ed93 7a00 	vldr	s14, [r3]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800808c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008090:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008098:	d03d      	beq.n	8008116 <PathPlan+0x22d6>
										1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	3328      	adds	r3, #40	; 0x28
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	4413      	add	r3, r2
 80080a8:	3304      	adds	r3, #4
 80080aa:	ed93 7a00 	vldr	s14, [r3]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80080b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080b8:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 80080bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_y[pp->point_count],
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	3394      	adds	r3, #148	; 0x94
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4413      	add	r3, r2
 80080d2:	edd3 7a00 	vldr	s15, [r3]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	edd3 6aa4 	vldr	s13, [r3, #656]	; 0x290
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	ed93 6aa6 	vldr	s12, [r3, #664]	; 0x298
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	edd3 5aa8 	vldr	s11, [r3, #672]	; 0x2a0
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80080ee:	4618      	mov	r0, r3
 80080f0:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80080f4:	eeb0 3a65 	vmov.f32	s6, s11
 80080f8:	eef0 2a46 	vmov.f32	s5, s12
 80080fc:	eeb0 2a66 	vmov.f32	s4, s13
 8008100:	eef0 1a67 	vmov.f32	s3, s15
 8008104:	eeb0 1a47 	vmov.f32	s2, s14
 8008108:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800810c:	ed1f 0a94 	vldr	s0, [pc, #-592]	; 8007ec0 <PathPlan+0x2080>
 8008110:	f7fc ffd6 	bl	80050c0 <PIDGainInit>
 8008114:	e027      	b.n	8008166 <PathPlan+0x2326>
										pp->ku_y[pp->point_count],
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	3394      	adds	r3, #148	; 0x94
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	edd3 7a00 	vldr	s15, [r3]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	ed93 7aa4 	vldr	s14, [r3, #656]	; 0x290
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	edd3 6aa6 	vldr	s13, [r3, #664]	; 0x298
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	ed93 6aa8 	vldr	s12, [r3, #672]	; 0x2a0
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8008140:	4618      	mov	r0, r3
 8008142:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8008146:	eeb0 3a46 	vmov.f32	s6, s12
 800814a:	eef0 2a66 	vmov.f32	s5, s13
 800814e:	eeb0 2a47 	vmov.f32	s4, s14
 8008152:	eef0 1a67 	vmov.f32	s3, s15
 8008156:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800815a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800815e:	ed1f 0aa8 	vldr	s0, [pc, #-672]	; 8007ec0 <PathPlan+0x2080>
 8008162:	f7fc ffad 	bl	80050c0 <PIDGainInit>
							pp->pp_lck_enb = 0;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 800816e:	e131      	b.n	80083d4 <PathPlan+0x2594>
						pp->point_count++;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008176:	1c5a      	adds	r2, r3, #1
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
						pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	331a      	adds	r3, #26
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	4413      	add	r3, r2
 800818c:	ed93 7a00 	vldr	s14, [r3]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	3328      	adds	r3, #40	; 0x28
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4413      	add	r3, r2
 80081ae:	3304      	adds	r3, #4
 80081b0:	ed93 7a00 	vldr	s14, [r3]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80081ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	3338      	adds	r3, #56	; 0x38
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	4413      	add	r3, r2
 80081d2:	ed93 7a00 	vldr	s14, [r3]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80081dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
						if(pp->target_x[pp->point_count]-pp->real_x){
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	331a      	adds	r3, #26
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	4413      	add	r3, r2
 80081f4:	ed93 7a00 	vldr	s14, [r3]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80081fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008202:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800820a:	d01d      	beq.n	8008248 <PathPlan+0x2408>
							PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	331a      	adds	r3, #26
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4413      	add	r3, r2
 800821a:	ed93 7a00 	vldr	s14, [r3]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008224:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008228:	eef0 7ae7 	vabs.f32	s15, s15
 800822c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008230:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800823a:	4619      	mov	r1, r3
 800823c:	eeb0 0a47 	vmov.f32	s0, s14
 8008240:	2002      	movs	r0, #2
 8008242:	f7fc ff70 	bl	8005126 <PIDGainSet>
 8008246:	e008      	b.n	800825a <PathPlan+0x241a>
							PIDGainSet(KE,1.0,&(pp->x));
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800824e:	4619      	mov	r1, r3
 8008250:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008254:	2002      	movs	r0, #2
 8008256:	f7fc ff66 	bl	8005126 <PIDGainSet>
						if(pp->target_y[pp->point_count]-pp->real_y){
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	3328      	adds	r3, #40	; 0x28
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4413      	add	r3, r2
 8008268:	3304      	adds	r3, #4
 800826a:	ed93 7a00 	vldr	s14, [r3]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008278:	eef5 7a40 	vcmp.f32	s15, #0.0
 800827c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008280:	d01e      	beq.n	80082c0 <PathPlan+0x2480>
							PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	3328      	adds	r3, #40	; 0x28
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4413      	add	r3, r2
 8008290:	3304      	adds	r3, #4
 8008292:	ed93 7a00 	vldr	s14, [r3]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800829c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082a0:	eef0 7ae7 	vabs.f32	s15, s15
 80082a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80082b2:	4619      	mov	r1, r3
 80082b4:	eeb0 0a47 	vmov.f32	s0, s14
 80082b8:	2002      	movs	r0, #2
 80082ba:	f7fc ff34 	bl	8005126 <PIDGainSet>
 80082be:	e089      	b.n	80083d4 <PathPlan+0x2594>
							PIDGainSet(KE,1.0,&(pp->y));
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80082c6:	4619      	mov	r1, r3
 80082c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80082cc:	2002      	movs	r0, #2
 80082ce:	f7fc ff2a 	bl	8005126 <PIDGainSet>
 80082d2:	e07f      	b.n	80083d4 <PathPlan+0x2594>
				}else if(fabs(pp->error_x)<pp->f_tol_xy && fabs(pp->error_y)<pp->f_tol_xy && (int)pp->error_z<=pp->f_tol_z){ // Reached last point
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 80082da:	eeb0 7ae7 	vabs.f32	s14, s15
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 80082e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80082e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ec:	d572      	bpl.n	80083d4 <PathPlan+0x2594>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 80082f4:	eeb0 7ae7 	vabs.f32	s14, s15
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 80082fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008306:	d565      	bpl.n	80083d4 <PathPlan+0x2594>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 800830e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008312:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	edd3 7ac1 	vldr	s15, [r3, #772]	; 0x304
 800831c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008324:	d856      	bhi.n	80083d4 <PathPlan+0x2594>
					if(pp->target_accurate[pp->point_count] == 1.0){
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	3346      	adds	r3, #70	; 0x46
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	3304      	adds	r3, #4
 8008336:	edd3 7a00 	vldr	s15, [r3]
 800833a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800833e:	eef4 7a47 	vcmp.f32	s15, s14
 8008342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008346:	d127      	bne.n	8008398 <PathPlan+0x2558>
						if(pp->pp_lck_enb == 1){
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 800834e:	2b01      	cmp	r3, #1
 8008350:	d140      	bne.n	80083d4 <PathPlan+0x2594>
							led3 = 0;
 8008352:	4a7d      	ldr	r2, [pc, #500]	; (8008548 <PathPlan+0x2708>)
 8008354:	7853      	ldrb	r3, [r2, #1]
 8008356:	f36f 13c7 	bfc	r3, #7, #1
 800835a:	7053      	strb	r3, [r2, #1]
							PIDDelayInit(&(pp->x));
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8008362:	4618      	mov	r0, r3
 8008364:	f7fd f831 	bl	80053ca <PIDDelayInit>
							PIDDelayInit(&(pp->y));
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800836e:	4618      	mov	r0, r3
 8008370:	f7fd f82b 	bl	80053ca <PIDDelayInit>
							PIDDelayInit(&(pp->z));
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800837a:	4618      	mov	r0, r3
 800837c:	f7fd f825 	bl	80053ca <PIDDelayInit>
							pp->pp_start=0;
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8008386:	f36f 0300 	bfc	r3, #0, #1
 800838a:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
							pp->pp_lck_enb = 0;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8008396:	e01d      	b.n	80083d4 <PathPlan+0x2594>
						led3 = 0;
 8008398:	4a6b      	ldr	r2, [pc, #428]	; (8008548 <PathPlan+0x2708>)
 800839a:	7853      	ldrb	r3, [r2, #1]
 800839c:	f36f 13c7 	bfc	r3, #7, #1
 80083a0:	7053      	strb	r3, [r2, #1]
						PIDDelayInit(&(pp->x));
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7fd f80e 	bl	80053ca <PIDDelayInit>
						PIDDelayInit(&(pp->y));
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7fd f808 	bl	80053ca <PIDDelayInit>
						PIDDelayInit(&(pp->z));
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7fd f802 	bl	80053ca <PIDDelayInit>
						pp->pp_start=0;
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 80083cc:	f36f 0300 	bfc	r3, #0, #1
 80083d0:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
			if(pp->pp_start){
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80083da:	f003 0301 	and.w	r3, r3, #1
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f000 838d 	beq.w	8008b00 <PathPlan+0x2cc0>
				pp->dx = pp->target_x[pp->point_count] - pp->prev_real_x;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	331a      	adds	r3, #26
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	4413      	add	r3, r2
 80083f4:	ed93 7a00 	vldr	s14, [r3]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80083fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
				pp->dy = pp->target_y[pp->point_count] - pp->prev_real_y;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	3328      	adds	r3, #40	; 0x28
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	3304      	adds	r3, #4
 8008418:	ed93 7a00 	vldr	s14, [r3]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8008422:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
				pp->rotate=0;
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8008432:	f36f 03c3 	bfc	r3, #3, #1
 8008436:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
				if ((pp->dx != 0.0 || pp->dx != -0.0)&&(pp->dy != -0.0 || pp->dy != 0.0)){
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008440:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008448:	d107      	bne.n	800845a <PathPlan+0x261a>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008450:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008458:	d021      	beq.n	800849e <PathPlan+0x265e>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008460:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008468:	d107      	bne.n	800847a <PathPlan+0x263a>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008470:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008478:	d011      	beq.n	800849e <PathPlan+0x265e>
					pp->heading = atan2f(pp->dy, pp->dx);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8008486:	eef0 0a47 	vmov.f32	s1, s14
 800848a:	eeb0 0a67 	vmov.f32	s0, s15
 800848e:	f016 ff7d 	bl	801f38c <atan2f>
 8008492:	eef0 7a40 	vmov.f32	s15, s0
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 800849c:	e075      	b.n	800858a <PathPlan+0x274a>
					if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy < 0.0) { // Backward
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80084a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80084a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ac:	d007      	beq.n	80084be <PathPlan+0x267e>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80084b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80084b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084bc:	d10b      	bne.n	80084d6 <PathPlan+0x2696>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80084c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80084c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084cc:	d503      	bpl.n	80084d6 <PathPlan+0x2696>
						pp->heading = -1.5708;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a1e      	ldr	r2, [pc, #120]	; (800854c <PathPlan+0x270c>)
 80084d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80084d4:	e059      	b.n	800858a <PathPlan+0x274a>
					} else if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy > 0.0) { // Forward
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80084dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80084e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084e4:	d007      	beq.n	80084f6 <PathPlan+0x26b6>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80084ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80084f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084f4:	d10b      	bne.n	800850e <PathPlan+0x26ce>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80084fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008504:	dd03      	ble.n	800850e <PathPlan+0x26ce>
						pp->heading = 1.5708;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a11      	ldr	r2, [pc, #68]	; (8008550 <PathPlan+0x2710>)
 800850a:	65da      	str	r2, [r3, #92]	; 0x5c
 800850c:	e03d      	b.n	800858a <PathPlan+0x274a>
					} else if((pp->dy == 0.0 || pp->dy == -0.0) && pp->dx > 0){ // Right
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008514:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800851c:	d007      	beq.n	800852e <PathPlan+0x26ee>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008524:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800852c:	d112      	bne.n	8008554 <PathPlan+0x2714>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008534:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800853c:	dd0a      	ble.n	8008554 <PathPlan+0x2714>
						pp->heading = 0.0;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f04f 0200 	mov.w	r2, #0
 8008544:	65da      	str	r2, [r3, #92]	; 0x5c
 8008546:	e020      	b.n	800858a <PathPlan+0x274a>
 8008548:	40020814 	.word	0x40020814
 800854c:	bfc90ff9 	.word	0xbfc90ff9
 8008550:	3fc90ff9 	.word	0x3fc90ff9
					else if((pp->dy == 0.0 || pp->dy == -0.0) && pp->dx < 0) // Left
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800855a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800855e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008562:	d007      	beq.n	8008574 <PathPlan+0x2734>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800856a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800856e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008572:	d10a      	bne.n	800858a <PathPlan+0x274a>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800857a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800857e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008582:	d502      	bpl.n	800858a <PathPlan+0x274a>
						pp->heading = M_PI;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4ad6      	ldr	r2, [pc, #856]	; (80088e0 <PathPlan+0x2aa0>)
 8008588:	65da      	str	r2, [r3, #92]	; 0x5c
				pp->vx  = pp->target_vel[pp->point_count] * cosf(pp->heading);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	3374      	adds	r3, #116	; 0x74
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4413      	add	r3, r2
 8008598:	ed93 8a00 	vldr	s16, [r3]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80085a2:	eeb0 0a67 	vmov.f32	s0, s15
 80085a6:	f016 fe67 	bl	801f278 <cosf>
 80085aa:	eef0 7a40 	vmov.f32	s15, s0
 80085ae:	ee68 7a27 	vmul.f32	s15, s16, s15
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				pp->vy  = pp->target_vel[pp->point_count] * sinf(pp->heading);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	3374      	adds	r3, #116	; 0x74
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4413      	add	r3, r2
 80085c6:	ed93 8a00 	vldr	s16, [r3]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80085d0:	eeb0 0a67 	vmov.f32	s0, s15
 80085d4:	f016 fe98 	bl	801f308 <sinf>
 80085d8:	eef0 7a40 	vmov.f32	s15, s0
 80085dc:	ee68 7a27 	vmul.f32	s15, s16, s15
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
				if(pp->rotate){
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80085ec:	f003 0308 	and.w	r3, r3, #8
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d007      	beq.n	8008606 <PathPlan+0x27c6>
					pp->vx = pp->vy = 0.0;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f04f 0200 	mov.w	r2, #0
 80085fc:	665a      	str	r2, [r3, #100]	; 0x64
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	661a      	str	r2, [r3, #96]	; 0x60
				PID(&(pp->x));
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800860c:	4618      	mov	r0, r3
 800860e:	f7fc fefa 	bl	8005406 <PID>
				PID(&(pp->y));
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8008618:	4618      	mov	r0, r3
 800861a:	f7fc fef4 	bl	8005406 <PID>
				PID(&(pp->z));
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8008624:	4618      	mov	r0, r3
 8008626:	f7fc feee 	bl	8005406 <PID>
				pp->rux =   pp->outx*cosf(pp->real_z_rad) - pp->outy*sinf(pp->real_z_rad);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	edd3 7a06 	vldr	s15, [r3, #24]
 8008636:	eeb0 0a67 	vmov.f32	s0, s15
 800863a:	f016 fe1d 	bl	801f278 <cosf>
 800863e:	eef0 7a40 	vmov.f32	s15, s0
 8008642:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	edd3 7a06 	vldr	s15, [r3, #24]
 8008652:	eeb0 0a67 	vmov.f32	s0, s15
 8008656:	f016 fe57 	bl	801f308 <sinf>
 800865a:	eef0 7a40 	vmov.f32	s15, s0
 800865e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8008662:	ee78 7a67 	vsub.f32	s15, s16, s15
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
				pp->ruy =   pp->outx*sinf(pp->real_z_rad) + pp->outy*cosf(pp->real_z_rad);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	edd3 7a06 	vldr	s15, [r3, #24]
 8008678:	eeb0 0a67 	vmov.f32	s0, s15
 800867c:	f016 fe44 	bl	801f308 <sinf>
 8008680:	eef0 7a40 	vmov.f32	s15, s0
 8008684:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	edd3 7a06 	vldr	s15, [r3, #24]
 8008694:	eeb0 0a67 	vmov.f32	s0, s15
 8008698:	f016 fdee 	bl	801f278 <cosf>
 800869c:	eef0 7a40 	vmov.f32	s15, s0
 80086a0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80086a4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	edc3 7ab3 	vstr	s15, [r3, #716]	; 0x2cc
				pp->rvx =   pp->vx*cosf(pp->real_z_rad) - pp->vy*sinf(pp->real_z_rad);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	edd3 7a06 	vldr	s15, [r3, #24]
 80086ba:	eeb0 0a67 	vmov.f32	s0, s15
 80086be:	f016 fddb 	bl	801f278 <cosf>
 80086c2:	eef0 7a40 	vmov.f32	s15, s0
 80086c6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	edd3 7a06 	vldr	s15, [r3, #24]
 80086d6:	eeb0 0a67 	vmov.f32	s0, s15
 80086da:	f016 fe15 	bl	801f308 <sinf>
 80086de:	eef0 7a40 	vmov.f32	s15, s0
 80086e2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80086e6:	ee78 7a67 	vsub.f32	s15, s16, s15
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	edc3 7ab4 	vstr	s15, [r3, #720]	; 0x2d0
				pp->rvy =   pp->vx*sinf(pp->real_z_rad) + pp->vy*cosf(pp->real_z_rad);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	edd3 7a06 	vldr	s15, [r3, #24]
 80086fc:	eeb0 0a67 	vmov.f32	s0, s15
 8008700:	f016 fe02 	bl	801f308 <sinf>
 8008704:	eef0 7a40 	vmov.f32	s15, s0
 8008708:	ee28 8a27 	vmul.f32	s16, s16, s15
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	edd3 7a06 	vldr	s15, [r3, #24]
 8008718:	eeb0 0a67 	vmov.f32	s0, s15
 800871c:	f016 fdac 	bl	801f278 <cosf>
 8008720:	eef0 7a40 	vmov.f32	s15, s0
 8008724:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8008728:	ee78 7a27 	vadd.f32	s15, s16, s15
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	edc3 7ab5 	vstr	s15, [r3, #724]	; 0x2d4
				if(pp->base_shape== fwd_omni){
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 8008738:	2b02      	cmp	r3, #2
 800873a:	f040 80dd 	bne.w	80088f8 <PathPlan+0x2ab8>
					pp->u1 = (pp->outz * 1.0);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = -pp->outz * 1.0;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8008750:	eef1 7a67 	vneg.f32	s15, s15
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	edc3 7ab7 	vstr	s15, [r3, #732]	; 0x2dc
					pp->u3 = (pp->outz * 1.0);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
					pp->u4 = -(pp->outz * 1.0);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800876c:	4618      	mov	r0, r3
 800876e:	f7f7 feeb 	bl	8000548 <__aeabi_f2d>
 8008772:	4602      	mov	r2, r0
 8008774:	460b      	mov	r3, r1
 8008776:	4610      	mov	r0, r2
 8008778:	4619      	mov	r1, r3
 800877a:	f7f8 fa35 	bl	8000be8 <__aeabi_d2f>
 800877e:	4603      	mov	r3, r0
 8008780:	ee07 3a90 	vmov	s15, r3
 8008784:	eef1 7a67 	vneg.f32	s15, s15
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	edc3 7ab9 	vstr	s15, [r3, #740]	; 0x2e4
					pp->v1 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u1;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800879a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800879e:	ee17 0a90 	vmov	r0, s15
 80087a2:	f7f7 fed1 	bl	8000548 <__aeabi_f2d>
 80087a6:	a34c      	add	r3, pc, #304	; (adr r3, 80088d8 <PathPlan+0x2a98>)
 80087a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ac:	f7f7 ff24 	bl	80005f8 <__aeabi_dmul>
 80087b0:	4602      	mov	r2, r0
 80087b2:	460b      	mov	r3, r1
 80087b4:	4614      	mov	r4, r2
 80087b6:	461d      	mov	r5, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80087be:	4618      	mov	r0, r3
 80087c0:	f7f7 fec2 	bl	8000548 <__aeabi_f2d>
 80087c4:	4602      	mov	r2, r0
 80087c6:	460b      	mov	r3, r1
 80087c8:	4620      	mov	r0, r4
 80087ca:	4629      	mov	r1, r5
 80087cc:	f7f7 fd5e 	bl	800028c <__adddf3>
 80087d0:	4602      	mov	r2, r0
 80087d2:	460b      	mov	r3, r1
 80087d4:	4610      	mov	r0, r2
 80087d6:	4619      	mov	r1, r3
 80087d8:	f7f8 fa06 	bl	8000be8 <__aeabi_d2f>
 80087dc:	4602      	mov	r2, r0
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u2;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80087f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087f4:	ee17 0a90 	vmov	r0, s15
 80087f8:	f7f7 fea6 	bl	8000548 <__aeabi_f2d>
 80087fc:	a336      	add	r3, pc, #216	; (adr r3, 80088d8 <PathPlan+0x2a98>)
 80087fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008802:	f7f7 fef9 	bl	80005f8 <__aeabi_dmul>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	4614      	mov	r4, r2
 800880c:	461d      	mov	r5, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8008814:	4618      	mov	r0, r3
 8008816:	f7f7 fe97 	bl	8000548 <__aeabi_f2d>
 800881a:	4602      	mov	r2, r0
 800881c:	460b      	mov	r3, r1
 800881e:	4620      	mov	r0, r4
 8008820:	4629      	mov	r1, r5
 8008822:	f7f7 fd33 	bl	800028c <__adddf3>
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	4610      	mov	r0, r2
 800882c:	4619      	mov	r1, r3
 800882e:	f7f8 f9db 	bl	8000be8 <__aeabi_d2f>
 8008832:	4602      	mov	r2, r0
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u3;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8008846:	ee77 7a67 	vsub.f32	s15, s14, s15
 800884a:	ee17 0a90 	vmov	r0, s15
 800884e:	f7f7 fe7b 	bl	8000548 <__aeabi_f2d>
 8008852:	a321      	add	r3, pc, #132	; (adr r3, 80088d8 <PathPlan+0x2a98>)
 8008854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008858:	f7f7 fece 	bl	80005f8 <__aeabi_dmul>
 800885c:	4602      	mov	r2, r0
 800885e:	460b      	mov	r3, r1
 8008860:	4614      	mov	r4, r2
 8008862:	461d      	mov	r5, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 800886a:	4618      	mov	r0, r3
 800886c:	f7f7 fe6c 	bl	8000548 <__aeabi_f2d>
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	4620      	mov	r0, r4
 8008876:	4629      	mov	r1, r5
 8008878:	f7f7 fd08 	bl	800028c <__adddf3>
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	4610      	mov	r0, r2
 8008882:	4619      	mov	r1, r3
 8008884:	f7f8 f9b0 	bl	8000be8 <__aeabi_d2f>
 8008888:	4602      	mov	r2, r0
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
					pp->v4 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u4;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800889c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088a0:	ee17 0a90 	vmov	r0, s15
 80088a4:	f7f7 fe50 	bl	8000548 <__aeabi_f2d>
 80088a8:	a30b      	add	r3, pc, #44	; (adr r3, 80088d8 <PathPlan+0x2a98>)
 80088aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ae:	f7f7 fea3 	bl	80005f8 <__aeabi_dmul>
 80088b2:	4602      	mov	r2, r0
 80088b4:	460b      	mov	r3, r1
 80088b6:	4614      	mov	r4, r2
 80088b8:	461d      	mov	r5, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7f7 fe41 	bl	8000548 <__aeabi_f2d>
 80088c6:	4602      	mov	r2, r0
 80088c8:	460b      	mov	r3, r1
 80088ca:	4620      	mov	r0, r4
 80088cc:	4629      	mov	r1, r5
 80088ce:	f7f7 fcdd 	bl	800028c <__adddf3>
 80088d2:	4602      	mov	r2, r0
 80088d4:	e006      	b.n	80088e4 <PathPlan+0x2aa4>
 80088d6:	bf00      	nop
 80088d8:	dbf8b9bb 	.word	0xdbf8b9bb
 80088dc:	3fe6a09e 	.word	0x3fe6a09e
 80088e0:	40490fdb 	.word	0x40490fdb
 80088e4:	460b      	mov	r3, r1
 80088e6:	4610      	mov	r0, r2
 80088e8:	4619      	mov	r1, r3
 80088ea:	f7f8 f97d 	bl	8000be8 <__aeabi_d2f>
 80088ee:	4602      	mov	r2, r0
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
 80088f6:	e103      	b.n	8008b00 <PathPlan+0x2cc0>
				} else if(pp->base_shape== 1){
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 80088fe:	2b01      	cmp	r3, #1
 8008900:	f040 80fe 	bne.w	8008b00 <PathPlan+0x2cc0>
					pp->u1 = (0.866 * pp->ruy) - (0.5 * pp->rux) + (pp->outz * 1.0);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800890a:	4618      	mov	r0, r3
 800890c:	f7f7 fe1c 	bl	8000548 <__aeabi_f2d>
 8008910:	a37f      	add	r3, pc, #508	; (adr r3, 8008b10 <PathPlan+0x2cd0>)
 8008912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008916:	f7f7 fe6f 	bl	80005f8 <__aeabi_dmul>
 800891a:	4602      	mov	r2, r0
 800891c:	460b      	mov	r3, r1
 800891e:	4614      	mov	r4, r2
 8008920:	461d      	mov	r5, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008928:	4618      	mov	r0, r3
 800892a:	f7f7 fe0d 	bl	8000548 <__aeabi_f2d>
 800892e:	f04f 0200 	mov.w	r2, #0
 8008932:	4b79      	ldr	r3, [pc, #484]	; (8008b18 <PathPlan+0x2cd8>)
 8008934:	f7f7 fe60 	bl	80005f8 <__aeabi_dmul>
 8008938:	4602      	mov	r2, r0
 800893a:	460b      	mov	r3, r1
 800893c:	4620      	mov	r0, r4
 800893e:	4629      	mov	r1, r5
 8008940:	f7f7 fca2 	bl	8000288 <__aeabi_dsub>
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	4614      	mov	r4, r2
 800894a:	461d      	mov	r5, r3
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008952:	4618      	mov	r0, r3
 8008954:	f7f7 fdf8 	bl	8000548 <__aeabi_f2d>
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	4620      	mov	r0, r4
 800895e:	4629      	mov	r1, r5
 8008960:	f7f7 fc94 	bl	800028c <__adddf3>
 8008964:	4602      	mov	r2, r0
 8008966:	460b      	mov	r3, r1
 8008968:	4610      	mov	r0, r2
 800896a:	4619      	mov	r1, r3
 800896c:	f7f8 f93c 	bl	8000be8 <__aeabi_d2f>
 8008970:	4602      	mov	r2, r0
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = (0.866 * pp->ruy) + (0.5 * pp->rux) - (pp->outz * 1.0);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800897e:	4618      	mov	r0, r3
 8008980:	f7f7 fde2 	bl	8000548 <__aeabi_f2d>
 8008984:	a362      	add	r3, pc, #392	; (adr r3, 8008b10 <PathPlan+0x2cd0>)
 8008986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898a:	f7f7 fe35 	bl	80005f8 <__aeabi_dmul>
 800898e:	4602      	mov	r2, r0
 8008990:	460b      	mov	r3, r1
 8008992:	4614      	mov	r4, r2
 8008994:	461d      	mov	r5, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800899c:	4618      	mov	r0, r3
 800899e:	f7f7 fdd3 	bl	8000548 <__aeabi_f2d>
 80089a2:	f04f 0200 	mov.w	r2, #0
 80089a6:	4b5c      	ldr	r3, [pc, #368]	; (8008b18 <PathPlan+0x2cd8>)
 80089a8:	f7f7 fe26 	bl	80005f8 <__aeabi_dmul>
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	4620      	mov	r0, r4
 80089b2:	4629      	mov	r1, r5
 80089b4:	f7f7 fc6a 	bl	800028c <__adddf3>
 80089b8:	4602      	mov	r2, r0
 80089ba:	460b      	mov	r3, r1
 80089bc:	4614      	mov	r4, r2
 80089be:	461d      	mov	r5, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7f7 fdbe 	bl	8000548 <__aeabi_f2d>
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	4620      	mov	r0, r4
 80089d2:	4629      	mov	r1, r5
 80089d4:	f7f7 fc58 	bl	8000288 <__aeabi_dsub>
 80089d8:	4602      	mov	r2, r0
 80089da:	460b      	mov	r3, r1
 80089dc:	4610      	mov	r0, r2
 80089de:	4619      	mov	r1, r3
 80089e0:	f7f8 f902 	bl	8000be8 <__aeabi_d2f>
 80089e4:	4602      	mov	r2, r0
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 1.0 * pp->rux + (pp->outz * 1.0);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80089f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	edc3 7ab8 	vstr	s15, [r3, #736]	; 0x2e0
					pp->v1 = (0.866 * pp->rvy) - (0.5 * pp->rvx) + pp->u1;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7f7 fd9d 	bl	8000548 <__aeabi_f2d>
 8008a0e:	a340      	add	r3, pc, #256	; (adr r3, 8008b10 <PathPlan+0x2cd0>)
 8008a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a14:	f7f7 fdf0 	bl	80005f8 <__aeabi_dmul>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	4614      	mov	r4, r2
 8008a1e:	461d      	mov	r5, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7f7 fd8e 	bl	8000548 <__aeabi_f2d>
 8008a2c:	f04f 0200 	mov.w	r2, #0
 8008a30:	4b39      	ldr	r3, [pc, #228]	; (8008b18 <PathPlan+0x2cd8>)
 8008a32:	f7f7 fde1 	bl	80005f8 <__aeabi_dmul>
 8008a36:	4602      	mov	r2, r0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	f7f7 fc23 	bl	8000288 <__aeabi_dsub>
 8008a42:	4602      	mov	r2, r0
 8008a44:	460b      	mov	r3, r1
 8008a46:	4614      	mov	r4, r2
 8008a48:	461d      	mov	r5, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7f7 fd79 	bl	8000548 <__aeabi_f2d>
 8008a56:	4602      	mov	r2, r0
 8008a58:	460b      	mov	r3, r1
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	f7f7 fc15 	bl	800028c <__adddf3>
 8008a62:	4602      	mov	r2, r0
 8008a64:	460b      	mov	r3, r1
 8008a66:	4610      	mov	r0, r2
 8008a68:	4619      	mov	r1, r3
 8008a6a:	f7f8 f8bd 	bl	8000be8 <__aeabi_d2f>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = (0.866 * pp->rvy) + (0.5 * pp->rvx) + pp->u2;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7f7 fd63 	bl	8000548 <__aeabi_f2d>
 8008a82:	a323      	add	r3, pc, #140	; (adr r3, 8008b10 <PathPlan+0x2cd0>)
 8008a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a88:	f7f7 fdb6 	bl	80005f8 <__aeabi_dmul>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	460b      	mov	r3, r1
 8008a90:	4614      	mov	r4, r2
 8008a92:	461d      	mov	r5, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7f7 fd54 	bl	8000548 <__aeabi_f2d>
 8008aa0:	f04f 0200 	mov.w	r2, #0
 8008aa4:	4b1c      	ldr	r3, [pc, #112]	; (8008b18 <PathPlan+0x2cd8>)
 8008aa6:	f7f7 fda7 	bl	80005f8 <__aeabi_dmul>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	4620      	mov	r0, r4
 8008ab0:	4629      	mov	r1, r5
 8008ab2:	f7f7 fbeb 	bl	800028c <__adddf3>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	460b      	mov	r3, r1
 8008aba:	4614      	mov	r4, r2
 8008abc:	461d      	mov	r5, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7f7 fd3f 	bl	8000548 <__aeabi_f2d>
 8008aca:	4602      	mov	r2, r0
 8008acc:	460b      	mov	r3, r1
 8008ace:	4620      	mov	r0, r4
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	f7f7 fbdb 	bl	800028c <__adddf3>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4610      	mov	r0, r2
 8008adc:	4619      	mov	r1, r3
 8008ade:	f7f8 f883 	bl	8000be8 <__aeabi_d2f>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 1.0 * pp->rvx + pp->u3;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	ed93 7ab4 	vldr	s14, [r3, #720]	; 0x2d0
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8008af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	edc3 7abc 	vstr	s15, [r3, #752]	; 0x2f0
}
 8008b00:	bf00      	nop
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	ecbd 8b02 	vpop	{d8}
 8008b0a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008b0e:	bf00      	nop
 8008b10:	a1cac083 	.word	0xa1cac083
 8008b14:	3febb645 	.word	0x3febb645
 8008b18:	3fe00000 	.word	0x3fe00000

08008b1c <PSxConnectDMA>:
 * Function Remarks		: Called in respective I2c interrupt
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSxConnectDMA(&ps4);
 */
void PSxConnectDMA(PSxBT_t* psxbt){
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	1c5a      	adds	r2, r3, #1
 8008b2c:	230b      	movs	r3, #11
 8008b2e:	2188      	movs	r1, #136	; 0x88
 8008b30:	f00a fb2e 	bl	8013190 <HAL_I2C_Master_Receive_DMA>
	PSx_HandlerI2C(psxbt);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 f81e 	bl	8008b76 <PSx_HandlerI2C>
}
 8008b3a:	bf00      	nop
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <PSxInitDMA>:
 * Function Arguments	: *psxbt	, Pointer to structure PSxBT_t
 * 						   hi2cx    , Pointer to I2C handle
 * Function Return		: None
 * Function Example		: PSxInitDMA(&ps4,&hi2c1);
 */
void PSxInitDMA(PSxBT_t *psxbt,I2C_HandleTypeDef* hi2cx){
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b082      	sub	sp, #8
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	6039      	str	r1, [r7, #0]
	psxbt->hi2cps4 = hi2cx;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	683a      	ldr	r2, [r7, #0]
 8008b50:	665a      	str	r2, [r3, #100]	; 0x64
//	HAL_I2C_Slave_Receive_DMA(hi2cx, psxbt->ReceiveBuffer, 11);//GG
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	1c5a      	adds	r2, r3, #1
 8008b5a:	230b      	movs	r3, #11
 8008b5c:	2188      	movs	r1, #136	; 0x88
 8008b5e:	f00a fb17 	bl	8013190 <HAL_I2C_Master_Receive_DMA>
	psxbt->initialized = 1;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2201      	movs	r2, #1
 8008b66:	701a      	strb	r2, [r3, #0]
	psxbt->disconnected = 0;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008b6e:	bf00      	nop
 8008b70:	3708      	adds	r7, #8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <PSx_HandlerI2C>:
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSx_HandlerI2C(&ps4x);
 */

void PSx_HandlerI2C(PSxBT_t *psxbt){
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b082      	sub	sp, #8
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
	psxbt->buf1 = psxbt->ReceiveBuffer[1];
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	789a      	ldrb	r2, [r3, #2]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	psxbt->buf2 = psxbt->ReceiveBuffer[2];
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	78da      	ldrb	r2, [r3, #3]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	psxbt->leftjoy_x = psxbt->ReceiveBuffer[3];
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	791b      	ldrb	r3, [r3, #4]
 8008b96:	461a      	mov	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	635a      	str	r2, [r3, #52]	; 0x34
	psxbt->leftjoy_y = psxbt->ReceiveBuffer[4];
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	795b      	ldrb	r3, [r3, #5]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	639a      	str	r2, [r3, #56]	; 0x38
	psxbt->rightjoy_x = psxbt->ReceiveBuffer[5];
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	799b      	ldrb	r3, [r3, #6]
 8008baa:	461a      	mov	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	63da      	str	r2, [r3, #60]	; 0x3c
	psxbt->rightjoy_y = psxbt->ReceiveBuffer[6];
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	79db      	ldrb	r3, [r3, #7]
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	641a      	str	r2, [r3, #64]	; 0x40
	psxbt->an_L2 = psxbt->ReceiveBuffer[7];
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	7a1b      	ldrb	r3, [r3, #8]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	645a      	str	r2, [r3, #68]	; 0x44
	psxbt->an_R2 = psxbt->ReceiveBuffer[8];
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	7a5b      	ldrb	r3, [r3, #9]
 8008bc8:	461a      	mov	r2, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	649a      	str	r2, [r3, #72]	; 0x48
	psxbt->buf3 = psxbt->ReceiveBuffer[9];
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	7a9a      	ldrb	r2, [r3, #10]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	psxbt->state = psxbt->ReceiveBuffer[10];
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	7ada      	ldrb	r2, [r3, #11]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	PSxBTGetXY(psxbt);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f804 	bl	8008bf0 <PSxBTGetXY>
}
 8008be8:	bf00      	nop
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <PSxBTGetXY>:
 * Function Return		: None
 * Function Example		: PSxBTGetXY(&ps3x);
 */

void PSxBTGetXY(PSxBT_t *psxbt)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
	if(joyR_up){
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfc:	ee07 3a90 	vmov	s15, r3
 8008c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c04:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 8008f08 <PSxBTGetXY+0x318>
 8008c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c10:	d53e      	bpl.n	8008c90 <PSxBTGetXY+0xa0>
		psxbt->joyR_y  = ((psx_low_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c16:	ee07 3a90 	vmov	s15, r3
 8008c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c1e:	ee17 0a90 	vmov	r0, s15
 8008c22:	f7f7 fc91 	bl	8000548 <__aeabi_f2d>
 8008c26:	4602      	mov	r2, r0
 8008c28:	460b      	mov	r3, r1
 8008c2a:	a1b5      	add	r1, pc, #724	; (adr r1, 8008f00 <PSxBTGetXY+0x310>)
 8008c2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c30:	f7f7 fb2a 	bl	8000288 <__aeabi_dsub>
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	4610      	mov	r0, r2
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	f04f 0200 	mov.w	r2, #0
 8008c40:	4bb2      	ldr	r3, [pc, #712]	; (8008f0c <PSxBTGetXY+0x31c>)
 8008c42:	f7f7 fe03 	bl	800084c <__aeabi_ddiv>
 8008c46:	4602      	mov	r2, r0
 8008c48:	460b      	mov	r3, r1
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	f7f7 ffcb 	bl	8000be8 <__aeabi_d2f>
 8008c52:	4602      	mov	r2, r0
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y < 0.0){
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008c5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c66:	d504      	bpl.n	8008c72 <PSxBTGetXY+0x82>
			psxbt->joyR_y = 0.0;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f04f 0200 	mov.w	r2, #0
 8008c6e:	64da      	str	r2, [r3, #76]	; 0x4c
 8008c70:	e05d      	b.n	8008d2e <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y > 1.0){
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008c78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c84:	dd53      	ble.n	8008d2e <PSxBTGetXY+0x13e>
			psxbt->joyR_y = 1.0;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008c8c:	64da      	str	r2, [r3, #76]	; 0x4c
 8008c8e:	e04e      	b.n	8008d2e <PSxBTGetXY+0x13e>
		}
	}else if(joyR_down){
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c94:	ee07 3a90 	vmov	s15, r3
 8008c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c9c:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8008f18 <PSxBTGetXY+0x328>
 8008ca0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ca8:	dd3d      	ble.n	8008d26 <PSxBTGetXY+0x136>
		psxbt->joyR_y = ((psx_high_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cae:	ee07 3a90 	vmov	s15, r3
 8008cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cb6:	ee17 0a90 	vmov	r0, s15
 8008cba:	f7f7 fc45 	bl	8000548 <__aeabi_f2d>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	f04f 0000 	mov.w	r0, #0
 8008cc6:	4992      	ldr	r1, [pc, #584]	; (8008f10 <PSxBTGetXY+0x320>)
 8008cc8:	f7f7 fade 	bl	8000288 <__aeabi_dsub>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	460b      	mov	r3, r1
 8008cd0:	4610      	mov	r0, r2
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	f04f 0200 	mov.w	r2, #0
 8008cd8:	4b8c      	ldr	r3, [pc, #560]	; (8008f0c <PSxBTGetXY+0x31c>)
 8008cda:	f7f7 fdb7 	bl	800084c <__aeabi_ddiv>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	4610      	mov	r0, r2
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	f7f7 ff7f 	bl	8000be8 <__aeabi_d2f>
 8008cea:	4602      	mov	r2, r0
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y > 0.0){
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008cf6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cfe:	dd04      	ble.n	8008d0a <PSxBTGetXY+0x11a>
			psxbt->joyR_y = 0.0;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f04f 0200 	mov.w	r2, #0
 8008d06:	64da      	str	r2, [r3, #76]	; 0x4c
 8008d08:	e011      	b.n	8008d2e <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y < -1.0){
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008d10:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008d14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d1c:	d507      	bpl.n	8008d2e <PSxBTGetXY+0x13e>
			psxbt->joyR_y = -1.0;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a7c      	ldr	r2, [pc, #496]	; (8008f14 <PSxBTGetXY+0x324>)
 8008d22:	64da      	str	r2, [r3, #76]	; 0x4c
 8008d24:	e003      	b.n	8008d2e <PSxBTGetXY+0x13e>
		}
	}else{
		psxbt->joyR_y = 0.0;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f04f 0200 	mov.w	r2, #0
 8008d2c:	64da      	str	r2, [r3, #76]	; 0x4c
	}

	if(joyR_left){
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d32:	ee07 3a90 	vmov	s15, r3
 8008d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d3a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8008f08 <PSxBTGetXY+0x318>
 8008d3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d46:	d53e      	bpl.n	8008dc6 <PSxBTGetXY+0x1d6>
		psxbt->joyR_x = ((psx_low_Rx - ((float)psxbt->rightjoy_x))/100.0)/1.00;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d4c:	ee07 3a90 	vmov	s15, r3
 8008d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d54:	ee17 0a90 	vmov	r0, s15
 8008d58:	f7f7 fbf6 	bl	8000548 <__aeabi_f2d>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	a167      	add	r1, pc, #412	; (adr r1, 8008f00 <PSxBTGetXY+0x310>)
 8008d62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d66:	f7f7 fa8f 	bl	8000288 <__aeabi_dsub>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	4610      	mov	r0, r2
 8008d70:	4619      	mov	r1, r3
 8008d72:	f04f 0200 	mov.w	r2, #0
 8008d76:	4b65      	ldr	r3, [pc, #404]	; (8008f0c <PSxBTGetXY+0x31c>)
 8008d78:	f7f7 fd68 	bl	800084c <__aeabi_ddiv>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	4610      	mov	r0, r2
 8008d82:	4619      	mov	r1, r3
 8008d84:	f7f7 ff30 	bl	8000be8 <__aeabi_d2f>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	651a      	str	r2, [r3, #80]	; 0x50
		if(psxbt->joyR_x < 0.0){
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008d94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d9c:	d504      	bpl.n	8008da8 <PSxBTGetXY+0x1b8>
			psxbt->joyR_x = 0.0;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f04f 0200 	mov.w	r2, #0
 8008da4:	651a      	str	r2, [r3, #80]	; 0x50
 8008da6:	e05d      	b.n	8008e64 <PSxBTGetXY+0x274>
		}else if(psxbt->joyR_x > 1.0){
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008dae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008db2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dba:	dd53      	ble.n	8008e64 <PSxBTGetXY+0x274>
			psxbt->joyR_x = 1.0;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008dc2:	651a      	str	r2, [r3, #80]	; 0x50
 8008dc4:	e04e      	b.n	8008e64 <PSxBTGetXY+0x274>
		}
	}else if(joyR_right){
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dca:	ee07 3a90 	vmov	s15, r3
 8008dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd2:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8008f18 <PSxBTGetXY+0x328>
 8008dd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dde:	dd3d      	ble.n	8008e5c <PSxBTGetXY+0x26c>
		psxbt->joyR_x = ((psx_high_Rx - ((float)psxbt->rightjoy_x))/100.0)/1.00;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de4:	ee07 3a90 	vmov	s15, r3
 8008de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dec:	ee17 0a90 	vmov	r0, s15
 8008df0:	f7f7 fbaa 	bl	8000548 <__aeabi_f2d>
 8008df4:	4602      	mov	r2, r0
 8008df6:	460b      	mov	r3, r1
 8008df8:	f04f 0000 	mov.w	r0, #0
 8008dfc:	4944      	ldr	r1, [pc, #272]	; (8008f10 <PSxBTGetXY+0x320>)
 8008dfe:	f7f7 fa43 	bl	8000288 <__aeabi_dsub>
 8008e02:	4602      	mov	r2, r0
 8008e04:	460b      	mov	r3, r1
 8008e06:	4610      	mov	r0, r2
 8008e08:	4619      	mov	r1, r3
 8008e0a:	f04f 0200 	mov.w	r2, #0
 8008e0e:	4b3f      	ldr	r3, [pc, #252]	; (8008f0c <PSxBTGetXY+0x31c>)
 8008e10:	f7f7 fd1c 	bl	800084c <__aeabi_ddiv>
 8008e14:	4602      	mov	r2, r0
 8008e16:	460b      	mov	r3, r1
 8008e18:	4610      	mov	r0, r2
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	f7f7 fee4 	bl	8000be8 <__aeabi_d2f>
 8008e20:	4602      	mov	r2, r0
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	651a      	str	r2, [r3, #80]	; 0x50
		if(psxbt->joyR_x > 0.0){
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008e2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e34:	dd04      	ble.n	8008e40 <PSxBTGetXY+0x250>
			psxbt->joyR_x = 0.0;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f04f 0200 	mov.w	r2, #0
 8008e3c:	651a      	str	r2, [r3, #80]	; 0x50
 8008e3e:	e011      	b.n	8008e64 <PSxBTGetXY+0x274>
		}else if(psxbt->joyR_x < -1.0){
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008e46:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008e4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e52:	d507      	bpl.n	8008e64 <PSxBTGetXY+0x274>
			psxbt->joyR_x = -1.0;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a2f      	ldr	r2, [pc, #188]	; (8008f14 <PSxBTGetXY+0x324>)
 8008e58:	651a      	str	r2, [r3, #80]	; 0x50
 8008e5a:	e003      	b.n	8008e64 <PSxBTGetXY+0x274>
		}
	}else{
		psxbt->joyR_x = 0.0;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f04f 0200 	mov.w	r2, #0
 8008e62:	651a      	str	r2, [r3, #80]	; 0x50
	}

	if(joyL_up){
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e68:	ee07 3a90 	vmov	s15, r3
 8008e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e70:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8008f08 <PSxBTGetXY+0x318>
 8008e74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e7c:	d54e      	bpl.n	8008f1c <PSxBTGetXY+0x32c>
		psxbt->joyL_y = ((psx_low_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e82:	ee07 3a90 	vmov	s15, r3
 8008e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e8a:	ee17 0a90 	vmov	r0, s15
 8008e8e:	f7f7 fb5b 	bl	8000548 <__aeabi_f2d>
 8008e92:	4602      	mov	r2, r0
 8008e94:	460b      	mov	r3, r1
 8008e96:	a11a      	add	r1, pc, #104	; (adr r1, 8008f00 <PSxBTGetXY+0x310>)
 8008e98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e9c:	f7f7 f9f4 	bl	8000288 <__aeabi_dsub>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	4610      	mov	r0, r2
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	f04f 0200 	mov.w	r2, #0
 8008eac:	4b17      	ldr	r3, [pc, #92]	; (8008f0c <PSxBTGetXY+0x31c>)
 8008eae:	f7f7 fccd 	bl	800084c <__aeabi_ddiv>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	4610      	mov	r0, r2
 8008eb8:	4619      	mov	r1, r3
 8008eba:	f7f7 fe95 	bl	8000be8 <__aeabi_d2f>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y < 0.0){
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008eca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ed2:	d504      	bpl.n	8008ede <PSxBTGetXY+0x2ee>
			psxbt->joyL_y = 0.0;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f04f 0200 	mov.w	r2, #0
 8008eda:	655a      	str	r2, [r3, #84]	; 0x54
 8008edc:	e06d      	b.n	8008fba <PSxBTGetXY+0x3ca>
		}else if(psxbt->joyL_y > 1.0){
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008ee4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ef0:	dd63      	ble.n	8008fba <PSxBTGetXY+0x3ca>
			psxbt->joyL_y = 1.0;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008ef8:	655a      	str	r2, [r3, #84]	; 0x54
 8008efa:	e05e      	b.n	8008fba <PSxBTGetXY+0x3ca>
 8008efc:	f3af 8000 	nop.w
 8008f00:	00000000 	.word	0x00000000
 8008f04:	405cc000 	.word	0x405cc000
 8008f08:	42e60000 	.word	0x42e60000
 8008f0c:	40590000 	.word	0x40590000
 8008f10:	40618000 	.word	0x40618000
 8008f14:	bf800000 	.word	0xbf800000
 8008f18:	430c0000 	.word	0x430c0000
		}
	}else if(joyL_down){
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f20:	ee07 3a90 	vmov	s15, r3
 8008f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f28:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8008f18 <PSxBTGetXY+0x328>
 8008f2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f34:	dd3d      	ble.n	8008fb2 <PSxBTGetXY+0x3c2>
		psxbt->joyL_y = ((psx_high_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3a:	ee07 3a90 	vmov	s15, r3
 8008f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f42:	ee17 0a90 	vmov	r0, s15
 8008f46:	f7f7 faff 	bl	8000548 <__aeabi_f2d>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	f04f 0000 	mov.w	r0, #0
 8008f52:	4981      	ldr	r1, [pc, #516]	; (8009158 <PSxBTGetXY+0x568>)
 8008f54:	f7f7 f998 	bl	8000288 <__aeabi_dsub>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	4610      	mov	r0, r2
 8008f5e:	4619      	mov	r1, r3
 8008f60:	f04f 0200 	mov.w	r2, #0
 8008f64:	4b7d      	ldr	r3, [pc, #500]	; (800915c <PSxBTGetXY+0x56c>)
 8008f66:	f7f7 fc71 	bl	800084c <__aeabi_ddiv>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	4610      	mov	r0, r2
 8008f70:	4619      	mov	r1, r3
 8008f72:	f7f7 fe39 	bl	8000be8 <__aeabi_d2f>
 8008f76:	4602      	mov	r2, r0
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y > 0.0){
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008f82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f8a:	dd04      	ble.n	8008f96 <PSxBTGetXY+0x3a6>
			psxbt->joyL_y = 0.0;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f04f 0200 	mov.w	r2, #0
 8008f92:	655a      	str	r2, [r3, #84]	; 0x54
 8008f94:	e011      	b.n	8008fba <PSxBTGetXY+0x3ca>
		}else if(psxbt->joyL_y < -1.0){
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008f9c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008fa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa8:	d507      	bpl.n	8008fba <PSxBTGetXY+0x3ca>
			psxbt->joyL_y = -1.0;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	4a6c      	ldr	r2, [pc, #432]	; (8009160 <PSxBTGetXY+0x570>)
 8008fae:	655a      	str	r2, [r3, #84]	; 0x54
 8008fb0:	e003      	b.n	8008fba <PSxBTGetXY+0x3ca>
		}
	}else{
		psxbt->joyL_y = 0.0;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f04f 0200 	mov.w	r2, #0
 8008fb8:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if(joyL_left){
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fbe:	ee07 3a90 	vmov	s15, r3
 8008fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fc6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8009164 <PSxBTGetXY+0x574>
 8008fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fd2:	d53e      	bpl.n	8009052 <PSxBTGetXY+0x462>
		psxbt->joyL_x = ((psx_low_Lx - ((float)psxbt->leftjoy_x))/100.0)/1.00;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd8:	ee07 3a90 	vmov	s15, r3
 8008fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fe0:	ee17 0a90 	vmov	r0, s15
 8008fe4:	f7f7 fab0 	bl	8000548 <__aeabi_f2d>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	460b      	mov	r3, r1
 8008fec:	a156      	add	r1, pc, #344	; (adr r1, 8009148 <PSxBTGetXY+0x558>)
 8008fee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ff2:	f7f7 f949 	bl	8000288 <__aeabi_dsub>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	4610      	mov	r0, r2
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	f04f 0200 	mov.w	r2, #0
 8009002:	4b56      	ldr	r3, [pc, #344]	; (800915c <PSxBTGetXY+0x56c>)
 8009004:	f7f7 fc22 	bl	800084c <__aeabi_ddiv>
 8009008:	4602      	mov	r2, r0
 800900a:	460b      	mov	r3, r1
 800900c:	4610      	mov	r0, r2
 800900e:	4619      	mov	r1, r3
 8009010:	f7f7 fdea 	bl	8000be8 <__aeabi_d2f>
 8009014:	4602      	mov	r2, r0
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	659a      	str	r2, [r3, #88]	; 0x58
		if(psxbt->joyL_x < 0.0){
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009020:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009028:	d504      	bpl.n	8009034 <PSxBTGetXY+0x444>
			psxbt->joyL_x = 0.0;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f04f 0200 	mov.w	r2, #0
 8009030:	659a      	str	r2, [r3, #88]	; 0x58
 8009032:	e05d      	b.n	80090f0 <PSxBTGetXY+0x500>
		}else if(psxbt->joyL_x > 1.0){
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800903a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800903e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009046:	dd53      	ble.n	80090f0 <PSxBTGetXY+0x500>
			psxbt->joyL_x = 1.0;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800904e:	659a      	str	r2, [r3, #88]	; 0x58
 8009050:	e04e      	b.n	80090f0 <PSxBTGetXY+0x500>
		}
	}else if(joyL_right){
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009056:	ee07 3a90 	vmov	s15, r3
 800905a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800905e:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8009168 <PSxBTGetXY+0x578>
 8009062:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800906a:	dd3d      	ble.n	80090e8 <PSxBTGetXY+0x4f8>
		psxbt->joyL_x = ((psx_high_Lx - ((float)psxbt->leftjoy_x))/100.0)/1.00;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009070:	ee07 3a90 	vmov	s15, r3
 8009074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009078:	ee17 0a90 	vmov	r0, s15
 800907c:	f7f7 fa64 	bl	8000548 <__aeabi_f2d>
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	f04f 0000 	mov.w	r0, #0
 8009088:	4933      	ldr	r1, [pc, #204]	; (8009158 <PSxBTGetXY+0x568>)
 800908a:	f7f7 f8fd 	bl	8000288 <__aeabi_dsub>
 800908e:	4602      	mov	r2, r0
 8009090:	460b      	mov	r3, r1
 8009092:	4610      	mov	r0, r2
 8009094:	4619      	mov	r1, r3
 8009096:	f04f 0200 	mov.w	r2, #0
 800909a:	4b30      	ldr	r3, [pc, #192]	; (800915c <PSxBTGetXY+0x56c>)
 800909c:	f7f7 fbd6 	bl	800084c <__aeabi_ddiv>
 80090a0:	4602      	mov	r2, r0
 80090a2:	460b      	mov	r3, r1
 80090a4:	4610      	mov	r0, r2
 80090a6:	4619      	mov	r1, r3
 80090a8:	f7f7 fd9e 	bl	8000be8 <__aeabi_d2f>
 80090ac:	4602      	mov	r2, r0
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	659a      	str	r2, [r3, #88]	; 0x58
		if(psxbt->joyL_x > 0.0){
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80090b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80090bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090c0:	dd04      	ble.n	80090cc <PSxBTGetXY+0x4dc>
			psxbt->joyL_x = 0.0;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f04f 0200 	mov.w	r2, #0
 80090c8:	659a      	str	r2, [r3, #88]	; 0x58
 80090ca:	e011      	b.n	80090f0 <PSxBTGetXY+0x500>
		}else if(psxbt->joyL_x < -1.0){
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80090d2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80090d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090de:	d507      	bpl.n	80090f0 <PSxBTGetXY+0x500>
			psxbt->joyL_x = -1.0;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a1f      	ldr	r2, [pc, #124]	; (8009160 <PSxBTGetXY+0x570>)
 80090e4:	659a      	str	r2, [r3, #88]	; 0x58
 80090e6:	e003      	b.n	80090f0 <PSxBTGetXY+0x500>
		}
	}else{
		psxbt->joyL_x = 0.0;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f04f 0200 	mov.w	r2, #0
 80090ee:	659a      	str	r2, [r3, #88]	; 0x58
	}

	psxbt->joyR_2 = (psxbt->an_R2/255.0);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7f7 fa05 	bl	8000504 <__aeabi_ui2d>
 80090fa:	a315      	add	r3, pc, #84	; (adr r3, 8009150 <PSxBTGetXY+0x560>)
 80090fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009100:	f7f7 fba4 	bl	800084c <__aeabi_ddiv>
 8009104:	4602      	mov	r2, r0
 8009106:	460b      	mov	r3, r1
 8009108:	4610      	mov	r0, r2
 800910a:	4619      	mov	r1, r3
 800910c:	f7f7 fd6c 	bl	8000be8 <__aeabi_d2f>
 8009110:	4602      	mov	r2, r0
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	65da      	str	r2, [r3, #92]	; 0x5c
	psxbt->joyL_2 = (psxbt->an_L2/255.0);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800911a:	4618      	mov	r0, r3
 800911c:	f7f7 f9f2 	bl	8000504 <__aeabi_ui2d>
 8009120:	a30b      	add	r3, pc, #44	; (adr r3, 8009150 <PSxBTGetXY+0x560>)
 8009122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009126:	f7f7 fb91 	bl	800084c <__aeabi_ddiv>
 800912a:	4602      	mov	r2, r0
 800912c:	460b      	mov	r3, r1
 800912e:	4610      	mov	r0, r2
 8009130:	4619      	mov	r1, r3
 8009132:	f7f7 fd59 	bl	8000be8 <__aeabi_d2f>
 8009136:	4602      	mov	r2, r0
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800913c:	bf00      	nop
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	f3af 8000 	nop.w
 8009148:	00000000 	.word	0x00000000
 800914c:	405cc000 	.word	0x405cc000
 8009150:	00000000 	.word	0x00000000
 8009154:	406fe000 	.word	0x406fe000
 8009158:	40618000 	.word	0x40618000
 800915c:	40590000 	.word	0x40590000
 8009160:	bf800000 	.word	0xbf800000
 8009164:	42e60000 	.word	0x42e60000
 8009168:	430c0000 	.word	0x430c0000

0800916c <R6091U_Init>:
	memset(IMU->Buffer, 0, 20);
	HAL_I2C_Master_Receive_DMA(IMU->hi2cimu, 0x35<<1, (uint8_t*)&IMU->Buffer, 20);//RECEIVE FROM R6091U
}


void R6091U_Init(R6091U_t* IMU,UART_HandleTypeDef* huartx){
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]

	IMU->huartx = huartx;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	683a      	ldr	r2, [r7, #0]
 800917a:	605a      	str	r2, [r3, #4]
	IMU->State = PENDING_SYNC;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	775a      	strb	r2, [r3, #29]
	HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6858      	ldr	r0, [r3, #4]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	3308      	adds	r3, #8
 800918a:	2201      	movs	r2, #1
 800918c:	4619      	mov	r1, r3
 800918e:	f00d fd81 	bl	8016c94 <HAL_UART_Receive_IT>

}
 8009192:	bf00      	nop
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
	...

0800919c <R6091U_Handler>:
void R6091U_Handler(R6091U_t* IMU){
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]

//	uint8_t checksum;

	switch(IMU->State){
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	7f5b      	ldrb	r3, [r3, #29]
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	d035      	beq.n	8009218 <R6091U_Handler+0x7c>
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	f300 80b2 	bgt.w	8009316 <R6091U_Handler+0x17a>
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d002      	beq.n	80091bc <R6091U_Handler+0x20>
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d011      	beq.n	80091de <R6091U_Handler+0x42>
		IMU->State = PENDING_SYNC;
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);

		break;
	}
}
 80091ba:	e0ac      	b.n	8009316 <R6091U_Handler+0x17a>
		if(IMU->Buffer[0] == 0xAA){
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	7a1b      	ldrb	r3, [r3, #8]
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2baa      	cmp	r3, #170	; 0xaa
 80091c4:	d102      	bne.n	80091cc <R6091U_Handler+0x30>
			IMU->State = CONFIRMING_SYNC;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2201      	movs	r2, #1
 80091ca:	775a      	strb	r2, [r3, #29]
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6858      	ldr	r0, [r3, #4]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	3308      	adds	r3, #8
 80091d4:	2201      	movs	r2, #1
 80091d6:	4619      	mov	r1, r3
 80091d8:	f00d fd5c 	bl	8016c94 <HAL_UART_Receive_IT>
		break;
 80091dc:	e09b      	b.n	8009316 <R6091U_Handler+0x17a>
		if(IMU->Buffer[0] == 0x00){
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	7a1b      	ldrb	r3, [r3, #8]
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10b      	bne.n	8009200 <R6091U_Handler+0x64>
			IMU->State = IN_SYNC;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2202      	movs	r2, #2
 80091ec:	775a      	strb	r2, [r3, #29]
			HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 13);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6858      	ldr	r0, [r3, #4]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	3308      	adds	r3, #8
 80091f6:	220d      	movs	r2, #13
 80091f8:	4619      	mov	r1, r3
 80091fa:	f00d fd4b 	bl	8016c94 <HAL_UART_Receive_IT>
		break;
 80091fe:	e08a      	b.n	8009316 <R6091U_Handler+0x17a>
			IMU->State = PENDING_SYNC;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	775a      	strb	r2, [r3, #29]
			HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6858      	ldr	r0, [r3, #4]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	3308      	adds	r3, #8
 800920e:	2201      	movs	r2, #1
 8009210:	4619      	mov	r1, r3
 8009212:	f00d fd3f 	bl	8016c94 <HAL_UART_Receive_IT>
		break;
 8009216:	e07e      	b.n	8009316 <R6091U_Handler+0x17a>
		IMU->checksum = 0;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		IMU->checksum = IMU->Buffer[0] + IMU->Buffer[1] + IMU->Buffer[2] + IMU->Buffer[3] + IMU->Buffer[4] + IMU->Buffer[5]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	7a1b      	ldrb	r3, [r3, #8]
 8009224:	b2da      	uxtb	r2, r3
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	7a5b      	ldrb	r3, [r3, #9]
 800922a:	b2db      	uxtb	r3, r3
 800922c:	4413      	add	r3, r2
 800922e:	b2da      	uxtb	r2, r3
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	7a9b      	ldrb	r3, [r3, #10]
 8009234:	b2db      	uxtb	r3, r3
 8009236:	4413      	add	r3, r2
 8009238:	b2da      	uxtb	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	7adb      	ldrb	r3, [r3, #11]
 800923e:	b2db      	uxtb	r3, r3
 8009240:	4413      	add	r3, r2
 8009242:	b2da      	uxtb	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	7b1b      	ldrb	r3, [r3, #12]
 8009248:	b2db      	uxtb	r3, r3
 800924a:	4413      	add	r3, r2
 800924c:	b2da      	uxtb	r2, r3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	7b5b      	ldrb	r3, [r3, #13]
 8009252:	b2db      	uxtb	r3, r3
 8009254:	4413      	add	r3, r2
 8009256:	b2da      	uxtb	r2, r3
						+ IMU->Buffer[6] + IMU->Buffer[7] + IMU->Buffer[8] + IMU->Buffer[9] + IMU->Buffer[10] + IMU->Buffer[11];
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	7b9b      	ldrb	r3, [r3, #14]
 800925c:	b2db      	uxtb	r3, r3
 800925e:	4413      	add	r3, r2
 8009260:	b2da      	uxtb	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	7bdb      	ldrb	r3, [r3, #15]
 8009266:	b2db      	uxtb	r3, r3
 8009268:	4413      	add	r3, r2
 800926a:	b2da      	uxtb	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	7c1b      	ldrb	r3, [r3, #16]
 8009270:	b2db      	uxtb	r3, r3
 8009272:	4413      	add	r3, r2
 8009274:	b2da      	uxtb	r2, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	7c5b      	ldrb	r3, [r3, #17]
 800927a:	b2db      	uxtb	r3, r3
 800927c:	4413      	add	r3, r2
 800927e:	b2da      	uxtb	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	7c9b      	ldrb	r3, [r3, #18]
 8009284:	b2db      	uxtb	r3, r3
 8009286:	4413      	add	r3, r2
 8009288:	b2da      	uxtb	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	7cdb      	ldrb	r3, [r3, #19]
 800928e:	b2db      	uxtb	r3, r3
 8009290:	4413      	add	r3, r2
 8009292:	b2da      	uxtb	r2, r3
		IMU->checksum = IMU->Buffer[0] + IMU->Buffer[1] + IMU->Buffer[2] + IMU->Buffer[3] + IMU->Buffer[4] + IMU->Buffer[5]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		if( IMU->checksum == IMU->Buffer[12]){
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	7d1b      	ldrb	r3, [r3, #20]
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d121      	bne.n	80092f0 <R6091U_Handler+0x154>
			int16_t yaw = *((uint16_t*)&IMU->Buffer[1]);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	3309      	adds	r3, #9
 80092b0:	881b      	ldrh	r3, [r3, #0]
 80092b2:	81fb      	strh	r3, [r7, #14]
			fyaw = ((float)(yaw) / (float)100.0) + 180.0 ;
 80092b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80092b8:	ee07 3a90 	vmov	s15, r3
 80092bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80092c0:	eddf 6a17 	vldr	s13, [pc, #92]	; 8009320 <R6091U_Handler+0x184>
 80092c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80092c8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8009324 <R6091U_Handler+0x188>
 80092cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80092d0:	4b15      	ldr	r3, [pc, #84]	; (8009328 <R6091U_Handler+0x18c>)
 80092d2:	edc3 7a00 	vstr	s15, [r3]
			if(testCounter2 >= 20){
 80092d6:	4b15      	ldr	r3, [pc, #84]	; (800932c <R6091U_Handler+0x190>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2b13      	cmp	r3, #19
 80092dc:	dd03      	ble.n	80092e6 <R6091U_Handler+0x14a>
				testCounter2 = 0;
 80092de:	4b13      	ldr	r3, [pc, #76]	; (800932c <R6091U_Handler+0x190>)
 80092e0:	2200      	movs	r2, #0
 80092e2:	601a      	str	r2, [r3, #0]
 80092e4:	e004      	b.n	80092f0 <R6091U_Handler+0x154>
				testCounter2 ++;
 80092e6:	4b11      	ldr	r3, [pc, #68]	; (800932c <R6091U_Handler+0x190>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	3301      	adds	r3, #1
 80092ec:	4a0f      	ldr	r2, [pc, #60]	; (800932c <R6091U_Handler+0x190>)
 80092ee:	6013      	str	r3, [r2, #0]
		memset(IMU->Buffer, 0, 13);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	3308      	adds	r3, #8
 80092f4:	220d      	movs	r2, #13
 80092f6:	2100      	movs	r1, #0
 80092f8:	4618      	mov	r0, r3
 80092fa:	f011 fa17 	bl	801a72c <memset>
		IMU->State = PENDING_SYNC;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	775a      	strb	r2, [r3, #29]
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6858      	ldr	r0, [r3, #4]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	3308      	adds	r3, #8
 800930c:	2201      	movs	r2, #1
 800930e:	4619      	mov	r1, r3
 8009310:	f00d fcc0 	bl	8016c94 <HAL_UART_Receive_IT>
		break;
 8009314:	bf00      	nop
}
 8009316:	bf00      	nop
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	42c80000 	.word	0x42c80000
 8009324:	43340000 	.word	0x43340000
 8009328:	20009dc8 	.word	0x20009dc8
 800932c:	20006cac 	.word	0x20006cac

08009330 <RNSInit>:
 * Function Example		: RNSInit(CAN1, &RNS);
 * 						  RNSInit(Robot_navi_system, I2C1,  &RNS);
 */

void RNSInit(CAN_HandleTypeDef* hcanx, RNS_interface_t* rns)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
	rns->rns_hcanx = hcanx;
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	601a      	str	r2, [r3, #0]

	insData_send[0] = 1;
 8009340:	4b28      	ldr	r3, [pc, #160]	; (80093e4 <RNSInit+0xb4>)
 8009342:	2201      	movs	r2, #1
 8009344:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 8009346:	4b27      	ldr	r3, [pc, #156]	; (80093e4 <RNSInit+0xb4>)
 8009348:	2200      	movs	r2, #0
 800934a:	705a      	strb	r2, [r3, #1]

	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	6818      	ldr	r0, [r3, #0]
 8009350:	2302      	movs	r3, #2
 8009352:	4a24      	ldr	r2, [pc, #144]	; (80093e4 <RNSInit+0xb4>)
 8009354:	2117      	movs	r1, #23
 8009356:	f7fa fa1d 	bl	8003794 <CAN_TxMsg>
	rns->RNS_data.common_instruction = RNS_PENDING;
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	2200      	movs	r2, #0
 800935e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 1;
 8009362:	4b20      	ldr	r3, [pc, #128]	; (80093e4 <RNSInit+0xb4>)
 8009364:	2201      	movs	r2, #1
 8009366:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_RESET_POS;
 8009368:	4b1e      	ldr	r3, [pc, #120]	; (80093e4 <RNSInit+0xb4>)
 800936a:	2214      	movs	r2, #20
 800936c:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	6818      	ldr	r0, [r3, #0]
 8009372:	2302      	movs	r3, #2
 8009374:	4a1b      	ldr	r2, [pc, #108]	; (80093e4 <RNSInit+0xb4>)
 8009376:	2117      	movs	r1, #23
 8009378:	f7fa fa0c 	bl	8003794 <CAN_TxMsg>

	rns->RNS_data.common_instruction = RNS_WAITING;
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	2202      	movs	r2, #2
 8009380:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	int wait=0;
 8009384:	2300      	movs	r3, #0
 8009386:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING){
 8009388:	e022      	b.n	80093d0 <RNSInit+0xa0>
		if(wait >= 2000000){
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	4a16      	ldr	r2, [pc, #88]	; (80093e8 <RNSInit+0xb8>)
 800938e:	4293      	cmp	r3, r2
 8009390:	dd1b      	ble.n	80093ca <RNSInit+0x9a>
			insData_send[0] = 1;
 8009392:	4b14      	ldr	r3, [pc, #80]	; (80093e4 <RNSInit+0xb4>)
 8009394:	2201      	movs	r2, #1
 8009396:	701a      	strb	r2, [r3, #0]
			insData_send[1] = RNS_RESET_POS;
 8009398:	4b12      	ldr	r3, [pc, #72]	; (80093e4 <RNSInit+0xb4>)
 800939a:	2214      	movs	r2, #20
 800939c:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	6818      	ldr	r0, [r3, #0]
 80093a2:	2302      	movs	r3, #2
 80093a4:	4a0f      	ldr	r2, [pc, #60]	; (80093e4 <RNSInit+0xb4>)
 80093a6:	2117      	movs	r1, #23
 80093a8:	f7fa f9f4 	bl	8003794 <CAN_TxMsg>
			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15;
 80093ac:	4b0f      	ldr	r3, [pc, #60]	; (80093ec <RNSInit+0xbc>)
 80093ae:	785b      	ldrb	r3, [r3, #1]
 80093b0:	b25b      	sxtb	r3, r3
 80093b2:	4a0e      	ldr	r2, [pc, #56]	; (80093ec <RNSInit+0xbc>)
 80093b4:	43db      	mvns	r3, r3
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	09db      	lsrs	r3, r3, #7
 80093ba:	b2d9      	uxtb	r1, r3
 80093bc:	7853      	ldrb	r3, [r2, #1]
 80093be:	f361 13c7 	bfi	r3, r1, #7, #1
 80093c2:	7053      	strb	r3, [r2, #1]
			wait = 0;
 80093c4:	2300      	movs	r3, #0
 80093c6:	60fb      	str	r3, [r7, #12]
 80093c8:	e002      	b.n	80093d0 <RNSInit+0xa0>
		}else{
			wait ++;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	3301      	adds	r3, #1
 80093ce:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING){
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d0d7      	beq.n	800938a <RNSInit+0x5a>
		}
	}
}
 80093da:	bf00      	nop
 80093dc:	bf00      	nop
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	2000aa70 	.word	0x2000aa70
 80093e8:	001e847f 	.word	0x001e847f
 80093ec:	40020814 	.word	0x40020814

080093f0 <RNSStop>:
 * Function Return		: None
 * Function Example		: RNSStop(&RNS);
 */

void RNSStop(RNS_interface_t* rns)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]


	rns->ins.instruction = RNS_STOP;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2203      	movs	r2, #3
 80093fc:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0.0;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f04f 0200 	mov.w	r2, #0
 8009404:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0.0;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f04f 0200 	mov.w	r2, #0
 800940c:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0.0;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f04f 0200 	mov.w	r2, #0
 8009414:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0.0;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f04f 0200 	mov.w	r2, #0
 800941c:	615a      	str	r2, [r3, #20]

	//RNSSendIns(rns);
	rns->RNS_data.common_instruction = RNS_WAITING;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2202      	movs	r2, #2
 8009422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 8009426:	4b31      	ldr	r3, [pc, #196]	; (80094ec <RNSStop+0xfc>)
 8009428:	2211      	movs	r2, #17
 800942a:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	791a      	ldrb	r2, [r3, #4]
 8009430:	4b2e      	ldr	r3, [pc, #184]	; (80094ec <RNSStop+0xfc>)
 8009432:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6818      	ldr	r0, [r3, #0]
 8009438:	2302      	movs	r3, #2
 800943a:	4a2c      	ldr	r2, [pc, #176]	; (80094ec <RNSStop+0xfc>)
 800943c:	2117      	movs	r1, #23
 800943e:	f7fa f9a9 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0]),8);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6818      	ldr	r0, [r3, #0]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f103 0208 	add.w	r2, r3, #8
 800944c:	2308      	movs	r3, #8
 800944e:	2118      	movs	r1, #24
 8009450:	f7fa f9a0 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2]),8);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6818      	ldr	r0, [r3, #0]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f103 0210 	add.w	r2, r3, #16
 800945e:	2308      	movs	r3, #8
 8009460:	2119      	movs	r1, #25
 8009462:	f7fa f997 	bl	8003794 <CAN_TxMsg>

	int wait = 0;
 8009466:	2300      	movs	r3, #0
 8009468:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800946a:	e035      	b.n	80094d8 <RNSStop+0xe8>
	{
		if(wait >= 2000000)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	4a20      	ldr	r2, [pc, #128]	; (80094f0 <RNSStop+0x100>)
 8009470:	4293      	cmp	r3, r2
 8009472:	dd2e      	ble.n	80094d2 <RNSStop+0xe2>
		{
			insData_send[0] = 17;
 8009474:	4b1d      	ldr	r3, [pc, #116]	; (80094ec <RNSStop+0xfc>)
 8009476:	2211      	movs	r2, #17
 8009478:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	791a      	ldrb	r2, [r3, #4]
 800947e:	4b1b      	ldr	r3, [pc, #108]	; (80094ec <RNSStop+0xfc>)
 8009480:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6818      	ldr	r0, [r3, #0]
 8009486:	2302      	movs	r3, #2
 8009488:	4a18      	ldr	r2, [pc, #96]	; (80094ec <RNSStop+0xfc>)
 800948a:	2117      	movs	r1, #23
 800948c:	f7fa f982 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0]),8);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6818      	ldr	r0, [r3, #0]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f103 0208 	add.w	r2, r3, #8
 800949a:	2308      	movs	r3, #8
 800949c:	2118      	movs	r1, #24
 800949e:	f7fa f979 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2]),8);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6818      	ldr	r0, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f103 0210 	add.w	r2, r3, #16
 80094ac:	2308      	movs	r3, #8
 80094ae:	2119      	movs	r1, #25
 80094b0:	f7fa f970 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 80094b4:	4b0f      	ldr	r3, [pc, #60]	; (80094f4 <RNSStop+0x104>)
 80094b6:	785b      	ldrb	r3, [r3, #1]
 80094b8:	b25b      	sxtb	r3, r3
 80094ba:	4a0e      	ldr	r2, [pc, #56]	; (80094f4 <RNSStop+0x104>)
 80094bc:	43db      	mvns	r3, r3
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	09db      	lsrs	r3, r3, #7
 80094c2:	b2d9      	uxtb	r1, r3
 80094c4:	7853      	ldrb	r3, [r2, #1]
 80094c6:	f361 13c7 	bfi	r3, r1, #7, #1
 80094ca:	7053      	strb	r3, [r2, #1]
			wait = 0;
 80094cc:	2300      	movs	r3, #0
 80094ce:	60fb      	str	r3, [r7, #12]
 80094d0:	e002      	b.n	80094d8 <RNSStop+0xe8>
		}
		else
			wait++;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	3301      	adds	r3, #1
 80094d6:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80094de:	2b02      	cmp	r3, #2
 80094e0:	d0c4      	beq.n	800946c <RNSStop+0x7c>
	}


}
 80094e2:	bf00      	nop
 80094e4:	bf00      	nop
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	2000aa70 	.word	0x2000aa70
 80094f0:	001e847f 	.word	0x001e847f
 80094f4:	40020814 	.word	0x40020814

080094f8 <RNSVelocity>:
 * Function Return		: None
 * Function Example		: RNSVelocity(1.0, 1.5 , 1.5 , 1.0, &RNS);
 */

void RNSVelocity(float fFLeftVelR, float fFRightVelR, float fBLeftVelR, float fBRightVelR, RNS_interface_t* rns)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b086      	sub	sp, #24
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	ed87 0a05 	vstr	s0, [r7, #20]
 8009502:	edc7 0a04 	vstr	s1, [r7, #16]
 8009506:	ed87 1a03 	vstr	s2, [r7, #12]
 800950a:	edc7 1a02 	vstr	s3, [r7, #8]
 800950e:	6078      	str	r0, [r7, #4]

	rns->ins.instruction = RNS_VELOCITY;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2205      	movs	r2, #5
 8009514:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = fFLeftVelR;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	697a      	ldr	r2, [r7, #20]
 800951a:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = fFRightVelR;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	693a      	ldr	r2, [r7, #16]
 8009520:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = fBLeftVelR;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = fBRightVelR;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	68ba      	ldr	r2, [r7, #8]
 800952c:	615a      	str	r2, [r3, #20]

	RNSSendIns(rns);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f804 	bl	800953c <RNSSendIns>

}
 8009534:	bf00      	nop
 8009536:	3718      	adds	r7, #24
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <RNSSendIns>:
 * Function Return		: None
 * Function Example		: None
 */

void RNSSendIns(RNS_interface_t* rns)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
	while(rns->RNS_data.common_instruction == RNS_BUSY);
 8009544:	bf00      	nop
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800954c:	2b01      	cmp	r3, #1
 800954e:	d0fa      	beq.n	8009546 <RNSSendIns+0xa>
	rns->RNS_data.common_instruction = RNS_WAITING;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2202      	movs	r2, #2
 8009554:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 8009558:	4b31      	ldr	r3, [pc, #196]	; (8009620 <RNSSendIns+0xe4>)
 800955a:	2211      	movs	r2, #17
 800955c:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	791a      	ldrb	r2, [r3, #4]
 8009562:	4b2f      	ldr	r3, [pc, #188]	; (8009620 <RNSSendIns+0xe4>)
 8009564:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS, insData_send,2);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6818      	ldr	r0, [r3, #0]
 800956a:	2302      	movs	r3, #2
 800956c:	4a2c      	ldr	r2, [pc, #176]	; (8009620 <RNSSendIns+0xe4>)
 800956e:	2117      	movs	r1, #23
 8009570:	f7fa f910 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6818      	ldr	r0, [r3, #0]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f103 0208 	add.w	r2, r3, #8
 800957e:	2308      	movs	r3, #8
 8009580:	2118      	movs	r1, #24
 8009582:	f7fa f907 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6818      	ldr	r0, [r3, #0]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f103 0210 	add.w	r2, r3, #16
 8009590:	2308      	movs	r3, #8
 8009592:	2119      	movs	r1, #25
 8009594:	f7fa f8fe 	bl	8003794 <CAN_TxMsg>

	int wait = 0;
 8009598:	2300      	movs	r3, #0
 800959a:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800959c:	e035      	b.n	800960a <RNSSendIns+0xce>
	{
		if(wait >= 2000000)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	4a20      	ldr	r2, [pc, #128]	; (8009624 <RNSSendIns+0xe8>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	dd2e      	ble.n	8009604 <RNSSendIns+0xc8>
		{
			insData_send[0] = 17;
 80095a6:	4b1e      	ldr	r3, [pc, #120]	; (8009620 <RNSSendIns+0xe4>)
 80095a8:	2211      	movs	r2, #17
 80095aa:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	791a      	ldrb	r2, [r3, #4]
 80095b0:	4b1b      	ldr	r3, [pc, #108]	; (8009620 <RNSSendIns+0xe4>)
 80095b2:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS, insData_send,2);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6818      	ldr	r0, [r3, #0]
 80095b8:	2302      	movs	r3, #2
 80095ba:	4a19      	ldr	r2, [pc, #100]	; (8009620 <RNSSendIns+0xe4>)
 80095bc:	2117      	movs	r1, #23
 80095be:	f7fa f8e9 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6818      	ldr	r0, [r3, #0]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f103 0208 	add.w	r2, r3, #8
 80095cc:	2308      	movs	r3, #8
 80095ce:	2118      	movs	r1, #24
 80095d0:	f7fa f8e0 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6818      	ldr	r0, [r3, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f103 0210 	add.w	r2, r3, #16
 80095de:	2308      	movs	r3, #8
 80095e0:	2119      	movs	r1, #25
 80095e2:	f7fa f8d7 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 80095e6:	4b10      	ldr	r3, [pc, #64]	; (8009628 <RNSSendIns+0xec>)
 80095e8:	785b      	ldrb	r3, [r3, #1]
 80095ea:	b25b      	sxtb	r3, r3
 80095ec:	4a0e      	ldr	r2, [pc, #56]	; (8009628 <RNSSendIns+0xec>)
 80095ee:	43db      	mvns	r3, r3
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	09db      	lsrs	r3, r3, #7
 80095f4:	b2d9      	uxtb	r1, r3
 80095f6:	7853      	ldrb	r3, [r2, #1]
 80095f8:	f361 13c7 	bfi	r3, r1, #7, #1
 80095fc:	7053      	strb	r3, [r2, #1]
			wait = 0;
 80095fe:	2300      	movs	r3, #0
 8009600:	60fb      	str	r3, [r7, #12]
 8009602:	e002      	b.n	800960a <RNSSendIns+0xce>
		}
		else
		{
			wait++;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	3301      	adds	r3, #1
 8009608:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009610:	2b02      	cmp	r3, #2
 8009612:	d0c4      	beq.n	800959e <RNSSendIns+0x62>
		}
	}

}
 8009614:	bf00      	nop
 8009616:	bf00      	nop
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	2000aa70 	.word	0x2000aa70
 8009624:	001e847f 	.word	0x001e847f
 8009628:	40020814 	.word	0x40020814

0800962c <RNSSet>:
 * Function Return		: None
 * Function Example		: RNSSet(&RNS, RNS_F_KCD_PTD, 0.9956, 0.01/2000);
 */

void RNSSet(RNS_interface_t* rns, unsigned char parameter, ...)
{
 800962c:	b40e      	push	{r1, r2, r3}
 800962e:	b580      	push	{r7, lr}
 8009630:	b085      	sub	sp, #20
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]

	va_list value;
	rns->param.parameter = parameter;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	7f3a      	ldrb	r2, [r7, #28]
 800963a:	761a      	strb	r2, [r3, #24]
	va_start(value, parameter);
 800963c:	f107 0320 	add.w	r3, r7, #32
 8009640:	60bb      	str	r3, [r7, #8]
	while(rns->RNS_data.common_instruction == RNS_WAITING);
 8009642:	bf00      	nop
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800964a:	2b02      	cmp	r3, #2
 800964c:	d0fa      	beq.n	8009644 <RNSSet+0x18>
	if (parameter > RNS_PARAM_1){
 800964e:	7f3b      	ldrb	r3, [r7, #28]
 8009650:	2b18      	cmp	r3, #24
 8009652:	d92b      	bls.n	80096ac <RNSSet+0x80>
		rns->param.param_buffer[0].data = va_arg(value, double);
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	3307      	adds	r3, #7
 8009658:	f023 0307 	bic.w	r3, r3, #7
 800965c:	f103 0208 	add.w	r2, r3, #8
 8009660:	60ba      	str	r2, [r7, #8]
 8009662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009666:	4610      	mov	r0, r2
 8009668:	4619      	mov	r1, r3
 800966a:	f7f7 fabd 	bl	8000be8 <__aeabi_d2f>
 800966e:	4602      	mov	r2, r0
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	61da      	str	r2, [r3, #28]
		rns->param.param_buffer[1].data = 0;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f04f 0200 	mov.w	r2, #0
 800967a:	621a      	str	r2, [r3, #32]
		rns->param.param_buffer[2].data = 0;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f04f 0200 	mov.w	r2, #0
 8009682:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f04f 0200 	mov.w	r2, #0
 800968a:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f04f 0200 	mov.w	r2, #0
 8009692:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f04f 0200 	mov.w	r2, #0
 800969a:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f04f 0200 	mov.w	r2, #0
 80096a2:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f04f 0200 	mov.w	r2, #0
 80096aa:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_2){
 80096ac:	7f3b      	ldrb	r3, [r7, #28]
 80096ae:	2b1e      	cmp	r3, #30
 80096b0:	d927      	bls.n	8009702 <RNSSet+0xd6>
		rns->param.param_buffer[1].data = va_arg(value, double);
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	3307      	adds	r3, #7
 80096b6:	f023 0307 	bic.w	r3, r3, #7
 80096ba:	f103 0208 	add.w	r2, r3, #8
 80096be:	60ba      	str	r2, [r7, #8]
 80096c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c4:	4610      	mov	r0, r2
 80096c6:	4619      	mov	r1, r3
 80096c8:	f7f7 fa8e 	bl	8000be8 <__aeabi_d2f>
 80096cc:	4602      	mov	r2, r0
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	621a      	str	r2, [r3, #32]
		rns->param.param_buffer[2].data = 0;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f04f 0200 	mov.w	r2, #0
 80096d8:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f04f 0200 	mov.w	r2, #0
 80096e0:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f04f 0200 	mov.w	r2, #0
 80096e8:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f04f 0200 	mov.w	r2, #0
 80096f0:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f04f 0200 	mov.w	r2, #0
 80096f8:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f04f 0200 	mov.w	r2, #0
 8009700:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_3){
 8009702:	7f3b      	ldrb	r3, [r7, #28]
 8009704:	2b23      	cmp	r3, #35	; 0x23
 8009706:	d923      	bls.n	8009750 <RNSSet+0x124>
		rns->param.param_buffer[2].data = va_arg(value, double);
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	3307      	adds	r3, #7
 800970c:	f023 0307 	bic.w	r3, r3, #7
 8009710:	f103 0208 	add.w	r2, r3, #8
 8009714:	60ba      	str	r2, [r7, #8]
 8009716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971a:	4610      	mov	r0, r2
 800971c:	4619      	mov	r1, r3
 800971e:	f7f7 fa63 	bl	8000be8 <__aeabi_d2f>
 8009722:	4602      	mov	r2, r0
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f04f 0200 	mov.w	r2, #0
 800972e:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f04f 0200 	mov.w	r2, #0
 8009736:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f04f 0200 	mov.w	r2, #0
 800973e:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f04f 0200 	mov.w	r2, #0
 8009746:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f04f 0200 	mov.w	r2, #0
 800974e:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_4){
 8009750:	7f3b      	ldrb	r3, [r7, #28]
 8009752:	2b48      	cmp	r3, #72	; 0x48
 8009754:	d91f      	bls.n	8009796 <RNSSet+0x16a>
		rns->param.param_buffer[3].data = va_arg(value, double);
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	3307      	adds	r3, #7
 800975a:	f023 0307 	bic.w	r3, r3, #7
 800975e:	f103 0208 	add.w	r2, r3, #8
 8009762:	60ba      	str	r2, [r7, #8]
 8009764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009768:	4610      	mov	r0, r2
 800976a:	4619      	mov	r1, r3
 800976c:	f7f7 fa3c 	bl	8000be8 <__aeabi_d2f>
 8009770:	4602      	mov	r2, r0
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f04f 0200 	mov.w	r2, #0
 800977c:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f04f 0200 	mov.w	r2, #0
 8009784:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f04f 0200 	mov.w	r2, #0
 800978c:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f04f 0200 	mov.w	r2, #0
 8009794:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_5){
 8009796:	7f3b      	ldrb	r3, [r7, #28]
 8009798:	2b50      	cmp	r3, #80	; 0x50
 800979a:	d91b      	bls.n	80097d4 <RNSSet+0x1a8>
		rns->param.param_buffer[4].data = va_arg(value,double);
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	3307      	adds	r3, #7
 80097a0:	f023 0307 	bic.w	r3, r3, #7
 80097a4:	f103 0208 	add.w	r2, r3, #8
 80097a8:	60ba      	str	r2, [r7, #8]
 80097aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ae:	4610      	mov	r0, r2
 80097b0:	4619      	mov	r1, r3
 80097b2:	f7f7 fa19 	bl	8000be8 <__aeabi_d2f>
 80097b6:	4602      	mov	r2, r0
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f04f 0200 	mov.w	r2, #0
 80097c2:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f04f 0200 	mov.w	r2, #0
 80097ca:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f04f 0200 	mov.w	r2, #0
 80097d2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_6){
 80097d4:	7f3b      	ldrb	r3, [r7, #28]
 80097d6:	2b51      	cmp	r3, #81	; 0x51
 80097d8:	d917      	bls.n	800980a <RNSSet+0x1de>
		rns->param.param_buffer[5].data = va_arg(value, double);
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	3307      	adds	r3, #7
 80097de:	f023 0307 	bic.w	r3, r3, #7
 80097e2:	f103 0208 	add.w	r2, r3, #8
 80097e6:	60ba      	str	r2, [r7, #8]
 80097e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ec:	4610      	mov	r0, r2
 80097ee:	4619      	mov	r1, r3
 80097f0:	f7f7 f9fa 	bl	8000be8 <__aeabi_d2f>
 80097f4:	4602      	mov	r2, r0
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f04f 0200 	mov.w	r2, #0
 8009800:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f04f 0200 	mov.w	r2, #0
 8009808:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_7){
 800980a:	7f3b      	ldrb	r3, [r7, #28]
 800980c:	2b52      	cmp	r3, #82	; 0x52
 800980e:	d913      	bls.n	8009838 <RNSSet+0x20c>
		rns->param.param_buffer[6].data = va_arg(value, double);
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	3307      	adds	r3, #7
 8009814:	f023 0307 	bic.w	r3, r3, #7
 8009818:	f103 0208 	add.w	r2, r3, #8
 800981c:	60ba      	str	r2, [r7, #8]
 800981e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009822:	4610      	mov	r0, r2
 8009824:	4619      	mov	r1, r3
 8009826:	f7f7 f9df 	bl	8000be8 <__aeabi_d2f>
 800982a:	4602      	mov	r2, r0
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f04f 0200 	mov.w	r2, #0
 8009836:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if(parameter > RNS_PARAM_8){
 8009838:	7f3b      	ldrb	r3, [r7, #28]
 800983a:	2b54      	cmp	r3, #84	; 0x54
 800983c:	d90f      	bls.n	800985e <RNSSet+0x232>
		rns->param.param_buffer[7].data = va_arg(value, double);
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	3307      	adds	r3, #7
 8009842:	f023 0307 	bic.w	r3, r3, #7
 8009846:	f103 0208 	add.w	r2, r3, #8
 800984a:	60ba      	str	r2, [r7, #8]
 800984c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009850:	4610      	mov	r0, r2
 8009852:	4619      	mov	r1, r3
 8009854:	f7f7 f9c8 	bl	8000be8 <__aeabi_d2f>
 8009858:	4602      	mov	r2, r0
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	639a      	str	r2, [r3, #56]	; 0x38
	}

	va_end(value);

	insData_send[0] = 17;
 800985e:	4b4d      	ldr	r3, [pc, #308]	; (8009994 <RNSSet+0x368>)
 8009860:	2211      	movs	r2, #17
 8009862:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->param.parameter;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	7e1a      	ldrb	r2, [r3, #24]
 8009868:	4b4a      	ldr	r3, [pc, #296]	; (8009994 <RNSSet+0x368>)
 800986a:	705a      	strb	r2, [r3, #1]

	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6818      	ldr	r0, [r3, #0]
 8009870:	2302      	movs	r3, #2
 8009872:	4a48      	ldr	r2, [pc, #288]	; (8009994 <RNSSet+0x368>)
 8009874:	2117      	movs	r1, #23
 8009876:	f7f9 ff8d 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->param.param_buffer[0]),8);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6818      	ldr	r0, [r3, #0]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f103 021c 	add.w	r2, r3, #28
 8009884:	2308      	movs	r3, #8
 8009886:	2118      	movs	r1, #24
 8009888:	f7f9 ff84 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->param.param_buffer[2]),8);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6818      	ldr	r0, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8009896:	2308      	movs	r3, #8
 8009898:	2119      	movs	r1, #25
 800989a:	f7f9 ff7b 	bl	8003794 <CAN_TxMsg>
	if(parameter > RNS_PARAM_5)
 800989e:	7f3b      	ldrb	r3, [r7, #28]
 80098a0:	2b50      	cmp	r3, #80	; 0x50
 80098a2:	d908      	bls.n	80098b6 <RNSSet+0x28a>
		CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf3,&(rns->param.param_buffer[4]),8);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6818      	ldr	r0, [r3, #0]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80098ae:	2308      	movs	r3, #8
 80098b0:	211a      	movs	r1, #26
 80098b2:	f7f9 ff6f 	bl	8003794 <CAN_TxMsg>
	if(parameter > RNS_PARAM_7)
 80098b6:	7f3b      	ldrb	r3, [r7, #28]
 80098b8:	2b52      	cmp	r3, #82	; 0x52
 80098ba:	d908      	bls.n	80098ce <RNSSet+0x2a2>
		CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf4,&(rns->param.param_buffer[6]),8);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6818      	ldr	r0, [r3, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80098c6:	2308      	movs	r3, #8
 80098c8:	211b      	movs	r1, #27
 80098ca:	f7f9 ff63 	bl	8003794 <CAN_TxMsg>

	rns->RNS_data.common_instruction = RNS_WAITING;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2202      	movs	r2, #2
 80098d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	int wait = 0;
 80098d6:	2300      	movs	r3, #0
 80098d8:	60fb      	str	r3, [r7, #12]

	while(rns->RNS_data.common_instruction == RNS_WAITING)
 80098da:	e04d      	b.n	8009978 <RNSSet+0x34c>
	{
		if(wait >= 2000000)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	4a2e      	ldr	r2, [pc, #184]	; (8009998 <RNSSet+0x36c>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	dd46      	ble.n	8009972 <RNSSet+0x346>
		{
			insData_send[0] = 17;
 80098e4:	4b2b      	ldr	r3, [pc, #172]	; (8009994 <RNSSet+0x368>)
 80098e6:	2211      	movs	r2, #17
 80098e8:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->param.parameter;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	7e1a      	ldrb	r2, [r3, #24]
 80098ee:	4b29      	ldr	r3, [pc, #164]	; (8009994 <RNSSet+0x368>)
 80098f0:	705a      	strb	r2, [r3, #1]

			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6818      	ldr	r0, [r3, #0]
 80098f6:	2302      	movs	r3, #2
 80098f8:	4a26      	ldr	r2, [pc, #152]	; (8009994 <RNSSet+0x368>)
 80098fa:	2117      	movs	r1, #23
 80098fc:	f7f9 ff4a 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->param.param_buffer[0]),8);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6818      	ldr	r0, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f103 021c 	add.w	r2, r3, #28
 800990a:	2308      	movs	r3, #8
 800990c:	2118      	movs	r1, #24
 800990e:	f7f9 ff41 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->param.param_buffer[2]),8);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6818      	ldr	r0, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800991c:	2308      	movs	r3, #8
 800991e:	2119      	movs	r1, #25
 8009920:	f7f9 ff38 	bl	8003794 <CAN_TxMsg>
			if(parameter > RNS_PARAM_5)
 8009924:	7f3b      	ldrb	r3, [r7, #28]
 8009926:	2b50      	cmp	r3, #80	; 0x50
 8009928:	d908      	bls.n	800993c <RNSSet+0x310>
				CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf3,&(rns->param.param_buffer[4]),8);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6818      	ldr	r0, [r3, #0]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8009934:	2308      	movs	r3, #8
 8009936:	211a      	movs	r1, #26
 8009938:	f7f9 ff2c 	bl	8003794 <CAN_TxMsg>
			if(parameter > RNS_PARAM_7)
 800993c:	7f3b      	ldrb	r3, [r7, #28]
 800993e:	2b52      	cmp	r3, #82	; 0x52
 8009940:	d908      	bls.n	8009954 <RNSSet+0x328>
				CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf4,&(rns->param.param_buffer[6]),8);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6818      	ldr	r0, [r3, #0]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800994c:	2308      	movs	r3, #8
 800994e:	211b      	movs	r1, #27
 8009950:	f7f9 ff20 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 8009954:	4b11      	ldr	r3, [pc, #68]	; (800999c <RNSSet+0x370>)
 8009956:	785b      	ldrb	r3, [r3, #1]
 8009958:	b25b      	sxtb	r3, r3
 800995a:	4a10      	ldr	r2, [pc, #64]	; (800999c <RNSSet+0x370>)
 800995c:	43db      	mvns	r3, r3
 800995e:	b2db      	uxtb	r3, r3
 8009960:	09db      	lsrs	r3, r3, #7
 8009962:	b2d9      	uxtb	r1, r3
 8009964:	7853      	ldrb	r3, [r2, #1]
 8009966:	f361 13c7 	bfi	r3, r1, #7, #1
 800996a:	7053      	strb	r3, [r2, #1]
			wait = 0;
 800996c:	2300      	movs	r3, #0
 800996e:	60fb      	str	r3, [r7, #12]
 8009970:	e002      	b.n	8009978 <RNSSet+0x34c>
		}
		else
			wait++;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	3301      	adds	r3, #1
 8009976:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800997e:	2b02      	cmp	r3, #2
 8009980:	d0ac      	beq.n	80098dc <RNSSet+0x2b0>
	}
	//UARTPrintString(&huart5,"1\r\n");

}
 8009982:	bf00      	nop
 8009984:	bf00      	nop
 8009986:	3714      	adds	r7, #20
 8009988:	46bd      	mov	sp, r7
 800998a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800998e:	b003      	add	sp, #12
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	2000aa70 	.word	0x2000aa70
 8009998:	001e847f 	.word	0x001e847f
 800999c:	40020814 	.word	0x40020814

080099a0 <RNSEnquire>:
 * Function Return		: None
 * Function Example		: RNSSet(&RNS, RNS_F_KCD_PTD, 0.9956, 0.01/2000);
 */

uint8_t RNSEnquire(unsigned char parameter, RNS_interface_t* rns)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	4603      	mov	r3, r0
 80099a8:	6039      	str	r1, [r7, #0]
 80099aa:	71fb      	strb	r3, [r7, #7]

	rns->ins.instruction = parameter;
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	79fa      	ldrb	r2, [r7, #7]
 80099b0:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0.0;
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	f04f 0200 	mov.w	r2, #0
 80099b8:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0.0;
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	f04f 0200 	mov.w	r2, #0
 80099c0:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0.0;
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	f04f 0200 	mov.w	r2, #0
 80099c8:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0.0;
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	f04f 0200 	mov.w	r2, #0
 80099d0:	615a      	str	r2, [r3, #20]

//	RNSSendIns(rns);

	rns->RNS_data.common_instruction = RNS_WAITING;
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	2202      	movs	r2, #2
 80099d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 80099da:	4b3b      	ldr	r3, [pc, #236]	; (8009ac8 <RNSEnquire+0x128>)
 80099dc:	2211      	movs	r2, #17
 80099de:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	791a      	ldrb	r2, [r3, #4]
 80099e4:	4b38      	ldr	r3, [pc, #224]	; (8009ac8 <RNSEnquire+0x128>)
 80099e6:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	6818      	ldr	r0, [r3, #0]
 80099ec:	2302      	movs	r3, #2
 80099ee:	4a36      	ldr	r2, [pc, #216]	; (8009ac8 <RNSEnquire+0x128>)
 80099f0:	2117      	movs	r1, #23
 80099f2:	f7f9 fecf 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	6818      	ldr	r0, [r3, #0]
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	f103 0208 	add.w	r2, r3, #8
 8009a00:	2308      	movs	r3, #8
 8009a02:	2118      	movs	r1, #24
 8009a04:	f7f9 fec6 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	6818      	ldr	r0, [r3, #0]
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	f103 0210 	add.w	r2, r3, #16
 8009a12:	2308      	movs	r3, #8
 8009a14:	2119      	movs	r1, #25
 8009a16:	f7f9 febd 	bl	8003794 <CAN_TxMsg>

	int wait = 0;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8009a1e:	e035      	b.n	8009a8c <RNSEnquire+0xec>
	{
		if(wait >= 2000000)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	4a2a      	ldr	r2, [pc, #168]	; (8009acc <RNSEnquire+0x12c>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	dd2e      	ble.n	8009a86 <RNSEnquire+0xe6>
		{
			insData_send[0] = 17;
 8009a28:	4b27      	ldr	r3, [pc, #156]	; (8009ac8 <RNSEnquire+0x128>)
 8009a2a:	2211      	movs	r2, #17
 8009a2c:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	791a      	ldrb	r2, [r3, #4]
 8009a32:	4b25      	ldr	r3, [pc, #148]	; (8009ac8 <RNSEnquire+0x128>)
 8009a34:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	6818      	ldr	r0, [r3, #0]
 8009a3a:	2302      	movs	r3, #2
 8009a3c:	4a22      	ldr	r2, [pc, #136]	; (8009ac8 <RNSEnquire+0x128>)
 8009a3e:	2117      	movs	r1, #23
 8009a40:	f7f9 fea8 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	6818      	ldr	r0, [r3, #0]
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	f103 0208 	add.w	r2, r3, #8
 8009a4e:	2308      	movs	r3, #8
 8009a50:	2118      	movs	r1, #24
 8009a52:	f7f9 fe9f 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	6818      	ldr	r0, [r3, #0]
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	f103 0210 	add.w	r2, r3, #16
 8009a60:	2308      	movs	r3, #8
 8009a62:	2119      	movs	r1, #25
 8009a64:	f7f9 fe96 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 8009a68:	4b19      	ldr	r3, [pc, #100]	; (8009ad0 <RNSEnquire+0x130>)
 8009a6a:	785b      	ldrb	r3, [r3, #1]
 8009a6c:	b25b      	sxtb	r3, r3
 8009a6e:	4a18      	ldr	r2, [pc, #96]	; (8009ad0 <RNSEnquire+0x130>)
 8009a70:	43db      	mvns	r3, r3
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	09db      	lsrs	r3, r3, #7
 8009a76:	b2d9      	uxtb	r1, r3
 8009a78:	7853      	ldrb	r3, [r2, #1]
 8009a7a:	f361 13c7 	bfi	r3, r1, #7, #1
 8009a7e:	7053      	strb	r3, [r2, #1]
			wait = 0;
 8009a80:	2300      	movs	r3, #0
 8009a82:	60fb      	str	r3, [r7, #12]
 8009a84:	e002      	b.n	8009a8c <RNSEnquire+0xec>
		}
		else wait++;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	3301      	adds	r3, #1
 8009a8a:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a92:	2b02      	cmp	r3, #2
 8009a94:	d0c4      	beq.n	8009a20 <RNSEnquire+0x80>

	}

	rns->enq.enquiry = parameter;
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	79fa      	ldrb	r2, [r7, #7]
 8009a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rns->enq.enq_buffer[0].data = rns->RNS_data.common_buffer[0].data;
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	641a      	str	r2, [r3, #64]	; 0x40
	rns->enq.enq_buffer[1].data = rns->RNS_data.common_buffer[1].data;
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	645a      	str	r2, [r3, #68]	; 0x44
	rns->enq.enq_buffer[2].data = rns->RNS_data.common_buffer[2].data;
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	649a      	str	r2, [r3, #72]	; 0x48
	rns->enq.enq_buffer[3].data = rns->RNS_data.common_buffer[3].data;
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	64da      	str	r2, [r3, #76]	; 0x4c


	return 1;
 8009abe:	2301      	movs	r3, #1
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	2000aa70 	.word	0x2000aa70
 8009acc:	001e847f 	.word	0x001e847f
 8009ad0:	40020814 	.word	0x40020814

08009ad4 <ServoxInit>:
 * 						  					TIM_CHANNEL_3
 * 						  					TIM_CHANNEL_4
 * Function Return		: None
 * Function Example		: ServoInit(&SERVO1, &htim3, GPIOA,GPIO_Pin_6, TIM_CHANNEL_1);
 */
void ServoxInit(SERVO_t* servo, TIM_HandleTypeDef* htimx, GPIO_TypeDef * SERVO_GPIOx,uint16_t SERVO_GPIO_Pin, uint32_t channel){
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b08c      	sub	sp, #48	; 0x30
 8009ad8:	af02      	add	r7, sp, #8
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	60b9      	str	r1, [r7, #8]
 8009ade:	607a      	str	r2, [r7, #4]
 8009ae0:	807b      	strh	r3, [r7, #2]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009ae2:	f107 0318 	add.w	r3, r7, #24
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	601a      	str	r2, [r3, #0]
 8009aea:	605a      	str	r2, [r3, #4]
 8009aec:	609a      	str	r2, [r3, #8]
 8009aee:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009af0:	f107 0310 	add.w	r3, r7, #16
 8009af4:	2200      	movs	r2, #0
 8009af6:	601a      	str	r2, [r3, #0]
 8009af8:	605a      	str	r2, [r3, #4]


		if(htimx == &htim1){
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	4a6d      	ldr	r2, [pc, #436]	; (8009cb4 <ServoxInit+0x1e0>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d106      	bne.n	8009b10 <ServoxInit+0x3c>
			htimx->Instance = TIM1;
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	4a6c      	ldr	r2, [pc, #432]	; (8009cb8 <ServoxInit+0x1e4>)
 8009b06:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	22a7      	movs	r2, #167	; 0xa7
 8009b0c:	605a      	str	r2, [r3, #4]
 8009b0e:	e078      	b.n	8009c02 <ServoxInit+0x12e>
		}
		else if(htimx == &htim2)	{
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	4a6a      	ldr	r2, [pc, #424]	; (8009cbc <ServoxInit+0x1e8>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d107      	bne.n	8009b28 <ServoxInit+0x54>
			htimx->Instance = TIM2;
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009b1e:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	2253      	movs	r2, #83	; 0x53
 8009b24:	605a      	str	r2, [r3, #4]
 8009b26:	e06c      	b.n	8009c02 <ServoxInit+0x12e>
		}
		else if(htimx == &htim3)	{
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	4a65      	ldr	r2, [pc, #404]	; (8009cc0 <ServoxInit+0x1ec>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d106      	bne.n	8009b3e <ServoxInit+0x6a>
			htimx->Instance = TIM3;
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	4a64      	ldr	r2, [pc, #400]	; (8009cc4 <ServoxInit+0x1f0>)
 8009b34:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	2253      	movs	r2, #83	; 0x53
 8009b3a:	605a      	str	r2, [r3, #4]
 8009b3c:	e061      	b.n	8009c02 <ServoxInit+0x12e>
		}
		else if(htimx == &htim4)	{
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	4a61      	ldr	r2, [pc, #388]	; (8009cc8 <ServoxInit+0x1f4>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d106      	bne.n	8009b54 <ServoxInit+0x80>
			htimx->Instance = TIM4;
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	4a60      	ldr	r2, [pc, #384]	; (8009ccc <ServoxInit+0x1f8>)
 8009b4a:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	2253      	movs	r2, #83	; 0x53
 8009b50:	605a      	str	r2, [r3, #4]
 8009b52:	e056      	b.n	8009c02 <ServoxInit+0x12e>
		}
		else if(htimx == &htim5)	{
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	4a5e      	ldr	r2, [pc, #376]	; (8009cd0 <ServoxInit+0x1fc>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d106      	bne.n	8009b6a <ServoxInit+0x96>
			htimx->Instance = TIM5;
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	4a5d      	ldr	r2, [pc, #372]	; (8009cd4 <ServoxInit+0x200>)
 8009b60:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	2253      	movs	r2, #83	; 0x53
 8009b66:	605a      	str	r2, [r3, #4]
 8009b68:	e04b      	b.n	8009c02 <ServoxInit+0x12e>
		}
		else if(htimx == &htim8)	{
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	4a5a      	ldr	r2, [pc, #360]	; (8009cd8 <ServoxInit+0x204>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d106      	bne.n	8009b80 <ServoxInit+0xac>
			htimx->Instance = TIM8;
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	4a59      	ldr	r2, [pc, #356]	; (8009cdc <ServoxInit+0x208>)
 8009b76:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	22a7      	movs	r2, #167	; 0xa7
 8009b7c:	605a      	str	r2, [r3, #4]
 8009b7e:	e040      	b.n	8009c02 <ServoxInit+0x12e>
		}
		else if(htimx == &htim9)	{
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	4a57      	ldr	r2, [pc, #348]	; (8009ce0 <ServoxInit+0x20c>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d106      	bne.n	8009b96 <ServoxInit+0xc2>
			htimx->Instance = TIM9;
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	4a56      	ldr	r2, [pc, #344]	; (8009ce4 <ServoxInit+0x210>)
 8009b8c:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	22a7      	movs	r2, #167	; 0xa7
 8009b92:	605a      	str	r2, [r3, #4]
 8009b94:	e035      	b.n	8009c02 <ServoxInit+0x12e>
		}
		else if(htimx == &htim10)	{
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	4a53      	ldr	r2, [pc, #332]	; (8009ce8 <ServoxInit+0x214>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d106      	bne.n	8009bac <ServoxInit+0xd8>
			htimx->Instance = TIM10;
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	4a52      	ldr	r2, [pc, #328]	; (8009cec <ServoxInit+0x218>)
 8009ba2:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	22a7      	movs	r2, #167	; 0xa7
 8009ba8:	605a      	str	r2, [r3, #4]
 8009baa:	e02a      	b.n	8009c02 <ServoxInit+0x12e>
		}
		else if(htimx == &htim11)	{
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	4a50      	ldr	r2, [pc, #320]	; (8009cf0 <ServoxInit+0x21c>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d106      	bne.n	8009bc2 <ServoxInit+0xee>
			htimx->Instance = TIM11;
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	4a4f      	ldr	r2, [pc, #316]	; (8009cf4 <ServoxInit+0x220>)
 8009bb8:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	22a7      	movs	r2, #167	; 0xa7
 8009bbe:	605a      	str	r2, [r3, #4]
 8009bc0:	e01f      	b.n	8009c02 <ServoxInit+0x12e>
		}
		else if(htimx == &htim12)	{
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	4a4c      	ldr	r2, [pc, #304]	; (8009cf8 <ServoxInit+0x224>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d106      	bne.n	8009bd8 <ServoxInit+0x104>
			htimx->Instance = TIM12;
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	4a4b      	ldr	r2, [pc, #300]	; (8009cfc <ServoxInit+0x228>)
 8009bce:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	2253      	movs	r2, #83	; 0x53
 8009bd4:	605a      	str	r2, [r3, #4]
 8009bd6:	e014      	b.n	8009c02 <ServoxInit+0x12e>
		}
		else if(htimx == &htim13)	{
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	4a49      	ldr	r2, [pc, #292]	; (8009d00 <ServoxInit+0x22c>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d106      	bne.n	8009bee <ServoxInit+0x11a>
			htimx->Instance = TIM13;
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	4a48      	ldr	r2, [pc, #288]	; (8009d04 <ServoxInit+0x230>)
 8009be4:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	2253      	movs	r2, #83	; 0x53
 8009bea:	605a      	str	r2, [r3, #4]
 8009bec:	e009      	b.n	8009c02 <ServoxInit+0x12e>
			}
		else if(htimx == &htim14)	{
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	4a45      	ldr	r2, [pc, #276]	; (8009d08 <ServoxInit+0x234>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d105      	bne.n	8009c02 <ServoxInit+0x12e>
			htimx->Instance = TIM14;
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	4a44      	ldr	r2, [pc, #272]	; (8009d0c <ServoxInit+0x238>)
 8009bfa:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	2253      	movs	r2, #83	; 0x53
 8009c00:	605a      	str	r2, [r3, #4]
			}


		htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	2200      	movs	r2, #0
 8009c06:	609a      	str	r2, [r3, #8]
		htimx->Init.Period = 19999;
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8009c0e:	60da      	str	r2, [r3, #12]
		htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	2200      	movs	r2, #0
 8009c14:	611a      	str	r2, [r3, #16]
		htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	2280      	movs	r2, #128	; 0x80
 8009c1a:	619a      	str	r2, [r3, #24]
		 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 8009c1c:	68b8      	ldr	r0, [r7, #8]
 8009c1e:	f00b ff53 	bl	8015ac8 <HAL_TIM_Base_Init>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d001      	beq.n	8009c2c <ServoxInit+0x158>
		  {
		    Error_Handler();
 8009c28:	f7fa fcb2 	bl	8004590 <Error_Handler>
		  }
		  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c30:	61bb      	str	r3, [r7, #24]
		  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 8009c32:	f107 0318 	add.w	r3, r7, #24
 8009c36:	4619      	mov	r1, r3
 8009c38:	68b8      	ldr	r0, [r7, #8]
 8009c3a:	f00c fab9 	bl	80161b0 <HAL_TIM_ConfigClockSource>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d001      	beq.n	8009c48 <ServoxInit+0x174>
		  {
		    Error_Handler();
 8009c44:	f7fa fca4 	bl	8004590 <Error_Handler>
		  }
		if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 8009c48:	68b8      	ldr	r0, [r7, #8]
 8009c4a:	f00b ffb0 	bl	8015bae <HAL_TIM_PWM_Init>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d001      	beq.n	8009c58 <ServoxInit+0x184>
			{
				Error_Handler();
 8009c54:	f7fa fc9c 	bl	8004590 <Error_Handler>
			}

		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	613b      	str	r3, [r7, #16]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	617b      	str	r3, [r7, #20]
		if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8009c60:	f107 0310 	add.w	r3, r7, #16
 8009c64:	4619      	mov	r1, r3
 8009c66:	68b8      	ldr	r0, [r7, #8]
 8009c68:	f00c fe9e 	bl	80169a8 <HAL_TIMEx_MasterConfigSynchronization>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d001      	beq.n	8009c76 <ServoxInit+0x1a2>
		{
			Error_Handler();
 8009c72:	f7fa fc8d 	bl	8004590 <Error_Handler>
		}


	    HAL_TIM_Base_Start(htimx);
 8009c76:	68b8      	ldr	r0, [r7, #8]
 8009c78:	f00b ff51 	bl	8015b1e <HAL_TIM_Base_Start>

	GPIOPinsInit(SERVO_GPIOx, SERVO_GPIO_Pin, GPIO_MODE_AF_PP, GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009c7c:	8879      	ldrh	r1, [r7, #2]
 8009c7e:	2301      	movs	r3, #1
 8009c80:	9300      	str	r3, [sp, #0]
 8009c82:	2302      	movs	r3, #2
 8009c84:	2202      	movs	r2, #2
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f7f7 fb3a 	bl	8001300 <GPIOPinsInit>

	servo->htimx = htimx;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	601a      	str	r2, [r3, #0]
	servo->htimx_Channel = channel;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c96:	605a      	str	r2, [r3, #4]

	PWMChannelConfig(htimx, channel , SERVO_GPIOx,SERVO_GPIO_Pin);
 8009c98:	887b      	ldrh	r3, [r7, #2]
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c9e:	68b8      	ldr	r0, [r7, #8]
 8009ca0:	f7f7 fd0e 	bl	80016c0 <PWMChannelConfig>

	servo->currentPulse = 0;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	621a      	str	r2, [r3, #32]
}
 8009caa:	bf00      	nop
 8009cac:	3728      	adds	r7, #40	; 0x28
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	20006418 	.word	0x20006418
 8009cb8:	40010000 	.word	0x40010000
 8009cbc:	2000651c 	.word	0x2000651c
 8009cc0:	200061cc 	.word	0x200061cc
 8009cc4:	40000400 	.word	0x40000400
 8009cc8:	20006008 	.word	0x20006008
 8009ccc:	40000800 	.word	0x40000800
 8009cd0:	2000618c 	.word	0x2000618c
 8009cd4:	40000c00 	.word	0x40000c00
 8009cd8:	20005fc8 	.word	0x20005fc8
 8009cdc:	40010400 	.word	0x40010400
 8009ce0:	20006458 	.word	0x20006458
 8009ce4:	40014000 	.word	0x40014000
 8009ce8:	200060e8 	.word	0x200060e8
 8009cec:	40014400 	.word	0x40014400
 8009cf0:	20006330 	.word	0x20006330
 8009cf4:	40014800 	.word	0x40014800
 8009cf8:	2000663c 	.word	0x2000663c
 8009cfc:	40001800 	.word	0x40001800
 8009d00:	200062b0 	.word	0x200062b0
 8009d04:	40001c00 	.word	0x40001c00
 8009d08:	200065fc 	.word	0x200065fc
 8009d0c:	40002000 	.word	0x40002000

08009d10 <ServoSetPulse>:
 * 						  pulse		output compare pulse to be set
 * Function Return		: None
 * Function Example		: ServoSetPulse(&SERVO1, 1000);
 */

void ServoSetPulse(SERVO_t* servo, uint32_t pulse){
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
	if(pulse < servo->SERVO_pulseMinLimit){
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	695b      	ldr	r3, [r3, #20]
 8009d1e:	683a      	ldr	r2, [r7, #0]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d204      	bcs.n	8009d2e <ServoSetPulse+0x1e>
		servo->currentPulse = servo->SERVO_pulseMinLimit;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	695a      	ldr	r2, [r3, #20]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	621a      	str	r2, [r3, #32]
 8009d2c:	e00c      	b.n	8009d48 <ServoSetPulse+0x38>
	}else if(pulse > servo->SERVO_pulseMaxLimit){
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	699b      	ldr	r3, [r3, #24]
 8009d32:	683a      	ldr	r2, [r7, #0]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d904      	bls.n	8009d42 <ServoSetPulse+0x32>
		servo->currentPulse = servo->SERVO_pulseMaxLimit;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	699a      	ldr	r2, [r3, #24]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	621a      	str	r2, [r3, #32]
 8009d40:	e002      	b.n	8009d48 <ServoSetPulse+0x38>
	}else{
		servo->currentPulse = pulse;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	683a      	ldr	r2, [r7, #0]
 8009d46:	621a      	str	r2, [r3, #32]
	}
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d106      	bne.n	8009d5e <ServoSetPulse+0x4e>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	6a12      	ldr	r2, [r2, #32]
 8009d5a:	635a      	str	r2, [r3, #52]	; 0x34

}
 8009d5c:	e01b      	b.n	8009d96 <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	2b04      	cmp	r3, #4
 8009d64:	d106      	bne.n	8009d74 <ServoSetPulse+0x64>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a1b      	ldr	r3, [r3, #32]
 8009d70:	6393      	str	r3, [r2, #56]	; 0x38
}
 8009d72:	e010      	b.n	8009d96 <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	2b08      	cmp	r3, #8
 8009d7a:	d106      	bne.n	8009d8a <ServoSetPulse+0x7a>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a1b      	ldr	r3, [r3, #32]
 8009d86:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8009d88:	e005      	b.n	8009d96 <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6a1b      	ldr	r3, [r3, #32]
 8009d94:	6413      	str	r3, [r2, #64]	; 0x40
}
 8009d96:	bf00      	nop
 8009d98:	370c      	adds	r7, #12
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr

08009da2 <ServoInitPulseLimit>:
	servo->TIMx_Compare = servo->SERVO_pulse0degree + (servo->SERVO_pulse1degree)*angle;
	servo->currentPulse = servo->TIMx_Compare;
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->TIMx_Compare);
}

void ServoInitPulseLimit(SERVO_t* servo, uint32_t MinPulse, uint32_t MaxPulse){
 8009da2:	b480      	push	{r7}
 8009da4:	b085      	sub	sp, #20
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	60f8      	str	r0, [r7, #12]
 8009daa:	60b9      	str	r1, [r7, #8]
 8009dac:	607a      	str	r2, [r7, #4]
	servo->SERVO_pulseMinLimit = MinPulse;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	68ba      	ldr	r2, [r7, #8]
 8009db2:	615a      	str	r2, [r3, #20]
	servo->SERVO_pulseMaxLimit = MaxPulse;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	619a      	str	r2, [r3, #24]
}
 8009dba:	bf00      	nop
 8009dbc:	3714      	adds	r7, #20
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr
	...

08009dc8 <SPI1_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI1_IRQHandler(void)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi1);
 8009dcc:	4802      	ldr	r0, [pc, #8]	; (8009dd8 <SPI1_IRQHandler+0x10>)
 8009dce:	f00b fd5d 	bl	801588c <HAL_SPI_IRQHandler>
}
 8009dd2:	bf00      	nop
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	2000a08c 	.word	0x2000a08c

08009ddc <SPI2_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI2_IRQHandler(void)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi2);
 8009de0:	4802      	ldr	r0, [pc, #8]	; (8009dec <SPI2_IRQHandler+0x10>)
 8009de2:	f00b fd53 	bl	801588c <HAL_SPI_IRQHandler>
}
 8009de6:	bf00      	nop
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	20006d94 	.word	0x20006d94

08009df0 <SPI3_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI3_IRQHandler(void)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi3);
 8009df4:	4802      	ldr	r0, [pc, #8]	; (8009e00 <SPI3_IRQHandler+0x10>)
 8009df6:	f00b fd49 	bl	801588c <HAL_SPI_IRQHandler>
}
 8009dfa:	bf00      	nop
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	20007c44 	.word	0x20007c44

08009e04 <Initialize>:
uint8_t mailbox = 0, buf2_flag = 0, buf2_flagC2 = 0;

/************************************************/
/*		 	 	Functions		       		  	*/
/************************************************/
void Initialize(){
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af04      	add	r7, sp, #16
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8009e0a:	f007 f969 	bl	80110e0 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8009e0e:	f7f8 ffe7 	bl	8002de0 <SystemClock_Config>

	/* Initialize all configured peripherals */
	GPIOPinsInit (LED1_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009e12:	2301      	movs	r3, #1
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	2302      	movs	r3, #2
 8009e18:	2201      	movs	r2, #1
 8009e1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009e1e:	48c6      	ldr	r0, [pc, #792]	; (800a138 <Initialize+0x334>)
 8009e20:	f7f7 fa6e 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (LED2_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009e24:	2301      	movs	r3, #1
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	2302      	movs	r3, #2
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009e30:	48c1      	ldr	r0, [pc, #772]	; (800a138 <Initialize+0x334>)
 8009e32:	f7f7 fa65 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (LED3_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009e36:	2301      	movs	r3, #1
 8009e38:	9300      	str	r3, [sp, #0]
 8009e3a:	2302      	movs	r3, #2
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009e42:	48bd      	ldr	r0, [pc, #756]	; (800a138 <Initialize+0x334>)
 8009e44:	f7f7 fa5c 	bl	8001300 <GPIOPinsInit>

	GPIOPinsInit (PB1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009e48:	2301      	movs	r3, #1
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	2302      	movs	r3, #2
 8009e4e:	2200      	movs	r2, #0
 8009e50:	2180      	movs	r1, #128	; 0x80
 8009e52:	48ba      	ldr	r0, [pc, #744]	; (800a13c <Initialize+0x338>)
 8009e54:	f7f7 fa54 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (PB2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009e58:	2301      	movs	r3, #1
 8009e5a:	9300      	str	r3, [sp, #0]
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	2200      	movs	r2, #0
 8009e60:	2101      	movs	r1, #1
 8009e62:	48b7      	ldr	r0, [pc, #732]	; (800a140 <Initialize+0x33c>)
 8009e64:	f7f7 fa4c 	bl	8001300 <GPIOPinsInit>

	/*Normal IOs*/
	GPIOPinsInit (IP1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009e68:	2301      	movs	r3, #1
 8009e6a:	9300      	str	r3, [sp, #0]
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009e74:	48b2      	ldr	r0, [pc, #712]	; (800a140 <Initialize+0x33c>)
 8009e76:	f7f7 fa43 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	2301      	movs	r3, #1
 8009e80:	2200      	movs	r2, #0
 8009e82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009e86:	48ae      	ldr	r0, [pc, #696]	; (800a140 <Initialize+0x33c>)
 8009e88:	f7f7 fa3a 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	9300      	str	r3, [sp, #0]
 8009e90:	2301      	movs	r3, #1
 8009e92:	2200      	movs	r2, #0
 8009e94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009e98:	48a9      	ldr	r0, [pc, #676]	; (800a140 <Initialize+0x33c>)
 8009e9a:	f7f7 fa31 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	9300      	str	r3, [sp, #0]
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009eaa:	48a5      	ldr	r0, [pc, #660]	; (800a140 <Initialize+0x33c>)
 8009eac:	f7f7 fa28 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	9300      	str	r3, [sp, #0]
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009ebc:	489f      	ldr	r0, [pc, #636]	; (800a13c <Initialize+0x338>)
 8009ebe:	f7f7 fa1f 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	9300      	str	r3, [sp, #0]
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009ece:	489b      	ldr	r0, [pc, #620]	; (800a13c <Initialize+0x338>)
 8009ed0:	f7f7 fa16 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP7_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	2301      	movs	r3, #1
 8009eda:	2200      	movs	r2, #0
 8009edc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009ee0:	4898      	ldr	r0, [pc, #608]	; (800a144 <Initialize+0x340>)
 8009ee2:	f7f7 fa0d 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP8_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	9300      	str	r3, [sp, #0]
 8009eea:	2301      	movs	r3, #1
 8009eec:	2200      	movs	r2, #0
 8009eee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009ef2:	4894      	ldr	r0, [pc, #592]	; (800a144 <Initialize+0x340>)
 8009ef4:	f7f7 fa04 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP9_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009ef8:	2301      	movs	r3, #1
 8009efa:	9300      	str	r3, [sp, #0]
 8009efc:	2301      	movs	r3, #1
 8009efe:	2200      	movs	r2, #0
 8009f00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009f04:	488c      	ldr	r0, [pc, #560]	; (800a138 <Initialize+0x334>)
 8009f06:	f7f7 f9fb 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP10_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	9300      	str	r3, [sp, #0]
 8009f0e:	2301      	movs	r3, #1
 8009f10:	2200      	movs	r2, #0
 8009f12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009f16:	488c      	ldr	r0, [pc, #560]	; (800a148 <Initialize+0x344>)
 8009f18:	f7f7 f9f2 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP11_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	9300      	str	r3, [sp, #0]
 8009f20:	2301      	movs	r3, #1
 8009f22:	2200      	movs	r2, #0
 8009f24:	2108      	movs	r1, #8
 8009f26:	4887      	ldr	r0, [pc, #540]	; (800a144 <Initialize+0x340>)
 8009f28:	f7f7 f9ea 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP12_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	2301      	movs	r3, #1
 8009f32:	2200      	movs	r2, #0
 8009f34:	2110      	movs	r1, #16
 8009f36:	4883      	ldr	r0, [pc, #524]	; (800a144 <Initialize+0x340>)
 8009f38:	f7f7 f9e2 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP13_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	9300      	str	r3, [sp, #0]
 8009f40:	2301      	movs	r3, #1
 8009f42:	2200      	movs	r2, #0
 8009f44:	2180      	movs	r1, #128	; 0x80
 8009f46:	487f      	ldr	r0, [pc, #508]	; (800a144 <Initialize+0x340>)
 8009f48:	f7f7 f9da 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP14_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	9300      	str	r3, [sp, #0]
 8009f50:	2301      	movs	r3, #1
 8009f52:	2200      	movs	r2, #0
 8009f54:	2120      	movs	r1, #32
 8009f56:	4879      	ldr	r0, [pc, #484]	; (800a13c <Initialize+0x338>)
 8009f58:	f7f7 f9d2 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP15_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	9300      	str	r3, [sp, #0]
 8009f60:	2301      	movs	r3, #1
 8009f62:	2200      	movs	r2, #0
 8009f64:	2140      	movs	r1, #64	; 0x40
 8009f66:	4875      	ldr	r0, [pc, #468]	; (800a13c <Initialize+0x338>)
 8009f68:	f7f7 f9ca 	bl	8001300 <GPIOPinsInit>

	GPIOPinsInit (IP16_Analog1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	9300      	str	r3, [sp, #0]
 8009f70:	2301      	movs	r3, #1
 8009f72:	2200      	movs	r2, #0
 8009f74:	2101      	movs	r1, #1
 8009f76:	4870      	ldr	r0, [pc, #448]	; (800a138 <Initialize+0x334>)
 8009f78:	f7f7 f9c2 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP17_Analog2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	2301      	movs	r3, #1
 8009f82:	2200      	movs	r2, #0
 8009f84:	2102      	movs	r1, #2
 8009f86:	486c      	ldr	r0, [pc, #432]	; (800a138 <Initialize+0x334>)
 8009f88:	f7f7 f9ba 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP18_Analog3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	9300      	str	r3, [sp, #0]
 8009f90:	2301      	movs	r3, #1
 8009f92:	2200      	movs	r2, #0
 8009f94:	2104      	movs	r1, #4
 8009f96:	4868      	ldr	r0, [pc, #416]	; (800a138 <Initialize+0x334>)
 8009f98:	f7f7 f9b2 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP19_Analog4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	9300      	str	r3, [sp, #0]
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	2108      	movs	r1, #8
 8009fa6:	4864      	ldr	r0, [pc, #400]	; (800a138 <Initialize+0x334>)
 8009fa8:	f7f7 f9aa 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP20_Analog5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009fac:	2301      	movs	r3, #1
 8009fae:	9300      	str	r3, [sp, #0]
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	2110      	movs	r1, #16
 8009fb6:	4860      	ldr	r0, [pc, #384]	; (800a138 <Initialize+0x334>)
 8009fb8:	f7f7 f9a2 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP21_Analog6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	9300      	str	r3, [sp, #0]
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	2120      	movs	r1, #32
 8009fc6:	485c      	ldr	r0, [pc, #368]	; (800a138 <Initialize+0x334>)
 8009fc8:	f7f7 f99a 	bl	8001300 <GPIOPinsInit>

	//Unused peripheral pins can be used as GPIO Input or Output
//	GPIOPinsInit (UART3_Rx, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);

//	MUXInit(&MUX, MUX1_INPUT_PIN, MUX1_S0_PIN, MUX1_S1_PIN, MUX1_S2_PIN);
	SHIFTREGInit (&SR, CASCADE_1, SR_SCK_PIN, SR_RCK_PIN, SR_SI_PIN);
 8009fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fd0:	9303      	str	r3, [sp, #12]
 8009fd2:	4b5b      	ldr	r3, [pc, #364]	; (800a140 <Initialize+0x33c>)
 8009fd4:	9302      	str	r3, [sp, #8]
 8009fd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fda:	9301      	str	r3, [sp, #4]
 8009fdc:	4b58      	ldr	r3, [pc, #352]	; (800a140 <Initialize+0x33c>)
 8009fde:	9300      	str	r3, [sp, #0]
 8009fe0:	2380      	movs	r3, #128	; 0x80
 8009fe2:	4a57      	ldr	r2, [pc, #348]	; (800a140 <Initialize+0x33c>)
 8009fe4:	2101      	movs	r1, #1
 8009fe6:	4859      	ldr	r0, [pc, #356]	; (800a14c <Initialize+0x348>)
 8009fe8:	f7f7 fede 	bl	8001da8 <SHIFTREGInit>

	//https://stackoverflow.com/questions/50243996/what-are-valid-values-of-hal-nvic-setpriority-when-using-stm32-and-freertos
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009fec:	2003      	movs	r0, #3
 8009fee:	f008 f836 	bl	801205e <HAL_NVIC_SetPriorityGrouping>


	/*************** Set Interrupt Priorities in BIOS/priorities.h ***************/

	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 8009ff2:	4b57      	ldr	r3, [pc, #348]	; (800a150 <Initialize+0x34c>)
 8009ff4:	2208      	movs	r2, #8
 8009ff6:	4957      	ldr	r1, [pc, #348]	; (800a154 <Initialize+0x350>)
 8009ff8:	4857      	ldr	r0, [pc, #348]	; (800a158 <Initialize+0x354>)
 8009ffa:	f7f9 fe33 	bl	8003c64 <I2CX_DMA_RX_Init>
	I2CxInit (&hi2c2,main_board_1, CLOCK_SPEED_100KHz,ENABLE);
 8009ffe:	2301      	movs	r3, #1
 800a000:	4a56      	ldr	r2, [pc, #344]	; (800a15c <Initialize+0x358>)
 800a002:	2108      	movs	r1, #8
 800a004:	4856      	ldr	r0, [pc, #344]	; (800a160 <Initialize+0x35c>)
 800a006:	f7f9 fd7b 	bl	8003b00 <I2CxInit>

	//Servo Driver - recommended to use 100KHz I2C as 400KHz hang frequently
//	I2CxInit (&hi2c3,main_board_1, CLOCK_SPEED_100KHz,DISABLE);
//	ServoDriverInit(&srv_drv,&hi2c3,0x40);

	UARTx_DMA_Rx_Init(&huart2, &hdma_usart2_rx, 115200);//Bluebee Tuning
 800a00a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a00e:	4955      	ldr	r1, [pc, #340]	; (800a164 <Initialize+0x360>)
 800a010:	4855      	ldr	r0, [pc, #340]	; (800a168 <Initialize+0x364>)
 800a012:	f7f9 f9f3 	bl	80033fc <UARTx_DMA_Rx_Init>
//	UARTx_DMA_Rx_Init(&huart4, &hdma_uart4_rx, 115200); //Jetson
	UARTInit(&huart3, 115200, ENABLE); // ROS UART
 800a016:	2201      	movs	r2, #1
 800a018:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800a01c:	4853      	ldr	r0, [pc, #332]	; (800a16c <Initialize+0x368>)
 800a01e:	f7f9 f8e5 	bl	80031ec <UARTInit>
	UARTInit(&huart4, 115200, ENABLE); // ROS UART
 800a022:	2201      	movs	r2, #1
 800a024:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800a028:	4851      	ldr	r0, [pc, #324]	; (800a170 <Initialize+0x36c>)
 800a02a:	f7f9 f8df 	bl	80031ec <UARTInit>
	UARTInit(&huart5, 115200, ENABLE);
 800a02e:	2201      	movs	r2, #1
 800a030:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800a034:	484f      	ldr	r0, [pc, #316]	; (800a174 <Initialize+0x370>)
 800a036:	f7f9 f8d9 	bl	80031ec <UARTInit>

	QEIInit(&htim1);
 800a03a:	484f      	ldr	r0, [pc, #316]	; (800a178 <Initialize+0x374>)
 800a03c:	f7f7 fccc 	bl	80019d8 <QEIInit>
	QEIInit(&htim4);
 800a040:	484e      	ldr	r0, [pc, #312]	; (800a17c <Initialize+0x378>)
 800a042:	f7f7 fcc9 	bl	80019d8 <QEIInit>
	QEIInit(&htim8);
 800a046:	484e      	ldr	r0, [pc, #312]	; (800a180 <Initialize+0x37c>)
 800a048:	f7f7 fcc6 	bl	80019d8 <QEIInit>

	CANxInit(&hcan1,4,CAN_FILTER_FIFO0,0,0,0,CAN_500KHz);
 800a04c:	2300      	movs	r3, #0
 800a04e:	9302      	str	r3, [sp, #8]
 800a050:	2300      	movs	r3, #0
 800a052:	9301      	str	r3, [sp, #4]
 800a054:	2300      	movs	r3, #0
 800a056:	9300      	str	r3, [sp, #0]
 800a058:	2300      	movs	r3, #0
 800a05a:	2200      	movs	r2, #0
 800a05c:	2104      	movs	r1, #4
 800a05e:	4849      	ldr	r0, [pc, #292]	; (800a184 <Initialize+0x380>)
 800a060:	f7f9 fad8 	bl	8003614 <CANxInit>
	CANxInit(&hcan2,4,CAN_FILTER_FIFO1,0,0,14,CAN_500KHz);
 800a064:	2300      	movs	r3, #0
 800a066:	9302      	str	r3, [sp, #8]
 800a068:	230e      	movs	r3, #14
 800a06a:	9301      	str	r3, [sp, #4]
 800a06c:	2300      	movs	r3, #0
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	2300      	movs	r3, #0
 800a072:	2201      	movs	r2, #1
 800a074:	2104      	movs	r1, #4
 800a076:	4844      	ldr	r0, [pc, #272]	; (800a188 <Initialize+0x384>)
 800a078:	f7f9 facc 	bl	8003614 <CANxInit>

	PWMTimeBaseInit(&htim3, 19999, 83);
 800a07c:	2253      	movs	r2, #83	; 0x53
 800a07e:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800a082:	4842      	ldr	r0, [pc, #264]	; (800a18c <Initialize+0x388>)
 800a084:	f7f7 fa36 	bl	80014f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 800a088:	2301      	movs	r3, #1
 800a08a:	4a2c      	ldr	r2, [pc, #176]	; (800a13c <Initialize+0x338>)
 800a08c:	2108      	movs	r1, #8
 800a08e:	483f      	ldr	r0, [pc, #252]	; (800a18c <Initialize+0x388>)
 800a090:	f7f7 fb16 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim3, TIM_CHANNEL_4 , TIM3_CHANNEL4_PIN);
 800a094:	2302      	movs	r3, #2
 800a096:	4a29      	ldr	r2, [pc, #164]	; (800a13c <Initialize+0x338>)
 800a098:	210c      	movs	r1, #12
 800a09a:	483c      	ldr	r0, [pc, #240]	; (800a18c <Initialize+0x388>)
 800a09c:	f7f7 fb10 	bl	80016c0 <PWMChannelConfig>

	PWMTimeBaseInit(&htim5, 19999, 83);
 800a0a0:	2253      	movs	r2, #83	; 0x53
 800a0a2:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800a0a6:	483a      	ldr	r0, [pc, #232]	; (800a190 <Initialize+0x38c>)
 800a0a8:	f7f7 fa24 	bl	80014f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim5, TIM_CHANNEL_1, TIM5_CHANNEL1_PIN);
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	4a26      	ldr	r2, [pc, #152]	; (800a148 <Initialize+0x344>)
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	4837      	ldr	r0, [pc, #220]	; (800a190 <Initialize+0x38c>)
 800a0b4:	f7f7 fb04 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_2, TIM5_CHANNEL2_PIN);
 800a0b8:	2302      	movs	r3, #2
 800a0ba:	4a23      	ldr	r2, [pc, #140]	; (800a148 <Initialize+0x344>)
 800a0bc:	2104      	movs	r1, #4
 800a0be:	4834      	ldr	r0, [pc, #208]	; (800a190 <Initialize+0x38c>)
 800a0c0:	f7f7 fafe 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_3, TIM5_CHANNEL3_PIN);
 800a0c4:	2304      	movs	r3, #4
 800a0c6:	4a20      	ldr	r2, [pc, #128]	; (800a148 <Initialize+0x344>)
 800a0c8:	2108      	movs	r1, #8
 800a0ca:	4831      	ldr	r0, [pc, #196]	; (800a190 <Initialize+0x38c>)
 800a0cc:	f7f7 faf8 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_4, TIM5_CHANNEL4_PIN);
 800a0d0:	2308      	movs	r3, #8
 800a0d2:	4a1d      	ldr	r2, [pc, #116]	; (800a148 <Initialize+0x344>)
 800a0d4:	210c      	movs	r1, #12
 800a0d6:	482e      	ldr	r0, [pc, #184]	; (800a190 <Initialize+0x38c>)
 800a0d8:	f7f7 faf2 	bl	80016c0 <PWMChannelConfig>

	PWMTimeBaseInit(&htim9, 19999, 167);
 800a0dc:	22a7      	movs	r2, #167	; 0xa7
 800a0de:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800a0e2:	482c      	ldr	r0, [pc, #176]	; (800a194 <Initialize+0x390>)
 800a0e4:	f7f7 fa06 	bl	80014f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim9, TIM_CHANNEL_1, TIM9_CHANNEL1_PIN);
 800a0e8:	2320      	movs	r3, #32
 800a0ea:	4a15      	ldr	r2, [pc, #84]	; (800a140 <Initialize+0x33c>)
 800a0ec:	2100      	movs	r1, #0
 800a0ee:	4829      	ldr	r0, [pc, #164]	; (800a194 <Initialize+0x390>)
 800a0f0:	f7f7 fae6 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim9, TIM_CHANNEL_2, TIM9_CHANNEL2_PIN);
 800a0f4:	2340      	movs	r3, #64	; 0x40
 800a0f6:	4a12      	ldr	r2, [pc, #72]	; (800a140 <Initialize+0x33c>)
 800a0f8:	2104      	movs	r1, #4
 800a0fa:	4826      	ldr	r0, [pc, #152]	; (800a194 <Initialize+0x390>)
 800a0fc:	f7f7 fae0 	bl	80016c0 <PWMChannelConfig>


	BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 800a100:	2380      	movs	r3, #128	; 0x80
 800a102:	9302      	str	r3, [sp, #8]
 800a104:	2340      	movs	r3, #64	; 0x40
 800a106:	9301      	str	r3, [sp, #4]
 800a108:	4b23      	ldr	r3, [pc, #140]	; (800a198 <Initialize+0x394>)
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	2300      	movs	r3, #0
 800a10e:	220c      	movs	r2, #12
 800a110:	491e      	ldr	r1, [pc, #120]	; (800a18c <Initialize+0x388>)
 800a112:	4822      	ldr	r0, [pc, #136]	; (800a19c <Initialize+0x398>)
 800a114:	f7f6 ffb0 	bl	8001078 <BDCInit>
	BDCInit(&BDC2, &htim3, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[1]), Bit4, Bit5);
 800a118:	2320      	movs	r3, #32
 800a11a:	9302      	str	r3, [sp, #8]
 800a11c:	2310      	movs	r3, #16
 800a11e:	9301      	str	r3, [sp, #4]
 800a120:	4b1d      	ldr	r3, [pc, #116]	; (800a198 <Initialize+0x394>)
 800a122:	9300      	str	r3, [sp, #0]
 800a124:	2300      	movs	r3, #0
 800a126:	2208      	movs	r2, #8
 800a128:	4918      	ldr	r1, [pc, #96]	; (800a18c <Initialize+0x388>)
 800a12a:	481d      	ldr	r0, [pc, #116]	; (800a1a0 <Initialize+0x39c>)
 800a12c:	f7f6 ffa4 	bl	8001078 <BDCInit>
	BDCInit(&BDC3, &htim9, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[1]), Bit2, Bit3);
 800a130:	2308      	movs	r3, #8
 800a132:	9302      	str	r3, [sp, #8]
 800a134:	2304      	movs	r3, #4
 800a136:	e035      	b.n	800a1a4 <Initialize+0x3a0>
 800a138:	40020800 	.word	0x40020800
 800a13c:	40020400 	.word	0x40020400
 800a140:	40021000 	.word	0x40021000
 800a144:	40020c00 	.word	0x40020c00
 800a148:	40020000 	.word	0x40020000
 800a14c:	200099fc 	.word	0x200099fc
 800a150:	00061a80 	.word	0x00061a80
 800a154:	2000a398 	.word	0x2000a398
 800a158:	20007050 	.word	0x20007050
 800a15c:	000186a0 	.word	0x000186a0
 800a160:	200070ac 	.word	0x200070ac
 800a164:	20005f64 	.word	0x20005f64
 800a168:	2000655c 	.word	0x2000655c
 800a16c:	200060a8 	.word	0x200060a8
 800a170:	200064dc 	.word	0x200064dc
 800a174:	20006210 	.word	0x20006210
 800a178:	20006418 	.word	0x20006418
 800a17c:	20006008 	.word	0x20006008
 800a180:	20005fc8 	.word	0x20005fc8
 800a184:	2000a370 	.word	0x2000a370
 800a188:	20009470 	.word	0x20009470
 800a18c:	200061cc 	.word	0x200061cc
 800a190:	2000618c 	.word	0x2000618c
 800a194:	20006458 	.word	0x20006458
 800a198:	20009a18 	.word	0x20009a18
 800a19c:	2000a91c 	.word	0x2000a91c
 800a1a0:	20007bd4 	.word	0x20007bd4
 800a1a4:	9301      	str	r3, [sp, #4]
 800a1a6:	4b23      	ldr	r3, [pc, #140]	; (800a234 <Initialize+0x430>)
 800a1a8:	9300      	str	r3, [sp, #0]
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	4922      	ldr	r1, [pc, #136]	; (800a238 <Initialize+0x434>)
 800a1b0:	4822      	ldr	r0, [pc, #136]	; (800a23c <Initialize+0x438>)
 800a1b2:	f7f6 ff61 	bl	8001078 <BDCInit>
	BDCInit(&BDC4, &htim9, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[1]), Bit0, Bit1);
 800a1b6:	2302      	movs	r3, #2
 800a1b8:	9302      	str	r3, [sp, #8]
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	9301      	str	r3, [sp, #4]
 800a1be:	4b1d      	ldr	r3, [pc, #116]	; (800a234 <Initialize+0x430>)
 800a1c0:	9300      	str	r3, [sp, #0]
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	2204      	movs	r2, #4
 800a1c6:	491c      	ldr	r1, [pc, #112]	; (800a238 <Initialize+0x434>)
 800a1c8:	481d      	ldr	r0, [pc, #116]	; (800a240 <Initialize+0x43c>)
 800a1ca:	f7f6 ff55 	bl	8001078 <BDCInit>
	BDCInit(&BDC5, &htim5, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[0]), Bit6, Bit7);
 800a1ce:	2380      	movs	r3, #128	; 0x80
 800a1d0:	9302      	str	r3, [sp, #8]
 800a1d2:	2340      	movs	r3, #64	; 0x40
 800a1d4:	9301      	str	r3, [sp, #4]
 800a1d6:	4b1b      	ldr	r3, [pc, #108]	; (800a244 <Initialize+0x440>)
 800a1d8:	9300      	str	r3, [sp, #0]
 800a1da:	2300      	movs	r3, #0
 800a1dc:	220c      	movs	r2, #12
 800a1de:	491a      	ldr	r1, [pc, #104]	; (800a248 <Initialize+0x444>)
 800a1e0:	481a      	ldr	r0, [pc, #104]	; (800a24c <Initialize+0x448>)
 800a1e2:	f7f6 ff49 	bl	8001078 <BDCInit>
	BDCInit(&BDC6, &htim5, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[0]), Bit4, Bit5);
 800a1e6:	2320      	movs	r3, #32
 800a1e8:	9302      	str	r3, [sp, #8]
 800a1ea:	2310      	movs	r3, #16
 800a1ec:	9301      	str	r3, [sp, #4]
 800a1ee:	4b15      	ldr	r3, [pc, #84]	; (800a244 <Initialize+0x440>)
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	2208      	movs	r2, #8
 800a1f6:	4914      	ldr	r1, [pc, #80]	; (800a248 <Initialize+0x444>)
 800a1f8:	4815      	ldr	r0, [pc, #84]	; (800a250 <Initialize+0x44c>)
 800a1fa:	f7f6 ff3d 	bl	8001078 <BDCInit>
	BDCInit(&BDC7, &htim5, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[0]), Bit2, Bit3);
 800a1fe:	2308      	movs	r3, #8
 800a200:	9302      	str	r3, [sp, #8]
 800a202:	2304      	movs	r3, #4
 800a204:	9301      	str	r3, [sp, #4]
 800a206:	4b0f      	ldr	r3, [pc, #60]	; (800a244 <Initialize+0x440>)
 800a208:	9300      	str	r3, [sp, #0]
 800a20a:	2300      	movs	r3, #0
 800a20c:	2204      	movs	r2, #4
 800a20e:	490e      	ldr	r1, [pc, #56]	; (800a248 <Initialize+0x444>)
 800a210:	4810      	ldr	r0, [pc, #64]	; (800a254 <Initialize+0x450>)
 800a212:	f7f6 ff31 	bl	8001078 <BDCInit>
	BDCInit(&BDC8, &htim5, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[0]), Bit0, Bit1);
 800a216:	2302      	movs	r3, #2
 800a218:	9302      	str	r3, [sp, #8]
 800a21a:	2301      	movs	r3, #1
 800a21c:	9301      	str	r3, [sp, #4]
 800a21e:	4b09      	ldr	r3, [pc, #36]	; (800a244 <Initialize+0x440>)
 800a220:	9300      	str	r3, [sp, #0]
 800a222:	2300      	movs	r3, #0
 800a224:	2200      	movs	r2, #0
 800a226:	4908      	ldr	r1, [pc, #32]	; (800a248 <Initialize+0x444>)
 800a228:	480b      	ldr	r0, [pc, #44]	; (800a258 <Initialize+0x454>)
 800a22a:	f7f6 ff25 	bl	8001078 <BDCInit>

//	VESCInit(31920, 7, 0.0037, VESC1, &vesc1);

//	SPIx_DMA_TX_Init(&hspi1, &hdma_spi1_tx, SPI1_NSS_PIN, SPI_MODE_MASTER);
//	GPIOPinsInit (SPI1_MISO_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
}
 800a22e:	bf00      	nop
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}
 800a234:	20009a18 	.word	0x20009a18
 800a238:	20006458 	.word	0x20006458
 800a23c:	2000710c 	.word	0x2000710c
 800a240:	20009ad4 	.word	0x20009ad4
 800a244:	20009a14 	.word	0x20009a14
 800a248:	2000618c 	.word	0x2000618c
 800a24c:	2000a798 	.word	0x2000a798
 800a250:	20009b54 	.word	0x20009b54
 800a254:	20009b78 	.word	0x20009b78
 800a258:	200077ec 	.word	0x200077ec

0800a25c <CAN1_RX0_IRQHandler>:



void CAN1_RX0_IRQHandler()
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 800a260:	4802      	ldr	r0, [pc, #8]	; (800a26c <CAN1_RX0_IRQHandler+0x10>)
 800a262:	f007 fbe7 	bl	8011a34 <HAL_CAN_IRQHandler>

}
 800a266:	bf00      	nop
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	2000a370 	.word	0x2000a370

0800a270 <CAN2_RX1_IRQHandler>:

void CAN2_RX1_IRQHandler()
{
 800a270:	b580      	push	{r7, lr}
 800a272:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan2);
 800a274:	4802      	ldr	r0, [pc, #8]	; (800a280 <CAN2_RX1_IRQHandler+0x10>)
 800a276:	f007 fbdd 	bl	8011a34 <HAL_CAN_IRQHandler>

}
 800a27a:	bf00      	nop
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	20009470 	.word	0x20009470

0800a284 <CAN_PROCESS>:


void CAN_PROCESS(PACKET_t packet_src){
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	4603      	mov	r3, r0
 800a28c:	71fb      	strb	r3, [r7, #7]

	switch(packet_src){
 800a28e:	79fb      	ldrb	r3, [r7, #7]
 800a290:	2b02      	cmp	r3, #2
 800a292:	d008      	beq.n	800a2a6 <CAN_PROCESS+0x22>
 800a294:	2b02      	cmp	r3, #2
 800a296:	dc36      	bgt.n	800a306 <CAN_PROCESS+0x82>
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d007      	beq.n	800a2ac <CAN_PROCESS+0x28>
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d132      	bne.n	800a306 <CAN_PROCESS+0x82>

	case VESC_PACKET:
		decode_VESC();
 800a2a0:	f004 f9e0 	bl	800e664 <decode_VESC>
		break;
 800a2a4:	e02f      	b.n	800a306 <CAN_PROCESS+0x82>

	case ODRIVE_PACKET:
		OdriveCAN_Handler();
 800a2a6:	f7fa fe89 	bl	8004fbc <OdriveCAN_Handler>
		break;
 800a2aa:	e02c      	b.n	800a306 <CAN_PROCESS+0x82>

	case RNS_PACKET:

		if(insData_receive[0] == 1){
 800a2ac:	4b18      	ldr	r3, [pc, #96]	; (800a310 <CAN_PROCESS+0x8c>)
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d107      	bne.n	800a2c4 <CAN_PROCESS+0x40>
			rns.RNS_data.common_instruction = insData_receive[1];
 800a2b4:	4b16      	ldr	r3, [pc, #88]	; (800a310 <CAN_PROCESS+0x8c>)
 800a2b6:	785a      	ldrb	r2, [r3, #1]
 800a2b8:	4b16      	ldr	r3, [pc, #88]	; (800a314 <CAN_PROCESS+0x90>)
 800a2ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			insData_receive[0]=2;
 800a2be:	4b14      	ldr	r3, [pc, #80]	; (800a310 <CAN_PROCESS+0x8c>)
 800a2c0:	2202      	movs	r2, #2
 800a2c2:	701a      	strb	r2, [r3, #0]
		}
		if(insData_receive[0] == 17){
 800a2c4:	4b12      	ldr	r3, [pc, #72]	; (800a310 <CAN_PROCESS+0x8c>)
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	2b11      	cmp	r3, #17
 800a2ca:	d11b      	bne.n	800a304 <CAN_PROCESS+0x80>
			if(buf2_flag == 1){
 800a2cc:	4b12      	ldr	r3, [pc, #72]	; (800a318 <CAN_PROCESS+0x94>)
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d117      	bne.n	800a304 <CAN_PROCESS+0x80>
				rns.RNS_data.common_instruction = insData_receive[1];
 800a2d4:	4b0e      	ldr	r3, [pc, #56]	; (800a310 <CAN_PROCESS+0x8c>)
 800a2d6:	785a      	ldrb	r2, [r3, #1]
 800a2d8:	4b0e      	ldr	r3, [pc, #56]	; (800a314 <CAN_PROCESS+0x90>)
 800a2da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				rns.RNS_data.common_buffer[0].data = buf1_receive[0].data;
 800a2de:	4b0f      	ldr	r3, [pc, #60]	; (800a31c <CAN_PROCESS+0x98>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a0c      	ldr	r2, [pc, #48]	; (800a314 <CAN_PROCESS+0x90>)
 800a2e4:	6553      	str	r3, [r2, #84]	; 0x54
				rns.RNS_data.common_buffer[1].data = buf1_receive[1].data;
 800a2e6:	4b0d      	ldr	r3, [pc, #52]	; (800a31c <CAN_PROCESS+0x98>)
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	4a0a      	ldr	r2, [pc, #40]	; (800a314 <CAN_PROCESS+0x90>)
 800a2ec:	6593      	str	r3, [r2, #88]	; 0x58
				rns.RNS_data.common_buffer[2].data = buf2_receive[0].data;
 800a2ee:	4b0c      	ldr	r3, [pc, #48]	; (800a320 <CAN_PROCESS+0x9c>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a08      	ldr	r2, [pc, #32]	; (800a314 <CAN_PROCESS+0x90>)
 800a2f4:	65d3      	str	r3, [r2, #92]	; 0x5c
				rns.RNS_data.common_buffer[3].data = buf2_receive[1].data;
 800a2f6:	4b0a      	ldr	r3, [pc, #40]	; (800a320 <CAN_PROCESS+0x9c>)
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	4a06      	ldr	r2, [pc, #24]	; (800a314 <CAN_PROCESS+0x90>)
 800a2fc:	6613      	str	r3, [r2, #96]	; 0x60
				insData_receive[0]=3;
 800a2fe:	4b04      	ldr	r3, [pc, #16]	; (800a310 <CAN_PROCESS+0x8c>)
 800a300:	2203      	movs	r2, #3
 800a302:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 800a304:	bf00      	nop
	}
}
 800a306:	bf00      	nop
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	20006f18 	.word	0x20006f18
 800a314:	20009378 	.word	0x20009378
 800a318:	20000298 	.word	0x20000298
 800a31c:	2000a07c 	.word	0x2000a07c
 800a320:	2000a1d8 	.word	0x2000a1d8

0800a324 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a324:	b5b0      	push	{r4, r5, r7, lr}
 800a326:	b08c      	sub	sp, #48	; 0x30
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
	PACKET_t source;
	uint8_t aData[8];
	uint8_t rns_can = 1;
 800a32c:	2301      	movs	r3, #1
 800a32e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if(hcan == &hcan1){
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4aaa      	ldr	r2, [pc, #680]	; (800a5e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 800a336:	4293      	cmp	r3, r2
 800a338:	f040 80b4 	bne.w	800a4a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN1RxMessage, aData);
 800a33c:	f107 030c 	add.w	r3, r7, #12
 800a340:	4aa8      	ldr	r2, [pc, #672]	; (800a5e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a342:	2100      	movs	r1, #0
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f007 fa3d 	bl	80117c4 <HAL_CAN_GetRxMessage>
		//	sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);

		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 800a34a:	4ba6      	ldr	r3, [pc, #664]	; (800a5e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	2b04      	cmp	r3, #4
 800a350:	d118      	bne.n	800a384 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 800a352:	4aa5      	ldr	r2, [pc, #660]	; (800a5e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a354:	4ba3      	ldr	r3, [pc, #652]	; (800a5e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a356:	4614      	mov	r4, r2
 800a358:	461d      	mov	r5, r3
 800a35a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a35c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a35e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a362:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800a366:	4ba0      	ldr	r3, [pc, #640]	; (800a5e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a368:	331c      	adds	r3, #28
 800a36a:	f107 020c 	add.w	r2, r7, #12
 800a36e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a372:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800a376:	489c      	ldr	r0, [pc, #624]	; (800a5e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a378:	f004 fa7a 	bl	800e870 <set_rx_frames>
			source = VESC_PACKET;
 800a37c:	2301      	movs	r3, #1
 800a37e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a382:	e081      	b.n	800a488 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
		}else{
			source = RNS_PACKET;
 800a384:	2300      	movs	r3, #0
 800a386:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800a38a:	231f      	movs	r3, #31
 800a38c:	837b      	strh	r3, [r7, #26]
			uint16_t command = CAN1RxMessage.StdId & id_mask;
 800a38e:	4b95      	ldr	r3, [pc, #596]	; (800a5e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	b29a      	uxth	r2, r3
 800a394:	8b7b      	ldrh	r3, [r7, #26]
 800a396:	4013      	ands	r3, r2
 800a398:	833b      	strh	r3, [r7, #24]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800a39a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800a39e:	82fb      	strh	r3, [r7, #22]
			uint16_t id = CAN1RxMessage.StdId&command_mask;
 800a3a0:	4b90      	ldr	r3, [pc, #576]	; (800a5e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	b29a      	uxth	r2, r3
 800a3a6:	8afb      	ldrh	r3, [r7, #22]
 800a3a8:	4013      	ands	r3, r2
 800a3aa:	82bb      	strh	r3, [r7, #20]
			id=id>>5;
 800a3ac:	8abb      	ldrh	r3, [r7, #20]
 800a3ae:	095b      	lsrs	r3, r3, #5
 800a3b0:	82bb      	strh	r3, [r7, #20]

			for( int i=0 ; i < number_of_odrive; i++)
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3b6:	e016      	b.n	800a3e6 <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
			{
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800a3b8:	4b8c      	ldr	r3, [pc, #560]	; (800a5ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	4413      	add	r3, r2
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	8b1b      	ldrh	r3, [r3, #24]
 800a3c6:	8aba      	ldrh	r2, [r7, #20]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d109      	bne.n	800a3e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
 800a3cc:	8b3b      	ldrh	r3, [r7, #24]
 800a3ce:	2b09      	cmp	r3, #9
 800a3d0:	d002      	beq.n	800a3d8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 800a3d2:	8b3b      	ldrh	r3, [r7, #24]
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d103      	bne.n	800a3e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
				{
					source = ODRIVE_PACKET;
 800a3d8:	2302      	movs	r3, #2
 800a3da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800a3de:	e007      	b.n	800a3f0 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>
			for( int i=0 ; i < number_of_odrive; i++)
 800a3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3e6:	4b82      	ldr	r3, [pc, #520]	; (800a5f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	dbe3      	blt.n	800a3b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
				}
			}

			if(source  == ODRIVE_PACKET)
 800a3f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d112      	bne.n	800a41e <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
			{
				Odrvmsg.RXmsg = CAN1RxMessage;
 800a3f8:	4a7e      	ldr	r2, [pc, #504]	; (800a5f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 800a3fa:	4b7a      	ldr	r3, [pc, #488]	; (800a5e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a3fc:	4614      	mov	r4, r2
 800a3fe:	461d      	mov	r5, r3
 800a400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a404:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a408:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN1RxMessage.DLC);
 800a40c:	4b75      	ldr	r3, [pc, #468]	; (800a5e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a40e:	691a      	ldr	r2, [r3, #16]
 800a410:	f107 030c 	add.w	r3, r7, #12
 800a414:	4619      	mov	r1, r3
 800a416:	4878      	ldr	r0, [pc, #480]	; (800a5f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 800a418:	f010 f97a 	bl	801a710 <memcpy>
 800a41c:	e034      	b.n	800a488 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
			}

			else{
				switch(CAN1RxMessage.StdId){
 800a41e:	4b71      	ldr	r3, [pc, #452]	; (800a5e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	2b16      	cmp	r3, #22
 800a424:	d01b      	beq.n	800a45e <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
 800a426:	2b16      	cmp	r3, #22
 800a428:	d825      	bhi.n	800a476 <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
 800a42a:	2b14      	cmp	r3, #20
 800a42c:	d002      	beq.n	800a434 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
 800a42e:	2b15      	cmp	r3, #21
 800a430:	d00c      	beq.n	800a44c <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
 800a432:	e020      	b.n	800a476 <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
				case RNS_TO_mainboard:
					memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 800a434:	4b6b      	ldr	r3, [pc, #428]	; (800a5e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a436:	691a      	ldr	r2, [r3, #16]
 800a438:	f107 030c 	add.w	r3, r7, #12
 800a43c:	4619      	mov	r1, r3
 800a43e:	486f      	ldr	r0, [pc, #444]	; (800a5fc <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 800a440:	f010 f966 	bl	801a710 <memcpy>
					buf2_flag = 0;
 800a444:	4b6e      	ldr	r3, [pc, #440]	; (800a600 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800a446:	2200      	movs	r2, #0
 800a448:	701a      	strb	r2, [r3, #0]

					break;
 800a44a:	e01d      	b.n	800a488 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf1:
					memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 800a44c:	4b65      	ldr	r3, [pc, #404]	; (800a5e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a44e:	691a      	ldr	r2, [r3, #16]
 800a450:	f107 030c 	add.w	r3, r7, #12
 800a454:	4619      	mov	r1, r3
 800a456:	486b      	ldr	r0, [pc, #428]	; (800a604 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e0>)
 800a458:	f010 f95a 	bl	801a710 <memcpy>

					break;
 800a45c:	e014      	b.n	800a488 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf2:
					memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 800a45e:	4b61      	ldr	r3, [pc, #388]	; (800a5e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a460:	691a      	ldr	r2, [r3, #16]
 800a462:	f107 030c 	add.w	r3, r7, #12
 800a466:	4619      	mov	r1, r3
 800a468:	4867      	ldr	r0, [pc, #412]	; (800a608 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e4>)
 800a46a:	f010 f951 	bl	801a710 <memcpy>
					buf2_flag = 1;
 800a46e:	4b64      	ldr	r3, [pc, #400]	; (800a600 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800a470:	2201      	movs	r2, #1
 800a472:	701a      	strb	r2, [r3, #0]
					break;
 800a474:	e008      	b.n	800a488 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>

				default:
					rns_can = 0;
 800a476:	2300      	movs	r3, #0
 800a478:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800a47c:	f107 030c 	add.w	r3, r7, #12
 800a480:	4618      	mov	r0, r3
 800a482:	f7f9 fb11 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800a486:	bf00      	nop
				}
			}
		}
		if(rns_can)
 800a488:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d004      	beq.n	800a49a <HAL_CAN_RxFifo0MsgPendingCallback+0x176>
			CAN_PROCESS(source);
 800a490:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a494:	4618      	mov	r0, r3
 800a496:	f7ff fef5 	bl	800a284 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800a49a:	2102      	movs	r1, #2
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f007 faa3 	bl	80119e8 <HAL_CAN_ActivateNotification>
		}
		if(rns_can)
			CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
	}
}
 800a4a2:	e0cb      	b.n	800a63c <HAL_CAN_RxFifo0MsgPendingCallback+0x318>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN2RxMessage, aData);
 800a4a4:	f107 030c 	add.w	r3, r7, #12
 800a4a8:	4a58      	ldr	r2, [pc, #352]	; (800a60c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a4aa:	2100      	movs	r1, #0
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f007 f989 	bl	80117c4 <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 800a4b2:	4b56      	ldr	r3, [pc, #344]	; (800a60c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	2b04      	cmp	r3, #4
 800a4b8:	d118      	bne.n	800a4ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>
			vescmsg.Rxmsg = CAN2RxMessage;
 800a4ba:	4a4b      	ldr	r2, [pc, #300]	; (800a5e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a4bc:	4b53      	ldr	r3, [pc, #332]	; (800a60c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a4be:	4614      	mov	r4, r2
 800a4c0:	461d      	mov	r5, r3
 800a4c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a4c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a4ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800a4ce:	4b46      	ldr	r3, [pc, #280]	; (800a5e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a4d0:	331c      	adds	r3, #28
 800a4d2:	f107 020c 	add.w	r2, r7, #12
 800a4d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a4da:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800a4de:	4842      	ldr	r0, [pc, #264]	; (800a5e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a4e0:	f004 f9c6 	bl	800e870 <set_rx_frames>
			source = VESC_PACKET;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a4ea:	e09a      	b.n	800a622 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
			source = RNS_PACKET;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800a4f2:	231f      	movs	r3, #31
 800a4f4:	847b      	strh	r3, [r7, #34]	; 0x22
			uint16_t command = CAN2RxMessage.StdId & id_mask;
 800a4f6:	4b45      	ldr	r3, [pc, #276]	; (800a60c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a4fe:	4013      	ands	r3, r2
 800a500:	843b      	strh	r3, [r7, #32]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800a502:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800a506:	83fb      	strh	r3, [r7, #30]
			uint16_t id = CAN2RxMessage.StdId&command_mask;
 800a508:	4b40      	ldr	r3, [pc, #256]	; (800a60c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	b29a      	uxth	r2, r3
 800a50e:	8bfb      	ldrh	r3, [r7, #30]
 800a510:	4013      	ands	r3, r2
 800a512:	83bb      	strh	r3, [r7, #28]
			id=id>>5;
 800a514:	8bbb      	ldrh	r3, [r7, #28]
 800a516:	095b      	lsrs	r3, r3, #5
 800a518:	83bb      	strh	r3, [r7, #28]
			for( int i=0 ; i < number_of_odrive; i++)
 800a51a:	2300      	movs	r3, #0
 800a51c:	627b      	str	r3, [r7, #36]	; 0x24
 800a51e:	e016      	b.n	800a54e <HAL_CAN_RxFifo0MsgPendingCallback+0x22a>
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800a520:	4b32      	ldr	r3, [pc, #200]	; (800a5ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	4413      	add	r3, r2
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	8b1b      	ldrh	r3, [r3, #24]
 800a52e:	8bba      	ldrh	r2, [r7, #28]
 800a530:	429a      	cmp	r2, r3
 800a532:	d109      	bne.n	800a548 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>
 800a534:	8c3b      	ldrh	r3, [r7, #32]
 800a536:	2b09      	cmp	r3, #9
 800a538:	d002      	beq.n	800a540 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>
 800a53a:	8c3b      	ldrh	r3, [r7, #32]
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d103      	bne.n	800a548 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>
					source = ODRIVE_PACKET;
 800a540:	2302      	movs	r3, #2
 800a542:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800a546:	e007      	b.n	800a558 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>
			for( int i=0 ; i < number_of_odrive; i++)
 800a548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54a:	3301      	adds	r3, #1
 800a54c:	627b      	str	r3, [r7, #36]	; 0x24
 800a54e:	4b28      	ldr	r3, [pc, #160]	; (800a5f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a554:	429a      	cmp	r2, r3
 800a556:	dbe3      	blt.n	800a520 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>
			if(source  == ODRIVE_PACKET)
 800a558:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a55c:	2b02      	cmp	r3, #2
 800a55e:	d112      	bne.n	800a586 <HAL_CAN_RxFifo0MsgPendingCallback+0x262>
				Odrvmsg.RXmsg = CAN2RxMessage;
 800a560:	4a24      	ldr	r2, [pc, #144]	; (800a5f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 800a562:	4b2a      	ldr	r3, [pc, #168]	; (800a60c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a564:	4614      	mov	r4, r2
 800a566:	461d      	mov	r5, r3
 800a568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a56a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a56c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a570:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN2RxMessage.DLC);
 800a574:	4b25      	ldr	r3, [pc, #148]	; (800a60c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a576:	691a      	ldr	r2, [r3, #16]
 800a578:	f107 030c 	add.w	r3, r7, #12
 800a57c:	4619      	mov	r1, r3
 800a57e:	481e      	ldr	r0, [pc, #120]	; (800a5f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 800a580:	f010 f8c6 	bl	801a710 <memcpy>
 800a584:	e04d      	b.n	800a622 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
				switch(CAN2RxMessage.StdId){
 800a586:	4b21      	ldr	r3, [pc, #132]	; (800a60c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2b16      	cmp	r3, #22
 800a58c:	d01b      	beq.n	800a5c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a2>
 800a58e:	2b16      	cmp	r3, #22
 800a590:	d83e      	bhi.n	800a610 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>
 800a592:	2b14      	cmp	r3, #20
 800a594:	d002      	beq.n	800a59c <HAL_CAN_RxFifo0MsgPendingCallback+0x278>
 800a596:	2b15      	cmp	r3, #21
 800a598:	d00c      	beq.n	800a5b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>
 800a59a:	e039      	b.n	800a610 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>
					memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 800a59c:	4b1b      	ldr	r3, [pc, #108]	; (800a60c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a59e:	691a      	ldr	r2, [r3, #16]
 800a5a0:	f107 030c 	add.w	r3, r7, #12
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	4815      	ldr	r0, [pc, #84]	; (800a5fc <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 800a5a8:	f010 f8b2 	bl	801a710 <memcpy>
					buf2_flag = 0;
 800a5ac:	4b14      	ldr	r3, [pc, #80]	; (800a600 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	701a      	strb	r2, [r3, #0]
					break;
 800a5b2:	e036      	b.n	800a622 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
					memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 800a5b4:	4b15      	ldr	r3, [pc, #84]	; (800a60c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a5b6:	691a      	ldr	r2, [r3, #16]
 800a5b8:	f107 030c 	add.w	r3, r7, #12
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4811      	ldr	r0, [pc, #68]	; (800a604 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e0>)
 800a5c0:	f010 f8a6 	bl	801a710 <memcpy>
					break;
 800a5c4:	e02d      	b.n	800a622 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
					memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 800a5c6:	4b11      	ldr	r3, [pc, #68]	; (800a60c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a5c8:	691a      	ldr	r2, [r3, #16]
 800a5ca:	f107 030c 	add.w	r3, r7, #12
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	480d      	ldr	r0, [pc, #52]	; (800a608 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e4>)
 800a5d2:	f010 f89d 	bl	801a710 <memcpy>
					buf2_flag = 1;
 800a5d6:	4b0a      	ldr	r3, [pc, #40]	; (800a600 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800a5d8:	2201      	movs	r2, #1
 800a5da:	701a      	strb	r2, [r3, #0]
					break;
 800a5dc:	e021      	b.n	800a622 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
 800a5de:	bf00      	nop
 800a5e0:	2000a370 	.word	0x2000a370
 800a5e4:	2000a8d8 	.word	0x2000a8d8
 800a5e8:	20009b24 	.word	0x20009b24
 800a5ec:	2000a9f8 	.word	0x2000a9f8
 800a5f0:	2000028c 	.word	0x2000028c
 800a5f4:	20006d68 	.word	0x20006d68
 800a5f8:	20006d84 	.word	0x20006d84
 800a5fc:	20006f18 	.word	0x20006f18
 800a600:	20000298 	.word	0x20000298
 800a604:	2000a07c 	.word	0x2000a07c
 800a608:	2000a1d8 	.word	0x2000a1d8
 800a60c:	20006f94 	.word	0x20006f94
					rns_can = 0;
 800a610:	2300      	movs	r3, #0
 800a612:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800a616:	f107 030c 	add.w	r3, r7, #12
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7f9 fa44 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800a620:	bf00      	nop
		if(rns_can)
 800a622:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a626:	2b00      	cmp	r3, #0
 800a628:	d004      	beq.n	800a634 <HAL_CAN_RxFifo0MsgPendingCallback+0x310>
			CAN_PROCESS(source);
 800a62a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a62e:	4618      	mov	r0, r3
 800a630:	f7ff fe28 	bl	800a284 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800a634:	2102      	movs	r1, #2
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f007 f9d6 	bl	80119e8 <HAL_CAN_ActivateNotification>
}
 800a63c:	bf00      	nop
 800a63e:	3730      	adds	r7, #48	; 0x30
 800a640:	46bd      	mov	sp, r7
 800a642:	bdb0      	pop	{r4, r5, r7, pc}

0800a644 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a644:	b5b0      	push	{r4, r5, r7, lr}
 800a646:	b08c      	sub	sp, #48	; 0x30
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
	PACKET_t source;
	uint8_t aData[8];
	uint8_t rns_can = 1;
 800a64c:	2301      	movs	r3, #1
 800a64e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if(hcan == &hcan1){
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	4aaa      	ldr	r2, [pc, #680]	; (800a900 <HAL_CAN_RxFifo1MsgPendingCallback+0x2bc>)
 800a656:	4293      	cmp	r3, r2
 800a658:	f040 80b4 	bne.w	800a7c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x180>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN1RxMessage, aData);
 800a65c:	f107 030c 	add.w	r3, r7, #12
 800a660:	4aa8      	ldr	r2, [pc, #672]	; (800a904 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a662:	2101      	movs	r1, #1
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f007 f8ad 	bl	80117c4 <HAL_CAN_GetRxMessage>
		//	sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);

		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 800a66a:	4ba6      	ldr	r3, [pc, #664]	; (800a904 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	2b04      	cmp	r3, #4
 800a670:	d118      	bne.n	800a6a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 800a672:	4aa5      	ldr	r2, [pc, #660]	; (800a908 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a674:	4ba3      	ldr	r3, [pc, #652]	; (800a904 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a676:	4614      	mov	r4, r2
 800a678:	461d      	mov	r5, r3
 800a67a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a67c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a67e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a682:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800a686:	4ba0      	ldr	r3, [pc, #640]	; (800a908 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a688:	331c      	adds	r3, #28
 800a68a:	f107 020c 	add.w	r2, r7, #12
 800a68e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a692:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800a696:	489c      	ldr	r0, [pc, #624]	; (800a908 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a698:	f004 f8ea 	bl	800e870 <set_rx_frames>
			source = VESC_PACKET;
 800a69c:	2301      	movs	r3, #1
 800a69e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a6a2:	e081      	b.n	800a7a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
		}else{
			source = RNS_PACKET;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800a6aa:	231f      	movs	r3, #31
 800a6ac:	837b      	strh	r3, [r7, #26]
			uint16_t command = CAN1RxMessage.StdId & id_mask;
 800a6ae:	4b95      	ldr	r3, [pc, #596]	; (800a904 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	b29a      	uxth	r2, r3
 800a6b4:	8b7b      	ldrh	r3, [r7, #26]
 800a6b6:	4013      	ands	r3, r2
 800a6b8:	833b      	strh	r3, [r7, #24]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800a6ba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800a6be:	82fb      	strh	r3, [r7, #22]
			uint16_t id = CAN1RxMessage.StdId&command_mask;
 800a6c0:	4b90      	ldr	r3, [pc, #576]	; (800a904 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	b29a      	uxth	r2, r3
 800a6c6:	8afb      	ldrh	r3, [r7, #22]
 800a6c8:	4013      	ands	r3, r2
 800a6ca:	82bb      	strh	r3, [r7, #20]
			id=id>>5;
 800a6cc:	8abb      	ldrh	r3, [r7, #20]
 800a6ce:	095b      	lsrs	r3, r3, #5
 800a6d0:	82bb      	strh	r3, [r7, #20]

			for( int i=0 ; i < number_of_odrive; i++)
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6d6:	e016      	b.n	800a706 <HAL_CAN_RxFifo1MsgPendingCallback+0xc2>
			{
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800a6d8:	4b8c      	ldr	r3, [pc, #560]	; (800a90c <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	4413      	add	r3, r2
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	8b1b      	ldrh	r3, [r3, #24]
 800a6e6:	8aba      	ldrh	r2, [r7, #20]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d109      	bne.n	800a700 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>
 800a6ec:	8b3b      	ldrh	r3, [r7, #24]
 800a6ee:	2b09      	cmp	r3, #9
 800a6f0:	d002      	beq.n	800a6f8 <HAL_CAN_RxFifo1MsgPendingCallback+0xb4>
 800a6f2:	8b3b      	ldrh	r3, [r7, #24]
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d103      	bne.n	800a700 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>
				{
					source = ODRIVE_PACKET;
 800a6f8:	2302      	movs	r3, #2
 800a6fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800a6fe:	e007      	b.n	800a710 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>
			for( int i=0 ; i < number_of_odrive; i++)
 800a700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a702:	3301      	adds	r3, #1
 800a704:	62bb      	str	r3, [r7, #40]	; 0x28
 800a706:	4b82      	ldr	r3, [pc, #520]	; (800a910 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a70c:	429a      	cmp	r2, r3
 800a70e:	dbe3      	blt.n	800a6d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x94>
				}
			}

			if(source  == ODRIVE_PACKET)
 800a710:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a714:	2b02      	cmp	r3, #2
 800a716:	d112      	bne.n	800a73e <HAL_CAN_RxFifo1MsgPendingCallback+0xfa>
			{
				Odrvmsg.RXmsg = CAN1RxMessage;
 800a718:	4a7e      	ldr	r2, [pc, #504]	; (800a914 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 800a71a:	4b7a      	ldr	r3, [pc, #488]	; (800a904 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a71c:	4614      	mov	r4, r2
 800a71e:	461d      	mov	r5, r3
 800a720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a724:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a728:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN1RxMessage.DLC);
 800a72c:	4b75      	ldr	r3, [pc, #468]	; (800a904 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a72e:	691a      	ldr	r2, [r3, #16]
 800a730:	f107 030c 	add.w	r3, r7, #12
 800a734:	4619      	mov	r1, r3
 800a736:	4878      	ldr	r0, [pc, #480]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 800a738:	f00f ffea 	bl	801a710 <memcpy>
 800a73c:	e034      	b.n	800a7a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
			}

			else{
				switch(CAN1RxMessage.StdId){
 800a73e:	4b71      	ldr	r3, [pc, #452]	; (800a904 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2b16      	cmp	r3, #22
 800a744:	d01b      	beq.n	800a77e <HAL_CAN_RxFifo1MsgPendingCallback+0x13a>
 800a746:	2b16      	cmp	r3, #22
 800a748:	d825      	bhi.n	800a796 <HAL_CAN_RxFifo1MsgPendingCallback+0x152>
 800a74a:	2b14      	cmp	r3, #20
 800a74c:	d002      	beq.n	800a754 <HAL_CAN_RxFifo1MsgPendingCallback+0x110>
 800a74e:	2b15      	cmp	r3, #21
 800a750:	d00c      	beq.n	800a76c <HAL_CAN_RxFifo1MsgPendingCallback+0x128>
 800a752:	e020      	b.n	800a796 <HAL_CAN_RxFifo1MsgPendingCallback+0x152>
				case RNS_TO_mainboard:
					memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 800a754:	4b6b      	ldr	r3, [pc, #428]	; (800a904 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a756:	691a      	ldr	r2, [r3, #16]
 800a758:	f107 030c 	add.w	r3, r7, #12
 800a75c:	4619      	mov	r1, r3
 800a75e:	486f      	ldr	r0, [pc, #444]	; (800a91c <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 800a760:	f00f ffd6 	bl	801a710 <memcpy>
					buf2_flag = 0;
 800a764:	4b6e      	ldr	r3, [pc, #440]	; (800a920 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800a766:	2200      	movs	r2, #0
 800a768:	701a      	strb	r2, [r3, #0]

					break;
 800a76a:	e01d      	b.n	800a7a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf1:
					memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 800a76c:	4b65      	ldr	r3, [pc, #404]	; (800a904 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a76e:	691a      	ldr	r2, [r3, #16]
 800a770:	f107 030c 	add.w	r3, r7, #12
 800a774:	4619      	mov	r1, r3
 800a776:	486b      	ldr	r0, [pc, #428]	; (800a924 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 800a778:	f00f ffca 	bl	801a710 <memcpy>

					break;
 800a77c:	e014      	b.n	800a7a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf2:
					memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 800a77e:	4b61      	ldr	r3, [pc, #388]	; (800a904 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a780:	691a      	ldr	r2, [r3, #16]
 800a782:	f107 030c 	add.w	r3, r7, #12
 800a786:	4619      	mov	r1, r3
 800a788:	4867      	ldr	r0, [pc, #412]	; (800a928 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e4>)
 800a78a:	f00f ffc1 	bl	801a710 <memcpy>
					buf2_flag = 1;
 800a78e:	4b64      	ldr	r3, [pc, #400]	; (800a920 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800a790:	2201      	movs	r2, #1
 800a792:	701a      	strb	r2, [r3, #0]
					break;
 800a794:	e008      	b.n	800a7a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>

				default:
					rns_can = 0;
 800a796:	2300      	movs	r3, #0
 800a798:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800a79c:	f107 030c 	add.w	r3, r7, #12
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7f9 f981 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800a7a6:	bf00      	nop
				}
			}
		}
		if(rns_can)
 800a7a8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d004      	beq.n	800a7ba <HAL_CAN_RxFifo1MsgPendingCallback+0x176>
			CAN_PROCESS(source);
 800a7b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7ff fd65 	bl	800a284 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800a7ba:	2110      	movs	r1, #16
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f007 f913 	bl	80119e8 <HAL_CAN_ActivateNotification>
		if(rns_can)
			CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	}

}
 800a7c2:	e0cb      	b.n	800a95c <HAL_CAN_RxFifo1MsgPendingCallback+0x318>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN2RxMessage, aData);
 800a7c4:	f107 030c 	add.w	r3, r7, #12
 800a7c8:	4a58      	ldr	r2, [pc, #352]	; (800a92c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a7ca:	2101      	movs	r1, #1
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f006 fff9 	bl	80117c4 <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 800a7d2:	4b56      	ldr	r3, [pc, #344]	; (800a92c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	2b04      	cmp	r3, #4
 800a7d8:	d118      	bne.n	800a80c <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>
			vescmsg.Rxmsg = CAN2RxMessage;
 800a7da:	4a4b      	ldr	r2, [pc, #300]	; (800a908 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a7dc:	4b53      	ldr	r3, [pc, #332]	; (800a92c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a7de:	4614      	mov	r4, r2
 800a7e0:	461d      	mov	r5, r3
 800a7e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a7e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a7e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a7ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800a7ee:	4b46      	ldr	r3, [pc, #280]	; (800a908 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a7f0:	331c      	adds	r3, #28
 800a7f2:	f107 020c 	add.w	r2, r7, #12
 800a7f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a7fa:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800a7fe:	4842      	ldr	r0, [pc, #264]	; (800a908 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a800:	f004 f836 	bl	800e870 <set_rx_frames>
			source = VESC_PACKET;
 800a804:	2301      	movs	r3, #1
 800a806:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a80a:	e09a      	b.n	800a942 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
			source = RNS_PACKET;
 800a80c:	2300      	movs	r3, #0
 800a80e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800a812:	231f      	movs	r3, #31
 800a814:	847b      	strh	r3, [r7, #34]	; 0x22
			uint16_t command = CAN2RxMessage.StdId & id_mask;
 800a816:	4b45      	ldr	r3, [pc, #276]	; (800a92c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a81e:	4013      	ands	r3, r2
 800a820:	843b      	strh	r3, [r7, #32]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800a822:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800a826:	83fb      	strh	r3, [r7, #30]
			uint16_t id = CAN2RxMessage.StdId&command_mask;
 800a828:	4b40      	ldr	r3, [pc, #256]	; (800a92c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	8bfb      	ldrh	r3, [r7, #30]
 800a830:	4013      	ands	r3, r2
 800a832:	83bb      	strh	r3, [r7, #28]
			id=id>>5;
 800a834:	8bbb      	ldrh	r3, [r7, #28]
 800a836:	095b      	lsrs	r3, r3, #5
 800a838:	83bb      	strh	r3, [r7, #28]
			for( int i=0 ; i < number_of_odrive; i++)
 800a83a:	2300      	movs	r3, #0
 800a83c:	627b      	str	r3, [r7, #36]	; 0x24
 800a83e:	e016      	b.n	800a86e <HAL_CAN_RxFifo1MsgPendingCallback+0x22a>
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800a840:	4b32      	ldr	r3, [pc, #200]	; (800a90c <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	4413      	add	r3, r2
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	8b1b      	ldrh	r3, [r3, #24]
 800a84e:	8bba      	ldrh	r2, [r7, #28]
 800a850:	429a      	cmp	r2, r3
 800a852:	d109      	bne.n	800a868 <HAL_CAN_RxFifo1MsgPendingCallback+0x224>
 800a854:	8c3b      	ldrh	r3, [r7, #32]
 800a856:	2b09      	cmp	r3, #9
 800a858:	d002      	beq.n	800a860 <HAL_CAN_RxFifo1MsgPendingCallback+0x21c>
 800a85a:	8c3b      	ldrh	r3, [r7, #32]
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d103      	bne.n	800a868 <HAL_CAN_RxFifo1MsgPendingCallback+0x224>
					source = ODRIVE_PACKET;
 800a860:	2302      	movs	r3, #2
 800a862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800a866:	e007      	b.n	800a878 <HAL_CAN_RxFifo1MsgPendingCallback+0x234>
			for( int i=0 ; i < number_of_odrive; i++)
 800a868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86a:	3301      	adds	r3, #1
 800a86c:	627b      	str	r3, [r7, #36]	; 0x24
 800a86e:	4b28      	ldr	r3, [pc, #160]	; (800a910 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a874:	429a      	cmp	r2, r3
 800a876:	dbe3      	blt.n	800a840 <HAL_CAN_RxFifo1MsgPendingCallback+0x1fc>
			if(source  == ODRIVE_PACKET)
 800a878:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a87c:	2b02      	cmp	r3, #2
 800a87e:	d112      	bne.n	800a8a6 <HAL_CAN_RxFifo1MsgPendingCallback+0x262>
				Odrvmsg.RXmsg = CAN2RxMessage;
 800a880:	4a24      	ldr	r2, [pc, #144]	; (800a914 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 800a882:	4b2a      	ldr	r3, [pc, #168]	; (800a92c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a884:	4614      	mov	r4, r2
 800a886:	461d      	mov	r5, r3
 800a888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a88a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a88c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a890:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN2RxMessage.DLC);
 800a894:	4b25      	ldr	r3, [pc, #148]	; (800a92c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a896:	691a      	ldr	r2, [r3, #16]
 800a898:	f107 030c 	add.w	r3, r7, #12
 800a89c:	4619      	mov	r1, r3
 800a89e:	481e      	ldr	r0, [pc, #120]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 800a8a0:	f00f ff36 	bl	801a710 <memcpy>
 800a8a4:	e04d      	b.n	800a942 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
				switch(CAN2RxMessage.StdId){
 800a8a6:	4b21      	ldr	r3, [pc, #132]	; (800a92c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2b16      	cmp	r3, #22
 800a8ac:	d01b      	beq.n	800a8e6 <HAL_CAN_RxFifo1MsgPendingCallback+0x2a2>
 800a8ae:	2b16      	cmp	r3, #22
 800a8b0:	d83e      	bhi.n	800a930 <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>
 800a8b2:	2b14      	cmp	r3, #20
 800a8b4:	d002      	beq.n	800a8bc <HAL_CAN_RxFifo1MsgPendingCallback+0x278>
 800a8b6:	2b15      	cmp	r3, #21
 800a8b8:	d00c      	beq.n	800a8d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x290>
 800a8ba:	e039      	b.n	800a930 <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>
					memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 800a8bc:	4b1b      	ldr	r3, [pc, #108]	; (800a92c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a8be:	691a      	ldr	r2, [r3, #16]
 800a8c0:	f107 030c 	add.w	r3, r7, #12
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	4815      	ldr	r0, [pc, #84]	; (800a91c <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 800a8c8:	f00f ff22 	bl	801a710 <memcpy>
					buf2_flag = 0;
 800a8cc:	4b14      	ldr	r3, [pc, #80]	; (800a920 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	701a      	strb	r2, [r3, #0]
					break;
 800a8d2:	e036      	b.n	800a942 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
					memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 800a8d4:	4b15      	ldr	r3, [pc, #84]	; (800a92c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a8d6:	691a      	ldr	r2, [r3, #16]
 800a8d8:	f107 030c 	add.w	r3, r7, #12
 800a8dc:	4619      	mov	r1, r3
 800a8de:	4811      	ldr	r0, [pc, #68]	; (800a924 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 800a8e0:	f00f ff16 	bl	801a710 <memcpy>
					break;
 800a8e4:	e02d      	b.n	800a942 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
					memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 800a8e6:	4b11      	ldr	r3, [pc, #68]	; (800a92c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a8e8:	691a      	ldr	r2, [r3, #16]
 800a8ea:	f107 030c 	add.w	r3, r7, #12
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	480d      	ldr	r0, [pc, #52]	; (800a928 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e4>)
 800a8f2:	f00f ff0d 	bl	801a710 <memcpy>
					buf2_flag = 1;
 800a8f6:	4b0a      	ldr	r3, [pc, #40]	; (800a920 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	701a      	strb	r2, [r3, #0]
					break;
 800a8fc:	e021      	b.n	800a942 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
 800a8fe:	bf00      	nop
 800a900:	2000a370 	.word	0x2000a370
 800a904:	2000a8d8 	.word	0x2000a8d8
 800a908:	20009b24 	.word	0x20009b24
 800a90c:	2000a9f8 	.word	0x2000a9f8
 800a910:	2000028c 	.word	0x2000028c
 800a914:	20006d68 	.word	0x20006d68
 800a918:	20006d84 	.word	0x20006d84
 800a91c:	20006f18 	.word	0x20006f18
 800a920:	20000298 	.word	0x20000298
 800a924:	2000a07c 	.word	0x2000a07c
 800a928:	2000a1d8 	.word	0x2000a1d8
 800a92c:	20006f94 	.word	0x20006f94
					rns_can = 0;
 800a930:	2300      	movs	r3, #0
 800a932:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800a936:	f107 030c 	add.w	r3, r7, #12
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7f9 f8b4 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800a940:	bf00      	nop
		if(rns_can)
 800a942:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a946:	2b00      	cmp	r3, #0
 800a948:	d004      	beq.n	800a954 <HAL_CAN_RxFifo1MsgPendingCallback+0x310>
			CAN_PROCESS(source);
 800a94a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a94e:	4618      	mov	r0, r3
 800a950:	f7ff fc98 	bl	800a284 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800a954:	2110      	movs	r1, #16
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f007 f846 	bl	80119e8 <HAL_CAN_ActivateNotification>
}
 800a95c:	bf00      	nop
 800a95e:	3730      	adds	r7, #48	; 0x30
 800a960:	46bd      	mov	sp, r7
 800a962:	bdb0      	pop	{r4, r5, r7, pc}

0800a964 <set>:
#include "common.h"
#include "math.h"

float pickVG[7] = {1.0, 1.0, 19999.0, 1.0, 1.0, 0.001, 60.0};;

void set(void) {
 800a964:	b580      	push	{r7, lr}
 800a966:	b088      	sub	sp, #32
 800a968:	af02      	add	r7, sp, #8
	Initialize();
 800a96a:	f7ff fa4b 	bl	8009e04 <Initialize>
	PSxInitDMA(&ps4, &hi2c1);
 800a96e:	4974      	ldr	r1, [pc, #464]	; (800ab40 <set+0x1dc>)
 800a970:	4874      	ldr	r0, [pc, #464]	; (800ab44 <set+0x1e0>)
 800a972:	f7fe f8e6 	bl	8008b42 <PSxInitDMA>
	TIMxInit(&htim6, 5000, 84);
 800a976:	2254      	movs	r2, #84	; 0x54
 800a978:	f241 3188 	movw	r1, #5000	; 0x1388
 800a97c:	4872      	ldr	r0, [pc, #456]	; (800ab48 <set+0x1e4>)
 800a97e:	f7f8 fa9b 	bl	8002eb8 <TIMxInit>
	MODNInit(MODN_FWD_OMNI, 3.5, 0.5, 2.0, 0.1);
 800a982:	eddf 1a72 	vldr	s3, [pc, #456]	; 800ab4c <set+0x1e8>
 800a986:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 800a98a:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800a98e:	eeb0 0a0c 	vmov.f32	s0, #12	; 0x40600000  3.5
 800a992:	2000      	movs	r0, #0
 800a994:	f7f9 fe04 	bl	80045a0 <MODNInit>
	LidarInit(&huart4, DISCONTINUOUS, &lidar);
 800a998:	4a6d      	ldr	r2, [pc, #436]	; (800ab50 <set+0x1ec>)
 800a99a:	2101      	movs	r1, #1
 800a99c:	486d      	ldr	r0, [pc, #436]	; (800ab54 <set+0x1f0>)
 800a99e:	f004 f835 	bl	800ea0c <LidarInit>
	RNS_config(&hcan1);
 800a9a2:	486d      	ldr	r0, [pc, #436]	; (800ab58 <set+0x1f4>)
 800a9a4:	f000 f918 	bl	800abd8 <RNS_config>
	ServoxInit(&servo_ring, &htim5, IP15_PIN, TIM_CHANNEL_2); // BDC7
 800a9a8:	2304      	movs	r3, #4
 800a9aa:	9300      	str	r3, [sp, #0]
 800a9ac:	2340      	movs	r3, #64	; 0x40
 800a9ae:	4a6b      	ldr	r2, [pc, #428]	; (800ab5c <set+0x1f8>)
 800a9b0:	496b      	ldr	r1, [pc, #428]	; (800ab60 <set+0x1fc>)
 800a9b2:	486c      	ldr	r0, [pc, #432]	; (800ab64 <set+0x200>)
 800a9b4:	f7ff f88e 	bl	8009ad4 <ServoxInit>
	ServoInitPulseLimit(&servo_ring, 500, 2500);
 800a9b8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800a9bc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a9c0:	4868      	ldr	r0, [pc, #416]	; (800ab64 <set+0x200>)
 800a9c2:	f7ff f9ee 	bl	8009da2 <ServoInitPulseLimit>
	ServoSetPulse(&servo_ring, 2300);
 800a9c6:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800a9ca:	4866      	ldr	r0, [pc, #408]	; (800ab64 <set+0x200>)
 800a9cc:	f7ff f9a0 	bl	8009d10 <ServoSetPulse>

	PPInit(fwd_omni, &fXPos, &fYPos, &fyaw, &pp);
 800a9d0:	4b65      	ldr	r3, [pc, #404]	; (800ab68 <set+0x204>)
 800a9d2:	9300      	str	r3, [sp, #0]
 800a9d4:	4b65      	ldr	r3, [pc, #404]	; (800ab6c <set+0x208>)
 800a9d6:	4a66      	ldr	r2, [pc, #408]	; (800ab70 <set+0x20c>)
 800a9d8:	4966      	ldr	r1, [pc, #408]	; (800ab74 <set+0x210>)
 800a9da:	2002      	movs	r0, #2
 800a9dc:	f7fa fdf4 	bl	80055c8 <PPInit>
	PP_SetZ(-180, &pp);
 800a9e0:	4861      	ldr	r0, [pc, #388]	; (800ab68 <set+0x204>)
 800a9e2:	ed9f 0a65 	vldr	s0, [pc, #404]	; 800ab78 <set+0x214>
 800a9e6:	f7fb fa03 	bl	8005df0 <PP_SetZ>
	PP_PIDPathSet(1.0, 0.5, 0.5, &pp);
 800a9ea:	485f      	ldr	r0, [pc, #380]	; (800ab68 <set+0x204>)
 800a9ec:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800a9f0:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800a9f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a9f8:	f7fa feb8 	bl	800576c <PP_PIDPathSet>
	PP_PIDEndSet(0.5, 0.1, 0.7, &pp);
 800a9fc:	485a      	ldr	r0, [pc, #360]	; (800ab68 <set+0x204>)
 800a9fe:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 800ab7c <set+0x218>
 800aa02:	eddf 0a52 	vldr	s1, [pc, #328]	; 800ab4c <set+0x1e8>
 800aa06:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800aa0a:	f7fa ff38 	bl	800587e <PP_PIDEndSet>
	PP_PIDZSet(0.5, 0.05, 0.2, 5.5, &pp);
 800aa0e:	4856      	ldr	r0, [pc, #344]	; (800ab68 <set+0x204>)
 800aa10:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 800aa14:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800ab80 <set+0x21c>
 800aa18:	eddf 0a5a 	vldr	s1, [pc, #360]	; 800ab84 <set+0x220>
 800aa1c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800aa20:	f7fa fef4 	bl	800580c <PP_PIDZSet>
	PP_SetCrv_Points(10, &pp);
 800aa24:	4950      	ldr	r1, [pc, #320]	; (800ab68 <set+0x204>)
 800aa26:	200a      	movs	r0, #10
 800aa28:	f7fb f9fa 	bl	8005e20 <PP_SetCrv_Points>

	R6091U_Init(&IMU, &huart3);
 800aa2c:	4956      	ldr	r1, [pc, #344]	; (800ab88 <set+0x224>)
 800aa2e:	4857      	ldr	r0, [pc, #348]	; (800ab8c <set+0x228>)
 800aa30:	f7fe fb9c 	bl	800916c <R6091U_Init>

	PIDSourceInit(&pickErr, &pickU, &pick_PID);
 800aa34:	4a56      	ldr	r2, [pc, #344]	; (800ab90 <set+0x22c>)
 800aa36:	4957      	ldr	r1, [pc, #348]	; (800ab94 <set+0x230>)
 800aa38:	4857      	ldr	r0, [pc, #348]	; (800ab98 <set+0x234>)
 800aa3a:	f7fa fb2f 	bl	800509c <PIDSourceInit>
	PIDDelayInit(&pick_PID);
 800aa3e:	4854      	ldr	r0, [pc, #336]	; (800ab90 <set+0x22c>)
 800aa40:	f7fa fcc3 	bl	80053ca <PIDDelayInit>
	PIDGainInit(0.005, pickVG[0], pickVG[1], pickVG[2], pickVG[3], pickVG[4], pickVG[5], pickVG[6], &pick_PID);
 800aa44:	4b55      	ldr	r3, [pc, #340]	; (800ab9c <set+0x238>)
 800aa46:	edd3 7a00 	vldr	s15, [r3]
 800aa4a:	4b54      	ldr	r3, [pc, #336]	; (800ab9c <set+0x238>)
 800aa4c:	ed93 7a01 	vldr	s14, [r3, #4]
 800aa50:	4b52      	ldr	r3, [pc, #328]	; (800ab9c <set+0x238>)
 800aa52:	edd3 6a02 	vldr	s13, [r3, #8]
 800aa56:	4b51      	ldr	r3, [pc, #324]	; (800ab9c <set+0x238>)
 800aa58:	ed93 6a03 	vldr	s12, [r3, #12]
 800aa5c:	4b4f      	ldr	r3, [pc, #316]	; (800ab9c <set+0x238>)
 800aa5e:	edd3 5a04 	vldr	s11, [r3, #16]
 800aa62:	4b4e      	ldr	r3, [pc, #312]	; (800ab9c <set+0x238>)
 800aa64:	ed93 5a05 	vldr	s10, [r3, #20]
 800aa68:	4b4c      	ldr	r3, [pc, #304]	; (800ab9c <set+0x238>)
 800aa6a:	edd3 4a06 	vldr	s9, [r3, #24]
 800aa6e:	4848      	ldr	r0, [pc, #288]	; (800ab90 <set+0x22c>)
 800aa70:	eef0 3a64 	vmov.f32	s7, s9
 800aa74:	eeb0 3a45 	vmov.f32	s6, s10
 800aa78:	eef0 2a65 	vmov.f32	s5, s11
 800aa7c:	eeb0 2a46 	vmov.f32	s4, s12
 800aa80:	eef0 1a66 	vmov.f32	s3, s13
 800aa84:	eeb0 1a47 	vmov.f32	s2, s14
 800aa88:	eef0 0a67 	vmov.f32	s1, s15
 800aa8c:	ed9f 0a44 	vldr	s0, [pc, #272]	; 800aba0 <set+0x23c>
 800aa90:	f7fa fb16 	bl	80050c0 <PIDGainInit>

	float fXPosGain[3] = {0.8, 0.4, 0.2};
 800aa94:	4a43      	ldr	r2, [pc, #268]	; (800aba4 <set+0x240>)
 800aa96:	f107 030c 	add.w	r3, r7, #12
 800aa9a:	ca07      	ldmia	r2, {r0, r1, r2}
 800aa9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float fYPosGain[3] = {0.8, 0.4, 0.2};
 800aaa0:	4a40      	ldr	r2, [pc, #256]	; (800aba4 <set+0x240>)
 800aaa2:	463b      	mov	r3, r7
 800aaa4:	ca07      	ldmia	r2, {r0, r1, r2}
 800aaa6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	/* X & Y position ABT */
	ABTInit(SAMPLE_TIME, fXPosGain[0], fXPosGain[1], fXPosGain[2], &fXEncData, &fXPos, &fXVel, &fXAcc, &x_data);
 800aaaa:	edd7 7a03 	vldr	s15, [r7, #12]
 800aaae:	ed97 7a04 	vldr	s14, [r7, #16]
 800aab2:	edd7 6a05 	vldr	s13, [r7, #20]
 800aab6:	4b3c      	ldr	r3, [pc, #240]	; (800aba8 <set+0x244>)
 800aab8:	9300      	str	r3, [sp, #0]
 800aaba:	4b3c      	ldr	r3, [pc, #240]	; (800abac <set+0x248>)
 800aabc:	4a3c      	ldr	r2, [pc, #240]	; (800abb0 <set+0x24c>)
 800aabe:	492d      	ldr	r1, [pc, #180]	; (800ab74 <set+0x210>)
 800aac0:	483c      	ldr	r0, [pc, #240]	; (800abb4 <set+0x250>)
 800aac2:	eef0 1a66 	vmov.f32	s3, s13
 800aac6:	eeb0 1a47 	vmov.f32	s2, s14
 800aaca:	eef0 0a67 	vmov.f32	s1, s15
 800aace:	ed9f 0a34 	vldr	s0, [pc, #208]	; 800aba0 <set+0x23c>
 800aad2:	f7f6 fa8b 	bl	8000fec <ABTInit>
	ABTEstimateInit(&x_data);
 800aad6:	4834      	ldr	r0, [pc, #208]	; (800aba8 <set+0x244>)
 800aad8:	f7f6 fab5 	bl	8001046 <ABTEstimateInit>

	ABTInit(SAMPLE_TIME, fYPosGain[0], fYPosGain[1], fYPosGain[2], &fYEncData, &fYPos, &fYVel, &fYAcc, &y_data);
 800aadc:	edd7 7a00 	vldr	s15, [r7]
 800aae0:	ed97 7a01 	vldr	s14, [r7, #4]
 800aae4:	edd7 6a02 	vldr	s13, [r7, #8]
 800aae8:	4b33      	ldr	r3, [pc, #204]	; (800abb8 <set+0x254>)
 800aaea:	9300      	str	r3, [sp, #0]
 800aaec:	4b33      	ldr	r3, [pc, #204]	; (800abbc <set+0x258>)
 800aaee:	4a34      	ldr	r2, [pc, #208]	; (800abc0 <set+0x25c>)
 800aaf0:	491f      	ldr	r1, [pc, #124]	; (800ab70 <set+0x20c>)
 800aaf2:	4834      	ldr	r0, [pc, #208]	; (800abc4 <set+0x260>)
 800aaf4:	eef0 1a66 	vmov.f32	s3, s13
 800aaf8:	eeb0 1a47 	vmov.f32	s2, s14
 800aafc:	eef0 0a67 	vmov.f32	s1, s15
 800ab00:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800aba0 <set+0x23c>
 800ab04:	f7f6 fa72 	bl	8000fec <ABTInit>
	ABTEstimateInit(&y_data);
 800ab08:	482b      	ldr	r0, [pc, #172]	; (800abb8 <set+0x254>)
 800ab0a:	f7f6 fa9c 	bl	8001046 <ABTEstimateInit>

	VESCInit(35000, 7, 0.15, 111, &vesc1);
 800ab0e:	492e      	ldr	r1, [pc, #184]	; (800abc8 <set+0x264>)
 800ab10:	206f      	movs	r0, #111	; 0x6f
 800ab12:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 800abcc <set+0x268>
 800ab16:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 800ab1a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800abd0 <set+0x26c>
 800ab1e:	f003 fedd 	bl	800e8dc <VESCInit>
	VESCInit(35000, 7, 0.15, 112, &vesc2);
 800ab22:	492c      	ldr	r1, [pc, #176]	; (800abd4 <set+0x270>)
 800ab24:	2070      	movs	r0, #112	; 0x70
 800ab26:	ed9f 1a29 	vldr	s2, [pc, #164]	; 800abcc <set+0x268>
 800ab2a:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 800ab2e:	ed9f 0a28 	vldr	s0, [pc, #160]	; 800abd0 <set+0x26c>
 800ab32:	f003 fed3 	bl	800e8dc <VESCInit>
}
 800ab36:	bf00      	nop
 800ab38:	3718      	adds	r7, #24
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	20007050 	.word	0x20007050
 800ab44:	2000a3fc 	.word	0x2000a3fc
 800ab48:	200063d8 	.word	0x200063d8
 800ab4c:	3dcccccd 	.word	0x3dcccccd
 800ab50:	200094a0 	.word	0x200094a0
 800ab54:	200064dc 	.word	0x200064dc
 800ab58:	2000a370 	.word	0x2000a370
 800ab5c:	40020400 	.word	0x40020400
 800ab60:	2000618c 	.word	0x2000618c
 800ab64:	20007d30 	.word	0x20007d30
 800ab68:	2000718c 	.word	0x2000718c
 800ab6c:	20009dc8 	.word	0x20009dc8
 800ab70:	20009c64 	.word	0x20009c64
 800ab74:	20009dfc 	.word	0x20009dfc
 800ab78:	c3340000 	.word	0xc3340000
 800ab7c:	3f333333 	.word	0x3f333333
 800ab80:	3e4ccccd 	.word	0x3e4ccccd
 800ab84:	3d4ccccd 	.word	0x3d4ccccd
 800ab88:	200060a8 	.word	0x200060a8
 800ab8c:	20007130 	.word	0x20007130
 800ab90:	20009c6c 	.word	0x20009c6c
 800ab94:	20007818 	.word	0x20007818
 800ab98:	200069c0 	.word	0x200069c0
 800ab9c:	20000000 	.word	0x20000000
 800aba0:	3ba3d70a 	.word	0x3ba3d70a
 800aba4:	080208e8 	.word	0x080208e8
 800aba8:	2000a6e8 	.word	0x2000a6e8
 800abac:	20006b1c 	.word	0x20006b1c
 800abb0:	20009cc8 	.word	0x20009cc8
 800abb4:	20006df4 	.word	0x20006df4
 800abb8:	20007c9c 	.word	0x20007c9c
 800abbc:	200076d4 	.word	0x200076d4
 800abc0:	200070a4 	.word	0x200070a4
 800abc4:	2000a70c 	.word	0x2000a70c
 800abc8:	20006fdc 	.word	0x20006fdc
 800abcc:	3e19999a 	.word	0x3e19999a
 800abd0:	4708b800 	.word	0x4708b800
 800abd4:	20009dd8 	.word	0x20009dd8

0800abd8 <RNS_config>:

void RNS_config(CAN_HandleTypeDef *hcanx) {
 800abd8:	b580      	push	{r7, lr}
 800abda:	b088      	sub	sp, #32
 800abdc:	af06      	add	r7, sp, #24
 800abde:	6078      	str	r0, [r7, #4]
	RNSInit(hcanx, &rns);
 800abe0:	49a9      	ldr	r1, [pc, #676]	; (800ae88 <RNS_config+0x2b0>)
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f7fe fba4 	bl	8009330 <RNSInit>
	//0b11100101
	//Encoder dcba(0-swap, 1-keep)  BDC dcba(0-keep, 1-swap) //0x00 0x00 0x
	RNSSet(&rns, RNS_DEVICE_CONFIG, (float) 0b00001101, (float) fwd_omni,
 800abe8:	f04f 0200 	mov.w	r2, #0
 800abec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800abf0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800abf4:	f04f 0200 	mov.w	r2, #0
 800abf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800abfc:	e9cd 2300 	strd	r2, r3, [sp]
 800ac00:	f04f 0200 	mov.w	r2, #0
 800ac04:	4ba1      	ldr	r3, [pc, #644]	; (800ae8c <RNS_config+0x2b4>)
 800ac06:	2124      	movs	r1, #36	; 0x24
 800ac08:	489f      	ldr	r0, [pc, #636]	; (800ae88 <RNS_config+0x2b0>)
 800ac0a:	f7fe fd0f 	bl	800962c <RNSSet>
			(float) roboconPID);
	RNSSet(&rns, RNS_X_Y_ENC_CONFIG, 0.05 / 4000.0 * 3.142, 2.0,
 800ac0e:	f04f 0200 	mov.w	r2, #0
 800ac12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac16:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac1a:	a37d      	add	r3, pc, #500	; (adr r3, 800ae10 <RNS_config+0x238>)
 800ac1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac24:	f04f 0200 	mov.w	r2, #0
 800ac28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac2c:	e9cd 2300 	strd	r2, r3, [sp]
 800ac30:	a377      	add	r3, pc, #476	; (adr r3, 800ae10 <RNS_config+0x238>)
 800ac32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac36:	2149      	movs	r1, #73	; 0x49
 800ac38:	4893      	ldr	r0, [pc, #588]	; (800ae88 <RNS_config+0x2b0>)
 800ac3a:	f7fe fcf7 	bl	800962c <RNSSet>
			0.05 / 4000.0 * 3.142, 2.0); //1.0 for nonswap , 2.0 for swap
	RNSSet(&rns, RNS_F_KCD_PTD, (float) 5816.0 / 5181.0, //remember to put floating point 5175/5174 wrong
 800ac3e:	a376      	add	r3, pc, #472	; (adr r3, 800ae18 <RNS_config+0x240>)
 800ac40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac44:	e9cd 2300 	strd	r2, r3, [sp]
 800ac48:	a375      	add	r3, pc, #468	; (adr r3, 800ae20 <RNS_config+0x248>)
 800ac4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4e:	211f      	movs	r1, #31
 800ac50:	488d      	ldr	r0, [pc, #564]	; (800ae88 <RNS_config+0x2b0>)
 800ac52:	f7fe fceb 	bl	800962c <RNSSet>
	(float) (3.142 * 0.126 * 2 / 581.6));
	RNSSet(&rns, RNS_B_KCD_PTD, (float) 5191.0 / 5183.0,
 800ac56:	a374      	add	r3, pc, #464	; (adr r3, 800ae28 <RNS_config+0x250>)
 800ac58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5c:	e9cd 2300 	strd	r2, r3, [sp]
 800ac60:	a373      	add	r3, pc, #460	; (adr r3, 800ae30 <RNS_config+0x258>)
 800ac62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac66:	2120      	movs	r1, #32
 800ac68:	4887      	ldr	r0, [pc, #540]	; (800ae88 <RNS_config+0x2b0>)
 800ac6a:	f7fe fcdf 	bl	800962c <RNSSet>
			(float) (3.142 * 0.126 * 2 / 519.1));

	RNSSet(&rns, RNS_F_LEFT_VEL_SATEU, 1.0, 1.0 / 6.88, 19999.0);
 800ac6e:	a372      	add	r3, pc, #456	; (adr r3, 800ae38 <RNS_config+0x260>)
 800ac70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac78:	a371      	add	r3, pc, #452	; (adr r3, 800ae40 <RNS_config+0x268>)
 800ac7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7e:	e9cd 2300 	strd	r2, r3, [sp]
 800ac82:	f04f 0200 	mov.w	r2, #0
 800ac86:	4b82      	ldr	r3, [pc, #520]	; (800ae90 <RNS_config+0x2b8>)
 800ac88:	212b      	movs	r1, #43	; 0x2b
 800ac8a:	487f      	ldr	r0, [pc, #508]	; (800ae88 <RNS_config+0x2b0>)
 800ac8c:	f7fe fcce 	bl	800962c <RNSSet>
	RNSSet(&rns, RNS_F_RIGHT_VEL_SATEU, 1.0, 1.0 / 8.66, 19999.0);
 800ac90:	a369      	add	r3, pc, #420	; (adr r3, 800ae38 <RNS_config+0x260>)
 800ac92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac9a:	a36b      	add	r3, pc, #428	; (adr r3, 800ae48 <RNS_config+0x270>)
 800ac9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca0:	e9cd 2300 	strd	r2, r3, [sp]
 800aca4:	f04f 0200 	mov.w	r2, #0
 800aca8:	4b79      	ldr	r3, [pc, #484]	; (800ae90 <RNS_config+0x2b8>)
 800acaa:	212c      	movs	r1, #44	; 0x2c
 800acac:	4876      	ldr	r0, [pc, #472]	; (800ae88 <RNS_config+0x2b0>)
 800acae:	f7fe fcbd 	bl	800962c <RNSSet>
	RNSSet(&rns, RNS_B_LEFT_VEL_SATEU, 1.0, 1.0 / 7.91, 19999.0);
 800acb2:	a361      	add	r3, pc, #388	; (adr r3, 800ae38 <RNS_config+0x260>)
 800acb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800acbc:	a364      	add	r3, pc, #400	; (adr r3, 800ae50 <RNS_config+0x278>)
 800acbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc2:	e9cd 2300 	strd	r2, r3, [sp]
 800acc6:	f04f 0200 	mov.w	r2, #0
 800acca:	4b71      	ldr	r3, [pc, #452]	; (800ae90 <RNS_config+0x2b8>)
 800accc:	212d      	movs	r1, #45	; 0x2d
 800acce:	486e      	ldr	r0, [pc, #440]	; (800ae88 <RNS_config+0x2b0>)
 800acd0:	f7fe fcac 	bl	800962c <RNSSet>
	RNSSet(&rns, RNS_B_RIGHT_VEL_SATEU, 1.0, 1.0 / 7.79, 19999.0);
 800acd4:	a358      	add	r3, pc, #352	; (adr r3, 800ae38 <RNS_config+0x260>)
 800acd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acda:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800acde:	a35e      	add	r3, pc, #376	; (adr r3, 800ae58 <RNS_config+0x280>)
 800ace0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace4:	e9cd 2300 	strd	r2, r3, [sp]
 800ace8:	f04f 0200 	mov.w	r2, #0
 800acec:	4b68      	ldr	r3, [pc, #416]	; (800ae90 <RNS_config+0x2b8>)
 800acee:	212e      	movs	r1, #46	; 0x2e
 800acf0:	4865      	ldr	r0, [pc, #404]	; (800ae88 <RNS_config+0x2b0>)
 800acf2:	f7fe fc9b 	bl	800962c <RNSSet>

	RNSSet(&rns, RNS_F_LEFT_VEL_PID, 1.0, 1.5, 0.001);   //
 800acf6:	a35a      	add	r3, pc, #360	; (adr r3, 800ae60 <RNS_config+0x288>)
 800acf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad00:	f04f 0200 	mov.w	r2, #0
 800ad04:	4b63      	ldr	r3, [pc, #396]	; (800ae94 <RNS_config+0x2bc>)
 800ad06:	e9cd 2300 	strd	r2, r3, [sp]
 800ad0a:	f04f 0200 	mov.w	r2, #0
 800ad0e:	4b60      	ldr	r3, [pc, #384]	; (800ae90 <RNS_config+0x2b8>)
 800ad10:	212f      	movs	r1, #47	; 0x2f
 800ad12:	485d      	ldr	r0, [pc, #372]	; (800ae88 <RNS_config+0x2b0>)
 800ad14:	f7fe fc8a 	bl	800962c <RNSSet>
	RNSSet(&rns, RNS_F_RIGHT_VEL_PID, 1.0, 1.5, 0.001);   //
 800ad18:	a351      	add	r3, pc, #324	; (adr r3, 800ae60 <RNS_config+0x288>)
 800ad1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad22:	f04f 0200 	mov.w	r2, #0
 800ad26:	4b5b      	ldr	r3, [pc, #364]	; (800ae94 <RNS_config+0x2bc>)
 800ad28:	e9cd 2300 	strd	r2, r3, [sp]
 800ad2c:	f04f 0200 	mov.w	r2, #0
 800ad30:	4b57      	ldr	r3, [pc, #348]	; (800ae90 <RNS_config+0x2b8>)
 800ad32:	2130      	movs	r1, #48	; 0x30
 800ad34:	4854      	ldr	r0, [pc, #336]	; (800ae88 <RNS_config+0x2b0>)
 800ad36:	f7fe fc79 	bl	800962c <RNSSet>
	RNSSet(&rns, RNS_B_LEFT_VEL_PID, 1.0, 1.5, 0.001);   //
 800ad3a:	a349      	add	r3, pc, #292	; (adr r3, 800ae60 <RNS_config+0x288>)
 800ad3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad44:	f04f 0200 	mov.w	r2, #0
 800ad48:	4b52      	ldr	r3, [pc, #328]	; (800ae94 <RNS_config+0x2bc>)
 800ad4a:	e9cd 2300 	strd	r2, r3, [sp]
 800ad4e:	f04f 0200 	mov.w	r2, #0
 800ad52:	4b4f      	ldr	r3, [pc, #316]	; (800ae90 <RNS_config+0x2b8>)
 800ad54:	2131      	movs	r1, #49	; 0x31
 800ad56:	484c      	ldr	r0, [pc, #304]	; (800ae88 <RNS_config+0x2b0>)
 800ad58:	f7fe fc68 	bl	800962c <RNSSet>
	RNSSet(&rns, RNS_B_RIGHT_VEL_PID, 1.0, 1.5, 0.001);   //
 800ad5c:	a340      	add	r3, pc, #256	; (adr r3, 800ae60 <RNS_config+0x288>)
 800ad5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad62:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad66:	f04f 0200 	mov.w	r2, #0
 800ad6a:	4b4a      	ldr	r3, [pc, #296]	; (800ae94 <RNS_config+0x2bc>)
 800ad6c:	e9cd 2300 	strd	r2, r3, [sp]
 800ad70:	f04f 0200 	mov.w	r2, #0
 800ad74:	4b46      	ldr	r3, [pc, #280]	; (800ae90 <RNS_config+0x2b8>)
 800ad76:	2132      	movs	r1, #50	; 0x32
 800ad78:	4843      	ldr	r0, [pc, #268]	; (800ae88 <RNS_config+0x2b0>)
 800ad7a:	f7fe fc57 	bl	800962c <RNSSet>

	RNSSet(&rns, RNS_PPInit); //Path Planning
 800ad7e:	2116      	movs	r1, #22
 800ad80:	4841      	ldr	r0, [pc, #260]	; (800ae88 <RNS_config+0x2b0>)
 800ad82:	f7fe fc53 	bl	800962c <RNSSet>
	RNSSet(&rns, RNS_PPPathPID, 1.0, 0.5, 0.5);
 800ad86:	f04f 0200 	mov.w	r2, #0
 800ad8a:	4b43      	ldr	r3, [pc, #268]	; (800ae98 <RNS_config+0x2c0>)
 800ad8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad90:	f04f 0200 	mov.w	r2, #0
 800ad94:	4b40      	ldr	r3, [pc, #256]	; (800ae98 <RNS_config+0x2c0>)
 800ad96:	e9cd 2300 	strd	r2, r3, [sp]
 800ad9a:	f04f 0200 	mov.w	r2, #0
 800ad9e:	4b3c      	ldr	r3, [pc, #240]	; (800ae90 <RNS_config+0x2b8>)
 800ada0:	2146      	movs	r1, #70	; 0x46
 800ada2:	4839      	ldr	r0, [pc, #228]	; (800ae88 <RNS_config+0x2b0>)
 800ada4:	f7fe fc42 	bl	800962c <RNSSet>
	RNSSet(&rns, RNS_PPEndPID, 0.5, 0.1, 0.7);
 800ada8:	a32f      	add	r3, pc, #188	; (adr r3, 800ae68 <RNS_config+0x290>)
 800adaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800adb2:	a32f      	add	r3, pc, #188	; (adr r3, 800ae70 <RNS_config+0x298>)
 800adb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb8:	e9cd 2300 	strd	r2, r3, [sp]
 800adbc:	f04f 0200 	mov.w	r2, #0
 800adc0:	4b35      	ldr	r3, [pc, #212]	; (800ae98 <RNS_config+0x2c0>)
 800adc2:	2147      	movs	r1, #71	; 0x47
 800adc4:	4830      	ldr	r0, [pc, #192]	; (800ae88 <RNS_config+0x2b0>)
 800adc6:	f7fe fc31 	bl	800962c <RNSSet>
	RNSSet(&rns, RNS_PPZPID, 0.5, 0.05, 0.2, 5.5);
 800adca:	f04f 0200 	mov.w	r2, #0
 800adce:	4b33      	ldr	r3, [pc, #204]	; (800ae9c <RNS_config+0x2c4>)
 800add0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800add4:	a328      	add	r3, pc, #160	; (adr r3, 800ae78 <RNS_config+0x2a0>)
 800add6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adda:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800adde:	a328      	add	r3, pc, #160	; (adr r3, 800ae80 <RNS_config+0x2a8>)
 800ade0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade4:	e9cd 2300 	strd	r2, r3, [sp]
 800ade8:	f04f 0200 	mov.w	r2, #0
 800adec:	4b2a      	ldr	r3, [pc, #168]	; (800ae98 <RNS_config+0x2c0>)
 800adee:	214f      	movs	r1, #79	; 0x4f
 800adf0:	4825      	ldr	r0, [pc, #148]	; (800ae88 <RNS_config+0x2b0>)
 800adf2:	f7fe fc1b 	bl	800962c <RNSSet>
	RNSSet(&rns, RNS_PPSetCRV_PTS, 10.0); // Change No. of Points in the Curved Path
 800adf6:	f04f 0200 	mov.w	r2, #0
 800adfa:	4b29      	ldr	r3, [pc, #164]	; (800aea0 <RNS_config+0x2c8>)
 800adfc:	211d      	movs	r1, #29
 800adfe:	4822      	ldr	r0, [pc, #136]	; (800ae88 <RNS_config+0x2b0>)
 800ae00:	f7fe fc14 	bl	800962c <RNSSet>
}
 800ae04:	bf00      	nop
 800ae06:	3708      	adds	r7, #8
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}
 800ae0c:	f3af 8000 	nop.w
 800ae10:	b9727cf5 	.word	0xb9727cf5
 800ae14:	3f049766 	.word	0x3f049766
 800ae18:	a0000000 	.word	0xa0000000
 800ae1c:	3f564e14 	.word	0x3f564e14
 800ae20:	d7a1868c 	.word	0xd7a1868c
 800ae24:	3ff1f604 	.word	0x3ff1f604
 800ae28:	00000000 	.word	0x00000000
 800ae2c:	3f58fd94 	.word	0x3f58fd94
 800ae30:	7c2c0ed1 	.word	0x7c2c0ed1
 800ae34:	3ff00652 	.word	0x3ff00652
 800ae38:	00000000 	.word	0x00000000
 800ae3c:	40d387c0 	.word	0x40d387c0
 800ae40:	6b29aca7 	.word	0x6b29aca7
 800ae44:	3fc29aca 	.word	0x3fc29aca
 800ae48:	dd1e2705 	.word	0xdd1e2705
 800ae4c:	3fbd8faa 	.word	0x3fbd8faa
 800ae50:	b34c0e3d 	.word	0xb34c0e3d
 800ae54:	3fc02e9a 	.word	0x3fc02e9a
 800ae58:	21d938da 	.word	0x21d938da
 800ae5c:	3fc06e6b 	.word	0x3fc06e6b
 800ae60:	d2f1a9fc 	.word	0xd2f1a9fc
 800ae64:	3f50624d 	.word	0x3f50624d
 800ae68:	66666666 	.word	0x66666666
 800ae6c:	3fe66666 	.word	0x3fe66666
 800ae70:	9999999a 	.word	0x9999999a
 800ae74:	3fb99999 	.word	0x3fb99999
 800ae78:	9999999a 	.word	0x9999999a
 800ae7c:	3fc99999 	.word	0x3fc99999
 800ae80:	9999999a 	.word	0x9999999a
 800ae84:	3fa99999 	.word	0x3fa99999
 800ae88:	20009378 	.word	0x20009378
 800ae8c:	402a0000 	.word	0x402a0000
 800ae90:	3ff00000 	.word	0x3ff00000
 800ae94:	3ff80000 	.word	0x3ff80000
 800ae98:	3fe00000 	.word	0x3fe00000
 800ae9c:	40160000 	.word	0x40160000
 800aea0:	40240000 	.word	0x40240000

0800aea4 <RobotStart>:
	}

}

void RobotStart()
{
 800aea4:	b480      	push	{r7}
 800aea6:	af00      	add	r7, sp, #0
	before = 0;
 800aea8:	4b27      	ldr	r3, [pc, #156]	; (800af48 <RobotStart+0xa4>)
 800aeaa:	2200      	movs	r2, #0
 800aeac:	601a      	str	r2, [r3, #0]
	mode = 1;
 800aeae:	4b27      	ldr	r3, [pc, #156]	; (800af4c <RobotStart+0xa8>)
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	601a      	str	r2, [r3, #0]
	servo_close_once = 0;
 800aeb4:	4b26      	ldr	r3, [pc, #152]	; (800af50 <RobotStart+0xac>)
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	601a      	str	r2, [r3, #0]
	shoot_done = 0;
 800aeba:	4b26      	ldr	r3, [pc, #152]	; (800af54 <RobotStart+0xb0>)
 800aebc:	2200      	movs	r2, #0
 800aebe:	601a      	str	r2, [r3, #0]
	shoot_start = 0;
 800aec0:	4b25      	ldr	r3, [pc, #148]	; (800af58 <RobotStart+0xb4>)
 800aec2:	2200      	movs	r2, #0
 800aec4:	601a      	str	r2, [r3, #0]
	vesc_duty = 0;
 800aec6:	4b25      	ldr	r3, [pc, #148]	; (800af5c <RobotStart+0xb8>)
 800aec8:	f04f 0200 	mov.w	r2, #0
 800aecc:	601a      	str	r2, [r3, #0]
	pick_start = 0;
 800aece:	4b24      	ldr	r3, [pc, #144]	; (800af60 <RobotStart+0xbc>)
 800aed0:	2200      	movs	r2, #0
 800aed2:	601a      	str	r2, [r3, #0]
	Robot_Pitch = PITCH45;
 800aed4:	4b23      	ldr	r3, [pc, #140]	; (800af64 <RobotStart+0xc0>)
 800aed6:	2200      	movs	r2, #0
 800aed8:	701a      	strb	r2, [r3, #0]
	set_pitch = 0;
 800aeda:	4b23      	ldr	r3, [pc, #140]	; (800af68 <RobotStart+0xc4>)
 800aedc:	2200      	movs	r2, #0
 800aede:	601a      	str	r2, [r3, #0]
	picked_left = 0;
 800aee0:	4b22      	ldr	r3, [pc, #136]	; (800af6c <RobotStart+0xc8>)
 800aee2:	2200      	movs	r2, #0
 800aee4:	601a      	str	r2, [r3, #0]
	picked_right = 0;
 800aee6:	4b22      	ldr	r3, [pc, #136]	; (800af70 <RobotStart+0xcc>)
 800aee8:	2200      	movs	r2, #0
 800aeea:	601a      	str	r2, [r3, #0]
	cylinder_retract;
 800aeec:	4a21      	ldr	r2, [pc, #132]	; (800af74 <RobotStart+0xd0>)
 800aeee:	7f13      	ldrb	r3, [r2, #28]
 800aef0:	f36f 1386 	bfc	r3, #6, #1
 800aef4:	7713      	strb	r3, [r2, #28]
	set_pick_enc = 0;
 800aef6:	4b20      	ldr	r3, [pc, #128]	; (800af78 <RobotStart+0xd4>)
 800aef8:	2200      	movs	r2, #0
 800aefa:	601a      	str	r2, [r3, #0]
	pick_tol = 100;
 800aefc:	4b1f      	ldr	r3, [pc, #124]	; (800af7c <RobotStart+0xd8>)
 800aefe:	2264      	movs	r2, #100	; 0x64
 800af00:	601a      	str	r2, [r3, #0]
	vel_adjust = 0;
 800af02:	4b1f      	ldr	r3, [pc, #124]	; (800af80 <RobotStart+0xdc>)
 800af04:	2200      	movs	r2, #0
 800af06:	601a      	str	r2, [r3, #0]
	reload = 0;
 800af08:	4b1e      	ldr	r3, [pc, #120]	; (800af84 <RobotStart+0xe0>)
 800af0a:	2200      	movs	r2, #0
 800af0c:	601a      	str	r2, [r3, #0]
	load_stop_once = 0;
 800af0e:	4b1e      	ldr	r3, [pc, #120]	; (800af88 <RobotStart+0xe4>)
 800af10:	2200      	movs	r2, #0
 800af12:	601a      	str	r2, [r3, #0]
	load_start = 0;
 800af14:	4b1d      	ldr	r3, [pc, #116]	; (800af8c <RobotStart+0xe8>)
 800af16:	2200      	movs	r2, #0
 800af18:	601a      	str	r2, [r3, #0]
	wait_load = 0;
 800af1a:	4b1d      	ldr	r3, [pc, #116]	; (800af90 <RobotStart+0xec>)
 800af1c:	2200      	movs	r2, #0
 800af1e:	601a      	str	r2, [r3, #0]
	wheel = 1;
 800af20:	4b1c      	ldr	r3, [pc, #112]	; (800af94 <RobotStart+0xf0>)
 800af22:	2201      	movs	r2, #1
 800af24:	601a      	str	r2, [r3, #0]
	loaded = 0;
 800af26:	4b1c      	ldr	r3, [pc, #112]	; (800af98 <RobotStart+0xf4>)
 800af28:	2200      	movs	r2, #0
 800af2a:	601a      	str	r2, [r3, #0]
	led_enb = 0;
 800af2c:	4b1b      	ldr	r3, [pc, #108]	; (800af9c <RobotStart+0xf8>)
 800af2e:	2200      	movs	r2, #0
 800af30:	601a      	str	r2, [r3, #0]
	stick_fence = 0;
 800af32:	4b1b      	ldr	r3, [pc, #108]	; (800afa0 <RobotStart+0xfc>)
 800af34:	2200      	movs	r2, #0
 800af36:	601a      	str	r2, [r3, #0]
	pick_0 = 0;
 800af38:	4b1a      	ldr	r3, [pc, #104]	; (800afa4 <RobotStart+0x100>)
 800af3a:	2200      	movs	r2, #0
 800af3c:	601a      	str	r2, [r3, #0]
}
 800af3e:	bf00      	nop
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr
 800af48:	20007764 	.word	0x20007764
 800af4c:	20009740 	.word	0x20009740
 800af50:	20009cc4 	.word	0x20009cc4
 800af54:	200093ec 	.word	0x200093ec
 800af58:	2000973c 	.word	0x2000973c
 800af5c:	20007848 	.word	0x20007848
 800af60:	20007d20 	.word	0x20007d20
 800af64:	20009ad2 	.word	0x20009ad2
 800af68:	20009abc 	.word	0x20009abc
 800af6c:	20009c58 	.word	0x20009c58
 800af70:	200076dc 	.word	0x200076dc
 800af74:	200099fc 	.word	0x200099fc
 800af78:	20007bf8 	.word	0x20007bf8
 800af7c:	2000777c 	.word	0x2000777c
 800af80:	20009498 	.word	0x20009498
 800af84:	20007c14 	.word	0x20007c14
 800af88:	20009dd4 	.word	0x20009dd4
 800af8c:	20007810 	.word	0x20007810
 800af90:	2000794c 	.word	0x2000794c
 800af94:	200069c4 	.word	0x200069c4
 800af98:	20009898 	.word	0x20009898
 800af9c:	2000a9c4 	.word	0x2000a9c4
 800afa0:	20007784 	.word	0x20007784
 800afa4:	2000a1d4 	.word	0x2000a1d4

0800afa8 <NormalControl>:

void NormalControl()
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	af00      	add	r7, sp, #0
	// Cylinder
	if (ps4.button == OPTION)
 800afac:	4b60      	ldr	r3, [pc, #384]	; (800b130 <NormalControl+0x188>)
 800afae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afb4:	d107      	bne.n	800afc6 <NormalControl+0x1e>
	{
		while (ps4.button == OPTION);
 800afb6:	bf00      	nop
 800afb8:	4b5d      	ldr	r3, [pc, #372]	; (800b130 <NormalControl+0x188>)
 800afba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afc0:	d0fa      	beq.n	800afb8 <NormalControl+0x10>
		ResetPickEnc();
 800afc2:	f000 fd83 	bl	800bacc <ResetPickEnc>
	}

	// Cylinder
	if (ps4.button == TRIANGLE)
 800afc6:	4b5a      	ldr	r3, [pc, #360]	; (800b130 <NormalControl+0x188>)
 800afc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afce:	d108      	bne.n	800afe2 <NormalControl+0x3a>
	{
		while (ps4.button == TRIANGLE);
 800afd0:	bf00      	nop
 800afd2:	4b57      	ldr	r3, [pc, #348]	; (800b130 <NormalControl+0x188>)
 800afd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afda:	d0fa      	beq.n	800afd2 <NormalControl+0x2a>
//			cylinder_load;
//			counter = 0;
//		}
//		LidarSendIns(NEAR, &lidar);
//		ResetCoordinate();
		pick_right = 1;
 800afdc:	4b55      	ldr	r3, [pc, #340]	; (800b134 <NormalControl+0x18c>)
 800afde:	2201      	movs	r2, #1
 800afe0:	601a      	str	r2, [r3, #0]
	}

	// Servo
	if(ps4.button == SQUARE)
 800afe2:	4b53      	ldr	r3, [pc, #332]	; (800b130 <NormalControl+0x188>)
 800afe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afea:	d124      	bne.n	800b036 <NormalControl+0x8e>
	{
		while(ps4.button == SQUARE);
 800afec:	bf00      	nop
 800afee:	4b50      	ldr	r3, [pc, #320]	; (800b130 <NormalControl+0x188>)
 800aff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aff6:	d0fa      	beq.n	800afee <NormalControl+0x46>
		if(!pp.pp_start)
 800aff8:	4b4f      	ldr	r3, [pc, #316]	; (800b138 <NormalControl+0x190>)
 800affa:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800affe:	f003 0301 	and.w	r3, r3, #1
 800b002:	b2db      	uxtb	r3, r3
 800b004:	2b00      	cmp	r3, #0
 800b006:	d116      	bne.n	800b036 <NormalControl+0x8e>
		{
			static int counter = 0;

			if(counter == 0)
 800b008:	4b4c      	ldr	r3, [pc, #304]	; (800b13c <NormalControl+0x194>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d10a      	bne.n	800b026 <NormalControl+0x7e>
			{
				counter++;
 800b010:	4b4a      	ldr	r3, [pc, #296]	; (800b13c <NormalControl+0x194>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	3301      	adds	r3, #1
 800b016:	4a49      	ldr	r2, [pc, #292]	; (800b13c <NormalControl+0x194>)
 800b018:	6013      	str	r3, [r2, #0]
				close_servo;
 800b01a:	f240 31a2 	movw	r1, #930	; 0x3a2
 800b01e:	4848      	ldr	r0, [pc, #288]	; (800b140 <NormalControl+0x198>)
 800b020:	f7fe fe76 	bl	8009d10 <ServoSetPulse>
 800b024:	e007      	b.n	800b036 <NormalControl+0x8e>
			}
			else
			{
				open_servo;
 800b026:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800b02a:	4845      	ldr	r0, [pc, #276]	; (800b140 <NormalControl+0x198>)
 800b02c:	f7fe fe70 	bl	8009d10 <ServoSetPulse>
				counter = 0;
 800b030:	4b42      	ldr	r3, [pc, #264]	; (800b13c <NormalControl+0x194>)
 800b032:	2200      	movs	r2, #0
 800b034:	601a      	str	r2, [r3, #0]
			}
		}
	}

	// Shoot
	if(ps4.button == CROSS)
 800b036:	4b3e      	ldr	r3, [pc, #248]	; (800b130 <NormalControl+0x188>)
 800b038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b03a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b03e:	d10f      	bne.n	800b060 <NormalControl+0xb8>
	{
		while(ps4.button == CROSS);
 800b040:	bf00      	nop
 800b042:	4b3b      	ldr	r3, [pc, #236]	; (800b130 <NormalControl+0x188>)
 800b044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b046:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b04a:	d0fa      	beq.n	800b042 <NormalControl+0x9a>
		push_shoot;
 800b04c:	493d      	ldr	r1, [pc, #244]	; (800b144 <NormalControl+0x19c>)
 800b04e:	483e      	ldr	r0, [pc, #248]	; (800b148 <NormalControl+0x1a0>)
 800b050:	f7f6 f89b 	bl	800118a <WriteBDC>
		shoot_start = 1;
 800b054:	4b3d      	ldr	r3, [pc, #244]	; (800b14c <NormalControl+0x1a4>)
 800b056:	2201      	movs	r2, #1
 800b058:	601a      	str	r2, [r3, #0]
		wait_load = 1;
 800b05a:	4b3d      	ldr	r3, [pc, #244]	; (800b150 <NormalControl+0x1a8>)
 800b05c:	2201      	movs	r2, #1
 800b05e:	601a      	str	r2, [r3, #0]
	}

	// Fly wheel
	if(ps4.button == CIRCLE)
 800b060:	4b33      	ldr	r3, [pc, #204]	; (800b130 <NormalControl+0x188>)
 800b062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b064:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b068:	d11f      	bne.n	800b0aa <NormalControl+0x102>
	{
		while(ps4.button == CIRCLE);
 800b06a:	bf00      	nop
 800b06c:	4b30      	ldr	r3, [pc, #192]	; (800b130 <NormalControl+0x188>)
 800b06e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b074:	d0fa      	beq.n	800b06c <NormalControl+0xc4>
		static int counter = 0;

		if(counter == 0)
 800b076:	4b37      	ldr	r3, [pc, #220]	; (800b154 <NormalControl+0x1ac>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d108      	bne.n	800b090 <NormalControl+0xe8>
		{
			counter++;
 800b07e:	4b35      	ldr	r3, [pc, #212]	; (800b154 <NormalControl+0x1ac>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	3301      	adds	r3, #1
 800b084:	4a33      	ldr	r2, [pc, #204]	; (800b154 <NormalControl+0x1ac>)
 800b086:	6013      	str	r3, [r2, #0]
			vesc_duty = 0.3;
 800b088:	4b33      	ldr	r3, [pc, #204]	; (800b158 <NormalControl+0x1b0>)
 800b08a:	4a34      	ldr	r2, [pc, #208]	; (800b15c <NormalControl+0x1b4>)
 800b08c:	601a      	str	r2, [r3, #0]
 800b08e:	e00c      	b.n	800b0aa <NormalControl+0x102>
		}
		else
		{
			vesc_duty = 0;
 800b090:	4b31      	ldr	r3, [pc, #196]	; (800b158 <NormalControl+0x1b0>)
 800b092:	f04f 0200 	mov.w	r2, #0
 800b096:	601a      	str	r2, [r3, #0]
			VESCStop(&vesc1);
 800b098:	4831      	ldr	r0, [pc, #196]	; (800b160 <NormalControl+0x1b8>)
 800b09a:	f003 fc6b 	bl	800e974 <VESCStop>
			VESCStop(&vesc2);
 800b09e:	4831      	ldr	r0, [pc, #196]	; (800b164 <NormalControl+0x1bc>)
 800b0a0:	f003 fc68 	bl	800e974 <VESCStop>
			counter = 0;
 800b0a4:	4b2b      	ldr	r3, [pc, #172]	; (800b154 <NormalControl+0x1ac>)
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	601a      	str	r2, [r3, #0]
		}
//		setPick(800);
//		open_servo;
	}

	if(ps4.button == RIGHT)
 800b0aa:	4b21      	ldr	r3, [pc, #132]	; (800b130 <NormalControl+0x188>)
 800b0ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0ae:	2b20      	cmp	r3, #32
 800b0b0:	d106      	bne.n	800b0c0 <NormalControl+0x118>
	{
		while(ps4.button == RIGHT);
 800b0b2:	bf00      	nop
 800b0b4:	4b1e      	ldr	r3, [pc, #120]	; (800b130 <NormalControl+0x188>)
 800b0b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0b8:	2b20      	cmp	r3, #32
 800b0ba:	d0fb      	beq.n	800b0b4 <NormalControl+0x10c>
		LoadRing();
 800b0bc:	f000 fca6 	bl	800ba0c <LoadRing>
	}

	if(ps4.button == LEFT)
 800b0c0:	4b1b      	ldr	r3, [pc, #108]	; (800b130 <NormalControl+0x188>)
 800b0c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0c4:	2b80      	cmp	r3, #128	; 0x80
 800b0c6:	d107      	bne.n	800b0d8 <NormalControl+0x130>
	{
		while(ps4.button == LEFT);
 800b0c8:	bf00      	nop
 800b0ca:	4b19      	ldr	r3, [pc, #100]	; (800b130 <NormalControl+0x188>)
 800b0cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0ce:	2b80      	cmp	r3, #128	; 0x80
 800b0d0:	d0fb      	beq.n	800b0ca <NormalControl+0x122>
//		if(!picked_left)
//			pick_left = 1;
//		else
//			pick_right = 1;

		pick_left = 1;
 800b0d2:	4b25      	ldr	r3, [pc, #148]	; (800b168 <NormalControl+0x1c0>)
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == DOWN)
 800b0d8:	4b15      	ldr	r3, [pc, #84]	; (800b130 <NormalControl+0x188>)
 800b0da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0dc:	2b40      	cmp	r3, #64	; 0x40
 800b0de:	d107      	bne.n	800b0f0 <NormalControl+0x148>
	{
		while(ps4.button == DOWN);
 800b0e0:	bf00      	nop
 800b0e2:	4b13      	ldr	r3, [pc, #76]	; (800b130 <NormalControl+0x188>)
 800b0e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0e6:	2b40      	cmp	r3, #64	; 0x40
 800b0e8:	d0fb      	beq.n	800b0e2 <NormalControl+0x13a>
		stick_fence = 0;
 800b0ea:	4b20      	ldr	r3, [pc, #128]	; (800b16c <NormalControl+0x1c4>)
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	601a      	str	r2, [r3, #0]
	}

	if (HAL_GetTick() - before >= NormalMode) {
 800b0f0:	f006 f82c 	bl	801114c <HAL_GetTick>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	4a1e      	ldr	r2, [pc, #120]	; (800b170 <NormalControl+0x1c8>)
 800b0f8:	6812      	ldr	r2, [r2, #0]
 800b0fa:	1a9b      	subs	r3, r3, r2
 800b0fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800b100:	d314      	bcc.n	800b12c <NormalControl+0x184>
		led9= !led9;
 800b102:	4b1c      	ldr	r3, [pc, #112]	; (800b174 <NormalControl+0x1cc>)
 800b104:	7e1b      	ldrb	r3, [r3, #24]
 800b106:	f003 0310 	and.w	r3, r3, #16
 800b10a:	b2db      	uxtb	r3, r3
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	bf0c      	ite	eq
 800b110:	2301      	moveq	r3, #1
 800b112:	2300      	movne	r3, #0
 800b114:	b2d9      	uxtb	r1, r3
 800b116:	4a17      	ldr	r2, [pc, #92]	; (800b174 <NormalControl+0x1cc>)
 800b118:	7e13      	ldrb	r3, [r2, #24]
 800b11a:	f361 1304 	bfi	r3, r1, #4, #1
 800b11e:	7613      	strb	r3, [r2, #24]
		before = HAL_GetTick();
 800b120:	f006 f814 	bl	801114c <HAL_GetTick>
 800b124:	4603      	mov	r3, r0
 800b126:	461a      	mov	r2, r3
 800b128:	4b11      	ldr	r3, [pc, #68]	; (800b170 <NormalControl+0x1c8>)
 800b12a:	601a      	str	r2, [r3, #0]
	}
}
 800b12c:	bf00      	nop
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	2000a3fc 	.word	0x2000a3fc
 800b134:	2000aa08 	.word	0x2000aa08
 800b138:	2000718c 	.word	0x2000718c
 800b13c:	2000029c 	.word	0x2000029c
 800b140:	20007d30 	.word	0x20007d30
 800b144:	ffffb1e1 	.word	0xffffb1e1
 800b148:	20009ad4 	.word	0x20009ad4
 800b14c:	2000973c 	.word	0x2000973c
 800b150:	2000794c 	.word	0x2000794c
 800b154:	200002a0 	.word	0x200002a0
 800b158:	20007848 	.word	0x20007848
 800b15c:	3e99999a 	.word	0x3e99999a
 800b160:	20006fdc 	.word	0x20006fdc
 800b164:	20009dd8 	.word	0x20009dd8
 800b168:	20007d24 	.word	0x20007d24
 800b16c:	20007784 	.word	0x20007784
 800b170:	20007764 	.word	0x20007764
 800b174:	200099fc 	.word	0x200099fc

0800b178 <Auto>:

void Auto() {
 800b178:	b5b0      	push	{r4, r5, r7, lr}
 800b17a:	b088      	sub	sp, #32
 800b17c:	af00      	add	r7, sp, #0
	if(ps4.button == OPTION)
 800b17e:	4b79      	ldr	r3, [pc, #484]	; (800b364 <Auto+0x1ec>)
 800b180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b186:	d14a      	bne.n	800b21e <Auto+0xa6>
	{
		while(ps4.button == OPTION);
 800b188:	bf00      	nop
 800b18a:	4b76      	ldr	r3, [pc, #472]	; (800b364 <Auto+0x1ec>)
 800b18c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b18e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b192:	d0fa      	beq.n	800b18a <Auto+0x12>
//		else
//			lidar.AdjEnb = 1;
//		ResetCoordinate();
//		ResetPickEnc();
		static int counter = 0;
		counter++;
 800b194:	4b74      	ldr	r3, [pc, #464]	; (800b368 <Auto+0x1f0>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	3301      	adds	r3, #1
 800b19a:	4a73      	ldr	r2, [pc, #460]	; (800b368 <Auto+0x1f0>)
 800b19c:	6013      	str	r3, [r2, #0]

		if(counter == 1)
 800b19e:	4b72      	ldr	r3, [pc, #456]	; (800b368 <Auto+0x1f0>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d10c      	bne.n	800b1c0 <Auto+0x48>
		{
			led_enb = 0;
 800b1a6:	4b71      	ldr	r3, [pc, #452]	; (800b36c <Auto+0x1f4>)
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	601a      	str	r2, [r3, #0]
			vesc_duty = 0.375;
 800b1ac:	4b70      	ldr	r3, [pc, #448]	; (800b370 <Auto+0x1f8>)
 800b1ae:	f04f 527b 	mov.w	r2, #1052770304	; 0x3ec00000
 800b1b2:	601a      	str	r2, [r3, #0]
			led8 = 1;
 800b1b4:	4a6f      	ldr	r2, [pc, #444]	; (800b374 <Auto+0x1fc>)
 800b1b6:	7e13      	ldrb	r3, [r2, #24]
 800b1b8:	f043 0320 	orr.w	r3, r3, #32
 800b1bc:	7613      	strb	r3, [r2, #24]
 800b1be:	e02e      	b.n	800b21e <Auto+0xa6>
		}
		else if(counter == 2)
 800b1c0:	4b69      	ldr	r3, [pc, #420]	; (800b368 <Auto+0x1f0>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	2b02      	cmp	r3, #2
 800b1c6:	d109      	bne.n	800b1dc <Auto+0x64>
		{
			led_enb = 1;
 800b1c8:	4b68      	ldr	r3, [pc, #416]	; (800b36c <Auto+0x1f4>)
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	601a      	str	r2, [r3, #0]
			shot_prd = 125;
 800b1ce:	4b6a      	ldr	r3, [pc, #424]	; (800b378 <Auto+0x200>)
 800b1d0:	227d      	movs	r2, #125	; 0x7d
 800b1d2:	601a      	str	r2, [r3, #0]
			vesc_duty = 0.275;
 800b1d4:	4b66      	ldr	r3, [pc, #408]	; (800b370 <Auto+0x1f8>)
 800b1d6:	4a69      	ldr	r2, [pc, #420]	; (800b37c <Auto+0x204>)
 800b1d8:	601a      	str	r2, [r3, #0]
 800b1da:	e020      	b.n	800b21e <Auto+0xa6>
		}
		else if(counter == 3)
 800b1dc:	4b62      	ldr	r3, [pc, #392]	; (800b368 <Auto+0x1f0>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	2b03      	cmp	r3, #3
 800b1e2:	d10a      	bne.n	800b1fa <Auto+0x82>
		{
			led_enb = 1;
 800b1e4:	4b61      	ldr	r3, [pc, #388]	; (800b36c <Auto+0x1f4>)
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	601a      	str	r2, [r3, #0]
			shot_prd = 500;
 800b1ea:	4b63      	ldr	r3, [pc, #396]	; (800b378 <Auto+0x200>)
 800b1ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b1f0:	601a      	str	r2, [r3, #0]
			vesc_duty = 0.39;
 800b1f2:	4b5f      	ldr	r3, [pc, #380]	; (800b370 <Auto+0x1f8>)
 800b1f4:	4a62      	ldr	r2, [pc, #392]	; (800b380 <Auto+0x208>)
 800b1f6:	601a      	str	r2, [r3, #0]
 800b1f8:	e011      	b.n	800b21e <Auto+0xa6>
		}
		else if(counter == 4)
 800b1fa:	4b5b      	ldr	r3, [pc, #364]	; (800b368 <Auto+0x1f0>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	2b04      	cmp	r3, #4
 800b200:	d10d      	bne.n	800b21e <Auto+0xa6>
		{
			led_enb = 0;
 800b202:	4b5a      	ldr	r3, [pc, #360]	; (800b36c <Auto+0x1f4>)
 800b204:	2200      	movs	r2, #0
 800b206:	601a      	str	r2, [r3, #0]
			vesc_duty = 0.165;
 800b208:	4b59      	ldr	r3, [pc, #356]	; (800b370 <Auto+0x1f8>)
 800b20a:	4a5e      	ldr	r2, [pc, #376]	; (800b384 <Auto+0x20c>)
 800b20c:	601a      	str	r2, [r3, #0]
			led8 = 0;
 800b20e:	4a59      	ldr	r2, [pc, #356]	; (800b374 <Auto+0x1fc>)
 800b210:	7e13      	ldrb	r3, [r2, #24]
 800b212:	f36f 1345 	bfc	r3, #5, #1
 800b216:	7613      	strb	r3, [r2, #24]
			counter = 0;
 800b218:	4b53      	ldr	r3, [pc, #332]	; (800b368 <Auto+0x1f0>)
 800b21a:	2200      	movs	r2, #0
 800b21c:	601a      	str	r2, [r3, #0]
		}
	}

	// Shoot
	if(ps4.button == CROSS)
 800b21e:	4b51      	ldr	r3, [pc, #324]	; (800b364 <Auto+0x1ec>)
 800b220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b222:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b226:	d10f      	bne.n	800b248 <Auto+0xd0>
	{
		while(ps4.button == CROSS);
 800b228:	bf00      	nop
 800b22a:	4b4e      	ldr	r3, [pc, #312]	; (800b364 <Auto+0x1ec>)
 800b22c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b22e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b232:	d0fa      	beq.n	800b22a <Auto+0xb2>
		push_shoot;
 800b234:	4954      	ldr	r1, [pc, #336]	; (800b388 <Auto+0x210>)
 800b236:	4855      	ldr	r0, [pc, #340]	; (800b38c <Auto+0x214>)
 800b238:	f7f5 ffa7 	bl	800118a <WriteBDC>
		shoot_start = 1;
 800b23c:	4b54      	ldr	r3, [pc, #336]	; (800b390 <Auto+0x218>)
 800b23e:	2201      	movs	r2, #1
 800b240:	601a      	str	r2, [r3, #0]
		wait_load = 1;
 800b242:	4b54      	ldr	r3, [pc, #336]	; (800b394 <Auto+0x21c>)
 800b244:	2201      	movs	r2, #1
 800b246:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == SQUARE)
 800b248:	4b46      	ldr	r3, [pc, #280]	; (800b364 <Auto+0x1ec>)
 800b24a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b24c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b250:	d111      	bne.n	800b276 <Auto+0xfe>
	{
		while(ps4.button == SQUARE);
 800b252:	bf00      	nop
 800b254:	4b43      	ldr	r3, [pc, #268]	; (800b364 <Auto+0x1ec>)
 800b256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b25c:	d0fa      	beq.n	800b254 <Auto+0xdc>
//		PP_stop(&pp);
		setPick(500);
 800b25e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b262:	f000 f8a9 	bl	800b3b8 <setPick>
		open_servo;
 800b266:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800b26a:	484b      	ldr	r0, [pc, #300]	; (800b398 <Auto+0x220>)
 800b26c:	f7fe fd50 	bl	8009d10 <ServoSetPulse>
		stick_fence = 0;
 800b270:	4b4a      	ldr	r3, [pc, #296]	; (800b39c <Auto+0x224>)
 800b272:	2200      	movs	r2, #0
 800b274:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == CIRCLE)
 800b276:	4b3b      	ldr	r3, [pc, #236]	; (800b364 <Auto+0x1ec>)
 800b278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b27a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b27e:	d142      	bne.n	800b306 <Auto+0x18e>
	{
		while(ps4.button == CIRCLE);
 800b280:	bf00      	nop
 800b282:	4b38      	ldr	r3, [pc, #224]	; (800b364 <Auto+0x1ec>)
 800b284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b28a:	d0fa      	beq.n	800b282 <Auto+0x10a>
		static int counter = 0;

		if(counter == 0)
 800b28c:	4b44      	ldr	r3, [pc, #272]	; (800b3a0 <Auto+0x228>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d132      	bne.n	800b2fa <Auto+0x182>
		{
			setPick(2200);
 800b294:	f640 0098 	movw	r0, #2200	; 0x898
 800b298:	f000 f88e 	bl	800b3b8 <setPick>

			float pick_left_point[1][7] = {{5.0, -4.3, 0, 0, 0, 0, 0}};
 800b29c:	4b41      	ldr	r3, [pc, #260]	; (800b3a4 <Auto+0x22c>)
 800b29e:	1d3c      	adds	r4, r7, #4
 800b2a0:	461d      	mov	r5, r3
 800b2a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b2a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b2a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b2aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			PP_start(pick_left_point, 1, &pp);
 800b2ae:	1d3b      	adds	r3, r7, #4
 800b2b0:	4a3d      	ldr	r2, [pc, #244]	; (800b3a8 <Auto+0x230>)
 800b2b2:	2101      	movs	r1, #1
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f7fa fafe 	bl	80058b6 <PP_start>
			while(pp.pp_start)
 800b2ba:	e00d      	b.n	800b2d8 <Auto+0x160>
			{
				if(ps4.button == SQUARE)
 800b2bc:	4b29      	ldr	r3, [pc, #164]	; (800b364 <Auto+0x1ec>)
 800b2be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2c4:	d108      	bne.n	800b2d8 <Auto+0x160>
				{
					while(ps4.button == SQUARE);
 800b2c6:	bf00      	nop
 800b2c8:	4b26      	ldr	r3, [pc, #152]	; (800b364 <Auto+0x1ec>)
 800b2ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2d0:	d0fa      	beq.n	800b2c8 <Auto+0x150>
					PP_stop(&pp);
 800b2d2:	4835      	ldr	r0, [pc, #212]	; (800b3a8 <Auto+0x230>)
 800b2d4:	f7fa fd29 	bl	8005d2a <PP_stop>
			while(pp.pp_start)
 800b2d8:	4b33      	ldr	r3, [pc, #204]	; (800b3a8 <Auto+0x230>)
 800b2da:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b2de:	f003 0301 	and.w	r3, r3, #1
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d1e9      	bne.n	800b2bc <Auto+0x144>
				}
			}
			pick_left = 1;
 800b2e8:	4b30      	ldr	r3, [pc, #192]	; (800b3ac <Auto+0x234>)
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	601a      	str	r2, [r3, #0]
			counter++;
 800b2ee:	4b2c      	ldr	r3, [pc, #176]	; (800b3a0 <Auto+0x228>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	4a2a      	ldr	r2, [pc, #168]	; (800b3a0 <Auto+0x228>)
 800b2f6:	6013      	str	r3, [r2, #0]
 800b2f8:	e005      	b.n	800b306 <Auto+0x18e>
		}
		else
		{
			counter = 0;
 800b2fa:	4b29      	ldr	r3, [pc, #164]	; (800b3a0 <Auto+0x228>)
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	601a      	str	r2, [r3, #0]
			pick_right = 1;
 800b300:	4b2b      	ldr	r3, [pc, #172]	; (800b3b0 <Auto+0x238>)
 800b302:	2201      	movs	r2, #1
 800b304:	601a      	str	r2, [r3, #0]
		}
	}

	if(ps4.button == TRIANGLE)
 800b306:	4b17      	ldr	r3, [pc, #92]	; (800b364 <Auto+0x1ec>)
 800b308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b30a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b30e:	d107      	bne.n	800b320 <Auto+0x1a8>
	{
		while(ps4.button == TRIANGLE);
 800b310:	bf00      	nop
 800b312:	4b14      	ldr	r3, [pc, #80]	; (800b364 <Auto+0x1ec>)
 800b314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b31a:	d0fa      	beq.n	800b312 <Auto+0x19a>
		AutoLoadRing();
 800b31c:	f000 fb9a 	bl	800ba54 <AutoLoadRing>
	}

	if (HAL_GetTick() - before >= AutoMode)
 800b320:	f005 ff14 	bl	801114c <HAL_GetTick>
 800b324:	4603      	mov	r3, r0
 800b326:	4a23      	ldr	r2, [pc, #140]	; (800b3b4 <Auto+0x23c>)
 800b328:	6812      	ldr	r2, [r2, #0]
 800b32a:	1a9b      	subs	r3, r3, r2
 800b32c:	2b7c      	cmp	r3, #124	; 0x7c
 800b32e:	d914      	bls.n	800b35a <Auto+0x1e2>
	{
		led9= !led9;
 800b330:	4b10      	ldr	r3, [pc, #64]	; (800b374 <Auto+0x1fc>)
 800b332:	7e1b      	ldrb	r3, [r3, #24]
 800b334:	f003 0310 	and.w	r3, r3, #16
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	bf0c      	ite	eq
 800b33e:	2301      	moveq	r3, #1
 800b340:	2300      	movne	r3, #0
 800b342:	b2d9      	uxtb	r1, r3
 800b344:	4a0b      	ldr	r2, [pc, #44]	; (800b374 <Auto+0x1fc>)
 800b346:	7e13      	ldrb	r3, [r2, #24]
 800b348:	f361 1304 	bfi	r3, r1, #4, #1
 800b34c:	7613      	strb	r3, [r2, #24]
		before = HAL_GetTick();
 800b34e:	f005 fefd 	bl	801114c <HAL_GetTick>
 800b352:	4603      	mov	r3, r0
 800b354:	461a      	mov	r2, r3
 800b356:	4b17      	ldr	r3, [pc, #92]	; (800b3b4 <Auto+0x23c>)
 800b358:	601a      	str	r2, [r3, #0]
	}
}
 800b35a:	bf00      	nop
 800b35c:	3720      	adds	r7, #32
 800b35e:	46bd      	mov	sp, r7
 800b360:	bdb0      	pop	{r4, r5, r7, pc}
 800b362:	bf00      	nop
 800b364:	2000a3fc 	.word	0x2000a3fc
 800b368:	200002a4 	.word	0x200002a4
 800b36c:	2000a9c4 	.word	0x2000a9c4
 800b370:	20007848 	.word	0x20007848
 800b374:	200099fc 	.word	0x200099fc
 800b378:	2000a770 	.word	0x2000a770
 800b37c:	3e8ccccd 	.word	0x3e8ccccd
 800b380:	3ec7ae14 	.word	0x3ec7ae14
 800b384:	3e28f5c3 	.word	0x3e28f5c3
 800b388:	ffffb1e1 	.word	0xffffb1e1
 800b38c:	20009ad4 	.word	0x20009ad4
 800b390:	2000973c 	.word	0x2000973c
 800b394:	2000794c 	.word	0x2000794c
 800b398:	20007d30 	.word	0x20007d30
 800b39c:	20007784 	.word	0x20007784
 800b3a0:	200002a8 	.word	0x200002a8
 800b3a4:	080208f4 	.word	0x080208f4
 800b3a8:	2000718c 	.word	0x2000718c
 800b3ac:	20007d24 	.word	0x20007d24
 800b3b0:	2000aa08 	.word	0x2000aa08
 800b3b4:	20007764 	.word	0x20007764

0800b3b8 <setPick>:
			break;
	}
}

void setPick(int32_t target)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b083      	sub	sp, #12
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
	pick_target_enc = target;
 800b3c0:	4a05      	ldr	r2, [pc, #20]	; (800b3d8 <setPick+0x20>)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6013      	str	r3, [r2, #0]
	set_pick_enc = 1;
 800b3c6:	4b05      	ldr	r3, [pc, #20]	; (800b3dc <setPick+0x24>)
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	601a      	str	r2, [r3, #0]
}
 800b3cc:	bf00      	nop
 800b3ce:	370c      	adds	r7, #12
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr
 800b3d8:	20006a8c 	.word	0x20006a8c
 800b3dc:	20007bf8 	.word	0x20007bf8

0800b3e0 <CheckPickEnc>:

void CheckPickEnc(void)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	af00      	add	r7, sp, #0
	if(set_pick_enc)
 800b3e4:	4b1a      	ldr	r3, [pc, #104]	; (800b450 <CheckPickEnc+0x70>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d02e      	beq.n	800b44a <CheckPickEnc+0x6a>
	{
		pickErr = pick_target_enc - pick_enc;
 800b3ec:	4b19      	ldr	r3, [pc, #100]	; (800b454 <CheckPickEnc+0x74>)
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	4b19      	ldr	r3, [pc, #100]	; (800b458 <CheckPickEnc+0x78>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	1ad3      	subs	r3, r2, r3
 800b3f6:	ee07 3a90 	vmov	s15, r3
 800b3fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3fe:	4b17      	ldr	r3, [pc, #92]	; (800b45c <CheckPickEnc+0x7c>)
 800b400:	edc3 7a00 	vstr	s15, [r3]
		PID(&pick_PID);
 800b404:	4816      	ldr	r0, [pc, #88]	; (800b460 <CheckPickEnc+0x80>)
 800b406:	f7f9 fffe 	bl	8005406 <PID>
		pick_manual((int32_t)pickU);
 800b40a:	4b16      	ldr	r3, [pc, #88]	; (800b464 <CheckPickEnc+0x84>)
 800b40c:	edd3 7a00 	vldr	s15, [r3]
 800b410:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b414:	ee17 1a90 	vmov	r1, s15
 800b418:	4813      	ldr	r0, [pc, #76]	; (800b468 <CheckPickEnc+0x88>)
 800b41a:	f7f5 feb6 	bl	800118a <WriteBDC>

		if(abs(pickErr) < pick_tol)
 800b41e:	4b0f      	ldr	r3, [pc, #60]	; (800b45c <CheckPickEnc+0x7c>)
 800b420:	edd3 7a00 	vldr	s15, [r3]
 800b424:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b428:	ee17 3a90 	vmov	r3, s15
 800b42c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800b430:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800b434:	4b0d      	ldr	r3, [pc, #52]	; (800b46c <CheckPickEnc+0x8c>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	429a      	cmp	r2, r3
 800b43a:	da06      	bge.n	800b44a <CheckPickEnc+0x6a>
		{
			set_pick_enc = 0;
 800b43c:	4b04      	ldr	r3, [pc, #16]	; (800b450 <CheckPickEnc+0x70>)
 800b43e:	2200      	movs	r2, #0
 800b440:	601a      	str	r2, [r3, #0]
			pick_stop;
 800b442:	2100      	movs	r1, #0
 800b444:	4808      	ldr	r0, [pc, #32]	; (800b468 <CheckPickEnc+0x88>)
 800b446:	f7f5 fea0 	bl	800118a <WriteBDC>
		}
	}
}
 800b44a:	bf00      	nop
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	20007bf8 	.word	0x20007bf8
 800b454:	20006a8c 	.word	0x20006a8c
 800b458:	200070a8 	.word	0x200070a8
 800b45c:	200069c0 	.word	0x200069c0
 800b460:	20009c6c 	.word	0x20009c6c
 800b464:	20007818 	.word	0x20007818
 800b468:	20007bd4 	.word	0x20007bd4
 800b46c:	2000777c 	.word	0x2000777c

0800b470 <CheckPitch>:

void CheckPitch()
{
 800b470:	b580      	push	{r7, lr}
 800b472:	af00      	add	r7, sp, #0
	if(set_pitch)
 800b474:	4b1b      	ldr	r3, [pc, #108]	; (800b4e4 <CheckPitch+0x74>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d02c      	beq.n	800b4d6 <CheckPitch+0x66>
	{
		switch(Robot_Pitch)
 800b47c:	4b1a      	ldr	r3, [pc, #104]	; (800b4e8 <CheckPitch+0x78>)
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d002      	beq.n	800b48a <CheckPitch+0x1a>
 800b484:	2b01      	cmp	r3, #1
 800b486:	d013      	beq.n	800b4b0 <CheckPitch+0x40>
					set_pitch = 0;
				}
				break;
		}
	}
}
 800b488:	e02a      	b.n	800b4e0 <CheckPitch+0x70>
				if(In_Pitch70)
 800b48a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b48e:	4817      	ldr	r0, [pc, #92]	; (800b4ec <CheckPitch+0x7c>)
 800b490:	f007 fcd8 	bl	8012e44 <HAL_GPIO_ReadPin>
 800b494:	4603      	mov	r3, r0
 800b496:	2b00      	cmp	r3, #0
 800b498:	d11f      	bne.n	800b4da <CheckPitch+0x6a>
					pitch_stop;
 800b49a:	2100      	movs	r1, #0
 800b49c:	4814      	ldr	r0, [pc, #80]	; (800b4f0 <CheckPitch+0x80>)
 800b49e:	f7f5 fe74 	bl	800118a <WriteBDC>
					Robot_Pitch = PITCH70;
 800b4a2:	4b11      	ldr	r3, [pc, #68]	; (800b4e8 <CheckPitch+0x78>)
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	701a      	strb	r2, [r3, #0]
					set_pitch = 0;
 800b4a8:	4b0e      	ldr	r3, [pc, #56]	; (800b4e4 <CheckPitch+0x74>)
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	601a      	str	r2, [r3, #0]
				break;
 800b4ae:	e014      	b.n	800b4da <CheckPitch+0x6a>
				if(In_Pitch45)
 800b4b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b4b4:	480d      	ldr	r0, [pc, #52]	; (800b4ec <CheckPitch+0x7c>)
 800b4b6:	f007 fcc5 	bl	8012e44 <HAL_GPIO_ReadPin>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d10e      	bne.n	800b4de <CheckPitch+0x6e>
					pitch_stop;
 800b4c0:	2100      	movs	r1, #0
 800b4c2:	480b      	ldr	r0, [pc, #44]	; (800b4f0 <CheckPitch+0x80>)
 800b4c4:	f7f5 fe61 	bl	800118a <WriteBDC>
					Robot_Pitch = PITCH45;
 800b4c8:	4b07      	ldr	r3, [pc, #28]	; (800b4e8 <CheckPitch+0x78>)
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	701a      	strb	r2, [r3, #0]
					set_pitch = 0;
 800b4ce:	4b05      	ldr	r3, [pc, #20]	; (800b4e4 <CheckPitch+0x74>)
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	601a      	str	r2, [r3, #0]
				break;
 800b4d4:	e003      	b.n	800b4de <CheckPitch+0x6e>
	}
 800b4d6:	bf00      	nop
 800b4d8:	e002      	b.n	800b4e0 <CheckPitch+0x70>
				break;
 800b4da:	bf00      	nop
 800b4dc:	e000      	b.n	800b4e0 <CheckPitch+0x70>
				break;
 800b4de:	bf00      	nop
}
 800b4e0:	bf00      	nop
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	20009abc 	.word	0x20009abc
 800b4e8:	20009ad2 	.word	0x20009ad2
 800b4ec:	40020400 	.word	0x40020400
 800b4f0:	2000710c 	.word	0x2000710c
 800b4f4:	00000000 	.word	0x00000000

0800b4f8 <CheckPick>:

void CheckPick()
{
 800b4f8:	b5b0      	push	{r4, r5, r7, lr}
 800b4fa:	b09c      	sub	sp, #112	; 0x70
 800b4fc:	af00      	add	r7, sp, #0
	if(pick_left)
 800b4fe:	4bb6      	ldr	r3, [pc, #728]	; (800b7d8 <CheckPick+0x2e0>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	f000 80a4 	beq.w	800b650 <CheckPick+0x158>
	{
		// Stick to fence
		float stick_fence_point[1][7] = {{2.0, 0.0, -5, 0, 0, 0, 0}};
 800b508:	4bb4      	ldr	r3, [pc, #720]	; (800b7dc <CheckPick+0x2e4>)
 800b50a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800b50e:	461d      	mov	r5, r3
 800b510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b514:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b518:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(stick_fence_point, 1, &pp);
 800b51c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b520:	4aaf      	ldr	r2, [pc, #700]	; (800b7e0 <CheckPick+0x2e8>)
 800b522:	2101      	movs	r1, #1
 800b524:	4618      	mov	r0, r3
 800b526:	f7fa f9c6 	bl	80058b6 <PP_start>
		while(pp.pp_start)
 800b52a:	e020      	b.n	800b56e <CheckPick+0x76>
		{
			if(ps4.button == SQUARE)
 800b52c:	4bad      	ldr	r3, [pc, #692]	; (800b7e4 <CheckPick+0x2ec>)
 800b52e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b534:	d108      	bne.n	800b548 <CheckPick+0x50>
			{
				while(ps4.button == SQUARE);
 800b536:	bf00      	nop
 800b538:	4baa      	ldr	r3, [pc, #680]	; (800b7e4 <CheckPick+0x2ec>)
 800b53a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b53c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b540:	d0fa      	beq.n	800b538 <CheckPick+0x40>
				PP_stop(&pp);
 800b542:	48a7      	ldr	r0, [pc, #668]	; (800b7e0 <CheckPick+0x2e8>)
 800b544:	f7fa fbf1 	bl	8005d2a <PP_stop>
			}

			if(In_LS_Left_1 && In_LS_Left_2)
 800b548:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b54c:	48a6      	ldr	r0, [pc, #664]	; (800b7e8 <CheckPick+0x2f0>)
 800b54e:	f007 fc79 	bl	8012e44 <HAL_GPIO_ReadPin>
 800b552:	4603      	mov	r3, r0
 800b554:	2b00      	cmp	r3, #0
 800b556:	d10a      	bne.n	800b56e <CheckPick+0x76>
 800b558:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b55c:	48a2      	ldr	r0, [pc, #648]	; (800b7e8 <CheckPick+0x2f0>)
 800b55e:	f007 fc71 	bl	8012e44 <HAL_GPIO_ReadPin>
 800b562:	4603      	mov	r3, r0
 800b564:	2b00      	cmp	r3, #0
 800b566:	d102      	bne.n	800b56e <CheckPick+0x76>
				PP_stop(&pp);
 800b568:	489d      	ldr	r0, [pc, #628]	; (800b7e0 <CheckPick+0x2e8>)
 800b56a:	f7fa fbde 	bl	8005d2a <PP_stop>
		while(pp.pp_start)
 800b56e:	4b9c      	ldr	r3, [pc, #624]	; (800b7e0 <CheckPick+0x2e8>)
 800b570:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b574:	f003 0301 	and.w	r3, r3, #1
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d1d6      	bne.n	800b52c <CheckPick+0x34>
		}
		pick_left = 0;
 800b57e:	4b96      	ldr	r3, [pc, #600]	; (800b7d8 <CheckPick+0x2e0>)
 800b580:	2200      	movs	r2, #0
 800b582:	601a      	str	r2, [r3, #0]
		picked_left = 1;
 800b584:	4b99      	ldr	r3, [pc, #612]	; (800b7ec <CheckPick+0x2f4>)
 800b586:	2201      	movs	r2, #1
 800b588:	601a      	str	r2, [r3, #0]
		setPick(0);
 800b58a:	2000      	movs	r0, #0
 800b58c:	f7ff ff14 	bl	800b3b8 <setPick>
		float pick_left_point[1][7] = {{0.65, -10, 0, pp.real_z, 0, 0, 0}};
 800b590:	4b97      	ldr	r3, [pc, #604]	; (800b7f0 <CheckPick+0x2f8>)
 800b592:	63bb      	str	r3, [r7, #56]	; 0x38
 800b594:	4b97      	ldr	r3, [pc, #604]	; (800b7f4 <CheckPick+0x2fc>)
 800b596:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b598:	f04f 0300 	mov.w	r3, #0
 800b59c:	643b      	str	r3, [r7, #64]	; 0x40
 800b59e:	4b90      	ldr	r3, [pc, #576]	; (800b7e0 <CheckPick+0x2e8>)
 800b5a0:	691b      	ldr	r3, [r3, #16]
 800b5a2:	647b      	str	r3, [r7, #68]	; 0x44
 800b5a4:	f04f 0300 	mov.w	r3, #0
 800b5a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5aa:	f04f 0300 	mov.w	r3, #0
 800b5ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5b0:	f04f 0300 	mov.w	r3, #0
 800b5b4:	653b      	str	r3, [r7, #80]	; 0x50
		PP_start(pick_left_point, 1, &pp);
 800b5b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b5ba:	4a89      	ldr	r2, [pc, #548]	; (800b7e0 <CheckPick+0x2e8>)
 800b5bc:	2101      	movs	r1, #1
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7fa f979 	bl	80058b6 <PP_start>
		while(pp.pp_start)
 800b5c4:	e029      	b.n	800b61a <CheckPick+0x122>
		{
			if(ps4.button == SQUARE)
 800b5c6:	4b87      	ldr	r3, [pc, #540]	; (800b7e4 <CheckPick+0x2ec>)
 800b5c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5ce:	d10b      	bne.n	800b5e8 <CheckPick+0xf0>
			{
				while(ps4.button == SQUARE);
 800b5d0:	bf00      	nop
 800b5d2:	4b84      	ldr	r3, [pc, #528]	; (800b7e4 <CheckPick+0x2ec>)
 800b5d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5da:	d0fa      	beq.n	800b5d2 <CheckPick+0xda>
				PP_stop(&pp);
 800b5dc:	4880      	ldr	r0, [pc, #512]	; (800b7e0 <CheckPick+0x2e8>)
 800b5de:	f7fa fba4 	bl	8005d2a <PP_stop>
				picked_left = 0;
 800b5e2:	4b82      	ldr	r3, [pc, #520]	; (800b7ec <CheckPick+0x2f4>)
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	601a      	str	r2, [r3, #0]
			}

			if(In_Pick && pp.real_x <= -4.7)
 800b5e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b5ec:	4882      	ldr	r0, [pc, #520]	; (800b7f8 <CheckPick+0x300>)
 800b5ee:	f007 fc29 	bl	8012e44 <HAL_GPIO_ReadPin>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d110      	bne.n	800b61a <CheckPick+0x122>
 800b5f8:	4b79      	ldr	r3, [pc, #484]	; (800b7e0 <CheckPick+0x2e8>)
 800b5fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7f4 ffa3 	bl	8000548 <__aeabi_f2d>
 800b602:	a373      	add	r3, pc, #460	; (adr r3, 800b7d0 <CheckPick+0x2d8>)
 800b604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b608:	f7f5 fa72 	bl	8000af0 <__aeabi_dcmple>
 800b60c:	4603      	mov	r3, r0
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d100      	bne.n	800b614 <CheckPick+0x11c>
 800b612:	e002      	b.n	800b61a <CheckPick+0x122>
				PP_stop(&pp);
 800b614:	4872      	ldr	r0, [pc, #456]	; (800b7e0 <CheckPick+0x2e8>)
 800b616:	f7fa fb88 	bl	8005d2a <PP_stop>
		while(pp.pp_start)
 800b61a:	4b71      	ldr	r3, [pc, #452]	; (800b7e0 <CheckPick+0x2e8>)
 800b61c:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b620:	f003 0301 	and.w	r3, r3, #1
 800b624:	b2db      	uxtb	r3, r3
 800b626:	2b00      	cmp	r3, #0
 800b628:	d1cd      	bne.n	800b5c6 <CheckPick+0xce>
		}
		if(picked_left)
 800b62a:	4b70      	ldr	r3, [pc, #448]	; (800b7ec <CheckPick+0x2f4>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d00e      	beq.n	800b650 <CheckPick+0x158>
		{
			LoadRing();
 800b632:	f000 f9eb 	bl	800ba0c <LoadRing>
			lidar.pos_counter = CENTER_1;
 800b636:	4b71      	ldr	r3, [pc, #452]	; (800b7fc <CheckPick+0x304>)
 800b638:	2203      	movs	r2, #3
 800b63a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			osDelay(500);
 800b63e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b642:	f00c fae6 	bl	8017c12 <osDelay>
			close_servo;
 800b646:	f240 31a2 	movw	r1, #930	; 0x3a2
 800b64a:	486d      	ldr	r0, [pc, #436]	; (800b800 <CheckPick+0x308>)
 800b64c:	f7fe fb60 	bl	8009d10 <ServoSetPulse>
		}
	}

	if(pick_right)
 800b650:	4b6c      	ldr	r3, [pc, #432]	; (800b804 <CheckPick+0x30c>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	f000 80b6 	beq.w	800b7c6 <CheckPick+0x2ce>
	{
		load_stop_once = 0;
 800b65a:	4b6b      	ldr	r3, [pc, #428]	; (800b808 <CheckPick+0x310>)
 800b65c:	2200      	movs	r2, #0
 800b65e:	601a      	str	r2, [r3, #0]
		loaded = 0;
 800b660:	4b6a      	ldr	r3, [pc, #424]	; (800b80c <CheckPick+0x314>)
 800b662:	2200      	movs	r2, #0
 800b664:	601a      	str	r2, [r3, #0]

		pick_0 = 1;
 800b666:	4b6a      	ldr	r3, [pc, #424]	; (800b810 <CheckPick+0x318>)
 800b668:	2201      	movs	r2, #1
 800b66a:	601a      	str	r2, [r3, #0]
		pick_manual(-10000);
 800b66c:	4969      	ldr	r1, [pc, #420]	; (800b814 <CheckPick+0x31c>)
 800b66e:	486a      	ldr	r0, [pc, #424]	; (800b818 <CheckPick+0x320>)
 800b670:	f7f5 fd8b 	bl	800118a <WriteBDC>

		lidar.pos = PICK_RIGHT;
 800b674:	4b61      	ldr	r3, [pc, #388]	; (800b7fc <CheckPick+0x304>)
 800b676:	2209      	movs	r2, #9
 800b678:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar.pos_counter = PICK_RIGHT;
 800b67c:	4b5f      	ldr	r3, [pc, #380]	; (800b7fc <CheckPick+0x304>)
 800b67e:	2209      	movs	r2, #9
 800b680:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		// Stick to fence
//		setPick(0);
		open_servo;
 800b684:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800b688:	485d      	ldr	r0, [pc, #372]	; (800b800 <CheckPick+0x308>)
 800b68a:	f7fe fb41 	bl	8009d10 <ServoSetPulse>
		pick_right = 0;
 800b68e:	4b5d      	ldr	r3, [pc, #372]	; (800b804 <CheckPick+0x30c>)
 800b690:	2200      	movs	r2, #0
 800b692:	601a      	str	r2, [r3, #0]
		float stick_fence_right[1][7] = {{2.0, 5, 0, pp.real_z, 0, 0, 0}};
 800b694:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b698:	61fb      	str	r3, [r7, #28]
 800b69a:	4b60      	ldr	r3, [pc, #384]	; (800b81c <CheckPick+0x324>)
 800b69c:	623b      	str	r3, [r7, #32]
 800b69e:	f04f 0300 	mov.w	r3, #0
 800b6a2:	627b      	str	r3, [r7, #36]	; 0x24
 800b6a4:	4b4e      	ldr	r3, [pc, #312]	; (800b7e0 <CheckPick+0x2e8>)
 800b6a6:	691b      	ldr	r3, [r3, #16]
 800b6a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6aa:	f04f 0300 	mov.w	r3, #0
 800b6ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6b0:	f04f 0300 	mov.w	r3, #0
 800b6b4:	633b      	str	r3, [r7, #48]	; 0x30
 800b6b6:	f04f 0300 	mov.w	r3, #0
 800b6ba:	637b      	str	r3, [r7, #52]	; 0x34
		PP_start(stick_fence_right, 1, &pp);
 800b6bc:	f107 031c 	add.w	r3, r7, #28
 800b6c0:	4a47      	ldr	r2, [pc, #284]	; (800b7e0 <CheckPick+0x2e8>)
 800b6c2:	2101      	movs	r1, #1
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7fa f8f6 	bl	80058b6 <PP_start>
		while(pp.pp_start)
 800b6ca:	e020      	b.n	800b70e <CheckPick+0x216>
		{
			if(ps4.button == SQUARE)
 800b6cc:	4b45      	ldr	r3, [pc, #276]	; (800b7e4 <CheckPick+0x2ec>)
 800b6ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6d4:	d108      	bne.n	800b6e8 <CheckPick+0x1f0>
			{
				while(ps4.button == SQUARE);
 800b6d6:	bf00      	nop
 800b6d8:	4b42      	ldr	r3, [pc, #264]	; (800b7e4 <CheckPick+0x2ec>)
 800b6da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6e0:	d0fa      	beq.n	800b6d8 <CheckPick+0x1e0>
				PP_stop(&pp);
 800b6e2:	483f      	ldr	r0, [pc, #252]	; (800b7e0 <CheckPick+0x2e8>)
 800b6e4:	f7fa fb21 	bl	8005d2a <PP_stop>
			}

			if(In_LS_Left_1 && In_LS_Left_2)
 800b6e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b6ec:	483e      	ldr	r0, [pc, #248]	; (800b7e8 <CheckPick+0x2f0>)
 800b6ee:	f007 fba9 	bl	8012e44 <HAL_GPIO_ReadPin>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d10a      	bne.n	800b70e <CheckPick+0x216>
 800b6f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b6fc:	483a      	ldr	r0, [pc, #232]	; (800b7e8 <CheckPick+0x2f0>)
 800b6fe:	f007 fba1 	bl	8012e44 <HAL_GPIO_ReadPin>
 800b702:	4603      	mov	r3, r0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d102      	bne.n	800b70e <CheckPick+0x216>
				PP_stop(&pp);
 800b708:	4835      	ldr	r0, [pc, #212]	; (800b7e0 <CheckPick+0x2e8>)
 800b70a:	f7fa fb0e 	bl	8005d2a <PP_stop>
		while(pp.pp_start)
 800b70e:	4b34      	ldr	r3, [pc, #208]	; (800b7e0 <CheckPick+0x2e8>)
 800b710:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b714:	f003 0301 	and.w	r3, r3, #1
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d1d6      	bne.n	800b6cc <CheckPick+0x1d4>
		}

		picked_right = 1;
 800b71e:	4b40      	ldr	r3, [pc, #256]	; (800b820 <CheckPick+0x328>)
 800b720:	2201      	movs	r2, #1
 800b722:	601a      	str	r2, [r3, #0]
		float pick_right_point[1][7] = {{0.65, 0, -10, pp.real_z, 0, 0, 0}};
 800b724:	4b32      	ldr	r3, [pc, #200]	; (800b7f0 <CheckPick+0x2f8>)
 800b726:	603b      	str	r3, [r7, #0]
 800b728:	f04f 0300 	mov.w	r3, #0
 800b72c:	607b      	str	r3, [r7, #4]
 800b72e:	4b31      	ldr	r3, [pc, #196]	; (800b7f4 <CheckPick+0x2fc>)
 800b730:	60bb      	str	r3, [r7, #8]
 800b732:	4b2b      	ldr	r3, [pc, #172]	; (800b7e0 <CheckPick+0x2e8>)
 800b734:	691b      	ldr	r3, [r3, #16]
 800b736:	60fb      	str	r3, [r7, #12]
 800b738:	f04f 0300 	mov.w	r3, #0
 800b73c:	613b      	str	r3, [r7, #16]
 800b73e:	f04f 0300 	mov.w	r3, #0
 800b742:	617b      	str	r3, [r7, #20]
 800b744:	f04f 0300 	mov.w	r3, #0
 800b748:	61bb      	str	r3, [r7, #24]
		PP_start(pick_right_point, 1, &pp);
 800b74a:	463b      	mov	r3, r7
 800b74c:	4a24      	ldr	r2, [pc, #144]	; (800b7e0 <CheckPick+0x2e8>)
 800b74e:	2101      	movs	r1, #1
 800b750:	4618      	mov	r0, r3
 800b752:	f7fa f8b0 	bl	80058b6 <PP_start>
		while(pp.pp_start)
 800b756:	e01b      	b.n	800b790 <CheckPick+0x298>
		{
			if(ps4.button == SQUARE)
 800b758:	4b22      	ldr	r3, [pc, #136]	; (800b7e4 <CheckPick+0x2ec>)
 800b75a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b75c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b760:	d10b      	bne.n	800b77a <CheckPick+0x282>
			{
				while(ps4.button == SQUARE);
 800b762:	bf00      	nop
 800b764:	4b1f      	ldr	r3, [pc, #124]	; (800b7e4 <CheckPick+0x2ec>)
 800b766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b76c:	d0fa      	beq.n	800b764 <CheckPick+0x26c>
				PP_stop(&pp);
 800b76e:	481c      	ldr	r0, [pc, #112]	; (800b7e0 <CheckPick+0x2e8>)
 800b770:	f7fa fadb 	bl	8005d2a <PP_stop>
				picked_right = 0;
 800b774:	4b2a      	ldr	r3, [pc, #168]	; (800b820 <CheckPick+0x328>)
 800b776:	2200      	movs	r2, #0
 800b778:	601a      	str	r2, [r3, #0]
			}

			if(In_Pick)
 800b77a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b77e:	481e      	ldr	r0, [pc, #120]	; (800b7f8 <CheckPick+0x300>)
 800b780:	f007 fb60 	bl	8012e44 <HAL_GPIO_ReadPin>
 800b784:	4603      	mov	r3, r0
 800b786:	2b00      	cmp	r3, #0
 800b788:	d102      	bne.n	800b790 <CheckPick+0x298>
				PP_stop(&pp);
 800b78a:	4815      	ldr	r0, [pc, #84]	; (800b7e0 <CheckPick+0x2e8>)
 800b78c:	f7fa facd 	bl	8005d2a <PP_stop>
		while(pp.pp_start)
 800b790:	4b13      	ldr	r3, [pc, #76]	; (800b7e0 <CheckPick+0x2e8>)
 800b792:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b796:	f003 0301 	and.w	r3, r3, #1
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d1db      	bne.n	800b758 <CheckPick+0x260>
		}

		if(picked_right)
 800b7a0:	4b1f      	ldr	r3, [pc, #124]	; (800b820 <CheckPick+0x328>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d00e      	beq.n	800b7c6 <CheckPick+0x2ce>
		{
			LoadRing();
 800b7a8:	f000 f930 	bl	800ba0c <LoadRing>
			lidar.pos_counter = CENTER_4;
 800b7ac:	4b13      	ldr	r3, [pc, #76]	; (800b7fc <CheckPick+0x304>)
 800b7ae:	2207      	movs	r2, #7
 800b7b0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			osDelay(500);
 800b7b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b7b8:	f00c fa2b 	bl	8017c12 <osDelay>
			close_servo;
 800b7bc:	f240 31a2 	movw	r1, #930	; 0x3a2
 800b7c0:	480f      	ldr	r0, [pc, #60]	; (800b800 <CheckPick+0x308>)
 800b7c2:	f7fe faa5 	bl	8009d10 <ServoSetPulse>
		}
	}
}
 800b7c6:	bf00      	nop
 800b7c8:	3770      	adds	r7, #112	; 0x70
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bdb0      	pop	{r4, r5, r7, pc}
 800b7ce:	bf00      	nop
 800b7d0:	cccccccd 	.word	0xcccccccd
 800b7d4:	c012cccc 	.word	0xc012cccc
 800b7d8:	20007d24 	.word	0x20007d24
 800b7dc:	08020910 	.word	0x08020910
 800b7e0:	2000718c 	.word	0x2000718c
 800b7e4:	2000a3fc 	.word	0x2000a3fc
 800b7e8:	40020c00 	.word	0x40020c00
 800b7ec:	20009c58 	.word	0x20009c58
 800b7f0:	3f266666 	.word	0x3f266666
 800b7f4:	c1200000 	.word	0xc1200000
 800b7f8:	40021000 	.word	0x40021000
 800b7fc:	200094a0 	.word	0x200094a0
 800b800:	20007d30 	.word	0x20007d30
 800b804:	2000aa08 	.word	0x2000aa08
 800b808:	20009dd4 	.word	0x20009dd4
 800b80c:	20009898 	.word	0x20009898
 800b810:	2000a1d4 	.word	0x2000a1d4
 800b814:	ffffd8f0 	.word	0xffffd8f0
 800b818:	20007bd4 	.word	0x20007bd4
 800b81c:	40a00000 	.word	0x40a00000
 800b820:	200076dc 	.word	0x200076dc

0800b824 <CheckShoot>:

void CheckShoot()
{
 800b824:	b580      	push	{r7, lr}
 800b826:	af00      	add	r7, sp, #0
//	if(In_ShotDone)
//		led3 = 1;
//	else
//		led3 = 0;

	if(shoot_start && In_ShotDone)
 800b828:	4b2c      	ldr	r3, [pc, #176]	; (800b8dc <CheckShoot+0xb8>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d013      	beq.n	800b858 <CheckShoot+0x34>
 800b830:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b834:	482a      	ldr	r0, [pc, #168]	; (800b8e0 <CheckShoot+0xbc>)
 800b836:	f007 fb05 	bl	8012e44 <HAL_GPIO_ReadPin>
 800b83a:	4603      	mov	r3, r0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d10b      	bne.n	800b858 <CheckShoot+0x34>
	{
		shoot_done = 1;
 800b840:	4b28      	ldr	r3, [pc, #160]	; (800b8e4 <CheckShoot+0xc0>)
 800b842:	2201      	movs	r2, #1
 800b844:	601a      	str	r2, [r3, #0]
		shoot_start = 0;
 800b846:	4b25      	ldr	r3, [pc, #148]	; (800b8dc <CheckShoot+0xb8>)
 800b848:	2200      	movs	r2, #0
 800b84a:	601a      	str	r2, [r3, #0]
		push_return;
 800b84c:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800b850:	4825      	ldr	r0, [pc, #148]	; (800b8e8 <CheckShoot+0xc4>)
 800b852:	f7f5 fc9a 	bl	800118a <WriteBDC>
 800b856:	e00f      	b.n	800b878 <CheckShoot+0x54>
	}
	else if(In_ShotDone)
 800b858:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b85c:	4820      	ldr	r0, [pc, #128]	; (800b8e0 <CheckShoot+0xbc>)
 800b85e:	f007 faf1 	bl	8012e44 <HAL_GPIO_ReadPin>
 800b862:	4603      	mov	r3, r0
 800b864:	2b00      	cmp	r3, #0
 800b866:	d107      	bne.n	800b878 <CheckShoot+0x54>
	{
		push_return;
 800b868:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800b86c:	481e      	ldr	r0, [pc, #120]	; (800b8e8 <CheckShoot+0xc4>)
 800b86e:	f7f5 fc8c 	bl	800118a <WriteBDC>
		shoot_done = 1;
 800b872:	4b1c      	ldr	r3, [pc, #112]	; (800b8e4 <CheckShoot+0xc0>)
 800b874:	2201      	movs	r2, #1
 800b876:	601a      	str	r2, [r3, #0]
	}

	// Done Shooting
	if(shoot_done && In_ShotReady && wait_load)
 800b878:	4b1a      	ldr	r3, [pc, #104]	; (800b8e4 <CheckShoot+0xc0>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d018      	beq.n	800b8b2 <CheckShoot+0x8e>
 800b880:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b884:	4816      	ldr	r0, [pc, #88]	; (800b8e0 <CheckShoot+0xbc>)
 800b886:	f007 fadd 	bl	8012e44 <HAL_GPIO_ReadPin>
 800b88a:	4603      	mov	r3, r0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d110      	bne.n	800b8b2 <CheckShoot+0x8e>
 800b890:	4b16      	ldr	r3, [pc, #88]	; (800b8ec <CheckShoot+0xc8>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d00c      	beq.n	800b8b2 <CheckShoot+0x8e>
	{
		wait_load = 0;
 800b898:	4b14      	ldr	r3, [pc, #80]	; (800b8ec <CheckShoot+0xc8>)
 800b89a:	2200      	movs	r2, #0
 800b89c:	601a      	str	r2, [r3, #0]
		shoot_done = 0;
 800b89e:	4b11      	ldr	r3, [pc, #68]	; (800b8e4 <CheckShoot+0xc0>)
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	601a      	str	r2, [r3, #0]
		push_stop;
 800b8a4:	2100      	movs	r1, #0
 800b8a6:	4810      	ldr	r0, [pc, #64]	; (800b8e8 <CheckShoot+0xc4>)
 800b8a8:	f7f5 fc6f 	bl	800118a <WriteBDC>
		AutoLoadRing();
 800b8ac:	f000 f8d2 	bl	800ba54 <AutoLoadRing>
	else if(shoot_done && In_ShotReady)
	{
		shoot_done = 0;
		push_stop;
	}
}
 800b8b0:	e012      	b.n	800b8d8 <CheckShoot+0xb4>
	else if(shoot_done && In_ShotReady)
 800b8b2:	4b0c      	ldr	r3, [pc, #48]	; (800b8e4 <CheckShoot+0xc0>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00e      	beq.n	800b8d8 <CheckShoot+0xb4>
 800b8ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b8be:	4808      	ldr	r0, [pc, #32]	; (800b8e0 <CheckShoot+0xbc>)
 800b8c0:	f007 fac0 	bl	8012e44 <HAL_GPIO_ReadPin>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d106      	bne.n	800b8d8 <CheckShoot+0xb4>
		shoot_done = 0;
 800b8ca:	4b06      	ldr	r3, [pc, #24]	; (800b8e4 <CheckShoot+0xc0>)
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	601a      	str	r2, [r3, #0]
		push_stop;
 800b8d0:	2100      	movs	r1, #0
 800b8d2:	4805      	ldr	r0, [pc, #20]	; (800b8e8 <CheckShoot+0xc4>)
 800b8d4:	f7f5 fc59 	bl	800118a <WriteBDC>
}
 800b8d8:	bf00      	nop
 800b8da:	bd80      	pop	{r7, pc}
 800b8dc:	2000973c 	.word	0x2000973c
 800b8e0:	40021000 	.word	0x40021000
 800b8e4:	200093ec 	.word	0x200093ec
 800b8e8:	20009ad4 	.word	0x20009ad4
 800b8ec:	2000794c 	.word	0x2000794c

0800b8f0 <CheckLoad>:

void CheckLoad()
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	af00      	add	r7, sp, #0
//	else if(load_start)
//	{
//		pick_up;
//	}

	if(load_start || reload)
 800b8f4:	4b37      	ldr	r3, [pc, #220]	; (800b9d4 <CheckLoad+0xe4>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d103      	bne.n	800b904 <CheckLoad+0x14>
 800b8fc:	4b36      	ldr	r3, [pc, #216]	; (800b9d8 <CheckLoad+0xe8>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d027      	beq.n	800b954 <CheckLoad+0x64>
	{
		if(pick_enc >= 8000 && !load_stop_once)
 800b904:	4b35      	ldr	r3, [pc, #212]	; (800b9dc <CheckLoad+0xec>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800b90c:	db12      	blt.n	800b934 <CheckLoad+0x44>
 800b90e:	4b34      	ldr	r3, [pc, #208]	; (800b9e0 <CheckLoad+0xf0>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d10e      	bne.n	800b934 <CheckLoad+0x44>
		{
			pick_stop;
 800b916:	2100      	movs	r1, #0
 800b918:	4832      	ldr	r0, [pc, #200]	; (800b9e4 <CheckLoad+0xf4>)
 800b91a:	f7f5 fc36 	bl	800118a <WriteBDC>
			osDelay(200);
 800b91e:	20c8      	movs	r0, #200	; 0xc8
 800b920:	f00c f977 	bl	8017c12 <osDelay>
			pick_manual(5000);
 800b924:	f241 3188 	movw	r1, #5000	; 0x1388
 800b928:	482e      	ldr	r0, [pc, #184]	; (800b9e4 <CheckLoad+0xf4>)
 800b92a:	f7f5 fc2e 	bl	800118a <WriteBDC>
//			close_servo;
			load_stop_once = 1;
 800b92e:	4b2c      	ldr	r3, [pc, #176]	; (800b9e0 <CheckLoad+0xf0>)
 800b930:	2201      	movs	r2, #1
 800b932:	601a      	str	r2, [r3, #0]
		}
		if(pick_enc >= 16500)
 800b934:	4b29      	ldr	r3, [pc, #164]	; (800b9dc <CheckLoad+0xec>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f244 0273 	movw	r2, #16499	; 0x4073
 800b93c:	4293      	cmp	r3, r2
 800b93e:	dd09      	ble.n	800b954 <CheckLoad+0x64>
		{
			load_start = 0;
 800b940:	4b24      	ldr	r3, [pc, #144]	; (800b9d4 <CheckLoad+0xe4>)
 800b942:	2200      	movs	r2, #0
 800b944:	601a      	str	r2, [r3, #0]
			reload = 0;
 800b946:	4b24      	ldr	r3, [pc, #144]	; (800b9d8 <CheckLoad+0xe8>)
 800b948:	2200      	movs	r2, #0
 800b94a:	601a      	str	r2, [r3, #0]
			pick_stop;
 800b94c:	2100      	movs	r1, #0
 800b94e:	4825      	ldr	r0, [pc, #148]	; (800b9e4 <CheckLoad+0xf4>)
 800b950:	f7f5 fc1b 	bl	800118a <WriteBDC>
		}
	}

	if(load_start && In_Load && pick_enc >= 9500)
 800b954:	4b1f      	ldr	r3, [pc, #124]	; (800b9d4 <CheckLoad+0xe4>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d016      	beq.n	800b98a <CheckLoad+0x9a>
 800b95c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b960:	4821      	ldr	r0, [pc, #132]	; (800b9e8 <CheckLoad+0xf8>)
 800b962:	f007 fa6f 	bl	8012e44 <HAL_GPIO_ReadPin>
 800b966:	4603      	mov	r3, r0
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d10e      	bne.n	800b98a <CheckLoad+0x9a>
 800b96c:	4b1b      	ldr	r3, [pc, #108]	; (800b9dc <CheckLoad+0xec>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f242 521b 	movw	r2, #9499	; 0x251b
 800b974:	4293      	cmp	r3, r2
 800b976:	dd08      	ble.n	800b98a <CheckLoad+0x9a>
	{
		load_start = 0;
 800b978:	4b16      	ldr	r3, [pc, #88]	; (800b9d4 <CheckLoad+0xe4>)
 800b97a:	2200      	movs	r2, #0
 800b97c:	601a      	str	r2, [r3, #0]
		pick_stop;
 800b97e:	2100      	movs	r1, #0
 800b980:	4818      	ldr	r0, [pc, #96]	; (800b9e4 <CheckLoad+0xf4>)
 800b982:	f7f5 fc02 	bl	800118a <WriteBDC>
		AutoLoadRing();
 800b986:	f000 f865 	bl	800ba54 <AutoLoadRing>
	}

	if(reload && In_Load)
 800b98a:	4b13      	ldr	r3, [pc, #76]	; (800b9d8 <CheckLoad+0xe8>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d00e      	beq.n	800b9b0 <CheckLoad+0xc0>
 800b992:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b996:	4814      	ldr	r0, [pc, #80]	; (800b9e8 <CheckLoad+0xf8>)
 800b998:	f007 fa54 	bl	8012e44 <HAL_GPIO_ReadPin>
 800b99c:	4603      	mov	r3, r0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d106      	bne.n	800b9b0 <CheckLoad+0xc0>
	{
		reload = 0;
 800b9a2:	4b0d      	ldr	r3, [pc, #52]	; (800b9d8 <CheckLoad+0xe8>)
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	601a      	str	r2, [r3, #0]
		pick_stop;
 800b9a8:	2100      	movs	r1, #0
 800b9aa:	480e      	ldr	r0, [pc, #56]	; (800b9e4 <CheckLoad+0xf4>)
 800b9ac:	f7f5 fbed 	bl	800118a <WriteBDC>
	}

	if(loaded >= 7)
 800b9b0:	4b0e      	ldr	r3, [pc, #56]	; (800b9ec <CheckLoad+0xfc>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2b06      	cmp	r3, #6
 800b9b6:	dd04      	ble.n	800b9c2 <CheckLoad+0xd2>
	{
		adjust_servo;
 800b9b8:	f240 31ca 	movw	r1, #970	; 0x3ca
 800b9bc:	480c      	ldr	r0, [pc, #48]	; (800b9f0 <CheckLoad+0x100>)
 800b9be:	f7fe f9a7 	bl	8009d10 <ServoSetPulse>
	}

	if(loaded >= 10)
 800b9c2:	4b0a      	ldr	r3, [pc, #40]	; (800b9ec <CheckLoad+0xfc>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	2b09      	cmp	r3, #9
 800b9c8:	dd02      	ble.n	800b9d0 <CheckLoad+0xe0>
		loaded = 0;
 800b9ca:	4b08      	ldr	r3, [pc, #32]	; (800b9ec <CheckLoad+0xfc>)
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	601a      	str	r2, [r3, #0]
}
 800b9d0:	bf00      	nop
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	20007810 	.word	0x20007810
 800b9d8:	20007c14 	.word	0x20007c14
 800b9dc:	200070a8 	.word	0x200070a8
 800b9e0:	20009dd4 	.word	0x20009dd4
 800b9e4:	20007bd4 	.word	0x20007bd4
 800b9e8:	40021000 	.word	0x40021000
 800b9ec:	20009898 	.word	0x20009898
 800b9f0:	20007d30 	.word	0x20007d30

0800b9f4 <Checking>:
	}

}

void Checking()
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	af00      	add	r7, sp, #0
	CheckShoot();
 800b9f8:	f7ff ff14 	bl	800b824 <CheckShoot>
	CheckLoad();
 800b9fc:	f7ff ff78 	bl	800b8f0 <CheckLoad>
	CheckPick();
 800ba00:	f7ff fd7a 	bl	800b4f8 <CheckPick>
	CheckPitch();
 800ba04:	f7ff fd34 	bl	800b470 <CheckPitch>
}
 800ba08:	bf00      	nop
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <LoadRing>:

void LoadRing(void)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	af00      	add	r7, sp, #0
	load_start = 1;
 800ba10:	4b06      	ldr	r3, [pc, #24]	; (800ba2c <LoadRing+0x20>)
 800ba12:	2201      	movs	r2, #1
 800ba14:	601a      	str	r2, [r3, #0]
	load_stop_once = 0;
 800ba16:	4b06      	ldr	r3, [pc, #24]	; (800ba30 <LoadRing+0x24>)
 800ba18:	2200      	movs	r2, #0
 800ba1a:	601a      	str	r2, [r3, #0]
	pick_up;
 800ba1c:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800ba20:	4804      	ldr	r0, [pc, #16]	; (800ba34 <LoadRing+0x28>)
 800ba22:	f7f5 fbb2 	bl	800118a <WriteBDC>
}
 800ba26:	bf00      	nop
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	20007810 	.word	0x20007810
 800ba30:	20009dd4 	.word	0x20009dd4
 800ba34:	20007bd4 	.word	0x20007bd4

0800ba38 <StopAutoPP>:

void StopAutoPP(void)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	af00      	add	r7, sp, #0
	PP_stop(&pp);
 800ba3c:	4803      	ldr	r0, [pc, #12]	; (800ba4c <StopAutoPP+0x14>)
 800ba3e:	f7fa f974 	bl	8005d2a <PP_stop>
	RNSStop(&rns);
 800ba42:	4803      	ldr	r0, [pc, #12]	; (800ba50 <StopAutoPP+0x18>)
 800ba44:	f7fd fcd4 	bl	80093f0 <RNSStop>
}
 800ba48:	bf00      	nop
 800ba4a:	bd80      	pop	{r7, pc}
 800ba4c:	2000718c 	.word	0x2000718c
 800ba50:	20009378 	.word	0x20009378

0800ba54 <AutoLoadRing>:

void AutoLoadRing(void)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	af00      	add	r7, sp, #0
	cylinder_load;
 800ba58:	4a10      	ldr	r2, [pc, #64]	; (800ba9c <AutoLoadRing+0x48>)
 800ba5a:	7f13      	ldrb	r3, [r2, #28]
 800ba5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba60:	7713      	strb	r3, [r2, #28]
	osDelay(500);
 800ba62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ba66:	f00c f8d4 	bl	8017c12 <osDelay>
	cylinder_retract;
 800ba6a:	4a0c      	ldr	r2, [pc, #48]	; (800ba9c <AutoLoadRing+0x48>)
 800ba6c:	7f13      	ldrb	r3, [r2, #28]
 800ba6e:	f36f 1386 	bfc	r3, #6, #1
 800ba72:	7713      	strb	r3, [r2, #28]
	osDelay(500);
 800ba74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ba78:	f00c f8cb 	bl	8017c12 <osDelay>
	loaded++;
 800ba7c:	4b08      	ldr	r3, [pc, #32]	; (800baa0 <AutoLoadRing+0x4c>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	3301      	adds	r3, #1
 800ba82:	4a07      	ldr	r2, [pc, #28]	; (800baa0 <AutoLoadRing+0x4c>)
 800ba84:	6013      	str	r3, [r2, #0]
	reload = 1;
 800ba86:	4b07      	ldr	r3, [pc, #28]	; (800baa4 <AutoLoadRing+0x50>)
 800ba88:	2201      	movs	r2, #1
 800ba8a:	601a      	str	r2, [r3, #0]
	pick_manual(5000);
 800ba8c:	f241 3188 	movw	r1, #5000	; 0x1388
 800ba90:	4805      	ldr	r0, [pc, #20]	; (800baa8 <AutoLoadRing+0x54>)
 800ba92:	f7f5 fb7a 	bl	800118a <WriteBDC>
}
 800ba96:	bf00      	nop
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	200099fc 	.word	0x200099fc
 800baa0:	20009898 	.word	0x20009898
 800baa4:	20007c14 	.word	0x20007c14
 800baa8:	20007bd4 	.word	0x20007bd4

0800baac <ResetCoordinate>:

void ResetCoordinate(void)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	af00      	add	r7, sp, #0
	RNSSet(&rns, RNS_PP_Reset);
 800bab0:	2117      	movs	r1, #23
 800bab2:	4804      	ldr	r0, [pc, #16]	; (800bac4 <ResetCoordinate+0x18>)
 800bab4:	f7fd fdba 	bl	800962c <RNSSet>
	PP_reset(&pp);
 800bab8:	4803      	ldr	r0, [pc, #12]	; (800bac8 <ResetCoordinate+0x1c>)
 800baba:	f7fa f957 	bl	8005d6c <PP_reset>
}
 800babe:	bf00      	nop
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	20009378 	.word	0x20009378
 800bac8:	2000718c 	.word	0x2000718c

0800bacc <ResetPickEnc>:

void ResetPickEnc(void)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	af00      	add	r7, sp, #0
	QEIReset(QEI1);
 800bad0:	2001      	movs	r0, #1
 800bad2:	f7f6 f87f 	bl	8001bd4 <QEIReset>
	pick_enc = 0;
 800bad6:	4b02      	ldr	r3, [pc, #8]	; (800bae0 <ResetPickEnc+0x14>)
 800bad8:	2200      	movs	r2, #0
 800bada:	601a      	str	r2, [r3, #0]
}
 800badc:	bf00      	nop
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	200070a8 	.word	0x200070a8

0800bae4 <enq>:

void enq(void) {
 800bae4:	b580      	push	{r7, lr}
 800bae6:	af00      	add	r7, sp, #0
//	xpos = rns.enq.enq_buffer[0].data;
//	ypos = rns.enq.enq_buffer[1].data;
//	z = rns.enq.enq_buffer[2].data;
//	sprintf((char*)debug, "X: %.2f Y: %.2f Yaw: %.2f\n", xpos, ypos, z);

	RNSEnquire(RNS_XYZ_RAW, &rns);
 800bae8:	4908      	ldr	r1, [pc, #32]	; (800bb0c <enq+0x28>)
 800baea:	2061      	movs	r0, #97	; 0x61
 800baec:	f7fd ff58 	bl	80099a0 <RNSEnquire>
	fXPos = rns.enq.enq_buffer[0].data;
 800baf0:	4b06      	ldr	r3, [pc, #24]	; (800bb0c <enq+0x28>)
 800baf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baf4:	4a06      	ldr	r2, [pc, #24]	; (800bb10 <enq+0x2c>)
 800baf6:	6013      	str	r3, [r2, #0]
	fYPos = rns.enq.enq_buffer[1].data;
 800baf8:	4b04      	ldr	r3, [pc, #16]	; (800bb0c <enq+0x28>)
 800bafa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bafc:	4a05      	ldr	r2, [pc, #20]	; (800bb14 <enq+0x30>)
 800bafe:	6013      	str	r3, [r2, #0]
	fyaw = rns.enq.enq_buffer[2].data;
 800bb00:	4b02      	ldr	r3, [pc, #8]	; (800bb0c <enq+0x28>)
 800bb02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb04:	4a04      	ldr	r2, [pc, #16]	; (800bb18 <enq+0x34>)
 800bb06:	6013      	str	r3, [r2, #0]

//	sprintf((char*)debug, "A: %.2f B: %.2f C: %.2f D: %.2f X: %.2f Y: %.2f Z: %.2f Servo: %ld\n", a, b, c, d, fXPos, fYPos, fyaw, servo_ring.currentPulse);
//	sprintf((char*)debug, "X: %.2f Y: %.2f Yaw: %.2f\n", fXPos, fYPos, fyaw);
}
 800bb08:	bf00      	nop
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	20009378 	.word	0x20009378
 800bb10:	20009dfc 	.word	0x20009dfc
 800bb14:	20009c64 	.word	0x20009c64
 800bb18:	20009dc8 	.word	0x20009dc8
 800bb1c:	00000000 	.word	0x00000000

0800bb20 <tune>:

void tune(void)
{
 800bb20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bb24:	b084      	sub	sp, #16
 800bb26:	af04      	add	r7, sp, #16
	if(ps4.button == UP)
 800bb28:	4ba7      	ldr	r3, [pc, #668]	; (800bdc8 <tune+0x2a8>)
 800bb2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb2c:	2b10      	cmp	r3, #16
 800bb2e:	d10d      	bne.n	800bb4c <tune+0x2c>
	{
		while(ps4.button == UP);
 800bb30:	bf00      	nop
 800bb32:	4ba5      	ldr	r3, [pc, #660]	; (800bdc8 <tune+0x2a8>)
 800bb34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb36:	2b10      	cmp	r3, #16
 800bb38:	d0fb      	beq.n	800bb32 <tune+0x12>
		tune_p = 1;
 800bb3a:	4ba4      	ldr	r3, [pc, #656]	; (800bdcc <tune+0x2ac>)
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	601a      	str	r2, [r3, #0]
		tune_i = 0;
 800bb40:	4ba3      	ldr	r3, [pc, #652]	; (800bdd0 <tune+0x2b0>)
 800bb42:	2200      	movs	r2, #0
 800bb44:	601a      	str	r2, [r3, #0]
		tune_d = 0;
 800bb46:	4ba3      	ldr	r3, [pc, #652]	; (800bdd4 <tune+0x2b4>)
 800bb48:	2200      	movs	r2, #0
 800bb4a:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == DOWN)
 800bb4c:	4b9e      	ldr	r3, [pc, #632]	; (800bdc8 <tune+0x2a8>)
 800bb4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb50:	2b40      	cmp	r3, #64	; 0x40
 800bb52:	d10d      	bne.n	800bb70 <tune+0x50>
	{
		while(ps4.button == DOWN);
 800bb54:	bf00      	nop
 800bb56:	4b9c      	ldr	r3, [pc, #624]	; (800bdc8 <tune+0x2a8>)
 800bb58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb5a:	2b40      	cmp	r3, #64	; 0x40
 800bb5c:	d0fb      	beq.n	800bb56 <tune+0x36>
		tune_p = 0;
 800bb5e:	4b9b      	ldr	r3, [pc, #620]	; (800bdcc <tune+0x2ac>)
 800bb60:	2200      	movs	r2, #0
 800bb62:	601a      	str	r2, [r3, #0]
		tune_i = 1;
 800bb64:	4b9a      	ldr	r3, [pc, #616]	; (800bdd0 <tune+0x2b0>)
 800bb66:	2201      	movs	r2, #1
 800bb68:	601a      	str	r2, [r3, #0]
		tune_d = 0;
 800bb6a:	4b9a      	ldr	r3, [pc, #616]	; (800bdd4 <tune+0x2b4>)
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == LEFT)
 800bb70:	4b95      	ldr	r3, [pc, #596]	; (800bdc8 <tune+0x2a8>)
 800bb72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb74:	2b80      	cmp	r3, #128	; 0x80
 800bb76:	d10d      	bne.n	800bb94 <tune+0x74>
	{
		while(ps4.button == LEFT);
 800bb78:	bf00      	nop
 800bb7a:	4b93      	ldr	r3, [pc, #588]	; (800bdc8 <tune+0x2a8>)
 800bb7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb7e:	2b80      	cmp	r3, #128	; 0x80
 800bb80:	d0fb      	beq.n	800bb7a <tune+0x5a>
		tune_p = 0;
 800bb82:	4b92      	ldr	r3, [pc, #584]	; (800bdcc <tune+0x2ac>)
 800bb84:	2200      	movs	r2, #0
 800bb86:	601a      	str	r2, [r3, #0]
		tune_i = 0;
 800bb88:	4b91      	ldr	r3, [pc, #580]	; (800bdd0 <tune+0x2b0>)
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	601a      	str	r2, [r3, #0]
		tune_d = 1;
 800bb8e:	4b91      	ldr	r3, [pc, #580]	; (800bdd4 <tune+0x2b4>)
 800bb90:	2201      	movs	r2, #1
 800bb92:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == RIGHT)
 800bb94:	4b8c      	ldr	r3, [pc, #560]	; (800bdc8 <tune+0x2a8>)
 800bb96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb98:	2b20      	cmp	r3, #32
 800bb9a:	d110      	bne.n	800bbbe <tune+0x9e>
	{
		while(ps4.button == RIGHT);
 800bb9c:	bf00      	nop
 800bb9e:	4b8a      	ldr	r3, [pc, #552]	; (800bdc8 <tune+0x2a8>)
 800bba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bba2:	2b20      	cmp	r3, #32
 800bba4:	d0fb      	beq.n	800bb9e <tune+0x7e>
		wheel++;
 800bba6:	4b8c      	ldr	r3, [pc, #560]	; (800bdd8 <tune+0x2b8>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	3301      	adds	r3, #1
 800bbac:	4a8a      	ldr	r2, [pc, #552]	; (800bdd8 <tune+0x2b8>)
 800bbae:	6013      	str	r3, [r2, #0]
		if(wheel > 5)
 800bbb0:	4b89      	ldr	r3, [pc, #548]	; (800bdd8 <tune+0x2b8>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2b05      	cmp	r3, #5
 800bbb6:	dd02      	ble.n	800bbbe <tune+0x9e>
			wheel = 1;
 800bbb8:	4b87      	ldr	r3, [pc, #540]	; (800bdd8 <tune+0x2b8>)
 800bbba:	2201      	movs	r2, #1
 800bbbc:	601a      	str	r2, [r3, #0]
	}

	if(tune_p)
 800bbbe:	4b83      	ldr	r3, [pc, #524]	; (800bdcc <tune+0x2ac>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	f000 809e 	beq.w	800bd04 <tune+0x1e4>
	{
		switch(wheel)
 800bbc8:	4b83      	ldr	r3, [pc, #524]	; (800bdd8 <tune+0x2b8>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	3b01      	subs	r3, #1
 800bbce:	2b03      	cmp	r3, #3
 800bbd0:	f200 81f4 	bhi.w	800bfbc <tune+0x49c>
 800bbd4:	a201      	add	r2, pc, #4	; (adr r2, 800bbdc <tune+0xbc>)
 800bbd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbda:	bf00      	nop
 800bbdc:	0800bbed 	.word	0x0800bbed
 800bbe0:	0800bc33 	.word	0x0800bc33
 800bbe4:	0800bc79 	.word	0x0800bc79
 800bbe8:	0800bcbf 	.word	0x0800bcbf
		{
		case 1:
			AP += ps4.joyR_y * 0.0001;
 800bbec:	4b76      	ldr	r3, [pc, #472]	; (800bdc8 <tune+0x2a8>)
 800bbee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7f4 fca9 	bl	8000548 <__aeabi_f2d>
 800bbf6:	a372      	add	r3, pc, #456	; (adr r3, 800bdc0 <tune+0x2a0>)
 800bbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfc:	f7f4 fcfc 	bl	80005f8 <__aeabi_dmul>
 800bc00:	4602      	mov	r2, r0
 800bc02:	460b      	mov	r3, r1
 800bc04:	4614      	mov	r4, r2
 800bc06:	461d      	mov	r5, r3
 800bc08:	4b74      	ldr	r3, [pc, #464]	; (800bddc <tune+0x2bc>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7f4 fc9b 	bl	8000548 <__aeabi_f2d>
 800bc12:	4602      	mov	r2, r0
 800bc14:	460b      	mov	r3, r1
 800bc16:	4620      	mov	r0, r4
 800bc18:	4629      	mov	r1, r5
 800bc1a:	f7f4 fb37 	bl	800028c <__adddf3>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	460b      	mov	r3, r1
 800bc22:	4610      	mov	r0, r2
 800bc24:	4619      	mov	r1, r3
 800bc26:	f7f4 ffdf 	bl	8000be8 <__aeabi_d2f>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	4a6b      	ldr	r2, [pc, #428]	; (800bddc <tune+0x2bc>)
 800bc2e:	6013      	str	r3, [r2, #0]
			break;
 800bc30:	e1c4      	b.n	800bfbc <tune+0x49c>
		case 2:
			BP += ps4.joyR_y * 0.0001;
 800bc32:	4b65      	ldr	r3, [pc, #404]	; (800bdc8 <tune+0x2a8>)
 800bc34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7f4 fc86 	bl	8000548 <__aeabi_f2d>
 800bc3c:	a360      	add	r3, pc, #384	; (adr r3, 800bdc0 <tune+0x2a0>)
 800bc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc42:	f7f4 fcd9 	bl	80005f8 <__aeabi_dmul>
 800bc46:	4602      	mov	r2, r0
 800bc48:	460b      	mov	r3, r1
 800bc4a:	4614      	mov	r4, r2
 800bc4c:	461d      	mov	r5, r3
 800bc4e:	4b64      	ldr	r3, [pc, #400]	; (800bde0 <tune+0x2c0>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7f4 fc78 	bl	8000548 <__aeabi_f2d>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	4629      	mov	r1, r5
 800bc60:	f7f4 fb14 	bl	800028c <__adddf3>
 800bc64:	4602      	mov	r2, r0
 800bc66:	460b      	mov	r3, r1
 800bc68:	4610      	mov	r0, r2
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	f7f4 ffbc 	bl	8000be8 <__aeabi_d2f>
 800bc70:	4603      	mov	r3, r0
 800bc72:	4a5b      	ldr	r2, [pc, #364]	; (800bde0 <tune+0x2c0>)
 800bc74:	6013      	str	r3, [r2, #0]
			break;
 800bc76:	e1a1      	b.n	800bfbc <tune+0x49c>
		case 3:
			CP += ps4.joyR_y * 0.0001;
 800bc78:	4b53      	ldr	r3, [pc, #332]	; (800bdc8 <tune+0x2a8>)
 800bc7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7f4 fc63 	bl	8000548 <__aeabi_f2d>
 800bc82:	a34f      	add	r3, pc, #316	; (adr r3, 800bdc0 <tune+0x2a0>)
 800bc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc88:	f7f4 fcb6 	bl	80005f8 <__aeabi_dmul>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	460b      	mov	r3, r1
 800bc90:	4614      	mov	r4, r2
 800bc92:	461d      	mov	r5, r3
 800bc94:	4b53      	ldr	r3, [pc, #332]	; (800bde4 <tune+0x2c4>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7f4 fc55 	bl	8000548 <__aeabi_f2d>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	460b      	mov	r3, r1
 800bca2:	4620      	mov	r0, r4
 800bca4:	4629      	mov	r1, r5
 800bca6:	f7f4 faf1 	bl	800028c <__adddf3>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	460b      	mov	r3, r1
 800bcae:	4610      	mov	r0, r2
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	f7f4 ff99 	bl	8000be8 <__aeabi_d2f>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	4a4a      	ldr	r2, [pc, #296]	; (800bde4 <tune+0x2c4>)
 800bcba:	6013      	str	r3, [r2, #0]
			break;
 800bcbc:	e17e      	b.n	800bfbc <tune+0x49c>
		case 4:
			DP += ps4.joyR_y * 0.0001;
 800bcbe:	4b42      	ldr	r3, [pc, #264]	; (800bdc8 <tune+0x2a8>)
 800bcc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7f4 fc40 	bl	8000548 <__aeabi_f2d>
 800bcc8:	a33d      	add	r3, pc, #244	; (adr r3, 800bdc0 <tune+0x2a0>)
 800bcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcce:	f7f4 fc93 	bl	80005f8 <__aeabi_dmul>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	4614      	mov	r4, r2
 800bcd8:	461d      	mov	r5, r3
 800bcda:	4b43      	ldr	r3, [pc, #268]	; (800bde8 <tune+0x2c8>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7f4 fc32 	bl	8000548 <__aeabi_f2d>
 800bce4:	4602      	mov	r2, r0
 800bce6:	460b      	mov	r3, r1
 800bce8:	4620      	mov	r0, r4
 800bcea:	4629      	mov	r1, r5
 800bcec:	f7f4 face 	bl	800028c <__adddf3>
 800bcf0:	4602      	mov	r2, r0
 800bcf2:	460b      	mov	r3, r1
 800bcf4:	4610      	mov	r0, r2
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	f7f4 ff76 	bl	8000be8 <__aeabi_d2f>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	4a3a      	ldr	r2, [pc, #232]	; (800bde8 <tune+0x2c8>)
 800bd00:	6013      	str	r3, [r2, #0]
			break;
 800bd02:	e15b      	b.n	800bfbc <tune+0x49c>
		}
	}
	else if(tune_i)
 800bd04:	4b32      	ldr	r3, [pc, #200]	; (800bdd0 <tune+0x2b0>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	f000 80b9 	beq.w	800be80 <tune+0x360>
	{
		switch(wheel)
 800bd0e:	4b32      	ldr	r3, [pc, #200]	; (800bdd8 <tune+0x2b8>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	3b01      	subs	r3, #1
 800bd14:	2b03      	cmp	r3, #3
 800bd16:	f200 8151 	bhi.w	800bfbc <tune+0x49c>
 800bd1a:	a201      	add	r2, pc, #4	; (adr r2, 800bd20 <tune+0x200>)
 800bd1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd20:	0800bd31 	.word	0x0800bd31
 800bd24:	0800bd77 	.word	0x0800bd77
 800bd28:	0800bdf5 	.word	0x0800bdf5
 800bd2c:	0800be3b 	.word	0x0800be3b
		{
		case 1:
			AI += ps4.joyR_y * 0.0001;
 800bd30:	4b25      	ldr	r3, [pc, #148]	; (800bdc8 <tune+0x2a8>)
 800bd32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd34:	4618      	mov	r0, r3
 800bd36:	f7f4 fc07 	bl	8000548 <__aeabi_f2d>
 800bd3a:	a321      	add	r3, pc, #132	; (adr r3, 800bdc0 <tune+0x2a0>)
 800bd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd40:	f7f4 fc5a 	bl	80005f8 <__aeabi_dmul>
 800bd44:	4602      	mov	r2, r0
 800bd46:	460b      	mov	r3, r1
 800bd48:	4614      	mov	r4, r2
 800bd4a:	461d      	mov	r5, r3
 800bd4c:	4b27      	ldr	r3, [pc, #156]	; (800bdec <tune+0x2cc>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7f4 fbf9 	bl	8000548 <__aeabi_f2d>
 800bd56:	4602      	mov	r2, r0
 800bd58:	460b      	mov	r3, r1
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	4629      	mov	r1, r5
 800bd5e:	f7f4 fa95 	bl	800028c <__adddf3>
 800bd62:	4602      	mov	r2, r0
 800bd64:	460b      	mov	r3, r1
 800bd66:	4610      	mov	r0, r2
 800bd68:	4619      	mov	r1, r3
 800bd6a:	f7f4 ff3d 	bl	8000be8 <__aeabi_d2f>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	4a1e      	ldr	r2, [pc, #120]	; (800bdec <tune+0x2cc>)
 800bd72:	6013      	str	r3, [r2, #0]
			break;
 800bd74:	e122      	b.n	800bfbc <tune+0x49c>
		case 2:
			BI += ps4.joyR_y * 0.0001;
 800bd76:	4b14      	ldr	r3, [pc, #80]	; (800bdc8 <tune+0x2a8>)
 800bd78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7f4 fbe4 	bl	8000548 <__aeabi_f2d>
 800bd80:	a30f      	add	r3, pc, #60	; (adr r3, 800bdc0 <tune+0x2a0>)
 800bd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd86:	f7f4 fc37 	bl	80005f8 <__aeabi_dmul>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	4614      	mov	r4, r2
 800bd90:	461d      	mov	r5, r3
 800bd92:	4b17      	ldr	r3, [pc, #92]	; (800bdf0 <tune+0x2d0>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4618      	mov	r0, r3
 800bd98:	f7f4 fbd6 	bl	8000548 <__aeabi_f2d>
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	460b      	mov	r3, r1
 800bda0:	4620      	mov	r0, r4
 800bda2:	4629      	mov	r1, r5
 800bda4:	f7f4 fa72 	bl	800028c <__adddf3>
 800bda8:	4602      	mov	r2, r0
 800bdaa:	460b      	mov	r3, r1
 800bdac:	4610      	mov	r0, r2
 800bdae:	4619      	mov	r1, r3
 800bdb0:	f7f4 ff1a 	bl	8000be8 <__aeabi_d2f>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	4a0e      	ldr	r2, [pc, #56]	; (800bdf0 <tune+0x2d0>)
 800bdb8:	6013      	str	r3, [r2, #0]
			break;
 800bdba:	e0ff      	b.n	800bfbc <tune+0x49c>
 800bdbc:	f3af 8000 	nop.w
 800bdc0:	eb1c432d 	.word	0xeb1c432d
 800bdc4:	3f1a36e2 	.word	0x3f1a36e2
 800bdc8:	2000a3fc 	.word	0x2000a3fc
 800bdcc:	20007844 	.word	0x20007844
 800bdd0:	200076d8 	.word	0x200076d8
 800bdd4:	20009c68 	.word	0x20009c68
 800bdd8:	200069c4 	.word	0x200069c4
 800bddc:	2000a708 	.word	0x2000a708
 800bde0:	20007a7c 	.word	0x20007a7c
 800bde4:	20009acc 	.word	0x20009acc
 800bde8:	2000a1f0 	.word	0x2000a1f0
 800bdec:	200076d0 	.word	0x200076d0
 800bdf0:	200098a0 	.word	0x200098a0
		case 3:
			CI += ps4.joyR_y * 0.0001;
 800bdf4:	4bb4      	ldr	r3, [pc, #720]	; (800c0c8 <tune+0x5a8>)
 800bdf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7f4 fba5 	bl	8000548 <__aeabi_f2d>
 800bdfe:	a3ae      	add	r3, pc, #696	; (adr r3, 800c0b8 <tune+0x598>)
 800be00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be04:	f7f4 fbf8 	bl	80005f8 <__aeabi_dmul>
 800be08:	4602      	mov	r2, r0
 800be0a:	460b      	mov	r3, r1
 800be0c:	4614      	mov	r4, r2
 800be0e:	461d      	mov	r5, r3
 800be10:	4bae      	ldr	r3, [pc, #696]	; (800c0cc <tune+0x5ac>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4618      	mov	r0, r3
 800be16:	f7f4 fb97 	bl	8000548 <__aeabi_f2d>
 800be1a:	4602      	mov	r2, r0
 800be1c:	460b      	mov	r3, r1
 800be1e:	4620      	mov	r0, r4
 800be20:	4629      	mov	r1, r5
 800be22:	f7f4 fa33 	bl	800028c <__adddf3>
 800be26:	4602      	mov	r2, r0
 800be28:	460b      	mov	r3, r1
 800be2a:	4610      	mov	r0, r2
 800be2c:	4619      	mov	r1, r3
 800be2e:	f7f4 fedb 	bl	8000be8 <__aeabi_d2f>
 800be32:	4603      	mov	r3, r0
 800be34:	4aa5      	ldr	r2, [pc, #660]	; (800c0cc <tune+0x5ac>)
 800be36:	6013      	str	r3, [r2, #0]
			break;
 800be38:	e0c0      	b.n	800bfbc <tune+0x49c>
		case 4:
			DI += ps4.joyR_y * 0.0001;
 800be3a:	4ba3      	ldr	r3, [pc, #652]	; (800c0c8 <tune+0x5a8>)
 800be3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be3e:	4618      	mov	r0, r3
 800be40:	f7f4 fb82 	bl	8000548 <__aeabi_f2d>
 800be44:	a39c      	add	r3, pc, #624	; (adr r3, 800c0b8 <tune+0x598>)
 800be46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4a:	f7f4 fbd5 	bl	80005f8 <__aeabi_dmul>
 800be4e:	4602      	mov	r2, r0
 800be50:	460b      	mov	r3, r1
 800be52:	4614      	mov	r4, r2
 800be54:	461d      	mov	r5, r3
 800be56:	4b9e      	ldr	r3, [pc, #632]	; (800c0d0 <tune+0x5b0>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7f4 fb74 	bl	8000548 <__aeabi_f2d>
 800be60:	4602      	mov	r2, r0
 800be62:	460b      	mov	r3, r1
 800be64:	4620      	mov	r0, r4
 800be66:	4629      	mov	r1, r5
 800be68:	f7f4 fa10 	bl	800028c <__adddf3>
 800be6c:	4602      	mov	r2, r0
 800be6e:	460b      	mov	r3, r1
 800be70:	4610      	mov	r0, r2
 800be72:	4619      	mov	r1, r3
 800be74:	f7f4 feb8 	bl	8000be8 <__aeabi_d2f>
 800be78:	4603      	mov	r3, r0
 800be7a:	4a95      	ldr	r2, [pc, #596]	; (800c0d0 <tune+0x5b0>)
 800be7c:	6013      	str	r3, [r2, #0]
			break;
 800be7e:	e09d      	b.n	800bfbc <tune+0x49c>
		}
	}
	else
	{
		switch(wheel)
 800be80:	4b94      	ldr	r3, [pc, #592]	; (800c0d4 <tune+0x5b4>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	3b01      	subs	r3, #1
 800be86:	2b03      	cmp	r3, #3
 800be88:	f200 8098 	bhi.w	800bfbc <tune+0x49c>
 800be8c:	a201      	add	r2, pc, #4	; (adr r2, 800be94 <tune+0x374>)
 800be8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be92:	bf00      	nop
 800be94:	0800bea5 	.word	0x0800bea5
 800be98:	0800beeb 	.word	0x0800beeb
 800be9c:	0800bf31 	.word	0x0800bf31
 800bea0:	0800bf77 	.word	0x0800bf77
		{
		case 1:
			AD += ps4.joyR_y * 0.00001;
 800bea4:	4b88      	ldr	r3, [pc, #544]	; (800c0c8 <tune+0x5a8>)
 800bea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7f4 fb4d 	bl	8000548 <__aeabi_f2d>
 800beae:	a384      	add	r3, pc, #528	; (adr r3, 800c0c0 <tune+0x5a0>)
 800beb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb4:	f7f4 fba0 	bl	80005f8 <__aeabi_dmul>
 800beb8:	4602      	mov	r2, r0
 800beba:	460b      	mov	r3, r1
 800bebc:	4614      	mov	r4, r2
 800bebe:	461d      	mov	r5, r3
 800bec0:	4b85      	ldr	r3, [pc, #532]	; (800c0d8 <tune+0x5b8>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7f4 fb3f 	bl	8000548 <__aeabi_f2d>
 800beca:	4602      	mov	r2, r0
 800becc:	460b      	mov	r3, r1
 800bece:	4620      	mov	r0, r4
 800bed0:	4629      	mov	r1, r5
 800bed2:	f7f4 f9db 	bl	800028c <__adddf3>
 800bed6:	4602      	mov	r2, r0
 800bed8:	460b      	mov	r3, r1
 800beda:	4610      	mov	r0, r2
 800bedc:	4619      	mov	r1, r3
 800bede:	f7f4 fe83 	bl	8000be8 <__aeabi_d2f>
 800bee2:	4603      	mov	r3, r0
 800bee4:	4a7c      	ldr	r2, [pc, #496]	; (800c0d8 <tune+0x5b8>)
 800bee6:	6013      	str	r3, [r2, #0]
			break;
 800bee8:	e068      	b.n	800bfbc <tune+0x49c>
		case 2:
			BD += ps4.joyR_y * 0.00001;
 800beea:	4b77      	ldr	r3, [pc, #476]	; (800c0c8 <tune+0x5a8>)
 800beec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800beee:	4618      	mov	r0, r3
 800bef0:	f7f4 fb2a 	bl	8000548 <__aeabi_f2d>
 800bef4:	a372      	add	r3, pc, #456	; (adr r3, 800c0c0 <tune+0x5a0>)
 800bef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befa:	f7f4 fb7d 	bl	80005f8 <__aeabi_dmul>
 800befe:	4602      	mov	r2, r0
 800bf00:	460b      	mov	r3, r1
 800bf02:	4614      	mov	r4, r2
 800bf04:	461d      	mov	r5, r3
 800bf06:	4b75      	ldr	r3, [pc, #468]	; (800c0dc <tune+0x5bc>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7f4 fb1c 	bl	8000548 <__aeabi_f2d>
 800bf10:	4602      	mov	r2, r0
 800bf12:	460b      	mov	r3, r1
 800bf14:	4620      	mov	r0, r4
 800bf16:	4629      	mov	r1, r5
 800bf18:	f7f4 f9b8 	bl	800028c <__adddf3>
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	460b      	mov	r3, r1
 800bf20:	4610      	mov	r0, r2
 800bf22:	4619      	mov	r1, r3
 800bf24:	f7f4 fe60 	bl	8000be8 <__aeabi_d2f>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	4a6c      	ldr	r2, [pc, #432]	; (800c0dc <tune+0x5bc>)
 800bf2c:	6013      	str	r3, [r2, #0]
			break;
 800bf2e:	e045      	b.n	800bfbc <tune+0x49c>
		case 3:
			CD += ps4.joyR_y * 0.00001;
 800bf30:	4b65      	ldr	r3, [pc, #404]	; (800c0c8 <tune+0x5a8>)
 800bf32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7f4 fb07 	bl	8000548 <__aeabi_f2d>
 800bf3a:	a361      	add	r3, pc, #388	; (adr r3, 800c0c0 <tune+0x5a0>)
 800bf3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf40:	f7f4 fb5a 	bl	80005f8 <__aeabi_dmul>
 800bf44:	4602      	mov	r2, r0
 800bf46:	460b      	mov	r3, r1
 800bf48:	4614      	mov	r4, r2
 800bf4a:	461d      	mov	r5, r3
 800bf4c:	4b64      	ldr	r3, [pc, #400]	; (800c0e0 <tune+0x5c0>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7f4 faf9 	bl	8000548 <__aeabi_f2d>
 800bf56:	4602      	mov	r2, r0
 800bf58:	460b      	mov	r3, r1
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	4629      	mov	r1, r5
 800bf5e:	f7f4 f995 	bl	800028c <__adddf3>
 800bf62:	4602      	mov	r2, r0
 800bf64:	460b      	mov	r3, r1
 800bf66:	4610      	mov	r0, r2
 800bf68:	4619      	mov	r1, r3
 800bf6a:	f7f4 fe3d 	bl	8000be8 <__aeabi_d2f>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	4a5b      	ldr	r2, [pc, #364]	; (800c0e0 <tune+0x5c0>)
 800bf72:	6013      	str	r3, [r2, #0]
			break;
 800bf74:	e022      	b.n	800bfbc <tune+0x49c>
		case 4:
			DD += ps4.joyR_y * 0.00001;
 800bf76:	4b54      	ldr	r3, [pc, #336]	; (800c0c8 <tune+0x5a8>)
 800bf78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7f4 fae4 	bl	8000548 <__aeabi_f2d>
 800bf80:	a34f      	add	r3, pc, #316	; (adr r3, 800c0c0 <tune+0x5a0>)
 800bf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf86:	f7f4 fb37 	bl	80005f8 <__aeabi_dmul>
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	4614      	mov	r4, r2
 800bf90:	461d      	mov	r5, r3
 800bf92:	4b54      	ldr	r3, [pc, #336]	; (800c0e4 <tune+0x5c4>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7f4 fad6 	bl	8000548 <__aeabi_f2d>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	4629      	mov	r1, r5
 800bfa4:	f7f4 f972 	bl	800028c <__adddf3>
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	460b      	mov	r3, r1
 800bfac:	4610      	mov	r0, r2
 800bfae:	4619      	mov	r1, r3
 800bfb0:	f7f4 fe1a 	bl	8000be8 <__aeabi_d2f>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	4a4b      	ldr	r2, [pc, #300]	; (800c0e4 <tune+0x5c4>)
 800bfb8:	6013      	str	r3, [r2, #0]
			break;
 800bfba:	bf00      	nop
		}
	}

	if(ps4.button == OPTION)
 800bfbc:	4b42      	ldr	r3, [pc, #264]	; (800c0c8 <tune+0x5a8>)
 800bfbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfc4:	f040 80bc 	bne.w	800c140 <tune+0x620>
	{
		while(ps4.button == OPTION);
 800bfc8:	bf00      	nop
 800bfca:	4b3f      	ldr	r3, [pc, #252]	; (800c0c8 <tune+0x5a8>)
 800bfcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfd2:	d0fa      	beq.n	800bfca <tune+0x4aa>
		switch(wheel)
 800bfd4:	4b3f      	ldr	r3, [pc, #252]	; (800c0d4 <tune+0x5b4>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	3b01      	subs	r3, #1
 800bfda:	2b03      	cmp	r3, #3
 800bfdc:	f200 80b1 	bhi.w	800c142 <tune+0x622>
 800bfe0:	a201      	add	r2, pc, #4	; (adr r2, 800bfe8 <tune+0x4c8>)
 800bfe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe6:	bf00      	nop
 800bfe8:	0800bff9 	.word	0x0800bff9
 800bfec:	0800c039 	.word	0x0800c039
 800bff0:	0800c079 	.word	0x0800c079
 800bff4:	0800c101 	.word	0x0800c101
		{
		case 1:
			RNSSet(&rns, RNS_F_LEFT_VEL_PID, AP, AI, AD);
 800bff8:	4b3b      	ldr	r3, [pc, #236]	; (800c0e8 <tune+0x5c8>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4618      	mov	r0, r3
 800bffe:	f7f4 faa3 	bl	8000548 <__aeabi_f2d>
 800c002:	4680      	mov	r8, r0
 800c004:	4689      	mov	r9, r1
 800c006:	4b39      	ldr	r3, [pc, #228]	; (800c0ec <tune+0x5cc>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7f4 fa9c 	bl	8000548 <__aeabi_f2d>
 800c010:	4604      	mov	r4, r0
 800c012:	460d      	mov	r5, r1
 800c014:	4b30      	ldr	r3, [pc, #192]	; (800c0d8 <tune+0x5b8>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4618      	mov	r0, r3
 800c01a:	f7f4 fa95 	bl	8000548 <__aeabi_f2d>
 800c01e:	4602      	mov	r2, r0
 800c020:	460b      	mov	r3, r1
 800c022:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c026:	e9cd 4500 	strd	r4, r5, [sp]
 800c02a:	4642      	mov	r2, r8
 800c02c:	464b      	mov	r3, r9
 800c02e:	212f      	movs	r1, #47	; 0x2f
 800c030:	482f      	ldr	r0, [pc, #188]	; (800c0f0 <tune+0x5d0>)
 800c032:	f7fd fafb 	bl	800962c <RNSSet>
			break;
 800c036:	e084      	b.n	800c142 <tune+0x622>

		case 2:
			RNSSet(&rns, RNS_F_RIGHT_VEL_PID, BP, BI, BD);
 800c038:	4b2e      	ldr	r3, [pc, #184]	; (800c0f4 <tune+0x5d4>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7f4 fa83 	bl	8000548 <__aeabi_f2d>
 800c042:	4680      	mov	r8, r0
 800c044:	4689      	mov	r9, r1
 800c046:	4b2c      	ldr	r3, [pc, #176]	; (800c0f8 <tune+0x5d8>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7f4 fa7c 	bl	8000548 <__aeabi_f2d>
 800c050:	4604      	mov	r4, r0
 800c052:	460d      	mov	r5, r1
 800c054:	4b21      	ldr	r3, [pc, #132]	; (800c0dc <tune+0x5bc>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4618      	mov	r0, r3
 800c05a:	f7f4 fa75 	bl	8000548 <__aeabi_f2d>
 800c05e:	4602      	mov	r2, r0
 800c060:	460b      	mov	r3, r1
 800c062:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c066:	e9cd 4500 	strd	r4, r5, [sp]
 800c06a:	4642      	mov	r2, r8
 800c06c:	464b      	mov	r3, r9
 800c06e:	2130      	movs	r1, #48	; 0x30
 800c070:	481f      	ldr	r0, [pc, #124]	; (800c0f0 <tune+0x5d0>)
 800c072:	f7fd fadb 	bl	800962c <RNSSet>
			break;
 800c076:	e064      	b.n	800c142 <tune+0x622>

		case 3:
			RNSSet(&rns, RNS_B_LEFT_VEL_PID, CP, CI, CD);
 800c078:	4b20      	ldr	r3, [pc, #128]	; (800c0fc <tune+0x5dc>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4618      	mov	r0, r3
 800c07e:	f7f4 fa63 	bl	8000548 <__aeabi_f2d>
 800c082:	4680      	mov	r8, r0
 800c084:	4689      	mov	r9, r1
 800c086:	4b11      	ldr	r3, [pc, #68]	; (800c0cc <tune+0x5ac>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7f4 fa5c 	bl	8000548 <__aeabi_f2d>
 800c090:	4604      	mov	r4, r0
 800c092:	460d      	mov	r5, r1
 800c094:	4b12      	ldr	r3, [pc, #72]	; (800c0e0 <tune+0x5c0>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4618      	mov	r0, r3
 800c09a:	f7f4 fa55 	bl	8000548 <__aeabi_f2d>
 800c09e:	4602      	mov	r2, r0
 800c0a0:	460b      	mov	r3, r1
 800c0a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c0a6:	e9cd 4500 	strd	r4, r5, [sp]
 800c0aa:	4642      	mov	r2, r8
 800c0ac:	464b      	mov	r3, r9
 800c0ae:	2131      	movs	r1, #49	; 0x31
 800c0b0:	480f      	ldr	r0, [pc, #60]	; (800c0f0 <tune+0x5d0>)
 800c0b2:	f7fd fabb 	bl	800962c <RNSSet>
			break;
 800c0b6:	e044      	b.n	800c142 <tune+0x622>
 800c0b8:	eb1c432d 	.word	0xeb1c432d
 800c0bc:	3f1a36e2 	.word	0x3f1a36e2
 800c0c0:	88e368f1 	.word	0x88e368f1
 800c0c4:	3ee4f8b5 	.word	0x3ee4f8b5
 800c0c8:	2000a3fc 	.word	0x2000a3fc
 800c0cc:	20009c60 	.word	0x20009c60
 800c0d0:	20006f3c 	.word	0x20006f3c
 800c0d4:	200069c4 	.word	0x200069c4
 800c0d8:	2000a6e4 	.word	0x2000a6e4
 800c0dc:	200076cc 	.word	0x200076cc
 800c0e0:	200069c8 	.word	0x200069c8
 800c0e4:	20009f1c 	.word	0x20009f1c
 800c0e8:	2000a708 	.word	0x2000a708
 800c0ec:	200076d0 	.word	0x200076d0
 800c0f0:	20009378 	.word	0x20009378
 800c0f4:	20007a7c 	.word	0x20007a7c
 800c0f8:	200098a0 	.word	0x200098a0
 800c0fc:	20009acc 	.word	0x20009acc

		case 4:
			RNSSet(&rns, RNS_B_RIGHT_VEL_PID, DP, DI, DD);
 800c100:	4b12      	ldr	r3, [pc, #72]	; (800c14c <tune+0x62c>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4618      	mov	r0, r3
 800c106:	f7f4 fa1f 	bl	8000548 <__aeabi_f2d>
 800c10a:	4680      	mov	r8, r0
 800c10c:	4689      	mov	r9, r1
 800c10e:	4b10      	ldr	r3, [pc, #64]	; (800c150 <tune+0x630>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	4618      	mov	r0, r3
 800c114:	f7f4 fa18 	bl	8000548 <__aeabi_f2d>
 800c118:	4604      	mov	r4, r0
 800c11a:	460d      	mov	r5, r1
 800c11c:	4b0d      	ldr	r3, [pc, #52]	; (800c154 <tune+0x634>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4618      	mov	r0, r3
 800c122:	f7f4 fa11 	bl	8000548 <__aeabi_f2d>
 800c126:	4602      	mov	r2, r0
 800c128:	460b      	mov	r3, r1
 800c12a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c12e:	e9cd 4500 	strd	r4, r5, [sp]
 800c132:	4642      	mov	r2, r8
 800c134:	464b      	mov	r3, r9
 800c136:	2132      	movs	r1, #50	; 0x32
 800c138:	4807      	ldr	r0, [pc, #28]	; (800c158 <tune+0x638>)
 800c13a:	f7fd fa77 	bl	800962c <RNSSet>
			break;
 800c13e:	e000      	b.n	800c142 <tune+0x622>
		}
	}
 800c140:	bf00      	nop
}
 800c142:	bf00      	nop
 800c144:	46bd      	mov	sp, r7
 800c146:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c14a:	bf00      	nop
 800c14c:	2000a1f0 	.word	0x2000a1f0
 800c150:	20006f3c 	.word	0x20006f3c
 800c154:	20009f1c 	.word	0x20009f1c
 800c158:	20009378 	.word	0x20009378

0800c15c <DMA1_Stream0_IRQHandler>:
#include "dma.h"

/*I2C*/

void DMA1_Stream0_IRQHandler(void)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
 800c160:	4802      	ldr	r0, [pc, #8]	; (800c16c <DMA1_Stream0_IRQHandler+0x10>)
 800c162:	f006 f953 	bl	801240c <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_uart5_rx);

}
 800c166:	bf00      	nop
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	2000a398 	.word	0x2000a398

0800c170 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hdma_usart3_rx);
	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
 800c174:	4802      	ldr	r0, [pc, #8]	; (800c180 <DMA1_Stream3_IRQHandler+0x10>)
 800c176:	f006 f949 	bl	801240c <HAL_DMA_IRQHandler>
}
 800c17a:	bf00      	nop
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	20006a24 	.word	0x20006a24

0800c184 <DMA1_Stream2_IRQHandler>:

void DMA1_Stream2_IRQHandler(void)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800c188:	4802      	ldr	r0, [pc, #8]	; (800c194 <DMA1_Stream2_IRQHandler+0x10>)
 800c18a:	f006 f93f 	bl	801240c <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
//	HAL_DMA_IRQHandler(&hi2c3_rx_dma);
}
 800c18e:	bf00      	nop
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	20005f04 	.word	0x20005f04

0800c198 <DMA1_Stream1_IRQHandler>:

/*UART*/
void DMA1_Stream1_IRQHandler(void)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800c19c:	4802      	ldr	r0, [pc, #8]	; (800c1a8 <DMA1_Stream1_IRQHandler+0x10>)
 800c19e:	f006 f935 	bl	801240c <HAL_DMA_IRQHandler>
}
 800c1a2:	bf00      	nop
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	20006048 	.word	0x20006048

0800c1ac <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800c1b0:	4802      	ldr	r0, [pc, #8]	; (800c1bc <DMA1_Stream4_IRQHandler+0x10>)
 800c1b2:	f006 f92b 	bl	801240c <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_usart3_tx);
//	HAL_DMA_IRQHandler(&hi2c3_tx_dma);
}
 800c1b6:	bf00      	nop
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	200066bc 	.word	0x200066bc

0800c1c0 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800c1c4:	4802      	ldr	r0, [pc, #8]	; (800c1d0 <DMA1_Stream5_IRQHandler+0x10>)
 800c1c6:	f006 f921 	bl	801240c <HAL_DMA_IRQHandler>
}
 800c1ca:	bf00      	nop
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	20005f64 	.word	0x20005f64

0800c1d4 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	af00      	add	r7, sp, #0

//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800c1d8:	4802      	ldr	r0, [pc, #8]	; (800c1e4 <DMA1_Stream6_IRQHandler+0x10>)
 800c1da:	f006 f917 	bl	801240c <HAL_DMA_IRQHandler>
}
 800c1de:	bf00      	nop
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	20006250 	.word	0x20006250

0800c1e8 <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void){
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
//	HAL_DMA_IRQHandler(&hi2c2_tx_dma);
	HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800c1ec:	4802      	ldr	r0, [pc, #8]	; (800c1f8 <DMA1_Stream7_IRQHandler+0x10>)
 800c1ee:	f006 f90d 	bl	801240c <HAL_DMA_IRQHandler>
}
 800c1f2:	bf00      	nop
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	2000671c 	.word	0x2000671c

0800c1fc <DMA2_Stream0_IRQHandler>:


void DMA2_Stream0_IRQHandler(void)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc1);
 800c200:	4802      	ldr	r0, [pc, #8]	; (800c20c <DMA2_Stream0_IRQHandler+0x10>)
 800c202:	f006 f903 	bl	801240c <HAL_DMA_IRQHandler>
}
 800c206:	bf00      	nop
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	200068b4 	.word	0x200068b4

0800c210 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc3);
 800c214:	4802      	ldr	r0, [pc, #8]	; (800c220 <DMA2_Stream1_IRQHandler+0x10>)
 800c216:	f006 f8f9 	bl	801240c <HAL_DMA_IRQHandler>
}
 800c21a:	bf00      	nop
 800c21c:	bd80      	pop	{r7, pc}
 800c21e:	bf00      	nop
 800c220:	200067c4 	.word	0x200067c4

0800c224 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800c228:	4802      	ldr	r0, [pc, #8]	; (800c234 <DMA2_Stream2_IRQHandler+0x10>)
 800c22a:	f006 f8ef 	bl	801240c <HAL_DMA_IRQHandler>
}
 800c22e:	bf00      	nop
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	2000a310 	.word	0x2000a310

0800c238 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc2);
 800c23c:	4802      	ldr	r0, [pc, #8]	; (800c248 <DMA2_Stream3_IRQHandler+0x10>)
 800c23e:	f006 f8e5 	bl	801240c <HAL_DMA_IRQHandler>
}
 800c242:	bf00      	nop
 800c244:	bd80      	pop	{r7, pc}
 800c246:	bf00      	nop
 800c248:	20006914 	.word	0x20006914

0800c24c <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler(void)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800c250:	4802      	ldr	r0, [pc, #8]	; (800c25c <DMA2_Stream5_IRQHandler+0x10>)
 800c252:	f006 f8db 	bl	801240c <HAL_DMA_IRQHandler>
}
 800c256:	bf00      	nop
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop
 800c25c:	2000a710 	.word	0x2000a710

0800c260 <NMI_Handler>:
int _counter = 0;
/**
 * * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800c260:	b480      	push	{r7}
 800c262:	af00      	add	r7, sp, #0

}
 800c264:	bf00      	nop
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr

0800c26e <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800c26e:	b480      	push	{r7}
 800c270:	af00      	add	r7, sp, #0

}
 800c272:	bf00      	nop
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800c27c:	b480      	push	{r7}
 800c27e:	af00      	add	r7, sp, #0

	while(1){
 800c280:	e7fe      	b.n	800c280 <MemManage_Handler+0x4>

0800c282 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800c282:	b480      	push	{r7}
 800c284:	af00      	add	r7, sp, #0

}
 800c286:	bf00      	nop
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800c290:	b480      	push	{r7}
 800c292:	af00      	add	r7, sp, #0

}
 800c294:	bf00      	nop
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr

0800c29e <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800c29e:	b480      	push	{r7}
 800c2a0:	af00      	add	r7, sp, #0

}
 800c2a2:	bf00      	nop
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr

0800c2ac <TIM1_UP_TIM10_IRQHandler>:
//
//}


void TIM1_UP_TIM10_IRQHandler(void)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	af00      	add	r7, sp, #0
#ifdef USED_QEI1
	if (htim1.Instance -> CR1 == 129)
 800c2b0:	4b14      	ldr	r3, [pc, #80]	; (800c304 <TIM1_UP_TIM10_IRQHandler+0x58>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	2b81      	cmp	r3, #129	; 0x81
 800c2b8:	d109      	bne.n	800c2ce <TIM1_UP_TIM10_IRQHandler+0x22>
	{
		BIOS_QEI1.signbit += 1;
 800c2ba:	4b13      	ldr	r3, [pc, #76]	; (800c308 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800c2bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	b29b      	uxth	r3, r3
 800c2c6:	b21a      	sxth	r2, r3
 800c2c8:	4b0f      	ldr	r3, [pc, #60]	; (800c308 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800c2ca:	805a      	strh	r2, [r3, #2]
 800c2cc:	e00d      	b.n	800c2ea <TIM1_UP_TIM10_IRQHandler+0x3e>
	}
	else if (htim1.Instance ->CR1 == 145)
 800c2ce:	4b0d      	ldr	r3, [pc, #52]	; (800c304 <TIM1_UP_TIM10_IRQHandler+0x58>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	2b91      	cmp	r3, #145	; 0x91
 800c2d6:	d108      	bne.n	800c2ea <TIM1_UP_TIM10_IRQHandler+0x3e>
	{
		BIOS_QEI1.signbit -= 1;
 800c2d8:	4b0b      	ldr	r3, [pc, #44]	; (800c308 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800c2da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	3b01      	subs	r3, #1
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	b21a      	sxth	r2, r3
 800c2e6:	4b08      	ldr	r3, [pc, #32]	; (800c308 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800c2e8:	805a      	strh	r2, [r3, #2]
	}
	htim1.Instance -> SR = 0;
 800c2ea:	4b06      	ldr	r3, [pc, #24]	; (800c304 <TIM1_UP_TIM10_IRQHandler+0x58>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	611a      	str	r2, [r3, #16]
	QEIDelay(200);
 800c2f2:	20c8      	movs	r0, #200	; 0xc8
 800c2f4:	f7f5 fcce 	bl	8001c94 <QEIDelay>
#else
	HAL_TIM_IRQHandler(&htim1);
#endif
	HAL_TIM_IRQHandler(&htim10);
 800c2f8:	4804      	ldr	r0, [pc, #16]	; (800c30c <TIM1_UP_TIM10_IRQHandler+0x60>)
 800c2fa:	f009 fd8b 	bl	8015e14 <HAL_TIM_IRQHandler>
	return;
 800c2fe:	bf00      	nop
}
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	20006418 	.word	0x20006418
 800c308:	20006978 	.word	0x20006978
 800c30c:	200060e8 	.word	0x200060e8

0800c310 <TIM4_IRQHandler>:



void TIM4_IRQHandler(void)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	af00      	add	r7, sp, #0

#ifdef USED_QEI4
	if (htim4.Instance -> CR1 == 129)
 800c314:	4b12      	ldr	r3, [pc, #72]	; (800c360 <TIM4_IRQHandler+0x50>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	2b81      	cmp	r3, #129	; 0x81
 800c31c:	d109      	bne.n	800c332 <TIM4_IRQHandler+0x22>
	{
		BIOS_QEI4.signbit += 1;
 800c31e:	4b11      	ldr	r3, [pc, #68]	; (800c364 <TIM4_IRQHandler+0x54>)
 800c320:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c324:	b29b      	uxth	r3, r3
 800c326:	3301      	adds	r3, #1
 800c328:	b29b      	uxth	r3, r3
 800c32a:	b21a      	sxth	r2, r3
 800c32c:	4b0d      	ldr	r3, [pc, #52]	; (800c364 <TIM4_IRQHandler+0x54>)
 800c32e:	805a      	strh	r2, [r3, #2]
 800c330:	e00d      	b.n	800c34e <TIM4_IRQHandler+0x3e>
	}
	else if (htim4.Instance ->CR1 == 145)
 800c332:	4b0b      	ldr	r3, [pc, #44]	; (800c360 <TIM4_IRQHandler+0x50>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2b91      	cmp	r3, #145	; 0x91
 800c33a:	d108      	bne.n	800c34e <TIM4_IRQHandler+0x3e>
	{
		BIOS_QEI4.signbit -= 1;
 800c33c:	4b09      	ldr	r3, [pc, #36]	; (800c364 <TIM4_IRQHandler+0x54>)
 800c33e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c342:	b29b      	uxth	r3, r3
 800c344:	3b01      	subs	r3, #1
 800c346:	b29b      	uxth	r3, r3
 800c348:	b21a      	sxth	r2, r3
 800c34a:	4b06      	ldr	r3, [pc, #24]	; (800c364 <TIM4_IRQHandler+0x54>)
 800c34c:	805a      	strh	r2, [r3, #2]
	}
	htim4.Instance -> SR = 0;
 800c34e:	4b04      	ldr	r3, [pc, #16]	; (800c360 <TIM4_IRQHandler+0x50>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	2200      	movs	r2, #0
 800c354:	611a      	str	r2, [r3, #16]
	QEIDelay(100);
 800c356:	2064      	movs	r0, #100	; 0x64
 800c358:	f7f5 fc9c 	bl	8001c94 <QEIDelay>
	HAL_TIM_IRQHandler(&htim4);

	return;
#endif

}
 800c35c:	bf00      	nop
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	20006008 	.word	0x20006008
 800c364:	2000699c 	.word	0x2000699c

0800c368 <TIM8_UP_TIM13_IRQHandler>:



void TIM8_UP_TIM13_IRQHandler(void)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	af00      	add	r7, sp, #0
		BIOS_QEI6.signbit -= 1;
	}
	htim8.Instance -> SR = 0;
	QEIDelay(200);
#else
	HAL_TIM_IRQHandler(&htim8);
 800c36c:	4803      	ldr	r0, [pc, #12]	; (800c37c <TIM8_UP_TIM13_IRQHandler+0x14>)
 800c36e:	f009 fd51 	bl	8015e14 <HAL_TIM_IRQHandler>
#endif
	HAL_TIM_IRQHandler(&htim13);
 800c372:	4803      	ldr	r0, [pc, #12]	; (800c380 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800c374:	f009 fd4e 	bl	8015e14 <HAL_TIM_IRQHandler>
	return;
 800c378:	bf00      	nop
}
 800c37a:	bd80      	pop	{r7, pc}
 800c37c:	20005fc8 	.word	0x20005fc8
 800c380:	200062b0 	.word	0x200062b0

0800c384 <TIM2_IRQHandler>:



void TIM2_IRQHandler(void)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 800c388:	4802      	ldr	r0, [pc, #8]	; (800c394 <TIM2_IRQHandler+0x10>)
 800c38a:	f009 fd43 	bl	8015e14 <HAL_TIM_IRQHandler>
}
 800c38e:	bf00      	nop
 800c390:	bd80      	pop	{r7, pc}
 800c392:	bf00      	nop
 800c394:	2000651c 	.word	0x2000651c

0800c398 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3a8:	d109      	bne.n	800c3be <HAL_TIM_PeriodElapsedCallback+0x26>
		HAL_IncTick();
 800c3aa:	f004 febb 	bl	8011124 <HAL_IncTick>
		//		MUXUpdate(&MUX);
		SHIFTREGShift(&SR);
 800c3ae:	4806      	ldr	r0, [pc, #24]	; (800c3c8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800c3b0:	f7f5 fd3b 	bl	8001e2a <SHIFTREGShift>
		counter++;
 800c3b4:	4b05      	ldr	r3, [pc, #20]	; (800c3cc <HAL_TIM_PeriodElapsedCallback+0x34>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	4a04      	ldr	r2, [pc, #16]	; (800c3cc <HAL_TIM_PeriodElapsedCallback+0x34>)
 800c3bc:	6013      	str	r3, [r2, #0]
	}
}
 800c3be:	bf00      	nop
 800c3c0:	3708      	adds	r7, #8
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	200099fc 	.word	0x200099fc
 800c3cc:	20009b50 	.word	0x20009b50

0800c3d0 <HAL_I2C_MasterRxCpltCallback>:


//Callback for I2C RXBuffer
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
	if(hi2c == ps4.hi2cps4){
 800c3d8:	4b05      	ldr	r3, [pc, #20]	; (800c3f0 <HAL_I2C_MasterRxCpltCallback+0x20>)
 800c3da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3dc:	687a      	ldr	r2, [r7, #4]
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d102      	bne.n	800c3e8 <HAL_I2C_MasterRxCpltCallback+0x18>
		PSxConnectDMA(&ps4);
 800c3e2:	4803      	ldr	r0, [pc, #12]	; (800c3f0 <HAL_I2C_MasterRxCpltCallback+0x20>)
 800c3e4:	f7fc fb9a 	bl	8008b1c <PSxConnectDMA>

//	if(hi2c == PITCH_IMU.hi2cimu)
//	{
//		IMU_I2CHandle(&PITCH_IMU);
//	}
}
 800c3e8:	bf00      	nop
 800c3ea:	3708      	adds	r7, #8
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	2000a3fc 	.word	0x2000a3fc

0800c3f4 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void){
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	af00      	add	r7, sp, #0
	HAL_I2C_EV_IRQHandler(&hi2c1);
 800c3f8:	4802      	ldr	r0, [pc, #8]	; (800c404 <I2C1_EV_IRQHandler+0x10>)
 800c3fa:	f006 ffdf 	bl	80133bc <HAL_I2C_EV_IRQHandler>

}
 800c3fe:	bf00      	nop
 800c400:	bd80      	pop	{r7, pc}
 800c402:	bf00      	nop
 800c404:	20007050 	.word	0x20007050

0800c408 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void){
 800c408:	b580      	push	{r7, lr}
 800c40a:	af00      	add	r7, sp, #0
	HAL_I2C_ER_IRQHandler(&hi2c1);
 800c40c:	480a      	ldr	r0, [pc, #40]	; (800c438 <I2C1_ER_IRQHandler+0x30>)
 800c40e:	f007 f942 	bl	8013696 <HAL_I2C_ER_IRQHandler>
	HAL_DMA_DeInit(&hi2c1_rx_dma);
 800c412:	480a      	ldr	r0, [pc, #40]	; (800c43c <I2C1_ER_IRQHandler+0x34>)
 800c414:	f005 ff22 	bl	801225c <HAL_DMA_DeInit>
	HAL_I2C_DeInit(&hi2c1);
 800c418:	4807      	ldr	r0, [pc, #28]	; (800c438 <I2C1_ER_IRQHandler+0x30>)
 800c41a:	f006 fe89 	bl	8013130 <HAL_I2C_DeInit>

	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 800c41e:	4b08      	ldr	r3, [pc, #32]	; (800c440 <I2C1_ER_IRQHandler+0x38>)
 800c420:	2208      	movs	r2, #8
 800c422:	4906      	ldr	r1, [pc, #24]	; (800c43c <I2C1_ER_IRQHandler+0x34>)
 800c424:	4804      	ldr	r0, [pc, #16]	; (800c438 <I2C1_ER_IRQHandler+0x30>)
 800c426:	f7f7 fc1d 	bl	8003c64 <I2CX_DMA_RX_Init>
//
//
//
	PSxInitDMA(&ps4, &hi2c1);
 800c42a:	4903      	ldr	r1, [pc, #12]	; (800c438 <I2C1_ER_IRQHandler+0x30>)
 800c42c:	4805      	ldr	r0, [pc, #20]	; (800c444 <I2C1_ER_IRQHandler+0x3c>)
 800c42e:	f7fc fb88 	bl	8008b42 <PSxInitDMA>

}
 800c432:	bf00      	nop
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	20007050 	.word	0x20007050
 800c43c:	2000a398 	.word	0x2000a398
 800c440:	00061a80 	.word	0x00061a80
 800c444:	2000a3fc 	.word	0x2000a3fc

0800c448 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b08c      	sub	sp, #48	; 0x30
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800c450:	2300      	movs	r3, #0
 800c452:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800c454:	2300      	movs	r3, #0
 800c456:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800c458:	2200      	movs	r2, #0
 800c45a:	6879      	ldr	r1, [r7, #4]
 800c45c:	201c      	movs	r0, #28
 800c45e:	f005 fe09 	bl	8012074 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800c462:	201c      	movs	r0, #28
 800c464:	f005 fe22 	bl	80120ac <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800c468:	2300      	movs	r3, #0
 800c46a:	60fb      	str	r3, [r7, #12]
 800c46c:	4b20      	ldr	r3, [pc, #128]	; (800c4f0 <HAL_InitTick+0xa8>)
 800c46e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c470:	4a1f      	ldr	r2, [pc, #124]	; (800c4f0 <HAL_InitTick+0xa8>)
 800c472:	f043 0301 	orr.w	r3, r3, #1
 800c476:	6413      	str	r3, [r2, #64]	; 0x40
 800c478:	4b1d      	ldr	r3, [pc, #116]	; (800c4f0 <HAL_InitTick+0xa8>)
 800c47a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c47c:	f003 0301 	and.w	r3, r3, #1
 800c480:	60fb      	str	r3, [r7, #12]
 800c482:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c484:	f107 0210 	add.w	r2, r7, #16
 800c488:	f107 0314 	add.w	r3, r7, #20
 800c48c:	4611      	mov	r1, r2
 800c48e:	4618      	mov	r0, r3
 800c490:	f009 f9ca 	bl	8015828 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800c494:	f009 f9a0 	bl	80157d8 <HAL_RCC_GetPCLK1Freq>
 800c498:	4603      	mov	r3, r0
 800c49a:	005b      	lsls	r3, r3, #1
 800c49c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800c49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a0:	4a14      	ldr	r2, [pc, #80]	; (800c4f4 <HAL_InitTick+0xac>)
 800c4a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c4a6:	0c9b      	lsrs	r3, r3, #18
 800c4a8:	3b01      	subs	r3, #1
 800c4aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800c4ac:	4b12      	ldr	r3, [pc, #72]	; (800c4f8 <HAL_InitTick+0xb0>)
 800c4ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c4b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800c4b4:	4b10      	ldr	r3, [pc, #64]	; (800c4f8 <HAL_InitTick+0xb0>)
 800c4b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c4ba:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800c4bc:	4a0e      	ldr	r2, [pc, #56]	; (800c4f8 <HAL_InitTick+0xb0>)
 800c4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800c4c2:	4b0d      	ldr	r3, [pc, #52]	; (800c4f8 <HAL_InitTick+0xb0>)
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c4c8:	4b0b      	ldr	r3, [pc, #44]	; (800c4f8 <HAL_InitTick+0xb0>)
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800c4ce:	480a      	ldr	r0, [pc, #40]	; (800c4f8 <HAL_InitTick+0xb0>)
 800c4d0:	f009 fafa 	bl	8015ac8 <HAL_TIM_Base_Init>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d104      	bne.n	800c4e4 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800c4da:	4807      	ldr	r0, [pc, #28]	; (800c4f8 <HAL_InitTick+0xb0>)
 800c4dc:	f009 fb43 	bl	8015b66 <HAL_TIM_Base_Start_IT>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	e000      	b.n	800c4e6 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800c4e4:	2301      	movs	r3, #1
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3730      	adds	r7, #48	; 0x30
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	40023800 	.word	0x40023800
 800c4f4:	431bde83 	.word	0x431bde83
 800c4f8:	2000651c 	.word	0x2000651c

0800c4fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	af00      	add	r7, sp, #0
	return 1;
 800c500:	2301      	movs	r3, #1
}
 800c502:	4618      	mov	r0, r3
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr

0800c50c <_kill>:

int _kill(int pid, int sig)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800c516:	f00e f8c9 	bl	801a6ac <__errno>
 800c51a:	4603      	mov	r3, r0
 800c51c:	2216      	movs	r2, #22
 800c51e:	601a      	str	r2, [r3, #0]
	return -1;
 800c520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c524:	4618      	mov	r0, r3
 800c526:	3708      	adds	r7, #8
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <_exit>:

void _exit (int status)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800c534:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f7ff ffe7 	bl	800c50c <_kill>
	while (1) {}		/* Make sure we hang here */
 800c53e:	e7fe      	b.n	800c53e <_exit+0x12>

0800c540 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b086      	sub	sp, #24
 800c544:	af00      	add	r7, sp, #0
 800c546:	60f8      	str	r0, [r7, #12]
 800c548:	60b9      	str	r1, [r7, #8]
 800c54a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c54c:	2300      	movs	r3, #0
 800c54e:	617b      	str	r3, [r7, #20]
 800c550:	e00a      	b.n	800c568 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800c552:	f3af 8000 	nop.w
 800c556:	4601      	mov	r1, r0
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	1c5a      	adds	r2, r3, #1
 800c55c:	60ba      	str	r2, [r7, #8]
 800c55e:	b2ca      	uxtb	r2, r1
 800c560:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	3301      	adds	r3, #1
 800c566:	617b      	str	r3, [r7, #20]
 800c568:	697a      	ldr	r2, [r7, #20]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	dbf0      	blt.n	800c552 <_read+0x12>
	}

return len;
 800c570:	687b      	ldr	r3, [r7, #4]
}
 800c572:	4618      	mov	r0, r3
 800c574:	3718      	adds	r7, #24
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}

0800c57a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800c57a:	b580      	push	{r7, lr}
 800c57c:	b086      	sub	sp, #24
 800c57e:	af00      	add	r7, sp, #0
 800c580:	60f8      	str	r0, [r7, #12]
 800c582:	60b9      	str	r1, [r7, #8]
 800c584:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c586:	2300      	movs	r3, #0
 800c588:	617b      	str	r3, [r7, #20]
 800c58a:	e009      	b.n	800c5a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	1c5a      	adds	r2, r3, #1
 800c590:	60ba      	str	r2, [r7, #8]
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	4618      	mov	r0, r3
 800c596:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	3301      	adds	r3, #1
 800c59e:	617b      	str	r3, [r7, #20]
 800c5a0:	697a      	ldr	r2, [r7, #20]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	dbf1      	blt.n	800c58c <_write+0x12>
	}
	return len;
 800c5a8:	687b      	ldr	r3, [r7, #4]
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3718      	adds	r7, #24
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}

0800c5b2 <_close>:

int _close(int file)
{
 800c5b2:	b480      	push	{r7}
 800c5b4:	b083      	sub	sp, #12
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	6078      	str	r0, [r7, #4]
	return -1;
 800c5ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	370c      	adds	r7, #12
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr

0800c5ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 800c5ca:	b480      	push	{r7}
 800c5cc:	b083      	sub	sp, #12
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
 800c5d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c5da:	605a      	str	r2, [r3, #4]
	return 0;
 800c5dc:	2300      	movs	r3, #0
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	370c      	adds	r7, #12
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e8:	4770      	bx	lr

0800c5ea <_isatty>:

int _isatty(int file)
{
 800c5ea:	b480      	push	{r7}
 800c5ec:	b083      	sub	sp, #12
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
	return 1;
 800c5f2:	2301      	movs	r3, #1
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	370c      	adds	r7, #12
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr

0800c600 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800c600:	b480      	push	{r7}
 800c602:	b085      	sub	sp, #20
 800c604:	af00      	add	r7, sp, #0
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	607a      	str	r2, [r7, #4]
	return 0;
 800c60c:	2300      	movs	r3, #0
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3714      	adds	r7, #20
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr
	...

0800c61c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b086      	sub	sp, #24
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c624:	4a14      	ldr	r2, [pc, #80]	; (800c678 <_sbrk+0x5c>)
 800c626:	4b15      	ldr	r3, [pc, #84]	; (800c67c <_sbrk+0x60>)
 800c628:	1ad3      	subs	r3, r2, r3
 800c62a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c630:	4b13      	ldr	r3, [pc, #76]	; (800c680 <_sbrk+0x64>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d102      	bne.n	800c63e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c638:	4b11      	ldr	r3, [pc, #68]	; (800c680 <_sbrk+0x64>)
 800c63a:	4a12      	ldr	r2, [pc, #72]	; (800c684 <_sbrk+0x68>)
 800c63c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c63e:	4b10      	ldr	r3, [pc, #64]	; (800c680 <_sbrk+0x64>)
 800c640:	681a      	ldr	r2, [r3, #0]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	4413      	add	r3, r2
 800c646:	693a      	ldr	r2, [r7, #16]
 800c648:	429a      	cmp	r2, r3
 800c64a:	d207      	bcs.n	800c65c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800c64c:	f00e f82e 	bl	801a6ac <__errno>
 800c650:	4603      	mov	r3, r0
 800c652:	220c      	movs	r2, #12
 800c654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800c656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c65a:	e009      	b.n	800c670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c65c:	4b08      	ldr	r3, [pc, #32]	; (800c680 <_sbrk+0x64>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c662:	4b07      	ldr	r3, [pc, #28]	; (800c680 <_sbrk+0x64>)
 800c664:	681a      	ldr	r2, [r3, #0]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	4413      	add	r3, r2
 800c66a:	4a05      	ldr	r2, [pc, #20]	; (800c680 <_sbrk+0x64>)
 800c66c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800c66e:	68fb      	ldr	r3, [r7, #12]
}
 800c670:	4618      	mov	r0, r3
 800c672:	3718      	adds	r7, #24
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	20020000 	.word	0x20020000
 800c67c:	00000400 	.word	0x00000400
 800c680:	200002ac 	.word	0x200002ac
 800c684:	2000aac8 	.word	0x2000aac8

0800c688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c688:	b480      	push	{r7}
 800c68a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c68c:	4b08      	ldr	r3, [pc, #32]	; (800c6b0 <SystemInit+0x28>)
 800c68e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c692:	4a07      	ldr	r2, [pc, #28]	; (800c6b0 <SystemInit+0x28>)
 800c694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c69c:	4b04      	ldr	r3, [pc, #16]	; (800c6b0 <SystemInit+0x28>)
 800c69e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c6a2:	609a      	str	r2, [r3, #8]
#endif
}
 800c6a4:	bf00      	nop
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr
 800c6ae:	bf00      	nop
 800c6b0:	e000ed00 	.word	0xe000ed00

0800c6b4 <bldc_interface_init>:
static void(*rx_mcconf_received_func)(void) = 0;
static void(*rx_appconf_received_func)(void) = 0;
static void(*motor_control_set_func)(uint32_t controller_id, motor_control_mode mode, float value) = 0;
static void(*values_requested_func)(uint32_t controller_id) = 0;

void bldc_interface_init(void(*func)(uint32_t controller_id, unsigned char *data, unsigned int len)) {
 800c6b4:	b480      	push	{r7}
 800c6b6:	b083      	sub	sp, #12
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
	send_func = func;
 800c6bc:	4a04      	ldr	r2, [pc, #16]	; (800c6d0 <bldc_interface_init+0x1c>)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6013      	str	r3, [r2, #0]
}
 800c6c2:	bf00      	nop
 800c6c4:	370c      	adds	r7, #12
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr
 800c6ce:	bf00      	nop
 800c6d0:	20000598 	.word	0x20000598

0800c6d4 <bldc_interface_process_packet>:
 * The buffer to process.
 *
 * @param len
 * The length of the buffer.
 */
void bldc_interface_process_packet(unsigned char *data, unsigned int len) {
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b088      	sub	sp, #32
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
 800c6dc:	6039      	str	r1, [r7, #0]
	if (!len) {
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	f001 8437 	beq.w	800df54 <bldc_interface_process_packet+0x1880>
		return;
	}

	if (forward_func) {
 800c6e6:	4bcd      	ldr	r3, [pc, #820]	; (800ca1c <bldc_interface_process_packet+0x348>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d006      	beq.n	800c6fc <bldc_interface_process_packet+0x28>
		forward_func(data, len);
 800c6ee:	4bcb      	ldr	r3, [pc, #812]	; (800ca1c <bldc_interface_process_packet+0x348>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	6839      	ldr	r1, [r7, #0]
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	4798      	blx	r3
		return;
 800c6f8:	f001 bc43 	b.w	800df82 <bldc_interface_process_packet+0x18ae>
	}

	int32_t ind = 0;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	60fb      	str	r3, [r7, #12]
	uint32_t mask = 0;
 800c700:	2300      	movs	r3, #0
 800c702:	617b      	str	r3, [r7, #20]
	uint32_t hahaha = 0;
 800c704:	2300      	movs	r3, #0
 800c706:	61fb      	str	r3, [r7, #28]
	int i = 0;
 800c708:	2300      	movs	r3, #0
 800c70a:	61bb      	str	r3, [r7, #24]
	unsigned char id = data[0];
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	74fb      	strb	r3, [r7, #19]
	data++;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	3301      	adds	r3, #1
 800c716:	607b      	str	r3, [r7, #4]
	len--;
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	3b01      	subs	r3, #1
 800c71c:	603b      	str	r3, [r7, #0]

	switch (id) {
 800c71e:	7cfb      	ldrb	r3, [r7, #19]
 800c720:	2b32      	cmp	r3, #50	; 0x32
 800c722:	f201 8419 	bhi.w	800df58 <bldc_interface_process_packet+0x1884>
 800c726:	a201      	add	r2, pc, #4	; (adr r2, 800c72c <bldc_interface_process_packet+0x58>)
 800c728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c72c:	0800c7f9 	.word	0x0800c7f9
 800c730:	0800df59 	.word	0x0800df59
 800c734:	0800df59 	.word	0x0800df59
 800c738:	0800df59 	.word	0x0800df59
 800c73c:	0800c843 	.word	0x0800c843
 800c740:	0800df59 	.word	0x0800df59
 800c744:	0800df59 	.word	0x0800df59
 800c748:	0800df59 	.word	0x0800df59
 800c74c:	0800df59 	.word	0x0800df59
 800c750:	0800df59 	.word	0x0800df59
 800c754:	0800df59 	.word	0x0800df59
 800c758:	0800df59 	.word	0x0800df59
 800c75c:	0800df59 	.word	0x0800df59
 800c760:	0800df35 	.word	0x0800df35
 800c764:	0800cebd 	.word	0x0800cebd
 800c768:	0800cebd 	.word	0x0800cebd
 800c76c:	0800df45 	.word	0x0800df45
 800c770:	0800d779 	.word	0x0800d779
 800c774:	0800d779 	.word	0x0800d779
 800c778:	0800df59 	.word	0x0800df59
 800c77c:	0800df59 	.word	0x0800df59
 800c780:	0800ce3d 	.word	0x0800ce3d
 800c784:	0800ce5d 	.word	0x0800ce5d
 800c788:	0800df59 	.word	0x0800df59
 800c78c:	0800dd9d 	.word	0x0800dd9d
 800c790:	0800df59 	.word	0x0800df59
 800c794:	0800df59 	.word	0x0800df59
 800c798:	0800df59 	.word	0x0800df59
 800c79c:	0800df59 	.word	0x0800df59
 800c7a0:	0800df59 	.word	0x0800df59
 800c7a4:	0800df59 	.word	0x0800df59
 800c7a8:	0800de45 	.word	0x0800de45
 800c7ac:	0800dea1 	.word	0x0800dea1
 800c7b0:	0800defd 	.word	0x0800defd
 800c7b4:	0800df59 	.word	0x0800df59
 800c7b8:	0800df59 	.word	0x0800df59
 800c7bc:	0800df59 	.word	0x0800df59
 800c7c0:	0800df59 	.word	0x0800df59
 800c7c4:	0800df59 	.word	0x0800df59
 800c7c8:	0800df59 	.word	0x0800df59
 800c7cc:	0800df59 	.word	0x0800df59
 800c7d0:	0800df59 	.word	0x0800df59
 800c7d4:	0800df59 	.word	0x0800df59
 800c7d8:	0800df59 	.word	0x0800df59
 800c7dc:	0800df59 	.word	0x0800df59
 800c7e0:	0800df59 	.word	0x0800df59
 800c7e4:	0800df59 	.word	0x0800df59
 800c7e8:	0800df59 	.word	0x0800df59
 800c7ec:	0800df59 	.word	0x0800df59
 800c7f0:	0800df59 	.word	0x0800df59
 800c7f4:	0800ca81 	.word	0x0800ca81
	case COMM_FW_VERSION:
		if (len == 2) {
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	2b02      	cmp	r3, #2
 800c7fc:	d117      	bne.n	800c82e <bldc_interface_process_packet+0x15a>
			ind = 0;
 800c7fe:	2300      	movs	r3, #0
 800c800:	60fb      	str	r3, [r7, #12]
			fw_major = data[ind++];
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	1c5a      	adds	r2, r3, #1
 800c806:	60fa      	str	r2, [r7, #12]
 800c808:	461a      	mov	r2, r3
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	4413      	add	r3, r2
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	461a      	mov	r2, r3
 800c812:	4b83      	ldr	r3, [pc, #524]	; (800ca20 <bldc_interface_process_packet+0x34c>)
 800c814:	601a      	str	r2, [r3, #0]
			fw_minor = data[ind++];
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	1c5a      	adds	r2, r3, #1
 800c81a:	60fa      	str	r2, [r7, #12]
 800c81c:	461a      	mov	r2, r3
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	4413      	add	r3, r2
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	461a      	mov	r2, r3
 800c826:	4b7f      	ldr	r3, [pc, #508]	; (800ca24 <bldc_interface_process_packet+0x350>)
 800c828:	601a      	str	r2, [r3, #0]
		} else {
			fw_major = -1;
			fw_minor = -1;
		}
		break;
 800c82a:	f001 bbaa 	b.w	800df82 <bldc_interface_process_packet+0x18ae>
			fw_major = -1;
 800c82e:	4b7c      	ldr	r3, [pc, #496]	; (800ca20 <bldc_interface_process_packet+0x34c>)
 800c830:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c834:	601a      	str	r2, [r3, #0]
			fw_minor = -1;
 800c836:	4b7b      	ldr	r3, [pc, #492]	; (800ca24 <bldc_interface_process_packet+0x350>)
 800c838:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c83c:	601a      	str	r2, [r3, #0]
		break;
 800c83e:	f001 bba0 	b.w	800df82 <bldc_interface_process_packet+0x18ae>
	case COMM_WRITE_NEW_APP_DATA:
		// TODO
		break;

	case COMM_GET_VALUES:
		ind = 0;
 800c842:	2300      	movs	r3, #0
 800c844:	60fb      	str	r3, [r7, #12]
		values.temp_mos = buffer_get_float16(data, 1e1, &ind);
 800c846:	f107 030c 	add.w	r3, r7, #12
 800c84a:	4619      	mov	r1, r3
 800c84c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f001 fca0 	bl	800e196 <buffer_get_float16>
 800c856:	eef0 7a40 	vmov.f32	s15, s0
 800c85a:	4b73      	ldr	r3, [pc, #460]	; (800ca28 <bldc_interface_process_packet+0x354>)
 800c85c:	edc3 7a01 	vstr	s15, [r3, #4]
		values.temp_motor = buffer_get_float16(data, 1e1, &ind);
 800c860:	f107 030c 	add.w	r3, r7, #12
 800c864:	4619      	mov	r1, r3
 800c866:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f001 fc93 	bl	800e196 <buffer_get_float16>
 800c870:	eef0 7a40 	vmov.f32	s15, s0
 800c874:	4b6c      	ldr	r3, [pc, #432]	; (800ca28 <bldc_interface_process_packet+0x354>)
 800c876:	edc3 7a02 	vstr	s15, [r3, #8]
		values.current_motor = buffer_get_float32(data, 1e2, &ind);
 800c87a:	f107 030c 	add.w	r3, r7, #12
 800c87e:	4619      	mov	r1, r3
 800c880:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 800ca2c <bldc_interface_process_packet+0x358>
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f001 fca1 	bl	800e1cc <buffer_get_float32>
 800c88a:	eef0 7a40 	vmov.f32	s15, s0
 800c88e:	4b66      	ldr	r3, [pc, #408]	; (800ca28 <bldc_interface_process_packet+0x354>)
 800c890:	edc3 7a03 	vstr	s15, [r3, #12]
		values.current_in = buffer_get_float32(data, 1e2, &ind);
 800c894:	f107 030c 	add.w	r3, r7, #12
 800c898:	4619      	mov	r1, r3
 800c89a:	ed9f 0a64 	vldr	s0, [pc, #400]	; 800ca2c <bldc_interface_process_packet+0x358>
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f001 fc94 	bl	800e1cc <buffer_get_float32>
 800c8a4:	eef0 7a40 	vmov.f32	s15, s0
 800c8a8:	4b5f      	ldr	r3, [pc, #380]	; (800ca28 <bldc_interface_process_packet+0x354>)
 800c8aa:	edc3 7a04 	vstr	s15, [r3, #16]
		values.id = buffer_get_float32(data, 1e2, &ind);
 800c8ae:	f107 030c 	add.w	r3, r7, #12
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800ca2c <bldc_interface_process_packet+0x358>
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f001 fc87 	bl	800e1cc <buffer_get_float32>
 800c8be:	eef0 7a40 	vmov.f32	s15, s0
 800c8c2:	4b59      	ldr	r3, [pc, #356]	; (800ca28 <bldc_interface_process_packet+0x354>)
 800c8c4:	edc3 7a05 	vstr	s15, [r3, #20]
		values.iq = buffer_get_float32(data, 1e2, &ind);
 800c8c8:	f107 030c 	add.w	r3, r7, #12
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	ed9f 0a57 	vldr	s0, [pc, #348]	; 800ca2c <bldc_interface_process_packet+0x358>
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f001 fc7a 	bl	800e1cc <buffer_get_float32>
 800c8d8:	eef0 7a40 	vmov.f32	s15, s0
 800c8dc:	4b52      	ldr	r3, [pc, #328]	; (800ca28 <bldc_interface_process_packet+0x354>)
 800c8de:	edc3 7a06 	vstr	s15, [r3, #24]
		values.duty_now = buffer_get_float16(data, 1e3, &ind);
 800c8e2:	f107 030c 	add.w	r3, r7, #12
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	ed9f 0a51 	vldr	s0, [pc, #324]	; 800ca30 <bldc_interface_process_packet+0x35c>
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f001 fc52 	bl	800e196 <buffer_get_float16>
 800c8f2:	eef0 7a40 	vmov.f32	s15, s0
 800c8f6:	4b4c      	ldr	r3, [pc, #304]	; (800ca28 <bldc_interface_process_packet+0x354>)
 800c8f8:	edc3 7a08 	vstr	s15, [r3, #32]
		values.rpm = buffer_get_float32(data, 1e0, &ind);
 800c8fc:	f107 030c 	add.w	r3, r7, #12
 800c900:	4619      	mov	r1, r3
 800c902:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f001 fc60 	bl	800e1cc <buffer_get_float32>
 800c90c:	eef0 7a40 	vmov.f32	s15, s0
 800c910:	4b45      	ldr	r3, [pc, #276]	; (800ca28 <bldc_interface_process_packet+0x354>)
 800c912:	edc3 7a07 	vstr	s15, [r3, #28]
		values.v_in = buffer_get_float16(data, 1e1, &ind);
 800c916:	f107 030c 	add.w	r3, r7, #12
 800c91a:	4619      	mov	r1, r3
 800c91c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f001 fc38 	bl	800e196 <buffer_get_float16>
 800c926:	eef0 7a40 	vmov.f32	s15, s0
 800c92a:	4b3f      	ldr	r3, [pc, #252]	; (800ca28 <bldc_interface_process_packet+0x354>)
 800c92c:	edc3 7a00 	vstr	s15, [r3]
		values.amp_hours = buffer_get_float32(data, 1e4, &ind);
 800c930:	f107 030c 	add.w	r3, r7, #12
 800c934:	4619      	mov	r1, r3
 800c936:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 800ca34 <bldc_interface_process_packet+0x360>
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f001 fc46 	bl	800e1cc <buffer_get_float32>
 800c940:	eef0 7a40 	vmov.f32	s15, s0
 800c944:	4b38      	ldr	r3, [pc, #224]	; (800ca28 <bldc_interface_process_packet+0x354>)
 800c946:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		values.amp_hours_charged = buffer_get_float32(data, 1e4, &ind);
 800c94a:	f107 030c 	add.w	r3, r7, #12
 800c94e:	4619      	mov	r1, r3
 800c950:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800ca34 <bldc_interface_process_packet+0x360>
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f001 fc39 	bl	800e1cc <buffer_get_float32>
 800c95a:	eef0 7a40 	vmov.f32	s15, s0
 800c95e:	4b32      	ldr	r3, [pc, #200]	; (800ca28 <bldc_interface_process_packet+0x354>)
 800c960:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		values.watt_hours = buffer_get_float32(data, 1e4, &ind);
 800c964:	f107 030c 	add.w	r3, r7, #12
 800c968:	4619      	mov	r1, r3
 800c96a:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800ca34 <bldc_interface_process_packet+0x360>
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f001 fc2c 	bl	800e1cc <buffer_get_float32>
 800c974:	eef0 7a40 	vmov.f32	s15, s0
 800c978:	4b2b      	ldr	r3, [pc, #172]	; (800ca28 <bldc_interface_process_packet+0x354>)
 800c97a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		values.watt_hours_charged = buffer_get_float32(data, 1e4, &ind);
 800c97e:	f107 030c 	add.w	r3, r7, #12
 800c982:	4619      	mov	r1, r3
 800c984:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800ca34 <bldc_interface_process_packet+0x360>
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f001 fc1f 	bl	800e1cc <buffer_get_float32>
 800c98e:	eef0 7a40 	vmov.f32	s15, s0
 800c992:	4b25      	ldr	r3, [pc, #148]	; (800ca28 <bldc_interface_process_packet+0x354>)
 800c994:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		values.tachometer = buffer_get_int32(data, &ind);
 800c998:	f107 030c 	add.w	r3, r7, #12
 800c99c:	4619      	mov	r1, r3
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f001 fb99 	bl	800e0d6 <buffer_get_int32>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	4a20      	ldr	r2, [pc, #128]	; (800ca28 <bldc_interface_process_packet+0x354>)
 800c9a8:	6353      	str	r3, [r2, #52]	; 0x34
		values.tachometer_abs = buffer_get_int32(data, &ind);
 800c9aa:	f107 030c 	add.w	r3, r7, #12
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f001 fb90 	bl	800e0d6 <buffer_get_int32>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	4a1b      	ldr	r2, [pc, #108]	; (800ca28 <bldc_interface_process_packet+0x354>)
 800c9ba:	6393      	str	r3, [r2, #56]	; 0x38
		values.fault_code = (mc_fault_code)data[ind++];
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	1c5a      	adds	r2, r3, #1
 800c9c0:	60fa      	str	r2, [r7, #12]
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	4413      	add	r3, r2
 800c9c8:	781a      	ldrb	r2, [r3, #0]
 800c9ca:	4b17      	ldr	r3, [pc, #92]	; (800ca28 <bldc_interface_process_packet+0x354>)
 800c9cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		if (ind < (int)len) {
 800c9d0:	68fa      	ldr	r2, [r7, #12]
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	da0d      	bge.n	800c9f4 <bldc_interface_process_packet+0x320>
			values.pid_pos = buffer_get_float32(data, 1e6, &ind);
 800c9d8:	f107 030c 	add.w	r3, r7, #12
 800c9dc:	4619      	mov	r1, r3
 800c9de:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800ca38 <bldc_interface_process_packet+0x364>
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f001 fbf2 	bl	800e1cc <buffer_get_float32>
 800c9e8:	eef0 7a40 	vmov.f32	s15, s0
 800c9ec:	4b0e      	ldr	r3, [pc, #56]	; (800ca28 <bldc_interface_process_packet+0x354>)
 800c9ee:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 800c9f2:	e003      	b.n	800c9fc <bldc_interface_process_packet+0x328>
		} else {
			values.pid_pos = 0.0;
 800c9f4:	4b0c      	ldr	r3, [pc, #48]	; (800ca28 <bldc_interface_process_packet+0x354>)
 800c9f6:	f04f 0200 	mov.w	r2, #0
 800c9fa:	645a      	str	r2, [r3, #68]	; 0x44
		}

		if (ind < (int)len) {
 800c9fc:	68fa      	ldr	r2, [r7, #12]
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	429a      	cmp	r2, r3
 800ca02:	da1b      	bge.n	800ca3c <bldc_interface_process_packet+0x368>
			values.vesc_id = data[ind++];
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	1c5a      	adds	r2, r3, #1
 800ca08:	60fa      	str	r2, [r7, #12]
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	4413      	add	r3, r2
 800ca10:	781a      	ldrb	r2, [r3, #0]
 800ca12:	4b05      	ldr	r3, [pc, #20]	; (800ca28 <bldc_interface_process_packet+0x354>)
 800ca14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800ca18:	e014      	b.n	800ca44 <bldc_interface_process_packet+0x370>
 800ca1a:	bf00      	nop
 800ca1c:	2000059c 	.word	0x2000059c
 800ca20:	20000310 	.word	0x20000310
 800ca24:	20000314 	.word	0x20000314
 800ca28:	200002b0 	.word	0x200002b0
 800ca2c:	42c80000 	.word	0x42c80000
 800ca30:	447a0000 	.word	0x447a0000
 800ca34:	461c4000 	.word	0x461c4000
 800ca38:	49742400 	.word	0x49742400
		} else {
			values.vesc_id = 255;
 800ca3c:	4b0c      	ldr	r3, [pc, #48]	; (800ca70 <bldc_interface_process_packet+0x39c>)
 800ca3e:	22ff      	movs	r2, #255	; 0xff
 800ca40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		}

		rx_value_buf = values;
 800ca44:	4a0b      	ldr	r2, [pc, #44]	; (800ca74 <bldc_interface_process_packet+0x3a0>)
 800ca46:	4b0a      	ldr	r3, [pc, #40]	; (800ca70 <bldc_interface_process_packet+0x39c>)
 800ca48:	4610      	mov	r0, r2
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	2360      	movs	r3, #96	; 0x60
 800ca4e:	461a      	mov	r2, r3
 800ca50:	f00d fe5e 	bl	801a710 <memcpy>

		if (rx_value_func) {
 800ca54:	4b08      	ldr	r3, [pc, #32]	; (800ca78 <bldc_interface_process_packet+0x3a4>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d003      	beq.n	800ca64 <bldc_interface_process_packet+0x390>
			rx_value_func(&values);
 800ca5c:	4b06      	ldr	r3, [pc, #24]	; (800ca78 <bldc_interface_process_packet+0x3a4>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	4803      	ldr	r0, [pc, #12]	; (800ca70 <bldc_interface_process_packet+0x39c>)
 800ca62:	4798      	blx	r3
		}

		rx_value_complete = true;
 800ca64:	4b05      	ldr	r3, [pc, #20]	; (800ca7c <bldc_interface_process_packet+0x3a8>)
 800ca66:	2201      	movs	r2, #1
 800ca68:	701a      	strb	r2, [r3, #0]

		break;
 800ca6a:	f001 ba8a 	b.w	800df82 <bldc_interface_process_packet+0x18ae>
 800ca6e:	bf00      	nop
 800ca70:	200002b0 	.word	0x200002b0
 800ca74:	20007788 	.word	0x20007788
 800ca78:	200005a0 	.word	0x200005a0
 800ca7c:	2000a6e0 	.word	0x2000a6e0

	case COMM_GET_VALUES_SELECTIVE:
		ind = 0;
 800ca80:	2300      	movs	r3, #0
 800ca82:	60fb      	str	r3, [r7, #12]
		mask = buffer_get_uint32(data, &ind);
 800ca84:	f107 030c 	add.w	r3, r7, #12
 800ca88:	4619      	mov	r1, r3
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f001 fb53 	bl	800e136 <buffer_get_uint32>
 800ca90:	6178      	str	r0, [r7, #20]

		if (mask & ((uint32_t)1 << 0)) {
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	f003 0301 	and.w	r3, r3, #1
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d00e      	beq.n	800caba <bldc_interface_process_packet+0x3e6>
			values.temp_mos = buffer_get_float16(data, 1e1, &ind);
 800ca9c:	f107 030c 	add.w	r3, r7, #12
 800caa0:	4619      	mov	r1, r3
 800caa2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f001 fb75 	bl	800e196 <buffer_get_float16>
 800caac:	eef0 7a40 	vmov.f32	s15, s0
 800cab0:	4bc6      	ldr	r3, [pc, #792]	; (800cdcc <bldc_interface_process_packet+0x6f8>)
 800cab2:	edc3 7a01 	vstr	s15, [r3, #4]
			hahaha = 0;
 800cab6:	2300      	movs	r3, #0
 800cab8:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 1)) {
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	f003 0302 	and.w	r3, r3, #2
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d00e      	beq.n	800cae2 <bldc_interface_process_packet+0x40e>
			values.temp_motor = buffer_get_float16(data, 1e1, &ind);
 800cac4:	f107 030c 	add.w	r3, r7, #12
 800cac8:	4619      	mov	r1, r3
 800caca:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f001 fb61 	bl	800e196 <buffer_get_float16>
 800cad4:	eef0 7a40 	vmov.f32	s15, s0
 800cad8:	4bbc      	ldr	r3, [pc, #752]	; (800cdcc <bldc_interface_process_packet+0x6f8>)
 800cada:	edc3 7a02 	vstr	s15, [r3, #8]
			hahaha = 1;
 800cade:	2301      	movs	r3, #1
 800cae0:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 2)) {
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	f003 0304 	and.w	r3, r3, #4
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d00e      	beq.n	800cb0a <bldc_interface_process_packet+0x436>
			values.current_motor = buffer_get_float32(data, 1e2, &ind);
 800caec:	f107 030c 	add.w	r3, r7, #12
 800caf0:	4619      	mov	r1, r3
 800caf2:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 800cdd0 <bldc_interface_process_packet+0x6fc>
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f001 fb68 	bl	800e1cc <buffer_get_float32>
 800cafc:	eef0 7a40 	vmov.f32	s15, s0
 800cb00:	4bb2      	ldr	r3, [pc, #712]	; (800cdcc <bldc_interface_process_packet+0x6f8>)
 800cb02:	edc3 7a03 	vstr	s15, [r3, #12]
			hahaha = 2;
 800cb06:	2302      	movs	r3, #2
 800cb08:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 3)) {
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	f003 0308 	and.w	r3, r3, #8
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d00e      	beq.n	800cb32 <bldc_interface_process_packet+0x45e>
			values.current_in = buffer_get_float32(data, 1e2, &ind);
 800cb14:	f107 030c 	add.w	r3, r7, #12
 800cb18:	4619      	mov	r1, r3
 800cb1a:	ed9f 0aad 	vldr	s0, [pc, #692]	; 800cdd0 <bldc_interface_process_packet+0x6fc>
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f001 fb54 	bl	800e1cc <buffer_get_float32>
 800cb24:	eef0 7a40 	vmov.f32	s15, s0
 800cb28:	4ba8      	ldr	r3, [pc, #672]	; (800cdcc <bldc_interface_process_packet+0x6f8>)
 800cb2a:	edc3 7a04 	vstr	s15, [r3, #16]
			hahaha = 3;
 800cb2e:	2303      	movs	r3, #3
 800cb30:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 4)) {
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	f003 0310 	and.w	r3, r3, #16
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d00e      	beq.n	800cb5a <bldc_interface_process_packet+0x486>
			values.id = buffer_get_float32(data, 1e2, &ind);
 800cb3c:	f107 030c 	add.w	r3, r7, #12
 800cb40:	4619      	mov	r1, r3
 800cb42:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 800cdd0 <bldc_interface_process_packet+0x6fc>
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f001 fb40 	bl	800e1cc <buffer_get_float32>
 800cb4c:	eef0 7a40 	vmov.f32	s15, s0
 800cb50:	4b9e      	ldr	r3, [pc, #632]	; (800cdcc <bldc_interface_process_packet+0x6f8>)
 800cb52:	edc3 7a05 	vstr	s15, [r3, #20]
			hahaha = 4;
 800cb56:	2304      	movs	r3, #4
 800cb58:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 5)) {
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	f003 0320 	and.w	r3, r3, #32
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d00e      	beq.n	800cb82 <bldc_interface_process_packet+0x4ae>
			values.iq = buffer_get_float32(data, 1e2, &ind);
 800cb64:	f107 030c 	add.w	r3, r7, #12
 800cb68:	4619      	mov	r1, r3
 800cb6a:	ed9f 0a99 	vldr	s0, [pc, #612]	; 800cdd0 <bldc_interface_process_packet+0x6fc>
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f001 fb2c 	bl	800e1cc <buffer_get_float32>
 800cb74:	eef0 7a40 	vmov.f32	s15, s0
 800cb78:	4b94      	ldr	r3, [pc, #592]	; (800cdcc <bldc_interface_process_packet+0x6f8>)
 800cb7a:	edc3 7a06 	vstr	s15, [r3, #24]
			hahaha = 5;
 800cb7e:	2305      	movs	r3, #5
 800cb80:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 6)) {
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d00e      	beq.n	800cbaa <bldc_interface_process_packet+0x4d6>
			values.duty_now = buffer_get_float16(data, 1e3, &ind);
 800cb8c:	f107 030c 	add.w	r3, r7, #12
 800cb90:	4619      	mov	r1, r3
 800cb92:	ed9f 0a92 	vldr	s0, [pc, #584]	; 800cddc <bldc_interface_process_packet+0x708>
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f001 fafd 	bl	800e196 <buffer_get_float16>
 800cb9c:	eef0 7a40 	vmov.f32	s15, s0
 800cba0:	4b8a      	ldr	r3, [pc, #552]	; (800cdcc <bldc_interface_process_packet+0x6f8>)
 800cba2:	edc3 7a08 	vstr	s15, [r3, #32]
			hahaha = 6;
 800cba6:	2306      	movs	r3, #6
 800cba8:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 7)) {
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d00e      	beq.n	800cbd2 <bldc_interface_process_packet+0x4fe>
			values.rpm = buffer_get_float32(data, 1e0, &ind); // has to be divided by pole pairs
 800cbb4:	f107 030c 	add.w	r3, r7, #12
 800cbb8:	4619      	mov	r1, r3
 800cbba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f001 fb04 	bl	800e1cc <buffer_get_float32>
 800cbc4:	eef0 7a40 	vmov.f32	s15, s0
 800cbc8:	4b80      	ldr	r3, [pc, #512]	; (800cdcc <bldc_interface_process_packet+0x6f8>)
 800cbca:	edc3 7a07 	vstr	s15, [r3, #28]
			hahaha = 7;
 800cbce:	2307      	movs	r3, #7
 800cbd0:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 8)) {
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d00e      	beq.n	800cbfa <bldc_interface_process_packet+0x526>
			values.v_in = buffer_get_float16(data, 1e1, &ind);
 800cbdc:	f107 030c 	add.w	r3, r7, #12
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f001 fad5 	bl	800e196 <buffer_get_float16>
 800cbec:	eef0 7a40 	vmov.f32	s15, s0
 800cbf0:	4b76      	ldr	r3, [pc, #472]	; (800cdcc <bldc_interface_process_packet+0x6f8>)
 800cbf2:	edc3 7a00 	vstr	s15, [r3]
			hahaha = 8;
 800cbf6:	2308      	movs	r3, #8
 800cbf8:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 9)) {
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d00e      	beq.n	800cc22 <bldc_interface_process_packet+0x54e>
			values.amp_hours = buffer_get_float32(data, 1e4, &ind);
 800cc04:	f107 030c 	add.w	r3, r7, #12
 800cc08:	4619      	mov	r1, r3
 800cc0a:	ed9f 0a72 	vldr	s0, [pc, #456]	; 800cdd4 <bldc_interface_process_packet+0x700>
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f001 fadc 	bl	800e1cc <buffer_get_float32>
 800cc14:	eef0 7a40 	vmov.f32	s15, s0
 800cc18:	4b6c      	ldr	r3, [pc, #432]	; (800cdcc <bldc_interface_process_packet+0x6f8>)
 800cc1a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			hahaha = 9;
 800cc1e:	2309      	movs	r3, #9
 800cc20:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 10)) {
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d00e      	beq.n	800cc4a <bldc_interface_process_packet+0x576>
			values.amp_hours_charged = buffer_get_float32(data, 1e4, &ind);
 800cc2c:	f107 030c 	add.w	r3, r7, #12
 800cc30:	4619      	mov	r1, r3
 800cc32:	ed9f 0a68 	vldr	s0, [pc, #416]	; 800cdd4 <bldc_interface_process_packet+0x700>
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f001 fac8 	bl	800e1cc <buffer_get_float32>
 800cc3c:	eef0 7a40 	vmov.f32	s15, s0
 800cc40:	4b62      	ldr	r3, [pc, #392]	; (800cdcc <bldc_interface_process_packet+0x6f8>)
 800cc42:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			hahaha = 10;
 800cc46:	230a      	movs	r3, #10
 800cc48:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 11)) {
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d00e      	beq.n	800cc72 <bldc_interface_process_packet+0x59e>
			values.watt_hours = buffer_get_float32(data, 1e4, &ind);
 800cc54:	f107 030c 	add.w	r3, r7, #12
 800cc58:	4619      	mov	r1, r3
 800cc5a:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 800cdd4 <bldc_interface_process_packet+0x700>
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f001 fab4 	bl	800e1cc <buffer_get_float32>
 800cc64:	eef0 7a40 	vmov.f32	s15, s0
 800cc68:	4b58      	ldr	r3, [pc, #352]	; (800cdcc <bldc_interface_process_packet+0x6f8>)
 800cc6a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			hahaha = 11;
 800cc6e:	230b      	movs	r3, #11
 800cc70:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 12)) {
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d00e      	beq.n	800cc9a <bldc_interface_process_packet+0x5c6>
			values.watt_hours_charged = buffer_get_float32(data, 1e4, &ind);
 800cc7c:	f107 030c 	add.w	r3, r7, #12
 800cc80:	4619      	mov	r1, r3
 800cc82:	ed9f 0a54 	vldr	s0, [pc, #336]	; 800cdd4 <bldc_interface_process_packet+0x700>
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f001 faa0 	bl	800e1cc <buffer_get_float32>
 800cc8c:	eef0 7a40 	vmov.f32	s15, s0
 800cc90:	4b4e      	ldr	r3, [pc, #312]	; (800cdcc <bldc_interface_process_packet+0x6f8>)
 800cc92:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			hahaha = 12;
 800cc96:	230c      	movs	r3, #12
 800cc98:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 13)) {
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d00a      	beq.n	800ccba <bldc_interface_process_packet+0x5e6>
			values.tachometer = buffer_get_int32(data, &ind);
 800cca4:	f107 030c 	add.w	r3, r7, #12
 800cca8:	4619      	mov	r1, r3
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f001 fa13 	bl	800e0d6 <buffer_get_int32>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	4a46      	ldr	r2, [pc, #280]	; (800cdcc <bldc_interface_process_packet+0x6f8>)
 800ccb4:	6353      	str	r3, [r2, #52]	; 0x34
			hahaha = 13;
 800ccb6:	230d      	movs	r3, #13
 800ccb8:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 14)) {
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d00a      	beq.n	800ccda <bldc_interface_process_packet+0x606>
			values.tachometer_abs = buffer_get_int32(data, &ind);
 800ccc4:	f107 030c 	add.w	r3, r7, #12
 800ccc8:	4619      	mov	r1, r3
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f001 fa03 	bl	800e0d6 <buffer_get_int32>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	4a3e      	ldr	r2, [pc, #248]	; (800cdcc <bldc_interface_process_packet+0x6f8>)
 800ccd4:	6393      	str	r3, [r2, #56]	; 0x38
			hahaha = 14;
 800ccd6:	230e      	movs	r3, #14
 800ccd8:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 15)) {
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d00b      	beq.n	800ccfc <bldc_interface_process_packet+0x628>
			values.fault_code = (mc_fault_code)data[ind++];
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	1c5a      	adds	r2, r3, #1
 800cce8:	60fa      	str	r2, [r7, #12]
 800ccea:	461a      	mov	r2, r3
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	4413      	add	r3, r2
 800ccf0:	781a      	ldrb	r2, [r3, #0]
 800ccf2:	4b36      	ldr	r3, [pc, #216]	; (800cdcc <bldc_interface_process_packet+0x6f8>)
 800ccf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			hahaha = 15;
 800ccf8:	230f      	movs	r3, #15
 800ccfa:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 16)) {
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d00e      	beq.n	800cd24 <bldc_interface_process_packet+0x650>
			values.pid_pos = buffer_get_float32(data, 1e6, &ind);
 800cd06:	f107 030c 	add.w	r3, r7, #12
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800cdd8 <bldc_interface_process_packet+0x704>
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f001 fa5b 	bl	800e1cc <buffer_get_float32>
 800cd16:	eef0 7a40 	vmov.f32	s15, s0
 800cd1a:	4b2c      	ldr	r3, [pc, #176]	; (800cdcc <bldc_interface_process_packet+0x6f8>)
 800cd1c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			hahaha = 16;
 800cd20:	2310      	movs	r3, #16
 800cd22:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 17)) {
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d00b      	beq.n	800cd46 <bldc_interface_process_packet+0x672>
			values.vesc_id = data[ind++];
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	1c5a      	adds	r2, r3, #1
 800cd32:	60fa      	str	r2, [r7, #12]
 800cd34:	461a      	mov	r2, r3
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	4413      	add	r3, r2
 800cd3a:	781a      	ldrb	r2, [r3, #0]
 800cd3c:	4b23      	ldr	r3, [pc, #140]	; (800cdcc <bldc_interface_process_packet+0x6f8>)
 800cd3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			hahaha = 17;
 800cd42:	2311      	movs	r3, #17
 800cd44:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 18)) {
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d028      	beq.n	800cda2 <bldc_interface_process_packet+0x6ce>
			values.temp_mos1 = buffer_get_float16(data, 1e1, &ind);
 800cd50:	f107 030c 	add.w	r3, r7, #12
 800cd54:	4619      	mov	r1, r3
 800cd56:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f001 fa1b 	bl	800e196 <buffer_get_float16>
 800cd60:	eef0 7a40 	vmov.f32	s15, s0
 800cd64:	4b19      	ldr	r3, [pc, #100]	; (800cdcc <bldc_interface_process_packet+0x6f8>)
 800cd66:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			values.temp_mos2 = buffer_get_float16(data, 1e1, &ind);
 800cd6a:	f107 030c 	add.w	r3, r7, #12
 800cd6e:	4619      	mov	r1, r3
 800cd70:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f001 fa0e 	bl	800e196 <buffer_get_float16>
 800cd7a:	eef0 7a40 	vmov.f32	s15, s0
 800cd7e:	4b13      	ldr	r3, [pc, #76]	; (800cdcc <bldc_interface_process_packet+0x6f8>)
 800cd80:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			values.temp_mos3 = buffer_get_float16(data, 1e1, &ind);
 800cd84:	f107 030c 	add.w	r3, r7, #12
 800cd88:	4619      	mov	r1, r3
 800cd8a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f001 fa01 	bl	800e196 <buffer_get_float16>
 800cd94:	eef0 7a40 	vmov.f32	s15, s0
 800cd98:	4b0c      	ldr	r3, [pc, #48]	; (800cdcc <bldc_interface_process_packet+0x6f8>)
 800cd9a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			hahaha = 18;
 800cd9e:	2312      	movs	r3, #18
 800cda0:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 19)) {
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d019      	beq.n	800cde0 <bldc_interface_process_packet+0x70c>
			values.vd = buffer_get_float32(data, 1e3, &ind);
 800cdac:	f107 030c 	add.w	r3, r7, #12
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800cddc <bldc_interface_process_packet+0x708>
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f001 fa08 	bl	800e1cc <buffer_get_float32>
 800cdbc:	eef0 7a40 	vmov.f32	s15, s0
 800cdc0:	4b02      	ldr	r3, [pc, #8]	; (800cdcc <bldc_interface_process_packet+0x6f8>)
 800cdc2:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			hahaha = 19;
 800cdc6:	2313      	movs	r3, #19
 800cdc8:	61fb      	str	r3, [r7, #28]
 800cdca:	e009      	b.n	800cde0 <bldc_interface_process_packet+0x70c>
 800cdcc:	200002b0 	.word	0x200002b0
 800cdd0:	42c80000 	.word	0x42c80000
 800cdd4:	461c4000 	.word	0x461c4000
 800cdd8:	49742400 	.word	0x49742400
 800cddc:	447a0000 	.word	0x447a0000
		}
		if (mask & ((uint32_t)1 << 20)) {
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d00e      	beq.n	800ce08 <bldc_interface_process_packet+0x734>
			values.vq = buffer_get_float32(data, 1e3, &ind);
 800cdea:	f107 030c 	add.w	r3, r7, #12
 800cdee:	4619      	mov	r1, r3
 800cdf0:	ed1f 0a06 	vldr	s0, [pc, #-24]	; 800cddc <bldc_interface_process_packet+0x708>
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f001 f9e9 	bl	800e1cc <buffer_get_float32>
 800cdfa:	eef0 7a40 	vmov.f32	s15, s0
 800cdfe:	4b26      	ldr	r3, [pc, #152]	; (800ce98 <bldc_interface_process_packet+0x7c4>)
 800ce00:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			hahaha = 20;
 800ce04:	2314      	movs	r3, #20
 800ce06:	61fb      	str	r3, [r7, #28]
		}

		rx_value_buf = values;
 800ce08:	4a24      	ldr	r2, [pc, #144]	; (800ce9c <bldc_interface_process_packet+0x7c8>)
 800ce0a:	4b23      	ldr	r3, [pc, #140]	; (800ce98 <bldc_interface_process_packet+0x7c4>)
 800ce0c:	4610      	mov	r0, r2
 800ce0e:	4619      	mov	r1, r3
 800ce10:	2360      	movs	r3, #96	; 0x60
 800ce12:	461a      	mov	r2, r3
 800ce14:	f00d fc7c 	bl	801a710 <memcpy>

		if(rx_value_selective_print){
 800ce18:	4b21      	ldr	r3, [pc, #132]	; (800cea0 <bldc_interface_process_packet+0x7cc>)
 800ce1a:	781b      	ldrb	r3, [r3, #0]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d008      	beq.n	800ce32 <bldc_interface_process_packet+0x75e>
			if (rx_value_selective_func) {
 800ce20:	4b20      	ldr	r3, [pc, #128]	; (800cea4 <bldc_interface_process_packet+0x7d0>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d004      	beq.n	800ce32 <bldc_interface_process_packet+0x75e>
				rx_value_selective_func(hahaha, &values);
 800ce28:	4b1e      	ldr	r3, [pc, #120]	; (800cea4 <bldc_interface_process_packet+0x7d0>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	491a      	ldr	r1, [pc, #104]	; (800ce98 <bldc_interface_process_packet+0x7c4>)
 800ce2e:	69f8      	ldr	r0, [r7, #28]
 800ce30:	4798      	blx	r3
			}
		}

		rx_value_complete = true;
 800ce32:	4b1d      	ldr	r3, [pc, #116]	; (800cea8 <bldc_interface_process_packet+0x7d4>)
 800ce34:	2201      	movs	r2, #1
 800ce36:	701a      	strb	r2, [r3, #0]
		break;
 800ce38:	f001 b8a3 	b.w	800df82 <bldc_interface_process_packet+0x18ae>

	case COMM_PRINT:
		if (rx_printf_func) {
 800ce3c:	4b1b      	ldr	r3, [pc, #108]	; (800ceac <bldc_interface_process_packet+0x7d8>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	f001 808b 	beq.w	800df5c <bldc_interface_process_packet+0x1888>
			data[len] = '\0';
 800ce46:	687a      	ldr	r2, [r7, #4]
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	4413      	add	r3, r2
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	701a      	strb	r2, [r3, #0]
			rx_printf_func((char*)data);
 800ce50:	4b16      	ldr	r3, [pc, #88]	; (800ceac <bldc_interface_process_packet+0x7d8>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	4798      	blx	r3
		}
		break;
 800ce58:	f001 b880 	b.w	800df5c <bldc_interface_process_packet+0x1888>
	case COMM_SAMPLE_PRINT:
		// TODO
		break;

	case COMM_ROTOR_POSITION:
		ind = 0;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	60fb      	str	r3, [r7, #12]
		rotor_pos = buffer_get_float32(data, 100000.0, &ind);
 800ce60:	f107 030c 	add.w	r3, r7, #12
 800ce64:	4619      	mov	r1, r3
 800ce66:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800ceb0 <bldc_interface_process_packet+0x7dc>
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f001 f9ae 	bl	800e1cc <buffer_get_float32>
 800ce70:	eef0 7a40 	vmov.f32	s15, s0
 800ce74:	4b0f      	ldr	r3, [pc, #60]	; (800ceb4 <bldc_interface_process_packet+0x7e0>)
 800ce76:	edc3 7a00 	vstr	s15, [r3]

		if (rx_rotor_pos_func) {
 800ce7a:	4b0f      	ldr	r3, [pc, #60]	; (800ceb8 <bldc_interface_process_packet+0x7e4>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	f001 806e 	beq.w	800df60 <bldc_interface_process_packet+0x188c>
			rx_rotor_pos_func(rotor_pos);
 800ce84:	4b0c      	ldr	r3, [pc, #48]	; (800ceb8 <bldc_interface_process_packet+0x7e4>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4a0a      	ldr	r2, [pc, #40]	; (800ceb4 <bldc_interface_process_packet+0x7e0>)
 800ce8a:	edd2 7a00 	vldr	s15, [r2]
 800ce8e:	eeb0 0a67 	vmov.f32	s0, s15
 800ce92:	4798      	blx	r3
		}
		break;
 800ce94:	f001 b864 	b.w	800df60 <bldc_interface_process_packet+0x188c>
 800ce98:	200002b0 	.word	0x200002b0
 800ce9c:	20007788 	.word	0x20007788
 800cea0:	2000aa04 	.word	0x2000aa04
 800cea4:	200005a4 	.word	0x200005a4
 800cea8:	2000a6e0 	.word	0x2000a6e0
 800ceac:	200005a8 	.word	0x200005a8
 800ceb0:	47c35000 	.word	0x47c35000
 800ceb4:	20000318 	.word	0x20000318
 800ceb8:	200005ac 	.word	0x200005ac
		// TODO
		break;

	case COMM_GET_MCCONF:
	case COMM_GET_MCCONF_DEFAULT:
		ind = 0;
 800cebc:	2300      	movs	r3, #0
 800cebe:	60fb      	str	r3, [r7, #12]

		mcconf.signature = buffer_get_uint32(data, &ind);
 800cec0:	f107 030c 	add.w	r3, r7, #12
 800cec4:	4619      	mov	r1, r3
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f001 f935 	bl	800e136 <buffer_get_uint32>
 800cecc:	4603      	mov	r3, r0
 800cece:	4ac5      	ldr	r2, [pc, #788]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800ced0:	6013      	str	r3, [r2, #0]

		mcconf.pwm_mode = data[ind++];
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	1c5a      	adds	r2, r3, #1
 800ced6:	60fa      	str	r2, [r7, #12]
 800ced8:	461a      	mov	r2, r3
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	4413      	add	r3, r2
 800cede:	781a      	ldrb	r2, [r3, #0]
 800cee0:	4bc0      	ldr	r3, [pc, #768]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800cee2:	711a      	strb	r2, [r3, #4]
		mcconf.comm_mode = data[ind++];
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	1c5a      	adds	r2, r3, #1
 800cee8:	60fa      	str	r2, [r7, #12]
 800ceea:	461a      	mov	r2, r3
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	4413      	add	r3, r2
 800cef0:	781a      	ldrb	r2, [r3, #0]
 800cef2:	4bbc      	ldr	r3, [pc, #752]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800cef4:	715a      	strb	r2, [r3, #5]
		mcconf.motor_type = data[ind++];
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	1c5a      	adds	r2, r3, #1
 800cefa:	60fa      	str	r2, [r7, #12]
 800cefc:	461a      	mov	r2, r3
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	4413      	add	r3, r2
 800cf02:	781a      	ldrb	r2, [r3, #0]
 800cf04:	4bb7      	ldr	r3, [pc, #732]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800cf06:	719a      	strb	r2, [r3, #6]
		mcconf.sensor_mode = data[ind++];
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	1c5a      	adds	r2, r3, #1
 800cf0c:	60fa      	str	r2, [r7, #12]
 800cf0e:	461a      	mov	r2, r3
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	4413      	add	r3, r2
 800cf14:	781a      	ldrb	r2, [r3, #0]
 800cf16:	4bb3      	ldr	r3, [pc, #716]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800cf18:	71da      	strb	r2, [r3, #7]

		mcconf.l_current_max = buffer_get_float32_auto(data, &ind);
 800cf1a:	f107 030c 	add.w	r3, r7, #12
 800cf1e:	4619      	mov	r1, r3
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f001 f96d 	bl	800e200 <buffer_get_float32_auto>
 800cf26:	eef0 7a40 	vmov.f32	s15, s0
 800cf2a:	4bae      	ldr	r3, [pc, #696]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800cf2c:	edc3 7a02 	vstr	s15, [r3, #8]
		mcconf.l_current_min = buffer_get_float32_auto(data, &ind);
 800cf30:	f107 030c 	add.w	r3, r7, #12
 800cf34:	4619      	mov	r1, r3
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f001 f962 	bl	800e200 <buffer_get_float32_auto>
 800cf3c:	eef0 7a40 	vmov.f32	s15, s0
 800cf40:	4ba8      	ldr	r3, [pc, #672]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800cf42:	edc3 7a03 	vstr	s15, [r3, #12]
		mcconf.l_in_current_max = buffer_get_float32_auto(data, &ind);
 800cf46:	f107 030c 	add.w	r3, r7, #12
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f001 f957 	bl	800e200 <buffer_get_float32_auto>
 800cf52:	eef0 7a40 	vmov.f32	s15, s0
 800cf56:	4ba3      	ldr	r3, [pc, #652]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800cf58:	edc3 7a04 	vstr	s15, [r3, #16]
		mcconf.l_in_current_min = buffer_get_float32_auto(data, &ind);
 800cf5c:	f107 030c 	add.w	r3, r7, #12
 800cf60:	4619      	mov	r1, r3
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f001 f94c 	bl	800e200 <buffer_get_float32_auto>
 800cf68:	eef0 7a40 	vmov.f32	s15, s0
 800cf6c:	4b9d      	ldr	r3, [pc, #628]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800cf6e:	edc3 7a05 	vstr	s15, [r3, #20]
		mcconf.l_abs_current_max = buffer_get_float32_auto(data, &ind);
 800cf72:	f107 030c 	add.w	r3, r7, #12
 800cf76:	4619      	mov	r1, r3
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f001 f941 	bl	800e200 <buffer_get_float32_auto>
 800cf7e:	eef0 7a40 	vmov.f32	s15, s0
 800cf82:	4b98      	ldr	r3, [pc, #608]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800cf84:	edc3 7a06 	vstr	s15, [r3, #24]
		mcconf.l_min_erpm = buffer_get_float32_auto(data, &ind);
 800cf88:	f107 030c 	add.w	r3, r7, #12
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f001 f936 	bl	800e200 <buffer_get_float32_auto>
 800cf94:	eef0 7a40 	vmov.f32	s15, s0
 800cf98:	4b92      	ldr	r3, [pc, #584]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800cf9a:	edc3 7a07 	vstr	s15, [r3, #28]
		mcconf.l_max_erpm = buffer_get_float32_auto(data, &ind);
 800cf9e:	f107 030c 	add.w	r3, r7, #12
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f001 f92b 	bl	800e200 <buffer_get_float32_auto>
 800cfaa:	eef0 7a40 	vmov.f32	s15, s0
 800cfae:	4b8d      	ldr	r3, [pc, #564]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800cfb0:	edc3 7a08 	vstr	s15, [r3, #32]
		mcconf.l_erpm_start = buffer_get_float32_auto(data, &ind);
 800cfb4:	f107 030c 	add.w	r3, r7, #12
 800cfb8:	4619      	mov	r1, r3
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f001 f920 	bl	800e200 <buffer_get_float32_auto>
 800cfc0:	eef0 7a40 	vmov.f32	s15, s0
 800cfc4:	4b87      	ldr	r3, [pc, #540]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800cfc6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		mcconf.l_max_erpm_fbrake = buffer_get_float32_auto(data, &ind);
 800cfca:	f107 030c 	add.w	r3, r7, #12
 800cfce:	4619      	mov	r1, r3
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f001 f915 	bl	800e200 <buffer_get_float32_auto>
 800cfd6:	eef0 7a40 	vmov.f32	s15, s0
 800cfda:	4b82      	ldr	r3, [pc, #520]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800cfdc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		mcconf.l_max_erpm_fbrake_cc = buffer_get_float32_auto(data, &ind);
 800cfe0:	f107 030c 	add.w	r3, r7, #12
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f001 f90a 	bl	800e200 <buffer_get_float32_auto>
 800cfec:	eef0 7a40 	vmov.f32	s15, s0
 800cff0:	4b7c      	ldr	r3, [pc, #496]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800cff2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		mcconf.l_min_vin = buffer_get_float32_auto(data, &ind);
 800cff6:	f107 030c 	add.w	r3, r7, #12
 800cffa:	4619      	mov	r1, r3
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f001 f8ff 	bl	800e200 <buffer_get_float32_auto>
 800d002:	eef0 7a40 	vmov.f32	s15, s0
 800d006:	4b77      	ldr	r3, [pc, #476]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d008:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		mcconf.l_max_vin = buffer_get_float32_auto(data, &ind);
 800d00c:	f107 030c 	add.w	r3, r7, #12
 800d010:	4619      	mov	r1, r3
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f001 f8f4 	bl	800e200 <buffer_get_float32_auto>
 800d018:	eef0 7a40 	vmov.f32	s15, s0
 800d01c:	4b71      	ldr	r3, [pc, #452]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d01e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		mcconf.l_battery_cut_start = buffer_get_float32_auto(data, &ind);
 800d022:	f107 030c 	add.w	r3, r7, #12
 800d026:	4619      	mov	r1, r3
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f001 f8e9 	bl	800e200 <buffer_get_float32_auto>
 800d02e:	eef0 7a40 	vmov.f32	s15, s0
 800d032:	4b6c      	ldr	r3, [pc, #432]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d034:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		mcconf.l_battery_cut_end = buffer_get_float32_auto(data, &ind);
 800d038:	f107 030c 	add.w	r3, r7, #12
 800d03c:	4619      	mov	r1, r3
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f001 f8de 	bl	800e200 <buffer_get_float32_auto>
 800d044:	eef0 7a40 	vmov.f32	s15, s0
 800d048:	4b66      	ldr	r3, [pc, #408]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d04a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		mcconf.l_slow_abs_current = data[ind++];
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	1c5a      	adds	r2, r3, #1
 800d052:	60fa      	str	r2, [r7, #12]
 800d054:	461a      	mov	r2, r3
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	4413      	add	r3, r2
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	bf14      	ite	ne
 800d060:	2301      	movne	r3, #1
 800d062:	2300      	moveq	r3, #0
 800d064:	b2da      	uxtb	r2, r3
 800d066:	4b5f      	ldr	r3, [pc, #380]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		mcconf.l_temp_fet_start = buffer_get_float32_auto(data, &ind);
 800d06c:	f107 030c 	add.w	r3, r7, #12
 800d070:	4619      	mov	r1, r3
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f001 f8c4 	bl	800e200 <buffer_get_float32_auto>
 800d078:	eef0 7a40 	vmov.f32	s15, s0
 800d07c:	4b59      	ldr	r3, [pc, #356]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d07e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		mcconf.l_temp_fet_end = buffer_get_float32_auto(data, &ind);
 800d082:	f107 030c 	add.w	r3, r7, #12
 800d086:	4619      	mov	r1, r3
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f001 f8b9 	bl	800e200 <buffer_get_float32_auto>
 800d08e:	eef0 7a40 	vmov.f32	s15, s0
 800d092:	4b54      	ldr	r3, [pc, #336]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d094:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		mcconf.l_temp_motor_start = buffer_get_float32_auto(data, &ind);
 800d098:	f107 030c 	add.w	r3, r7, #12
 800d09c:	4619      	mov	r1, r3
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f001 f8ae 	bl	800e200 <buffer_get_float32_auto>
 800d0a4:	eef0 7a40 	vmov.f32	s15, s0
 800d0a8:	4b4e      	ldr	r3, [pc, #312]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d0aa:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		mcconf.l_temp_motor_end = buffer_get_float32_auto(data, &ind);
 800d0ae:	f107 030c 	add.w	r3, r7, #12
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f001 f8a3 	bl	800e200 <buffer_get_float32_auto>
 800d0ba:	eef0 7a40 	vmov.f32	s15, s0
 800d0be:	4b49      	ldr	r3, [pc, #292]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d0c0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		mcconf.l_temp_accel_dec = buffer_get_float32_auto(data, &ind);
 800d0c4:	f107 030c 	add.w	r3, r7, #12
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f001 f898 	bl	800e200 <buffer_get_float32_auto>
 800d0d0:	eef0 7a40 	vmov.f32	s15, s0
 800d0d4:	4b43      	ldr	r3, [pc, #268]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d0d6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		mcconf.l_min_duty = buffer_get_float32_auto(data, &ind);
 800d0da:	f107 030c 	add.w	r3, r7, #12
 800d0de:	4619      	mov	r1, r3
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f001 f88d 	bl	800e200 <buffer_get_float32_auto>
 800d0e6:	eef0 7a40 	vmov.f32	s15, s0
 800d0ea:	4b3e      	ldr	r3, [pc, #248]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d0ec:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		mcconf.l_max_duty = buffer_get_float32_auto(data, &ind);
 800d0f0:	f107 030c 	add.w	r3, r7, #12
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f001 f882 	bl	800e200 <buffer_get_float32_auto>
 800d0fc:	eef0 7a40 	vmov.f32	s15, s0
 800d100:	4b38      	ldr	r3, [pc, #224]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d102:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		mcconf.l_watt_max = buffer_get_float32_auto(data, &ind);
 800d106:	f107 030c 	add.w	r3, r7, #12
 800d10a:	4619      	mov	r1, r3
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f001 f877 	bl	800e200 <buffer_get_float32_auto>
 800d112:	eef0 7a40 	vmov.f32	s15, s0
 800d116:	4b33      	ldr	r3, [pc, #204]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d118:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		mcconf.l_watt_min = buffer_get_float32_auto(data, &ind);
 800d11c:	f107 030c 	add.w	r3, r7, #12
 800d120:	4619      	mov	r1, r3
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f001 f86c 	bl	800e200 <buffer_get_float32_auto>
 800d128:	eef0 7a40 	vmov.f32	s15, s0
 800d12c:	4b2d      	ldr	r3, [pc, #180]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d12e:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

		mcconf.lo_current_max = mcconf.l_current_max;
 800d132:	4b2c      	ldr	r3, [pc, #176]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d134:	689b      	ldr	r3, [r3, #8]
 800d136:	4a2b      	ldr	r2, [pc, #172]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d138:	6693      	str	r3, [r2, #104]	; 0x68
		mcconf.lo_current_min = mcconf.l_current_min;
 800d13a:	4b2a      	ldr	r3, [pc, #168]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d13c:	68db      	ldr	r3, [r3, #12]
 800d13e:	4a29      	ldr	r2, [pc, #164]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d140:	66d3      	str	r3, [r2, #108]	; 0x6c
		mcconf.lo_in_current_max = mcconf.l_in_current_max;
 800d142:	4b28      	ldr	r3, [pc, #160]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d144:	691b      	ldr	r3, [r3, #16]
 800d146:	4a27      	ldr	r2, [pc, #156]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d148:	6713      	str	r3, [r2, #112]	; 0x70
		mcconf.lo_in_current_min = mcconf.l_in_current_min;
 800d14a:	4b26      	ldr	r3, [pc, #152]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d14c:	695b      	ldr	r3, [r3, #20]
 800d14e:	4a25      	ldr	r2, [pc, #148]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d150:	6753      	str	r3, [r2, #116]	; 0x74
		mcconf.lo_current_motor_max_now = mcconf.l_current_max;
 800d152:	4b24      	ldr	r3, [pc, #144]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d154:	689b      	ldr	r3, [r3, #8]
 800d156:	4a23      	ldr	r2, [pc, #140]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d158:	6793      	str	r3, [r2, #120]	; 0x78
		mcconf.lo_current_motor_min_now = mcconf.l_current_min;
 800d15a:	4b22      	ldr	r3, [pc, #136]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d15c:	68db      	ldr	r3, [r3, #12]
 800d15e:	4a21      	ldr	r2, [pc, #132]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d160:	67d3      	str	r3, [r2, #124]	; 0x7c

		mcconf.sl_min_erpm = buffer_get_float32_auto(data, &ind);
 800d162:	f107 030c 	add.w	r3, r7, #12
 800d166:	4619      	mov	r1, r3
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f001 f849 	bl	800e200 <buffer_get_float32_auto>
 800d16e:	eef0 7a40 	vmov.f32	s15, s0
 800d172:	4b1c      	ldr	r3, [pc, #112]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d174:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		mcconf.sl_min_erpm_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 800d178:	f107 030c 	add.w	r3, r7, #12
 800d17c:	4619      	mov	r1, r3
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f001 f83e 	bl	800e200 <buffer_get_float32_auto>
 800d184:	eef0 7a40 	vmov.f32	s15, s0
 800d188:	4b16      	ldr	r3, [pc, #88]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d18a:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		mcconf.sl_max_fullbreak_current_dir_change = buffer_get_float32_auto(data, &ind);
 800d18e:	f107 030c 	add.w	r3, r7, #12
 800d192:	4619      	mov	r1, r3
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f001 f833 	bl	800e200 <buffer_get_float32_auto>
 800d19a:	eef0 7a40 	vmov.f32	s15, s0
 800d19e:	4b11      	ldr	r3, [pc, #68]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d1a0:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		mcconf.sl_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 800d1a4:	f107 030c 	add.w	r3, r7, #12
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f001 f828 	bl	800e200 <buffer_get_float32_auto>
 800d1b0:	eef0 7a40 	vmov.f32	s15, s0
 800d1b4:	4b0b      	ldr	r3, [pc, #44]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d1b6:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		mcconf.sl_phase_advance_at_br = buffer_get_float32_auto(data, &ind);
 800d1ba:	f107 030c 	add.w	r3, r7, #12
 800d1be:	4619      	mov	r1, r3
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f001 f81d 	bl	800e200 <buffer_get_float32_auto>
 800d1c6:	eef0 7a40 	vmov.f32	s15, s0
 800d1ca:	4b06      	ldr	r3, [pc, #24]	; (800d1e4 <bldc_interface_process_packet+0xb10>)
 800d1cc:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
		mcconf.sl_cycle_int_rpm_br = buffer_get_float32_auto(data, &ind);
 800d1d0:	f107 030c 	add.w	r3, r7, #12
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f001 f812 	bl	800e200 <buffer_get_float32_auto>
 800d1dc:	eef0 7a40 	vmov.f32	s15, s0
 800d1e0:	e002      	b.n	800d1e8 <bldc_interface_process_packet+0xb14>
 800d1e2:	bf00      	nop
 800d1e4:	2000031c 	.word	0x2000031c
 800d1e8:	4bc7      	ldr	r3, [pc, #796]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d1ea:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
		mcconf.sl_bemf_coupling_k = buffer_get_float32_auto(data, &ind);
 800d1ee:	f107 030c 	add.w	r3, r7, #12
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f001 f803 	bl	800e200 <buffer_get_float32_auto>
 800d1fa:	eef0 7a40 	vmov.f32	s15, s0
 800d1fe:	4bc2      	ldr	r3, [pc, #776]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d200:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98

		memcpy(mcconf.hall_table, data + ind, 8);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	461a      	mov	r2, r3
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	441a      	add	r2, r3
 800d20c:	4bbe      	ldr	r3, [pc, #760]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d20e:	339c      	adds	r3, #156	; 0x9c
 800d210:	6810      	ldr	r0, [r2, #0]
 800d212:	6851      	ldr	r1, [r2, #4]
 800d214:	c303      	stmia	r3!, {r0, r1}
		ind += 8;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	3308      	adds	r3, #8
 800d21a:	60fb      	str	r3, [r7, #12]
		mcconf.hall_sl_erpm = buffer_get_float32_auto(data, &ind);
 800d21c:	f107 030c 	add.w	r3, r7, #12
 800d220:	4619      	mov	r1, r3
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f000 ffec 	bl	800e200 <buffer_get_float32_auto>
 800d228:	eef0 7a40 	vmov.f32	s15, s0
 800d22c:	4bb6      	ldr	r3, [pc, #728]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d22e:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

		mcconf.foc_current_kp = buffer_get_float32_auto(data, &ind);
 800d232:	f107 030c 	add.w	r3, r7, #12
 800d236:	4619      	mov	r1, r3
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f000 ffe1 	bl	800e200 <buffer_get_float32_auto>
 800d23e:	eef0 7a40 	vmov.f32	s15, s0
 800d242:	4bb1      	ldr	r3, [pc, #708]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d244:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		mcconf.foc_current_ki = buffer_get_float32_auto(data, &ind);
 800d248:	f107 030c 	add.w	r3, r7, #12
 800d24c:	4619      	mov	r1, r3
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f000 ffd6 	bl	800e200 <buffer_get_float32_auto>
 800d254:	eef0 7a40 	vmov.f32	s15, s0
 800d258:	4bab      	ldr	r3, [pc, #684]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d25a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		mcconf.foc_f_sw = buffer_get_float32_auto(data, &ind);
 800d25e:	f107 030c 	add.w	r3, r7, #12
 800d262:	4619      	mov	r1, r3
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f000 ffcb 	bl	800e200 <buffer_get_float32_auto>
 800d26a:	eef0 7a40 	vmov.f32	s15, s0
 800d26e:	4ba6      	ldr	r3, [pc, #664]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d270:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		mcconf.foc_dt_us = buffer_get_float32_auto(data, &ind);
 800d274:	f107 030c 	add.w	r3, r7, #12
 800d278:	4619      	mov	r1, r3
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 ffc0 	bl	800e200 <buffer_get_float32_auto>
 800d280:	eef0 7a40 	vmov.f32	s15, s0
 800d284:	4ba0      	ldr	r3, [pc, #640]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d286:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
		mcconf.foc_encoder_inverted = data[ind++];
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	1c5a      	adds	r2, r3, #1
 800d28e:	60fa      	str	r2, [r7, #12]
 800d290:	461a      	mov	r2, r3
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	4413      	add	r3, r2
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	bf14      	ite	ne
 800d29c:	2301      	movne	r3, #1
 800d29e:	2300      	moveq	r3, #0
 800d2a0:	b2da      	uxtb	r2, r3
 800d2a2:	4b99      	ldr	r3, [pc, #612]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d2a4:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		mcconf.foc_encoder_offset = buffer_get_float32_auto(data, &ind);
 800d2a8:	f107 030c 	add.w	r3, r7, #12
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f000 ffa6 	bl	800e200 <buffer_get_float32_auto>
 800d2b4:	eef0 7a40 	vmov.f32	s15, s0
 800d2b8:	4b93      	ldr	r3, [pc, #588]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d2ba:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
		mcconf.foc_encoder_ratio = buffer_get_float32_auto(data, &ind);
 800d2be:	f107 030c 	add.w	r3, r7, #12
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f000 ff9b 	bl	800e200 <buffer_get_float32_auto>
 800d2ca:	eef0 7a40 	vmov.f32	s15, s0
 800d2ce:	4b8e      	ldr	r3, [pc, #568]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d2d0:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
		mcconf.foc_sensor_mode = data[ind++];
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	1c5a      	adds	r2, r3, #1
 800d2d8:	60fa      	str	r2, [r7, #12]
 800d2da:	461a      	mov	r2, r3
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	4413      	add	r3, r2
 800d2e0:	781a      	ldrb	r2, [r3, #0]
 800d2e2:	4b89      	ldr	r3, [pc, #548]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d2e4:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
		mcconf.foc_pll_kp = buffer_get_float32_auto(data, &ind);
 800d2e8:	f107 030c 	add.w	r3, r7, #12
 800d2ec:	4619      	mov	r1, r3
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 ff86 	bl	800e200 <buffer_get_float32_auto>
 800d2f4:	eef0 7a40 	vmov.f32	s15, s0
 800d2f8:	4b83      	ldr	r3, [pc, #524]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d2fa:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
		mcconf.foc_pll_ki = buffer_get_float32_auto(data, &ind);
 800d2fe:	f107 030c 	add.w	r3, r7, #12
 800d302:	4619      	mov	r1, r3
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f000 ff7b 	bl	800e200 <buffer_get_float32_auto>
 800d30a:	eef0 7a40 	vmov.f32	s15, s0
 800d30e:	4b7e      	ldr	r3, [pc, #504]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d310:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
		mcconf.foc_motor_l = buffer_get_float32_auto(data, &ind);
 800d314:	f107 030c 	add.w	r3, r7, #12
 800d318:	4619      	mov	r1, r3
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 ff70 	bl	800e200 <buffer_get_float32_auto>
 800d320:	eef0 7a40 	vmov.f32	s15, s0
 800d324:	4b78      	ldr	r3, [pc, #480]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d326:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
		mcconf.foc_motor_r = buffer_get_float32_auto(data, &ind);
 800d32a:	f107 030c 	add.w	r3, r7, #12
 800d32e:	4619      	mov	r1, r3
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f000 ff65 	bl	800e200 <buffer_get_float32_auto>
 800d336:	eef0 7a40 	vmov.f32	s15, s0
 800d33a:	4b73      	ldr	r3, [pc, #460]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d33c:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
		mcconf.foc_motor_flux_linkage = buffer_get_float32_auto(data, &ind);
 800d340:	f107 030c 	add.w	r3, r7, #12
 800d344:	4619      	mov	r1, r3
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f000 ff5a 	bl	800e200 <buffer_get_float32_auto>
 800d34c:	eef0 7a40 	vmov.f32	s15, s0
 800d350:	4b6d      	ldr	r3, [pc, #436]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d352:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
		mcconf.foc_observer_gain = buffer_get_float32_auto(data, &ind);
 800d356:	f107 030c 	add.w	r3, r7, #12
 800d35a:	4619      	mov	r1, r3
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f000 ff4f 	bl	800e200 <buffer_get_float32_auto>
 800d362:	eef0 7a40 	vmov.f32	s15, s0
 800d366:	4b68      	ldr	r3, [pc, #416]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d368:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
		mcconf.foc_observer_gain_slow = buffer_get_float32_auto(data, &ind);
 800d36c:	f107 030c 	add.w	r3, r7, #12
 800d370:	4619      	mov	r1, r3
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f000 ff44 	bl	800e200 <buffer_get_float32_auto>
 800d378:	eef0 7a40 	vmov.f32	s15, s0
 800d37c:	4b62      	ldr	r3, [pc, #392]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d37e:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
		mcconf.foc_duty_dowmramp_kp = buffer_get_float32_auto(data, &ind);
 800d382:	f107 030c 	add.w	r3, r7, #12
 800d386:	4619      	mov	r1, r3
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f000 ff39 	bl	800e200 <buffer_get_float32_auto>
 800d38e:	eef0 7a40 	vmov.f32	s15, s0
 800d392:	4b5d      	ldr	r3, [pc, #372]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d394:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
		mcconf.foc_duty_dowmramp_ki = buffer_get_float32_auto(data, &ind);
 800d398:	f107 030c 	add.w	r3, r7, #12
 800d39c:	4619      	mov	r1, r3
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f000 ff2e 	bl	800e200 <buffer_get_float32_auto>
 800d3a4:	eef0 7a40 	vmov.f32	s15, s0
 800d3a8:	4b57      	ldr	r3, [pc, #348]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d3aa:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
		mcconf.foc_openloop_rpm = buffer_get_float32_auto(data, &ind);
 800d3ae:	f107 030c 	add.w	r3, r7, #12
 800d3b2:	4619      	mov	r1, r3
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f000 ff23 	bl	800e200 <buffer_get_float32_auto>
 800d3ba:	eef0 7a40 	vmov.f32	s15, s0
 800d3be:	4b52      	ldr	r3, [pc, #328]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d3c0:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
		mcconf.foc_sl_openloop_hyst = buffer_get_float32_auto(data, &ind);
 800d3c4:	f107 030c 	add.w	r3, r7, #12
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f000 ff18 	bl	800e200 <buffer_get_float32_auto>
 800d3d0:	eef0 7a40 	vmov.f32	s15, s0
 800d3d4:	4b4c      	ldr	r3, [pc, #304]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d3d6:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
		mcconf.foc_sl_openloop_time = buffer_get_float32_auto(data, &ind);
 800d3da:	f107 030c 	add.w	r3, r7, #12
 800d3de:	4619      	mov	r1, r3
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f000 ff0d 	bl	800e200 <buffer_get_float32_auto>
 800d3e6:	eef0 7a40 	vmov.f32	s15, s0
 800d3ea:	4b47      	ldr	r3, [pc, #284]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d3ec:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
		mcconf.foc_sl_d_current_duty = buffer_get_float32_auto(data, &ind);
 800d3f0:	f107 030c 	add.w	r3, r7, #12
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f000 ff02 	bl	800e200 <buffer_get_float32_auto>
 800d3fc:	eef0 7a40 	vmov.f32	s15, s0
 800d400:	4b41      	ldr	r3, [pc, #260]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d402:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
		mcconf.foc_sl_d_current_factor = buffer_get_float32_auto(data, &ind);
 800d406:	f107 030c 	add.w	r3, r7, #12
 800d40a:	4619      	mov	r1, r3
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f000 fef7 	bl	800e200 <buffer_get_float32_auto>
 800d412:	eef0 7a40 	vmov.f32	s15, s0
 800d416:	4b3c      	ldr	r3, [pc, #240]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d418:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8
		memcpy(mcconf.foc_hall_table, data + ind, 8);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	461a      	mov	r2, r3
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	441a      	add	r2, r3
 800d424:	4b38      	ldr	r3, [pc, #224]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d426:	33fd      	adds	r3, #253	; 0xfd
 800d428:	6811      	ldr	r1, [r2, #0]
 800d42a:	6852      	ldr	r2, [r2, #4]
 800d42c:	6019      	str	r1, [r3, #0]
 800d42e:	605a      	str	r2, [r3, #4]
		ind += 8;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	3308      	adds	r3, #8
 800d434:	60fb      	str	r3, [r7, #12]
		mcconf.foc_sl_erpm = buffer_get_float32_auto(data, &ind);
 800d436:	f107 030c 	add.w	r3, r7, #12
 800d43a:	4619      	mov	r1, r3
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f000 fedf 	bl	800e200 <buffer_get_float32_auto>
 800d442:	eef0 7a40 	vmov.f32	s15, s0
 800d446:	4b30      	ldr	r3, [pc, #192]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d448:	edc3 7a42 	vstr	s15, [r3, #264]	; 0x108
		mcconf.foc_sample_v0_v7 = data[ind++];
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	1c5a      	adds	r2, r3, #1
 800d450:	60fa      	str	r2, [r7, #12]
 800d452:	461a      	mov	r2, r3
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	4413      	add	r3, r2
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	bf14      	ite	ne
 800d45e:	2301      	movne	r3, #1
 800d460:	2300      	moveq	r3, #0
 800d462:	b2da      	uxtb	r2, r3
 800d464:	4b28      	ldr	r3, [pc, #160]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d466:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
		mcconf.foc_sample_high_current = data[ind++];
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	1c5a      	adds	r2, r3, #1
 800d46e:	60fa      	str	r2, [r7, #12]
 800d470:	461a      	mov	r2, r3
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	4413      	add	r3, r2
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	bf14      	ite	ne
 800d47c:	2301      	movne	r3, #1
 800d47e:	2300      	moveq	r3, #0
 800d480:	b2da      	uxtb	r2, r3
 800d482:	4b21      	ldr	r3, [pc, #132]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d484:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
		mcconf.foc_sat_comp = buffer_get_float32_auto(data, &ind);
 800d488:	f107 030c 	add.w	r3, r7, #12
 800d48c:	4619      	mov	r1, r3
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f000 feb6 	bl	800e200 <buffer_get_float32_auto>
 800d494:	eef0 7a40 	vmov.f32	s15, s0
 800d498:	4b1b      	ldr	r3, [pc, #108]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d49a:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
		mcconf.foc_temp_comp = data[ind++];
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	1c5a      	adds	r2, r3, #1
 800d4a2:	60fa      	str	r2, [r7, #12]
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	4413      	add	r3, r2
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	bf14      	ite	ne
 800d4b0:	2301      	movne	r3, #1
 800d4b2:	2300      	moveq	r3, #0
 800d4b4:	b2da      	uxtb	r2, r3
 800d4b6:	4b14      	ldr	r3, [pc, #80]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d4b8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
		mcconf.foc_temp_comp_base_temp = buffer_get_float32_auto(data, &ind);
 800d4bc:	f107 030c 	add.w	r3, r7, #12
 800d4c0:	4619      	mov	r1, r3
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f000 fe9c 	bl	800e200 <buffer_get_float32_auto>
 800d4c8:	eef0 7a40 	vmov.f32	s15, s0
 800d4cc:	4b0e      	ldr	r3, [pc, #56]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d4ce:	edc3 7a46 	vstr	s15, [r3, #280]	; 0x118
		mcconf.foc_current_filter_const = buffer_get_float32_auto(data, &ind);
 800d4d2:	f107 030c 	add.w	r3, r7, #12
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f000 fe91 	bl	800e200 <buffer_get_float32_auto>
 800d4de:	eef0 7a40 	vmov.f32	s15, s0
 800d4e2:	4b09      	ldr	r3, [pc, #36]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d4e4:	edc3 7a47 	vstr	s15, [r3, #284]	; 0x11c

		mcconf.s_pid_kp = buffer_get_float32_auto(data, &ind);
 800d4e8:	f107 030c 	add.w	r3, r7, #12
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f000 fe86 	bl	800e200 <buffer_get_float32_auto>
 800d4f4:	eef0 7a40 	vmov.f32	s15, s0
 800d4f8:	4b03      	ldr	r3, [pc, #12]	; (800d508 <bldc_interface_process_packet+0xe34>)
 800d4fa:	edc3 7a48 	vstr	s15, [r3, #288]	; 0x120
		mcconf.s_pid_ki = buffer_get_float32_auto(data, &ind);
 800d4fe:	f107 030c 	add.w	r3, r7, #12
 800d502:	4619      	mov	r1, r3
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	e001      	b.n	800d50c <bldc_interface_process_packet+0xe38>
 800d508:	2000031c 	.word	0x2000031c
 800d50c:	f000 fe78 	bl	800e200 <buffer_get_float32_auto>
 800d510:	eef0 7a40 	vmov.f32	s15, s0
 800d514:	4b96      	ldr	r3, [pc, #600]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d516:	edc3 7a49 	vstr	s15, [r3, #292]	; 0x124
		mcconf.s_pid_kd = buffer_get_float32_auto(data, &ind);
 800d51a:	f107 030c 	add.w	r3, r7, #12
 800d51e:	4619      	mov	r1, r3
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f000 fe6d 	bl	800e200 <buffer_get_float32_auto>
 800d526:	eef0 7a40 	vmov.f32	s15, s0
 800d52a:	4b91      	ldr	r3, [pc, #580]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d52c:	edc3 7a4a 	vstr	s15, [r3, #296]	; 0x128
		mcconf.s_pid_kd_filter = buffer_get_float32_auto(data, &ind);
 800d530:	f107 030c 	add.w	r3, r7, #12
 800d534:	4619      	mov	r1, r3
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 fe62 	bl	800e200 <buffer_get_float32_auto>
 800d53c:	eef0 7a40 	vmov.f32	s15, s0
 800d540:	4b8b      	ldr	r3, [pc, #556]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d542:	edc3 7a4b 	vstr	s15, [r3, #300]	; 0x12c
		mcconf.s_pid_min_erpm = buffer_get_float32_auto(data, &ind);
 800d546:	f107 030c 	add.w	r3, r7, #12
 800d54a:	4619      	mov	r1, r3
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f000 fe57 	bl	800e200 <buffer_get_float32_auto>
 800d552:	eef0 7a40 	vmov.f32	s15, s0
 800d556:	4b86      	ldr	r3, [pc, #536]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d558:	edc3 7a4c 	vstr	s15, [r3, #304]	; 0x130
		mcconf.s_pid_allow_braking = data[ind++];
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	1c5a      	adds	r2, r3, #1
 800d560:	60fa      	str	r2, [r7, #12]
 800d562:	461a      	mov	r2, r3
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	4413      	add	r3, r2
 800d568:	781b      	ldrb	r3, [r3, #0]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	bf14      	ite	ne
 800d56e:	2301      	movne	r3, #1
 800d570:	2300      	moveq	r3, #0
 800d572:	b2da      	uxtb	r2, r3
 800d574:	4b7e      	ldr	r3, [pc, #504]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d576:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134

		mcconf.p_pid_kp = buffer_get_float32_auto(data, &ind);
 800d57a:	f107 030c 	add.w	r3, r7, #12
 800d57e:	4619      	mov	r1, r3
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f000 fe3d 	bl	800e200 <buffer_get_float32_auto>
 800d586:	eef0 7a40 	vmov.f32	s15, s0
 800d58a:	4b79      	ldr	r3, [pc, #484]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d58c:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
		mcconf.p_pid_ki = buffer_get_float32_auto(data, &ind);
 800d590:	f107 030c 	add.w	r3, r7, #12
 800d594:	4619      	mov	r1, r3
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 fe32 	bl	800e200 <buffer_get_float32_auto>
 800d59c:	eef0 7a40 	vmov.f32	s15, s0
 800d5a0:	4b73      	ldr	r3, [pc, #460]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d5a2:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
		mcconf.p_pid_kd = buffer_get_float32_auto(data, &ind);
 800d5a6:	f107 030c 	add.w	r3, r7, #12
 800d5aa:	4619      	mov	r1, r3
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f000 fe27 	bl	800e200 <buffer_get_float32_auto>
 800d5b2:	eef0 7a40 	vmov.f32	s15, s0
 800d5b6:	4b6e      	ldr	r3, [pc, #440]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d5b8:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
		mcconf.p_pid_kd_filter = buffer_get_float32_auto(data, &ind);
 800d5bc:	f107 030c 	add.w	r3, r7, #12
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f000 fe1c 	bl	800e200 <buffer_get_float32_auto>
 800d5c8:	eef0 7a40 	vmov.f32	s15, s0
 800d5cc:	4b68      	ldr	r3, [pc, #416]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d5ce:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
		mcconf.p_pid_ang_div = buffer_get_float32_auto(data, &ind);
 800d5d2:	f107 030c 	add.w	r3, r7, #12
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f000 fe11 	bl	800e200 <buffer_get_float32_auto>
 800d5de:	eef0 7a40 	vmov.f32	s15, s0
 800d5e2:	4b63      	ldr	r3, [pc, #396]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d5e4:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148

		mcconf.cc_startup_boost_duty = buffer_get_float32_auto(data, &ind);
 800d5e8:	f107 030c 	add.w	r3, r7, #12
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 fe06 	bl	800e200 <buffer_get_float32_auto>
 800d5f4:	eef0 7a40 	vmov.f32	s15, s0
 800d5f8:	4b5d      	ldr	r3, [pc, #372]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d5fa:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
		mcconf.cc_min_current = buffer_get_float32_auto(data, &ind);
 800d5fe:	f107 030c 	add.w	r3, r7, #12
 800d602:	4619      	mov	r1, r3
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f000 fdfb 	bl	800e200 <buffer_get_float32_auto>
 800d60a:	eef0 7a40 	vmov.f32	s15, s0
 800d60e:	4b58      	ldr	r3, [pc, #352]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d610:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
		mcconf.cc_gain = buffer_get_float32_auto(data, &ind);
 800d614:	f107 030c 	add.w	r3, r7, #12
 800d618:	4619      	mov	r1, r3
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f000 fdf0 	bl	800e200 <buffer_get_float32_auto>
 800d620:	eef0 7a40 	vmov.f32	s15, s0
 800d624:	4b52      	ldr	r3, [pc, #328]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d626:	edc3 7a55 	vstr	s15, [r3, #340]	; 0x154
		mcconf.cc_ramp_step_max = buffer_get_float32_auto(data, &ind);
 800d62a:	f107 030c 	add.w	r3, r7, #12
 800d62e:	4619      	mov	r1, r3
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f000 fde5 	bl	800e200 <buffer_get_float32_auto>
 800d636:	eef0 7a40 	vmov.f32	s15, s0
 800d63a:	4b4d      	ldr	r3, [pc, #308]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d63c:	edc3 7a56 	vstr	s15, [r3, #344]	; 0x158

		mcconf.m_fault_stop_time_ms = buffer_get_int32(data, &ind);
 800d640:	f107 030c 	add.w	r3, r7, #12
 800d644:	4619      	mov	r1, r3
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 fd45 	bl	800e0d6 <buffer_get_int32>
 800d64c:	4603      	mov	r3, r0
 800d64e:	4a48      	ldr	r2, [pc, #288]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d650:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
		mcconf.m_duty_ramp_step = buffer_get_float32_auto(data, &ind);
 800d654:	f107 030c 	add.w	r3, r7, #12
 800d658:	4619      	mov	r1, r3
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 fdd0 	bl	800e200 <buffer_get_float32_auto>
 800d660:	eef0 7a40 	vmov.f32	s15, s0
 800d664:	4b42      	ldr	r3, [pc, #264]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d666:	edc3 7a58 	vstr	s15, [r3, #352]	; 0x160
		mcconf.m_current_backoff_gain = buffer_get_float32_auto(data, &ind);
 800d66a:	f107 030c 	add.w	r3, r7, #12
 800d66e:	4619      	mov	r1, r3
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f000 fdc5 	bl	800e200 <buffer_get_float32_auto>
 800d676:	eef0 7a40 	vmov.f32	s15, s0
 800d67a:	4b3d      	ldr	r3, [pc, #244]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d67c:	edc3 7a59 	vstr	s15, [r3, #356]	; 0x164
		mcconf.m_encoder_counts = buffer_get_uint32(data, &ind);
 800d680:	f107 030c 	add.w	r3, r7, #12
 800d684:	4619      	mov	r1, r3
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 fd55 	bl	800e136 <buffer_get_uint32>
 800d68c:	4603      	mov	r3, r0
 800d68e:	4a38      	ldr	r2, [pc, #224]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d690:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
		mcconf.m_sensor_port_mode = data[ind++];
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	1c5a      	adds	r2, r3, #1
 800d698:	60fa      	str	r2, [r7, #12]
 800d69a:	461a      	mov	r2, r3
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	4413      	add	r3, r2
 800d6a0:	781a      	ldrb	r2, [r3, #0]
 800d6a2:	4b33      	ldr	r3, [pc, #204]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d6a4:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
		mcconf.m_invert_direction = data[ind++];
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	1c5a      	adds	r2, r3, #1
 800d6ac:	60fa      	str	r2, [r7, #12]
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	4413      	add	r3, r2
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	bf14      	ite	ne
 800d6ba:	2301      	movne	r3, #1
 800d6bc:	2300      	moveq	r3, #0
 800d6be:	b2da      	uxtb	r2, r3
 800d6c0:	4b2b      	ldr	r3, [pc, #172]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d6c2:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
		mcconf.m_drv8301_oc_mode = data[ind++];
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	1c5a      	adds	r2, r3, #1
 800d6ca:	60fa      	str	r2, [r7, #12]
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	4413      	add	r3, r2
 800d6d2:	781a      	ldrb	r2, [r3, #0]
 800d6d4:	4b26      	ldr	r3, [pc, #152]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d6d6:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
		mcconf.m_drv8301_oc_adj = data[ind++];
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	1c5a      	adds	r2, r3, #1
 800d6de:	60fa      	str	r2, [r7, #12]
 800d6e0:	461a      	mov	r2, r3
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	4413      	add	r3, r2
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	4b21      	ldr	r3, [pc, #132]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d6ec:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
		mcconf.m_bldc_f_sw_min = buffer_get_float32_auto(data, &ind);
 800d6f0:	f107 030c 	add.w	r3, r7, #12
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f000 fd82 	bl	800e200 <buffer_get_float32_auto>
 800d6fc:	eef0 7a40 	vmov.f32	s15, s0
 800d700:	4b1b      	ldr	r3, [pc, #108]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d702:	edc3 7a5d 	vstr	s15, [r3, #372]	; 0x174
		mcconf.m_bldc_f_sw_max = buffer_get_float32_auto(data, &ind);
 800d706:	f107 030c 	add.w	r3, r7, #12
 800d70a:	4619      	mov	r1, r3
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f000 fd77 	bl	800e200 <buffer_get_float32_auto>
 800d712:	eef0 7a40 	vmov.f32	s15, s0
 800d716:	4b16      	ldr	r3, [pc, #88]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d718:	edc3 7a5e 	vstr	s15, [r3, #376]	; 0x178
		mcconf.m_dc_f_sw = buffer_get_float32_auto(data, &ind);
 800d71c:	f107 030c 	add.w	r3, r7, #12
 800d720:	4619      	mov	r1, r3
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f000 fd6c 	bl	800e200 <buffer_get_float32_auto>
 800d728:	eef0 7a40 	vmov.f32	s15, s0
 800d72c:	4b10      	ldr	r3, [pc, #64]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d72e:	edc3 7a5f 	vstr	s15, [r3, #380]	; 0x17c
		mcconf.m_ntc_motor_beta = buffer_get_float32_auto(data, &ind);
 800d732:	f107 030c 	add.w	r3, r7, #12
 800d736:	4619      	mov	r1, r3
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f000 fd61 	bl	800e200 <buffer_get_float32_auto>
 800d73e:	eef0 7a40 	vmov.f32	s15, s0
 800d742:	4b0b      	ldr	r3, [pc, #44]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d744:	edc3 7a60 	vstr	s15, [r3, #384]	; 0x180
		mcconf.m_out_aux_mode = data[ind++];
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	1c5a      	adds	r2, r3, #1
 800d74c:	60fa      	str	r2, [r7, #12]
 800d74e:	461a      	mov	r2, r3
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	4413      	add	r3, r2
 800d754:	781a      	ldrb	r2, [r3, #0]
 800d756:	4b06      	ldr	r3, [pc, #24]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d758:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184

		if (rx_mcconf_func) {
 800d75c:	4b05      	ldr	r3, [pc, #20]	; (800d774 <bldc_interface_process_packet+0x10a0>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	f000 83ff 	beq.w	800df64 <bldc_interface_process_packet+0x1890>
			rx_mcconf_func(&mcconf);
 800d766:	4b03      	ldr	r3, [pc, #12]	; (800d774 <bldc_interface_process_packet+0x10a0>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	4801      	ldr	r0, [pc, #4]	; (800d770 <bldc_interface_process_packet+0x109c>)
 800d76c:	4798      	blx	r3
		}
		break;
 800d76e:	e3f9      	b.n	800df64 <bldc_interface_process_packet+0x1890>
 800d770:	2000031c 	.word	0x2000031c
 800d774:	200005b0 	.word	0x200005b0

	case COMM_GET_APPCONF:
	case COMM_GET_APPCONF_DEFAULT:
		ind = 0;
 800d778:	2300      	movs	r3, #0
 800d77a:	60fb      	str	r3, [r7, #12]
		appconf.signature = buffer_get_uint32(data, &ind);
 800d77c:	f107 030c 	add.w	r3, r7, #12
 800d780:	4619      	mov	r1, r3
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f000 fcd7 	bl	800e136 <buffer_get_uint32>
 800d788:	4603      	mov	r3, r0
 800d78a:	4aba      	ldr	r2, [pc, #744]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d78c:	6013      	str	r3, [r2, #0]
		appconf.controller_id = data[ind++];
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	1c5a      	adds	r2, r3, #1
 800d792:	60fa      	str	r2, [r7, #12]
 800d794:	461a      	mov	r2, r3
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	4413      	add	r3, r2
 800d79a:	781a      	ldrb	r2, [r3, #0]
 800d79c:	4bb5      	ldr	r3, [pc, #724]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d79e:	711a      	strb	r2, [r3, #4]
		appconf.timeout_msec = buffer_get_uint32(data, &ind);
 800d7a0:	f107 030c 	add.w	r3, r7, #12
 800d7a4:	4619      	mov	r1, r3
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f000 fcc5 	bl	800e136 <buffer_get_uint32>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	4ab1      	ldr	r2, [pc, #708]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d7b0:	6093      	str	r3, [r2, #8]
		appconf.timeout_brake_current = buffer_get_float32_auto(data, &ind);
 800d7b2:	f107 030c 	add.w	r3, r7, #12
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f000 fd21 	bl	800e200 <buffer_get_float32_auto>
 800d7be:	eef0 7a40 	vmov.f32	s15, s0
 800d7c2:	4bac      	ldr	r3, [pc, #688]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d7c4:	edc3 7a03 	vstr	s15, [r3, #12]
		appconf.send_can_status = data[ind++];
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	1c5a      	adds	r2, r3, #1
 800d7cc:	60fa      	str	r2, [r7, #12]
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	4413      	add	r3, r2
 800d7d4:	781b      	ldrb	r3, [r3, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	bf14      	ite	ne
 800d7da:	2301      	movne	r3, #1
 800d7dc:	2300      	moveq	r3, #0
 800d7de:	b2da      	uxtb	r2, r3
 800d7e0:	4ba4      	ldr	r3, [pc, #656]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d7e2:	741a      	strb	r2, [r3, #16]
		appconf.send_can_status_rate_hz = buffer_get_uint16(data, &ind);
 800d7e4:	f107 030c 	add.w	r3, r7, #12
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f000 fc50 	bl	800e090 <buffer_get_uint16>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	4b9f      	ldr	r3, [pc, #636]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d7f6:	615a      	str	r2, [r3, #20]
		appconf.can_baud_rate = data[ind++];
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	1c5a      	adds	r2, r3, #1
 800d7fc:	60fa      	str	r2, [r7, #12]
 800d7fe:	461a      	mov	r2, r3
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	4413      	add	r3, r2
 800d804:	781a      	ldrb	r2, [r3, #0]
 800d806:	4b9b      	ldr	r3, [pc, #620]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d808:	761a      	strb	r2, [r3, #24]

		appconf.app_to_use = data[ind++];
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	1c5a      	adds	r2, r3, #1
 800d80e:	60fa      	str	r2, [r7, #12]
 800d810:	461a      	mov	r2, r3
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	4413      	add	r3, r2
 800d816:	781a      	ldrb	r2, [r3, #0]
 800d818:	4b96      	ldr	r3, [pc, #600]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d81a:	765a      	strb	r2, [r3, #25]

		appconf.app_ppm_conf.ctrl_type = data[ind++];
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	1c5a      	adds	r2, r3, #1
 800d820:	60fa      	str	r2, [r7, #12]
 800d822:	461a      	mov	r2, r3
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	4413      	add	r3, r2
 800d828:	781a      	ldrb	r2, [r3, #0]
 800d82a:	4b92      	ldr	r3, [pc, #584]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d82c:	771a      	strb	r2, [r3, #28]
		appconf.app_ppm_conf.pid_max_erpm = buffer_get_float32_auto(data, &ind);
 800d82e:	f107 030c 	add.w	r3, r7, #12
 800d832:	4619      	mov	r1, r3
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f000 fce3 	bl	800e200 <buffer_get_float32_auto>
 800d83a:	eef0 7a40 	vmov.f32	s15, s0
 800d83e:	4b8d      	ldr	r3, [pc, #564]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d840:	edc3 7a08 	vstr	s15, [r3, #32]
		appconf.app_ppm_conf.hyst = buffer_get_float32_auto(data, &ind);
 800d844:	f107 030c 	add.w	r3, r7, #12
 800d848:	4619      	mov	r1, r3
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f000 fcd8 	bl	800e200 <buffer_get_float32_auto>
 800d850:	eef0 7a40 	vmov.f32	s15, s0
 800d854:	4b87      	ldr	r3, [pc, #540]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d856:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		appconf.app_ppm_conf.pulse_start = buffer_get_float32_auto(data, &ind);
 800d85a:	f107 030c 	add.w	r3, r7, #12
 800d85e:	4619      	mov	r1, r3
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f000 fccd 	bl	800e200 <buffer_get_float32_auto>
 800d866:	eef0 7a40 	vmov.f32	s15, s0
 800d86a:	4b82      	ldr	r3, [pc, #520]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d86c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		appconf.app_ppm_conf.pulse_end = buffer_get_float32_auto(data, &ind);
 800d870:	f107 030c 	add.w	r3, r7, #12
 800d874:	4619      	mov	r1, r3
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f000 fcc2 	bl	800e200 <buffer_get_float32_auto>
 800d87c:	eef0 7a40 	vmov.f32	s15, s0
 800d880:	4b7c      	ldr	r3, [pc, #496]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d882:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		appconf.app_ppm_conf.pulse_center = buffer_get_float32_auto(data, &ind);
 800d886:	f107 030c 	add.w	r3, r7, #12
 800d88a:	4619      	mov	r1, r3
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f000 fcb7 	bl	800e200 <buffer_get_float32_auto>
 800d892:	eef0 7a40 	vmov.f32	s15, s0
 800d896:	4b77      	ldr	r3, [pc, #476]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d898:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		appconf.app_ppm_conf.median_filter = data[ind++];
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	1c5a      	adds	r2, r3, #1
 800d8a0:	60fa      	str	r2, [r7, #12]
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	4413      	add	r3, r2
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	bf14      	ite	ne
 800d8ae:	2301      	movne	r3, #1
 800d8b0:	2300      	moveq	r3, #0
 800d8b2:	b2da      	uxtb	r2, r3
 800d8b4:	4b6f      	ldr	r3, [pc, #444]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d8b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		appconf.app_ppm_conf.safe_start = data[ind++];
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	1c5a      	adds	r2, r3, #1
 800d8be:	60fa      	str	r2, [r7, #12]
 800d8c0:	461a      	mov	r2, r3
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	4413      	add	r3, r2
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	bf14      	ite	ne
 800d8cc:	2301      	movne	r3, #1
 800d8ce:	2300      	moveq	r3, #0
 800d8d0:	b2da      	uxtb	r2, r3
 800d8d2:	4b68      	ldr	r3, [pc, #416]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d8d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		appconf.app_ppm_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 800d8d8:	f107 030c 	add.w	r3, r7, #12
 800d8dc:	4619      	mov	r1, r3
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f000 fc8e 	bl	800e200 <buffer_get_float32_auto>
 800d8e4:	eef0 7a40 	vmov.f32	s15, s0
 800d8e8:	4b62      	ldr	r3, [pc, #392]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d8ea:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		appconf.app_ppm_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 800d8ee:	f107 030c 	add.w	r3, r7, #12
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f000 fc83 	bl	800e200 <buffer_get_float32_auto>
 800d8fa:	eef0 7a40 	vmov.f32	s15, s0
 800d8fe:	4b5d      	ldr	r3, [pc, #372]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d900:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		appconf.app_ppm_conf.throttle_exp_mode = data[ind++];
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	1c5a      	adds	r2, r3, #1
 800d908:	60fa      	str	r2, [r7, #12]
 800d90a:	461a      	mov	r2, r3
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	4413      	add	r3, r2
 800d910:	781a      	ldrb	r2, [r3, #0]
 800d912:	4b58      	ldr	r3, [pc, #352]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		appconf.app_ppm_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 800d918:	f107 030c 	add.w	r3, r7, #12
 800d91c:	4619      	mov	r1, r3
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f000 fc6e 	bl	800e200 <buffer_get_float32_auto>
 800d924:	eef0 7a40 	vmov.f32	s15, s0
 800d928:	4b52      	ldr	r3, [pc, #328]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d92a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		appconf.app_ppm_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 800d92e:	f107 030c 	add.w	r3, r7, #12
 800d932:	4619      	mov	r1, r3
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f000 fc63 	bl	800e200 <buffer_get_float32_auto>
 800d93a:	eef0 7a40 	vmov.f32	s15, s0
 800d93e:	4b4d      	ldr	r3, [pc, #308]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d940:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		appconf.app_ppm_conf.multi_esc = data[ind++];
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	1c5a      	adds	r2, r3, #1
 800d948:	60fa      	str	r2, [r7, #12]
 800d94a:	461a      	mov	r2, r3
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	4413      	add	r3, r2
 800d950:	781b      	ldrb	r3, [r3, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	bf14      	ite	ne
 800d956:	2301      	movne	r3, #1
 800d958:	2300      	moveq	r3, #0
 800d95a:	b2da      	uxtb	r2, r3
 800d95c:	4b45      	ldr	r3, [pc, #276]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d95e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		appconf.app_ppm_conf.tc = data[ind++];
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	1c5a      	adds	r2, r3, #1
 800d966:	60fa      	str	r2, [r7, #12]
 800d968:	461a      	mov	r2, r3
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	4413      	add	r3, r2
 800d96e:	781b      	ldrb	r3, [r3, #0]
 800d970:	2b00      	cmp	r3, #0
 800d972:	bf14      	ite	ne
 800d974:	2301      	movne	r3, #1
 800d976:	2300      	moveq	r3, #0
 800d978:	b2da      	uxtb	r2, r3
 800d97a:	4b3e      	ldr	r3, [pc, #248]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d97c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		appconf.app_ppm_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 800d980:	f107 030c 	add.w	r3, r7, #12
 800d984:	4619      	mov	r1, r3
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f000 fc3a 	bl	800e200 <buffer_get_float32_auto>
 800d98c:	eef0 7a40 	vmov.f32	s15, s0
 800d990:	4b38      	ldr	r3, [pc, #224]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d992:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		appconf.app_adc_conf.ctrl_type = data[ind++];
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	1c5a      	adds	r2, r3, #1
 800d99a:	60fa      	str	r2, [r7, #12]
 800d99c:	461a      	mov	r2, r3
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	4413      	add	r3, r2
 800d9a2:	781a      	ldrb	r2, [r3, #0]
 800d9a4:	4b33      	ldr	r3, [pc, #204]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d9a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		appconf.app_adc_conf.hyst = buffer_get_float32_auto(data, &ind);
 800d9aa:	f107 030c 	add.w	r3, r7, #12
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f000 fc25 	bl	800e200 <buffer_get_float32_auto>
 800d9b6:	eef0 7a40 	vmov.f32	s15, s0
 800d9ba:	4b2e      	ldr	r3, [pc, #184]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d9bc:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		appconf.app_adc_conf.voltage_start = buffer_get_float32_auto(data, &ind);
 800d9c0:	f107 030c 	add.w	r3, r7, #12
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 fc1a 	bl	800e200 <buffer_get_float32_auto>
 800d9cc:	eef0 7a40 	vmov.f32	s15, s0
 800d9d0:	4b28      	ldr	r3, [pc, #160]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d9d2:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		appconf.app_adc_conf.voltage_end = buffer_get_float32_auto(data, &ind);
 800d9d6:	f107 030c 	add.w	r3, r7, #12
 800d9da:	4619      	mov	r1, r3
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f000 fc0f 	bl	800e200 <buffer_get_float32_auto>
 800d9e2:	eef0 7a40 	vmov.f32	s15, s0
 800d9e6:	4b23      	ldr	r3, [pc, #140]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d9e8:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		appconf.app_adc_conf.voltage_center = buffer_get_float32_auto(data, &ind);
 800d9ec:	f107 030c 	add.w	r3, r7, #12
 800d9f0:	4619      	mov	r1, r3
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 fc04 	bl	800e200 <buffer_get_float32_auto>
 800d9f8:	eef0 7a40 	vmov.f32	s15, s0
 800d9fc:	4b1d      	ldr	r3, [pc, #116]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800d9fe:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
		appconf.app_adc_conf.voltage2_start = buffer_get_float32_auto(data, &ind);
 800da02:	f107 030c 	add.w	r3, r7, #12
 800da06:	4619      	mov	r1, r3
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f000 fbf9 	bl	800e200 <buffer_get_float32_auto>
 800da0e:	eef0 7a40 	vmov.f32	s15, s0
 800da12:	4b18      	ldr	r3, [pc, #96]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800da14:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		appconf.app_adc_conf.voltage2_end = buffer_get_float32_auto(data, &ind);
 800da18:	f107 030c 	add.w	r3, r7, #12
 800da1c:	4619      	mov	r1, r3
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f000 fbee 	bl	800e200 <buffer_get_float32_auto>
 800da24:	eef0 7a40 	vmov.f32	s15, s0
 800da28:	4b12      	ldr	r3, [pc, #72]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800da2a:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
		appconf.app_adc_conf.use_filter = data[ind++];
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	1c5a      	adds	r2, r3, #1
 800da32:	60fa      	str	r2, [r7, #12]
 800da34:	461a      	mov	r2, r3
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	4413      	add	r3, r2
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	bf14      	ite	ne
 800da40:	2301      	movne	r3, #1
 800da42:	2300      	moveq	r3, #0
 800da44:	b2da      	uxtb	r2, r3
 800da46:	4b0b      	ldr	r3, [pc, #44]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800da48:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		appconf.app_adc_conf.safe_start = data[ind++];
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	1c5a      	adds	r2, r3, #1
 800da50:	60fa      	str	r2, [r7, #12]
 800da52:	461a      	mov	r2, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	4413      	add	r3, r2
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	bf14      	ite	ne
 800da5e:	2301      	movne	r3, #1
 800da60:	2300      	moveq	r3, #0
 800da62:	b2da      	uxtb	r2, r3
 800da64:	4b03      	ldr	r3, [pc, #12]	; (800da74 <bldc_interface_process_packet+0x13a0>)
 800da66:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		appconf.app_adc_conf.cc_button_inverted = data[ind++];
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	1c5a      	adds	r2, r3, #1
 800da6e:	60fa      	str	r2, [r7, #12]
 800da70:	e002      	b.n	800da78 <bldc_interface_process_packet+0x13a4>
 800da72:	bf00      	nop
 800da74:	200004a4 	.word	0x200004a4
 800da78:	461a      	mov	r2, r3
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	4413      	add	r3, r2
 800da7e:	781b      	ldrb	r3, [r3, #0]
 800da80:	2b00      	cmp	r3, #0
 800da82:	bf14      	ite	ne
 800da84:	2301      	movne	r3, #1
 800da86:	2300      	moveq	r3, #0
 800da88:	b2da      	uxtb	r2, r3
 800da8a:	4bb7      	ldr	r3, [pc, #732]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800da8c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		appconf.app_adc_conf.rev_button_inverted = data[ind++];
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	1c5a      	adds	r2, r3, #1
 800da94:	60fa      	str	r2, [r7, #12]
 800da96:	461a      	mov	r2, r3
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	4413      	add	r3, r2
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	bf14      	ite	ne
 800daa2:	2301      	movne	r3, #1
 800daa4:	2300      	moveq	r3, #0
 800daa6:	b2da      	uxtb	r2, r3
 800daa8:	4baf      	ldr	r3, [pc, #700]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800daaa:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		appconf.app_adc_conf.voltage_inverted = data[ind++];
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	1c5a      	adds	r2, r3, #1
 800dab2:	60fa      	str	r2, [r7, #12]
 800dab4:	461a      	mov	r2, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	4413      	add	r3, r2
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	bf14      	ite	ne
 800dac0:	2301      	movne	r3, #1
 800dac2:	2300      	moveq	r3, #0
 800dac4:	b2da      	uxtb	r2, r3
 800dac6:	4ba8      	ldr	r3, [pc, #672]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800dac8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		appconf.app_adc_conf.voltage2_inverted = data[ind++];
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	1c5a      	adds	r2, r3, #1
 800dad0:	60fa      	str	r2, [r7, #12]
 800dad2:	461a      	mov	r2, r3
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	4413      	add	r3, r2
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	bf14      	ite	ne
 800dade:	2301      	movne	r3, #1
 800dae0:	2300      	moveq	r3, #0
 800dae2:	b2da      	uxtb	r2, r3
 800dae4:	4ba0      	ldr	r3, [pc, #640]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800dae6:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		appconf.app_adc_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 800daea:	f107 030c 	add.w	r3, r7, #12
 800daee:	4619      	mov	r1, r3
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f000 fb85 	bl	800e200 <buffer_get_float32_auto>
 800daf6:	eef0 7a40 	vmov.f32	s15, s0
 800dafa:	4b9b      	ldr	r3, [pc, #620]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800dafc:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		appconf.app_adc_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 800db00:	f107 030c 	add.w	r3, r7, #12
 800db04:	4619      	mov	r1, r3
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f000 fb7a 	bl	800e200 <buffer_get_float32_auto>
 800db0c:	eef0 7a40 	vmov.f32	s15, s0
 800db10:	4b95      	ldr	r3, [pc, #596]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800db12:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
		appconf.app_adc_conf.throttle_exp_mode = data[ind++];
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	1c5a      	adds	r2, r3, #1
 800db1a:	60fa      	str	r2, [r7, #12]
 800db1c:	461a      	mov	r2, r3
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	4413      	add	r3, r2
 800db22:	781a      	ldrb	r2, [r3, #0]
 800db24:	4b90      	ldr	r3, [pc, #576]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800db26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		appconf.app_adc_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 800db2a:	f107 030c 	add.w	r3, r7, #12
 800db2e:	4619      	mov	r1, r3
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f000 fb65 	bl	800e200 <buffer_get_float32_auto>
 800db36:	eef0 7a40 	vmov.f32	s15, s0
 800db3a:	4b8b      	ldr	r3, [pc, #556]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800db3c:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		appconf.app_adc_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 800db40:	f107 030c 	add.w	r3, r7, #12
 800db44:	4619      	mov	r1, r3
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f000 fb5a 	bl	800e200 <buffer_get_float32_auto>
 800db4c:	eef0 7a40 	vmov.f32	s15, s0
 800db50:	4b85      	ldr	r3, [pc, #532]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800db52:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		appconf.app_adc_conf.multi_esc = data[ind++];
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	1c5a      	adds	r2, r3, #1
 800db5a:	60fa      	str	r2, [r7, #12]
 800db5c:	461a      	mov	r2, r3
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	4413      	add	r3, r2
 800db62:	781b      	ldrb	r3, [r3, #0]
 800db64:	2b00      	cmp	r3, #0
 800db66:	bf14      	ite	ne
 800db68:	2301      	movne	r3, #1
 800db6a:	2300      	moveq	r3, #0
 800db6c:	b2da      	uxtb	r2, r3
 800db6e:	4b7e      	ldr	r3, [pc, #504]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800db70:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		appconf.app_adc_conf.tc = data[ind++];
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	1c5a      	adds	r2, r3, #1
 800db78:	60fa      	str	r2, [r7, #12]
 800db7a:	461a      	mov	r2, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	4413      	add	r3, r2
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	bf14      	ite	ne
 800db86:	2301      	movne	r3, #1
 800db88:	2300      	moveq	r3, #0
 800db8a:	b2da      	uxtb	r2, r3
 800db8c:	4b76      	ldr	r3, [pc, #472]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800db8e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		appconf.app_adc_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 800db92:	f107 030c 	add.w	r3, r7, #12
 800db96:	4619      	mov	r1, r3
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f000 fb31 	bl	800e200 <buffer_get_float32_auto>
 800db9e:	eef0 7a40 	vmov.f32	s15, s0
 800dba2:	4b71      	ldr	r3, [pc, #452]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800dba4:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
		appconf.app_adc_conf.update_rate_hz = buffer_get_uint16(data, &ind);
 800dba8:	f107 030c 	add.w	r3, r7, #12
 800dbac:	4619      	mov	r1, r3
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f000 fa6e 	bl	800e090 <buffer_get_uint16>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	4b6b      	ldr	r3, [pc, #428]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800dbba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		appconf.app_uart_baudrate = buffer_get_uint32(data, &ind);
 800dbbe:	f107 030c 	add.w	r3, r7, #12
 800dbc2:	4619      	mov	r1, r3
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f000 fab6 	bl	800e136 <buffer_get_uint32>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	4a66      	ldr	r2, [pc, #408]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800dbce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

		appconf.app_chuk_conf.ctrl_type = data[ind++];
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	1c5a      	adds	r2, r3, #1
 800dbd6:	60fa      	str	r2, [r7, #12]
 800dbd8:	461a      	mov	r2, r3
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	4413      	add	r3, r2
 800dbde:	781a      	ldrb	r2, [r3, #0]
 800dbe0:	4b61      	ldr	r3, [pc, #388]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800dbe2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		appconf.app_chuk_conf.hyst = buffer_get_float32_auto(data, &ind);
 800dbe6:	f107 030c 	add.w	r3, r7, #12
 800dbea:	4619      	mov	r1, r3
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f000 fb07 	bl	800e200 <buffer_get_float32_auto>
 800dbf2:	eef0 7a40 	vmov.f32	s15, s0
 800dbf6:	4b5c      	ldr	r3, [pc, #368]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800dbf8:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
		appconf.app_chuk_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 800dbfc:	f107 030c 	add.w	r3, r7, #12
 800dc00:	4619      	mov	r1, r3
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 fafc 	bl	800e200 <buffer_get_float32_auto>
 800dc08:	eef0 7a40 	vmov.f32	s15, s0
 800dc0c:	4b56      	ldr	r3, [pc, #344]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800dc0e:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		appconf.app_chuk_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 800dc12:	f107 030c 	add.w	r3, r7, #12
 800dc16:	4619      	mov	r1, r3
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f000 faf1 	bl	800e200 <buffer_get_float32_auto>
 800dc1e:	eef0 7a40 	vmov.f32	s15, s0
 800dc22:	4b51      	ldr	r3, [pc, #324]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800dc24:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		appconf.app_chuk_conf.stick_erpm_per_s_in_cc = buffer_get_float32_auto(data, &ind);
 800dc28:	f107 030c 	add.w	r3, r7, #12
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f000 fae6 	bl	800e200 <buffer_get_float32_auto>
 800dc34:	eef0 7a40 	vmov.f32	s15, s0
 800dc38:	4b4b      	ldr	r3, [pc, #300]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800dc3a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		appconf.app_chuk_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 800dc3e:	f107 030c 	add.w	r3, r7, #12
 800dc42:	4619      	mov	r1, r3
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f000 fadb 	bl	800e200 <buffer_get_float32_auto>
 800dc4a:	eef0 7a40 	vmov.f32	s15, s0
 800dc4e:	4b46      	ldr	r3, [pc, #280]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800dc50:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		appconf.app_chuk_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 800dc54:	f107 030c 	add.w	r3, r7, #12
 800dc58:	4619      	mov	r1, r3
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f000 fad0 	bl	800e200 <buffer_get_float32_auto>
 800dc60:	eef0 7a40 	vmov.f32	s15, s0
 800dc64:	4b40      	ldr	r3, [pc, #256]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800dc66:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
		appconf.app_chuk_conf.throttle_exp_mode = data[ind++];
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	1c5a      	adds	r2, r3, #1
 800dc6e:	60fa      	str	r2, [r7, #12]
 800dc70:	461a      	mov	r2, r3
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	4413      	add	r3, r2
 800dc76:	781a      	ldrb	r2, [r3, #0]
 800dc78:	4b3b      	ldr	r3, [pc, #236]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800dc7a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		appconf.app_chuk_conf.multi_esc = data[ind++];
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	1c5a      	adds	r2, r3, #1
 800dc82:	60fa      	str	r2, [r7, #12]
 800dc84:	461a      	mov	r2, r3
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	4413      	add	r3, r2
 800dc8a:	781b      	ldrb	r3, [r3, #0]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	bf14      	ite	ne
 800dc90:	2301      	movne	r3, #1
 800dc92:	2300      	moveq	r3, #0
 800dc94:	b2da      	uxtb	r2, r3
 800dc96:	4b34      	ldr	r3, [pc, #208]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800dc98:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
		appconf.app_chuk_conf.tc = data[ind++];
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	1c5a      	adds	r2, r3, #1
 800dca0:	60fa      	str	r2, [r7, #12]
 800dca2:	461a      	mov	r2, r3
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	4413      	add	r3, r2
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	bf14      	ite	ne
 800dcae:	2301      	movne	r3, #1
 800dcb0:	2300      	moveq	r3, #0
 800dcb2:	b2da      	uxtb	r2, r3
 800dcb4:	4b2c      	ldr	r3, [pc, #176]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800dcb6:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		appconf.app_chuk_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 800dcba:	f107 030c 	add.w	r3, r7, #12
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f000 fa9d 	bl	800e200 <buffer_get_float32_auto>
 800dcc6:	eef0 7a40 	vmov.f32	s15, s0
 800dcca:	4b27      	ldr	r3, [pc, #156]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800dccc:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc

		appconf.app_nrf_conf.speed = data[ind++];
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	1c5a      	adds	r2, r3, #1
 800dcd4:	60fa      	str	r2, [r7, #12]
 800dcd6:	461a      	mov	r2, r3
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	4413      	add	r3, r2
 800dcdc:	781a      	ldrb	r2, [r3, #0]
 800dcde:	4b22      	ldr	r3, [pc, #136]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800dce0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		appconf.app_nrf_conf.power = data[ind++];
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	1c5a      	adds	r2, r3, #1
 800dce8:	60fa      	str	r2, [r7, #12]
 800dcea:	461a      	mov	r2, r3
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	4413      	add	r3, r2
 800dcf0:	781a      	ldrb	r2, [r3, #0]
 800dcf2:	4b1d      	ldr	r3, [pc, #116]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800dcf4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
		appconf.app_nrf_conf.crc_type = data[ind++];
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	1c5a      	adds	r2, r3, #1
 800dcfc:	60fa      	str	r2, [r7, #12]
 800dcfe:	461a      	mov	r2, r3
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	4413      	add	r3, r2
 800dd04:	781a      	ldrb	r2, [r3, #0]
 800dd06:	4b18      	ldr	r3, [pc, #96]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800dd08:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
		appconf.app_nrf_conf.retry_delay = data[ind++];
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	1c5a      	adds	r2, r3, #1
 800dd10:	60fa      	str	r2, [r7, #12]
 800dd12:	461a      	mov	r2, r3
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	4413      	add	r3, r2
 800dd18:	781a      	ldrb	r2, [r3, #0]
 800dd1a:	4b13      	ldr	r3, [pc, #76]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800dd1c:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
		appconf.app_nrf_conf.retries = data[ind++];
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	1c5a      	adds	r2, r3, #1
 800dd24:	60fa      	str	r2, [r7, #12]
 800dd26:	461a      	mov	r2, r3
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	4413      	add	r3, r2
 800dd2c:	781a      	ldrb	r2, [r3, #0]
 800dd2e:	4b0e      	ldr	r3, [pc, #56]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800dd30:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		appconf.app_nrf_conf.channel = data[ind++];
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	1c5a      	adds	r2, r3, #1
 800dd38:	60fa      	str	r2, [r7, #12]
 800dd3a:	461a      	mov	r2, r3
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	4413      	add	r3, r2
 800dd40:	781a      	ldrb	r2, [r3, #0]
 800dd42:	4b09      	ldr	r3, [pc, #36]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800dd44:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
		memcpy(appconf.app_nrf_conf.address, data + ind, 3);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	441a      	add	r2, r3
 800dd50:	4b05      	ldr	r3, [pc, #20]	; (800dd68 <bldc_interface_process_packet+0x1694>)
 800dd52:	33c6      	adds	r3, #198	; 0xc6
 800dd54:	8811      	ldrh	r1, [r2, #0]
 800dd56:	7892      	ldrb	r2, [r2, #2]
 800dd58:	8019      	strh	r1, [r3, #0]
 800dd5a:	709a      	strb	r2, [r3, #2]
		ind += 3;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	3303      	adds	r3, #3
 800dd60:	60fb      	str	r3, [r7, #12]
		appconf.app_nrf_conf.send_crc_ack = data[ind++];
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	e002      	b.n	800dd6c <bldc_interface_process_packet+0x1698>
 800dd66:	bf00      	nop
 800dd68:	200004a4 	.word	0x200004a4
 800dd6c:	1c5a      	adds	r2, r3, #1
 800dd6e:	60fa      	str	r2, [r7, #12]
 800dd70:	461a      	mov	r2, r3
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	4413      	add	r3, r2
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	bf14      	ite	ne
 800dd7c:	2301      	movne	r3, #1
 800dd7e:	2300      	moveq	r3, #0
 800dd80:	b2da      	uxtb	r2, r3
 800dd82:	4b81      	ldr	r3, [pc, #516]	; (800df88 <bldc_interface_process_packet+0x18b4>)
 800dd84:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9

		if (rx_appconf_func) {
 800dd88:	4b80      	ldr	r3, [pc, #512]	; (800df8c <bldc_interface_process_packet+0x18b8>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	f000 80eb 	beq.w	800df68 <bldc_interface_process_packet+0x1894>
			rx_appconf_func(&appconf);
 800dd92:	4b7e      	ldr	r3, [pc, #504]	; (800df8c <bldc_interface_process_packet+0x18b8>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	487c      	ldr	r0, [pc, #496]	; (800df88 <bldc_interface_process_packet+0x18b4>)
 800dd98:	4798      	blx	r3
		}
		break;
 800dd9a:	e0e5      	b.n	800df68 <bldc_interface_process_packet+0x1894>

	case COMM_DETECT_MOTOR_PARAM:
		ind = 0;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	60fb      	str	r3, [r7, #12]
		detect_cycle_int_limit = buffer_get_float32(data, 1000.0, &ind);
 800dda0:	f107 030c 	add.w	r3, r7, #12
 800dda4:	4619      	mov	r1, r3
 800dda6:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 800df90 <bldc_interface_process_packet+0x18bc>
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f000 fa0e 	bl	800e1cc <buffer_get_float32>
 800ddb0:	eef0 7a40 	vmov.f32	s15, s0
 800ddb4:	4b77      	ldr	r3, [pc, #476]	; (800df94 <bldc_interface_process_packet+0x18c0>)
 800ddb6:	edc3 7a00 	vstr	s15, [r3]
		detect_coupling_k = buffer_get_float32(data, 1000.0, &ind);
 800ddba:	f107 030c 	add.w	r3, r7, #12
 800ddbe:	4619      	mov	r1, r3
 800ddc0:	ed9f 0a73 	vldr	s0, [pc, #460]	; 800df90 <bldc_interface_process_packet+0x18bc>
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f000 fa01 	bl	800e1cc <buffer_get_float32>
 800ddca:	eef0 7a40 	vmov.f32	s15, s0
 800ddce:	4b72      	ldr	r3, [pc, #456]	; (800df98 <bldc_interface_process_packet+0x18c4>)
 800ddd0:	edc3 7a00 	vstr	s15, [r3]
		for (i = 0;i < 8;i++) {
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	61bb      	str	r3, [r7, #24]
 800ddd8:	e00f      	b.n	800ddfa <bldc_interface_process_packet+0x1726>
			detect_hall_table[i] = (const signed char)(data[ind++]);
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	1c5a      	adds	r2, r3, #1
 800ddde:	60fa      	str	r2, [r7, #12]
 800dde0:	461a      	mov	r2, r3
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	4413      	add	r3, r2
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	b259      	sxtb	r1, r3
 800ddea:	4a6c      	ldr	r2, [pc, #432]	; (800df9c <bldc_interface_process_packet+0x18c8>)
 800ddec:	69bb      	ldr	r3, [r7, #24]
 800ddee:	4413      	add	r3, r2
 800ddf0:	460a      	mov	r2, r1
 800ddf2:	701a      	strb	r2, [r3, #0]
		for (i = 0;i < 8;i++) {
 800ddf4:	69bb      	ldr	r3, [r7, #24]
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	61bb      	str	r3, [r7, #24]
 800ddfa:	69bb      	ldr	r3, [r7, #24]
 800ddfc:	2b07      	cmp	r3, #7
 800ddfe:	ddec      	ble.n	800ddda <bldc_interface_process_packet+0x1706>
		}
		detect_hall_res = (const signed char)(data[ind++]);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	1c5a      	adds	r2, r3, #1
 800de04:	60fa      	str	r2, [r7, #12]
 800de06:	461a      	mov	r2, r3
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	4413      	add	r3, r2
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	b25a      	sxtb	r2, r3
 800de10:	4b63      	ldr	r3, [pc, #396]	; (800dfa0 <bldc_interface_process_packet+0x18cc>)
 800de12:	701a      	strb	r2, [r3, #0]

		if (rx_detect_func) {
 800de14:	4b63      	ldr	r3, [pc, #396]	; (800dfa4 <bldc_interface_process_packet+0x18d0>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	f000 80a7 	beq.w	800df6c <bldc_interface_process_packet+0x1898>
			rx_detect_func(detect_cycle_int_limit, detect_coupling_k,
 800de1e:	4b61      	ldr	r3, [pc, #388]	; (800dfa4 <bldc_interface_process_packet+0x18d0>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	4a5c      	ldr	r2, [pc, #368]	; (800df94 <bldc_interface_process_packet+0x18c0>)
 800de24:	edd2 7a00 	vldr	s15, [r2]
 800de28:	4a5b      	ldr	r2, [pc, #364]	; (800df98 <bldc_interface_process_packet+0x18c4>)
 800de2a:	ed92 7a00 	vldr	s14, [r2]
 800de2e:	4a5c      	ldr	r2, [pc, #368]	; (800dfa0 <bldc_interface_process_packet+0x18cc>)
 800de30:	f992 2000 	ldrsb.w	r2, [r2]
 800de34:	4611      	mov	r1, r2
 800de36:	4859      	ldr	r0, [pc, #356]	; (800df9c <bldc_interface_process_packet+0x18c8>)
 800de38:	eef0 0a47 	vmov.f32	s1, s14
 800de3c:	eeb0 0a67 	vmov.f32	s0, s15
 800de40:	4798      	blx	r3
					detect_hall_table, detect_hall_res);
		}
		break;
 800de42:	e093      	b.n	800df6c <bldc_interface_process_packet+0x1898>
	case COMM_DETECT_HALL_FOC: {
		// TODO!
	} break;

	case COMM_GET_DECODED_PPM:
		ind = 0;
 800de44:	2300      	movs	r3, #0
 800de46:	60fb      	str	r3, [r7, #12]
		dec_ppm = buffer_get_float32(data, 1000000.0, &ind);
 800de48:	f107 030c 	add.w	r3, r7, #12
 800de4c:	4619      	mov	r1, r3
 800de4e:	ed9f 0a56 	vldr	s0, [pc, #344]	; 800dfa8 <bldc_interface_process_packet+0x18d4>
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f000 f9ba 	bl	800e1cc <buffer_get_float32>
 800de58:	eef0 7a40 	vmov.f32	s15, s0
 800de5c:	4b53      	ldr	r3, [pc, #332]	; (800dfac <bldc_interface_process_packet+0x18d8>)
 800de5e:	edc3 7a00 	vstr	s15, [r3]
		dec_ppm_len = buffer_get_float32(data, 1000000.0, &ind);
 800de62:	f107 030c 	add.w	r3, r7, #12
 800de66:	4619      	mov	r1, r3
 800de68:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 800dfa8 <bldc_interface_process_packet+0x18d4>
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f000 f9ad 	bl	800e1cc <buffer_get_float32>
 800de72:	eef0 7a40 	vmov.f32	s15, s0
 800de76:	4b4e      	ldr	r3, [pc, #312]	; (800dfb0 <bldc_interface_process_packet+0x18dc>)
 800de78:	edc3 7a00 	vstr	s15, [r3]

		if (rx_dec_ppm_func) {
 800de7c:	4b4d      	ldr	r3, [pc, #308]	; (800dfb4 <bldc_interface_process_packet+0x18e0>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d075      	beq.n	800df70 <bldc_interface_process_packet+0x189c>
			rx_dec_ppm_func(dec_ppm, dec_ppm_len);
 800de84:	4b4b      	ldr	r3, [pc, #300]	; (800dfb4 <bldc_interface_process_packet+0x18e0>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	4a48      	ldr	r2, [pc, #288]	; (800dfac <bldc_interface_process_packet+0x18d8>)
 800de8a:	edd2 7a00 	vldr	s15, [r2]
 800de8e:	4a48      	ldr	r2, [pc, #288]	; (800dfb0 <bldc_interface_process_packet+0x18dc>)
 800de90:	ed92 7a00 	vldr	s14, [r2]
 800de94:	eef0 0a47 	vmov.f32	s1, s14
 800de98:	eeb0 0a67 	vmov.f32	s0, s15
 800de9c:	4798      	blx	r3
		}
		break;
 800de9e:	e067      	b.n	800df70 <bldc_interface_process_packet+0x189c>

	case COMM_GET_DECODED_ADC:
		ind = 0;
 800dea0:	2300      	movs	r3, #0
 800dea2:	60fb      	str	r3, [r7, #12]
		dec_adc = buffer_get_float32(data, 1000000.0, &ind);
 800dea4:	f107 030c 	add.w	r3, r7, #12
 800dea8:	4619      	mov	r1, r3
 800deaa:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 800dfa8 <bldc_interface_process_packet+0x18d4>
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f000 f98c 	bl	800e1cc <buffer_get_float32>
 800deb4:	eef0 7a40 	vmov.f32	s15, s0
 800deb8:	4b3f      	ldr	r3, [pc, #252]	; (800dfb8 <bldc_interface_process_packet+0x18e4>)
 800deba:	edc3 7a00 	vstr	s15, [r3]
		dec_adc_voltage = buffer_get_float32(data, 1000000.0, &ind);
 800debe:	f107 030c 	add.w	r3, r7, #12
 800dec2:	4619      	mov	r1, r3
 800dec4:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800dfa8 <bldc_interface_process_packet+0x18d4>
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f000 f97f 	bl	800e1cc <buffer_get_float32>
 800dece:	eef0 7a40 	vmov.f32	s15, s0
 800ded2:	4b3a      	ldr	r3, [pc, #232]	; (800dfbc <bldc_interface_process_packet+0x18e8>)
 800ded4:	edc3 7a00 	vstr	s15, [r3]
		// TODO for adc2

		if (rx_dec_adc_func) {
 800ded8:	4b39      	ldr	r3, [pc, #228]	; (800dfc0 <bldc_interface_process_packet+0x18ec>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d049      	beq.n	800df74 <bldc_interface_process_packet+0x18a0>
			rx_dec_adc_func(dec_adc, dec_adc_voltage);
 800dee0:	4b37      	ldr	r3, [pc, #220]	; (800dfc0 <bldc_interface_process_packet+0x18ec>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	4a34      	ldr	r2, [pc, #208]	; (800dfb8 <bldc_interface_process_packet+0x18e4>)
 800dee6:	edd2 7a00 	vldr	s15, [r2]
 800deea:	4a34      	ldr	r2, [pc, #208]	; (800dfbc <bldc_interface_process_packet+0x18e8>)
 800deec:	ed92 7a00 	vldr	s14, [r2]
 800def0:	eef0 0a47 	vmov.f32	s1, s14
 800def4:	eeb0 0a67 	vmov.f32	s0, s15
 800def8:	4798      	blx	r3
		}
		break;
 800defa:	e03b      	b.n	800df74 <bldc_interface_process_packet+0x18a0>

	case COMM_GET_DECODED_CHUK:
		ind = 0;
 800defc:	2300      	movs	r3, #0
 800defe:	60fb      	str	r3, [r7, #12]
		dec_chuk = buffer_get_float32(data, 1000000.0, &ind);
 800df00:	f107 030c 	add.w	r3, r7, #12
 800df04:	4619      	mov	r1, r3
 800df06:	ed9f 0a28 	vldr	s0, [pc, #160]	; 800dfa8 <bldc_interface_process_packet+0x18d4>
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f000 f95e 	bl	800e1cc <buffer_get_float32>
 800df10:	eef0 7a40 	vmov.f32	s15, s0
 800df14:	4b2b      	ldr	r3, [pc, #172]	; (800dfc4 <bldc_interface_process_packet+0x18f0>)
 800df16:	edc3 7a00 	vstr	s15, [r3]

		if (rx_dec_chuk_func) {
 800df1a:	4b2b      	ldr	r3, [pc, #172]	; (800dfc8 <bldc_interface_process_packet+0x18f4>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d02a      	beq.n	800df78 <bldc_interface_process_packet+0x18a4>
			rx_dec_chuk_func(dec_chuk);
 800df22:	4b29      	ldr	r3, [pc, #164]	; (800dfc8 <bldc_interface_process_packet+0x18f4>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	4a27      	ldr	r2, [pc, #156]	; (800dfc4 <bldc_interface_process_packet+0x18f0>)
 800df28:	edd2 7a00 	vldr	s15, [r2]
 800df2c:	eeb0 0a67 	vmov.f32	s0, s15
 800df30:	4798      	blx	r3
		}
		break;
 800df32:	e021      	b.n	800df78 <bldc_interface_process_packet+0x18a4>

	case COMM_SET_MCCONF:
		// This is a confirmation that the new mcconf is received.
		if (rx_mcconf_received_func) {
 800df34:	4b25      	ldr	r3, [pc, #148]	; (800dfcc <bldc_interface_process_packet+0x18f8>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d01f      	beq.n	800df7c <bldc_interface_process_packet+0x18a8>
			rx_mcconf_received_func();
 800df3c:	4b23      	ldr	r3, [pc, #140]	; (800dfcc <bldc_interface_process_packet+0x18f8>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	4798      	blx	r3
		}
		break;
 800df42:	e01b      	b.n	800df7c <bldc_interface_process_packet+0x18a8>

	case COMM_SET_APPCONF:
		// This is a confirmation that the new appconf is received.
		if (rx_appconf_received_func) {
 800df44:	4b22      	ldr	r3, [pc, #136]	; (800dfd0 <bldc_interface_process_packet+0x18fc>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d019      	beq.n	800df80 <bldc_interface_process_packet+0x18ac>
			rx_appconf_received_func();
 800df4c:	4b20      	ldr	r3, [pc, #128]	; (800dfd0 <bldc_interface_process_packet+0x18fc>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4798      	blx	r3
		}
		break;
 800df52:	e015      	b.n	800df80 <bldc_interface_process_packet+0x18ac>
		return;
 800df54:	bf00      	nop
 800df56:	e014      	b.n	800df82 <bldc_interface_process_packet+0x18ae>

	default:
		break;
 800df58:	bf00      	nop
 800df5a:	e012      	b.n	800df82 <bldc_interface_process_packet+0x18ae>
		break;
 800df5c:	bf00      	nop
 800df5e:	e010      	b.n	800df82 <bldc_interface_process_packet+0x18ae>
		break;
 800df60:	bf00      	nop
 800df62:	e00e      	b.n	800df82 <bldc_interface_process_packet+0x18ae>
		break;
 800df64:	bf00      	nop
 800df66:	e00c      	b.n	800df82 <bldc_interface_process_packet+0x18ae>
		break;
 800df68:	bf00      	nop
 800df6a:	e00a      	b.n	800df82 <bldc_interface_process_packet+0x18ae>
		break;
 800df6c:	bf00      	nop
 800df6e:	e008      	b.n	800df82 <bldc_interface_process_packet+0x18ae>
		break;
 800df70:	bf00      	nop
 800df72:	e006      	b.n	800df82 <bldc_interface_process_packet+0x18ae>
		break;
 800df74:	bf00      	nop
 800df76:	e004      	b.n	800df82 <bldc_interface_process_packet+0x18ae>
		break;
 800df78:	bf00      	nop
 800df7a:	e002      	b.n	800df82 <bldc_interface_process_packet+0x18ae>
		break;
 800df7c:	bf00      	nop
 800df7e:	e000      	b.n	800df82 <bldc_interface_process_packet+0x18ae>
		break;
 800df80:	bf00      	nop
	}
}
 800df82:	3720      	adds	r7, #32
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}
 800df88:	200004a4 	.word	0x200004a4
 800df8c:	200005b4 	.word	0x200005b4
 800df90:	447a0000 	.word	0x447a0000
 800df94:	20000570 	.word	0x20000570
 800df98:	20000574 	.word	0x20000574
 800df9c:	20000578 	.word	0x20000578
 800dfa0:	20000580 	.word	0x20000580
 800dfa4:	200005b8 	.word	0x200005b8
 800dfa8:	49742400 	.word	0x49742400
 800dfac:	20000584 	.word	0x20000584
 800dfb0:	20000588 	.word	0x20000588
 800dfb4:	200005bc 	.word	0x200005bc
 800dfb8:	2000058c 	.word	0x2000058c
 800dfbc:	20000590 	.word	0x20000590
 800dfc0:	200005c0 	.word	0x200005c0
 800dfc4:	20000594 	.word	0x20000594
 800dfc8:	200005c4 	.word	0x200005c4
 800dfcc:	200005c8 	.word	0x200005c8
 800dfd0:	200005cc 	.word	0x200005cc

0800dfd4 <buffer_append_int32>:
void buffer_append_uint16(uint8_t* buffer, uint16_t number, int32_t *index) {
	buffer[(*index)++] = number >> 8;
	buffer[(*index)++] = number;
}

void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t *index) {
 800dfd4:	b480      	push	{r7}
 800dfd6:	b085      	sub	sp, #20
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	60f8      	str	r0, [r7, #12]
 800dfdc:	60b9      	str	r1, [r7, #8]
 800dfde:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	1618      	asrs	r0, r3, #24
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	1c59      	adds	r1, r3, #1
 800dfea:	687a      	ldr	r2, [r7, #4]
 800dfec:	6011      	str	r1, [r2, #0]
 800dfee:	461a      	mov	r2, r3
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	4413      	add	r3, r2
 800dff4:	b2c2      	uxtb	r2, r0
 800dff6:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	1418      	asrs	r0, r3, #16
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	1c59      	adds	r1, r3, #1
 800e002:	687a      	ldr	r2, [r7, #4]
 800e004:	6011      	str	r1, [r2, #0]
 800e006:	461a      	mov	r2, r3
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	4413      	add	r3, r2
 800e00c:	b2c2      	uxtb	r2, r0
 800e00e:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	1218      	asrs	r0, r3, #8
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	1c59      	adds	r1, r3, #1
 800e01a:	687a      	ldr	r2, [r7, #4]
 800e01c:	6011      	str	r1, [r2, #0]
 800e01e:	461a      	mov	r2, r3
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	4413      	add	r3, r2
 800e024:	b2c2      	uxtb	r2, r0
 800e026:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	1c59      	adds	r1, r3, #1
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	6011      	str	r1, [r2, #0]
 800e032:	461a      	mov	r2, r3
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	4413      	add	r3, r2
 800e038:	68ba      	ldr	r2, [r7, #8]
 800e03a:	b2d2      	uxtb	r2, r2
 800e03c:	701a      	strb	r2, [r3, #0]
}
 800e03e:	bf00      	nop
 800e040:	3714      	adds	r7, #20
 800e042:	46bd      	mov	sp, r7
 800e044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e048:	4770      	bx	lr

0800e04a <buffer_get_int16>:
	}

	buffer_append_uint32(buffer, res, index);
}

int16_t buffer_get_int16(const uint8_t *buffer, int32_t *index) {
 800e04a:	b480      	push	{r7}
 800e04c:	b085      	sub	sp, #20
 800e04e:	af00      	add	r7, sp, #0
 800e050:	6078      	str	r0, [r7, #4]
 800e052:	6039      	str	r1, [r7, #0]
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	461a      	mov	r2, r3
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	4413      	add	r3, r2
 800e05e:	781b      	ldrb	r3, [r3, #0]
 800e060:	021b      	lsls	r3, r3, #8
 800e062:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	3301      	adds	r3, #1
 800e06a:	6879      	ldr	r1, [r7, #4]
 800e06c:	440b      	add	r3, r1
 800e06e:	781b      	ldrb	r3, [r3, #0]
 800e070:	b21b      	sxth	r3, r3
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800e072:	4313      	orrs	r3, r2
 800e074:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	1c9a      	adds	r2, r3, #2
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	601a      	str	r2, [r3, #0]
	return res;
 800e080:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800e084:	4618      	mov	r0, r3
 800e086:	3714      	adds	r7, #20
 800e088:	46bd      	mov	sp, r7
 800e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08e:	4770      	bx	lr

0800e090 <buffer_get_uint16>:

uint16_t buffer_get_uint16(const uint8_t *buffer, int32_t *index) {
 800e090:	b480      	push	{r7}
 800e092:	b085      	sub	sp, #20
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	6039      	str	r1, [r7, #0]
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	461a      	mov	r2, r3
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	4413      	add	r3, r2
 800e0a4:	781b      	ldrb	r3, [r3, #0]
 800e0a6:	021b      	lsls	r3, r3, #8
 800e0a8:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	3301      	adds	r3, #1
 800e0b0:	6879      	ldr	r1, [r7, #4]
 800e0b2:	440b      	add	r3, r1
 800e0b4:	781b      	ldrb	r3, [r3, #0]
 800e0b6:	b21b      	sxth	r3, r3
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 800e0b8:	4313      	orrs	r3, r2
 800e0ba:	b21b      	sxth	r3, r3
 800e0bc:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	1c9a      	adds	r2, r3, #2
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	601a      	str	r2, [r3, #0]
	return res;
 800e0c8:	89fb      	ldrh	r3, [r7, #14]
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3714      	adds	r7, #20
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d4:	4770      	bx	lr

0800e0d6 <buffer_get_int32>:

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 800e0d6:	b480      	push	{r7}
 800e0d8:	b085      	sub	sp, #20
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6078      	str	r0, [r7, #4]
 800e0de:	6039      	str	r1, [r7, #0]
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	461a      	mov	r2, r3
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	4413      	add	r3, r2
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	3301      	adds	r3, #1
 800e0f4:	6879      	ldr	r1, [r7, #4]
 800e0f6:	440b      	add	r3, r1
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	041b      	lsls	r3, r3, #16
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800e0fc:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	3302      	adds	r3, #2
 800e104:	6879      	ldr	r1, [r7, #4]
 800e106:	440b      	add	r3, r1
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 800e10c:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 800e10e:	683a      	ldr	r2, [r7, #0]
 800e110:	6812      	ldr	r2, [r2, #0]
 800e112:	3203      	adds	r2, #3
 800e114:	6879      	ldr	r1, [r7, #4]
 800e116:	440a      	add	r2, r1
 800e118:	7812      	ldrb	r2, [r2, #0]
					((uint32_t) buffer[*index + 2]) << 8 |
 800e11a:	4313      	orrs	r3, r2
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800e11c:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	1d1a      	adds	r2, r3, #4
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	601a      	str	r2, [r3, #0]
	return res;
 800e128:	68fb      	ldr	r3, [r7, #12]
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3714      	adds	r7, #20
 800e12e:	46bd      	mov	sp, r7
 800e130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e134:	4770      	bx	lr

0800e136 <buffer_get_uint32>:

uint32_t buffer_get_uint32(const uint8_t *buffer, int32_t *index) {
 800e136:	b480      	push	{r7}
 800e138:	b085      	sub	sp, #20
 800e13a:	af00      	add	r7, sp, #0
 800e13c:	6078      	str	r0, [r7, #4]
 800e13e:	6039      	str	r1, [r7, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	461a      	mov	r2, r3
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	4413      	add	r3, r2
 800e14a:	781b      	ldrb	r3, [r3, #0]
 800e14c:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	3301      	adds	r3, #1
 800e154:	6879      	ldr	r1, [r7, #4]
 800e156:	440b      	add	r3, r1
 800e158:	781b      	ldrb	r3, [r3, #0]
 800e15a:	041b      	lsls	r3, r3, #16
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 800e15c:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	3302      	adds	r3, #2
 800e164:	6879      	ldr	r1, [r7, #4]
 800e166:	440b      	add	r3, r1
 800e168:	781b      	ldrb	r3, [r3, #0]
 800e16a:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 800e16c:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 800e16e:	683a      	ldr	r2, [r7, #0]
 800e170:	6812      	ldr	r2, [r2, #0]
 800e172:	3203      	adds	r2, #3
 800e174:	6879      	ldr	r1, [r7, #4]
 800e176:	440a      	add	r2, r1
 800e178:	7812      	ldrb	r2, [r2, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 800e17a:	4313      	orrs	r3, r2
 800e17c:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	1d1a      	adds	r2, r3, #4
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	601a      	str	r2, [r3, #0]
	return res;
 800e188:	68fb      	ldr	r3, [r7, #12]
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3714      	adds	r7, #20
 800e18e:	46bd      	mov	sp, r7
 800e190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e194:	4770      	bx	lr

0800e196 <buffer_get_float16>:
					((uint64_t) buffer[*index + 7]);
	*index += 8;
	return res;
}

float buffer_get_float16(const uint8_t *buffer, float scale, int32_t *index) {
 800e196:	b580      	push	{r7, lr}
 800e198:	b084      	sub	sp, #16
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	60f8      	str	r0, [r7, #12]
 800e19e:	ed87 0a02 	vstr	s0, [r7, #8]
 800e1a2:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int16(buffer, index) / scale;
 800e1a4:	6879      	ldr	r1, [r7, #4]
 800e1a6:	68f8      	ldr	r0, [r7, #12]
 800e1a8:	f7ff ff4f 	bl	800e04a <buffer_get_int16>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	ee07 3a90 	vmov	s15, r3
 800e1b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e1b6:	edd7 7a02 	vldr	s15, [r7, #8]
 800e1ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e1be:	eef0 7a66 	vmov.f32	s15, s13
}
 800e1c2:	eeb0 0a67 	vmov.f32	s0, s15
 800e1c6:	3710      	adds	r7, #16
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}

0800e1cc <buffer_get_float32>:

float buffer_get_float32(const uint8_t *buffer, float scale, int32_t *index) {
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b084      	sub	sp, #16
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	60f8      	str	r0, [r7, #12]
 800e1d4:	ed87 0a02 	vstr	s0, [r7, #8]
 800e1d8:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int32(buffer, index) / scale;
 800e1da:	6879      	ldr	r1, [r7, #4]
 800e1dc:	68f8      	ldr	r0, [r7, #12]
 800e1de:	f7ff ff7a 	bl	800e0d6 <buffer_get_int32>
 800e1e2:	ee07 0a90 	vmov	s15, r0
 800e1e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e1ea:	edd7 7a02 	vldr	s15, [r7, #8]
 800e1ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e1f2:	eef0 7a66 	vmov.f32	s15, s13
}
 800e1f6:	eeb0 0a67 	vmov.f32	s0, s15
 800e1fa:	3710      	adds	r7, #16
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}

0800e200 <buffer_get_float32_auto>:

double buffer_get_double64(const uint8_t *buffer, double scale, int32_t *index) {
    return (double)buffer_get_int64(buffer, index) / scale;
}

float buffer_get_float32_auto(const uint8_t *buffer, int32_t *index) {
 800e200:	b580      	push	{r7, lr}
 800e202:	b088      	sub	sp, #32
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	6039      	str	r1, [r7, #0]
	uint32_t res = buffer_get_uint32(buffer, index);
 800e20a:	6839      	ldr	r1, [r7, #0]
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f7ff ff92 	bl	800e136 <buffer_get_uint32>
 800e212:	6178      	str	r0, [r7, #20]

	int e = (res >> 23) & 0xFF;
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	0ddb      	lsrs	r3, r3, #23
 800e218:	b2db      	uxtb	r3, r3
 800e21a:	61fb      	str	r3, [r7, #28]
	uint32_t sig_i = res & 0x7FFFFF;
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e222:	613b      	str	r3, [r7, #16]
	bool neg = res & (1 << 31);
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	bf14      	ite	ne
 800e22e:	2301      	movne	r3, #1
 800e230:	2300      	moveq	r3, #0
 800e232:	73fb      	strb	r3, [r7, #15]

	float sig = 0.0;
 800e234:	f04f 0300 	mov.w	r3, #0
 800e238:	61bb      	str	r3, [r7, #24]
	if (e != 0 || sig_i != 0) {
 800e23a:	69fb      	ldr	r3, [r7, #28]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d102      	bne.n	800e246 <buffer_get_float32_auto+0x46>
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d021      	beq.n	800e28a <buffer_get_float32_auto+0x8a>
		sig = (float)sig_i / (8388608.0 * 2.0) + 0.5;
 800e246:	693b      	ldr	r3, [r7, #16]
 800e248:	ee07 3a90 	vmov	s15, r3
 800e24c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e250:	ee17 0a90 	vmov	r0, s15
 800e254:	f7f2 f978 	bl	8000548 <__aeabi_f2d>
 800e258:	f04f 0200 	mov.w	r2, #0
 800e25c:	4b15      	ldr	r3, [pc, #84]	; (800e2b4 <buffer_get_float32_auto+0xb4>)
 800e25e:	f7f2 faf5 	bl	800084c <__aeabi_ddiv>
 800e262:	4602      	mov	r2, r0
 800e264:	460b      	mov	r3, r1
 800e266:	4610      	mov	r0, r2
 800e268:	4619      	mov	r1, r3
 800e26a:	f04f 0200 	mov.w	r2, #0
 800e26e:	4b12      	ldr	r3, [pc, #72]	; (800e2b8 <buffer_get_float32_auto+0xb8>)
 800e270:	f7f2 f80c 	bl	800028c <__adddf3>
 800e274:	4602      	mov	r2, r0
 800e276:	460b      	mov	r3, r1
 800e278:	4610      	mov	r0, r2
 800e27a:	4619      	mov	r1, r3
 800e27c:	f7f2 fcb4 	bl	8000be8 <__aeabi_d2f>
 800e280:	4603      	mov	r3, r0
 800e282:	61bb      	str	r3, [r7, #24]
		e -= 126;
 800e284:	69fb      	ldr	r3, [r7, #28]
 800e286:	3b7e      	subs	r3, #126	; 0x7e
 800e288:	61fb      	str	r3, [r7, #28]
	}

	if (neg) {
 800e28a:	7bfb      	ldrb	r3, [r7, #15]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d005      	beq.n	800e29c <buffer_get_float32_auto+0x9c>
		sig = -sig;
 800e290:	edd7 7a06 	vldr	s15, [r7, #24]
 800e294:	eef1 7a67 	vneg.f32	s15, s15
 800e298:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	return ldexpf(sig, e);
 800e29c:	69f8      	ldr	r0, [r7, #28]
 800e29e:	ed97 0a06 	vldr	s0, [r7, #24]
 800e2a2:	f00d f987 	bl	801b5b4 <ldexpf>
 800e2a6:	eef0 7a40 	vmov.f32	s15, s0
}
 800e2aa:	eeb0 0a67 	vmov.f32	s0, s15
 800e2ae:	3720      	adds	r7, #32
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	41700000 	.word	0x41700000
 800e2b8:	3fe00000 	.word	0x3fe00000

0800e2bc <crc16>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
 800e2bc:	b480      	push	{r7}
 800e2be:	b085      	sub	sp, #20
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
 800e2c4:	6039      	str	r1, [r7, #0]
	unsigned int i;
	unsigned short cksum = 0;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	60fb      	str	r3, [r7, #12]
 800e2ce:	e016      	b.n	800e2fe <crc16+0x42>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 800e2d0:	897b      	ldrh	r3, [r7, #10]
 800e2d2:	0a1b      	lsrs	r3, r3, #8
 800e2d4:	b29b      	uxth	r3, r3
 800e2d6:	4619      	mov	r1, r3
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	1c5a      	adds	r2, r3, #1
 800e2dc:	607a      	str	r2, [r7, #4]
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	404b      	eors	r3, r1
 800e2e2:	b2db      	uxtb	r3, r3
 800e2e4:	4a0b      	ldr	r2, [pc, #44]	; (800e314 <crc16+0x58>)
 800e2e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2ea:	b21a      	sxth	r2, r3
 800e2ec:	897b      	ldrh	r3, [r7, #10]
 800e2ee:	021b      	lsls	r3, r3, #8
 800e2f0:	b21b      	sxth	r3, r3
 800e2f2:	4053      	eors	r3, r2
 800e2f4:	b21b      	sxth	r3, r3
 800e2f6:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	3301      	adds	r3, #1
 800e2fc:	60fb      	str	r3, [r7, #12]
 800e2fe:	68fa      	ldr	r2, [r7, #12]
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	429a      	cmp	r2, r3
 800e304:	d3e4      	bcc.n	800e2d0 <crc16+0x14>
	}
	return cksum;
 800e306:	897b      	ldrh	r3, [r7, #10]
}
 800e308:	4618      	mov	r0, r3
 800e30a:	3714      	adds	r7, #20
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr
 800e314:	08020a04 	.word	0x08020a04

0800e318 <comm_can_send_buffer>:
 * 0: Packet goes to commands_process_packet of receiver
 * 1: Packet goes to commands_send_packet of receiver --> can use to send to other board?
 * 2: Packet goes to commands_process and send function is set to null
 *    so that no reply is sent back.
 */
void comm_can_send_buffer(uint8_t controller_id, uint8_t *data, unsigned int len, uint8_t send) {
 800e318:	b580      	push	{r7, lr}
 800e31a:	b08e      	sub	sp, #56	; 0x38
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	60b9      	str	r1, [r7, #8]
 800e320:	607a      	str	r2, [r7, #4]
 800e322:	461a      	mov	r2, r3
 800e324:	4603      	mov	r3, r0
 800e326:	73fb      	strb	r3, [r7, #15]
 800e328:	4613      	mov	r3, r2
 800e32a:	73bb      	strb	r3, [r7, #14]
	uint8_t send_buffer[8];

	if (len <= 6) {
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2b06      	cmp	r3, #6
 800e330:	d82b      	bhi.n	800e38a <comm_can_send_buffer+0x72>
		uint32_t ind = 0;
 800e332:	2300      	movs	r3, #0
 800e334:	61bb      	str	r3, [r7, #24]
		send_buffer[ind++] = (uint8_t)RNS_TO_VESC;
 800e336:	69bb      	ldr	r3, [r7, #24]
 800e338:	1c5a      	adds	r2, r3, #1
 800e33a:	61ba      	str	r2, [r7, #24]
 800e33c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e340:	4413      	add	r3, r2
 800e342:	221e      	movs	r2, #30
 800e344:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = send;
 800e348:	69bb      	ldr	r3, [r7, #24]
 800e34a:	1c5a      	adds	r2, r3, #1
 800e34c:	61ba      	str	r2, [r7, #24]
 800e34e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e352:	4413      	add	r3, r2
 800e354:	7bba      	ldrb	r2, [r7, #14]
 800e356:	f803 2c28 	strb.w	r2, [r3, #-40]
		memcpy(send_buffer + ind, data, len);
 800e35a:	f107 0210 	add.w	r2, r7, #16
 800e35e:	69bb      	ldr	r3, [r7, #24]
 800e360:	4413      	add	r3, r2
 800e362:	687a      	ldr	r2, [r7, #4]
 800e364:	68b9      	ldr	r1, [r7, #8]
 800e366:	4618      	mov	r0, r3
 800e368:	f00c f9d2 	bl	801a710 <memcpy>
		ind += len;
 800e36c:	69ba      	ldr	r2, [r7, #24]
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	4413      	add	r3, r2
 800e372:	61bb      	str	r3, [r7, #24]
#if defined USED_CAN1
			CAN_TxMsgEID(&hcan1, controller_id |
					((uint32_t)CAN_PACKET_PROCESS_SHORT_BUFFER << 8), send_buffer, ind);
#elif defined USED_CAN2
			CAN_TxMsgEID(&hcan2, controller_id |
 800e374:	7bfb      	ldrb	r3, [r7, #15]
 800e376:	f443 6100 	orr.w	r1, r3, #2048	; 0x800
 800e37a:	69bb      	ldr	r3, [r7, #24]
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	f107 0210 	add.w	r2, r7, #16
 800e382:	4872      	ldr	r0, [pc, #456]	; (800e54c <comm_can_send_buffer+0x234>)
 800e384:	f7f5 fa50 	bl	8003828 <CAN_TxMsgEID>
#elif defined USED_CAN2
			CAN_TxMsgEID(&hcan2, controller_id |
								((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
#endif
	}
}
 800e388:	e0dc      	b.n	800e544 <comm_can_send_buffer+0x22c>
		unsigned int end_a = 0;
 800e38a:	2300      	movs	r3, #0
 800e38c:	637b      	str	r3, [r7, #52]	; 0x34
		for (unsigned int i = 0;i < len;i += 7) {
 800e38e:	2300      	movs	r3, #0
 800e390:	633b      	str	r3, [r7, #48]	; 0x30
 800e392:	e03d      	b.n	800e410 <comm_can_send_buffer+0xf8>
			if (i > 255) {
 800e394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e396:	2bff      	cmp	r3, #255	; 0xff
 800e398:	d83f      	bhi.n	800e41a <comm_can_send_buffer+0x102>
			end_a = i + 7;
 800e39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e39c:	3307      	adds	r3, #7
 800e39e:	637b      	str	r3, [r7, #52]	; 0x34
			uint8_t send_len = 7;
 800e3a0:	2307      	movs	r3, #7
 800e3a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			send_buffer[0] = i;
 800e3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a8:	b2db      	uxtb	r3, r3
 800e3aa:	743b      	strb	r3, [r7, #16]
			if ((i + 7) <= len) {
 800e3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ae:	3307      	adds	r3, #7
 800e3b0:	687a      	ldr	r2, [r7, #4]
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	d30b      	bcc.n	800e3ce <comm_can_send_buffer+0xb6>
				memcpy(send_buffer + 1, data + i, send_len);
 800e3b6:	f107 0310 	add.w	r3, r7, #16
 800e3ba:	3301      	adds	r3, #1
 800e3bc:	68b9      	ldr	r1, [r7, #8]
 800e3be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3c0:	4411      	add	r1, r2
 800e3c2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f00c f9a2 	bl	801a710 <memcpy>
 800e3cc:	e011      	b.n	800e3f2 <comm_can_send_buffer+0xda>
				send_len = len - i;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	b2da      	uxtb	r2, r3
 800e3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3d4:	b2db      	uxtb	r3, r3
 800e3d6:	1ad3      	subs	r3, r2, r3
 800e3d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				memcpy(send_buffer + 1, data + i, send_len);
 800e3dc:	f107 0310 	add.w	r3, r7, #16
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	68b9      	ldr	r1, [r7, #8]
 800e3e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3e6:	4411      	add	r1, r2
 800e3e8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f00c f98f 	bl	801a710 <memcpy>
			CAN_TxMsgEID(&hcan2, controller_id |
 800e3f2:	7bfb      	ldrb	r3, [r7, #15]
 800e3f4:	f443 61a0 	orr.w	r1, r3, #1280	; 0x500
 800e3f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3fc:	3301      	adds	r3, #1
 800e3fe:	b2db      	uxtb	r3, r3
 800e400:	f107 0210 	add.w	r2, r7, #16
 800e404:	4851      	ldr	r0, [pc, #324]	; (800e54c <comm_can_send_buffer+0x234>)
 800e406:	f7f5 fa0f 	bl	8003828 <CAN_TxMsgEID>
		for (unsigned int i = 0;i < len;i += 7) {
 800e40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e40c:	3307      	adds	r3, #7
 800e40e:	633b      	str	r3, [r7, #48]	; 0x30
 800e410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	429a      	cmp	r2, r3
 800e416:	d3bd      	bcc.n	800e394 <comm_can_send_buffer+0x7c>
 800e418:	e000      	b.n	800e41c <comm_can_send_buffer+0x104>
				break;
 800e41a:	bf00      	nop
		for (unsigned int i = end_a;i < len;i += 6) {
 800e41c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e41e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e420:	e03b      	b.n	800e49a <comm_can_send_buffer+0x182>
			uint8_t send_len = 6;
 800e422:	2306      	movs	r3, #6
 800e424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			send_buffer[0] = i >> 8;
 800e428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42a:	0a1b      	lsrs	r3, r3, #8
 800e42c:	b2db      	uxtb	r3, r3
 800e42e:	743b      	strb	r3, [r7, #16]
			send_buffer[1] = i & 0xFF;
 800e430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e432:	b2db      	uxtb	r3, r3
 800e434:	747b      	strb	r3, [r7, #17]
			if ((i + 6) <= len) {
 800e436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e438:	3306      	adds	r3, #6
 800e43a:	687a      	ldr	r2, [r7, #4]
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d30b      	bcc.n	800e458 <comm_can_send_buffer+0x140>
				memcpy(send_buffer + 2, data + i, send_len);
 800e440:	f107 0310 	add.w	r3, r7, #16
 800e444:	3302      	adds	r3, #2
 800e446:	68b9      	ldr	r1, [r7, #8]
 800e448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e44a:	4411      	add	r1, r2
 800e44c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e450:	4618      	mov	r0, r3
 800e452:	f00c f95d 	bl	801a710 <memcpy>
 800e456:	e011      	b.n	800e47c <comm_can_send_buffer+0x164>
				send_len = len - i;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	b2da      	uxtb	r2, r3
 800e45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e45e:	b2db      	uxtb	r3, r3
 800e460:	1ad3      	subs	r3, r2, r3
 800e462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				memcpy(send_buffer + 2, data + i, send_len);
 800e466:	f107 0310 	add.w	r3, r7, #16
 800e46a:	3302      	adds	r3, #2
 800e46c:	68b9      	ldr	r1, [r7, #8]
 800e46e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e470:	4411      	add	r1, r2
 800e472:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e476:	4618      	mov	r0, r3
 800e478:	f00c f94a 	bl	801a710 <memcpy>
			CAN_TxMsgEID(&hcan2, controller_id |
 800e47c:	7bfb      	ldrb	r3, [r7, #15]
 800e47e:	f443 61c0 	orr.w	r1, r3, #1536	; 0x600
 800e482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e486:	3302      	adds	r3, #2
 800e488:	b2db      	uxtb	r3, r3
 800e48a:	f107 0210 	add.w	r2, r7, #16
 800e48e:	482f      	ldr	r0, [pc, #188]	; (800e54c <comm_can_send_buffer+0x234>)
 800e490:	f7f5 f9ca 	bl	8003828 <CAN_TxMsgEID>
		for (unsigned int i = end_a;i < len;i += 6) {
 800e494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e496:	3306      	adds	r3, #6
 800e498:	62bb      	str	r3, [r7, #40]	; 0x28
 800e49a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d3bf      	bcc.n	800e422 <comm_can_send_buffer+0x10a>
		uint32_t ind = 0;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	623b      	str	r3, [r7, #32]
		send_buffer[ind++] = (uint8_t)RNS_TO_VESC;
 800e4a6:	6a3b      	ldr	r3, [r7, #32]
 800e4a8:	1c5a      	adds	r2, r3, #1
 800e4aa:	623a      	str	r2, [r7, #32]
 800e4ac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e4b0:	4413      	add	r3, r2
 800e4b2:	221e      	movs	r2, #30
 800e4b4:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = send;
 800e4b8:	6a3b      	ldr	r3, [r7, #32]
 800e4ba:	1c5a      	adds	r2, r3, #1
 800e4bc:	623a      	str	r2, [r7, #32]
 800e4be:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e4c2:	4413      	add	r3, r2
 800e4c4:	7bba      	ldrb	r2, [r7, #14]
 800e4c6:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = len >> 8;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	0a19      	lsrs	r1, r3, #8
 800e4ce:	6a3b      	ldr	r3, [r7, #32]
 800e4d0:	1c5a      	adds	r2, r3, #1
 800e4d2:	623a      	str	r2, [r7, #32]
 800e4d4:	b2ca      	uxtb	r2, r1
 800e4d6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e4da:	440b      	add	r3, r1
 800e4dc:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = len & 0xFF;
 800e4e0:	6a3b      	ldr	r3, [r7, #32]
 800e4e2:	1c5a      	adds	r2, r3, #1
 800e4e4:	623a      	str	r2, [r7, #32]
 800e4e6:	687a      	ldr	r2, [r7, #4]
 800e4e8:	b2d2      	uxtb	r2, r2
 800e4ea:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e4ee:	440b      	add	r3, r1
 800e4f0:	f803 2c28 	strb.w	r2, [r3, #-40]
		unsigned short crc = crc16(data, len);
 800e4f4:	6879      	ldr	r1, [r7, #4]
 800e4f6:	68b8      	ldr	r0, [r7, #8]
 800e4f8:	f7ff fee0 	bl	800e2bc <crc16>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	83fb      	strh	r3, [r7, #30]
		send_buffer[ind++] = (uint8_t)(crc >> 8);
 800e500:	8bfb      	ldrh	r3, [r7, #30]
 800e502:	0a1b      	lsrs	r3, r3, #8
 800e504:	b299      	uxth	r1, r3
 800e506:	6a3b      	ldr	r3, [r7, #32]
 800e508:	1c5a      	adds	r2, r3, #1
 800e50a:	623a      	str	r2, [r7, #32]
 800e50c:	b2ca      	uxtb	r2, r1
 800e50e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e512:	440b      	add	r3, r1
 800e514:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = (uint8_t)(crc & 0xFF);
 800e518:	6a3b      	ldr	r3, [r7, #32]
 800e51a:	1c5a      	adds	r2, r3, #1
 800e51c:	623a      	str	r2, [r7, #32]
 800e51e:	8bfa      	ldrh	r2, [r7, #30]
 800e520:	b2d2      	uxtb	r2, r2
 800e522:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e526:	440b      	add	r3, r1
 800e528:	f803 2c28 	strb.w	r2, [r3, #-40]
			CAN_TxMsgEID(&hcan2, controller_id |
 800e52c:	7bfb      	ldrb	r3, [r7, #15]
 800e52e:	f443 61e0 	orr.w	r1, r3, #1792	; 0x700
								((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
 800e532:	6a3b      	ldr	r3, [r7, #32]
 800e534:	1c5a      	adds	r2, r3, #1
 800e536:	623a      	str	r2, [r7, #32]
			CAN_TxMsgEID(&hcan2, controller_id |
 800e538:	b2db      	uxtb	r3, r3
 800e53a:	f107 0210 	add.w	r2, r7, #16
 800e53e:	4803      	ldr	r0, [pc, #12]	; (800e54c <comm_can_send_buffer+0x234>)
 800e540:	f7f5 f972 	bl	8003828 <CAN_TxMsgEID>
}
 800e544:	bf00      	nop
 800e546:	3738      	adds	r7, #56	; 0x38
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}
 800e54c:	20009470 	.word	0x20009470

0800e550 <comm_can_set_duty>:

void comm_can_set_duty(uint8_t controller_id, float duty) {
 800e550:	b580      	push	{r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
 800e556:	4603      	mov	r3, r0
 800e558:	ed87 0a00 	vstr	s0, [r7]
 800e55c:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800e55e:	2300      	movs	r3, #0
 800e560:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)(duty * 100000.0), &send_index);
 800e562:	6838      	ldr	r0, [r7, #0]
 800e564:	f7f1 fff0 	bl	8000548 <__aeabi_f2d>
 800e568:	a310      	add	r3, pc, #64	; (adr r3, 800e5ac <comm_can_set_duty+0x5c>)
 800e56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e56e:	f7f2 f843 	bl	80005f8 <__aeabi_dmul>
 800e572:	4602      	mov	r2, r0
 800e574:	460b      	mov	r3, r1
 800e576:	4610      	mov	r0, r2
 800e578:	4619      	mov	r1, r3
 800e57a:	f7f2 faed 	bl	8000b58 <__aeabi_d2iz>
 800e57e:	4601      	mov	r1, r0
 800e580:	f107 020c 	add.w	r2, r7, #12
 800e584:	f107 0308 	add.w	r3, r7, #8
 800e588:	4618      	mov	r0, r3
 800e58a:	f7ff fd23 	bl	800dfd4 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
			((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
 800e58e:	79f9      	ldrb	r1, [r7, #7]
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	b2db      	uxtb	r3, r3
 800e594:	f107 0208 	add.w	r2, r7, #8
 800e598:	4803      	ldr	r0, [pc, #12]	; (800e5a8 <comm_can_set_duty+0x58>)
 800e59a:	f7f5 f945 	bl	8003828 <CAN_TxMsgEID>
				((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
#endif
}
 800e59e:	bf00      	nop
 800e5a0:	3710      	adds	r7, #16
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd80      	pop	{r7, pc}
 800e5a6:	bf00      	nop
 800e5a8:	20009470 	.word	0x20009470
 800e5ac:	00000000 	.word	0x00000000
 800e5b0:	40f86a00 	.word	0x40f86a00

0800e5b4 <comm_can_set_current>:

void comm_can_set_current(uint8_t controller_id, float current) {
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	ed87 0a00 	vstr	s0, [r7]
 800e5c0:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)(current * 1000.0), &send_index);
 800e5c6:	6838      	ldr	r0, [r7, #0]
 800e5c8:	f7f1 ffbe 	bl	8000548 <__aeabi_f2d>
 800e5cc:	f04f 0200 	mov.w	r2, #0
 800e5d0:	4b0f      	ldr	r3, [pc, #60]	; (800e610 <comm_can_set_current+0x5c>)
 800e5d2:	f7f2 f811 	bl	80005f8 <__aeabi_dmul>
 800e5d6:	4602      	mov	r2, r0
 800e5d8:	460b      	mov	r3, r1
 800e5da:	4610      	mov	r0, r2
 800e5dc:	4619      	mov	r1, r3
 800e5de:	f7f2 fabb 	bl	8000b58 <__aeabi_d2iz>
 800e5e2:	4601      	mov	r1, r0
 800e5e4:	f107 020c 	add.w	r2, r7, #12
 800e5e8:	f107 0308 	add.w	r3, r7, #8
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f7ff fcf1 	bl	800dfd4 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
			((uint32_t)CAN_PACKET_SET_CURRENT << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
 800e5f2:	79fb      	ldrb	r3, [r7, #7]
 800e5f4:	f443 7180 	orr.w	r1, r3, #256	; 0x100
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	b2db      	uxtb	r3, r3
 800e5fc:	f107 0208 	add.w	r2, r7, #8
 800e600:	4804      	ldr	r0, [pc, #16]	; (800e614 <comm_can_set_current+0x60>)
 800e602:	f7f5 f911 	bl	8003828 <CAN_TxMsgEID>
				((uint32_t)CAN_PACKET_SET_CURRENT << 8), buffer, send_index);
#endif
}
 800e606:	bf00      	nop
 800e608:	3710      	adds	r7, #16
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}
 800e60e:	bf00      	nop
 800e610:	408f4000 	.word	0x408f4000
 800e614:	20009470 	.word	0x20009470

0800e618 <comm_can_set_rpm>:
				((uint32_t)CAN_PACKET_SET_CURRENT_BRAKE << 8), buffer, send_index);
#endif

}

void comm_can_set_rpm(uint8_t controller_id, float rpm) {
 800e618:	b580      	push	{r7, lr}
 800e61a:	b084      	sub	sp, #16
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	4603      	mov	r3, r0
 800e620:	ed87 0a00 	vstr	s0, [r7]
 800e624:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800e626:	2300      	movs	r3, #0
 800e628:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)rpm, &send_index);
 800e62a:	edd7 7a00 	vldr	s15, [r7]
 800e62e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e632:	f107 020c 	add.w	r2, r7, #12
 800e636:	f107 0308 	add.w	r3, r7, #8
 800e63a:	ee17 1a90 	vmov	r1, s15
 800e63e:	4618      	mov	r0, r3
 800e640:	f7ff fcc8 	bl	800dfd4 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
			((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
 800e644:	79fb      	ldrb	r3, [r7, #7]
 800e646:	f443 7140 	orr.w	r1, r3, #768	; 0x300
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	b2db      	uxtb	r3, r3
 800e64e:	f107 0208 	add.w	r2, r7, #8
 800e652:	4803      	ldr	r0, [pc, #12]	; (800e660 <comm_can_set_rpm+0x48>)
 800e654:	f7f5 f8e8 	bl	8003828 <CAN_TxMsgEID>
				((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
#endif
}
 800e658:	bf00      	nop
 800e65a:	3710      	adds	r7, #16
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}
 800e660:	20009470 	.word	0x20009470

0800e664 <decode_VESC>:
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_CURRENT_HANDBRAKE_REL<< 8), buffer, send_index);
#endif
}

void decode_VESC(void){
 800e664:	b580      	push	{r7, lr}
 800e666:	b086      	sub	sp, #24
 800e668:	af00      	add	r7, sp, #0
	int32_t ind = 0;
 800e66a:	2300      	movs	r3, #0
 800e66c:	617b      	str	r3, [r7, #20]
	int32_t indexbuf = 0;
 800e66e:	2300      	movs	r3, #0
 800e670:	603b      	str	r3, [r7, #0]
//	Vescmsg *rxmsg_tmp;
//	while ((rxmsg_tmp = get_rx_frame()) != 0) {
//		Vescmsg rxmsg = *rxmsg_tmp;
//
//		if (rxmsg.Rxmsg.IDE == CAN_ID_EXT) {
			uint8_t id = vescmsg.Rxmsg.ExtId & 0xFF;
 800e672:	4b77      	ldr	r3, [pc, #476]	; (800e850 <decode_VESC+0x1ec>)
 800e674:	685b      	ldr	r3, [r3, #4]
 800e676:	74fb      	strb	r3, [r7, #19]
			CAN_PACKET_ID cmd = vescmsg.Rxmsg.ExtId >> 8;
 800e678:	4b75      	ldr	r3, [pc, #468]	; (800e850 <decode_VESC+0x1ec>)
 800e67a:	685b      	ldr	r3, [r3, #4]
 800e67c:	0a1b      	lsrs	r3, r3, #8
 800e67e:	74bb      	strb	r3, [r7, #18]

			if (id == 255 || id == RNS_TO_VESC) {
 800e680:	7cfb      	ldrb	r3, [r7, #19]
 800e682:	2bff      	cmp	r3, #255	; 0xff
 800e684:	d003      	beq.n	800e68e <decode_VESC+0x2a>
 800e686:	7cfb      	ldrb	r3, [r7, #19]
 800e688:	2b1e      	cmp	r3, #30
 800e68a:	f040 80a5 	bne.w	800e7d8 <decode_VESC+0x174>
				switch (cmd) {
 800e68e:	7cbb      	ldrb	r3, [r7, #18]
 800e690:	3b05      	subs	r3, #5
 800e692:	2b03      	cmp	r3, #3
 800e694:	f200 8096 	bhi.w	800e7c4 <decode_VESC+0x160>
 800e698:	a201      	add	r2, pc, #4	; (adr r2, 800e6a0 <decode_VESC+0x3c>)
 800e69a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e69e:	bf00      	nop
 800e6a0:	0800e6b1 	.word	0x0800e6b1
 800e6a4:	0800e6cb 	.word	0x0800e6cb
 800e6a8:	0800e6fd 	.word	0x0800e6fd
 800e6ac:	0800e791 	.word	0x0800e791
				case CAN_PACKET_FILL_RX_BUFFER:
					memcpy(rx_buffer + vescmsg.Data[0], vescmsg.Data + 1, vescmsg.Rxmsg.DLC - 1);
 800e6b0:	4b67      	ldr	r3, [pc, #412]	; (800e850 <decode_VESC+0x1ec>)
 800e6b2:	7f1b      	ldrb	r3, [r3, #28]
 800e6b4:	461a      	mov	r2, r3
 800e6b6:	4b67      	ldr	r3, [pc, #412]	; (800e854 <decode_VESC+0x1f0>)
 800e6b8:	18d0      	adds	r0, r2, r3
 800e6ba:	4967      	ldr	r1, [pc, #412]	; (800e858 <decode_VESC+0x1f4>)
 800e6bc:	4b64      	ldr	r3, [pc, #400]	; (800e850 <decode_VESC+0x1ec>)
 800e6be:	691b      	ldr	r3, [r3, #16]
 800e6c0:	3b01      	subs	r3, #1
 800e6c2:	461a      	mov	r2, r3
 800e6c4:	f00c f824 	bl	801a710 <memcpy>
					break;
 800e6c8:	e085      	b.n	800e7d6 <decode_VESC+0x172>

				case CAN_PACKET_FILL_RX_BUFFER_LONG:
					rxbuf_ind = (unsigned int)vescmsg.Data[0] << 8;
 800e6ca:	4b61      	ldr	r3, [pc, #388]	; (800e850 <decode_VESC+0x1ec>)
 800e6cc:	7f1b      	ldrb	r3, [r3, #28]
 800e6ce:	021b      	lsls	r3, r3, #8
 800e6d0:	607b      	str	r3, [r7, #4]
					rxbuf_ind |= vescmsg.Data[1];
 800e6d2:	4b5f      	ldr	r3, [pc, #380]	; (800e850 <decode_VESC+0x1ec>)
 800e6d4:	7f5b      	ldrb	r3, [r3, #29]
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	4313      	orrs	r3, r2
 800e6dc:	607b      	str	r3, [r7, #4]
					if (rxbuf_ind < RX_BUFFER_SIZE) {
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6e4:	d270      	bcs.n	800e7c8 <decode_VESC+0x164>
						memcpy(rx_buffer + rxbuf_ind, vescmsg.Data + 2, vescmsg.Rxmsg.DLC - 2);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	4a5a      	ldr	r2, [pc, #360]	; (800e854 <decode_VESC+0x1f0>)
 800e6ea:	1898      	adds	r0, r3, r2
 800e6ec:	495b      	ldr	r1, [pc, #364]	; (800e85c <decode_VESC+0x1f8>)
 800e6ee:	4b58      	ldr	r3, [pc, #352]	; (800e850 <decode_VESC+0x1ec>)
 800e6f0:	691b      	ldr	r3, [r3, #16]
 800e6f2:	3b02      	subs	r3, #2
 800e6f4:	461a      	mov	r2, r3
 800e6f6:	f00c f80b 	bl	801a710 <memcpy>
					}
					break;
 800e6fa:	e065      	b.n	800e7c8 <decode_VESC+0x164>

				case CAN_PACKET_PROCESS_RX_BUFFER:
					ind = 0;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	617b      	str	r3, [r7, #20]
					rx_buffer_last_id = vescmsg.Data[ind++];
 800e700:	697b      	ldr	r3, [r7, #20]
 800e702:	1c5a      	adds	r2, r3, #1
 800e704:	617a      	str	r2, [r7, #20]
 800e706:	4a52      	ldr	r2, [pc, #328]	; (800e850 <decode_VESC+0x1ec>)
 800e708:	4413      	add	r3, r2
 800e70a:	7f1b      	ldrb	r3, [r3, #28]
 800e70c:	461a      	mov	r2, r3
 800e70e:	4b54      	ldr	r3, [pc, #336]	; (800e860 <decode_VESC+0x1fc>)
 800e710:	601a      	str	r2, [r3, #0]
					commands_send = vescmsg.Data[ind++];
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	1c5a      	adds	r2, r3, #1
 800e716:	617a      	str	r2, [r7, #20]
 800e718:	4a4d      	ldr	r2, [pc, #308]	; (800e850 <decode_VESC+0x1ec>)
 800e71a:	4413      	add	r3, r2
 800e71c:	7f1b      	ldrb	r3, [r3, #28]
 800e71e:	747b      	strb	r3, [r7, #17]
					rxbuf_len = (unsigned int)vescmsg.Data[ind++] << 8;
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	1c5a      	adds	r2, r3, #1
 800e724:	617a      	str	r2, [r7, #20]
 800e726:	4a4a      	ldr	r2, [pc, #296]	; (800e850 <decode_VESC+0x1ec>)
 800e728:	4413      	add	r3, r2
 800e72a:	7f1b      	ldrb	r3, [r3, #28]
 800e72c:	021b      	lsls	r3, r3, #8
 800e72e:	60fb      	str	r3, [r7, #12]
					rxbuf_len |= (unsigned int)vescmsg.Data[ind++];
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	1c5a      	adds	r2, r3, #1
 800e734:	617a      	str	r2, [r7, #20]
 800e736:	4a46      	ldr	r2, [pc, #280]	; (800e850 <decode_VESC+0x1ec>)
 800e738:	4413      	add	r3, r2
 800e73a:	7f1b      	ldrb	r3, [r3, #28]
 800e73c:	461a      	mov	r2, r3
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	4313      	orrs	r3, r2
 800e742:	60fb      	str	r3, [r7, #12]

					if (rxbuf_len > RX_BUFFER_SIZE) {
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e74a:	d83f      	bhi.n	800e7cc <decode_VESC+0x168>
						break;
					}

					crc_high = vescmsg.Data[ind++];
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	1c5a      	adds	r2, r3, #1
 800e750:	617a      	str	r2, [r7, #20]
 800e752:	4a3f      	ldr	r2, [pc, #252]	; (800e850 <decode_VESC+0x1ec>)
 800e754:	4413      	add	r3, r2
 800e756:	7f1b      	ldrb	r3, [r3, #28]
 800e758:	72fb      	strb	r3, [r7, #11]
					crc_low = vescmsg.Data[ind++];
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	1c5a      	adds	r2, r3, #1
 800e75e:	617a      	str	r2, [r7, #20]
 800e760:	4a3b      	ldr	r2, [pc, #236]	; (800e850 <decode_VESC+0x1ec>)
 800e762:	4413      	add	r3, r2
 800e764:	7f1b      	ldrb	r3, [r3, #28]
 800e766:	72bb      	strb	r3, [r7, #10]

					if (crc16(rx_buffer, rxbuf_len)
 800e768:	68f9      	ldr	r1, [r7, #12]
 800e76a:	483a      	ldr	r0, [pc, #232]	; (800e854 <decode_VESC+0x1f0>)
 800e76c:	f7ff fda6 	bl	800e2bc <crc16>
 800e770:	4603      	mov	r3, r0
 800e772:	4619      	mov	r1, r3
							== ((unsigned short) crc_high << 8
 800e774:	7afb      	ldrb	r3, [r7, #11]
 800e776:	021a      	lsls	r2, r3, #8
									| (unsigned short) crc_low)) {
 800e778:	7abb      	ldrb	r3, [r7, #10]
 800e77a:	4313      	orrs	r3, r2
					if (crc16(rx_buffer, rxbuf_len)
 800e77c:	4299      	cmp	r1, r3
 800e77e:	d127      	bne.n	800e7d0 <decode_VESC+0x16c>
						if(commands_send==1)
 800e780:	7c7b      	ldrb	r3, [r7, #17]
 800e782:	2b01      	cmp	r3, #1
 800e784:	d124      	bne.n	800e7d0 <decode_VESC+0x16c>
							bldc_interface_process_packet(rx_buffer, rxbuf_len);
 800e786:	68f9      	ldr	r1, [r7, #12]
 800e788:	4832      	ldr	r0, [pc, #200]	; (800e854 <decode_VESC+0x1f0>)
 800e78a:	f7fd ffa3 	bl	800c6d4 <bldc_interface_process_packet>
					}
					break;
 800e78e:	e01f      	b.n	800e7d0 <decode_VESC+0x16c>

				case CAN_PACKET_PROCESS_SHORT_BUFFER:
					ind = 0;
 800e790:	2300      	movs	r3, #0
 800e792:	617b      	str	r3, [r7, #20]
					rx_buffer_last_id = vescmsg.Data[ind++];
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	1c5a      	adds	r2, r3, #1
 800e798:	617a      	str	r2, [r7, #20]
 800e79a:	4a2d      	ldr	r2, [pc, #180]	; (800e850 <decode_VESC+0x1ec>)
 800e79c:	4413      	add	r3, r2
 800e79e:	7f1b      	ldrb	r3, [r3, #28]
 800e7a0:	461a      	mov	r2, r3
 800e7a2:	4b2f      	ldr	r3, [pc, #188]	; (800e860 <decode_VESC+0x1fc>)
 800e7a4:	601a      	str	r2, [r3, #0]
					commands_send = vescmsg.Data[ind++];
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	1c5a      	adds	r2, r3, #1
 800e7aa:	617a      	str	r2, [r7, #20]
 800e7ac:	4a28      	ldr	r2, [pc, #160]	; (800e850 <decode_VESC+0x1ec>)
 800e7ae:	4413      	add	r3, r2
 800e7b0:	7f1b      	ldrb	r3, [r3, #28]
 800e7b2:	747b      	strb	r3, [r7, #17]

					if(commands_send==1)
 800e7b4:	7c7b      	ldrb	r3, [r7, #17]
 800e7b6:	2b01      	cmp	r3, #1
 800e7b8:	d10c      	bne.n	800e7d4 <decode_VESC+0x170>
						bldc_interface_process_packet(rx_buffer, rxbuf_len);
 800e7ba:	68f9      	ldr	r1, [r7, #12]
 800e7bc:	4825      	ldr	r0, [pc, #148]	; (800e854 <decode_VESC+0x1f0>)
 800e7be:	f7fd ff89 	bl	800c6d4 <bldc_interface_process_packet>
					break;
 800e7c2:	e007      	b.n	800e7d4 <decode_VESC+0x170>
				default:
					break;
 800e7c4:	bf00      	nop
 800e7c6:	e03f      	b.n	800e848 <decode_VESC+0x1e4>
					break;
 800e7c8:	bf00      	nop
 800e7ca:	e03d      	b.n	800e848 <decode_VESC+0x1e4>
						break;
 800e7cc:	bf00      	nop
 800e7ce:	e03b      	b.n	800e848 <decode_VESC+0x1e4>
					break;
 800e7d0:	bf00      	nop
 800e7d2:	e039      	b.n	800e848 <decode_VESC+0x1e4>
					break;
 800e7d4:	bf00      	nop
				switch (cmd) {
 800e7d6:	e037      	b.n	800e848 <decode_VESC+0x1e4>
				}
			}
			else if(id == 111)
 800e7d8:	7cfb      	ldrb	r3, [r7, #19]
 800e7da:	2b6f      	cmp	r3, #111	; 0x6f
 800e7dc:	d133      	bne.n	800e846 <decode_VESC+0x1e2>
			{
				switch(cmd)
 800e7de:	7cbb      	ldrb	r3, [r7, #18]
 800e7e0:	2b10      	cmp	r3, #16
 800e7e2:	d131      	bne.n	800e848 <decode_VESC+0x1e4>
				{
				case CAN_PACKET_STATUS_4:
						info.temp_fet = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &indexbuf);
 800e7e4:	463b      	mov	r3, r7
 800e7e6:	4619      	mov	r1, r3
 800e7e8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800e7ec:	481d      	ldr	r0, [pc, #116]	; (800e864 <decode_VESC+0x200>)
 800e7ee:	f7ff fcd2 	bl	800e196 <buffer_get_float16>
 800e7f2:	eef0 7a40 	vmov.f32	s15, s0
 800e7f6:	4b1c      	ldr	r3, [pc, #112]	; (800e868 <decode_VESC+0x204>)
 800e7f8:	edc3 7a00 	vstr	s15, [r3]
						info.temp_motor = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &indexbuf);
 800e7fc:	463b      	mov	r3, r7
 800e7fe:	4619      	mov	r1, r3
 800e800:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800e804:	4817      	ldr	r0, [pc, #92]	; (800e864 <decode_VESC+0x200>)
 800e806:	f7ff fcc6 	bl	800e196 <buffer_get_float16>
 800e80a:	eef0 7a40 	vmov.f32	s15, s0
 800e80e:	4b16      	ldr	r3, [pc, #88]	; (800e868 <decode_VESC+0x204>)
 800e810:	edc3 7a01 	vstr	s15, [r3, #4]
						info.current_in = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &indexbuf);
 800e814:	463b      	mov	r3, r7
 800e816:	4619      	mov	r1, r3
 800e818:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800e81c:	4811      	ldr	r0, [pc, #68]	; (800e864 <decode_VESC+0x200>)
 800e81e:	f7ff fcba 	bl	800e196 <buffer_get_float16>
 800e822:	eef0 7a40 	vmov.f32	s15, s0
 800e826:	4b10      	ldr	r3, [pc, #64]	; (800e868 <decode_VESC+0x204>)
 800e828:	edc3 7a02 	vstr	s15, [r3, #8]
						info.pos = buffer_get_float16((uint8_t*)&vescmsg.Data, 50, &indexbuf);
 800e82c:	463b      	mov	r3, r7
 800e82e:	4619      	mov	r1, r3
 800e830:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800e86c <decode_VESC+0x208>
 800e834:	480b      	ldr	r0, [pc, #44]	; (800e864 <decode_VESC+0x200>)
 800e836:	f7ff fcae 	bl	800e196 <buffer_get_float16>
 800e83a:	eef0 7a40 	vmov.f32	s15, s0
 800e83e:	4b0a      	ldr	r3, [pc, #40]	; (800e868 <decode_VESC+0x204>)
 800e840:	edc3 7a03 	vstr	s15, [r3, #12]
						break;
 800e844:	e000      	b.n	800e848 <decode_VESC+0x1e4>
				}
			}
 800e846:	bf00      	nop
//		}
//	}
}
 800e848:	bf00      	nop
 800e84a:	3718      	adds	r7, #24
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}
 800e850:	20009b24 	.word	0x20009b24
 800e854:	200005d0 	.word	0x200005d0
 800e858:	20009b41 	.word	0x20009b41
 800e85c:	20009b42 	.word	0x20009b42
 800e860:	200007d0 	.word	0x200007d0
 800e864:	20009b40 	.word	0x20009b40
 800e868:	200069a8 	.word	0x200069a8
 800e86c:	42480000 	.word	0x42480000

0800e870 <set_rx_frames>:
		return res;
	} else
		return 0;
}

uint8_t set_rx_frames(Vescmsg* CANRxFrame) {
 800e870:	b4b0      	push	{r4, r5, r7}
 800e872:	b085      	sub	sp, #20
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
	uint32_t cmd;

	rx_frames[rx_frame_write++] = *CANRxFrame;
 800e878:	4b16      	ldr	r3, [pc, #88]	; (800e8d4 <set_rx_frames+0x64>)
 800e87a:	681a      	ldr	r2, [r3, #0]
 800e87c:	1c53      	adds	r3, r2, #1
 800e87e:	4915      	ldr	r1, [pc, #84]	; (800e8d4 <set_rx_frames+0x64>)
 800e880:	600b      	str	r3, [r1, #0]
 800e882:	4915      	ldr	r1, [pc, #84]	; (800e8d8 <set_rx_frames+0x68>)
 800e884:	4613      	mov	r3, r2
 800e886:	00db      	lsls	r3, r3, #3
 800e888:	4413      	add	r3, r2
 800e88a:	009b      	lsls	r3, r3, #2
 800e88c:	18ca      	adds	r2, r1, r3
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	4614      	mov	r4, r2
 800e892:	461d      	mov	r5, r3
 800e894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e89a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e89c:	682b      	ldr	r3, [r5, #0]
 800e89e:	6023      	str	r3, [r4, #0]
	if (rx_frame_write == RX_FRAMES_SIZE) {
 800e8a0:	4b0c      	ldr	r3, [pc, #48]	; (800e8d4 <set_rx_frames+0x64>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	2b64      	cmp	r3, #100	; 0x64
 800e8a6:	d102      	bne.n	800e8ae <set_rx_frames+0x3e>
		rx_frame_write = 0;
 800e8a8:	4b0a      	ldr	r3, [pc, #40]	; (800e8d4 <set_rx_frames+0x64>)
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	601a      	str	r2, [r3, #0]
	}

	cmd = CANRxFrame->Rxmsg.ExtId >> 8;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	685b      	ldr	r3, [r3, #4]
 800e8b2:	0a1b      	lsrs	r3, r3, #8
 800e8b4:	60fb      	str	r3, [r7, #12]
	if(cmd == (uint32_t)CAN_PACKET_PROCESS_RX_BUFFER || cmd == (uint32_t)CAN_PACKET_PROCESS_SHORT_BUFFER)
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2b07      	cmp	r3, #7
 800e8ba:	d002      	beq.n	800e8c2 <set_rx_frames+0x52>
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	2b08      	cmp	r3, #8
 800e8c0:	d101      	bne.n	800e8c6 <set_rx_frames+0x56>
		return 112;
 800e8c2:	2370      	movs	r3, #112	; 0x70
 800e8c4:	e000      	b.n	800e8c8 <set_rx_frames+0x58>
	else
		return 0;
 800e8c6:	2300      	movs	r3, #0
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3714      	adds	r7, #20
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bcb0      	pop	{r4, r5, r7}
 800e8d0:	4770      	bx	lr
 800e8d2:	bf00      	nop
 800e8d4:	200015e4 	.word	0x200015e4
 800e8d8:	200007d4 	.word	0x200007d4

0800e8dc <VESCInit>:
 * 						  wheel_diameter 	wheel diameter
 * 						  vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCInit(40000,1,0.0037,&csev);
 */
void VESCInit(float max_rpm, float pole_pairs, float wheel_diameter,uint16_t Instance, VESC_t* vesc){
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b086      	sub	sp, #24
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	ed87 0a05 	vstr	s0, [r7, #20]
 800e8e6:	edc7 0a04 	vstr	s1, [r7, #16]
 800e8ea:	ed87 1a03 	vstr	s2, [r7, #12]
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	6079      	str	r1, [r7, #4]
 800e8f2:	817b      	strh	r3, [r7, #10]
	bldc_interface_init(bldc_send_packet);
 800e8f4:	4809      	ldr	r0, [pc, #36]	; (800e91c <VESCInit+0x40>)
 800e8f6:	f7fd fedd 	bl	800c6b4 <bldc_interface_init>
//	bldc_interface_set_rx_value_selective_func(bldc_val_selective_received_cb);

	vesc->max_rpm = max_rpm;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	697a      	ldr	r2, [r7, #20]
 800e8fe:	601a      	str	r2, [r3, #0]
	vesc->pole_pairs = pole_pairs;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	693a      	ldr	r2, [r7, #16]
 800e904:	605a      	str	r2, [r3, #4]
	vesc->wheel_diameter = wheel_diameter;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	68fa      	ldr	r2, [r7, #12]
 800e90a:	609a      	str	r2, [r3, #8]
	vesc->Instance = Instance;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	897a      	ldrh	r2, [r7, #10]
 800e910:	819a      	strh	r2, [r3, #12]
}
 800e912:	bf00      	nop
 800e914:	3718      	adds	r7, #24
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}
 800e91a:	bf00      	nop
 800e91c:	0800e9e9 	.word	0x0800e9e9

0800e920 <VESCPDC>:
 * 						  BRightPDC		duty cycle of back right motor
 * 						  vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCPDC(0.5, 0.5, 0.5, 0.5);
 */
void VESCPDC(float Duty, VESC_t* vesc) {
 800e920:	b580      	push	{r7, lr}
 800e922:	b082      	sub	sp, #8
 800e924:	af00      	add	r7, sp, #0
 800e926:	ed87 0a01 	vstr	s0, [r7, #4]
 800e92a:	6038      	str	r0, [r7, #0]

	if(Duty > 0.9){
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	f7f1 fe0b 	bl	8000548 <__aeabi_f2d>
 800e932:	a30e      	add	r3, pc, #56	; (adr r3, 800e96c <VESCPDC+0x4c>)
 800e934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e938:	f7f2 f8ee 	bl	8000b18 <__aeabi_dcmpgt>
 800e93c:	4603      	mov	r3, r0
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d001      	beq.n	800e946 <VESCPDC+0x26>
		Duty = 0.9;
 800e942:	4b09      	ldr	r3, [pc, #36]	; (800e968 <VESCPDC+0x48>)
 800e944:	607b      	str	r3, [r7, #4]
	}

	comm_can_set_duty(vesc->Instance, Duty);
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	899b      	ldrh	r3, [r3, #12]
 800e94a:	b2db      	uxtb	r3, r3
 800e94c:	ed97 0a01 	vldr	s0, [r7, #4]
 800e950:	4618      	mov	r0, r3
 800e952:	f7ff fdfd 	bl	800e550 <comm_can_set_duty>

	vesc->pdc_flag = 1;
 800e956:	683a      	ldr	r2, [r7, #0]
 800e958:	7c13      	ldrb	r3, [r2, #16]
 800e95a:	f043 0304 	orr.w	r3, r3, #4
 800e95e:	7413      	strb	r3, [r2, #16]
}
 800e960:	bf00      	nop
 800e962:	3708      	adds	r7, #8
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}
 800e968:	3f666666 	.word	0x3f666666
 800e96c:	cccccccd 	.word	0xcccccccd
 800e970:	3feccccc 	.word	0x3feccccc

0800e974 <VESCStop>:
 * Function Remarks		: NONE
 * Function Arguments	: vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCStop(&csev);
 */
void VESCStop(VESC_t* vesc) {
 800e974:	b580      	push	{r7, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]

	if(vesc->pdc_flag) {
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	7c1b      	ldrb	r3, [r3, #16]
 800e980:	f003 0304 	and.w	r3, r3, #4
 800e984:	b2db      	uxtb	r3, r3
 800e986:	2b00      	cmp	r3, #0
 800e988:	d007      	beq.n	800e99a <VESCStop+0x26>
		comm_can_set_duty(vesc->Instance, 0.0);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	899b      	ldrh	r3, [r3, #12]
 800e98e:	b2db      	uxtb	r3, r3
 800e990:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800e9e4 <VESCStop+0x70>
 800e994:	4618      	mov	r0, r3
 800e996:	f7ff fddb 	bl	800e550 <comm_can_set_duty>
	}

	if(vesc->rpm_flag) {
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	7c1b      	ldrb	r3, [r3, #16]
 800e99e:	f003 0302 	and.w	r3, r3, #2
 800e9a2:	b2db      	uxtb	r3, r3
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d007      	beq.n	800e9b8 <VESCStop+0x44>
		comm_can_set_rpm(vesc->Instance, 0.0);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	899b      	ldrh	r3, [r3, #12]
 800e9ac:	b2db      	uxtb	r3, r3
 800e9ae:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800e9e4 <VESCStop+0x70>
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7ff fe30 	bl	800e618 <comm_can_set_rpm>
	}

	if(vesc->current_flag){
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	7c1b      	ldrb	r3, [r3, #16]
 800e9bc:	f003 0301 	and.w	r3, r3, #1
 800e9c0:	b2db      	uxtb	r3, r3
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d007      	beq.n	800e9d6 <VESCStop+0x62>
		comm_can_set_current(vesc->Instance, 0.0);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	899b      	ldrh	r3, [r3, #12]
 800e9ca:	b2db      	uxtb	r3, r3
 800e9cc:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800e9e4 <VESCStop+0x70>
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f7ff fdef 	bl	800e5b4 <comm_can_set_current>
	}

	vesc->flags = 0;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	741a      	strb	r2, [r3, #16]
}
 800e9dc:	bf00      	nop
 800e9de:	3708      	adds	r7, #8
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}
 800e9e4:	00000000 	.word	0x00000000

0800e9e8 <bldc_send_packet>:
//	rx_value_complete = false;
	return rx_value_buf;
}

/*	Private Function	*/
void bldc_send_packet(uint8_t controller_id, uint8_t *data, unsigned int len) {
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b084      	sub	sp, #16
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	60b9      	str	r1, [r7, #8]
 800e9f2:	607a      	str	r2, [r7, #4]
 800e9f4:	73fb      	strb	r3, [r7, #15]
	comm_can_send_buffer(controller_id, data, len, 0);
 800e9f6:	7bf8      	ldrb	r0, [r7, #15]
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	687a      	ldr	r2, [r7, #4]
 800e9fc:	68b9      	ldr	r1, [r7, #8]
 800e9fe:	f7ff fc8b 	bl	800e318 <comm_can_send_buffer>
}
 800ea02:	bf00      	nop
 800ea04:	3710      	adds	r7, #16
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}
	...

0800ea0c <LidarInit>:
float Lidar_Shoot_Angles[10] = {0, -90.0, -135, -45, 0, 0, 0, 0, 0, 0}; // The angles should be absolute, try not to reset the angle every path plan
float Lidar_Center_Offsets[8] = {-0.19, 0.94, 1.23, 0.96, -1.38, 0.89, -0.21, 0.91};  // Offsets for center positions
float Lidar_Adjust_Lim[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

void LidarInit(UART_HandleTypeDef* lidarUART, MODE_t mode, Lidar_t* lidar)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b084      	sub	sp, #16
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	460b      	mov	r3, r1
 800ea16:	607a      	str	r2, [r7, #4]
 800ea18:	72fb      	strb	r3, [r7, #11]
	lidar->lidar_UART = lidarUART;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	68fa      	ldr	r2, [r7, #12]
 800ea1e:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	lidar->mode = mode;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	7afa      	ldrb	r2, [r7, #11]
 800ea26:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
	lidar->start = 0;
 800ea2a:	687a      	ldr	r2, [r7, #4]
 800ea2c:	f892 3294 	ldrb.w	r3, [r2, #660]	; 0x294
 800ea30:	f36f 0382 	bfc	r3, #2, #1
 800ea34:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294

	if(lidar->mode == CONTINUOUS)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d110      	bne.n	800ea64 <LidarInit+0x58>
	{
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 5);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	33c9      	adds	r3, #201	; 0xc9
 800ea4c:	2205      	movs	r2, #5
 800ea4e:	4619      	mov	r1, r3
 800ea50:	f008 f920 	bl	8016c94 <HAL_UART_Receive_IT>
		lidar->new = 0;
 800ea54:	687a      	ldr	r2, [r7, #4]
 800ea56:	f892 3294 	ldrb.w	r3, [r2, #660]	; 0x294
 800ea5a:	f36f 0300 	bfc	r3, #0, #1
 800ea5e:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
		lidar->angle = B;
		lidar->angle_counter = 2;
		lidar->AdjEnb = 0;
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 2);
	}
}
 800ea62:	e099      	b.n	800eb98 <LidarInit+0x18c>
		LidarAnglesInit(Lidar_Shoot_Angles[0], Lidar_Shoot_Angles[1], Lidar_Shoot_Angles[2], Lidar_Shoot_Angles[3],
 800ea64:	4b4e      	ldr	r3, [pc, #312]	; (800eba0 <LidarInit+0x194>)
 800ea66:	edd3 7a00 	vldr	s15, [r3]
 800ea6a:	4b4d      	ldr	r3, [pc, #308]	; (800eba0 <LidarInit+0x194>)
 800ea6c:	ed93 7a01 	vldr	s14, [r3, #4]
 800ea70:	4b4b      	ldr	r3, [pc, #300]	; (800eba0 <LidarInit+0x194>)
 800ea72:	edd3 6a02 	vldr	s13, [r3, #8]
 800ea76:	4b4a      	ldr	r3, [pc, #296]	; (800eba0 <LidarInit+0x194>)
 800ea78:	ed93 6a03 	vldr	s12, [r3, #12]
 800ea7c:	4b48      	ldr	r3, [pc, #288]	; (800eba0 <LidarInit+0x194>)
 800ea7e:	edd3 5a04 	vldr	s11, [r3, #16]
 800ea82:	4b47      	ldr	r3, [pc, #284]	; (800eba0 <LidarInit+0x194>)
 800ea84:	ed93 5a05 	vldr	s10, [r3, #20]
 800ea88:	4b45      	ldr	r3, [pc, #276]	; (800eba0 <LidarInit+0x194>)
 800ea8a:	ed93 3a06 	vldr	s6, [r3, #24]
 800ea8e:	4b44      	ldr	r3, [pc, #272]	; (800eba0 <LidarInit+0x194>)
 800ea90:	edd3 3a07 	vldr	s7, [r3, #28]
 800ea94:	4b42      	ldr	r3, [pc, #264]	; (800eba0 <LidarInit+0x194>)
 800ea96:	ed93 4a08 	vldr	s8, [r3, #32]
 800ea9a:	4b41      	ldr	r3, [pc, #260]	; (800eba0 <LidarInit+0x194>)
 800ea9c:	edd3 4a09 	vldr	s9, [r3, #36]	; 0x24
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	eef0 2a45 	vmov.f32	s5, s10
 800eaa6:	eeb0 2a65 	vmov.f32	s4, s11
 800eaaa:	eef0 1a46 	vmov.f32	s3, s12
 800eaae:	eeb0 1a66 	vmov.f32	s2, s13
 800eab2:	eef0 0a47 	vmov.f32	s1, s14
 800eab6:	eeb0 0a67 	vmov.f32	s0, s15
 800eaba:	f000 f8df 	bl	800ec7c <LidarAnglesInit>
		LidarOffsetInit(Lidar_Offsets[0], Lidar_Offsets[1], Lidar_Offsets[2], Lidar_Offsets[3], Lidar_Offsets[4], Lidar_Offsets[5], lidar);
 800eabe:	4b39      	ldr	r3, [pc, #228]	; (800eba4 <LidarInit+0x198>)
 800eac0:	edd3 7a00 	vldr	s15, [r3]
 800eac4:	4b37      	ldr	r3, [pc, #220]	; (800eba4 <LidarInit+0x198>)
 800eac6:	ed93 7a01 	vldr	s14, [r3, #4]
 800eaca:	4b36      	ldr	r3, [pc, #216]	; (800eba4 <LidarInit+0x198>)
 800eacc:	edd3 6a02 	vldr	s13, [r3, #8]
 800ead0:	4b34      	ldr	r3, [pc, #208]	; (800eba4 <LidarInit+0x198>)
 800ead2:	ed93 6a03 	vldr	s12, [r3, #12]
 800ead6:	4b33      	ldr	r3, [pc, #204]	; (800eba4 <LidarInit+0x198>)
 800ead8:	edd3 5a04 	vldr	s11, [r3, #16]
 800eadc:	4b31      	ldr	r3, [pc, #196]	; (800eba4 <LidarInit+0x198>)
 800eade:	ed93 5a05 	vldr	s10, [r3, #20]
 800eae2:	6878      	ldr	r0, [r7, #4]
 800eae4:	eef0 2a45 	vmov.f32	s5, s10
 800eae8:	eeb0 2a65 	vmov.f32	s4, s11
 800eaec:	eef0 1a46 	vmov.f32	s3, s12
 800eaf0:	eeb0 1a66 	vmov.f32	s2, s13
 800eaf4:	eef0 0a47 	vmov.f32	s1, s14
 800eaf8:	eeb0 0a67 	vmov.f32	s0, s15
 800eafc:	f000 f856 	bl	800ebac <LidarOffsetInit>
		LidarCenterOffsetInit(Lidar_Center_Offsets[0], Lidar_Center_Offsets[1], Lidar_Center_Offsets[2], Lidar_Center_Offsets[3], Lidar_Center_Offsets[4],
 800eb00:	4b29      	ldr	r3, [pc, #164]	; (800eba8 <LidarInit+0x19c>)
 800eb02:	edd3 7a00 	vldr	s15, [r3]
 800eb06:	4b28      	ldr	r3, [pc, #160]	; (800eba8 <LidarInit+0x19c>)
 800eb08:	ed93 7a01 	vldr	s14, [r3, #4]
 800eb0c:	4b26      	ldr	r3, [pc, #152]	; (800eba8 <LidarInit+0x19c>)
 800eb0e:	edd3 6a02 	vldr	s13, [r3, #8]
 800eb12:	4b25      	ldr	r3, [pc, #148]	; (800eba8 <LidarInit+0x19c>)
 800eb14:	ed93 6a03 	vldr	s12, [r3, #12]
 800eb18:	4b23      	ldr	r3, [pc, #140]	; (800eba8 <LidarInit+0x19c>)
 800eb1a:	edd3 5a04 	vldr	s11, [r3, #16]
 800eb1e:	4b22      	ldr	r3, [pc, #136]	; (800eba8 <LidarInit+0x19c>)
 800eb20:	ed93 5a05 	vldr	s10, [r3, #20]
 800eb24:	4b20      	ldr	r3, [pc, #128]	; (800eba8 <LidarInit+0x19c>)
 800eb26:	edd3 4a06 	vldr	s9, [r3, #24]
 800eb2a:	4b1f      	ldr	r3, [pc, #124]	; (800eba8 <LidarInit+0x19c>)
 800eb2c:	ed93 4a07 	vldr	s8, [r3, #28]
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	eef0 3a44 	vmov.f32	s7, s8
 800eb36:	eeb0 3a64 	vmov.f32	s6, s9
 800eb3a:	eef0 2a45 	vmov.f32	s5, s10
 800eb3e:	eeb0 2a65 	vmov.f32	s4, s11
 800eb42:	eef0 1a46 	vmov.f32	s3, s12
 800eb46:	eeb0 1a66 	vmov.f32	s2, s13
 800eb4a:	eef0 0a47 	vmov.f32	s1, s14
 800eb4e:	eeb0 0a67 	vmov.f32	s0, s15
 800eb52:	f000 f859 	bl	800ec08 <LidarCenterOffsetInit>
		lidar->response = NO;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2201      	movs	r2, #1
 800eb5a:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
		lidar->pos = PICK_LEFT;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2201      	movs	r2, #1
 800eb62:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar->pos_counter = 1;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2201      	movs	r2, #1
 800eb6a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		lidar->angle = B;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2202      	movs	r2, #2
 800eb72:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
		lidar->angle_counter = 2;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2202      	movs	r2, #2
 800eb7a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
		lidar->AdjEnb = 0;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2200      	movs	r2, #0
 800eb82:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 2);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	33c9      	adds	r3, #201	; 0xc9
 800eb90:	2202      	movs	r2, #2
 800eb92:	4619      	mov	r1, r3
 800eb94:	f008 f87e 	bl	8016c94 <HAL_UART_Receive_IT>
}
 800eb98:	bf00      	nop
 800eb9a:	3710      	adds	r7, #16
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}
 800eba0:	20000038 	.word	0x20000038
 800eba4:	20000020 	.word	0x20000020
 800eba8:	20000060 	.word	0x20000060

0800ebac <LidarOffsetInit>:

void LidarOffsetInit(float left_offset_x, float left_offset_y, float right_offset_x, float right_offset_y, float center_offset_x,
		float center_offset_y, Lidar_t* lidar)
{
 800ebac:	b480      	push	{r7}
 800ebae:	b089      	sub	sp, #36	; 0x24
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	ed87 0a07 	vstr	s0, [r7, #28]
 800ebb6:	edc7 0a06 	vstr	s1, [r7, #24]
 800ebba:	ed87 1a05 	vstr	s2, [r7, #20]
 800ebbe:	edc7 1a04 	vstr	s3, [r7, #16]
 800ebc2:	ed87 2a03 	vstr	s4, [r7, #12]
 800ebc6:	edc7 2a02 	vstr	s5, [r7, #8]
 800ebca:	6078      	str	r0, [r7, #4]
	lidar->left_offset_x = left_offset_x;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	69fa      	ldr	r2, [r7, #28]
 800ebd0:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	lidar->left_offset_y = left_offset_y;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	69ba      	ldr	r2, [r7, #24]
 800ebd8:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	lidar->right_offset_x = right_offset_x;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	697a      	ldr	r2, [r7, #20]
 800ebe0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	lidar->right_offset_y = right_offset_y;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	693a      	ldr	r2, [r7, #16]
 800ebe8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	lidar->center_offset_x = center_offset_x;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	68fa      	ldr	r2, [r7, #12]
 800ebf0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	lidar->center_offset_y = center_offset_y;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	68ba      	ldr	r2, [r7, #8]
 800ebf8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
}
 800ebfc:	bf00      	nop
 800ebfe:	3724      	adds	r7, #36	; 0x24
 800ec00:	46bd      	mov	sp, r7
 800ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec06:	4770      	bx	lr

0800ec08 <LidarCenterOffsetInit>:

void LidarCenterOffsetInit(float center_1_offset_x, float center_1_offset_y, float center_2_offset_x, float center_2_offset_y,
		float center_3_offset_x, float center_3_offset_y, float center_4_offset_x, float center_4_offset_y, Lidar_t* lidar)
{
 800ec08:	b480      	push	{r7}
 800ec0a:	b08b      	sub	sp, #44	; 0x2c
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800ec12:	edc7 0a08 	vstr	s1, [r7, #32]
 800ec16:	ed87 1a07 	vstr	s2, [r7, #28]
 800ec1a:	edc7 1a06 	vstr	s3, [r7, #24]
 800ec1e:	ed87 2a05 	vstr	s4, [r7, #20]
 800ec22:	edc7 2a04 	vstr	s5, [r7, #16]
 800ec26:	ed87 3a03 	vstr	s6, [r7, #12]
 800ec2a:	edc7 3a02 	vstr	s7, [r7, #8]
 800ec2e:	6078      	str	r0, [r7, #4]
	lidar->center_1_offset_x = center_1_offset_x;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec34:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	lidar->center_1_offset_y = center_1_offset_y;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6a3a      	ldr	r2, [r7, #32]
 800ec3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	lidar->center_2_offset_x = center_2_offset_x;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	69fa      	ldr	r2, [r7, #28]
 800ec44:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	lidar->center_2_offset_y = center_2_offset_y;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	69ba      	ldr	r2, [r7, #24]
 800ec4c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	lidar->center_3_offset_x = center_3_offset_x;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	697a      	ldr	r2, [r7, #20]
 800ec54:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	lidar->center_3_offset_y = center_3_offset_y;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	693a      	ldr	r2, [r7, #16]
 800ec5c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	lidar->center_4_offset_x = center_4_offset_x;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	68fa      	ldr	r2, [r7, #12]
 800ec64:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	lidar->center_4_offset_y = center_4_offset_y;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	68ba      	ldr	r2, [r7, #8]
 800ec6c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c

}
 800ec70:	bf00      	nop
 800ec72:	372c      	adds	r7, #44	; 0x2c
 800ec74:	46bd      	mov	sp, r7
 800ec76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7a:	4770      	bx	lr

0800ec7c <LidarAnglesInit>:

// Will be shooting based on sequence A-> B -> C -> D
void LidarAnglesInit(float left_angle_A, float left_angle_B, float left_angle_C, float left_angle_D,
					 float right_angle_A, float right_angle_B, float right_angle_C, float right_angle_D,
					 float center_angle_A, float center_angle_B, Lidar_t* lidar)
{
 800ec7c:	b480      	push	{r7}
 800ec7e:	b08d      	sub	sp, #52	; 0x34
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 800ec86:	edc7 0a0a 	vstr	s1, [r7, #40]	; 0x28
 800ec8a:	ed87 1a09 	vstr	s2, [r7, #36]	; 0x24
 800ec8e:	edc7 1a08 	vstr	s3, [r7, #32]
 800ec92:	ed87 2a07 	vstr	s4, [r7, #28]
 800ec96:	edc7 2a06 	vstr	s5, [r7, #24]
 800ec9a:	ed87 3a05 	vstr	s6, [r7, #20]
 800ec9e:	edc7 3a04 	vstr	s7, [r7, #16]
 800eca2:	ed87 4a03 	vstr	s8, [r7, #12]
 800eca6:	edc7 4a02 	vstr	s9, [r7, #8]
 800ecaa:	6078      	str	r0, [r7, #4]
	lidar->left_angle_A = left_angle_A;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ecb0:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	lidar->left_angle_B = left_angle_B;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ecb8:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
	lidar->left_angle_C = left_angle_C;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecc0:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	lidar->left_angle_D = left_angle_D;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	6a3a      	ldr	r2, [r7, #32]
 800ecc8:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc

	lidar->right_angle_A = right_angle_A;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	69fa      	ldr	r2, [r7, #28]
 800ecd0:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	lidar->right_angle_B = right_angle_B;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	69ba      	ldr	r2, [r7, #24]
 800ecd8:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	lidar->right_angle_C = right_angle_C;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	697a      	ldr	r2, [r7, #20]
 800ece0:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	lidar->right_angle_D = right_angle_D;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	693a      	ldr	r2, [r7, #16]
 800ece8:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec

	lidar->center_angle_A = center_angle_A;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	68fa      	ldr	r2, [r7, #12]
 800ecf0:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	lidar->center_angle_B = center_angle_B;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	68ba      	ldr	r2, [r7, #8]
 800ecf8:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
}
 800ecfc:	bf00      	nop
 800ecfe:	3734      	adds	r7, #52	; 0x34
 800ed00:	46bd      	mov	sp, r7
 800ed02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed06:	4770      	bx	lr

0800ed08 <LidarSetPos>:

void LidarSetPos(Pos_t pose, Lidar_t* lidar)
{
 800ed08:	b5b0      	push	{r4, r5, r7, lr}
 800ed0a:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800ed0e:	af00      	add	r7, sp, #0
 800ed10:	4602      	mov	r2, r0
 800ed12:	463b      	mov	r3, r7
 800ed14:	6019      	str	r1, [r3, #0]
 800ed16:	1dfb      	adds	r3, r7, #7
 800ed18:	701a      	strb	r2, [r3, #0]
	// Pick Left
	float pick_left_adjust[1][7] = {{2.5, 2.26, 0.75, 0, 0, 0, 0}};
 800ed1a:	4bcf      	ldr	r3, [pc, #828]	; (800f058 <LidarSetPos+0x350>)
 800ed1c:	f507 7407 	add.w	r4, r7, #540	; 0x21c
 800ed20:	461d      	mov	r5, r3
 800ed22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ed2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float pick_left_adjust_2[1][7] = {{1.0, 0, 0, -90, 0, 0, 0}};
 800ed2e:	4bcb      	ldr	r3, [pc, #812]	; (800f05c <LidarSetPos+0x354>)
 800ed30:	f507 7400 	add.w	r4, r7, #512	; 0x200
 800ed34:	461d      	mov	r5, r3
 800ed36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ed3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float bang_fence[1][7] = {{1.5, 0, 10, pp.real_z, 0, 0, 0}};
 800ed42:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ed46:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800ed4a:	f04f 0300 	mov.w	r3, #0
 800ed4e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800ed52:	4bc3      	ldr	r3, [pc, #780]	; (800f060 <LidarSetPos+0x358>)
 800ed54:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800ed58:	4bc2      	ldr	r3, [pc, #776]	; (800f064 <LidarSetPos+0x35c>)
 800ed5a:	691b      	ldr	r3, [r3, #16]
 800ed5c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800ed60:	f04f 0300 	mov.w	r3, #0
 800ed64:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800ed68:	f04f 0300 	mov.w	r3, #0
 800ed6c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800ed70:	f04f 0300 	mov.w	r3, #0
 800ed74:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc

	// Only offset 1 pole
	float pick_left_to_center_1[1][7] = {{1.0, 0, 10, -90, 0, 0, 0}};
 800ed78:	4bbb      	ldr	r3, [pc, #748]	; (800f068 <LidarSetPos+0x360>)
 800ed7a:	f507 74e4 	add.w	r4, r7, #456	; 0x1c8
 800ed7e:	461d      	mov	r5, r3
 800ed80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ed88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_1_to_center_2[1][7] = {{2.0, 1.76, 0, pp.real_z, 1, 0, 0}};
 800ed8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ed90:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800ed94:	4bb5      	ldr	r3, [pc, #724]	; (800f06c <LidarSetPos+0x364>)
 800ed96:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800ed9a:	f04f 0300 	mov.w	r3, #0
 800ed9e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800eda2:	4bb0      	ldr	r3, [pc, #704]	; (800f064 <LidarSetPos+0x35c>)
 800eda4:	691b      	ldr	r3, [r3, #16]
 800eda6:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800edaa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800edae:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800edb2:	f04f 0300 	mov.w	r3, #0
 800edb6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800edba:	f04f 0300 	mov.w	r3, #0
 800edbe:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	float center_2_to_center_1[1][7] = {{2.0, -1.76, 0, pp.real_z, 1, 0, 0}};
 800edc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800edc6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800edca:	4ba9      	ldr	r3, [pc, #676]	; (800f070 <LidarSetPos+0x368>)
 800edcc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800edd0:	f04f 0300 	mov.w	r3, #0
 800edd4:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800edd8:	4ba2      	ldr	r3, [pc, #648]	; (800f064 <LidarSetPos+0x35c>)
 800edda:	691b      	ldr	r3, [r3, #16]
 800eddc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800ede0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ede4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800ede8:	f04f 0300 	mov.w	r3, #0
 800edec:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800edf0:	f04f 0300 	mov.w	r3, #0
 800edf4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	float center_2_to_center[1][7] = {{2.0, 1.25, 0, pp.real_z, 1, 0, 0}};
 800edf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800edfc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800ee00:	4b9c      	ldr	r3, [pc, #624]	; (800f074 <LidarSetPos+0x36c>)
 800ee02:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800ee06:	f04f 0300 	mov.w	r3, #0
 800ee0a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800ee0e:	4b95      	ldr	r3, [pc, #596]	; (800f064 <LidarSetPos+0x35c>)
 800ee10:	691b      	ldr	r3, [r3, #16]
 800ee12:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800ee16:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ee1a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800ee1e:	f04f 0300 	mov.w	r3, #0
 800ee22:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800ee26:	f04f 0300 	mov.w	r3, #0
 800ee2a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	float center_to_center_2[1][7] = {{2.0, -1.34, 0, pp.real_z, 1, 0, 0}};
 800ee2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ee32:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800ee36:	4b90      	ldr	r3, [pc, #576]	; (800f078 <LidarSetPos+0x370>)
 800ee38:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800ee3c:	f04f 0300 	mov.w	r3, #0
 800ee40:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800ee44:	4b87      	ldr	r3, [pc, #540]	; (800f064 <LidarSetPos+0x35c>)
 800ee46:	691b      	ldr	r3, [r3, #16]
 800ee48:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800ee4c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ee50:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800ee54:	f04f 0300 	mov.w	r3, #0
 800ee58:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800ee5c:	f04f 0300 	mov.w	r3, #0
 800ee60:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	float center_to_center_3[1][7] = {{2.0, 1.20, 0, pp.real_z, 1, 0, 0}};
 800ee64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ee68:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800ee6c:	4b83      	ldr	r3, [pc, #524]	; (800f07c <LidarSetPos+0x374>)
 800ee6e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800ee72:	f04f 0300 	mov.w	r3, #0
 800ee76:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800ee7a:	4b7a      	ldr	r3, [pc, #488]	; (800f064 <LidarSetPos+0x35c>)
 800ee7c:	691b      	ldr	r3, [r3, #16]
 800ee7e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800ee82:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ee86:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800ee8a:	f04f 0300 	mov.w	r3, #0
 800ee8e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800ee92:	f04f 0300 	mov.w	r3, #0
 800ee96:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	float center_3_to_center[1][7] = {{2.0, -1.20, 0, pp.real_z, 1, 0, 0}};
 800ee9a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ee9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800eea2:	601a      	str	r2, [r3, #0]
 800eea4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800eea8:	4a75      	ldr	r2, [pc, #468]	; (800f080 <LidarSetPos+0x378>)
 800eeaa:	605a      	str	r2, [r3, #4]
 800eeac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800eeb0:	f04f 0200 	mov.w	r2, #0
 800eeb4:	609a      	str	r2, [r3, #8]
 800eeb6:	4b6b      	ldr	r3, [pc, #428]	; (800f064 <LidarSetPos+0x35c>)
 800eeb8:	691a      	ldr	r2, [r3, #16]
 800eeba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800eebe:	60da      	str	r2, [r3, #12]
 800eec0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800eec4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800eec8:	611a      	str	r2, [r3, #16]
 800eeca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800eece:	f04f 0200 	mov.w	r2, #0
 800eed2:	615a      	str	r2, [r3, #20]
 800eed4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800eed8:	f04f 0200 	mov.w	r2, #0
 800eedc:	619a      	str	r2, [r3, #24]
	float center_3_to_center_4[1][7] = {{2.0, 1.86, 0, pp.real_z, 1, 0, 0}};
 800eede:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800eee2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800eee6:	601a      	str	r2, [r3, #0]
 800eee8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800eeec:	4a65      	ldr	r2, [pc, #404]	; (800f084 <LidarSetPos+0x37c>)
 800eeee:	605a      	str	r2, [r3, #4]
 800eef0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800eef4:	f04f 0200 	mov.w	r2, #0
 800eef8:	609a      	str	r2, [r3, #8]
 800eefa:	4b5a      	ldr	r3, [pc, #360]	; (800f064 <LidarSetPos+0x35c>)
 800eefc:	691a      	ldr	r2, [r3, #16]
 800eefe:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800ef02:	60da      	str	r2, [r3, #12]
 800ef04:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800ef08:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ef0c:	611a      	str	r2, [r3, #16]
 800ef0e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800ef12:	f04f 0200 	mov.w	r2, #0
 800ef16:	615a      	str	r2, [r3, #20]
 800ef18:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800ef1c:	f04f 0200 	mov.w	r2, #0
 800ef20:	619a      	str	r2, [r3, #24]
	float center_4_to_center_3[1][7] = {{2.0, -1.87, 0, pp.real_z, 1, 0, 0}};
 800ef22:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800ef26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ef2a:	601a      	str	r2, [r3, #0]
 800ef2c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800ef30:	4a55      	ldr	r2, [pc, #340]	; (800f088 <LidarSetPos+0x380>)
 800ef32:	605a      	str	r2, [r3, #4]
 800ef34:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800ef38:	f04f 0200 	mov.w	r2, #0
 800ef3c:	609a      	str	r2, [r3, #8]
 800ef3e:	4b49      	ldr	r3, [pc, #292]	; (800f064 <LidarSetPos+0x35c>)
 800ef40:	691a      	ldr	r2, [r3, #16]
 800ef42:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800ef46:	60da      	str	r2, [r3, #12]
 800ef48:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800ef4c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ef50:	611a      	str	r2, [r3, #16]
 800ef52:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800ef56:	f04f 0200 	mov.w	r2, #0
 800ef5a:	615a      	str	r2, [r3, #20]
 800ef5c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800ef60:	f04f 0200 	mov.w	r2, #0
 800ef64:	619a      	str	r2, [r3, #24]

	// Offset 2 poles
	float center_1_to_center[1][7] = {{2.0, 2.96, 0, pp.real_z, 1, 0, 0}};
 800ef66:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ef6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ef6e:	601a      	str	r2, [r3, #0]
 800ef70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ef74:	4a45      	ldr	r2, [pc, #276]	; (800f08c <LidarSetPos+0x384>)
 800ef76:	605a      	str	r2, [r3, #4]
 800ef78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ef7c:	f04f 0200 	mov.w	r2, #0
 800ef80:	609a      	str	r2, [r3, #8]
 800ef82:	4b38      	ldr	r3, [pc, #224]	; (800f064 <LidarSetPos+0x35c>)
 800ef84:	691a      	ldr	r2, [r3, #16]
 800ef86:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ef8a:	60da      	str	r2, [r3, #12]
 800ef8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ef90:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ef94:	611a      	str	r2, [r3, #16]
 800ef96:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ef9a:	f04f 0200 	mov.w	r2, #0
 800ef9e:	615a      	str	r2, [r3, #20]
 800efa0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800efa4:	f04f 0200 	mov.w	r2, #0
 800efa8:	619a      	str	r2, [r3, #24]
	float center_to_center_1[1][7] = {{2.0, -3.07, 0, pp.real_z, 1, 0, 0}};
 800efaa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800efae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800efb2:	601a      	str	r2, [r3, #0]
 800efb4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800efb8:	4a35      	ldr	r2, [pc, #212]	; (800f090 <LidarSetPos+0x388>)
 800efba:	605a      	str	r2, [r3, #4]
 800efbc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800efc0:	f04f 0200 	mov.w	r2, #0
 800efc4:	609a      	str	r2, [r3, #8]
 800efc6:	4b27      	ldr	r3, [pc, #156]	; (800f064 <LidarSetPos+0x35c>)
 800efc8:	691a      	ldr	r2, [r3, #16]
 800efca:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800efce:	60da      	str	r2, [r3, #12]
 800efd0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800efd4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800efd8:	611a      	str	r2, [r3, #16]
 800efda:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800efde:	f04f 0200 	mov.w	r2, #0
 800efe2:	615a      	str	r2, [r3, #20]
 800efe4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800efe8:	f04f 0200 	mov.w	r2, #0
 800efec:	619a      	str	r2, [r3, #24]
	float center_to_center_4[1][7] = {{2.0, 3.06, 0, pp.real_z, 1, 0, 0}};
 800efee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800eff2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800eff6:	601a      	str	r2, [r3, #0]
 800eff8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800effc:	4a25      	ldr	r2, [pc, #148]	; (800f094 <LidarSetPos+0x38c>)
 800effe:	605a      	str	r2, [r3, #4]
 800f000:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800f004:	f04f 0200 	mov.w	r2, #0
 800f008:	609a      	str	r2, [r3, #8]
 800f00a:	4b16      	ldr	r3, [pc, #88]	; (800f064 <LidarSetPos+0x35c>)
 800f00c:	691a      	ldr	r2, [r3, #16]
 800f00e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800f012:	60da      	str	r2, [r3, #12]
 800f014:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800f018:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f01c:	611a      	str	r2, [r3, #16]
 800f01e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800f022:	f04f 0200 	mov.w	r2, #0
 800f026:	615a      	str	r2, [r3, #20]
 800f028:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800f02c:	f04f 0200 	mov.w	r2, #0
 800f030:	619a      	str	r2, [r3, #24]
	float center_4_to_center[1][7] = {{2.0, -3.06, 0, pp.real_z, 1, 0, 0}};
 800f032:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800f036:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f03a:	601a      	str	r2, [r3, #0]
 800f03c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800f040:	4a15      	ldr	r2, [pc, #84]	; (800f098 <LidarSetPos+0x390>)
 800f042:	605a      	str	r2, [r3, #4]
 800f044:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800f048:	f04f 0200 	mov.w	r2, #0
 800f04c:	609a      	str	r2, [r3, #8]
 800f04e:	4b05      	ldr	r3, [pc, #20]	; (800f064 <LidarSetPos+0x35c>)
 800f050:	691a      	ldr	r2, [r3, #16]
 800f052:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800f056:	e021      	b.n	800f09c <LidarSetPos+0x394>
 800f058:	0802092c 	.word	0x0802092c
 800f05c:	08020948 	.word	0x08020948
 800f060:	41200000 	.word	0x41200000
 800f064:	2000718c 	.word	0x2000718c
 800f068:	08020964 	.word	0x08020964
 800f06c:	3fe147ae 	.word	0x3fe147ae
 800f070:	bfe147ae 	.word	0xbfe147ae
 800f074:	3fa00000 	.word	0x3fa00000
 800f078:	bfab851f 	.word	0xbfab851f
 800f07c:	3f99999a 	.word	0x3f99999a
 800f080:	bf99999a 	.word	0xbf99999a
 800f084:	3fee147b 	.word	0x3fee147b
 800f088:	bfef5c29 	.word	0xbfef5c29
 800f08c:	403d70a4 	.word	0x403d70a4
 800f090:	c0447ae1 	.word	0xc0447ae1
 800f094:	4043d70a 	.word	0x4043d70a
 800f098:	c043d70a 	.word	0xc043d70a
 800f09c:	60da      	str	r2, [r3, #12]
 800f09e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800f0a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f0a6:	611a      	str	r2, [r3, #16]
 800f0a8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800f0ac:	f04f 0200 	mov.w	r2, #0
 800f0b0:	615a      	str	r2, [r3, #20]
 800f0b2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800f0b6:	f04f 0200 	mov.w	r2, #0
 800f0ba:	619a      	str	r2, [r3, #24]
	float center_2_to_center_3[1][7] = {{2.0, 2.4, 0, pp.real_z, 1, 0, 0}};
 800f0bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f0c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f0c4:	601a      	str	r2, [r3, #0]
 800f0c6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f0ca:	4abd      	ldr	r2, [pc, #756]	; (800f3c0 <LidarSetPos+0x6b8>)
 800f0cc:	605a      	str	r2, [r3, #4]
 800f0ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f0d2:	f04f 0200 	mov.w	r2, #0
 800f0d6:	609a      	str	r2, [r3, #8]
 800f0d8:	4bba      	ldr	r3, [pc, #744]	; (800f3c4 <LidarSetPos+0x6bc>)
 800f0da:	691a      	ldr	r2, [r3, #16]
 800f0dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f0e0:	60da      	str	r2, [r3, #12]
 800f0e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f0e6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f0ea:	611a      	str	r2, [r3, #16]
 800f0ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f0f0:	f04f 0200 	mov.w	r2, #0
 800f0f4:	615a      	str	r2, [r3, #20]
 800f0f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f0fa:	f04f 0200 	mov.w	r2, #0
 800f0fe:	619a      	str	r2, [r3, #24]
	float center_3_to_center_2[1][7] = {{2.0, -2.4, 0, pp.real_z, 1, 0, 0}};
 800f100:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f104:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f108:	601a      	str	r2, [r3, #0]
 800f10a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f10e:	4aae      	ldr	r2, [pc, #696]	; (800f3c8 <LidarSetPos+0x6c0>)
 800f110:	605a      	str	r2, [r3, #4]
 800f112:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f116:	f04f 0200 	mov.w	r2, #0
 800f11a:	609a      	str	r2, [r3, #8]
 800f11c:	4ba9      	ldr	r3, [pc, #676]	; (800f3c4 <LidarSetPos+0x6bc>)
 800f11e:	691a      	ldr	r2, [r3, #16]
 800f120:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f124:	60da      	str	r2, [r3, #12]
 800f126:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f12a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f12e:	611a      	str	r2, [r3, #16]
 800f130:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f134:	f04f 0200 	mov.w	r2, #0
 800f138:	615a      	str	r2, [r3, #20]
 800f13a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f13e:	f04f 0200 	mov.w	r2, #0
 800f142:	619a      	str	r2, [r3, #24]

	float pick_right_to_center_4_servo[1][7] = {{4.0, 0, 0.5, -90, 0, 0, 0}};
 800f144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f148:	4aa0      	ldr	r2, [pc, #640]	; (800f3cc <LidarSetPos+0x6c4>)
 800f14a:	461c      	mov	r4, r3
 800f14c:	4615      	mov	r5, r2
 800f14e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f150:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f152:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f156:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float pick_right_to_center_4[1][7] = {{2.5, -2.4, 0.2, -90, 1, 0, 0}};
 800f15a:	f107 0308 	add.w	r3, r7, #8
 800f15e:	4a9c      	ldr	r2, [pc, #624]	; (800f3d0 <LidarSetPos+0x6c8>)
 800f160:	461c      	mov	r4, r3
 800f162:	4615      	mov	r5, r2
 800f164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f168:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f16c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	switch(pose) // Target Pose
 800f170:	1dfb      	adds	r3, r7, #7
 800f172:	781b      	ldrb	r3, [r3, #0]
 800f174:	3b02      	subs	r3, #2
 800f176:	2b07      	cmp	r3, #7
 800f178:	f201 826b 	bhi.w	8010652 <LidarSetPos+0x194a>
 800f17c:	a201      	add	r2, pc, #4	; (adr r2, 800f184 <LidarSetPos+0x47c>)
 800f17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f182:	bf00      	nop
 800f184:	0800f1a5 	.word	0x0800f1a5
 800f188:	0800f213 	.word	0x0800f213
 800f18c:	0800f5a7 	.word	0x0800f5a7
 800f190:	0800f943 	.word	0x0800f943
 800f194:	0800fde7 	.word	0x0800fde7
 800f198:	08010185 	.word	0x08010185
 800f19c:	0801057b 	.word	0x0801057b
 800f1a0:	080105e9 	.word	0x080105e9
	{
		case UPPER_LEFT:
			switch(lidar->pos) // Self Pose
 800f1a4:	463b      	mov	r3, r7
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f1ac:	3b01      	subs	r3, #1
 800f1ae:	2b08      	cmp	r3, #8
 800f1b0:	d82c      	bhi.n	800f20c <LidarSetPos+0x504>
 800f1b2:	a201      	add	r2, pc, #4	; (adr r2, 800f1b8 <LidarSetPos+0x4b0>)
 800f1b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1b8:	0800f1dd 	.word	0x0800f1dd
 800f1bc:	0800f20d 	.word	0x0800f20d
 800f1c0:	0800f20d 	.word	0x0800f20d
 800f1c4:	0800f20d 	.word	0x0800f20d
 800f1c8:	0800f1f5 	.word	0x0800f1f5
 800f1cc:	0800f20d 	.word	0x0800f20d
 800f1d0:	0800f20d 	.word	0x0800f20d
 800f1d4:	0800f201 	.word	0x0800f201
 800f1d8:	0800f1e9 	.word	0x0800f1e9
			{
				case PICK_LEFT:
					lidar->pos = UPPER_LEFT;
 800f1dc:	463b      	mov	r3, r7
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	2202      	movs	r2, #2
 800f1e2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f1e6:	e012      	b.n	800f20e <LidarSetPos+0x506>

				case PICK_RIGHT:
					lidar->pos = UPPER_LEFT;
 800f1e8:	463b      	mov	r3, r7
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	2202      	movs	r2, #2
 800f1ee:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f1f2:	e00c      	b.n	800f20e <LidarSetPos+0x506>

				case CENTER:
					lidar->pos = UPPER_LEFT;
 800f1f4:	463b      	mov	r3, r7
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	2202      	movs	r2, #2
 800f1fa:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f1fe:	e006      	b.n	800f20e <LidarSetPos+0x506>

				case UPPER_RIGHT:
					lidar->pos = UPPER_LEFT;
 800f200:	463b      	mov	r3, r7
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	2202      	movs	r2, #2
 800f206:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f20a:	e000      	b.n	800f20e <LidarSetPos+0x506>

				default:
					break;
 800f20c:	bf00      	nop

			}
			break;
 800f20e:	f001 ba21 	b.w	8010654 <LidarSetPos+0x194c>

		case CENTER_1:

			switch(lidar->pos) // Self Pose
 800f212:	463b      	mov	r3, r7
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f21a:	3b01      	subs	r3, #1
 800f21c:	2b08      	cmp	r3, #8
 800f21e:	f200 81b6 	bhi.w	800f58e <LidarSetPos+0x886>
 800f222:	a201      	add	r2, pc, #4	; (adr r2, 800f228 <LidarSetPos+0x520>)
 800f224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f228:	0800f24d 	.word	0x0800f24d
 800f22c:	0800f37f 	.word	0x0800f37f
 800f230:	0800f58f 	.word	0x0800f58f
 800f234:	0800f397 	.word	0x0800f397
 800f238:	0800f4a7 	.word	0x0800f4a7
 800f23c:	0800f58f 	.word	0x0800f58f
 800f240:	0800f58f 	.word	0x0800f58f
 800f244:	0800f38b 	.word	0x0800f38b
 800f248:	0800f373 	.word	0x0800f373
			{
				case PICK_LEFT:
					stick_fence = 0;
 800f24c:	4b61      	ldr	r3, [pc, #388]	; (800f3d4 <LidarSetPos+0x6cc>)
 800f24e:	2200      	movs	r2, #0
 800f250:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.165;
 800f252:	4b61      	ldr	r3, [pc, #388]	; (800f3d8 <LidarSetPos+0x6d0>)
 800f254:	4a61      	ldr	r2, [pc, #388]	; (800f3dc <LidarSetPos+0x6d4>)
 800f256:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800f258:	f7fc fc28 	bl	800baac <ResetCoordinate>
					PP_start(pick_left_adjust, 1, &pp);
 800f25c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800f260:	4a58      	ldr	r2, [pc, #352]	; (800f3c4 <LidarSetPos+0x6bc>)
 800f262:	2101      	movs	r1, #1
 800f264:	4618      	mov	r0, r3
 800f266:	f7f6 fb26 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 800f26a:	e00d      	b.n	800f288 <LidarSetPos+0x580>
					{
						if(ps4.button == SQUARE)
 800f26c:	4b5c      	ldr	r3, [pc, #368]	; (800f3e0 <LidarSetPos+0x6d8>)
 800f26e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f274:	d108      	bne.n	800f288 <LidarSetPos+0x580>
						{
							while(ps4.button == SQUARE);
 800f276:	bf00      	nop
 800f278:	4b59      	ldr	r3, [pc, #356]	; (800f3e0 <LidarSetPos+0x6d8>)
 800f27a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f27c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f280:	d0fa      	beq.n	800f278 <LidarSetPos+0x570>
							PP_stop(&pp);
 800f282:	4850      	ldr	r0, [pc, #320]	; (800f3c4 <LidarSetPos+0x6bc>)
 800f284:	f7f6 fd51 	bl	8005d2a <PP_stop>
					while(pp.pp_start)
 800f288:	4b4e      	ldr	r3, [pc, #312]	; (800f3c4 <LidarSetPos+0x6bc>)
 800f28a:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f28e:	f003 0301 	and.w	r3, r3, #1
 800f292:	b2db      	uxtb	r3, r3
 800f294:	2b00      	cmp	r3, #0
 800f296:	d1e9      	bne.n	800f26c <LidarSetPos+0x564>
						}
					}
					PP_start(pick_left_adjust_2, 1, &pp);
 800f298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800f29c:	4a49      	ldr	r2, [pc, #292]	; (800f3c4 <LidarSetPos+0x6bc>)
 800f29e:	2101      	movs	r1, #1
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f7f6 fb08 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 800f2a6:	e00d      	b.n	800f2c4 <LidarSetPos+0x5bc>
					{
						if(ps4.button == SQUARE)
 800f2a8:	4b4d      	ldr	r3, [pc, #308]	; (800f3e0 <LidarSetPos+0x6d8>)
 800f2aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f2b0:	d108      	bne.n	800f2c4 <LidarSetPos+0x5bc>
						{
							while(ps4.button == SQUARE);
 800f2b2:	bf00      	nop
 800f2b4:	4b4a      	ldr	r3, [pc, #296]	; (800f3e0 <LidarSetPos+0x6d8>)
 800f2b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f2bc:	d0fa      	beq.n	800f2b4 <LidarSetPos+0x5ac>
							PP_stop(&pp);
 800f2be:	4841      	ldr	r0, [pc, #260]	; (800f3c4 <LidarSetPos+0x6bc>)
 800f2c0:	f7f6 fd33 	bl	8005d2a <PP_stop>
					while(pp.pp_start)
 800f2c4:	4b3f      	ldr	r3, [pc, #252]	; (800f3c4 <LidarSetPos+0x6bc>)
 800f2c6:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f2ca:	f003 0301 	and.w	r3, r3, #1
 800f2ce:	b2db      	uxtb	r3, r3
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d1e9      	bne.n	800f2a8 <LidarSetPos+0x5a0>
						}
					}
					lidar->pos = CENTER_1;
 800f2d4:	463b      	mov	r3, r7
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	2203      	movs	r2, #3
 800f2da:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd

					// Stick to fence
					PP_start(pick_left_to_center_1, 1, &pp);
 800f2de:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800f2e2:	4a38      	ldr	r2, [pc, #224]	; (800f3c4 <LidarSetPos+0x6bc>)
 800f2e4:	2101      	movs	r1, #1
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f7f6 fae5 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 800f2ec:	e028      	b.n	800f340 <LidarSetPos+0x638>
					{
						if(ps4.button == SQUARE)
 800f2ee:	4b3c      	ldr	r3, [pc, #240]	; (800f3e0 <LidarSetPos+0x6d8>)
 800f2f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f2f6:	d112      	bne.n	800f31e <LidarSetPos+0x616>
						{
							while(ps4.button == SQUARE);
 800f2f8:	bf00      	nop
 800f2fa:	4b39      	ldr	r3, [pc, #228]	; (800f3e0 <LidarSetPos+0x6d8>)
 800f2fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f302:	d0fa      	beq.n	800f2fa <LidarSetPos+0x5f2>
							PP_stop(&pp);
 800f304:	482f      	ldr	r0, [pc, #188]	; (800f3c4 <LidarSetPos+0x6bc>)
 800f306:	f7f6 fd10 	bl	8005d2a <PP_stop>
							lidar->pos = PICK_LEFT;
 800f30a:	463b      	mov	r3, r7
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	2201      	movs	r2, #1
 800f310:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = PICK_LEFT;
 800f314:	463b      	mov	r3, r7
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	2201      	movs	r2, #1
 800f31a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800f31e:	2108      	movs	r1, #8
 800f320:	4830      	ldr	r0, [pc, #192]	; (800f3e4 <LidarSetPos+0x6dc>)
 800f322:	f003 fd8f 	bl	8012e44 <HAL_GPIO_ReadPin>
 800f326:	4603      	mov	r3, r0
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d109      	bne.n	800f340 <LidarSetPos+0x638>
 800f32c:	2110      	movs	r1, #16
 800f32e:	482d      	ldr	r0, [pc, #180]	; (800f3e4 <LidarSetPos+0x6dc>)
 800f330:	f003 fd88 	bl	8012e44 <HAL_GPIO_ReadPin>
 800f334:	4603      	mov	r3, r0
 800f336:	2b00      	cmp	r3, #0
 800f338:	d102      	bne.n	800f340 <LidarSetPos+0x638>
							PP_stop(&pp);
 800f33a:	4822      	ldr	r0, [pc, #136]	; (800f3c4 <LidarSetPos+0x6bc>)
 800f33c:	f7f6 fcf5 	bl	8005d2a <PP_stop>
					while(pp.pp_start)
 800f340:	4b20      	ldr	r3, [pc, #128]	; (800f3c4 <LidarSetPos+0x6bc>)
 800f342:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f346:	f003 0301 	and.w	r3, r3, #1
 800f34a:	b2db      	uxtb	r3, r3
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d1ce      	bne.n	800f2ee <LidarSetPos+0x5e6>
					}
//					Shot();
					stick_fence = 1;
 800f350:	4b20      	ldr	r3, [pc, #128]	; (800f3d4 <LidarSetPos+0x6cc>)
 800f352:	2201      	movs	r2, #1
 800f354:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800f356:	463b      	mov	r3, r7
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f35e:	1dfa      	adds	r2, r7, #7
 800f360:	7812      	ldrb	r2, [r2, #0]
 800f362:	429a      	cmp	r2, r3
 800f364:	f040 8116 	bne.w	800f594 <LidarSetPos+0x88c>
						LidarAdjust(lidar);
 800f368:	463b      	mov	r3, r7
 800f36a:	6818      	ldr	r0, [r3, #0]
 800f36c:	f001 f980 	bl	8010670 <LidarAdjust>
					break;
 800f370:	e110      	b.n	800f594 <LidarSetPos+0x88c>

				case PICK_RIGHT:
					lidar->pos = CENTER_1;
 800f372:	463b      	mov	r3, r7
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	2203      	movs	r2, #3
 800f378:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f37c:	e111      	b.n	800f5a2 <LidarSetPos+0x89a>

				case UPPER_LEFT:
					lidar->pos = CENTER_1;
 800f37e:	463b      	mov	r3, r7
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	2203      	movs	r2, #3
 800f384:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f388:	e10b      	b.n	800f5a2 <LidarSetPos+0x89a>

				case UPPER_RIGHT:
					lidar->pos = CENTER_1;
 800f38a:	463b      	mov	r3, r7
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	2203      	movs	r2, #3
 800f390:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f394:	e105      	b.n	800f5a2 <LidarSetPos+0x89a>

				case CENTER_2:
					stick_fence = 0;
 800f396:	4b0f      	ldr	r3, [pc, #60]	; (800f3d4 <LidarSetPos+0x6cc>)
 800f398:	2200      	movs	r2, #0
 800f39a:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.165;
 800f39c:	4b0e      	ldr	r3, [pc, #56]	; (800f3d8 <LidarSetPos+0x6d0>)
 800f39e:	4a0f      	ldr	r2, [pc, #60]	; (800f3dc <LidarSetPos+0x6d4>)
 800f3a0:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800f3a2:	f7fc fb83 	bl	800baac <ResetCoordinate>
					lidar->pos = CENTER_1;
 800f3a6:	463b      	mov	r3, r7
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	2203      	movs	r2, #3
 800f3ac:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_2_to_center_1, 1, &pp);
 800f3b0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800f3b4:	4a03      	ldr	r2, [pc, #12]	; (800f3c4 <LidarSetPos+0x6bc>)
 800f3b6:	2101      	movs	r1, #1
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f7f6 fa7c 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 800f3be:	e02b      	b.n	800f418 <LidarSetPos+0x710>
 800f3c0:	4019999a 	.word	0x4019999a
 800f3c4:	2000718c 	.word	0x2000718c
 800f3c8:	c019999a 	.word	0xc019999a
 800f3cc:	08020980 	.word	0x08020980
 800f3d0:	0802099c 	.word	0x0802099c
 800f3d4:	20007784 	.word	0x20007784
 800f3d8:	20007848 	.word	0x20007848
 800f3dc:	3e28f5c3 	.word	0x3e28f5c3
 800f3e0:	2000a3fc 	.word	0x2000a3fc
 800f3e4:	40020c00 	.word	0x40020c00
					{
						if(ps4.button == SQUARE)
 800f3e8:	4bb1      	ldr	r3, [pc, #708]	; (800f6b0 <LidarSetPos+0x9a8>)
 800f3ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3f0:	d112      	bne.n	800f418 <LidarSetPos+0x710>
						{
							while(ps4.button == SQUARE);
 800f3f2:	bf00      	nop
 800f3f4:	4bae      	ldr	r3, [pc, #696]	; (800f6b0 <LidarSetPos+0x9a8>)
 800f3f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3fc:	d0fa      	beq.n	800f3f4 <LidarSetPos+0x6ec>
							PP_stop(&pp);
 800f3fe:	48ad      	ldr	r0, [pc, #692]	; (800f6b4 <LidarSetPos+0x9ac>)
 800f400:	f7f6 fc93 	bl	8005d2a <PP_stop>
							lidar->pos = CENTER_2; // PP Failed
 800f404:	463b      	mov	r3, r7
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	2204      	movs	r2, #4
 800f40a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = CENTER_2;
 800f40e:	463b      	mov	r3, r7
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	2204      	movs	r2, #4
 800f414:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
					while(pp.pp_start)
 800f418:	4ba6      	ldr	r3, [pc, #664]	; (800f6b4 <LidarSetPos+0x9ac>)
 800f41a:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f41e:	f003 0301 	and.w	r3, r3, #1
 800f422:	b2db      	uxtb	r3, r3
 800f424:	2b00      	cmp	r3, #0
 800f426:	d1df      	bne.n	800f3e8 <LidarSetPos+0x6e0>
						}
					}

					PP_start(bang_fence, 1, &pp);
 800f428:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800f42c:	4aa1      	ldr	r2, [pc, #644]	; (800f6b4 <LidarSetPos+0x9ac>)
 800f42e:	2101      	movs	r1, #1
 800f430:	4618      	mov	r0, r3
 800f432:	f7f6 fa40 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 800f436:	e01e      	b.n	800f476 <LidarSetPos+0x76e>
					{
						if(ps4.button == SQUARE)
 800f438:	4b9d      	ldr	r3, [pc, #628]	; (800f6b0 <LidarSetPos+0x9a8>)
 800f43a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f43c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f440:	d108      	bne.n	800f454 <LidarSetPos+0x74c>
						{
							while(ps4.button == SQUARE);
 800f442:	bf00      	nop
 800f444:	4b9a      	ldr	r3, [pc, #616]	; (800f6b0 <LidarSetPos+0x9a8>)
 800f446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f44c:	d0fa      	beq.n	800f444 <LidarSetPos+0x73c>
							PP_stop(&pp);
 800f44e:	4899      	ldr	r0, [pc, #612]	; (800f6b4 <LidarSetPos+0x9ac>)
 800f450:	f7f6 fc6b 	bl	8005d2a <PP_stop>
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800f454:	2108      	movs	r1, #8
 800f456:	4898      	ldr	r0, [pc, #608]	; (800f6b8 <LidarSetPos+0x9b0>)
 800f458:	f003 fcf4 	bl	8012e44 <HAL_GPIO_ReadPin>
 800f45c:	4603      	mov	r3, r0
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d109      	bne.n	800f476 <LidarSetPos+0x76e>
 800f462:	2110      	movs	r1, #16
 800f464:	4894      	ldr	r0, [pc, #592]	; (800f6b8 <LidarSetPos+0x9b0>)
 800f466:	f003 fced 	bl	8012e44 <HAL_GPIO_ReadPin>
 800f46a:	4603      	mov	r3, r0
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d102      	bne.n	800f476 <LidarSetPos+0x76e>
							PP_stop(&pp);
 800f470:	4890      	ldr	r0, [pc, #576]	; (800f6b4 <LidarSetPos+0x9ac>)
 800f472:	f7f6 fc5a 	bl	8005d2a <PP_stop>
					while(pp.pp_start)
 800f476:	4b8f      	ldr	r3, [pc, #572]	; (800f6b4 <LidarSetPos+0x9ac>)
 800f478:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f47c:	f003 0301 	and.w	r3, r3, #1
 800f480:	b2db      	uxtb	r3, r3
 800f482:	2b00      	cmp	r3, #0
 800f484:	d1d8      	bne.n	800f438 <LidarSetPos+0x730>
					}
					stick_fence = 1;
 800f486:	4b8d      	ldr	r3, [pc, #564]	; (800f6bc <LidarSetPos+0x9b4>)
 800f488:	2201      	movs	r2, #1
 800f48a:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800f48c:	463b      	mov	r3, r7
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f494:	1dfa      	adds	r2, r7, #7
 800f496:	7812      	ldrb	r2, [r2, #0]
 800f498:	429a      	cmp	r2, r3
 800f49a:	d17e      	bne.n	800f59a <LidarSetPos+0x892>
						LidarAdjust(lidar);
 800f49c:	463b      	mov	r3, r7
 800f49e:	6818      	ldr	r0, [r3, #0]
 800f4a0:	f001 f8e6 	bl	8010670 <LidarAdjust>
					break;
 800f4a4:	e079      	b.n	800f59a <LidarSetPos+0x892>

				case CENTER:
					stick_fence = 0;
 800f4a6:	4b85      	ldr	r3, [pc, #532]	; (800f6bc <LidarSetPos+0x9b4>)
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.165;
 800f4ac:	4b84      	ldr	r3, [pc, #528]	; (800f6c0 <LidarSetPos+0x9b8>)
 800f4ae:	4a85      	ldr	r2, [pc, #532]	; (800f6c4 <LidarSetPos+0x9bc>)
 800f4b0:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800f4b2:	f7fc fafb 	bl	800baac <ResetCoordinate>
					lidar->pos = CENTER_1;
 800f4b6:	463b      	mov	r3, r7
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	2203      	movs	r2, #3
 800f4bc:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_to_center_1, 1, &pp);
 800f4c0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800f4c4:	4a7b      	ldr	r2, [pc, #492]	; (800f6b4 <LidarSetPos+0x9ac>)
 800f4c6:	2101      	movs	r1, #1
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f7f6 f9f4 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 800f4ce:	e017      	b.n	800f500 <LidarSetPos+0x7f8>
					{
						if(ps4.button == SQUARE)
 800f4d0:	4b77      	ldr	r3, [pc, #476]	; (800f6b0 <LidarSetPos+0x9a8>)
 800f4d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f4d8:	d112      	bne.n	800f500 <LidarSetPos+0x7f8>
						{
							while(ps4.button == SQUARE);
 800f4da:	bf00      	nop
 800f4dc:	4b74      	ldr	r3, [pc, #464]	; (800f6b0 <LidarSetPos+0x9a8>)
 800f4de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f4e4:	d0fa      	beq.n	800f4dc <LidarSetPos+0x7d4>
							PP_stop(&pp);
 800f4e6:	4873      	ldr	r0, [pc, #460]	; (800f6b4 <LidarSetPos+0x9ac>)
 800f4e8:	f7f6 fc1f 	bl	8005d2a <PP_stop>
							lidar->pos = CENTER; // PP Failed
 800f4ec:	463b      	mov	r3, r7
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	2205      	movs	r2, #5
 800f4f2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = CENTER;
 800f4f6:	463b      	mov	r3, r7
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	2205      	movs	r2, #5
 800f4fc:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
					while(pp.pp_start)
 800f500:	4b6c      	ldr	r3, [pc, #432]	; (800f6b4 <LidarSetPos+0x9ac>)
 800f502:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f506:	f003 0301 	and.w	r3, r3, #1
 800f50a:	b2db      	uxtb	r3, r3
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d1df      	bne.n	800f4d0 <LidarSetPos+0x7c8>
						}
					}

					PP_start(bang_fence, 1, &pp);
 800f510:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800f514:	4a67      	ldr	r2, [pc, #412]	; (800f6b4 <LidarSetPos+0x9ac>)
 800f516:	2101      	movs	r1, #1
 800f518:	4618      	mov	r0, r3
 800f51a:	f7f6 f9cc 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 800f51e:	e01e      	b.n	800f55e <LidarSetPos+0x856>
					{
						if(ps4.button == SQUARE)
 800f520:	4b63      	ldr	r3, [pc, #396]	; (800f6b0 <LidarSetPos+0x9a8>)
 800f522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f528:	d108      	bne.n	800f53c <LidarSetPos+0x834>
						{
							while(ps4.button == SQUARE);
 800f52a:	bf00      	nop
 800f52c:	4b60      	ldr	r3, [pc, #384]	; (800f6b0 <LidarSetPos+0x9a8>)
 800f52e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f534:	d0fa      	beq.n	800f52c <LidarSetPos+0x824>
							PP_stop(&pp);
 800f536:	485f      	ldr	r0, [pc, #380]	; (800f6b4 <LidarSetPos+0x9ac>)
 800f538:	f7f6 fbf7 	bl	8005d2a <PP_stop>
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800f53c:	2108      	movs	r1, #8
 800f53e:	485e      	ldr	r0, [pc, #376]	; (800f6b8 <LidarSetPos+0x9b0>)
 800f540:	f003 fc80 	bl	8012e44 <HAL_GPIO_ReadPin>
 800f544:	4603      	mov	r3, r0
 800f546:	2b00      	cmp	r3, #0
 800f548:	d109      	bne.n	800f55e <LidarSetPos+0x856>
 800f54a:	2110      	movs	r1, #16
 800f54c:	485a      	ldr	r0, [pc, #360]	; (800f6b8 <LidarSetPos+0x9b0>)
 800f54e:	f003 fc79 	bl	8012e44 <HAL_GPIO_ReadPin>
 800f552:	4603      	mov	r3, r0
 800f554:	2b00      	cmp	r3, #0
 800f556:	d102      	bne.n	800f55e <LidarSetPos+0x856>
							PP_stop(&pp);
 800f558:	4856      	ldr	r0, [pc, #344]	; (800f6b4 <LidarSetPos+0x9ac>)
 800f55a:	f7f6 fbe6 	bl	8005d2a <PP_stop>
					while(pp.pp_start)
 800f55e:	4b55      	ldr	r3, [pc, #340]	; (800f6b4 <LidarSetPos+0x9ac>)
 800f560:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f564:	f003 0301 	and.w	r3, r3, #1
 800f568:	b2db      	uxtb	r3, r3
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d1d8      	bne.n	800f520 <LidarSetPos+0x818>
					}
					stick_fence = 1;
 800f56e:	4b53      	ldr	r3, [pc, #332]	; (800f6bc <LidarSetPos+0x9b4>)
 800f570:	2201      	movs	r2, #1
 800f572:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800f574:	463b      	mov	r3, r7
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f57c:	1dfa      	adds	r2, r7, #7
 800f57e:	7812      	ldrb	r2, [r2, #0]
 800f580:	429a      	cmp	r2, r3
 800f582:	d10d      	bne.n	800f5a0 <LidarSetPos+0x898>
						LidarAdjust(lidar);
 800f584:	463b      	mov	r3, r7
 800f586:	6818      	ldr	r0, [r3, #0]
 800f588:	f001 f872 	bl	8010670 <LidarAdjust>
					break;
 800f58c:	e008      	b.n	800f5a0 <LidarSetPos+0x898>

				default:
					break;
 800f58e:	bf00      	nop
 800f590:	f001 b860 	b.w	8010654 <LidarSetPos+0x194c>
					break;
 800f594:	bf00      	nop
 800f596:	f001 b85d 	b.w	8010654 <LidarSetPos+0x194c>
					break;
 800f59a:	bf00      	nop
 800f59c:	f001 b85a 	b.w	8010654 <LidarSetPos+0x194c>
					break;
 800f5a0:	bf00      	nop
			}
			break;
 800f5a2:	f001 b857 	b.w	8010654 <LidarSetPos+0x194c>

		case CENTER_2:
			switch(lidar->pos) // Self Pose
 800f5a6:	463b      	mov	r3, r7
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f5ae:	3b01      	subs	r3, #1
 800f5b0:	2b08      	cmp	r3, #8
 800f5b2:	f200 81bd 	bhi.w	800f930 <LidarSetPos+0xc28>
 800f5b6:	a201      	add	r2, pc, #4	; (adr r2, 800f5bc <LidarSetPos+0x8b4>)
 800f5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5bc:	0800f5e1 	.word	0x0800f5e1
 800f5c0:	0800f5f9 	.word	0x0800f5f9
 800f5c4:	0800f611 	.word	0x0800f611
 800f5c8:	0800f931 	.word	0x0800f931
 800f5cc:	0800f73d 	.word	0x0800f73d
 800f5d0:	0800f84b 	.word	0x0800f84b
 800f5d4:	0800f931 	.word	0x0800f931
 800f5d8:	0800f605 	.word	0x0800f605
 800f5dc:	0800f5ed 	.word	0x0800f5ed
			{
				case PICK_LEFT:
					lidar->pos = CENTER_2;
 800f5e0:	463b      	mov	r3, r7
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	2204      	movs	r2, #4
 800f5e6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f5ea:	e1a8      	b.n	800f93e <LidarSetPos+0xc36>

				case PICK_RIGHT:
					lidar->pos = CENTER_2;
 800f5ec:	463b      	mov	r3, r7
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	2204      	movs	r2, #4
 800f5f2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f5f6:	e1a2      	b.n	800f93e <LidarSetPos+0xc36>

				case UPPER_LEFT:
					lidar->pos = CENTER_2;
 800f5f8:	463b      	mov	r3, r7
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	2204      	movs	r2, #4
 800f5fe:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f602:	e19c      	b.n	800f93e <LidarSetPos+0xc36>

				case UPPER_RIGHT:
					lidar->pos = CENTER_2;
 800f604:	463b      	mov	r3, r7
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	2204      	movs	r2, #4
 800f60a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f60e:	e196      	b.n	800f93e <LidarSetPos+0xc36>

				case CENTER_1:
					stick_fence = 0;
 800f610:	4b2a      	ldr	r3, [pc, #168]	; (800f6bc <LidarSetPos+0x9b4>)
 800f612:	2200      	movs	r2, #0
 800f614:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.27;
 800f616:	4b2a      	ldr	r3, [pc, #168]	; (800f6c0 <LidarSetPos+0x9b8>)
 800f618:	4a2b      	ldr	r2, [pc, #172]	; (800f6c8 <LidarSetPos+0x9c0>)
 800f61a:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800f61c:	f7fc fa46 	bl	800baac <ResetCoordinate>
					lidar->pos = CENTER_2;
 800f620:	463b      	mov	r3, r7
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	2204      	movs	r2, #4
 800f626:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_1_to_center_2, 1, &pp);
 800f62a:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800f62e:	4a21      	ldr	r2, [pc, #132]	; (800f6b4 <LidarSetPos+0x9ac>)
 800f630:	2101      	movs	r1, #1
 800f632:	4618      	mov	r0, r3
 800f634:	f7f6 f93f 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 800f638:	e02a      	b.n	800f690 <LidarSetPos+0x988>
					{
						if(ps4.button == SQUARE)
 800f63a:	4b1d      	ldr	r3, [pc, #116]	; (800f6b0 <LidarSetPos+0x9a8>)
 800f63c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f63e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f642:	d112      	bne.n	800f66a <LidarSetPos+0x962>
						{
							while(ps4.button == SQUARE);
 800f644:	bf00      	nop
 800f646:	4b1a      	ldr	r3, [pc, #104]	; (800f6b0 <LidarSetPos+0x9a8>)
 800f648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f64a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f64e:	d0fa      	beq.n	800f646 <LidarSetPos+0x93e>
							PP_stop(&pp);
 800f650:	4818      	ldr	r0, [pc, #96]	; (800f6b4 <LidarSetPos+0x9ac>)
 800f652:	f7f6 fb6a 	bl	8005d2a <PP_stop>
							lidar->pos = CENTER_1;
 800f656:	463b      	mov	r3, r7
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	2203      	movs	r2, #3
 800f65c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = CENTER_1;
 800f660:	463b      	mov	r3, r7
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	2203      	movs	r2, #3
 800f666:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800f66a:	2108      	movs	r1, #8
 800f66c:	4812      	ldr	r0, [pc, #72]	; (800f6b8 <LidarSetPos+0x9b0>)
 800f66e:	f003 fbe9 	bl	8012e44 <HAL_GPIO_ReadPin>
 800f672:	4603      	mov	r3, r0
 800f674:	2b00      	cmp	r3, #0
 800f676:	d10b      	bne.n	800f690 <LidarSetPos+0x988>
 800f678:	2110      	movs	r1, #16
 800f67a:	480f      	ldr	r0, [pc, #60]	; (800f6b8 <LidarSetPos+0x9b0>)
 800f67c:	f003 fbe2 	bl	8012e44 <HAL_GPIO_ReadPin>
 800f680:	4603      	mov	r3, r0
 800f682:	2b00      	cmp	r3, #0
 800f684:	d104      	bne.n	800f690 <LidarSetPos+0x988>
							pp.error_y = 0;
 800f686:	4b0b      	ldr	r3, [pc, #44]	; (800f6b4 <LidarSetPos+0x9ac>)
 800f688:	f04f 0200 	mov.w	r2, #0
 800f68c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800f690:	4b08      	ldr	r3, [pc, #32]	; (800f6b4 <LidarSetPos+0x9ac>)
 800f692:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f696:	f003 0301 	and.w	r3, r3, #1
 800f69a:	b2db      	uxtb	r3, r3
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d1cc      	bne.n	800f63a <LidarSetPos+0x932>
					}

					PP_start(bang_fence, 1, &pp);
 800f6a0:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800f6a4:	4a03      	ldr	r2, [pc, #12]	; (800f6b4 <LidarSetPos+0x9ac>)
 800f6a6:	2101      	movs	r1, #1
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f7f6 f904 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 800f6ae:	e02c      	b.n	800f70a <LidarSetPos+0xa02>
 800f6b0:	2000a3fc 	.word	0x2000a3fc
 800f6b4:	2000718c 	.word	0x2000718c
 800f6b8:	40020c00 	.word	0x40020c00
 800f6bc:	20007784 	.word	0x20007784
 800f6c0:	20007848 	.word	0x20007848
 800f6c4:	3e28f5c3 	.word	0x3e28f5c3
 800f6c8:	3e8a3d71 	.word	0x3e8a3d71
					{
						if(ps4.button == SQUARE)
 800f6cc:	4bb7      	ldr	r3, [pc, #732]	; (800f9ac <LidarSetPos+0xca4>)
 800f6ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f6d4:	d108      	bne.n	800f6e8 <LidarSetPos+0x9e0>
						{
							while(ps4.button == SQUARE);
 800f6d6:	bf00      	nop
 800f6d8:	4bb4      	ldr	r3, [pc, #720]	; (800f9ac <LidarSetPos+0xca4>)
 800f6da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f6e0:	d0fa      	beq.n	800f6d8 <LidarSetPos+0x9d0>
							PP_stop(&pp);
 800f6e2:	48b3      	ldr	r0, [pc, #716]	; (800f9b0 <LidarSetPos+0xca8>)
 800f6e4:	f7f6 fb21 	bl	8005d2a <PP_stop>
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800f6e8:	2108      	movs	r1, #8
 800f6ea:	48b2      	ldr	r0, [pc, #712]	; (800f9b4 <LidarSetPos+0xcac>)
 800f6ec:	f003 fbaa 	bl	8012e44 <HAL_GPIO_ReadPin>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d109      	bne.n	800f70a <LidarSetPos+0xa02>
 800f6f6:	2110      	movs	r1, #16
 800f6f8:	48ae      	ldr	r0, [pc, #696]	; (800f9b4 <LidarSetPos+0xcac>)
 800f6fa:	f003 fba3 	bl	8012e44 <HAL_GPIO_ReadPin>
 800f6fe:	4603      	mov	r3, r0
 800f700:	2b00      	cmp	r3, #0
 800f702:	d102      	bne.n	800f70a <LidarSetPos+0xa02>
							PP_stop(&pp);
 800f704:	48aa      	ldr	r0, [pc, #680]	; (800f9b0 <LidarSetPos+0xca8>)
 800f706:	f7f6 fb10 	bl	8005d2a <PP_stop>
					while(pp.pp_start)
 800f70a:	4ba9      	ldr	r3, [pc, #676]	; (800f9b0 <LidarSetPos+0xca8>)
 800f70c:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f710:	f003 0301 	and.w	r3, r3, #1
 800f714:	b2db      	uxtb	r3, r3
 800f716:	2b00      	cmp	r3, #0
 800f718:	d1d8      	bne.n	800f6cc <LidarSetPos+0x9c4>
					}
					stick_fence = 1;
 800f71a:	4ba7      	ldr	r3, [pc, #668]	; (800f9b8 <LidarSetPos+0xcb0>)
 800f71c:	2201      	movs	r2, #1
 800f71e:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800f720:	463b      	mov	r3, r7
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f728:	1dfa      	adds	r2, r7, #7
 800f72a:	7812      	ldrb	r2, [r2, #0]
 800f72c:	429a      	cmp	r2, r3
 800f72e:	f040 8102 	bne.w	800f936 <LidarSetPos+0xc2e>
						LidarAdjust(lidar);
 800f732:	463b      	mov	r3, r7
 800f734:	6818      	ldr	r0, [r3, #0]
 800f736:	f000 ff9b 	bl	8010670 <LidarAdjust>
					break;
 800f73a:	e0fc      	b.n	800f936 <LidarSetPos+0xc2e>

				case CENTER:
					stick_fence = 0;
 800f73c:	4b9e      	ldr	r3, [pc, #632]	; (800f9b8 <LidarSetPos+0xcb0>)
 800f73e:	2200      	movs	r2, #0
 800f740:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.27;
 800f742:	4b9e      	ldr	r3, [pc, #632]	; (800f9bc <LidarSetPos+0xcb4>)
 800f744:	4a9e      	ldr	r2, [pc, #632]	; (800f9c0 <LidarSetPos+0xcb8>)
 800f746:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800f748:	f7fc f9b0 	bl	800baac <ResetCoordinate>
					lidar->pos = CENTER_2;
 800f74c:	463b      	mov	r3, r7
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	2204      	movs	r2, #4
 800f752:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_to_center_2, 1, &pp);
 800f756:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800f75a:	4a95      	ldr	r2, [pc, #596]	; (800f9b0 <LidarSetPos+0xca8>)
 800f75c:	2101      	movs	r1, #1
 800f75e:	4618      	mov	r0, r3
 800f760:	f7f6 f8a9 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 800f764:	e02a      	b.n	800f7bc <LidarSetPos+0xab4>
					{
						if(ps4.button == SQUARE)
 800f766:	4b91      	ldr	r3, [pc, #580]	; (800f9ac <LidarSetPos+0xca4>)
 800f768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f76a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f76e:	d112      	bne.n	800f796 <LidarSetPos+0xa8e>
						{
							while(ps4.button == SQUARE);
 800f770:	bf00      	nop
 800f772:	4b8e      	ldr	r3, [pc, #568]	; (800f9ac <LidarSetPos+0xca4>)
 800f774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f77a:	d0fa      	beq.n	800f772 <LidarSetPos+0xa6a>
							PP_stop(&pp);
 800f77c:	488c      	ldr	r0, [pc, #560]	; (800f9b0 <LidarSetPos+0xca8>)
 800f77e:	f7f6 fad4 	bl	8005d2a <PP_stop>
							lidar->pos = CENTER;
 800f782:	463b      	mov	r3, r7
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	2205      	movs	r2, #5
 800f788:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = CENTER;
 800f78c:	463b      	mov	r3, r7
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	2205      	movs	r2, #5
 800f792:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800f796:	2108      	movs	r1, #8
 800f798:	4886      	ldr	r0, [pc, #536]	; (800f9b4 <LidarSetPos+0xcac>)
 800f79a:	f003 fb53 	bl	8012e44 <HAL_GPIO_ReadPin>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d10b      	bne.n	800f7bc <LidarSetPos+0xab4>
 800f7a4:	2110      	movs	r1, #16
 800f7a6:	4883      	ldr	r0, [pc, #524]	; (800f9b4 <LidarSetPos+0xcac>)
 800f7a8:	f003 fb4c 	bl	8012e44 <HAL_GPIO_ReadPin>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d104      	bne.n	800f7bc <LidarSetPos+0xab4>
							pp.error_y = 0;
 800f7b2:	4b7f      	ldr	r3, [pc, #508]	; (800f9b0 <LidarSetPos+0xca8>)
 800f7b4:	f04f 0200 	mov.w	r2, #0
 800f7b8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800f7bc:	4b7c      	ldr	r3, [pc, #496]	; (800f9b0 <LidarSetPos+0xca8>)
 800f7be:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f7c2:	f003 0301 	and.w	r3, r3, #1
 800f7c6:	b2db      	uxtb	r3, r3
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d1cc      	bne.n	800f766 <LidarSetPos+0xa5e>
					}

					PP_start(bang_fence, 1, &pp);
 800f7cc:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800f7d0:	4a77      	ldr	r2, [pc, #476]	; (800f9b0 <LidarSetPos+0xca8>)
 800f7d2:	2101      	movs	r1, #1
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f7f6 f86e 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 800f7da:	e01e      	b.n	800f81a <LidarSetPos+0xb12>
					{
						if(ps4.button == SQUARE)
 800f7dc:	4b73      	ldr	r3, [pc, #460]	; (800f9ac <LidarSetPos+0xca4>)
 800f7de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f7e4:	d108      	bne.n	800f7f8 <LidarSetPos+0xaf0>
						{
							while(ps4.button == SQUARE);
 800f7e6:	bf00      	nop
 800f7e8:	4b70      	ldr	r3, [pc, #448]	; (800f9ac <LidarSetPos+0xca4>)
 800f7ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f7f0:	d0fa      	beq.n	800f7e8 <LidarSetPos+0xae0>
							PP_stop(&pp);
 800f7f2:	486f      	ldr	r0, [pc, #444]	; (800f9b0 <LidarSetPos+0xca8>)
 800f7f4:	f7f6 fa99 	bl	8005d2a <PP_stop>
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800f7f8:	2108      	movs	r1, #8
 800f7fa:	486e      	ldr	r0, [pc, #440]	; (800f9b4 <LidarSetPos+0xcac>)
 800f7fc:	f003 fb22 	bl	8012e44 <HAL_GPIO_ReadPin>
 800f800:	4603      	mov	r3, r0
 800f802:	2b00      	cmp	r3, #0
 800f804:	d109      	bne.n	800f81a <LidarSetPos+0xb12>
 800f806:	2110      	movs	r1, #16
 800f808:	486a      	ldr	r0, [pc, #424]	; (800f9b4 <LidarSetPos+0xcac>)
 800f80a:	f003 fb1b 	bl	8012e44 <HAL_GPIO_ReadPin>
 800f80e:	4603      	mov	r3, r0
 800f810:	2b00      	cmp	r3, #0
 800f812:	d102      	bne.n	800f81a <LidarSetPos+0xb12>
							PP_stop(&pp);
 800f814:	4866      	ldr	r0, [pc, #408]	; (800f9b0 <LidarSetPos+0xca8>)
 800f816:	f7f6 fa88 	bl	8005d2a <PP_stop>
					while(pp.pp_start)
 800f81a:	4b65      	ldr	r3, [pc, #404]	; (800f9b0 <LidarSetPos+0xca8>)
 800f81c:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f820:	f003 0301 	and.w	r3, r3, #1
 800f824:	b2db      	uxtb	r3, r3
 800f826:	2b00      	cmp	r3, #0
 800f828:	d1d8      	bne.n	800f7dc <LidarSetPos+0xad4>
					}
					stick_fence = 1;
 800f82a:	4b63      	ldr	r3, [pc, #396]	; (800f9b8 <LidarSetPos+0xcb0>)
 800f82c:	2201      	movs	r2, #1
 800f82e:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800f830:	463b      	mov	r3, r7
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f838:	1dfa      	adds	r2, r7, #7
 800f83a:	7812      	ldrb	r2, [r2, #0]
 800f83c:	429a      	cmp	r2, r3
 800f83e:	d17d      	bne.n	800f93c <LidarSetPos+0xc34>
						LidarAdjust(lidar);
 800f840:	463b      	mov	r3, r7
 800f842:	6818      	ldr	r0, [r3, #0]
 800f844:	f000 ff14 	bl	8010670 <LidarAdjust>
					break;
 800f848:	e078      	b.n	800f93c <LidarSetPos+0xc34>

				case CENTER_3:
					stick_fence = 0;
 800f84a:	4b5b      	ldr	r3, [pc, #364]	; (800f9b8 <LidarSetPos+0xcb0>)
 800f84c:	2200      	movs	r2, #0
 800f84e:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.27;
 800f850:	4b5a      	ldr	r3, [pc, #360]	; (800f9bc <LidarSetPos+0xcb4>)
 800f852:	4a5b      	ldr	r2, [pc, #364]	; (800f9c0 <LidarSetPos+0xcb8>)
 800f854:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800f856:	f7fc f929 	bl	800baac <ResetCoordinate>
					lidar->pos = CENTER_2;
 800f85a:	463b      	mov	r3, r7
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	2204      	movs	r2, #4
 800f860:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_3_to_center_2, 1, &pp);
 800f864:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f868:	4a51      	ldr	r2, [pc, #324]	; (800f9b0 <LidarSetPos+0xca8>)
 800f86a:	2101      	movs	r1, #1
 800f86c:	4618      	mov	r0, r3
 800f86e:	f7f6 f822 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 800f872:	e017      	b.n	800f8a4 <LidarSetPos+0xb9c>
					{
						if(ps4.button == SQUARE)
 800f874:	4b4d      	ldr	r3, [pc, #308]	; (800f9ac <LidarSetPos+0xca4>)
 800f876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f87c:	d112      	bne.n	800f8a4 <LidarSetPos+0xb9c>
						{
							while(ps4.button == SQUARE);
 800f87e:	bf00      	nop
 800f880:	4b4a      	ldr	r3, [pc, #296]	; (800f9ac <LidarSetPos+0xca4>)
 800f882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f888:	d0fa      	beq.n	800f880 <LidarSetPos+0xb78>
							PP_stop(&pp);
 800f88a:	4849      	ldr	r0, [pc, #292]	; (800f9b0 <LidarSetPos+0xca8>)
 800f88c:	f7f6 fa4d 	bl	8005d2a <PP_stop>
							lidar->pos = CENTER_3; // PP Failed
 800f890:	463b      	mov	r3, r7
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	2206      	movs	r2, #6
 800f896:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = CENTER_3;
 800f89a:	463b      	mov	r3, r7
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	2206      	movs	r2, #6
 800f8a0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
					while(pp.pp_start)
 800f8a4:	4b42      	ldr	r3, [pc, #264]	; (800f9b0 <LidarSetPos+0xca8>)
 800f8a6:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f8aa:	f003 0301 	and.w	r3, r3, #1
 800f8ae:	b2db      	uxtb	r3, r3
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d1df      	bne.n	800f874 <LidarSetPos+0xb6c>
						}
					}

					PP_start(bang_fence, 1, &pp);
 800f8b4:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800f8b8:	4a3d      	ldr	r2, [pc, #244]	; (800f9b0 <LidarSetPos+0xca8>)
 800f8ba:	2101      	movs	r1, #1
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f7f5 fffa 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 800f8c2:	e01e      	b.n	800f902 <LidarSetPos+0xbfa>
					{
						if(ps4.button == SQUARE)
 800f8c4:	4b39      	ldr	r3, [pc, #228]	; (800f9ac <LidarSetPos+0xca4>)
 800f8c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f8cc:	d108      	bne.n	800f8e0 <LidarSetPos+0xbd8>
						{
							while(ps4.button == SQUARE);
 800f8ce:	bf00      	nop
 800f8d0:	4b36      	ldr	r3, [pc, #216]	; (800f9ac <LidarSetPos+0xca4>)
 800f8d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f8d8:	d0fa      	beq.n	800f8d0 <LidarSetPos+0xbc8>
							PP_stop(&pp);
 800f8da:	4835      	ldr	r0, [pc, #212]	; (800f9b0 <LidarSetPos+0xca8>)
 800f8dc:	f7f6 fa25 	bl	8005d2a <PP_stop>
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800f8e0:	2108      	movs	r1, #8
 800f8e2:	4834      	ldr	r0, [pc, #208]	; (800f9b4 <LidarSetPos+0xcac>)
 800f8e4:	f003 faae 	bl	8012e44 <HAL_GPIO_ReadPin>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d109      	bne.n	800f902 <LidarSetPos+0xbfa>
 800f8ee:	2110      	movs	r1, #16
 800f8f0:	4830      	ldr	r0, [pc, #192]	; (800f9b4 <LidarSetPos+0xcac>)
 800f8f2:	f003 faa7 	bl	8012e44 <HAL_GPIO_ReadPin>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d102      	bne.n	800f902 <LidarSetPos+0xbfa>
							PP_stop(&pp);
 800f8fc:	482c      	ldr	r0, [pc, #176]	; (800f9b0 <LidarSetPos+0xca8>)
 800f8fe:	f7f6 fa14 	bl	8005d2a <PP_stop>
					while(pp.pp_start)
 800f902:	4b2b      	ldr	r3, [pc, #172]	; (800f9b0 <LidarSetPos+0xca8>)
 800f904:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f908:	f003 0301 	and.w	r3, r3, #1
 800f90c:	b2db      	uxtb	r3, r3
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d1d8      	bne.n	800f8c4 <LidarSetPos+0xbbc>
					}
					stick_fence = 1;
 800f912:	4b29      	ldr	r3, [pc, #164]	; (800f9b8 <LidarSetPos+0xcb0>)
 800f914:	2201      	movs	r2, #1
 800f916:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800f918:	463b      	mov	r3, r7
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f920:	1dfa      	adds	r2, r7, #7
 800f922:	7812      	ldrb	r2, [r2, #0]
 800f924:	429a      	cmp	r2, r3
 800f926:	d103      	bne.n	800f930 <LidarSetPos+0xc28>
						LidarAdjust(lidar);
 800f928:	463b      	mov	r3, r7
 800f92a:	6818      	ldr	r0, [r3, #0]
 800f92c:	f000 fea0 	bl	8010670 <LidarAdjust>

				default:
					break;
 800f930:	bf00      	nop
 800f932:	f000 be8f 	b.w	8010654 <LidarSetPos+0x194c>
					break;
 800f936:	bf00      	nop
 800f938:	f000 be8c 	b.w	8010654 <LidarSetPos+0x194c>
					break;
 800f93c:	bf00      	nop
			}
			break;
 800f93e:	f000 be89 	b.w	8010654 <LidarSetPos+0x194c>

		case CENTER:
			switch(lidar->pos) // Self Pose
 800f942:	463b      	mov	r3, r7
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f94a:	3b01      	subs	r3, #1
 800f94c:	2b08      	cmp	r3, #8
 800f94e:	f200 823e 	bhi.w	800fdce <LidarSetPos+0x10c6>
 800f952:	a201      	add	r2, pc, #4	; (adr r2, 800f958 <LidarSetPos+0xc50>)
 800f954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f958:	0800f97d 	.word	0x0800f97d
 800f95c:	0800f995 	.word	0x0800f995
 800f960:	0800f9c5 	.word	0x0800f9c5
 800f964:	0800faaf 	.word	0x0800faaf
 800f968:	0800fdcf 	.word	0x0800fdcf
 800f96c:	0800fbbf 	.word	0x0800fbbf
 800f970:	0800fce9 	.word	0x0800fce9
 800f974:	0800f9a1 	.word	0x0800f9a1
 800f978:	0800f989 	.word	0x0800f989
			{
				case PICK_LEFT:
					lidar->pos = CENTER;
 800f97c:	463b      	mov	r3, r7
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	2205      	movs	r2, #5
 800f982:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f986:	e22c      	b.n	800fde2 <LidarSetPos+0x10da>

				case PICK_RIGHT:
					lidar->pos = CENTER;
 800f988:	463b      	mov	r3, r7
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	2205      	movs	r2, #5
 800f98e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f992:	e226      	b.n	800fde2 <LidarSetPos+0x10da>

				case UPPER_LEFT:
					lidar->pos = CENTER;
 800f994:	463b      	mov	r3, r7
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	2205      	movs	r2, #5
 800f99a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f99e:	e220      	b.n	800fde2 <LidarSetPos+0x10da>

				case UPPER_RIGHT:
					lidar->pos = CENTER;
 800f9a0:	463b      	mov	r3, r7
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	2205      	movs	r2, #5
 800f9a6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f9aa:	e21a      	b.n	800fde2 <LidarSetPos+0x10da>
 800f9ac:	2000a3fc 	.word	0x2000a3fc
 800f9b0:	2000718c 	.word	0x2000718c
 800f9b4:	40020c00 	.word	0x40020c00
 800f9b8:	20007784 	.word	0x20007784
 800f9bc:	20007848 	.word	0x20007848
 800f9c0:	3e8a3d71 	.word	0x3e8a3d71

				case CENTER_1:
					stick_fence = 0;
 800f9c4:	4ba6      	ldr	r3, [pc, #664]	; (800fc60 <LidarSetPos+0xf58>)
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.165;
 800f9ca:	4ba6      	ldr	r3, [pc, #664]	; (800fc64 <LidarSetPos+0xf5c>)
 800f9cc:	4aa6      	ldr	r2, [pc, #664]	; (800fc68 <LidarSetPos+0xf60>)
 800f9ce:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800f9d0:	f7fc f86c 	bl	800baac <ResetCoordinate>
					lidar->pos = CENTER;
 800f9d4:	463b      	mov	r3, r7
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	2205      	movs	r2, #5
 800f9da:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_1_to_center, 1, &pp);
 800f9de:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800f9e2:	4aa2      	ldr	r2, [pc, #648]	; (800fc6c <LidarSetPos+0xf64>)
 800f9e4:	2101      	movs	r1, #1
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f7f5 ff65 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 800f9ec:	e017      	b.n	800fa1e <LidarSetPos+0xd16>
					{
						if(ps4.button == SQUARE)
 800f9ee:	4ba0      	ldr	r3, [pc, #640]	; (800fc70 <LidarSetPos+0xf68>)
 800f9f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f9f6:	d112      	bne.n	800fa1e <LidarSetPos+0xd16>
						{
							while(ps4.button == SQUARE);
 800f9f8:	bf00      	nop
 800f9fa:	4b9d      	ldr	r3, [pc, #628]	; (800fc70 <LidarSetPos+0xf68>)
 800f9fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa02:	d0fa      	beq.n	800f9fa <LidarSetPos+0xcf2>
							PP_stop(&pp);
 800fa04:	4899      	ldr	r0, [pc, #612]	; (800fc6c <LidarSetPos+0xf64>)
 800fa06:	f7f6 f990 	bl	8005d2a <PP_stop>
							lidar->pos = CENTER_1; // PP Failed
 800fa0a:	463b      	mov	r3, r7
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	2203      	movs	r2, #3
 800fa10:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = CENTER_1;
 800fa14:	463b      	mov	r3, r7
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	2203      	movs	r2, #3
 800fa1a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
					while(pp.pp_start)
 800fa1e:	4b93      	ldr	r3, [pc, #588]	; (800fc6c <LidarSetPos+0xf64>)
 800fa20:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800fa24:	f003 0301 	and.w	r3, r3, #1
 800fa28:	b2db      	uxtb	r3, r3
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d1df      	bne.n	800f9ee <LidarSetPos+0xce6>
						}
					}

					PP_start(bang_fence, 1, &pp);
 800fa2e:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800fa32:	4a8e      	ldr	r2, [pc, #568]	; (800fc6c <LidarSetPos+0xf64>)
 800fa34:	2101      	movs	r1, #1
 800fa36:	4618      	mov	r0, r3
 800fa38:	f7f5 ff3d 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 800fa3c:	e01e      	b.n	800fa7c <LidarSetPos+0xd74>
					{
						if(ps4.button == SQUARE)
 800fa3e:	4b8c      	ldr	r3, [pc, #560]	; (800fc70 <LidarSetPos+0xf68>)
 800fa40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa46:	d108      	bne.n	800fa5a <LidarSetPos+0xd52>
						{
							while(ps4.button == SQUARE);
 800fa48:	bf00      	nop
 800fa4a:	4b89      	ldr	r3, [pc, #548]	; (800fc70 <LidarSetPos+0xf68>)
 800fa4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa52:	d0fa      	beq.n	800fa4a <LidarSetPos+0xd42>
							PP_stop(&pp);
 800fa54:	4885      	ldr	r0, [pc, #532]	; (800fc6c <LidarSetPos+0xf64>)
 800fa56:	f7f6 f968 	bl	8005d2a <PP_stop>
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800fa5a:	2108      	movs	r1, #8
 800fa5c:	4885      	ldr	r0, [pc, #532]	; (800fc74 <LidarSetPos+0xf6c>)
 800fa5e:	f003 f9f1 	bl	8012e44 <HAL_GPIO_ReadPin>
 800fa62:	4603      	mov	r3, r0
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d109      	bne.n	800fa7c <LidarSetPos+0xd74>
 800fa68:	2110      	movs	r1, #16
 800fa6a:	4882      	ldr	r0, [pc, #520]	; (800fc74 <LidarSetPos+0xf6c>)
 800fa6c:	f003 f9ea 	bl	8012e44 <HAL_GPIO_ReadPin>
 800fa70:	4603      	mov	r3, r0
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d102      	bne.n	800fa7c <LidarSetPos+0xd74>
							PP_stop(&pp);
 800fa76:	487d      	ldr	r0, [pc, #500]	; (800fc6c <LidarSetPos+0xf64>)
 800fa78:	f7f6 f957 	bl	8005d2a <PP_stop>
					while(pp.pp_start)
 800fa7c:	4b7b      	ldr	r3, [pc, #492]	; (800fc6c <LidarSetPos+0xf64>)
 800fa7e:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800fa82:	f003 0301 	and.w	r3, r3, #1
 800fa86:	b2db      	uxtb	r3, r3
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d1d8      	bne.n	800fa3e <LidarSetPos+0xd36>
					}
					stick_fence = 1;
 800fa8c:	4b74      	ldr	r3, [pc, #464]	; (800fc60 <LidarSetPos+0xf58>)
 800fa8e:	2201      	movs	r2, #1
 800fa90:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800fa92:	463b      	mov	r3, r7
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800fa9a:	1dfa      	adds	r2, r7, #7
 800fa9c:	7812      	ldrb	r2, [r2, #0]
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	f040 8198 	bne.w	800fdd4 <LidarSetPos+0x10cc>
						LidarAdjust(lidar);
 800faa4:	463b      	mov	r3, r7
 800faa6:	6818      	ldr	r0, [r3, #0]
 800faa8:	f000 fde2 	bl	8010670 <LidarAdjust>
					break;
 800faac:	e192      	b.n	800fdd4 <LidarSetPos+0x10cc>


				case CENTER_2:
					stick_fence = 0;
 800faae:	4b6c      	ldr	r3, [pc, #432]	; (800fc60 <LidarSetPos+0xf58>)
 800fab0:	2200      	movs	r2, #0
 800fab2:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.165;
 800fab4:	4b6b      	ldr	r3, [pc, #428]	; (800fc64 <LidarSetPos+0xf5c>)
 800fab6:	4a6c      	ldr	r2, [pc, #432]	; (800fc68 <LidarSetPos+0xf60>)
 800fab8:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800faba:	f7fb fff7 	bl	800baac <ResetCoordinate>
					lidar->pos = CENTER;
 800fabe:	463b      	mov	r3, r7
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	2205      	movs	r2, #5
 800fac4:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_2_to_center, 1, &pp);
 800fac8:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800facc:	4a67      	ldr	r2, [pc, #412]	; (800fc6c <LidarSetPos+0xf64>)
 800face:	2101      	movs	r1, #1
 800fad0:	4618      	mov	r0, r3
 800fad2:	f7f5 fef0 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 800fad6:	e02a      	b.n	800fb2e <LidarSetPos+0xe26>
					{
						if(ps4.button == SQUARE)
 800fad8:	4b65      	ldr	r3, [pc, #404]	; (800fc70 <LidarSetPos+0xf68>)
 800fada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fadc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fae0:	d112      	bne.n	800fb08 <LidarSetPos+0xe00>
						{
							while(ps4.button == SQUARE);
 800fae2:	bf00      	nop
 800fae4:	4b62      	ldr	r3, [pc, #392]	; (800fc70 <LidarSetPos+0xf68>)
 800fae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800faec:	d0fa      	beq.n	800fae4 <LidarSetPos+0xddc>
							PP_stop(&pp);
 800faee:	485f      	ldr	r0, [pc, #380]	; (800fc6c <LidarSetPos+0xf64>)
 800faf0:	f7f6 f91b 	bl	8005d2a <PP_stop>
							lidar->pos = CENTER_2;
 800faf4:	463b      	mov	r3, r7
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	2204      	movs	r2, #4
 800fafa:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = CENTER_2;
 800fafe:	463b      	mov	r3, r7
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	2204      	movs	r2, #4
 800fb04:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800fb08:	2108      	movs	r1, #8
 800fb0a:	485a      	ldr	r0, [pc, #360]	; (800fc74 <LidarSetPos+0xf6c>)
 800fb0c:	f003 f99a 	bl	8012e44 <HAL_GPIO_ReadPin>
 800fb10:	4603      	mov	r3, r0
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d10b      	bne.n	800fb2e <LidarSetPos+0xe26>
 800fb16:	2110      	movs	r1, #16
 800fb18:	4856      	ldr	r0, [pc, #344]	; (800fc74 <LidarSetPos+0xf6c>)
 800fb1a:	f003 f993 	bl	8012e44 <HAL_GPIO_ReadPin>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d104      	bne.n	800fb2e <LidarSetPos+0xe26>
							pp.error_y = 0;
 800fb24:	4b51      	ldr	r3, [pc, #324]	; (800fc6c <LidarSetPos+0xf64>)
 800fb26:	f04f 0200 	mov.w	r2, #0
 800fb2a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800fb2e:	4b4f      	ldr	r3, [pc, #316]	; (800fc6c <LidarSetPos+0xf64>)
 800fb30:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800fb34:	f003 0301 	and.w	r3, r3, #1
 800fb38:	b2db      	uxtb	r3, r3
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d1cc      	bne.n	800fad8 <LidarSetPos+0xdd0>
					}

					PP_start(bang_fence, 1, &pp);
 800fb3e:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800fb42:	4a4a      	ldr	r2, [pc, #296]	; (800fc6c <LidarSetPos+0xf64>)
 800fb44:	2101      	movs	r1, #1
 800fb46:	4618      	mov	r0, r3
 800fb48:	f7f5 feb5 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 800fb4c:	e01e      	b.n	800fb8c <LidarSetPos+0xe84>
					{
						if(ps4.button == SQUARE)
 800fb4e:	4b48      	ldr	r3, [pc, #288]	; (800fc70 <LidarSetPos+0xf68>)
 800fb50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb56:	d108      	bne.n	800fb6a <LidarSetPos+0xe62>
						{
							while(ps4.button == SQUARE);
 800fb58:	bf00      	nop
 800fb5a:	4b45      	ldr	r3, [pc, #276]	; (800fc70 <LidarSetPos+0xf68>)
 800fb5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb62:	d0fa      	beq.n	800fb5a <LidarSetPos+0xe52>
							PP_stop(&pp);
 800fb64:	4841      	ldr	r0, [pc, #260]	; (800fc6c <LidarSetPos+0xf64>)
 800fb66:	f7f6 f8e0 	bl	8005d2a <PP_stop>
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800fb6a:	2108      	movs	r1, #8
 800fb6c:	4841      	ldr	r0, [pc, #260]	; (800fc74 <LidarSetPos+0xf6c>)
 800fb6e:	f003 f969 	bl	8012e44 <HAL_GPIO_ReadPin>
 800fb72:	4603      	mov	r3, r0
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d109      	bne.n	800fb8c <LidarSetPos+0xe84>
 800fb78:	2110      	movs	r1, #16
 800fb7a:	483e      	ldr	r0, [pc, #248]	; (800fc74 <LidarSetPos+0xf6c>)
 800fb7c:	f003 f962 	bl	8012e44 <HAL_GPIO_ReadPin>
 800fb80:	4603      	mov	r3, r0
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d102      	bne.n	800fb8c <LidarSetPos+0xe84>
							PP_stop(&pp);
 800fb86:	4839      	ldr	r0, [pc, #228]	; (800fc6c <LidarSetPos+0xf64>)
 800fb88:	f7f6 f8cf 	bl	8005d2a <PP_stop>
					while(pp.pp_start)
 800fb8c:	4b37      	ldr	r3, [pc, #220]	; (800fc6c <LidarSetPos+0xf64>)
 800fb8e:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800fb92:	f003 0301 	and.w	r3, r3, #1
 800fb96:	b2db      	uxtb	r3, r3
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d1d8      	bne.n	800fb4e <LidarSetPos+0xe46>
					}
					stick_fence = 1;
 800fb9c:	4b30      	ldr	r3, [pc, #192]	; (800fc60 <LidarSetPos+0xf58>)
 800fb9e:	2201      	movs	r2, #1
 800fba0:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800fba2:	463b      	mov	r3, r7
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800fbaa:	1dfa      	adds	r2, r7, #7
 800fbac:	7812      	ldrb	r2, [r2, #0]
 800fbae:	429a      	cmp	r2, r3
 800fbb0:	f040 8113 	bne.w	800fdda <LidarSetPos+0x10d2>
						LidarAdjust(lidar);
 800fbb4:	463b      	mov	r3, r7
 800fbb6:	6818      	ldr	r0, [r3, #0]
 800fbb8:	f000 fd5a 	bl	8010670 <LidarAdjust>
					break;
 800fbbc:	e10d      	b.n	800fdda <LidarSetPos+0x10d2>

				case CENTER_3:
					stick_fence = 0;
 800fbbe:	4b28      	ldr	r3, [pc, #160]	; (800fc60 <LidarSetPos+0xf58>)
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.165;
 800fbc4:	4b27      	ldr	r3, [pc, #156]	; (800fc64 <LidarSetPos+0xf5c>)
 800fbc6:	4a28      	ldr	r2, [pc, #160]	; (800fc68 <LidarSetPos+0xf60>)
 800fbc8:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800fbca:	f7fb ff6f 	bl	800baac <ResetCoordinate>
					lidar->pos = CENTER;
 800fbce:	463b      	mov	r3, r7
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	2205      	movs	r2, #5
 800fbd4:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_3_to_center, 1, &pp);
 800fbd8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fbdc:	4a23      	ldr	r2, [pc, #140]	; (800fc6c <LidarSetPos+0xf64>)
 800fbde:	2101      	movs	r1, #1
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f7f5 fe68 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 800fbe6:	e02a      	b.n	800fc3e <LidarSetPos+0xf36>
					{
						if(ps4.button == SQUARE)
 800fbe8:	4b21      	ldr	r3, [pc, #132]	; (800fc70 <LidarSetPos+0xf68>)
 800fbea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fbf0:	d112      	bne.n	800fc18 <LidarSetPos+0xf10>
						{
							while(ps4.button == SQUARE);
 800fbf2:	bf00      	nop
 800fbf4:	4b1e      	ldr	r3, [pc, #120]	; (800fc70 <LidarSetPos+0xf68>)
 800fbf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fbfc:	d0fa      	beq.n	800fbf4 <LidarSetPos+0xeec>
							PP_stop(&pp);
 800fbfe:	481b      	ldr	r0, [pc, #108]	; (800fc6c <LidarSetPos+0xf64>)
 800fc00:	f7f6 f893 	bl	8005d2a <PP_stop>
							lidar->pos = CENTER_3;
 800fc04:	463b      	mov	r3, r7
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	2206      	movs	r2, #6
 800fc0a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = CENTER_3;
 800fc0e:	463b      	mov	r3, r7
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	2206      	movs	r2, #6
 800fc14:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800fc18:	2108      	movs	r1, #8
 800fc1a:	4816      	ldr	r0, [pc, #88]	; (800fc74 <LidarSetPos+0xf6c>)
 800fc1c:	f003 f912 	bl	8012e44 <HAL_GPIO_ReadPin>
 800fc20:	4603      	mov	r3, r0
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d10b      	bne.n	800fc3e <LidarSetPos+0xf36>
 800fc26:	2110      	movs	r1, #16
 800fc28:	4812      	ldr	r0, [pc, #72]	; (800fc74 <LidarSetPos+0xf6c>)
 800fc2a:	f003 f90b 	bl	8012e44 <HAL_GPIO_ReadPin>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d104      	bne.n	800fc3e <LidarSetPos+0xf36>
							pp.error_y = 0;
 800fc34:	4b0d      	ldr	r3, [pc, #52]	; (800fc6c <LidarSetPos+0xf64>)
 800fc36:	f04f 0200 	mov.w	r2, #0
 800fc3a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800fc3e:	4b0b      	ldr	r3, [pc, #44]	; (800fc6c <LidarSetPos+0xf64>)
 800fc40:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800fc44:	f003 0301 	and.w	r3, r3, #1
 800fc48:	b2db      	uxtb	r3, r3
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d1cc      	bne.n	800fbe8 <LidarSetPos+0xee0>
					}

					PP_start(bang_fence, 1, &pp);
 800fc4e:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800fc52:	4a06      	ldr	r2, [pc, #24]	; (800fc6c <LidarSetPos+0xf64>)
 800fc54:	2101      	movs	r1, #1
 800fc56:	4618      	mov	r0, r3
 800fc58:	f7f5 fe2d 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 800fc5c:	e02b      	b.n	800fcb6 <LidarSetPos+0xfae>
 800fc5e:	bf00      	nop
 800fc60:	20007784 	.word	0x20007784
 800fc64:	20007848 	.word	0x20007848
 800fc68:	3e28f5c3 	.word	0x3e28f5c3
 800fc6c:	2000718c 	.word	0x2000718c
 800fc70:	2000a3fc 	.word	0x2000a3fc
 800fc74:	40020c00 	.word	0x40020c00
					{
						if(ps4.button == SQUARE)
 800fc78:	4bb9      	ldr	r3, [pc, #740]	; (800ff60 <LidarSetPos+0x1258>)
 800fc7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc80:	d108      	bne.n	800fc94 <LidarSetPos+0xf8c>
						{
							while(ps4.button == SQUARE);
 800fc82:	bf00      	nop
 800fc84:	4bb6      	ldr	r3, [pc, #728]	; (800ff60 <LidarSetPos+0x1258>)
 800fc86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc8c:	d0fa      	beq.n	800fc84 <LidarSetPos+0xf7c>
							PP_stop(&pp);
 800fc8e:	48b5      	ldr	r0, [pc, #724]	; (800ff64 <LidarSetPos+0x125c>)
 800fc90:	f7f6 f84b 	bl	8005d2a <PP_stop>
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800fc94:	2108      	movs	r1, #8
 800fc96:	48b4      	ldr	r0, [pc, #720]	; (800ff68 <LidarSetPos+0x1260>)
 800fc98:	f003 f8d4 	bl	8012e44 <HAL_GPIO_ReadPin>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d109      	bne.n	800fcb6 <LidarSetPos+0xfae>
 800fca2:	2110      	movs	r1, #16
 800fca4:	48b0      	ldr	r0, [pc, #704]	; (800ff68 <LidarSetPos+0x1260>)
 800fca6:	f003 f8cd 	bl	8012e44 <HAL_GPIO_ReadPin>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d102      	bne.n	800fcb6 <LidarSetPos+0xfae>
							PP_stop(&pp);
 800fcb0:	48ac      	ldr	r0, [pc, #688]	; (800ff64 <LidarSetPos+0x125c>)
 800fcb2:	f7f6 f83a 	bl	8005d2a <PP_stop>
					while(pp.pp_start)
 800fcb6:	4bab      	ldr	r3, [pc, #684]	; (800ff64 <LidarSetPos+0x125c>)
 800fcb8:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800fcbc:	f003 0301 	and.w	r3, r3, #1
 800fcc0:	b2db      	uxtb	r3, r3
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d1d8      	bne.n	800fc78 <LidarSetPos+0xf70>
					}
					stick_fence = 1;
 800fcc6:	4ba9      	ldr	r3, [pc, #676]	; (800ff6c <LidarSetPos+0x1264>)
 800fcc8:	2201      	movs	r2, #1
 800fcca:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800fccc:	463b      	mov	r3, r7
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800fcd4:	1dfa      	adds	r2, r7, #7
 800fcd6:	7812      	ldrb	r2, [r2, #0]
 800fcd8:	429a      	cmp	r2, r3
 800fcda:	f040 8081 	bne.w	800fde0 <LidarSetPos+0x10d8>
						LidarAdjust(lidar);
 800fcde:	463b      	mov	r3, r7
 800fce0:	6818      	ldr	r0, [r3, #0]
 800fce2:	f000 fcc5 	bl	8010670 <LidarAdjust>
					break;
 800fce6:	e07b      	b.n	800fde0 <LidarSetPos+0x10d8>

				case CENTER_4:
					stick_fence = 0;
 800fce8:	4ba0      	ldr	r3, [pc, #640]	; (800ff6c <LidarSetPos+0x1264>)
 800fcea:	2200      	movs	r2, #0
 800fcec:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.165;
 800fcee:	4ba0      	ldr	r3, [pc, #640]	; (800ff70 <LidarSetPos+0x1268>)
 800fcf0:	4aa0      	ldr	r2, [pc, #640]	; (800ff74 <LidarSetPos+0x126c>)
 800fcf2:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800fcf4:	f7fb feda 	bl	800baac <ResetCoordinate>
					lidar->pos = CENTER;
 800fcf8:	463b      	mov	r3, r7
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	2205      	movs	r2, #5
 800fcfe:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_4_to_center, 1, &pp);
 800fd02:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800fd06:	4a97      	ldr	r2, [pc, #604]	; (800ff64 <LidarSetPos+0x125c>)
 800fd08:	2101      	movs	r1, #1
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f7f5 fdd3 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 800fd10:	e017      	b.n	800fd42 <LidarSetPos+0x103a>
					{
						if(ps4.button == SQUARE)
 800fd12:	4b93      	ldr	r3, [pc, #588]	; (800ff60 <LidarSetPos+0x1258>)
 800fd14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd1a:	d112      	bne.n	800fd42 <LidarSetPos+0x103a>
						{
							while(ps4.button == SQUARE);
 800fd1c:	bf00      	nop
 800fd1e:	4b90      	ldr	r3, [pc, #576]	; (800ff60 <LidarSetPos+0x1258>)
 800fd20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd26:	d0fa      	beq.n	800fd1e <LidarSetPos+0x1016>
							PP_stop(&pp);
 800fd28:	488e      	ldr	r0, [pc, #568]	; (800ff64 <LidarSetPos+0x125c>)
 800fd2a:	f7f5 fffe 	bl	8005d2a <PP_stop>
							lidar->pos = CENTER_4; // PP Failed
 800fd2e:	463b      	mov	r3, r7
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	2207      	movs	r2, #7
 800fd34:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = CENTER_4;
 800fd38:	463b      	mov	r3, r7
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	2207      	movs	r2, #7
 800fd3e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
					while(pp.pp_start)
 800fd42:	4b88      	ldr	r3, [pc, #544]	; (800ff64 <LidarSetPos+0x125c>)
 800fd44:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800fd48:	f003 0301 	and.w	r3, r3, #1
 800fd4c:	b2db      	uxtb	r3, r3
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d1df      	bne.n	800fd12 <LidarSetPos+0x100a>
						}
					}

					PP_start(bang_fence, 1, &pp);
 800fd52:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800fd56:	4a83      	ldr	r2, [pc, #524]	; (800ff64 <LidarSetPos+0x125c>)
 800fd58:	2101      	movs	r1, #1
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f7f5 fdab 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 800fd60:	e01e      	b.n	800fda0 <LidarSetPos+0x1098>
					{
						if(ps4.button == SQUARE)
 800fd62:	4b7f      	ldr	r3, [pc, #508]	; (800ff60 <LidarSetPos+0x1258>)
 800fd64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd6a:	d108      	bne.n	800fd7e <LidarSetPos+0x1076>
						{
							while(ps4.button == SQUARE);
 800fd6c:	bf00      	nop
 800fd6e:	4b7c      	ldr	r3, [pc, #496]	; (800ff60 <LidarSetPos+0x1258>)
 800fd70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd76:	d0fa      	beq.n	800fd6e <LidarSetPos+0x1066>
							PP_stop(&pp);
 800fd78:	487a      	ldr	r0, [pc, #488]	; (800ff64 <LidarSetPos+0x125c>)
 800fd7a:	f7f5 ffd6 	bl	8005d2a <PP_stop>
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800fd7e:	2108      	movs	r1, #8
 800fd80:	4879      	ldr	r0, [pc, #484]	; (800ff68 <LidarSetPos+0x1260>)
 800fd82:	f003 f85f 	bl	8012e44 <HAL_GPIO_ReadPin>
 800fd86:	4603      	mov	r3, r0
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d109      	bne.n	800fda0 <LidarSetPos+0x1098>
 800fd8c:	2110      	movs	r1, #16
 800fd8e:	4876      	ldr	r0, [pc, #472]	; (800ff68 <LidarSetPos+0x1260>)
 800fd90:	f003 f858 	bl	8012e44 <HAL_GPIO_ReadPin>
 800fd94:	4603      	mov	r3, r0
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d102      	bne.n	800fda0 <LidarSetPos+0x1098>
							PP_stop(&pp);
 800fd9a:	4872      	ldr	r0, [pc, #456]	; (800ff64 <LidarSetPos+0x125c>)
 800fd9c:	f7f5 ffc5 	bl	8005d2a <PP_stop>
					while(pp.pp_start)
 800fda0:	4b70      	ldr	r3, [pc, #448]	; (800ff64 <LidarSetPos+0x125c>)
 800fda2:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800fda6:	f003 0301 	and.w	r3, r3, #1
 800fdaa:	b2db      	uxtb	r3, r3
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d1d8      	bne.n	800fd62 <LidarSetPos+0x105a>
					}
					stick_fence = 1;
 800fdb0:	4b6e      	ldr	r3, [pc, #440]	; (800ff6c <LidarSetPos+0x1264>)
 800fdb2:	2201      	movs	r2, #1
 800fdb4:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800fdb6:	463b      	mov	r3, r7
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800fdbe:	1dfa      	adds	r2, r7, #7
 800fdc0:	7812      	ldrb	r2, [r2, #0]
 800fdc2:	429a      	cmp	r2, r3
 800fdc4:	d103      	bne.n	800fdce <LidarSetPos+0x10c6>
						LidarAdjust(lidar);
 800fdc6:	463b      	mov	r3, r7
 800fdc8:	6818      	ldr	r0, [r3, #0]
 800fdca:	f000 fc51 	bl	8010670 <LidarAdjust>

				default:
					break;
 800fdce:	bf00      	nop
 800fdd0:	f000 bc40 	b.w	8010654 <LidarSetPos+0x194c>
					break;
 800fdd4:	bf00      	nop
 800fdd6:	f000 bc3d 	b.w	8010654 <LidarSetPos+0x194c>
					break;
 800fdda:	bf00      	nop
 800fddc:	f000 bc3a 	b.w	8010654 <LidarSetPos+0x194c>
					break;
 800fde0:	bf00      	nop
			}
			break;
 800fde2:	f000 bc37 	b.w	8010654 <LidarSetPos+0x194c>

		case CENTER_3:
			switch(lidar->pos) // Self Pose
 800fde6:	463b      	mov	r3, r7
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800fdee:	3b01      	subs	r3, #1
 800fdf0:	2b08      	cmp	r3, #8
 800fdf2:	f200 81bf 	bhi.w	8010174 <LidarSetPos+0x146c>
 800fdf6:	a201      	add	r2, pc, #4	; (adr r2, 800fdfc <LidarSetPos+0x10f4>)
 800fdf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdfc:	0800fe21 	.word	0x0800fe21
 800fe00:	0800fe39 	.word	0x0800fe39
 800fe04:	08010175 	.word	0x08010175
 800fe08:	0800ff7d 	.word	0x0800ff7d
 800fe0c:	0800fe51 	.word	0x0800fe51
 800fe10:	08010175 	.word	0x08010175
 800fe14:	08010067 	.word	0x08010067
 800fe18:	0800fe45 	.word	0x0800fe45
 800fe1c:	0800fe2d 	.word	0x0800fe2d
			{
				case PICK_LEFT:
					lidar->pos = CENTER_3;
 800fe20:	463b      	mov	r3, r7
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	2206      	movs	r2, #6
 800fe26:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800fe2a:	e1aa      	b.n	8010182 <LidarSetPos+0x147a>

				case PICK_RIGHT:
					lidar->pos = CENTER_3;
 800fe2c:	463b      	mov	r3, r7
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	2206      	movs	r2, #6
 800fe32:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800fe36:	e1a4      	b.n	8010182 <LidarSetPos+0x147a>

				case UPPER_LEFT:
					lidar->pos = CENTER_3;
 800fe38:	463b      	mov	r3, r7
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	2206      	movs	r2, #6
 800fe3e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800fe42:	e19e      	b.n	8010182 <LidarSetPos+0x147a>

				case UPPER_RIGHT:
					lidar->pos = CENTER_3;
 800fe44:	463b      	mov	r3, r7
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	2206      	movs	r2, #6
 800fe4a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800fe4e:	e198      	b.n	8010182 <LidarSetPos+0x147a>

				case CENTER:
					stick_fence = 0;
 800fe50:	4b46      	ldr	r3, [pc, #280]	; (800ff6c <LidarSetPos+0x1264>)
 800fe52:	2200      	movs	r2, #0
 800fe54:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.27;
 800fe56:	4b46      	ldr	r3, [pc, #280]	; (800ff70 <LidarSetPos+0x1268>)
 800fe58:	4a47      	ldr	r2, [pc, #284]	; (800ff78 <LidarSetPos+0x1270>)
 800fe5a:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800fe5c:	f7fb fe26 	bl	800baac <ResetCoordinate>
					lidar->pos = CENTER_3;
 800fe60:	463b      	mov	r3, r7
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	2206      	movs	r2, #6
 800fe66:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_to_center_3, 1, &pp);
 800fe6a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800fe6e:	4a3d      	ldr	r2, [pc, #244]	; (800ff64 <LidarSetPos+0x125c>)
 800fe70:	2101      	movs	r1, #1
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7f5 fd1f 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 800fe78:	e029      	b.n	800fece <LidarSetPos+0x11c6>
					{
						if(ps4.button == SQUARE)
 800fe7a:	4b39      	ldr	r3, [pc, #228]	; (800ff60 <LidarSetPos+0x1258>)
 800fe7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe82:	d111      	bne.n	800fea8 <LidarSetPos+0x11a0>
						{
							while(ps4.button == SQUARE);
 800fe84:	bf00      	nop
 800fe86:	4b36      	ldr	r3, [pc, #216]	; (800ff60 <LidarSetPos+0x1258>)
 800fe88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe8e:	d0fa      	beq.n	800fe86 <LidarSetPos+0x117e>
							StopAutoPP();
 800fe90:	f7fb fdd2 	bl	800ba38 <StopAutoPP>
							lidar->pos = CENTER;
 800fe94:	463b      	mov	r3, r7
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	2205      	movs	r2, #5
 800fe9a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = CENTER;
 800fe9e:	463b      	mov	r3, r7
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	2205      	movs	r2, #5
 800fea4:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800fea8:	2108      	movs	r1, #8
 800feaa:	482f      	ldr	r0, [pc, #188]	; (800ff68 <LidarSetPos+0x1260>)
 800feac:	f002 ffca 	bl	8012e44 <HAL_GPIO_ReadPin>
 800feb0:	4603      	mov	r3, r0
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d10b      	bne.n	800fece <LidarSetPos+0x11c6>
 800feb6:	2110      	movs	r1, #16
 800feb8:	482b      	ldr	r0, [pc, #172]	; (800ff68 <LidarSetPos+0x1260>)
 800feba:	f002 ffc3 	bl	8012e44 <HAL_GPIO_ReadPin>
 800febe:	4603      	mov	r3, r0
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d104      	bne.n	800fece <LidarSetPos+0x11c6>
							pp.error_y = 0;
 800fec4:	4b27      	ldr	r3, [pc, #156]	; (800ff64 <LidarSetPos+0x125c>)
 800fec6:	f04f 0200 	mov.w	r2, #0
 800feca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800fece:	4b25      	ldr	r3, [pc, #148]	; (800ff64 <LidarSetPos+0x125c>)
 800fed0:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800fed4:	f003 0301 	and.w	r3, r3, #1
 800fed8:	b2db      	uxtb	r3, r3
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d1cd      	bne.n	800fe7a <LidarSetPos+0x1172>
					}

					PP_start(bang_fence, 1, &pp);
 800fede:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800fee2:	4a20      	ldr	r2, [pc, #128]	; (800ff64 <LidarSetPos+0x125c>)
 800fee4:	2101      	movs	r1, #1
 800fee6:	4618      	mov	r0, r3
 800fee8:	f7f5 fce5 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 800feec:	e01e      	b.n	800ff2c <LidarSetPos+0x1224>
					{
						if(ps4.button == SQUARE)
 800feee:	4b1c      	ldr	r3, [pc, #112]	; (800ff60 <LidarSetPos+0x1258>)
 800fef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fef6:	d108      	bne.n	800ff0a <LidarSetPos+0x1202>
						{
							while(ps4.button == SQUARE);
 800fef8:	bf00      	nop
 800fefa:	4b19      	ldr	r3, [pc, #100]	; (800ff60 <LidarSetPos+0x1258>)
 800fefc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fefe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff02:	d0fa      	beq.n	800fefa <LidarSetPos+0x11f2>
							PP_stop(&pp);
 800ff04:	4817      	ldr	r0, [pc, #92]	; (800ff64 <LidarSetPos+0x125c>)
 800ff06:	f7f5 ff10 	bl	8005d2a <PP_stop>
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 800ff0a:	2108      	movs	r1, #8
 800ff0c:	4816      	ldr	r0, [pc, #88]	; (800ff68 <LidarSetPos+0x1260>)
 800ff0e:	f002 ff99 	bl	8012e44 <HAL_GPIO_ReadPin>
 800ff12:	4603      	mov	r3, r0
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d109      	bne.n	800ff2c <LidarSetPos+0x1224>
 800ff18:	2110      	movs	r1, #16
 800ff1a:	4813      	ldr	r0, [pc, #76]	; (800ff68 <LidarSetPos+0x1260>)
 800ff1c:	f002 ff92 	bl	8012e44 <HAL_GPIO_ReadPin>
 800ff20:	4603      	mov	r3, r0
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d102      	bne.n	800ff2c <LidarSetPos+0x1224>
							PP_stop(&pp);
 800ff26:	480f      	ldr	r0, [pc, #60]	; (800ff64 <LidarSetPos+0x125c>)
 800ff28:	f7f5 feff 	bl	8005d2a <PP_stop>
					while(pp.pp_start)
 800ff2c:	4b0d      	ldr	r3, [pc, #52]	; (800ff64 <LidarSetPos+0x125c>)
 800ff2e:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800ff32:	f003 0301 	and.w	r3, r3, #1
 800ff36:	b2db      	uxtb	r3, r3
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d1d8      	bne.n	800feee <LidarSetPos+0x11e6>
					}
					stick_fence = 1;
 800ff3c:	4b0b      	ldr	r3, [pc, #44]	; (800ff6c <LidarSetPos+0x1264>)
 800ff3e:	2201      	movs	r2, #1
 800ff40:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800ff42:	463b      	mov	r3, r7
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800ff4a:	1dfa      	adds	r2, r7, #7
 800ff4c:	7812      	ldrb	r2, [r2, #0]
 800ff4e:	429a      	cmp	r2, r3
 800ff50:	f040 8112 	bne.w	8010178 <LidarSetPos+0x1470>
						LidarAdjust(lidar);
 800ff54:	463b      	mov	r3, r7
 800ff56:	6818      	ldr	r0, [r3, #0]
 800ff58:	f000 fb8a 	bl	8010670 <LidarAdjust>
					break;
 800ff5c:	e10c      	b.n	8010178 <LidarSetPos+0x1470>
 800ff5e:	bf00      	nop
 800ff60:	2000a3fc 	.word	0x2000a3fc
 800ff64:	2000718c 	.word	0x2000718c
 800ff68:	40020c00 	.word	0x40020c00
 800ff6c:	20007784 	.word	0x20007784
 800ff70:	20007848 	.word	0x20007848
 800ff74:	3e28f5c3 	.word	0x3e28f5c3
 800ff78:	3e8a3d71 	.word	0x3e8a3d71

				case CENTER_2:
					stick_fence = 0;
 800ff7c:	4bb2      	ldr	r3, [pc, #712]	; (8010248 <LidarSetPos+0x1540>)
 800ff7e:	2200      	movs	r2, #0
 800ff80:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.27;
 800ff82:	4bb2      	ldr	r3, [pc, #712]	; (801024c <LidarSetPos+0x1544>)
 800ff84:	4ab2      	ldr	r2, [pc, #712]	; (8010250 <LidarSetPos+0x1548>)
 800ff86:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800ff88:	f7fb fd90 	bl	800baac <ResetCoordinate>
					lidar->pos = CENTER_3;
 800ff8c:	463b      	mov	r3, r7
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	2206      	movs	r2, #6
 800ff92:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_2_to_center_3, 1, &pp);
 800ff96:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ff9a:	4aae      	ldr	r2, [pc, #696]	; (8010254 <LidarSetPos+0x154c>)
 800ff9c:	2101      	movs	r1, #1
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f7f5 fc89 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 800ffa4:	e017      	b.n	800ffd6 <LidarSetPos+0x12ce>
					{
						if(ps4.button == SQUARE)
 800ffa6:	4bac      	ldr	r3, [pc, #688]	; (8010258 <LidarSetPos+0x1550>)
 800ffa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ffae:	d112      	bne.n	800ffd6 <LidarSetPos+0x12ce>
						{
							while(ps4.button == SQUARE);
 800ffb0:	bf00      	nop
 800ffb2:	4ba9      	ldr	r3, [pc, #676]	; (8010258 <LidarSetPos+0x1550>)
 800ffb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ffba:	d0fa      	beq.n	800ffb2 <LidarSetPos+0x12aa>
							PP_stop(&pp);
 800ffbc:	48a5      	ldr	r0, [pc, #660]	; (8010254 <LidarSetPos+0x154c>)
 800ffbe:	f7f5 feb4 	bl	8005d2a <PP_stop>
							lidar->pos = CENTER_2; // PP Failed
 800ffc2:	463b      	mov	r3, r7
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	2204      	movs	r2, #4
 800ffc8:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = CENTER_2;
 800ffcc:	463b      	mov	r3, r7
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	2204      	movs	r2, #4
 800ffd2:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
					while(pp.pp_start)
 800ffd6:	4b9f      	ldr	r3, [pc, #636]	; (8010254 <LidarSetPos+0x154c>)
 800ffd8:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800ffdc:	f003 0301 	and.w	r3, r3, #1
 800ffe0:	b2db      	uxtb	r3, r3
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d1df      	bne.n	800ffa6 <LidarSetPos+0x129e>
						}
					}

					PP_start(bang_fence, 1, &pp);
 800ffe6:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800ffea:	4a9a      	ldr	r2, [pc, #616]	; (8010254 <LidarSetPos+0x154c>)
 800ffec:	2101      	movs	r1, #1
 800ffee:	4618      	mov	r0, r3
 800fff0:	f7f5 fc61 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 800fff4:	e01e      	b.n	8010034 <LidarSetPos+0x132c>
					{
						if(ps4.button == SQUARE)
 800fff6:	4b98      	ldr	r3, [pc, #608]	; (8010258 <LidarSetPos+0x1550>)
 800fff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fffe:	d108      	bne.n	8010012 <LidarSetPos+0x130a>
						{
							while(ps4.button == SQUARE);
 8010000:	bf00      	nop
 8010002:	4b95      	ldr	r3, [pc, #596]	; (8010258 <LidarSetPos+0x1550>)
 8010004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010006:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801000a:	d0fa      	beq.n	8010002 <LidarSetPos+0x12fa>
							PP_stop(&pp);
 801000c:	4891      	ldr	r0, [pc, #580]	; (8010254 <LidarSetPos+0x154c>)
 801000e:	f7f5 fe8c 	bl	8005d2a <PP_stop>
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 8010012:	2108      	movs	r1, #8
 8010014:	4891      	ldr	r0, [pc, #580]	; (801025c <LidarSetPos+0x1554>)
 8010016:	f002 ff15 	bl	8012e44 <HAL_GPIO_ReadPin>
 801001a:	4603      	mov	r3, r0
 801001c:	2b00      	cmp	r3, #0
 801001e:	d109      	bne.n	8010034 <LidarSetPos+0x132c>
 8010020:	2110      	movs	r1, #16
 8010022:	488e      	ldr	r0, [pc, #568]	; (801025c <LidarSetPos+0x1554>)
 8010024:	f002 ff0e 	bl	8012e44 <HAL_GPIO_ReadPin>
 8010028:	4603      	mov	r3, r0
 801002a:	2b00      	cmp	r3, #0
 801002c:	d102      	bne.n	8010034 <LidarSetPos+0x132c>
							PP_stop(&pp);
 801002e:	4889      	ldr	r0, [pc, #548]	; (8010254 <LidarSetPos+0x154c>)
 8010030:	f7f5 fe7b 	bl	8005d2a <PP_stop>
					while(pp.pp_start)
 8010034:	4b87      	ldr	r3, [pc, #540]	; (8010254 <LidarSetPos+0x154c>)
 8010036:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 801003a:	f003 0301 	and.w	r3, r3, #1
 801003e:	b2db      	uxtb	r3, r3
 8010040:	2b00      	cmp	r3, #0
 8010042:	d1d8      	bne.n	800fff6 <LidarSetPos+0x12ee>
					}
					stick_fence = 1;
 8010044:	4b80      	ldr	r3, [pc, #512]	; (8010248 <LidarSetPos+0x1540>)
 8010046:	2201      	movs	r2, #1
 8010048:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 801004a:	463b      	mov	r3, r7
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 8010052:	1dfa      	adds	r2, r7, #7
 8010054:	7812      	ldrb	r2, [r2, #0]
 8010056:	429a      	cmp	r2, r3
 8010058:	f040 8090 	bne.w	801017c <LidarSetPos+0x1474>
						LidarAdjust(lidar);
 801005c:	463b      	mov	r3, r7
 801005e:	6818      	ldr	r0, [r3, #0]
 8010060:	f000 fb06 	bl	8010670 <LidarAdjust>
					break;
 8010064:	e08a      	b.n	801017c <LidarSetPos+0x1474>


				case CENTER_4:
					stick_fence = 0;
 8010066:	4b78      	ldr	r3, [pc, #480]	; (8010248 <LidarSetPos+0x1540>)
 8010068:	2200      	movs	r2, #0
 801006a:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.27;
 801006c:	4b77      	ldr	r3, [pc, #476]	; (801024c <LidarSetPos+0x1544>)
 801006e:	4a78      	ldr	r2, [pc, #480]	; (8010250 <LidarSetPos+0x1548>)
 8010070:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 8010072:	f7fb fd1b 	bl	800baac <ResetCoordinate>
					lidar->pos = CENTER_3;
 8010076:	463b      	mov	r3, r7
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	2206      	movs	r2, #6
 801007c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_4_to_center_3, 1, &pp);
 8010080:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8010084:	4a73      	ldr	r2, [pc, #460]	; (8010254 <LidarSetPos+0x154c>)
 8010086:	2101      	movs	r1, #1
 8010088:	4618      	mov	r0, r3
 801008a:	f7f5 fc14 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 801008e:	e02a      	b.n	80100e6 <LidarSetPos+0x13de>
					{
						if(ps4.button == SQUARE)
 8010090:	4b71      	ldr	r3, [pc, #452]	; (8010258 <LidarSetPos+0x1550>)
 8010092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010098:	d112      	bne.n	80100c0 <LidarSetPos+0x13b8>
						{
							while(ps4.button == SQUARE);
 801009a:	bf00      	nop
 801009c:	4b6e      	ldr	r3, [pc, #440]	; (8010258 <LidarSetPos+0x1550>)
 801009e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80100a4:	d0fa      	beq.n	801009c <LidarSetPos+0x1394>
							PP_stop(&pp);
 80100a6:	486b      	ldr	r0, [pc, #428]	; (8010254 <LidarSetPos+0x154c>)
 80100a8:	f7f5 fe3f 	bl	8005d2a <PP_stop>
							lidar->pos = CENTER_4;
 80100ac:	463b      	mov	r3, r7
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	2207      	movs	r2, #7
 80100b2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = CENTER_4;
 80100b6:	463b      	mov	r3, r7
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	2207      	movs	r2, #7
 80100bc:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 80100c0:	2108      	movs	r1, #8
 80100c2:	4866      	ldr	r0, [pc, #408]	; (801025c <LidarSetPos+0x1554>)
 80100c4:	f002 febe 	bl	8012e44 <HAL_GPIO_ReadPin>
 80100c8:	4603      	mov	r3, r0
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d10b      	bne.n	80100e6 <LidarSetPos+0x13de>
 80100ce:	2110      	movs	r1, #16
 80100d0:	4862      	ldr	r0, [pc, #392]	; (801025c <LidarSetPos+0x1554>)
 80100d2:	f002 feb7 	bl	8012e44 <HAL_GPIO_ReadPin>
 80100d6:	4603      	mov	r3, r0
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d104      	bne.n	80100e6 <LidarSetPos+0x13de>
							pp.error_y = 0;
 80100dc:	4b5d      	ldr	r3, [pc, #372]	; (8010254 <LidarSetPos+0x154c>)
 80100de:	f04f 0200 	mov.w	r2, #0
 80100e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 80100e6:	4b5b      	ldr	r3, [pc, #364]	; (8010254 <LidarSetPos+0x154c>)
 80100e8:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80100ec:	f003 0301 	and.w	r3, r3, #1
 80100f0:	b2db      	uxtb	r3, r3
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d1cc      	bne.n	8010090 <LidarSetPos+0x1388>
					}

					PP_start(bang_fence, 1, &pp);
 80100f6:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80100fa:	4a56      	ldr	r2, [pc, #344]	; (8010254 <LidarSetPos+0x154c>)
 80100fc:	2101      	movs	r1, #1
 80100fe:	4618      	mov	r0, r3
 8010100:	f7f5 fbd9 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 8010104:	e01e      	b.n	8010144 <LidarSetPos+0x143c>
					{
						if(ps4.button == SQUARE)
 8010106:	4b54      	ldr	r3, [pc, #336]	; (8010258 <LidarSetPos+0x1550>)
 8010108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801010a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801010e:	d108      	bne.n	8010122 <LidarSetPos+0x141a>
						{
							while(ps4.button == SQUARE);
 8010110:	bf00      	nop
 8010112:	4b51      	ldr	r3, [pc, #324]	; (8010258 <LidarSetPos+0x1550>)
 8010114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801011a:	d0fa      	beq.n	8010112 <LidarSetPos+0x140a>
							PP_stop(&pp);
 801011c:	484d      	ldr	r0, [pc, #308]	; (8010254 <LidarSetPos+0x154c>)
 801011e:	f7f5 fe04 	bl	8005d2a <PP_stop>
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 8010122:	2108      	movs	r1, #8
 8010124:	484d      	ldr	r0, [pc, #308]	; (801025c <LidarSetPos+0x1554>)
 8010126:	f002 fe8d 	bl	8012e44 <HAL_GPIO_ReadPin>
 801012a:	4603      	mov	r3, r0
 801012c:	2b00      	cmp	r3, #0
 801012e:	d109      	bne.n	8010144 <LidarSetPos+0x143c>
 8010130:	2110      	movs	r1, #16
 8010132:	484a      	ldr	r0, [pc, #296]	; (801025c <LidarSetPos+0x1554>)
 8010134:	f002 fe86 	bl	8012e44 <HAL_GPIO_ReadPin>
 8010138:	4603      	mov	r3, r0
 801013a:	2b00      	cmp	r3, #0
 801013c:	d102      	bne.n	8010144 <LidarSetPos+0x143c>
							PP_stop(&pp);
 801013e:	4845      	ldr	r0, [pc, #276]	; (8010254 <LidarSetPos+0x154c>)
 8010140:	f7f5 fdf3 	bl	8005d2a <PP_stop>
					while(pp.pp_start)
 8010144:	4b43      	ldr	r3, [pc, #268]	; (8010254 <LidarSetPos+0x154c>)
 8010146:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 801014a:	f003 0301 	and.w	r3, r3, #1
 801014e:	b2db      	uxtb	r3, r3
 8010150:	2b00      	cmp	r3, #0
 8010152:	d1d8      	bne.n	8010106 <LidarSetPos+0x13fe>
					}
					stick_fence = 1;
 8010154:	4b3c      	ldr	r3, [pc, #240]	; (8010248 <LidarSetPos+0x1540>)
 8010156:	2201      	movs	r2, #1
 8010158:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 801015a:	463b      	mov	r3, r7
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 8010162:	1dfa      	adds	r2, r7, #7
 8010164:	7812      	ldrb	r2, [r2, #0]
 8010166:	429a      	cmp	r2, r3
 8010168:	d10a      	bne.n	8010180 <LidarSetPos+0x1478>
						LidarAdjust(lidar);
 801016a:	463b      	mov	r3, r7
 801016c:	6818      	ldr	r0, [r3, #0]
 801016e:	f000 fa7f 	bl	8010670 <LidarAdjust>
					break;
 8010172:	e005      	b.n	8010180 <LidarSetPos+0x1478>

				default:
					break;
 8010174:	bf00      	nop
 8010176:	e26d      	b.n	8010654 <LidarSetPos+0x194c>
					break;
 8010178:	bf00      	nop
 801017a:	e26b      	b.n	8010654 <LidarSetPos+0x194c>
					break;
 801017c:	bf00      	nop
 801017e:	e269      	b.n	8010654 <LidarSetPos+0x194c>
					break;
 8010180:	bf00      	nop
			}
			break;
 8010182:	e267      	b.n	8010654 <LidarSetPos+0x194c>

		case CENTER_4:
			switch(lidar->pos) // Self Pose
 8010184:	463b      	mov	r3, r7
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 801018c:	3b01      	subs	r3, #1
 801018e:	2b08      	cmp	r3, #8
 8010190:	f200 81ed 	bhi.w	801056e <LidarSetPos+0x1866>
 8010194:	a201      	add	r2, pc, #4	; (adr r2, 801019c <LidarSetPos+0x1494>)
 8010196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801019a:	bf00      	nop
 801019c:	080101c1 	.word	0x080101c1
 80101a0:	08010431 	.word	0x08010431
 80101a4:	0801056f 	.word	0x0801056f
 80101a8:	0801056f 	.word	0x0801056f
 80101ac:	080101cd 	.word	0x080101cd
 80101b0:	08010449 	.word	0x08010449
 80101b4:	0801056f 	.word	0x0801056f
 80101b8:	0801043d 	.word	0x0801043d
 80101bc:	080102d1 	.word	0x080102d1
			{
				case PICK_LEFT:
					lidar->pos = CENTER_4;
 80101c0:	463b      	mov	r3, r7
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	2207      	movs	r2, #7
 80101c6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 80101ca:	e1d5      	b.n	8010578 <LidarSetPos+0x1870>

				case CENTER:
					stick_fence = 0;
 80101cc:	4b1e      	ldr	r3, [pc, #120]	; (8010248 <LidarSetPos+0x1540>)
 80101ce:	2200      	movs	r2, #0
 80101d0:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.165;
 80101d2:	4b1e      	ldr	r3, [pc, #120]	; (801024c <LidarSetPos+0x1544>)
 80101d4:	4a22      	ldr	r2, [pc, #136]	; (8010260 <LidarSetPos+0x1558>)
 80101d6:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 80101d8:	f7fb fc68 	bl	800baac <ResetCoordinate>
					lidar->pos = CENTER_4;
 80101dc:	463b      	mov	r3, r7
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	2207      	movs	r2, #7
 80101e2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_to_center_4, 1, &pp);
 80101e6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80101ea:	4a1a      	ldr	r2, [pc, #104]	; (8010254 <LidarSetPos+0x154c>)
 80101ec:	2101      	movs	r1, #1
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7f5 fb61 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 80101f4:	e017      	b.n	8010226 <LidarSetPos+0x151e>
					{
						if(ps4.button == SQUARE)
 80101f6:	4b18      	ldr	r3, [pc, #96]	; (8010258 <LidarSetPos+0x1550>)
 80101f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80101fe:	d112      	bne.n	8010226 <LidarSetPos+0x151e>
						{
							while(ps4.button == SQUARE);
 8010200:	bf00      	nop
 8010202:	4b15      	ldr	r3, [pc, #84]	; (8010258 <LidarSetPos+0x1550>)
 8010204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801020a:	d0fa      	beq.n	8010202 <LidarSetPos+0x14fa>
							PP_stop(&pp);
 801020c:	4811      	ldr	r0, [pc, #68]	; (8010254 <LidarSetPos+0x154c>)
 801020e:	f7f5 fd8c 	bl	8005d2a <PP_stop>
							lidar->pos = CENTER; // PP Failed
 8010212:	463b      	mov	r3, r7
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	2205      	movs	r2, #5
 8010218:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = CENTER;
 801021c:	463b      	mov	r3, r7
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	2205      	movs	r2, #5
 8010222:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
					while(pp.pp_start)
 8010226:	4b0b      	ldr	r3, [pc, #44]	; (8010254 <LidarSetPos+0x154c>)
 8010228:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 801022c:	f003 0301 	and.w	r3, r3, #1
 8010230:	b2db      	uxtb	r3, r3
 8010232:	2b00      	cmp	r3, #0
 8010234:	d1df      	bne.n	80101f6 <LidarSetPos+0x14ee>
						}
					}

					PP_start(bang_fence, 1, &pp);
 8010236:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801023a:	4a06      	ldr	r2, [pc, #24]	; (8010254 <LidarSetPos+0x154c>)
 801023c:	2101      	movs	r1, #1
 801023e:	4618      	mov	r0, r3
 8010240:	f7f5 fb39 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 8010244:	e02d      	b.n	80102a2 <LidarSetPos+0x159a>
 8010246:	bf00      	nop
 8010248:	20007784 	.word	0x20007784
 801024c:	20007848 	.word	0x20007848
 8010250:	3e8a3d71 	.word	0x3e8a3d71
 8010254:	2000718c 	.word	0x2000718c
 8010258:	2000a3fc 	.word	0x2000a3fc
 801025c:	40020c00 	.word	0x40020c00
 8010260:	3e28f5c3 	.word	0x3e28f5c3
					{
						if(ps4.button == SQUARE)
 8010264:	4ba0      	ldr	r3, [pc, #640]	; (80104e8 <LidarSetPos+0x17e0>)
 8010266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801026c:	d108      	bne.n	8010280 <LidarSetPos+0x1578>
						{
							while(ps4.button == SQUARE);
 801026e:	bf00      	nop
 8010270:	4b9d      	ldr	r3, [pc, #628]	; (80104e8 <LidarSetPos+0x17e0>)
 8010272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010278:	d0fa      	beq.n	8010270 <LidarSetPos+0x1568>
							PP_stop(&pp);
 801027a:	489c      	ldr	r0, [pc, #624]	; (80104ec <LidarSetPos+0x17e4>)
 801027c:	f7f5 fd55 	bl	8005d2a <PP_stop>
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 8010280:	2108      	movs	r1, #8
 8010282:	489b      	ldr	r0, [pc, #620]	; (80104f0 <LidarSetPos+0x17e8>)
 8010284:	f002 fdde 	bl	8012e44 <HAL_GPIO_ReadPin>
 8010288:	4603      	mov	r3, r0
 801028a:	2b00      	cmp	r3, #0
 801028c:	d109      	bne.n	80102a2 <LidarSetPos+0x159a>
 801028e:	2110      	movs	r1, #16
 8010290:	4897      	ldr	r0, [pc, #604]	; (80104f0 <LidarSetPos+0x17e8>)
 8010292:	f002 fdd7 	bl	8012e44 <HAL_GPIO_ReadPin>
 8010296:	4603      	mov	r3, r0
 8010298:	2b00      	cmp	r3, #0
 801029a:	d102      	bne.n	80102a2 <LidarSetPos+0x159a>
							PP_stop(&pp);
 801029c:	4893      	ldr	r0, [pc, #588]	; (80104ec <LidarSetPos+0x17e4>)
 801029e:	f7f5 fd44 	bl	8005d2a <PP_stop>
					while(pp.pp_start)
 80102a2:	4b92      	ldr	r3, [pc, #584]	; (80104ec <LidarSetPos+0x17e4>)
 80102a4:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80102a8:	f003 0301 	and.w	r3, r3, #1
 80102ac:	b2db      	uxtb	r3, r3
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d1d8      	bne.n	8010264 <LidarSetPos+0x155c>
					}
					stick_fence = 1;
 80102b2:	4b90      	ldr	r3, [pc, #576]	; (80104f4 <LidarSetPos+0x17ec>)
 80102b4:	2201      	movs	r2, #1
 80102b6:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 80102b8:	463b      	mov	r3, r7
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 80102c0:	1dfa      	adds	r2, r7, #7
 80102c2:	7812      	ldrb	r2, [r2, #0]
 80102c4:	429a      	cmp	r2, r3
 80102c6:	d103      	bne.n	80102d0 <LidarSetPos+0x15c8>
						LidarAdjust(lidar);
 80102c8:	463b      	mov	r3, r7
 80102ca:	6818      	ldr	r0, [r3, #0]
 80102cc:	f000 f9d0 	bl	8010670 <LidarAdjust>

				case PICK_RIGHT:
					stick_fence = 0;
 80102d0:	4b88      	ldr	r3, [pc, #544]	; (80104f4 <LidarSetPos+0x17ec>)
 80102d2:	2200      	movs	r2, #0
 80102d4:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.165;
 80102d6:	4b88      	ldr	r3, [pc, #544]	; (80104f8 <LidarSetPos+0x17f0>)
 80102d8:	4a88      	ldr	r2, [pc, #544]	; (80104fc <LidarSetPos+0x17f4>)
 80102da:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 80102dc:	f7fb fbe6 	bl	800baac <ResetCoordinate>
					lidar->pos = CENTER_4;
 80102e0:	463b      	mov	r3, r7
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	2207      	movs	r2, #7
 80102e6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd

					PP_start(pick_right_to_center_4_servo, 1, &pp);
 80102ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80102ee:	4a7f      	ldr	r2, [pc, #508]	; (80104ec <LidarSetPos+0x17e4>)
 80102f0:	2101      	movs	r1, #1
 80102f2:	4618      	mov	r0, r3
 80102f4:	f7f5 fadf 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 80102f8:	e017      	b.n	801032a <LidarSetPos+0x1622>
					{
						if(ps4.button == SQUARE)
 80102fa:	4b7b      	ldr	r3, [pc, #492]	; (80104e8 <LidarSetPos+0x17e0>)
 80102fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010302:	d112      	bne.n	801032a <LidarSetPos+0x1622>
						{
							while(ps4.button == SQUARE);
 8010304:	bf00      	nop
 8010306:	4b78      	ldr	r3, [pc, #480]	; (80104e8 <LidarSetPos+0x17e0>)
 8010308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801030a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801030e:	d0fa      	beq.n	8010306 <LidarSetPos+0x15fe>
							PP_stop(&pp);
 8010310:	4876      	ldr	r0, [pc, #472]	; (80104ec <LidarSetPos+0x17e4>)
 8010312:	f7f5 fd0a 	bl	8005d2a <PP_stop>
							lidar->pos = PICK_RIGHT;
 8010316:	463b      	mov	r3, r7
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	2209      	movs	r2, #9
 801031c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = PICK_RIGHT;
 8010320:	463b      	mov	r3, r7
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	2209      	movs	r2, #9
 8010326:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
					while(pp.pp_start)
 801032a:	4b70      	ldr	r3, [pc, #448]	; (80104ec <LidarSetPos+0x17e4>)
 801032c:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8010330:	f003 0301 	and.w	r3, r3, #1
 8010334:	b2db      	uxtb	r3, r3
 8010336:	2b00      	cmp	r3, #0
 8010338:	d1df      	bne.n	80102fa <LidarSetPos+0x15f2>
						}
					}

					PP_start(pick_right_to_center_4, 1, &pp);
 801033a:	f107 0308 	add.w	r3, r7, #8
 801033e:	4a6b      	ldr	r2, [pc, #428]	; (80104ec <LidarSetPos+0x17e4>)
 8010340:	2101      	movs	r1, #1
 8010342:	4618      	mov	r0, r3
 8010344:	f7f5 fab7 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 8010348:	e02a      	b.n	80103a0 <LidarSetPos+0x1698>
					{
						if(ps4.button == SQUARE)
 801034a:	4b67      	ldr	r3, [pc, #412]	; (80104e8 <LidarSetPos+0x17e0>)
 801034c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801034e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010352:	d112      	bne.n	801037a <LidarSetPos+0x1672>
						{
							while(ps4.button == SQUARE);
 8010354:	bf00      	nop
 8010356:	4b64      	ldr	r3, [pc, #400]	; (80104e8 <LidarSetPos+0x17e0>)
 8010358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801035a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801035e:	d0fa      	beq.n	8010356 <LidarSetPos+0x164e>
							PP_stop(&pp);
 8010360:	4862      	ldr	r0, [pc, #392]	; (80104ec <LidarSetPos+0x17e4>)
 8010362:	f7f5 fce2 	bl	8005d2a <PP_stop>
							lidar->pos = PICK_RIGHT;
 8010366:	463b      	mov	r3, r7
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	2209      	movs	r2, #9
 801036c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = PICK_RIGHT;
 8010370:	463b      	mov	r3, r7
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	2209      	movs	r2, #9
 8010376:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 801037a:	2108      	movs	r1, #8
 801037c:	485c      	ldr	r0, [pc, #368]	; (80104f0 <LidarSetPos+0x17e8>)
 801037e:	f002 fd61 	bl	8012e44 <HAL_GPIO_ReadPin>
 8010382:	4603      	mov	r3, r0
 8010384:	2b00      	cmp	r3, #0
 8010386:	d10b      	bne.n	80103a0 <LidarSetPos+0x1698>
 8010388:	2110      	movs	r1, #16
 801038a:	4859      	ldr	r0, [pc, #356]	; (80104f0 <LidarSetPos+0x17e8>)
 801038c:	f002 fd5a 	bl	8012e44 <HAL_GPIO_ReadPin>
 8010390:	4603      	mov	r3, r0
 8010392:	2b00      	cmp	r3, #0
 8010394:	d104      	bne.n	80103a0 <LidarSetPos+0x1698>
							pp.error_y = 0;
 8010396:	4b55      	ldr	r3, [pc, #340]	; (80104ec <LidarSetPos+0x17e4>)
 8010398:	f04f 0200 	mov.w	r2, #0
 801039c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 80103a0:	4b52      	ldr	r3, [pc, #328]	; (80104ec <LidarSetPos+0x17e4>)
 80103a2:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80103a6:	f003 0301 	and.w	r3, r3, #1
 80103aa:	b2db      	uxtb	r3, r3
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d1cc      	bne.n	801034a <LidarSetPos+0x1642>
					}

					PP_start(bang_fence, 1, &pp);
 80103b0:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80103b4:	4a4d      	ldr	r2, [pc, #308]	; (80104ec <LidarSetPos+0x17e4>)
 80103b6:	2101      	movs	r1, #1
 80103b8:	4618      	mov	r0, r3
 80103ba:	f7f5 fa7c 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 80103be:	e01e      	b.n	80103fe <LidarSetPos+0x16f6>
					{
						if(ps4.button == SQUARE)
 80103c0:	4b49      	ldr	r3, [pc, #292]	; (80104e8 <LidarSetPos+0x17e0>)
 80103c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80103c8:	d108      	bne.n	80103dc <LidarSetPos+0x16d4>
						{
							while(ps4.button == SQUARE);
 80103ca:	bf00      	nop
 80103cc:	4b46      	ldr	r3, [pc, #280]	; (80104e8 <LidarSetPos+0x17e0>)
 80103ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80103d4:	d0fa      	beq.n	80103cc <LidarSetPos+0x16c4>
							PP_stop(&pp);
 80103d6:	4845      	ldr	r0, [pc, #276]	; (80104ec <LidarSetPos+0x17e4>)
 80103d8:	f7f5 fca7 	bl	8005d2a <PP_stop>
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 80103dc:	2108      	movs	r1, #8
 80103de:	4844      	ldr	r0, [pc, #272]	; (80104f0 <LidarSetPos+0x17e8>)
 80103e0:	f002 fd30 	bl	8012e44 <HAL_GPIO_ReadPin>
 80103e4:	4603      	mov	r3, r0
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d109      	bne.n	80103fe <LidarSetPos+0x16f6>
 80103ea:	2110      	movs	r1, #16
 80103ec:	4840      	ldr	r0, [pc, #256]	; (80104f0 <LidarSetPos+0x17e8>)
 80103ee:	f002 fd29 	bl	8012e44 <HAL_GPIO_ReadPin>
 80103f2:	4603      	mov	r3, r0
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d102      	bne.n	80103fe <LidarSetPos+0x16f6>
							PP_stop(&pp);
 80103f8:	483c      	ldr	r0, [pc, #240]	; (80104ec <LidarSetPos+0x17e4>)
 80103fa:	f7f5 fc96 	bl	8005d2a <PP_stop>
					while(pp.pp_start)
 80103fe:	4b3b      	ldr	r3, [pc, #236]	; (80104ec <LidarSetPos+0x17e4>)
 8010400:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8010404:	f003 0301 	and.w	r3, r3, #1
 8010408:	b2db      	uxtb	r3, r3
 801040a:	2b00      	cmp	r3, #0
 801040c:	d1d8      	bne.n	80103c0 <LidarSetPos+0x16b8>
					}
					stick_fence = 1;
 801040e:	4b39      	ldr	r3, [pc, #228]	; (80104f4 <LidarSetPos+0x17ec>)
 8010410:	2201      	movs	r2, #1
 8010412:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 8010414:	463b      	mov	r3, r7
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 801041c:	1dfa      	adds	r2, r7, #7
 801041e:	7812      	ldrb	r2, [r2, #0]
 8010420:	429a      	cmp	r2, r3
 8010422:	f040 80a6 	bne.w	8010572 <LidarSetPos+0x186a>
						LidarAdjust(lidar);
 8010426:	463b      	mov	r3, r7
 8010428:	6818      	ldr	r0, [r3, #0]
 801042a:	f000 f921 	bl	8010670 <LidarAdjust>
					break;
 801042e:	e0a0      	b.n	8010572 <LidarSetPos+0x186a>

				case UPPER_LEFT:
					lidar->pos = CENTER_4;
 8010430:	463b      	mov	r3, r7
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	2207      	movs	r2, #7
 8010436:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 801043a:	e09d      	b.n	8010578 <LidarSetPos+0x1870>

				case UPPER_RIGHT:
					lidar->pos = CENTER_4;
 801043c:	463b      	mov	r3, r7
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	2207      	movs	r2, #7
 8010442:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 8010446:	e097      	b.n	8010578 <LidarSetPos+0x1870>

				case CENTER_3:
					stick_fence = 0;
 8010448:	4b2a      	ldr	r3, [pc, #168]	; (80104f4 <LidarSetPos+0x17ec>)
 801044a:	2200      	movs	r2, #0
 801044c:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.165;
 801044e:	4b2a      	ldr	r3, [pc, #168]	; (80104f8 <LidarSetPos+0x17f0>)
 8010450:	4a2a      	ldr	r2, [pc, #168]	; (80104fc <LidarSetPos+0x17f4>)
 8010452:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 8010454:	f7fb fb2a 	bl	800baac <ResetCoordinate>
					lidar->pos = CENTER_4;
 8010458:	463b      	mov	r3, r7
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	2207      	movs	r2, #7
 801045e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_3_to_center_4, 1, &pp);
 8010462:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8010466:	4a21      	ldr	r2, [pc, #132]	; (80104ec <LidarSetPos+0x17e4>)
 8010468:	2101      	movs	r1, #1
 801046a:	4618      	mov	r0, r3
 801046c:	f7f5 fa23 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 8010470:	e02a      	b.n	80104c8 <LidarSetPos+0x17c0>
					{
						if(ps4.button == SQUARE)
 8010472:	4b1d      	ldr	r3, [pc, #116]	; (80104e8 <LidarSetPos+0x17e0>)
 8010474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801047a:	d112      	bne.n	80104a2 <LidarSetPos+0x179a>
						{
							while(ps4.button == SQUARE);
 801047c:	bf00      	nop
 801047e:	4b1a      	ldr	r3, [pc, #104]	; (80104e8 <LidarSetPos+0x17e0>)
 8010480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010486:	d0fa      	beq.n	801047e <LidarSetPos+0x1776>
							PP_stop(&pp);
 8010488:	4818      	ldr	r0, [pc, #96]	; (80104ec <LidarSetPos+0x17e4>)
 801048a:	f7f5 fc4e 	bl	8005d2a <PP_stop>
							lidar->pos = CENTER_3;
 801048e:	463b      	mov	r3, r7
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	2206      	movs	r2, #6
 8010494:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
							lidar->pos_counter = CENTER_3;
 8010498:	463b      	mov	r3, r7
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	2206      	movs	r2, #6
 801049e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 80104a2:	2108      	movs	r1, #8
 80104a4:	4812      	ldr	r0, [pc, #72]	; (80104f0 <LidarSetPos+0x17e8>)
 80104a6:	f002 fccd 	bl	8012e44 <HAL_GPIO_ReadPin>
 80104aa:	4603      	mov	r3, r0
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d10b      	bne.n	80104c8 <LidarSetPos+0x17c0>
 80104b0:	2110      	movs	r1, #16
 80104b2:	480f      	ldr	r0, [pc, #60]	; (80104f0 <LidarSetPos+0x17e8>)
 80104b4:	f002 fcc6 	bl	8012e44 <HAL_GPIO_ReadPin>
 80104b8:	4603      	mov	r3, r0
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d104      	bne.n	80104c8 <LidarSetPos+0x17c0>
							pp.error_y = 0;
 80104be:	4b0b      	ldr	r3, [pc, #44]	; (80104ec <LidarSetPos+0x17e4>)
 80104c0:	f04f 0200 	mov.w	r2, #0
 80104c4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 80104c8:	4b08      	ldr	r3, [pc, #32]	; (80104ec <LidarSetPos+0x17e4>)
 80104ca:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80104ce:	f003 0301 	and.w	r3, r3, #1
 80104d2:	b2db      	uxtb	r3, r3
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d1cc      	bne.n	8010472 <LidarSetPos+0x176a>
					}

					PP_start(bang_fence, 1, &pp);
 80104d8:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80104dc:	4a03      	ldr	r2, [pc, #12]	; (80104ec <LidarSetPos+0x17e4>)
 80104de:	2101      	movs	r1, #1
 80104e0:	4618      	mov	r0, r3
 80104e2:	f7f5 f9e8 	bl	80058b6 <PP_start>
					while(pp.pp_start)
 80104e6:	e02a      	b.n	801053e <LidarSetPos+0x1836>
 80104e8:	2000a3fc 	.word	0x2000a3fc
 80104ec:	2000718c 	.word	0x2000718c
 80104f0:	40020c00 	.word	0x40020c00
 80104f4:	20007784 	.word	0x20007784
 80104f8:	20007848 	.word	0x20007848
 80104fc:	3e28f5c3 	.word	0x3e28f5c3
					{
						if(ps4.button == SQUARE)
 8010500:	4b57      	ldr	r3, [pc, #348]	; (8010660 <LidarSetPos+0x1958>)
 8010502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010508:	d108      	bne.n	801051c <LidarSetPos+0x1814>
						{
							while(ps4.button == SQUARE);
 801050a:	bf00      	nop
 801050c:	4b54      	ldr	r3, [pc, #336]	; (8010660 <LidarSetPos+0x1958>)
 801050e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010514:	d0fa      	beq.n	801050c <LidarSetPos+0x1804>
							PP_stop(&pp);
 8010516:	4853      	ldr	r0, [pc, #332]	; (8010664 <LidarSetPos+0x195c>)
 8010518:	f7f5 fc07 	bl	8005d2a <PP_stop>
						}

						if(In_LS_Shot_1 && In_LS_Shot_2)
 801051c:	2108      	movs	r1, #8
 801051e:	4852      	ldr	r0, [pc, #328]	; (8010668 <LidarSetPos+0x1960>)
 8010520:	f002 fc90 	bl	8012e44 <HAL_GPIO_ReadPin>
 8010524:	4603      	mov	r3, r0
 8010526:	2b00      	cmp	r3, #0
 8010528:	d109      	bne.n	801053e <LidarSetPos+0x1836>
 801052a:	2110      	movs	r1, #16
 801052c:	484e      	ldr	r0, [pc, #312]	; (8010668 <LidarSetPos+0x1960>)
 801052e:	f002 fc89 	bl	8012e44 <HAL_GPIO_ReadPin>
 8010532:	4603      	mov	r3, r0
 8010534:	2b00      	cmp	r3, #0
 8010536:	d102      	bne.n	801053e <LidarSetPos+0x1836>
							PP_stop(&pp);
 8010538:	484a      	ldr	r0, [pc, #296]	; (8010664 <LidarSetPos+0x195c>)
 801053a:	f7f5 fbf6 	bl	8005d2a <PP_stop>
					while(pp.pp_start)
 801053e:	4b49      	ldr	r3, [pc, #292]	; (8010664 <LidarSetPos+0x195c>)
 8010540:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8010544:	f003 0301 	and.w	r3, r3, #1
 8010548:	b2db      	uxtb	r3, r3
 801054a:	2b00      	cmp	r3, #0
 801054c:	d1d8      	bne.n	8010500 <LidarSetPos+0x17f8>
					}
					stick_fence = 1;
 801054e:	4b47      	ldr	r3, [pc, #284]	; (801066c <LidarSetPos+0x1964>)
 8010550:	2201      	movs	r2, #1
 8010552:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 8010554:	463b      	mov	r3, r7
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 801055c:	1dfa      	adds	r2, r7, #7
 801055e:	7812      	ldrb	r2, [r2, #0]
 8010560:	429a      	cmp	r2, r3
 8010562:	d108      	bne.n	8010576 <LidarSetPos+0x186e>
						LidarAdjust(lidar);
 8010564:	463b      	mov	r3, r7
 8010566:	6818      	ldr	r0, [r3, #0]
 8010568:	f000 f882 	bl	8010670 <LidarAdjust>
					break;
 801056c:	e003      	b.n	8010576 <LidarSetPos+0x186e>

				default:
					break;
 801056e:	bf00      	nop
 8010570:	e070      	b.n	8010654 <LidarSetPos+0x194c>
					break;
 8010572:	bf00      	nop
 8010574:	e06e      	b.n	8010654 <LidarSetPos+0x194c>
					break;
 8010576:	bf00      	nop
			}
			break;
 8010578:	e06c      	b.n	8010654 <LidarSetPos+0x194c>


		case UPPER_RIGHT:
			switch(lidar->pos) // Self Pose
 801057a:	463b      	mov	r3, r7
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 8010582:	3b01      	subs	r3, #1
 8010584:	2b08      	cmp	r3, #8
 8010586:	d82d      	bhi.n	80105e4 <LidarSetPos+0x18dc>
 8010588:	a201      	add	r2, pc, #4	; (adr r2, 8010590 <LidarSetPos+0x1888>)
 801058a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801058e:	bf00      	nop
 8010590:	080105b5 	.word	0x080105b5
 8010594:	080105cd 	.word	0x080105cd
 8010598:	080105e5 	.word	0x080105e5
 801059c:	080105e5 	.word	0x080105e5
 80105a0:	080105d9 	.word	0x080105d9
 80105a4:	080105e5 	.word	0x080105e5
 80105a8:	080105e5 	.word	0x080105e5
 80105ac:	080105e5 	.word	0x080105e5
 80105b0:	080105c1 	.word	0x080105c1
			{
				case PICK_LEFT:
					lidar->pos = UPPER_RIGHT;
 80105b4:	463b      	mov	r3, r7
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	2208      	movs	r2, #8
 80105ba:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 80105be:	e012      	b.n	80105e6 <LidarSetPos+0x18de>

				case PICK_RIGHT:
					lidar->pos = UPPER_RIGHT;
 80105c0:	463b      	mov	r3, r7
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	2208      	movs	r2, #8
 80105c6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 80105ca:	e00c      	b.n	80105e6 <LidarSetPos+0x18de>

				case UPPER_LEFT:
					lidar->pos = UPPER_RIGHT;
 80105cc:	463b      	mov	r3, r7
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	2208      	movs	r2, #8
 80105d2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 80105d6:	e006      	b.n	80105e6 <LidarSetPos+0x18de>

				case CENTER:
					lidar->pos = UPPER_RIGHT;
 80105d8:	463b      	mov	r3, r7
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	2208      	movs	r2, #8
 80105de:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 80105e2:	e000      	b.n	80105e6 <LidarSetPos+0x18de>

				default:
					break;
 80105e4:	bf00      	nop
			}
			break;
 80105e6:	e035      	b.n	8010654 <LidarSetPos+0x194c>

		case PICK_RIGHT:
			switch(lidar->pos)
 80105e8:	463b      	mov	r3, r7
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 80105f0:	3b03      	subs	r3, #3
 80105f2:	2b05      	cmp	r3, #5
 80105f4:	d82c      	bhi.n	8010650 <LidarSetPos+0x1948>
 80105f6:	a201      	add	r2, pc, #4	; (adr r2, 80105fc <LidarSetPos+0x18f4>)
 80105f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105fc:	08010615 	.word	0x08010615
 8010600:	08010621 	.word	0x08010621
 8010604:	0801062d 	.word	0x0801062d
 8010608:	08010639 	.word	0x08010639
 801060c:	08010645 	.word	0x08010645
 8010610:	08010651 	.word	0x08010651
			{
				case UPPER_RIGHT:
					break;

				case CENTER_1:
					lidar->pos = PICK_RIGHT;
 8010614:	463b      	mov	r3, r7
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	2209      	movs	r2, #9
 801061a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 801061e:	e018      	b.n	8010652 <LidarSetPos+0x194a>

				case CENTER_2:
					lidar->pos = PICK_RIGHT;
 8010620:	463b      	mov	r3, r7
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	2209      	movs	r2, #9
 8010626:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 801062a:	e012      	b.n	8010652 <LidarSetPos+0x194a>

				case CENTER:
					lidar->pos = PICK_RIGHT;
 801062c:	463b      	mov	r3, r7
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	2209      	movs	r2, #9
 8010632:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 8010636:	e00c      	b.n	8010652 <LidarSetPos+0x194a>

				case CENTER_3:
					lidar->pos =  PICK_RIGHT;
 8010638:	463b      	mov	r3, r7
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	2209      	movs	r2, #9
 801063e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 8010642:	e006      	b.n	8010652 <LidarSetPos+0x194a>

				case CENTER_4:
					lidar->pos = PICK_RIGHT;
 8010644:	463b      	mov	r3, r7
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	2209      	movs	r2, #9
 801064a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 801064e:	e000      	b.n	8010652 <LidarSetPos+0x194a>

				default:
					break;
 8010650:	bf00      	nop
			}

		default:
			break;
 8010652:	bf00      	nop
		}
}
 8010654:	bf00      	nop
 8010656:	f507 770e 	add.w	r7, r7, #568	; 0x238
 801065a:	46bd      	mov	sp, r7
 801065c:	bdb0      	pop	{r4, r5, r7, pc}
 801065e:	bf00      	nop
 8010660:	2000a3fc 	.word	0x2000a3fc
 8010664:	2000718c 	.word	0x2000718c
 8010668:	40020c00 	.word	0x40020c00
 801066c:	20007784 	.word	0x20007784

08010670 <LidarAdjust>:
			break;
	}
}

void LidarAdjust(Lidar_t* lidar)
{
 8010670:	b5b0      	push	{r4, r5, r7, lr}
 8010672:	b08a      	sub	sp, #40	; 0x28
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
	if(lidar->AdjEnb)
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801067e:	2b00      	cmp	r3, #0
 8010680:	f000 81c3 	beq.w	8010a0a <LidarAdjust+0x39a>
//				PP_stop(&pp);
//			}
//		}

		// Ensure robot sticking fence
		float stick_fence_point[1][7] = {{2.0, 0, 5, -90, 0, 0, 0}};
 8010684:	4bb8      	ldr	r3, [pc, #736]	; (8010968 <LidarAdjust+0x2f8>)
 8010686:	f107 040c 	add.w	r4, r7, #12
 801068a:	461d      	mov	r5, r3
 801068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010690:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010694:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(stick_fence_point, 1, &pp);
 8010698:	f107 030c 	add.w	r3, r7, #12
 801069c:	4ab3      	ldr	r2, [pc, #716]	; (801096c <LidarAdjust+0x2fc>)
 801069e:	2101      	movs	r1, #1
 80106a0:	4618      	mov	r0, r3
 80106a2:	f7f5 f908 	bl	80058b6 <PP_start>
		while(pp.pp_start)
 80106a6:	e01e      	b.n	80106e6 <LidarAdjust+0x76>
		{
			if(ps4.button == SQUARE)
 80106a8:	4bb1      	ldr	r3, [pc, #708]	; (8010970 <LidarAdjust+0x300>)
 80106aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80106b0:	d108      	bne.n	80106c4 <LidarAdjust+0x54>
			{
				while(ps4.button == SQUARE);
 80106b2:	bf00      	nop
 80106b4:	4bae      	ldr	r3, [pc, #696]	; (8010970 <LidarAdjust+0x300>)
 80106b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80106bc:	d0fa      	beq.n	80106b4 <LidarAdjust+0x44>
				PP_stop(&pp);
 80106be:	48ab      	ldr	r0, [pc, #684]	; (801096c <LidarAdjust+0x2fc>)
 80106c0:	f7f5 fb33 	bl	8005d2a <PP_stop>
			}

			if(In_LS_Shot_1 && In_LS_Shot_2)
 80106c4:	2108      	movs	r1, #8
 80106c6:	48ab      	ldr	r0, [pc, #684]	; (8010974 <LidarAdjust+0x304>)
 80106c8:	f002 fbbc 	bl	8012e44 <HAL_GPIO_ReadPin>
 80106cc:	4603      	mov	r3, r0
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d109      	bne.n	80106e6 <LidarAdjust+0x76>
 80106d2:	2110      	movs	r1, #16
 80106d4:	48a7      	ldr	r0, [pc, #668]	; (8010974 <LidarAdjust+0x304>)
 80106d6:	f002 fbb5 	bl	8012e44 <HAL_GPIO_ReadPin>
 80106da:	4603      	mov	r3, r0
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d102      	bne.n	80106e6 <LidarAdjust+0x76>
				PP_stop(&pp);
 80106e0:	48a2      	ldr	r0, [pc, #648]	; (801096c <LidarAdjust+0x2fc>)
 80106e2:	f7f5 fb22 	bl	8005d2a <PP_stop>
		while(pp.pp_start)
 80106e6:	4ba1      	ldr	r3, [pc, #644]	; (801096c <LidarAdjust+0x2fc>)
 80106e8:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80106ec:	f003 0301 	and.w	r3, r3, #1
 80106f0:	b2db      	uxtb	r3, r3
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d1d8      	bne.n	80106a8 <LidarAdjust+0x38>
		}

		// Only adjust after reached destination
		switch(lidar->pos)
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 80106fc:	3b02      	subs	r3, #2
 80106fe:	2b06      	cmp	r3, #6
 8010700:	f200 8182 	bhi.w	8010a08 <LidarAdjust+0x398>
 8010704:	a201      	add	r2, pc, #4	; (adr r2, 801070c <LidarAdjust+0x9c>)
 8010706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801070a:	bf00      	nop
 801070c:	08010a09 	.word	0x08010a09
 8010710:	08010729 	.word	0x08010729
 8010714:	080107b9 	.word	0x080107b9
 8010718:	08010849 	.word	0x08010849
 801071c:	080108d9 	.word	0x080108d9
 8010720:	08010979 	.word	0x08010979
 8010724:	08010a09 	.word	0x08010a09
				 * Path plan to desired position
				 */
				break;

			case CENTER_1:
				LidarSendIns(NEAR, lidar);
 8010728:	6879      	ldr	r1, [r7, #4]
 801072a:	2001      	movs	r0, #1
 801072c:	f000 fa68 	bl	8010c00 <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_1_offset_x;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801073c:	4618      	mov	r0, r3
 801073e:	f7ef ff03 	bl	8000548 <__aeabi_f2d>
 8010742:	4602      	mov	r2, r0
 8010744:	460b      	mov	r3, r1
 8010746:	4620      	mov	r0, r4
 8010748:	4629      	mov	r1, r5
 801074a:	f7ef fd9d 	bl	8000288 <__aeabi_dsub>
 801074e:	4602      	mov	r2, r0
 8010750:	460b      	mov	r3, r1
 8010752:	4610      	mov	r0, r2
 8010754:	4619      	mov	r1, r3
 8010756:	f7f0 fa47 	bl	8000be8 <__aeabi_d2f>
 801075a:	4602      	mov	r2, r0
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_1_offset_y;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801076e:	4618      	mov	r0, r3
 8010770:	f7ef feea 	bl	8000548 <__aeabi_f2d>
 8010774:	4602      	mov	r2, r0
 8010776:	460b      	mov	r3, r1
 8010778:	4620      	mov	r0, r4
 801077a:	4629      	mov	r1, r5
 801077c:	f7ef fd84 	bl	8000288 <__aeabi_dsub>
 8010780:	4602      	mov	r2, r0
 8010782:	460b      	mov	r3, r1
 8010784:	4610      	mov	r0, r2
 8010786:	4619      	mov	r1, r3
 8010788:	f7f0 fa2e 	bl	8000be8 <__aeabi_d2f>
 801078c:	4602      	mov	r2, r0
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, pp.real_z);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 80107a0:	4b72      	ldr	r3, [pc, #456]	; (801096c <LidarAdjust+0x2fc>)
 80107a2:	edd3 6a04 	vldr	s13, [r3, #16]
 80107a6:	eeb0 1a66 	vmov.f32	s2, s13
 80107aa:	eef0 0a47 	vmov.f32	s1, s14
 80107ae:	eeb0 0a67 	vmov.f32	s0, s15
 80107b2:	f000 f931 	bl	8010a18 <LidarAdjustPP>
				break;
 80107b6:	e128      	b.n	8010a0a <LidarAdjust+0x39a>

			case CENTER_2:
				LidarSendIns(NEAR, lidar);
 80107b8:	6879      	ldr	r1, [r7, #4]
 80107ba:	2001      	movs	r0, #1
 80107bc:	f000 fa20 	bl	8010c00 <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_2_offset_x;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80107cc:	4618      	mov	r0, r3
 80107ce:	f7ef febb 	bl	8000548 <__aeabi_f2d>
 80107d2:	4602      	mov	r2, r0
 80107d4:	460b      	mov	r3, r1
 80107d6:	4620      	mov	r0, r4
 80107d8:	4629      	mov	r1, r5
 80107da:	f7ef fd55 	bl	8000288 <__aeabi_dsub>
 80107de:	4602      	mov	r2, r0
 80107e0:	460b      	mov	r3, r1
 80107e2:	4610      	mov	r0, r2
 80107e4:	4619      	mov	r1, r3
 80107e6:	f7f0 f9ff 	bl	8000be8 <__aeabi_d2f>
 80107ea:	4602      	mov	r2, r0
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_2_offset_y;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80107fe:	4618      	mov	r0, r3
 8010800:	f7ef fea2 	bl	8000548 <__aeabi_f2d>
 8010804:	4602      	mov	r2, r0
 8010806:	460b      	mov	r3, r1
 8010808:	4620      	mov	r0, r4
 801080a:	4629      	mov	r1, r5
 801080c:	f7ef fd3c 	bl	8000288 <__aeabi_dsub>
 8010810:	4602      	mov	r2, r0
 8010812:	460b      	mov	r3, r1
 8010814:	4610      	mov	r0, r2
 8010816:	4619      	mov	r1, r3
 8010818:	f7f0 f9e6 	bl	8000be8 <__aeabi_d2f>
 801081c:	4602      	mov	r2, r0
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, pp.real_z);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 8010830:	4b4e      	ldr	r3, [pc, #312]	; (801096c <LidarAdjust+0x2fc>)
 8010832:	edd3 6a04 	vldr	s13, [r3, #16]
 8010836:	eeb0 1a66 	vmov.f32	s2, s13
 801083a:	eef0 0a47 	vmov.f32	s1, s14
 801083e:	eeb0 0a67 	vmov.f32	s0, s15
 8010842:	f000 f8e9 	bl	8010a18 <LidarAdjustPP>
				break;
 8010846:	e0e0      	b.n	8010a0a <LidarAdjust+0x39a>

			case CENTER:
				LidarSendIns(NEAR, lidar);
 8010848:	6879      	ldr	r1, [r7, #4]
 801084a:	2001      	movs	r0, #1
 801084c:	f000 f9d8 	bl	8010c00 <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_offset_x;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801085c:	4618      	mov	r0, r3
 801085e:	f7ef fe73 	bl	8000548 <__aeabi_f2d>
 8010862:	4602      	mov	r2, r0
 8010864:	460b      	mov	r3, r1
 8010866:	4620      	mov	r0, r4
 8010868:	4629      	mov	r1, r5
 801086a:	f7ef fd0d 	bl	8000288 <__aeabi_dsub>
 801086e:	4602      	mov	r2, r0
 8010870:	460b      	mov	r3, r1
 8010872:	4610      	mov	r0, r2
 8010874:	4619      	mov	r1, r3
 8010876:	f7f0 f9b7 	bl	8000be8 <__aeabi_d2f>
 801087a:	4602      	mov	r2, r0
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_offset_y;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801088e:	4618      	mov	r0, r3
 8010890:	f7ef fe5a 	bl	8000548 <__aeabi_f2d>
 8010894:	4602      	mov	r2, r0
 8010896:	460b      	mov	r3, r1
 8010898:	4620      	mov	r0, r4
 801089a:	4629      	mov	r1, r5
 801089c:	f7ef fcf4 	bl	8000288 <__aeabi_dsub>
 80108a0:	4602      	mov	r2, r0
 80108a2:	460b      	mov	r3, r1
 80108a4:	4610      	mov	r0, r2
 80108a6:	4619      	mov	r1, r3
 80108a8:	f7f0 f99e 	bl	8000be8 <__aeabi_d2f>
 80108ac:	4602      	mov	r2, r0
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, pp.real_z);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 80108c0:	4b2a      	ldr	r3, [pc, #168]	; (801096c <LidarAdjust+0x2fc>)
 80108c2:	edd3 6a04 	vldr	s13, [r3, #16]
 80108c6:	eeb0 1a66 	vmov.f32	s2, s13
 80108ca:	eef0 0a47 	vmov.f32	s1, s14
 80108ce:	eeb0 0a67 	vmov.f32	s0, s15
 80108d2:	f000 f8a1 	bl	8010a18 <LidarAdjustPP>
				break;
 80108d6:	e098      	b.n	8010a0a <LidarAdjust+0x39a>

			case CENTER_3:
				LidarSendIns(NEAR, lidar);
 80108d8:	6879      	ldr	r1, [r7, #4]
 80108da:	2001      	movs	r0, #1
 80108dc:	f000 f990 	bl	8010c00 <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_3_offset_x;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80108ec:	4618      	mov	r0, r3
 80108ee:	f7ef fe2b 	bl	8000548 <__aeabi_f2d>
 80108f2:	4602      	mov	r2, r0
 80108f4:	460b      	mov	r3, r1
 80108f6:	4620      	mov	r0, r4
 80108f8:	4629      	mov	r1, r5
 80108fa:	f7ef fcc5 	bl	8000288 <__aeabi_dsub>
 80108fe:	4602      	mov	r2, r0
 8010900:	460b      	mov	r3, r1
 8010902:	4610      	mov	r0, r2
 8010904:	4619      	mov	r1, r3
 8010906:	f7f0 f96f 	bl	8000be8 <__aeabi_d2f>
 801090a:	4602      	mov	r2, r0
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_3_offset_y;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 801091e:	4618      	mov	r0, r3
 8010920:	f7ef fe12 	bl	8000548 <__aeabi_f2d>
 8010924:	4602      	mov	r2, r0
 8010926:	460b      	mov	r3, r1
 8010928:	4620      	mov	r0, r4
 801092a:	4629      	mov	r1, r5
 801092c:	f7ef fcac 	bl	8000288 <__aeabi_dsub>
 8010930:	4602      	mov	r2, r0
 8010932:	460b      	mov	r3, r1
 8010934:	4610      	mov	r0, r2
 8010936:	4619      	mov	r1, r3
 8010938:	f7f0 f956 	bl	8000be8 <__aeabi_d2f>
 801093c:	4602      	mov	r2, r0
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, pp.real_z);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 8010950:	4b06      	ldr	r3, [pc, #24]	; (801096c <LidarAdjust+0x2fc>)
 8010952:	edd3 6a04 	vldr	s13, [r3, #16]
 8010956:	eeb0 1a66 	vmov.f32	s2, s13
 801095a:	eef0 0a47 	vmov.f32	s1, s14
 801095e:	eeb0 0a67 	vmov.f32	s0, s15
 8010962:	f000 f859 	bl	8010a18 <LidarAdjustPP>
				break;
 8010966:	e050      	b.n	8010a0a <LidarAdjust+0x39a>
 8010968:	080209b8 	.word	0x080209b8
 801096c:	2000718c 	.word	0x2000718c
 8010970:	2000a3fc 	.word	0x2000a3fc
 8010974:	40020c00 	.word	0x40020c00

			case CENTER_4:
				LidarSendIns(NEAR, lidar);
 8010978:	6879      	ldr	r1, [r7, #4]
 801097a:	2001      	movs	r0, #1
 801097c:	f000 f940 	bl	8010c00 <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_4_offset_x;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 801098c:	4618      	mov	r0, r3
 801098e:	f7ef fddb 	bl	8000548 <__aeabi_f2d>
 8010992:	4602      	mov	r2, r0
 8010994:	460b      	mov	r3, r1
 8010996:	4620      	mov	r0, r4
 8010998:	4629      	mov	r1, r5
 801099a:	f7ef fc75 	bl	8000288 <__aeabi_dsub>
 801099e:	4602      	mov	r2, r0
 80109a0:	460b      	mov	r3, r1
 80109a2:	4610      	mov	r0, r2
 80109a4:	4619      	mov	r1, r3
 80109a6:	f7f0 f91f 	bl	8000be8 <__aeabi_d2f>
 80109aa:	4602      	mov	r2, r0
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_4_offset_y;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80109be:	4618      	mov	r0, r3
 80109c0:	f7ef fdc2 	bl	8000548 <__aeabi_f2d>
 80109c4:	4602      	mov	r2, r0
 80109c6:	460b      	mov	r3, r1
 80109c8:	4620      	mov	r0, r4
 80109ca:	4629      	mov	r1, r5
 80109cc:	f7ef fc5c 	bl	8000288 <__aeabi_dsub>
 80109d0:	4602      	mov	r2, r0
 80109d2:	460b      	mov	r3, r1
 80109d4:	4610      	mov	r0, r2
 80109d6:	4619      	mov	r1, r3
 80109d8:	f7f0 f906 	bl	8000be8 <__aeabi_d2f>
 80109dc:	4602      	mov	r2, r0
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, pp.real_z);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 80109f0:	4b08      	ldr	r3, [pc, #32]	; (8010a14 <LidarAdjust+0x3a4>)
 80109f2:	edd3 6a04 	vldr	s13, [r3, #16]
 80109f6:	eeb0 1a66 	vmov.f32	s2, s13
 80109fa:	eef0 0a47 	vmov.f32	s1, s14
 80109fe:	eeb0 0a67 	vmov.f32	s0, s15
 8010a02:	f000 f809 	bl	8010a18 <LidarAdjustPP>
				break;
 8010a06:	e000      	b.n	8010a0a <LidarAdjust+0x39a>

			case UPPER_RIGHT:
				break;

			default:
				break;
 8010a08:	bf00      	nop
		}
	}
}
 8010a0a:	bf00      	nop
 8010a0c:	3728      	adds	r7, #40	; 0x28
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bdb0      	pop	{r4, r5, r7, pc}
 8010a12:	bf00      	nop
 8010a14:	2000718c 	.word	0x2000718c

08010a18 <LidarAdjustPP>:

void LidarAdjustPP(float adj_x, float adj_y, float z)
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b08c      	sub	sp, #48	; 0x30
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	ed87 0a03 	vstr	s0, [r7, #12]
 8010a22:	edc7 0a02 	vstr	s1, [r7, #8]
 8010a26:	ed87 1a01 	vstr	s2, [r7, #4]
	ResetCoordinate();
 8010a2a:	f7fb f83f 	bl	800baac <ResetCoordinate>

	float adj_point[1][7] = {{1.0, adj_x, adj_y, z, 0, 1, 0}};
 8010a2e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8010a32:	617b      	str	r3, [r7, #20]
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	61bb      	str	r3, [r7, #24]
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	61fb      	str	r3, [r7, #28]
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	623b      	str	r3, [r7, #32]
 8010a40:	f04f 0300 	mov.w	r3, #0
 8010a44:	627b      	str	r3, [r7, #36]	; 0x24
 8010a46:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8010a4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8010a4c:	f04f 0300 	mov.w	r3, #0
 8010a50:	62fb      	str	r3, [r7, #44]	; 0x2c
	PP_start(adj_point, 1, &pp);
 8010a52:	f107 0314 	add.w	r3, r7, #20
 8010a56:	4a1a      	ldr	r2, [pc, #104]	; (8010ac0 <LidarAdjustPP+0xa8>)
 8010a58:	2101      	movs	r1, #1
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f7f4 ff2b 	bl	80058b6 <PP_start>

	while(pp.pp_start)
 8010a60:	e020      	b.n	8010aa4 <LidarAdjustPP+0x8c>
	{
		if(ps4.button == SQUARE)
 8010a62:	4b18      	ldr	r3, [pc, #96]	; (8010ac4 <LidarAdjustPP+0xac>)
 8010a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010a6a:	d108      	bne.n	8010a7e <LidarAdjustPP+0x66>
		{
			while(ps4.button == SQUARE);
 8010a6c:	bf00      	nop
 8010a6e:	4b15      	ldr	r3, [pc, #84]	; (8010ac4 <LidarAdjustPP+0xac>)
 8010a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010a76:	d0fa      	beq.n	8010a6e <LidarAdjustPP+0x56>
			PP_stop(&pp);
 8010a78:	4811      	ldr	r0, [pc, #68]	; (8010ac0 <LidarAdjustPP+0xa8>)
 8010a7a:	f7f5 f956 	bl	8005d2a <PP_stop>
		}

		if(In_LS_Shot_1 && In_LS_Shot_2)
 8010a7e:	2108      	movs	r1, #8
 8010a80:	4811      	ldr	r0, [pc, #68]	; (8010ac8 <LidarAdjustPP+0xb0>)
 8010a82:	f002 f9df 	bl	8012e44 <HAL_GPIO_ReadPin>
 8010a86:	4603      	mov	r3, r0
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d10b      	bne.n	8010aa4 <LidarAdjustPP+0x8c>
 8010a8c:	2110      	movs	r1, #16
 8010a8e:	480e      	ldr	r0, [pc, #56]	; (8010ac8 <LidarAdjustPP+0xb0>)
 8010a90:	f002 f9d8 	bl	8012e44 <HAL_GPIO_ReadPin>
 8010a94:	4603      	mov	r3, r0
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d104      	bne.n	8010aa4 <LidarAdjustPP+0x8c>
			pp.error_y = 0;
 8010a9a:	4b09      	ldr	r3, [pc, #36]	; (8010ac0 <LidarAdjustPP+0xa8>)
 8010a9c:	f04f 0200 	mov.w	r2, #0
 8010aa0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
	while(pp.pp_start)
 8010aa4:	4b06      	ldr	r3, [pc, #24]	; (8010ac0 <LidarAdjustPP+0xa8>)
 8010aa6:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8010aaa:	f003 0301 	and.w	r3, r3, #1
 8010aae:	b2db      	uxtb	r3, r3
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d1d6      	bne.n	8010a62 <LidarAdjustPP+0x4a>
	}
}
 8010ab4:	bf00      	nop
 8010ab6:	bf00      	nop
 8010ab8:	3730      	adds	r7, #48	; 0x30
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bd80      	pop	{r7, pc}
 8010abe:	bf00      	nop
 8010ac0:	2000718c 	.word	0x2000718c
 8010ac4:	2000a3fc 	.word	0x2000a3fc
 8010ac8:	40020c00 	.word	0x40020c00

08010acc <LidarControl>:
/* Call this inside a task
 *   <- -> Will be used to change position
 *   UP DOWN will be used to change angle
 */
void LidarControl(Lidar_t* lidar)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b082      	sub	sp, #8
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
	if(ps4.button == LEFT)
 8010ad4:	4b23      	ldr	r3, [pc, #140]	; (8010b64 <LidarControl+0x98>)
 8010ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ad8:	2b80      	cmp	r3, #128	; 0x80
 8010ada:	d10b      	bne.n	8010af4 <LidarControl+0x28>
	{
		while(ps4.button == LEFT);
 8010adc:	bf00      	nop
 8010ade:	4b21      	ldr	r3, [pc, #132]	; (8010b64 <LidarControl+0x98>)
 8010ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ae2:	2b80      	cmp	r3, #128	; 0x80
 8010ae4:	d0fb      	beq.n	8010ade <LidarControl+0x12>
		lidar->pos_counter--;
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010aec:	1e5a      	subs	r2, r3, #1
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	}

	if(ps4.button == RIGHT)
 8010af4:	4b1b      	ldr	r3, [pc, #108]	; (8010b64 <LidarControl+0x98>)
 8010af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010af8:	2b20      	cmp	r3, #32
 8010afa:	d10b      	bne.n	8010b14 <LidarControl+0x48>
	{
		while(ps4.button == RIGHT);
 8010afc:	bf00      	nop
 8010afe:	4b19      	ldr	r3, [pc, #100]	; (8010b64 <LidarControl+0x98>)
 8010b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b02:	2b20      	cmp	r3, #32
 8010b04:	d0fb      	beq.n	8010afe <LidarControl+0x32>
		lidar->pos_counter++;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010b0c:	1c5a      	adds	r2, r3, #1
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	}

	if(ps4.button == UP)
 8010b14:	4b13      	ldr	r3, [pc, #76]	; (8010b64 <LidarControl+0x98>)
 8010b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b18:	2b10      	cmp	r3, #16
 8010b1a:	d10b      	bne.n	8010b34 <LidarControl+0x68>
	{
		while(ps4.button == UP);
 8010b1c:	bf00      	nop
 8010b1e:	4b11      	ldr	r3, [pc, #68]	; (8010b64 <LidarControl+0x98>)
 8010b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b22:	2b10      	cmp	r3, #16
 8010b24:	d0fb      	beq.n	8010b1e <LidarControl+0x52>
		lidar->pos_counter += 2;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010b2c:	1c9a      	adds	r2, r3, #2
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	}

	if(ps4.button == DOWN)
 8010b34:	4b0b      	ldr	r3, [pc, #44]	; (8010b64 <LidarControl+0x98>)
 8010b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b38:	2b40      	cmp	r3, #64	; 0x40
 8010b3a:	d10b      	bne.n	8010b54 <LidarControl+0x88>
	{
		while(ps4.button == DOWN);
 8010b3c:	bf00      	nop
 8010b3e:	4b09      	ldr	r3, [pc, #36]	; (8010b64 <LidarControl+0x98>)
 8010b40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b42:	2b40      	cmp	r3, #64	; 0x40
 8010b44:	d0fb      	beq.n	8010b3e <LidarControl+0x72>
		lidar->pos_counter -= 2;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010b4c:	1e9a      	subs	r2, r3, #2
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	}

	LidarCheckPos(lidar);
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f000 f807 	bl	8010b68 <LidarCheckPos>
//	LidarCheckAngle(lidar);
}
 8010b5a:	bf00      	nop
 8010b5c:	3708      	adds	r7, #8
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}
 8010b62:	bf00      	nop
 8010b64:	2000a3fc 	.word	0x2000a3fc

08010b68 <LidarCheckPos>:
			break;
	}
}

void LidarCheckPos(Lidar_t* lidar)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b082      	sub	sp, #8
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
	switch(lidar->pos_counter)
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010b76:	3b02      	subs	r3, #2
 8010b78:	2b07      	cmp	r3, #7
 8010b7a:	d83b      	bhi.n	8010bf4 <LidarCheckPos+0x8c>
 8010b7c:	a201      	add	r2, pc, #4	; (adr r2, 8010b84 <LidarCheckPos+0x1c>)
 8010b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b82:	bf00      	nop
 8010b84:	08010baf 	.word	0x08010baf
 8010b88:	08010bb9 	.word	0x08010bb9
 8010b8c:	08010bc3 	.word	0x08010bc3
 8010b90:	08010bcd 	.word	0x08010bcd
 8010b94:	08010bd7 	.word	0x08010bd7
 8010b98:	08010be1 	.word	0x08010be1
 8010b9c:	08010beb 	.word	0x08010beb
 8010ba0:	08010ba5 	.word	0x08010ba5
	{
		case PICK_RIGHT:
			LidarSetPos(PICK_RIGHT, lidar);
 8010ba4:	6879      	ldr	r1, [r7, #4]
 8010ba6:	2009      	movs	r0, #9
 8010ba8:	f7fe f8ae 	bl	800ed08 <LidarSetPos>
			break;
 8010bac:	e023      	b.n	8010bf6 <LidarCheckPos+0x8e>

		case UPPER_LEFT:
			LidarSetPos(UPPER_LEFT, lidar);
 8010bae:	6879      	ldr	r1, [r7, #4]
 8010bb0:	2002      	movs	r0, #2
 8010bb2:	f7fe f8a9 	bl	800ed08 <LidarSetPos>
			break;
 8010bb6:	e01e      	b.n	8010bf6 <LidarCheckPos+0x8e>

		case CENTER_1:
			LidarSetPos(CENTER_1, lidar);
 8010bb8:	6879      	ldr	r1, [r7, #4]
 8010bba:	2003      	movs	r0, #3
 8010bbc:	f7fe f8a4 	bl	800ed08 <LidarSetPos>
			break;
 8010bc0:	e019      	b.n	8010bf6 <LidarCheckPos+0x8e>

		case CENTER_2:
			LidarSetPos(CENTER_2, lidar);
 8010bc2:	6879      	ldr	r1, [r7, #4]
 8010bc4:	2004      	movs	r0, #4
 8010bc6:	f7fe f89f 	bl	800ed08 <LidarSetPos>
			break;
 8010bca:	e014      	b.n	8010bf6 <LidarCheckPos+0x8e>

		case CENTER:
			LidarSetPos(CENTER, lidar);
 8010bcc:	6879      	ldr	r1, [r7, #4]
 8010bce:	2005      	movs	r0, #5
 8010bd0:	f7fe f89a 	bl	800ed08 <LidarSetPos>
			break;
 8010bd4:	e00f      	b.n	8010bf6 <LidarCheckPos+0x8e>

		case CENTER_3:
			LidarSetPos(CENTER_3, lidar);
 8010bd6:	6879      	ldr	r1, [r7, #4]
 8010bd8:	2006      	movs	r0, #6
 8010bda:	f7fe f895 	bl	800ed08 <LidarSetPos>
			break;
 8010bde:	e00a      	b.n	8010bf6 <LidarCheckPos+0x8e>

		case CENTER_4:
			LidarSetPos(CENTER_4, lidar);
 8010be0:	6879      	ldr	r1, [r7, #4]
 8010be2:	2007      	movs	r0, #7
 8010be4:	f7fe f890 	bl	800ed08 <LidarSetPos>
			break;
 8010be8:	e005      	b.n	8010bf6 <LidarCheckPos+0x8e>

		case UPPER_RIGHT:
			LidarSetPos(UPPER_RIGHT, lidar);
 8010bea:	6879      	ldr	r1, [r7, #4]
 8010bec:	2008      	movs	r0, #8
 8010bee:	f7fe f88b 	bl	800ed08 <LidarSetPos>
			break;
 8010bf2:	e000      	b.n	8010bf6 <LidarCheckPos+0x8e>

		default:
			break;
 8010bf4:	bf00      	nop
	}
}
 8010bf6:	bf00      	nop
 8010bf8:	3708      	adds	r7, #8
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd80      	pop	{r7, pc}
 8010bfe:	bf00      	nop

08010c00 <LidarSendIns>:

// Send Instruction to pi/pc
void LidarSendIns(Instruction_t ins, Lidar_t* lidar)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b082      	sub	sp, #8
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	4603      	mov	r3, r0
 8010c08:	6039      	str	r1, [r7, #0]
 8010c0a:	71fb      	strb	r3, [r7, #7]
	lidar->response = NO; // After user got the data, response will be OK
 8010c0c:	683b      	ldr	r3, [r7, #0]
 8010c0e:	2201      	movs	r2, #1
 8010c10:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
	lidar->inst = ins;
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	79fa      	ldrb	r2, [r7, #7]
 8010c18:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	lidar->obstacle_send[0] = 0x01;
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	2201      	movs	r2, #1
 8010c20:	705a      	strb	r2, [r3, #1]
	memcpy(&lidar->obstacle_send[1], &lidar->inst, 1);
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	3302      	adds	r3, #2
 8010c26:	683a      	ldr	r2, [r7, #0]
 8010c28:	f502 72cc 	add.w	r2, r2, #408	; 0x198
 8010c2c:	7812      	ldrb	r2, [r2, #0]
 8010c2e:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(lidar->lidar_UART, lidar->obstacle_send, 2, HAL_MAX_DELAY);
 8010c30:	683b      	ldr	r3, [r7, #0]
 8010c32:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	1c59      	adds	r1, r3, #1
 8010c3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c3e:	2202      	movs	r2, #2
 8010c40:	f005 ff8f 	bl	8016b62 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 25);
 8010c44:	683b      	ldr	r3, [r7, #0]
 8010c46:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010c4a:	683b      	ldr	r3, [r7, #0]
 8010c4c:	33c9      	adds	r3, #201	; 0xc9
 8010c4e:	2219      	movs	r2, #25
 8010c50:	4619      	mov	r1, r3
 8010c52:	f006 f81f 	bl	8016c94 <HAL_UART_Receive_IT>

	while(lidar->response == NO) // Poll the user after got new data
 8010c56:	e004      	b.n	8010c62 <LidarSendIns+0x62>
	{
		if(ps4.button == SQUARE)
 8010c58:	4b07      	ldr	r3, [pc, #28]	; (8010c78 <LidarSendIns+0x78>)
 8010c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010c60:	d005      	beq.n	8010c6e <LidarSendIns+0x6e>
	while(lidar->response == NO) // Poll the user after got new data
 8010c62:	683b      	ldr	r3, [r7, #0]
 8010c64:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8010c68:	2b01      	cmp	r3, #1
 8010c6a:	d0f5      	beq.n	8010c58 <LidarSendIns+0x58>
			break;
	}
}
 8010c6c:	e000      	b.n	8010c70 <LidarSendIns+0x70>
			break;
 8010c6e:	bf00      	nop
}
 8010c70:	bf00      	nop
 8010c72:	3708      	adds	r7, #8
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bd80      	pop	{r7, pc}
 8010c78:	2000a3fc 	.word	0x2000a3fc

08010c7c <ObstacleHandler>:

// Call this in UART Callback
void ObstacleHandler(Lidar_t* lidar)
{
 8010c7c:	b5b0      	push	{r4, r5, r7, lr}
 8010c7e:	b086      	sub	sp, #24
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
	if(lidar->mode == CONTINUOUS)
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	f040 8115 	bne.w	8010eba <ObstacleHandler+0x23e>
	{
		static int mode = 0;
		switch(mode)
 8010c90:	4baa      	ldr	r3, [pc, #680]	; (8010f3c <ObstacleHandler+0x2c0>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d002      	beq.n	8010c9e <ObstacleHandler+0x22>
 8010c98:	2b01      	cmp	r3, #1
 8010c9a:	d061      	beq.n	8010d60 <ObstacleHandler+0xe4>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.x, 8, HAL_MAX_DELAY);
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.y, 8, HAL_MAX_DELAY);
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.distance, 8, HAL_MAX_DELAY);
		}
	}
}
 8010c9c:	e1f1      	b.n	8011082 <ObstacleHandler+0x406>
				if(lidar->obstacle_receive[0] == 0x01)
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8010ca4:	2b01      	cmp	r3, #1
 8010ca6:	f040 81eb 	bne.w	8011080 <ObstacleHandler+0x404>
					memcpy(&lidar->obstacle_count, &lidar->obstacle_receive[1], 4);
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8010cb0:	687a      	ldr	r2, [r7, #4]
 8010cb2:	32ca      	adds	r2, #202	; 0xca
 8010cb4:	6812      	ldr	r2, [r2, #0]
 8010cb6:	601a      	str	r2, [r3, #0]
					if(lidar->new == 0)
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 8010cbe:	f003 0301 	and.w	r3, r3, #1
 8010cc2:	b2db      	uxtb	r3, r3
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d110      	bne.n	8010cea <ObstacleHandler+0x6e>
							lidar->Polelist = (Pole*)malloc(lidar->obstacle_count * 3 * sizeof(float));
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8010cce:	461a      	mov	r2, r3
 8010cd0:	4613      	mov	r3, r2
 8010cd2:	005b      	lsls	r3, r3, #1
 8010cd4:	4413      	add	r3, r2
 8010cd6:	009b      	lsls	r3, r3, #2
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f009 fd11 	bl	801a700 <malloc>
 8010cde:	4603      	mov	r3, r0
 8010ce0:	461a      	mov	r2, r3
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
 8010ce8:	e012      	b.n	8010d10 <ObstacleHandler+0x94>
							lidar->Polelist = (Pole*)realloc(lidar->Polelist, lidar->obstacle_count * 3 * sizeof(float));
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8010cf6:	4619      	mov	r1, r3
 8010cf8:	460b      	mov	r3, r1
 8010cfa:	005b      	lsls	r3, r3, #1
 8010cfc:	440b      	add	r3, r1
 8010cfe:	009b      	lsls	r3, r3, #2
 8010d00:	4619      	mov	r1, r3
 8010d02:	4610      	mov	r0, r2
 8010d04:	f00a fc3e 	bl	801b584 <realloc>
 8010d08:	4602      	mov	r2, r0
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->obstacle_count, 4, HAL_MAX_DELAY);
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	f503 71ca 	add.w	r1, r3, #404	; 0x194
 8010d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d20:	2204      	movs	r2, #4
 8010d22:	f005 ff1e 	bl	8016b62 <HAL_UART_Transmit>
					HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, lidar->obstacle_count * 3 * 4);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f103 01c9 	add.w	r1, r3, #201	; 0xc9
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8010d38:	b29b      	uxth	r3, r3
 8010d3a:	461a      	mov	r2, r3
 8010d3c:	0052      	lsls	r2, r2, #1
 8010d3e:	4413      	add	r3, r2
 8010d40:	009b      	lsls	r3, r3, #2
 8010d42:	b29b      	uxth	r3, r3
 8010d44:	461a      	mov	r2, r3
 8010d46:	f005 ffa5 	bl	8016c94 <HAL_UART_Receive_IT>
					mode = 1;
 8010d4a:	4b7c      	ldr	r3, [pc, #496]	; (8010f3c <ObstacleHandler+0x2c0>)
 8010d4c:	2201      	movs	r2, #1
 8010d4e:	601a      	str	r2, [r3, #0]
					lidar->new = 1;
 8010d50:	687a      	ldr	r2, [r7, #4]
 8010d52:	f892 3294 	ldrb.w	r3, [r2, #660]	; 0x294
 8010d56:	f043 0301 	orr.w	r3, r3, #1
 8010d5a:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
				break;
 8010d5e:	e18f      	b.n	8011080 <ObstacleHandler+0x404>
				for(int i = 0; i < lidar->obstacle_count; i++)
 8010d60:	2300      	movs	r3, #0
 8010d62:	617b      	str	r3, [r7, #20]
 8010d64:	e05b      	b.n	8010e1e <ObstacleHandler+0x1a2>
					memcpy(&lidar->pole.x, &lidar->obstacle_receive[i * 12], 4);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f503 71d4 	add.w	r1, r3, #424	; 0x1a8
 8010d6c:	697a      	ldr	r2, [r7, #20]
 8010d6e:	4613      	mov	r3, r2
 8010d70:	005b      	lsls	r3, r3, #1
 8010d72:	4413      	add	r3, r2
 8010d74:	009b      	lsls	r3, r3, #2
 8010d76:	33c8      	adds	r3, #200	; 0xc8
 8010d78:	687a      	ldr	r2, [r7, #4]
 8010d7a:	4413      	add	r3, r2
 8010d7c:	3301      	adds	r3, #1
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	600b      	str	r3, [r1, #0]
					memcpy(&lidar->pole.y, &lidar->obstacle_receive[i * 12 + 4], 4);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	f503 71d8 	add.w	r1, r3, #432	; 0x1b0
 8010d88:	697a      	ldr	r2, [r7, #20]
 8010d8a:	4613      	mov	r3, r2
 8010d8c:	005b      	lsls	r3, r3, #1
 8010d8e:	4413      	add	r3, r2
 8010d90:	009b      	lsls	r3, r3, #2
 8010d92:	3304      	adds	r3, #4
 8010d94:	33c8      	adds	r3, #200	; 0xc8
 8010d96:	687a      	ldr	r2, [r7, #4]
 8010d98:	4413      	add	r3, r2
 8010d9a:	3301      	adds	r3, #1
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	600b      	str	r3, [r1, #0]
					memcpy(&lidar->pole.distance, &lidar->obstacle_receive[i * 12 + 8], 4);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 8010da6:	697a      	ldr	r2, [r7, #20]
 8010da8:	4613      	mov	r3, r2
 8010daa:	005b      	lsls	r3, r3, #1
 8010dac:	4413      	add	r3, r2
 8010dae:	009b      	lsls	r3, r3, #2
 8010db0:	3308      	adds	r3, #8
 8010db2:	33c8      	adds	r3, #200	; 0xc8
 8010db4:	687a      	ldr	r2, [r7, #4]
 8010db6:	4413      	add	r3, r2
 8010db8:	3301      	adds	r3, #1
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	600b      	str	r3, [r1, #0]
					lidar->pole.angle = atanf(lidar->pole.y / lidar->pole.x);
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	e9d3 016c 	ldrd	r0, r1, [r3, #432]	; 0x1b0
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 8010dca:	f7ef fd3f 	bl	800084c <__aeabi_ddiv>
 8010dce:	4602      	mov	r2, r0
 8010dd0:	460b      	mov	r3, r1
 8010dd2:	4610      	mov	r0, r2
 8010dd4:	4619      	mov	r1, r3
 8010dd6:	f7ef ff07 	bl	8000be8 <__aeabi_d2f>
 8010dda:	4603      	mov	r3, r0
 8010ddc:	ee00 3a10 	vmov	s0, r3
 8010de0:	f00e f976 	bl	801f0d0 <atanf>
 8010de4:	ee10 3a10 	vmov	r3, s0
 8010de8:	4618      	mov	r0, r3
 8010dea:	f7ef fbad 	bl	8000548 <__aeabi_f2d>
 8010dee:	4602      	mov	r2, r0
 8010df0:	460b      	mov	r3, r1
 8010df2:	6879      	ldr	r1, [r7, #4]
 8010df4:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
					lidar->Polelist[i] = lidar->pole;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8010dfe:	697b      	ldr	r3, [r7, #20]
 8010e00:	015b      	lsls	r3, r3, #5
 8010e02:	441a      	add	r2, r3
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	4615      	mov	r5, r2
 8010e08:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8010e0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010e10:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010e14:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
				for(int i = 0; i < lidar->obstacle_count; i++)
 8010e18:	697b      	ldr	r3, [r7, #20]
 8010e1a:	3301      	adds	r3, #1
 8010e1c:	617b      	str	r3, [r7, #20]
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8010e24:	697a      	ldr	r2, [r7, #20]
 8010e26:	429a      	cmp	r2, r3
 8010e28:	db9d      	blt.n	8010d66 <ObstacleHandler+0xea>
				for(int i = 0; i < lidar->obstacle_count; i++)
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	613b      	str	r3, [r7, #16]
 8010e2e:	e031      	b.n	8010e94 <ObstacleHandler+0x218>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].x, 4, HAL_MAX_DELAY);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8010e3c:	693b      	ldr	r3, [r7, #16]
 8010e3e:	015b      	lsls	r3, r3, #5
 8010e40:	4413      	add	r3, r2
 8010e42:	4619      	mov	r1, r3
 8010e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e48:	2204      	movs	r2, #4
 8010e4a:	f005 fe8a 	bl	8016b62 <HAL_UART_Transmit>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].y, 4, HAL_MAX_DELAY);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8010e5a:	693b      	ldr	r3, [r7, #16]
 8010e5c:	015b      	lsls	r3, r3, #5
 8010e5e:	4413      	add	r3, r2
 8010e60:	f103 0108 	add.w	r1, r3, #8
 8010e64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e68:	2204      	movs	r2, #4
 8010e6a:	f005 fe7a 	bl	8016b62 <HAL_UART_Transmit>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].distance, 4, HAL_MAX_DELAY);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8010e7a:	693b      	ldr	r3, [r7, #16]
 8010e7c:	015b      	lsls	r3, r3, #5
 8010e7e:	4413      	add	r3, r2
 8010e80:	f103 0110 	add.w	r1, r3, #16
 8010e84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e88:	2204      	movs	r2, #4
 8010e8a:	f005 fe6a 	bl	8016b62 <HAL_UART_Transmit>
				for(int i = 0; i < lidar->obstacle_count; i++)
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	3301      	adds	r3, #1
 8010e92:	613b      	str	r3, [r7, #16]
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8010e9a:	693a      	ldr	r2, [r7, #16]
 8010e9c:	429a      	cmp	r2, r3
 8010e9e:	dbc7      	blt.n	8010e30 <ObstacleHandler+0x1b4>
				mode = 0;
 8010ea0:	4b26      	ldr	r3, [pc, #152]	; (8010f3c <ObstacleHandler+0x2c0>)
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	601a      	str	r2, [r3, #0]
				HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 5);
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	33c9      	adds	r3, #201	; 0xc9
 8010eb0:	2205      	movs	r2, #5
 8010eb2:	4619      	mov	r1, r3
 8010eb4:	f005 feee 	bl	8016c94 <HAL_UART_Receive_IT>
				break;
 8010eb8:	e0e3      	b.n	8011082 <ObstacleHandler+0x406>
		if(lidar->start == 0) // Start booting
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 8010ec0:	f003 0304 	and.w	r3, r3, #4
 8010ec4:	b2db      	uxtb	r3, r3
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d13a      	bne.n	8010f40 <ObstacleHandler+0x2c4>
			if(lidar->obstacle_receive[0] == 0x01)
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8010ed0:	2b01      	cmp	r3, #1
 8010ed2:	f040 80d6 	bne.w	8011082 <ObstacleHandler+0x406>
				memcpy(&lidar->res, &lidar->obstacle_receive[1], 1);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	f203 1399 	addw	r3, r3, #409	; 0x199
 8010edc:	687a      	ldr	r2, [r7, #4]
 8010ede:	32ca      	adds	r2, #202	; 0xca
 8010ee0:	7812      	ldrb	r2, [r2, #0]
 8010ee2:	701a      	strb	r2, [r3, #0]
				lidar->response = lidar->res;
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f893 2199 	ldrb.w	r2, [r3, #409]	; 0x199
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
				if(lidar->response == OK)
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	f040 80c3 	bne.w	8011082 <ObstacleHandler+0x406>
					HAL_UART_Transmit(lidar->lidar_UART, &lidar->res, 1, HAL_MAX_DELAY);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	f203 1199 	addw	r1, r3, #409	; 0x199
 8010f08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f0c:	2201      	movs	r2, #1
 8010f0e:	f005 fe28 	bl	8016b62 <HAL_UART_Transmit>
					lidar->start = 1;
 8010f12:	687a      	ldr	r2, [r7, #4]
 8010f14:	f892 3294 	ldrb.w	r3, [r2, #660]	; 0x294
 8010f18:	f043 0304 	orr.w	r3, r3, #4
 8010f1c:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
					lidar->response = NO;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2201      	movs	r2, #1
 8010f24:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
					HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 25);
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	33c9      	adds	r3, #201	; 0xc9
 8010f32:	2219      	movs	r2, #25
 8010f34:	4619      	mov	r1, r3
 8010f36:	f005 fead 	bl	8016c94 <HAL_UART_Receive_IT>
}
 8010f3a:	e0a2      	b.n	8011082 <ObstacleHandler+0x406>
 8010f3c:	200015e8 	.word	0x200015e8
			memcpy(&lidar->res, &lidar->obstacle_receive[0], 1);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f203 1399 	addw	r3, r3, #409	; 0x199
 8010f46:	687a      	ldr	r2, [r7, #4]
 8010f48:	32c9      	adds	r2, #201	; 0xc9
 8010f4a:	7812      	ldrb	r2, [r2, #0]
 8010f4c:	701a      	strb	r2, [r3, #0]
			lidar->response = lidar->res;
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	f893 2199 	ldrb.w	r2, [r3, #409]	; 0x199
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
			if(lidar->response == OK)
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d152      	bne.n	801100a <ObstacleHandler+0x38e>
				memcpy(&lidar->pole.x, &lidar->obstacle_receive[1], 8);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	33ca      	adds	r3, #202	; 0xca
 8010f6e:	2208      	movs	r2, #8
 8010f70:	4619      	mov	r1, r3
 8010f72:	f009 fbcd 	bl	801a710 <memcpy>
				memcpy(&lidar->pole.y, &lidar->obstacle_receive[9], 8);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	33d2      	adds	r3, #210	; 0xd2
 8010f80:	2208      	movs	r2, #8
 8010f82:	4619      	mov	r1, r3
 8010f84:	f009 fbc4 	bl	801a710 <memcpy>
				memcpy(&lidar->pole.distance, &lidar->obstacle_receive[17], 8);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f503 70dc 	add.w	r0, r3, #440	; 0x1b8
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	33da      	adds	r3, #218	; 0xda
 8010f92:	2208      	movs	r2, #8
 8010f94:	4619      	mov	r1, r3
 8010f96:	f009 fbbb 	bl	801a710 <memcpy>
				float temp = lidar->pole.x;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 8010fa0:	4610      	mov	r0, r2
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	f7ef fe20 	bl	8000be8 <__aeabi_d2f>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	60fb      	str	r3, [r7, #12]
				lidar->pole.x = -lidar->pole.y;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	e9d3 236c 	ldrd	r2, r3, [r3, #432]	; 0x1b0
 8010fb2:	4614      	mov	r4, r2
 8010fb4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	e9c3 456a 	strd	r4, r5, [r3, #424]	; 0x1a8
				lidar->pole.y = temp;
 8010fbe:	68f8      	ldr	r0, [r7, #12]
 8010fc0:	f7ef fac2 	bl	8000548 <__aeabi_f2d>
 8010fc4:	4602      	mov	r2, r0
 8010fc6:	460b      	mov	r3, r1
 8010fc8:	6879      	ldr	r1, [r7, #4]
 8010fca:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
				lidar->pole.angle = atanf(lidar->pole.y / lidar->pole.x);
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	e9d3 016c 	ldrd	r0, r1, [r3, #432]	; 0x1b0
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 8010fda:	f7ef fc37 	bl	800084c <__aeabi_ddiv>
 8010fde:	4602      	mov	r2, r0
 8010fe0:	460b      	mov	r3, r1
 8010fe2:	4610      	mov	r0, r2
 8010fe4:	4619      	mov	r1, r3
 8010fe6:	f7ef fdff 	bl	8000be8 <__aeabi_d2f>
 8010fea:	4603      	mov	r3, r0
 8010fec:	ee00 3a10 	vmov	s0, r3
 8010ff0:	f00e f86e 	bl	801f0d0 <atanf>
 8010ff4:	ee10 3a10 	vmov	r3, s0
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f7ef faa5 	bl	8000548 <__aeabi_f2d>
 8010ffe:	4602      	mov	r2, r0
 8011000:	460b      	mov	r3, r1
 8011002:	6879      	ldr	r1, [r7, #4]
 8011004:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
 8011008:	e00d      	b.n	8011026 <ObstacleHandler+0x3aa>
				lidar->reject = 1;
 801100a:	687a      	ldr	r2, [r7, #4]
 801100c:	f892 3294 	ldrb.w	r3, [r2, #660]	; 0x294
 8011010:	f043 0302 	orr.w	r3, r3, #2
 8011014:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
				LidarSendIns(lidar->inst, lidar);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 801101e:	6879      	ldr	r1, [r7, #4]
 8011020:	4618      	mov	r0, r3
 8011022:	f7ff fded 	bl	8010c00 <LidarSendIns>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->res, 1, HAL_MAX_DELAY);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	f203 1199 	addw	r1, r3, #409	; 0x199
 8011032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011036:	2201      	movs	r2, #1
 8011038:	f005 fd93 	bl	8016b62 <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.x, 8, HAL_MAX_DELAY);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	f503 71d4 	add.w	r1, r3, #424	; 0x1a8
 8011048:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801104c:	2208      	movs	r2, #8
 801104e:	f005 fd88 	bl	8016b62 <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.y, 8, HAL_MAX_DELAY);
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f503 71d8 	add.w	r1, r3, #432	; 0x1b0
 801105e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011062:	2208      	movs	r2, #8
 8011064:	f005 fd7d 	bl	8016b62 <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.distance, 8, HAL_MAX_DELAY);
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 8011074:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011078:	2208      	movs	r2, #8
 801107a:	f005 fd72 	bl	8016b62 <HAL_UART_Transmit>
}
 801107e:	e000      	b.n	8011082 <ObstacleHandler+0x406>
				break;
 8011080:	bf00      	nop
}
 8011082:	bf00      	nop
 8011084:	3718      	adds	r7, #24
 8011086:	46bd      	mov	sp, r7
 8011088:	bdb0      	pop	{r4, r5, r7, pc}
 801108a:	bf00      	nop

0801108c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 801108c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80110c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8011090:	480d      	ldr	r0, [pc, #52]	; (80110c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8011092:	490e      	ldr	r1, [pc, #56]	; (80110cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8011094:	4a0e      	ldr	r2, [pc, #56]	; (80110d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8011096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8011098:	e002      	b.n	80110a0 <LoopCopyDataInit>

0801109a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801109a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801109c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801109e:	3304      	adds	r3, #4

080110a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80110a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80110a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80110a4:	d3f9      	bcc.n	801109a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80110a6:	4a0b      	ldr	r2, [pc, #44]	; (80110d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80110a8:	4c0b      	ldr	r4, [pc, #44]	; (80110d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80110aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80110ac:	e001      	b.n	80110b2 <LoopFillZerobss>

080110ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80110ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80110b0:	3204      	adds	r2, #4

080110b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80110b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80110b4:	d3fb      	bcc.n	80110ae <FillZerobss>


/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80110b6:	f7fb fae7 	bl	800c688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80110ba:	f009 fafd 	bl	801a6b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80110be:	f7f2 ff49 	bl	8003f54 <main>
  bx  lr    
 80110c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80110c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80110c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80110cc:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 80110d0:	080214fc 	.word	0x080214fc
  ldr r2, =_sbss
 80110d4:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 80110d8:	2000aac8 	.word	0x2000aac8

080110dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80110dc:	e7fe      	b.n	80110dc <ADC_IRQHandler>
	...

080110e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80110e4:	4b0e      	ldr	r3, [pc, #56]	; (8011120 <HAL_Init+0x40>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	4a0d      	ldr	r2, [pc, #52]	; (8011120 <HAL_Init+0x40>)
 80110ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80110ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80110f0:	4b0b      	ldr	r3, [pc, #44]	; (8011120 <HAL_Init+0x40>)
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	4a0a      	ldr	r2, [pc, #40]	; (8011120 <HAL_Init+0x40>)
 80110f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80110fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80110fc:	4b08      	ldr	r3, [pc, #32]	; (8011120 <HAL_Init+0x40>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	4a07      	ldr	r2, [pc, #28]	; (8011120 <HAL_Init+0x40>)
 8011102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011106:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011108:	2003      	movs	r0, #3
 801110a:	f000 ffa8 	bl	801205e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801110e:	2000      	movs	r0, #0
 8011110:	f7fb f99a 	bl	800c448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8011114:	f7f0 fef0 	bl	8001ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8011118:	2300      	movs	r3, #0
}
 801111a:	4618      	mov	r0, r3
 801111c:	bd80      	pop	{r7, pc}
 801111e:	bf00      	nop
 8011120:	40023c00 	.word	0x40023c00

08011124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011124:	b480      	push	{r7}
 8011126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8011128:	4b06      	ldr	r3, [pc, #24]	; (8011144 <HAL_IncTick+0x20>)
 801112a:	781b      	ldrb	r3, [r3, #0]
 801112c:	461a      	mov	r2, r3
 801112e:	4b06      	ldr	r3, [pc, #24]	; (8011148 <HAL_IncTick+0x24>)
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	4413      	add	r3, r2
 8011134:	4a04      	ldr	r2, [pc, #16]	; (8011148 <HAL_IncTick+0x24>)
 8011136:	6013      	str	r3, [r2, #0]
}
 8011138:	bf00      	nop
 801113a:	46bd      	mov	sp, r7
 801113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011140:	4770      	bx	lr
 8011142:	bf00      	nop
 8011144:	20000084 	.word	0x20000084
 8011148:	2000aa74 	.word	0x2000aa74

0801114c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801114c:	b480      	push	{r7}
 801114e:	af00      	add	r7, sp, #0
  return uwTick;
 8011150:	4b03      	ldr	r3, [pc, #12]	; (8011160 <HAL_GetTick+0x14>)
 8011152:	681b      	ldr	r3, [r3, #0]
}
 8011154:	4618      	mov	r0, r3
 8011156:	46bd      	mov	sp, r7
 8011158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115c:	4770      	bx	lr
 801115e:	bf00      	nop
 8011160:	2000aa74 	.word	0x2000aa74

08011164 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b084      	sub	sp, #16
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d101      	bne.n	8011176 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8011172:	2301      	movs	r3, #1
 8011174:	e0ed      	b.n	8011352 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	f893 3020 	ldrb.w	r3, [r3, #32]
 801117c:	b2db      	uxtb	r3, r3
 801117e:	2b00      	cmp	r3, #0
 8011180:	d102      	bne.n	8011188 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	f7f0 fee4 	bl	8001f50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	681a      	ldr	r2, [r3, #0]
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	f022 0202 	bic.w	r2, r2, #2
 8011196:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011198:	f7ff ffd8 	bl	801114c <HAL_GetTick>
 801119c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 801119e:	e012      	b.n	80111c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80111a0:	f7ff ffd4 	bl	801114c <HAL_GetTick>
 80111a4:	4602      	mov	r2, r0
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	1ad3      	subs	r3, r2, r3
 80111aa:	2b0a      	cmp	r3, #10
 80111ac:	d90b      	bls.n	80111c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	2205      	movs	r2, #5
 80111be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80111c2:	2301      	movs	r3, #1
 80111c4:	e0c5      	b.n	8011352 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	685b      	ldr	r3, [r3, #4]
 80111cc:	f003 0302 	and.w	r3, r3, #2
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d1e5      	bne.n	80111a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	681a      	ldr	r2, [r3, #0]
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	f042 0201 	orr.w	r2, r2, #1
 80111e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80111e4:	f7ff ffb2 	bl	801114c <HAL_GetTick>
 80111e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80111ea:	e012      	b.n	8011212 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80111ec:	f7ff ffae 	bl	801114c <HAL_GetTick>
 80111f0:	4602      	mov	r2, r0
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	1ad3      	subs	r3, r2, r3
 80111f6:	2b0a      	cmp	r3, #10
 80111f8:	d90b      	bls.n	8011212 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	2205      	movs	r2, #5
 801120a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 801120e:	2301      	movs	r3, #1
 8011210:	e09f      	b.n	8011352 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	685b      	ldr	r3, [r3, #4]
 8011218:	f003 0301 	and.w	r3, r3, #1
 801121c:	2b00      	cmp	r3, #0
 801121e:	d0e5      	beq.n	80111ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	7e1b      	ldrb	r3, [r3, #24]
 8011224:	2b01      	cmp	r3, #1
 8011226:	d108      	bne.n	801123a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	681a      	ldr	r2, [r3, #0]
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011236:	601a      	str	r2, [r3, #0]
 8011238:	e007      	b.n	801124a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	681a      	ldr	r2, [r3, #0]
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011248:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	7e5b      	ldrb	r3, [r3, #25]
 801124e:	2b01      	cmp	r3, #1
 8011250:	d108      	bne.n	8011264 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	681a      	ldr	r2, [r3, #0]
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011260:	601a      	str	r2, [r3, #0]
 8011262:	e007      	b.n	8011274 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	681a      	ldr	r2, [r3, #0]
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011272:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	7e9b      	ldrb	r3, [r3, #26]
 8011278:	2b01      	cmp	r3, #1
 801127a:	d108      	bne.n	801128e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	681a      	ldr	r2, [r3, #0]
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	f042 0220 	orr.w	r2, r2, #32
 801128a:	601a      	str	r2, [r3, #0]
 801128c:	e007      	b.n	801129e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	681a      	ldr	r2, [r3, #0]
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	f022 0220 	bic.w	r2, r2, #32
 801129c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	7edb      	ldrb	r3, [r3, #27]
 80112a2:	2b01      	cmp	r3, #1
 80112a4:	d108      	bne.n	80112b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	681a      	ldr	r2, [r3, #0]
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	f022 0210 	bic.w	r2, r2, #16
 80112b4:	601a      	str	r2, [r3, #0]
 80112b6:	e007      	b.n	80112c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	681a      	ldr	r2, [r3, #0]
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	f042 0210 	orr.w	r2, r2, #16
 80112c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	7f1b      	ldrb	r3, [r3, #28]
 80112cc:	2b01      	cmp	r3, #1
 80112ce:	d108      	bne.n	80112e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	681a      	ldr	r2, [r3, #0]
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	f042 0208 	orr.w	r2, r2, #8
 80112de:	601a      	str	r2, [r3, #0]
 80112e0:	e007      	b.n	80112f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	681a      	ldr	r2, [r3, #0]
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	f022 0208 	bic.w	r2, r2, #8
 80112f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	7f5b      	ldrb	r3, [r3, #29]
 80112f6:	2b01      	cmp	r3, #1
 80112f8:	d108      	bne.n	801130c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	681a      	ldr	r2, [r3, #0]
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	f042 0204 	orr.w	r2, r2, #4
 8011308:	601a      	str	r2, [r3, #0]
 801130a:	e007      	b.n	801131c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	681a      	ldr	r2, [r3, #0]
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	f022 0204 	bic.w	r2, r2, #4
 801131a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	689a      	ldr	r2, [r3, #8]
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	68db      	ldr	r3, [r3, #12]
 8011324:	431a      	orrs	r2, r3
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	691b      	ldr	r3, [r3, #16]
 801132a:	431a      	orrs	r2, r3
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	695b      	ldr	r3, [r3, #20]
 8011330:	ea42 0103 	orr.w	r1, r2, r3
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	685b      	ldr	r3, [r3, #4]
 8011338:	1e5a      	subs	r2, r3, #1
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	430a      	orrs	r2, r1
 8011340:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	2200      	movs	r2, #0
 8011346:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2201      	movs	r2, #1
 801134c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8011350:	2300      	movs	r3, #0
}
 8011352:	4618      	mov	r0, r3
 8011354:	3710      	adds	r7, #16
 8011356:	46bd      	mov	sp, r7
 8011358:	bd80      	pop	{r7, pc}
	...

0801135c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 801135c:	b480      	push	{r7}
 801135e:	b087      	sub	sp, #28
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
 8011364:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011372:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8011374:	7cfb      	ldrb	r3, [r7, #19]
 8011376:	2b01      	cmp	r3, #1
 8011378:	d003      	beq.n	8011382 <HAL_CAN_ConfigFilter+0x26>
 801137a:	7cfb      	ldrb	r3, [r7, #19]
 801137c:	2b02      	cmp	r3, #2
 801137e:	f040 80be 	bne.w	80114fe <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8011382:	4b65      	ldr	r3, [pc, #404]	; (8011518 <HAL_CAN_ConfigFilter+0x1bc>)
 8011384:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8011386:	697b      	ldr	r3, [r7, #20]
 8011388:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801138c:	f043 0201 	orr.w	r2, r3, #1
 8011390:	697b      	ldr	r3, [r7, #20]
 8011392:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8011396:	697b      	ldr	r3, [r7, #20]
 8011398:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801139c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80113a0:	697b      	ldr	r3, [r7, #20]
 80113a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80113a6:	697b      	ldr	r3, [r7, #20]
 80113a8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113b0:	021b      	lsls	r3, r3, #8
 80113b2:	431a      	orrs	r2, r3
 80113b4:	697b      	ldr	r3, [r7, #20]
 80113b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	695b      	ldr	r3, [r3, #20]
 80113be:	f003 031f 	and.w	r3, r3, #31
 80113c2:	2201      	movs	r2, #1
 80113c4:	fa02 f303 	lsl.w	r3, r2, r3
 80113c8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80113ca:	697b      	ldr	r3, [r7, #20]
 80113cc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	43db      	mvns	r3, r3
 80113d4:	401a      	ands	r2, r3
 80113d6:	697b      	ldr	r3, [r7, #20]
 80113d8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	69db      	ldr	r3, [r3, #28]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d123      	bne.n	801142c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	43db      	mvns	r3, r3
 80113ee:	401a      	ands	r2, r3
 80113f0:	697b      	ldr	r3, [r7, #20]
 80113f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	68db      	ldr	r3, [r3, #12]
 80113fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80113fc:	683b      	ldr	r3, [r7, #0]
 80113fe:	685b      	ldr	r3, [r3, #4]
 8011400:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8011402:	683a      	ldr	r2, [r7, #0]
 8011404:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8011406:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8011408:	697b      	ldr	r3, [r7, #20]
 801140a:	3248      	adds	r2, #72	; 0x48
 801140c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	689b      	ldr	r3, [r3, #8]
 8011414:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 801141c:	683b      	ldr	r3, [r7, #0]
 801141e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8011420:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8011422:	6979      	ldr	r1, [r7, #20]
 8011424:	3348      	adds	r3, #72	; 0x48
 8011426:	00db      	lsls	r3, r3, #3
 8011428:	440b      	add	r3, r1
 801142a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	69db      	ldr	r3, [r3, #28]
 8011430:	2b01      	cmp	r3, #1
 8011432:	d122      	bne.n	801147a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8011434:	697b      	ldr	r3, [r7, #20]
 8011436:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	431a      	orrs	r2, r3
 801143e:	697b      	ldr	r3, [r7, #20]
 8011440:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 801144a:	683b      	ldr	r3, [r7, #0]
 801144c:	685b      	ldr	r3, [r3, #4]
 801144e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8011450:	683a      	ldr	r2, [r7, #0]
 8011452:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8011454:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8011456:	697b      	ldr	r3, [r7, #20]
 8011458:	3248      	adds	r2, #72	; 0x48
 801145a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 801145e:	683b      	ldr	r3, [r7, #0]
 8011460:	689b      	ldr	r3, [r3, #8]
 8011462:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	68db      	ldr	r3, [r3, #12]
 8011468:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 801146a:	683b      	ldr	r3, [r7, #0]
 801146c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 801146e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8011470:	6979      	ldr	r1, [r7, #20]
 8011472:	3348      	adds	r3, #72	; 0x48
 8011474:	00db      	lsls	r3, r3, #3
 8011476:	440b      	add	r3, r1
 8011478:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 801147a:	683b      	ldr	r3, [r7, #0]
 801147c:	699b      	ldr	r3, [r3, #24]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d109      	bne.n	8011496 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8011482:	697b      	ldr	r3, [r7, #20]
 8011484:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	43db      	mvns	r3, r3
 801148c:	401a      	ands	r2, r3
 801148e:	697b      	ldr	r3, [r7, #20]
 8011490:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8011494:	e007      	b.n	80114a6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8011496:	697b      	ldr	r3, [r7, #20]
 8011498:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	431a      	orrs	r2, r3
 80114a0:	697b      	ldr	r3, [r7, #20]
 80114a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	691b      	ldr	r3, [r3, #16]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d109      	bne.n	80114c2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80114ae:	697b      	ldr	r3, [r7, #20]
 80114b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	43db      	mvns	r3, r3
 80114b8:	401a      	ands	r2, r3
 80114ba:	697b      	ldr	r3, [r7, #20]
 80114bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80114c0:	e007      	b.n	80114d2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80114c2:	697b      	ldr	r3, [r7, #20]
 80114c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	431a      	orrs	r2, r3
 80114cc:	697b      	ldr	r3, [r7, #20]
 80114ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	6a1b      	ldr	r3, [r3, #32]
 80114d6:	2b01      	cmp	r3, #1
 80114d8:	d107      	bne.n	80114ea <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80114da:	697b      	ldr	r3, [r7, #20]
 80114dc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	431a      	orrs	r2, r3
 80114e4:	697b      	ldr	r3, [r7, #20]
 80114e6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80114ea:	697b      	ldr	r3, [r7, #20]
 80114ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80114f0:	f023 0201 	bic.w	r2, r3, #1
 80114f4:	697b      	ldr	r3, [r7, #20]
 80114f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80114fa:	2300      	movs	r3, #0
 80114fc:	e006      	b.n	801150c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011502:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801150a:	2301      	movs	r3, #1
  }
}
 801150c:	4618      	mov	r0, r3
 801150e:	371c      	adds	r7, #28
 8011510:	46bd      	mov	sp, r7
 8011512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011516:	4770      	bx	lr
 8011518:	40006400 	.word	0x40006400

0801151c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b084      	sub	sp, #16
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	f893 3020 	ldrb.w	r3, [r3, #32]
 801152a:	b2db      	uxtb	r3, r3
 801152c:	2b01      	cmp	r3, #1
 801152e:	d12e      	bne.n	801158e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	2202      	movs	r2, #2
 8011534:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	681a      	ldr	r2, [r3, #0]
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	f022 0201 	bic.w	r2, r2, #1
 8011546:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8011548:	f7ff fe00 	bl	801114c <HAL_GetTick>
 801154c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 801154e:	e012      	b.n	8011576 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8011550:	f7ff fdfc 	bl	801114c <HAL_GetTick>
 8011554:	4602      	mov	r2, r0
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	1ad3      	subs	r3, r2, r3
 801155a:	2b0a      	cmp	r3, #10
 801155c:	d90b      	bls.n	8011576 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011562:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	2205      	movs	r2, #5
 801156e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8011572:	2301      	movs	r3, #1
 8011574:	e012      	b.n	801159c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	685b      	ldr	r3, [r3, #4]
 801157c:	f003 0301 	and.w	r3, r3, #1
 8011580:	2b00      	cmp	r3, #0
 8011582:	d1e5      	bne.n	8011550 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	2200      	movs	r2, #0
 8011588:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 801158a:	2300      	movs	r3, #0
 801158c:	e006      	b.n	801159c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011592:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801159a:	2301      	movs	r3, #1
  }
}
 801159c:	4618      	mov	r0, r3
 801159e:	3710      	adds	r7, #16
 80115a0:	46bd      	mov	sp, r7
 80115a2:	bd80      	pop	{r7, pc}

080115a4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80115a4:	b480      	push	{r7}
 80115a6:	b089      	sub	sp, #36	; 0x24
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	60f8      	str	r0, [r7, #12]
 80115ac:	60b9      	str	r1, [r7, #8]
 80115ae:	607a      	str	r2, [r7, #4]
 80115b0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80115b8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	689b      	ldr	r3, [r3, #8]
 80115c0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80115c2:	7ffb      	ldrb	r3, [r7, #31]
 80115c4:	2b01      	cmp	r3, #1
 80115c6:	d003      	beq.n	80115d0 <HAL_CAN_AddTxMessage+0x2c>
 80115c8:	7ffb      	ldrb	r3, [r7, #31]
 80115ca:	2b02      	cmp	r3, #2
 80115cc:	f040 80b8 	bne.w	8011740 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80115d0:	69bb      	ldr	r3, [r7, #24]
 80115d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d10a      	bne.n	80115f0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80115da:	69bb      	ldr	r3, [r7, #24]
 80115dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d105      	bne.n	80115f0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80115e4:	69bb      	ldr	r3, [r7, #24]
 80115e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	f000 80a0 	beq.w	8011730 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80115f0:	69bb      	ldr	r3, [r7, #24]
 80115f2:	0e1b      	lsrs	r3, r3, #24
 80115f4:	f003 0303 	and.w	r3, r3, #3
 80115f8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80115fa:	697b      	ldr	r3, [r7, #20]
 80115fc:	2b02      	cmp	r3, #2
 80115fe:	d907      	bls.n	8011610 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011604:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 801160c:	2301      	movs	r3, #1
 801160e:	e09e      	b.n	801174e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8011610:	2201      	movs	r2, #1
 8011612:	697b      	ldr	r3, [r7, #20]
 8011614:	409a      	lsls	r2, r3
 8011616:	683b      	ldr	r3, [r7, #0]
 8011618:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 801161a:	68bb      	ldr	r3, [r7, #8]
 801161c:	689b      	ldr	r3, [r3, #8]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d10d      	bne.n	801163e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8011622:	68bb      	ldr	r3, [r7, #8]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8011628:	68bb      	ldr	r3, [r7, #8]
 801162a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 801162c:	68f9      	ldr	r1, [r7, #12]
 801162e:	6809      	ldr	r1, [r1, #0]
 8011630:	431a      	orrs	r2, r3
 8011632:	697b      	ldr	r3, [r7, #20]
 8011634:	3318      	adds	r3, #24
 8011636:	011b      	lsls	r3, r3, #4
 8011638:	440b      	add	r3, r1
 801163a:	601a      	str	r2, [r3, #0]
 801163c:	e00f      	b.n	801165e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 801163e:	68bb      	ldr	r3, [r7, #8]
 8011640:	685b      	ldr	r3, [r3, #4]
 8011642:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8011644:	68bb      	ldr	r3, [r7, #8]
 8011646:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8011648:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 801164a:	68bb      	ldr	r3, [r7, #8]
 801164c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 801164e:	68f9      	ldr	r1, [r7, #12]
 8011650:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8011652:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8011654:	697b      	ldr	r3, [r7, #20]
 8011656:	3318      	adds	r3, #24
 8011658:	011b      	lsls	r3, r3, #4
 801165a:	440b      	add	r3, r1
 801165c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	6819      	ldr	r1, [r3, #0]
 8011662:	68bb      	ldr	r3, [r7, #8]
 8011664:	691a      	ldr	r2, [r3, #16]
 8011666:	697b      	ldr	r3, [r7, #20]
 8011668:	3318      	adds	r3, #24
 801166a:	011b      	lsls	r3, r3, #4
 801166c:	440b      	add	r3, r1
 801166e:	3304      	adds	r3, #4
 8011670:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	7d1b      	ldrb	r3, [r3, #20]
 8011676:	2b01      	cmp	r3, #1
 8011678:	d111      	bne.n	801169e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	681a      	ldr	r2, [r3, #0]
 801167e:	697b      	ldr	r3, [r7, #20]
 8011680:	3318      	adds	r3, #24
 8011682:	011b      	lsls	r3, r3, #4
 8011684:	4413      	add	r3, r2
 8011686:	3304      	adds	r3, #4
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	68fa      	ldr	r2, [r7, #12]
 801168c:	6811      	ldr	r1, [r2, #0]
 801168e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011692:	697b      	ldr	r3, [r7, #20]
 8011694:	3318      	adds	r3, #24
 8011696:	011b      	lsls	r3, r3, #4
 8011698:	440b      	add	r3, r1
 801169a:	3304      	adds	r3, #4
 801169c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	3307      	adds	r3, #7
 80116a2:	781b      	ldrb	r3, [r3, #0]
 80116a4:	061a      	lsls	r2, r3, #24
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	3306      	adds	r3, #6
 80116aa:	781b      	ldrb	r3, [r3, #0]
 80116ac:	041b      	lsls	r3, r3, #16
 80116ae:	431a      	orrs	r2, r3
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	3305      	adds	r3, #5
 80116b4:	781b      	ldrb	r3, [r3, #0]
 80116b6:	021b      	lsls	r3, r3, #8
 80116b8:	4313      	orrs	r3, r2
 80116ba:	687a      	ldr	r2, [r7, #4]
 80116bc:	3204      	adds	r2, #4
 80116be:	7812      	ldrb	r2, [r2, #0]
 80116c0:	4610      	mov	r0, r2
 80116c2:	68fa      	ldr	r2, [r7, #12]
 80116c4:	6811      	ldr	r1, [r2, #0]
 80116c6:	ea43 0200 	orr.w	r2, r3, r0
 80116ca:	697b      	ldr	r3, [r7, #20]
 80116cc:	011b      	lsls	r3, r3, #4
 80116ce:	440b      	add	r3, r1
 80116d0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80116d4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	3303      	adds	r3, #3
 80116da:	781b      	ldrb	r3, [r3, #0]
 80116dc:	061a      	lsls	r2, r3, #24
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	3302      	adds	r3, #2
 80116e2:	781b      	ldrb	r3, [r3, #0]
 80116e4:	041b      	lsls	r3, r3, #16
 80116e6:	431a      	orrs	r2, r3
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	3301      	adds	r3, #1
 80116ec:	781b      	ldrb	r3, [r3, #0]
 80116ee:	021b      	lsls	r3, r3, #8
 80116f0:	4313      	orrs	r3, r2
 80116f2:	687a      	ldr	r2, [r7, #4]
 80116f4:	7812      	ldrb	r2, [r2, #0]
 80116f6:	4610      	mov	r0, r2
 80116f8:	68fa      	ldr	r2, [r7, #12]
 80116fa:	6811      	ldr	r1, [r2, #0]
 80116fc:	ea43 0200 	orr.w	r2, r3, r0
 8011700:	697b      	ldr	r3, [r7, #20]
 8011702:	011b      	lsls	r3, r3, #4
 8011704:	440b      	add	r3, r1
 8011706:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 801170a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	681a      	ldr	r2, [r3, #0]
 8011710:	697b      	ldr	r3, [r7, #20]
 8011712:	3318      	adds	r3, #24
 8011714:	011b      	lsls	r3, r3, #4
 8011716:	4413      	add	r3, r2
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	68fa      	ldr	r2, [r7, #12]
 801171c:	6811      	ldr	r1, [r2, #0]
 801171e:	f043 0201 	orr.w	r2, r3, #1
 8011722:	697b      	ldr	r3, [r7, #20]
 8011724:	3318      	adds	r3, #24
 8011726:	011b      	lsls	r3, r3, #4
 8011728:	440b      	add	r3, r1
 801172a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 801172c:	2300      	movs	r3, #0
 801172e:	e00e      	b.n	801174e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011734:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 801173c:	2301      	movs	r3, #1
 801173e:	e006      	b.n	801174e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011744:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801174c:	2301      	movs	r3, #1
  }
}
 801174e:	4618      	mov	r0, r3
 8011750:	3724      	adds	r7, #36	; 0x24
 8011752:	46bd      	mov	sp, r7
 8011754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011758:	4770      	bx	lr

0801175a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 801175a:	b480      	push	{r7}
 801175c:	b085      	sub	sp, #20
 801175e:	af00      	add	r7, sp, #0
 8011760:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8011762:	2300      	movs	r3, #0
 8011764:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	f893 3020 	ldrb.w	r3, [r3, #32]
 801176c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 801176e:	7afb      	ldrb	r3, [r7, #11]
 8011770:	2b01      	cmp	r3, #1
 8011772:	d002      	beq.n	801177a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8011774:	7afb      	ldrb	r3, [r7, #11]
 8011776:	2b02      	cmp	r3, #2
 8011778:	d11d      	bne.n	80117b6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	689b      	ldr	r3, [r3, #8]
 8011780:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011784:	2b00      	cmp	r3, #0
 8011786:	d002      	beq.n	801178e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	3301      	adds	r3, #1
 801178c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	689b      	ldr	r3, [r3, #8]
 8011794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011798:	2b00      	cmp	r3, #0
 801179a:	d002      	beq.n	80117a2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	3301      	adds	r3, #1
 80117a0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	689b      	ldr	r3, [r3, #8]
 80117a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d002      	beq.n	80117b6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	3301      	adds	r3, #1
 80117b4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80117b6:	68fb      	ldr	r3, [r7, #12]
}
 80117b8:	4618      	mov	r0, r3
 80117ba:	3714      	adds	r7, #20
 80117bc:	46bd      	mov	sp, r7
 80117be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c2:	4770      	bx	lr

080117c4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80117c4:	b480      	push	{r7}
 80117c6:	b087      	sub	sp, #28
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	60f8      	str	r0, [r7, #12]
 80117cc:	60b9      	str	r1, [r7, #8]
 80117ce:	607a      	str	r2, [r7, #4]
 80117d0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80117d8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80117da:	7dfb      	ldrb	r3, [r7, #23]
 80117dc:	2b01      	cmp	r3, #1
 80117de:	d003      	beq.n	80117e8 <HAL_CAN_GetRxMessage+0x24>
 80117e0:	7dfb      	ldrb	r3, [r7, #23]
 80117e2:	2b02      	cmp	r3, #2
 80117e4:	f040 80f3 	bne.w	80119ce <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80117e8:	68bb      	ldr	r3, [r7, #8]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d10e      	bne.n	801180c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	68db      	ldr	r3, [r3, #12]
 80117f4:	f003 0303 	and.w	r3, r3, #3
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d116      	bne.n	801182a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011800:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8011808:	2301      	movs	r3, #1
 801180a:	e0e7      	b.n	80119dc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	691b      	ldr	r3, [r3, #16]
 8011812:	f003 0303 	and.w	r3, r3, #3
 8011816:	2b00      	cmp	r3, #0
 8011818:	d107      	bne.n	801182a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801181e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8011826:	2301      	movs	r3, #1
 8011828:	e0d8      	b.n	80119dc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	681a      	ldr	r2, [r3, #0]
 801182e:	68bb      	ldr	r3, [r7, #8]
 8011830:	331b      	adds	r3, #27
 8011832:	011b      	lsls	r3, r3, #4
 8011834:	4413      	add	r3, r2
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	f003 0204 	and.w	r2, r3, #4
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	689b      	ldr	r3, [r3, #8]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d10c      	bne.n	8011862 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	681a      	ldr	r2, [r3, #0]
 801184c:	68bb      	ldr	r3, [r7, #8]
 801184e:	331b      	adds	r3, #27
 8011850:	011b      	lsls	r3, r3, #4
 8011852:	4413      	add	r3, r2
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	0d5b      	lsrs	r3, r3, #21
 8011858:	f3c3 020a 	ubfx	r2, r3, #0, #11
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	601a      	str	r2, [r3, #0]
 8011860:	e00b      	b.n	801187a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	681a      	ldr	r2, [r3, #0]
 8011866:	68bb      	ldr	r3, [r7, #8]
 8011868:	331b      	adds	r3, #27
 801186a:	011b      	lsls	r3, r3, #4
 801186c:	4413      	add	r3, r2
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	08db      	lsrs	r3, r3, #3
 8011872:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	681a      	ldr	r2, [r3, #0]
 801187e:	68bb      	ldr	r3, [r7, #8]
 8011880:	331b      	adds	r3, #27
 8011882:	011b      	lsls	r3, r3, #4
 8011884:	4413      	add	r3, r2
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	f003 0202 	and.w	r2, r3, #2
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	681a      	ldr	r2, [r3, #0]
 8011894:	68bb      	ldr	r3, [r7, #8]
 8011896:	331b      	adds	r3, #27
 8011898:	011b      	lsls	r3, r3, #4
 801189a:	4413      	add	r3, r2
 801189c:	3304      	adds	r3, #4
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	f003 020f 	and.w	r2, r3, #15
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	681a      	ldr	r2, [r3, #0]
 80118ac:	68bb      	ldr	r3, [r7, #8]
 80118ae:	331b      	adds	r3, #27
 80118b0:	011b      	lsls	r3, r3, #4
 80118b2:	4413      	add	r3, r2
 80118b4:	3304      	adds	r3, #4
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	0a1b      	lsrs	r3, r3, #8
 80118ba:	b2da      	uxtb	r2, r3
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	681a      	ldr	r2, [r3, #0]
 80118c4:	68bb      	ldr	r3, [r7, #8]
 80118c6:	331b      	adds	r3, #27
 80118c8:	011b      	lsls	r3, r3, #4
 80118ca:	4413      	add	r3, r2
 80118cc:	3304      	adds	r3, #4
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	0c1b      	lsrs	r3, r3, #16
 80118d2:	b29a      	uxth	r2, r3
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	681a      	ldr	r2, [r3, #0]
 80118dc:	68bb      	ldr	r3, [r7, #8]
 80118de:	011b      	lsls	r3, r3, #4
 80118e0:	4413      	add	r3, r2
 80118e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	b2da      	uxtb	r2, r3
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	681a      	ldr	r2, [r3, #0]
 80118f2:	68bb      	ldr	r3, [r7, #8]
 80118f4:	011b      	lsls	r3, r3, #4
 80118f6:	4413      	add	r3, r2
 80118f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	0a1a      	lsrs	r2, r3, #8
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	3301      	adds	r3, #1
 8011904:	b2d2      	uxtb	r2, r2
 8011906:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	681a      	ldr	r2, [r3, #0]
 801190c:	68bb      	ldr	r3, [r7, #8]
 801190e:	011b      	lsls	r3, r3, #4
 8011910:	4413      	add	r3, r2
 8011912:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	0c1a      	lsrs	r2, r3, #16
 801191a:	683b      	ldr	r3, [r7, #0]
 801191c:	3302      	adds	r3, #2
 801191e:	b2d2      	uxtb	r2, r2
 8011920:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	681a      	ldr	r2, [r3, #0]
 8011926:	68bb      	ldr	r3, [r7, #8]
 8011928:	011b      	lsls	r3, r3, #4
 801192a:	4413      	add	r3, r2
 801192c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	0e1a      	lsrs	r2, r3, #24
 8011934:	683b      	ldr	r3, [r7, #0]
 8011936:	3303      	adds	r3, #3
 8011938:	b2d2      	uxtb	r2, r2
 801193a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	681a      	ldr	r2, [r3, #0]
 8011940:	68bb      	ldr	r3, [r7, #8]
 8011942:	011b      	lsls	r3, r3, #4
 8011944:	4413      	add	r3, r2
 8011946:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801194a:	681a      	ldr	r2, [r3, #0]
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	3304      	adds	r3, #4
 8011950:	b2d2      	uxtb	r2, r2
 8011952:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	681a      	ldr	r2, [r3, #0]
 8011958:	68bb      	ldr	r3, [r7, #8]
 801195a:	011b      	lsls	r3, r3, #4
 801195c:	4413      	add	r3, r2
 801195e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	0a1a      	lsrs	r2, r3, #8
 8011966:	683b      	ldr	r3, [r7, #0]
 8011968:	3305      	adds	r3, #5
 801196a:	b2d2      	uxtb	r2, r2
 801196c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	681a      	ldr	r2, [r3, #0]
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	011b      	lsls	r3, r3, #4
 8011976:	4413      	add	r3, r2
 8011978:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	0c1a      	lsrs	r2, r3, #16
 8011980:	683b      	ldr	r3, [r7, #0]
 8011982:	3306      	adds	r3, #6
 8011984:	b2d2      	uxtb	r2, r2
 8011986:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	681a      	ldr	r2, [r3, #0]
 801198c:	68bb      	ldr	r3, [r7, #8]
 801198e:	011b      	lsls	r3, r3, #4
 8011990:	4413      	add	r3, r2
 8011992:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	0e1a      	lsrs	r2, r3, #24
 801199a:	683b      	ldr	r3, [r7, #0]
 801199c:	3307      	adds	r3, #7
 801199e:	b2d2      	uxtb	r2, r2
 80119a0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80119a2:	68bb      	ldr	r3, [r7, #8]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d108      	bne.n	80119ba <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	68da      	ldr	r2, [r3, #12]
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	f042 0220 	orr.w	r2, r2, #32
 80119b6:	60da      	str	r2, [r3, #12]
 80119b8:	e007      	b.n	80119ca <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	691a      	ldr	r2, [r3, #16]
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	f042 0220 	orr.w	r2, r2, #32
 80119c8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80119ca:	2300      	movs	r3, #0
 80119cc:	e006      	b.n	80119dc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80119da:	2301      	movs	r3, #1
  }
}
 80119dc:	4618      	mov	r0, r3
 80119de:	371c      	adds	r7, #28
 80119e0:	46bd      	mov	sp, r7
 80119e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e6:	4770      	bx	lr

080119e8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80119e8:	b480      	push	{r7}
 80119ea:	b085      	sub	sp, #20
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
 80119f0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80119f8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80119fa:	7bfb      	ldrb	r3, [r7, #15]
 80119fc:	2b01      	cmp	r3, #1
 80119fe:	d002      	beq.n	8011a06 <HAL_CAN_ActivateNotification+0x1e>
 8011a00:	7bfb      	ldrb	r3, [r7, #15]
 8011a02:	2b02      	cmp	r3, #2
 8011a04:	d109      	bne.n	8011a1a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	6959      	ldr	r1, [r3, #20]
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	683a      	ldr	r2, [r7, #0]
 8011a12:	430a      	orrs	r2, r1
 8011a14:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8011a16:	2300      	movs	r3, #0
 8011a18:	e006      	b.n	8011a28 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a1e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8011a26:	2301      	movs	r3, #1
  }
}
 8011a28:	4618      	mov	r0, r3
 8011a2a:	3714      	adds	r7, #20
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a32:	4770      	bx	lr

08011a34 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b08a      	sub	sp, #40	; 0x28
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	695b      	ldr	r3, [r3, #20]
 8011a46:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	685b      	ldr	r3, [r3, #4]
 8011a4e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	689b      	ldr	r3, [r3, #8]
 8011a56:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	68db      	ldr	r3, [r3, #12]
 8011a5e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	691b      	ldr	r3, [r3, #16]
 8011a66:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	699b      	ldr	r3, [r3, #24]
 8011a6e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8011a70:	6a3b      	ldr	r3, [r7, #32]
 8011a72:	f003 0301 	and.w	r3, r3, #1
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d07c      	beq.n	8011b74 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8011a7a:	69bb      	ldr	r3, [r7, #24]
 8011a7c:	f003 0301 	and.w	r3, r3, #1
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d023      	beq.n	8011acc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	2201      	movs	r2, #1
 8011a8a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8011a8c:	69bb      	ldr	r3, [r7, #24]
 8011a8e:	f003 0302 	and.w	r3, r3, #2
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d003      	beq.n	8011a9e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8011a96:	6878      	ldr	r0, [r7, #4]
 8011a98:	f000 f983 	bl	8011da2 <HAL_CAN_TxMailbox0CompleteCallback>
 8011a9c:	e016      	b.n	8011acc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8011a9e:	69bb      	ldr	r3, [r7, #24]
 8011aa0:	f003 0304 	and.w	r3, r3, #4
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d004      	beq.n	8011ab2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8011aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aaa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011aae:	627b      	str	r3, [r7, #36]	; 0x24
 8011ab0:	e00c      	b.n	8011acc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8011ab2:	69bb      	ldr	r3, [r7, #24]
 8011ab4:	f003 0308 	and.w	r3, r3, #8
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d004      	beq.n	8011ac6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8011abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011abe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8011ac4:	e002      	b.n	8011acc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8011ac6:	6878      	ldr	r0, [r7, #4]
 8011ac8:	f000 f989 	bl	8011dde <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8011acc:	69bb      	ldr	r3, [r7, #24]
 8011ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d024      	beq.n	8011b20 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011ade:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8011ae0:	69bb      	ldr	r3, [r7, #24]
 8011ae2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d003      	beq.n	8011af2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8011aea:	6878      	ldr	r0, [r7, #4]
 8011aec:	f000 f963 	bl	8011db6 <HAL_CAN_TxMailbox1CompleteCallback>
 8011af0:	e016      	b.n	8011b20 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8011af2:	69bb      	ldr	r3, [r7, #24]
 8011af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d004      	beq.n	8011b06 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8011afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011afe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011b02:	627b      	str	r3, [r7, #36]	; 0x24
 8011b04:	e00c      	b.n	8011b20 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8011b06:	69bb      	ldr	r3, [r7, #24]
 8011b08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d004      	beq.n	8011b1a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8011b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011b16:	627b      	str	r3, [r7, #36]	; 0x24
 8011b18:	e002      	b.n	8011b20 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8011b1a:	6878      	ldr	r0, [r7, #4]
 8011b1c:	f000 f969 	bl	8011df2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8011b20:	69bb      	ldr	r3, [r7, #24]
 8011b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d024      	beq.n	8011b74 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011b32:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8011b34:	69bb      	ldr	r3, [r7, #24]
 8011b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d003      	beq.n	8011b46 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8011b3e:	6878      	ldr	r0, [r7, #4]
 8011b40:	f000 f943 	bl	8011dca <HAL_CAN_TxMailbox2CompleteCallback>
 8011b44:	e016      	b.n	8011b74 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8011b46:	69bb      	ldr	r3, [r7, #24]
 8011b48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d004      	beq.n	8011b5a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8011b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011b56:	627b      	str	r3, [r7, #36]	; 0x24
 8011b58:	e00c      	b.n	8011b74 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d004      	beq.n	8011b6e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8011b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8011b6c:	e002      	b.n	8011b74 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	f000 f949 	bl	8011e06 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8011b74:	6a3b      	ldr	r3, [r7, #32]
 8011b76:	f003 0308 	and.w	r3, r3, #8
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d00c      	beq.n	8011b98 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8011b7e:	697b      	ldr	r3, [r7, #20]
 8011b80:	f003 0310 	and.w	r3, r3, #16
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d007      	beq.n	8011b98 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8011b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011b8e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	2210      	movs	r2, #16
 8011b96:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8011b98:	6a3b      	ldr	r3, [r7, #32]
 8011b9a:	f003 0304 	and.w	r3, r3, #4
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d00b      	beq.n	8011bba <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8011ba2:	697b      	ldr	r3, [r7, #20]
 8011ba4:	f003 0308 	and.w	r3, r3, #8
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d006      	beq.n	8011bba <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	2208      	movs	r2, #8
 8011bb2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8011bb4:	6878      	ldr	r0, [r7, #4]
 8011bb6:	f000 f930 	bl	8011e1a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8011bba:	6a3b      	ldr	r3, [r7, #32]
 8011bbc:	f003 0302 	and.w	r3, r3, #2
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d009      	beq.n	8011bd8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	68db      	ldr	r3, [r3, #12]
 8011bca:	f003 0303 	and.w	r3, r3, #3
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d002      	beq.n	8011bd8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8011bd2:	6878      	ldr	r0, [r7, #4]
 8011bd4:	f7f8 fba6 	bl	800a324 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8011bd8:	6a3b      	ldr	r3, [r7, #32]
 8011bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d00c      	beq.n	8011bfc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8011be2:	693b      	ldr	r3, [r7, #16]
 8011be4:	f003 0310 	and.w	r3, r3, #16
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d007      	beq.n	8011bfc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8011bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011bf2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	2210      	movs	r2, #16
 8011bfa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8011bfc:	6a3b      	ldr	r3, [r7, #32]
 8011bfe:	f003 0320 	and.w	r3, r3, #32
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d00b      	beq.n	8011c1e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8011c06:	693b      	ldr	r3, [r7, #16]
 8011c08:	f003 0308 	and.w	r3, r3, #8
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d006      	beq.n	8011c1e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	2208      	movs	r2, #8
 8011c16:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8011c18:	6878      	ldr	r0, [r7, #4]
 8011c1a:	f000 f908 	bl	8011e2e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8011c1e:	6a3b      	ldr	r3, [r7, #32]
 8011c20:	f003 0310 	and.w	r3, r3, #16
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d009      	beq.n	8011c3c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	691b      	ldr	r3, [r3, #16]
 8011c2e:	f003 0303 	and.w	r3, r3, #3
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d002      	beq.n	8011c3c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f7f8 fd04 	bl	800a644 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8011c3c:	6a3b      	ldr	r3, [r7, #32]
 8011c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d00b      	beq.n	8011c5e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8011c46:	69fb      	ldr	r3, [r7, #28]
 8011c48:	f003 0310 	and.w	r3, r3, #16
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d006      	beq.n	8011c5e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	2210      	movs	r2, #16
 8011c56:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8011c58:	6878      	ldr	r0, [r7, #4]
 8011c5a:	f000 f8f2 	bl	8011e42 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8011c5e:	6a3b      	ldr	r3, [r7, #32]
 8011c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d00b      	beq.n	8011c80 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8011c68:	69fb      	ldr	r3, [r7, #28]
 8011c6a:	f003 0308 	and.w	r3, r3, #8
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d006      	beq.n	8011c80 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	2208      	movs	r2, #8
 8011c78:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8011c7a:	6878      	ldr	r0, [r7, #4]
 8011c7c:	f000 f8eb 	bl	8011e56 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8011c80:	6a3b      	ldr	r3, [r7, #32]
 8011c82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d07b      	beq.n	8011d82 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8011c8a:	69fb      	ldr	r3, [r7, #28]
 8011c8c:	f003 0304 	and.w	r3, r3, #4
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d072      	beq.n	8011d7a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8011c94:	6a3b      	ldr	r3, [r7, #32]
 8011c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d008      	beq.n	8011cb0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d003      	beq.n	8011cb0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8011ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011caa:	f043 0301 	orr.w	r3, r3, #1
 8011cae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8011cb0:	6a3b      	ldr	r3, [r7, #32]
 8011cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d008      	beq.n	8011ccc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d003      	beq.n	8011ccc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8011cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cc6:	f043 0302 	orr.w	r3, r3, #2
 8011cca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8011ccc:	6a3b      	ldr	r3, [r7, #32]
 8011cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d008      	beq.n	8011ce8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d003      	beq.n	8011ce8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8011ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce2:	f043 0304 	orr.w	r3, r3, #4
 8011ce6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8011ce8:	6a3b      	ldr	r3, [r7, #32]
 8011cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d043      	beq.n	8011d7a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d03e      	beq.n	8011d7a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011d02:	2b60      	cmp	r3, #96	; 0x60
 8011d04:	d02b      	beq.n	8011d5e <HAL_CAN_IRQHandler+0x32a>
 8011d06:	2b60      	cmp	r3, #96	; 0x60
 8011d08:	d82e      	bhi.n	8011d68 <HAL_CAN_IRQHandler+0x334>
 8011d0a:	2b50      	cmp	r3, #80	; 0x50
 8011d0c:	d022      	beq.n	8011d54 <HAL_CAN_IRQHandler+0x320>
 8011d0e:	2b50      	cmp	r3, #80	; 0x50
 8011d10:	d82a      	bhi.n	8011d68 <HAL_CAN_IRQHandler+0x334>
 8011d12:	2b40      	cmp	r3, #64	; 0x40
 8011d14:	d019      	beq.n	8011d4a <HAL_CAN_IRQHandler+0x316>
 8011d16:	2b40      	cmp	r3, #64	; 0x40
 8011d18:	d826      	bhi.n	8011d68 <HAL_CAN_IRQHandler+0x334>
 8011d1a:	2b30      	cmp	r3, #48	; 0x30
 8011d1c:	d010      	beq.n	8011d40 <HAL_CAN_IRQHandler+0x30c>
 8011d1e:	2b30      	cmp	r3, #48	; 0x30
 8011d20:	d822      	bhi.n	8011d68 <HAL_CAN_IRQHandler+0x334>
 8011d22:	2b10      	cmp	r3, #16
 8011d24:	d002      	beq.n	8011d2c <HAL_CAN_IRQHandler+0x2f8>
 8011d26:	2b20      	cmp	r3, #32
 8011d28:	d005      	beq.n	8011d36 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8011d2a:	e01d      	b.n	8011d68 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8011d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d2e:	f043 0308 	orr.w	r3, r3, #8
 8011d32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011d34:	e019      	b.n	8011d6a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8011d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d38:	f043 0310 	orr.w	r3, r3, #16
 8011d3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011d3e:	e014      	b.n	8011d6a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8011d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d42:	f043 0320 	orr.w	r3, r3, #32
 8011d46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011d48:	e00f      	b.n	8011d6a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8011d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d50:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011d52:	e00a      	b.n	8011d6a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8011d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d5a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011d5c:	e005      	b.n	8011d6a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8011d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011d64:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011d66:	e000      	b.n	8011d6a <HAL_CAN_IRQHandler+0x336>
            break;
 8011d68:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	699a      	ldr	r2, [r3, #24]
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8011d78:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	2204      	movs	r2, #4
 8011d80:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8011d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d008      	beq.n	8011d9a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d8e:	431a      	orrs	r2, r3
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8011d94:	6878      	ldr	r0, [r7, #4]
 8011d96:	f000 f868 	bl	8011e6a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8011d9a:	bf00      	nop
 8011d9c:	3728      	adds	r7, #40	; 0x28
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}

08011da2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8011da2:	b480      	push	{r7}
 8011da4:	b083      	sub	sp, #12
 8011da6:	af00      	add	r7, sp, #0
 8011da8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8011daa:	bf00      	nop
 8011dac:	370c      	adds	r7, #12
 8011dae:	46bd      	mov	sp, r7
 8011db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db4:	4770      	bx	lr

08011db6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8011db6:	b480      	push	{r7}
 8011db8:	b083      	sub	sp, #12
 8011dba:	af00      	add	r7, sp, #0
 8011dbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8011dbe:	bf00      	nop
 8011dc0:	370c      	adds	r7, #12
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc8:	4770      	bx	lr

08011dca <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8011dca:	b480      	push	{r7}
 8011dcc:	b083      	sub	sp, #12
 8011dce:	af00      	add	r7, sp, #0
 8011dd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8011dd2:	bf00      	nop
 8011dd4:	370c      	adds	r7, #12
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ddc:	4770      	bx	lr

08011dde <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8011dde:	b480      	push	{r7}
 8011de0:	b083      	sub	sp, #12
 8011de2:	af00      	add	r7, sp, #0
 8011de4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8011de6:	bf00      	nop
 8011de8:	370c      	adds	r7, #12
 8011dea:	46bd      	mov	sp, r7
 8011dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df0:	4770      	bx	lr

08011df2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8011df2:	b480      	push	{r7}
 8011df4:	b083      	sub	sp, #12
 8011df6:	af00      	add	r7, sp, #0
 8011df8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8011dfa:	bf00      	nop
 8011dfc:	370c      	adds	r7, #12
 8011dfe:	46bd      	mov	sp, r7
 8011e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e04:	4770      	bx	lr

08011e06 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8011e06:	b480      	push	{r7}
 8011e08:	b083      	sub	sp, #12
 8011e0a:	af00      	add	r7, sp, #0
 8011e0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8011e0e:	bf00      	nop
 8011e10:	370c      	adds	r7, #12
 8011e12:	46bd      	mov	sp, r7
 8011e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e18:	4770      	bx	lr

08011e1a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8011e1a:	b480      	push	{r7}
 8011e1c:	b083      	sub	sp, #12
 8011e1e:	af00      	add	r7, sp, #0
 8011e20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8011e22:	bf00      	nop
 8011e24:	370c      	adds	r7, #12
 8011e26:	46bd      	mov	sp, r7
 8011e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2c:	4770      	bx	lr

08011e2e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8011e2e:	b480      	push	{r7}
 8011e30:	b083      	sub	sp, #12
 8011e32:	af00      	add	r7, sp, #0
 8011e34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8011e36:	bf00      	nop
 8011e38:	370c      	adds	r7, #12
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e40:	4770      	bx	lr

08011e42 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8011e42:	b480      	push	{r7}
 8011e44:	b083      	sub	sp, #12
 8011e46:	af00      	add	r7, sp, #0
 8011e48:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8011e4a:	bf00      	nop
 8011e4c:	370c      	adds	r7, #12
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e54:	4770      	bx	lr

08011e56 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8011e56:	b480      	push	{r7}
 8011e58:	b083      	sub	sp, #12
 8011e5a:	af00      	add	r7, sp, #0
 8011e5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8011e5e:	bf00      	nop
 8011e60:	370c      	adds	r7, #12
 8011e62:	46bd      	mov	sp, r7
 8011e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e68:	4770      	bx	lr

08011e6a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8011e6a:	b480      	push	{r7}
 8011e6c:	b083      	sub	sp, #12
 8011e6e:	af00      	add	r7, sp, #0
 8011e70:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8011e72:	bf00      	nop
 8011e74:	370c      	adds	r7, #12
 8011e76:	46bd      	mov	sp, r7
 8011e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7c:	4770      	bx	lr
	...

08011e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011e80:	b480      	push	{r7}
 8011e82:	b085      	sub	sp, #20
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	f003 0307 	and.w	r3, r3, #7
 8011e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011e90:	4b0c      	ldr	r3, [pc, #48]	; (8011ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8011e92:	68db      	ldr	r3, [r3, #12]
 8011e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011e96:	68ba      	ldr	r2, [r7, #8]
 8011e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8011e9c:	4013      	ands	r3, r2
 8011e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011ea4:	68bb      	ldr	r3, [r7, #8]
 8011ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8011ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8011eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011eb2:	4a04      	ldr	r2, [pc, #16]	; (8011ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8011eb4:	68bb      	ldr	r3, [r7, #8]
 8011eb6:	60d3      	str	r3, [r2, #12]
}
 8011eb8:	bf00      	nop
 8011eba:	3714      	adds	r7, #20
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec2:	4770      	bx	lr
 8011ec4:	e000ed00 	.word	0xe000ed00

08011ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8011ec8:	b480      	push	{r7}
 8011eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011ecc:	4b04      	ldr	r3, [pc, #16]	; (8011ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8011ece:	68db      	ldr	r3, [r3, #12]
 8011ed0:	0a1b      	lsrs	r3, r3, #8
 8011ed2:	f003 0307 	and.w	r3, r3, #7
}
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ede:	4770      	bx	lr
 8011ee0:	e000ed00 	.word	0xe000ed00

08011ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011ee4:	b480      	push	{r7}
 8011ee6:	b083      	sub	sp, #12
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	4603      	mov	r3, r0
 8011eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	db0b      	blt.n	8011f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011ef6:	79fb      	ldrb	r3, [r7, #7]
 8011ef8:	f003 021f 	and.w	r2, r3, #31
 8011efc:	4907      	ldr	r1, [pc, #28]	; (8011f1c <__NVIC_EnableIRQ+0x38>)
 8011efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011f02:	095b      	lsrs	r3, r3, #5
 8011f04:	2001      	movs	r0, #1
 8011f06:	fa00 f202 	lsl.w	r2, r0, r2
 8011f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8011f0e:	bf00      	nop
 8011f10:	370c      	adds	r7, #12
 8011f12:	46bd      	mov	sp, r7
 8011f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f18:	4770      	bx	lr
 8011f1a:	bf00      	nop
 8011f1c:	e000e100 	.word	0xe000e100

08011f20 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8011f20:	b480      	push	{r7}
 8011f22:	b083      	sub	sp, #12
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	4603      	mov	r3, r0
 8011f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	db12      	blt.n	8011f58 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011f32:	79fb      	ldrb	r3, [r7, #7]
 8011f34:	f003 021f 	and.w	r2, r3, #31
 8011f38:	490a      	ldr	r1, [pc, #40]	; (8011f64 <__NVIC_DisableIRQ+0x44>)
 8011f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011f3e:	095b      	lsrs	r3, r3, #5
 8011f40:	2001      	movs	r0, #1
 8011f42:	fa00 f202 	lsl.w	r2, r0, r2
 8011f46:	3320      	adds	r3, #32
 8011f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8011f4c:	f3bf 8f4f 	dsb	sy
}
 8011f50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011f52:	f3bf 8f6f 	isb	sy
}
 8011f56:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8011f58:	bf00      	nop
 8011f5a:	370c      	adds	r7, #12
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f62:	4770      	bx	lr
 8011f64:	e000e100 	.word	0xe000e100

08011f68 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8011f68:	b480      	push	{r7}
 8011f6a:	b083      	sub	sp, #12
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	4603      	mov	r3, r0
 8011f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	db0c      	blt.n	8011f94 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011f7a:	79fb      	ldrb	r3, [r7, #7]
 8011f7c:	f003 021f 	and.w	r2, r3, #31
 8011f80:	4907      	ldr	r1, [pc, #28]	; (8011fa0 <__NVIC_ClearPendingIRQ+0x38>)
 8011f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011f86:	095b      	lsrs	r3, r3, #5
 8011f88:	2001      	movs	r0, #1
 8011f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8011f8e:	3360      	adds	r3, #96	; 0x60
 8011f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8011f94:	bf00      	nop
 8011f96:	370c      	adds	r7, #12
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9e:	4770      	bx	lr
 8011fa0:	e000e100 	.word	0xe000e100

08011fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011fa4:	b480      	push	{r7}
 8011fa6:	b083      	sub	sp, #12
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	4603      	mov	r3, r0
 8011fac:	6039      	str	r1, [r7, #0]
 8011fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	db0a      	blt.n	8011fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011fb8:	683b      	ldr	r3, [r7, #0]
 8011fba:	b2da      	uxtb	r2, r3
 8011fbc:	490c      	ldr	r1, [pc, #48]	; (8011ff0 <__NVIC_SetPriority+0x4c>)
 8011fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011fc2:	0112      	lsls	r2, r2, #4
 8011fc4:	b2d2      	uxtb	r2, r2
 8011fc6:	440b      	add	r3, r1
 8011fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011fcc:	e00a      	b.n	8011fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011fce:	683b      	ldr	r3, [r7, #0]
 8011fd0:	b2da      	uxtb	r2, r3
 8011fd2:	4908      	ldr	r1, [pc, #32]	; (8011ff4 <__NVIC_SetPriority+0x50>)
 8011fd4:	79fb      	ldrb	r3, [r7, #7]
 8011fd6:	f003 030f 	and.w	r3, r3, #15
 8011fda:	3b04      	subs	r3, #4
 8011fdc:	0112      	lsls	r2, r2, #4
 8011fde:	b2d2      	uxtb	r2, r2
 8011fe0:	440b      	add	r3, r1
 8011fe2:	761a      	strb	r2, [r3, #24]
}
 8011fe4:	bf00      	nop
 8011fe6:	370c      	adds	r7, #12
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fee:	4770      	bx	lr
 8011ff0:	e000e100 	.word	0xe000e100
 8011ff4:	e000ed00 	.word	0xe000ed00

08011ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011ff8:	b480      	push	{r7}
 8011ffa:	b089      	sub	sp, #36	; 0x24
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	60f8      	str	r0, [r7, #12]
 8012000:	60b9      	str	r1, [r7, #8]
 8012002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	f003 0307 	and.w	r3, r3, #7
 801200a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801200c:	69fb      	ldr	r3, [r7, #28]
 801200e:	f1c3 0307 	rsb	r3, r3, #7
 8012012:	2b04      	cmp	r3, #4
 8012014:	bf28      	it	cs
 8012016:	2304      	movcs	r3, #4
 8012018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801201a:	69fb      	ldr	r3, [r7, #28]
 801201c:	3304      	adds	r3, #4
 801201e:	2b06      	cmp	r3, #6
 8012020:	d902      	bls.n	8012028 <NVIC_EncodePriority+0x30>
 8012022:	69fb      	ldr	r3, [r7, #28]
 8012024:	3b03      	subs	r3, #3
 8012026:	e000      	b.n	801202a <NVIC_EncodePriority+0x32>
 8012028:	2300      	movs	r3, #0
 801202a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801202c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012030:	69bb      	ldr	r3, [r7, #24]
 8012032:	fa02 f303 	lsl.w	r3, r2, r3
 8012036:	43da      	mvns	r2, r3
 8012038:	68bb      	ldr	r3, [r7, #8]
 801203a:	401a      	ands	r2, r3
 801203c:	697b      	ldr	r3, [r7, #20]
 801203e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012040:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012044:	697b      	ldr	r3, [r7, #20]
 8012046:	fa01 f303 	lsl.w	r3, r1, r3
 801204a:	43d9      	mvns	r1, r3
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012050:	4313      	orrs	r3, r2
         );
}
 8012052:	4618      	mov	r0, r3
 8012054:	3724      	adds	r7, #36	; 0x24
 8012056:	46bd      	mov	sp, r7
 8012058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205c:	4770      	bx	lr

0801205e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801205e:	b580      	push	{r7, lr}
 8012060:	b082      	sub	sp, #8
 8012062:	af00      	add	r7, sp, #0
 8012064:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012066:	6878      	ldr	r0, [r7, #4]
 8012068:	f7ff ff0a 	bl	8011e80 <__NVIC_SetPriorityGrouping>
}
 801206c:	bf00      	nop
 801206e:	3708      	adds	r7, #8
 8012070:	46bd      	mov	sp, r7
 8012072:	bd80      	pop	{r7, pc}

08012074 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8012074:	b580      	push	{r7, lr}
 8012076:	b086      	sub	sp, #24
 8012078:	af00      	add	r7, sp, #0
 801207a:	4603      	mov	r3, r0
 801207c:	60b9      	str	r1, [r7, #8]
 801207e:	607a      	str	r2, [r7, #4]
 8012080:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8012082:	2300      	movs	r3, #0
 8012084:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8012086:	f7ff ff1f 	bl	8011ec8 <__NVIC_GetPriorityGrouping>
 801208a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801208c:	687a      	ldr	r2, [r7, #4]
 801208e:	68b9      	ldr	r1, [r7, #8]
 8012090:	6978      	ldr	r0, [r7, #20]
 8012092:	f7ff ffb1 	bl	8011ff8 <NVIC_EncodePriority>
 8012096:	4602      	mov	r2, r0
 8012098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801209c:	4611      	mov	r1, r2
 801209e:	4618      	mov	r0, r3
 80120a0:	f7ff ff80 	bl	8011fa4 <__NVIC_SetPriority>
}
 80120a4:	bf00      	nop
 80120a6:	3718      	adds	r7, #24
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bd80      	pop	{r7, pc}

080120ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b082      	sub	sp, #8
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	4603      	mov	r3, r0
 80120b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80120b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80120ba:	4618      	mov	r0, r3
 80120bc:	f7ff ff12 	bl	8011ee4 <__NVIC_EnableIRQ>
}
 80120c0:	bf00      	nop
 80120c2:	3708      	adds	r7, #8
 80120c4:	46bd      	mov	sp, r7
 80120c6:	bd80      	pop	{r7, pc}

080120c8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b082      	sub	sp, #8
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	4603      	mov	r3, r0
 80120d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80120d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80120d6:	4618      	mov	r0, r3
 80120d8:	f7ff ff22 	bl	8011f20 <__NVIC_DisableIRQ>
}
 80120dc:	bf00      	nop
 80120de:	3708      	adds	r7, #8
 80120e0:	46bd      	mov	sp, r7
 80120e2:	bd80      	pop	{r7, pc}

080120e4 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b082      	sub	sp, #8
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	4603      	mov	r3, r0
 80120ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80120ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80120f2:	4618      	mov	r0, r3
 80120f4:	f7ff ff38 	bl	8011f68 <__NVIC_ClearPendingIRQ>
}
 80120f8:	bf00      	nop
 80120fa:	3708      	adds	r7, #8
 80120fc:	46bd      	mov	sp, r7
 80120fe:	bd80      	pop	{r7, pc}

08012100 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b086      	sub	sp, #24
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8012108:	2300      	movs	r3, #0
 801210a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801210c:	f7ff f81e 	bl	801114c <HAL_GetTick>
 8012110:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d101      	bne.n	801211c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8012118:	2301      	movs	r3, #1
 801211a:	e099      	b.n	8012250 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	2200      	movs	r2, #0
 8012120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2202      	movs	r2, #2
 8012128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	681a      	ldr	r2, [r3, #0]
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	f022 0201 	bic.w	r2, r2, #1
 801213a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801213c:	e00f      	b.n	801215e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801213e:	f7ff f805 	bl	801114c <HAL_GetTick>
 8012142:	4602      	mov	r2, r0
 8012144:	693b      	ldr	r3, [r7, #16]
 8012146:	1ad3      	subs	r3, r2, r3
 8012148:	2b05      	cmp	r3, #5
 801214a:	d908      	bls.n	801215e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2220      	movs	r2, #32
 8012150:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	2203      	movs	r2, #3
 8012156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801215a:	2303      	movs	r3, #3
 801215c:	e078      	b.n	8012250 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	f003 0301 	and.w	r3, r3, #1
 8012168:	2b00      	cmp	r3, #0
 801216a:	d1e8      	bne.n	801213e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8012174:	697a      	ldr	r2, [r7, #20]
 8012176:	4b38      	ldr	r3, [pc, #224]	; (8012258 <HAL_DMA_Init+0x158>)
 8012178:	4013      	ands	r3, r2
 801217a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	685a      	ldr	r2, [r3, #4]
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	689b      	ldr	r3, [r3, #8]
 8012184:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801218a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	691b      	ldr	r3, [r3, #16]
 8012190:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012196:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	699b      	ldr	r3, [r3, #24]
 801219c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80121a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	6a1b      	ldr	r3, [r3, #32]
 80121a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80121aa:	697a      	ldr	r2, [r7, #20]
 80121ac:	4313      	orrs	r3, r2
 80121ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121b4:	2b04      	cmp	r3, #4
 80121b6:	d107      	bne.n	80121c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121c0:	4313      	orrs	r3, r2
 80121c2:	697a      	ldr	r2, [r7, #20]
 80121c4:	4313      	orrs	r3, r2
 80121c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	697a      	ldr	r2, [r7, #20]
 80121ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	695b      	ldr	r3, [r3, #20]
 80121d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80121d8:	697b      	ldr	r3, [r7, #20]
 80121da:	f023 0307 	bic.w	r3, r3, #7
 80121de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121e4:	697a      	ldr	r2, [r7, #20]
 80121e6:	4313      	orrs	r3, r2
 80121e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121ee:	2b04      	cmp	r3, #4
 80121f0:	d117      	bne.n	8012222 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121f6:	697a      	ldr	r2, [r7, #20]
 80121f8:	4313      	orrs	r3, r2
 80121fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012200:	2b00      	cmp	r3, #0
 8012202:	d00e      	beq.n	8012222 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8012204:	6878      	ldr	r0, [r7, #4]
 8012206:	f000 fb09 	bl	801281c <DMA_CheckFifoParam>
 801220a:	4603      	mov	r3, r0
 801220c:	2b00      	cmp	r3, #0
 801220e:	d008      	beq.n	8012222 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	2240      	movs	r2, #64	; 0x40
 8012214:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	2201      	movs	r2, #1
 801221a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801221e:	2301      	movs	r3, #1
 8012220:	e016      	b.n	8012250 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	697a      	ldr	r2, [r7, #20]
 8012228:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801222a:	6878      	ldr	r0, [r7, #4]
 801222c:	f000 fac0 	bl	80127b0 <DMA_CalcBaseAndBitshift>
 8012230:	4603      	mov	r3, r0
 8012232:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012238:	223f      	movs	r2, #63	; 0x3f
 801223a:	409a      	lsls	r2, r3
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	2200      	movs	r2, #0
 8012244:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	2201      	movs	r2, #1
 801224a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801224e:	2300      	movs	r3, #0
}
 8012250:	4618      	mov	r0, r3
 8012252:	3718      	adds	r7, #24
 8012254:	46bd      	mov	sp, r7
 8012256:	bd80      	pop	{r7, pc}
 8012258:	f010803f 	.word	0xf010803f

0801225c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b084      	sub	sp, #16
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d101      	bne.n	801226e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 801226a:	2301      	movs	r3, #1
 801226c:	e050      	b.n	8012310 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012274:	b2db      	uxtb	r3, r3
 8012276:	2b02      	cmp	r3, #2
 8012278:	d101      	bne.n	801227e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 801227a:	2302      	movs	r3, #2
 801227c:	e048      	b.n	8012310 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	681a      	ldr	r2, [r3, #0]
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	f022 0201 	bic.w	r2, r2, #1
 801228c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	2200      	movs	r2, #0
 8012294:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	2200      	movs	r2, #0
 801229c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	2200      	movs	r2, #0
 80122a4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	2200      	movs	r2, #0
 80122ac:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	2200      	movs	r2, #0
 80122b4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	2221      	movs	r2, #33	; 0x21
 80122bc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f000 fa76 	bl	80127b0 <DMA_CalcBaseAndBitshift>
 80122c4:	4603      	mov	r3, r0
 80122c6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	2200      	movs	r2, #0
 80122cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	2200      	movs	r2, #0
 80122d2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	2200      	movs	r2, #0
 80122d8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	2200      	movs	r2, #0
 80122de:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	2200      	movs	r2, #0
 80122e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	2200      	movs	r2, #0
 80122ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80122f0:	223f      	movs	r2, #63	; 0x3f
 80122f2:	409a      	lsls	r2, r3
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	2200      	movs	r2, #0
 80122fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	2200      	movs	r2, #0
 8012302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	2200      	movs	r2, #0
 801230a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 801230e:	2300      	movs	r3, #0
}
 8012310:	4618      	mov	r0, r3
 8012312:	3710      	adds	r7, #16
 8012314:	46bd      	mov	sp, r7
 8012316:	bd80      	pop	{r7, pc}

08012318 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b086      	sub	sp, #24
 801231c:	af00      	add	r7, sp, #0
 801231e:	60f8      	str	r0, [r7, #12]
 8012320:	60b9      	str	r1, [r7, #8]
 8012322:	607a      	str	r2, [r7, #4]
 8012324:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012326:	2300      	movs	r3, #0
 8012328:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801232e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012336:	2b01      	cmp	r3, #1
 8012338:	d101      	bne.n	801233e <HAL_DMA_Start_IT+0x26>
 801233a:	2302      	movs	r3, #2
 801233c:	e040      	b.n	80123c0 <HAL_DMA_Start_IT+0xa8>
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	2201      	movs	r2, #1
 8012342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  

  if(HAL_DMA_STATE_READY == hdma->State)
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801234c:	b2db      	uxtb	r3, r3
 801234e:	2b01      	cmp	r3, #1
 8012350:	d12f      	bne.n	80123b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	2202      	movs	r2, #2
 8012356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	2200      	movs	r2, #0
 801235e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	687a      	ldr	r2, [r7, #4]
 8012364:	68b9      	ldr	r1, [r7, #8]
 8012366:	68f8      	ldr	r0, [r7, #12]
 8012368:	f000 f9f4 	bl	8012754 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012370:	223f      	movs	r2, #63	; 0x3f
 8012372:	409a      	lsls	r2, r3
 8012374:	693b      	ldr	r3, [r7, #16]
 8012376:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	681a      	ldr	r2, [r3, #0]
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	f042 0216 	orr.w	r2, r2, #22
 8012386:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801238c:	2b00      	cmp	r3, #0
 801238e:	d007      	beq.n	80123a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	681a      	ldr	r2, [r3, #0]
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	f042 0208 	orr.w	r2, r2, #8
 801239e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	681a      	ldr	r2, [r3, #0]
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	f042 0201 	orr.w	r2, r2, #1
 80123ae:	601a      	str	r2, [r3, #0]
 80123b0:	e005      	b.n	80123be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	2200      	movs	r2, #0
 80123b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 80123ba:	2302      	movs	r3, #2
 80123bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80123be:	7dfb      	ldrb	r3, [r7, #23]
}
 80123c0:	4618      	mov	r0, r3
 80123c2:	3718      	adds	r7, #24
 80123c4:	46bd      	mov	sp, r7
 80123c6:	bd80      	pop	{r7, pc}

080123c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80123c8:	b480      	push	{r7}
 80123ca:	b083      	sub	sp, #12
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80123d6:	b2db      	uxtb	r3, r3
 80123d8:	2b02      	cmp	r3, #2
 80123da:	d004      	beq.n	80123e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	2280      	movs	r2, #128	; 0x80
 80123e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80123e2:	2301      	movs	r3, #1
 80123e4:	e00c      	b.n	8012400 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	2205      	movs	r2, #5
 80123ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	681a      	ldr	r2, [r3, #0]
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	f022 0201 	bic.w	r2, r2, #1
 80123fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80123fe:	2300      	movs	r3, #0
}
 8012400:	4618      	mov	r0, r3
 8012402:	370c      	adds	r7, #12
 8012404:	46bd      	mov	sp, r7
 8012406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240a:	4770      	bx	lr

0801240c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b086      	sub	sp, #24
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8012414:	2300      	movs	r3, #0
 8012416:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8012418:	4b92      	ldr	r3, [pc, #584]	; (8012664 <HAL_DMA_IRQHandler+0x258>)
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	4a92      	ldr	r2, [pc, #584]	; (8012668 <HAL_DMA_IRQHandler+0x25c>)
 801241e:	fba2 2303 	umull	r2, r3, r2, r3
 8012422:	0a9b      	lsrs	r3, r3, #10
 8012424:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801242a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801242c:	693b      	ldr	r3, [r7, #16]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012436:	2208      	movs	r2, #8
 8012438:	409a      	lsls	r2, r3
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	4013      	ands	r3, r2
 801243e:	2b00      	cmp	r3, #0
 8012440:	d01a      	beq.n	8012478 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	f003 0304 	and.w	r3, r3, #4
 801244c:	2b00      	cmp	r3, #0
 801244e:	d013      	beq.n	8012478 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	681a      	ldr	r2, [r3, #0]
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	f022 0204 	bic.w	r2, r2, #4
 801245e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012464:	2208      	movs	r2, #8
 8012466:	409a      	lsls	r2, r3
 8012468:	693b      	ldr	r3, [r7, #16]
 801246a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012470:	f043 0201 	orr.w	r2, r3, #1
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801247c:	2201      	movs	r2, #1
 801247e:	409a      	lsls	r2, r3
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	4013      	ands	r3, r2
 8012484:	2b00      	cmp	r3, #0
 8012486:	d012      	beq.n	80124ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	695b      	ldr	r3, [r3, #20]
 801248e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012492:	2b00      	cmp	r3, #0
 8012494:	d00b      	beq.n	80124ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801249a:	2201      	movs	r2, #1
 801249c:	409a      	lsls	r2, r3
 801249e:	693b      	ldr	r3, [r7, #16]
 80124a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80124a6:	f043 0202 	orr.w	r2, r3, #2
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80124b2:	2204      	movs	r2, #4
 80124b4:	409a      	lsls	r2, r3
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	4013      	ands	r3, r2
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d012      	beq.n	80124e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	f003 0302 	and.w	r3, r3, #2
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d00b      	beq.n	80124e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80124d0:	2204      	movs	r2, #4
 80124d2:	409a      	lsls	r2, r3
 80124d4:	693b      	ldr	r3, [r7, #16]
 80124d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80124dc:	f043 0204 	orr.w	r2, r3, #4
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80124e8:	2210      	movs	r2, #16
 80124ea:	409a      	lsls	r2, r3
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	4013      	ands	r3, r2
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d043      	beq.n	801257c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	f003 0308 	and.w	r3, r3, #8
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d03c      	beq.n	801257c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012506:	2210      	movs	r2, #16
 8012508:	409a      	lsls	r2, r3
 801250a:	693b      	ldr	r3, [r7, #16]
 801250c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012518:	2b00      	cmp	r3, #0
 801251a:	d018      	beq.n	801254e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012526:	2b00      	cmp	r3, #0
 8012528:	d108      	bne.n	801253c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801252e:	2b00      	cmp	r3, #0
 8012530:	d024      	beq.n	801257c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012536:	6878      	ldr	r0, [r7, #4]
 8012538:	4798      	blx	r3
 801253a:	e01f      	b.n	801257c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012540:	2b00      	cmp	r3, #0
 8012542:	d01b      	beq.n	801257c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012548:	6878      	ldr	r0, [r7, #4]
 801254a:	4798      	blx	r3
 801254c:	e016      	b.n	801257c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012558:	2b00      	cmp	r3, #0
 801255a:	d107      	bne.n	801256c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	681a      	ldr	r2, [r3, #0]
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	f022 0208 	bic.w	r2, r2, #8
 801256a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012570:	2b00      	cmp	r3, #0
 8012572:	d003      	beq.n	801257c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012578:	6878      	ldr	r0, [r7, #4]
 801257a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012580:	2220      	movs	r2, #32
 8012582:	409a      	lsls	r2, r3
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	4013      	ands	r3, r2
 8012588:	2b00      	cmp	r3, #0
 801258a:	f000 808e 	beq.w	80126aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	f003 0310 	and.w	r3, r3, #16
 8012598:	2b00      	cmp	r3, #0
 801259a:	f000 8086 	beq.w	80126aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80125a2:	2220      	movs	r2, #32
 80125a4:	409a      	lsls	r2, r3
 80125a6:	693b      	ldr	r3, [r7, #16]
 80125a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80125b0:	b2db      	uxtb	r3, r3
 80125b2:	2b05      	cmp	r3, #5
 80125b4:	d136      	bne.n	8012624 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	681a      	ldr	r2, [r3, #0]
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	f022 0216 	bic.w	r2, r2, #22
 80125c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	695a      	ldr	r2, [r3, #20]
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80125d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d103      	bne.n	80125e6 <HAL_DMA_IRQHandler+0x1da>
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d007      	beq.n	80125f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	681a      	ldr	r2, [r3, #0]
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	f022 0208 	bic.w	r2, r2, #8
 80125f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80125fa:	223f      	movs	r2, #63	; 0x3f
 80125fc:	409a      	lsls	r2, r3
 80125fe:	693b      	ldr	r3, [r7, #16]
 8012600:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	2200      	movs	r2, #0
 8012606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	2201      	movs	r2, #1
 801260e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012616:	2b00      	cmp	r3, #0
 8012618:	d07d      	beq.n	8012716 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801261e:	6878      	ldr	r0, [r7, #4]
 8012620:	4798      	blx	r3
        }
        return;
 8012622:	e078      	b.n	8012716 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801262e:	2b00      	cmp	r3, #0
 8012630:	d01c      	beq.n	801266c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801263c:	2b00      	cmp	r3, #0
 801263e:	d108      	bne.n	8012652 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012644:	2b00      	cmp	r3, #0
 8012646:	d030      	beq.n	80126aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801264c:	6878      	ldr	r0, [r7, #4]
 801264e:	4798      	blx	r3
 8012650:	e02b      	b.n	80126aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012656:	2b00      	cmp	r3, #0
 8012658:	d027      	beq.n	80126aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801265e:	6878      	ldr	r0, [r7, #4]
 8012660:	4798      	blx	r3
 8012662:	e022      	b.n	80126aa <HAL_DMA_IRQHandler+0x29e>
 8012664:	2000001c 	.word	0x2000001c
 8012668:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012676:	2b00      	cmp	r3, #0
 8012678:	d10f      	bne.n	801269a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	681a      	ldr	r2, [r3, #0]
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	f022 0210 	bic.w	r2, r2, #16
 8012688:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	2200      	movs	r2, #0
 801268e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	2201      	movs	r2, #1
 8012696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d003      	beq.n	80126aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d032      	beq.n	8012718 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80126b6:	f003 0301 	and.w	r3, r3, #1
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d022      	beq.n	8012704 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	2205      	movs	r2, #5
 80126c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	681a      	ldr	r2, [r3, #0]
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	f022 0201 	bic.w	r2, r2, #1
 80126d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80126d6:	68bb      	ldr	r3, [r7, #8]
 80126d8:	3301      	adds	r3, #1
 80126da:	60bb      	str	r3, [r7, #8]
 80126dc:	697a      	ldr	r2, [r7, #20]
 80126de:	429a      	cmp	r2, r3
 80126e0:	d307      	bcc.n	80126f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	f003 0301 	and.w	r3, r3, #1
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d1f2      	bne.n	80126d6 <HAL_DMA_IRQHandler+0x2ca>
 80126f0:	e000      	b.n	80126f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80126f2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	2200      	movs	r2, #0
 80126f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	2201      	movs	r2, #1
 8012700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012708:	2b00      	cmp	r3, #0
 801270a:	d005      	beq.n	8012718 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	4798      	blx	r3
 8012714:	e000      	b.n	8012718 <HAL_DMA_IRQHandler+0x30c>
        return;
 8012716:	bf00      	nop
    }
  }
}
 8012718:	3718      	adds	r7, #24
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}
 801271e:	bf00      	nop

08012720 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8012720:	b480      	push	{r7}
 8012722:	b083      	sub	sp, #12
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801272e:	b2db      	uxtb	r3, r3
}
 8012730:	4618      	mov	r0, r3
 8012732:	370c      	adds	r7, #12
 8012734:	46bd      	mov	sp, r7
 8012736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273a:	4770      	bx	lr

0801273c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 801273c:	b480      	push	{r7}
 801273e:	b083      	sub	sp, #12
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8012748:	4618      	mov	r0, r3
 801274a:	370c      	adds	r7, #12
 801274c:	46bd      	mov	sp, r7
 801274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012752:	4770      	bx	lr

08012754 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012754:	b480      	push	{r7}
 8012756:	b085      	sub	sp, #20
 8012758:	af00      	add	r7, sp, #0
 801275a:	60f8      	str	r0, [r7, #12]
 801275c:	60b9      	str	r1, [r7, #8]
 801275e:	607a      	str	r2, [r7, #4]
 8012760:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	681a      	ldr	r2, [r3, #0]
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012770:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	683a      	ldr	r2, [r7, #0]
 8012778:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	689b      	ldr	r3, [r3, #8]
 801277e:	2b40      	cmp	r3, #64	; 0x40
 8012780:	d108      	bne.n	8012794 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	687a      	ldr	r2, [r7, #4]
 8012788:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	68ba      	ldr	r2, [r7, #8]
 8012790:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8012792:	e007      	b.n	80127a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	68ba      	ldr	r2, [r7, #8]
 801279a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	687a      	ldr	r2, [r7, #4]
 80127a2:	60da      	str	r2, [r3, #12]
}
 80127a4:	bf00      	nop
 80127a6:	3714      	adds	r7, #20
 80127a8:	46bd      	mov	sp, r7
 80127aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ae:	4770      	bx	lr

080127b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80127b0:	b480      	push	{r7}
 80127b2:	b085      	sub	sp, #20
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	b2db      	uxtb	r3, r3
 80127be:	3b10      	subs	r3, #16
 80127c0:	4a14      	ldr	r2, [pc, #80]	; (8012814 <DMA_CalcBaseAndBitshift+0x64>)
 80127c2:	fba2 2303 	umull	r2, r3, r2, r3
 80127c6:	091b      	lsrs	r3, r3, #4
 80127c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80127ca:	4a13      	ldr	r2, [pc, #76]	; (8012818 <DMA_CalcBaseAndBitshift+0x68>)
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	4413      	add	r3, r2
 80127d0:	781b      	ldrb	r3, [r3, #0]
 80127d2:	461a      	mov	r2, r3
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	2b03      	cmp	r3, #3
 80127dc:	d909      	bls.n	80127f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80127e6:	f023 0303 	bic.w	r3, r3, #3
 80127ea:	1d1a      	adds	r2, r3, #4
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	659a      	str	r2, [r3, #88]	; 0x58
 80127f0:	e007      	b.n	8012802 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80127fa:	f023 0303 	bic.w	r3, r3, #3
 80127fe:	687a      	ldr	r2, [r7, #4]
 8012800:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8012806:	4618      	mov	r0, r3
 8012808:	3714      	adds	r7, #20
 801280a:	46bd      	mov	sp, r7
 801280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012810:	4770      	bx	lr
 8012812:	bf00      	nop
 8012814:	aaaaaaab 	.word	0xaaaaaaab
 8012818:	08020c04 	.word	0x08020c04

0801281c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801281c:	b480      	push	{r7}
 801281e:	b085      	sub	sp, #20
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012824:	2300      	movs	r3, #0
 8012826:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801282c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	699b      	ldr	r3, [r3, #24]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d11f      	bne.n	8012876 <DMA_CheckFifoParam+0x5a>
 8012836:	68bb      	ldr	r3, [r7, #8]
 8012838:	2b03      	cmp	r3, #3
 801283a:	d856      	bhi.n	80128ea <DMA_CheckFifoParam+0xce>
 801283c:	a201      	add	r2, pc, #4	; (adr r2, 8012844 <DMA_CheckFifoParam+0x28>)
 801283e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012842:	bf00      	nop
 8012844:	08012855 	.word	0x08012855
 8012848:	08012867 	.word	0x08012867
 801284c:	08012855 	.word	0x08012855
 8012850:	080128eb 	.word	0x080128eb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801285c:	2b00      	cmp	r3, #0
 801285e:	d046      	beq.n	80128ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8012860:	2301      	movs	r3, #1
 8012862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012864:	e043      	b.n	80128ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801286a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801286e:	d140      	bne.n	80128f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8012870:	2301      	movs	r3, #1
 8012872:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012874:	e03d      	b.n	80128f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	699b      	ldr	r3, [r3, #24]
 801287a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801287e:	d121      	bne.n	80128c4 <DMA_CheckFifoParam+0xa8>
 8012880:	68bb      	ldr	r3, [r7, #8]
 8012882:	2b03      	cmp	r3, #3
 8012884:	d837      	bhi.n	80128f6 <DMA_CheckFifoParam+0xda>
 8012886:	a201      	add	r2, pc, #4	; (adr r2, 801288c <DMA_CheckFifoParam+0x70>)
 8012888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801288c:	0801289d 	.word	0x0801289d
 8012890:	080128a3 	.word	0x080128a3
 8012894:	0801289d 	.word	0x0801289d
 8012898:	080128b5 	.word	0x080128b5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801289c:	2301      	movs	r3, #1
 801289e:	73fb      	strb	r3, [r7, #15]
      break;
 80128a0:	e030      	b.n	8012904 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d025      	beq.n	80128fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80128ae:	2301      	movs	r3, #1
 80128b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80128b2:	e022      	b.n	80128fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80128bc:	d11f      	bne.n	80128fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80128be:	2301      	movs	r3, #1
 80128c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80128c2:	e01c      	b.n	80128fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80128c4:	68bb      	ldr	r3, [r7, #8]
 80128c6:	2b02      	cmp	r3, #2
 80128c8:	d903      	bls.n	80128d2 <DMA_CheckFifoParam+0xb6>
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	2b03      	cmp	r3, #3
 80128ce:	d003      	beq.n	80128d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80128d0:	e018      	b.n	8012904 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80128d2:	2301      	movs	r3, #1
 80128d4:	73fb      	strb	r3, [r7, #15]
      break;
 80128d6:	e015      	b.n	8012904 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d00e      	beq.n	8012902 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80128e4:	2301      	movs	r3, #1
 80128e6:	73fb      	strb	r3, [r7, #15]
      break;
 80128e8:	e00b      	b.n	8012902 <DMA_CheckFifoParam+0xe6>
      break;
 80128ea:	bf00      	nop
 80128ec:	e00a      	b.n	8012904 <DMA_CheckFifoParam+0xe8>
      break;
 80128ee:	bf00      	nop
 80128f0:	e008      	b.n	8012904 <DMA_CheckFifoParam+0xe8>
      break;
 80128f2:	bf00      	nop
 80128f4:	e006      	b.n	8012904 <DMA_CheckFifoParam+0xe8>
      break;
 80128f6:	bf00      	nop
 80128f8:	e004      	b.n	8012904 <DMA_CheckFifoParam+0xe8>
      break;
 80128fa:	bf00      	nop
 80128fc:	e002      	b.n	8012904 <DMA_CheckFifoParam+0xe8>
      break;   
 80128fe:	bf00      	nop
 8012900:	e000      	b.n	8012904 <DMA_CheckFifoParam+0xe8>
      break;
 8012902:	bf00      	nop
    }
  } 
  
  return status; 
 8012904:	7bfb      	ldrb	r3, [r7, #15]
}
 8012906:	4618      	mov	r0, r3
 8012908:	3714      	adds	r7, #20
 801290a:	46bd      	mov	sp, r7
 801290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012910:	4770      	bx	lr
 8012912:	bf00      	nop

08012914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012914:	b480      	push	{r7}
 8012916:	b089      	sub	sp, #36	; 0x24
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
 801291c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801291e:	2300      	movs	r3, #0
 8012920:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8012922:	2300      	movs	r3, #0
 8012924:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8012926:	2300      	movs	r3, #0
 8012928:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801292a:	2300      	movs	r3, #0
 801292c:	61fb      	str	r3, [r7, #28]
 801292e:	e16b      	b.n	8012c08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012930:	2201      	movs	r2, #1
 8012932:	69fb      	ldr	r3, [r7, #28]
 8012934:	fa02 f303 	lsl.w	r3, r2, r3
 8012938:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801293a:	683b      	ldr	r3, [r7, #0]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	697a      	ldr	r2, [r7, #20]
 8012940:	4013      	ands	r3, r2
 8012942:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8012944:	693a      	ldr	r2, [r7, #16]
 8012946:	697b      	ldr	r3, [r7, #20]
 8012948:	429a      	cmp	r2, r3
 801294a:	f040 815a 	bne.w	8012c02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801294e:	683b      	ldr	r3, [r7, #0]
 8012950:	685b      	ldr	r3, [r3, #4]
 8012952:	2b01      	cmp	r3, #1
 8012954:	d00b      	beq.n	801296e <HAL_GPIO_Init+0x5a>
 8012956:	683b      	ldr	r3, [r7, #0]
 8012958:	685b      	ldr	r3, [r3, #4]
 801295a:	2b02      	cmp	r3, #2
 801295c:	d007      	beq.n	801296e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801295e:	683b      	ldr	r3, [r7, #0]
 8012960:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012962:	2b11      	cmp	r3, #17
 8012964:	d003      	beq.n	801296e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012966:	683b      	ldr	r3, [r7, #0]
 8012968:	685b      	ldr	r3, [r3, #4]
 801296a:	2b12      	cmp	r3, #18
 801296c:	d130      	bne.n	80129d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	689b      	ldr	r3, [r3, #8]
 8012972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8012974:	69fb      	ldr	r3, [r7, #28]
 8012976:	005b      	lsls	r3, r3, #1
 8012978:	2203      	movs	r2, #3
 801297a:	fa02 f303 	lsl.w	r3, r2, r3
 801297e:	43db      	mvns	r3, r3
 8012980:	69ba      	ldr	r2, [r7, #24]
 8012982:	4013      	ands	r3, r2
 8012984:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	68da      	ldr	r2, [r3, #12]
 801298a:	69fb      	ldr	r3, [r7, #28]
 801298c:	005b      	lsls	r3, r3, #1
 801298e:	fa02 f303 	lsl.w	r3, r2, r3
 8012992:	69ba      	ldr	r2, [r7, #24]
 8012994:	4313      	orrs	r3, r2
 8012996:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	69ba      	ldr	r2, [r7, #24]
 801299c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	685b      	ldr	r3, [r3, #4]
 80129a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80129a4:	2201      	movs	r2, #1
 80129a6:	69fb      	ldr	r3, [r7, #28]
 80129a8:	fa02 f303 	lsl.w	r3, r2, r3
 80129ac:	43db      	mvns	r3, r3
 80129ae:	69ba      	ldr	r2, [r7, #24]
 80129b0:	4013      	ands	r3, r2
 80129b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80129b4:	683b      	ldr	r3, [r7, #0]
 80129b6:	685b      	ldr	r3, [r3, #4]
 80129b8:	091b      	lsrs	r3, r3, #4
 80129ba:	f003 0201 	and.w	r2, r3, #1
 80129be:	69fb      	ldr	r3, [r7, #28]
 80129c0:	fa02 f303 	lsl.w	r3, r2, r3
 80129c4:	69ba      	ldr	r2, [r7, #24]
 80129c6:	4313      	orrs	r3, r2
 80129c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	69ba      	ldr	r2, [r7, #24]
 80129ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	68db      	ldr	r3, [r3, #12]
 80129d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80129d6:	69fb      	ldr	r3, [r7, #28]
 80129d8:	005b      	lsls	r3, r3, #1
 80129da:	2203      	movs	r2, #3
 80129dc:	fa02 f303 	lsl.w	r3, r2, r3
 80129e0:	43db      	mvns	r3, r3
 80129e2:	69ba      	ldr	r2, [r7, #24]
 80129e4:	4013      	ands	r3, r2
 80129e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80129e8:	683b      	ldr	r3, [r7, #0]
 80129ea:	689a      	ldr	r2, [r3, #8]
 80129ec:	69fb      	ldr	r3, [r7, #28]
 80129ee:	005b      	lsls	r3, r3, #1
 80129f0:	fa02 f303 	lsl.w	r3, r2, r3
 80129f4:	69ba      	ldr	r2, [r7, #24]
 80129f6:	4313      	orrs	r3, r2
 80129f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	69ba      	ldr	r2, [r7, #24]
 80129fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	685b      	ldr	r3, [r3, #4]
 8012a04:	2b02      	cmp	r3, #2
 8012a06:	d003      	beq.n	8012a10 <HAL_GPIO_Init+0xfc>
 8012a08:	683b      	ldr	r3, [r7, #0]
 8012a0a:	685b      	ldr	r3, [r3, #4]
 8012a0c:	2b12      	cmp	r3, #18
 8012a0e:	d123      	bne.n	8012a58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8012a10:	69fb      	ldr	r3, [r7, #28]
 8012a12:	08da      	lsrs	r2, r3, #3
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	3208      	adds	r2, #8
 8012a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012a1e:	69fb      	ldr	r3, [r7, #28]
 8012a20:	f003 0307 	and.w	r3, r3, #7
 8012a24:	009b      	lsls	r3, r3, #2
 8012a26:	220f      	movs	r2, #15
 8012a28:	fa02 f303 	lsl.w	r3, r2, r3
 8012a2c:	43db      	mvns	r3, r3
 8012a2e:	69ba      	ldr	r2, [r7, #24]
 8012a30:	4013      	ands	r3, r2
 8012a32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8012a34:	683b      	ldr	r3, [r7, #0]
 8012a36:	691a      	ldr	r2, [r3, #16]
 8012a38:	69fb      	ldr	r3, [r7, #28]
 8012a3a:	f003 0307 	and.w	r3, r3, #7
 8012a3e:	009b      	lsls	r3, r3, #2
 8012a40:	fa02 f303 	lsl.w	r3, r2, r3
 8012a44:	69ba      	ldr	r2, [r7, #24]
 8012a46:	4313      	orrs	r3, r2
 8012a48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8012a4a:	69fb      	ldr	r3, [r7, #28]
 8012a4c:	08da      	lsrs	r2, r3, #3
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	3208      	adds	r2, #8
 8012a52:	69b9      	ldr	r1, [r7, #24]
 8012a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8012a5e:	69fb      	ldr	r3, [r7, #28]
 8012a60:	005b      	lsls	r3, r3, #1
 8012a62:	2203      	movs	r2, #3
 8012a64:	fa02 f303 	lsl.w	r3, r2, r3
 8012a68:	43db      	mvns	r3, r3
 8012a6a:	69ba      	ldr	r2, [r7, #24]
 8012a6c:	4013      	ands	r3, r2
 8012a6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8012a70:	683b      	ldr	r3, [r7, #0]
 8012a72:	685b      	ldr	r3, [r3, #4]
 8012a74:	f003 0203 	and.w	r2, r3, #3
 8012a78:	69fb      	ldr	r3, [r7, #28]
 8012a7a:	005b      	lsls	r3, r3, #1
 8012a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8012a80:	69ba      	ldr	r2, [r7, #24]
 8012a82:	4313      	orrs	r3, r2
 8012a84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	69ba      	ldr	r2, [r7, #24]
 8012a8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8012a8c:	683b      	ldr	r3, [r7, #0]
 8012a8e:	685b      	ldr	r3, [r3, #4]
 8012a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	f000 80b4 	beq.w	8012c02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	60fb      	str	r3, [r7, #12]
 8012a9e:	4b60      	ldr	r3, [pc, #384]	; (8012c20 <HAL_GPIO_Init+0x30c>)
 8012aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012aa2:	4a5f      	ldr	r2, [pc, #380]	; (8012c20 <HAL_GPIO_Init+0x30c>)
 8012aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8012aaa:	4b5d      	ldr	r3, [pc, #372]	; (8012c20 <HAL_GPIO_Init+0x30c>)
 8012aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012ab2:	60fb      	str	r3, [r7, #12]
 8012ab4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8012ab6:	4a5b      	ldr	r2, [pc, #364]	; (8012c24 <HAL_GPIO_Init+0x310>)
 8012ab8:	69fb      	ldr	r3, [r7, #28]
 8012aba:	089b      	lsrs	r3, r3, #2
 8012abc:	3302      	adds	r3, #2
 8012abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8012ac4:	69fb      	ldr	r3, [r7, #28]
 8012ac6:	f003 0303 	and.w	r3, r3, #3
 8012aca:	009b      	lsls	r3, r3, #2
 8012acc:	220f      	movs	r2, #15
 8012ace:	fa02 f303 	lsl.w	r3, r2, r3
 8012ad2:	43db      	mvns	r3, r3
 8012ad4:	69ba      	ldr	r2, [r7, #24]
 8012ad6:	4013      	ands	r3, r2
 8012ad8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	4a52      	ldr	r2, [pc, #328]	; (8012c28 <HAL_GPIO_Init+0x314>)
 8012ade:	4293      	cmp	r3, r2
 8012ae0:	d02b      	beq.n	8012b3a <HAL_GPIO_Init+0x226>
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	4a51      	ldr	r2, [pc, #324]	; (8012c2c <HAL_GPIO_Init+0x318>)
 8012ae6:	4293      	cmp	r3, r2
 8012ae8:	d025      	beq.n	8012b36 <HAL_GPIO_Init+0x222>
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	4a50      	ldr	r2, [pc, #320]	; (8012c30 <HAL_GPIO_Init+0x31c>)
 8012aee:	4293      	cmp	r3, r2
 8012af0:	d01f      	beq.n	8012b32 <HAL_GPIO_Init+0x21e>
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	4a4f      	ldr	r2, [pc, #316]	; (8012c34 <HAL_GPIO_Init+0x320>)
 8012af6:	4293      	cmp	r3, r2
 8012af8:	d019      	beq.n	8012b2e <HAL_GPIO_Init+0x21a>
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	4a4e      	ldr	r2, [pc, #312]	; (8012c38 <HAL_GPIO_Init+0x324>)
 8012afe:	4293      	cmp	r3, r2
 8012b00:	d013      	beq.n	8012b2a <HAL_GPIO_Init+0x216>
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	4a4d      	ldr	r2, [pc, #308]	; (8012c3c <HAL_GPIO_Init+0x328>)
 8012b06:	4293      	cmp	r3, r2
 8012b08:	d00d      	beq.n	8012b26 <HAL_GPIO_Init+0x212>
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	4a4c      	ldr	r2, [pc, #304]	; (8012c40 <HAL_GPIO_Init+0x32c>)
 8012b0e:	4293      	cmp	r3, r2
 8012b10:	d007      	beq.n	8012b22 <HAL_GPIO_Init+0x20e>
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	4a4b      	ldr	r2, [pc, #300]	; (8012c44 <HAL_GPIO_Init+0x330>)
 8012b16:	4293      	cmp	r3, r2
 8012b18:	d101      	bne.n	8012b1e <HAL_GPIO_Init+0x20a>
 8012b1a:	2307      	movs	r3, #7
 8012b1c:	e00e      	b.n	8012b3c <HAL_GPIO_Init+0x228>
 8012b1e:	2308      	movs	r3, #8
 8012b20:	e00c      	b.n	8012b3c <HAL_GPIO_Init+0x228>
 8012b22:	2306      	movs	r3, #6
 8012b24:	e00a      	b.n	8012b3c <HAL_GPIO_Init+0x228>
 8012b26:	2305      	movs	r3, #5
 8012b28:	e008      	b.n	8012b3c <HAL_GPIO_Init+0x228>
 8012b2a:	2304      	movs	r3, #4
 8012b2c:	e006      	b.n	8012b3c <HAL_GPIO_Init+0x228>
 8012b2e:	2303      	movs	r3, #3
 8012b30:	e004      	b.n	8012b3c <HAL_GPIO_Init+0x228>
 8012b32:	2302      	movs	r3, #2
 8012b34:	e002      	b.n	8012b3c <HAL_GPIO_Init+0x228>
 8012b36:	2301      	movs	r3, #1
 8012b38:	e000      	b.n	8012b3c <HAL_GPIO_Init+0x228>
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	69fa      	ldr	r2, [r7, #28]
 8012b3e:	f002 0203 	and.w	r2, r2, #3
 8012b42:	0092      	lsls	r2, r2, #2
 8012b44:	4093      	lsls	r3, r2
 8012b46:	69ba      	ldr	r2, [r7, #24]
 8012b48:	4313      	orrs	r3, r2
 8012b4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8012b4c:	4935      	ldr	r1, [pc, #212]	; (8012c24 <HAL_GPIO_Init+0x310>)
 8012b4e:	69fb      	ldr	r3, [r7, #28]
 8012b50:	089b      	lsrs	r3, r3, #2
 8012b52:	3302      	adds	r3, #2
 8012b54:	69ba      	ldr	r2, [r7, #24]
 8012b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8012b5a:	4b3b      	ldr	r3, [pc, #236]	; (8012c48 <HAL_GPIO_Init+0x334>)
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012b60:	693b      	ldr	r3, [r7, #16]
 8012b62:	43db      	mvns	r3, r3
 8012b64:	69ba      	ldr	r2, [r7, #24]
 8012b66:	4013      	ands	r3, r2
 8012b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8012b6a:	683b      	ldr	r3, [r7, #0]
 8012b6c:	685b      	ldr	r3, [r3, #4]
 8012b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d003      	beq.n	8012b7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8012b76:	69ba      	ldr	r2, [r7, #24]
 8012b78:	693b      	ldr	r3, [r7, #16]
 8012b7a:	4313      	orrs	r3, r2
 8012b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8012b7e:	4a32      	ldr	r2, [pc, #200]	; (8012c48 <HAL_GPIO_Init+0x334>)
 8012b80:	69bb      	ldr	r3, [r7, #24]
 8012b82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8012b84:	4b30      	ldr	r3, [pc, #192]	; (8012c48 <HAL_GPIO_Init+0x334>)
 8012b86:	685b      	ldr	r3, [r3, #4]
 8012b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012b8a:	693b      	ldr	r3, [r7, #16]
 8012b8c:	43db      	mvns	r3, r3
 8012b8e:	69ba      	ldr	r2, [r7, #24]
 8012b90:	4013      	ands	r3, r2
 8012b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8012b94:	683b      	ldr	r3, [r7, #0]
 8012b96:	685b      	ldr	r3, [r3, #4]
 8012b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d003      	beq.n	8012ba8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8012ba0:	69ba      	ldr	r2, [r7, #24]
 8012ba2:	693b      	ldr	r3, [r7, #16]
 8012ba4:	4313      	orrs	r3, r2
 8012ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8012ba8:	4a27      	ldr	r2, [pc, #156]	; (8012c48 <HAL_GPIO_Init+0x334>)
 8012baa:	69bb      	ldr	r3, [r7, #24]
 8012bac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8012bae:	4b26      	ldr	r3, [pc, #152]	; (8012c48 <HAL_GPIO_Init+0x334>)
 8012bb0:	689b      	ldr	r3, [r3, #8]
 8012bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012bb4:	693b      	ldr	r3, [r7, #16]
 8012bb6:	43db      	mvns	r3, r3
 8012bb8:	69ba      	ldr	r2, [r7, #24]
 8012bba:	4013      	ands	r3, r2
 8012bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8012bbe:	683b      	ldr	r3, [r7, #0]
 8012bc0:	685b      	ldr	r3, [r3, #4]
 8012bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d003      	beq.n	8012bd2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8012bca:	69ba      	ldr	r2, [r7, #24]
 8012bcc:	693b      	ldr	r3, [r7, #16]
 8012bce:	4313      	orrs	r3, r2
 8012bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8012bd2:	4a1d      	ldr	r2, [pc, #116]	; (8012c48 <HAL_GPIO_Init+0x334>)
 8012bd4:	69bb      	ldr	r3, [r7, #24]
 8012bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8012bd8:	4b1b      	ldr	r3, [pc, #108]	; (8012c48 <HAL_GPIO_Init+0x334>)
 8012bda:	68db      	ldr	r3, [r3, #12]
 8012bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012bde:	693b      	ldr	r3, [r7, #16]
 8012be0:	43db      	mvns	r3, r3
 8012be2:	69ba      	ldr	r2, [r7, #24]
 8012be4:	4013      	ands	r3, r2
 8012be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8012be8:	683b      	ldr	r3, [r7, #0]
 8012bea:	685b      	ldr	r3, [r3, #4]
 8012bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d003      	beq.n	8012bfc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8012bf4:	69ba      	ldr	r2, [r7, #24]
 8012bf6:	693b      	ldr	r3, [r7, #16]
 8012bf8:	4313      	orrs	r3, r2
 8012bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8012bfc:	4a12      	ldr	r2, [pc, #72]	; (8012c48 <HAL_GPIO_Init+0x334>)
 8012bfe:	69bb      	ldr	r3, [r7, #24]
 8012c00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012c02:	69fb      	ldr	r3, [r7, #28]
 8012c04:	3301      	adds	r3, #1
 8012c06:	61fb      	str	r3, [r7, #28]
 8012c08:	69fb      	ldr	r3, [r7, #28]
 8012c0a:	2b0f      	cmp	r3, #15
 8012c0c:	f67f ae90 	bls.w	8012930 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8012c10:	bf00      	nop
 8012c12:	bf00      	nop
 8012c14:	3724      	adds	r7, #36	; 0x24
 8012c16:	46bd      	mov	sp, r7
 8012c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1c:	4770      	bx	lr
 8012c1e:	bf00      	nop
 8012c20:	40023800 	.word	0x40023800
 8012c24:	40013800 	.word	0x40013800
 8012c28:	40020000 	.word	0x40020000
 8012c2c:	40020400 	.word	0x40020400
 8012c30:	40020800 	.word	0x40020800
 8012c34:	40020c00 	.word	0x40020c00
 8012c38:	40021000 	.word	0x40021000
 8012c3c:	40021400 	.word	0x40021400
 8012c40:	40021800 	.word	0x40021800
 8012c44:	40021c00 	.word	0x40021c00
 8012c48:	40013c00 	.word	0x40013c00

08012c4c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8012c4c:	b480      	push	{r7}
 8012c4e:	b087      	sub	sp, #28
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
 8012c54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8012c56:	2300      	movs	r3, #0
 8012c58:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8012c5e:	2300      	movs	r3, #0
 8012c60:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012c62:	2300      	movs	r3, #0
 8012c64:	617b      	str	r3, [r7, #20]
 8012c66:	e0cd      	b.n	8012e04 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012c68:	2201      	movs	r2, #1
 8012c6a:	697b      	ldr	r3, [r7, #20]
 8012c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8012c70:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8012c72:	683a      	ldr	r2, [r7, #0]
 8012c74:	693b      	ldr	r3, [r7, #16]
 8012c76:	4013      	ands	r3, r2
 8012c78:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8012c7a:	68fa      	ldr	r2, [r7, #12]
 8012c7c:	693b      	ldr	r3, [r7, #16]
 8012c7e:	429a      	cmp	r2, r3
 8012c80:	f040 80bd 	bne.w	8012dfe <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8012c84:	4a65      	ldr	r2, [pc, #404]	; (8012e1c <HAL_GPIO_DeInit+0x1d0>)
 8012c86:	697b      	ldr	r3, [r7, #20]
 8012c88:	089b      	lsrs	r3, r3, #2
 8012c8a:	3302      	adds	r3, #2
 8012c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c90:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8012c92:	697b      	ldr	r3, [r7, #20]
 8012c94:	f003 0303 	and.w	r3, r3, #3
 8012c98:	009b      	lsls	r3, r3, #2
 8012c9a:	220f      	movs	r2, #15
 8012c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8012ca0:	68ba      	ldr	r2, [r7, #8]
 8012ca2:	4013      	ands	r3, r2
 8012ca4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	4a5d      	ldr	r2, [pc, #372]	; (8012e20 <HAL_GPIO_DeInit+0x1d4>)
 8012caa:	4293      	cmp	r3, r2
 8012cac:	d02b      	beq.n	8012d06 <HAL_GPIO_DeInit+0xba>
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	4a5c      	ldr	r2, [pc, #368]	; (8012e24 <HAL_GPIO_DeInit+0x1d8>)
 8012cb2:	4293      	cmp	r3, r2
 8012cb4:	d025      	beq.n	8012d02 <HAL_GPIO_DeInit+0xb6>
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	4a5b      	ldr	r2, [pc, #364]	; (8012e28 <HAL_GPIO_DeInit+0x1dc>)
 8012cba:	4293      	cmp	r3, r2
 8012cbc:	d01f      	beq.n	8012cfe <HAL_GPIO_DeInit+0xb2>
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	4a5a      	ldr	r2, [pc, #360]	; (8012e2c <HAL_GPIO_DeInit+0x1e0>)
 8012cc2:	4293      	cmp	r3, r2
 8012cc4:	d019      	beq.n	8012cfa <HAL_GPIO_DeInit+0xae>
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	4a59      	ldr	r2, [pc, #356]	; (8012e30 <HAL_GPIO_DeInit+0x1e4>)
 8012cca:	4293      	cmp	r3, r2
 8012ccc:	d013      	beq.n	8012cf6 <HAL_GPIO_DeInit+0xaa>
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	4a58      	ldr	r2, [pc, #352]	; (8012e34 <HAL_GPIO_DeInit+0x1e8>)
 8012cd2:	4293      	cmp	r3, r2
 8012cd4:	d00d      	beq.n	8012cf2 <HAL_GPIO_DeInit+0xa6>
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	4a57      	ldr	r2, [pc, #348]	; (8012e38 <HAL_GPIO_DeInit+0x1ec>)
 8012cda:	4293      	cmp	r3, r2
 8012cdc:	d007      	beq.n	8012cee <HAL_GPIO_DeInit+0xa2>
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	4a56      	ldr	r2, [pc, #344]	; (8012e3c <HAL_GPIO_DeInit+0x1f0>)
 8012ce2:	4293      	cmp	r3, r2
 8012ce4:	d101      	bne.n	8012cea <HAL_GPIO_DeInit+0x9e>
 8012ce6:	2307      	movs	r3, #7
 8012ce8:	e00e      	b.n	8012d08 <HAL_GPIO_DeInit+0xbc>
 8012cea:	2308      	movs	r3, #8
 8012cec:	e00c      	b.n	8012d08 <HAL_GPIO_DeInit+0xbc>
 8012cee:	2306      	movs	r3, #6
 8012cf0:	e00a      	b.n	8012d08 <HAL_GPIO_DeInit+0xbc>
 8012cf2:	2305      	movs	r3, #5
 8012cf4:	e008      	b.n	8012d08 <HAL_GPIO_DeInit+0xbc>
 8012cf6:	2304      	movs	r3, #4
 8012cf8:	e006      	b.n	8012d08 <HAL_GPIO_DeInit+0xbc>
 8012cfa:	2303      	movs	r3, #3
 8012cfc:	e004      	b.n	8012d08 <HAL_GPIO_DeInit+0xbc>
 8012cfe:	2302      	movs	r3, #2
 8012d00:	e002      	b.n	8012d08 <HAL_GPIO_DeInit+0xbc>
 8012d02:	2301      	movs	r3, #1
 8012d04:	e000      	b.n	8012d08 <HAL_GPIO_DeInit+0xbc>
 8012d06:	2300      	movs	r3, #0
 8012d08:	697a      	ldr	r2, [r7, #20]
 8012d0a:	f002 0203 	and.w	r2, r2, #3
 8012d0e:	0092      	lsls	r2, r2, #2
 8012d10:	4093      	lsls	r3, r2
 8012d12:	68ba      	ldr	r2, [r7, #8]
 8012d14:	429a      	cmp	r2, r3
 8012d16:	d132      	bne.n	8012d7e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8012d18:	4b49      	ldr	r3, [pc, #292]	; (8012e40 <HAL_GPIO_DeInit+0x1f4>)
 8012d1a:	681a      	ldr	r2, [r3, #0]
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	43db      	mvns	r3, r3
 8012d20:	4947      	ldr	r1, [pc, #284]	; (8012e40 <HAL_GPIO_DeInit+0x1f4>)
 8012d22:	4013      	ands	r3, r2
 8012d24:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8012d26:	4b46      	ldr	r3, [pc, #280]	; (8012e40 <HAL_GPIO_DeInit+0x1f4>)
 8012d28:	685a      	ldr	r2, [r3, #4]
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	43db      	mvns	r3, r3
 8012d2e:	4944      	ldr	r1, [pc, #272]	; (8012e40 <HAL_GPIO_DeInit+0x1f4>)
 8012d30:	4013      	ands	r3, r2
 8012d32:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8012d34:	4b42      	ldr	r3, [pc, #264]	; (8012e40 <HAL_GPIO_DeInit+0x1f4>)
 8012d36:	689a      	ldr	r2, [r3, #8]
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	43db      	mvns	r3, r3
 8012d3c:	4940      	ldr	r1, [pc, #256]	; (8012e40 <HAL_GPIO_DeInit+0x1f4>)
 8012d3e:	4013      	ands	r3, r2
 8012d40:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8012d42:	4b3f      	ldr	r3, [pc, #252]	; (8012e40 <HAL_GPIO_DeInit+0x1f4>)
 8012d44:	68da      	ldr	r2, [r3, #12]
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	43db      	mvns	r3, r3
 8012d4a:	493d      	ldr	r1, [pc, #244]	; (8012e40 <HAL_GPIO_DeInit+0x1f4>)
 8012d4c:	4013      	ands	r3, r2
 8012d4e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8012d50:	697b      	ldr	r3, [r7, #20]
 8012d52:	f003 0303 	and.w	r3, r3, #3
 8012d56:	009b      	lsls	r3, r3, #2
 8012d58:	220f      	movs	r2, #15
 8012d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8012d5e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8012d60:	4a2e      	ldr	r2, [pc, #184]	; (8012e1c <HAL_GPIO_DeInit+0x1d0>)
 8012d62:	697b      	ldr	r3, [r7, #20]
 8012d64:	089b      	lsrs	r3, r3, #2
 8012d66:	3302      	adds	r3, #2
 8012d68:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8012d6c:	68bb      	ldr	r3, [r7, #8]
 8012d6e:	43da      	mvns	r2, r3
 8012d70:	482a      	ldr	r0, [pc, #168]	; (8012e1c <HAL_GPIO_DeInit+0x1d0>)
 8012d72:	697b      	ldr	r3, [r7, #20]
 8012d74:	089b      	lsrs	r3, r3, #2
 8012d76:	400a      	ands	r2, r1
 8012d78:	3302      	adds	r3, #2
 8012d7a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	681a      	ldr	r2, [r3, #0]
 8012d82:	697b      	ldr	r3, [r7, #20]
 8012d84:	005b      	lsls	r3, r3, #1
 8012d86:	2103      	movs	r1, #3
 8012d88:	fa01 f303 	lsl.w	r3, r1, r3
 8012d8c:	43db      	mvns	r3, r3
 8012d8e:	401a      	ands	r2, r3
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012d94:	697b      	ldr	r3, [r7, #20]
 8012d96:	08da      	lsrs	r2, r3, #3
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	3208      	adds	r2, #8
 8012d9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012da0:	697b      	ldr	r3, [r7, #20]
 8012da2:	f003 0307 	and.w	r3, r3, #7
 8012da6:	009b      	lsls	r3, r3, #2
 8012da8:	220f      	movs	r2, #15
 8012daa:	fa02 f303 	lsl.w	r3, r2, r3
 8012dae:	43db      	mvns	r3, r3
 8012db0:	697a      	ldr	r2, [r7, #20]
 8012db2:	08d2      	lsrs	r2, r2, #3
 8012db4:	4019      	ands	r1, r3
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	3208      	adds	r2, #8
 8012dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	68da      	ldr	r2, [r3, #12]
 8012dc2:	697b      	ldr	r3, [r7, #20]
 8012dc4:	005b      	lsls	r3, r3, #1
 8012dc6:	2103      	movs	r1, #3
 8012dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8012dcc:	43db      	mvns	r3, r3
 8012dce:	401a      	ands	r2, r3
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	685a      	ldr	r2, [r3, #4]
 8012dd8:	2101      	movs	r1, #1
 8012dda:	697b      	ldr	r3, [r7, #20]
 8012ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8012de0:	43db      	mvns	r3, r3
 8012de2:	401a      	ands	r2, r3
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	689a      	ldr	r2, [r3, #8]
 8012dec:	697b      	ldr	r3, [r7, #20]
 8012dee:	005b      	lsls	r3, r3, #1
 8012df0:	2103      	movs	r1, #3
 8012df2:	fa01 f303 	lsl.w	r3, r1, r3
 8012df6:	43db      	mvns	r3, r3
 8012df8:	401a      	ands	r2, r3
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012dfe:	697b      	ldr	r3, [r7, #20]
 8012e00:	3301      	adds	r3, #1
 8012e02:	617b      	str	r3, [r7, #20]
 8012e04:	697b      	ldr	r3, [r7, #20]
 8012e06:	2b0f      	cmp	r3, #15
 8012e08:	f67f af2e 	bls.w	8012c68 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8012e0c:	bf00      	nop
 8012e0e:	bf00      	nop
 8012e10:	371c      	adds	r7, #28
 8012e12:	46bd      	mov	sp, r7
 8012e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e18:	4770      	bx	lr
 8012e1a:	bf00      	nop
 8012e1c:	40013800 	.word	0x40013800
 8012e20:	40020000 	.word	0x40020000
 8012e24:	40020400 	.word	0x40020400
 8012e28:	40020800 	.word	0x40020800
 8012e2c:	40020c00 	.word	0x40020c00
 8012e30:	40021000 	.word	0x40021000
 8012e34:	40021400 	.word	0x40021400
 8012e38:	40021800 	.word	0x40021800
 8012e3c:	40021c00 	.word	0x40021c00
 8012e40:	40013c00 	.word	0x40013c00

08012e44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8012e44:	b480      	push	{r7}
 8012e46:	b085      	sub	sp, #20
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	6078      	str	r0, [r7, #4]
 8012e4c:	460b      	mov	r3, r1
 8012e4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	691a      	ldr	r2, [r3, #16]
 8012e54:	887b      	ldrh	r3, [r7, #2]
 8012e56:	4013      	ands	r3, r2
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d002      	beq.n	8012e62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8012e5c:	2301      	movs	r3, #1
 8012e5e:	73fb      	strb	r3, [r7, #15]
 8012e60:	e001      	b.n	8012e66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8012e62:	2300      	movs	r3, #0
 8012e64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8012e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e68:	4618      	mov	r0, r3
 8012e6a:	3714      	adds	r7, #20
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e72:	4770      	bx	lr

08012e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012e74:	b480      	push	{r7}
 8012e76:	b083      	sub	sp, #12
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
 8012e7c:	460b      	mov	r3, r1
 8012e7e:	807b      	strh	r3, [r7, #2]
 8012e80:	4613      	mov	r3, r2
 8012e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8012e84:	787b      	ldrb	r3, [r7, #1]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d003      	beq.n	8012e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8012e8a:	887a      	ldrh	r2, [r7, #2]
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8012e90:	e003      	b.n	8012e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8012e92:	887b      	ldrh	r3, [r7, #2]
 8012e94:	041a      	lsls	r2, r3, #16
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	619a      	str	r2, [r3, #24]
}
 8012e9a:	bf00      	nop
 8012e9c:	370c      	adds	r7, #12
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea4:	4770      	bx	lr
	...

08012ea8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b084      	sub	sp, #16
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d101      	bne.n	8012eba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8012eb6:	2301      	movs	r3, #1
 8012eb8:	e12b      	b.n	8013112 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012ec0:	b2db      	uxtb	r3, r3
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d106      	bne.n	8012ed4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	2200      	movs	r2, #0
 8012eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8012ece:	6878      	ldr	r0, [r7, #4]
 8012ed0:	f7ef f8de 	bl	8002090 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	2224      	movs	r2, #36	; 0x24
 8012ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	681a      	ldr	r2, [r3, #0]
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	f022 0201 	bic.w	r2, r2, #1
 8012eea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	681a      	ldr	r2, [r3, #0]
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012efa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	681a      	ldr	r2, [r3, #0]
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012f0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8012f0c:	f002 fc64 	bl	80157d8 <HAL_RCC_GetPCLK1Freq>
 8012f10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	685b      	ldr	r3, [r3, #4]
 8012f16:	4a81      	ldr	r2, [pc, #516]	; (801311c <HAL_I2C_Init+0x274>)
 8012f18:	4293      	cmp	r3, r2
 8012f1a:	d807      	bhi.n	8012f2c <HAL_I2C_Init+0x84>
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	4a80      	ldr	r2, [pc, #512]	; (8013120 <HAL_I2C_Init+0x278>)
 8012f20:	4293      	cmp	r3, r2
 8012f22:	bf94      	ite	ls
 8012f24:	2301      	movls	r3, #1
 8012f26:	2300      	movhi	r3, #0
 8012f28:	b2db      	uxtb	r3, r3
 8012f2a:	e006      	b.n	8012f3a <HAL_I2C_Init+0x92>
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	4a7d      	ldr	r2, [pc, #500]	; (8013124 <HAL_I2C_Init+0x27c>)
 8012f30:	4293      	cmp	r3, r2
 8012f32:	bf94      	ite	ls
 8012f34:	2301      	movls	r3, #1
 8012f36:	2300      	movhi	r3, #0
 8012f38:	b2db      	uxtb	r3, r3
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d001      	beq.n	8012f42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8012f3e:	2301      	movs	r3, #1
 8012f40:	e0e7      	b.n	8013112 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	4a78      	ldr	r2, [pc, #480]	; (8013128 <HAL_I2C_Init+0x280>)
 8012f46:	fba2 2303 	umull	r2, r3, r2, r3
 8012f4a:	0c9b      	lsrs	r3, r3, #18
 8012f4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	685b      	ldr	r3, [r3, #4]
 8012f54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	68ba      	ldr	r2, [r7, #8]
 8012f5e:	430a      	orrs	r2, r1
 8012f60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	6a1b      	ldr	r3, [r3, #32]
 8012f68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	685b      	ldr	r3, [r3, #4]
 8012f70:	4a6a      	ldr	r2, [pc, #424]	; (801311c <HAL_I2C_Init+0x274>)
 8012f72:	4293      	cmp	r3, r2
 8012f74:	d802      	bhi.n	8012f7c <HAL_I2C_Init+0xd4>
 8012f76:	68bb      	ldr	r3, [r7, #8]
 8012f78:	3301      	adds	r3, #1
 8012f7a:	e009      	b.n	8012f90 <HAL_I2C_Init+0xe8>
 8012f7c:	68bb      	ldr	r3, [r7, #8]
 8012f7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8012f82:	fb02 f303 	mul.w	r3, r2, r3
 8012f86:	4a69      	ldr	r2, [pc, #420]	; (801312c <HAL_I2C_Init+0x284>)
 8012f88:	fba2 2303 	umull	r2, r3, r2, r3
 8012f8c:	099b      	lsrs	r3, r3, #6
 8012f8e:	3301      	adds	r3, #1
 8012f90:	687a      	ldr	r2, [r7, #4]
 8012f92:	6812      	ldr	r2, [r2, #0]
 8012f94:	430b      	orrs	r3, r1
 8012f96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	69db      	ldr	r3, [r3, #28]
 8012f9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8012fa2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	685b      	ldr	r3, [r3, #4]
 8012faa:	495c      	ldr	r1, [pc, #368]	; (801311c <HAL_I2C_Init+0x274>)
 8012fac:	428b      	cmp	r3, r1
 8012fae:	d819      	bhi.n	8012fe4 <HAL_I2C_Init+0x13c>
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	1e59      	subs	r1, r3, #1
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	685b      	ldr	r3, [r3, #4]
 8012fb8:	005b      	lsls	r3, r3, #1
 8012fba:	fbb1 f3f3 	udiv	r3, r1, r3
 8012fbe:	1c59      	adds	r1, r3, #1
 8012fc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8012fc4:	400b      	ands	r3, r1
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d00a      	beq.n	8012fe0 <HAL_I2C_Init+0x138>
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	1e59      	subs	r1, r3, #1
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	685b      	ldr	r3, [r3, #4]
 8012fd2:	005b      	lsls	r3, r3, #1
 8012fd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8012fd8:	3301      	adds	r3, #1
 8012fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012fde:	e051      	b.n	8013084 <HAL_I2C_Init+0x1dc>
 8012fe0:	2304      	movs	r3, #4
 8012fe2:	e04f      	b.n	8013084 <HAL_I2C_Init+0x1dc>
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	689b      	ldr	r3, [r3, #8]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d111      	bne.n	8013010 <HAL_I2C_Init+0x168>
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	1e58      	subs	r0, r3, #1
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	6859      	ldr	r1, [r3, #4]
 8012ff4:	460b      	mov	r3, r1
 8012ff6:	005b      	lsls	r3, r3, #1
 8012ff8:	440b      	add	r3, r1
 8012ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8012ffe:	3301      	adds	r3, #1
 8013000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013004:	2b00      	cmp	r3, #0
 8013006:	bf0c      	ite	eq
 8013008:	2301      	moveq	r3, #1
 801300a:	2300      	movne	r3, #0
 801300c:	b2db      	uxtb	r3, r3
 801300e:	e012      	b.n	8013036 <HAL_I2C_Init+0x18e>
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	1e58      	subs	r0, r3, #1
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	6859      	ldr	r1, [r3, #4]
 8013018:	460b      	mov	r3, r1
 801301a:	009b      	lsls	r3, r3, #2
 801301c:	440b      	add	r3, r1
 801301e:	0099      	lsls	r1, r3, #2
 8013020:	440b      	add	r3, r1
 8013022:	fbb0 f3f3 	udiv	r3, r0, r3
 8013026:	3301      	adds	r3, #1
 8013028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801302c:	2b00      	cmp	r3, #0
 801302e:	bf0c      	ite	eq
 8013030:	2301      	moveq	r3, #1
 8013032:	2300      	movne	r3, #0
 8013034:	b2db      	uxtb	r3, r3
 8013036:	2b00      	cmp	r3, #0
 8013038:	d001      	beq.n	801303e <HAL_I2C_Init+0x196>
 801303a:	2301      	movs	r3, #1
 801303c:	e022      	b.n	8013084 <HAL_I2C_Init+0x1dc>
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	689b      	ldr	r3, [r3, #8]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d10e      	bne.n	8013064 <HAL_I2C_Init+0x1bc>
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	1e58      	subs	r0, r3, #1
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	6859      	ldr	r1, [r3, #4]
 801304e:	460b      	mov	r3, r1
 8013050:	005b      	lsls	r3, r3, #1
 8013052:	440b      	add	r3, r1
 8013054:	fbb0 f3f3 	udiv	r3, r0, r3
 8013058:	3301      	adds	r3, #1
 801305a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801305e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013062:	e00f      	b.n	8013084 <HAL_I2C_Init+0x1dc>
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	1e58      	subs	r0, r3, #1
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	6859      	ldr	r1, [r3, #4]
 801306c:	460b      	mov	r3, r1
 801306e:	009b      	lsls	r3, r3, #2
 8013070:	440b      	add	r3, r1
 8013072:	0099      	lsls	r1, r3, #2
 8013074:	440b      	add	r3, r1
 8013076:	fbb0 f3f3 	udiv	r3, r0, r3
 801307a:	3301      	adds	r3, #1
 801307c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013080:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013084:	6879      	ldr	r1, [r7, #4]
 8013086:	6809      	ldr	r1, [r1, #0]
 8013088:	4313      	orrs	r3, r2
 801308a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	69da      	ldr	r2, [r3, #28]
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	6a1b      	ldr	r3, [r3, #32]
 801309e:	431a      	orrs	r2, r3
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	430a      	orrs	r2, r1
 80130a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	689b      	ldr	r3, [r3, #8]
 80130ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80130b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80130b6:	687a      	ldr	r2, [r7, #4]
 80130b8:	6911      	ldr	r1, [r2, #16]
 80130ba:	687a      	ldr	r2, [r7, #4]
 80130bc:	68d2      	ldr	r2, [r2, #12]
 80130be:	4311      	orrs	r1, r2
 80130c0:	687a      	ldr	r2, [r7, #4]
 80130c2:	6812      	ldr	r2, [r2, #0]
 80130c4:	430b      	orrs	r3, r1
 80130c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	68db      	ldr	r3, [r3, #12]
 80130ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	695a      	ldr	r2, [r3, #20]
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	699b      	ldr	r3, [r3, #24]
 80130da:	431a      	orrs	r2, r3
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	430a      	orrs	r2, r1
 80130e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	681a      	ldr	r2, [r3, #0]
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	f042 0201 	orr.w	r2, r2, #1
 80130f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	2200      	movs	r2, #0
 80130f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	2220      	movs	r2, #32
 80130fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	2200      	movs	r2, #0
 8013106:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	2200      	movs	r2, #0
 801310c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8013110:	2300      	movs	r3, #0
}
 8013112:	4618      	mov	r0, r3
 8013114:	3710      	adds	r7, #16
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}
 801311a:	bf00      	nop
 801311c:	000186a0 	.word	0x000186a0
 8013120:	001e847f 	.word	0x001e847f
 8013124:	003d08ff 	.word	0x003d08ff
 8013128:	431bde83 	.word	0x431bde83
 801312c:	10624dd3 	.word	0x10624dd3

08013130 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b082      	sub	sp, #8
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d101      	bne.n	8013142 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 801313e:	2301      	movs	r3, #1
 8013140:	e021      	b.n	8013186 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	2224      	movs	r2, #36	; 0x24
 8013146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	681a      	ldr	r2, [r3, #0]
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	f022 0201 	bic.w	r2, r2, #1
 8013158:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 801315a:	6878      	ldr	r0, [r7, #4]
 801315c:	f7ef f86e 	bl	800223c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	2200      	movs	r2, #0
 8013164:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	2200      	movs	r2, #0
 801316a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	2200      	movs	r2, #0
 8013172:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	2200      	movs	r2, #0
 8013178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	2200      	movs	r2, #0
 8013180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013184:	2300      	movs	r3, #0
}
 8013186:	4618      	mov	r0, r3
 8013188:	3708      	adds	r7, #8
 801318a:	46bd      	mov	sp, r7
 801318c:	bd80      	pop	{r7, pc}
	...

08013190 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b086      	sub	sp, #24
 8013194:	af00      	add	r7, sp, #0
 8013196:	60f8      	str	r0, [r7, #12]
 8013198:	607a      	str	r2, [r7, #4]
 801319a:	461a      	mov	r2, r3
 801319c:	460b      	mov	r3, r1
 801319e:	817b      	strh	r3, [r7, #10]
 80131a0:	4613      	mov	r3, r2
 80131a2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80131a4:	2300      	movs	r3, #0
 80131a6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80131ae:	b2db      	uxtb	r3, r3
 80131b0:	2b20      	cmp	r3, #32
 80131b2:	f040 80f4 	bne.w	801339e <HAL_I2C_Master_Receive_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80131b6:	4b7c      	ldr	r3, [pc, #496]	; (80133a8 <HAL_I2C_Master_Receive_DMA+0x218>)
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	08db      	lsrs	r3, r3, #3
 80131bc:	4a7b      	ldr	r2, [pc, #492]	; (80133ac <HAL_I2C_Master_Receive_DMA+0x21c>)
 80131be:	fba2 2303 	umull	r2, r3, r2, r3
 80131c2:	0a1a      	lsrs	r2, r3, #8
 80131c4:	4613      	mov	r3, r2
 80131c6:	009b      	lsls	r3, r3, #2
 80131c8:	4413      	add	r3, r2
 80131ca:	009a      	lsls	r2, r3, #2
 80131cc:	4413      	add	r3, r2
 80131ce:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 80131d0:	693b      	ldr	r3, [r7, #16]
 80131d2:	3b01      	subs	r3, #1
 80131d4:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 80131d6:	693b      	ldr	r3, [r7, #16]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d116      	bne.n	801320a <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	2200      	movs	r2, #0
 80131e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	2220      	movs	r2, #32
 80131e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	2200      	movs	r2, #0
 80131ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131f6:	f043 0220 	orr.w	r2, r3, #32
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	2200      	movs	r2, #0
 8013202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8013206:	2301      	movs	r3, #1
 8013208:	e0ca      	b.n	80133a0 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	699b      	ldr	r3, [r3, #24]
 8013210:	f003 0302 	and.w	r3, r3, #2
 8013214:	2b02      	cmp	r3, #2
 8013216:	d0db      	beq.n	80131d0 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801321e:	2b01      	cmp	r3, #1
 8013220:	d101      	bne.n	8013226 <HAL_I2C_Master_Receive_DMA+0x96>
 8013222:	2302      	movs	r3, #2
 8013224:	e0bc      	b.n	80133a0 <HAL_I2C_Master_Receive_DMA+0x210>
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	2201      	movs	r2, #1
 801322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	f003 0301 	and.w	r3, r3, #1
 8013238:	2b01      	cmp	r3, #1
 801323a:	d007      	beq.n	801324c <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	681a      	ldr	r2, [r3, #0]
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	f042 0201 	orr.w	r2, r2, #1
 801324a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	681a      	ldr	r2, [r3, #0]
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801325a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	2222      	movs	r2, #34	; 0x22
 8013260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	2210      	movs	r2, #16
 8013268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	2200      	movs	r2, #0
 8013270:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	687a      	ldr	r2, [r7, #4]
 8013276:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	893a      	ldrh	r2, [r7, #8]
 801327c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013282:	b29a      	uxth	r2, r3
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	4a49      	ldr	r2, [pc, #292]	; (80133b0 <HAL_I2C_Master_Receive_DMA+0x220>)
 801328c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801328e:	897a      	ldrh	r2, [r7, #10]
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013298:	2b00      	cmp	r3, #0
 801329a:	d062      	beq.n	8013362 <HAL_I2C_Master_Receive_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132a0:	4a44      	ldr	r2, [pc, #272]	; (80133b4 <HAL_I2C_Master_Receive_DMA+0x224>)
 80132a2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132a8:	4a43      	ldr	r2, [pc, #268]	; (80133b8 <HAL_I2C_Master_Receive_DMA+0x228>)
 80132aa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132b0:	2200      	movs	r2, #0
 80132b2:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132b8:	2200      	movs	r2, #0
 80132ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132c0:	2200      	movs	r2, #0
 80132c2:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132c8:	2200      	movs	r2, #0
 80132ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	3310      	adds	r3, #16
 80132d6:	4619      	mov	r1, r3
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132dc:	461a      	mov	r2, r3
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80132e2:	f7ff f819 	bl	8012318 <HAL_DMA_Start_IT>
 80132e6:	4603      	mov	r3, r0
 80132e8:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 80132ea:	7dfb      	ldrb	r3, [r7, #23]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d124      	bne.n	801333a <HAL_I2C_Master_Receive_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	681a      	ldr	r2, [r3, #0]
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80132fe:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	681a      	ldr	r2, [r3, #0]
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801330e:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	2200      	movs	r2, #0
 8013314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	685a      	ldr	r2, [r3, #4]
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8013326:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	685a      	ldr	r2, [r3, #4]
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013336:	605a      	str	r2, [r3, #4]
 8013338:	e02f      	b.n	801339a <HAL_I2C_Master_Receive_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	2220      	movs	r2, #32
 801333e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	2200      	movs	r2, #0
 8013346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801334e:	f043 0210 	orr.w	r2, r3, #16
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	2200      	movs	r2, #0
 801335a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801335e:	2301      	movs	r3, #1
 8013360:	e01e      	b.n	80133a0 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	681a      	ldr	r2, [r3, #0]
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013370:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	681a      	ldr	r2, [r3, #0]
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013380:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	2200      	movs	r2, #0
 8013386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	685a      	ldr	r2, [r3, #4]
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8013398:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 801339a:	2300      	movs	r3, #0
 801339c:	e000      	b.n	80133a0 <HAL_I2C_Master_Receive_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 801339e:	2302      	movs	r3, #2
  }
}
 80133a0:	4618      	mov	r0, r3
 80133a2:	3718      	adds	r7, #24
 80133a4:	46bd      	mov	sp, r7
 80133a6:	bd80      	pop	{r7, pc}
 80133a8:	2000001c 	.word	0x2000001c
 80133ac:	14f8b589 	.word	0x14f8b589
 80133b0:	ffff0000 	.word	0xffff0000
 80133b4:	08014b29 	.word	0x08014b29
 80133b8:	08014cd3 	.word	0x08014cd3

080133bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80133bc:	b580      	push	{r7, lr}
 80133be:	b088      	sub	sp, #32
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80133c4:	2300      	movs	r3, #0
 80133c6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	685b      	ldr	r3, [r3, #4]
 80133ce:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133d4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80133dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80133e4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80133e6:	7bfb      	ldrb	r3, [r7, #15]
 80133e8:	2b10      	cmp	r3, #16
 80133ea:	d003      	beq.n	80133f4 <HAL_I2C_EV_IRQHandler+0x38>
 80133ec:	7bfb      	ldrb	r3, [r7, #15]
 80133ee:	2b40      	cmp	r3, #64	; 0x40
 80133f0:	f040 80bd 	bne.w	801356e <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	699b      	ldr	r3, [r3, #24]
 80133fa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	695b      	ldr	r3, [r3, #20]
 8013402:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8013404:	69fb      	ldr	r3, [r7, #28]
 8013406:	f003 0301 	and.w	r3, r3, #1
 801340a:	2b00      	cmp	r3, #0
 801340c:	d10d      	bne.n	801342a <HAL_I2C_EV_IRQHandler+0x6e>
 801340e:	693b      	ldr	r3, [r7, #16]
 8013410:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8013414:	d003      	beq.n	801341e <HAL_I2C_EV_IRQHandler+0x62>
 8013416:	693b      	ldr	r3, [r7, #16]
 8013418:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801341c:	d101      	bne.n	8013422 <HAL_I2C_EV_IRQHandler+0x66>
 801341e:	2301      	movs	r3, #1
 8013420:	e000      	b.n	8013424 <HAL_I2C_EV_IRQHandler+0x68>
 8013422:	2300      	movs	r3, #0
 8013424:	2b01      	cmp	r3, #1
 8013426:	f000 812e 	beq.w	8013686 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801342a:	69fb      	ldr	r3, [r7, #28]
 801342c:	f003 0301 	and.w	r3, r3, #1
 8013430:	2b00      	cmp	r3, #0
 8013432:	d00c      	beq.n	801344e <HAL_I2C_EV_IRQHandler+0x92>
 8013434:	697b      	ldr	r3, [r7, #20]
 8013436:	0a5b      	lsrs	r3, r3, #9
 8013438:	f003 0301 	and.w	r3, r3, #1
 801343c:	2b00      	cmp	r3, #0
 801343e:	d006      	beq.n	801344e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8013440:	6878      	ldr	r0, [r7, #4]
 8013442:	f001 fd5d 	bl	8014f00 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8013446:	6878      	ldr	r0, [r7, #4]
 8013448:	f000 fd58 	bl	8013efc <I2C_Master_SB>
 801344c:	e08e      	b.n	801356c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801344e:	69fb      	ldr	r3, [r7, #28]
 8013450:	08db      	lsrs	r3, r3, #3
 8013452:	f003 0301 	and.w	r3, r3, #1
 8013456:	2b00      	cmp	r3, #0
 8013458:	d009      	beq.n	801346e <HAL_I2C_EV_IRQHandler+0xb2>
 801345a:	697b      	ldr	r3, [r7, #20]
 801345c:	0a5b      	lsrs	r3, r3, #9
 801345e:	f003 0301 	and.w	r3, r3, #1
 8013462:	2b00      	cmp	r3, #0
 8013464:	d003      	beq.n	801346e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8013466:	6878      	ldr	r0, [r7, #4]
 8013468:	f000 fdce 	bl	8014008 <I2C_Master_ADD10>
 801346c:	e07e      	b.n	801356c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801346e:	69fb      	ldr	r3, [r7, #28]
 8013470:	085b      	lsrs	r3, r3, #1
 8013472:	f003 0301 	and.w	r3, r3, #1
 8013476:	2b00      	cmp	r3, #0
 8013478:	d009      	beq.n	801348e <HAL_I2C_EV_IRQHandler+0xd2>
 801347a:	697b      	ldr	r3, [r7, #20]
 801347c:	0a5b      	lsrs	r3, r3, #9
 801347e:	f003 0301 	and.w	r3, r3, #1
 8013482:	2b00      	cmp	r3, #0
 8013484:	d003      	beq.n	801348e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8013486:	6878      	ldr	r0, [r7, #4]
 8013488:	f000 fde8 	bl	801405c <I2C_Master_ADDR>
 801348c:	e06e      	b.n	801356c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 801348e:	69bb      	ldr	r3, [r7, #24]
 8013490:	089b      	lsrs	r3, r3, #2
 8013492:	f003 0301 	and.w	r3, r3, #1
 8013496:	2b00      	cmp	r3, #0
 8013498:	d037      	beq.n	801350a <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	685b      	ldr	r3, [r3, #4]
 80134a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80134a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80134a8:	f000 80ef 	beq.w	801368a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80134ac:	69fb      	ldr	r3, [r7, #28]
 80134ae:	09db      	lsrs	r3, r3, #7
 80134b0:	f003 0301 	and.w	r3, r3, #1
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d00f      	beq.n	80134d8 <HAL_I2C_EV_IRQHandler+0x11c>
 80134b8:	697b      	ldr	r3, [r7, #20]
 80134ba:	0a9b      	lsrs	r3, r3, #10
 80134bc:	f003 0301 	and.w	r3, r3, #1
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d009      	beq.n	80134d8 <HAL_I2C_EV_IRQHandler+0x11c>
 80134c4:	69fb      	ldr	r3, [r7, #28]
 80134c6:	089b      	lsrs	r3, r3, #2
 80134c8:	f003 0301 	and.w	r3, r3, #1
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d103      	bne.n	80134d8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80134d0:	6878      	ldr	r0, [r7, #4]
 80134d2:	f000 f9e5 	bl	80138a0 <I2C_MasterTransmit_TXE>
 80134d6:	e049      	b.n	801356c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80134d8:	69fb      	ldr	r3, [r7, #28]
 80134da:	089b      	lsrs	r3, r3, #2
 80134dc:	f003 0301 	and.w	r3, r3, #1
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	f000 80d2 	beq.w	801368a <HAL_I2C_EV_IRQHandler+0x2ce>
 80134e6:	697b      	ldr	r3, [r7, #20]
 80134e8:	0a5b      	lsrs	r3, r3, #9
 80134ea:	f003 0301 	and.w	r3, r3, #1
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	f000 80cb 	beq.w	801368a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80134f4:	7bfb      	ldrb	r3, [r7, #15]
 80134f6:	2b10      	cmp	r3, #16
 80134f8:	d103      	bne.n	8013502 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80134fa:	6878      	ldr	r0, [r7, #4]
 80134fc:	f000 fa6c 	bl	80139d8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8013500:	e0c3      	b.n	801368a <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8013502:	6878      	ldr	r0, [r7, #4]
 8013504:	f000 fad0 	bl	8013aa8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8013508:	e0bf      	b.n	801368a <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	685b      	ldr	r3, [r3, #4]
 8013510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013514:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013518:	f000 80b7 	beq.w	801368a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801351c:	69fb      	ldr	r3, [r7, #28]
 801351e:	099b      	lsrs	r3, r3, #6
 8013520:	f003 0301 	and.w	r3, r3, #1
 8013524:	2b00      	cmp	r3, #0
 8013526:	d00f      	beq.n	8013548 <HAL_I2C_EV_IRQHandler+0x18c>
 8013528:	697b      	ldr	r3, [r7, #20]
 801352a:	0a9b      	lsrs	r3, r3, #10
 801352c:	f003 0301 	and.w	r3, r3, #1
 8013530:	2b00      	cmp	r3, #0
 8013532:	d009      	beq.n	8013548 <HAL_I2C_EV_IRQHandler+0x18c>
 8013534:	69fb      	ldr	r3, [r7, #28]
 8013536:	089b      	lsrs	r3, r3, #2
 8013538:	f003 0301 	and.w	r3, r3, #1
 801353c:	2b00      	cmp	r3, #0
 801353e:	d103      	bne.n	8013548 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8013540:	6878      	ldr	r0, [r7, #4]
 8013542:	f000 fb40 	bl	8013bc6 <I2C_MasterReceive_RXNE>
 8013546:	e011      	b.n	801356c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8013548:	69fb      	ldr	r3, [r7, #28]
 801354a:	089b      	lsrs	r3, r3, #2
 801354c:	f003 0301 	and.w	r3, r3, #1
 8013550:	2b00      	cmp	r3, #0
 8013552:	f000 809a 	beq.w	801368a <HAL_I2C_EV_IRQHandler+0x2ce>
 8013556:	697b      	ldr	r3, [r7, #20]
 8013558:	0a5b      	lsrs	r3, r3, #9
 801355a:	f003 0301 	and.w	r3, r3, #1
 801355e:	2b00      	cmp	r3, #0
 8013560:	f000 8093 	beq.w	801368a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8013564:	6878      	ldr	r0, [r7, #4]
 8013566:	f000 fbdf 	bl	8013d28 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801356a:	e08e      	b.n	801368a <HAL_I2C_EV_IRQHandler+0x2ce>
 801356c:	e08d      	b.n	801368a <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013572:	2b00      	cmp	r3, #0
 8013574:	d004      	beq.n	8013580 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	695b      	ldr	r3, [r3, #20]
 801357c:	61fb      	str	r3, [r7, #28]
 801357e:	e007      	b.n	8013590 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	699b      	ldr	r3, [r3, #24]
 8013586:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	695b      	ldr	r3, [r3, #20]
 801358e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8013590:	69fb      	ldr	r3, [r7, #28]
 8013592:	085b      	lsrs	r3, r3, #1
 8013594:	f003 0301 	and.w	r3, r3, #1
 8013598:	2b00      	cmp	r3, #0
 801359a:	d012      	beq.n	80135c2 <HAL_I2C_EV_IRQHandler+0x206>
 801359c:	697b      	ldr	r3, [r7, #20]
 801359e:	0a5b      	lsrs	r3, r3, #9
 80135a0:	f003 0301 	and.w	r3, r3, #1
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d00c      	beq.n	80135c2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d003      	beq.n	80135b8 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	699b      	ldr	r3, [r3, #24]
 80135b6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80135b8:	69b9      	ldr	r1, [r7, #24]
 80135ba:	6878      	ldr	r0, [r7, #4]
 80135bc:	f000 ff9d 	bl	80144fa <I2C_Slave_ADDR>
 80135c0:	e066      	b.n	8013690 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80135c2:	69fb      	ldr	r3, [r7, #28]
 80135c4:	091b      	lsrs	r3, r3, #4
 80135c6:	f003 0301 	and.w	r3, r3, #1
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d009      	beq.n	80135e2 <HAL_I2C_EV_IRQHandler+0x226>
 80135ce:	697b      	ldr	r3, [r7, #20]
 80135d0:	0a5b      	lsrs	r3, r3, #9
 80135d2:	f003 0301 	and.w	r3, r3, #1
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d003      	beq.n	80135e2 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80135da:	6878      	ldr	r0, [r7, #4]
 80135dc:	f000 ffd2 	bl	8014584 <I2C_Slave_STOPF>
 80135e0:	e056      	b.n	8013690 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80135e2:	7bbb      	ldrb	r3, [r7, #14]
 80135e4:	2b21      	cmp	r3, #33	; 0x21
 80135e6:	d002      	beq.n	80135ee <HAL_I2C_EV_IRQHandler+0x232>
 80135e8:	7bbb      	ldrb	r3, [r7, #14]
 80135ea:	2b29      	cmp	r3, #41	; 0x29
 80135ec:	d125      	bne.n	801363a <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80135ee:	69fb      	ldr	r3, [r7, #28]
 80135f0:	09db      	lsrs	r3, r3, #7
 80135f2:	f003 0301 	and.w	r3, r3, #1
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d00f      	beq.n	801361a <HAL_I2C_EV_IRQHandler+0x25e>
 80135fa:	697b      	ldr	r3, [r7, #20]
 80135fc:	0a9b      	lsrs	r3, r3, #10
 80135fe:	f003 0301 	and.w	r3, r3, #1
 8013602:	2b00      	cmp	r3, #0
 8013604:	d009      	beq.n	801361a <HAL_I2C_EV_IRQHandler+0x25e>
 8013606:	69fb      	ldr	r3, [r7, #28]
 8013608:	089b      	lsrs	r3, r3, #2
 801360a:	f003 0301 	and.w	r3, r3, #1
 801360e:	2b00      	cmp	r3, #0
 8013610:	d103      	bne.n	801361a <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8013612:	6878      	ldr	r0, [r7, #4]
 8013614:	f000 feb3 	bl	801437e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8013618:	e039      	b.n	801368e <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801361a:	69fb      	ldr	r3, [r7, #28]
 801361c:	089b      	lsrs	r3, r3, #2
 801361e:	f003 0301 	and.w	r3, r3, #1
 8013622:	2b00      	cmp	r3, #0
 8013624:	d033      	beq.n	801368e <HAL_I2C_EV_IRQHandler+0x2d2>
 8013626:	697b      	ldr	r3, [r7, #20]
 8013628:	0a5b      	lsrs	r3, r3, #9
 801362a:	f003 0301 	and.w	r3, r3, #1
 801362e:	2b00      	cmp	r3, #0
 8013630:	d02d      	beq.n	801368e <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8013632:	6878      	ldr	r0, [r7, #4]
 8013634:	f000 fee0 	bl	80143f8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8013638:	e029      	b.n	801368e <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801363a:	69fb      	ldr	r3, [r7, #28]
 801363c:	099b      	lsrs	r3, r3, #6
 801363e:	f003 0301 	and.w	r3, r3, #1
 8013642:	2b00      	cmp	r3, #0
 8013644:	d00f      	beq.n	8013666 <HAL_I2C_EV_IRQHandler+0x2aa>
 8013646:	697b      	ldr	r3, [r7, #20]
 8013648:	0a9b      	lsrs	r3, r3, #10
 801364a:	f003 0301 	and.w	r3, r3, #1
 801364e:	2b00      	cmp	r3, #0
 8013650:	d009      	beq.n	8013666 <HAL_I2C_EV_IRQHandler+0x2aa>
 8013652:	69fb      	ldr	r3, [r7, #28]
 8013654:	089b      	lsrs	r3, r3, #2
 8013656:	f003 0301 	and.w	r3, r3, #1
 801365a:	2b00      	cmp	r3, #0
 801365c:	d103      	bne.n	8013666 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 801365e:	6878      	ldr	r0, [r7, #4]
 8013660:	f000 feeb 	bl	801443a <I2C_SlaveReceive_RXNE>
 8013664:	e014      	b.n	8013690 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8013666:	69fb      	ldr	r3, [r7, #28]
 8013668:	089b      	lsrs	r3, r3, #2
 801366a:	f003 0301 	and.w	r3, r3, #1
 801366e:	2b00      	cmp	r3, #0
 8013670:	d00e      	beq.n	8013690 <HAL_I2C_EV_IRQHandler+0x2d4>
 8013672:	697b      	ldr	r3, [r7, #20]
 8013674:	0a5b      	lsrs	r3, r3, #9
 8013676:	f003 0301 	and.w	r3, r3, #1
 801367a:	2b00      	cmp	r3, #0
 801367c:	d008      	beq.n	8013690 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 801367e:	6878      	ldr	r0, [r7, #4]
 8013680:	f000 ff19 	bl	80144b6 <I2C_SlaveReceive_BTF>
 8013684:	e004      	b.n	8013690 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8013686:	bf00      	nop
 8013688:	e002      	b.n	8013690 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801368a:	bf00      	nop
 801368c:	e000      	b.n	8013690 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801368e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8013690:	3720      	adds	r7, #32
 8013692:	46bd      	mov	sp, r7
 8013694:	bd80      	pop	{r7, pc}

08013696 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8013696:	b580      	push	{r7, lr}
 8013698:	b08a      	sub	sp, #40	; 0x28
 801369a:	af00      	add	r7, sp, #0
 801369c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	695b      	ldr	r3, [r3, #20]
 80136a4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	685b      	ldr	r3, [r3, #4]
 80136ac:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80136ae:	2300      	movs	r3, #0
 80136b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80136b8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80136ba:	6a3b      	ldr	r3, [r7, #32]
 80136bc:	0a1b      	lsrs	r3, r3, #8
 80136be:	f003 0301 	and.w	r3, r3, #1
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d00e      	beq.n	80136e4 <HAL_I2C_ER_IRQHandler+0x4e>
 80136c6:	69fb      	ldr	r3, [r7, #28]
 80136c8:	0a1b      	lsrs	r3, r3, #8
 80136ca:	f003 0301 	and.w	r3, r3, #1
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d008      	beq.n	80136e4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80136d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136d4:	f043 0301 	orr.w	r3, r3, #1
 80136d8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80136e2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80136e4:	6a3b      	ldr	r3, [r7, #32]
 80136e6:	0a5b      	lsrs	r3, r3, #9
 80136e8:	f003 0301 	and.w	r3, r3, #1
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d00e      	beq.n	801370e <HAL_I2C_ER_IRQHandler+0x78>
 80136f0:	69fb      	ldr	r3, [r7, #28]
 80136f2:	0a1b      	lsrs	r3, r3, #8
 80136f4:	f003 0301 	and.w	r3, r3, #1
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d008      	beq.n	801370e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80136fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136fe:	f043 0302 	orr.w	r3, r3, #2
 8013702:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	f46f 7200 	mvn.w	r2, #512	; 0x200
 801370c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801370e:	6a3b      	ldr	r3, [r7, #32]
 8013710:	0a9b      	lsrs	r3, r3, #10
 8013712:	f003 0301 	and.w	r3, r3, #1
 8013716:	2b00      	cmp	r3, #0
 8013718:	d03f      	beq.n	801379a <HAL_I2C_ER_IRQHandler+0x104>
 801371a:	69fb      	ldr	r3, [r7, #28]
 801371c:	0a1b      	lsrs	r3, r3, #8
 801371e:	f003 0301 	and.w	r3, r3, #1
 8013722:	2b00      	cmp	r3, #0
 8013724:	d039      	beq.n	801379a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8013726:	7efb      	ldrb	r3, [r7, #27]
 8013728:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801372e:	b29b      	uxth	r3, r3
 8013730:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013738:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801373e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8013740:	7ebb      	ldrb	r3, [r7, #26]
 8013742:	2b20      	cmp	r3, #32
 8013744:	d112      	bne.n	801376c <HAL_I2C_ER_IRQHandler+0xd6>
 8013746:	697b      	ldr	r3, [r7, #20]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d10f      	bne.n	801376c <HAL_I2C_ER_IRQHandler+0xd6>
 801374c:	7cfb      	ldrb	r3, [r7, #19]
 801374e:	2b21      	cmp	r3, #33	; 0x21
 8013750:	d008      	beq.n	8013764 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8013752:	7cfb      	ldrb	r3, [r7, #19]
 8013754:	2b29      	cmp	r3, #41	; 0x29
 8013756:	d005      	beq.n	8013764 <HAL_I2C_ER_IRQHandler+0xce>
 8013758:	7cfb      	ldrb	r3, [r7, #19]
 801375a:	2b28      	cmp	r3, #40	; 0x28
 801375c:	d106      	bne.n	801376c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	2b21      	cmp	r3, #33	; 0x21
 8013762:	d103      	bne.n	801376c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8013764:	6878      	ldr	r0, [r7, #4]
 8013766:	f001 f83d 	bl	80147e4 <I2C_Slave_AF>
 801376a:	e016      	b.n	801379a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8013774:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8013776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013778:	f043 0304 	orr.w	r3, r3, #4
 801377c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801377e:	7efb      	ldrb	r3, [r7, #27]
 8013780:	2b10      	cmp	r3, #16
 8013782:	d002      	beq.n	801378a <HAL_I2C_ER_IRQHandler+0xf4>
 8013784:	7efb      	ldrb	r3, [r7, #27]
 8013786:	2b40      	cmp	r3, #64	; 0x40
 8013788:	d107      	bne.n	801379a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	681a      	ldr	r2, [r3, #0]
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013798:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801379a:	6a3b      	ldr	r3, [r7, #32]
 801379c:	0adb      	lsrs	r3, r3, #11
 801379e:	f003 0301 	and.w	r3, r3, #1
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d00e      	beq.n	80137c4 <HAL_I2C_ER_IRQHandler+0x12e>
 80137a6:	69fb      	ldr	r3, [r7, #28]
 80137a8:	0a1b      	lsrs	r3, r3, #8
 80137aa:	f003 0301 	and.w	r3, r3, #1
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d008      	beq.n	80137c4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80137b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b4:	f043 0308 	orr.w	r3, r3, #8
 80137b8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80137c2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80137c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d008      	beq.n	80137dc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80137ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137d0:	431a      	orrs	r2, r3
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80137d6:	6878      	ldr	r0, [r7, #4]
 80137d8:	f001 f874 	bl	80148c4 <I2C_ITError>
  }
}
 80137dc:	bf00      	nop
 80137de:	3728      	adds	r7, #40	; 0x28
 80137e0:	46bd      	mov	sp, r7
 80137e2:	bd80      	pop	{r7, pc}

080137e4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80137e4:	b480      	push	{r7}
 80137e6:	b083      	sub	sp, #12
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80137ec:	bf00      	nop
 80137ee:	370c      	adds	r7, #12
 80137f0:	46bd      	mov	sp, r7
 80137f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f6:	4770      	bx	lr

080137f8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80137f8:	b480      	push	{r7}
 80137fa:	b083      	sub	sp, #12
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8013800:	bf00      	nop
 8013802:	370c      	adds	r7, #12
 8013804:	46bd      	mov	sp, r7
 8013806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380a:	4770      	bx	lr

0801380c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801380c:	b480      	push	{r7}
 801380e:	b083      	sub	sp, #12
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8013814:	bf00      	nop
 8013816:	370c      	adds	r7, #12
 8013818:	46bd      	mov	sp, r7
 801381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801381e:	4770      	bx	lr

08013820 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8013820:	b480      	push	{r7}
 8013822:	b083      	sub	sp, #12
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
 8013828:	460b      	mov	r3, r1
 801382a:	70fb      	strb	r3, [r7, #3]
 801382c:	4613      	mov	r3, r2
 801382e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8013830:	bf00      	nop
 8013832:	370c      	adds	r7, #12
 8013834:	46bd      	mov	sp, r7
 8013836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383a:	4770      	bx	lr

0801383c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801383c:	b480      	push	{r7}
 801383e:	b083      	sub	sp, #12
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8013844:	bf00      	nop
 8013846:	370c      	adds	r7, #12
 8013848:	46bd      	mov	sp, r7
 801384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384e:	4770      	bx	lr

08013850 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013850:	b480      	push	{r7}
 8013852:	b083      	sub	sp, #12
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8013858:	bf00      	nop
 801385a:	370c      	adds	r7, #12
 801385c:	46bd      	mov	sp, r7
 801385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013862:	4770      	bx	lr

08013864 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013864:	b480      	push	{r7}
 8013866:	b083      	sub	sp, #12
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 801386c:	bf00      	nop
 801386e:	370c      	adds	r7, #12
 8013870:	46bd      	mov	sp, r7
 8013872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013876:	4770      	bx	lr

08013878 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8013878:	b480      	push	{r7}
 801387a:	b083      	sub	sp, #12
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8013880:	bf00      	nop
 8013882:	370c      	adds	r7, #12
 8013884:	46bd      	mov	sp, r7
 8013886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801388a:	4770      	bx	lr

0801388c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801388c:	b480      	push	{r7}
 801388e:	b083      	sub	sp, #12
 8013890:	af00      	add	r7, sp, #0
 8013892:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8013894:	bf00      	nop
 8013896:	370c      	adds	r7, #12
 8013898:	46bd      	mov	sp, r7
 801389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801389e:	4770      	bx	lr

080138a0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b084      	sub	sp, #16
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80138ae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80138b6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138bc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d150      	bne.n	8013968 <I2C_MasterTransmit_TXE+0xc8>
 80138c6:	7bfb      	ldrb	r3, [r7, #15]
 80138c8:	2b21      	cmp	r3, #33	; 0x21
 80138ca:	d14d      	bne.n	8013968 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80138cc:	68bb      	ldr	r3, [r7, #8]
 80138ce:	2b08      	cmp	r3, #8
 80138d0:	d01d      	beq.n	801390e <I2C_MasterTransmit_TXE+0x6e>
 80138d2:	68bb      	ldr	r3, [r7, #8]
 80138d4:	2b20      	cmp	r3, #32
 80138d6:	d01a      	beq.n	801390e <I2C_MasterTransmit_TXE+0x6e>
 80138d8:	68bb      	ldr	r3, [r7, #8]
 80138da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80138de:	d016      	beq.n	801390e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	685a      	ldr	r2, [r3, #4]
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80138ee:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	2211      	movs	r2, #17
 80138f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	2200      	movs	r2, #0
 80138fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	2220      	movs	r2, #32
 8013902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8013906:	6878      	ldr	r0, [r7, #4]
 8013908:	f7ff ff6c 	bl	80137e4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801390c:	e060      	b.n	80139d0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	685a      	ldr	r2, [r3, #4]
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801391c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	681a      	ldr	r2, [r3, #0]
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801392c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	2200      	movs	r2, #0
 8013932:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	2220      	movs	r2, #32
 8013938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013942:	b2db      	uxtb	r3, r3
 8013944:	2b40      	cmp	r3, #64	; 0x40
 8013946:	d107      	bne.n	8013958 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	2200      	movs	r2, #0
 801394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8013950:	6878      	ldr	r0, [r7, #4]
 8013952:	f7ff ff7d 	bl	8013850 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8013956:	e03b      	b.n	80139d0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	2200      	movs	r2, #0
 801395c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8013960:	6878      	ldr	r0, [r7, #4]
 8013962:	f7ff ff3f 	bl	80137e4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8013966:	e033      	b.n	80139d0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8013968:	7bfb      	ldrb	r3, [r7, #15]
 801396a:	2b21      	cmp	r3, #33	; 0x21
 801396c:	d005      	beq.n	801397a <I2C_MasterTransmit_TXE+0xda>
 801396e:	7bbb      	ldrb	r3, [r7, #14]
 8013970:	2b40      	cmp	r3, #64	; 0x40
 8013972:	d12d      	bne.n	80139d0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8013974:	7bfb      	ldrb	r3, [r7, #15]
 8013976:	2b22      	cmp	r3, #34	; 0x22
 8013978:	d12a      	bne.n	80139d0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801397e:	b29b      	uxth	r3, r3
 8013980:	2b00      	cmp	r3, #0
 8013982:	d108      	bne.n	8013996 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	685a      	ldr	r2, [r3, #4]
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013992:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8013994:	e01c      	b.n	80139d0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801399c:	b2db      	uxtb	r3, r3
 801399e:	2b40      	cmp	r3, #64	; 0x40
 80139a0:	d103      	bne.n	80139aa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80139a2:	6878      	ldr	r0, [r7, #4]
 80139a4:	f000 f880 	bl	8013aa8 <I2C_MemoryTransmit_TXE_BTF>
}
 80139a8:	e012      	b.n	80139d0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139ae:	781a      	ldrb	r2, [r3, #0]
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139ba:	1c5a      	adds	r2, r3, #1
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80139c4:	b29b      	uxth	r3, r3
 80139c6:	3b01      	subs	r3, #1
 80139c8:	b29a      	uxth	r2, r3
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80139ce:	e7ff      	b.n	80139d0 <I2C_MasterTransmit_TXE+0x130>
 80139d0:	bf00      	nop
 80139d2:	3710      	adds	r7, #16
 80139d4:	46bd      	mov	sp, r7
 80139d6:	bd80      	pop	{r7, pc}

080139d8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80139d8:	b580      	push	{r7, lr}
 80139da:	b084      	sub	sp, #16
 80139dc:	af00      	add	r7, sp, #0
 80139de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139e4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80139ec:	b2db      	uxtb	r3, r3
 80139ee:	2b21      	cmp	r3, #33	; 0x21
 80139f0:	d156      	bne.n	8013aa0 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80139f6:	b29b      	uxth	r3, r3
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d012      	beq.n	8013a22 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a00:	781a      	ldrb	r2, [r3, #0]
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a0c:	1c5a      	adds	r2, r3, #1
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013a16:	b29b      	uxth	r3, r3
 8013a18:	3b01      	subs	r3, #1
 8013a1a:	b29a      	uxth	r2, r3
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8013a20:	e03e      	b.n	8013aa0 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	2b08      	cmp	r3, #8
 8013a26:	d01d      	beq.n	8013a64 <I2C_MasterTransmit_BTF+0x8c>
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	2b20      	cmp	r3, #32
 8013a2c:	d01a      	beq.n	8013a64 <I2C_MasterTransmit_BTF+0x8c>
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8013a34:	d016      	beq.n	8013a64 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	685a      	ldr	r2, [r3, #4]
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8013a44:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	2211      	movs	r2, #17
 8013a4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	2200      	movs	r2, #0
 8013a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	2220      	movs	r2, #32
 8013a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8013a5c:	6878      	ldr	r0, [r7, #4]
 8013a5e:	f7ff fec1 	bl	80137e4 <HAL_I2C_MasterTxCpltCallback>
}
 8013a62:	e01d      	b.n	8013aa0 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	685a      	ldr	r2, [r3, #4]
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8013a72:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	681a      	ldr	r2, [r3, #0]
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013a82:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	2200      	movs	r2, #0
 8013a88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	2220      	movs	r2, #32
 8013a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	2200      	movs	r2, #0
 8013a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8013a9a:	6878      	ldr	r0, [r7, #4]
 8013a9c:	f7ff fea2 	bl	80137e4 <HAL_I2C_MasterTxCpltCallback>
}
 8013aa0:	bf00      	nop
 8013aa2:	3710      	adds	r7, #16
 8013aa4:	46bd      	mov	sp, r7
 8013aa6:	bd80      	pop	{r7, pc}

08013aa8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	b084      	sub	sp, #16
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013ab6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d11d      	bne.n	8013afc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ac4:	2b01      	cmp	r3, #1
 8013ac6:	d10b      	bne.n	8013ae0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013acc:	b2da      	uxtb	r2, r3
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ad8:	1c9a      	adds	r2, r3, #2
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8013ade:	e06e      	b.n	8013bbe <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ae4:	b29b      	uxth	r3, r3
 8013ae6:	121b      	asrs	r3, r3, #8
 8013ae8:	b2da      	uxtb	r2, r3
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013af4:	1c5a      	adds	r2, r3, #1
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8013afa:	e060      	b.n	8013bbe <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013b00:	2b01      	cmp	r3, #1
 8013b02:	d10b      	bne.n	8013b1c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013b08:	b2da      	uxtb	r2, r3
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013b14:	1c5a      	adds	r2, r3, #1
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	651a      	str	r2, [r3, #80]	; 0x50
}
 8013b1a:	e050      	b.n	8013bbe <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013b20:	2b02      	cmp	r3, #2
 8013b22:	d14c      	bne.n	8013bbe <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8013b24:	7bfb      	ldrb	r3, [r7, #15]
 8013b26:	2b22      	cmp	r3, #34	; 0x22
 8013b28:	d108      	bne.n	8013b3c <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	681a      	ldr	r2, [r3, #0]
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013b38:	601a      	str	r2, [r3, #0]
}
 8013b3a:	e040      	b.n	8013bbe <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013b40:	b29b      	uxth	r3, r3
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d015      	beq.n	8013b72 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8013b46:	7bfb      	ldrb	r3, [r7, #15]
 8013b48:	2b21      	cmp	r3, #33	; 0x21
 8013b4a:	d112      	bne.n	8013b72 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b50:	781a      	ldrb	r2, [r3, #0]
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b5c:	1c5a      	adds	r2, r3, #1
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013b66:	b29b      	uxth	r3, r3
 8013b68:	3b01      	subs	r3, #1
 8013b6a:	b29a      	uxth	r2, r3
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8013b70:	e025      	b.n	8013bbe <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013b76:	b29b      	uxth	r3, r3
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d120      	bne.n	8013bbe <I2C_MemoryTransmit_TXE_BTF+0x116>
 8013b7c:	7bfb      	ldrb	r3, [r7, #15]
 8013b7e:	2b21      	cmp	r3, #33	; 0x21
 8013b80:	d11d      	bne.n	8013bbe <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	685a      	ldr	r2, [r3, #4]
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8013b90:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	681a      	ldr	r2, [r3, #0]
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013ba0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	2200      	movs	r2, #0
 8013ba6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	2220      	movs	r2, #32
 8013bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	2200      	movs	r2, #0
 8013bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8013bb8:	6878      	ldr	r0, [r7, #4]
 8013bba:	f7ff fe49 	bl	8013850 <HAL_I2C_MemTxCpltCallback>
}
 8013bbe:	bf00      	nop
 8013bc0:	3710      	adds	r7, #16
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	bd80      	pop	{r7, pc}

08013bc6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8013bc6:	b580      	push	{r7, lr}
 8013bc8:	b084      	sub	sp, #16
 8013bca:	af00      	add	r7, sp, #0
 8013bcc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013bd4:	b2db      	uxtb	r3, r3
 8013bd6:	2b22      	cmp	r3, #34	; 0x22
 8013bd8:	f040 80a2 	bne.w	8013d20 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013be0:	b29b      	uxth	r3, r3
 8013be2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	2b03      	cmp	r3, #3
 8013be8:	d921      	bls.n	8013c2e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	691a      	ldr	r2, [r3, #16]
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bf4:	b2d2      	uxtb	r2, r2
 8013bf6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bfc:	1c5a      	adds	r2, r3, #1
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013c06:	b29b      	uxth	r3, r3
 8013c08:	3b01      	subs	r3, #1
 8013c0a:	b29a      	uxth	r2, r3
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013c14:	b29b      	uxth	r3, r3
 8013c16:	2b03      	cmp	r3, #3
 8013c18:	f040 8082 	bne.w	8013d20 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	685a      	ldr	r2, [r3, #4]
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013c2a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8013c2c:	e078      	b.n	8013d20 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c32:	2b02      	cmp	r3, #2
 8013c34:	d074      	beq.n	8013d20 <I2C_MasterReceive_RXNE+0x15a>
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	2b01      	cmp	r3, #1
 8013c3a:	d002      	beq.n	8013c42 <I2C_MasterReceive_RXNE+0x7c>
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d16e      	bne.n	8013d20 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8013c42:	6878      	ldr	r0, [r7, #4]
 8013c44:	f001 f92a 	bl	8014e9c <I2C_WaitOnSTOPRequestThroughIT>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d142      	bne.n	8013cd4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	681a      	ldr	r2, [r3, #0]
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013c5c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	685a      	ldr	r2, [r3, #4]
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8013c6c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	691a      	ldr	r2, [r3, #16]
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c78:	b2d2      	uxtb	r2, r2
 8013c7a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c80:	1c5a      	adds	r2, r3, #1
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013c8a:	b29b      	uxth	r3, r3
 8013c8c:	3b01      	subs	r3, #1
 8013c8e:	b29a      	uxth	r2, r3
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	2220      	movs	r2, #32
 8013c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013ca2:	b2db      	uxtb	r3, r3
 8013ca4:	2b40      	cmp	r3, #64	; 0x40
 8013ca6:	d10a      	bne.n	8013cbe <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	2200      	movs	r2, #0
 8013cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8013cb6:	6878      	ldr	r0, [r7, #4]
 8013cb8:	f7ff fdd4 	bl	8013864 <HAL_I2C_MemRxCpltCallback>
}
 8013cbc:	e030      	b.n	8013d20 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	2212      	movs	r2, #18
 8013cca:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8013ccc:	6878      	ldr	r0, [r7, #4]
 8013cce:	f7f8 fb7f 	bl	800c3d0 <HAL_I2C_MasterRxCpltCallback>
}
 8013cd2:	e025      	b.n	8013d20 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	685a      	ldr	r2, [r3, #4]
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8013ce2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	691a      	ldr	r2, [r3, #16]
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cee:	b2d2      	uxtb	r2, r2
 8013cf0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cf6:	1c5a      	adds	r2, r3, #1
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013d00:	b29b      	uxth	r3, r3
 8013d02:	3b01      	subs	r3, #1
 8013d04:	b29a      	uxth	r2, r3
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	2220      	movs	r2, #32
 8013d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	2200      	movs	r2, #0
 8013d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8013d1a:	6878      	ldr	r0, [r7, #4]
 8013d1c:	f7ff fdac 	bl	8013878 <HAL_I2C_ErrorCallback>
}
 8013d20:	bf00      	nop
 8013d22:	3710      	adds	r7, #16
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}

08013d28 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b084      	sub	sp, #16
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d34:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013d3a:	b29b      	uxth	r3, r3
 8013d3c:	2b04      	cmp	r3, #4
 8013d3e:	d11b      	bne.n	8013d78 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	685a      	ldr	r2, [r3, #4]
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013d4e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	691a      	ldr	r2, [r3, #16]
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d5a:	b2d2      	uxtb	r2, r2
 8013d5c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d62:	1c5a      	adds	r2, r3, #1
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013d6c:	b29b      	uxth	r3, r3
 8013d6e:	3b01      	subs	r3, #1
 8013d70:	b29a      	uxth	r2, r3
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8013d76:	e0bd      	b.n	8013ef4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013d7c:	b29b      	uxth	r3, r3
 8013d7e:	2b03      	cmp	r3, #3
 8013d80:	d129      	bne.n	8013dd6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	685a      	ldr	r2, [r3, #4]
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013d90:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	2b04      	cmp	r3, #4
 8013d96:	d00a      	beq.n	8013dae <I2C_MasterReceive_BTF+0x86>
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	2b02      	cmp	r3, #2
 8013d9c:	d007      	beq.n	8013dae <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	681a      	ldr	r2, [r3, #0]
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013dac:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	691a      	ldr	r2, [r3, #16]
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013db8:	b2d2      	uxtb	r2, r2
 8013dba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dc0:	1c5a      	adds	r2, r3, #1
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013dca:	b29b      	uxth	r3, r3
 8013dcc:	3b01      	subs	r3, #1
 8013dce:	b29a      	uxth	r2, r3
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8013dd4:	e08e      	b.n	8013ef4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013dda:	b29b      	uxth	r3, r3
 8013ddc:	2b02      	cmp	r3, #2
 8013dde:	d176      	bne.n	8013ece <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	2b01      	cmp	r3, #1
 8013de4:	d002      	beq.n	8013dec <I2C_MasterReceive_BTF+0xc4>
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	2b10      	cmp	r3, #16
 8013dea:	d108      	bne.n	8013dfe <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	681a      	ldr	r2, [r3, #0]
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013dfa:	601a      	str	r2, [r3, #0]
 8013dfc:	e019      	b.n	8013e32 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	2b04      	cmp	r3, #4
 8013e02:	d002      	beq.n	8013e0a <I2C_MasterReceive_BTF+0xe2>
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	2b02      	cmp	r3, #2
 8013e08:	d108      	bne.n	8013e1c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	681a      	ldr	r2, [r3, #0]
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013e18:	601a      	str	r2, [r3, #0]
 8013e1a:	e00a      	b.n	8013e32 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	2b10      	cmp	r3, #16
 8013e20:	d007      	beq.n	8013e32 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	681a      	ldr	r2, [r3, #0]
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013e30:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	691a      	ldr	r2, [r3, #16]
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e3c:	b2d2      	uxtb	r2, r2
 8013e3e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e44:	1c5a      	adds	r2, r3, #1
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013e4e:	b29b      	uxth	r3, r3
 8013e50:	3b01      	subs	r3, #1
 8013e52:	b29a      	uxth	r2, r3
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	691a      	ldr	r2, [r3, #16]
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e62:	b2d2      	uxtb	r2, r2
 8013e64:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e6a:	1c5a      	adds	r2, r3, #1
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013e74:	b29b      	uxth	r3, r3
 8013e76:	3b01      	subs	r3, #1
 8013e78:	b29a      	uxth	r2, r3
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	685a      	ldr	r2, [r3, #4]
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8013e8c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	2220      	movs	r2, #32
 8013e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013e9c:	b2db      	uxtb	r3, r3
 8013e9e:	2b40      	cmp	r3, #64	; 0x40
 8013ea0:	d10a      	bne.n	8013eb8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	2200      	movs	r2, #0
 8013ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	2200      	movs	r2, #0
 8013eae:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8013eb0:	6878      	ldr	r0, [r7, #4]
 8013eb2:	f7ff fcd7 	bl	8013864 <HAL_I2C_MemRxCpltCallback>
}
 8013eb6:	e01d      	b.n	8013ef4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	2200      	movs	r2, #0
 8013ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	2212      	movs	r2, #18
 8013ec4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8013ec6:	6878      	ldr	r0, [r7, #4]
 8013ec8:	f7f8 fa82 	bl	800c3d0 <HAL_I2C_MasterRxCpltCallback>
}
 8013ecc:	e012      	b.n	8013ef4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	691a      	ldr	r2, [r3, #16]
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ed8:	b2d2      	uxtb	r2, r2
 8013eda:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ee0:	1c5a      	adds	r2, r3, #1
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013eea:	b29b      	uxth	r3, r3
 8013eec:	3b01      	subs	r3, #1
 8013eee:	b29a      	uxth	r2, r3
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8013ef4:	bf00      	nop
 8013ef6:	3710      	adds	r7, #16
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	bd80      	pop	{r7, pc}

08013efc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8013efc:	b480      	push	{r7}
 8013efe:	b083      	sub	sp, #12
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013f0a:	b2db      	uxtb	r3, r3
 8013f0c:	2b40      	cmp	r3, #64	; 0x40
 8013f0e:	d117      	bne.n	8013f40 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d109      	bne.n	8013f2c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f1c:	b2db      	uxtb	r3, r3
 8013f1e:	461a      	mov	r2, r3
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8013f28:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8013f2a:	e067      	b.n	8013ffc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f30:	b2db      	uxtb	r3, r3
 8013f32:	f043 0301 	orr.w	r3, r3, #1
 8013f36:	b2da      	uxtb	r2, r3
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	611a      	str	r2, [r3, #16]
}
 8013f3e:	e05d      	b.n	8013ffc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	691b      	ldr	r3, [r3, #16]
 8013f44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013f48:	d133      	bne.n	8013fb2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013f50:	b2db      	uxtb	r3, r3
 8013f52:	2b21      	cmp	r3, #33	; 0x21
 8013f54:	d109      	bne.n	8013f6a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f5a:	b2db      	uxtb	r3, r3
 8013f5c:	461a      	mov	r2, r3
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8013f66:	611a      	str	r2, [r3, #16]
 8013f68:	e008      	b.n	8013f7c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f6e:	b2db      	uxtb	r3, r3
 8013f70:	f043 0301 	orr.w	r3, r3, #1
 8013f74:	b2da      	uxtb	r2, r3
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d004      	beq.n	8013f8e <I2C_Master_SB+0x92>
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d108      	bne.n	8013fa0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d032      	beq.n	8013ffc <I2C_Master_SB+0x100>
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d02d      	beq.n	8013ffc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	685a      	ldr	r2, [r3, #4]
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013fae:	605a      	str	r2, [r3, #4]
}
 8013fb0:	e024      	b.n	8013ffc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d10e      	bne.n	8013fd8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013fbe:	b29b      	uxth	r3, r3
 8013fc0:	11db      	asrs	r3, r3, #7
 8013fc2:	b2db      	uxtb	r3, r3
 8013fc4:	f003 0306 	and.w	r3, r3, #6
 8013fc8:	b2db      	uxtb	r3, r3
 8013fca:	f063 030f 	orn	r3, r3, #15
 8013fce:	b2da      	uxtb	r2, r3
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	611a      	str	r2, [r3, #16]
}
 8013fd6:	e011      	b.n	8013ffc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013fdc:	2b01      	cmp	r3, #1
 8013fde:	d10d      	bne.n	8013ffc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013fe4:	b29b      	uxth	r3, r3
 8013fe6:	11db      	asrs	r3, r3, #7
 8013fe8:	b2db      	uxtb	r3, r3
 8013fea:	f003 0306 	and.w	r3, r3, #6
 8013fee:	b2db      	uxtb	r3, r3
 8013ff0:	f063 030e 	orn	r3, r3, #14
 8013ff4:	b2da      	uxtb	r2, r3
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	611a      	str	r2, [r3, #16]
}
 8013ffc:	bf00      	nop
 8013ffe:	370c      	adds	r7, #12
 8014000:	46bd      	mov	sp, r7
 8014002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014006:	4770      	bx	lr

08014008 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8014008:	b480      	push	{r7}
 801400a:	b083      	sub	sp, #12
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014014:	b2da      	uxtb	r2, r3
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014020:	2b00      	cmp	r3, #0
 8014022:	d103      	bne.n	801402c <I2C_Master_ADD10+0x24>
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014028:	2b00      	cmp	r3, #0
 801402a:	d011      	beq.n	8014050 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014032:	2b00      	cmp	r3, #0
 8014034:	d104      	bne.n	8014040 <I2C_Master_ADD10+0x38>
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801403a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801403c:	2b00      	cmp	r3, #0
 801403e:	d007      	beq.n	8014050 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	685a      	ldr	r2, [r3, #4]
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801404e:	605a      	str	r2, [r3, #4]
    }
  }
}
 8014050:	bf00      	nop
 8014052:	370c      	adds	r7, #12
 8014054:	46bd      	mov	sp, r7
 8014056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405a:	4770      	bx	lr

0801405c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 801405c:	b480      	push	{r7}
 801405e:	b091      	sub	sp, #68	; 0x44
 8014060:	af00      	add	r7, sp, #0
 8014062:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801406a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014072:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014078:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014080:	b2db      	uxtb	r3, r3
 8014082:	2b22      	cmp	r3, #34	; 0x22
 8014084:	f040 8169 	bne.w	801435a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801408c:	2b00      	cmp	r3, #0
 801408e:	d10f      	bne.n	80140b0 <I2C_Master_ADDR+0x54>
 8014090:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014094:	2b40      	cmp	r3, #64	; 0x40
 8014096:	d10b      	bne.n	80140b0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8014098:	2300      	movs	r3, #0
 801409a:	633b      	str	r3, [r7, #48]	; 0x30
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	695b      	ldr	r3, [r3, #20]
 80140a2:	633b      	str	r3, [r7, #48]	; 0x30
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	699b      	ldr	r3, [r3, #24]
 80140aa:	633b      	str	r3, [r7, #48]	; 0x30
 80140ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140ae:	e160      	b.n	8014372 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d11d      	bne.n	80140f4 <I2C_Master_ADDR+0x98>
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	691b      	ldr	r3, [r3, #16]
 80140bc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80140c0:	d118      	bne.n	80140f4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80140c2:	2300      	movs	r3, #0
 80140c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	695b      	ldr	r3, [r3, #20]
 80140cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	699b      	ldr	r3, [r3, #24]
 80140d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80140d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	681a      	ldr	r2, [r3, #0]
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80140e6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80140ec:	1c5a      	adds	r2, r3, #1
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	651a      	str	r2, [r3, #80]	; 0x50
 80140f2:	e13e      	b.n	8014372 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80140f8:	b29b      	uxth	r3, r3
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d113      	bne.n	8014126 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80140fe:	2300      	movs	r3, #0
 8014100:	62bb      	str	r3, [r7, #40]	; 0x28
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	695b      	ldr	r3, [r3, #20]
 8014108:	62bb      	str	r3, [r7, #40]	; 0x28
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	699b      	ldr	r3, [r3, #24]
 8014110:	62bb      	str	r3, [r7, #40]	; 0x28
 8014112:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	681a      	ldr	r2, [r3, #0]
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014122:	601a      	str	r2, [r3, #0]
 8014124:	e115      	b.n	8014352 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801412a:	b29b      	uxth	r3, r3
 801412c:	2b01      	cmp	r3, #1
 801412e:	f040 808a 	bne.w	8014246 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8014132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014134:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8014138:	d137      	bne.n	80141aa <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	681a      	ldr	r2, [r3, #0]
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014148:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	685b      	ldr	r3, [r3, #4]
 8014150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014154:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014158:	d113      	bne.n	8014182 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	681a      	ldr	r2, [r3, #0]
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014168:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801416a:	2300      	movs	r3, #0
 801416c:	627b      	str	r3, [r7, #36]	; 0x24
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	695b      	ldr	r3, [r3, #20]
 8014174:	627b      	str	r3, [r7, #36]	; 0x24
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	699b      	ldr	r3, [r3, #24]
 801417c:	627b      	str	r3, [r7, #36]	; 0x24
 801417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014180:	e0e7      	b.n	8014352 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8014182:	2300      	movs	r3, #0
 8014184:	623b      	str	r3, [r7, #32]
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	695b      	ldr	r3, [r3, #20]
 801418c:	623b      	str	r3, [r7, #32]
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	699b      	ldr	r3, [r3, #24]
 8014194:	623b      	str	r3, [r7, #32]
 8014196:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	681a      	ldr	r2, [r3, #0]
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80141a6:	601a      	str	r2, [r3, #0]
 80141a8:	e0d3      	b.n	8014352 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80141aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141ac:	2b08      	cmp	r3, #8
 80141ae:	d02e      	beq.n	801420e <I2C_Master_ADDR+0x1b2>
 80141b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141b2:	2b20      	cmp	r3, #32
 80141b4:	d02b      	beq.n	801420e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80141b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141b8:	2b12      	cmp	r3, #18
 80141ba:	d102      	bne.n	80141c2 <I2C_Master_ADDR+0x166>
 80141bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141be:	2b01      	cmp	r3, #1
 80141c0:	d125      	bne.n	801420e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80141c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141c4:	2b04      	cmp	r3, #4
 80141c6:	d00e      	beq.n	80141e6 <I2C_Master_ADDR+0x18a>
 80141c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141ca:	2b02      	cmp	r3, #2
 80141cc:	d00b      	beq.n	80141e6 <I2C_Master_ADDR+0x18a>
 80141ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141d0:	2b10      	cmp	r3, #16
 80141d2:	d008      	beq.n	80141e6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	681a      	ldr	r2, [r3, #0]
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80141e2:	601a      	str	r2, [r3, #0]
 80141e4:	e007      	b.n	80141f6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	681a      	ldr	r2, [r3, #0]
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80141f4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80141f6:	2300      	movs	r3, #0
 80141f8:	61fb      	str	r3, [r7, #28]
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	695b      	ldr	r3, [r3, #20]
 8014200:	61fb      	str	r3, [r7, #28]
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	699b      	ldr	r3, [r3, #24]
 8014208:	61fb      	str	r3, [r7, #28]
 801420a:	69fb      	ldr	r3, [r7, #28]
 801420c:	e0a1      	b.n	8014352 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	681a      	ldr	r2, [r3, #0]
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801421c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801421e:	2300      	movs	r3, #0
 8014220:	61bb      	str	r3, [r7, #24]
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	695b      	ldr	r3, [r3, #20]
 8014228:	61bb      	str	r3, [r7, #24]
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	699b      	ldr	r3, [r3, #24]
 8014230:	61bb      	str	r3, [r7, #24]
 8014232:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	681a      	ldr	r2, [r3, #0]
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014242:	601a      	str	r2, [r3, #0]
 8014244:	e085      	b.n	8014352 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801424a:	b29b      	uxth	r3, r3
 801424c:	2b02      	cmp	r3, #2
 801424e:	d14d      	bne.n	80142ec <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8014250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014252:	2b04      	cmp	r3, #4
 8014254:	d016      	beq.n	8014284 <I2C_Master_ADDR+0x228>
 8014256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014258:	2b02      	cmp	r3, #2
 801425a:	d013      	beq.n	8014284 <I2C_Master_ADDR+0x228>
 801425c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801425e:	2b10      	cmp	r3, #16
 8014260:	d010      	beq.n	8014284 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	681a      	ldr	r2, [r3, #0]
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014270:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	681a      	ldr	r2, [r3, #0]
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014280:	601a      	str	r2, [r3, #0]
 8014282:	e007      	b.n	8014294 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	681a      	ldr	r2, [r3, #0]
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014292:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	685b      	ldr	r3, [r3, #4]
 801429a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801429e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80142a2:	d117      	bne.n	80142d4 <I2C_Master_ADDR+0x278>
 80142a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80142aa:	d00b      	beq.n	80142c4 <I2C_Master_ADDR+0x268>
 80142ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142ae:	2b01      	cmp	r3, #1
 80142b0:	d008      	beq.n	80142c4 <I2C_Master_ADDR+0x268>
 80142b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142b4:	2b08      	cmp	r3, #8
 80142b6:	d005      	beq.n	80142c4 <I2C_Master_ADDR+0x268>
 80142b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142ba:	2b10      	cmp	r3, #16
 80142bc:	d002      	beq.n	80142c4 <I2C_Master_ADDR+0x268>
 80142be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142c0:	2b20      	cmp	r3, #32
 80142c2:	d107      	bne.n	80142d4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	685a      	ldr	r2, [r3, #4]
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80142d2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80142d4:	2300      	movs	r3, #0
 80142d6:	617b      	str	r3, [r7, #20]
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	695b      	ldr	r3, [r3, #20]
 80142de:	617b      	str	r3, [r7, #20]
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	699b      	ldr	r3, [r3, #24]
 80142e6:	617b      	str	r3, [r7, #20]
 80142e8:	697b      	ldr	r3, [r7, #20]
 80142ea:	e032      	b.n	8014352 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	681a      	ldr	r2, [r3, #0]
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80142fa:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	685b      	ldr	r3, [r3, #4]
 8014302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801430a:	d117      	bne.n	801433c <I2C_Master_ADDR+0x2e0>
 801430c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801430e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8014312:	d00b      	beq.n	801432c <I2C_Master_ADDR+0x2d0>
 8014314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014316:	2b01      	cmp	r3, #1
 8014318:	d008      	beq.n	801432c <I2C_Master_ADDR+0x2d0>
 801431a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801431c:	2b08      	cmp	r3, #8
 801431e:	d005      	beq.n	801432c <I2C_Master_ADDR+0x2d0>
 8014320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014322:	2b10      	cmp	r3, #16
 8014324:	d002      	beq.n	801432c <I2C_Master_ADDR+0x2d0>
 8014326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014328:	2b20      	cmp	r3, #32
 801432a:	d107      	bne.n	801433c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	685a      	ldr	r2, [r3, #4]
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801433a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801433c:	2300      	movs	r3, #0
 801433e:	613b      	str	r3, [r7, #16]
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	695b      	ldr	r3, [r3, #20]
 8014346:	613b      	str	r3, [r7, #16]
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	699b      	ldr	r3, [r3, #24]
 801434e:	613b      	str	r3, [r7, #16]
 8014350:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	2200      	movs	r2, #0
 8014356:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8014358:	e00b      	b.n	8014372 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801435a:	2300      	movs	r3, #0
 801435c:	60fb      	str	r3, [r7, #12]
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	695b      	ldr	r3, [r3, #20]
 8014364:	60fb      	str	r3, [r7, #12]
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	699b      	ldr	r3, [r3, #24]
 801436c:	60fb      	str	r3, [r7, #12]
 801436e:	68fb      	ldr	r3, [r7, #12]
}
 8014370:	e7ff      	b.n	8014372 <I2C_Master_ADDR+0x316>
 8014372:	bf00      	nop
 8014374:	3744      	adds	r7, #68	; 0x44
 8014376:	46bd      	mov	sp, r7
 8014378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437c:	4770      	bx	lr

0801437e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801437e:	b580      	push	{r7, lr}
 8014380:	b084      	sub	sp, #16
 8014382:	af00      	add	r7, sp, #0
 8014384:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801438c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014392:	b29b      	uxth	r3, r3
 8014394:	2b00      	cmp	r3, #0
 8014396:	d02b      	beq.n	80143f0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801439c:	781a      	ldrb	r2, [r3, #0]
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143a8:	1c5a      	adds	r2, r3, #1
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80143b2:	b29b      	uxth	r3, r3
 80143b4:	3b01      	subs	r3, #1
 80143b6:	b29a      	uxth	r2, r3
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80143c0:	b29b      	uxth	r3, r3
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d114      	bne.n	80143f0 <I2C_SlaveTransmit_TXE+0x72>
 80143c6:	7bfb      	ldrb	r3, [r7, #15]
 80143c8:	2b29      	cmp	r3, #41	; 0x29
 80143ca:	d111      	bne.n	80143f0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	685a      	ldr	r2, [r3, #4]
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80143da:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	2221      	movs	r2, #33	; 0x21
 80143e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	2228      	movs	r2, #40	; 0x28
 80143e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80143ea:	6878      	ldr	r0, [r7, #4]
 80143ec:	f7ff fa04 	bl	80137f8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80143f0:	bf00      	nop
 80143f2:	3710      	adds	r7, #16
 80143f4:	46bd      	mov	sp, r7
 80143f6:	bd80      	pop	{r7, pc}

080143f8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80143f8:	b480      	push	{r7}
 80143fa:	b083      	sub	sp, #12
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014404:	b29b      	uxth	r3, r3
 8014406:	2b00      	cmp	r3, #0
 8014408:	d011      	beq.n	801442e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801440e:	781a      	ldrb	r2, [r3, #0]
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801441a:	1c5a      	adds	r2, r3, #1
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014424:	b29b      	uxth	r3, r3
 8014426:	3b01      	subs	r3, #1
 8014428:	b29a      	uxth	r2, r3
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801442e:	bf00      	nop
 8014430:	370c      	adds	r7, #12
 8014432:	46bd      	mov	sp, r7
 8014434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014438:	4770      	bx	lr

0801443a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801443a:	b580      	push	{r7, lr}
 801443c:	b084      	sub	sp, #16
 801443e:	af00      	add	r7, sp, #0
 8014440:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014448:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801444e:	b29b      	uxth	r3, r3
 8014450:	2b00      	cmp	r3, #0
 8014452:	d02c      	beq.n	80144ae <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	691a      	ldr	r2, [r3, #16]
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801445e:	b2d2      	uxtb	r2, r2
 8014460:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014466:	1c5a      	adds	r2, r3, #1
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014470:	b29b      	uxth	r3, r3
 8014472:	3b01      	subs	r3, #1
 8014474:	b29a      	uxth	r2, r3
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801447e:	b29b      	uxth	r3, r3
 8014480:	2b00      	cmp	r3, #0
 8014482:	d114      	bne.n	80144ae <I2C_SlaveReceive_RXNE+0x74>
 8014484:	7bfb      	ldrb	r3, [r7, #15]
 8014486:	2b2a      	cmp	r3, #42	; 0x2a
 8014488:	d111      	bne.n	80144ae <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	685a      	ldr	r2, [r3, #4]
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014498:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	2222      	movs	r2, #34	; 0x22
 801449e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	2228      	movs	r2, #40	; 0x28
 80144a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80144a8:	6878      	ldr	r0, [r7, #4]
 80144aa:	f7ff f9af 	bl	801380c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80144ae:	bf00      	nop
 80144b0:	3710      	adds	r7, #16
 80144b2:	46bd      	mov	sp, r7
 80144b4:	bd80      	pop	{r7, pc}

080144b6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80144b6:	b480      	push	{r7}
 80144b8:	b083      	sub	sp, #12
 80144ba:	af00      	add	r7, sp, #0
 80144bc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80144c2:	b29b      	uxth	r3, r3
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d012      	beq.n	80144ee <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	691a      	ldr	r2, [r3, #16]
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144d2:	b2d2      	uxtb	r2, r2
 80144d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144da:	1c5a      	adds	r2, r3, #1
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80144e4:	b29b      	uxth	r3, r3
 80144e6:	3b01      	subs	r3, #1
 80144e8:	b29a      	uxth	r2, r3
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80144ee:	bf00      	nop
 80144f0:	370c      	adds	r7, #12
 80144f2:	46bd      	mov	sp, r7
 80144f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f8:	4770      	bx	lr

080144fa <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80144fa:	b580      	push	{r7, lr}
 80144fc:	b084      	sub	sp, #16
 80144fe:	af00      	add	r7, sp, #0
 8014500:	6078      	str	r0, [r7, #4]
 8014502:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8014504:	2300      	movs	r3, #0
 8014506:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801450e:	b2db      	uxtb	r3, r3
 8014510:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8014514:	2b28      	cmp	r3, #40	; 0x28
 8014516:	d127      	bne.n	8014568 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	685a      	ldr	r2, [r3, #4]
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014526:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8014528:	683b      	ldr	r3, [r7, #0]
 801452a:	089b      	lsrs	r3, r3, #2
 801452c:	f003 0301 	and.w	r3, r3, #1
 8014530:	2b00      	cmp	r3, #0
 8014532:	d101      	bne.n	8014538 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8014534:	2301      	movs	r3, #1
 8014536:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8014538:	683b      	ldr	r3, [r7, #0]
 801453a:	09db      	lsrs	r3, r3, #7
 801453c:	f003 0301 	and.w	r3, r3, #1
 8014540:	2b00      	cmp	r3, #0
 8014542:	d103      	bne.n	801454c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	68db      	ldr	r3, [r3, #12]
 8014548:	81bb      	strh	r3, [r7, #12]
 801454a:	e002      	b.n	8014552 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	699b      	ldr	r3, [r3, #24]
 8014550:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	2200      	movs	r2, #0
 8014556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 801455a:	89ba      	ldrh	r2, [r7, #12]
 801455c:	7bfb      	ldrb	r3, [r7, #15]
 801455e:	4619      	mov	r1, r3
 8014560:	6878      	ldr	r0, [r7, #4]
 8014562:	f7ff f95d 	bl	8013820 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8014566:	e008      	b.n	801457a <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	f06f 0202 	mvn.w	r2, #2
 8014570:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	2200      	movs	r2, #0
 8014576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 801457a:	bf00      	nop
 801457c:	3710      	adds	r7, #16
 801457e:	46bd      	mov	sp, r7
 8014580:	bd80      	pop	{r7, pc}
	...

08014584 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8014584:	b580      	push	{r7, lr}
 8014586:	b084      	sub	sp, #16
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014592:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	685a      	ldr	r2, [r3, #4]
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80145a2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80145a4:	2300      	movs	r3, #0
 80145a6:	60bb      	str	r3, [r7, #8]
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	695b      	ldr	r3, [r3, #20]
 80145ae:	60bb      	str	r3, [r7, #8]
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	681a      	ldr	r2, [r3, #0]
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	f042 0201 	orr.w	r2, r2, #1
 80145be:	601a      	str	r2, [r3, #0]
 80145c0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	681a      	ldr	r2, [r3, #0]
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80145d0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	685b      	ldr	r3, [r3, #4]
 80145d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80145dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80145e0:	d172      	bne.n	80146c8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80145e2:	7bfb      	ldrb	r3, [r7, #15]
 80145e4:	2b22      	cmp	r3, #34	; 0x22
 80145e6:	d002      	beq.n	80145ee <I2C_Slave_STOPF+0x6a>
 80145e8:	7bfb      	ldrb	r3, [r7, #15]
 80145ea:	2b2a      	cmp	r3, #42	; 0x2a
 80145ec:	d135      	bne.n	801465a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	685b      	ldr	r3, [r3, #4]
 80145f6:	b29a      	uxth	r2, r3
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014600:	b29b      	uxth	r3, r3
 8014602:	2b00      	cmp	r3, #0
 8014604:	d005      	beq.n	8014612 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801460a:	f043 0204 	orr.w	r2, r3, #4
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	685a      	ldr	r2, [r3, #4]
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014620:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014626:	4618      	mov	r0, r3
 8014628:	f7fe f87a 	bl	8012720 <HAL_DMA_GetState>
 801462c:	4603      	mov	r3, r0
 801462e:	2b01      	cmp	r3, #1
 8014630:	d049      	beq.n	80146c6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014636:	4a69      	ldr	r2, [pc, #420]	; (80147dc <I2C_Slave_STOPF+0x258>)
 8014638:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801463e:	4618      	mov	r0, r3
 8014640:	f7fd fec2 	bl	80123c8 <HAL_DMA_Abort_IT>
 8014644:	4603      	mov	r3, r0
 8014646:	2b00      	cmp	r3, #0
 8014648:	d03d      	beq.n	80146c6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801464e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014650:	687a      	ldr	r2, [r7, #4]
 8014652:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8014654:	4610      	mov	r0, r2
 8014656:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8014658:	e035      	b.n	80146c6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	685b      	ldr	r3, [r3, #4]
 8014662:	b29a      	uxth	r2, r3
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801466c:	b29b      	uxth	r3, r3
 801466e:	2b00      	cmp	r3, #0
 8014670:	d005      	beq.n	801467e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014676:	f043 0204 	orr.w	r2, r3, #4
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	685a      	ldr	r2, [r3, #4]
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801468c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014692:	4618      	mov	r0, r3
 8014694:	f7fe f844 	bl	8012720 <HAL_DMA_GetState>
 8014698:	4603      	mov	r3, r0
 801469a:	2b01      	cmp	r3, #1
 801469c:	d014      	beq.n	80146c8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146a2:	4a4e      	ldr	r2, [pc, #312]	; (80147dc <I2C_Slave_STOPF+0x258>)
 80146a4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146aa:	4618      	mov	r0, r3
 80146ac:	f7fd fe8c 	bl	80123c8 <HAL_DMA_Abort_IT>
 80146b0:	4603      	mov	r3, r0
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d008      	beq.n	80146c8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80146bc:	687a      	ldr	r2, [r7, #4]
 80146be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80146c0:	4610      	mov	r0, r2
 80146c2:	4798      	blx	r3
 80146c4:	e000      	b.n	80146c8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80146c6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80146cc:	b29b      	uxth	r3, r3
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d03e      	beq.n	8014750 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	695b      	ldr	r3, [r3, #20]
 80146d8:	f003 0304 	and.w	r3, r3, #4
 80146dc:	2b04      	cmp	r3, #4
 80146de:	d112      	bne.n	8014706 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	691a      	ldr	r2, [r3, #16]
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146ea:	b2d2      	uxtb	r2, r2
 80146ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146f2:	1c5a      	adds	r2, r3, #1
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80146fc:	b29b      	uxth	r3, r3
 80146fe:	3b01      	subs	r3, #1
 8014700:	b29a      	uxth	r2, r3
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	695b      	ldr	r3, [r3, #20]
 801470c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014710:	2b40      	cmp	r3, #64	; 0x40
 8014712:	d112      	bne.n	801473a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	691a      	ldr	r2, [r3, #16]
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801471e:	b2d2      	uxtb	r2, r2
 8014720:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014726:	1c5a      	adds	r2, r3, #1
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014730:	b29b      	uxth	r3, r3
 8014732:	3b01      	subs	r3, #1
 8014734:	b29a      	uxth	r2, r3
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801473e:	b29b      	uxth	r3, r3
 8014740:	2b00      	cmp	r3, #0
 8014742:	d005      	beq.n	8014750 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014748:	f043 0204 	orr.w	r2, r3, #4
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014754:	2b00      	cmp	r3, #0
 8014756:	d003      	beq.n	8014760 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8014758:	6878      	ldr	r0, [r7, #4]
 801475a:	f000 f8b3 	bl	80148c4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 801475e:	e039      	b.n	80147d4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8014760:	7bfb      	ldrb	r3, [r7, #15]
 8014762:	2b2a      	cmp	r3, #42	; 0x2a
 8014764:	d109      	bne.n	801477a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	2200      	movs	r2, #0
 801476a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	2228      	movs	r2, #40	; 0x28
 8014770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8014774:	6878      	ldr	r0, [r7, #4]
 8014776:	f7ff f849 	bl	801380c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014780:	b2db      	uxtb	r3, r3
 8014782:	2b28      	cmp	r3, #40	; 0x28
 8014784:	d111      	bne.n	80147aa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	4a15      	ldr	r2, [pc, #84]	; (80147e0 <I2C_Slave_STOPF+0x25c>)
 801478a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	2200      	movs	r2, #0
 8014790:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	2220      	movs	r2, #32
 8014796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	2200      	movs	r2, #0
 801479e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80147a2:	6878      	ldr	r0, [r7, #4]
 80147a4:	f7ff f84a 	bl	801383c <HAL_I2C_ListenCpltCallback>
}
 80147a8:	e014      	b.n	80147d4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147ae:	2b22      	cmp	r3, #34	; 0x22
 80147b0:	d002      	beq.n	80147b8 <I2C_Slave_STOPF+0x234>
 80147b2:	7bfb      	ldrb	r3, [r7, #15]
 80147b4:	2b22      	cmp	r3, #34	; 0x22
 80147b6:	d10d      	bne.n	80147d4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	2200      	movs	r2, #0
 80147bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	2220      	movs	r2, #32
 80147c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	2200      	movs	r2, #0
 80147ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80147ce:	6878      	ldr	r0, [r7, #4]
 80147d0:	f7ff f81c 	bl	801380c <HAL_I2C_SlaveRxCpltCallback>
}
 80147d4:	bf00      	nop
 80147d6:	3710      	adds	r7, #16
 80147d8:	46bd      	mov	sp, r7
 80147da:	bd80      	pop	{r7, pc}
 80147dc:	08014d4d 	.word	0x08014d4d
 80147e0:	ffff0000 	.word	0xffff0000

080147e4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b084      	sub	sp, #16
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80147f2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147f8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80147fa:	68bb      	ldr	r3, [r7, #8]
 80147fc:	2b08      	cmp	r3, #8
 80147fe:	d002      	beq.n	8014806 <I2C_Slave_AF+0x22>
 8014800:	68bb      	ldr	r3, [r7, #8]
 8014802:	2b20      	cmp	r3, #32
 8014804:	d129      	bne.n	801485a <I2C_Slave_AF+0x76>
 8014806:	7bfb      	ldrb	r3, [r7, #15]
 8014808:	2b28      	cmp	r3, #40	; 0x28
 801480a:	d126      	bne.n	801485a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	4a2c      	ldr	r2, [pc, #176]	; (80148c0 <I2C_Slave_AF+0xdc>)
 8014810:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	685a      	ldr	r2, [r3, #4]
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8014820:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801482a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	681a      	ldr	r2, [r3, #0]
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801483a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	2200      	movs	r2, #0
 8014840:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	2220      	movs	r2, #32
 8014846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	2200      	movs	r2, #0
 801484e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8014852:	6878      	ldr	r0, [r7, #4]
 8014854:	f7fe fff2 	bl	801383c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8014858:	e02e      	b.n	80148b8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801485a:	7bfb      	ldrb	r3, [r7, #15]
 801485c:	2b21      	cmp	r3, #33	; 0x21
 801485e:	d126      	bne.n	80148ae <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	4a17      	ldr	r2, [pc, #92]	; (80148c0 <I2C_Slave_AF+0xdc>)
 8014864:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	2221      	movs	r2, #33	; 0x21
 801486a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	2220      	movs	r2, #32
 8014870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	2200      	movs	r2, #0
 8014878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	685a      	ldr	r2, [r3, #4]
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801488a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8014894:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	681a      	ldr	r2, [r3, #0]
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80148a4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80148a6:	6878      	ldr	r0, [r7, #4]
 80148a8:	f7fe ffa6 	bl	80137f8 <HAL_I2C_SlaveTxCpltCallback>
}
 80148ac:	e004      	b.n	80148b8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80148b6:	615a      	str	r2, [r3, #20]
}
 80148b8:	bf00      	nop
 80148ba:	3710      	adds	r7, #16
 80148bc:	46bd      	mov	sp, r7
 80148be:	bd80      	pop	{r7, pc}
 80148c0:	ffff0000 	.word	0xffff0000

080148c4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	b084      	sub	sp, #16
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80148d2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80148da:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80148dc:	7bbb      	ldrb	r3, [r7, #14]
 80148de:	2b10      	cmp	r3, #16
 80148e0:	d002      	beq.n	80148e8 <I2C_ITError+0x24>
 80148e2:	7bbb      	ldrb	r3, [r7, #14]
 80148e4:	2b40      	cmp	r3, #64	; 0x40
 80148e6:	d10a      	bne.n	80148fe <I2C_ITError+0x3a>
 80148e8:	7bfb      	ldrb	r3, [r7, #15]
 80148ea:	2b22      	cmp	r3, #34	; 0x22
 80148ec:	d107      	bne.n	80148fe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	681a      	ldr	r2, [r3, #0]
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80148fc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80148fe:	7bfb      	ldrb	r3, [r7, #15]
 8014900:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8014904:	2b28      	cmp	r3, #40	; 0x28
 8014906:	d107      	bne.n	8014918 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	2200      	movs	r2, #0
 801490c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	2228      	movs	r2, #40	; 0x28
 8014912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8014916:	e015      	b.n	8014944 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	685b      	ldr	r3, [r3, #4]
 801491e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014926:	d00a      	beq.n	801493e <I2C_ITError+0x7a>
 8014928:	7bfb      	ldrb	r3, [r7, #15]
 801492a:	2b60      	cmp	r3, #96	; 0x60
 801492c:	d007      	beq.n	801493e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	2220      	movs	r2, #32
 8014932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	2200      	movs	r2, #0
 801493a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	2200      	movs	r2, #0
 8014942:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	685b      	ldr	r3, [r3, #4]
 801494a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801494e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014952:	d162      	bne.n	8014a1a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	685a      	ldr	r2, [r3, #4]
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014962:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014968:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801496c:	b2db      	uxtb	r3, r3
 801496e:	2b01      	cmp	r3, #1
 8014970:	d020      	beq.n	80149b4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014976:	4a6a      	ldr	r2, [pc, #424]	; (8014b20 <I2C_ITError+0x25c>)
 8014978:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801497e:	4618      	mov	r0, r3
 8014980:	f7fd fd22 	bl	80123c8 <HAL_DMA_Abort_IT>
 8014984:	4603      	mov	r3, r0
 8014986:	2b00      	cmp	r3, #0
 8014988:	f000 8089 	beq.w	8014a9e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	681a      	ldr	r2, [r3, #0]
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	f022 0201 	bic.w	r2, r2, #1
 801499a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	2220      	movs	r2, #32
 80149a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80149aa:	687a      	ldr	r2, [r7, #4]
 80149ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80149ae:	4610      	mov	r0, r2
 80149b0:	4798      	blx	r3
 80149b2:	e074      	b.n	8014a9e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149b8:	4a59      	ldr	r2, [pc, #356]	; (8014b20 <I2C_ITError+0x25c>)
 80149ba:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149c0:	4618      	mov	r0, r3
 80149c2:	f7fd fd01 	bl	80123c8 <HAL_DMA_Abort_IT>
 80149c6:	4603      	mov	r3, r0
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d068      	beq.n	8014a9e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	695b      	ldr	r3, [r3, #20]
 80149d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80149d6:	2b40      	cmp	r3, #64	; 0x40
 80149d8:	d10b      	bne.n	80149f2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	691a      	ldr	r2, [r3, #16]
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149e4:	b2d2      	uxtb	r2, r2
 80149e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149ec:	1c5a      	adds	r2, r3, #1
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	681a      	ldr	r2, [r3, #0]
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	f022 0201 	bic.w	r2, r2, #1
 8014a00:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	2220      	movs	r2, #32
 8014a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014a10:	687a      	ldr	r2, [r7, #4]
 8014a12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8014a14:	4610      	mov	r0, r2
 8014a16:	4798      	blx	r3
 8014a18:	e041      	b.n	8014a9e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014a20:	b2db      	uxtb	r3, r3
 8014a22:	2b60      	cmp	r3, #96	; 0x60
 8014a24:	d125      	bne.n	8014a72 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	2220      	movs	r2, #32
 8014a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	2200      	movs	r2, #0
 8014a32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	695b      	ldr	r3, [r3, #20]
 8014a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014a3e:	2b40      	cmp	r3, #64	; 0x40
 8014a40:	d10b      	bne.n	8014a5a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	691a      	ldr	r2, [r3, #16]
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a4c:	b2d2      	uxtb	r2, r2
 8014a4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a54:	1c5a      	adds	r2, r3, #1
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	681a      	ldr	r2, [r3, #0]
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	f022 0201 	bic.w	r2, r2, #1
 8014a68:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8014a6a:	6878      	ldr	r0, [r7, #4]
 8014a6c:	f7fe ff0e 	bl	801388c <HAL_I2C_AbortCpltCallback>
 8014a70:	e015      	b.n	8014a9e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	695b      	ldr	r3, [r3, #20]
 8014a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014a7c:	2b40      	cmp	r3, #64	; 0x40
 8014a7e:	d10b      	bne.n	8014a98 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	691a      	ldr	r2, [r3, #16]
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a8a:	b2d2      	uxtb	r2, r2
 8014a8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a92:	1c5a      	adds	r2, r3, #1
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8014a98:	6878      	ldr	r0, [r7, #4]
 8014a9a:	f7fe feed 	bl	8013878 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014aa2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8014aa4:	68bb      	ldr	r3, [r7, #8]
 8014aa6:	f003 0301 	and.w	r3, r3, #1
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d10e      	bne.n	8014acc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8014aae:	68bb      	ldr	r3, [r7, #8]
 8014ab0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d109      	bne.n	8014acc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8014ab8:	68bb      	ldr	r3, [r7, #8]
 8014aba:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d104      	bne.n	8014acc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8014ac2:	68bb      	ldr	r3, [r7, #8]
 8014ac4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d007      	beq.n	8014adc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	685a      	ldr	r2, [r3, #4]
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8014ada:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014ae2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ae8:	f003 0304 	and.w	r3, r3, #4
 8014aec:	2b04      	cmp	r3, #4
 8014aee:	d113      	bne.n	8014b18 <I2C_ITError+0x254>
 8014af0:	7bfb      	ldrb	r3, [r7, #15]
 8014af2:	2b28      	cmp	r3, #40	; 0x28
 8014af4:	d110      	bne.n	8014b18 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	4a0a      	ldr	r2, [pc, #40]	; (8014b24 <I2C_ITError+0x260>)
 8014afa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	2200      	movs	r2, #0
 8014b00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	2220      	movs	r2, #32
 8014b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	2200      	movs	r2, #0
 8014b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8014b12:	6878      	ldr	r0, [r7, #4]
 8014b14:	f7fe fe92 	bl	801383c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8014b18:	bf00      	nop
 8014b1a:	3710      	adds	r7, #16
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	bd80      	pop	{r7, pc}
 8014b20:	08014d4d 	.word	0x08014d4d
 8014b24:	ffff0000 	.word	0xffff0000

08014b28 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8014b28:	b580      	push	{r7, lr}
 8014b2a:	b086      	sub	sp, #24
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b34:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8014b36:	697b      	ldr	r3, [r7, #20]
 8014b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014b3c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8014b3e:	697b      	ldr	r3, [r7, #20]
 8014b40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8014b44:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8014b46:	697b      	ldr	r3, [r7, #20]
 8014b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b4a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8014b4c:	697b      	ldr	r3, [r7, #20]
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	685a      	ldr	r2, [r3, #4]
 8014b52:	697b      	ldr	r3, [r7, #20]
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8014b5a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8014b5c:	697b      	ldr	r3, [r7, #20]
 8014b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d003      	beq.n	8014b6c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8014b64:	697b      	ldr	r3, [r7, #20]
 8014b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b68:	2200      	movs	r2, #0
 8014b6a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8014b6c:	697b      	ldr	r3, [r7, #20]
 8014b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d003      	beq.n	8014b7c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8014b74:	697b      	ldr	r3, [r7, #20]
 8014b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b78:	2200      	movs	r2, #0
 8014b7a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8014b7c:	7cfb      	ldrb	r3, [r7, #19]
 8014b7e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8014b82:	2b21      	cmp	r3, #33	; 0x21
 8014b84:	d007      	beq.n	8014b96 <I2C_DMAXferCplt+0x6e>
 8014b86:	7cfb      	ldrb	r3, [r7, #19]
 8014b88:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8014b8c:	2b22      	cmp	r3, #34	; 0x22
 8014b8e:	d131      	bne.n	8014bf4 <I2C_DMAXferCplt+0xcc>
 8014b90:	7cbb      	ldrb	r3, [r7, #18]
 8014b92:	2b20      	cmp	r3, #32
 8014b94:	d12e      	bne.n	8014bf4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8014b96:	697b      	ldr	r3, [r7, #20]
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	685a      	ldr	r2, [r3, #4]
 8014b9c:	697b      	ldr	r3, [r7, #20]
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014ba4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8014ba6:	697b      	ldr	r3, [r7, #20]
 8014ba8:	2200      	movs	r2, #0
 8014baa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8014bac:	7cfb      	ldrb	r3, [r7, #19]
 8014bae:	2b29      	cmp	r3, #41	; 0x29
 8014bb0:	d10a      	bne.n	8014bc8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8014bb2:	697b      	ldr	r3, [r7, #20]
 8014bb4:	2221      	movs	r2, #33	; 0x21
 8014bb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8014bb8:	697b      	ldr	r3, [r7, #20]
 8014bba:	2228      	movs	r2, #40	; 0x28
 8014bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8014bc0:	6978      	ldr	r0, [r7, #20]
 8014bc2:	f7fe fe19 	bl	80137f8 <HAL_I2C_SlaveTxCpltCallback>
 8014bc6:	e00c      	b.n	8014be2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8014bc8:	7cfb      	ldrb	r3, [r7, #19]
 8014bca:	2b2a      	cmp	r3, #42	; 0x2a
 8014bcc:	d109      	bne.n	8014be2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8014bce:	697b      	ldr	r3, [r7, #20]
 8014bd0:	2222      	movs	r2, #34	; 0x22
 8014bd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8014bd4:	697b      	ldr	r3, [r7, #20]
 8014bd6:	2228      	movs	r2, #40	; 0x28
 8014bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8014bdc:	6978      	ldr	r0, [r7, #20]
 8014bde:	f7fe fe15 	bl	801380c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8014be2:	697b      	ldr	r3, [r7, #20]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	685a      	ldr	r2, [r3, #4]
 8014be8:	697b      	ldr	r3, [r7, #20]
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8014bf0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8014bf2:	e06a      	b.n	8014cca <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8014bf4:	697b      	ldr	r3, [r7, #20]
 8014bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8014bfa:	b2db      	uxtb	r3, r3
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d064      	beq.n	8014cca <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8014c00:	697b      	ldr	r3, [r7, #20]
 8014c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014c04:	b29b      	uxth	r3, r3
 8014c06:	2b01      	cmp	r3, #1
 8014c08:	d107      	bne.n	8014c1a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014c0a:	697b      	ldr	r3, [r7, #20]
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	681a      	ldr	r2, [r3, #0]
 8014c10:	697b      	ldr	r3, [r7, #20]
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014c18:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8014c1a:	697b      	ldr	r3, [r7, #20]
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	685a      	ldr	r2, [r3, #4]
 8014c20:	697b      	ldr	r3, [r7, #20]
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8014c28:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8014c30:	d009      	beq.n	8014c46 <I2C_DMAXferCplt+0x11e>
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	2b08      	cmp	r3, #8
 8014c36:	d006      	beq.n	8014c46 <I2C_DMAXferCplt+0x11e>
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8014c3e:	d002      	beq.n	8014c46 <I2C_DMAXferCplt+0x11e>
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	2b20      	cmp	r3, #32
 8014c44:	d107      	bne.n	8014c56 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014c46:	697b      	ldr	r3, [r7, #20]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	681a      	ldr	r2, [r3, #0]
 8014c4c:	697b      	ldr	r3, [r7, #20]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014c54:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8014c56:	697b      	ldr	r3, [r7, #20]
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	685a      	ldr	r2, [r3, #4]
 8014c5c:	697b      	ldr	r3, [r7, #20]
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8014c64:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8014c66:	697b      	ldr	r3, [r7, #20]
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	685a      	ldr	r2, [r3, #4]
 8014c6c:	697b      	ldr	r3, [r7, #20]
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014c74:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8014c76:	697b      	ldr	r3, [r7, #20]
 8014c78:	2200      	movs	r2, #0
 8014c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8014c7c:	697b      	ldr	r3, [r7, #20]
 8014c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d003      	beq.n	8014c8c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8014c84:	6978      	ldr	r0, [r7, #20]
 8014c86:	f7fe fdf7 	bl	8013878 <HAL_I2C_ErrorCallback>
}
 8014c8a:	e01e      	b.n	8014cca <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8014c8c:	697b      	ldr	r3, [r7, #20]
 8014c8e:	2220      	movs	r2, #32
 8014c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8014c94:	697b      	ldr	r3, [r7, #20]
 8014c96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8014c9a:	b2db      	uxtb	r3, r3
 8014c9c:	2b40      	cmp	r3, #64	; 0x40
 8014c9e:	d10a      	bne.n	8014cb6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014ca0:	697b      	ldr	r3, [r7, #20]
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8014ca8:	697b      	ldr	r3, [r7, #20]
 8014caa:	2200      	movs	r2, #0
 8014cac:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8014cae:	6978      	ldr	r0, [r7, #20]
 8014cb0:	f7fe fdd8 	bl	8013864 <HAL_I2C_MemRxCpltCallback>
}
 8014cb4:	e009      	b.n	8014cca <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014cb6:	697b      	ldr	r3, [r7, #20]
 8014cb8:	2200      	movs	r2, #0
 8014cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8014cbe:	697b      	ldr	r3, [r7, #20]
 8014cc0:	2212      	movs	r2, #18
 8014cc2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8014cc4:	6978      	ldr	r0, [r7, #20]
 8014cc6:	f7f7 fb83 	bl	800c3d0 <HAL_I2C_MasterRxCpltCallback>
}
 8014cca:	bf00      	nop
 8014ccc:	3718      	adds	r7, #24
 8014cce:	46bd      	mov	sp, r7
 8014cd0:	bd80      	pop	{r7, pc}

08014cd2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8014cd2:	b580      	push	{r7, lr}
 8014cd4:	b084      	sub	sp, #16
 8014cd6:	af00      	add	r7, sp, #0
 8014cd8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014cde:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d003      	beq.n	8014cf0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014cec:	2200      	movs	r2, #0
 8014cee:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d003      	beq.n	8014d00 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8014d00:	6878      	ldr	r0, [r7, #4]
 8014d02:	f7fd fd1b 	bl	801273c <HAL_DMA_GetError>
 8014d06:	4603      	mov	r3, r0
 8014d08:	2b02      	cmp	r3, #2
 8014d0a:	d01b      	beq.n	8014d44 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	681a      	ldr	r2, [r3, #0]
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014d1a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	2200      	movs	r2, #0
 8014d20:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	2220      	movs	r2, #32
 8014d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	2200      	movs	r2, #0
 8014d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d36:	f043 0210 	orr.w	r2, r3, #16
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8014d3e:	68f8      	ldr	r0, [r7, #12]
 8014d40:	f7fe fd9a 	bl	8013878 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8014d44:	bf00      	nop
 8014d46:	3710      	adds	r7, #16
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	bd80      	pop	{r7, pc}

08014d4c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8014d4c:	b580      	push	{r7, lr}
 8014d4e:	b086      	sub	sp, #24
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014d54:	2300      	movs	r3, #0
 8014d56:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d5c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8014d5e:	697b      	ldr	r3, [r7, #20]
 8014d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014d64:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8014d66:	4b4b      	ldr	r3, [pc, #300]	; (8014e94 <I2C_DMAAbort+0x148>)
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	08db      	lsrs	r3, r3, #3
 8014d6c:	4a4a      	ldr	r2, [pc, #296]	; (8014e98 <I2C_DMAAbort+0x14c>)
 8014d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8014d72:	0a1a      	lsrs	r2, r3, #8
 8014d74:	4613      	mov	r3, r2
 8014d76:	009b      	lsls	r3, r3, #2
 8014d78:	4413      	add	r3, r2
 8014d7a:	00da      	lsls	r2, r3, #3
 8014d7c:	1ad3      	subs	r3, r2, r3
 8014d7e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d106      	bne.n	8014d94 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014d86:	697b      	ldr	r3, [r7, #20]
 8014d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d8a:	f043 0220 	orr.w	r2, r3, #32
 8014d8e:	697b      	ldr	r3, [r7, #20]
 8014d90:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8014d92:	e00a      	b.n	8014daa <I2C_DMAAbort+0x5e>
    }
    count--;
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	3b01      	subs	r3, #1
 8014d98:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8014d9a:	697b      	ldr	r3, [r7, #20]
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014da8:	d0ea      	beq.n	8014d80 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8014daa:	697b      	ldr	r3, [r7, #20]
 8014dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d003      	beq.n	8014dba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8014db2:	697b      	ldr	r3, [r7, #20]
 8014db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014db6:	2200      	movs	r2, #0
 8014db8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8014dba:	697b      	ldr	r3, [r7, #20]
 8014dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d003      	beq.n	8014dca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8014dc2:	697b      	ldr	r3, [r7, #20]
 8014dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014dc6:	2200      	movs	r2, #0
 8014dc8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014dca:	697b      	ldr	r3, [r7, #20]
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	681a      	ldr	r2, [r3, #0]
 8014dd0:	697b      	ldr	r3, [r7, #20]
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014dd8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8014dda:	697b      	ldr	r3, [r7, #20]
 8014ddc:	2200      	movs	r2, #0
 8014dde:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8014de0:	697b      	ldr	r3, [r7, #20]
 8014de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d003      	beq.n	8014df0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8014de8:	697b      	ldr	r3, [r7, #20]
 8014dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014dec:	2200      	movs	r2, #0
 8014dee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8014df0:	697b      	ldr	r3, [r7, #20]
 8014df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d003      	beq.n	8014e00 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8014df8:	697b      	ldr	r3, [r7, #20]
 8014dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014dfc:	2200      	movs	r2, #0
 8014dfe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8014e00:	697b      	ldr	r3, [r7, #20]
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	681a      	ldr	r2, [r3, #0]
 8014e06:	697b      	ldr	r3, [r7, #20]
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	f022 0201 	bic.w	r2, r2, #1
 8014e0e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8014e10:	697b      	ldr	r3, [r7, #20]
 8014e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014e16:	b2db      	uxtb	r3, r3
 8014e18:	2b60      	cmp	r3, #96	; 0x60
 8014e1a:	d10e      	bne.n	8014e3a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8014e1c:	697b      	ldr	r3, [r7, #20]
 8014e1e:	2220      	movs	r2, #32
 8014e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8014e24:	697b      	ldr	r3, [r7, #20]
 8014e26:	2200      	movs	r2, #0
 8014e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8014e2c:	697b      	ldr	r3, [r7, #20]
 8014e2e:	2200      	movs	r2, #0
 8014e30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8014e32:	6978      	ldr	r0, [r7, #20]
 8014e34:	f7fe fd2a 	bl	801388c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8014e38:	e027      	b.n	8014e8a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8014e3a:	7cfb      	ldrb	r3, [r7, #19]
 8014e3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8014e40:	2b28      	cmp	r3, #40	; 0x28
 8014e42:	d117      	bne.n	8014e74 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8014e44:	697b      	ldr	r3, [r7, #20]
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	681a      	ldr	r2, [r3, #0]
 8014e4a:	697b      	ldr	r3, [r7, #20]
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	f042 0201 	orr.w	r2, r2, #1
 8014e52:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014e54:	697b      	ldr	r3, [r7, #20]
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	681a      	ldr	r2, [r3, #0]
 8014e5a:	697b      	ldr	r3, [r7, #20]
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014e62:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8014e64:	697b      	ldr	r3, [r7, #20]
 8014e66:	2200      	movs	r2, #0
 8014e68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8014e6a:	697b      	ldr	r3, [r7, #20]
 8014e6c:	2228      	movs	r2, #40	; 0x28
 8014e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8014e72:	e007      	b.n	8014e84 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8014e74:	697b      	ldr	r3, [r7, #20]
 8014e76:	2220      	movs	r2, #32
 8014e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014e7c:	697b      	ldr	r3, [r7, #20]
 8014e7e:	2200      	movs	r2, #0
 8014e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8014e84:	6978      	ldr	r0, [r7, #20]
 8014e86:	f7fe fcf7 	bl	8013878 <HAL_I2C_ErrorCallback>
}
 8014e8a:	bf00      	nop
 8014e8c:	3718      	adds	r7, #24
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	bd80      	pop	{r7, pc}
 8014e92:	bf00      	nop
 8014e94:	2000001c 	.word	0x2000001c
 8014e98:	14f8b589 	.word	0x14f8b589

08014e9c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8014e9c:	b480      	push	{r7}
 8014e9e:	b085      	sub	sp, #20
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014ea4:	2300      	movs	r3, #0
 8014ea6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8014ea8:	4b13      	ldr	r3, [pc, #76]	; (8014ef8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	08db      	lsrs	r3, r3, #3
 8014eae:	4a13      	ldr	r2, [pc, #76]	; (8014efc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8014eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8014eb4:	0a1a      	lsrs	r2, r3, #8
 8014eb6:	4613      	mov	r3, r2
 8014eb8:	009b      	lsls	r3, r3, #2
 8014eba:	4413      	add	r3, r2
 8014ebc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	3b01      	subs	r3, #1
 8014ec2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d107      	bne.n	8014eda <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ece:	f043 0220 	orr.w	r2, r3, #32
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8014ed6:	2301      	movs	r3, #1
 8014ed8:	e008      	b.n	8014eec <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014ee8:	d0e9      	beq.n	8014ebe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8014eea:	2300      	movs	r3, #0
}
 8014eec:	4618      	mov	r0, r3
 8014eee:	3714      	adds	r7, #20
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef6:	4770      	bx	lr
 8014ef8:	2000001c 	.word	0x2000001c
 8014efc:	14f8b589 	.word	0x14f8b589

08014f00 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8014f00:	b480      	push	{r7}
 8014f02:	b083      	sub	sp, #12
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f0c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8014f10:	d103      	bne.n	8014f1a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	2201      	movs	r2, #1
 8014f16:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8014f18:	e007      	b.n	8014f2a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f1e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8014f22:	d102      	bne.n	8014f2a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	2208      	movs	r2, #8
 8014f28:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8014f2a:	bf00      	nop
 8014f2c:	370c      	adds	r7, #12
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f34:	4770      	bx	lr
	...

08014f38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014f38:	b580      	push	{r7, lr}
 8014f3a:	b086      	sub	sp, #24
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d101      	bne.n	8014f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8014f46:	2301      	movs	r3, #1
 8014f48:	e25b      	b.n	8015402 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	f003 0301 	and.w	r3, r3, #1
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d075      	beq.n	8015042 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8014f56:	4ba3      	ldr	r3, [pc, #652]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 8014f58:	689b      	ldr	r3, [r3, #8]
 8014f5a:	f003 030c 	and.w	r3, r3, #12
 8014f5e:	2b04      	cmp	r3, #4
 8014f60:	d00c      	beq.n	8014f7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8014f62:	4ba0      	ldr	r3, [pc, #640]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 8014f64:	689b      	ldr	r3, [r3, #8]
 8014f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8014f6a:	2b08      	cmp	r3, #8
 8014f6c:	d112      	bne.n	8014f94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8014f6e:	4b9d      	ldr	r3, [pc, #628]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 8014f70:	685b      	ldr	r3, [r3, #4]
 8014f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014f76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014f7a:	d10b      	bne.n	8014f94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014f7c:	4b99      	ldr	r3, [pc, #612]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d05b      	beq.n	8015040 <HAL_RCC_OscConfig+0x108>
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	685b      	ldr	r3, [r3, #4]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d157      	bne.n	8015040 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8014f90:	2301      	movs	r3, #1
 8014f92:	e236      	b.n	8015402 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	685b      	ldr	r3, [r3, #4]
 8014f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014f9c:	d106      	bne.n	8014fac <HAL_RCC_OscConfig+0x74>
 8014f9e:	4b91      	ldr	r3, [pc, #580]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	4a90      	ldr	r2, [pc, #576]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 8014fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014fa8:	6013      	str	r3, [r2, #0]
 8014faa:	e01d      	b.n	8014fe8 <HAL_RCC_OscConfig+0xb0>
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	685b      	ldr	r3, [r3, #4]
 8014fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8014fb4:	d10c      	bne.n	8014fd0 <HAL_RCC_OscConfig+0x98>
 8014fb6:	4b8b      	ldr	r3, [pc, #556]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	4a8a      	ldr	r2, [pc, #552]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 8014fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014fc0:	6013      	str	r3, [r2, #0]
 8014fc2:	4b88      	ldr	r3, [pc, #544]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	4a87      	ldr	r2, [pc, #540]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 8014fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014fcc:	6013      	str	r3, [r2, #0]
 8014fce:	e00b      	b.n	8014fe8 <HAL_RCC_OscConfig+0xb0>
 8014fd0:	4b84      	ldr	r3, [pc, #528]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	4a83      	ldr	r2, [pc, #524]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 8014fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014fda:	6013      	str	r3, [r2, #0]
 8014fdc:	4b81      	ldr	r3, [pc, #516]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	4a80      	ldr	r2, [pc, #512]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 8014fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	685b      	ldr	r3, [r3, #4]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d013      	beq.n	8015018 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014ff0:	f7fc f8ac 	bl	801114c <HAL_GetTick>
 8014ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8014ff6:	e008      	b.n	801500a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014ff8:	f7fc f8a8 	bl	801114c <HAL_GetTick>
 8014ffc:	4602      	mov	r2, r0
 8014ffe:	693b      	ldr	r3, [r7, #16]
 8015000:	1ad3      	subs	r3, r2, r3
 8015002:	2b64      	cmp	r3, #100	; 0x64
 8015004:	d901      	bls.n	801500a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8015006:	2303      	movs	r3, #3
 8015008:	e1fb      	b.n	8015402 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801500a:	4b76      	ldr	r3, [pc, #472]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015012:	2b00      	cmp	r3, #0
 8015014:	d0f0      	beq.n	8014ff8 <HAL_RCC_OscConfig+0xc0>
 8015016:	e014      	b.n	8015042 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015018:	f7fc f898 	bl	801114c <HAL_GetTick>
 801501c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801501e:	e008      	b.n	8015032 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8015020:	f7fc f894 	bl	801114c <HAL_GetTick>
 8015024:	4602      	mov	r2, r0
 8015026:	693b      	ldr	r3, [r7, #16]
 8015028:	1ad3      	subs	r3, r2, r3
 801502a:	2b64      	cmp	r3, #100	; 0x64
 801502c:	d901      	bls.n	8015032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801502e:	2303      	movs	r3, #3
 8015030:	e1e7      	b.n	8015402 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8015032:	4b6c      	ldr	r3, [pc, #432]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801503a:	2b00      	cmp	r3, #0
 801503c:	d1f0      	bne.n	8015020 <HAL_RCC_OscConfig+0xe8>
 801503e:	e000      	b.n	8015042 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	f003 0302 	and.w	r3, r3, #2
 801504a:	2b00      	cmp	r3, #0
 801504c:	d063      	beq.n	8015116 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801504e:	4b65      	ldr	r3, [pc, #404]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 8015050:	689b      	ldr	r3, [r3, #8]
 8015052:	f003 030c 	and.w	r3, r3, #12
 8015056:	2b00      	cmp	r3, #0
 8015058:	d00b      	beq.n	8015072 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801505a:	4b62      	ldr	r3, [pc, #392]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 801505c:	689b      	ldr	r3, [r3, #8]
 801505e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8015062:	2b08      	cmp	r3, #8
 8015064:	d11c      	bne.n	80150a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8015066:	4b5f      	ldr	r3, [pc, #380]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 8015068:	685b      	ldr	r3, [r3, #4]
 801506a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801506e:	2b00      	cmp	r3, #0
 8015070:	d116      	bne.n	80150a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8015072:	4b5c      	ldr	r3, [pc, #368]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	f003 0302 	and.w	r3, r3, #2
 801507a:	2b00      	cmp	r3, #0
 801507c:	d005      	beq.n	801508a <HAL_RCC_OscConfig+0x152>
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	68db      	ldr	r3, [r3, #12]
 8015082:	2b01      	cmp	r3, #1
 8015084:	d001      	beq.n	801508a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8015086:	2301      	movs	r3, #1
 8015088:	e1bb      	b.n	8015402 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801508a:	4b56      	ldr	r3, [pc, #344]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	691b      	ldr	r3, [r3, #16]
 8015096:	00db      	lsls	r3, r3, #3
 8015098:	4952      	ldr	r1, [pc, #328]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 801509a:	4313      	orrs	r3, r2
 801509c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801509e:	e03a      	b.n	8015116 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	68db      	ldr	r3, [r3, #12]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d020      	beq.n	80150ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80150a8:	4b4f      	ldr	r3, [pc, #316]	; (80151e8 <HAL_RCC_OscConfig+0x2b0>)
 80150aa:	2201      	movs	r2, #1
 80150ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80150ae:	f7fc f84d 	bl	801114c <HAL_GetTick>
 80150b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80150b4:	e008      	b.n	80150c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80150b6:	f7fc f849 	bl	801114c <HAL_GetTick>
 80150ba:	4602      	mov	r2, r0
 80150bc:	693b      	ldr	r3, [r7, #16]
 80150be:	1ad3      	subs	r3, r2, r3
 80150c0:	2b02      	cmp	r3, #2
 80150c2:	d901      	bls.n	80150c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80150c4:	2303      	movs	r3, #3
 80150c6:	e19c      	b.n	8015402 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80150c8:	4b46      	ldr	r3, [pc, #280]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	f003 0302 	and.w	r3, r3, #2
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d0f0      	beq.n	80150b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80150d4:	4b43      	ldr	r3, [pc, #268]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	691b      	ldr	r3, [r3, #16]
 80150e0:	00db      	lsls	r3, r3, #3
 80150e2:	4940      	ldr	r1, [pc, #256]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 80150e4:	4313      	orrs	r3, r2
 80150e6:	600b      	str	r3, [r1, #0]
 80150e8:	e015      	b.n	8015116 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80150ea:	4b3f      	ldr	r3, [pc, #252]	; (80151e8 <HAL_RCC_OscConfig+0x2b0>)
 80150ec:	2200      	movs	r2, #0
 80150ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80150f0:	f7fc f82c 	bl	801114c <HAL_GetTick>
 80150f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80150f6:	e008      	b.n	801510a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80150f8:	f7fc f828 	bl	801114c <HAL_GetTick>
 80150fc:	4602      	mov	r2, r0
 80150fe:	693b      	ldr	r3, [r7, #16]
 8015100:	1ad3      	subs	r3, r2, r3
 8015102:	2b02      	cmp	r3, #2
 8015104:	d901      	bls.n	801510a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8015106:	2303      	movs	r3, #3
 8015108:	e17b      	b.n	8015402 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801510a:	4b36      	ldr	r3, [pc, #216]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	f003 0302 	and.w	r3, r3, #2
 8015112:	2b00      	cmp	r3, #0
 8015114:	d1f0      	bne.n	80150f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	f003 0308 	and.w	r3, r3, #8
 801511e:	2b00      	cmp	r3, #0
 8015120:	d030      	beq.n	8015184 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	695b      	ldr	r3, [r3, #20]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d016      	beq.n	8015158 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801512a:	4b30      	ldr	r3, [pc, #192]	; (80151ec <HAL_RCC_OscConfig+0x2b4>)
 801512c:	2201      	movs	r2, #1
 801512e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015130:	f7fc f80c 	bl	801114c <HAL_GetTick>
 8015134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8015136:	e008      	b.n	801514a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015138:	f7fc f808 	bl	801114c <HAL_GetTick>
 801513c:	4602      	mov	r2, r0
 801513e:	693b      	ldr	r3, [r7, #16]
 8015140:	1ad3      	subs	r3, r2, r3
 8015142:	2b02      	cmp	r3, #2
 8015144:	d901      	bls.n	801514a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8015146:	2303      	movs	r3, #3
 8015148:	e15b      	b.n	8015402 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801514a:	4b26      	ldr	r3, [pc, #152]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 801514c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801514e:	f003 0302 	and.w	r3, r3, #2
 8015152:	2b00      	cmp	r3, #0
 8015154:	d0f0      	beq.n	8015138 <HAL_RCC_OscConfig+0x200>
 8015156:	e015      	b.n	8015184 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8015158:	4b24      	ldr	r3, [pc, #144]	; (80151ec <HAL_RCC_OscConfig+0x2b4>)
 801515a:	2200      	movs	r2, #0
 801515c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801515e:	f7fb fff5 	bl	801114c <HAL_GetTick>
 8015162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8015164:	e008      	b.n	8015178 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015166:	f7fb fff1 	bl	801114c <HAL_GetTick>
 801516a:	4602      	mov	r2, r0
 801516c:	693b      	ldr	r3, [r7, #16]
 801516e:	1ad3      	subs	r3, r2, r3
 8015170:	2b02      	cmp	r3, #2
 8015172:	d901      	bls.n	8015178 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8015174:	2303      	movs	r3, #3
 8015176:	e144      	b.n	8015402 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8015178:	4b1a      	ldr	r3, [pc, #104]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 801517a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801517c:	f003 0302 	and.w	r3, r3, #2
 8015180:	2b00      	cmp	r3, #0
 8015182:	d1f0      	bne.n	8015166 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	f003 0304 	and.w	r3, r3, #4
 801518c:	2b00      	cmp	r3, #0
 801518e:	f000 80a0 	beq.w	80152d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8015192:	2300      	movs	r3, #0
 8015194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015196:	4b13      	ldr	r3, [pc, #76]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 8015198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801519a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d10f      	bne.n	80151c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80151a2:	2300      	movs	r3, #0
 80151a4:	60bb      	str	r3, [r7, #8]
 80151a6:	4b0f      	ldr	r3, [pc, #60]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 80151a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80151aa:	4a0e      	ldr	r2, [pc, #56]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 80151ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80151b0:	6413      	str	r3, [r2, #64]	; 0x40
 80151b2:	4b0c      	ldr	r3, [pc, #48]	; (80151e4 <HAL_RCC_OscConfig+0x2ac>)
 80151b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80151b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80151ba:	60bb      	str	r3, [r7, #8]
 80151bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80151be:	2301      	movs	r3, #1
 80151c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80151c2:	4b0b      	ldr	r3, [pc, #44]	; (80151f0 <HAL_RCC_OscConfig+0x2b8>)
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d121      	bne.n	8015212 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80151ce:	4b08      	ldr	r3, [pc, #32]	; (80151f0 <HAL_RCC_OscConfig+0x2b8>)
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	4a07      	ldr	r2, [pc, #28]	; (80151f0 <HAL_RCC_OscConfig+0x2b8>)
 80151d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80151d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80151da:	f7fb ffb7 	bl	801114c <HAL_GetTick>
 80151de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80151e0:	e011      	b.n	8015206 <HAL_RCC_OscConfig+0x2ce>
 80151e2:	bf00      	nop
 80151e4:	40023800 	.word	0x40023800
 80151e8:	42470000 	.word	0x42470000
 80151ec:	42470e80 	.word	0x42470e80
 80151f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80151f4:	f7fb ffaa 	bl	801114c <HAL_GetTick>
 80151f8:	4602      	mov	r2, r0
 80151fa:	693b      	ldr	r3, [r7, #16]
 80151fc:	1ad3      	subs	r3, r2, r3
 80151fe:	2b02      	cmp	r3, #2
 8015200:	d901      	bls.n	8015206 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8015202:	2303      	movs	r3, #3
 8015204:	e0fd      	b.n	8015402 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015206:	4b81      	ldr	r3, [pc, #516]	; (801540c <HAL_RCC_OscConfig+0x4d4>)
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801520e:	2b00      	cmp	r3, #0
 8015210:	d0f0      	beq.n	80151f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	689b      	ldr	r3, [r3, #8]
 8015216:	2b01      	cmp	r3, #1
 8015218:	d106      	bne.n	8015228 <HAL_RCC_OscConfig+0x2f0>
 801521a:	4b7d      	ldr	r3, [pc, #500]	; (8015410 <HAL_RCC_OscConfig+0x4d8>)
 801521c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801521e:	4a7c      	ldr	r2, [pc, #496]	; (8015410 <HAL_RCC_OscConfig+0x4d8>)
 8015220:	f043 0301 	orr.w	r3, r3, #1
 8015224:	6713      	str	r3, [r2, #112]	; 0x70
 8015226:	e01c      	b.n	8015262 <HAL_RCC_OscConfig+0x32a>
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	689b      	ldr	r3, [r3, #8]
 801522c:	2b05      	cmp	r3, #5
 801522e:	d10c      	bne.n	801524a <HAL_RCC_OscConfig+0x312>
 8015230:	4b77      	ldr	r3, [pc, #476]	; (8015410 <HAL_RCC_OscConfig+0x4d8>)
 8015232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015234:	4a76      	ldr	r2, [pc, #472]	; (8015410 <HAL_RCC_OscConfig+0x4d8>)
 8015236:	f043 0304 	orr.w	r3, r3, #4
 801523a:	6713      	str	r3, [r2, #112]	; 0x70
 801523c:	4b74      	ldr	r3, [pc, #464]	; (8015410 <HAL_RCC_OscConfig+0x4d8>)
 801523e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015240:	4a73      	ldr	r2, [pc, #460]	; (8015410 <HAL_RCC_OscConfig+0x4d8>)
 8015242:	f043 0301 	orr.w	r3, r3, #1
 8015246:	6713      	str	r3, [r2, #112]	; 0x70
 8015248:	e00b      	b.n	8015262 <HAL_RCC_OscConfig+0x32a>
 801524a:	4b71      	ldr	r3, [pc, #452]	; (8015410 <HAL_RCC_OscConfig+0x4d8>)
 801524c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801524e:	4a70      	ldr	r2, [pc, #448]	; (8015410 <HAL_RCC_OscConfig+0x4d8>)
 8015250:	f023 0301 	bic.w	r3, r3, #1
 8015254:	6713      	str	r3, [r2, #112]	; 0x70
 8015256:	4b6e      	ldr	r3, [pc, #440]	; (8015410 <HAL_RCC_OscConfig+0x4d8>)
 8015258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801525a:	4a6d      	ldr	r2, [pc, #436]	; (8015410 <HAL_RCC_OscConfig+0x4d8>)
 801525c:	f023 0304 	bic.w	r3, r3, #4
 8015260:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	689b      	ldr	r3, [r3, #8]
 8015266:	2b00      	cmp	r3, #0
 8015268:	d015      	beq.n	8015296 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801526a:	f7fb ff6f 	bl	801114c <HAL_GetTick>
 801526e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8015270:	e00a      	b.n	8015288 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015272:	f7fb ff6b 	bl	801114c <HAL_GetTick>
 8015276:	4602      	mov	r2, r0
 8015278:	693b      	ldr	r3, [r7, #16]
 801527a:	1ad3      	subs	r3, r2, r3
 801527c:	f241 3288 	movw	r2, #5000	; 0x1388
 8015280:	4293      	cmp	r3, r2
 8015282:	d901      	bls.n	8015288 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8015284:	2303      	movs	r3, #3
 8015286:	e0bc      	b.n	8015402 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8015288:	4b61      	ldr	r3, [pc, #388]	; (8015410 <HAL_RCC_OscConfig+0x4d8>)
 801528a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801528c:	f003 0302 	and.w	r3, r3, #2
 8015290:	2b00      	cmp	r3, #0
 8015292:	d0ee      	beq.n	8015272 <HAL_RCC_OscConfig+0x33a>
 8015294:	e014      	b.n	80152c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015296:	f7fb ff59 	bl	801114c <HAL_GetTick>
 801529a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801529c:	e00a      	b.n	80152b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801529e:	f7fb ff55 	bl	801114c <HAL_GetTick>
 80152a2:	4602      	mov	r2, r0
 80152a4:	693b      	ldr	r3, [r7, #16]
 80152a6:	1ad3      	subs	r3, r2, r3
 80152a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80152ac:	4293      	cmp	r3, r2
 80152ae:	d901      	bls.n	80152b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80152b0:	2303      	movs	r3, #3
 80152b2:	e0a6      	b.n	8015402 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80152b4:	4b56      	ldr	r3, [pc, #344]	; (8015410 <HAL_RCC_OscConfig+0x4d8>)
 80152b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152b8:	f003 0302 	and.w	r3, r3, #2
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d1ee      	bne.n	801529e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80152c0:	7dfb      	ldrb	r3, [r7, #23]
 80152c2:	2b01      	cmp	r3, #1
 80152c4:	d105      	bne.n	80152d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80152c6:	4b52      	ldr	r3, [pc, #328]	; (8015410 <HAL_RCC_OscConfig+0x4d8>)
 80152c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80152ca:	4a51      	ldr	r2, [pc, #324]	; (8015410 <HAL_RCC_OscConfig+0x4d8>)
 80152cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80152d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	699b      	ldr	r3, [r3, #24]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	f000 8092 	beq.w	8015400 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80152dc:	4b4c      	ldr	r3, [pc, #304]	; (8015410 <HAL_RCC_OscConfig+0x4d8>)
 80152de:	689b      	ldr	r3, [r3, #8]
 80152e0:	f003 030c 	and.w	r3, r3, #12
 80152e4:	2b08      	cmp	r3, #8
 80152e6:	d05c      	beq.n	80153a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	699b      	ldr	r3, [r3, #24]
 80152ec:	2b02      	cmp	r3, #2
 80152ee:	d141      	bne.n	8015374 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80152f0:	4b48      	ldr	r3, [pc, #288]	; (8015414 <HAL_RCC_OscConfig+0x4dc>)
 80152f2:	2200      	movs	r2, #0
 80152f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80152f6:	f7fb ff29 	bl	801114c <HAL_GetTick>
 80152fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80152fc:	e008      	b.n	8015310 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80152fe:	f7fb ff25 	bl	801114c <HAL_GetTick>
 8015302:	4602      	mov	r2, r0
 8015304:	693b      	ldr	r3, [r7, #16]
 8015306:	1ad3      	subs	r3, r2, r3
 8015308:	2b02      	cmp	r3, #2
 801530a:	d901      	bls.n	8015310 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 801530c:	2303      	movs	r3, #3
 801530e:	e078      	b.n	8015402 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8015310:	4b3f      	ldr	r3, [pc, #252]	; (8015410 <HAL_RCC_OscConfig+0x4d8>)
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015318:	2b00      	cmp	r3, #0
 801531a:	d1f0      	bne.n	80152fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	69da      	ldr	r2, [r3, #28]
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	6a1b      	ldr	r3, [r3, #32]
 8015324:	431a      	orrs	r2, r3
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801532a:	019b      	lsls	r3, r3, #6
 801532c:	431a      	orrs	r2, r3
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015332:	085b      	lsrs	r3, r3, #1
 8015334:	3b01      	subs	r3, #1
 8015336:	041b      	lsls	r3, r3, #16
 8015338:	431a      	orrs	r2, r3
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801533e:	061b      	lsls	r3, r3, #24
 8015340:	4933      	ldr	r1, [pc, #204]	; (8015410 <HAL_RCC_OscConfig+0x4d8>)
 8015342:	4313      	orrs	r3, r2
 8015344:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8015346:	4b33      	ldr	r3, [pc, #204]	; (8015414 <HAL_RCC_OscConfig+0x4dc>)
 8015348:	2201      	movs	r2, #1
 801534a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801534c:	f7fb fefe 	bl	801114c <HAL_GetTick>
 8015350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8015352:	e008      	b.n	8015366 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015354:	f7fb fefa 	bl	801114c <HAL_GetTick>
 8015358:	4602      	mov	r2, r0
 801535a:	693b      	ldr	r3, [r7, #16]
 801535c:	1ad3      	subs	r3, r2, r3
 801535e:	2b02      	cmp	r3, #2
 8015360:	d901      	bls.n	8015366 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8015362:	2303      	movs	r3, #3
 8015364:	e04d      	b.n	8015402 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8015366:	4b2a      	ldr	r3, [pc, #168]	; (8015410 <HAL_RCC_OscConfig+0x4d8>)
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801536e:	2b00      	cmp	r3, #0
 8015370:	d0f0      	beq.n	8015354 <HAL_RCC_OscConfig+0x41c>
 8015372:	e045      	b.n	8015400 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015374:	4b27      	ldr	r3, [pc, #156]	; (8015414 <HAL_RCC_OscConfig+0x4dc>)
 8015376:	2200      	movs	r2, #0
 8015378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801537a:	f7fb fee7 	bl	801114c <HAL_GetTick>
 801537e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8015380:	e008      	b.n	8015394 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015382:	f7fb fee3 	bl	801114c <HAL_GetTick>
 8015386:	4602      	mov	r2, r0
 8015388:	693b      	ldr	r3, [r7, #16]
 801538a:	1ad3      	subs	r3, r2, r3
 801538c:	2b02      	cmp	r3, #2
 801538e:	d901      	bls.n	8015394 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8015390:	2303      	movs	r3, #3
 8015392:	e036      	b.n	8015402 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8015394:	4b1e      	ldr	r3, [pc, #120]	; (8015410 <HAL_RCC_OscConfig+0x4d8>)
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801539c:	2b00      	cmp	r3, #0
 801539e:	d1f0      	bne.n	8015382 <HAL_RCC_OscConfig+0x44a>
 80153a0:	e02e      	b.n	8015400 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	699b      	ldr	r3, [r3, #24]
 80153a6:	2b01      	cmp	r3, #1
 80153a8:	d101      	bne.n	80153ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80153aa:	2301      	movs	r3, #1
 80153ac:	e029      	b.n	8015402 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80153ae:	4b18      	ldr	r3, [pc, #96]	; (8015410 <HAL_RCC_OscConfig+0x4d8>)
 80153b0:	685b      	ldr	r3, [r3, #4]
 80153b2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	69db      	ldr	r3, [r3, #28]
 80153be:	429a      	cmp	r2, r3
 80153c0:	d11c      	bne.n	80153fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80153cc:	429a      	cmp	r2, r3
 80153ce:	d115      	bne.n	80153fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80153d0:	68fa      	ldr	r2, [r7, #12]
 80153d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80153d6:	4013      	ands	r3, r2
 80153d8:	687a      	ldr	r2, [r7, #4]
 80153da:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80153dc:	4293      	cmp	r3, r2
 80153de:	d10d      	bne.n	80153fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80153ea:	429a      	cmp	r2, r3
 80153ec:	d106      	bne.n	80153fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80153f8:	429a      	cmp	r2, r3
 80153fa:	d001      	beq.n	8015400 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80153fc:	2301      	movs	r3, #1
 80153fe:	e000      	b.n	8015402 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8015400:	2300      	movs	r3, #0
}
 8015402:	4618      	mov	r0, r3
 8015404:	3718      	adds	r7, #24
 8015406:	46bd      	mov	sp, r7
 8015408:	bd80      	pop	{r7, pc}
 801540a:	bf00      	nop
 801540c:	40007000 	.word	0x40007000
 8015410:	40023800 	.word	0x40023800
 8015414:	42470060 	.word	0x42470060

08015418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b084      	sub	sp, #16
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
 8015420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d101      	bne.n	801542c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8015428:	2301      	movs	r3, #1
 801542a:	e0cc      	b.n	80155c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801542c:	4b68      	ldr	r3, [pc, #416]	; (80155d0 <HAL_RCC_ClockConfig+0x1b8>)
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	f003 030f 	and.w	r3, r3, #15
 8015434:	683a      	ldr	r2, [r7, #0]
 8015436:	429a      	cmp	r2, r3
 8015438:	d90c      	bls.n	8015454 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801543a:	4b65      	ldr	r3, [pc, #404]	; (80155d0 <HAL_RCC_ClockConfig+0x1b8>)
 801543c:	683a      	ldr	r2, [r7, #0]
 801543e:	b2d2      	uxtb	r2, r2
 8015440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8015442:	4b63      	ldr	r3, [pc, #396]	; (80155d0 <HAL_RCC_ClockConfig+0x1b8>)
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	f003 030f 	and.w	r3, r3, #15
 801544a:	683a      	ldr	r2, [r7, #0]
 801544c:	429a      	cmp	r2, r3
 801544e:	d001      	beq.n	8015454 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8015450:	2301      	movs	r3, #1
 8015452:	e0b8      	b.n	80155c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	f003 0302 	and.w	r3, r3, #2
 801545c:	2b00      	cmp	r3, #0
 801545e:	d020      	beq.n	80154a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	f003 0304 	and.w	r3, r3, #4
 8015468:	2b00      	cmp	r3, #0
 801546a:	d005      	beq.n	8015478 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801546c:	4b59      	ldr	r3, [pc, #356]	; (80155d4 <HAL_RCC_ClockConfig+0x1bc>)
 801546e:	689b      	ldr	r3, [r3, #8]
 8015470:	4a58      	ldr	r2, [pc, #352]	; (80155d4 <HAL_RCC_ClockConfig+0x1bc>)
 8015472:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8015476:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	f003 0308 	and.w	r3, r3, #8
 8015480:	2b00      	cmp	r3, #0
 8015482:	d005      	beq.n	8015490 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8015484:	4b53      	ldr	r3, [pc, #332]	; (80155d4 <HAL_RCC_ClockConfig+0x1bc>)
 8015486:	689b      	ldr	r3, [r3, #8]
 8015488:	4a52      	ldr	r2, [pc, #328]	; (80155d4 <HAL_RCC_ClockConfig+0x1bc>)
 801548a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801548e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8015490:	4b50      	ldr	r3, [pc, #320]	; (80155d4 <HAL_RCC_ClockConfig+0x1bc>)
 8015492:	689b      	ldr	r3, [r3, #8]
 8015494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	689b      	ldr	r3, [r3, #8]
 801549c:	494d      	ldr	r1, [pc, #308]	; (80155d4 <HAL_RCC_ClockConfig+0x1bc>)
 801549e:	4313      	orrs	r3, r2
 80154a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	f003 0301 	and.w	r3, r3, #1
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d044      	beq.n	8015538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	685b      	ldr	r3, [r3, #4]
 80154b2:	2b01      	cmp	r3, #1
 80154b4:	d107      	bne.n	80154c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80154b6:	4b47      	ldr	r3, [pc, #284]	; (80155d4 <HAL_RCC_ClockConfig+0x1bc>)
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d119      	bne.n	80154f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80154c2:	2301      	movs	r3, #1
 80154c4:	e07f      	b.n	80155c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	685b      	ldr	r3, [r3, #4]
 80154ca:	2b02      	cmp	r3, #2
 80154cc:	d003      	beq.n	80154d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80154d2:	2b03      	cmp	r3, #3
 80154d4:	d107      	bne.n	80154e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80154d6:	4b3f      	ldr	r3, [pc, #252]	; (80155d4 <HAL_RCC_ClockConfig+0x1bc>)
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d109      	bne.n	80154f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80154e2:	2301      	movs	r3, #1
 80154e4:	e06f      	b.n	80155c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80154e6:	4b3b      	ldr	r3, [pc, #236]	; (80155d4 <HAL_RCC_ClockConfig+0x1bc>)
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	f003 0302 	and.w	r3, r3, #2
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d101      	bne.n	80154f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80154f2:	2301      	movs	r3, #1
 80154f4:	e067      	b.n	80155c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80154f6:	4b37      	ldr	r3, [pc, #220]	; (80155d4 <HAL_RCC_ClockConfig+0x1bc>)
 80154f8:	689b      	ldr	r3, [r3, #8]
 80154fa:	f023 0203 	bic.w	r2, r3, #3
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	685b      	ldr	r3, [r3, #4]
 8015502:	4934      	ldr	r1, [pc, #208]	; (80155d4 <HAL_RCC_ClockConfig+0x1bc>)
 8015504:	4313      	orrs	r3, r2
 8015506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8015508:	f7fb fe20 	bl	801114c <HAL_GetTick>
 801550c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801550e:	e00a      	b.n	8015526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015510:	f7fb fe1c 	bl	801114c <HAL_GetTick>
 8015514:	4602      	mov	r2, r0
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	1ad3      	subs	r3, r2, r3
 801551a:	f241 3288 	movw	r2, #5000	; 0x1388
 801551e:	4293      	cmp	r3, r2
 8015520:	d901      	bls.n	8015526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8015522:	2303      	movs	r3, #3
 8015524:	e04f      	b.n	80155c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015526:	4b2b      	ldr	r3, [pc, #172]	; (80155d4 <HAL_RCC_ClockConfig+0x1bc>)
 8015528:	689b      	ldr	r3, [r3, #8]
 801552a:	f003 020c 	and.w	r2, r3, #12
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	685b      	ldr	r3, [r3, #4]
 8015532:	009b      	lsls	r3, r3, #2
 8015534:	429a      	cmp	r2, r3
 8015536:	d1eb      	bne.n	8015510 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8015538:	4b25      	ldr	r3, [pc, #148]	; (80155d0 <HAL_RCC_ClockConfig+0x1b8>)
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	f003 030f 	and.w	r3, r3, #15
 8015540:	683a      	ldr	r2, [r7, #0]
 8015542:	429a      	cmp	r2, r3
 8015544:	d20c      	bcs.n	8015560 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015546:	4b22      	ldr	r3, [pc, #136]	; (80155d0 <HAL_RCC_ClockConfig+0x1b8>)
 8015548:	683a      	ldr	r2, [r7, #0]
 801554a:	b2d2      	uxtb	r2, r2
 801554c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801554e:	4b20      	ldr	r3, [pc, #128]	; (80155d0 <HAL_RCC_ClockConfig+0x1b8>)
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	f003 030f 	and.w	r3, r3, #15
 8015556:	683a      	ldr	r2, [r7, #0]
 8015558:	429a      	cmp	r2, r3
 801555a:	d001      	beq.n	8015560 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801555c:	2301      	movs	r3, #1
 801555e:	e032      	b.n	80155c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	f003 0304 	and.w	r3, r3, #4
 8015568:	2b00      	cmp	r3, #0
 801556a:	d008      	beq.n	801557e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801556c:	4b19      	ldr	r3, [pc, #100]	; (80155d4 <HAL_RCC_ClockConfig+0x1bc>)
 801556e:	689b      	ldr	r3, [r3, #8]
 8015570:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	68db      	ldr	r3, [r3, #12]
 8015578:	4916      	ldr	r1, [pc, #88]	; (80155d4 <HAL_RCC_ClockConfig+0x1bc>)
 801557a:	4313      	orrs	r3, r2
 801557c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	f003 0308 	and.w	r3, r3, #8
 8015586:	2b00      	cmp	r3, #0
 8015588:	d009      	beq.n	801559e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801558a:	4b12      	ldr	r3, [pc, #72]	; (80155d4 <HAL_RCC_ClockConfig+0x1bc>)
 801558c:	689b      	ldr	r3, [r3, #8]
 801558e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	691b      	ldr	r3, [r3, #16]
 8015596:	00db      	lsls	r3, r3, #3
 8015598:	490e      	ldr	r1, [pc, #56]	; (80155d4 <HAL_RCC_ClockConfig+0x1bc>)
 801559a:	4313      	orrs	r3, r2
 801559c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801559e:	f000 f82d 	bl	80155fc <HAL_RCC_GetSysClockFreq>
 80155a2:	4602      	mov	r2, r0
 80155a4:	4b0b      	ldr	r3, [pc, #44]	; (80155d4 <HAL_RCC_ClockConfig+0x1bc>)
 80155a6:	689b      	ldr	r3, [r3, #8]
 80155a8:	091b      	lsrs	r3, r3, #4
 80155aa:	f003 030f 	and.w	r3, r3, #15
 80155ae:	490a      	ldr	r1, [pc, #40]	; (80155d8 <HAL_RCC_ClockConfig+0x1c0>)
 80155b0:	5ccb      	ldrb	r3, [r1, r3]
 80155b2:	fa22 f303 	lsr.w	r3, r2, r3
 80155b6:	4a09      	ldr	r2, [pc, #36]	; (80155dc <HAL_RCC_ClockConfig+0x1c4>)
 80155b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80155ba:	4b09      	ldr	r3, [pc, #36]	; (80155e0 <HAL_RCC_ClockConfig+0x1c8>)
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	4618      	mov	r0, r3
 80155c0:	f7f6 ff42 	bl	800c448 <HAL_InitTick>

  return HAL_OK;
 80155c4:	2300      	movs	r3, #0
}
 80155c6:	4618      	mov	r0, r3
 80155c8:	3710      	adds	r7, #16
 80155ca:	46bd      	mov	sp, r7
 80155cc:	bd80      	pop	{r7, pc}
 80155ce:	bf00      	nop
 80155d0:	40023c00 	.word	0x40023c00
 80155d4:	40023800 	.word	0x40023800
 80155d8:	080209ec 	.word	0x080209ec
 80155dc:	2000001c 	.word	0x2000001c
 80155e0:	20000080 	.word	0x20000080

080155e4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80155e4:	b480      	push	{r7}
 80155e6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80155e8:	4b03      	ldr	r3, [pc, #12]	; (80155f8 <HAL_RCC_EnableCSS+0x14>)
 80155ea:	2201      	movs	r2, #1
 80155ec:	601a      	str	r2, [r3, #0]
}
 80155ee:	bf00      	nop
 80155f0:	46bd      	mov	sp, r7
 80155f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f6:	4770      	bx	lr
 80155f8:	4247004c 	.word	0x4247004c

080155fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80155fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8015600:	b084      	sub	sp, #16
 8015602:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8015604:	2300      	movs	r3, #0
 8015606:	607b      	str	r3, [r7, #4]
 8015608:	2300      	movs	r3, #0
 801560a:	60fb      	str	r3, [r7, #12]
 801560c:	2300      	movs	r3, #0
 801560e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8015610:	2300      	movs	r3, #0
 8015612:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8015614:	4b67      	ldr	r3, [pc, #412]	; (80157b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8015616:	689b      	ldr	r3, [r3, #8]
 8015618:	f003 030c 	and.w	r3, r3, #12
 801561c:	2b08      	cmp	r3, #8
 801561e:	d00d      	beq.n	801563c <HAL_RCC_GetSysClockFreq+0x40>
 8015620:	2b08      	cmp	r3, #8
 8015622:	f200 80bd 	bhi.w	80157a0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8015626:	2b00      	cmp	r3, #0
 8015628:	d002      	beq.n	8015630 <HAL_RCC_GetSysClockFreq+0x34>
 801562a:	2b04      	cmp	r3, #4
 801562c:	d003      	beq.n	8015636 <HAL_RCC_GetSysClockFreq+0x3a>
 801562e:	e0b7      	b.n	80157a0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8015630:	4b61      	ldr	r3, [pc, #388]	; (80157b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8015632:	60bb      	str	r3, [r7, #8]
       break;
 8015634:	e0b7      	b.n	80157a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8015636:	4b61      	ldr	r3, [pc, #388]	; (80157bc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8015638:	60bb      	str	r3, [r7, #8]
      break;
 801563a:	e0b4      	b.n	80157a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801563c:	4b5d      	ldr	r3, [pc, #372]	; (80157b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801563e:	685b      	ldr	r3, [r3, #4]
 8015640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015644:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8015646:	4b5b      	ldr	r3, [pc, #364]	; (80157b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8015648:	685b      	ldr	r3, [r3, #4]
 801564a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801564e:	2b00      	cmp	r3, #0
 8015650:	d04d      	beq.n	80156ee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8015652:	4b58      	ldr	r3, [pc, #352]	; (80157b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8015654:	685b      	ldr	r3, [r3, #4]
 8015656:	099b      	lsrs	r3, r3, #6
 8015658:	461a      	mov	r2, r3
 801565a:	f04f 0300 	mov.w	r3, #0
 801565e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8015662:	f04f 0100 	mov.w	r1, #0
 8015666:	ea02 0800 	and.w	r8, r2, r0
 801566a:	ea03 0901 	and.w	r9, r3, r1
 801566e:	4640      	mov	r0, r8
 8015670:	4649      	mov	r1, r9
 8015672:	f04f 0200 	mov.w	r2, #0
 8015676:	f04f 0300 	mov.w	r3, #0
 801567a:	014b      	lsls	r3, r1, #5
 801567c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8015680:	0142      	lsls	r2, r0, #5
 8015682:	4610      	mov	r0, r2
 8015684:	4619      	mov	r1, r3
 8015686:	ebb0 0008 	subs.w	r0, r0, r8
 801568a:	eb61 0109 	sbc.w	r1, r1, r9
 801568e:	f04f 0200 	mov.w	r2, #0
 8015692:	f04f 0300 	mov.w	r3, #0
 8015696:	018b      	lsls	r3, r1, #6
 8015698:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801569c:	0182      	lsls	r2, r0, #6
 801569e:	1a12      	subs	r2, r2, r0
 80156a0:	eb63 0301 	sbc.w	r3, r3, r1
 80156a4:	f04f 0000 	mov.w	r0, #0
 80156a8:	f04f 0100 	mov.w	r1, #0
 80156ac:	00d9      	lsls	r1, r3, #3
 80156ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80156b2:	00d0      	lsls	r0, r2, #3
 80156b4:	4602      	mov	r2, r0
 80156b6:	460b      	mov	r3, r1
 80156b8:	eb12 0208 	adds.w	r2, r2, r8
 80156bc:	eb43 0309 	adc.w	r3, r3, r9
 80156c0:	f04f 0000 	mov.w	r0, #0
 80156c4:	f04f 0100 	mov.w	r1, #0
 80156c8:	0259      	lsls	r1, r3, #9
 80156ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80156ce:	0250      	lsls	r0, r2, #9
 80156d0:	4602      	mov	r2, r0
 80156d2:	460b      	mov	r3, r1
 80156d4:	4610      	mov	r0, r2
 80156d6:	4619      	mov	r1, r3
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	461a      	mov	r2, r3
 80156dc:	f04f 0300 	mov.w	r3, #0
 80156e0:	f7eb fad2 	bl	8000c88 <__aeabi_uldivmod>
 80156e4:	4602      	mov	r2, r0
 80156e6:	460b      	mov	r3, r1
 80156e8:	4613      	mov	r3, r2
 80156ea:	60fb      	str	r3, [r7, #12]
 80156ec:	e04a      	b.n	8015784 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80156ee:	4b31      	ldr	r3, [pc, #196]	; (80157b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80156f0:	685b      	ldr	r3, [r3, #4]
 80156f2:	099b      	lsrs	r3, r3, #6
 80156f4:	461a      	mov	r2, r3
 80156f6:	f04f 0300 	mov.w	r3, #0
 80156fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80156fe:	f04f 0100 	mov.w	r1, #0
 8015702:	ea02 0400 	and.w	r4, r2, r0
 8015706:	ea03 0501 	and.w	r5, r3, r1
 801570a:	4620      	mov	r0, r4
 801570c:	4629      	mov	r1, r5
 801570e:	f04f 0200 	mov.w	r2, #0
 8015712:	f04f 0300 	mov.w	r3, #0
 8015716:	014b      	lsls	r3, r1, #5
 8015718:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801571c:	0142      	lsls	r2, r0, #5
 801571e:	4610      	mov	r0, r2
 8015720:	4619      	mov	r1, r3
 8015722:	1b00      	subs	r0, r0, r4
 8015724:	eb61 0105 	sbc.w	r1, r1, r5
 8015728:	f04f 0200 	mov.w	r2, #0
 801572c:	f04f 0300 	mov.w	r3, #0
 8015730:	018b      	lsls	r3, r1, #6
 8015732:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8015736:	0182      	lsls	r2, r0, #6
 8015738:	1a12      	subs	r2, r2, r0
 801573a:	eb63 0301 	sbc.w	r3, r3, r1
 801573e:	f04f 0000 	mov.w	r0, #0
 8015742:	f04f 0100 	mov.w	r1, #0
 8015746:	00d9      	lsls	r1, r3, #3
 8015748:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801574c:	00d0      	lsls	r0, r2, #3
 801574e:	4602      	mov	r2, r0
 8015750:	460b      	mov	r3, r1
 8015752:	1912      	adds	r2, r2, r4
 8015754:	eb45 0303 	adc.w	r3, r5, r3
 8015758:	f04f 0000 	mov.w	r0, #0
 801575c:	f04f 0100 	mov.w	r1, #0
 8015760:	0299      	lsls	r1, r3, #10
 8015762:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8015766:	0290      	lsls	r0, r2, #10
 8015768:	4602      	mov	r2, r0
 801576a:	460b      	mov	r3, r1
 801576c:	4610      	mov	r0, r2
 801576e:	4619      	mov	r1, r3
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	461a      	mov	r2, r3
 8015774:	f04f 0300 	mov.w	r3, #0
 8015778:	f7eb fa86 	bl	8000c88 <__aeabi_uldivmod>
 801577c:	4602      	mov	r2, r0
 801577e:	460b      	mov	r3, r1
 8015780:	4613      	mov	r3, r2
 8015782:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8015784:	4b0b      	ldr	r3, [pc, #44]	; (80157b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8015786:	685b      	ldr	r3, [r3, #4]
 8015788:	0c1b      	lsrs	r3, r3, #16
 801578a:	f003 0303 	and.w	r3, r3, #3
 801578e:	3301      	adds	r3, #1
 8015790:	005b      	lsls	r3, r3, #1
 8015792:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8015794:	68fa      	ldr	r2, [r7, #12]
 8015796:	683b      	ldr	r3, [r7, #0]
 8015798:	fbb2 f3f3 	udiv	r3, r2, r3
 801579c:	60bb      	str	r3, [r7, #8]
      break;
 801579e:	e002      	b.n	80157a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80157a0:	4b05      	ldr	r3, [pc, #20]	; (80157b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80157a2:	60bb      	str	r3, [r7, #8]
      break;
 80157a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80157a6:	68bb      	ldr	r3, [r7, #8]
}
 80157a8:	4618      	mov	r0, r3
 80157aa:	3710      	adds	r7, #16
 80157ac:	46bd      	mov	sp, r7
 80157ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80157b2:	bf00      	nop
 80157b4:	40023800 	.word	0x40023800
 80157b8:	00f42400 	.word	0x00f42400
 80157bc:	007a1200 	.word	0x007a1200

080157c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80157c0:	b480      	push	{r7}
 80157c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80157c4:	4b03      	ldr	r3, [pc, #12]	; (80157d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80157c6:	681b      	ldr	r3, [r3, #0]
}
 80157c8:	4618      	mov	r0, r3
 80157ca:	46bd      	mov	sp, r7
 80157cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d0:	4770      	bx	lr
 80157d2:	bf00      	nop
 80157d4:	2000001c 	.word	0x2000001c

080157d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80157d8:	b580      	push	{r7, lr}
 80157da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80157dc:	f7ff fff0 	bl	80157c0 <HAL_RCC_GetHCLKFreq>
 80157e0:	4602      	mov	r2, r0
 80157e2:	4b05      	ldr	r3, [pc, #20]	; (80157f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80157e4:	689b      	ldr	r3, [r3, #8]
 80157e6:	0a9b      	lsrs	r3, r3, #10
 80157e8:	f003 0307 	and.w	r3, r3, #7
 80157ec:	4903      	ldr	r1, [pc, #12]	; (80157fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80157ee:	5ccb      	ldrb	r3, [r1, r3]
 80157f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80157f4:	4618      	mov	r0, r3
 80157f6:	bd80      	pop	{r7, pc}
 80157f8:	40023800 	.word	0x40023800
 80157fc:	080209fc 	.word	0x080209fc

08015800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015800:	b580      	push	{r7, lr}
 8015802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8015804:	f7ff ffdc 	bl	80157c0 <HAL_RCC_GetHCLKFreq>
 8015808:	4602      	mov	r2, r0
 801580a:	4b05      	ldr	r3, [pc, #20]	; (8015820 <HAL_RCC_GetPCLK2Freq+0x20>)
 801580c:	689b      	ldr	r3, [r3, #8]
 801580e:	0b5b      	lsrs	r3, r3, #13
 8015810:	f003 0307 	and.w	r3, r3, #7
 8015814:	4903      	ldr	r1, [pc, #12]	; (8015824 <HAL_RCC_GetPCLK2Freq+0x24>)
 8015816:	5ccb      	ldrb	r3, [r1, r3]
 8015818:	fa22 f303 	lsr.w	r3, r2, r3
}
 801581c:	4618      	mov	r0, r3
 801581e:	bd80      	pop	{r7, pc}
 8015820:	40023800 	.word	0x40023800
 8015824:	080209fc 	.word	0x080209fc

08015828 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8015828:	b480      	push	{r7}
 801582a:	b083      	sub	sp, #12
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
 8015830:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	220f      	movs	r2, #15
 8015836:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8015838:	4b12      	ldr	r3, [pc, #72]	; (8015884 <HAL_RCC_GetClockConfig+0x5c>)
 801583a:	689b      	ldr	r3, [r3, #8]
 801583c:	f003 0203 	and.w	r2, r3, #3
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8015844:	4b0f      	ldr	r3, [pc, #60]	; (8015884 <HAL_RCC_GetClockConfig+0x5c>)
 8015846:	689b      	ldr	r3, [r3, #8]
 8015848:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8015850:	4b0c      	ldr	r3, [pc, #48]	; (8015884 <HAL_RCC_GetClockConfig+0x5c>)
 8015852:	689b      	ldr	r3, [r3, #8]
 8015854:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 801585c:	4b09      	ldr	r3, [pc, #36]	; (8015884 <HAL_RCC_GetClockConfig+0x5c>)
 801585e:	689b      	ldr	r3, [r3, #8]
 8015860:	08db      	lsrs	r3, r3, #3
 8015862:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801586a:	4b07      	ldr	r3, [pc, #28]	; (8015888 <HAL_RCC_GetClockConfig+0x60>)
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	f003 020f 	and.w	r2, r3, #15
 8015872:	683b      	ldr	r3, [r7, #0]
 8015874:	601a      	str	r2, [r3, #0]
}
 8015876:	bf00      	nop
 8015878:	370c      	adds	r7, #12
 801587a:	46bd      	mov	sp, r7
 801587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015880:	4770      	bx	lr
 8015882:	bf00      	nop
 8015884:	40023800 	.word	0x40023800
 8015888:	40023c00 	.word	0x40023c00

0801588c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801588c:	b580      	push	{r7, lr}
 801588e:	b088      	sub	sp, #32
 8015890:	af00      	add	r7, sp, #0
 8015892:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	685b      	ldr	r3, [r3, #4]
 801589a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	689b      	ldr	r3, [r3, #8]
 80158a2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80158a4:	69bb      	ldr	r3, [r7, #24]
 80158a6:	099b      	lsrs	r3, r3, #6
 80158a8:	f003 0301 	and.w	r3, r3, #1
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d10f      	bne.n	80158d0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80158b0:	69bb      	ldr	r3, [r7, #24]
 80158b2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d00a      	beq.n	80158d0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80158ba:	69fb      	ldr	r3, [r7, #28]
 80158bc:	099b      	lsrs	r3, r3, #6
 80158be:	f003 0301 	and.w	r3, r3, #1
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d004      	beq.n	80158d0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158ca:	6878      	ldr	r0, [r7, #4]
 80158cc:	4798      	blx	r3
    return;
 80158ce:	e0d7      	b.n	8015a80 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80158d0:	69bb      	ldr	r3, [r7, #24]
 80158d2:	085b      	lsrs	r3, r3, #1
 80158d4:	f003 0301 	and.w	r3, r3, #1
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d00a      	beq.n	80158f2 <HAL_SPI_IRQHandler+0x66>
 80158dc:	69fb      	ldr	r3, [r7, #28]
 80158de:	09db      	lsrs	r3, r3, #7
 80158e0:	f003 0301 	and.w	r3, r3, #1
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d004      	beq.n	80158f2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80158ec:	6878      	ldr	r0, [r7, #4]
 80158ee:	4798      	blx	r3
    return;
 80158f0:	e0c6      	b.n	8015a80 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80158f2:	69bb      	ldr	r3, [r7, #24]
 80158f4:	095b      	lsrs	r3, r3, #5
 80158f6:	f003 0301 	and.w	r3, r3, #1
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d10c      	bne.n	8015918 <HAL_SPI_IRQHandler+0x8c>
 80158fe:	69bb      	ldr	r3, [r7, #24]
 8015900:	099b      	lsrs	r3, r3, #6
 8015902:	f003 0301 	and.w	r3, r3, #1
 8015906:	2b00      	cmp	r3, #0
 8015908:	d106      	bne.n	8015918 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801590a:	69bb      	ldr	r3, [r7, #24]
 801590c:	0a1b      	lsrs	r3, r3, #8
 801590e:	f003 0301 	and.w	r3, r3, #1
 8015912:	2b00      	cmp	r3, #0
 8015914:	f000 80b4 	beq.w	8015a80 <HAL_SPI_IRQHandler+0x1f4>
 8015918:	69fb      	ldr	r3, [r7, #28]
 801591a:	095b      	lsrs	r3, r3, #5
 801591c:	f003 0301 	and.w	r3, r3, #1
 8015920:	2b00      	cmp	r3, #0
 8015922:	f000 80ad 	beq.w	8015a80 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8015926:	69bb      	ldr	r3, [r7, #24]
 8015928:	099b      	lsrs	r3, r3, #6
 801592a:	f003 0301 	and.w	r3, r3, #1
 801592e:	2b00      	cmp	r3, #0
 8015930:	d023      	beq.n	801597a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8015938:	b2db      	uxtb	r3, r3
 801593a:	2b03      	cmp	r3, #3
 801593c:	d011      	beq.n	8015962 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015942:	f043 0204 	orr.w	r2, r3, #4
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801594a:	2300      	movs	r3, #0
 801594c:	617b      	str	r3, [r7, #20]
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	68db      	ldr	r3, [r3, #12]
 8015954:	617b      	str	r3, [r7, #20]
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	689b      	ldr	r3, [r3, #8]
 801595c:	617b      	str	r3, [r7, #20]
 801595e:	697b      	ldr	r3, [r7, #20]
 8015960:	e00b      	b.n	801597a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015962:	2300      	movs	r3, #0
 8015964:	613b      	str	r3, [r7, #16]
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	68db      	ldr	r3, [r3, #12]
 801596c:	613b      	str	r3, [r7, #16]
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	689b      	ldr	r3, [r3, #8]
 8015974:	613b      	str	r3, [r7, #16]
 8015976:	693b      	ldr	r3, [r7, #16]
        return;
 8015978:	e082      	b.n	8015a80 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801597a:	69bb      	ldr	r3, [r7, #24]
 801597c:	095b      	lsrs	r3, r3, #5
 801597e:	f003 0301 	and.w	r3, r3, #1
 8015982:	2b00      	cmp	r3, #0
 8015984:	d014      	beq.n	80159b0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801598a:	f043 0201 	orr.w	r2, r3, #1
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8015992:	2300      	movs	r3, #0
 8015994:	60fb      	str	r3, [r7, #12]
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	689b      	ldr	r3, [r3, #8]
 801599c:	60fb      	str	r3, [r7, #12]
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	681a      	ldr	r2, [r3, #0]
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80159ac:	601a      	str	r2, [r3, #0]
 80159ae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80159b0:	69bb      	ldr	r3, [r7, #24]
 80159b2:	0a1b      	lsrs	r3, r3, #8
 80159b4:	f003 0301 	and.w	r3, r3, #1
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d00c      	beq.n	80159d6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80159c0:	f043 0208 	orr.w	r2, r3, #8
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80159c8:	2300      	movs	r3, #0
 80159ca:	60bb      	str	r3, [r7, #8]
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	689b      	ldr	r3, [r3, #8]
 80159d2:	60bb      	str	r3, [r7, #8]
 80159d4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d04f      	beq.n	8015a7e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	685a      	ldr	r2, [r3, #4]
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80159ec:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	2201      	movs	r2, #1
 80159f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80159f6:	69fb      	ldr	r3, [r7, #28]
 80159f8:	f003 0302 	and.w	r3, r3, #2
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d104      	bne.n	8015a0a <HAL_SPI_IRQHandler+0x17e>
 8015a00:	69fb      	ldr	r3, [r7, #28]
 8015a02:	f003 0301 	and.w	r3, r3, #1
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d034      	beq.n	8015a74 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	685a      	ldr	r2, [r3, #4]
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	f022 0203 	bic.w	r2, r2, #3
 8015a18:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d011      	beq.n	8015a46 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015a26:	4a18      	ldr	r2, [pc, #96]	; (8015a88 <HAL_SPI_IRQHandler+0x1fc>)
 8015a28:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015a2e:	4618      	mov	r0, r3
 8015a30:	f7fc fcca 	bl	80123c8 <HAL_DMA_Abort_IT>
 8015a34:	4603      	mov	r3, r0
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d005      	beq.n	8015a46 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015a3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d016      	beq.n	8015a7c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015a52:	4a0d      	ldr	r2, [pc, #52]	; (8015a88 <HAL_SPI_IRQHandler+0x1fc>)
 8015a54:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	f7fc fcb4 	bl	80123c8 <HAL_DMA_Abort_IT>
 8015a60:	4603      	mov	r3, r0
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d00a      	beq.n	8015a7c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015a6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8015a72:	e003      	b.n	8015a7c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8015a74:	6878      	ldr	r0, [r7, #4]
 8015a76:	f000 f809 	bl	8015a8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8015a7a:	e000      	b.n	8015a7e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8015a7c:	bf00      	nop
    return;
 8015a7e:	bf00      	nop
  }
}
 8015a80:	3720      	adds	r7, #32
 8015a82:	46bd      	mov	sp, r7
 8015a84:	bd80      	pop	{r7, pc}
 8015a86:	bf00      	nop
 8015a88:	08015aa1 	.word	0x08015aa1

08015a8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8015a8c:	b480      	push	{r7}
 8015a8e:	b083      	sub	sp, #12
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8015a94:	bf00      	nop
 8015a96:	370c      	adds	r7, #12
 8015a98:	46bd      	mov	sp, r7
 8015a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a9e:	4770      	bx	lr

08015aa0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	b084      	sub	sp, #16
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015aac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	2200      	movs	r2, #0
 8015ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8015aba:	68f8      	ldr	r0, [r7, #12]
 8015abc:	f7ff ffe6 	bl	8015a8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8015ac0:	bf00      	nop
 8015ac2:	3710      	adds	r7, #16
 8015ac4:	46bd      	mov	sp, r7
 8015ac6:	bd80      	pop	{r7, pc}

08015ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	b082      	sub	sp, #8
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d101      	bne.n	8015ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015ad6:	2301      	movs	r3, #1
 8015ad8:	e01d      	b.n	8015b16 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015ae0:	b2db      	uxtb	r3, r3
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d106      	bne.n	8015af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	2200      	movs	r2, #0
 8015aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015aee:	6878      	ldr	r0, [r7, #4]
 8015af0:	f7ec fd4c 	bl	800258c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	2202      	movs	r2, #2
 8015af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	681a      	ldr	r2, [r3, #0]
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	3304      	adds	r3, #4
 8015b04:	4619      	mov	r1, r3
 8015b06:	4610      	mov	r0, r2
 8015b08:	f000 fc3e 	bl	8016388 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	2201      	movs	r2, #1
 8015b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015b14:	2300      	movs	r3, #0
}
 8015b16:	4618      	mov	r0, r3
 8015b18:	3708      	adds	r7, #8
 8015b1a:	46bd      	mov	sp, r7
 8015b1c:	bd80      	pop	{r7, pc}

08015b1e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8015b1e:	b480      	push	{r7}
 8015b20:	b085      	sub	sp, #20
 8015b22:	af00      	add	r7, sp, #0
 8015b24:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	2202      	movs	r2, #2
 8015b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	689b      	ldr	r3, [r3, #8]
 8015b34:	f003 0307 	and.w	r3, r3, #7
 8015b38:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	2b06      	cmp	r3, #6
 8015b3e:	d007      	beq.n	8015b50 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	681a      	ldr	r2, [r3, #0]
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	f042 0201 	orr.w	r2, r2, #1
 8015b4e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	2201      	movs	r2, #1
 8015b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8015b58:	2300      	movs	r3, #0
}
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	3714      	adds	r7, #20
 8015b5e:	46bd      	mov	sp, r7
 8015b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b64:	4770      	bx	lr

08015b66 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8015b66:	b480      	push	{r7}
 8015b68:	b085      	sub	sp, #20
 8015b6a:	af00      	add	r7, sp, #0
 8015b6c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	68da      	ldr	r2, [r3, #12]
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	f042 0201 	orr.w	r2, r2, #1
 8015b7c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	689b      	ldr	r3, [r3, #8]
 8015b84:	f003 0307 	and.w	r3, r3, #7
 8015b88:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	2b06      	cmp	r3, #6
 8015b8e:	d007      	beq.n	8015ba0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	681a      	ldr	r2, [r3, #0]
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	f042 0201 	orr.w	r2, r2, #1
 8015b9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8015ba0:	2300      	movs	r3, #0
}
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	3714      	adds	r7, #20
 8015ba6:	46bd      	mov	sp, r7
 8015ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bac:	4770      	bx	lr

08015bae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8015bae:	b580      	push	{r7, lr}
 8015bb0:	b082      	sub	sp, #8
 8015bb2:	af00      	add	r7, sp, #0
 8015bb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d101      	bne.n	8015bc0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8015bbc:	2301      	movs	r3, #1
 8015bbe:	e01d      	b.n	8015bfc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015bc6:	b2db      	uxtb	r3, r3
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d106      	bne.n	8015bda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	2200      	movs	r2, #0
 8015bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8015bd4:	6878      	ldr	r0, [r7, #4]
 8015bd6:	f7ec fb9b 	bl	8002310 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	2202      	movs	r2, #2
 8015bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	681a      	ldr	r2, [r3, #0]
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	3304      	adds	r3, #4
 8015bea:	4619      	mov	r1, r3
 8015bec:	4610      	mov	r0, r2
 8015bee:	f000 fbcb 	bl	8016388 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	2201      	movs	r2, #1
 8015bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015bfa:	2300      	movs	r3, #0
}
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	3708      	adds	r7, #8
 8015c00:	46bd      	mov	sp, r7
 8015c02:	bd80      	pop	{r7, pc}

08015c04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015c04:	b580      	push	{r7, lr}
 8015c06:	b084      	sub	sp, #16
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	6078      	str	r0, [r7, #4]
 8015c0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	2201      	movs	r2, #1
 8015c14:	6839      	ldr	r1, [r7, #0]
 8015c16:	4618      	mov	r0, r3
 8015c18:	f000 fea0 	bl	801695c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	4a15      	ldr	r2, [pc, #84]	; (8015c78 <HAL_TIM_PWM_Start+0x74>)
 8015c22:	4293      	cmp	r3, r2
 8015c24:	d004      	beq.n	8015c30 <HAL_TIM_PWM_Start+0x2c>
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	4a14      	ldr	r2, [pc, #80]	; (8015c7c <HAL_TIM_PWM_Start+0x78>)
 8015c2c:	4293      	cmp	r3, r2
 8015c2e:	d101      	bne.n	8015c34 <HAL_TIM_PWM_Start+0x30>
 8015c30:	2301      	movs	r3, #1
 8015c32:	e000      	b.n	8015c36 <HAL_TIM_PWM_Start+0x32>
 8015c34:	2300      	movs	r3, #0
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d007      	beq.n	8015c4a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8015c48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	689b      	ldr	r3, [r3, #8]
 8015c50:	f003 0307 	and.w	r3, r3, #7
 8015c54:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	2b06      	cmp	r3, #6
 8015c5a:	d007      	beq.n	8015c6c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	681a      	ldr	r2, [r3, #0]
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	f042 0201 	orr.w	r2, r2, #1
 8015c6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8015c6c:	2300      	movs	r3, #0
}
 8015c6e:	4618      	mov	r0, r3
 8015c70:	3710      	adds	r7, #16
 8015c72:	46bd      	mov	sp, r7
 8015c74:	bd80      	pop	{r7, pc}
 8015c76:	bf00      	nop
 8015c78:	40010000 	.word	0x40010000
 8015c7c:	40010400 	.word	0x40010400

08015c80 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8015c80:	b580      	push	{r7, lr}
 8015c82:	b086      	sub	sp, #24
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	6078      	str	r0, [r7, #4]
 8015c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d101      	bne.n	8015c94 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8015c90:	2301      	movs	r3, #1
 8015c92:	e083      	b.n	8015d9c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015c9a:	b2db      	uxtb	r3, r3
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d106      	bne.n	8015cae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	2200      	movs	r2, #0
 8015ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8015ca8:	6878      	ldr	r0, [r7, #4]
 8015caa:	f7ec ff23 	bl	8002af4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	2202      	movs	r2, #2
 8015cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	689b      	ldr	r3, [r3, #8]
 8015cbc:	687a      	ldr	r2, [r7, #4]
 8015cbe:	6812      	ldr	r2, [r2, #0]
 8015cc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015cc4:	f023 0307 	bic.w	r3, r3, #7
 8015cc8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	681a      	ldr	r2, [r3, #0]
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	3304      	adds	r3, #4
 8015cd2:	4619      	mov	r1, r3
 8015cd4:	4610      	mov	r0, r2
 8015cd6:	f000 fb57 	bl	8016388 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	689b      	ldr	r3, [r3, #8]
 8015ce0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	699b      	ldr	r3, [r3, #24]
 8015ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	6a1b      	ldr	r3, [r3, #32]
 8015cf0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8015cf2:	683b      	ldr	r3, [r7, #0]
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	697a      	ldr	r2, [r7, #20]
 8015cf8:	4313      	orrs	r3, r2
 8015cfa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8015cfc:	693b      	ldr	r3, [r7, #16]
 8015cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015d02:	f023 0303 	bic.w	r3, r3, #3
 8015d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8015d08:	683b      	ldr	r3, [r7, #0]
 8015d0a:	689a      	ldr	r2, [r3, #8]
 8015d0c:	683b      	ldr	r3, [r7, #0]
 8015d0e:	699b      	ldr	r3, [r3, #24]
 8015d10:	021b      	lsls	r3, r3, #8
 8015d12:	4313      	orrs	r3, r2
 8015d14:	693a      	ldr	r2, [r7, #16]
 8015d16:	4313      	orrs	r3, r2
 8015d18:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8015d1a:	693b      	ldr	r3, [r7, #16]
 8015d1c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8015d20:	f023 030c 	bic.w	r3, r3, #12
 8015d24:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8015d26:	693b      	ldr	r3, [r7, #16]
 8015d28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015d2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015d30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8015d32:	683b      	ldr	r3, [r7, #0]
 8015d34:	68da      	ldr	r2, [r3, #12]
 8015d36:	683b      	ldr	r3, [r7, #0]
 8015d38:	69db      	ldr	r3, [r3, #28]
 8015d3a:	021b      	lsls	r3, r3, #8
 8015d3c:	4313      	orrs	r3, r2
 8015d3e:	693a      	ldr	r2, [r7, #16]
 8015d40:	4313      	orrs	r3, r2
 8015d42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8015d44:	683b      	ldr	r3, [r7, #0]
 8015d46:	691b      	ldr	r3, [r3, #16]
 8015d48:	011a      	lsls	r2, r3, #4
 8015d4a:	683b      	ldr	r3, [r7, #0]
 8015d4c:	6a1b      	ldr	r3, [r3, #32]
 8015d4e:	031b      	lsls	r3, r3, #12
 8015d50:	4313      	orrs	r3, r2
 8015d52:	693a      	ldr	r2, [r7, #16]
 8015d54:	4313      	orrs	r3, r2
 8015d56:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8015d5e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8015d66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8015d68:	683b      	ldr	r3, [r7, #0]
 8015d6a:	685a      	ldr	r2, [r3, #4]
 8015d6c:	683b      	ldr	r3, [r7, #0]
 8015d6e:	695b      	ldr	r3, [r3, #20]
 8015d70:	011b      	lsls	r3, r3, #4
 8015d72:	4313      	orrs	r3, r2
 8015d74:	68fa      	ldr	r2, [r7, #12]
 8015d76:	4313      	orrs	r3, r2
 8015d78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	697a      	ldr	r2, [r7, #20]
 8015d80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	693a      	ldr	r2, [r7, #16]
 8015d88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	68fa      	ldr	r2, [r7, #12]
 8015d90:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	2201      	movs	r2, #1
 8015d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015d9a:	2300      	movs	r3, #0
}
 8015d9c:	4618      	mov	r0, r3
 8015d9e:	3718      	adds	r7, #24
 8015da0:	46bd      	mov	sp, r7
 8015da2:	bd80      	pop	{r7, pc}

08015da4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015da4:	b580      	push	{r7, lr}
 8015da6:	b082      	sub	sp, #8
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	6078      	str	r0, [r7, #4]
 8015dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8015dae:	683b      	ldr	r3, [r7, #0]
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d003      	beq.n	8015dbc <HAL_TIM_Encoder_Start+0x18>
 8015db4:	683b      	ldr	r3, [r7, #0]
 8015db6:	2b04      	cmp	r3, #4
 8015db8:	d008      	beq.n	8015dcc <HAL_TIM_Encoder_Start+0x28>
 8015dba:	e00f      	b.n	8015ddc <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	2201      	movs	r2, #1
 8015dc2:	2100      	movs	r1, #0
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	f000 fdc9 	bl	801695c <TIM_CCxChannelCmd>
      break;
 8015dca:	e016      	b.n	8015dfa <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	2201      	movs	r2, #1
 8015dd2:	2104      	movs	r1, #4
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	f000 fdc1 	bl	801695c <TIM_CCxChannelCmd>
      break;
 8015dda:	e00e      	b.n	8015dfa <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	2201      	movs	r2, #1
 8015de2:	2100      	movs	r1, #0
 8015de4:	4618      	mov	r0, r3
 8015de6:	f000 fdb9 	bl	801695c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	2201      	movs	r2, #1
 8015df0:	2104      	movs	r1, #4
 8015df2:	4618      	mov	r0, r3
 8015df4:	f000 fdb2 	bl	801695c <TIM_CCxChannelCmd>
      break;
 8015df8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	681a      	ldr	r2, [r3, #0]
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	f042 0201 	orr.w	r2, r2, #1
 8015e08:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8015e0a:	2300      	movs	r3, #0
}
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	3708      	adds	r7, #8
 8015e10:	46bd      	mov	sp, r7
 8015e12:	bd80      	pop	{r7, pc}

08015e14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8015e14:	b580      	push	{r7, lr}
 8015e16:	b082      	sub	sp, #8
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	691b      	ldr	r3, [r3, #16]
 8015e22:	f003 0302 	and.w	r3, r3, #2
 8015e26:	2b02      	cmp	r3, #2
 8015e28:	d122      	bne.n	8015e70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	68db      	ldr	r3, [r3, #12]
 8015e30:	f003 0302 	and.w	r3, r3, #2
 8015e34:	2b02      	cmp	r3, #2
 8015e36:	d11b      	bne.n	8015e70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	f06f 0202 	mvn.w	r2, #2
 8015e40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	2201      	movs	r2, #1
 8015e46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	699b      	ldr	r3, [r3, #24]
 8015e4e:	f003 0303 	and.w	r3, r3, #3
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d003      	beq.n	8015e5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8015e56:	6878      	ldr	r0, [r7, #4]
 8015e58:	f000 fa78 	bl	801634c <HAL_TIM_IC_CaptureCallback>
 8015e5c:	e005      	b.n	8015e6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8015e5e:	6878      	ldr	r0, [r7, #4]
 8015e60:	f000 fa6a 	bl	8016338 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015e64:	6878      	ldr	r0, [r7, #4]
 8015e66:	f000 fa7b 	bl	8016360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	2200      	movs	r2, #0
 8015e6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	691b      	ldr	r3, [r3, #16]
 8015e76:	f003 0304 	and.w	r3, r3, #4
 8015e7a:	2b04      	cmp	r3, #4
 8015e7c:	d122      	bne.n	8015ec4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	68db      	ldr	r3, [r3, #12]
 8015e84:	f003 0304 	and.w	r3, r3, #4
 8015e88:	2b04      	cmp	r3, #4
 8015e8a:	d11b      	bne.n	8015ec4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	f06f 0204 	mvn.w	r2, #4
 8015e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	2202      	movs	r2, #2
 8015e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	699b      	ldr	r3, [r3, #24]
 8015ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d003      	beq.n	8015eb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015eaa:	6878      	ldr	r0, [r7, #4]
 8015eac:	f000 fa4e 	bl	801634c <HAL_TIM_IC_CaptureCallback>
 8015eb0:	e005      	b.n	8015ebe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015eb2:	6878      	ldr	r0, [r7, #4]
 8015eb4:	f000 fa40 	bl	8016338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015eb8:	6878      	ldr	r0, [r7, #4]
 8015eba:	f000 fa51 	bl	8016360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	2200      	movs	r2, #0
 8015ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	691b      	ldr	r3, [r3, #16]
 8015eca:	f003 0308 	and.w	r3, r3, #8
 8015ece:	2b08      	cmp	r3, #8
 8015ed0:	d122      	bne.n	8015f18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	68db      	ldr	r3, [r3, #12]
 8015ed8:	f003 0308 	and.w	r3, r3, #8
 8015edc:	2b08      	cmp	r3, #8
 8015ede:	d11b      	bne.n	8015f18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	f06f 0208 	mvn.w	r2, #8
 8015ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	2204      	movs	r2, #4
 8015eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	69db      	ldr	r3, [r3, #28]
 8015ef6:	f003 0303 	and.w	r3, r3, #3
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d003      	beq.n	8015f06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015efe:	6878      	ldr	r0, [r7, #4]
 8015f00:	f000 fa24 	bl	801634c <HAL_TIM_IC_CaptureCallback>
 8015f04:	e005      	b.n	8015f12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015f06:	6878      	ldr	r0, [r7, #4]
 8015f08:	f000 fa16 	bl	8016338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015f0c:	6878      	ldr	r0, [r7, #4]
 8015f0e:	f000 fa27 	bl	8016360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	2200      	movs	r2, #0
 8015f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	691b      	ldr	r3, [r3, #16]
 8015f1e:	f003 0310 	and.w	r3, r3, #16
 8015f22:	2b10      	cmp	r3, #16
 8015f24:	d122      	bne.n	8015f6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	68db      	ldr	r3, [r3, #12]
 8015f2c:	f003 0310 	and.w	r3, r3, #16
 8015f30:	2b10      	cmp	r3, #16
 8015f32:	d11b      	bne.n	8015f6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	f06f 0210 	mvn.w	r2, #16
 8015f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	2208      	movs	r2, #8
 8015f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	69db      	ldr	r3, [r3, #28]
 8015f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d003      	beq.n	8015f5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015f52:	6878      	ldr	r0, [r7, #4]
 8015f54:	f000 f9fa 	bl	801634c <HAL_TIM_IC_CaptureCallback>
 8015f58:	e005      	b.n	8015f66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015f5a:	6878      	ldr	r0, [r7, #4]
 8015f5c:	f000 f9ec 	bl	8016338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015f60:	6878      	ldr	r0, [r7, #4]
 8015f62:	f000 f9fd 	bl	8016360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	2200      	movs	r2, #0
 8015f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	691b      	ldr	r3, [r3, #16]
 8015f72:	f003 0301 	and.w	r3, r3, #1
 8015f76:	2b01      	cmp	r3, #1
 8015f78:	d10e      	bne.n	8015f98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	68db      	ldr	r3, [r3, #12]
 8015f80:	f003 0301 	and.w	r3, r3, #1
 8015f84:	2b01      	cmp	r3, #1
 8015f86:	d107      	bne.n	8015f98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	f06f 0201 	mvn.w	r2, #1
 8015f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8015f92:	6878      	ldr	r0, [r7, #4]
 8015f94:	f7f6 fa00 	bl	800c398 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	691b      	ldr	r3, [r3, #16]
 8015f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015fa2:	2b80      	cmp	r3, #128	; 0x80
 8015fa4:	d10e      	bne.n	8015fc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	68db      	ldr	r3, [r3, #12]
 8015fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015fb0:	2b80      	cmp	r3, #128	; 0x80
 8015fb2:	d107      	bne.n	8015fc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8015fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8015fbe:	6878      	ldr	r0, [r7, #4]
 8015fc0:	f000 fd78 	bl	8016ab4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	691b      	ldr	r3, [r3, #16]
 8015fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015fce:	2b40      	cmp	r3, #64	; 0x40
 8015fd0:	d10e      	bne.n	8015ff0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	68db      	ldr	r3, [r3, #12]
 8015fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015fdc:	2b40      	cmp	r3, #64	; 0x40
 8015fde:	d107      	bne.n	8015ff0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8015fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8015fea:	6878      	ldr	r0, [r7, #4]
 8015fec:	f000 f9c2 	bl	8016374 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	691b      	ldr	r3, [r3, #16]
 8015ff6:	f003 0320 	and.w	r3, r3, #32
 8015ffa:	2b20      	cmp	r3, #32
 8015ffc:	d10e      	bne.n	801601c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	68db      	ldr	r3, [r3, #12]
 8016004:	f003 0320 	and.w	r3, r3, #32
 8016008:	2b20      	cmp	r3, #32
 801600a:	d107      	bne.n	801601c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	f06f 0220 	mvn.w	r2, #32
 8016014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8016016:	6878      	ldr	r0, [r7, #4]
 8016018:	f000 fd42 	bl	8016aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801601c:	bf00      	nop
 801601e:	3708      	adds	r7, #8
 8016020:	46bd      	mov	sp, r7
 8016022:	bd80      	pop	{r7, pc}

08016024 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016024:	b580      	push	{r7, lr}
 8016026:	b084      	sub	sp, #16
 8016028:	af00      	add	r7, sp, #0
 801602a:	60f8      	str	r0, [r7, #12]
 801602c:	60b9      	str	r1, [r7, #8]
 801602e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016036:	2b01      	cmp	r3, #1
 8016038:	d101      	bne.n	801603e <HAL_TIM_PWM_ConfigChannel+0x1a>
 801603a:	2302      	movs	r3, #2
 801603c:	e0b4      	b.n	80161a8 <HAL_TIM_PWM_ConfigChannel+0x184>
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	2201      	movs	r2, #1
 8016042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	2202      	movs	r2, #2
 801604a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	2b0c      	cmp	r3, #12
 8016052:	f200 809f 	bhi.w	8016194 <HAL_TIM_PWM_ConfigChannel+0x170>
 8016056:	a201      	add	r2, pc, #4	; (adr r2, 801605c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8016058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801605c:	08016091 	.word	0x08016091
 8016060:	08016195 	.word	0x08016195
 8016064:	08016195 	.word	0x08016195
 8016068:	08016195 	.word	0x08016195
 801606c:	080160d1 	.word	0x080160d1
 8016070:	08016195 	.word	0x08016195
 8016074:	08016195 	.word	0x08016195
 8016078:	08016195 	.word	0x08016195
 801607c:	08016113 	.word	0x08016113
 8016080:	08016195 	.word	0x08016195
 8016084:	08016195 	.word	0x08016195
 8016088:	08016195 	.word	0x08016195
 801608c:	08016153 	.word	0x08016153
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	68b9      	ldr	r1, [r7, #8]
 8016096:	4618      	mov	r0, r3
 8016098:	f000 fa16 	bl	80164c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	699a      	ldr	r2, [r3, #24]
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	f042 0208 	orr.w	r2, r2, #8
 80160aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	699a      	ldr	r2, [r3, #24]
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	f022 0204 	bic.w	r2, r2, #4
 80160ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	6999      	ldr	r1, [r3, #24]
 80160c2:	68bb      	ldr	r3, [r7, #8]
 80160c4:	691a      	ldr	r2, [r3, #16]
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	430a      	orrs	r2, r1
 80160cc:	619a      	str	r2, [r3, #24]
      break;
 80160ce:	e062      	b.n	8016196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	68b9      	ldr	r1, [r7, #8]
 80160d6:	4618      	mov	r0, r3
 80160d8:	f000 fa66 	bl	80165a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	699a      	ldr	r2, [r3, #24]
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80160ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	699a      	ldr	r2, [r3, #24]
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	681b      	ldr	r3, [r3, #0]
 80160f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80160fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	6999      	ldr	r1, [r3, #24]
 8016102:	68bb      	ldr	r3, [r7, #8]
 8016104:	691b      	ldr	r3, [r3, #16]
 8016106:	021a      	lsls	r2, r3, #8
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	430a      	orrs	r2, r1
 801610e:	619a      	str	r2, [r3, #24]
      break;
 8016110:	e041      	b.n	8016196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	68b9      	ldr	r1, [r7, #8]
 8016118:	4618      	mov	r0, r3
 801611a:	f000 fabb 	bl	8016694 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	69da      	ldr	r2, [r3, #28]
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	f042 0208 	orr.w	r2, r2, #8
 801612c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	69da      	ldr	r2, [r3, #28]
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	f022 0204 	bic.w	r2, r2, #4
 801613c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	69d9      	ldr	r1, [r3, #28]
 8016144:	68bb      	ldr	r3, [r7, #8]
 8016146:	691a      	ldr	r2, [r3, #16]
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	430a      	orrs	r2, r1
 801614e:	61da      	str	r2, [r3, #28]
      break;
 8016150:	e021      	b.n	8016196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	68b9      	ldr	r1, [r7, #8]
 8016158:	4618      	mov	r0, r3
 801615a:	f000 fb0f 	bl	801677c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	69da      	ldr	r2, [r3, #28]
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801616c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	69da      	ldr	r2, [r3, #28]
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801617c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	69d9      	ldr	r1, [r3, #28]
 8016184:	68bb      	ldr	r3, [r7, #8]
 8016186:	691b      	ldr	r3, [r3, #16]
 8016188:	021a      	lsls	r2, r3, #8
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	430a      	orrs	r2, r1
 8016190:	61da      	str	r2, [r3, #28]
      break;
 8016192:	e000      	b.n	8016196 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8016194:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	2201      	movs	r2, #1
 801619a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	2200      	movs	r2, #0
 80161a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80161a6:	2300      	movs	r3, #0
}
 80161a8:	4618      	mov	r0, r3
 80161aa:	3710      	adds	r7, #16
 80161ac:	46bd      	mov	sp, r7
 80161ae:	bd80      	pop	{r7, pc}

080161b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b084      	sub	sp, #16
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	6078      	str	r0, [r7, #4]
 80161b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80161c0:	2b01      	cmp	r3, #1
 80161c2:	d101      	bne.n	80161c8 <HAL_TIM_ConfigClockSource+0x18>
 80161c4:	2302      	movs	r3, #2
 80161c6:	e0b3      	b.n	8016330 <HAL_TIM_ConfigClockSource+0x180>
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	2201      	movs	r2, #1
 80161cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	2202      	movs	r2, #2
 80161d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	689b      	ldr	r3, [r3, #8]
 80161de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80161e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80161ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	68fa      	ldr	r2, [r7, #12]
 80161f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80161f8:	683b      	ldr	r3, [r7, #0]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016200:	d03e      	beq.n	8016280 <HAL_TIM_ConfigClockSource+0xd0>
 8016202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016206:	f200 8087 	bhi.w	8016318 <HAL_TIM_ConfigClockSource+0x168>
 801620a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801620e:	f000 8085 	beq.w	801631c <HAL_TIM_ConfigClockSource+0x16c>
 8016212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016216:	d87f      	bhi.n	8016318 <HAL_TIM_ConfigClockSource+0x168>
 8016218:	2b70      	cmp	r3, #112	; 0x70
 801621a:	d01a      	beq.n	8016252 <HAL_TIM_ConfigClockSource+0xa2>
 801621c:	2b70      	cmp	r3, #112	; 0x70
 801621e:	d87b      	bhi.n	8016318 <HAL_TIM_ConfigClockSource+0x168>
 8016220:	2b60      	cmp	r3, #96	; 0x60
 8016222:	d050      	beq.n	80162c6 <HAL_TIM_ConfigClockSource+0x116>
 8016224:	2b60      	cmp	r3, #96	; 0x60
 8016226:	d877      	bhi.n	8016318 <HAL_TIM_ConfigClockSource+0x168>
 8016228:	2b50      	cmp	r3, #80	; 0x50
 801622a:	d03c      	beq.n	80162a6 <HAL_TIM_ConfigClockSource+0xf6>
 801622c:	2b50      	cmp	r3, #80	; 0x50
 801622e:	d873      	bhi.n	8016318 <HAL_TIM_ConfigClockSource+0x168>
 8016230:	2b40      	cmp	r3, #64	; 0x40
 8016232:	d058      	beq.n	80162e6 <HAL_TIM_ConfigClockSource+0x136>
 8016234:	2b40      	cmp	r3, #64	; 0x40
 8016236:	d86f      	bhi.n	8016318 <HAL_TIM_ConfigClockSource+0x168>
 8016238:	2b30      	cmp	r3, #48	; 0x30
 801623a:	d064      	beq.n	8016306 <HAL_TIM_ConfigClockSource+0x156>
 801623c:	2b30      	cmp	r3, #48	; 0x30
 801623e:	d86b      	bhi.n	8016318 <HAL_TIM_ConfigClockSource+0x168>
 8016240:	2b20      	cmp	r3, #32
 8016242:	d060      	beq.n	8016306 <HAL_TIM_ConfigClockSource+0x156>
 8016244:	2b20      	cmp	r3, #32
 8016246:	d867      	bhi.n	8016318 <HAL_TIM_ConfigClockSource+0x168>
 8016248:	2b00      	cmp	r3, #0
 801624a:	d05c      	beq.n	8016306 <HAL_TIM_ConfigClockSource+0x156>
 801624c:	2b10      	cmp	r3, #16
 801624e:	d05a      	beq.n	8016306 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8016250:	e062      	b.n	8016318 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	6818      	ldr	r0, [r3, #0]
 8016256:	683b      	ldr	r3, [r7, #0]
 8016258:	6899      	ldr	r1, [r3, #8]
 801625a:	683b      	ldr	r3, [r7, #0]
 801625c:	685a      	ldr	r2, [r3, #4]
 801625e:	683b      	ldr	r3, [r7, #0]
 8016260:	68db      	ldr	r3, [r3, #12]
 8016262:	f000 fb5b 	bl	801691c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	689b      	ldr	r3, [r3, #8]
 801626c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8016274:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	68fa      	ldr	r2, [r7, #12]
 801627c:	609a      	str	r2, [r3, #8]
      break;
 801627e:	e04e      	b.n	801631e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	6818      	ldr	r0, [r3, #0]
 8016284:	683b      	ldr	r3, [r7, #0]
 8016286:	6899      	ldr	r1, [r3, #8]
 8016288:	683b      	ldr	r3, [r7, #0]
 801628a:	685a      	ldr	r2, [r3, #4]
 801628c:	683b      	ldr	r3, [r7, #0]
 801628e:	68db      	ldr	r3, [r3, #12]
 8016290:	f000 fb44 	bl	801691c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	689a      	ldr	r2, [r3, #8]
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80162a2:	609a      	str	r2, [r3, #8]
      break;
 80162a4:	e03b      	b.n	801631e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	6818      	ldr	r0, [r3, #0]
 80162aa:	683b      	ldr	r3, [r7, #0]
 80162ac:	6859      	ldr	r1, [r3, #4]
 80162ae:	683b      	ldr	r3, [r7, #0]
 80162b0:	68db      	ldr	r3, [r3, #12]
 80162b2:	461a      	mov	r2, r3
 80162b4:	f000 fab8 	bl	8016828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	2150      	movs	r1, #80	; 0x50
 80162be:	4618      	mov	r0, r3
 80162c0:	f000 fb11 	bl	80168e6 <TIM_ITRx_SetConfig>
      break;
 80162c4:	e02b      	b.n	801631e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	6818      	ldr	r0, [r3, #0]
 80162ca:	683b      	ldr	r3, [r7, #0]
 80162cc:	6859      	ldr	r1, [r3, #4]
 80162ce:	683b      	ldr	r3, [r7, #0]
 80162d0:	68db      	ldr	r3, [r3, #12]
 80162d2:	461a      	mov	r2, r3
 80162d4:	f000 fad7 	bl	8016886 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	2160      	movs	r1, #96	; 0x60
 80162de:	4618      	mov	r0, r3
 80162e0:	f000 fb01 	bl	80168e6 <TIM_ITRx_SetConfig>
      break;
 80162e4:	e01b      	b.n	801631e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	6818      	ldr	r0, [r3, #0]
 80162ea:	683b      	ldr	r3, [r7, #0]
 80162ec:	6859      	ldr	r1, [r3, #4]
 80162ee:	683b      	ldr	r3, [r7, #0]
 80162f0:	68db      	ldr	r3, [r3, #12]
 80162f2:	461a      	mov	r2, r3
 80162f4:	f000 fa98 	bl	8016828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	2140      	movs	r1, #64	; 0x40
 80162fe:	4618      	mov	r0, r3
 8016300:	f000 faf1 	bl	80168e6 <TIM_ITRx_SetConfig>
      break;
 8016304:	e00b      	b.n	801631e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	681a      	ldr	r2, [r3, #0]
 801630a:	683b      	ldr	r3, [r7, #0]
 801630c:	681b      	ldr	r3, [r3, #0]
 801630e:	4619      	mov	r1, r3
 8016310:	4610      	mov	r0, r2
 8016312:	f000 fae8 	bl	80168e6 <TIM_ITRx_SetConfig>
      break;
 8016316:	e002      	b.n	801631e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8016318:	bf00      	nop
 801631a:	e000      	b.n	801631e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 801631c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	2201      	movs	r2, #1
 8016322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	2200      	movs	r2, #0
 801632a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801632e:	2300      	movs	r3, #0
}
 8016330:	4618      	mov	r0, r3
 8016332:	3710      	adds	r7, #16
 8016334:	46bd      	mov	sp, r7
 8016336:	bd80      	pop	{r7, pc}

08016338 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8016338:	b480      	push	{r7}
 801633a:	b083      	sub	sp, #12
 801633c:	af00      	add	r7, sp, #0
 801633e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8016340:	bf00      	nop
 8016342:	370c      	adds	r7, #12
 8016344:	46bd      	mov	sp, r7
 8016346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801634a:	4770      	bx	lr

0801634c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801634c:	b480      	push	{r7}
 801634e:	b083      	sub	sp, #12
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8016354:	bf00      	nop
 8016356:	370c      	adds	r7, #12
 8016358:	46bd      	mov	sp, r7
 801635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801635e:	4770      	bx	lr

08016360 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8016360:	b480      	push	{r7}
 8016362:	b083      	sub	sp, #12
 8016364:	af00      	add	r7, sp, #0
 8016366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8016368:	bf00      	nop
 801636a:	370c      	adds	r7, #12
 801636c:	46bd      	mov	sp, r7
 801636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016372:	4770      	bx	lr

08016374 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8016374:	b480      	push	{r7}
 8016376:	b083      	sub	sp, #12
 8016378:	af00      	add	r7, sp, #0
 801637a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801637c:	bf00      	nop
 801637e:	370c      	adds	r7, #12
 8016380:	46bd      	mov	sp, r7
 8016382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016386:	4770      	bx	lr

08016388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8016388:	b480      	push	{r7}
 801638a:	b085      	sub	sp, #20
 801638c:	af00      	add	r7, sp, #0
 801638e:	6078      	str	r0, [r7, #4]
 8016390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	4a40      	ldr	r2, [pc, #256]	; (801649c <TIM_Base_SetConfig+0x114>)
 801639c:	4293      	cmp	r3, r2
 801639e:	d013      	beq.n	80163c8 <TIM_Base_SetConfig+0x40>
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80163a6:	d00f      	beq.n	80163c8 <TIM_Base_SetConfig+0x40>
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	4a3d      	ldr	r2, [pc, #244]	; (80164a0 <TIM_Base_SetConfig+0x118>)
 80163ac:	4293      	cmp	r3, r2
 80163ae:	d00b      	beq.n	80163c8 <TIM_Base_SetConfig+0x40>
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	4a3c      	ldr	r2, [pc, #240]	; (80164a4 <TIM_Base_SetConfig+0x11c>)
 80163b4:	4293      	cmp	r3, r2
 80163b6:	d007      	beq.n	80163c8 <TIM_Base_SetConfig+0x40>
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	4a3b      	ldr	r2, [pc, #236]	; (80164a8 <TIM_Base_SetConfig+0x120>)
 80163bc:	4293      	cmp	r3, r2
 80163be:	d003      	beq.n	80163c8 <TIM_Base_SetConfig+0x40>
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	4a3a      	ldr	r2, [pc, #232]	; (80164ac <TIM_Base_SetConfig+0x124>)
 80163c4:	4293      	cmp	r3, r2
 80163c6:	d108      	bne.n	80163da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80163ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80163d0:	683b      	ldr	r3, [r7, #0]
 80163d2:	685b      	ldr	r3, [r3, #4]
 80163d4:	68fa      	ldr	r2, [r7, #12]
 80163d6:	4313      	orrs	r3, r2
 80163d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	4a2f      	ldr	r2, [pc, #188]	; (801649c <TIM_Base_SetConfig+0x114>)
 80163de:	4293      	cmp	r3, r2
 80163e0:	d02b      	beq.n	801643a <TIM_Base_SetConfig+0xb2>
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80163e8:	d027      	beq.n	801643a <TIM_Base_SetConfig+0xb2>
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	4a2c      	ldr	r2, [pc, #176]	; (80164a0 <TIM_Base_SetConfig+0x118>)
 80163ee:	4293      	cmp	r3, r2
 80163f0:	d023      	beq.n	801643a <TIM_Base_SetConfig+0xb2>
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	4a2b      	ldr	r2, [pc, #172]	; (80164a4 <TIM_Base_SetConfig+0x11c>)
 80163f6:	4293      	cmp	r3, r2
 80163f8:	d01f      	beq.n	801643a <TIM_Base_SetConfig+0xb2>
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	4a2a      	ldr	r2, [pc, #168]	; (80164a8 <TIM_Base_SetConfig+0x120>)
 80163fe:	4293      	cmp	r3, r2
 8016400:	d01b      	beq.n	801643a <TIM_Base_SetConfig+0xb2>
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	4a29      	ldr	r2, [pc, #164]	; (80164ac <TIM_Base_SetConfig+0x124>)
 8016406:	4293      	cmp	r3, r2
 8016408:	d017      	beq.n	801643a <TIM_Base_SetConfig+0xb2>
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	4a28      	ldr	r2, [pc, #160]	; (80164b0 <TIM_Base_SetConfig+0x128>)
 801640e:	4293      	cmp	r3, r2
 8016410:	d013      	beq.n	801643a <TIM_Base_SetConfig+0xb2>
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	4a27      	ldr	r2, [pc, #156]	; (80164b4 <TIM_Base_SetConfig+0x12c>)
 8016416:	4293      	cmp	r3, r2
 8016418:	d00f      	beq.n	801643a <TIM_Base_SetConfig+0xb2>
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	4a26      	ldr	r2, [pc, #152]	; (80164b8 <TIM_Base_SetConfig+0x130>)
 801641e:	4293      	cmp	r3, r2
 8016420:	d00b      	beq.n	801643a <TIM_Base_SetConfig+0xb2>
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	4a25      	ldr	r2, [pc, #148]	; (80164bc <TIM_Base_SetConfig+0x134>)
 8016426:	4293      	cmp	r3, r2
 8016428:	d007      	beq.n	801643a <TIM_Base_SetConfig+0xb2>
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	4a24      	ldr	r2, [pc, #144]	; (80164c0 <TIM_Base_SetConfig+0x138>)
 801642e:	4293      	cmp	r3, r2
 8016430:	d003      	beq.n	801643a <TIM_Base_SetConfig+0xb2>
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	4a23      	ldr	r2, [pc, #140]	; (80164c4 <TIM_Base_SetConfig+0x13c>)
 8016436:	4293      	cmp	r3, r2
 8016438:	d108      	bne.n	801644c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016442:	683b      	ldr	r3, [r7, #0]
 8016444:	68db      	ldr	r3, [r3, #12]
 8016446:	68fa      	ldr	r2, [r7, #12]
 8016448:	4313      	orrs	r3, r2
 801644a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8016452:	683b      	ldr	r3, [r7, #0]
 8016454:	695b      	ldr	r3, [r3, #20]
 8016456:	4313      	orrs	r3, r2
 8016458:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	68fa      	ldr	r2, [r7, #12]
 801645e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016460:	683b      	ldr	r3, [r7, #0]
 8016462:	689a      	ldr	r2, [r3, #8]
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016468:	683b      	ldr	r3, [r7, #0]
 801646a:	681a      	ldr	r2, [r3, #0]
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	4a0a      	ldr	r2, [pc, #40]	; (801649c <TIM_Base_SetConfig+0x114>)
 8016474:	4293      	cmp	r3, r2
 8016476:	d003      	beq.n	8016480 <TIM_Base_SetConfig+0xf8>
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	4a0c      	ldr	r2, [pc, #48]	; (80164ac <TIM_Base_SetConfig+0x124>)
 801647c:	4293      	cmp	r3, r2
 801647e:	d103      	bne.n	8016488 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8016480:	683b      	ldr	r3, [r7, #0]
 8016482:	691a      	ldr	r2, [r3, #16]
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	2201      	movs	r2, #1
 801648c:	615a      	str	r2, [r3, #20]
}
 801648e:	bf00      	nop
 8016490:	3714      	adds	r7, #20
 8016492:	46bd      	mov	sp, r7
 8016494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016498:	4770      	bx	lr
 801649a:	bf00      	nop
 801649c:	40010000 	.word	0x40010000
 80164a0:	40000400 	.word	0x40000400
 80164a4:	40000800 	.word	0x40000800
 80164a8:	40000c00 	.word	0x40000c00
 80164ac:	40010400 	.word	0x40010400
 80164b0:	40014000 	.word	0x40014000
 80164b4:	40014400 	.word	0x40014400
 80164b8:	40014800 	.word	0x40014800
 80164bc:	40001800 	.word	0x40001800
 80164c0:	40001c00 	.word	0x40001c00
 80164c4:	40002000 	.word	0x40002000

080164c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80164c8:	b480      	push	{r7}
 80164ca:	b087      	sub	sp, #28
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	6078      	str	r0, [r7, #4]
 80164d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	6a1b      	ldr	r3, [r3, #32]
 80164d6:	f023 0201 	bic.w	r2, r3, #1
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	6a1b      	ldr	r3, [r3, #32]
 80164e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	685b      	ldr	r3, [r3, #4]
 80164e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	699b      	ldr	r3, [r3, #24]
 80164ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80164f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	f023 0303 	bic.w	r3, r3, #3
 80164fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016500:	683b      	ldr	r3, [r7, #0]
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	68fa      	ldr	r2, [r7, #12]
 8016506:	4313      	orrs	r3, r2
 8016508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801650a:	697b      	ldr	r3, [r7, #20]
 801650c:	f023 0302 	bic.w	r3, r3, #2
 8016510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8016512:	683b      	ldr	r3, [r7, #0]
 8016514:	689b      	ldr	r3, [r3, #8]
 8016516:	697a      	ldr	r2, [r7, #20]
 8016518:	4313      	orrs	r3, r2
 801651a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	4a20      	ldr	r2, [pc, #128]	; (80165a0 <TIM_OC1_SetConfig+0xd8>)
 8016520:	4293      	cmp	r3, r2
 8016522:	d003      	beq.n	801652c <TIM_OC1_SetConfig+0x64>
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	4a1f      	ldr	r2, [pc, #124]	; (80165a4 <TIM_OC1_SetConfig+0xdc>)
 8016528:	4293      	cmp	r3, r2
 801652a:	d10c      	bne.n	8016546 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801652c:	697b      	ldr	r3, [r7, #20]
 801652e:	f023 0308 	bic.w	r3, r3, #8
 8016532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8016534:	683b      	ldr	r3, [r7, #0]
 8016536:	68db      	ldr	r3, [r3, #12]
 8016538:	697a      	ldr	r2, [r7, #20]
 801653a:	4313      	orrs	r3, r2
 801653c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801653e:	697b      	ldr	r3, [r7, #20]
 8016540:	f023 0304 	bic.w	r3, r3, #4
 8016544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	4a15      	ldr	r2, [pc, #84]	; (80165a0 <TIM_OC1_SetConfig+0xd8>)
 801654a:	4293      	cmp	r3, r2
 801654c:	d003      	beq.n	8016556 <TIM_OC1_SetConfig+0x8e>
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	4a14      	ldr	r2, [pc, #80]	; (80165a4 <TIM_OC1_SetConfig+0xdc>)
 8016552:	4293      	cmp	r3, r2
 8016554:	d111      	bne.n	801657a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8016556:	693b      	ldr	r3, [r7, #16]
 8016558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801655c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801655e:	693b      	ldr	r3, [r7, #16]
 8016560:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8016564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8016566:	683b      	ldr	r3, [r7, #0]
 8016568:	695b      	ldr	r3, [r3, #20]
 801656a:	693a      	ldr	r2, [r7, #16]
 801656c:	4313      	orrs	r3, r2
 801656e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8016570:	683b      	ldr	r3, [r7, #0]
 8016572:	699b      	ldr	r3, [r3, #24]
 8016574:	693a      	ldr	r2, [r7, #16]
 8016576:	4313      	orrs	r3, r2
 8016578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	693a      	ldr	r2, [r7, #16]
 801657e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	68fa      	ldr	r2, [r7, #12]
 8016584:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016586:	683b      	ldr	r3, [r7, #0]
 8016588:	685a      	ldr	r2, [r3, #4]
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	697a      	ldr	r2, [r7, #20]
 8016592:	621a      	str	r2, [r3, #32]
}
 8016594:	bf00      	nop
 8016596:	371c      	adds	r7, #28
 8016598:	46bd      	mov	sp, r7
 801659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801659e:	4770      	bx	lr
 80165a0:	40010000 	.word	0x40010000
 80165a4:	40010400 	.word	0x40010400

080165a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80165a8:	b480      	push	{r7}
 80165aa:	b087      	sub	sp, #28
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	6078      	str	r0, [r7, #4]
 80165b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	6a1b      	ldr	r3, [r3, #32]
 80165b6:	f023 0210 	bic.w	r2, r3, #16
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	6a1b      	ldr	r3, [r3, #32]
 80165c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	685b      	ldr	r3, [r3, #4]
 80165c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	699b      	ldr	r3, [r3, #24]
 80165ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80165d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80165de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80165e0:	683b      	ldr	r3, [r7, #0]
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	021b      	lsls	r3, r3, #8
 80165e6:	68fa      	ldr	r2, [r7, #12]
 80165e8:	4313      	orrs	r3, r2
 80165ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80165ec:	697b      	ldr	r3, [r7, #20]
 80165ee:	f023 0320 	bic.w	r3, r3, #32
 80165f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80165f4:	683b      	ldr	r3, [r7, #0]
 80165f6:	689b      	ldr	r3, [r3, #8]
 80165f8:	011b      	lsls	r3, r3, #4
 80165fa:	697a      	ldr	r2, [r7, #20]
 80165fc:	4313      	orrs	r3, r2
 80165fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	4a22      	ldr	r2, [pc, #136]	; (801668c <TIM_OC2_SetConfig+0xe4>)
 8016604:	4293      	cmp	r3, r2
 8016606:	d003      	beq.n	8016610 <TIM_OC2_SetConfig+0x68>
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	4a21      	ldr	r2, [pc, #132]	; (8016690 <TIM_OC2_SetConfig+0xe8>)
 801660c:	4293      	cmp	r3, r2
 801660e:	d10d      	bne.n	801662c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8016610:	697b      	ldr	r3, [r7, #20]
 8016612:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8016618:	683b      	ldr	r3, [r7, #0]
 801661a:	68db      	ldr	r3, [r3, #12]
 801661c:	011b      	lsls	r3, r3, #4
 801661e:	697a      	ldr	r2, [r7, #20]
 8016620:	4313      	orrs	r3, r2
 8016622:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8016624:	697b      	ldr	r3, [r7, #20]
 8016626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801662a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	4a17      	ldr	r2, [pc, #92]	; (801668c <TIM_OC2_SetConfig+0xe4>)
 8016630:	4293      	cmp	r3, r2
 8016632:	d003      	beq.n	801663c <TIM_OC2_SetConfig+0x94>
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	4a16      	ldr	r2, [pc, #88]	; (8016690 <TIM_OC2_SetConfig+0xe8>)
 8016638:	4293      	cmp	r3, r2
 801663a:	d113      	bne.n	8016664 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801663c:	693b      	ldr	r3, [r7, #16]
 801663e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8016642:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8016644:	693b      	ldr	r3, [r7, #16]
 8016646:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801664a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801664c:	683b      	ldr	r3, [r7, #0]
 801664e:	695b      	ldr	r3, [r3, #20]
 8016650:	009b      	lsls	r3, r3, #2
 8016652:	693a      	ldr	r2, [r7, #16]
 8016654:	4313      	orrs	r3, r2
 8016656:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8016658:	683b      	ldr	r3, [r7, #0]
 801665a:	699b      	ldr	r3, [r3, #24]
 801665c:	009b      	lsls	r3, r3, #2
 801665e:	693a      	ldr	r2, [r7, #16]
 8016660:	4313      	orrs	r3, r2
 8016662:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	693a      	ldr	r2, [r7, #16]
 8016668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	68fa      	ldr	r2, [r7, #12]
 801666e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8016670:	683b      	ldr	r3, [r7, #0]
 8016672:	685a      	ldr	r2, [r3, #4]
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	697a      	ldr	r2, [r7, #20]
 801667c:	621a      	str	r2, [r3, #32]
}
 801667e:	bf00      	nop
 8016680:	371c      	adds	r7, #28
 8016682:	46bd      	mov	sp, r7
 8016684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016688:	4770      	bx	lr
 801668a:	bf00      	nop
 801668c:	40010000 	.word	0x40010000
 8016690:	40010400 	.word	0x40010400

08016694 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8016694:	b480      	push	{r7}
 8016696:	b087      	sub	sp, #28
 8016698:	af00      	add	r7, sp, #0
 801669a:	6078      	str	r0, [r7, #4]
 801669c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	6a1b      	ldr	r3, [r3, #32]
 80166a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	6a1b      	ldr	r3, [r3, #32]
 80166ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	685b      	ldr	r3, [r3, #4]
 80166b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	69db      	ldr	r3, [r3, #28]
 80166ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80166c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	f023 0303 	bic.w	r3, r3, #3
 80166ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80166cc:	683b      	ldr	r3, [r7, #0]
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	68fa      	ldr	r2, [r7, #12]
 80166d2:	4313      	orrs	r3, r2
 80166d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80166d6:	697b      	ldr	r3, [r7, #20]
 80166d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80166dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80166de:	683b      	ldr	r3, [r7, #0]
 80166e0:	689b      	ldr	r3, [r3, #8]
 80166e2:	021b      	lsls	r3, r3, #8
 80166e4:	697a      	ldr	r2, [r7, #20]
 80166e6:	4313      	orrs	r3, r2
 80166e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	4a21      	ldr	r2, [pc, #132]	; (8016774 <TIM_OC3_SetConfig+0xe0>)
 80166ee:	4293      	cmp	r3, r2
 80166f0:	d003      	beq.n	80166fa <TIM_OC3_SetConfig+0x66>
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	4a20      	ldr	r2, [pc, #128]	; (8016778 <TIM_OC3_SetConfig+0xe4>)
 80166f6:	4293      	cmp	r3, r2
 80166f8:	d10d      	bne.n	8016716 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80166fa:	697b      	ldr	r3, [r7, #20]
 80166fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016700:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8016702:	683b      	ldr	r3, [r7, #0]
 8016704:	68db      	ldr	r3, [r3, #12]
 8016706:	021b      	lsls	r3, r3, #8
 8016708:	697a      	ldr	r2, [r7, #20]
 801670a:	4313      	orrs	r3, r2
 801670c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801670e:	697b      	ldr	r3, [r7, #20]
 8016710:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8016714:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	4a16      	ldr	r2, [pc, #88]	; (8016774 <TIM_OC3_SetConfig+0xe0>)
 801671a:	4293      	cmp	r3, r2
 801671c:	d003      	beq.n	8016726 <TIM_OC3_SetConfig+0x92>
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	4a15      	ldr	r2, [pc, #84]	; (8016778 <TIM_OC3_SetConfig+0xe4>)
 8016722:	4293      	cmp	r3, r2
 8016724:	d113      	bne.n	801674e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8016726:	693b      	ldr	r3, [r7, #16]
 8016728:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801672c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801672e:	693b      	ldr	r3, [r7, #16]
 8016730:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8016734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8016736:	683b      	ldr	r3, [r7, #0]
 8016738:	695b      	ldr	r3, [r3, #20]
 801673a:	011b      	lsls	r3, r3, #4
 801673c:	693a      	ldr	r2, [r7, #16]
 801673e:	4313      	orrs	r3, r2
 8016740:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8016742:	683b      	ldr	r3, [r7, #0]
 8016744:	699b      	ldr	r3, [r3, #24]
 8016746:	011b      	lsls	r3, r3, #4
 8016748:	693a      	ldr	r2, [r7, #16]
 801674a:	4313      	orrs	r3, r2
 801674c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	693a      	ldr	r2, [r7, #16]
 8016752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	68fa      	ldr	r2, [r7, #12]
 8016758:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801675a:	683b      	ldr	r3, [r7, #0]
 801675c:	685a      	ldr	r2, [r3, #4]
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	697a      	ldr	r2, [r7, #20]
 8016766:	621a      	str	r2, [r3, #32]
}
 8016768:	bf00      	nop
 801676a:	371c      	adds	r7, #28
 801676c:	46bd      	mov	sp, r7
 801676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016772:	4770      	bx	lr
 8016774:	40010000 	.word	0x40010000
 8016778:	40010400 	.word	0x40010400

0801677c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801677c:	b480      	push	{r7}
 801677e:	b087      	sub	sp, #28
 8016780:	af00      	add	r7, sp, #0
 8016782:	6078      	str	r0, [r7, #4]
 8016784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	6a1b      	ldr	r3, [r3, #32]
 801678a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	6a1b      	ldr	r3, [r3, #32]
 8016796:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	685b      	ldr	r3, [r3, #4]
 801679c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	69db      	ldr	r3, [r3, #28]
 80167a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80167aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80167b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80167b4:	683b      	ldr	r3, [r7, #0]
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	021b      	lsls	r3, r3, #8
 80167ba:	68fa      	ldr	r2, [r7, #12]
 80167bc:	4313      	orrs	r3, r2
 80167be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80167c0:	693b      	ldr	r3, [r7, #16]
 80167c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80167c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80167c8:	683b      	ldr	r3, [r7, #0]
 80167ca:	689b      	ldr	r3, [r3, #8]
 80167cc:	031b      	lsls	r3, r3, #12
 80167ce:	693a      	ldr	r2, [r7, #16]
 80167d0:	4313      	orrs	r3, r2
 80167d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	4a12      	ldr	r2, [pc, #72]	; (8016820 <TIM_OC4_SetConfig+0xa4>)
 80167d8:	4293      	cmp	r3, r2
 80167da:	d003      	beq.n	80167e4 <TIM_OC4_SetConfig+0x68>
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	4a11      	ldr	r2, [pc, #68]	; (8016824 <TIM_OC4_SetConfig+0xa8>)
 80167e0:	4293      	cmp	r3, r2
 80167e2:	d109      	bne.n	80167f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80167e4:	697b      	ldr	r3, [r7, #20]
 80167e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80167ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80167ec:	683b      	ldr	r3, [r7, #0]
 80167ee:	695b      	ldr	r3, [r3, #20]
 80167f0:	019b      	lsls	r3, r3, #6
 80167f2:	697a      	ldr	r2, [r7, #20]
 80167f4:	4313      	orrs	r3, r2
 80167f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	697a      	ldr	r2, [r7, #20]
 80167fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	68fa      	ldr	r2, [r7, #12]
 8016802:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8016804:	683b      	ldr	r3, [r7, #0]
 8016806:	685a      	ldr	r2, [r3, #4]
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	693a      	ldr	r2, [r7, #16]
 8016810:	621a      	str	r2, [r3, #32]
}
 8016812:	bf00      	nop
 8016814:	371c      	adds	r7, #28
 8016816:	46bd      	mov	sp, r7
 8016818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801681c:	4770      	bx	lr
 801681e:	bf00      	nop
 8016820:	40010000 	.word	0x40010000
 8016824:	40010400 	.word	0x40010400

08016828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8016828:	b480      	push	{r7}
 801682a:	b087      	sub	sp, #28
 801682c:	af00      	add	r7, sp, #0
 801682e:	60f8      	str	r0, [r7, #12]
 8016830:	60b9      	str	r1, [r7, #8]
 8016832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	6a1b      	ldr	r3, [r3, #32]
 8016838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	6a1b      	ldr	r3, [r3, #32]
 801683e:	f023 0201 	bic.w	r2, r3, #1
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	699b      	ldr	r3, [r3, #24]
 801684a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801684c:	693b      	ldr	r3, [r7, #16]
 801684e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8016852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	011b      	lsls	r3, r3, #4
 8016858:	693a      	ldr	r2, [r7, #16]
 801685a:	4313      	orrs	r3, r2
 801685c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801685e:	697b      	ldr	r3, [r7, #20]
 8016860:	f023 030a 	bic.w	r3, r3, #10
 8016864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8016866:	697a      	ldr	r2, [r7, #20]
 8016868:	68bb      	ldr	r3, [r7, #8]
 801686a:	4313      	orrs	r3, r2
 801686c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	693a      	ldr	r2, [r7, #16]
 8016872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	697a      	ldr	r2, [r7, #20]
 8016878:	621a      	str	r2, [r3, #32]
}
 801687a:	bf00      	nop
 801687c:	371c      	adds	r7, #28
 801687e:	46bd      	mov	sp, r7
 8016880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016884:	4770      	bx	lr

08016886 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8016886:	b480      	push	{r7}
 8016888:	b087      	sub	sp, #28
 801688a:	af00      	add	r7, sp, #0
 801688c:	60f8      	str	r0, [r7, #12]
 801688e:	60b9      	str	r1, [r7, #8]
 8016890:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	6a1b      	ldr	r3, [r3, #32]
 8016896:	f023 0210 	bic.w	r2, r3, #16
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	699b      	ldr	r3, [r3, #24]
 80168a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	6a1b      	ldr	r3, [r3, #32]
 80168a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80168aa:	697b      	ldr	r3, [r7, #20]
 80168ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80168b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	031b      	lsls	r3, r3, #12
 80168b6:	697a      	ldr	r2, [r7, #20]
 80168b8:	4313      	orrs	r3, r2
 80168ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80168bc:	693b      	ldr	r3, [r7, #16]
 80168be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80168c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80168c4:	68bb      	ldr	r3, [r7, #8]
 80168c6:	011b      	lsls	r3, r3, #4
 80168c8:	693a      	ldr	r2, [r7, #16]
 80168ca:	4313      	orrs	r3, r2
 80168cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	697a      	ldr	r2, [r7, #20]
 80168d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	693a      	ldr	r2, [r7, #16]
 80168d8:	621a      	str	r2, [r3, #32]
}
 80168da:	bf00      	nop
 80168dc:	371c      	adds	r7, #28
 80168de:	46bd      	mov	sp, r7
 80168e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168e4:	4770      	bx	lr

080168e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80168e6:	b480      	push	{r7}
 80168e8:	b085      	sub	sp, #20
 80168ea:	af00      	add	r7, sp, #0
 80168ec:	6078      	str	r0, [r7, #4]
 80168ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	689b      	ldr	r3, [r3, #8]
 80168f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80168fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80168fe:	683a      	ldr	r2, [r7, #0]
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	4313      	orrs	r3, r2
 8016904:	f043 0307 	orr.w	r3, r3, #7
 8016908:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	68fa      	ldr	r2, [r7, #12]
 801690e:	609a      	str	r2, [r3, #8]
}
 8016910:	bf00      	nop
 8016912:	3714      	adds	r7, #20
 8016914:	46bd      	mov	sp, r7
 8016916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801691a:	4770      	bx	lr

0801691c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801691c:	b480      	push	{r7}
 801691e:	b087      	sub	sp, #28
 8016920:	af00      	add	r7, sp, #0
 8016922:	60f8      	str	r0, [r7, #12]
 8016924:	60b9      	str	r1, [r7, #8]
 8016926:	607a      	str	r2, [r7, #4]
 8016928:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	689b      	ldr	r3, [r3, #8]
 801692e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016930:	697b      	ldr	r3, [r7, #20]
 8016932:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8016936:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8016938:	683b      	ldr	r3, [r7, #0]
 801693a:	021a      	lsls	r2, r3, #8
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	431a      	orrs	r2, r3
 8016940:	68bb      	ldr	r3, [r7, #8]
 8016942:	4313      	orrs	r3, r2
 8016944:	697a      	ldr	r2, [r7, #20]
 8016946:	4313      	orrs	r3, r2
 8016948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801694a:	68fb      	ldr	r3, [r7, #12]
 801694c:	697a      	ldr	r2, [r7, #20]
 801694e:	609a      	str	r2, [r3, #8]
}
 8016950:	bf00      	nop
 8016952:	371c      	adds	r7, #28
 8016954:	46bd      	mov	sp, r7
 8016956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801695a:	4770      	bx	lr

0801695c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801695c:	b480      	push	{r7}
 801695e:	b087      	sub	sp, #28
 8016960:	af00      	add	r7, sp, #0
 8016962:	60f8      	str	r0, [r7, #12]
 8016964:	60b9      	str	r1, [r7, #8]
 8016966:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8016968:	68bb      	ldr	r3, [r7, #8]
 801696a:	f003 031f 	and.w	r3, r3, #31
 801696e:	2201      	movs	r2, #1
 8016970:	fa02 f303 	lsl.w	r3, r2, r3
 8016974:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	6a1a      	ldr	r2, [r3, #32]
 801697a:	697b      	ldr	r3, [r7, #20]
 801697c:	43db      	mvns	r3, r3
 801697e:	401a      	ands	r2, r3
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	6a1a      	ldr	r2, [r3, #32]
 8016988:	68bb      	ldr	r3, [r7, #8]
 801698a:	f003 031f 	and.w	r3, r3, #31
 801698e:	6879      	ldr	r1, [r7, #4]
 8016990:	fa01 f303 	lsl.w	r3, r1, r3
 8016994:	431a      	orrs	r2, r3
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	621a      	str	r2, [r3, #32]
}
 801699a:	bf00      	nop
 801699c:	371c      	adds	r7, #28
 801699e:	46bd      	mov	sp, r7
 80169a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169a4:	4770      	bx	lr
	...

080169a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80169a8:	b480      	push	{r7}
 80169aa:	b085      	sub	sp, #20
 80169ac:	af00      	add	r7, sp, #0
 80169ae:	6078      	str	r0, [r7, #4]
 80169b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80169b8:	2b01      	cmp	r3, #1
 80169ba:	d101      	bne.n	80169c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80169bc:	2302      	movs	r3, #2
 80169be:	e05a      	b.n	8016a76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	2201      	movs	r2, #1
 80169c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	2202      	movs	r2, #2
 80169cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	685b      	ldr	r3, [r3, #4]
 80169d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	689b      	ldr	r3, [r3, #8]
 80169de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80169e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80169e8:	683b      	ldr	r3, [r7, #0]
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	68fa      	ldr	r2, [r7, #12]
 80169ee:	4313      	orrs	r3, r2
 80169f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	68fa      	ldr	r2, [r7, #12]
 80169f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	4a21      	ldr	r2, [pc, #132]	; (8016a84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8016a00:	4293      	cmp	r3, r2
 8016a02:	d022      	beq.n	8016a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016a0c:	d01d      	beq.n	8016a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	4a1d      	ldr	r2, [pc, #116]	; (8016a88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8016a14:	4293      	cmp	r3, r2
 8016a16:	d018      	beq.n	8016a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	4a1b      	ldr	r2, [pc, #108]	; (8016a8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8016a1e:	4293      	cmp	r3, r2
 8016a20:	d013      	beq.n	8016a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	4a1a      	ldr	r2, [pc, #104]	; (8016a90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8016a28:	4293      	cmp	r3, r2
 8016a2a:	d00e      	beq.n	8016a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	4a18      	ldr	r2, [pc, #96]	; (8016a94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8016a32:	4293      	cmp	r3, r2
 8016a34:	d009      	beq.n	8016a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	4a17      	ldr	r2, [pc, #92]	; (8016a98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8016a3c:	4293      	cmp	r3, r2
 8016a3e:	d004      	beq.n	8016a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	4a15      	ldr	r2, [pc, #84]	; (8016a9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8016a46:	4293      	cmp	r3, r2
 8016a48:	d10c      	bne.n	8016a64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8016a4a:	68bb      	ldr	r3, [r7, #8]
 8016a4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016a50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8016a52:	683b      	ldr	r3, [r7, #0]
 8016a54:	685b      	ldr	r3, [r3, #4]
 8016a56:	68ba      	ldr	r2, [r7, #8]
 8016a58:	4313      	orrs	r3, r2
 8016a5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	68ba      	ldr	r2, [r7, #8]
 8016a62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	2201      	movs	r2, #1
 8016a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	2200      	movs	r2, #0
 8016a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016a74:	2300      	movs	r3, #0
}
 8016a76:	4618      	mov	r0, r3
 8016a78:	3714      	adds	r7, #20
 8016a7a:	46bd      	mov	sp, r7
 8016a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a80:	4770      	bx	lr
 8016a82:	bf00      	nop
 8016a84:	40010000 	.word	0x40010000
 8016a88:	40000400 	.word	0x40000400
 8016a8c:	40000800 	.word	0x40000800
 8016a90:	40000c00 	.word	0x40000c00
 8016a94:	40010400 	.word	0x40010400
 8016a98:	40014000 	.word	0x40014000
 8016a9c:	40001800 	.word	0x40001800

08016aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8016aa0:	b480      	push	{r7}
 8016aa2:	b083      	sub	sp, #12
 8016aa4:	af00      	add	r7, sp, #0
 8016aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8016aa8:	bf00      	nop
 8016aaa:	370c      	adds	r7, #12
 8016aac:	46bd      	mov	sp, r7
 8016aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ab2:	4770      	bx	lr

08016ab4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8016ab4:	b480      	push	{r7}
 8016ab6:	b083      	sub	sp, #12
 8016ab8:	af00      	add	r7, sp, #0
 8016aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8016abc:	bf00      	nop
 8016abe:	370c      	adds	r7, #12
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac6:	4770      	bx	lr

08016ac8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8016ac8:	b580      	push	{r7, lr}
 8016aca:	b082      	sub	sp, #8
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d101      	bne.n	8016ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8016ad6:	2301      	movs	r3, #1
 8016ad8:	e03f      	b.n	8016b5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8016ae0:	b2db      	uxtb	r3, r3
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d106      	bne.n	8016af4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	2200      	movs	r2, #0
 8016aea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8016aee:	6878      	ldr	r0, [r7, #4]
 8016af0:	f7eb fe8a 	bl	8002808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	2224      	movs	r2, #36	; 0x24
 8016af8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	68da      	ldr	r2, [r3, #12]
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8016b0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8016b0c:	6878      	ldr	r0, [r7, #4]
 8016b0e:	f000 fb97 	bl	8017240 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	691a      	ldr	r2, [r3, #16]
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8016b20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	695a      	ldr	r2, [r3, #20]
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	681b      	ldr	r3, [r3, #0]
 8016b2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8016b30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	681b      	ldr	r3, [r3, #0]
 8016b36:	68da      	ldr	r2, [r3, #12]
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8016b40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	2200      	movs	r2, #0
 8016b46:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	2220      	movs	r2, #32
 8016b4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	2220      	movs	r2, #32
 8016b54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8016b58:	2300      	movs	r3, #0
}
 8016b5a:	4618      	mov	r0, r3
 8016b5c:	3708      	adds	r7, #8
 8016b5e:	46bd      	mov	sp, r7
 8016b60:	bd80      	pop	{r7, pc}

08016b62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016b62:	b580      	push	{r7, lr}
 8016b64:	b088      	sub	sp, #32
 8016b66:	af02      	add	r7, sp, #8
 8016b68:	60f8      	str	r0, [r7, #12]
 8016b6a:	60b9      	str	r1, [r7, #8]
 8016b6c:	603b      	str	r3, [r7, #0]
 8016b6e:	4613      	mov	r3, r2
 8016b70:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8016b72:	2300      	movs	r3, #0
 8016b74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8016b7c:	b2db      	uxtb	r3, r3
 8016b7e:	2b20      	cmp	r3, #32
 8016b80:	f040 8083 	bne.w	8016c8a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8016b84:	68bb      	ldr	r3, [r7, #8]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d002      	beq.n	8016b90 <HAL_UART_Transmit+0x2e>
 8016b8a:	88fb      	ldrh	r3, [r7, #6]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d101      	bne.n	8016b94 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8016b90:	2301      	movs	r3, #1
 8016b92:	e07b      	b.n	8016c8c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016b9a:	2b01      	cmp	r3, #1
 8016b9c:	d101      	bne.n	8016ba2 <HAL_UART_Transmit+0x40>
 8016b9e:	2302      	movs	r3, #2
 8016ba0:	e074      	b.n	8016c8c <HAL_UART_Transmit+0x12a>
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	2201      	movs	r2, #1
 8016ba6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	2200      	movs	r2, #0
 8016bae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	2221      	movs	r2, #33	; 0x21
 8016bb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8016bb8:	f7fa fac8 	bl	801114c <HAL_GetTick>
 8016bbc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	88fa      	ldrh	r2, [r7, #6]
 8016bc2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	88fa      	ldrh	r2, [r7, #6]
 8016bc8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8016bca:	68fb      	ldr	r3, [r7, #12]
 8016bcc:	2200      	movs	r2, #0
 8016bce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8016bd2:	e042      	b.n	8016c5a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8016bd8:	b29b      	uxth	r3, r3
 8016bda:	3b01      	subs	r3, #1
 8016bdc:	b29a      	uxth	r2, r3
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	689b      	ldr	r3, [r3, #8]
 8016be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016bea:	d122      	bne.n	8016c32 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8016bec:	683b      	ldr	r3, [r7, #0]
 8016bee:	9300      	str	r3, [sp, #0]
 8016bf0:	697b      	ldr	r3, [r7, #20]
 8016bf2:	2200      	movs	r2, #0
 8016bf4:	2180      	movs	r1, #128	; 0x80
 8016bf6:	68f8      	ldr	r0, [r7, #12]
 8016bf8:	f000 f9b6 	bl	8016f68 <UART_WaitOnFlagUntilTimeout>
 8016bfc:	4603      	mov	r3, r0
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d001      	beq.n	8016c06 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8016c02:	2303      	movs	r3, #3
 8016c04:	e042      	b.n	8016c8c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8016c06:	68bb      	ldr	r3, [r7, #8]
 8016c08:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8016c0a:	693b      	ldr	r3, [r7, #16]
 8016c0c:	881b      	ldrh	r3, [r3, #0]
 8016c0e:	461a      	mov	r2, r3
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8016c18:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	691b      	ldr	r3, [r3, #16]
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d103      	bne.n	8016c2a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8016c22:	68bb      	ldr	r3, [r7, #8]
 8016c24:	3302      	adds	r3, #2
 8016c26:	60bb      	str	r3, [r7, #8]
 8016c28:	e017      	b.n	8016c5a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8016c2a:	68bb      	ldr	r3, [r7, #8]
 8016c2c:	3301      	adds	r3, #1
 8016c2e:	60bb      	str	r3, [r7, #8]
 8016c30:	e013      	b.n	8016c5a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8016c32:	683b      	ldr	r3, [r7, #0]
 8016c34:	9300      	str	r3, [sp, #0]
 8016c36:	697b      	ldr	r3, [r7, #20]
 8016c38:	2200      	movs	r2, #0
 8016c3a:	2180      	movs	r1, #128	; 0x80
 8016c3c:	68f8      	ldr	r0, [r7, #12]
 8016c3e:	f000 f993 	bl	8016f68 <UART_WaitOnFlagUntilTimeout>
 8016c42:	4603      	mov	r3, r0
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d001      	beq.n	8016c4c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8016c48:	2303      	movs	r3, #3
 8016c4a:	e01f      	b.n	8016c8c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8016c4c:	68bb      	ldr	r3, [r7, #8]
 8016c4e:	1c5a      	adds	r2, r3, #1
 8016c50:	60ba      	str	r2, [r7, #8]
 8016c52:	781a      	ldrb	r2, [r3, #0]
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8016c5e:	b29b      	uxth	r3, r3
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d1b7      	bne.n	8016bd4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8016c64:	683b      	ldr	r3, [r7, #0]
 8016c66:	9300      	str	r3, [sp, #0]
 8016c68:	697b      	ldr	r3, [r7, #20]
 8016c6a:	2200      	movs	r2, #0
 8016c6c:	2140      	movs	r1, #64	; 0x40
 8016c6e:	68f8      	ldr	r0, [r7, #12]
 8016c70:	f000 f97a 	bl	8016f68 <UART_WaitOnFlagUntilTimeout>
 8016c74:	4603      	mov	r3, r0
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d001      	beq.n	8016c7e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8016c7a:	2303      	movs	r3, #3
 8016c7c:	e006      	b.n	8016c8c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8016c7e:	68fb      	ldr	r3, [r7, #12]
 8016c80:	2220      	movs	r2, #32
 8016c82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8016c86:	2300      	movs	r3, #0
 8016c88:	e000      	b.n	8016c8c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8016c8a:	2302      	movs	r3, #2
  }
}
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	3718      	adds	r7, #24
 8016c90:	46bd      	mov	sp, r7
 8016c92:	bd80      	pop	{r7, pc}

08016c94 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016c94:	b480      	push	{r7}
 8016c96:	b085      	sub	sp, #20
 8016c98:	af00      	add	r7, sp, #0
 8016c9a:	60f8      	str	r0, [r7, #12]
 8016c9c:	60b9      	str	r1, [r7, #8]
 8016c9e:	4613      	mov	r3, r2
 8016ca0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016ca2:	68fb      	ldr	r3, [r7, #12]
 8016ca4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8016ca8:	b2db      	uxtb	r3, r3
 8016caa:	2b20      	cmp	r3, #32
 8016cac:	d140      	bne.n	8016d30 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8016cae:	68bb      	ldr	r3, [r7, #8]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d002      	beq.n	8016cba <HAL_UART_Receive_IT+0x26>
 8016cb4:	88fb      	ldrh	r3, [r7, #6]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d101      	bne.n	8016cbe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8016cba:	2301      	movs	r3, #1
 8016cbc:	e039      	b.n	8016d32 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016cc4:	2b01      	cmp	r3, #1
 8016cc6:	d101      	bne.n	8016ccc <HAL_UART_Receive_IT+0x38>
 8016cc8:	2302      	movs	r3, #2
 8016cca:	e032      	b.n	8016d32 <HAL_UART_Receive_IT+0x9e>
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	2201      	movs	r2, #1
 8016cd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	68ba      	ldr	r2, [r7, #8]
 8016cd8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8016cda:	68fb      	ldr	r3, [r7, #12]
 8016cdc:	88fa      	ldrh	r2, [r7, #6]
 8016cde:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8016ce0:	68fb      	ldr	r3, [r7, #12]
 8016ce2:	88fa      	ldrh	r2, [r7, #6]
 8016ce4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	2200      	movs	r2, #0
 8016cea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8016cec:	68fb      	ldr	r3, [r7, #12]
 8016cee:	2222      	movs	r2, #34	; 0x22
 8016cf0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	2200      	movs	r2, #0
 8016cf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8016cfc:	68fb      	ldr	r3, [r7, #12]
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	68da      	ldr	r2, [r3, #12]
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016d0a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8016d0c:	68fb      	ldr	r3, [r7, #12]
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	695a      	ldr	r2, [r3, #20]
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	f042 0201 	orr.w	r2, r2, #1
 8016d1a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	68da      	ldr	r2, [r3, #12]
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	f042 0220 	orr.w	r2, r2, #32
 8016d2a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	e000      	b.n	8016d32 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8016d30:	2302      	movs	r3, #2
  }
}
 8016d32:	4618      	mov	r0, r3
 8016d34:	3714      	adds	r7, #20
 8016d36:	46bd      	mov	sp, r7
 8016d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d3c:	4770      	bx	lr
	...

08016d40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8016d40:	b580      	push	{r7, lr}
 8016d42:	b088      	sub	sp, #32
 8016d44:	af00      	add	r7, sp, #0
 8016d46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	68db      	ldr	r3, [r3, #12]
 8016d56:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	695b      	ldr	r3, [r3, #20]
 8016d5e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8016d60:	2300      	movs	r3, #0
 8016d62:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8016d64:	2300      	movs	r3, #0
 8016d66:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8016d68:	69fb      	ldr	r3, [r7, #28]
 8016d6a:	f003 030f 	and.w	r3, r3, #15
 8016d6e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8016d70:	693b      	ldr	r3, [r7, #16]
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d10d      	bne.n	8016d92 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8016d76:	69fb      	ldr	r3, [r7, #28]
 8016d78:	f003 0320 	and.w	r3, r3, #32
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d008      	beq.n	8016d92 <HAL_UART_IRQHandler+0x52>
 8016d80:	69bb      	ldr	r3, [r7, #24]
 8016d82:	f003 0320 	and.w	r3, r3, #32
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d003      	beq.n	8016d92 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8016d8a:	6878      	ldr	r0, [r7, #4]
 8016d8c:	f000 f9d6 	bl	801713c <UART_Receive_IT>
      return;
 8016d90:	e0d0      	b.n	8016f34 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8016d92:	693b      	ldr	r3, [r7, #16]
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	f000 80b0 	beq.w	8016efa <HAL_UART_IRQHandler+0x1ba>
 8016d9a:	697b      	ldr	r3, [r7, #20]
 8016d9c:	f003 0301 	and.w	r3, r3, #1
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d105      	bne.n	8016db0 <HAL_UART_IRQHandler+0x70>
 8016da4:	69bb      	ldr	r3, [r7, #24]
 8016da6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	f000 80a5 	beq.w	8016efa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8016db0:	69fb      	ldr	r3, [r7, #28]
 8016db2:	f003 0301 	and.w	r3, r3, #1
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d00a      	beq.n	8016dd0 <HAL_UART_IRQHandler+0x90>
 8016dba:	69bb      	ldr	r3, [r7, #24]
 8016dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d005      	beq.n	8016dd0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016dc8:	f043 0201 	orr.w	r2, r3, #1
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8016dd0:	69fb      	ldr	r3, [r7, #28]
 8016dd2:	f003 0304 	and.w	r3, r3, #4
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d00a      	beq.n	8016df0 <HAL_UART_IRQHandler+0xb0>
 8016dda:	697b      	ldr	r3, [r7, #20]
 8016ddc:	f003 0301 	and.w	r3, r3, #1
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d005      	beq.n	8016df0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016de8:	f043 0202 	orr.w	r2, r3, #2
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8016df0:	69fb      	ldr	r3, [r7, #28]
 8016df2:	f003 0302 	and.w	r3, r3, #2
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d00a      	beq.n	8016e10 <HAL_UART_IRQHandler+0xd0>
 8016dfa:	697b      	ldr	r3, [r7, #20]
 8016dfc:	f003 0301 	and.w	r3, r3, #1
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d005      	beq.n	8016e10 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016e08:	f043 0204 	orr.w	r2, r3, #4
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8016e10:	69fb      	ldr	r3, [r7, #28]
 8016e12:	f003 0308 	and.w	r3, r3, #8
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d00f      	beq.n	8016e3a <HAL_UART_IRQHandler+0xfa>
 8016e1a:	69bb      	ldr	r3, [r7, #24]
 8016e1c:	f003 0320 	and.w	r3, r3, #32
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d104      	bne.n	8016e2e <HAL_UART_IRQHandler+0xee>
 8016e24:	697b      	ldr	r3, [r7, #20]
 8016e26:	f003 0301 	and.w	r3, r3, #1
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d005      	beq.n	8016e3a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016e32:	f043 0208 	orr.w	r2, r3, #8
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d077      	beq.n	8016f32 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8016e42:	69fb      	ldr	r3, [r7, #28]
 8016e44:	f003 0320 	and.w	r3, r3, #32
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d007      	beq.n	8016e5c <HAL_UART_IRQHandler+0x11c>
 8016e4c:	69bb      	ldr	r3, [r7, #24]
 8016e4e:	f003 0320 	and.w	r3, r3, #32
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d002      	beq.n	8016e5c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8016e56:	6878      	ldr	r0, [r7, #4]
 8016e58:	f000 f970 	bl	801713c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	695b      	ldr	r3, [r3, #20]
 8016e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016e66:	2b40      	cmp	r3, #64	; 0x40
 8016e68:	bf0c      	ite	eq
 8016e6a:	2301      	moveq	r3, #1
 8016e6c:	2300      	movne	r3, #0
 8016e6e:	b2db      	uxtb	r3, r3
 8016e70:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016e76:	f003 0308 	and.w	r3, r3, #8
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d102      	bne.n	8016e84 <HAL_UART_IRQHandler+0x144>
 8016e7e:	68fb      	ldr	r3, [r7, #12]
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d031      	beq.n	8016ee8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8016e84:	6878      	ldr	r0, [r7, #4]
 8016e86:	f000 f8b9 	bl	8016ffc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	695b      	ldr	r3, [r3, #20]
 8016e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016e94:	2b40      	cmp	r3, #64	; 0x40
 8016e96:	d123      	bne.n	8016ee0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	695a      	ldr	r2, [r3, #20]
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016ea6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d013      	beq.n	8016ed8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016eb4:	4a21      	ldr	r2, [pc, #132]	; (8016f3c <HAL_UART_IRQHandler+0x1fc>)
 8016eb6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	f7fb fa83 	bl	80123c8 <HAL_DMA_Abort_IT>
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d016      	beq.n	8016ef6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016ece:	687a      	ldr	r2, [r7, #4]
 8016ed0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8016ed2:	4610      	mov	r0, r2
 8016ed4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016ed6:	e00e      	b.n	8016ef6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8016ed8:	6878      	ldr	r0, [r7, #4]
 8016eda:	f000 f83b 	bl	8016f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016ede:	e00a      	b.n	8016ef6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016ee0:	6878      	ldr	r0, [r7, #4]
 8016ee2:	f000 f837 	bl	8016f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016ee6:	e006      	b.n	8016ef6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8016ee8:	6878      	ldr	r0, [r7, #4]
 8016eea:	f000 f833 	bl	8016f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	2200      	movs	r2, #0
 8016ef2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8016ef4:	e01d      	b.n	8016f32 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016ef6:	bf00      	nop
    return;
 8016ef8:	e01b      	b.n	8016f32 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8016efa:	69fb      	ldr	r3, [r7, #28]
 8016efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d008      	beq.n	8016f16 <HAL_UART_IRQHandler+0x1d6>
 8016f04:	69bb      	ldr	r3, [r7, #24]
 8016f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d003      	beq.n	8016f16 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8016f0e:	6878      	ldr	r0, [r7, #4]
 8016f10:	f000 f8a6 	bl	8017060 <UART_Transmit_IT>
    return;
 8016f14:	e00e      	b.n	8016f34 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8016f16:	69fb      	ldr	r3, [r7, #28]
 8016f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d009      	beq.n	8016f34 <HAL_UART_IRQHandler+0x1f4>
 8016f20:	69bb      	ldr	r3, [r7, #24]
 8016f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d004      	beq.n	8016f34 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8016f2a:	6878      	ldr	r0, [r7, #4]
 8016f2c:	f000 f8ee 	bl	801710c <UART_EndTransmit_IT>
    return;
 8016f30:	e000      	b.n	8016f34 <HAL_UART_IRQHandler+0x1f4>
    return;
 8016f32:	bf00      	nop
  }
}
 8016f34:	3720      	adds	r7, #32
 8016f36:	46bd      	mov	sp, r7
 8016f38:	bd80      	pop	{r7, pc}
 8016f3a:	bf00      	nop
 8016f3c:	08017039 	.word	0x08017039

08016f40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8016f40:	b480      	push	{r7}
 8016f42:	b083      	sub	sp, #12
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8016f48:	bf00      	nop
 8016f4a:	370c      	adds	r7, #12
 8016f4c:	46bd      	mov	sp, r7
 8016f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f52:	4770      	bx	lr

08016f54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8016f54:	b480      	push	{r7}
 8016f56:	b083      	sub	sp, #12
 8016f58:	af00      	add	r7, sp, #0
 8016f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8016f5c:	bf00      	nop
 8016f5e:	370c      	adds	r7, #12
 8016f60:	46bd      	mov	sp, r7
 8016f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f66:	4770      	bx	lr

08016f68 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8016f68:	b580      	push	{r7, lr}
 8016f6a:	b084      	sub	sp, #16
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	60f8      	str	r0, [r7, #12]
 8016f70:	60b9      	str	r1, [r7, #8]
 8016f72:	603b      	str	r3, [r7, #0]
 8016f74:	4613      	mov	r3, r2
 8016f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016f78:	e02c      	b.n	8016fd4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016f7a:	69bb      	ldr	r3, [r7, #24]
 8016f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016f80:	d028      	beq.n	8016fd4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8016f82:	69bb      	ldr	r3, [r7, #24]
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d007      	beq.n	8016f98 <UART_WaitOnFlagUntilTimeout+0x30>
 8016f88:	f7fa f8e0 	bl	801114c <HAL_GetTick>
 8016f8c:	4602      	mov	r2, r0
 8016f8e:	683b      	ldr	r3, [r7, #0]
 8016f90:	1ad3      	subs	r3, r2, r3
 8016f92:	69ba      	ldr	r2, [r7, #24]
 8016f94:	429a      	cmp	r2, r3
 8016f96:	d21d      	bcs.n	8016fd4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	68da      	ldr	r2, [r3, #12]
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8016fa6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	695a      	ldr	r2, [r3, #20]
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	f022 0201 	bic.w	r2, r2, #1
 8016fb6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	2220      	movs	r2, #32
 8016fbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	2220      	movs	r2, #32
 8016fc4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	2200      	movs	r2, #0
 8016fcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8016fd0:	2303      	movs	r3, #3
 8016fd2:	e00f      	b.n	8016ff4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	681a      	ldr	r2, [r3, #0]
 8016fda:	68bb      	ldr	r3, [r7, #8]
 8016fdc:	4013      	ands	r3, r2
 8016fde:	68ba      	ldr	r2, [r7, #8]
 8016fe0:	429a      	cmp	r2, r3
 8016fe2:	bf0c      	ite	eq
 8016fe4:	2301      	moveq	r3, #1
 8016fe6:	2300      	movne	r3, #0
 8016fe8:	b2db      	uxtb	r3, r3
 8016fea:	461a      	mov	r2, r3
 8016fec:	79fb      	ldrb	r3, [r7, #7]
 8016fee:	429a      	cmp	r2, r3
 8016ff0:	d0c3      	beq.n	8016f7a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8016ff2:	2300      	movs	r3, #0
}
 8016ff4:	4618      	mov	r0, r3
 8016ff6:	3710      	adds	r7, #16
 8016ff8:	46bd      	mov	sp, r7
 8016ffa:	bd80      	pop	{r7, pc}

08016ffc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8016ffc:	b480      	push	{r7}
 8016ffe:	b083      	sub	sp, #12
 8017000:	af00      	add	r7, sp, #0
 8017002:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	68da      	ldr	r2, [r3, #12]
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8017012:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	695a      	ldr	r2, [r3, #20]
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	f022 0201 	bic.w	r2, r2, #1
 8017022:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	2220      	movs	r2, #32
 8017028:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 801702c:	bf00      	nop
 801702e:	370c      	adds	r7, #12
 8017030:	46bd      	mov	sp, r7
 8017032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017036:	4770      	bx	lr

08017038 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8017038:	b580      	push	{r7, lr}
 801703a:	b084      	sub	sp, #16
 801703c:	af00      	add	r7, sp, #0
 801703e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017044:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8017046:	68fb      	ldr	r3, [r7, #12]
 8017048:	2200      	movs	r2, #0
 801704a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	2200      	movs	r2, #0
 8017050:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8017052:	68f8      	ldr	r0, [r7, #12]
 8017054:	f7ff ff7e 	bl	8016f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017058:	bf00      	nop
 801705a:	3710      	adds	r7, #16
 801705c:	46bd      	mov	sp, r7
 801705e:	bd80      	pop	{r7, pc}

08017060 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8017060:	b480      	push	{r7}
 8017062:	b085      	sub	sp, #20
 8017064:	af00      	add	r7, sp, #0
 8017066:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801706e:	b2db      	uxtb	r3, r3
 8017070:	2b21      	cmp	r3, #33	; 0x21
 8017072:	d144      	bne.n	80170fe <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	689b      	ldr	r3, [r3, #8]
 8017078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801707c:	d11a      	bne.n	80170b4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	6a1b      	ldr	r3, [r3, #32]
 8017082:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	881b      	ldrh	r3, [r3, #0]
 8017088:	461a      	mov	r2, r3
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	681b      	ldr	r3, [r3, #0]
 801708e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017092:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	691b      	ldr	r3, [r3, #16]
 8017098:	2b00      	cmp	r3, #0
 801709a:	d105      	bne.n	80170a8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	6a1b      	ldr	r3, [r3, #32]
 80170a0:	1c9a      	adds	r2, r3, #2
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	621a      	str	r2, [r3, #32]
 80170a6:	e00e      	b.n	80170c6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	6a1b      	ldr	r3, [r3, #32]
 80170ac:	1c5a      	adds	r2, r3, #1
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	621a      	str	r2, [r3, #32]
 80170b2:	e008      	b.n	80170c6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	6a1b      	ldr	r3, [r3, #32]
 80170b8:	1c59      	adds	r1, r3, #1
 80170ba:	687a      	ldr	r2, [r7, #4]
 80170bc:	6211      	str	r1, [r2, #32]
 80170be:	781a      	ldrb	r2, [r3, #0]
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80170ca:	b29b      	uxth	r3, r3
 80170cc:	3b01      	subs	r3, #1
 80170ce:	b29b      	uxth	r3, r3
 80170d0:	687a      	ldr	r2, [r7, #4]
 80170d2:	4619      	mov	r1, r3
 80170d4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d10f      	bne.n	80170fa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	68da      	ldr	r2, [r3, #12]
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80170e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	68da      	ldr	r2, [r3, #12]
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80170f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80170fa:	2300      	movs	r3, #0
 80170fc:	e000      	b.n	8017100 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80170fe:	2302      	movs	r3, #2
  }
}
 8017100:	4618      	mov	r0, r3
 8017102:	3714      	adds	r7, #20
 8017104:	46bd      	mov	sp, r7
 8017106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801710a:	4770      	bx	lr

0801710c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801710c:	b580      	push	{r7, lr}
 801710e:	b082      	sub	sp, #8
 8017110:	af00      	add	r7, sp, #0
 8017112:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	68da      	ldr	r2, [r3, #12]
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	681b      	ldr	r3, [r3, #0]
 801711e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017122:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	2220      	movs	r2, #32
 8017128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801712c:	6878      	ldr	r0, [r7, #4]
 801712e:	f7ff ff07 	bl	8016f40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8017132:	2300      	movs	r3, #0
}
 8017134:	4618      	mov	r0, r3
 8017136:	3708      	adds	r7, #8
 8017138:	46bd      	mov	sp, r7
 801713a:	bd80      	pop	{r7, pc}

0801713c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801713c:	b580      	push	{r7, lr}
 801713e:	b084      	sub	sp, #16
 8017140:	af00      	add	r7, sp, #0
 8017142:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801714a:	b2db      	uxtb	r3, r3
 801714c:	2b22      	cmp	r3, #34	; 0x22
 801714e:	d171      	bne.n	8017234 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	689b      	ldr	r3, [r3, #8]
 8017154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017158:	d123      	bne.n	80171a2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801715e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	691b      	ldr	r3, [r3, #16]
 8017164:	2b00      	cmp	r3, #0
 8017166:	d10e      	bne.n	8017186 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	685b      	ldr	r3, [r3, #4]
 801716e:	b29b      	uxth	r3, r3
 8017170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017174:	b29a      	uxth	r2, r3
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801717e:	1c9a      	adds	r2, r3, #2
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	629a      	str	r2, [r3, #40]	; 0x28
 8017184:	e029      	b.n	80171da <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	685b      	ldr	r3, [r3, #4]
 801718c:	b29b      	uxth	r3, r3
 801718e:	b2db      	uxtb	r3, r3
 8017190:	b29a      	uxth	r2, r3
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801719a:	1c5a      	adds	r2, r3, #1
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	629a      	str	r2, [r3, #40]	; 0x28
 80171a0:	e01b      	b.n	80171da <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	691b      	ldr	r3, [r3, #16]
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d10a      	bne.n	80171c0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	6858      	ldr	r0, [r3, #4]
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80171b4:	1c59      	adds	r1, r3, #1
 80171b6:	687a      	ldr	r2, [r7, #4]
 80171b8:	6291      	str	r1, [r2, #40]	; 0x28
 80171ba:	b2c2      	uxtb	r2, r0
 80171bc:	701a      	strb	r2, [r3, #0]
 80171be:	e00c      	b.n	80171da <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	685b      	ldr	r3, [r3, #4]
 80171c6:	b2da      	uxtb	r2, r3
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80171cc:	1c58      	adds	r0, r3, #1
 80171ce:	6879      	ldr	r1, [r7, #4]
 80171d0:	6288      	str	r0, [r1, #40]	; 0x28
 80171d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80171d6:	b2d2      	uxtb	r2, r2
 80171d8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80171de:	b29b      	uxth	r3, r3
 80171e0:	3b01      	subs	r3, #1
 80171e2:	b29b      	uxth	r3, r3
 80171e4:	687a      	ldr	r2, [r7, #4]
 80171e6:	4619      	mov	r1, r3
 80171e8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d120      	bne.n	8017230 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	681b      	ldr	r3, [r3, #0]
 80171f2:	68da      	ldr	r2, [r3, #12]
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	f022 0220 	bic.w	r2, r2, #32
 80171fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	68da      	ldr	r2, [r3, #12]
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801720c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	681b      	ldr	r3, [r3, #0]
 8017212:	695a      	ldr	r2, [r3, #20]
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	681b      	ldr	r3, [r3, #0]
 8017218:	f022 0201 	bic.w	r2, r2, #1
 801721c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	2220      	movs	r2, #32
 8017222:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8017226:	6878      	ldr	r0, [r7, #4]
 8017228:	f7ed f994 	bl	8004554 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 801722c:	2300      	movs	r3, #0
 801722e:	e002      	b.n	8017236 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8017230:	2300      	movs	r3, #0
 8017232:	e000      	b.n	8017236 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8017234:	2302      	movs	r3, #2
  }
}
 8017236:	4618      	mov	r0, r3
 8017238:	3710      	adds	r7, #16
 801723a:	46bd      	mov	sp, r7
 801723c:	bd80      	pop	{r7, pc}
	...

08017240 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017244:	b0bd      	sub	sp, #244	; 0xf4
 8017246:	af00      	add	r7, sp, #0
 8017248:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801724c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	691b      	ldr	r3, [r3, #16]
 8017254:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8017258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801725c:	68d9      	ldr	r1, [r3, #12]
 801725e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017262:	681a      	ldr	r2, [r3, #0]
 8017264:	ea40 0301 	orr.w	r3, r0, r1
 8017268:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801726a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801726e:	689a      	ldr	r2, [r3, #8]
 8017270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017274:	691b      	ldr	r3, [r3, #16]
 8017276:	431a      	orrs	r2, r3
 8017278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801727c:	695b      	ldr	r3, [r3, #20]
 801727e:	431a      	orrs	r2, r3
 8017280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017284:	69db      	ldr	r3, [r3, #28]
 8017286:	4313      	orrs	r3, r2
 8017288:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 801728c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	68db      	ldr	r3, [r3, #12]
 8017294:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8017298:	f021 010c 	bic.w	r1, r1, #12
 801729c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80172a0:	681a      	ldr	r2, [r3, #0]
 80172a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80172a6:	430b      	orrs	r3, r1
 80172a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80172aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	695b      	ldr	r3, [r3, #20]
 80172b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80172b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80172ba:	6999      	ldr	r1, [r3, #24]
 80172bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80172c0:	681a      	ldr	r2, [r3, #0]
 80172c2:	ea40 0301 	orr.w	r3, r0, r1
 80172c6:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80172c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80172cc:	69db      	ldr	r3, [r3, #28]
 80172ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80172d2:	f040 81a5 	bne.w	8017620 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80172d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80172da:	681a      	ldr	r2, [r3, #0]
 80172dc:	4bcd      	ldr	r3, [pc, #820]	; (8017614 <UART_SetConfig+0x3d4>)
 80172de:	429a      	cmp	r2, r3
 80172e0:	d006      	beq.n	80172f0 <UART_SetConfig+0xb0>
 80172e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80172e6:	681a      	ldr	r2, [r3, #0]
 80172e8:	4bcb      	ldr	r3, [pc, #812]	; (8017618 <UART_SetConfig+0x3d8>)
 80172ea:	429a      	cmp	r2, r3
 80172ec:	f040 80cb 	bne.w	8017486 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80172f0:	f7fe fa86 	bl	8015800 <HAL_RCC_GetPCLK2Freq>
 80172f4:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80172f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80172fc:	461c      	mov	r4, r3
 80172fe:	f04f 0500 	mov.w	r5, #0
 8017302:	4622      	mov	r2, r4
 8017304:	462b      	mov	r3, r5
 8017306:	1891      	adds	r1, r2, r2
 8017308:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 801730c:	415b      	adcs	r3, r3
 801730e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8017312:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8017316:	1912      	adds	r2, r2, r4
 8017318:	eb45 0303 	adc.w	r3, r5, r3
 801731c:	f04f 0000 	mov.w	r0, #0
 8017320:	f04f 0100 	mov.w	r1, #0
 8017324:	00d9      	lsls	r1, r3, #3
 8017326:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801732a:	00d0      	lsls	r0, r2, #3
 801732c:	4602      	mov	r2, r0
 801732e:	460b      	mov	r3, r1
 8017330:	1911      	adds	r1, r2, r4
 8017332:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8017336:	416b      	adcs	r3, r5
 8017338:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801733c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017340:	685b      	ldr	r3, [r3, #4]
 8017342:	461a      	mov	r2, r3
 8017344:	f04f 0300 	mov.w	r3, #0
 8017348:	1891      	adds	r1, r2, r2
 801734a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 801734e:	415b      	adcs	r3, r3
 8017350:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017354:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8017358:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 801735c:	f7e9 fc94 	bl	8000c88 <__aeabi_uldivmod>
 8017360:	4602      	mov	r2, r0
 8017362:	460b      	mov	r3, r1
 8017364:	4bad      	ldr	r3, [pc, #692]	; (801761c <UART_SetConfig+0x3dc>)
 8017366:	fba3 2302 	umull	r2, r3, r3, r2
 801736a:	095b      	lsrs	r3, r3, #5
 801736c:	011e      	lsls	r6, r3, #4
 801736e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8017372:	461c      	mov	r4, r3
 8017374:	f04f 0500 	mov.w	r5, #0
 8017378:	4622      	mov	r2, r4
 801737a:	462b      	mov	r3, r5
 801737c:	1891      	adds	r1, r2, r2
 801737e:	67b9      	str	r1, [r7, #120]	; 0x78
 8017380:	415b      	adcs	r3, r3
 8017382:	67fb      	str	r3, [r7, #124]	; 0x7c
 8017384:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8017388:	1912      	adds	r2, r2, r4
 801738a:	eb45 0303 	adc.w	r3, r5, r3
 801738e:	f04f 0000 	mov.w	r0, #0
 8017392:	f04f 0100 	mov.w	r1, #0
 8017396:	00d9      	lsls	r1, r3, #3
 8017398:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801739c:	00d0      	lsls	r0, r2, #3
 801739e:	4602      	mov	r2, r0
 80173a0:	460b      	mov	r3, r1
 80173a2:	1911      	adds	r1, r2, r4
 80173a4:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80173a8:	416b      	adcs	r3, r5
 80173aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80173ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80173b2:	685b      	ldr	r3, [r3, #4]
 80173b4:	461a      	mov	r2, r3
 80173b6:	f04f 0300 	mov.w	r3, #0
 80173ba:	1891      	adds	r1, r2, r2
 80173bc:	6739      	str	r1, [r7, #112]	; 0x70
 80173be:	415b      	adcs	r3, r3
 80173c0:	677b      	str	r3, [r7, #116]	; 0x74
 80173c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80173c6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80173ca:	f7e9 fc5d 	bl	8000c88 <__aeabi_uldivmod>
 80173ce:	4602      	mov	r2, r0
 80173d0:	460b      	mov	r3, r1
 80173d2:	4b92      	ldr	r3, [pc, #584]	; (801761c <UART_SetConfig+0x3dc>)
 80173d4:	fba3 1302 	umull	r1, r3, r3, r2
 80173d8:	095b      	lsrs	r3, r3, #5
 80173da:	2164      	movs	r1, #100	; 0x64
 80173dc:	fb01 f303 	mul.w	r3, r1, r3
 80173e0:	1ad3      	subs	r3, r2, r3
 80173e2:	00db      	lsls	r3, r3, #3
 80173e4:	3332      	adds	r3, #50	; 0x32
 80173e6:	4a8d      	ldr	r2, [pc, #564]	; (801761c <UART_SetConfig+0x3dc>)
 80173e8:	fba2 2303 	umull	r2, r3, r2, r3
 80173ec:	095b      	lsrs	r3, r3, #5
 80173ee:	005b      	lsls	r3, r3, #1
 80173f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80173f4:	441e      	add	r6, r3
 80173f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80173fa:	4618      	mov	r0, r3
 80173fc:	f04f 0100 	mov.w	r1, #0
 8017400:	4602      	mov	r2, r0
 8017402:	460b      	mov	r3, r1
 8017404:	1894      	adds	r4, r2, r2
 8017406:	66bc      	str	r4, [r7, #104]	; 0x68
 8017408:	415b      	adcs	r3, r3
 801740a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801740c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8017410:	1812      	adds	r2, r2, r0
 8017412:	eb41 0303 	adc.w	r3, r1, r3
 8017416:	f04f 0400 	mov.w	r4, #0
 801741a:	f04f 0500 	mov.w	r5, #0
 801741e:	00dd      	lsls	r5, r3, #3
 8017420:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8017424:	00d4      	lsls	r4, r2, #3
 8017426:	4622      	mov	r2, r4
 8017428:	462b      	mov	r3, r5
 801742a:	1814      	adds	r4, r2, r0
 801742c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8017430:	414b      	adcs	r3, r1
 8017432:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8017436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801743a:	685b      	ldr	r3, [r3, #4]
 801743c:	461a      	mov	r2, r3
 801743e:	f04f 0300 	mov.w	r3, #0
 8017442:	1891      	adds	r1, r2, r2
 8017444:	6639      	str	r1, [r7, #96]	; 0x60
 8017446:	415b      	adcs	r3, r3
 8017448:	667b      	str	r3, [r7, #100]	; 0x64
 801744a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801744e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8017452:	f7e9 fc19 	bl	8000c88 <__aeabi_uldivmod>
 8017456:	4602      	mov	r2, r0
 8017458:	460b      	mov	r3, r1
 801745a:	4b70      	ldr	r3, [pc, #448]	; (801761c <UART_SetConfig+0x3dc>)
 801745c:	fba3 1302 	umull	r1, r3, r3, r2
 8017460:	095b      	lsrs	r3, r3, #5
 8017462:	2164      	movs	r1, #100	; 0x64
 8017464:	fb01 f303 	mul.w	r3, r1, r3
 8017468:	1ad3      	subs	r3, r2, r3
 801746a:	00db      	lsls	r3, r3, #3
 801746c:	3332      	adds	r3, #50	; 0x32
 801746e:	4a6b      	ldr	r2, [pc, #428]	; (801761c <UART_SetConfig+0x3dc>)
 8017470:	fba2 2303 	umull	r2, r3, r2, r3
 8017474:	095b      	lsrs	r3, r3, #5
 8017476:	f003 0207 	and.w	r2, r3, #7
 801747a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	4432      	add	r2, r6
 8017482:	609a      	str	r2, [r3, #8]
 8017484:	e26d      	b.n	8017962 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8017486:	f7fe f9a7 	bl	80157d8 <HAL_RCC_GetPCLK1Freq>
 801748a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801748e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8017492:	461c      	mov	r4, r3
 8017494:	f04f 0500 	mov.w	r5, #0
 8017498:	4622      	mov	r2, r4
 801749a:	462b      	mov	r3, r5
 801749c:	1891      	adds	r1, r2, r2
 801749e:	65b9      	str	r1, [r7, #88]	; 0x58
 80174a0:	415b      	adcs	r3, r3
 80174a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80174a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80174a8:	1912      	adds	r2, r2, r4
 80174aa:	eb45 0303 	adc.w	r3, r5, r3
 80174ae:	f04f 0000 	mov.w	r0, #0
 80174b2:	f04f 0100 	mov.w	r1, #0
 80174b6:	00d9      	lsls	r1, r3, #3
 80174b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80174bc:	00d0      	lsls	r0, r2, #3
 80174be:	4602      	mov	r2, r0
 80174c0:	460b      	mov	r3, r1
 80174c2:	1911      	adds	r1, r2, r4
 80174c4:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80174c8:	416b      	adcs	r3, r5
 80174ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80174ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80174d2:	685b      	ldr	r3, [r3, #4]
 80174d4:	461a      	mov	r2, r3
 80174d6:	f04f 0300 	mov.w	r3, #0
 80174da:	1891      	adds	r1, r2, r2
 80174dc:	6539      	str	r1, [r7, #80]	; 0x50
 80174de:	415b      	adcs	r3, r3
 80174e0:	657b      	str	r3, [r7, #84]	; 0x54
 80174e2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80174e6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80174ea:	f7e9 fbcd 	bl	8000c88 <__aeabi_uldivmod>
 80174ee:	4602      	mov	r2, r0
 80174f0:	460b      	mov	r3, r1
 80174f2:	4b4a      	ldr	r3, [pc, #296]	; (801761c <UART_SetConfig+0x3dc>)
 80174f4:	fba3 2302 	umull	r2, r3, r3, r2
 80174f8:	095b      	lsrs	r3, r3, #5
 80174fa:	011e      	lsls	r6, r3, #4
 80174fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8017500:	461c      	mov	r4, r3
 8017502:	f04f 0500 	mov.w	r5, #0
 8017506:	4622      	mov	r2, r4
 8017508:	462b      	mov	r3, r5
 801750a:	1891      	adds	r1, r2, r2
 801750c:	64b9      	str	r1, [r7, #72]	; 0x48
 801750e:	415b      	adcs	r3, r3
 8017510:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017512:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8017516:	1912      	adds	r2, r2, r4
 8017518:	eb45 0303 	adc.w	r3, r5, r3
 801751c:	f04f 0000 	mov.w	r0, #0
 8017520:	f04f 0100 	mov.w	r1, #0
 8017524:	00d9      	lsls	r1, r3, #3
 8017526:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801752a:	00d0      	lsls	r0, r2, #3
 801752c:	4602      	mov	r2, r0
 801752e:	460b      	mov	r3, r1
 8017530:	1911      	adds	r1, r2, r4
 8017532:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8017536:	416b      	adcs	r3, r5
 8017538:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801753c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017540:	685b      	ldr	r3, [r3, #4]
 8017542:	461a      	mov	r2, r3
 8017544:	f04f 0300 	mov.w	r3, #0
 8017548:	1891      	adds	r1, r2, r2
 801754a:	6439      	str	r1, [r7, #64]	; 0x40
 801754c:	415b      	adcs	r3, r3
 801754e:	647b      	str	r3, [r7, #68]	; 0x44
 8017550:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8017554:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8017558:	f7e9 fb96 	bl	8000c88 <__aeabi_uldivmod>
 801755c:	4602      	mov	r2, r0
 801755e:	460b      	mov	r3, r1
 8017560:	4b2e      	ldr	r3, [pc, #184]	; (801761c <UART_SetConfig+0x3dc>)
 8017562:	fba3 1302 	umull	r1, r3, r3, r2
 8017566:	095b      	lsrs	r3, r3, #5
 8017568:	2164      	movs	r1, #100	; 0x64
 801756a:	fb01 f303 	mul.w	r3, r1, r3
 801756e:	1ad3      	subs	r3, r2, r3
 8017570:	00db      	lsls	r3, r3, #3
 8017572:	3332      	adds	r3, #50	; 0x32
 8017574:	4a29      	ldr	r2, [pc, #164]	; (801761c <UART_SetConfig+0x3dc>)
 8017576:	fba2 2303 	umull	r2, r3, r2, r3
 801757a:	095b      	lsrs	r3, r3, #5
 801757c:	005b      	lsls	r3, r3, #1
 801757e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8017582:	441e      	add	r6, r3
 8017584:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8017588:	4618      	mov	r0, r3
 801758a:	f04f 0100 	mov.w	r1, #0
 801758e:	4602      	mov	r2, r0
 8017590:	460b      	mov	r3, r1
 8017592:	1894      	adds	r4, r2, r2
 8017594:	63bc      	str	r4, [r7, #56]	; 0x38
 8017596:	415b      	adcs	r3, r3
 8017598:	63fb      	str	r3, [r7, #60]	; 0x3c
 801759a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801759e:	1812      	adds	r2, r2, r0
 80175a0:	eb41 0303 	adc.w	r3, r1, r3
 80175a4:	f04f 0400 	mov.w	r4, #0
 80175a8:	f04f 0500 	mov.w	r5, #0
 80175ac:	00dd      	lsls	r5, r3, #3
 80175ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80175b2:	00d4      	lsls	r4, r2, #3
 80175b4:	4622      	mov	r2, r4
 80175b6:	462b      	mov	r3, r5
 80175b8:	1814      	adds	r4, r2, r0
 80175ba:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80175be:	414b      	adcs	r3, r1
 80175c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80175c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80175c8:	685b      	ldr	r3, [r3, #4]
 80175ca:	461a      	mov	r2, r3
 80175cc:	f04f 0300 	mov.w	r3, #0
 80175d0:	1891      	adds	r1, r2, r2
 80175d2:	6339      	str	r1, [r7, #48]	; 0x30
 80175d4:	415b      	adcs	r3, r3
 80175d6:	637b      	str	r3, [r7, #52]	; 0x34
 80175d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80175dc:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80175e0:	f7e9 fb52 	bl	8000c88 <__aeabi_uldivmod>
 80175e4:	4602      	mov	r2, r0
 80175e6:	460b      	mov	r3, r1
 80175e8:	4b0c      	ldr	r3, [pc, #48]	; (801761c <UART_SetConfig+0x3dc>)
 80175ea:	fba3 1302 	umull	r1, r3, r3, r2
 80175ee:	095b      	lsrs	r3, r3, #5
 80175f0:	2164      	movs	r1, #100	; 0x64
 80175f2:	fb01 f303 	mul.w	r3, r1, r3
 80175f6:	1ad3      	subs	r3, r2, r3
 80175f8:	00db      	lsls	r3, r3, #3
 80175fa:	3332      	adds	r3, #50	; 0x32
 80175fc:	4a07      	ldr	r2, [pc, #28]	; (801761c <UART_SetConfig+0x3dc>)
 80175fe:	fba2 2303 	umull	r2, r3, r2, r3
 8017602:	095b      	lsrs	r3, r3, #5
 8017604:	f003 0207 	and.w	r2, r3, #7
 8017608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	4432      	add	r2, r6
 8017610:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8017612:	e1a6      	b.n	8017962 <UART_SetConfig+0x722>
 8017614:	40011000 	.word	0x40011000
 8017618:	40011400 	.word	0x40011400
 801761c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8017620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017624:	681a      	ldr	r2, [r3, #0]
 8017626:	4bd1      	ldr	r3, [pc, #836]	; (801796c <UART_SetConfig+0x72c>)
 8017628:	429a      	cmp	r2, r3
 801762a:	d006      	beq.n	801763a <UART_SetConfig+0x3fa>
 801762c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017630:	681a      	ldr	r2, [r3, #0]
 8017632:	4bcf      	ldr	r3, [pc, #828]	; (8017970 <UART_SetConfig+0x730>)
 8017634:	429a      	cmp	r2, r3
 8017636:	f040 80ca 	bne.w	80177ce <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 801763a:	f7fe f8e1 	bl	8015800 <HAL_RCC_GetPCLK2Freq>
 801763e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8017642:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8017646:	461c      	mov	r4, r3
 8017648:	f04f 0500 	mov.w	r5, #0
 801764c:	4622      	mov	r2, r4
 801764e:	462b      	mov	r3, r5
 8017650:	1891      	adds	r1, r2, r2
 8017652:	62b9      	str	r1, [r7, #40]	; 0x28
 8017654:	415b      	adcs	r3, r3
 8017656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017658:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801765c:	1912      	adds	r2, r2, r4
 801765e:	eb45 0303 	adc.w	r3, r5, r3
 8017662:	f04f 0000 	mov.w	r0, #0
 8017666:	f04f 0100 	mov.w	r1, #0
 801766a:	00d9      	lsls	r1, r3, #3
 801766c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8017670:	00d0      	lsls	r0, r2, #3
 8017672:	4602      	mov	r2, r0
 8017674:	460b      	mov	r3, r1
 8017676:	eb12 0a04 	adds.w	sl, r2, r4
 801767a:	eb43 0b05 	adc.w	fp, r3, r5
 801767e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017682:	685b      	ldr	r3, [r3, #4]
 8017684:	4618      	mov	r0, r3
 8017686:	f04f 0100 	mov.w	r1, #0
 801768a:	f04f 0200 	mov.w	r2, #0
 801768e:	f04f 0300 	mov.w	r3, #0
 8017692:	008b      	lsls	r3, r1, #2
 8017694:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8017698:	0082      	lsls	r2, r0, #2
 801769a:	4650      	mov	r0, sl
 801769c:	4659      	mov	r1, fp
 801769e:	f7e9 faf3 	bl	8000c88 <__aeabi_uldivmod>
 80176a2:	4602      	mov	r2, r0
 80176a4:	460b      	mov	r3, r1
 80176a6:	4bb3      	ldr	r3, [pc, #716]	; (8017974 <UART_SetConfig+0x734>)
 80176a8:	fba3 2302 	umull	r2, r3, r3, r2
 80176ac:	095b      	lsrs	r3, r3, #5
 80176ae:	011e      	lsls	r6, r3, #4
 80176b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80176b4:	4618      	mov	r0, r3
 80176b6:	f04f 0100 	mov.w	r1, #0
 80176ba:	4602      	mov	r2, r0
 80176bc:	460b      	mov	r3, r1
 80176be:	1894      	adds	r4, r2, r2
 80176c0:	623c      	str	r4, [r7, #32]
 80176c2:	415b      	adcs	r3, r3
 80176c4:	627b      	str	r3, [r7, #36]	; 0x24
 80176c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80176ca:	1812      	adds	r2, r2, r0
 80176cc:	eb41 0303 	adc.w	r3, r1, r3
 80176d0:	f04f 0400 	mov.w	r4, #0
 80176d4:	f04f 0500 	mov.w	r5, #0
 80176d8:	00dd      	lsls	r5, r3, #3
 80176da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80176de:	00d4      	lsls	r4, r2, #3
 80176e0:	4622      	mov	r2, r4
 80176e2:	462b      	mov	r3, r5
 80176e4:	1814      	adds	r4, r2, r0
 80176e6:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80176ea:	414b      	adcs	r3, r1
 80176ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80176f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80176f4:	685b      	ldr	r3, [r3, #4]
 80176f6:	4618      	mov	r0, r3
 80176f8:	f04f 0100 	mov.w	r1, #0
 80176fc:	f04f 0200 	mov.w	r2, #0
 8017700:	f04f 0300 	mov.w	r3, #0
 8017704:	008b      	lsls	r3, r1, #2
 8017706:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801770a:	0082      	lsls	r2, r0, #2
 801770c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8017710:	f7e9 faba 	bl	8000c88 <__aeabi_uldivmod>
 8017714:	4602      	mov	r2, r0
 8017716:	460b      	mov	r3, r1
 8017718:	4b96      	ldr	r3, [pc, #600]	; (8017974 <UART_SetConfig+0x734>)
 801771a:	fba3 1302 	umull	r1, r3, r3, r2
 801771e:	095b      	lsrs	r3, r3, #5
 8017720:	2164      	movs	r1, #100	; 0x64
 8017722:	fb01 f303 	mul.w	r3, r1, r3
 8017726:	1ad3      	subs	r3, r2, r3
 8017728:	011b      	lsls	r3, r3, #4
 801772a:	3332      	adds	r3, #50	; 0x32
 801772c:	4a91      	ldr	r2, [pc, #580]	; (8017974 <UART_SetConfig+0x734>)
 801772e:	fba2 2303 	umull	r2, r3, r2, r3
 8017732:	095b      	lsrs	r3, r3, #5
 8017734:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017738:	441e      	add	r6, r3
 801773a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801773e:	4618      	mov	r0, r3
 8017740:	f04f 0100 	mov.w	r1, #0
 8017744:	4602      	mov	r2, r0
 8017746:	460b      	mov	r3, r1
 8017748:	1894      	adds	r4, r2, r2
 801774a:	61bc      	str	r4, [r7, #24]
 801774c:	415b      	adcs	r3, r3
 801774e:	61fb      	str	r3, [r7, #28]
 8017750:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8017754:	1812      	adds	r2, r2, r0
 8017756:	eb41 0303 	adc.w	r3, r1, r3
 801775a:	f04f 0400 	mov.w	r4, #0
 801775e:	f04f 0500 	mov.w	r5, #0
 8017762:	00dd      	lsls	r5, r3, #3
 8017764:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8017768:	00d4      	lsls	r4, r2, #3
 801776a:	4622      	mov	r2, r4
 801776c:	462b      	mov	r3, r5
 801776e:	1814      	adds	r4, r2, r0
 8017770:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8017774:	414b      	adcs	r3, r1
 8017776:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801777a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801777e:	685b      	ldr	r3, [r3, #4]
 8017780:	4618      	mov	r0, r3
 8017782:	f04f 0100 	mov.w	r1, #0
 8017786:	f04f 0200 	mov.w	r2, #0
 801778a:	f04f 0300 	mov.w	r3, #0
 801778e:	008b      	lsls	r3, r1, #2
 8017790:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8017794:	0082      	lsls	r2, r0, #2
 8017796:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 801779a:	f7e9 fa75 	bl	8000c88 <__aeabi_uldivmod>
 801779e:	4602      	mov	r2, r0
 80177a0:	460b      	mov	r3, r1
 80177a2:	4b74      	ldr	r3, [pc, #464]	; (8017974 <UART_SetConfig+0x734>)
 80177a4:	fba3 1302 	umull	r1, r3, r3, r2
 80177a8:	095b      	lsrs	r3, r3, #5
 80177aa:	2164      	movs	r1, #100	; 0x64
 80177ac:	fb01 f303 	mul.w	r3, r1, r3
 80177b0:	1ad3      	subs	r3, r2, r3
 80177b2:	011b      	lsls	r3, r3, #4
 80177b4:	3332      	adds	r3, #50	; 0x32
 80177b6:	4a6f      	ldr	r2, [pc, #444]	; (8017974 <UART_SetConfig+0x734>)
 80177b8:	fba2 2303 	umull	r2, r3, r2, r3
 80177bc:	095b      	lsrs	r3, r3, #5
 80177be:	f003 020f 	and.w	r2, r3, #15
 80177c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	4432      	add	r2, r6
 80177ca:	609a      	str	r2, [r3, #8]
 80177cc:	e0c9      	b.n	8017962 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80177ce:	f7fe f803 	bl	80157d8 <HAL_RCC_GetPCLK1Freq>
 80177d2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80177d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80177da:	461c      	mov	r4, r3
 80177dc:	f04f 0500 	mov.w	r5, #0
 80177e0:	4622      	mov	r2, r4
 80177e2:	462b      	mov	r3, r5
 80177e4:	1891      	adds	r1, r2, r2
 80177e6:	6139      	str	r1, [r7, #16]
 80177e8:	415b      	adcs	r3, r3
 80177ea:	617b      	str	r3, [r7, #20]
 80177ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80177f0:	1912      	adds	r2, r2, r4
 80177f2:	eb45 0303 	adc.w	r3, r5, r3
 80177f6:	f04f 0000 	mov.w	r0, #0
 80177fa:	f04f 0100 	mov.w	r1, #0
 80177fe:	00d9      	lsls	r1, r3, #3
 8017800:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8017804:	00d0      	lsls	r0, r2, #3
 8017806:	4602      	mov	r2, r0
 8017808:	460b      	mov	r3, r1
 801780a:	eb12 0804 	adds.w	r8, r2, r4
 801780e:	eb43 0905 	adc.w	r9, r3, r5
 8017812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017816:	685b      	ldr	r3, [r3, #4]
 8017818:	4618      	mov	r0, r3
 801781a:	f04f 0100 	mov.w	r1, #0
 801781e:	f04f 0200 	mov.w	r2, #0
 8017822:	f04f 0300 	mov.w	r3, #0
 8017826:	008b      	lsls	r3, r1, #2
 8017828:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801782c:	0082      	lsls	r2, r0, #2
 801782e:	4640      	mov	r0, r8
 8017830:	4649      	mov	r1, r9
 8017832:	f7e9 fa29 	bl	8000c88 <__aeabi_uldivmod>
 8017836:	4602      	mov	r2, r0
 8017838:	460b      	mov	r3, r1
 801783a:	4b4e      	ldr	r3, [pc, #312]	; (8017974 <UART_SetConfig+0x734>)
 801783c:	fba3 2302 	umull	r2, r3, r3, r2
 8017840:	095b      	lsrs	r3, r3, #5
 8017842:	011e      	lsls	r6, r3, #4
 8017844:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8017848:	4618      	mov	r0, r3
 801784a:	f04f 0100 	mov.w	r1, #0
 801784e:	4602      	mov	r2, r0
 8017850:	460b      	mov	r3, r1
 8017852:	1894      	adds	r4, r2, r2
 8017854:	60bc      	str	r4, [r7, #8]
 8017856:	415b      	adcs	r3, r3
 8017858:	60fb      	str	r3, [r7, #12]
 801785a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801785e:	1812      	adds	r2, r2, r0
 8017860:	eb41 0303 	adc.w	r3, r1, r3
 8017864:	f04f 0400 	mov.w	r4, #0
 8017868:	f04f 0500 	mov.w	r5, #0
 801786c:	00dd      	lsls	r5, r3, #3
 801786e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8017872:	00d4      	lsls	r4, r2, #3
 8017874:	4622      	mov	r2, r4
 8017876:	462b      	mov	r3, r5
 8017878:	1814      	adds	r4, r2, r0
 801787a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 801787e:	414b      	adcs	r3, r1
 8017880:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8017884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017888:	685b      	ldr	r3, [r3, #4]
 801788a:	4618      	mov	r0, r3
 801788c:	f04f 0100 	mov.w	r1, #0
 8017890:	f04f 0200 	mov.w	r2, #0
 8017894:	f04f 0300 	mov.w	r3, #0
 8017898:	008b      	lsls	r3, r1, #2
 801789a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801789e:	0082      	lsls	r2, r0, #2
 80178a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80178a4:	f7e9 f9f0 	bl	8000c88 <__aeabi_uldivmod>
 80178a8:	4602      	mov	r2, r0
 80178aa:	460b      	mov	r3, r1
 80178ac:	4b31      	ldr	r3, [pc, #196]	; (8017974 <UART_SetConfig+0x734>)
 80178ae:	fba3 1302 	umull	r1, r3, r3, r2
 80178b2:	095b      	lsrs	r3, r3, #5
 80178b4:	2164      	movs	r1, #100	; 0x64
 80178b6:	fb01 f303 	mul.w	r3, r1, r3
 80178ba:	1ad3      	subs	r3, r2, r3
 80178bc:	011b      	lsls	r3, r3, #4
 80178be:	3332      	adds	r3, #50	; 0x32
 80178c0:	4a2c      	ldr	r2, [pc, #176]	; (8017974 <UART_SetConfig+0x734>)
 80178c2:	fba2 2303 	umull	r2, r3, r2, r3
 80178c6:	095b      	lsrs	r3, r3, #5
 80178c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80178cc:	441e      	add	r6, r3
 80178ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80178d2:	4618      	mov	r0, r3
 80178d4:	f04f 0100 	mov.w	r1, #0
 80178d8:	4602      	mov	r2, r0
 80178da:	460b      	mov	r3, r1
 80178dc:	1894      	adds	r4, r2, r2
 80178de:	603c      	str	r4, [r7, #0]
 80178e0:	415b      	adcs	r3, r3
 80178e2:	607b      	str	r3, [r7, #4]
 80178e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80178e8:	1812      	adds	r2, r2, r0
 80178ea:	eb41 0303 	adc.w	r3, r1, r3
 80178ee:	f04f 0400 	mov.w	r4, #0
 80178f2:	f04f 0500 	mov.w	r5, #0
 80178f6:	00dd      	lsls	r5, r3, #3
 80178f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80178fc:	00d4      	lsls	r4, r2, #3
 80178fe:	4622      	mov	r2, r4
 8017900:	462b      	mov	r3, r5
 8017902:	1814      	adds	r4, r2, r0
 8017904:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8017908:	414b      	adcs	r3, r1
 801790a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801790e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017912:	685b      	ldr	r3, [r3, #4]
 8017914:	4618      	mov	r0, r3
 8017916:	f04f 0100 	mov.w	r1, #0
 801791a:	f04f 0200 	mov.w	r2, #0
 801791e:	f04f 0300 	mov.w	r3, #0
 8017922:	008b      	lsls	r3, r1, #2
 8017924:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8017928:	0082      	lsls	r2, r0, #2
 801792a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 801792e:	f7e9 f9ab 	bl	8000c88 <__aeabi_uldivmod>
 8017932:	4602      	mov	r2, r0
 8017934:	460b      	mov	r3, r1
 8017936:	4b0f      	ldr	r3, [pc, #60]	; (8017974 <UART_SetConfig+0x734>)
 8017938:	fba3 1302 	umull	r1, r3, r3, r2
 801793c:	095b      	lsrs	r3, r3, #5
 801793e:	2164      	movs	r1, #100	; 0x64
 8017940:	fb01 f303 	mul.w	r3, r1, r3
 8017944:	1ad3      	subs	r3, r2, r3
 8017946:	011b      	lsls	r3, r3, #4
 8017948:	3332      	adds	r3, #50	; 0x32
 801794a:	4a0a      	ldr	r2, [pc, #40]	; (8017974 <UART_SetConfig+0x734>)
 801794c:	fba2 2303 	umull	r2, r3, r2, r3
 8017950:	095b      	lsrs	r3, r3, #5
 8017952:	f003 020f 	and.w	r2, r3, #15
 8017956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	4432      	add	r2, r6
 801795e:	609a      	str	r2, [r3, #8]
}
 8017960:	e7ff      	b.n	8017962 <UART_SetConfig+0x722>
 8017962:	bf00      	nop
 8017964:	37f4      	adds	r7, #244	; 0xf4
 8017966:	46bd      	mov	sp, r7
 8017968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801796c:	40011000 	.word	0x40011000
 8017970:	40011400 	.word	0x40011400
 8017974:	51eb851f 	.word	0x51eb851f

08017978 <__NVIC_SetPriority>:
{
 8017978:	b480      	push	{r7}
 801797a:	b083      	sub	sp, #12
 801797c:	af00      	add	r7, sp, #0
 801797e:	4603      	mov	r3, r0
 8017980:	6039      	str	r1, [r7, #0]
 8017982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017988:	2b00      	cmp	r3, #0
 801798a:	db0a      	blt.n	80179a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801798c:	683b      	ldr	r3, [r7, #0]
 801798e:	b2da      	uxtb	r2, r3
 8017990:	490c      	ldr	r1, [pc, #48]	; (80179c4 <__NVIC_SetPriority+0x4c>)
 8017992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017996:	0112      	lsls	r2, r2, #4
 8017998:	b2d2      	uxtb	r2, r2
 801799a:	440b      	add	r3, r1
 801799c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80179a0:	e00a      	b.n	80179b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80179a2:	683b      	ldr	r3, [r7, #0]
 80179a4:	b2da      	uxtb	r2, r3
 80179a6:	4908      	ldr	r1, [pc, #32]	; (80179c8 <__NVIC_SetPriority+0x50>)
 80179a8:	79fb      	ldrb	r3, [r7, #7]
 80179aa:	f003 030f 	and.w	r3, r3, #15
 80179ae:	3b04      	subs	r3, #4
 80179b0:	0112      	lsls	r2, r2, #4
 80179b2:	b2d2      	uxtb	r2, r2
 80179b4:	440b      	add	r3, r1
 80179b6:	761a      	strb	r2, [r3, #24]
}
 80179b8:	bf00      	nop
 80179ba:	370c      	adds	r7, #12
 80179bc:	46bd      	mov	sp, r7
 80179be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179c2:	4770      	bx	lr
 80179c4:	e000e100 	.word	0xe000e100
 80179c8:	e000ed00 	.word	0xe000ed00

080179cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80179cc:	b580      	push	{r7, lr}
 80179ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80179d0:	4b05      	ldr	r3, [pc, #20]	; (80179e8 <SysTick_Handler+0x1c>)
 80179d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80179d4:	f001 fe02 	bl	80195dc <xTaskGetSchedulerState>
 80179d8:	4603      	mov	r3, r0
 80179da:	2b01      	cmp	r3, #1
 80179dc:	d001      	beq.n	80179e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80179de:	f002 fbeb 	bl	801a1b8 <xPortSysTickHandler>
  }
}
 80179e2:	bf00      	nop
 80179e4:	bd80      	pop	{r7, pc}
 80179e6:	bf00      	nop
 80179e8:	e000e010 	.word	0xe000e010

080179ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80179ec:	b580      	push	{r7, lr}
 80179ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80179f0:	2100      	movs	r1, #0
 80179f2:	f06f 0004 	mvn.w	r0, #4
 80179f6:	f7ff ffbf 	bl	8017978 <__NVIC_SetPriority>
#endif
}
 80179fa:	bf00      	nop
 80179fc:	bd80      	pop	{r7, pc}
	...

08017a00 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8017a00:	b480      	push	{r7}
 8017a02:	b083      	sub	sp, #12
 8017a04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017a06:	f3ef 8305 	mrs	r3, IPSR
 8017a0a:	603b      	str	r3, [r7, #0]
  return(result);
 8017a0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017a0e:	2b00      	cmp	r3, #0
 8017a10:	d003      	beq.n	8017a1a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8017a12:	f06f 0305 	mvn.w	r3, #5
 8017a16:	607b      	str	r3, [r7, #4]
 8017a18:	e00c      	b.n	8017a34 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8017a1a:	4b0a      	ldr	r3, [pc, #40]	; (8017a44 <osKernelInitialize+0x44>)
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d105      	bne.n	8017a2e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8017a22:	4b08      	ldr	r3, [pc, #32]	; (8017a44 <osKernelInitialize+0x44>)
 8017a24:	2201      	movs	r2, #1
 8017a26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8017a28:	2300      	movs	r3, #0
 8017a2a:	607b      	str	r3, [r7, #4]
 8017a2c:	e002      	b.n	8017a34 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8017a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017a32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8017a34:	687b      	ldr	r3, [r7, #4]
}
 8017a36:	4618      	mov	r0, r3
 8017a38:	370c      	adds	r7, #12
 8017a3a:	46bd      	mov	sp, r7
 8017a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a40:	4770      	bx	lr
 8017a42:	bf00      	nop
 8017a44:	200015ec 	.word	0x200015ec

08017a48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8017a48:	b580      	push	{r7, lr}
 8017a4a:	b082      	sub	sp, #8
 8017a4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017a4e:	f3ef 8305 	mrs	r3, IPSR
 8017a52:	603b      	str	r3, [r7, #0]
  return(result);
 8017a54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d003      	beq.n	8017a62 <osKernelStart+0x1a>
    stat = osErrorISR;
 8017a5a:	f06f 0305 	mvn.w	r3, #5
 8017a5e:	607b      	str	r3, [r7, #4]
 8017a60:	e010      	b.n	8017a84 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8017a62:	4b0b      	ldr	r3, [pc, #44]	; (8017a90 <osKernelStart+0x48>)
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	2b01      	cmp	r3, #1
 8017a68:	d109      	bne.n	8017a7e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8017a6a:	f7ff ffbf 	bl	80179ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8017a6e:	4b08      	ldr	r3, [pc, #32]	; (8017a90 <osKernelStart+0x48>)
 8017a70:	2202      	movs	r2, #2
 8017a72:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8017a74:	f001 f96a 	bl	8018d4c <vTaskStartScheduler>
      stat = osOK;
 8017a78:	2300      	movs	r3, #0
 8017a7a:	607b      	str	r3, [r7, #4]
 8017a7c:	e002      	b.n	8017a84 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8017a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017a82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8017a84:	687b      	ldr	r3, [r7, #4]
}
 8017a86:	4618      	mov	r0, r3
 8017a88:	3708      	adds	r7, #8
 8017a8a:	46bd      	mov	sp, r7
 8017a8c:	bd80      	pop	{r7, pc}
 8017a8e:	bf00      	nop
 8017a90:	200015ec 	.word	0x200015ec

08017a94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8017a94:	b580      	push	{r7, lr}
 8017a96:	b08e      	sub	sp, #56	; 0x38
 8017a98:	af04      	add	r7, sp, #16
 8017a9a:	60f8      	str	r0, [r7, #12]
 8017a9c:	60b9      	str	r1, [r7, #8]
 8017a9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8017aa0:	2300      	movs	r3, #0
 8017aa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017aa4:	f3ef 8305 	mrs	r3, IPSR
 8017aa8:	617b      	str	r3, [r7, #20]
  return(result);
 8017aaa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d17e      	bne.n	8017bae <osThreadNew+0x11a>
 8017ab0:	68fb      	ldr	r3, [r7, #12]
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d07b      	beq.n	8017bae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8017ab6:	2380      	movs	r3, #128	; 0x80
 8017ab8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8017aba:	2318      	movs	r3, #24
 8017abc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8017abe:	2300      	movs	r3, #0
 8017ac0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8017ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017ac6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d045      	beq.n	8017b5a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d002      	beq.n	8017adc <osThreadNew+0x48>
        name = attr->name;
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	699b      	ldr	r3, [r3, #24]
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d002      	beq.n	8017aea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	699b      	ldr	r3, [r3, #24]
 8017ae8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8017aea:	69fb      	ldr	r3, [r7, #28]
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d008      	beq.n	8017b02 <osThreadNew+0x6e>
 8017af0:	69fb      	ldr	r3, [r7, #28]
 8017af2:	2b38      	cmp	r3, #56	; 0x38
 8017af4:	d805      	bhi.n	8017b02 <osThreadNew+0x6e>
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	685b      	ldr	r3, [r3, #4]
 8017afa:	f003 0301 	and.w	r3, r3, #1
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d001      	beq.n	8017b06 <osThreadNew+0x72>
        return (NULL);
 8017b02:	2300      	movs	r3, #0
 8017b04:	e054      	b.n	8017bb0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	695b      	ldr	r3, [r3, #20]
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d003      	beq.n	8017b16 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	695b      	ldr	r3, [r3, #20]
 8017b12:	089b      	lsrs	r3, r3, #2
 8017b14:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	689b      	ldr	r3, [r3, #8]
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d00e      	beq.n	8017b3c <osThreadNew+0xa8>
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	68db      	ldr	r3, [r3, #12]
 8017b22:	2b5b      	cmp	r3, #91	; 0x5b
 8017b24:	d90a      	bls.n	8017b3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d006      	beq.n	8017b3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	695b      	ldr	r3, [r3, #20]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d002      	beq.n	8017b3c <osThreadNew+0xa8>
        mem = 1;
 8017b36:	2301      	movs	r3, #1
 8017b38:	61bb      	str	r3, [r7, #24]
 8017b3a:	e010      	b.n	8017b5e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	689b      	ldr	r3, [r3, #8]
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d10c      	bne.n	8017b5e <osThreadNew+0xca>
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	68db      	ldr	r3, [r3, #12]
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d108      	bne.n	8017b5e <osThreadNew+0xca>
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	691b      	ldr	r3, [r3, #16]
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d104      	bne.n	8017b5e <osThreadNew+0xca>
          mem = 0;
 8017b54:	2300      	movs	r3, #0
 8017b56:	61bb      	str	r3, [r7, #24]
 8017b58:	e001      	b.n	8017b5e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8017b5a:	2300      	movs	r3, #0
 8017b5c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8017b5e:	69bb      	ldr	r3, [r7, #24]
 8017b60:	2b01      	cmp	r3, #1
 8017b62:	d110      	bne.n	8017b86 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8017b68:	687a      	ldr	r2, [r7, #4]
 8017b6a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017b6c:	9202      	str	r2, [sp, #8]
 8017b6e:	9301      	str	r3, [sp, #4]
 8017b70:	69fb      	ldr	r3, [r7, #28]
 8017b72:	9300      	str	r3, [sp, #0]
 8017b74:	68bb      	ldr	r3, [r7, #8]
 8017b76:	6a3a      	ldr	r2, [r7, #32]
 8017b78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017b7a:	68f8      	ldr	r0, [r7, #12]
 8017b7c:	f000 fe38 	bl	80187f0 <xTaskCreateStatic>
 8017b80:	4603      	mov	r3, r0
 8017b82:	613b      	str	r3, [r7, #16]
 8017b84:	e013      	b.n	8017bae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8017b86:	69bb      	ldr	r3, [r7, #24]
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d110      	bne.n	8017bae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8017b8c:	6a3b      	ldr	r3, [r7, #32]
 8017b8e:	b29a      	uxth	r2, r3
 8017b90:	f107 0310 	add.w	r3, r7, #16
 8017b94:	9301      	str	r3, [sp, #4]
 8017b96:	69fb      	ldr	r3, [r7, #28]
 8017b98:	9300      	str	r3, [sp, #0]
 8017b9a:	68bb      	ldr	r3, [r7, #8]
 8017b9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017b9e:	68f8      	ldr	r0, [r7, #12]
 8017ba0:	f000 fe83 	bl	80188aa <xTaskCreate>
 8017ba4:	4603      	mov	r3, r0
 8017ba6:	2b01      	cmp	r3, #1
 8017ba8:	d001      	beq.n	8017bae <osThreadNew+0x11a>
            hTask = NULL;
 8017baa:	2300      	movs	r3, #0
 8017bac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8017bae:	693b      	ldr	r3, [r7, #16]
}
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	3728      	adds	r7, #40	; 0x28
 8017bb4:	46bd      	mov	sp, r7
 8017bb6:	bd80      	pop	{r7, pc}

08017bb8 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b086      	sub	sp, #24
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017bc4:	f3ef 8305 	mrs	r3, IPSR
 8017bc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8017bca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d003      	beq.n	8017bd8 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8017bd0:	f06f 0305 	mvn.w	r3, #5
 8017bd4:	617b      	str	r3, [r7, #20]
 8017bd6:	e017      	b.n	8017c08 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8017bd8:	693b      	ldr	r3, [r7, #16]
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d103      	bne.n	8017be6 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8017bde:	f06f 0303 	mvn.w	r3, #3
 8017be2:	617b      	str	r3, [r7, #20]
 8017be4:	e010      	b.n	8017c08 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8017be6:	6938      	ldr	r0, [r7, #16]
 8017be8:	f001 f84a 	bl	8018c80 <eTaskGetState>
 8017bec:	4603      	mov	r3, r0
 8017bee:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8017bf0:	7bfb      	ldrb	r3, [r7, #15]
 8017bf2:	2b04      	cmp	r3, #4
 8017bf4:	d005      	beq.n	8017c02 <osThreadTerminate+0x4a>
      stat = osOK;
 8017bf6:	2300      	movs	r3, #0
 8017bf8:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8017bfa:	6938      	ldr	r0, [r7, #16]
 8017bfc:	f000 ff9a 	bl	8018b34 <vTaskDelete>
 8017c00:	e002      	b.n	8017c08 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8017c02:	f06f 0302 	mvn.w	r3, #2
 8017c06:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8017c08:	697b      	ldr	r3, [r7, #20]
}
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	3718      	adds	r7, #24
 8017c0e:	46bd      	mov	sp, r7
 8017c10:	bd80      	pop	{r7, pc}

08017c12 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8017c12:	b580      	push	{r7, lr}
 8017c14:	b084      	sub	sp, #16
 8017c16:	af00      	add	r7, sp, #0
 8017c18:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017c1a:	f3ef 8305 	mrs	r3, IPSR
 8017c1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8017c20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d003      	beq.n	8017c2e <osDelay+0x1c>
    stat = osErrorISR;
 8017c26:	f06f 0305 	mvn.w	r3, #5
 8017c2a:	60fb      	str	r3, [r7, #12]
 8017c2c:	e007      	b.n	8017c3e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8017c2e:	2300      	movs	r3, #0
 8017c30:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d002      	beq.n	8017c3e <osDelay+0x2c>
      vTaskDelay(ticks);
 8017c38:	6878      	ldr	r0, [r7, #4]
 8017c3a:	f000 ffed 	bl	8018c18 <vTaskDelay>
    }
  }

  return (stat);
 8017c3e:	68fb      	ldr	r3, [r7, #12]
}
 8017c40:	4618      	mov	r0, r3
 8017c42:	3710      	adds	r7, #16
 8017c44:	46bd      	mov	sp, r7
 8017c46:	bd80      	pop	{r7, pc}

08017c48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8017c48:	b480      	push	{r7}
 8017c4a:	b085      	sub	sp, #20
 8017c4c:	af00      	add	r7, sp, #0
 8017c4e:	60f8      	str	r0, [r7, #12]
 8017c50:	60b9      	str	r1, [r7, #8]
 8017c52:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8017c54:	68fb      	ldr	r3, [r7, #12]
 8017c56:	4a07      	ldr	r2, [pc, #28]	; (8017c74 <vApplicationGetIdleTaskMemory+0x2c>)
 8017c58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8017c5a:	68bb      	ldr	r3, [r7, #8]
 8017c5c:	4a06      	ldr	r2, [pc, #24]	; (8017c78 <vApplicationGetIdleTaskMemory+0x30>)
 8017c5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	2280      	movs	r2, #128	; 0x80
 8017c64:	601a      	str	r2, [r3, #0]
}
 8017c66:	bf00      	nop
 8017c68:	3714      	adds	r7, #20
 8017c6a:	46bd      	mov	sp, r7
 8017c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c70:	4770      	bx	lr
 8017c72:	bf00      	nop
 8017c74:	200015f0 	.word	0x200015f0
 8017c78:	2000164c 	.word	0x2000164c

08017c7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8017c7c:	b480      	push	{r7}
 8017c7e:	b085      	sub	sp, #20
 8017c80:	af00      	add	r7, sp, #0
 8017c82:	60f8      	str	r0, [r7, #12]
 8017c84:	60b9      	str	r1, [r7, #8]
 8017c86:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8017c88:	68fb      	ldr	r3, [r7, #12]
 8017c8a:	4a07      	ldr	r2, [pc, #28]	; (8017ca8 <vApplicationGetTimerTaskMemory+0x2c>)
 8017c8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8017c8e:	68bb      	ldr	r3, [r7, #8]
 8017c90:	4a06      	ldr	r2, [pc, #24]	; (8017cac <vApplicationGetTimerTaskMemory+0x30>)
 8017c92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017c9a:	601a      	str	r2, [r3, #0]
}
 8017c9c:	bf00      	nop
 8017c9e:	3714      	adds	r7, #20
 8017ca0:	46bd      	mov	sp, r7
 8017ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca6:	4770      	bx	lr
 8017ca8:	2000184c 	.word	0x2000184c
 8017cac:	200018a8 	.word	0x200018a8

08017cb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8017cb0:	b480      	push	{r7}
 8017cb2:	b083      	sub	sp, #12
 8017cb4:	af00      	add	r7, sp, #0
 8017cb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	f103 0208 	add.w	r2, r3, #8
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017cc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	f103 0208 	add.w	r2, r3, #8
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	f103 0208 	add.w	r2, r3, #8
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	2200      	movs	r2, #0
 8017ce2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8017ce4:	bf00      	nop
 8017ce6:	370c      	adds	r7, #12
 8017ce8:	46bd      	mov	sp, r7
 8017cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cee:	4770      	bx	lr

08017cf0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8017cf0:	b480      	push	{r7}
 8017cf2:	b083      	sub	sp, #12
 8017cf4:	af00      	add	r7, sp, #0
 8017cf6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	2200      	movs	r2, #0
 8017cfc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017cfe:	bf00      	nop
 8017d00:	370c      	adds	r7, #12
 8017d02:	46bd      	mov	sp, r7
 8017d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d08:	4770      	bx	lr

08017d0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017d0a:	b480      	push	{r7}
 8017d0c:	b085      	sub	sp, #20
 8017d0e:	af00      	add	r7, sp, #0
 8017d10:	6078      	str	r0, [r7, #4]
 8017d12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	685b      	ldr	r3, [r3, #4]
 8017d18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017d1a:	683b      	ldr	r3, [r7, #0]
 8017d1c:	68fa      	ldr	r2, [r7, #12]
 8017d1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017d20:	68fb      	ldr	r3, [r7, #12]
 8017d22:	689a      	ldr	r2, [r3, #8]
 8017d24:	683b      	ldr	r3, [r7, #0]
 8017d26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017d28:	68fb      	ldr	r3, [r7, #12]
 8017d2a:	689b      	ldr	r3, [r3, #8]
 8017d2c:	683a      	ldr	r2, [r7, #0]
 8017d2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	683a      	ldr	r2, [r7, #0]
 8017d34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8017d36:	683b      	ldr	r3, [r7, #0]
 8017d38:	687a      	ldr	r2, [r7, #4]
 8017d3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	1c5a      	adds	r2, r3, #1
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	601a      	str	r2, [r3, #0]
}
 8017d46:	bf00      	nop
 8017d48:	3714      	adds	r7, #20
 8017d4a:	46bd      	mov	sp, r7
 8017d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d50:	4770      	bx	lr

08017d52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017d52:	b480      	push	{r7}
 8017d54:	b085      	sub	sp, #20
 8017d56:	af00      	add	r7, sp, #0
 8017d58:	6078      	str	r0, [r7, #4]
 8017d5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017d5c:	683b      	ldr	r3, [r7, #0]
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8017d62:	68bb      	ldr	r3, [r7, #8]
 8017d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017d68:	d103      	bne.n	8017d72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	691b      	ldr	r3, [r3, #16]
 8017d6e:	60fb      	str	r3, [r7, #12]
 8017d70:	e00c      	b.n	8017d8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	3308      	adds	r3, #8
 8017d76:	60fb      	str	r3, [r7, #12]
 8017d78:	e002      	b.n	8017d80 <vListInsert+0x2e>
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	685b      	ldr	r3, [r3, #4]
 8017d7e:	60fb      	str	r3, [r7, #12]
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	685b      	ldr	r3, [r3, #4]
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	68ba      	ldr	r2, [r7, #8]
 8017d88:	429a      	cmp	r2, r3
 8017d8a:	d2f6      	bcs.n	8017d7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	685a      	ldr	r2, [r3, #4]
 8017d90:	683b      	ldr	r3, [r7, #0]
 8017d92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017d94:	683b      	ldr	r3, [r7, #0]
 8017d96:	685b      	ldr	r3, [r3, #4]
 8017d98:	683a      	ldr	r2, [r7, #0]
 8017d9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017d9c:	683b      	ldr	r3, [r7, #0]
 8017d9e:	68fa      	ldr	r2, [r7, #12]
 8017da0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8017da2:	68fb      	ldr	r3, [r7, #12]
 8017da4:	683a      	ldr	r2, [r7, #0]
 8017da6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8017da8:	683b      	ldr	r3, [r7, #0]
 8017daa:	687a      	ldr	r2, [r7, #4]
 8017dac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	1c5a      	adds	r2, r3, #1
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	601a      	str	r2, [r3, #0]
}
 8017db8:	bf00      	nop
 8017dba:	3714      	adds	r7, #20
 8017dbc:	46bd      	mov	sp, r7
 8017dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dc2:	4770      	bx	lr

08017dc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8017dc4:	b480      	push	{r7}
 8017dc6:	b085      	sub	sp, #20
 8017dc8:	af00      	add	r7, sp, #0
 8017dca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	691b      	ldr	r3, [r3, #16]
 8017dd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	685b      	ldr	r3, [r3, #4]
 8017dd6:	687a      	ldr	r2, [r7, #4]
 8017dd8:	6892      	ldr	r2, [r2, #8]
 8017dda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	689b      	ldr	r3, [r3, #8]
 8017de0:	687a      	ldr	r2, [r7, #4]
 8017de2:	6852      	ldr	r2, [r2, #4]
 8017de4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	685b      	ldr	r3, [r3, #4]
 8017dea:	687a      	ldr	r2, [r7, #4]
 8017dec:	429a      	cmp	r2, r3
 8017dee:	d103      	bne.n	8017df8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	689a      	ldr	r2, [r3, #8]
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	2200      	movs	r2, #0
 8017dfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	1e5a      	subs	r2, r3, #1
 8017e04:	68fb      	ldr	r3, [r7, #12]
 8017e06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017e08:	68fb      	ldr	r3, [r7, #12]
 8017e0a:	681b      	ldr	r3, [r3, #0]
}
 8017e0c:	4618      	mov	r0, r3
 8017e0e:	3714      	adds	r7, #20
 8017e10:	46bd      	mov	sp, r7
 8017e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e16:	4770      	bx	lr

08017e18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017e18:	b580      	push	{r7, lr}
 8017e1a:	b084      	sub	sp, #16
 8017e1c:	af00      	add	r7, sp, #0
 8017e1e:	6078      	str	r0, [r7, #4]
 8017e20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d10a      	bne.n	8017e42 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8017e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e30:	f383 8811 	msr	BASEPRI, r3
 8017e34:	f3bf 8f6f 	isb	sy
 8017e38:	f3bf 8f4f 	dsb	sy
 8017e3c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8017e3e:	bf00      	nop
 8017e40:	e7fe      	b.n	8017e40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8017e42:	f002 f927 	bl	801a094 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	681a      	ldr	r2, [r3, #0]
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e4e:	68f9      	ldr	r1, [r7, #12]
 8017e50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017e52:	fb01 f303 	mul.w	r3, r1, r3
 8017e56:	441a      	add	r2, r3
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8017e5c:	68fb      	ldr	r3, [r7, #12]
 8017e5e:	2200      	movs	r2, #0
 8017e60:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017e62:	68fb      	ldr	r3, [r7, #12]
 8017e64:	681a      	ldr	r2, [r3, #0]
 8017e66:	68fb      	ldr	r3, [r7, #12]
 8017e68:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017e6a:	68fb      	ldr	r3, [r7, #12]
 8017e6c:	681a      	ldr	r2, [r3, #0]
 8017e6e:	68fb      	ldr	r3, [r7, #12]
 8017e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e72:	3b01      	subs	r3, #1
 8017e74:	68f9      	ldr	r1, [r7, #12]
 8017e76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017e78:	fb01 f303 	mul.w	r3, r1, r3
 8017e7c:	441a      	add	r2, r3
 8017e7e:	68fb      	ldr	r3, [r7, #12]
 8017e80:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	22ff      	movs	r2, #255	; 0xff
 8017e86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8017e8a:	68fb      	ldr	r3, [r7, #12]
 8017e8c:	22ff      	movs	r2, #255	; 0xff
 8017e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8017e92:	683b      	ldr	r3, [r7, #0]
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d114      	bne.n	8017ec2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017e98:	68fb      	ldr	r3, [r7, #12]
 8017e9a:	691b      	ldr	r3, [r3, #16]
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d01a      	beq.n	8017ed6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	3310      	adds	r3, #16
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	f001 f9db 	bl	8019260 <xTaskRemoveFromEventList>
 8017eaa:	4603      	mov	r3, r0
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d012      	beq.n	8017ed6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8017eb0:	4b0c      	ldr	r3, [pc, #48]	; (8017ee4 <xQueueGenericReset+0xcc>)
 8017eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017eb6:	601a      	str	r2, [r3, #0]
 8017eb8:	f3bf 8f4f 	dsb	sy
 8017ebc:	f3bf 8f6f 	isb	sy
 8017ec0:	e009      	b.n	8017ed6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	3310      	adds	r3, #16
 8017ec6:	4618      	mov	r0, r3
 8017ec8:	f7ff fef2 	bl	8017cb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017ecc:	68fb      	ldr	r3, [r7, #12]
 8017ece:	3324      	adds	r3, #36	; 0x24
 8017ed0:	4618      	mov	r0, r3
 8017ed2:	f7ff feed 	bl	8017cb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8017ed6:	f002 f90d 	bl	801a0f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8017eda:	2301      	movs	r3, #1
}
 8017edc:	4618      	mov	r0, r3
 8017ede:	3710      	adds	r7, #16
 8017ee0:	46bd      	mov	sp, r7
 8017ee2:	bd80      	pop	{r7, pc}
 8017ee4:	e000ed04 	.word	0xe000ed04

08017ee8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8017ee8:	b580      	push	{r7, lr}
 8017eea:	b08e      	sub	sp, #56	; 0x38
 8017eec:	af02      	add	r7, sp, #8
 8017eee:	60f8      	str	r0, [r7, #12]
 8017ef0:	60b9      	str	r1, [r7, #8]
 8017ef2:	607a      	str	r2, [r7, #4]
 8017ef4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d10a      	bne.n	8017f12 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8017efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f00:	f383 8811 	msr	BASEPRI, r3
 8017f04:	f3bf 8f6f 	isb	sy
 8017f08:	f3bf 8f4f 	dsb	sy
 8017f0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017f0e:	bf00      	nop
 8017f10:	e7fe      	b.n	8017f10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8017f12:	683b      	ldr	r3, [r7, #0]
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d10a      	bne.n	8017f2e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8017f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f1c:	f383 8811 	msr	BASEPRI, r3
 8017f20:	f3bf 8f6f 	isb	sy
 8017f24:	f3bf 8f4f 	dsb	sy
 8017f28:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017f2a:	bf00      	nop
 8017f2c:	e7fe      	b.n	8017f2c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d002      	beq.n	8017f3a <xQueueGenericCreateStatic+0x52>
 8017f34:	68bb      	ldr	r3, [r7, #8]
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d001      	beq.n	8017f3e <xQueueGenericCreateStatic+0x56>
 8017f3a:	2301      	movs	r3, #1
 8017f3c:	e000      	b.n	8017f40 <xQueueGenericCreateStatic+0x58>
 8017f3e:	2300      	movs	r3, #0
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d10a      	bne.n	8017f5a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8017f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f48:	f383 8811 	msr	BASEPRI, r3
 8017f4c:	f3bf 8f6f 	isb	sy
 8017f50:	f3bf 8f4f 	dsb	sy
 8017f54:	623b      	str	r3, [r7, #32]
}
 8017f56:	bf00      	nop
 8017f58:	e7fe      	b.n	8017f58 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d102      	bne.n	8017f66 <xQueueGenericCreateStatic+0x7e>
 8017f60:	68bb      	ldr	r3, [r7, #8]
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d101      	bne.n	8017f6a <xQueueGenericCreateStatic+0x82>
 8017f66:	2301      	movs	r3, #1
 8017f68:	e000      	b.n	8017f6c <xQueueGenericCreateStatic+0x84>
 8017f6a:	2300      	movs	r3, #0
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	d10a      	bne.n	8017f86 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8017f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f74:	f383 8811 	msr	BASEPRI, r3
 8017f78:	f3bf 8f6f 	isb	sy
 8017f7c:	f3bf 8f4f 	dsb	sy
 8017f80:	61fb      	str	r3, [r7, #28]
}
 8017f82:	bf00      	nop
 8017f84:	e7fe      	b.n	8017f84 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8017f86:	2350      	movs	r3, #80	; 0x50
 8017f88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8017f8a:	697b      	ldr	r3, [r7, #20]
 8017f8c:	2b50      	cmp	r3, #80	; 0x50
 8017f8e:	d00a      	beq.n	8017fa6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8017f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f94:	f383 8811 	msr	BASEPRI, r3
 8017f98:	f3bf 8f6f 	isb	sy
 8017f9c:	f3bf 8f4f 	dsb	sy
 8017fa0:	61bb      	str	r3, [r7, #24]
}
 8017fa2:	bf00      	nop
 8017fa4:	e7fe      	b.n	8017fa4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8017fa6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017fa8:	683b      	ldr	r3, [r7, #0]
 8017faa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8017fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d00d      	beq.n	8017fce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8017fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fb4:	2201      	movs	r2, #1
 8017fb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017fba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fc0:	9300      	str	r3, [sp, #0]
 8017fc2:	4613      	mov	r3, r2
 8017fc4:	687a      	ldr	r2, [r7, #4]
 8017fc6:	68b9      	ldr	r1, [r7, #8]
 8017fc8:	68f8      	ldr	r0, [r7, #12]
 8017fca:	f000 f805 	bl	8017fd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017fd0:	4618      	mov	r0, r3
 8017fd2:	3730      	adds	r7, #48	; 0x30
 8017fd4:	46bd      	mov	sp, r7
 8017fd6:	bd80      	pop	{r7, pc}

08017fd8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8017fd8:	b580      	push	{r7, lr}
 8017fda:	b084      	sub	sp, #16
 8017fdc:	af00      	add	r7, sp, #0
 8017fde:	60f8      	str	r0, [r7, #12]
 8017fe0:	60b9      	str	r1, [r7, #8]
 8017fe2:	607a      	str	r2, [r7, #4]
 8017fe4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8017fe6:	68bb      	ldr	r3, [r7, #8]
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d103      	bne.n	8017ff4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017fec:	69bb      	ldr	r3, [r7, #24]
 8017fee:	69ba      	ldr	r2, [r7, #24]
 8017ff0:	601a      	str	r2, [r3, #0]
 8017ff2:	e002      	b.n	8017ffa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8017ff4:	69bb      	ldr	r3, [r7, #24]
 8017ff6:	687a      	ldr	r2, [r7, #4]
 8017ff8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8017ffa:	69bb      	ldr	r3, [r7, #24]
 8017ffc:	68fa      	ldr	r2, [r7, #12]
 8017ffe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8018000:	69bb      	ldr	r3, [r7, #24]
 8018002:	68ba      	ldr	r2, [r7, #8]
 8018004:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8018006:	2101      	movs	r1, #1
 8018008:	69b8      	ldr	r0, [r7, #24]
 801800a:	f7ff ff05 	bl	8017e18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801800e:	69bb      	ldr	r3, [r7, #24]
 8018010:	78fa      	ldrb	r2, [r7, #3]
 8018012:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8018016:	bf00      	nop
 8018018:	3710      	adds	r7, #16
 801801a:	46bd      	mov	sp, r7
 801801c:	bd80      	pop	{r7, pc}
	...

08018020 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8018020:	b580      	push	{r7, lr}
 8018022:	b08e      	sub	sp, #56	; 0x38
 8018024:	af00      	add	r7, sp, #0
 8018026:	60f8      	str	r0, [r7, #12]
 8018028:	60b9      	str	r1, [r7, #8]
 801802a:	607a      	str	r2, [r7, #4]
 801802c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801802e:	2300      	movs	r3, #0
 8018030:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018032:	68fb      	ldr	r3, [r7, #12]
 8018034:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8018036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018038:	2b00      	cmp	r3, #0
 801803a:	d10a      	bne.n	8018052 <xQueueGenericSend+0x32>
	__asm volatile
 801803c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018040:	f383 8811 	msr	BASEPRI, r3
 8018044:	f3bf 8f6f 	isb	sy
 8018048:	f3bf 8f4f 	dsb	sy
 801804c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801804e:	bf00      	nop
 8018050:	e7fe      	b.n	8018050 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018052:	68bb      	ldr	r3, [r7, #8]
 8018054:	2b00      	cmp	r3, #0
 8018056:	d103      	bne.n	8018060 <xQueueGenericSend+0x40>
 8018058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801805a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801805c:	2b00      	cmp	r3, #0
 801805e:	d101      	bne.n	8018064 <xQueueGenericSend+0x44>
 8018060:	2301      	movs	r3, #1
 8018062:	e000      	b.n	8018066 <xQueueGenericSend+0x46>
 8018064:	2300      	movs	r3, #0
 8018066:	2b00      	cmp	r3, #0
 8018068:	d10a      	bne.n	8018080 <xQueueGenericSend+0x60>
	__asm volatile
 801806a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801806e:	f383 8811 	msr	BASEPRI, r3
 8018072:	f3bf 8f6f 	isb	sy
 8018076:	f3bf 8f4f 	dsb	sy
 801807a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801807c:	bf00      	nop
 801807e:	e7fe      	b.n	801807e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018080:	683b      	ldr	r3, [r7, #0]
 8018082:	2b02      	cmp	r3, #2
 8018084:	d103      	bne.n	801808e <xQueueGenericSend+0x6e>
 8018086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801808a:	2b01      	cmp	r3, #1
 801808c:	d101      	bne.n	8018092 <xQueueGenericSend+0x72>
 801808e:	2301      	movs	r3, #1
 8018090:	e000      	b.n	8018094 <xQueueGenericSend+0x74>
 8018092:	2300      	movs	r3, #0
 8018094:	2b00      	cmp	r3, #0
 8018096:	d10a      	bne.n	80180ae <xQueueGenericSend+0x8e>
	__asm volatile
 8018098:	f04f 0350 	mov.w	r3, #80	; 0x50
 801809c:	f383 8811 	msr	BASEPRI, r3
 80180a0:	f3bf 8f6f 	isb	sy
 80180a4:	f3bf 8f4f 	dsb	sy
 80180a8:	623b      	str	r3, [r7, #32]
}
 80180aa:	bf00      	nop
 80180ac:	e7fe      	b.n	80180ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80180ae:	f001 fa95 	bl	80195dc <xTaskGetSchedulerState>
 80180b2:	4603      	mov	r3, r0
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d102      	bne.n	80180be <xQueueGenericSend+0x9e>
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d101      	bne.n	80180c2 <xQueueGenericSend+0xa2>
 80180be:	2301      	movs	r3, #1
 80180c0:	e000      	b.n	80180c4 <xQueueGenericSend+0xa4>
 80180c2:	2300      	movs	r3, #0
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d10a      	bne.n	80180de <xQueueGenericSend+0xbe>
	__asm volatile
 80180c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180cc:	f383 8811 	msr	BASEPRI, r3
 80180d0:	f3bf 8f6f 	isb	sy
 80180d4:	f3bf 8f4f 	dsb	sy
 80180d8:	61fb      	str	r3, [r7, #28]
}
 80180da:	bf00      	nop
 80180dc:	e7fe      	b.n	80180dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80180de:	f001 ffd9 	bl	801a094 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80180e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80180e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80180ea:	429a      	cmp	r2, r3
 80180ec:	d302      	bcc.n	80180f4 <xQueueGenericSend+0xd4>
 80180ee:	683b      	ldr	r3, [r7, #0]
 80180f0:	2b02      	cmp	r3, #2
 80180f2:	d129      	bne.n	8018148 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80180f4:	683a      	ldr	r2, [r7, #0]
 80180f6:	68b9      	ldr	r1, [r7, #8]
 80180f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80180fa:	f000 fa0b 	bl	8018514 <prvCopyDataToQueue>
 80180fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018104:	2b00      	cmp	r3, #0
 8018106:	d010      	beq.n	801812a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801810a:	3324      	adds	r3, #36	; 0x24
 801810c:	4618      	mov	r0, r3
 801810e:	f001 f8a7 	bl	8019260 <xTaskRemoveFromEventList>
 8018112:	4603      	mov	r3, r0
 8018114:	2b00      	cmp	r3, #0
 8018116:	d013      	beq.n	8018140 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8018118:	4b3f      	ldr	r3, [pc, #252]	; (8018218 <xQueueGenericSend+0x1f8>)
 801811a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801811e:	601a      	str	r2, [r3, #0]
 8018120:	f3bf 8f4f 	dsb	sy
 8018124:	f3bf 8f6f 	isb	sy
 8018128:	e00a      	b.n	8018140 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801812a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801812c:	2b00      	cmp	r3, #0
 801812e:	d007      	beq.n	8018140 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8018130:	4b39      	ldr	r3, [pc, #228]	; (8018218 <xQueueGenericSend+0x1f8>)
 8018132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018136:	601a      	str	r2, [r3, #0]
 8018138:	f3bf 8f4f 	dsb	sy
 801813c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8018140:	f001 ffd8 	bl	801a0f4 <vPortExitCritical>
				return pdPASS;
 8018144:	2301      	movs	r3, #1
 8018146:	e063      	b.n	8018210 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	2b00      	cmp	r3, #0
 801814c:	d103      	bne.n	8018156 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801814e:	f001 ffd1 	bl	801a0f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8018152:	2300      	movs	r3, #0
 8018154:	e05c      	b.n	8018210 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018158:	2b00      	cmp	r3, #0
 801815a:	d106      	bne.n	801816a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801815c:	f107 0314 	add.w	r3, r7, #20
 8018160:	4618      	mov	r0, r3
 8018162:	f001 f8e1 	bl	8019328 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018166:	2301      	movs	r3, #1
 8018168:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801816a:	f001 ffc3 	bl	801a0f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801816e:	f000 fe53 	bl	8018e18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018172:	f001 ff8f 	bl	801a094 <vPortEnterCritical>
 8018176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018178:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801817c:	b25b      	sxtb	r3, r3
 801817e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018182:	d103      	bne.n	801818c <xQueueGenericSend+0x16c>
 8018184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018186:	2200      	movs	r2, #0
 8018188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801818c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801818e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018192:	b25b      	sxtb	r3, r3
 8018194:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018198:	d103      	bne.n	80181a2 <xQueueGenericSend+0x182>
 801819a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801819c:	2200      	movs	r2, #0
 801819e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80181a2:	f001 ffa7 	bl	801a0f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80181a6:	1d3a      	adds	r2, r7, #4
 80181a8:	f107 0314 	add.w	r3, r7, #20
 80181ac:	4611      	mov	r1, r2
 80181ae:	4618      	mov	r0, r3
 80181b0:	f001 f8d0 	bl	8019354 <xTaskCheckForTimeOut>
 80181b4:	4603      	mov	r3, r0
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d124      	bne.n	8018204 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80181ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80181bc:	f000 faa2 	bl	8018704 <prvIsQueueFull>
 80181c0:	4603      	mov	r3, r0
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d018      	beq.n	80181f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80181c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181c8:	3310      	adds	r3, #16
 80181ca:	687a      	ldr	r2, [r7, #4]
 80181cc:	4611      	mov	r1, r2
 80181ce:	4618      	mov	r0, r3
 80181d0:	f000 fff6 	bl	80191c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80181d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80181d6:	f000 fa2d 	bl	8018634 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80181da:	f000 fe2b 	bl	8018e34 <xTaskResumeAll>
 80181de:	4603      	mov	r3, r0
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	f47f af7c 	bne.w	80180de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80181e6:	4b0c      	ldr	r3, [pc, #48]	; (8018218 <xQueueGenericSend+0x1f8>)
 80181e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80181ec:	601a      	str	r2, [r3, #0]
 80181ee:	f3bf 8f4f 	dsb	sy
 80181f2:	f3bf 8f6f 	isb	sy
 80181f6:	e772      	b.n	80180de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80181f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80181fa:	f000 fa1b 	bl	8018634 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80181fe:	f000 fe19 	bl	8018e34 <xTaskResumeAll>
 8018202:	e76c      	b.n	80180de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8018204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018206:	f000 fa15 	bl	8018634 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801820a:	f000 fe13 	bl	8018e34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801820e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8018210:	4618      	mov	r0, r3
 8018212:	3738      	adds	r7, #56	; 0x38
 8018214:	46bd      	mov	sp, r7
 8018216:	bd80      	pop	{r7, pc}
 8018218:	e000ed04 	.word	0xe000ed04

0801821c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801821c:	b580      	push	{r7, lr}
 801821e:	b090      	sub	sp, #64	; 0x40
 8018220:	af00      	add	r7, sp, #0
 8018222:	60f8      	str	r0, [r7, #12]
 8018224:	60b9      	str	r1, [r7, #8]
 8018226:	607a      	str	r2, [r7, #4]
 8018228:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801822a:	68fb      	ldr	r3, [r7, #12]
 801822c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801822e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018230:	2b00      	cmp	r3, #0
 8018232:	d10a      	bne.n	801824a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8018234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018238:	f383 8811 	msr	BASEPRI, r3
 801823c:	f3bf 8f6f 	isb	sy
 8018240:	f3bf 8f4f 	dsb	sy
 8018244:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8018246:	bf00      	nop
 8018248:	e7fe      	b.n	8018248 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801824a:	68bb      	ldr	r3, [r7, #8]
 801824c:	2b00      	cmp	r3, #0
 801824e:	d103      	bne.n	8018258 <xQueueGenericSendFromISR+0x3c>
 8018250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018254:	2b00      	cmp	r3, #0
 8018256:	d101      	bne.n	801825c <xQueueGenericSendFromISR+0x40>
 8018258:	2301      	movs	r3, #1
 801825a:	e000      	b.n	801825e <xQueueGenericSendFromISR+0x42>
 801825c:	2300      	movs	r3, #0
 801825e:	2b00      	cmp	r3, #0
 8018260:	d10a      	bne.n	8018278 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8018262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018266:	f383 8811 	msr	BASEPRI, r3
 801826a:	f3bf 8f6f 	isb	sy
 801826e:	f3bf 8f4f 	dsb	sy
 8018272:	627b      	str	r3, [r7, #36]	; 0x24
}
 8018274:	bf00      	nop
 8018276:	e7fe      	b.n	8018276 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018278:	683b      	ldr	r3, [r7, #0]
 801827a:	2b02      	cmp	r3, #2
 801827c:	d103      	bne.n	8018286 <xQueueGenericSendFromISR+0x6a>
 801827e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018282:	2b01      	cmp	r3, #1
 8018284:	d101      	bne.n	801828a <xQueueGenericSendFromISR+0x6e>
 8018286:	2301      	movs	r3, #1
 8018288:	e000      	b.n	801828c <xQueueGenericSendFromISR+0x70>
 801828a:	2300      	movs	r3, #0
 801828c:	2b00      	cmp	r3, #0
 801828e:	d10a      	bne.n	80182a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8018290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018294:	f383 8811 	msr	BASEPRI, r3
 8018298:	f3bf 8f6f 	isb	sy
 801829c:	f3bf 8f4f 	dsb	sy
 80182a0:	623b      	str	r3, [r7, #32]
}
 80182a2:	bf00      	nop
 80182a4:	e7fe      	b.n	80182a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80182a6:	f001 ffd7 	bl	801a258 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80182aa:	f3ef 8211 	mrs	r2, BASEPRI
 80182ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182b2:	f383 8811 	msr	BASEPRI, r3
 80182b6:	f3bf 8f6f 	isb	sy
 80182ba:	f3bf 8f4f 	dsb	sy
 80182be:	61fa      	str	r2, [r7, #28]
 80182c0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80182c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80182c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80182c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80182ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80182ce:	429a      	cmp	r2, r3
 80182d0:	d302      	bcc.n	80182d8 <xQueueGenericSendFromISR+0xbc>
 80182d2:	683b      	ldr	r3, [r7, #0]
 80182d4:	2b02      	cmp	r3, #2
 80182d6:	d12f      	bne.n	8018338 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80182d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80182de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80182e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80182e8:	683a      	ldr	r2, [r7, #0]
 80182ea:	68b9      	ldr	r1, [r7, #8]
 80182ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80182ee:	f000 f911 	bl	8018514 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80182f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80182f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80182fa:	d112      	bne.n	8018322 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80182fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018300:	2b00      	cmp	r3, #0
 8018302:	d016      	beq.n	8018332 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018306:	3324      	adds	r3, #36	; 0x24
 8018308:	4618      	mov	r0, r3
 801830a:	f000 ffa9 	bl	8019260 <xTaskRemoveFromEventList>
 801830e:	4603      	mov	r3, r0
 8018310:	2b00      	cmp	r3, #0
 8018312:	d00e      	beq.n	8018332 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	2b00      	cmp	r3, #0
 8018318:	d00b      	beq.n	8018332 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	2201      	movs	r2, #1
 801831e:	601a      	str	r2, [r3, #0]
 8018320:	e007      	b.n	8018332 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8018322:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8018326:	3301      	adds	r3, #1
 8018328:	b2db      	uxtb	r3, r3
 801832a:	b25a      	sxtb	r2, r3
 801832c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801832e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8018332:	2301      	movs	r3, #1
 8018334:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8018336:	e001      	b.n	801833c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8018338:	2300      	movs	r3, #0
 801833a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801833c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801833e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8018340:	697b      	ldr	r3, [r7, #20]
 8018342:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8018346:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801834a:	4618      	mov	r0, r3
 801834c:	3740      	adds	r7, #64	; 0x40
 801834e:	46bd      	mov	sp, r7
 8018350:	bd80      	pop	{r7, pc}
	...

08018354 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8018354:	b580      	push	{r7, lr}
 8018356:	b08c      	sub	sp, #48	; 0x30
 8018358:	af00      	add	r7, sp, #0
 801835a:	60f8      	str	r0, [r7, #12]
 801835c:	60b9      	str	r1, [r7, #8]
 801835e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8018360:	2300      	movs	r3, #0
 8018362:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018364:	68fb      	ldr	r3, [r7, #12]
 8018366:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8018368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801836a:	2b00      	cmp	r3, #0
 801836c:	d10a      	bne.n	8018384 <xQueueReceive+0x30>
	__asm volatile
 801836e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018372:	f383 8811 	msr	BASEPRI, r3
 8018376:	f3bf 8f6f 	isb	sy
 801837a:	f3bf 8f4f 	dsb	sy
 801837e:	623b      	str	r3, [r7, #32]
}
 8018380:	bf00      	nop
 8018382:	e7fe      	b.n	8018382 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018384:	68bb      	ldr	r3, [r7, #8]
 8018386:	2b00      	cmp	r3, #0
 8018388:	d103      	bne.n	8018392 <xQueueReceive+0x3e>
 801838a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801838c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801838e:	2b00      	cmp	r3, #0
 8018390:	d101      	bne.n	8018396 <xQueueReceive+0x42>
 8018392:	2301      	movs	r3, #1
 8018394:	e000      	b.n	8018398 <xQueueReceive+0x44>
 8018396:	2300      	movs	r3, #0
 8018398:	2b00      	cmp	r3, #0
 801839a:	d10a      	bne.n	80183b2 <xQueueReceive+0x5e>
	__asm volatile
 801839c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183a0:	f383 8811 	msr	BASEPRI, r3
 80183a4:	f3bf 8f6f 	isb	sy
 80183a8:	f3bf 8f4f 	dsb	sy
 80183ac:	61fb      	str	r3, [r7, #28]
}
 80183ae:	bf00      	nop
 80183b0:	e7fe      	b.n	80183b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80183b2:	f001 f913 	bl	80195dc <xTaskGetSchedulerState>
 80183b6:	4603      	mov	r3, r0
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d102      	bne.n	80183c2 <xQueueReceive+0x6e>
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d101      	bne.n	80183c6 <xQueueReceive+0x72>
 80183c2:	2301      	movs	r3, #1
 80183c4:	e000      	b.n	80183c8 <xQueueReceive+0x74>
 80183c6:	2300      	movs	r3, #0
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d10a      	bne.n	80183e2 <xQueueReceive+0x8e>
	__asm volatile
 80183cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183d0:	f383 8811 	msr	BASEPRI, r3
 80183d4:	f3bf 8f6f 	isb	sy
 80183d8:	f3bf 8f4f 	dsb	sy
 80183dc:	61bb      	str	r3, [r7, #24]
}
 80183de:	bf00      	nop
 80183e0:	e7fe      	b.n	80183e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80183e2:	f001 fe57 	bl	801a094 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80183e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80183ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80183ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d01f      	beq.n	8018432 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80183f2:	68b9      	ldr	r1, [r7, #8]
 80183f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80183f6:	f000 f8f7 	bl	80185e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80183fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183fc:	1e5a      	subs	r2, r3, #1
 80183fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018400:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018404:	691b      	ldr	r3, [r3, #16]
 8018406:	2b00      	cmp	r3, #0
 8018408:	d00f      	beq.n	801842a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801840a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801840c:	3310      	adds	r3, #16
 801840e:	4618      	mov	r0, r3
 8018410:	f000 ff26 	bl	8019260 <xTaskRemoveFromEventList>
 8018414:	4603      	mov	r3, r0
 8018416:	2b00      	cmp	r3, #0
 8018418:	d007      	beq.n	801842a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801841a:	4b3d      	ldr	r3, [pc, #244]	; (8018510 <xQueueReceive+0x1bc>)
 801841c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018420:	601a      	str	r2, [r3, #0]
 8018422:	f3bf 8f4f 	dsb	sy
 8018426:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801842a:	f001 fe63 	bl	801a0f4 <vPortExitCritical>
				return pdPASS;
 801842e:	2301      	movs	r3, #1
 8018430:	e069      	b.n	8018506 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d103      	bne.n	8018440 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018438:	f001 fe5c 	bl	801a0f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801843c:	2300      	movs	r3, #0
 801843e:	e062      	b.n	8018506 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018442:	2b00      	cmp	r3, #0
 8018444:	d106      	bne.n	8018454 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018446:	f107 0310 	add.w	r3, r7, #16
 801844a:	4618      	mov	r0, r3
 801844c:	f000 ff6c 	bl	8019328 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018450:	2301      	movs	r3, #1
 8018452:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018454:	f001 fe4e 	bl	801a0f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018458:	f000 fcde 	bl	8018e18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801845c:	f001 fe1a 	bl	801a094 <vPortEnterCritical>
 8018460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018462:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018466:	b25b      	sxtb	r3, r3
 8018468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801846c:	d103      	bne.n	8018476 <xQueueReceive+0x122>
 801846e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018470:	2200      	movs	r2, #0
 8018472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018478:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801847c:	b25b      	sxtb	r3, r3
 801847e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018482:	d103      	bne.n	801848c <xQueueReceive+0x138>
 8018484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018486:	2200      	movs	r2, #0
 8018488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801848c:	f001 fe32 	bl	801a0f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018490:	1d3a      	adds	r2, r7, #4
 8018492:	f107 0310 	add.w	r3, r7, #16
 8018496:	4611      	mov	r1, r2
 8018498:	4618      	mov	r0, r3
 801849a:	f000 ff5b 	bl	8019354 <xTaskCheckForTimeOut>
 801849e:	4603      	mov	r3, r0
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d123      	bne.n	80184ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80184a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80184a6:	f000 f917 	bl	80186d8 <prvIsQueueEmpty>
 80184aa:	4603      	mov	r3, r0
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d017      	beq.n	80184e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80184b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184b2:	3324      	adds	r3, #36	; 0x24
 80184b4:	687a      	ldr	r2, [r7, #4]
 80184b6:	4611      	mov	r1, r2
 80184b8:	4618      	mov	r0, r3
 80184ba:	f000 fe81 	bl	80191c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80184be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80184c0:	f000 f8b8 	bl	8018634 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80184c4:	f000 fcb6 	bl	8018e34 <xTaskResumeAll>
 80184c8:	4603      	mov	r3, r0
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d189      	bne.n	80183e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80184ce:	4b10      	ldr	r3, [pc, #64]	; (8018510 <xQueueReceive+0x1bc>)
 80184d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80184d4:	601a      	str	r2, [r3, #0]
 80184d6:	f3bf 8f4f 	dsb	sy
 80184da:	f3bf 8f6f 	isb	sy
 80184de:	e780      	b.n	80183e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80184e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80184e2:	f000 f8a7 	bl	8018634 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80184e6:	f000 fca5 	bl	8018e34 <xTaskResumeAll>
 80184ea:	e77a      	b.n	80183e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80184ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80184ee:	f000 f8a1 	bl	8018634 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80184f2:	f000 fc9f 	bl	8018e34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80184f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80184f8:	f000 f8ee 	bl	80186d8 <prvIsQueueEmpty>
 80184fc:	4603      	mov	r3, r0
 80184fe:	2b00      	cmp	r3, #0
 8018500:	f43f af6f 	beq.w	80183e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018504:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8018506:	4618      	mov	r0, r3
 8018508:	3730      	adds	r7, #48	; 0x30
 801850a:	46bd      	mov	sp, r7
 801850c:	bd80      	pop	{r7, pc}
 801850e:	bf00      	nop
 8018510:	e000ed04 	.word	0xe000ed04

08018514 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8018514:	b580      	push	{r7, lr}
 8018516:	b086      	sub	sp, #24
 8018518:	af00      	add	r7, sp, #0
 801851a:	60f8      	str	r0, [r7, #12]
 801851c:	60b9      	str	r1, [r7, #8]
 801851e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8018520:	2300      	movs	r3, #0
 8018522:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018524:	68fb      	ldr	r3, [r7, #12]
 8018526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018528:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801852a:	68fb      	ldr	r3, [r7, #12]
 801852c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801852e:	2b00      	cmp	r3, #0
 8018530:	d10d      	bne.n	801854e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018532:	68fb      	ldr	r3, [r7, #12]
 8018534:	681b      	ldr	r3, [r3, #0]
 8018536:	2b00      	cmp	r3, #0
 8018538:	d14d      	bne.n	80185d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801853a:	68fb      	ldr	r3, [r7, #12]
 801853c:	689b      	ldr	r3, [r3, #8]
 801853e:	4618      	mov	r0, r3
 8018540:	f001 f86a 	bl	8019618 <xTaskPriorityDisinherit>
 8018544:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8018546:	68fb      	ldr	r3, [r7, #12]
 8018548:	2200      	movs	r2, #0
 801854a:	609a      	str	r2, [r3, #8]
 801854c:	e043      	b.n	80185d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	2b00      	cmp	r3, #0
 8018552:	d119      	bne.n	8018588 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018554:	68fb      	ldr	r3, [r7, #12]
 8018556:	6858      	ldr	r0, [r3, #4]
 8018558:	68fb      	ldr	r3, [r7, #12]
 801855a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801855c:	461a      	mov	r2, r3
 801855e:	68b9      	ldr	r1, [r7, #8]
 8018560:	f002 f8d6 	bl	801a710 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018564:	68fb      	ldr	r3, [r7, #12]
 8018566:	685a      	ldr	r2, [r3, #4]
 8018568:	68fb      	ldr	r3, [r7, #12]
 801856a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801856c:	441a      	add	r2, r3
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018572:	68fb      	ldr	r3, [r7, #12]
 8018574:	685a      	ldr	r2, [r3, #4]
 8018576:	68fb      	ldr	r3, [r7, #12]
 8018578:	689b      	ldr	r3, [r3, #8]
 801857a:	429a      	cmp	r2, r3
 801857c:	d32b      	bcc.n	80185d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801857e:	68fb      	ldr	r3, [r7, #12]
 8018580:	681a      	ldr	r2, [r3, #0]
 8018582:	68fb      	ldr	r3, [r7, #12]
 8018584:	605a      	str	r2, [r3, #4]
 8018586:	e026      	b.n	80185d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	68d8      	ldr	r0, [r3, #12]
 801858c:	68fb      	ldr	r3, [r7, #12]
 801858e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018590:	461a      	mov	r2, r3
 8018592:	68b9      	ldr	r1, [r7, #8]
 8018594:	f002 f8bc 	bl	801a710 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8018598:	68fb      	ldr	r3, [r7, #12]
 801859a:	68da      	ldr	r2, [r3, #12]
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80185a0:	425b      	negs	r3, r3
 80185a2:	441a      	add	r2, r3
 80185a4:	68fb      	ldr	r3, [r7, #12]
 80185a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80185a8:	68fb      	ldr	r3, [r7, #12]
 80185aa:	68da      	ldr	r2, [r3, #12]
 80185ac:	68fb      	ldr	r3, [r7, #12]
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	429a      	cmp	r2, r3
 80185b2:	d207      	bcs.n	80185c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80185b4:	68fb      	ldr	r3, [r7, #12]
 80185b6:	689a      	ldr	r2, [r3, #8]
 80185b8:	68fb      	ldr	r3, [r7, #12]
 80185ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80185bc:	425b      	negs	r3, r3
 80185be:	441a      	add	r2, r3
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	2b02      	cmp	r3, #2
 80185c8:	d105      	bne.n	80185d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80185ca:	693b      	ldr	r3, [r7, #16]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d002      	beq.n	80185d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80185d0:	693b      	ldr	r3, [r7, #16]
 80185d2:	3b01      	subs	r3, #1
 80185d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80185d6:	693b      	ldr	r3, [r7, #16]
 80185d8:	1c5a      	adds	r2, r3, #1
 80185da:	68fb      	ldr	r3, [r7, #12]
 80185dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80185de:	697b      	ldr	r3, [r7, #20]
}
 80185e0:	4618      	mov	r0, r3
 80185e2:	3718      	adds	r7, #24
 80185e4:	46bd      	mov	sp, r7
 80185e6:	bd80      	pop	{r7, pc}

080185e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80185e8:	b580      	push	{r7, lr}
 80185ea:	b082      	sub	sp, #8
 80185ec:	af00      	add	r7, sp, #0
 80185ee:	6078      	str	r0, [r7, #4]
 80185f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d018      	beq.n	801862c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	68da      	ldr	r2, [r3, #12]
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018602:	441a      	add	r2, r3
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	68da      	ldr	r2, [r3, #12]
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	689b      	ldr	r3, [r3, #8]
 8018610:	429a      	cmp	r2, r3
 8018612:	d303      	bcc.n	801861c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	681a      	ldr	r2, [r3, #0]
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	68d9      	ldr	r1, [r3, #12]
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018624:	461a      	mov	r2, r3
 8018626:	6838      	ldr	r0, [r7, #0]
 8018628:	f002 f872 	bl	801a710 <memcpy>
	}
}
 801862c:	bf00      	nop
 801862e:	3708      	adds	r7, #8
 8018630:	46bd      	mov	sp, r7
 8018632:	bd80      	pop	{r7, pc}

08018634 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8018634:	b580      	push	{r7, lr}
 8018636:	b084      	sub	sp, #16
 8018638:	af00      	add	r7, sp, #0
 801863a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801863c:	f001 fd2a 	bl	801a094 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018646:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018648:	e011      	b.n	801866e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801864e:	2b00      	cmp	r3, #0
 8018650:	d012      	beq.n	8018678 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	3324      	adds	r3, #36	; 0x24
 8018656:	4618      	mov	r0, r3
 8018658:	f000 fe02 	bl	8019260 <xTaskRemoveFromEventList>
 801865c:	4603      	mov	r3, r0
 801865e:	2b00      	cmp	r3, #0
 8018660:	d001      	beq.n	8018666 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8018662:	f000 fed9 	bl	8019418 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8018666:	7bfb      	ldrb	r3, [r7, #15]
 8018668:	3b01      	subs	r3, #1
 801866a:	b2db      	uxtb	r3, r3
 801866c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801866e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018672:	2b00      	cmp	r3, #0
 8018674:	dce9      	bgt.n	801864a <prvUnlockQueue+0x16>
 8018676:	e000      	b.n	801867a <prvUnlockQueue+0x46>
					break;
 8018678:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	22ff      	movs	r2, #255	; 0xff
 801867e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8018682:	f001 fd37 	bl	801a0f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8018686:	f001 fd05 	bl	801a094 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018690:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018692:	e011      	b.n	80186b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	691b      	ldr	r3, [r3, #16]
 8018698:	2b00      	cmp	r3, #0
 801869a:	d012      	beq.n	80186c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	3310      	adds	r3, #16
 80186a0:	4618      	mov	r0, r3
 80186a2:	f000 fddd 	bl	8019260 <xTaskRemoveFromEventList>
 80186a6:	4603      	mov	r3, r0
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d001      	beq.n	80186b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80186ac:	f000 feb4 	bl	8019418 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80186b0:	7bbb      	ldrb	r3, [r7, #14]
 80186b2:	3b01      	subs	r3, #1
 80186b4:	b2db      	uxtb	r3, r3
 80186b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80186b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80186bc:	2b00      	cmp	r3, #0
 80186be:	dce9      	bgt.n	8018694 <prvUnlockQueue+0x60>
 80186c0:	e000      	b.n	80186c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80186c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	22ff      	movs	r2, #255	; 0xff
 80186c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80186cc:	f001 fd12 	bl	801a0f4 <vPortExitCritical>
}
 80186d0:	bf00      	nop
 80186d2:	3710      	adds	r7, #16
 80186d4:	46bd      	mov	sp, r7
 80186d6:	bd80      	pop	{r7, pc}

080186d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80186d8:	b580      	push	{r7, lr}
 80186da:	b084      	sub	sp, #16
 80186dc:	af00      	add	r7, sp, #0
 80186de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80186e0:	f001 fcd8 	bl	801a094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80186e4:	687b      	ldr	r3, [r7, #4]
 80186e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d102      	bne.n	80186f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80186ec:	2301      	movs	r3, #1
 80186ee:	60fb      	str	r3, [r7, #12]
 80186f0:	e001      	b.n	80186f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80186f2:	2300      	movs	r3, #0
 80186f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80186f6:	f001 fcfd 	bl	801a0f4 <vPortExitCritical>

	return xReturn;
 80186fa:	68fb      	ldr	r3, [r7, #12]
}
 80186fc:	4618      	mov	r0, r3
 80186fe:	3710      	adds	r7, #16
 8018700:	46bd      	mov	sp, r7
 8018702:	bd80      	pop	{r7, pc}

08018704 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8018704:	b580      	push	{r7, lr}
 8018706:	b084      	sub	sp, #16
 8018708:	af00      	add	r7, sp, #0
 801870a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801870c:	f001 fcc2 	bl	801a094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018718:	429a      	cmp	r2, r3
 801871a:	d102      	bne.n	8018722 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801871c:	2301      	movs	r3, #1
 801871e:	60fb      	str	r3, [r7, #12]
 8018720:	e001      	b.n	8018726 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8018722:	2300      	movs	r3, #0
 8018724:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018726:	f001 fce5 	bl	801a0f4 <vPortExitCritical>

	return xReturn;
 801872a:	68fb      	ldr	r3, [r7, #12]
}
 801872c:	4618      	mov	r0, r3
 801872e:	3710      	adds	r7, #16
 8018730:	46bd      	mov	sp, r7
 8018732:	bd80      	pop	{r7, pc}

08018734 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8018734:	b480      	push	{r7}
 8018736:	b085      	sub	sp, #20
 8018738:	af00      	add	r7, sp, #0
 801873a:	6078      	str	r0, [r7, #4]
 801873c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801873e:	2300      	movs	r3, #0
 8018740:	60fb      	str	r3, [r7, #12]
 8018742:	e014      	b.n	801876e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8018744:	4a0f      	ldr	r2, [pc, #60]	; (8018784 <vQueueAddToRegistry+0x50>)
 8018746:	68fb      	ldr	r3, [r7, #12]
 8018748:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801874c:	2b00      	cmp	r3, #0
 801874e:	d10b      	bne.n	8018768 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8018750:	490c      	ldr	r1, [pc, #48]	; (8018784 <vQueueAddToRegistry+0x50>)
 8018752:	68fb      	ldr	r3, [r7, #12]
 8018754:	683a      	ldr	r2, [r7, #0]
 8018756:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801875a:	4a0a      	ldr	r2, [pc, #40]	; (8018784 <vQueueAddToRegistry+0x50>)
 801875c:	68fb      	ldr	r3, [r7, #12]
 801875e:	00db      	lsls	r3, r3, #3
 8018760:	4413      	add	r3, r2
 8018762:	687a      	ldr	r2, [r7, #4]
 8018764:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8018766:	e006      	b.n	8018776 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018768:	68fb      	ldr	r3, [r7, #12]
 801876a:	3301      	adds	r3, #1
 801876c:	60fb      	str	r3, [r7, #12]
 801876e:	68fb      	ldr	r3, [r7, #12]
 8018770:	2b07      	cmp	r3, #7
 8018772:	d9e7      	bls.n	8018744 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8018774:	bf00      	nop
 8018776:	bf00      	nop
 8018778:	3714      	adds	r7, #20
 801877a:	46bd      	mov	sp, r7
 801877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018780:	4770      	bx	lr
 8018782:	bf00      	nop
 8018784:	2000aa78 	.word	0x2000aa78

08018788 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018788:	b580      	push	{r7, lr}
 801878a:	b086      	sub	sp, #24
 801878c:	af00      	add	r7, sp, #0
 801878e:	60f8      	str	r0, [r7, #12]
 8018790:	60b9      	str	r1, [r7, #8]
 8018792:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8018794:	68fb      	ldr	r3, [r7, #12]
 8018796:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8018798:	f001 fc7c 	bl	801a094 <vPortEnterCritical>
 801879c:	697b      	ldr	r3, [r7, #20]
 801879e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80187a2:	b25b      	sxtb	r3, r3
 80187a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80187a8:	d103      	bne.n	80187b2 <vQueueWaitForMessageRestricted+0x2a>
 80187aa:	697b      	ldr	r3, [r7, #20]
 80187ac:	2200      	movs	r2, #0
 80187ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80187b2:	697b      	ldr	r3, [r7, #20]
 80187b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80187b8:	b25b      	sxtb	r3, r3
 80187ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80187be:	d103      	bne.n	80187c8 <vQueueWaitForMessageRestricted+0x40>
 80187c0:	697b      	ldr	r3, [r7, #20]
 80187c2:	2200      	movs	r2, #0
 80187c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80187c8:	f001 fc94 	bl	801a0f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80187cc:	697b      	ldr	r3, [r7, #20]
 80187ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d106      	bne.n	80187e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80187d4:	697b      	ldr	r3, [r7, #20]
 80187d6:	3324      	adds	r3, #36	; 0x24
 80187d8:	687a      	ldr	r2, [r7, #4]
 80187da:	68b9      	ldr	r1, [r7, #8]
 80187dc:	4618      	mov	r0, r3
 80187de:	f000 fd13 	bl	8019208 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80187e2:	6978      	ldr	r0, [r7, #20]
 80187e4:	f7ff ff26 	bl	8018634 <prvUnlockQueue>
	}
 80187e8:	bf00      	nop
 80187ea:	3718      	adds	r7, #24
 80187ec:	46bd      	mov	sp, r7
 80187ee:	bd80      	pop	{r7, pc}

080187f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80187f0:	b580      	push	{r7, lr}
 80187f2:	b08e      	sub	sp, #56	; 0x38
 80187f4:	af04      	add	r7, sp, #16
 80187f6:	60f8      	str	r0, [r7, #12]
 80187f8:	60b9      	str	r1, [r7, #8]
 80187fa:	607a      	str	r2, [r7, #4]
 80187fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80187fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018800:	2b00      	cmp	r3, #0
 8018802:	d10a      	bne.n	801881a <xTaskCreateStatic+0x2a>
	__asm volatile
 8018804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018808:	f383 8811 	msr	BASEPRI, r3
 801880c:	f3bf 8f6f 	isb	sy
 8018810:	f3bf 8f4f 	dsb	sy
 8018814:	623b      	str	r3, [r7, #32]
}
 8018816:	bf00      	nop
 8018818:	e7fe      	b.n	8018818 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801881a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801881c:	2b00      	cmp	r3, #0
 801881e:	d10a      	bne.n	8018836 <xTaskCreateStatic+0x46>
	__asm volatile
 8018820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018824:	f383 8811 	msr	BASEPRI, r3
 8018828:	f3bf 8f6f 	isb	sy
 801882c:	f3bf 8f4f 	dsb	sy
 8018830:	61fb      	str	r3, [r7, #28]
}
 8018832:	bf00      	nop
 8018834:	e7fe      	b.n	8018834 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8018836:	235c      	movs	r3, #92	; 0x5c
 8018838:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801883a:	693b      	ldr	r3, [r7, #16]
 801883c:	2b5c      	cmp	r3, #92	; 0x5c
 801883e:	d00a      	beq.n	8018856 <xTaskCreateStatic+0x66>
	__asm volatile
 8018840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018844:	f383 8811 	msr	BASEPRI, r3
 8018848:	f3bf 8f6f 	isb	sy
 801884c:	f3bf 8f4f 	dsb	sy
 8018850:	61bb      	str	r3, [r7, #24]
}
 8018852:	bf00      	nop
 8018854:	e7fe      	b.n	8018854 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8018856:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8018858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801885a:	2b00      	cmp	r3, #0
 801885c:	d01e      	beq.n	801889c <xTaskCreateStatic+0xac>
 801885e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018860:	2b00      	cmp	r3, #0
 8018862:	d01b      	beq.n	801889c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018866:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8018868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801886a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801886c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801886e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018870:	2202      	movs	r2, #2
 8018872:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8018876:	2300      	movs	r3, #0
 8018878:	9303      	str	r3, [sp, #12]
 801887a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801887c:	9302      	str	r3, [sp, #8]
 801887e:	f107 0314 	add.w	r3, r7, #20
 8018882:	9301      	str	r3, [sp, #4]
 8018884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018886:	9300      	str	r3, [sp, #0]
 8018888:	683b      	ldr	r3, [r7, #0]
 801888a:	687a      	ldr	r2, [r7, #4]
 801888c:	68b9      	ldr	r1, [r7, #8]
 801888e:	68f8      	ldr	r0, [r7, #12]
 8018890:	f000 f850 	bl	8018934 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018894:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018896:	f000 f8dd 	bl	8018a54 <prvAddNewTaskToReadyList>
 801889a:	e001      	b.n	80188a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801889c:	2300      	movs	r3, #0
 801889e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80188a0:	697b      	ldr	r3, [r7, #20]
	}
 80188a2:	4618      	mov	r0, r3
 80188a4:	3728      	adds	r7, #40	; 0x28
 80188a6:	46bd      	mov	sp, r7
 80188a8:	bd80      	pop	{r7, pc}

080188aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80188aa:	b580      	push	{r7, lr}
 80188ac:	b08c      	sub	sp, #48	; 0x30
 80188ae:	af04      	add	r7, sp, #16
 80188b0:	60f8      	str	r0, [r7, #12]
 80188b2:	60b9      	str	r1, [r7, #8]
 80188b4:	603b      	str	r3, [r7, #0]
 80188b6:	4613      	mov	r3, r2
 80188b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80188ba:	88fb      	ldrh	r3, [r7, #6]
 80188bc:	009b      	lsls	r3, r3, #2
 80188be:	4618      	mov	r0, r3
 80188c0:	f001 fd0a 	bl	801a2d8 <pvPortMalloc>
 80188c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80188c6:	697b      	ldr	r3, [r7, #20]
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	d00e      	beq.n	80188ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80188cc:	205c      	movs	r0, #92	; 0x5c
 80188ce:	f001 fd03 	bl	801a2d8 <pvPortMalloc>
 80188d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80188d4:	69fb      	ldr	r3, [r7, #28]
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	d003      	beq.n	80188e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80188da:	69fb      	ldr	r3, [r7, #28]
 80188dc:	697a      	ldr	r2, [r7, #20]
 80188de:	631a      	str	r2, [r3, #48]	; 0x30
 80188e0:	e005      	b.n	80188ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80188e2:	6978      	ldr	r0, [r7, #20]
 80188e4:	f001 fdc4 	bl	801a470 <vPortFree>
 80188e8:	e001      	b.n	80188ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80188ea:	2300      	movs	r3, #0
 80188ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80188ee:	69fb      	ldr	r3, [r7, #28]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d017      	beq.n	8018924 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80188f4:	69fb      	ldr	r3, [r7, #28]
 80188f6:	2200      	movs	r2, #0
 80188f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80188fc:	88fa      	ldrh	r2, [r7, #6]
 80188fe:	2300      	movs	r3, #0
 8018900:	9303      	str	r3, [sp, #12]
 8018902:	69fb      	ldr	r3, [r7, #28]
 8018904:	9302      	str	r3, [sp, #8]
 8018906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018908:	9301      	str	r3, [sp, #4]
 801890a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801890c:	9300      	str	r3, [sp, #0]
 801890e:	683b      	ldr	r3, [r7, #0]
 8018910:	68b9      	ldr	r1, [r7, #8]
 8018912:	68f8      	ldr	r0, [r7, #12]
 8018914:	f000 f80e 	bl	8018934 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018918:	69f8      	ldr	r0, [r7, #28]
 801891a:	f000 f89b 	bl	8018a54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801891e:	2301      	movs	r3, #1
 8018920:	61bb      	str	r3, [r7, #24]
 8018922:	e002      	b.n	801892a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8018924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018928:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801892a:	69bb      	ldr	r3, [r7, #24]
	}
 801892c:	4618      	mov	r0, r3
 801892e:	3720      	adds	r7, #32
 8018930:	46bd      	mov	sp, r7
 8018932:	bd80      	pop	{r7, pc}

08018934 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8018934:	b580      	push	{r7, lr}
 8018936:	b088      	sub	sp, #32
 8018938:	af00      	add	r7, sp, #0
 801893a:	60f8      	str	r0, [r7, #12]
 801893c:	60b9      	str	r1, [r7, #8]
 801893e:	607a      	str	r2, [r7, #4]
 8018940:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8018942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018944:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	009b      	lsls	r3, r3, #2
 801894a:	461a      	mov	r2, r3
 801894c:	21a5      	movs	r1, #165	; 0xa5
 801894e:	f001 feed 	bl	801a72c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8018952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801895c:	3b01      	subs	r3, #1
 801895e:	009b      	lsls	r3, r3, #2
 8018960:	4413      	add	r3, r2
 8018962:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8018964:	69bb      	ldr	r3, [r7, #24]
 8018966:	f023 0307 	bic.w	r3, r3, #7
 801896a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801896c:	69bb      	ldr	r3, [r7, #24]
 801896e:	f003 0307 	and.w	r3, r3, #7
 8018972:	2b00      	cmp	r3, #0
 8018974:	d00a      	beq.n	801898c <prvInitialiseNewTask+0x58>
	__asm volatile
 8018976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801897a:	f383 8811 	msr	BASEPRI, r3
 801897e:	f3bf 8f6f 	isb	sy
 8018982:	f3bf 8f4f 	dsb	sy
 8018986:	617b      	str	r3, [r7, #20]
}
 8018988:	bf00      	nop
 801898a:	e7fe      	b.n	801898a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801898c:	68bb      	ldr	r3, [r7, #8]
 801898e:	2b00      	cmp	r3, #0
 8018990:	d01f      	beq.n	80189d2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018992:	2300      	movs	r3, #0
 8018994:	61fb      	str	r3, [r7, #28]
 8018996:	e012      	b.n	80189be <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8018998:	68ba      	ldr	r2, [r7, #8]
 801899a:	69fb      	ldr	r3, [r7, #28]
 801899c:	4413      	add	r3, r2
 801899e:	7819      	ldrb	r1, [r3, #0]
 80189a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80189a2:	69fb      	ldr	r3, [r7, #28]
 80189a4:	4413      	add	r3, r2
 80189a6:	3334      	adds	r3, #52	; 0x34
 80189a8:	460a      	mov	r2, r1
 80189aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80189ac:	68ba      	ldr	r2, [r7, #8]
 80189ae:	69fb      	ldr	r3, [r7, #28]
 80189b0:	4413      	add	r3, r2
 80189b2:	781b      	ldrb	r3, [r3, #0]
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d006      	beq.n	80189c6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80189b8:	69fb      	ldr	r3, [r7, #28]
 80189ba:	3301      	adds	r3, #1
 80189bc:	61fb      	str	r3, [r7, #28]
 80189be:	69fb      	ldr	r3, [r7, #28]
 80189c0:	2b0f      	cmp	r3, #15
 80189c2:	d9e9      	bls.n	8018998 <prvInitialiseNewTask+0x64>
 80189c4:	e000      	b.n	80189c8 <prvInitialiseNewTask+0x94>
			{
				break;
 80189c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80189c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189ca:	2200      	movs	r2, #0
 80189cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80189d0:	e003      	b.n	80189da <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80189d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189d4:	2200      	movs	r2, #0
 80189d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80189da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189dc:	2b37      	cmp	r3, #55	; 0x37
 80189de:	d901      	bls.n	80189e4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80189e0:	2337      	movs	r3, #55	; 0x37
 80189e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80189e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80189e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80189ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80189ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80189f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189f2:	2200      	movs	r2, #0
 80189f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80189f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189f8:	3304      	adds	r3, #4
 80189fa:	4618      	mov	r0, r3
 80189fc:	f7ff f978 	bl	8017cf0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a02:	3318      	adds	r3, #24
 8018a04:	4618      	mov	r0, r3
 8018a06:	f7ff f973 	bl	8017cf0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8018a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018a0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8018a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018a1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8018a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a22:	2200      	movs	r2, #0
 8018a24:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a28:	2200      	movs	r2, #0
 8018a2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8018a2e:	683a      	ldr	r2, [r7, #0]
 8018a30:	68f9      	ldr	r1, [r7, #12]
 8018a32:	69b8      	ldr	r0, [r7, #24]
 8018a34:	f001 fa00 	bl	8019e38 <pxPortInitialiseStack>
 8018a38:	4602      	mov	r2, r0
 8018a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8018a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d002      	beq.n	8018a4a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8018a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018a48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018a4a:	bf00      	nop
 8018a4c:	3720      	adds	r7, #32
 8018a4e:	46bd      	mov	sp, r7
 8018a50:	bd80      	pop	{r7, pc}
	...

08018a54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8018a54:	b580      	push	{r7, lr}
 8018a56:	b082      	sub	sp, #8
 8018a58:	af00      	add	r7, sp, #0
 8018a5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018a5c:	f001 fb1a 	bl	801a094 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8018a60:	4b2d      	ldr	r3, [pc, #180]	; (8018b18 <prvAddNewTaskToReadyList+0xc4>)
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	3301      	adds	r3, #1
 8018a66:	4a2c      	ldr	r2, [pc, #176]	; (8018b18 <prvAddNewTaskToReadyList+0xc4>)
 8018a68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8018a6a:	4b2c      	ldr	r3, [pc, #176]	; (8018b1c <prvAddNewTaskToReadyList+0xc8>)
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d109      	bne.n	8018a86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8018a72:	4a2a      	ldr	r2, [pc, #168]	; (8018b1c <prvAddNewTaskToReadyList+0xc8>)
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8018a78:	4b27      	ldr	r3, [pc, #156]	; (8018b18 <prvAddNewTaskToReadyList+0xc4>)
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	2b01      	cmp	r3, #1
 8018a7e:	d110      	bne.n	8018aa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018a80:	f000 fcee 	bl	8019460 <prvInitialiseTaskLists>
 8018a84:	e00d      	b.n	8018aa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8018a86:	4b26      	ldr	r3, [pc, #152]	; (8018b20 <prvAddNewTaskToReadyList+0xcc>)
 8018a88:	681b      	ldr	r3, [r3, #0]
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d109      	bne.n	8018aa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018a8e:	4b23      	ldr	r3, [pc, #140]	; (8018b1c <prvAddNewTaskToReadyList+0xc8>)
 8018a90:	681b      	ldr	r3, [r3, #0]
 8018a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a98:	429a      	cmp	r2, r3
 8018a9a:	d802      	bhi.n	8018aa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018a9c:	4a1f      	ldr	r2, [pc, #124]	; (8018b1c <prvAddNewTaskToReadyList+0xc8>)
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8018aa2:	4b20      	ldr	r3, [pc, #128]	; (8018b24 <prvAddNewTaskToReadyList+0xd0>)
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	3301      	adds	r3, #1
 8018aa8:	4a1e      	ldr	r2, [pc, #120]	; (8018b24 <prvAddNewTaskToReadyList+0xd0>)
 8018aaa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018aac:	4b1d      	ldr	r3, [pc, #116]	; (8018b24 <prvAddNewTaskToReadyList+0xd0>)
 8018aae:	681a      	ldr	r2, [r3, #0]
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ab8:	4b1b      	ldr	r3, [pc, #108]	; (8018b28 <prvAddNewTaskToReadyList+0xd4>)
 8018aba:	681b      	ldr	r3, [r3, #0]
 8018abc:	429a      	cmp	r2, r3
 8018abe:	d903      	bls.n	8018ac8 <prvAddNewTaskToReadyList+0x74>
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ac4:	4a18      	ldr	r2, [pc, #96]	; (8018b28 <prvAddNewTaskToReadyList+0xd4>)
 8018ac6:	6013      	str	r3, [r2, #0]
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018acc:	4613      	mov	r3, r2
 8018ace:	009b      	lsls	r3, r3, #2
 8018ad0:	4413      	add	r3, r2
 8018ad2:	009b      	lsls	r3, r3, #2
 8018ad4:	4a15      	ldr	r2, [pc, #84]	; (8018b2c <prvAddNewTaskToReadyList+0xd8>)
 8018ad6:	441a      	add	r2, r3
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	3304      	adds	r3, #4
 8018adc:	4619      	mov	r1, r3
 8018ade:	4610      	mov	r0, r2
 8018ae0:	f7ff f913 	bl	8017d0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8018ae4:	f001 fb06 	bl	801a0f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8018ae8:	4b0d      	ldr	r3, [pc, #52]	; (8018b20 <prvAddNewTaskToReadyList+0xcc>)
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	d00e      	beq.n	8018b0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8018af0:	4b0a      	ldr	r3, [pc, #40]	; (8018b1c <prvAddNewTaskToReadyList+0xc8>)
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018afa:	429a      	cmp	r2, r3
 8018afc:	d207      	bcs.n	8018b0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8018afe:	4b0c      	ldr	r3, [pc, #48]	; (8018b30 <prvAddNewTaskToReadyList+0xdc>)
 8018b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018b04:	601a      	str	r2, [r3, #0]
 8018b06:	f3bf 8f4f 	dsb	sy
 8018b0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018b0e:	bf00      	nop
 8018b10:	3708      	adds	r7, #8
 8018b12:	46bd      	mov	sp, r7
 8018b14:	bd80      	pop	{r7, pc}
 8018b16:	bf00      	nop
 8018b18:	2000217c 	.word	0x2000217c
 8018b1c:	20001ca8 	.word	0x20001ca8
 8018b20:	20002188 	.word	0x20002188
 8018b24:	20002198 	.word	0x20002198
 8018b28:	20002184 	.word	0x20002184
 8018b2c:	20001cac 	.word	0x20001cac
 8018b30:	e000ed04 	.word	0xe000ed04

08018b34 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8018b34:	b580      	push	{r7, lr}
 8018b36:	b084      	sub	sp, #16
 8018b38:	af00      	add	r7, sp, #0
 8018b3a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8018b3c:	f001 faaa 	bl	801a094 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	d102      	bne.n	8018b4c <vTaskDelete+0x18>
 8018b46:	4b2c      	ldr	r3, [pc, #176]	; (8018bf8 <vTaskDelete+0xc4>)
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	e000      	b.n	8018b4e <vTaskDelete+0x1a>
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018b50:	68fb      	ldr	r3, [r7, #12]
 8018b52:	3304      	adds	r3, #4
 8018b54:	4618      	mov	r0, r3
 8018b56:	f7ff f935 	bl	8017dc4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018b5a:	68fb      	ldr	r3, [r7, #12]
 8018b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d004      	beq.n	8018b6c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018b62:	68fb      	ldr	r3, [r7, #12]
 8018b64:	3318      	adds	r3, #24
 8018b66:	4618      	mov	r0, r3
 8018b68:	f7ff f92c 	bl	8017dc4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8018b6c:	4b23      	ldr	r3, [pc, #140]	; (8018bfc <vTaskDelete+0xc8>)
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	3301      	adds	r3, #1
 8018b72:	4a22      	ldr	r2, [pc, #136]	; (8018bfc <vTaskDelete+0xc8>)
 8018b74:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8018b76:	4b20      	ldr	r3, [pc, #128]	; (8018bf8 <vTaskDelete+0xc4>)
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	68fa      	ldr	r2, [r7, #12]
 8018b7c:	429a      	cmp	r2, r3
 8018b7e:	d10b      	bne.n	8018b98 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8018b80:	68fb      	ldr	r3, [r7, #12]
 8018b82:	3304      	adds	r3, #4
 8018b84:	4619      	mov	r1, r3
 8018b86:	481e      	ldr	r0, [pc, #120]	; (8018c00 <vTaskDelete+0xcc>)
 8018b88:	f7ff f8bf 	bl	8017d0a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8018b8c:	4b1d      	ldr	r3, [pc, #116]	; (8018c04 <vTaskDelete+0xd0>)
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	3301      	adds	r3, #1
 8018b92:	4a1c      	ldr	r2, [pc, #112]	; (8018c04 <vTaskDelete+0xd0>)
 8018b94:	6013      	str	r3, [r2, #0]
 8018b96:	e009      	b.n	8018bac <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8018b98:	4b1b      	ldr	r3, [pc, #108]	; (8018c08 <vTaskDelete+0xd4>)
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	3b01      	subs	r3, #1
 8018b9e:	4a1a      	ldr	r2, [pc, #104]	; (8018c08 <vTaskDelete+0xd4>)
 8018ba0:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8018ba2:	68f8      	ldr	r0, [r7, #12]
 8018ba4:	f000 fcca 	bl	801953c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8018ba8:	f000 fcf8 	bl	801959c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8018bac:	f001 faa2 	bl	801a0f4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8018bb0:	4b16      	ldr	r3, [pc, #88]	; (8018c0c <vTaskDelete+0xd8>)
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d01b      	beq.n	8018bf0 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8018bb8:	4b0f      	ldr	r3, [pc, #60]	; (8018bf8 <vTaskDelete+0xc4>)
 8018bba:	681b      	ldr	r3, [r3, #0]
 8018bbc:	68fa      	ldr	r2, [r7, #12]
 8018bbe:	429a      	cmp	r2, r3
 8018bc0:	d116      	bne.n	8018bf0 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8018bc2:	4b13      	ldr	r3, [pc, #76]	; (8018c10 <vTaskDelete+0xdc>)
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	d00a      	beq.n	8018be0 <vTaskDelete+0xac>
	__asm volatile
 8018bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bce:	f383 8811 	msr	BASEPRI, r3
 8018bd2:	f3bf 8f6f 	isb	sy
 8018bd6:	f3bf 8f4f 	dsb	sy
 8018bda:	60bb      	str	r3, [r7, #8]
}
 8018bdc:	bf00      	nop
 8018bde:	e7fe      	b.n	8018bde <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8018be0:	4b0c      	ldr	r3, [pc, #48]	; (8018c14 <vTaskDelete+0xe0>)
 8018be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018be6:	601a      	str	r2, [r3, #0]
 8018be8:	f3bf 8f4f 	dsb	sy
 8018bec:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8018bf0:	bf00      	nop
 8018bf2:	3710      	adds	r7, #16
 8018bf4:	46bd      	mov	sp, r7
 8018bf6:	bd80      	pop	{r7, pc}
 8018bf8:	20001ca8 	.word	0x20001ca8
 8018bfc:	20002198 	.word	0x20002198
 8018c00:	20002150 	.word	0x20002150
 8018c04:	20002164 	.word	0x20002164
 8018c08:	2000217c 	.word	0x2000217c
 8018c0c:	20002188 	.word	0x20002188
 8018c10:	200021a4 	.word	0x200021a4
 8018c14:	e000ed04 	.word	0xe000ed04

08018c18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8018c18:	b580      	push	{r7, lr}
 8018c1a:	b084      	sub	sp, #16
 8018c1c:	af00      	add	r7, sp, #0
 8018c1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018c20:	2300      	movs	r3, #0
 8018c22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d017      	beq.n	8018c5a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8018c2a:	4b13      	ldr	r3, [pc, #76]	; (8018c78 <vTaskDelay+0x60>)
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	d00a      	beq.n	8018c48 <vTaskDelay+0x30>
	__asm volatile
 8018c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c36:	f383 8811 	msr	BASEPRI, r3
 8018c3a:	f3bf 8f6f 	isb	sy
 8018c3e:	f3bf 8f4f 	dsb	sy
 8018c42:	60bb      	str	r3, [r7, #8]
}
 8018c44:	bf00      	nop
 8018c46:	e7fe      	b.n	8018c46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8018c48:	f000 f8e6 	bl	8018e18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8018c4c:	2100      	movs	r1, #0
 8018c4e:	6878      	ldr	r0, [r7, #4]
 8018c50:	f000 fd50 	bl	80196f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8018c54:	f000 f8ee 	bl	8018e34 <xTaskResumeAll>
 8018c58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8018c5a:	68fb      	ldr	r3, [r7, #12]
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d107      	bne.n	8018c70 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8018c60:	4b06      	ldr	r3, [pc, #24]	; (8018c7c <vTaskDelay+0x64>)
 8018c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018c66:	601a      	str	r2, [r3, #0]
 8018c68:	f3bf 8f4f 	dsb	sy
 8018c6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018c70:	bf00      	nop
 8018c72:	3710      	adds	r7, #16
 8018c74:	46bd      	mov	sp, r7
 8018c76:	bd80      	pop	{r7, pc}
 8018c78:	200021a4 	.word	0x200021a4
 8018c7c:	e000ed04 	.word	0xe000ed04

08018c80 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8018c80:	b580      	push	{r7, lr}
 8018c82:	b088      	sub	sp, #32
 8018c84:	af00      	add	r7, sp, #0
 8018c86:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8018c8c:	69bb      	ldr	r3, [r7, #24]
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d10a      	bne.n	8018ca8 <eTaskGetState+0x28>
	__asm volatile
 8018c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c96:	f383 8811 	msr	BASEPRI, r3
 8018c9a:	f3bf 8f6f 	isb	sy
 8018c9e:	f3bf 8f4f 	dsb	sy
 8018ca2:	60bb      	str	r3, [r7, #8]
}
 8018ca4:	bf00      	nop
 8018ca6:	e7fe      	b.n	8018ca6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8018ca8:	4b23      	ldr	r3, [pc, #140]	; (8018d38 <eTaskGetState+0xb8>)
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	69ba      	ldr	r2, [r7, #24]
 8018cae:	429a      	cmp	r2, r3
 8018cb0:	d102      	bne.n	8018cb8 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8018cb2:	2300      	movs	r3, #0
 8018cb4:	77fb      	strb	r3, [r7, #31]
 8018cb6:	e03a      	b.n	8018d2e <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8018cb8:	f001 f9ec 	bl	801a094 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8018cbc:	69bb      	ldr	r3, [r7, #24]
 8018cbe:	695b      	ldr	r3, [r3, #20]
 8018cc0:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8018cc2:	4b1e      	ldr	r3, [pc, #120]	; (8018d3c <eTaskGetState+0xbc>)
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8018cc8:	4b1d      	ldr	r3, [pc, #116]	; (8018d40 <eTaskGetState+0xc0>)
 8018cca:	681b      	ldr	r3, [r3, #0]
 8018ccc:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8018cce:	f001 fa11 	bl	801a0f4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8018cd2:	697a      	ldr	r2, [r7, #20]
 8018cd4:	693b      	ldr	r3, [r7, #16]
 8018cd6:	429a      	cmp	r2, r3
 8018cd8:	d003      	beq.n	8018ce2 <eTaskGetState+0x62>
 8018cda:	697a      	ldr	r2, [r7, #20]
 8018cdc:	68fb      	ldr	r3, [r7, #12]
 8018cde:	429a      	cmp	r2, r3
 8018ce0:	d102      	bne.n	8018ce8 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8018ce2:	2302      	movs	r3, #2
 8018ce4:	77fb      	strb	r3, [r7, #31]
 8018ce6:	e022      	b.n	8018d2e <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8018ce8:	697b      	ldr	r3, [r7, #20]
 8018cea:	4a16      	ldr	r2, [pc, #88]	; (8018d44 <eTaskGetState+0xc4>)
 8018cec:	4293      	cmp	r3, r2
 8018cee:	d112      	bne.n	8018d16 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8018cf0:	69bb      	ldr	r3, [r7, #24]
 8018cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	d10b      	bne.n	8018d10 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8018cf8:	69bb      	ldr	r3, [r7, #24]
 8018cfa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8018cfe:	b2db      	uxtb	r3, r3
 8018d00:	2b01      	cmp	r3, #1
 8018d02:	d102      	bne.n	8018d0a <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8018d04:	2302      	movs	r3, #2
 8018d06:	77fb      	strb	r3, [r7, #31]
 8018d08:	e011      	b.n	8018d2e <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8018d0a:	2303      	movs	r3, #3
 8018d0c:	77fb      	strb	r3, [r7, #31]
 8018d0e:	e00e      	b.n	8018d2e <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8018d10:	2302      	movs	r3, #2
 8018d12:	77fb      	strb	r3, [r7, #31]
 8018d14:	e00b      	b.n	8018d2e <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8018d16:	697b      	ldr	r3, [r7, #20]
 8018d18:	4a0b      	ldr	r2, [pc, #44]	; (8018d48 <eTaskGetState+0xc8>)
 8018d1a:	4293      	cmp	r3, r2
 8018d1c:	d002      	beq.n	8018d24 <eTaskGetState+0xa4>
 8018d1e:	697b      	ldr	r3, [r7, #20]
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	d102      	bne.n	8018d2a <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8018d24:	2304      	movs	r3, #4
 8018d26:	77fb      	strb	r3, [r7, #31]
 8018d28:	e001      	b.n	8018d2e <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8018d2a:	2301      	movs	r3, #1
 8018d2c:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8018d2e:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8018d30:	4618      	mov	r0, r3
 8018d32:	3720      	adds	r7, #32
 8018d34:	46bd      	mov	sp, r7
 8018d36:	bd80      	pop	{r7, pc}
 8018d38:	20001ca8 	.word	0x20001ca8
 8018d3c:	20002134 	.word	0x20002134
 8018d40:	20002138 	.word	0x20002138
 8018d44:	20002168 	.word	0x20002168
 8018d48:	20002150 	.word	0x20002150

08018d4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018d4c:	b580      	push	{r7, lr}
 8018d4e:	b08a      	sub	sp, #40	; 0x28
 8018d50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8018d52:	2300      	movs	r3, #0
 8018d54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8018d56:	2300      	movs	r3, #0
 8018d58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8018d5a:	463a      	mov	r2, r7
 8018d5c:	1d39      	adds	r1, r7, #4
 8018d5e:	f107 0308 	add.w	r3, r7, #8
 8018d62:	4618      	mov	r0, r3
 8018d64:	f7fe ff70 	bl	8017c48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8018d68:	6839      	ldr	r1, [r7, #0]
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	68ba      	ldr	r2, [r7, #8]
 8018d6e:	9202      	str	r2, [sp, #8]
 8018d70:	9301      	str	r3, [sp, #4]
 8018d72:	2300      	movs	r3, #0
 8018d74:	9300      	str	r3, [sp, #0]
 8018d76:	2300      	movs	r3, #0
 8018d78:	460a      	mov	r2, r1
 8018d7a:	4921      	ldr	r1, [pc, #132]	; (8018e00 <vTaskStartScheduler+0xb4>)
 8018d7c:	4821      	ldr	r0, [pc, #132]	; (8018e04 <vTaskStartScheduler+0xb8>)
 8018d7e:	f7ff fd37 	bl	80187f0 <xTaskCreateStatic>
 8018d82:	4603      	mov	r3, r0
 8018d84:	4a20      	ldr	r2, [pc, #128]	; (8018e08 <vTaskStartScheduler+0xbc>)
 8018d86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8018d88:	4b1f      	ldr	r3, [pc, #124]	; (8018e08 <vTaskStartScheduler+0xbc>)
 8018d8a:	681b      	ldr	r3, [r3, #0]
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d002      	beq.n	8018d96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8018d90:	2301      	movs	r3, #1
 8018d92:	617b      	str	r3, [r7, #20]
 8018d94:	e001      	b.n	8018d9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8018d96:	2300      	movs	r3, #0
 8018d98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8018d9a:	697b      	ldr	r3, [r7, #20]
 8018d9c:	2b01      	cmp	r3, #1
 8018d9e:	d102      	bne.n	8018da6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8018da0:	f000 fcfc 	bl	801979c <xTimerCreateTimerTask>
 8018da4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8018da6:	697b      	ldr	r3, [r7, #20]
 8018da8:	2b01      	cmp	r3, #1
 8018daa:	d116      	bne.n	8018dda <vTaskStartScheduler+0x8e>
	__asm volatile
 8018dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018db0:	f383 8811 	msr	BASEPRI, r3
 8018db4:	f3bf 8f6f 	isb	sy
 8018db8:	f3bf 8f4f 	dsb	sy
 8018dbc:	613b      	str	r3, [r7, #16]
}
 8018dbe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018dc0:	4b12      	ldr	r3, [pc, #72]	; (8018e0c <vTaskStartScheduler+0xc0>)
 8018dc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018dc6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018dc8:	4b11      	ldr	r3, [pc, #68]	; (8018e10 <vTaskStartScheduler+0xc4>)
 8018dca:	2201      	movs	r2, #1
 8018dcc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018dce:	4b11      	ldr	r3, [pc, #68]	; (8018e14 <vTaskStartScheduler+0xc8>)
 8018dd0:	2200      	movs	r2, #0
 8018dd2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018dd4:	f001 f8bc 	bl	8019f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018dd8:	e00e      	b.n	8018df8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018dda:	697b      	ldr	r3, [r7, #20]
 8018ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018de0:	d10a      	bne.n	8018df8 <vTaskStartScheduler+0xac>
	__asm volatile
 8018de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018de6:	f383 8811 	msr	BASEPRI, r3
 8018dea:	f3bf 8f6f 	isb	sy
 8018dee:	f3bf 8f4f 	dsb	sy
 8018df2:	60fb      	str	r3, [r7, #12]
}
 8018df4:	bf00      	nop
 8018df6:	e7fe      	b.n	8018df6 <vTaskStartScheduler+0xaa>
}
 8018df8:	bf00      	nop
 8018dfa:	3718      	adds	r7, #24
 8018dfc:	46bd      	mov	sp, r7
 8018dfe:	bd80      	pop	{r7, pc}
 8018e00:	080209d4 	.word	0x080209d4
 8018e04:	08019431 	.word	0x08019431
 8018e08:	200021a0 	.word	0x200021a0
 8018e0c:	2000219c 	.word	0x2000219c
 8018e10:	20002188 	.word	0x20002188
 8018e14:	20002180 	.word	0x20002180

08018e18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018e18:	b480      	push	{r7}
 8018e1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8018e1c:	4b04      	ldr	r3, [pc, #16]	; (8018e30 <vTaskSuspendAll+0x18>)
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	3301      	adds	r3, #1
 8018e22:	4a03      	ldr	r2, [pc, #12]	; (8018e30 <vTaskSuspendAll+0x18>)
 8018e24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8018e26:	bf00      	nop
 8018e28:	46bd      	mov	sp, r7
 8018e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e2e:	4770      	bx	lr
 8018e30:	200021a4 	.word	0x200021a4

08018e34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018e34:	b580      	push	{r7, lr}
 8018e36:	b084      	sub	sp, #16
 8018e38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018e3a:	2300      	movs	r3, #0
 8018e3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018e3e:	2300      	movs	r3, #0
 8018e40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8018e42:	4b42      	ldr	r3, [pc, #264]	; (8018f4c <xTaskResumeAll+0x118>)
 8018e44:	681b      	ldr	r3, [r3, #0]
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d10a      	bne.n	8018e60 <xTaskResumeAll+0x2c>
	__asm volatile
 8018e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e4e:	f383 8811 	msr	BASEPRI, r3
 8018e52:	f3bf 8f6f 	isb	sy
 8018e56:	f3bf 8f4f 	dsb	sy
 8018e5a:	603b      	str	r3, [r7, #0]
}
 8018e5c:	bf00      	nop
 8018e5e:	e7fe      	b.n	8018e5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018e60:	f001 f918 	bl	801a094 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018e64:	4b39      	ldr	r3, [pc, #228]	; (8018f4c <xTaskResumeAll+0x118>)
 8018e66:	681b      	ldr	r3, [r3, #0]
 8018e68:	3b01      	subs	r3, #1
 8018e6a:	4a38      	ldr	r2, [pc, #224]	; (8018f4c <xTaskResumeAll+0x118>)
 8018e6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018e6e:	4b37      	ldr	r3, [pc, #220]	; (8018f4c <xTaskResumeAll+0x118>)
 8018e70:	681b      	ldr	r3, [r3, #0]
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d162      	bne.n	8018f3c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8018e76:	4b36      	ldr	r3, [pc, #216]	; (8018f50 <xTaskResumeAll+0x11c>)
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	2b00      	cmp	r3, #0
 8018e7c:	d05e      	beq.n	8018f3c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018e7e:	e02f      	b.n	8018ee0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018e80:	4b34      	ldr	r3, [pc, #208]	; (8018f54 <xTaskResumeAll+0x120>)
 8018e82:	68db      	ldr	r3, [r3, #12]
 8018e84:	68db      	ldr	r3, [r3, #12]
 8018e86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018e88:	68fb      	ldr	r3, [r7, #12]
 8018e8a:	3318      	adds	r3, #24
 8018e8c:	4618      	mov	r0, r3
 8018e8e:	f7fe ff99 	bl	8017dc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018e92:	68fb      	ldr	r3, [r7, #12]
 8018e94:	3304      	adds	r3, #4
 8018e96:	4618      	mov	r0, r3
 8018e98:	f7fe ff94 	bl	8017dc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018e9c:	68fb      	ldr	r3, [r7, #12]
 8018e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ea0:	4b2d      	ldr	r3, [pc, #180]	; (8018f58 <xTaskResumeAll+0x124>)
 8018ea2:	681b      	ldr	r3, [r3, #0]
 8018ea4:	429a      	cmp	r2, r3
 8018ea6:	d903      	bls.n	8018eb0 <xTaskResumeAll+0x7c>
 8018ea8:	68fb      	ldr	r3, [r7, #12]
 8018eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018eac:	4a2a      	ldr	r2, [pc, #168]	; (8018f58 <xTaskResumeAll+0x124>)
 8018eae:	6013      	str	r3, [r2, #0]
 8018eb0:	68fb      	ldr	r3, [r7, #12]
 8018eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018eb4:	4613      	mov	r3, r2
 8018eb6:	009b      	lsls	r3, r3, #2
 8018eb8:	4413      	add	r3, r2
 8018eba:	009b      	lsls	r3, r3, #2
 8018ebc:	4a27      	ldr	r2, [pc, #156]	; (8018f5c <xTaskResumeAll+0x128>)
 8018ebe:	441a      	add	r2, r3
 8018ec0:	68fb      	ldr	r3, [r7, #12]
 8018ec2:	3304      	adds	r3, #4
 8018ec4:	4619      	mov	r1, r3
 8018ec6:	4610      	mov	r0, r2
 8018ec8:	f7fe ff1f 	bl	8017d0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018ecc:	68fb      	ldr	r3, [r7, #12]
 8018ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ed0:	4b23      	ldr	r3, [pc, #140]	; (8018f60 <xTaskResumeAll+0x12c>)
 8018ed2:	681b      	ldr	r3, [r3, #0]
 8018ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ed6:	429a      	cmp	r2, r3
 8018ed8:	d302      	bcc.n	8018ee0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8018eda:	4b22      	ldr	r3, [pc, #136]	; (8018f64 <xTaskResumeAll+0x130>)
 8018edc:	2201      	movs	r2, #1
 8018ede:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018ee0:	4b1c      	ldr	r3, [pc, #112]	; (8018f54 <xTaskResumeAll+0x120>)
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	2b00      	cmp	r3, #0
 8018ee6:	d1cb      	bne.n	8018e80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018ee8:	68fb      	ldr	r3, [r7, #12]
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	d001      	beq.n	8018ef2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018eee:	f000 fb55 	bl	801959c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8018ef2:	4b1d      	ldr	r3, [pc, #116]	; (8018f68 <xTaskResumeAll+0x134>)
 8018ef4:	681b      	ldr	r3, [r3, #0]
 8018ef6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d010      	beq.n	8018f20 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018efe:	f000 f847 	bl	8018f90 <xTaskIncrementTick>
 8018f02:	4603      	mov	r3, r0
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d002      	beq.n	8018f0e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8018f08:	4b16      	ldr	r3, [pc, #88]	; (8018f64 <xTaskResumeAll+0x130>)
 8018f0a:	2201      	movs	r2, #1
 8018f0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	3b01      	subs	r3, #1
 8018f12:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	d1f1      	bne.n	8018efe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8018f1a:	4b13      	ldr	r3, [pc, #76]	; (8018f68 <xTaskResumeAll+0x134>)
 8018f1c:	2200      	movs	r2, #0
 8018f1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018f20:	4b10      	ldr	r3, [pc, #64]	; (8018f64 <xTaskResumeAll+0x130>)
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d009      	beq.n	8018f3c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018f28:	2301      	movs	r3, #1
 8018f2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018f2c:	4b0f      	ldr	r3, [pc, #60]	; (8018f6c <xTaskResumeAll+0x138>)
 8018f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018f32:	601a      	str	r2, [r3, #0]
 8018f34:	f3bf 8f4f 	dsb	sy
 8018f38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018f3c:	f001 f8da 	bl	801a0f4 <vPortExitCritical>

	return xAlreadyYielded;
 8018f40:	68bb      	ldr	r3, [r7, #8]
}
 8018f42:	4618      	mov	r0, r3
 8018f44:	3710      	adds	r7, #16
 8018f46:	46bd      	mov	sp, r7
 8018f48:	bd80      	pop	{r7, pc}
 8018f4a:	bf00      	nop
 8018f4c:	200021a4 	.word	0x200021a4
 8018f50:	2000217c 	.word	0x2000217c
 8018f54:	2000213c 	.word	0x2000213c
 8018f58:	20002184 	.word	0x20002184
 8018f5c:	20001cac 	.word	0x20001cac
 8018f60:	20001ca8 	.word	0x20001ca8
 8018f64:	20002190 	.word	0x20002190
 8018f68:	2000218c 	.word	0x2000218c
 8018f6c:	e000ed04 	.word	0xe000ed04

08018f70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018f70:	b480      	push	{r7}
 8018f72:	b083      	sub	sp, #12
 8018f74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8018f76:	4b05      	ldr	r3, [pc, #20]	; (8018f8c <xTaskGetTickCount+0x1c>)
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018f7c:	687b      	ldr	r3, [r7, #4]
}
 8018f7e:	4618      	mov	r0, r3
 8018f80:	370c      	adds	r7, #12
 8018f82:	46bd      	mov	sp, r7
 8018f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f88:	4770      	bx	lr
 8018f8a:	bf00      	nop
 8018f8c:	20002180 	.word	0x20002180

08018f90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018f90:	b580      	push	{r7, lr}
 8018f92:	b086      	sub	sp, #24
 8018f94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8018f96:	2300      	movs	r3, #0
 8018f98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018f9a:	4b4f      	ldr	r3, [pc, #316]	; (80190d8 <xTaskIncrementTick+0x148>)
 8018f9c:	681b      	ldr	r3, [r3, #0]
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	f040 808f 	bne.w	80190c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018fa4:	4b4d      	ldr	r3, [pc, #308]	; (80190dc <xTaskIncrementTick+0x14c>)
 8018fa6:	681b      	ldr	r3, [r3, #0]
 8018fa8:	3301      	adds	r3, #1
 8018faa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018fac:	4a4b      	ldr	r2, [pc, #300]	; (80190dc <xTaskIncrementTick+0x14c>)
 8018fae:	693b      	ldr	r3, [r7, #16]
 8018fb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018fb2:	693b      	ldr	r3, [r7, #16]
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	d120      	bne.n	8018ffa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8018fb8:	4b49      	ldr	r3, [pc, #292]	; (80190e0 <xTaskIncrementTick+0x150>)
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	681b      	ldr	r3, [r3, #0]
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d00a      	beq.n	8018fd8 <xTaskIncrementTick+0x48>
	__asm volatile
 8018fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fc6:	f383 8811 	msr	BASEPRI, r3
 8018fca:	f3bf 8f6f 	isb	sy
 8018fce:	f3bf 8f4f 	dsb	sy
 8018fd2:	603b      	str	r3, [r7, #0]
}
 8018fd4:	bf00      	nop
 8018fd6:	e7fe      	b.n	8018fd6 <xTaskIncrementTick+0x46>
 8018fd8:	4b41      	ldr	r3, [pc, #260]	; (80190e0 <xTaskIncrementTick+0x150>)
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	60fb      	str	r3, [r7, #12]
 8018fde:	4b41      	ldr	r3, [pc, #260]	; (80190e4 <xTaskIncrementTick+0x154>)
 8018fe0:	681b      	ldr	r3, [r3, #0]
 8018fe2:	4a3f      	ldr	r2, [pc, #252]	; (80190e0 <xTaskIncrementTick+0x150>)
 8018fe4:	6013      	str	r3, [r2, #0]
 8018fe6:	4a3f      	ldr	r2, [pc, #252]	; (80190e4 <xTaskIncrementTick+0x154>)
 8018fe8:	68fb      	ldr	r3, [r7, #12]
 8018fea:	6013      	str	r3, [r2, #0]
 8018fec:	4b3e      	ldr	r3, [pc, #248]	; (80190e8 <xTaskIncrementTick+0x158>)
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	3301      	adds	r3, #1
 8018ff2:	4a3d      	ldr	r2, [pc, #244]	; (80190e8 <xTaskIncrementTick+0x158>)
 8018ff4:	6013      	str	r3, [r2, #0]
 8018ff6:	f000 fad1 	bl	801959c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018ffa:	4b3c      	ldr	r3, [pc, #240]	; (80190ec <xTaskIncrementTick+0x15c>)
 8018ffc:	681b      	ldr	r3, [r3, #0]
 8018ffe:	693a      	ldr	r2, [r7, #16]
 8019000:	429a      	cmp	r2, r3
 8019002:	d349      	bcc.n	8019098 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019004:	4b36      	ldr	r3, [pc, #216]	; (80190e0 <xTaskIncrementTick+0x150>)
 8019006:	681b      	ldr	r3, [r3, #0]
 8019008:	681b      	ldr	r3, [r3, #0]
 801900a:	2b00      	cmp	r3, #0
 801900c:	d104      	bne.n	8019018 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801900e:	4b37      	ldr	r3, [pc, #220]	; (80190ec <xTaskIncrementTick+0x15c>)
 8019010:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019014:	601a      	str	r2, [r3, #0]
					break;
 8019016:	e03f      	b.n	8019098 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019018:	4b31      	ldr	r3, [pc, #196]	; (80190e0 <xTaskIncrementTick+0x150>)
 801901a:	681b      	ldr	r3, [r3, #0]
 801901c:	68db      	ldr	r3, [r3, #12]
 801901e:	68db      	ldr	r3, [r3, #12]
 8019020:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8019022:	68bb      	ldr	r3, [r7, #8]
 8019024:	685b      	ldr	r3, [r3, #4]
 8019026:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8019028:	693a      	ldr	r2, [r7, #16]
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	429a      	cmp	r2, r3
 801902e:	d203      	bcs.n	8019038 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8019030:	4a2e      	ldr	r2, [pc, #184]	; (80190ec <xTaskIncrementTick+0x15c>)
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8019036:	e02f      	b.n	8019098 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019038:	68bb      	ldr	r3, [r7, #8]
 801903a:	3304      	adds	r3, #4
 801903c:	4618      	mov	r0, r3
 801903e:	f7fe fec1 	bl	8017dc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019042:	68bb      	ldr	r3, [r7, #8]
 8019044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019046:	2b00      	cmp	r3, #0
 8019048:	d004      	beq.n	8019054 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801904a:	68bb      	ldr	r3, [r7, #8]
 801904c:	3318      	adds	r3, #24
 801904e:	4618      	mov	r0, r3
 8019050:	f7fe feb8 	bl	8017dc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8019054:	68bb      	ldr	r3, [r7, #8]
 8019056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019058:	4b25      	ldr	r3, [pc, #148]	; (80190f0 <xTaskIncrementTick+0x160>)
 801905a:	681b      	ldr	r3, [r3, #0]
 801905c:	429a      	cmp	r2, r3
 801905e:	d903      	bls.n	8019068 <xTaskIncrementTick+0xd8>
 8019060:	68bb      	ldr	r3, [r7, #8]
 8019062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019064:	4a22      	ldr	r2, [pc, #136]	; (80190f0 <xTaskIncrementTick+0x160>)
 8019066:	6013      	str	r3, [r2, #0]
 8019068:	68bb      	ldr	r3, [r7, #8]
 801906a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801906c:	4613      	mov	r3, r2
 801906e:	009b      	lsls	r3, r3, #2
 8019070:	4413      	add	r3, r2
 8019072:	009b      	lsls	r3, r3, #2
 8019074:	4a1f      	ldr	r2, [pc, #124]	; (80190f4 <xTaskIncrementTick+0x164>)
 8019076:	441a      	add	r2, r3
 8019078:	68bb      	ldr	r3, [r7, #8]
 801907a:	3304      	adds	r3, #4
 801907c:	4619      	mov	r1, r3
 801907e:	4610      	mov	r0, r2
 8019080:	f7fe fe43 	bl	8017d0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019084:	68bb      	ldr	r3, [r7, #8]
 8019086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019088:	4b1b      	ldr	r3, [pc, #108]	; (80190f8 <xTaskIncrementTick+0x168>)
 801908a:	681b      	ldr	r3, [r3, #0]
 801908c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801908e:	429a      	cmp	r2, r3
 8019090:	d3b8      	bcc.n	8019004 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8019092:	2301      	movs	r3, #1
 8019094:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019096:	e7b5      	b.n	8019004 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8019098:	4b17      	ldr	r3, [pc, #92]	; (80190f8 <xTaskIncrementTick+0x168>)
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801909e:	4915      	ldr	r1, [pc, #84]	; (80190f4 <xTaskIncrementTick+0x164>)
 80190a0:	4613      	mov	r3, r2
 80190a2:	009b      	lsls	r3, r3, #2
 80190a4:	4413      	add	r3, r2
 80190a6:	009b      	lsls	r3, r3, #2
 80190a8:	440b      	add	r3, r1
 80190aa:	681b      	ldr	r3, [r3, #0]
 80190ac:	2b01      	cmp	r3, #1
 80190ae:	d901      	bls.n	80190b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80190b0:	2301      	movs	r3, #1
 80190b2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80190b4:	4b11      	ldr	r3, [pc, #68]	; (80190fc <xTaskIncrementTick+0x16c>)
 80190b6:	681b      	ldr	r3, [r3, #0]
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	d007      	beq.n	80190cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80190bc:	2301      	movs	r3, #1
 80190be:	617b      	str	r3, [r7, #20]
 80190c0:	e004      	b.n	80190cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80190c2:	4b0f      	ldr	r3, [pc, #60]	; (8019100 <xTaskIncrementTick+0x170>)
 80190c4:	681b      	ldr	r3, [r3, #0]
 80190c6:	3301      	adds	r3, #1
 80190c8:	4a0d      	ldr	r2, [pc, #52]	; (8019100 <xTaskIncrementTick+0x170>)
 80190ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80190cc:	697b      	ldr	r3, [r7, #20]
}
 80190ce:	4618      	mov	r0, r3
 80190d0:	3718      	adds	r7, #24
 80190d2:	46bd      	mov	sp, r7
 80190d4:	bd80      	pop	{r7, pc}
 80190d6:	bf00      	nop
 80190d8:	200021a4 	.word	0x200021a4
 80190dc:	20002180 	.word	0x20002180
 80190e0:	20002134 	.word	0x20002134
 80190e4:	20002138 	.word	0x20002138
 80190e8:	20002194 	.word	0x20002194
 80190ec:	2000219c 	.word	0x2000219c
 80190f0:	20002184 	.word	0x20002184
 80190f4:	20001cac 	.word	0x20001cac
 80190f8:	20001ca8 	.word	0x20001ca8
 80190fc:	20002190 	.word	0x20002190
 8019100:	2000218c 	.word	0x2000218c

08019104 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8019104:	b480      	push	{r7}
 8019106:	b085      	sub	sp, #20
 8019108:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801910a:	4b28      	ldr	r3, [pc, #160]	; (80191ac <vTaskSwitchContext+0xa8>)
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	2b00      	cmp	r3, #0
 8019110:	d003      	beq.n	801911a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8019112:	4b27      	ldr	r3, [pc, #156]	; (80191b0 <vTaskSwitchContext+0xac>)
 8019114:	2201      	movs	r2, #1
 8019116:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8019118:	e041      	b.n	801919e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801911a:	4b25      	ldr	r3, [pc, #148]	; (80191b0 <vTaskSwitchContext+0xac>)
 801911c:	2200      	movs	r2, #0
 801911e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019120:	4b24      	ldr	r3, [pc, #144]	; (80191b4 <vTaskSwitchContext+0xb0>)
 8019122:	681b      	ldr	r3, [r3, #0]
 8019124:	60fb      	str	r3, [r7, #12]
 8019126:	e010      	b.n	801914a <vTaskSwitchContext+0x46>
 8019128:	68fb      	ldr	r3, [r7, #12]
 801912a:	2b00      	cmp	r3, #0
 801912c:	d10a      	bne.n	8019144 <vTaskSwitchContext+0x40>
	__asm volatile
 801912e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019132:	f383 8811 	msr	BASEPRI, r3
 8019136:	f3bf 8f6f 	isb	sy
 801913a:	f3bf 8f4f 	dsb	sy
 801913e:	607b      	str	r3, [r7, #4]
}
 8019140:	bf00      	nop
 8019142:	e7fe      	b.n	8019142 <vTaskSwitchContext+0x3e>
 8019144:	68fb      	ldr	r3, [r7, #12]
 8019146:	3b01      	subs	r3, #1
 8019148:	60fb      	str	r3, [r7, #12]
 801914a:	491b      	ldr	r1, [pc, #108]	; (80191b8 <vTaskSwitchContext+0xb4>)
 801914c:	68fa      	ldr	r2, [r7, #12]
 801914e:	4613      	mov	r3, r2
 8019150:	009b      	lsls	r3, r3, #2
 8019152:	4413      	add	r3, r2
 8019154:	009b      	lsls	r3, r3, #2
 8019156:	440b      	add	r3, r1
 8019158:	681b      	ldr	r3, [r3, #0]
 801915a:	2b00      	cmp	r3, #0
 801915c:	d0e4      	beq.n	8019128 <vTaskSwitchContext+0x24>
 801915e:	68fa      	ldr	r2, [r7, #12]
 8019160:	4613      	mov	r3, r2
 8019162:	009b      	lsls	r3, r3, #2
 8019164:	4413      	add	r3, r2
 8019166:	009b      	lsls	r3, r3, #2
 8019168:	4a13      	ldr	r2, [pc, #76]	; (80191b8 <vTaskSwitchContext+0xb4>)
 801916a:	4413      	add	r3, r2
 801916c:	60bb      	str	r3, [r7, #8]
 801916e:	68bb      	ldr	r3, [r7, #8]
 8019170:	685b      	ldr	r3, [r3, #4]
 8019172:	685a      	ldr	r2, [r3, #4]
 8019174:	68bb      	ldr	r3, [r7, #8]
 8019176:	605a      	str	r2, [r3, #4]
 8019178:	68bb      	ldr	r3, [r7, #8]
 801917a:	685a      	ldr	r2, [r3, #4]
 801917c:	68bb      	ldr	r3, [r7, #8]
 801917e:	3308      	adds	r3, #8
 8019180:	429a      	cmp	r2, r3
 8019182:	d104      	bne.n	801918e <vTaskSwitchContext+0x8a>
 8019184:	68bb      	ldr	r3, [r7, #8]
 8019186:	685b      	ldr	r3, [r3, #4]
 8019188:	685a      	ldr	r2, [r3, #4]
 801918a:	68bb      	ldr	r3, [r7, #8]
 801918c:	605a      	str	r2, [r3, #4]
 801918e:	68bb      	ldr	r3, [r7, #8]
 8019190:	685b      	ldr	r3, [r3, #4]
 8019192:	68db      	ldr	r3, [r3, #12]
 8019194:	4a09      	ldr	r2, [pc, #36]	; (80191bc <vTaskSwitchContext+0xb8>)
 8019196:	6013      	str	r3, [r2, #0]
 8019198:	4a06      	ldr	r2, [pc, #24]	; (80191b4 <vTaskSwitchContext+0xb0>)
 801919a:	68fb      	ldr	r3, [r7, #12]
 801919c:	6013      	str	r3, [r2, #0]
}
 801919e:	bf00      	nop
 80191a0:	3714      	adds	r7, #20
 80191a2:	46bd      	mov	sp, r7
 80191a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191a8:	4770      	bx	lr
 80191aa:	bf00      	nop
 80191ac:	200021a4 	.word	0x200021a4
 80191b0:	20002190 	.word	0x20002190
 80191b4:	20002184 	.word	0x20002184
 80191b8:	20001cac 	.word	0x20001cac
 80191bc:	20001ca8 	.word	0x20001ca8

080191c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80191c0:	b580      	push	{r7, lr}
 80191c2:	b084      	sub	sp, #16
 80191c4:	af00      	add	r7, sp, #0
 80191c6:	6078      	str	r0, [r7, #4]
 80191c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d10a      	bne.n	80191e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80191d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191d4:	f383 8811 	msr	BASEPRI, r3
 80191d8:	f3bf 8f6f 	isb	sy
 80191dc:	f3bf 8f4f 	dsb	sy
 80191e0:	60fb      	str	r3, [r7, #12]
}
 80191e2:	bf00      	nop
 80191e4:	e7fe      	b.n	80191e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80191e6:	4b07      	ldr	r3, [pc, #28]	; (8019204 <vTaskPlaceOnEventList+0x44>)
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	3318      	adds	r3, #24
 80191ec:	4619      	mov	r1, r3
 80191ee:	6878      	ldr	r0, [r7, #4]
 80191f0:	f7fe fdaf 	bl	8017d52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80191f4:	2101      	movs	r1, #1
 80191f6:	6838      	ldr	r0, [r7, #0]
 80191f8:	f000 fa7c 	bl	80196f4 <prvAddCurrentTaskToDelayedList>
}
 80191fc:	bf00      	nop
 80191fe:	3710      	adds	r7, #16
 8019200:	46bd      	mov	sp, r7
 8019202:	bd80      	pop	{r7, pc}
 8019204:	20001ca8 	.word	0x20001ca8

08019208 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8019208:	b580      	push	{r7, lr}
 801920a:	b086      	sub	sp, #24
 801920c:	af00      	add	r7, sp, #0
 801920e:	60f8      	str	r0, [r7, #12]
 8019210:	60b9      	str	r1, [r7, #8]
 8019212:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8019214:	68fb      	ldr	r3, [r7, #12]
 8019216:	2b00      	cmp	r3, #0
 8019218:	d10a      	bne.n	8019230 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801921a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801921e:	f383 8811 	msr	BASEPRI, r3
 8019222:	f3bf 8f6f 	isb	sy
 8019226:	f3bf 8f4f 	dsb	sy
 801922a:	617b      	str	r3, [r7, #20]
}
 801922c:	bf00      	nop
 801922e:	e7fe      	b.n	801922e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019230:	4b0a      	ldr	r3, [pc, #40]	; (801925c <vTaskPlaceOnEventListRestricted+0x54>)
 8019232:	681b      	ldr	r3, [r3, #0]
 8019234:	3318      	adds	r3, #24
 8019236:	4619      	mov	r1, r3
 8019238:	68f8      	ldr	r0, [r7, #12]
 801923a:	f7fe fd66 	bl	8017d0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	2b00      	cmp	r3, #0
 8019242:	d002      	beq.n	801924a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8019244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019248:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801924a:	6879      	ldr	r1, [r7, #4]
 801924c:	68b8      	ldr	r0, [r7, #8]
 801924e:	f000 fa51 	bl	80196f4 <prvAddCurrentTaskToDelayedList>
	}
 8019252:	bf00      	nop
 8019254:	3718      	adds	r7, #24
 8019256:	46bd      	mov	sp, r7
 8019258:	bd80      	pop	{r7, pc}
 801925a:	bf00      	nop
 801925c:	20001ca8 	.word	0x20001ca8

08019260 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8019260:	b580      	push	{r7, lr}
 8019262:	b086      	sub	sp, #24
 8019264:	af00      	add	r7, sp, #0
 8019266:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	68db      	ldr	r3, [r3, #12]
 801926c:	68db      	ldr	r3, [r3, #12]
 801926e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8019270:	693b      	ldr	r3, [r7, #16]
 8019272:	2b00      	cmp	r3, #0
 8019274:	d10a      	bne.n	801928c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8019276:	f04f 0350 	mov.w	r3, #80	; 0x50
 801927a:	f383 8811 	msr	BASEPRI, r3
 801927e:	f3bf 8f6f 	isb	sy
 8019282:	f3bf 8f4f 	dsb	sy
 8019286:	60fb      	str	r3, [r7, #12]
}
 8019288:	bf00      	nop
 801928a:	e7fe      	b.n	801928a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801928c:	693b      	ldr	r3, [r7, #16]
 801928e:	3318      	adds	r3, #24
 8019290:	4618      	mov	r0, r3
 8019292:	f7fe fd97 	bl	8017dc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019296:	4b1e      	ldr	r3, [pc, #120]	; (8019310 <xTaskRemoveFromEventList+0xb0>)
 8019298:	681b      	ldr	r3, [r3, #0]
 801929a:	2b00      	cmp	r3, #0
 801929c:	d11d      	bne.n	80192da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801929e:	693b      	ldr	r3, [r7, #16]
 80192a0:	3304      	adds	r3, #4
 80192a2:	4618      	mov	r0, r3
 80192a4:	f7fe fd8e 	bl	8017dc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80192a8:	693b      	ldr	r3, [r7, #16]
 80192aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80192ac:	4b19      	ldr	r3, [pc, #100]	; (8019314 <xTaskRemoveFromEventList+0xb4>)
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	429a      	cmp	r2, r3
 80192b2:	d903      	bls.n	80192bc <xTaskRemoveFromEventList+0x5c>
 80192b4:	693b      	ldr	r3, [r7, #16]
 80192b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192b8:	4a16      	ldr	r2, [pc, #88]	; (8019314 <xTaskRemoveFromEventList+0xb4>)
 80192ba:	6013      	str	r3, [r2, #0]
 80192bc:	693b      	ldr	r3, [r7, #16]
 80192be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80192c0:	4613      	mov	r3, r2
 80192c2:	009b      	lsls	r3, r3, #2
 80192c4:	4413      	add	r3, r2
 80192c6:	009b      	lsls	r3, r3, #2
 80192c8:	4a13      	ldr	r2, [pc, #76]	; (8019318 <xTaskRemoveFromEventList+0xb8>)
 80192ca:	441a      	add	r2, r3
 80192cc:	693b      	ldr	r3, [r7, #16]
 80192ce:	3304      	adds	r3, #4
 80192d0:	4619      	mov	r1, r3
 80192d2:	4610      	mov	r0, r2
 80192d4:	f7fe fd19 	bl	8017d0a <vListInsertEnd>
 80192d8:	e005      	b.n	80192e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80192da:	693b      	ldr	r3, [r7, #16]
 80192dc:	3318      	adds	r3, #24
 80192de:	4619      	mov	r1, r3
 80192e0:	480e      	ldr	r0, [pc, #56]	; (801931c <xTaskRemoveFromEventList+0xbc>)
 80192e2:	f7fe fd12 	bl	8017d0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80192e6:	693b      	ldr	r3, [r7, #16]
 80192e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80192ea:	4b0d      	ldr	r3, [pc, #52]	; (8019320 <xTaskRemoveFromEventList+0xc0>)
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192f0:	429a      	cmp	r2, r3
 80192f2:	d905      	bls.n	8019300 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80192f4:	2301      	movs	r3, #1
 80192f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80192f8:	4b0a      	ldr	r3, [pc, #40]	; (8019324 <xTaskRemoveFromEventList+0xc4>)
 80192fa:	2201      	movs	r2, #1
 80192fc:	601a      	str	r2, [r3, #0]
 80192fe:	e001      	b.n	8019304 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8019300:	2300      	movs	r3, #0
 8019302:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8019304:	697b      	ldr	r3, [r7, #20]
}
 8019306:	4618      	mov	r0, r3
 8019308:	3718      	adds	r7, #24
 801930a:	46bd      	mov	sp, r7
 801930c:	bd80      	pop	{r7, pc}
 801930e:	bf00      	nop
 8019310:	200021a4 	.word	0x200021a4
 8019314:	20002184 	.word	0x20002184
 8019318:	20001cac 	.word	0x20001cac
 801931c:	2000213c 	.word	0x2000213c
 8019320:	20001ca8 	.word	0x20001ca8
 8019324:	20002190 	.word	0x20002190

08019328 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8019328:	b480      	push	{r7}
 801932a:	b083      	sub	sp, #12
 801932c:	af00      	add	r7, sp, #0
 801932e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8019330:	4b06      	ldr	r3, [pc, #24]	; (801934c <vTaskInternalSetTimeOutState+0x24>)
 8019332:	681a      	ldr	r2, [r3, #0]
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8019338:	4b05      	ldr	r3, [pc, #20]	; (8019350 <vTaskInternalSetTimeOutState+0x28>)
 801933a:	681a      	ldr	r2, [r3, #0]
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	605a      	str	r2, [r3, #4]
}
 8019340:	bf00      	nop
 8019342:	370c      	adds	r7, #12
 8019344:	46bd      	mov	sp, r7
 8019346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801934a:	4770      	bx	lr
 801934c:	20002194 	.word	0x20002194
 8019350:	20002180 	.word	0x20002180

08019354 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8019354:	b580      	push	{r7, lr}
 8019356:	b088      	sub	sp, #32
 8019358:	af00      	add	r7, sp, #0
 801935a:	6078      	str	r0, [r7, #4]
 801935c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	2b00      	cmp	r3, #0
 8019362:	d10a      	bne.n	801937a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8019364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019368:	f383 8811 	msr	BASEPRI, r3
 801936c:	f3bf 8f6f 	isb	sy
 8019370:	f3bf 8f4f 	dsb	sy
 8019374:	613b      	str	r3, [r7, #16]
}
 8019376:	bf00      	nop
 8019378:	e7fe      	b.n	8019378 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801937a:	683b      	ldr	r3, [r7, #0]
 801937c:	2b00      	cmp	r3, #0
 801937e:	d10a      	bne.n	8019396 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8019380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019384:	f383 8811 	msr	BASEPRI, r3
 8019388:	f3bf 8f6f 	isb	sy
 801938c:	f3bf 8f4f 	dsb	sy
 8019390:	60fb      	str	r3, [r7, #12]
}
 8019392:	bf00      	nop
 8019394:	e7fe      	b.n	8019394 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8019396:	f000 fe7d 	bl	801a094 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801939a:	4b1d      	ldr	r3, [pc, #116]	; (8019410 <xTaskCheckForTimeOut+0xbc>)
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	685b      	ldr	r3, [r3, #4]
 80193a4:	69ba      	ldr	r2, [r7, #24]
 80193a6:	1ad3      	subs	r3, r2, r3
 80193a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80193aa:	683b      	ldr	r3, [r7, #0]
 80193ac:	681b      	ldr	r3, [r3, #0]
 80193ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80193b2:	d102      	bne.n	80193ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80193b4:	2300      	movs	r3, #0
 80193b6:	61fb      	str	r3, [r7, #28]
 80193b8:	e023      	b.n	8019402 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	681a      	ldr	r2, [r3, #0]
 80193be:	4b15      	ldr	r3, [pc, #84]	; (8019414 <xTaskCheckForTimeOut+0xc0>)
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	429a      	cmp	r2, r3
 80193c4:	d007      	beq.n	80193d6 <xTaskCheckForTimeOut+0x82>
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	685b      	ldr	r3, [r3, #4]
 80193ca:	69ba      	ldr	r2, [r7, #24]
 80193cc:	429a      	cmp	r2, r3
 80193ce:	d302      	bcc.n	80193d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80193d0:	2301      	movs	r3, #1
 80193d2:	61fb      	str	r3, [r7, #28]
 80193d4:	e015      	b.n	8019402 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80193d6:	683b      	ldr	r3, [r7, #0]
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	697a      	ldr	r2, [r7, #20]
 80193dc:	429a      	cmp	r2, r3
 80193de:	d20b      	bcs.n	80193f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80193e0:	683b      	ldr	r3, [r7, #0]
 80193e2:	681a      	ldr	r2, [r3, #0]
 80193e4:	697b      	ldr	r3, [r7, #20]
 80193e6:	1ad2      	subs	r2, r2, r3
 80193e8:	683b      	ldr	r3, [r7, #0]
 80193ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80193ec:	6878      	ldr	r0, [r7, #4]
 80193ee:	f7ff ff9b 	bl	8019328 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80193f2:	2300      	movs	r3, #0
 80193f4:	61fb      	str	r3, [r7, #28]
 80193f6:	e004      	b.n	8019402 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80193f8:	683b      	ldr	r3, [r7, #0]
 80193fa:	2200      	movs	r2, #0
 80193fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80193fe:	2301      	movs	r3, #1
 8019400:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8019402:	f000 fe77 	bl	801a0f4 <vPortExitCritical>

	return xReturn;
 8019406:	69fb      	ldr	r3, [r7, #28]
}
 8019408:	4618      	mov	r0, r3
 801940a:	3720      	adds	r7, #32
 801940c:	46bd      	mov	sp, r7
 801940e:	bd80      	pop	{r7, pc}
 8019410:	20002180 	.word	0x20002180
 8019414:	20002194 	.word	0x20002194

08019418 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8019418:	b480      	push	{r7}
 801941a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801941c:	4b03      	ldr	r3, [pc, #12]	; (801942c <vTaskMissedYield+0x14>)
 801941e:	2201      	movs	r2, #1
 8019420:	601a      	str	r2, [r3, #0]
}
 8019422:	bf00      	nop
 8019424:	46bd      	mov	sp, r7
 8019426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801942a:	4770      	bx	lr
 801942c:	20002190 	.word	0x20002190

08019430 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8019430:	b580      	push	{r7, lr}
 8019432:	b082      	sub	sp, #8
 8019434:	af00      	add	r7, sp, #0
 8019436:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8019438:	f000 f852 	bl	80194e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801943c:	4b06      	ldr	r3, [pc, #24]	; (8019458 <prvIdleTask+0x28>)
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	2b01      	cmp	r3, #1
 8019442:	d9f9      	bls.n	8019438 <prvIdleTask+0x8>
			{
				taskYIELD();
 8019444:	4b05      	ldr	r3, [pc, #20]	; (801945c <prvIdleTask+0x2c>)
 8019446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801944a:	601a      	str	r2, [r3, #0]
 801944c:	f3bf 8f4f 	dsb	sy
 8019450:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8019454:	e7f0      	b.n	8019438 <prvIdleTask+0x8>
 8019456:	bf00      	nop
 8019458:	20001cac 	.word	0x20001cac
 801945c:	e000ed04 	.word	0xe000ed04

08019460 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8019460:	b580      	push	{r7, lr}
 8019462:	b082      	sub	sp, #8
 8019464:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019466:	2300      	movs	r3, #0
 8019468:	607b      	str	r3, [r7, #4]
 801946a:	e00c      	b.n	8019486 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801946c:	687a      	ldr	r2, [r7, #4]
 801946e:	4613      	mov	r3, r2
 8019470:	009b      	lsls	r3, r3, #2
 8019472:	4413      	add	r3, r2
 8019474:	009b      	lsls	r3, r3, #2
 8019476:	4a12      	ldr	r2, [pc, #72]	; (80194c0 <prvInitialiseTaskLists+0x60>)
 8019478:	4413      	add	r3, r2
 801947a:	4618      	mov	r0, r3
 801947c:	f7fe fc18 	bl	8017cb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	3301      	adds	r3, #1
 8019484:	607b      	str	r3, [r7, #4]
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	2b37      	cmp	r3, #55	; 0x37
 801948a:	d9ef      	bls.n	801946c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801948c:	480d      	ldr	r0, [pc, #52]	; (80194c4 <prvInitialiseTaskLists+0x64>)
 801948e:	f7fe fc0f 	bl	8017cb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8019492:	480d      	ldr	r0, [pc, #52]	; (80194c8 <prvInitialiseTaskLists+0x68>)
 8019494:	f7fe fc0c 	bl	8017cb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8019498:	480c      	ldr	r0, [pc, #48]	; (80194cc <prvInitialiseTaskLists+0x6c>)
 801949a:	f7fe fc09 	bl	8017cb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801949e:	480c      	ldr	r0, [pc, #48]	; (80194d0 <prvInitialiseTaskLists+0x70>)
 80194a0:	f7fe fc06 	bl	8017cb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80194a4:	480b      	ldr	r0, [pc, #44]	; (80194d4 <prvInitialiseTaskLists+0x74>)
 80194a6:	f7fe fc03 	bl	8017cb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80194aa:	4b0b      	ldr	r3, [pc, #44]	; (80194d8 <prvInitialiseTaskLists+0x78>)
 80194ac:	4a05      	ldr	r2, [pc, #20]	; (80194c4 <prvInitialiseTaskLists+0x64>)
 80194ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80194b0:	4b0a      	ldr	r3, [pc, #40]	; (80194dc <prvInitialiseTaskLists+0x7c>)
 80194b2:	4a05      	ldr	r2, [pc, #20]	; (80194c8 <prvInitialiseTaskLists+0x68>)
 80194b4:	601a      	str	r2, [r3, #0]
}
 80194b6:	bf00      	nop
 80194b8:	3708      	adds	r7, #8
 80194ba:	46bd      	mov	sp, r7
 80194bc:	bd80      	pop	{r7, pc}
 80194be:	bf00      	nop
 80194c0:	20001cac 	.word	0x20001cac
 80194c4:	2000210c 	.word	0x2000210c
 80194c8:	20002120 	.word	0x20002120
 80194cc:	2000213c 	.word	0x2000213c
 80194d0:	20002150 	.word	0x20002150
 80194d4:	20002168 	.word	0x20002168
 80194d8:	20002134 	.word	0x20002134
 80194dc:	20002138 	.word	0x20002138

080194e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80194e0:	b580      	push	{r7, lr}
 80194e2:	b082      	sub	sp, #8
 80194e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80194e6:	e019      	b.n	801951c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80194e8:	f000 fdd4 	bl	801a094 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80194ec:	4b10      	ldr	r3, [pc, #64]	; (8019530 <prvCheckTasksWaitingTermination+0x50>)
 80194ee:	68db      	ldr	r3, [r3, #12]
 80194f0:	68db      	ldr	r3, [r3, #12]
 80194f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	3304      	adds	r3, #4
 80194f8:	4618      	mov	r0, r3
 80194fa:	f7fe fc63 	bl	8017dc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80194fe:	4b0d      	ldr	r3, [pc, #52]	; (8019534 <prvCheckTasksWaitingTermination+0x54>)
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	3b01      	subs	r3, #1
 8019504:	4a0b      	ldr	r2, [pc, #44]	; (8019534 <prvCheckTasksWaitingTermination+0x54>)
 8019506:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8019508:	4b0b      	ldr	r3, [pc, #44]	; (8019538 <prvCheckTasksWaitingTermination+0x58>)
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	3b01      	subs	r3, #1
 801950e:	4a0a      	ldr	r2, [pc, #40]	; (8019538 <prvCheckTasksWaitingTermination+0x58>)
 8019510:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8019512:	f000 fdef 	bl	801a0f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8019516:	6878      	ldr	r0, [r7, #4]
 8019518:	f000 f810 	bl	801953c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801951c:	4b06      	ldr	r3, [pc, #24]	; (8019538 <prvCheckTasksWaitingTermination+0x58>)
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	2b00      	cmp	r3, #0
 8019522:	d1e1      	bne.n	80194e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8019524:	bf00      	nop
 8019526:	bf00      	nop
 8019528:	3708      	adds	r7, #8
 801952a:	46bd      	mov	sp, r7
 801952c:	bd80      	pop	{r7, pc}
 801952e:	bf00      	nop
 8019530:	20002150 	.word	0x20002150
 8019534:	2000217c 	.word	0x2000217c
 8019538:	20002164 	.word	0x20002164

0801953c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801953c:	b580      	push	{r7, lr}
 801953e:	b084      	sub	sp, #16
 8019540:	af00      	add	r7, sp, #0
 8019542:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801954a:	2b00      	cmp	r3, #0
 801954c:	d108      	bne.n	8019560 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019552:	4618      	mov	r0, r3
 8019554:	f000 ff8c 	bl	801a470 <vPortFree>
				vPortFree( pxTCB );
 8019558:	6878      	ldr	r0, [r7, #4]
 801955a:	f000 ff89 	bl	801a470 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801955e:	e018      	b.n	8019592 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8019566:	2b01      	cmp	r3, #1
 8019568:	d103      	bne.n	8019572 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801956a:	6878      	ldr	r0, [r7, #4]
 801956c:	f000 ff80 	bl	801a470 <vPortFree>
	}
 8019570:	e00f      	b.n	8019592 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8019578:	2b02      	cmp	r3, #2
 801957a:	d00a      	beq.n	8019592 <prvDeleteTCB+0x56>
	__asm volatile
 801957c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019580:	f383 8811 	msr	BASEPRI, r3
 8019584:	f3bf 8f6f 	isb	sy
 8019588:	f3bf 8f4f 	dsb	sy
 801958c:	60fb      	str	r3, [r7, #12]
}
 801958e:	bf00      	nop
 8019590:	e7fe      	b.n	8019590 <prvDeleteTCB+0x54>
	}
 8019592:	bf00      	nop
 8019594:	3710      	adds	r7, #16
 8019596:	46bd      	mov	sp, r7
 8019598:	bd80      	pop	{r7, pc}
	...

0801959c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801959c:	b480      	push	{r7}
 801959e:	b083      	sub	sp, #12
 80195a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80195a2:	4b0c      	ldr	r3, [pc, #48]	; (80195d4 <prvResetNextTaskUnblockTime+0x38>)
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	681b      	ldr	r3, [r3, #0]
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	d104      	bne.n	80195b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80195ac:	4b0a      	ldr	r3, [pc, #40]	; (80195d8 <prvResetNextTaskUnblockTime+0x3c>)
 80195ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80195b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80195b4:	e008      	b.n	80195c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80195b6:	4b07      	ldr	r3, [pc, #28]	; (80195d4 <prvResetNextTaskUnblockTime+0x38>)
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	68db      	ldr	r3, [r3, #12]
 80195bc:	68db      	ldr	r3, [r3, #12]
 80195be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	685b      	ldr	r3, [r3, #4]
 80195c4:	4a04      	ldr	r2, [pc, #16]	; (80195d8 <prvResetNextTaskUnblockTime+0x3c>)
 80195c6:	6013      	str	r3, [r2, #0]
}
 80195c8:	bf00      	nop
 80195ca:	370c      	adds	r7, #12
 80195cc:	46bd      	mov	sp, r7
 80195ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195d2:	4770      	bx	lr
 80195d4:	20002134 	.word	0x20002134
 80195d8:	2000219c 	.word	0x2000219c

080195dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80195dc:	b480      	push	{r7}
 80195de:	b083      	sub	sp, #12
 80195e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80195e2:	4b0b      	ldr	r3, [pc, #44]	; (8019610 <xTaskGetSchedulerState+0x34>)
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	d102      	bne.n	80195f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80195ea:	2301      	movs	r3, #1
 80195ec:	607b      	str	r3, [r7, #4]
 80195ee:	e008      	b.n	8019602 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80195f0:	4b08      	ldr	r3, [pc, #32]	; (8019614 <xTaskGetSchedulerState+0x38>)
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d102      	bne.n	80195fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80195f8:	2302      	movs	r3, #2
 80195fa:	607b      	str	r3, [r7, #4]
 80195fc:	e001      	b.n	8019602 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80195fe:	2300      	movs	r3, #0
 8019600:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8019602:	687b      	ldr	r3, [r7, #4]
	}
 8019604:	4618      	mov	r0, r3
 8019606:	370c      	adds	r7, #12
 8019608:	46bd      	mov	sp, r7
 801960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801960e:	4770      	bx	lr
 8019610:	20002188 	.word	0x20002188
 8019614:	200021a4 	.word	0x200021a4

08019618 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8019618:	b580      	push	{r7, lr}
 801961a:	b086      	sub	sp, #24
 801961c:	af00      	add	r7, sp, #0
 801961e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8019624:	2300      	movs	r3, #0
 8019626:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	2b00      	cmp	r3, #0
 801962c:	d056      	beq.n	80196dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801962e:	4b2e      	ldr	r3, [pc, #184]	; (80196e8 <xTaskPriorityDisinherit+0xd0>)
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	693a      	ldr	r2, [r7, #16]
 8019634:	429a      	cmp	r2, r3
 8019636:	d00a      	beq.n	801964e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8019638:	f04f 0350 	mov.w	r3, #80	; 0x50
 801963c:	f383 8811 	msr	BASEPRI, r3
 8019640:	f3bf 8f6f 	isb	sy
 8019644:	f3bf 8f4f 	dsb	sy
 8019648:	60fb      	str	r3, [r7, #12]
}
 801964a:	bf00      	nop
 801964c:	e7fe      	b.n	801964c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801964e:	693b      	ldr	r3, [r7, #16]
 8019650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019652:	2b00      	cmp	r3, #0
 8019654:	d10a      	bne.n	801966c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8019656:	f04f 0350 	mov.w	r3, #80	; 0x50
 801965a:	f383 8811 	msr	BASEPRI, r3
 801965e:	f3bf 8f6f 	isb	sy
 8019662:	f3bf 8f4f 	dsb	sy
 8019666:	60bb      	str	r3, [r7, #8]
}
 8019668:	bf00      	nop
 801966a:	e7fe      	b.n	801966a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801966c:	693b      	ldr	r3, [r7, #16]
 801966e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019670:	1e5a      	subs	r2, r3, #1
 8019672:	693b      	ldr	r3, [r7, #16]
 8019674:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8019676:	693b      	ldr	r3, [r7, #16]
 8019678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801967a:	693b      	ldr	r3, [r7, #16]
 801967c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801967e:	429a      	cmp	r2, r3
 8019680:	d02c      	beq.n	80196dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8019682:	693b      	ldr	r3, [r7, #16]
 8019684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019686:	2b00      	cmp	r3, #0
 8019688:	d128      	bne.n	80196dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801968a:	693b      	ldr	r3, [r7, #16]
 801968c:	3304      	adds	r3, #4
 801968e:	4618      	mov	r0, r3
 8019690:	f7fe fb98 	bl	8017dc4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8019694:	693b      	ldr	r3, [r7, #16]
 8019696:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019698:	693b      	ldr	r3, [r7, #16]
 801969a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801969c:	693b      	ldr	r3, [r7, #16]
 801969e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80196a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80196a4:	693b      	ldr	r3, [r7, #16]
 80196a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80196a8:	693b      	ldr	r3, [r7, #16]
 80196aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80196ac:	4b0f      	ldr	r3, [pc, #60]	; (80196ec <xTaskPriorityDisinherit+0xd4>)
 80196ae:	681b      	ldr	r3, [r3, #0]
 80196b0:	429a      	cmp	r2, r3
 80196b2:	d903      	bls.n	80196bc <xTaskPriorityDisinherit+0xa4>
 80196b4:	693b      	ldr	r3, [r7, #16]
 80196b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80196b8:	4a0c      	ldr	r2, [pc, #48]	; (80196ec <xTaskPriorityDisinherit+0xd4>)
 80196ba:	6013      	str	r3, [r2, #0]
 80196bc:	693b      	ldr	r3, [r7, #16]
 80196be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80196c0:	4613      	mov	r3, r2
 80196c2:	009b      	lsls	r3, r3, #2
 80196c4:	4413      	add	r3, r2
 80196c6:	009b      	lsls	r3, r3, #2
 80196c8:	4a09      	ldr	r2, [pc, #36]	; (80196f0 <xTaskPriorityDisinherit+0xd8>)
 80196ca:	441a      	add	r2, r3
 80196cc:	693b      	ldr	r3, [r7, #16]
 80196ce:	3304      	adds	r3, #4
 80196d0:	4619      	mov	r1, r3
 80196d2:	4610      	mov	r0, r2
 80196d4:	f7fe fb19 	bl	8017d0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80196d8:	2301      	movs	r3, #1
 80196da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80196dc:	697b      	ldr	r3, [r7, #20]
	}
 80196de:	4618      	mov	r0, r3
 80196e0:	3718      	adds	r7, #24
 80196e2:	46bd      	mov	sp, r7
 80196e4:	bd80      	pop	{r7, pc}
 80196e6:	bf00      	nop
 80196e8:	20001ca8 	.word	0x20001ca8
 80196ec:	20002184 	.word	0x20002184
 80196f0:	20001cac 	.word	0x20001cac

080196f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80196f4:	b580      	push	{r7, lr}
 80196f6:	b084      	sub	sp, #16
 80196f8:	af00      	add	r7, sp, #0
 80196fa:	6078      	str	r0, [r7, #4]
 80196fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80196fe:	4b21      	ldr	r3, [pc, #132]	; (8019784 <prvAddCurrentTaskToDelayedList+0x90>)
 8019700:	681b      	ldr	r3, [r3, #0]
 8019702:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019704:	4b20      	ldr	r3, [pc, #128]	; (8019788 <prvAddCurrentTaskToDelayedList+0x94>)
 8019706:	681b      	ldr	r3, [r3, #0]
 8019708:	3304      	adds	r3, #4
 801970a:	4618      	mov	r0, r3
 801970c:	f7fe fb5a 	bl	8017dc4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019716:	d10a      	bne.n	801972e <prvAddCurrentTaskToDelayedList+0x3a>
 8019718:	683b      	ldr	r3, [r7, #0]
 801971a:	2b00      	cmp	r3, #0
 801971c:	d007      	beq.n	801972e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801971e:	4b1a      	ldr	r3, [pc, #104]	; (8019788 <prvAddCurrentTaskToDelayedList+0x94>)
 8019720:	681b      	ldr	r3, [r3, #0]
 8019722:	3304      	adds	r3, #4
 8019724:	4619      	mov	r1, r3
 8019726:	4819      	ldr	r0, [pc, #100]	; (801978c <prvAddCurrentTaskToDelayedList+0x98>)
 8019728:	f7fe faef 	bl	8017d0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801972c:	e026      	b.n	801977c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801972e:	68fa      	ldr	r2, [r7, #12]
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	4413      	add	r3, r2
 8019734:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8019736:	4b14      	ldr	r3, [pc, #80]	; (8019788 <prvAddCurrentTaskToDelayedList+0x94>)
 8019738:	681b      	ldr	r3, [r3, #0]
 801973a:	68ba      	ldr	r2, [r7, #8]
 801973c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801973e:	68ba      	ldr	r2, [r7, #8]
 8019740:	68fb      	ldr	r3, [r7, #12]
 8019742:	429a      	cmp	r2, r3
 8019744:	d209      	bcs.n	801975a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019746:	4b12      	ldr	r3, [pc, #72]	; (8019790 <prvAddCurrentTaskToDelayedList+0x9c>)
 8019748:	681a      	ldr	r2, [r3, #0]
 801974a:	4b0f      	ldr	r3, [pc, #60]	; (8019788 <prvAddCurrentTaskToDelayedList+0x94>)
 801974c:	681b      	ldr	r3, [r3, #0]
 801974e:	3304      	adds	r3, #4
 8019750:	4619      	mov	r1, r3
 8019752:	4610      	mov	r0, r2
 8019754:	f7fe fafd 	bl	8017d52 <vListInsert>
}
 8019758:	e010      	b.n	801977c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801975a:	4b0e      	ldr	r3, [pc, #56]	; (8019794 <prvAddCurrentTaskToDelayedList+0xa0>)
 801975c:	681a      	ldr	r2, [r3, #0]
 801975e:	4b0a      	ldr	r3, [pc, #40]	; (8019788 <prvAddCurrentTaskToDelayedList+0x94>)
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	3304      	adds	r3, #4
 8019764:	4619      	mov	r1, r3
 8019766:	4610      	mov	r0, r2
 8019768:	f7fe faf3 	bl	8017d52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801976c:	4b0a      	ldr	r3, [pc, #40]	; (8019798 <prvAddCurrentTaskToDelayedList+0xa4>)
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	68ba      	ldr	r2, [r7, #8]
 8019772:	429a      	cmp	r2, r3
 8019774:	d202      	bcs.n	801977c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8019776:	4a08      	ldr	r2, [pc, #32]	; (8019798 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019778:	68bb      	ldr	r3, [r7, #8]
 801977a:	6013      	str	r3, [r2, #0]
}
 801977c:	bf00      	nop
 801977e:	3710      	adds	r7, #16
 8019780:	46bd      	mov	sp, r7
 8019782:	bd80      	pop	{r7, pc}
 8019784:	20002180 	.word	0x20002180
 8019788:	20001ca8 	.word	0x20001ca8
 801978c:	20002168 	.word	0x20002168
 8019790:	20002138 	.word	0x20002138
 8019794:	20002134 	.word	0x20002134
 8019798:	2000219c 	.word	0x2000219c

0801979c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801979c:	b580      	push	{r7, lr}
 801979e:	b08a      	sub	sp, #40	; 0x28
 80197a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80197a2:	2300      	movs	r3, #0
 80197a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80197a6:	f000 fb07 	bl	8019db8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80197aa:	4b1c      	ldr	r3, [pc, #112]	; (801981c <xTimerCreateTimerTask+0x80>)
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	d021      	beq.n	80197f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80197b2:	2300      	movs	r3, #0
 80197b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80197b6:	2300      	movs	r3, #0
 80197b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80197ba:	1d3a      	adds	r2, r7, #4
 80197bc:	f107 0108 	add.w	r1, r7, #8
 80197c0:	f107 030c 	add.w	r3, r7, #12
 80197c4:	4618      	mov	r0, r3
 80197c6:	f7fe fa59 	bl	8017c7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80197ca:	6879      	ldr	r1, [r7, #4]
 80197cc:	68bb      	ldr	r3, [r7, #8]
 80197ce:	68fa      	ldr	r2, [r7, #12]
 80197d0:	9202      	str	r2, [sp, #8]
 80197d2:	9301      	str	r3, [sp, #4]
 80197d4:	2302      	movs	r3, #2
 80197d6:	9300      	str	r3, [sp, #0]
 80197d8:	2300      	movs	r3, #0
 80197da:	460a      	mov	r2, r1
 80197dc:	4910      	ldr	r1, [pc, #64]	; (8019820 <xTimerCreateTimerTask+0x84>)
 80197de:	4811      	ldr	r0, [pc, #68]	; (8019824 <xTimerCreateTimerTask+0x88>)
 80197e0:	f7ff f806 	bl	80187f0 <xTaskCreateStatic>
 80197e4:	4603      	mov	r3, r0
 80197e6:	4a10      	ldr	r2, [pc, #64]	; (8019828 <xTimerCreateTimerTask+0x8c>)
 80197e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80197ea:	4b0f      	ldr	r3, [pc, #60]	; (8019828 <xTimerCreateTimerTask+0x8c>)
 80197ec:	681b      	ldr	r3, [r3, #0]
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d001      	beq.n	80197f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80197f2:	2301      	movs	r3, #1
 80197f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80197f6:	697b      	ldr	r3, [r7, #20]
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	d10a      	bne.n	8019812 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80197fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019800:	f383 8811 	msr	BASEPRI, r3
 8019804:	f3bf 8f6f 	isb	sy
 8019808:	f3bf 8f4f 	dsb	sy
 801980c:	613b      	str	r3, [r7, #16]
}
 801980e:	bf00      	nop
 8019810:	e7fe      	b.n	8019810 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8019812:	697b      	ldr	r3, [r7, #20]
}
 8019814:	4618      	mov	r0, r3
 8019816:	3718      	adds	r7, #24
 8019818:	46bd      	mov	sp, r7
 801981a:	bd80      	pop	{r7, pc}
 801981c:	200021d8 	.word	0x200021d8
 8019820:	080209dc 	.word	0x080209dc
 8019824:	08019961 	.word	0x08019961
 8019828:	200021dc 	.word	0x200021dc

0801982c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801982c:	b580      	push	{r7, lr}
 801982e:	b08a      	sub	sp, #40	; 0x28
 8019830:	af00      	add	r7, sp, #0
 8019832:	60f8      	str	r0, [r7, #12]
 8019834:	60b9      	str	r1, [r7, #8]
 8019836:	607a      	str	r2, [r7, #4]
 8019838:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801983a:	2300      	movs	r3, #0
 801983c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801983e:	68fb      	ldr	r3, [r7, #12]
 8019840:	2b00      	cmp	r3, #0
 8019842:	d10a      	bne.n	801985a <xTimerGenericCommand+0x2e>
	__asm volatile
 8019844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019848:	f383 8811 	msr	BASEPRI, r3
 801984c:	f3bf 8f6f 	isb	sy
 8019850:	f3bf 8f4f 	dsb	sy
 8019854:	623b      	str	r3, [r7, #32]
}
 8019856:	bf00      	nop
 8019858:	e7fe      	b.n	8019858 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801985a:	4b1a      	ldr	r3, [pc, #104]	; (80198c4 <xTimerGenericCommand+0x98>)
 801985c:	681b      	ldr	r3, [r3, #0]
 801985e:	2b00      	cmp	r3, #0
 8019860:	d02a      	beq.n	80198b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8019862:	68bb      	ldr	r3, [r7, #8]
 8019864:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801986a:	68fb      	ldr	r3, [r7, #12]
 801986c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801986e:	68bb      	ldr	r3, [r7, #8]
 8019870:	2b05      	cmp	r3, #5
 8019872:	dc18      	bgt.n	80198a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8019874:	f7ff feb2 	bl	80195dc <xTaskGetSchedulerState>
 8019878:	4603      	mov	r3, r0
 801987a:	2b02      	cmp	r3, #2
 801987c:	d109      	bne.n	8019892 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801987e:	4b11      	ldr	r3, [pc, #68]	; (80198c4 <xTimerGenericCommand+0x98>)
 8019880:	6818      	ldr	r0, [r3, #0]
 8019882:	f107 0110 	add.w	r1, r7, #16
 8019886:	2300      	movs	r3, #0
 8019888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801988a:	f7fe fbc9 	bl	8018020 <xQueueGenericSend>
 801988e:	6278      	str	r0, [r7, #36]	; 0x24
 8019890:	e012      	b.n	80198b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8019892:	4b0c      	ldr	r3, [pc, #48]	; (80198c4 <xTimerGenericCommand+0x98>)
 8019894:	6818      	ldr	r0, [r3, #0]
 8019896:	f107 0110 	add.w	r1, r7, #16
 801989a:	2300      	movs	r3, #0
 801989c:	2200      	movs	r2, #0
 801989e:	f7fe fbbf 	bl	8018020 <xQueueGenericSend>
 80198a2:	6278      	str	r0, [r7, #36]	; 0x24
 80198a4:	e008      	b.n	80198b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80198a6:	4b07      	ldr	r3, [pc, #28]	; (80198c4 <xTimerGenericCommand+0x98>)
 80198a8:	6818      	ldr	r0, [r3, #0]
 80198aa:	f107 0110 	add.w	r1, r7, #16
 80198ae:	2300      	movs	r3, #0
 80198b0:	683a      	ldr	r2, [r7, #0]
 80198b2:	f7fe fcb3 	bl	801821c <xQueueGenericSendFromISR>
 80198b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80198b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80198ba:	4618      	mov	r0, r3
 80198bc:	3728      	adds	r7, #40	; 0x28
 80198be:	46bd      	mov	sp, r7
 80198c0:	bd80      	pop	{r7, pc}
 80198c2:	bf00      	nop
 80198c4:	200021d8 	.word	0x200021d8

080198c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80198c8:	b580      	push	{r7, lr}
 80198ca:	b088      	sub	sp, #32
 80198cc:	af02      	add	r7, sp, #8
 80198ce:	6078      	str	r0, [r7, #4]
 80198d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80198d2:	4b22      	ldr	r3, [pc, #136]	; (801995c <prvProcessExpiredTimer+0x94>)
 80198d4:	681b      	ldr	r3, [r3, #0]
 80198d6:	68db      	ldr	r3, [r3, #12]
 80198d8:	68db      	ldr	r3, [r3, #12]
 80198da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80198dc:	697b      	ldr	r3, [r7, #20]
 80198de:	3304      	adds	r3, #4
 80198e0:	4618      	mov	r0, r3
 80198e2:	f7fe fa6f 	bl	8017dc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80198e6:	697b      	ldr	r3, [r7, #20]
 80198e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80198ec:	f003 0304 	and.w	r3, r3, #4
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	d022      	beq.n	801993a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80198f4:	697b      	ldr	r3, [r7, #20]
 80198f6:	699a      	ldr	r2, [r3, #24]
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	18d1      	adds	r1, r2, r3
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	683a      	ldr	r2, [r7, #0]
 8019900:	6978      	ldr	r0, [r7, #20]
 8019902:	f000 f8d1 	bl	8019aa8 <prvInsertTimerInActiveList>
 8019906:	4603      	mov	r3, r0
 8019908:	2b00      	cmp	r3, #0
 801990a:	d01f      	beq.n	801994c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801990c:	2300      	movs	r3, #0
 801990e:	9300      	str	r3, [sp, #0]
 8019910:	2300      	movs	r3, #0
 8019912:	687a      	ldr	r2, [r7, #4]
 8019914:	2100      	movs	r1, #0
 8019916:	6978      	ldr	r0, [r7, #20]
 8019918:	f7ff ff88 	bl	801982c <xTimerGenericCommand>
 801991c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801991e:	693b      	ldr	r3, [r7, #16]
 8019920:	2b00      	cmp	r3, #0
 8019922:	d113      	bne.n	801994c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8019924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019928:	f383 8811 	msr	BASEPRI, r3
 801992c:	f3bf 8f6f 	isb	sy
 8019930:	f3bf 8f4f 	dsb	sy
 8019934:	60fb      	str	r3, [r7, #12]
}
 8019936:	bf00      	nop
 8019938:	e7fe      	b.n	8019938 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801993a:	697b      	ldr	r3, [r7, #20]
 801993c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019940:	f023 0301 	bic.w	r3, r3, #1
 8019944:	b2da      	uxtb	r2, r3
 8019946:	697b      	ldr	r3, [r7, #20]
 8019948:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801994c:	697b      	ldr	r3, [r7, #20]
 801994e:	6a1b      	ldr	r3, [r3, #32]
 8019950:	6978      	ldr	r0, [r7, #20]
 8019952:	4798      	blx	r3
}
 8019954:	bf00      	nop
 8019956:	3718      	adds	r7, #24
 8019958:	46bd      	mov	sp, r7
 801995a:	bd80      	pop	{r7, pc}
 801995c:	200021d0 	.word	0x200021d0

08019960 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8019960:	b580      	push	{r7, lr}
 8019962:	b084      	sub	sp, #16
 8019964:	af00      	add	r7, sp, #0
 8019966:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019968:	f107 0308 	add.w	r3, r7, #8
 801996c:	4618      	mov	r0, r3
 801996e:	f000 f857 	bl	8019a20 <prvGetNextExpireTime>
 8019972:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019974:	68bb      	ldr	r3, [r7, #8]
 8019976:	4619      	mov	r1, r3
 8019978:	68f8      	ldr	r0, [r7, #12]
 801997a:	f000 f803 	bl	8019984 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801997e:	f000 f8d5 	bl	8019b2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019982:	e7f1      	b.n	8019968 <prvTimerTask+0x8>

08019984 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8019984:	b580      	push	{r7, lr}
 8019986:	b084      	sub	sp, #16
 8019988:	af00      	add	r7, sp, #0
 801998a:	6078      	str	r0, [r7, #4]
 801998c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801998e:	f7ff fa43 	bl	8018e18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019992:	f107 0308 	add.w	r3, r7, #8
 8019996:	4618      	mov	r0, r3
 8019998:	f000 f866 	bl	8019a68 <prvSampleTimeNow>
 801999c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801999e:	68bb      	ldr	r3, [r7, #8]
 80199a0:	2b00      	cmp	r3, #0
 80199a2:	d130      	bne.n	8019a06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80199a4:	683b      	ldr	r3, [r7, #0]
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d10a      	bne.n	80199c0 <prvProcessTimerOrBlockTask+0x3c>
 80199aa:	687a      	ldr	r2, [r7, #4]
 80199ac:	68fb      	ldr	r3, [r7, #12]
 80199ae:	429a      	cmp	r2, r3
 80199b0:	d806      	bhi.n	80199c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80199b2:	f7ff fa3f 	bl	8018e34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80199b6:	68f9      	ldr	r1, [r7, #12]
 80199b8:	6878      	ldr	r0, [r7, #4]
 80199ba:	f7ff ff85 	bl	80198c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80199be:	e024      	b.n	8019a0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80199c0:	683b      	ldr	r3, [r7, #0]
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d008      	beq.n	80199d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80199c6:	4b13      	ldr	r3, [pc, #76]	; (8019a14 <prvProcessTimerOrBlockTask+0x90>)
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	681b      	ldr	r3, [r3, #0]
 80199cc:	2b00      	cmp	r3, #0
 80199ce:	d101      	bne.n	80199d4 <prvProcessTimerOrBlockTask+0x50>
 80199d0:	2301      	movs	r3, #1
 80199d2:	e000      	b.n	80199d6 <prvProcessTimerOrBlockTask+0x52>
 80199d4:	2300      	movs	r3, #0
 80199d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80199d8:	4b0f      	ldr	r3, [pc, #60]	; (8019a18 <prvProcessTimerOrBlockTask+0x94>)
 80199da:	6818      	ldr	r0, [r3, #0]
 80199dc:	687a      	ldr	r2, [r7, #4]
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	1ad3      	subs	r3, r2, r3
 80199e2:	683a      	ldr	r2, [r7, #0]
 80199e4:	4619      	mov	r1, r3
 80199e6:	f7fe fecf 	bl	8018788 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80199ea:	f7ff fa23 	bl	8018e34 <xTaskResumeAll>
 80199ee:	4603      	mov	r3, r0
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d10a      	bne.n	8019a0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80199f4:	4b09      	ldr	r3, [pc, #36]	; (8019a1c <prvProcessTimerOrBlockTask+0x98>)
 80199f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80199fa:	601a      	str	r2, [r3, #0]
 80199fc:	f3bf 8f4f 	dsb	sy
 8019a00:	f3bf 8f6f 	isb	sy
}
 8019a04:	e001      	b.n	8019a0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8019a06:	f7ff fa15 	bl	8018e34 <xTaskResumeAll>
}
 8019a0a:	bf00      	nop
 8019a0c:	3710      	adds	r7, #16
 8019a0e:	46bd      	mov	sp, r7
 8019a10:	bd80      	pop	{r7, pc}
 8019a12:	bf00      	nop
 8019a14:	200021d4 	.word	0x200021d4
 8019a18:	200021d8 	.word	0x200021d8
 8019a1c:	e000ed04 	.word	0xe000ed04

08019a20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019a20:	b480      	push	{r7}
 8019a22:	b085      	sub	sp, #20
 8019a24:	af00      	add	r7, sp, #0
 8019a26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019a28:	4b0e      	ldr	r3, [pc, #56]	; (8019a64 <prvGetNextExpireTime+0x44>)
 8019a2a:	681b      	ldr	r3, [r3, #0]
 8019a2c:	681b      	ldr	r3, [r3, #0]
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d101      	bne.n	8019a36 <prvGetNextExpireTime+0x16>
 8019a32:	2201      	movs	r2, #1
 8019a34:	e000      	b.n	8019a38 <prvGetNextExpireTime+0x18>
 8019a36:	2200      	movs	r2, #0
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	d105      	bne.n	8019a50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019a44:	4b07      	ldr	r3, [pc, #28]	; (8019a64 <prvGetNextExpireTime+0x44>)
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	68db      	ldr	r3, [r3, #12]
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	60fb      	str	r3, [r7, #12]
 8019a4e:	e001      	b.n	8019a54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019a50:	2300      	movs	r3, #0
 8019a52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019a54:	68fb      	ldr	r3, [r7, #12]
}
 8019a56:	4618      	mov	r0, r3
 8019a58:	3714      	adds	r7, #20
 8019a5a:	46bd      	mov	sp, r7
 8019a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a60:	4770      	bx	lr
 8019a62:	bf00      	nop
 8019a64:	200021d0 	.word	0x200021d0

08019a68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8019a68:	b580      	push	{r7, lr}
 8019a6a:	b084      	sub	sp, #16
 8019a6c:	af00      	add	r7, sp, #0
 8019a6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8019a70:	f7ff fa7e 	bl	8018f70 <xTaskGetTickCount>
 8019a74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8019a76:	4b0b      	ldr	r3, [pc, #44]	; (8019aa4 <prvSampleTimeNow+0x3c>)
 8019a78:	681b      	ldr	r3, [r3, #0]
 8019a7a:	68fa      	ldr	r2, [r7, #12]
 8019a7c:	429a      	cmp	r2, r3
 8019a7e:	d205      	bcs.n	8019a8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8019a80:	f000 f936 	bl	8019cf0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	2201      	movs	r2, #1
 8019a88:	601a      	str	r2, [r3, #0]
 8019a8a:	e002      	b.n	8019a92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	2200      	movs	r2, #0
 8019a90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8019a92:	4a04      	ldr	r2, [pc, #16]	; (8019aa4 <prvSampleTimeNow+0x3c>)
 8019a94:	68fb      	ldr	r3, [r7, #12]
 8019a96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8019a98:	68fb      	ldr	r3, [r7, #12]
}
 8019a9a:	4618      	mov	r0, r3
 8019a9c:	3710      	adds	r7, #16
 8019a9e:	46bd      	mov	sp, r7
 8019aa0:	bd80      	pop	{r7, pc}
 8019aa2:	bf00      	nop
 8019aa4:	200021e0 	.word	0x200021e0

08019aa8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019aa8:	b580      	push	{r7, lr}
 8019aaa:	b086      	sub	sp, #24
 8019aac:	af00      	add	r7, sp, #0
 8019aae:	60f8      	str	r0, [r7, #12]
 8019ab0:	60b9      	str	r1, [r7, #8]
 8019ab2:	607a      	str	r2, [r7, #4]
 8019ab4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8019ab6:	2300      	movs	r3, #0
 8019ab8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8019aba:	68fb      	ldr	r3, [r7, #12]
 8019abc:	68ba      	ldr	r2, [r7, #8]
 8019abe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019ac0:	68fb      	ldr	r3, [r7, #12]
 8019ac2:	68fa      	ldr	r2, [r7, #12]
 8019ac4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8019ac6:	68ba      	ldr	r2, [r7, #8]
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	429a      	cmp	r2, r3
 8019acc:	d812      	bhi.n	8019af4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019ace:	687a      	ldr	r2, [r7, #4]
 8019ad0:	683b      	ldr	r3, [r7, #0]
 8019ad2:	1ad2      	subs	r2, r2, r3
 8019ad4:	68fb      	ldr	r3, [r7, #12]
 8019ad6:	699b      	ldr	r3, [r3, #24]
 8019ad8:	429a      	cmp	r2, r3
 8019ada:	d302      	bcc.n	8019ae2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019adc:	2301      	movs	r3, #1
 8019ade:	617b      	str	r3, [r7, #20]
 8019ae0:	e01b      	b.n	8019b1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8019ae2:	4b10      	ldr	r3, [pc, #64]	; (8019b24 <prvInsertTimerInActiveList+0x7c>)
 8019ae4:	681a      	ldr	r2, [r3, #0]
 8019ae6:	68fb      	ldr	r3, [r7, #12]
 8019ae8:	3304      	adds	r3, #4
 8019aea:	4619      	mov	r1, r3
 8019aec:	4610      	mov	r0, r2
 8019aee:	f7fe f930 	bl	8017d52 <vListInsert>
 8019af2:	e012      	b.n	8019b1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019af4:	687a      	ldr	r2, [r7, #4]
 8019af6:	683b      	ldr	r3, [r7, #0]
 8019af8:	429a      	cmp	r2, r3
 8019afa:	d206      	bcs.n	8019b0a <prvInsertTimerInActiveList+0x62>
 8019afc:	68ba      	ldr	r2, [r7, #8]
 8019afe:	683b      	ldr	r3, [r7, #0]
 8019b00:	429a      	cmp	r2, r3
 8019b02:	d302      	bcc.n	8019b0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019b04:	2301      	movs	r3, #1
 8019b06:	617b      	str	r3, [r7, #20]
 8019b08:	e007      	b.n	8019b1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019b0a:	4b07      	ldr	r3, [pc, #28]	; (8019b28 <prvInsertTimerInActiveList+0x80>)
 8019b0c:	681a      	ldr	r2, [r3, #0]
 8019b0e:	68fb      	ldr	r3, [r7, #12]
 8019b10:	3304      	adds	r3, #4
 8019b12:	4619      	mov	r1, r3
 8019b14:	4610      	mov	r0, r2
 8019b16:	f7fe f91c 	bl	8017d52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8019b1a:	697b      	ldr	r3, [r7, #20]
}
 8019b1c:	4618      	mov	r0, r3
 8019b1e:	3718      	adds	r7, #24
 8019b20:	46bd      	mov	sp, r7
 8019b22:	bd80      	pop	{r7, pc}
 8019b24:	200021d4 	.word	0x200021d4
 8019b28:	200021d0 	.word	0x200021d0

08019b2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019b2c:	b580      	push	{r7, lr}
 8019b2e:	b08e      	sub	sp, #56	; 0x38
 8019b30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019b32:	e0ca      	b.n	8019cca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	da18      	bge.n	8019b6c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8019b3a:	1d3b      	adds	r3, r7, #4
 8019b3c:	3304      	adds	r3, #4
 8019b3e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8019b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d10a      	bne.n	8019b5c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8019b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b4a:	f383 8811 	msr	BASEPRI, r3
 8019b4e:	f3bf 8f6f 	isb	sy
 8019b52:	f3bf 8f4f 	dsb	sy
 8019b56:	61fb      	str	r3, [r7, #28]
}
 8019b58:	bf00      	nop
 8019b5a:	e7fe      	b.n	8019b5a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8019b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b5e:	681b      	ldr	r3, [r3, #0]
 8019b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019b62:	6850      	ldr	r0, [r2, #4]
 8019b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019b66:	6892      	ldr	r2, [r2, #8]
 8019b68:	4611      	mov	r1, r2
 8019b6a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	f2c0 80aa 	blt.w	8019cc8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019b74:	68fb      	ldr	r3, [r7, #12]
 8019b76:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b7a:	695b      	ldr	r3, [r3, #20]
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	d004      	beq.n	8019b8a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b82:	3304      	adds	r3, #4
 8019b84:	4618      	mov	r0, r3
 8019b86:	f7fe f91d 	bl	8017dc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019b8a:	463b      	mov	r3, r7
 8019b8c:	4618      	mov	r0, r3
 8019b8e:	f7ff ff6b 	bl	8019a68 <prvSampleTimeNow>
 8019b92:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	2b09      	cmp	r3, #9
 8019b98:	f200 8097 	bhi.w	8019cca <prvProcessReceivedCommands+0x19e>
 8019b9c:	a201      	add	r2, pc, #4	; (adr r2, 8019ba4 <prvProcessReceivedCommands+0x78>)
 8019b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ba2:	bf00      	nop
 8019ba4:	08019bcd 	.word	0x08019bcd
 8019ba8:	08019bcd 	.word	0x08019bcd
 8019bac:	08019bcd 	.word	0x08019bcd
 8019bb0:	08019c41 	.word	0x08019c41
 8019bb4:	08019c55 	.word	0x08019c55
 8019bb8:	08019c9f 	.word	0x08019c9f
 8019bbc:	08019bcd 	.word	0x08019bcd
 8019bc0:	08019bcd 	.word	0x08019bcd
 8019bc4:	08019c41 	.word	0x08019c41
 8019bc8:	08019c55 	.word	0x08019c55
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019bd2:	f043 0301 	orr.w	r3, r3, #1
 8019bd6:	b2da      	uxtb	r2, r3
 8019bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8019bde:	68ba      	ldr	r2, [r7, #8]
 8019be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019be2:	699b      	ldr	r3, [r3, #24]
 8019be4:	18d1      	adds	r1, r2, r3
 8019be6:	68bb      	ldr	r3, [r7, #8]
 8019be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019bec:	f7ff ff5c 	bl	8019aa8 <prvInsertTimerInActiveList>
 8019bf0:	4603      	mov	r3, r0
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	d069      	beq.n	8019cca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bf8:	6a1b      	ldr	r3, [r3, #32]
 8019bfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019bfc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019c04:	f003 0304 	and.w	r3, r3, #4
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d05e      	beq.n	8019cca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019c0c:	68ba      	ldr	r2, [r7, #8]
 8019c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c10:	699b      	ldr	r3, [r3, #24]
 8019c12:	441a      	add	r2, r3
 8019c14:	2300      	movs	r3, #0
 8019c16:	9300      	str	r3, [sp, #0]
 8019c18:	2300      	movs	r3, #0
 8019c1a:	2100      	movs	r1, #0
 8019c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019c1e:	f7ff fe05 	bl	801982c <xTimerGenericCommand>
 8019c22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019c24:	6a3b      	ldr	r3, [r7, #32]
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	d14f      	bne.n	8019cca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8019c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c2e:	f383 8811 	msr	BASEPRI, r3
 8019c32:	f3bf 8f6f 	isb	sy
 8019c36:	f3bf 8f4f 	dsb	sy
 8019c3a:	61bb      	str	r3, [r7, #24]
}
 8019c3c:	bf00      	nop
 8019c3e:	e7fe      	b.n	8019c3e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019c46:	f023 0301 	bic.w	r3, r3, #1
 8019c4a:	b2da      	uxtb	r2, r3
 8019c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8019c52:	e03a      	b.n	8019cca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019c5a:	f043 0301 	orr.w	r3, r3, #1
 8019c5e:	b2da      	uxtb	r2, r3
 8019c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019c66:	68ba      	ldr	r2, [r7, #8]
 8019c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c6a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c6e:	699b      	ldr	r3, [r3, #24]
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	d10a      	bne.n	8019c8a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8019c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c78:	f383 8811 	msr	BASEPRI, r3
 8019c7c:	f3bf 8f6f 	isb	sy
 8019c80:	f3bf 8f4f 	dsb	sy
 8019c84:	617b      	str	r3, [r7, #20]
}
 8019c86:	bf00      	nop
 8019c88:	e7fe      	b.n	8019c88 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8019c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c8c:	699a      	ldr	r2, [r3, #24]
 8019c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c90:	18d1      	adds	r1, r2, r3
 8019c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019c98:	f7ff ff06 	bl	8019aa8 <prvInsertTimerInActiveList>
					break;
 8019c9c:	e015      	b.n	8019cca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8019c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019ca4:	f003 0302 	and.w	r3, r3, #2
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d103      	bne.n	8019cb4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8019cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019cae:	f000 fbdf 	bl	801a470 <vPortFree>
 8019cb2:	e00a      	b.n	8019cca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019cba:	f023 0301 	bic.w	r3, r3, #1
 8019cbe:	b2da      	uxtb	r2, r3
 8019cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8019cc6:	e000      	b.n	8019cca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8019cc8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019cca:	4b08      	ldr	r3, [pc, #32]	; (8019cec <prvProcessReceivedCommands+0x1c0>)
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	1d39      	adds	r1, r7, #4
 8019cd0:	2200      	movs	r2, #0
 8019cd2:	4618      	mov	r0, r3
 8019cd4:	f7fe fb3e 	bl	8018354 <xQueueReceive>
 8019cd8:	4603      	mov	r3, r0
 8019cda:	2b00      	cmp	r3, #0
 8019cdc:	f47f af2a 	bne.w	8019b34 <prvProcessReceivedCommands+0x8>
	}
}
 8019ce0:	bf00      	nop
 8019ce2:	bf00      	nop
 8019ce4:	3730      	adds	r7, #48	; 0x30
 8019ce6:	46bd      	mov	sp, r7
 8019ce8:	bd80      	pop	{r7, pc}
 8019cea:	bf00      	nop
 8019cec:	200021d8 	.word	0x200021d8

08019cf0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019cf0:	b580      	push	{r7, lr}
 8019cf2:	b088      	sub	sp, #32
 8019cf4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019cf6:	e048      	b.n	8019d8a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019cf8:	4b2d      	ldr	r3, [pc, #180]	; (8019db0 <prvSwitchTimerLists+0xc0>)
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	68db      	ldr	r3, [r3, #12]
 8019cfe:	681b      	ldr	r3, [r3, #0]
 8019d00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019d02:	4b2b      	ldr	r3, [pc, #172]	; (8019db0 <prvSwitchTimerLists+0xc0>)
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	68db      	ldr	r3, [r3, #12]
 8019d08:	68db      	ldr	r3, [r3, #12]
 8019d0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019d0c:	68fb      	ldr	r3, [r7, #12]
 8019d0e:	3304      	adds	r3, #4
 8019d10:	4618      	mov	r0, r3
 8019d12:	f7fe f857 	bl	8017dc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019d16:	68fb      	ldr	r3, [r7, #12]
 8019d18:	6a1b      	ldr	r3, [r3, #32]
 8019d1a:	68f8      	ldr	r0, [r7, #12]
 8019d1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019d1e:	68fb      	ldr	r3, [r7, #12]
 8019d20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019d24:	f003 0304 	and.w	r3, r3, #4
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d02e      	beq.n	8019d8a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019d2c:	68fb      	ldr	r3, [r7, #12]
 8019d2e:	699b      	ldr	r3, [r3, #24]
 8019d30:	693a      	ldr	r2, [r7, #16]
 8019d32:	4413      	add	r3, r2
 8019d34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019d36:	68ba      	ldr	r2, [r7, #8]
 8019d38:	693b      	ldr	r3, [r7, #16]
 8019d3a:	429a      	cmp	r2, r3
 8019d3c:	d90e      	bls.n	8019d5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019d3e:	68fb      	ldr	r3, [r7, #12]
 8019d40:	68ba      	ldr	r2, [r7, #8]
 8019d42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019d44:	68fb      	ldr	r3, [r7, #12]
 8019d46:	68fa      	ldr	r2, [r7, #12]
 8019d48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019d4a:	4b19      	ldr	r3, [pc, #100]	; (8019db0 <prvSwitchTimerLists+0xc0>)
 8019d4c:	681a      	ldr	r2, [r3, #0]
 8019d4e:	68fb      	ldr	r3, [r7, #12]
 8019d50:	3304      	adds	r3, #4
 8019d52:	4619      	mov	r1, r3
 8019d54:	4610      	mov	r0, r2
 8019d56:	f7fd fffc 	bl	8017d52 <vListInsert>
 8019d5a:	e016      	b.n	8019d8a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019d5c:	2300      	movs	r3, #0
 8019d5e:	9300      	str	r3, [sp, #0]
 8019d60:	2300      	movs	r3, #0
 8019d62:	693a      	ldr	r2, [r7, #16]
 8019d64:	2100      	movs	r1, #0
 8019d66:	68f8      	ldr	r0, [r7, #12]
 8019d68:	f7ff fd60 	bl	801982c <xTimerGenericCommand>
 8019d6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	d10a      	bne.n	8019d8a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d78:	f383 8811 	msr	BASEPRI, r3
 8019d7c:	f3bf 8f6f 	isb	sy
 8019d80:	f3bf 8f4f 	dsb	sy
 8019d84:	603b      	str	r3, [r7, #0]
}
 8019d86:	bf00      	nop
 8019d88:	e7fe      	b.n	8019d88 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019d8a:	4b09      	ldr	r3, [pc, #36]	; (8019db0 <prvSwitchTimerLists+0xc0>)
 8019d8c:	681b      	ldr	r3, [r3, #0]
 8019d8e:	681b      	ldr	r3, [r3, #0]
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	d1b1      	bne.n	8019cf8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019d94:	4b06      	ldr	r3, [pc, #24]	; (8019db0 <prvSwitchTimerLists+0xc0>)
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8019d9a:	4b06      	ldr	r3, [pc, #24]	; (8019db4 <prvSwitchTimerLists+0xc4>)
 8019d9c:	681b      	ldr	r3, [r3, #0]
 8019d9e:	4a04      	ldr	r2, [pc, #16]	; (8019db0 <prvSwitchTimerLists+0xc0>)
 8019da0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019da2:	4a04      	ldr	r2, [pc, #16]	; (8019db4 <prvSwitchTimerLists+0xc4>)
 8019da4:	697b      	ldr	r3, [r7, #20]
 8019da6:	6013      	str	r3, [r2, #0]
}
 8019da8:	bf00      	nop
 8019daa:	3718      	adds	r7, #24
 8019dac:	46bd      	mov	sp, r7
 8019dae:	bd80      	pop	{r7, pc}
 8019db0:	200021d0 	.word	0x200021d0
 8019db4:	200021d4 	.word	0x200021d4

08019db8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019db8:	b580      	push	{r7, lr}
 8019dba:	b082      	sub	sp, #8
 8019dbc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019dbe:	f000 f969 	bl	801a094 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019dc2:	4b15      	ldr	r3, [pc, #84]	; (8019e18 <prvCheckForValidListAndQueue+0x60>)
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	d120      	bne.n	8019e0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8019dca:	4814      	ldr	r0, [pc, #80]	; (8019e1c <prvCheckForValidListAndQueue+0x64>)
 8019dcc:	f7fd ff70 	bl	8017cb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019dd0:	4813      	ldr	r0, [pc, #76]	; (8019e20 <prvCheckForValidListAndQueue+0x68>)
 8019dd2:	f7fd ff6d 	bl	8017cb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8019dd6:	4b13      	ldr	r3, [pc, #76]	; (8019e24 <prvCheckForValidListAndQueue+0x6c>)
 8019dd8:	4a10      	ldr	r2, [pc, #64]	; (8019e1c <prvCheckForValidListAndQueue+0x64>)
 8019dda:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019ddc:	4b12      	ldr	r3, [pc, #72]	; (8019e28 <prvCheckForValidListAndQueue+0x70>)
 8019dde:	4a10      	ldr	r2, [pc, #64]	; (8019e20 <prvCheckForValidListAndQueue+0x68>)
 8019de0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8019de2:	2300      	movs	r3, #0
 8019de4:	9300      	str	r3, [sp, #0]
 8019de6:	4b11      	ldr	r3, [pc, #68]	; (8019e2c <prvCheckForValidListAndQueue+0x74>)
 8019de8:	4a11      	ldr	r2, [pc, #68]	; (8019e30 <prvCheckForValidListAndQueue+0x78>)
 8019dea:	2110      	movs	r1, #16
 8019dec:	200a      	movs	r0, #10
 8019dee:	f7fe f87b 	bl	8017ee8 <xQueueGenericCreateStatic>
 8019df2:	4603      	mov	r3, r0
 8019df4:	4a08      	ldr	r2, [pc, #32]	; (8019e18 <prvCheckForValidListAndQueue+0x60>)
 8019df6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019df8:	4b07      	ldr	r3, [pc, #28]	; (8019e18 <prvCheckForValidListAndQueue+0x60>)
 8019dfa:	681b      	ldr	r3, [r3, #0]
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	d005      	beq.n	8019e0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019e00:	4b05      	ldr	r3, [pc, #20]	; (8019e18 <prvCheckForValidListAndQueue+0x60>)
 8019e02:	681b      	ldr	r3, [r3, #0]
 8019e04:	490b      	ldr	r1, [pc, #44]	; (8019e34 <prvCheckForValidListAndQueue+0x7c>)
 8019e06:	4618      	mov	r0, r3
 8019e08:	f7fe fc94 	bl	8018734 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019e0c:	f000 f972 	bl	801a0f4 <vPortExitCritical>
}
 8019e10:	bf00      	nop
 8019e12:	46bd      	mov	sp, r7
 8019e14:	bd80      	pop	{r7, pc}
 8019e16:	bf00      	nop
 8019e18:	200021d8 	.word	0x200021d8
 8019e1c:	200021a8 	.word	0x200021a8
 8019e20:	200021bc 	.word	0x200021bc
 8019e24:	200021d0 	.word	0x200021d0
 8019e28:	200021d4 	.word	0x200021d4
 8019e2c:	20002284 	.word	0x20002284
 8019e30:	200021e4 	.word	0x200021e4
 8019e34:	080209e4 	.word	0x080209e4

08019e38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019e38:	b480      	push	{r7}
 8019e3a:	b085      	sub	sp, #20
 8019e3c:	af00      	add	r7, sp, #0
 8019e3e:	60f8      	str	r0, [r7, #12]
 8019e40:	60b9      	str	r1, [r7, #8]
 8019e42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019e44:	68fb      	ldr	r3, [r7, #12]
 8019e46:	3b04      	subs	r3, #4
 8019e48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8019e4a:	68fb      	ldr	r3, [r7, #12]
 8019e4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8019e50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019e52:	68fb      	ldr	r3, [r7, #12]
 8019e54:	3b04      	subs	r3, #4
 8019e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019e58:	68bb      	ldr	r3, [r7, #8]
 8019e5a:	f023 0201 	bic.w	r2, r3, #1
 8019e5e:	68fb      	ldr	r3, [r7, #12]
 8019e60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019e62:	68fb      	ldr	r3, [r7, #12]
 8019e64:	3b04      	subs	r3, #4
 8019e66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019e68:	4a0c      	ldr	r2, [pc, #48]	; (8019e9c <pxPortInitialiseStack+0x64>)
 8019e6a:	68fb      	ldr	r3, [r7, #12]
 8019e6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8019e6e:	68fb      	ldr	r3, [r7, #12]
 8019e70:	3b14      	subs	r3, #20
 8019e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019e74:	687a      	ldr	r2, [r7, #4]
 8019e76:	68fb      	ldr	r3, [r7, #12]
 8019e78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8019e7a:	68fb      	ldr	r3, [r7, #12]
 8019e7c:	3b04      	subs	r3, #4
 8019e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019e80:	68fb      	ldr	r3, [r7, #12]
 8019e82:	f06f 0202 	mvn.w	r2, #2
 8019e86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019e88:	68fb      	ldr	r3, [r7, #12]
 8019e8a:	3b20      	subs	r3, #32
 8019e8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8019e8e:	68fb      	ldr	r3, [r7, #12]
}
 8019e90:	4618      	mov	r0, r3
 8019e92:	3714      	adds	r7, #20
 8019e94:	46bd      	mov	sp, r7
 8019e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e9a:	4770      	bx	lr
 8019e9c:	08019ea1 	.word	0x08019ea1

08019ea0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019ea0:	b480      	push	{r7}
 8019ea2:	b085      	sub	sp, #20
 8019ea4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019ea6:	2300      	movs	r3, #0
 8019ea8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019eaa:	4b12      	ldr	r3, [pc, #72]	; (8019ef4 <prvTaskExitError+0x54>)
 8019eac:	681b      	ldr	r3, [r3, #0]
 8019eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019eb2:	d00a      	beq.n	8019eca <prvTaskExitError+0x2a>
	__asm volatile
 8019eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019eb8:	f383 8811 	msr	BASEPRI, r3
 8019ebc:	f3bf 8f6f 	isb	sy
 8019ec0:	f3bf 8f4f 	dsb	sy
 8019ec4:	60fb      	str	r3, [r7, #12]
}
 8019ec6:	bf00      	nop
 8019ec8:	e7fe      	b.n	8019ec8 <prvTaskExitError+0x28>
	__asm volatile
 8019eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ece:	f383 8811 	msr	BASEPRI, r3
 8019ed2:	f3bf 8f6f 	isb	sy
 8019ed6:	f3bf 8f4f 	dsb	sy
 8019eda:	60bb      	str	r3, [r7, #8]
}
 8019edc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8019ede:	bf00      	nop
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	d0fc      	beq.n	8019ee0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019ee6:	bf00      	nop
 8019ee8:	bf00      	nop
 8019eea:	3714      	adds	r7, #20
 8019eec:	46bd      	mov	sp, r7
 8019eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ef2:	4770      	bx	lr
 8019ef4:	20000088 	.word	0x20000088
	...

08019f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019f00:	4b07      	ldr	r3, [pc, #28]	; (8019f20 <pxCurrentTCBConst2>)
 8019f02:	6819      	ldr	r1, [r3, #0]
 8019f04:	6808      	ldr	r0, [r1, #0]
 8019f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f0a:	f380 8809 	msr	PSP, r0
 8019f0e:	f3bf 8f6f 	isb	sy
 8019f12:	f04f 0000 	mov.w	r0, #0
 8019f16:	f380 8811 	msr	BASEPRI, r0
 8019f1a:	4770      	bx	lr
 8019f1c:	f3af 8000 	nop.w

08019f20 <pxCurrentTCBConst2>:
 8019f20:	20001ca8 	.word	0x20001ca8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019f24:	bf00      	nop
 8019f26:	bf00      	nop

08019f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019f28:	4808      	ldr	r0, [pc, #32]	; (8019f4c <prvPortStartFirstTask+0x24>)
 8019f2a:	6800      	ldr	r0, [r0, #0]
 8019f2c:	6800      	ldr	r0, [r0, #0]
 8019f2e:	f380 8808 	msr	MSP, r0
 8019f32:	f04f 0000 	mov.w	r0, #0
 8019f36:	f380 8814 	msr	CONTROL, r0
 8019f3a:	b662      	cpsie	i
 8019f3c:	b661      	cpsie	f
 8019f3e:	f3bf 8f4f 	dsb	sy
 8019f42:	f3bf 8f6f 	isb	sy
 8019f46:	df00      	svc	0
 8019f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8019f4a:	bf00      	nop
 8019f4c:	e000ed08 	.word	0xe000ed08

08019f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019f50:	b580      	push	{r7, lr}
 8019f52:	b086      	sub	sp, #24
 8019f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019f56:	4b46      	ldr	r3, [pc, #280]	; (801a070 <xPortStartScheduler+0x120>)
 8019f58:	681b      	ldr	r3, [r3, #0]
 8019f5a:	4a46      	ldr	r2, [pc, #280]	; (801a074 <xPortStartScheduler+0x124>)
 8019f5c:	4293      	cmp	r3, r2
 8019f5e:	d10a      	bne.n	8019f76 <xPortStartScheduler+0x26>
	__asm volatile
 8019f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f64:	f383 8811 	msr	BASEPRI, r3
 8019f68:	f3bf 8f6f 	isb	sy
 8019f6c:	f3bf 8f4f 	dsb	sy
 8019f70:	613b      	str	r3, [r7, #16]
}
 8019f72:	bf00      	nop
 8019f74:	e7fe      	b.n	8019f74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019f76:	4b3e      	ldr	r3, [pc, #248]	; (801a070 <xPortStartScheduler+0x120>)
 8019f78:	681b      	ldr	r3, [r3, #0]
 8019f7a:	4a3f      	ldr	r2, [pc, #252]	; (801a078 <xPortStartScheduler+0x128>)
 8019f7c:	4293      	cmp	r3, r2
 8019f7e:	d10a      	bne.n	8019f96 <xPortStartScheduler+0x46>
	__asm volatile
 8019f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f84:	f383 8811 	msr	BASEPRI, r3
 8019f88:	f3bf 8f6f 	isb	sy
 8019f8c:	f3bf 8f4f 	dsb	sy
 8019f90:	60fb      	str	r3, [r7, #12]
}
 8019f92:	bf00      	nop
 8019f94:	e7fe      	b.n	8019f94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019f96:	4b39      	ldr	r3, [pc, #228]	; (801a07c <xPortStartScheduler+0x12c>)
 8019f98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8019f9a:	697b      	ldr	r3, [r7, #20]
 8019f9c:	781b      	ldrb	r3, [r3, #0]
 8019f9e:	b2db      	uxtb	r3, r3
 8019fa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019fa2:	697b      	ldr	r3, [r7, #20]
 8019fa4:	22ff      	movs	r2, #255	; 0xff
 8019fa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019fa8:	697b      	ldr	r3, [r7, #20]
 8019faa:	781b      	ldrb	r3, [r3, #0]
 8019fac:	b2db      	uxtb	r3, r3
 8019fae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019fb0:	78fb      	ldrb	r3, [r7, #3]
 8019fb2:	b2db      	uxtb	r3, r3
 8019fb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019fb8:	b2da      	uxtb	r2, r3
 8019fba:	4b31      	ldr	r3, [pc, #196]	; (801a080 <xPortStartScheduler+0x130>)
 8019fbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8019fbe:	4b31      	ldr	r3, [pc, #196]	; (801a084 <xPortStartScheduler+0x134>)
 8019fc0:	2207      	movs	r2, #7
 8019fc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019fc4:	e009      	b.n	8019fda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019fc6:	4b2f      	ldr	r3, [pc, #188]	; (801a084 <xPortStartScheduler+0x134>)
 8019fc8:	681b      	ldr	r3, [r3, #0]
 8019fca:	3b01      	subs	r3, #1
 8019fcc:	4a2d      	ldr	r2, [pc, #180]	; (801a084 <xPortStartScheduler+0x134>)
 8019fce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019fd0:	78fb      	ldrb	r3, [r7, #3]
 8019fd2:	b2db      	uxtb	r3, r3
 8019fd4:	005b      	lsls	r3, r3, #1
 8019fd6:	b2db      	uxtb	r3, r3
 8019fd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019fda:	78fb      	ldrb	r3, [r7, #3]
 8019fdc:	b2db      	uxtb	r3, r3
 8019fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019fe2:	2b80      	cmp	r3, #128	; 0x80
 8019fe4:	d0ef      	beq.n	8019fc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019fe6:	4b27      	ldr	r3, [pc, #156]	; (801a084 <xPortStartScheduler+0x134>)
 8019fe8:	681b      	ldr	r3, [r3, #0]
 8019fea:	f1c3 0307 	rsb	r3, r3, #7
 8019fee:	2b04      	cmp	r3, #4
 8019ff0:	d00a      	beq.n	801a008 <xPortStartScheduler+0xb8>
	__asm volatile
 8019ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ff6:	f383 8811 	msr	BASEPRI, r3
 8019ffa:	f3bf 8f6f 	isb	sy
 8019ffe:	f3bf 8f4f 	dsb	sy
 801a002:	60bb      	str	r3, [r7, #8]
}
 801a004:	bf00      	nop
 801a006:	e7fe      	b.n	801a006 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801a008:	4b1e      	ldr	r3, [pc, #120]	; (801a084 <xPortStartScheduler+0x134>)
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	021b      	lsls	r3, r3, #8
 801a00e:	4a1d      	ldr	r2, [pc, #116]	; (801a084 <xPortStartScheduler+0x134>)
 801a010:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801a012:	4b1c      	ldr	r3, [pc, #112]	; (801a084 <xPortStartScheduler+0x134>)
 801a014:	681b      	ldr	r3, [r3, #0]
 801a016:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801a01a:	4a1a      	ldr	r2, [pc, #104]	; (801a084 <xPortStartScheduler+0x134>)
 801a01c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	b2da      	uxtb	r2, r3
 801a022:	697b      	ldr	r3, [r7, #20]
 801a024:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a026:	4b18      	ldr	r3, [pc, #96]	; (801a088 <xPortStartScheduler+0x138>)
 801a028:	681b      	ldr	r3, [r3, #0]
 801a02a:	4a17      	ldr	r2, [pc, #92]	; (801a088 <xPortStartScheduler+0x138>)
 801a02c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801a030:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a032:	4b15      	ldr	r3, [pc, #84]	; (801a088 <xPortStartScheduler+0x138>)
 801a034:	681b      	ldr	r3, [r3, #0]
 801a036:	4a14      	ldr	r2, [pc, #80]	; (801a088 <xPortStartScheduler+0x138>)
 801a038:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801a03c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801a03e:	f000 f8dd 	bl	801a1fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801a042:	4b12      	ldr	r3, [pc, #72]	; (801a08c <xPortStartScheduler+0x13c>)
 801a044:	2200      	movs	r2, #0
 801a046:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801a048:	f000 f8fc 	bl	801a244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801a04c:	4b10      	ldr	r3, [pc, #64]	; (801a090 <xPortStartScheduler+0x140>)
 801a04e:	681b      	ldr	r3, [r3, #0]
 801a050:	4a0f      	ldr	r2, [pc, #60]	; (801a090 <xPortStartScheduler+0x140>)
 801a052:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801a056:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801a058:	f7ff ff66 	bl	8019f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801a05c:	f7ff f852 	bl	8019104 <vTaskSwitchContext>
	prvTaskExitError();
 801a060:	f7ff ff1e 	bl	8019ea0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801a064:	2300      	movs	r3, #0
}
 801a066:	4618      	mov	r0, r3
 801a068:	3718      	adds	r7, #24
 801a06a:	46bd      	mov	sp, r7
 801a06c:	bd80      	pop	{r7, pc}
 801a06e:	bf00      	nop
 801a070:	e000ed00 	.word	0xe000ed00
 801a074:	410fc271 	.word	0x410fc271
 801a078:	410fc270 	.word	0x410fc270
 801a07c:	e000e400 	.word	0xe000e400
 801a080:	200022d4 	.word	0x200022d4
 801a084:	200022d8 	.word	0x200022d8
 801a088:	e000ed20 	.word	0xe000ed20
 801a08c:	20000088 	.word	0x20000088
 801a090:	e000ef34 	.word	0xe000ef34

0801a094 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801a094:	b480      	push	{r7}
 801a096:	b083      	sub	sp, #12
 801a098:	af00      	add	r7, sp, #0
	__asm volatile
 801a09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a09e:	f383 8811 	msr	BASEPRI, r3
 801a0a2:	f3bf 8f6f 	isb	sy
 801a0a6:	f3bf 8f4f 	dsb	sy
 801a0aa:	607b      	str	r3, [r7, #4]
}
 801a0ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801a0ae:	4b0f      	ldr	r3, [pc, #60]	; (801a0ec <vPortEnterCritical+0x58>)
 801a0b0:	681b      	ldr	r3, [r3, #0]
 801a0b2:	3301      	adds	r3, #1
 801a0b4:	4a0d      	ldr	r2, [pc, #52]	; (801a0ec <vPortEnterCritical+0x58>)
 801a0b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801a0b8:	4b0c      	ldr	r3, [pc, #48]	; (801a0ec <vPortEnterCritical+0x58>)
 801a0ba:	681b      	ldr	r3, [r3, #0]
 801a0bc:	2b01      	cmp	r3, #1
 801a0be:	d10f      	bne.n	801a0e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801a0c0:	4b0b      	ldr	r3, [pc, #44]	; (801a0f0 <vPortEnterCritical+0x5c>)
 801a0c2:	681b      	ldr	r3, [r3, #0]
 801a0c4:	b2db      	uxtb	r3, r3
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	d00a      	beq.n	801a0e0 <vPortEnterCritical+0x4c>
	__asm volatile
 801a0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0ce:	f383 8811 	msr	BASEPRI, r3
 801a0d2:	f3bf 8f6f 	isb	sy
 801a0d6:	f3bf 8f4f 	dsb	sy
 801a0da:	603b      	str	r3, [r7, #0]
}
 801a0dc:	bf00      	nop
 801a0de:	e7fe      	b.n	801a0de <vPortEnterCritical+0x4a>
	}
}
 801a0e0:	bf00      	nop
 801a0e2:	370c      	adds	r7, #12
 801a0e4:	46bd      	mov	sp, r7
 801a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ea:	4770      	bx	lr
 801a0ec:	20000088 	.word	0x20000088
 801a0f0:	e000ed04 	.word	0xe000ed04

0801a0f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801a0f4:	b480      	push	{r7}
 801a0f6:	b083      	sub	sp, #12
 801a0f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801a0fa:	4b12      	ldr	r3, [pc, #72]	; (801a144 <vPortExitCritical+0x50>)
 801a0fc:	681b      	ldr	r3, [r3, #0]
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	d10a      	bne.n	801a118 <vPortExitCritical+0x24>
	__asm volatile
 801a102:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a106:	f383 8811 	msr	BASEPRI, r3
 801a10a:	f3bf 8f6f 	isb	sy
 801a10e:	f3bf 8f4f 	dsb	sy
 801a112:	607b      	str	r3, [r7, #4]
}
 801a114:	bf00      	nop
 801a116:	e7fe      	b.n	801a116 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801a118:	4b0a      	ldr	r3, [pc, #40]	; (801a144 <vPortExitCritical+0x50>)
 801a11a:	681b      	ldr	r3, [r3, #0]
 801a11c:	3b01      	subs	r3, #1
 801a11e:	4a09      	ldr	r2, [pc, #36]	; (801a144 <vPortExitCritical+0x50>)
 801a120:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801a122:	4b08      	ldr	r3, [pc, #32]	; (801a144 <vPortExitCritical+0x50>)
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	2b00      	cmp	r3, #0
 801a128:	d105      	bne.n	801a136 <vPortExitCritical+0x42>
 801a12a:	2300      	movs	r3, #0
 801a12c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a12e:	683b      	ldr	r3, [r7, #0]
 801a130:	f383 8811 	msr	BASEPRI, r3
}
 801a134:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801a136:	bf00      	nop
 801a138:	370c      	adds	r7, #12
 801a13a:	46bd      	mov	sp, r7
 801a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a140:	4770      	bx	lr
 801a142:	bf00      	nop
 801a144:	20000088 	.word	0x20000088
	...

0801a150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801a150:	f3ef 8009 	mrs	r0, PSP
 801a154:	f3bf 8f6f 	isb	sy
 801a158:	4b15      	ldr	r3, [pc, #84]	; (801a1b0 <pxCurrentTCBConst>)
 801a15a:	681a      	ldr	r2, [r3, #0]
 801a15c:	f01e 0f10 	tst.w	lr, #16
 801a160:	bf08      	it	eq
 801a162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801a166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a16a:	6010      	str	r0, [r2, #0]
 801a16c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801a170:	f04f 0050 	mov.w	r0, #80	; 0x50
 801a174:	f380 8811 	msr	BASEPRI, r0
 801a178:	f3bf 8f4f 	dsb	sy
 801a17c:	f3bf 8f6f 	isb	sy
 801a180:	f7fe ffc0 	bl	8019104 <vTaskSwitchContext>
 801a184:	f04f 0000 	mov.w	r0, #0
 801a188:	f380 8811 	msr	BASEPRI, r0
 801a18c:	bc09      	pop	{r0, r3}
 801a18e:	6819      	ldr	r1, [r3, #0]
 801a190:	6808      	ldr	r0, [r1, #0]
 801a192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a196:	f01e 0f10 	tst.w	lr, #16
 801a19a:	bf08      	it	eq
 801a19c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801a1a0:	f380 8809 	msr	PSP, r0
 801a1a4:	f3bf 8f6f 	isb	sy
 801a1a8:	4770      	bx	lr
 801a1aa:	bf00      	nop
 801a1ac:	f3af 8000 	nop.w

0801a1b0 <pxCurrentTCBConst>:
 801a1b0:	20001ca8 	.word	0x20001ca8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801a1b4:	bf00      	nop
 801a1b6:	bf00      	nop

0801a1b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801a1b8:	b580      	push	{r7, lr}
 801a1ba:	b082      	sub	sp, #8
 801a1bc:	af00      	add	r7, sp, #0
	__asm volatile
 801a1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1c2:	f383 8811 	msr	BASEPRI, r3
 801a1c6:	f3bf 8f6f 	isb	sy
 801a1ca:	f3bf 8f4f 	dsb	sy
 801a1ce:	607b      	str	r3, [r7, #4]
}
 801a1d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801a1d2:	f7fe fedd 	bl	8018f90 <xTaskIncrementTick>
 801a1d6:	4603      	mov	r3, r0
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	d003      	beq.n	801a1e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a1dc:	4b06      	ldr	r3, [pc, #24]	; (801a1f8 <xPortSysTickHandler+0x40>)
 801a1de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a1e2:	601a      	str	r2, [r3, #0]
 801a1e4:	2300      	movs	r3, #0
 801a1e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a1e8:	683b      	ldr	r3, [r7, #0]
 801a1ea:	f383 8811 	msr	BASEPRI, r3
}
 801a1ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801a1f0:	bf00      	nop
 801a1f2:	3708      	adds	r7, #8
 801a1f4:	46bd      	mov	sp, r7
 801a1f6:	bd80      	pop	{r7, pc}
 801a1f8:	e000ed04 	.word	0xe000ed04

0801a1fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801a1fc:	b480      	push	{r7}
 801a1fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801a200:	4b0b      	ldr	r3, [pc, #44]	; (801a230 <vPortSetupTimerInterrupt+0x34>)
 801a202:	2200      	movs	r2, #0
 801a204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801a206:	4b0b      	ldr	r3, [pc, #44]	; (801a234 <vPortSetupTimerInterrupt+0x38>)
 801a208:	2200      	movs	r2, #0
 801a20a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801a20c:	4b0a      	ldr	r3, [pc, #40]	; (801a238 <vPortSetupTimerInterrupt+0x3c>)
 801a20e:	681b      	ldr	r3, [r3, #0]
 801a210:	4a0a      	ldr	r2, [pc, #40]	; (801a23c <vPortSetupTimerInterrupt+0x40>)
 801a212:	fba2 2303 	umull	r2, r3, r2, r3
 801a216:	099b      	lsrs	r3, r3, #6
 801a218:	4a09      	ldr	r2, [pc, #36]	; (801a240 <vPortSetupTimerInterrupt+0x44>)
 801a21a:	3b01      	subs	r3, #1
 801a21c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801a21e:	4b04      	ldr	r3, [pc, #16]	; (801a230 <vPortSetupTimerInterrupt+0x34>)
 801a220:	2207      	movs	r2, #7
 801a222:	601a      	str	r2, [r3, #0]
}
 801a224:	bf00      	nop
 801a226:	46bd      	mov	sp, r7
 801a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a22c:	4770      	bx	lr
 801a22e:	bf00      	nop
 801a230:	e000e010 	.word	0xe000e010
 801a234:	e000e018 	.word	0xe000e018
 801a238:	2000001c 	.word	0x2000001c
 801a23c:	10624dd3 	.word	0x10624dd3
 801a240:	e000e014 	.word	0xe000e014

0801a244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801a244:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801a254 <vPortEnableVFP+0x10>
 801a248:	6801      	ldr	r1, [r0, #0]
 801a24a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801a24e:	6001      	str	r1, [r0, #0]
 801a250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801a252:	bf00      	nop
 801a254:	e000ed88 	.word	0xe000ed88

0801a258 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801a258:	b480      	push	{r7}
 801a25a:	b085      	sub	sp, #20
 801a25c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801a25e:	f3ef 8305 	mrs	r3, IPSR
 801a262:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801a264:	68fb      	ldr	r3, [r7, #12]
 801a266:	2b0f      	cmp	r3, #15
 801a268:	d914      	bls.n	801a294 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801a26a:	4a17      	ldr	r2, [pc, #92]	; (801a2c8 <vPortValidateInterruptPriority+0x70>)
 801a26c:	68fb      	ldr	r3, [r7, #12]
 801a26e:	4413      	add	r3, r2
 801a270:	781b      	ldrb	r3, [r3, #0]
 801a272:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801a274:	4b15      	ldr	r3, [pc, #84]	; (801a2cc <vPortValidateInterruptPriority+0x74>)
 801a276:	781b      	ldrb	r3, [r3, #0]
 801a278:	7afa      	ldrb	r2, [r7, #11]
 801a27a:	429a      	cmp	r2, r3
 801a27c:	d20a      	bcs.n	801a294 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801a27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a282:	f383 8811 	msr	BASEPRI, r3
 801a286:	f3bf 8f6f 	isb	sy
 801a28a:	f3bf 8f4f 	dsb	sy
 801a28e:	607b      	str	r3, [r7, #4]
}
 801a290:	bf00      	nop
 801a292:	e7fe      	b.n	801a292 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801a294:	4b0e      	ldr	r3, [pc, #56]	; (801a2d0 <vPortValidateInterruptPriority+0x78>)
 801a296:	681b      	ldr	r3, [r3, #0]
 801a298:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801a29c:	4b0d      	ldr	r3, [pc, #52]	; (801a2d4 <vPortValidateInterruptPriority+0x7c>)
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	429a      	cmp	r2, r3
 801a2a2:	d90a      	bls.n	801a2ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801a2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2a8:	f383 8811 	msr	BASEPRI, r3
 801a2ac:	f3bf 8f6f 	isb	sy
 801a2b0:	f3bf 8f4f 	dsb	sy
 801a2b4:	603b      	str	r3, [r7, #0]
}
 801a2b6:	bf00      	nop
 801a2b8:	e7fe      	b.n	801a2b8 <vPortValidateInterruptPriority+0x60>
	}
 801a2ba:	bf00      	nop
 801a2bc:	3714      	adds	r7, #20
 801a2be:	46bd      	mov	sp, r7
 801a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2c4:	4770      	bx	lr
 801a2c6:	bf00      	nop
 801a2c8:	e000e3f0 	.word	0xe000e3f0
 801a2cc:	200022d4 	.word	0x200022d4
 801a2d0:	e000ed0c 	.word	0xe000ed0c
 801a2d4:	200022d8 	.word	0x200022d8

0801a2d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801a2d8:	b580      	push	{r7, lr}
 801a2da:	b08a      	sub	sp, #40	; 0x28
 801a2dc:	af00      	add	r7, sp, #0
 801a2de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801a2e0:	2300      	movs	r3, #0
 801a2e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801a2e4:	f7fe fd98 	bl	8018e18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801a2e8:	4b5b      	ldr	r3, [pc, #364]	; (801a458 <pvPortMalloc+0x180>)
 801a2ea:	681b      	ldr	r3, [r3, #0]
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	d101      	bne.n	801a2f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801a2f0:	f000 f920 	bl	801a534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a2f4:	4b59      	ldr	r3, [pc, #356]	; (801a45c <pvPortMalloc+0x184>)
 801a2f6:	681a      	ldr	r2, [r3, #0]
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	4013      	ands	r3, r2
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	f040 8093 	bne.w	801a428 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	2b00      	cmp	r3, #0
 801a306:	d01d      	beq.n	801a344 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801a308:	2208      	movs	r2, #8
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	4413      	add	r3, r2
 801a30e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	f003 0307 	and.w	r3, r3, #7
 801a316:	2b00      	cmp	r3, #0
 801a318:	d014      	beq.n	801a344 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a31a:	687b      	ldr	r3, [r7, #4]
 801a31c:	f023 0307 	bic.w	r3, r3, #7
 801a320:	3308      	adds	r3, #8
 801a322:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	f003 0307 	and.w	r3, r3, #7
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	d00a      	beq.n	801a344 <pvPortMalloc+0x6c>
	__asm volatile
 801a32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a332:	f383 8811 	msr	BASEPRI, r3
 801a336:	f3bf 8f6f 	isb	sy
 801a33a:	f3bf 8f4f 	dsb	sy
 801a33e:	617b      	str	r3, [r7, #20]
}
 801a340:	bf00      	nop
 801a342:	e7fe      	b.n	801a342 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	2b00      	cmp	r3, #0
 801a348:	d06e      	beq.n	801a428 <pvPortMalloc+0x150>
 801a34a:	4b45      	ldr	r3, [pc, #276]	; (801a460 <pvPortMalloc+0x188>)
 801a34c:	681b      	ldr	r3, [r3, #0]
 801a34e:	687a      	ldr	r2, [r7, #4]
 801a350:	429a      	cmp	r2, r3
 801a352:	d869      	bhi.n	801a428 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801a354:	4b43      	ldr	r3, [pc, #268]	; (801a464 <pvPortMalloc+0x18c>)
 801a356:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801a358:	4b42      	ldr	r3, [pc, #264]	; (801a464 <pvPortMalloc+0x18c>)
 801a35a:	681b      	ldr	r3, [r3, #0]
 801a35c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a35e:	e004      	b.n	801a36a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801a360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a362:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801a364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a366:	681b      	ldr	r3, [r3, #0]
 801a368:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a36c:	685b      	ldr	r3, [r3, #4]
 801a36e:	687a      	ldr	r2, [r7, #4]
 801a370:	429a      	cmp	r2, r3
 801a372:	d903      	bls.n	801a37c <pvPortMalloc+0xa4>
 801a374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a376:	681b      	ldr	r3, [r3, #0]
 801a378:	2b00      	cmp	r3, #0
 801a37a:	d1f1      	bne.n	801a360 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801a37c:	4b36      	ldr	r3, [pc, #216]	; (801a458 <pvPortMalloc+0x180>)
 801a37e:	681b      	ldr	r3, [r3, #0]
 801a380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a382:	429a      	cmp	r2, r3
 801a384:	d050      	beq.n	801a428 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801a386:	6a3b      	ldr	r3, [r7, #32]
 801a388:	681b      	ldr	r3, [r3, #0]
 801a38a:	2208      	movs	r2, #8
 801a38c:	4413      	add	r3, r2
 801a38e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801a390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a392:	681a      	ldr	r2, [r3, #0]
 801a394:	6a3b      	ldr	r3, [r7, #32]
 801a396:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801a398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a39a:	685a      	ldr	r2, [r3, #4]
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	1ad2      	subs	r2, r2, r3
 801a3a0:	2308      	movs	r3, #8
 801a3a2:	005b      	lsls	r3, r3, #1
 801a3a4:	429a      	cmp	r2, r3
 801a3a6:	d91f      	bls.n	801a3e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801a3a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	4413      	add	r3, r2
 801a3ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a3b0:	69bb      	ldr	r3, [r7, #24]
 801a3b2:	f003 0307 	and.w	r3, r3, #7
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	d00a      	beq.n	801a3d0 <pvPortMalloc+0xf8>
	__asm volatile
 801a3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3be:	f383 8811 	msr	BASEPRI, r3
 801a3c2:	f3bf 8f6f 	isb	sy
 801a3c6:	f3bf 8f4f 	dsb	sy
 801a3ca:	613b      	str	r3, [r7, #16]
}
 801a3cc:	bf00      	nop
 801a3ce:	e7fe      	b.n	801a3ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3d2:	685a      	ldr	r2, [r3, #4]
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	1ad2      	subs	r2, r2, r3
 801a3d8:	69bb      	ldr	r3, [r7, #24]
 801a3da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3de:	687a      	ldr	r2, [r7, #4]
 801a3e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a3e2:	69b8      	ldr	r0, [r7, #24]
 801a3e4:	f000 f908 	bl	801a5f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a3e8:	4b1d      	ldr	r3, [pc, #116]	; (801a460 <pvPortMalloc+0x188>)
 801a3ea:	681a      	ldr	r2, [r3, #0]
 801a3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3ee:	685b      	ldr	r3, [r3, #4]
 801a3f0:	1ad3      	subs	r3, r2, r3
 801a3f2:	4a1b      	ldr	r2, [pc, #108]	; (801a460 <pvPortMalloc+0x188>)
 801a3f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a3f6:	4b1a      	ldr	r3, [pc, #104]	; (801a460 <pvPortMalloc+0x188>)
 801a3f8:	681a      	ldr	r2, [r3, #0]
 801a3fa:	4b1b      	ldr	r3, [pc, #108]	; (801a468 <pvPortMalloc+0x190>)
 801a3fc:	681b      	ldr	r3, [r3, #0]
 801a3fe:	429a      	cmp	r2, r3
 801a400:	d203      	bcs.n	801a40a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a402:	4b17      	ldr	r3, [pc, #92]	; (801a460 <pvPortMalloc+0x188>)
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	4a18      	ldr	r2, [pc, #96]	; (801a468 <pvPortMalloc+0x190>)
 801a408:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a40c:	685a      	ldr	r2, [r3, #4]
 801a40e:	4b13      	ldr	r3, [pc, #76]	; (801a45c <pvPortMalloc+0x184>)
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	431a      	orrs	r2, r3
 801a414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a416:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a41a:	2200      	movs	r2, #0
 801a41c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801a41e:	4b13      	ldr	r3, [pc, #76]	; (801a46c <pvPortMalloc+0x194>)
 801a420:	681b      	ldr	r3, [r3, #0]
 801a422:	3301      	adds	r3, #1
 801a424:	4a11      	ldr	r2, [pc, #68]	; (801a46c <pvPortMalloc+0x194>)
 801a426:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801a428:	f7fe fd04 	bl	8018e34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a42c:	69fb      	ldr	r3, [r7, #28]
 801a42e:	f003 0307 	and.w	r3, r3, #7
 801a432:	2b00      	cmp	r3, #0
 801a434:	d00a      	beq.n	801a44c <pvPortMalloc+0x174>
	__asm volatile
 801a436:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a43a:	f383 8811 	msr	BASEPRI, r3
 801a43e:	f3bf 8f6f 	isb	sy
 801a442:	f3bf 8f4f 	dsb	sy
 801a446:	60fb      	str	r3, [r7, #12]
}
 801a448:	bf00      	nop
 801a44a:	e7fe      	b.n	801a44a <pvPortMalloc+0x172>
	return pvReturn;
 801a44c:	69fb      	ldr	r3, [r7, #28]
}
 801a44e:	4618      	mov	r0, r3
 801a450:	3728      	adds	r7, #40	; 0x28
 801a452:	46bd      	mov	sp, r7
 801a454:	bd80      	pop	{r7, pc}
 801a456:	bf00      	nop
 801a458:	20005ee4 	.word	0x20005ee4
 801a45c:	20005ef8 	.word	0x20005ef8
 801a460:	20005ee8 	.word	0x20005ee8
 801a464:	20005edc 	.word	0x20005edc
 801a468:	20005eec 	.word	0x20005eec
 801a46c:	20005ef0 	.word	0x20005ef0

0801a470 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801a470:	b580      	push	{r7, lr}
 801a472:	b086      	sub	sp, #24
 801a474:	af00      	add	r7, sp, #0
 801a476:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	2b00      	cmp	r3, #0
 801a480:	d04d      	beq.n	801a51e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801a482:	2308      	movs	r3, #8
 801a484:	425b      	negs	r3, r3
 801a486:	697a      	ldr	r2, [r7, #20]
 801a488:	4413      	add	r3, r2
 801a48a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801a48c:	697b      	ldr	r3, [r7, #20]
 801a48e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a490:	693b      	ldr	r3, [r7, #16]
 801a492:	685a      	ldr	r2, [r3, #4]
 801a494:	4b24      	ldr	r3, [pc, #144]	; (801a528 <vPortFree+0xb8>)
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	4013      	ands	r3, r2
 801a49a:	2b00      	cmp	r3, #0
 801a49c:	d10a      	bne.n	801a4b4 <vPortFree+0x44>
	__asm volatile
 801a49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4a2:	f383 8811 	msr	BASEPRI, r3
 801a4a6:	f3bf 8f6f 	isb	sy
 801a4aa:	f3bf 8f4f 	dsb	sy
 801a4ae:	60fb      	str	r3, [r7, #12]
}
 801a4b0:	bf00      	nop
 801a4b2:	e7fe      	b.n	801a4b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a4b4:	693b      	ldr	r3, [r7, #16]
 801a4b6:	681b      	ldr	r3, [r3, #0]
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d00a      	beq.n	801a4d2 <vPortFree+0x62>
	__asm volatile
 801a4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4c0:	f383 8811 	msr	BASEPRI, r3
 801a4c4:	f3bf 8f6f 	isb	sy
 801a4c8:	f3bf 8f4f 	dsb	sy
 801a4cc:	60bb      	str	r3, [r7, #8]
}
 801a4ce:	bf00      	nop
 801a4d0:	e7fe      	b.n	801a4d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801a4d2:	693b      	ldr	r3, [r7, #16]
 801a4d4:	685a      	ldr	r2, [r3, #4]
 801a4d6:	4b14      	ldr	r3, [pc, #80]	; (801a528 <vPortFree+0xb8>)
 801a4d8:	681b      	ldr	r3, [r3, #0]
 801a4da:	4013      	ands	r3, r2
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	d01e      	beq.n	801a51e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801a4e0:	693b      	ldr	r3, [r7, #16]
 801a4e2:	681b      	ldr	r3, [r3, #0]
 801a4e4:	2b00      	cmp	r3, #0
 801a4e6:	d11a      	bne.n	801a51e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a4e8:	693b      	ldr	r3, [r7, #16]
 801a4ea:	685a      	ldr	r2, [r3, #4]
 801a4ec:	4b0e      	ldr	r3, [pc, #56]	; (801a528 <vPortFree+0xb8>)
 801a4ee:	681b      	ldr	r3, [r3, #0]
 801a4f0:	43db      	mvns	r3, r3
 801a4f2:	401a      	ands	r2, r3
 801a4f4:	693b      	ldr	r3, [r7, #16]
 801a4f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801a4f8:	f7fe fc8e 	bl	8018e18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a4fc:	693b      	ldr	r3, [r7, #16]
 801a4fe:	685a      	ldr	r2, [r3, #4]
 801a500:	4b0a      	ldr	r3, [pc, #40]	; (801a52c <vPortFree+0xbc>)
 801a502:	681b      	ldr	r3, [r3, #0]
 801a504:	4413      	add	r3, r2
 801a506:	4a09      	ldr	r2, [pc, #36]	; (801a52c <vPortFree+0xbc>)
 801a508:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a50a:	6938      	ldr	r0, [r7, #16]
 801a50c:	f000 f874 	bl	801a5f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801a510:	4b07      	ldr	r3, [pc, #28]	; (801a530 <vPortFree+0xc0>)
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	3301      	adds	r3, #1
 801a516:	4a06      	ldr	r2, [pc, #24]	; (801a530 <vPortFree+0xc0>)
 801a518:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801a51a:	f7fe fc8b 	bl	8018e34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801a51e:	bf00      	nop
 801a520:	3718      	adds	r7, #24
 801a522:	46bd      	mov	sp, r7
 801a524:	bd80      	pop	{r7, pc}
 801a526:	bf00      	nop
 801a528:	20005ef8 	.word	0x20005ef8
 801a52c:	20005ee8 	.word	0x20005ee8
 801a530:	20005ef4 	.word	0x20005ef4

0801a534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801a534:	b480      	push	{r7}
 801a536:	b085      	sub	sp, #20
 801a538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a53a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801a53e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a540:	4b27      	ldr	r3, [pc, #156]	; (801a5e0 <prvHeapInit+0xac>)
 801a542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a544:	68fb      	ldr	r3, [r7, #12]
 801a546:	f003 0307 	and.w	r3, r3, #7
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	d00c      	beq.n	801a568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a54e:	68fb      	ldr	r3, [r7, #12]
 801a550:	3307      	adds	r3, #7
 801a552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a554:	68fb      	ldr	r3, [r7, #12]
 801a556:	f023 0307 	bic.w	r3, r3, #7
 801a55a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a55c:	68ba      	ldr	r2, [r7, #8]
 801a55e:	68fb      	ldr	r3, [r7, #12]
 801a560:	1ad3      	subs	r3, r2, r3
 801a562:	4a1f      	ldr	r2, [pc, #124]	; (801a5e0 <prvHeapInit+0xac>)
 801a564:	4413      	add	r3, r2
 801a566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801a568:	68fb      	ldr	r3, [r7, #12]
 801a56a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a56c:	4a1d      	ldr	r2, [pc, #116]	; (801a5e4 <prvHeapInit+0xb0>)
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a572:	4b1c      	ldr	r3, [pc, #112]	; (801a5e4 <prvHeapInit+0xb0>)
 801a574:	2200      	movs	r2, #0
 801a576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	68ba      	ldr	r2, [r7, #8]
 801a57c:	4413      	add	r3, r2
 801a57e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801a580:	2208      	movs	r2, #8
 801a582:	68fb      	ldr	r3, [r7, #12]
 801a584:	1a9b      	subs	r3, r3, r2
 801a586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a588:	68fb      	ldr	r3, [r7, #12]
 801a58a:	f023 0307 	bic.w	r3, r3, #7
 801a58e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801a590:	68fb      	ldr	r3, [r7, #12]
 801a592:	4a15      	ldr	r2, [pc, #84]	; (801a5e8 <prvHeapInit+0xb4>)
 801a594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801a596:	4b14      	ldr	r3, [pc, #80]	; (801a5e8 <prvHeapInit+0xb4>)
 801a598:	681b      	ldr	r3, [r3, #0]
 801a59a:	2200      	movs	r2, #0
 801a59c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a59e:	4b12      	ldr	r3, [pc, #72]	; (801a5e8 <prvHeapInit+0xb4>)
 801a5a0:	681b      	ldr	r3, [r3, #0]
 801a5a2:	2200      	movs	r2, #0
 801a5a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a5aa:	683b      	ldr	r3, [r7, #0]
 801a5ac:	68fa      	ldr	r2, [r7, #12]
 801a5ae:	1ad2      	subs	r2, r2, r3
 801a5b0:	683b      	ldr	r3, [r7, #0]
 801a5b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a5b4:	4b0c      	ldr	r3, [pc, #48]	; (801a5e8 <prvHeapInit+0xb4>)
 801a5b6:	681a      	ldr	r2, [r3, #0]
 801a5b8:	683b      	ldr	r3, [r7, #0]
 801a5ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a5bc:	683b      	ldr	r3, [r7, #0]
 801a5be:	685b      	ldr	r3, [r3, #4]
 801a5c0:	4a0a      	ldr	r2, [pc, #40]	; (801a5ec <prvHeapInit+0xb8>)
 801a5c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a5c4:	683b      	ldr	r3, [r7, #0]
 801a5c6:	685b      	ldr	r3, [r3, #4]
 801a5c8:	4a09      	ldr	r2, [pc, #36]	; (801a5f0 <prvHeapInit+0xbc>)
 801a5ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a5cc:	4b09      	ldr	r3, [pc, #36]	; (801a5f4 <prvHeapInit+0xc0>)
 801a5ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a5d2:	601a      	str	r2, [r3, #0]
}
 801a5d4:	bf00      	nop
 801a5d6:	3714      	adds	r7, #20
 801a5d8:	46bd      	mov	sp, r7
 801a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5de:	4770      	bx	lr
 801a5e0:	200022dc 	.word	0x200022dc
 801a5e4:	20005edc 	.word	0x20005edc
 801a5e8:	20005ee4 	.word	0x20005ee4
 801a5ec:	20005eec 	.word	0x20005eec
 801a5f0:	20005ee8 	.word	0x20005ee8
 801a5f4:	20005ef8 	.word	0x20005ef8

0801a5f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801a5f8:	b480      	push	{r7}
 801a5fa:	b085      	sub	sp, #20
 801a5fc:	af00      	add	r7, sp, #0
 801a5fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a600:	4b28      	ldr	r3, [pc, #160]	; (801a6a4 <prvInsertBlockIntoFreeList+0xac>)
 801a602:	60fb      	str	r3, [r7, #12]
 801a604:	e002      	b.n	801a60c <prvInsertBlockIntoFreeList+0x14>
 801a606:	68fb      	ldr	r3, [r7, #12]
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	60fb      	str	r3, [r7, #12]
 801a60c:	68fb      	ldr	r3, [r7, #12]
 801a60e:	681b      	ldr	r3, [r3, #0]
 801a610:	687a      	ldr	r2, [r7, #4]
 801a612:	429a      	cmp	r2, r3
 801a614:	d8f7      	bhi.n	801a606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801a616:	68fb      	ldr	r3, [r7, #12]
 801a618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a61a:	68fb      	ldr	r3, [r7, #12]
 801a61c:	685b      	ldr	r3, [r3, #4]
 801a61e:	68ba      	ldr	r2, [r7, #8]
 801a620:	4413      	add	r3, r2
 801a622:	687a      	ldr	r2, [r7, #4]
 801a624:	429a      	cmp	r2, r3
 801a626:	d108      	bne.n	801a63a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a628:	68fb      	ldr	r3, [r7, #12]
 801a62a:	685a      	ldr	r2, [r3, #4]
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	685b      	ldr	r3, [r3, #4]
 801a630:	441a      	add	r2, r3
 801a632:	68fb      	ldr	r3, [r7, #12]
 801a634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801a636:	68fb      	ldr	r3, [r7, #12]
 801a638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801a63a:	687b      	ldr	r3, [r7, #4]
 801a63c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	685b      	ldr	r3, [r3, #4]
 801a642:	68ba      	ldr	r2, [r7, #8]
 801a644:	441a      	add	r2, r3
 801a646:	68fb      	ldr	r3, [r7, #12]
 801a648:	681b      	ldr	r3, [r3, #0]
 801a64a:	429a      	cmp	r2, r3
 801a64c:	d118      	bne.n	801a680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a64e:	68fb      	ldr	r3, [r7, #12]
 801a650:	681a      	ldr	r2, [r3, #0]
 801a652:	4b15      	ldr	r3, [pc, #84]	; (801a6a8 <prvInsertBlockIntoFreeList+0xb0>)
 801a654:	681b      	ldr	r3, [r3, #0]
 801a656:	429a      	cmp	r2, r3
 801a658:	d00d      	beq.n	801a676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	685a      	ldr	r2, [r3, #4]
 801a65e:	68fb      	ldr	r3, [r7, #12]
 801a660:	681b      	ldr	r3, [r3, #0]
 801a662:	685b      	ldr	r3, [r3, #4]
 801a664:	441a      	add	r2, r3
 801a666:	687b      	ldr	r3, [r7, #4]
 801a668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a66a:	68fb      	ldr	r3, [r7, #12]
 801a66c:	681b      	ldr	r3, [r3, #0]
 801a66e:	681a      	ldr	r2, [r3, #0]
 801a670:	687b      	ldr	r3, [r7, #4]
 801a672:	601a      	str	r2, [r3, #0]
 801a674:	e008      	b.n	801a688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a676:	4b0c      	ldr	r3, [pc, #48]	; (801a6a8 <prvInsertBlockIntoFreeList+0xb0>)
 801a678:	681a      	ldr	r2, [r3, #0]
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	601a      	str	r2, [r3, #0]
 801a67e:	e003      	b.n	801a688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a680:	68fb      	ldr	r3, [r7, #12]
 801a682:	681a      	ldr	r2, [r3, #0]
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a688:	68fa      	ldr	r2, [r7, #12]
 801a68a:	687b      	ldr	r3, [r7, #4]
 801a68c:	429a      	cmp	r2, r3
 801a68e:	d002      	beq.n	801a696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a690:	68fb      	ldr	r3, [r7, #12]
 801a692:	687a      	ldr	r2, [r7, #4]
 801a694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a696:	bf00      	nop
 801a698:	3714      	adds	r7, #20
 801a69a:	46bd      	mov	sp, r7
 801a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6a0:	4770      	bx	lr
 801a6a2:	bf00      	nop
 801a6a4:	20005edc 	.word	0x20005edc
 801a6a8:	20005ee4 	.word	0x20005ee4

0801a6ac <__errno>:
 801a6ac:	4b01      	ldr	r3, [pc, #4]	; (801a6b4 <__errno+0x8>)
 801a6ae:	6818      	ldr	r0, [r3, #0]
 801a6b0:	4770      	bx	lr
 801a6b2:	bf00      	nop
 801a6b4:	2000008c 	.word	0x2000008c

0801a6b8 <__libc_init_array>:
 801a6b8:	b570      	push	{r4, r5, r6, lr}
 801a6ba:	4d0d      	ldr	r5, [pc, #52]	; (801a6f0 <__libc_init_array+0x38>)
 801a6bc:	4c0d      	ldr	r4, [pc, #52]	; (801a6f4 <__libc_init_array+0x3c>)
 801a6be:	1b64      	subs	r4, r4, r5
 801a6c0:	10a4      	asrs	r4, r4, #2
 801a6c2:	2600      	movs	r6, #0
 801a6c4:	42a6      	cmp	r6, r4
 801a6c6:	d109      	bne.n	801a6dc <__libc_init_array+0x24>
 801a6c8:	4d0b      	ldr	r5, [pc, #44]	; (801a6f8 <__libc_init_array+0x40>)
 801a6ca:	4c0c      	ldr	r4, [pc, #48]	; (801a6fc <__libc_init_array+0x44>)
 801a6cc:	f005 ff68 	bl	80205a0 <_init>
 801a6d0:	1b64      	subs	r4, r4, r5
 801a6d2:	10a4      	asrs	r4, r4, #2
 801a6d4:	2600      	movs	r6, #0
 801a6d6:	42a6      	cmp	r6, r4
 801a6d8:	d105      	bne.n	801a6e6 <__libc_init_array+0x2e>
 801a6da:	bd70      	pop	{r4, r5, r6, pc}
 801a6dc:	f855 3b04 	ldr.w	r3, [r5], #4
 801a6e0:	4798      	blx	r3
 801a6e2:	3601      	adds	r6, #1
 801a6e4:	e7ee      	b.n	801a6c4 <__libc_init_array+0xc>
 801a6e6:	f855 3b04 	ldr.w	r3, [r5], #4
 801a6ea:	4798      	blx	r3
 801a6ec:	3601      	adds	r6, #1
 801a6ee:	e7f2      	b.n	801a6d6 <__libc_init_array+0x1e>
 801a6f0:	080214f4 	.word	0x080214f4
 801a6f4:	080214f4 	.word	0x080214f4
 801a6f8:	080214f4 	.word	0x080214f4
 801a6fc:	080214f8 	.word	0x080214f8

0801a700 <malloc>:
 801a700:	4b02      	ldr	r3, [pc, #8]	; (801a70c <malloc+0xc>)
 801a702:	4601      	mov	r1, r0
 801a704:	6818      	ldr	r0, [r3, #0]
 801a706:	f000 b869 	b.w	801a7dc <_malloc_r>
 801a70a:	bf00      	nop
 801a70c:	2000008c 	.word	0x2000008c

0801a710 <memcpy>:
 801a710:	440a      	add	r2, r1
 801a712:	4291      	cmp	r1, r2
 801a714:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a718:	d100      	bne.n	801a71c <memcpy+0xc>
 801a71a:	4770      	bx	lr
 801a71c:	b510      	push	{r4, lr}
 801a71e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a722:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a726:	4291      	cmp	r1, r2
 801a728:	d1f9      	bne.n	801a71e <memcpy+0xe>
 801a72a:	bd10      	pop	{r4, pc}

0801a72c <memset>:
 801a72c:	4402      	add	r2, r0
 801a72e:	4603      	mov	r3, r0
 801a730:	4293      	cmp	r3, r2
 801a732:	d100      	bne.n	801a736 <memset+0xa>
 801a734:	4770      	bx	lr
 801a736:	f803 1b01 	strb.w	r1, [r3], #1
 801a73a:	e7f9      	b.n	801a730 <memset+0x4>

0801a73c <_free_r>:
 801a73c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a73e:	2900      	cmp	r1, #0
 801a740:	d048      	beq.n	801a7d4 <_free_r+0x98>
 801a742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a746:	9001      	str	r0, [sp, #4]
 801a748:	2b00      	cmp	r3, #0
 801a74a:	f1a1 0404 	sub.w	r4, r1, #4
 801a74e:	bfb8      	it	lt
 801a750:	18e4      	addlt	r4, r4, r3
 801a752:	f003 f925 	bl	801d9a0 <__malloc_lock>
 801a756:	4a20      	ldr	r2, [pc, #128]	; (801a7d8 <_free_r+0x9c>)
 801a758:	9801      	ldr	r0, [sp, #4]
 801a75a:	6813      	ldr	r3, [r2, #0]
 801a75c:	4615      	mov	r5, r2
 801a75e:	b933      	cbnz	r3, 801a76e <_free_r+0x32>
 801a760:	6063      	str	r3, [r4, #4]
 801a762:	6014      	str	r4, [r2, #0]
 801a764:	b003      	add	sp, #12
 801a766:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a76a:	f003 b91f 	b.w	801d9ac <__malloc_unlock>
 801a76e:	42a3      	cmp	r3, r4
 801a770:	d90b      	bls.n	801a78a <_free_r+0x4e>
 801a772:	6821      	ldr	r1, [r4, #0]
 801a774:	1862      	adds	r2, r4, r1
 801a776:	4293      	cmp	r3, r2
 801a778:	bf04      	itt	eq
 801a77a:	681a      	ldreq	r2, [r3, #0]
 801a77c:	685b      	ldreq	r3, [r3, #4]
 801a77e:	6063      	str	r3, [r4, #4]
 801a780:	bf04      	itt	eq
 801a782:	1852      	addeq	r2, r2, r1
 801a784:	6022      	streq	r2, [r4, #0]
 801a786:	602c      	str	r4, [r5, #0]
 801a788:	e7ec      	b.n	801a764 <_free_r+0x28>
 801a78a:	461a      	mov	r2, r3
 801a78c:	685b      	ldr	r3, [r3, #4]
 801a78e:	b10b      	cbz	r3, 801a794 <_free_r+0x58>
 801a790:	42a3      	cmp	r3, r4
 801a792:	d9fa      	bls.n	801a78a <_free_r+0x4e>
 801a794:	6811      	ldr	r1, [r2, #0]
 801a796:	1855      	adds	r5, r2, r1
 801a798:	42a5      	cmp	r5, r4
 801a79a:	d10b      	bne.n	801a7b4 <_free_r+0x78>
 801a79c:	6824      	ldr	r4, [r4, #0]
 801a79e:	4421      	add	r1, r4
 801a7a0:	1854      	adds	r4, r2, r1
 801a7a2:	42a3      	cmp	r3, r4
 801a7a4:	6011      	str	r1, [r2, #0]
 801a7a6:	d1dd      	bne.n	801a764 <_free_r+0x28>
 801a7a8:	681c      	ldr	r4, [r3, #0]
 801a7aa:	685b      	ldr	r3, [r3, #4]
 801a7ac:	6053      	str	r3, [r2, #4]
 801a7ae:	4421      	add	r1, r4
 801a7b0:	6011      	str	r1, [r2, #0]
 801a7b2:	e7d7      	b.n	801a764 <_free_r+0x28>
 801a7b4:	d902      	bls.n	801a7bc <_free_r+0x80>
 801a7b6:	230c      	movs	r3, #12
 801a7b8:	6003      	str	r3, [r0, #0]
 801a7ba:	e7d3      	b.n	801a764 <_free_r+0x28>
 801a7bc:	6825      	ldr	r5, [r4, #0]
 801a7be:	1961      	adds	r1, r4, r5
 801a7c0:	428b      	cmp	r3, r1
 801a7c2:	bf04      	itt	eq
 801a7c4:	6819      	ldreq	r1, [r3, #0]
 801a7c6:	685b      	ldreq	r3, [r3, #4]
 801a7c8:	6063      	str	r3, [r4, #4]
 801a7ca:	bf04      	itt	eq
 801a7cc:	1949      	addeq	r1, r1, r5
 801a7ce:	6021      	streq	r1, [r4, #0]
 801a7d0:	6054      	str	r4, [r2, #4]
 801a7d2:	e7c7      	b.n	801a764 <_free_r+0x28>
 801a7d4:	b003      	add	sp, #12
 801a7d6:	bd30      	pop	{r4, r5, pc}
 801a7d8:	20005efc 	.word	0x20005efc

0801a7dc <_malloc_r>:
 801a7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7de:	1ccd      	adds	r5, r1, #3
 801a7e0:	f025 0503 	bic.w	r5, r5, #3
 801a7e4:	3508      	adds	r5, #8
 801a7e6:	2d0c      	cmp	r5, #12
 801a7e8:	bf38      	it	cc
 801a7ea:	250c      	movcc	r5, #12
 801a7ec:	2d00      	cmp	r5, #0
 801a7ee:	4606      	mov	r6, r0
 801a7f0:	db01      	blt.n	801a7f6 <_malloc_r+0x1a>
 801a7f2:	42a9      	cmp	r1, r5
 801a7f4:	d903      	bls.n	801a7fe <_malloc_r+0x22>
 801a7f6:	230c      	movs	r3, #12
 801a7f8:	6033      	str	r3, [r6, #0]
 801a7fa:	2000      	movs	r0, #0
 801a7fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7fe:	f003 f8cf 	bl	801d9a0 <__malloc_lock>
 801a802:	4921      	ldr	r1, [pc, #132]	; (801a888 <_malloc_r+0xac>)
 801a804:	680a      	ldr	r2, [r1, #0]
 801a806:	4614      	mov	r4, r2
 801a808:	b99c      	cbnz	r4, 801a832 <_malloc_r+0x56>
 801a80a:	4f20      	ldr	r7, [pc, #128]	; (801a88c <_malloc_r+0xb0>)
 801a80c:	683b      	ldr	r3, [r7, #0]
 801a80e:	b923      	cbnz	r3, 801a81a <_malloc_r+0x3e>
 801a810:	4621      	mov	r1, r4
 801a812:	4630      	mov	r0, r6
 801a814:	f000 febe 	bl	801b594 <_sbrk_r>
 801a818:	6038      	str	r0, [r7, #0]
 801a81a:	4629      	mov	r1, r5
 801a81c:	4630      	mov	r0, r6
 801a81e:	f000 feb9 	bl	801b594 <_sbrk_r>
 801a822:	1c43      	adds	r3, r0, #1
 801a824:	d123      	bne.n	801a86e <_malloc_r+0x92>
 801a826:	230c      	movs	r3, #12
 801a828:	6033      	str	r3, [r6, #0]
 801a82a:	4630      	mov	r0, r6
 801a82c:	f003 f8be 	bl	801d9ac <__malloc_unlock>
 801a830:	e7e3      	b.n	801a7fa <_malloc_r+0x1e>
 801a832:	6823      	ldr	r3, [r4, #0]
 801a834:	1b5b      	subs	r3, r3, r5
 801a836:	d417      	bmi.n	801a868 <_malloc_r+0x8c>
 801a838:	2b0b      	cmp	r3, #11
 801a83a:	d903      	bls.n	801a844 <_malloc_r+0x68>
 801a83c:	6023      	str	r3, [r4, #0]
 801a83e:	441c      	add	r4, r3
 801a840:	6025      	str	r5, [r4, #0]
 801a842:	e004      	b.n	801a84e <_malloc_r+0x72>
 801a844:	6863      	ldr	r3, [r4, #4]
 801a846:	42a2      	cmp	r2, r4
 801a848:	bf0c      	ite	eq
 801a84a:	600b      	streq	r3, [r1, #0]
 801a84c:	6053      	strne	r3, [r2, #4]
 801a84e:	4630      	mov	r0, r6
 801a850:	f003 f8ac 	bl	801d9ac <__malloc_unlock>
 801a854:	f104 000b 	add.w	r0, r4, #11
 801a858:	1d23      	adds	r3, r4, #4
 801a85a:	f020 0007 	bic.w	r0, r0, #7
 801a85e:	1ac2      	subs	r2, r0, r3
 801a860:	d0cc      	beq.n	801a7fc <_malloc_r+0x20>
 801a862:	1a1b      	subs	r3, r3, r0
 801a864:	50a3      	str	r3, [r4, r2]
 801a866:	e7c9      	b.n	801a7fc <_malloc_r+0x20>
 801a868:	4622      	mov	r2, r4
 801a86a:	6864      	ldr	r4, [r4, #4]
 801a86c:	e7cc      	b.n	801a808 <_malloc_r+0x2c>
 801a86e:	1cc4      	adds	r4, r0, #3
 801a870:	f024 0403 	bic.w	r4, r4, #3
 801a874:	42a0      	cmp	r0, r4
 801a876:	d0e3      	beq.n	801a840 <_malloc_r+0x64>
 801a878:	1a21      	subs	r1, r4, r0
 801a87a:	4630      	mov	r0, r6
 801a87c:	f000 fe8a 	bl	801b594 <_sbrk_r>
 801a880:	3001      	adds	r0, #1
 801a882:	d1dd      	bne.n	801a840 <_malloc_r+0x64>
 801a884:	e7cf      	b.n	801a826 <_malloc_r+0x4a>
 801a886:	bf00      	nop
 801a888:	20005efc 	.word	0x20005efc
 801a88c:	20005f00 	.word	0x20005f00

0801a890 <__cvt>:
 801a890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a894:	ec55 4b10 	vmov	r4, r5, d0
 801a898:	2d00      	cmp	r5, #0
 801a89a:	460e      	mov	r6, r1
 801a89c:	4619      	mov	r1, r3
 801a89e:	462b      	mov	r3, r5
 801a8a0:	bfbb      	ittet	lt
 801a8a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801a8a6:	461d      	movlt	r5, r3
 801a8a8:	2300      	movge	r3, #0
 801a8aa:	232d      	movlt	r3, #45	; 0x2d
 801a8ac:	700b      	strb	r3, [r1, #0]
 801a8ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a8b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801a8b4:	4691      	mov	r9, r2
 801a8b6:	f023 0820 	bic.w	r8, r3, #32
 801a8ba:	bfbc      	itt	lt
 801a8bc:	4622      	movlt	r2, r4
 801a8be:	4614      	movlt	r4, r2
 801a8c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a8c4:	d005      	beq.n	801a8d2 <__cvt+0x42>
 801a8c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801a8ca:	d100      	bne.n	801a8ce <__cvt+0x3e>
 801a8cc:	3601      	adds	r6, #1
 801a8ce:	2102      	movs	r1, #2
 801a8d0:	e000      	b.n	801a8d4 <__cvt+0x44>
 801a8d2:	2103      	movs	r1, #3
 801a8d4:	ab03      	add	r3, sp, #12
 801a8d6:	9301      	str	r3, [sp, #4]
 801a8d8:	ab02      	add	r3, sp, #8
 801a8da:	9300      	str	r3, [sp, #0]
 801a8dc:	ec45 4b10 	vmov	d0, r4, r5
 801a8e0:	4653      	mov	r3, sl
 801a8e2:	4632      	mov	r2, r6
 801a8e4:	f001 fed8 	bl	801c698 <_dtoa_r>
 801a8e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801a8ec:	4607      	mov	r7, r0
 801a8ee:	d102      	bne.n	801a8f6 <__cvt+0x66>
 801a8f0:	f019 0f01 	tst.w	r9, #1
 801a8f4:	d022      	beq.n	801a93c <__cvt+0xac>
 801a8f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a8fa:	eb07 0906 	add.w	r9, r7, r6
 801a8fe:	d110      	bne.n	801a922 <__cvt+0x92>
 801a900:	783b      	ldrb	r3, [r7, #0]
 801a902:	2b30      	cmp	r3, #48	; 0x30
 801a904:	d10a      	bne.n	801a91c <__cvt+0x8c>
 801a906:	2200      	movs	r2, #0
 801a908:	2300      	movs	r3, #0
 801a90a:	4620      	mov	r0, r4
 801a90c:	4629      	mov	r1, r5
 801a90e:	f7e6 f8db 	bl	8000ac8 <__aeabi_dcmpeq>
 801a912:	b918      	cbnz	r0, 801a91c <__cvt+0x8c>
 801a914:	f1c6 0601 	rsb	r6, r6, #1
 801a918:	f8ca 6000 	str.w	r6, [sl]
 801a91c:	f8da 3000 	ldr.w	r3, [sl]
 801a920:	4499      	add	r9, r3
 801a922:	2200      	movs	r2, #0
 801a924:	2300      	movs	r3, #0
 801a926:	4620      	mov	r0, r4
 801a928:	4629      	mov	r1, r5
 801a92a:	f7e6 f8cd 	bl	8000ac8 <__aeabi_dcmpeq>
 801a92e:	b108      	cbz	r0, 801a934 <__cvt+0xa4>
 801a930:	f8cd 900c 	str.w	r9, [sp, #12]
 801a934:	2230      	movs	r2, #48	; 0x30
 801a936:	9b03      	ldr	r3, [sp, #12]
 801a938:	454b      	cmp	r3, r9
 801a93a:	d307      	bcc.n	801a94c <__cvt+0xbc>
 801a93c:	9b03      	ldr	r3, [sp, #12]
 801a93e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a940:	1bdb      	subs	r3, r3, r7
 801a942:	4638      	mov	r0, r7
 801a944:	6013      	str	r3, [r2, #0]
 801a946:	b004      	add	sp, #16
 801a948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a94c:	1c59      	adds	r1, r3, #1
 801a94e:	9103      	str	r1, [sp, #12]
 801a950:	701a      	strb	r2, [r3, #0]
 801a952:	e7f0      	b.n	801a936 <__cvt+0xa6>

0801a954 <__exponent>:
 801a954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a956:	4603      	mov	r3, r0
 801a958:	2900      	cmp	r1, #0
 801a95a:	bfb8      	it	lt
 801a95c:	4249      	neglt	r1, r1
 801a95e:	f803 2b02 	strb.w	r2, [r3], #2
 801a962:	bfb4      	ite	lt
 801a964:	222d      	movlt	r2, #45	; 0x2d
 801a966:	222b      	movge	r2, #43	; 0x2b
 801a968:	2909      	cmp	r1, #9
 801a96a:	7042      	strb	r2, [r0, #1]
 801a96c:	dd2a      	ble.n	801a9c4 <__exponent+0x70>
 801a96e:	f10d 0407 	add.w	r4, sp, #7
 801a972:	46a4      	mov	ip, r4
 801a974:	270a      	movs	r7, #10
 801a976:	46a6      	mov	lr, r4
 801a978:	460a      	mov	r2, r1
 801a97a:	fb91 f6f7 	sdiv	r6, r1, r7
 801a97e:	fb07 1516 	mls	r5, r7, r6, r1
 801a982:	3530      	adds	r5, #48	; 0x30
 801a984:	2a63      	cmp	r2, #99	; 0x63
 801a986:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801a98a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801a98e:	4631      	mov	r1, r6
 801a990:	dcf1      	bgt.n	801a976 <__exponent+0x22>
 801a992:	3130      	adds	r1, #48	; 0x30
 801a994:	f1ae 0502 	sub.w	r5, lr, #2
 801a998:	f804 1c01 	strb.w	r1, [r4, #-1]
 801a99c:	1c44      	adds	r4, r0, #1
 801a99e:	4629      	mov	r1, r5
 801a9a0:	4561      	cmp	r1, ip
 801a9a2:	d30a      	bcc.n	801a9ba <__exponent+0x66>
 801a9a4:	f10d 0209 	add.w	r2, sp, #9
 801a9a8:	eba2 020e 	sub.w	r2, r2, lr
 801a9ac:	4565      	cmp	r5, ip
 801a9ae:	bf88      	it	hi
 801a9b0:	2200      	movhi	r2, #0
 801a9b2:	4413      	add	r3, r2
 801a9b4:	1a18      	subs	r0, r3, r0
 801a9b6:	b003      	add	sp, #12
 801a9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a9ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a9be:	f804 2f01 	strb.w	r2, [r4, #1]!
 801a9c2:	e7ed      	b.n	801a9a0 <__exponent+0x4c>
 801a9c4:	2330      	movs	r3, #48	; 0x30
 801a9c6:	3130      	adds	r1, #48	; 0x30
 801a9c8:	7083      	strb	r3, [r0, #2]
 801a9ca:	70c1      	strb	r1, [r0, #3]
 801a9cc:	1d03      	adds	r3, r0, #4
 801a9ce:	e7f1      	b.n	801a9b4 <__exponent+0x60>

0801a9d0 <_printf_float>:
 801a9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9d4:	ed2d 8b02 	vpush	{d8}
 801a9d8:	b08d      	sub	sp, #52	; 0x34
 801a9da:	460c      	mov	r4, r1
 801a9dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801a9e0:	4616      	mov	r6, r2
 801a9e2:	461f      	mov	r7, r3
 801a9e4:	4605      	mov	r5, r0
 801a9e6:	f002 ffb3 	bl	801d950 <_localeconv_r>
 801a9ea:	f8d0 a000 	ldr.w	sl, [r0]
 801a9ee:	4650      	mov	r0, sl
 801a9f0:	f7e5 fbee 	bl	80001d0 <strlen>
 801a9f4:	2300      	movs	r3, #0
 801a9f6:	930a      	str	r3, [sp, #40]	; 0x28
 801a9f8:	6823      	ldr	r3, [r4, #0]
 801a9fa:	9305      	str	r3, [sp, #20]
 801a9fc:	f8d8 3000 	ldr.w	r3, [r8]
 801aa00:	f894 b018 	ldrb.w	fp, [r4, #24]
 801aa04:	3307      	adds	r3, #7
 801aa06:	f023 0307 	bic.w	r3, r3, #7
 801aa0a:	f103 0208 	add.w	r2, r3, #8
 801aa0e:	f8c8 2000 	str.w	r2, [r8]
 801aa12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa16:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801aa1a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801aa1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801aa22:	9307      	str	r3, [sp, #28]
 801aa24:	f8cd 8018 	str.w	r8, [sp, #24]
 801aa28:	ee08 0a10 	vmov	s16, r0
 801aa2c:	4b9f      	ldr	r3, [pc, #636]	; (801acac <_printf_float+0x2dc>)
 801aa2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801aa32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801aa36:	f7e6 f879 	bl	8000b2c <__aeabi_dcmpun>
 801aa3a:	bb88      	cbnz	r0, 801aaa0 <_printf_float+0xd0>
 801aa3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801aa40:	4b9a      	ldr	r3, [pc, #616]	; (801acac <_printf_float+0x2dc>)
 801aa42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801aa46:	f7e6 f853 	bl	8000af0 <__aeabi_dcmple>
 801aa4a:	bb48      	cbnz	r0, 801aaa0 <_printf_float+0xd0>
 801aa4c:	2200      	movs	r2, #0
 801aa4e:	2300      	movs	r3, #0
 801aa50:	4640      	mov	r0, r8
 801aa52:	4649      	mov	r1, r9
 801aa54:	f7e6 f842 	bl	8000adc <__aeabi_dcmplt>
 801aa58:	b110      	cbz	r0, 801aa60 <_printf_float+0x90>
 801aa5a:	232d      	movs	r3, #45	; 0x2d
 801aa5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aa60:	4b93      	ldr	r3, [pc, #588]	; (801acb0 <_printf_float+0x2e0>)
 801aa62:	4894      	ldr	r0, [pc, #592]	; (801acb4 <_printf_float+0x2e4>)
 801aa64:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801aa68:	bf94      	ite	ls
 801aa6a:	4698      	movls	r8, r3
 801aa6c:	4680      	movhi	r8, r0
 801aa6e:	2303      	movs	r3, #3
 801aa70:	6123      	str	r3, [r4, #16]
 801aa72:	9b05      	ldr	r3, [sp, #20]
 801aa74:	f023 0204 	bic.w	r2, r3, #4
 801aa78:	6022      	str	r2, [r4, #0]
 801aa7a:	f04f 0900 	mov.w	r9, #0
 801aa7e:	9700      	str	r7, [sp, #0]
 801aa80:	4633      	mov	r3, r6
 801aa82:	aa0b      	add	r2, sp, #44	; 0x2c
 801aa84:	4621      	mov	r1, r4
 801aa86:	4628      	mov	r0, r5
 801aa88:	f000 f9d8 	bl	801ae3c <_printf_common>
 801aa8c:	3001      	adds	r0, #1
 801aa8e:	f040 8090 	bne.w	801abb2 <_printf_float+0x1e2>
 801aa92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aa96:	b00d      	add	sp, #52	; 0x34
 801aa98:	ecbd 8b02 	vpop	{d8}
 801aa9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaa0:	4642      	mov	r2, r8
 801aaa2:	464b      	mov	r3, r9
 801aaa4:	4640      	mov	r0, r8
 801aaa6:	4649      	mov	r1, r9
 801aaa8:	f7e6 f840 	bl	8000b2c <__aeabi_dcmpun>
 801aaac:	b140      	cbz	r0, 801aac0 <_printf_float+0xf0>
 801aaae:	464b      	mov	r3, r9
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	bfbc      	itt	lt
 801aab4:	232d      	movlt	r3, #45	; 0x2d
 801aab6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801aaba:	487f      	ldr	r0, [pc, #508]	; (801acb8 <_printf_float+0x2e8>)
 801aabc:	4b7f      	ldr	r3, [pc, #508]	; (801acbc <_printf_float+0x2ec>)
 801aabe:	e7d1      	b.n	801aa64 <_printf_float+0x94>
 801aac0:	6863      	ldr	r3, [r4, #4]
 801aac2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801aac6:	9206      	str	r2, [sp, #24]
 801aac8:	1c5a      	adds	r2, r3, #1
 801aaca:	d13f      	bne.n	801ab4c <_printf_float+0x17c>
 801aacc:	2306      	movs	r3, #6
 801aace:	6063      	str	r3, [r4, #4]
 801aad0:	9b05      	ldr	r3, [sp, #20]
 801aad2:	6861      	ldr	r1, [r4, #4]
 801aad4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801aad8:	2300      	movs	r3, #0
 801aada:	9303      	str	r3, [sp, #12]
 801aadc:	ab0a      	add	r3, sp, #40	; 0x28
 801aade:	e9cd b301 	strd	fp, r3, [sp, #4]
 801aae2:	ab09      	add	r3, sp, #36	; 0x24
 801aae4:	ec49 8b10 	vmov	d0, r8, r9
 801aae8:	9300      	str	r3, [sp, #0]
 801aaea:	6022      	str	r2, [r4, #0]
 801aaec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801aaf0:	4628      	mov	r0, r5
 801aaf2:	f7ff fecd 	bl	801a890 <__cvt>
 801aaf6:	9b06      	ldr	r3, [sp, #24]
 801aaf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801aafa:	2b47      	cmp	r3, #71	; 0x47
 801aafc:	4680      	mov	r8, r0
 801aafe:	d108      	bne.n	801ab12 <_printf_float+0x142>
 801ab00:	1cc8      	adds	r0, r1, #3
 801ab02:	db02      	blt.n	801ab0a <_printf_float+0x13a>
 801ab04:	6863      	ldr	r3, [r4, #4]
 801ab06:	4299      	cmp	r1, r3
 801ab08:	dd41      	ble.n	801ab8e <_printf_float+0x1be>
 801ab0a:	f1ab 0b02 	sub.w	fp, fp, #2
 801ab0e:	fa5f fb8b 	uxtb.w	fp, fp
 801ab12:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801ab16:	d820      	bhi.n	801ab5a <_printf_float+0x18a>
 801ab18:	3901      	subs	r1, #1
 801ab1a:	465a      	mov	r2, fp
 801ab1c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801ab20:	9109      	str	r1, [sp, #36]	; 0x24
 801ab22:	f7ff ff17 	bl	801a954 <__exponent>
 801ab26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ab28:	1813      	adds	r3, r2, r0
 801ab2a:	2a01      	cmp	r2, #1
 801ab2c:	4681      	mov	r9, r0
 801ab2e:	6123      	str	r3, [r4, #16]
 801ab30:	dc02      	bgt.n	801ab38 <_printf_float+0x168>
 801ab32:	6822      	ldr	r2, [r4, #0]
 801ab34:	07d2      	lsls	r2, r2, #31
 801ab36:	d501      	bpl.n	801ab3c <_printf_float+0x16c>
 801ab38:	3301      	adds	r3, #1
 801ab3a:	6123      	str	r3, [r4, #16]
 801ab3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801ab40:	2b00      	cmp	r3, #0
 801ab42:	d09c      	beq.n	801aa7e <_printf_float+0xae>
 801ab44:	232d      	movs	r3, #45	; 0x2d
 801ab46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ab4a:	e798      	b.n	801aa7e <_printf_float+0xae>
 801ab4c:	9a06      	ldr	r2, [sp, #24]
 801ab4e:	2a47      	cmp	r2, #71	; 0x47
 801ab50:	d1be      	bne.n	801aad0 <_printf_float+0x100>
 801ab52:	2b00      	cmp	r3, #0
 801ab54:	d1bc      	bne.n	801aad0 <_printf_float+0x100>
 801ab56:	2301      	movs	r3, #1
 801ab58:	e7b9      	b.n	801aace <_printf_float+0xfe>
 801ab5a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801ab5e:	d118      	bne.n	801ab92 <_printf_float+0x1c2>
 801ab60:	2900      	cmp	r1, #0
 801ab62:	6863      	ldr	r3, [r4, #4]
 801ab64:	dd0b      	ble.n	801ab7e <_printf_float+0x1ae>
 801ab66:	6121      	str	r1, [r4, #16]
 801ab68:	b913      	cbnz	r3, 801ab70 <_printf_float+0x1a0>
 801ab6a:	6822      	ldr	r2, [r4, #0]
 801ab6c:	07d0      	lsls	r0, r2, #31
 801ab6e:	d502      	bpl.n	801ab76 <_printf_float+0x1a6>
 801ab70:	3301      	adds	r3, #1
 801ab72:	440b      	add	r3, r1
 801ab74:	6123      	str	r3, [r4, #16]
 801ab76:	65a1      	str	r1, [r4, #88]	; 0x58
 801ab78:	f04f 0900 	mov.w	r9, #0
 801ab7c:	e7de      	b.n	801ab3c <_printf_float+0x16c>
 801ab7e:	b913      	cbnz	r3, 801ab86 <_printf_float+0x1b6>
 801ab80:	6822      	ldr	r2, [r4, #0]
 801ab82:	07d2      	lsls	r2, r2, #31
 801ab84:	d501      	bpl.n	801ab8a <_printf_float+0x1ba>
 801ab86:	3302      	adds	r3, #2
 801ab88:	e7f4      	b.n	801ab74 <_printf_float+0x1a4>
 801ab8a:	2301      	movs	r3, #1
 801ab8c:	e7f2      	b.n	801ab74 <_printf_float+0x1a4>
 801ab8e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801ab92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ab94:	4299      	cmp	r1, r3
 801ab96:	db05      	blt.n	801aba4 <_printf_float+0x1d4>
 801ab98:	6823      	ldr	r3, [r4, #0]
 801ab9a:	6121      	str	r1, [r4, #16]
 801ab9c:	07d8      	lsls	r0, r3, #31
 801ab9e:	d5ea      	bpl.n	801ab76 <_printf_float+0x1a6>
 801aba0:	1c4b      	adds	r3, r1, #1
 801aba2:	e7e7      	b.n	801ab74 <_printf_float+0x1a4>
 801aba4:	2900      	cmp	r1, #0
 801aba6:	bfd4      	ite	le
 801aba8:	f1c1 0202 	rsble	r2, r1, #2
 801abac:	2201      	movgt	r2, #1
 801abae:	4413      	add	r3, r2
 801abb0:	e7e0      	b.n	801ab74 <_printf_float+0x1a4>
 801abb2:	6823      	ldr	r3, [r4, #0]
 801abb4:	055a      	lsls	r2, r3, #21
 801abb6:	d407      	bmi.n	801abc8 <_printf_float+0x1f8>
 801abb8:	6923      	ldr	r3, [r4, #16]
 801abba:	4642      	mov	r2, r8
 801abbc:	4631      	mov	r1, r6
 801abbe:	4628      	mov	r0, r5
 801abc0:	47b8      	blx	r7
 801abc2:	3001      	adds	r0, #1
 801abc4:	d12c      	bne.n	801ac20 <_printf_float+0x250>
 801abc6:	e764      	b.n	801aa92 <_printf_float+0xc2>
 801abc8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801abcc:	f240 80e0 	bls.w	801ad90 <_printf_float+0x3c0>
 801abd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801abd4:	2200      	movs	r2, #0
 801abd6:	2300      	movs	r3, #0
 801abd8:	f7e5 ff76 	bl	8000ac8 <__aeabi_dcmpeq>
 801abdc:	2800      	cmp	r0, #0
 801abde:	d034      	beq.n	801ac4a <_printf_float+0x27a>
 801abe0:	4a37      	ldr	r2, [pc, #220]	; (801acc0 <_printf_float+0x2f0>)
 801abe2:	2301      	movs	r3, #1
 801abe4:	4631      	mov	r1, r6
 801abe6:	4628      	mov	r0, r5
 801abe8:	47b8      	blx	r7
 801abea:	3001      	adds	r0, #1
 801abec:	f43f af51 	beq.w	801aa92 <_printf_float+0xc2>
 801abf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801abf4:	429a      	cmp	r2, r3
 801abf6:	db02      	blt.n	801abfe <_printf_float+0x22e>
 801abf8:	6823      	ldr	r3, [r4, #0]
 801abfa:	07d8      	lsls	r0, r3, #31
 801abfc:	d510      	bpl.n	801ac20 <_printf_float+0x250>
 801abfe:	ee18 3a10 	vmov	r3, s16
 801ac02:	4652      	mov	r2, sl
 801ac04:	4631      	mov	r1, r6
 801ac06:	4628      	mov	r0, r5
 801ac08:	47b8      	blx	r7
 801ac0a:	3001      	adds	r0, #1
 801ac0c:	f43f af41 	beq.w	801aa92 <_printf_float+0xc2>
 801ac10:	f04f 0800 	mov.w	r8, #0
 801ac14:	f104 091a 	add.w	r9, r4, #26
 801ac18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ac1a:	3b01      	subs	r3, #1
 801ac1c:	4543      	cmp	r3, r8
 801ac1e:	dc09      	bgt.n	801ac34 <_printf_float+0x264>
 801ac20:	6823      	ldr	r3, [r4, #0]
 801ac22:	079b      	lsls	r3, r3, #30
 801ac24:	f100 8105 	bmi.w	801ae32 <_printf_float+0x462>
 801ac28:	68e0      	ldr	r0, [r4, #12]
 801ac2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ac2c:	4298      	cmp	r0, r3
 801ac2e:	bfb8      	it	lt
 801ac30:	4618      	movlt	r0, r3
 801ac32:	e730      	b.n	801aa96 <_printf_float+0xc6>
 801ac34:	2301      	movs	r3, #1
 801ac36:	464a      	mov	r2, r9
 801ac38:	4631      	mov	r1, r6
 801ac3a:	4628      	mov	r0, r5
 801ac3c:	47b8      	blx	r7
 801ac3e:	3001      	adds	r0, #1
 801ac40:	f43f af27 	beq.w	801aa92 <_printf_float+0xc2>
 801ac44:	f108 0801 	add.w	r8, r8, #1
 801ac48:	e7e6      	b.n	801ac18 <_printf_float+0x248>
 801ac4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	dc39      	bgt.n	801acc4 <_printf_float+0x2f4>
 801ac50:	4a1b      	ldr	r2, [pc, #108]	; (801acc0 <_printf_float+0x2f0>)
 801ac52:	2301      	movs	r3, #1
 801ac54:	4631      	mov	r1, r6
 801ac56:	4628      	mov	r0, r5
 801ac58:	47b8      	blx	r7
 801ac5a:	3001      	adds	r0, #1
 801ac5c:	f43f af19 	beq.w	801aa92 <_printf_float+0xc2>
 801ac60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ac64:	4313      	orrs	r3, r2
 801ac66:	d102      	bne.n	801ac6e <_printf_float+0x29e>
 801ac68:	6823      	ldr	r3, [r4, #0]
 801ac6a:	07d9      	lsls	r1, r3, #31
 801ac6c:	d5d8      	bpl.n	801ac20 <_printf_float+0x250>
 801ac6e:	ee18 3a10 	vmov	r3, s16
 801ac72:	4652      	mov	r2, sl
 801ac74:	4631      	mov	r1, r6
 801ac76:	4628      	mov	r0, r5
 801ac78:	47b8      	blx	r7
 801ac7a:	3001      	adds	r0, #1
 801ac7c:	f43f af09 	beq.w	801aa92 <_printf_float+0xc2>
 801ac80:	f04f 0900 	mov.w	r9, #0
 801ac84:	f104 0a1a 	add.w	sl, r4, #26
 801ac88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac8a:	425b      	negs	r3, r3
 801ac8c:	454b      	cmp	r3, r9
 801ac8e:	dc01      	bgt.n	801ac94 <_printf_float+0x2c4>
 801ac90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ac92:	e792      	b.n	801abba <_printf_float+0x1ea>
 801ac94:	2301      	movs	r3, #1
 801ac96:	4652      	mov	r2, sl
 801ac98:	4631      	mov	r1, r6
 801ac9a:	4628      	mov	r0, r5
 801ac9c:	47b8      	blx	r7
 801ac9e:	3001      	adds	r0, #1
 801aca0:	f43f aef7 	beq.w	801aa92 <_printf_float+0xc2>
 801aca4:	f109 0901 	add.w	r9, r9, #1
 801aca8:	e7ee      	b.n	801ac88 <_printf_float+0x2b8>
 801acaa:	bf00      	nop
 801acac:	7fefffff 	.word	0x7fefffff
 801acb0:	08020c10 	.word	0x08020c10
 801acb4:	08020c14 	.word	0x08020c14
 801acb8:	08020c1c 	.word	0x08020c1c
 801acbc:	08020c18 	.word	0x08020c18
 801acc0:	08020c20 	.word	0x08020c20
 801acc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801acc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801acc8:	429a      	cmp	r2, r3
 801acca:	bfa8      	it	ge
 801accc:	461a      	movge	r2, r3
 801acce:	2a00      	cmp	r2, #0
 801acd0:	4691      	mov	r9, r2
 801acd2:	dc37      	bgt.n	801ad44 <_printf_float+0x374>
 801acd4:	f04f 0b00 	mov.w	fp, #0
 801acd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801acdc:	f104 021a 	add.w	r2, r4, #26
 801ace0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ace2:	9305      	str	r3, [sp, #20]
 801ace4:	eba3 0309 	sub.w	r3, r3, r9
 801ace8:	455b      	cmp	r3, fp
 801acea:	dc33      	bgt.n	801ad54 <_printf_float+0x384>
 801acec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801acf0:	429a      	cmp	r2, r3
 801acf2:	db3b      	blt.n	801ad6c <_printf_float+0x39c>
 801acf4:	6823      	ldr	r3, [r4, #0]
 801acf6:	07da      	lsls	r2, r3, #31
 801acf8:	d438      	bmi.n	801ad6c <_printf_float+0x39c>
 801acfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801acfc:	9b05      	ldr	r3, [sp, #20]
 801acfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ad00:	1ad3      	subs	r3, r2, r3
 801ad02:	eba2 0901 	sub.w	r9, r2, r1
 801ad06:	4599      	cmp	r9, r3
 801ad08:	bfa8      	it	ge
 801ad0a:	4699      	movge	r9, r3
 801ad0c:	f1b9 0f00 	cmp.w	r9, #0
 801ad10:	dc35      	bgt.n	801ad7e <_printf_float+0x3ae>
 801ad12:	f04f 0800 	mov.w	r8, #0
 801ad16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ad1a:	f104 0a1a 	add.w	sl, r4, #26
 801ad1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ad22:	1a9b      	subs	r3, r3, r2
 801ad24:	eba3 0309 	sub.w	r3, r3, r9
 801ad28:	4543      	cmp	r3, r8
 801ad2a:	f77f af79 	ble.w	801ac20 <_printf_float+0x250>
 801ad2e:	2301      	movs	r3, #1
 801ad30:	4652      	mov	r2, sl
 801ad32:	4631      	mov	r1, r6
 801ad34:	4628      	mov	r0, r5
 801ad36:	47b8      	blx	r7
 801ad38:	3001      	adds	r0, #1
 801ad3a:	f43f aeaa 	beq.w	801aa92 <_printf_float+0xc2>
 801ad3e:	f108 0801 	add.w	r8, r8, #1
 801ad42:	e7ec      	b.n	801ad1e <_printf_float+0x34e>
 801ad44:	4613      	mov	r3, r2
 801ad46:	4631      	mov	r1, r6
 801ad48:	4642      	mov	r2, r8
 801ad4a:	4628      	mov	r0, r5
 801ad4c:	47b8      	blx	r7
 801ad4e:	3001      	adds	r0, #1
 801ad50:	d1c0      	bne.n	801acd4 <_printf_float+0x304>
 801ad52:	e69e      	b.n	801aa92 <_printf_float+0xc2>
 801ad54:	2301      	movs	r3, #1
 801ad56:	4631      	mov	r1, r6
 801ad58:	4628      	mov	r0, r5
 801ad5a:	9205      	str	r2, [sp, #20]
 801ad5c:	47b8      	blx	r7
 801ad5e:	3001      	adds	r0, #1
 801ad60:	f43f ae97 	beq.w	801aa92 <_printf_float+0xc2>
 801ad64:	9a05      	ldr	r2, [sp, #20]
 801ad66:	f10b 0b01 	add.w	fp, fp, #1
 801ad6a:	e7b9      	b.n	801ace0 <_printf_float+0x310>
 801ad6c:	ee18 3a10 	vmov	r3, s16
 801ad70:	4652      	mov	r2, sl
 801ad72:	4631      	mov	r1, r6
 801ad74:	4628      	mov	r0, r5
 801ad76:	47b8      	blx	r7
 801ad78:	3001      	adds	r0, #1
 801ad7a:	d1be      	bne.n	801acfa <_printf_float+0x32a>
 801ad7c:	e689      	b.n	801aa92 <_printf_float+0xc2>
 801ad7e:	9a05      	ldr	r2, [sp, #20]
 801ad80:	464b      	mov	r3, r9
 801ad82:	4442      	add	r2, r8
 801ad84:	4631      	mov	r1, r6
 801ad86:	4628      	mov	r0, r5
 801ad88:	47b8      	blx	r7
 801ad8a:	3001      	adds	r0, #1
 801ad8c:	d1c1      	bne.n	801ad12 <_printf_float+0x342>
 801ad8e:	e680      	b.n	801aa92 <_printf_float+0xc2>
 801ad90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ad92:	2a01      	cmp	r2, #1
 801ad94:	dc01      	bgt.n	801ad9a <_printf_float+0x3ca>
 801ad96:	07db      	lsls	r3, r3, #31
 801ad98:	d538      	bpl.n	801ae0c <_printf_float+0x43c>
 801ad9a:	2301      	movs	r3, #1
 801ad9c:	4642      	mov	r2, r8
 801ad9e:	4631      	mov	r1, r6
 801ada0:	4628      	mov	r0, r5
 801ada2:	47b8      	blx	r7
 801ada4:	3001      	adds	r0, #1
 801ada6:	f43f ae74 	beq.w	801aa92 <_printf_float+0xc2>
 801adaa:	ee18 3a10 	vmov	r3, s16
 801adae:	4652      	mov	r2, sl
 801adb0:	4631      	mov	r1, r6
 801adb2:	4628      	mov	r0, r5
 801adb4:	47b8      	blx	r7
 801adb6:	3001      	adds	r0, #1
 801adb8:	f43f ae6b 	beq.w	801aa92 <_printf_float+0xc2>
 801adbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801adc0:	2200      	movs	r2, #0
 801adc2:	2300      	movs	r3, #0
 801adc4:	f7e5 fe80 	bl	8000ac8 <__aeabi_dcmpeq>
 801adc8:	b9d8      	cbnz	r0, 801ae02 <_printf_float+0x432>
 801adca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801adcc:	f108 0201 	add.w	r2, r8, #1
 801add0:	3b01      	subs	r3, #1
 801add2:	4631      	mov	r1, r6
 801add4:	4628      	mov	r0, r5
 801add6:	47b8      	blx	r7
 801add8:	3001      	adds	r0, #1
 801adda:	d10e      	bne.n	801adfa <_printf_float+0x42a>
 801addc:	e659      	b.n	801aa92 <_printf_float+0xc2>
 801adde:	2301      	movs	r3, #1
 801ade0:	4652      	mov	r2, sl
 801ade2:	4631      	mov	r1, r6
 801ade4:	4628      	mov	r0, r5
 801ade6:	47b8      	blx	r7
 801ade8:	3001      	adds	r0, #1
 801adea:	f43f ae52 	beq.w	801aa92 <_printf_float+0xc2>
 801adee:	f108 0801 	add.w	r8, r8, #1
 801adf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801adf4:	3b01      	subs	r3, #1
 801adf6:	4543      	cmp	r3, r8
 801adf8:	dcf1      	bgt.n	801adde <_printf_float+0x40e>
 801adfa:	464b      	mov	r3, r9
 801adfc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801ae00:	e6dc      	b.n	801abbc <_printf_float+0x1ec>
 801ae02:	f04f 0800 	mov.w	r8, #0
 801ae06:	f104 0a1a 	add.w	sl, r4, #26
 801ae0a:	e7f2      	b.n	801adf2 <_printf_float+0x422>
 801ae0c:	2301      	movs	r3, #1
 801ae0e:	4642      	mov	r2, r8
 801ae10:	e7df      	b.n	801add2 <_printf_float+0x402>
 801ae12:	2301      	movs	r3, #1
 801ae14:	464a      	mov	r2, r9
 801ae16:	4631      	mov	r1, r6
 801ae18:	4628      	mov	r0, r5
 801ae1a:	47b8      	blx	r7
 801ae1c:	3001      	adds	r0, #1
 801ae1e:	f43f ae38 	beq.w	801aa92 <_printf_float+0xc2>
 801ae22:	f108 0801 	add.w	r8, r8, #1
 801ae26:	68e3      	ldr	r3, [r4, #12]
 801ae28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ae2a:	1a5b      	subs	r3, r3, r1
 801ae2c:	4543      	cmp	r3, r8
 801ae2e:	dcf0      	bgt.n	801ae12 <_printf_float+0x442>
 801ae30:	e6fa      	b.n	801ac28 <_printf_float+0x258>
 801ae32:	f04f 0800 	mov.w	r8, #0
 801ae36:	f104 0919 	add.w	r9, r4, #25
 801ae3a:	e7f4      	b.n	801ae26 <_printf_float+0x456>

0801ae3c <_printf_common>:
 801ae3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae40:	4616      	mov	r6, r2
 801ae42:	4699      	mov	r9, r3
 801ae44:	688a      	ldr	r2, [r1, #8]
 801ae46:	690b      	ldr	r3, [r1, #16]
 801ae48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ae4c:	4293      	cmp	r3, r2
 801ae4e:	bfb8      	it	lt
 801ae50:	4613      	movlt	r3, r2
 801ae52:	6033      	str	r3, [r6, #0]
 801ae54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ae58:	4607      	mov	r7, r0
 801ae5a:	460c      	mov	r4, r1
 801ae5c:	b10a      	cbz	r2, 801ae62 <_printf_common+0x26>
 801ae5e:	3301      	adds	r3, #1
 801ae60:	6033      	str	r3, [r6, #0]
 801ae62:	6823      	ldr	r3, [r4, #0]
 801ae64:	0699      	lsls	r1, r3, #26
 801ae66:	bf42      	ittt	mi
 801ae68:	6833      	ldrmi	r3, [r6, #0]
 801ae6a:	3302      	addmi	r3, #2
 801ae6c:	6033      	strmi	r3, [r6, #0]
 801ae6e:	6825      	ldr	r5, [r4, #0]
 801ae70:	f015 0506 	ands.w	r5, r5, #6
 801ae74:	d106      	bne.n	801ae84 <_printf_common+0x48>
 801ae76:	f104 0a19 	add.w	sl, r4, #25
 801ae7a:	68e3      	ldr	r3, [r4, #12]
 801ae7c:	6832      	ldr	r2, [r6, #0]
 801ae7e:	1a9b      	subs	r3, r3, r2
 801ae80:	42ab      	cmp	r3, r5
 801ae82:	dc26      	bgt.n	801aed2 <_printf_common+0x96>
 801ae84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ae88:	1e13      	subs	r3, r2, #0
 801ae8a:	6822      	ldr	r2, [r4, #0]
 801ae8c:	bf18      	it	ne
 801ae8e:	2301      	movne	r3, #1
 801ae90:	0692      	lsls	r2, r2, #26
 801ae92:	d42b      	bmi.n	801aeec <_printf_common+0xb0>
 801ae94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ae98:	4649      	mov	r1, r9
 801ae9a:	4638      	mov	r0, r7
 801ae9c:	47c0      	blx	r8
 801ae9e:	3001      	adds	r0, #1
 801aea0:	d01e      	beq.n	801aee0 <_printf_common+0xa4>
 801aea2:	6823      	ldr	r3, [r4, #0]
 801aea4:	68e5      	ldr	r5, [r4, #12]
 801aea6:	6832      	ldr	r2, [r6, #0]
 801aea8:	f003 0306 	and.w	r3, r3, #6
 801aeac:	2b04      	cmp	r3, #4
 801aeae:	bf08      	it	eq
 801aeb0:	1aad      	subeq	r5, r5, r2
 801aeb2:	68a3      	ldr	r3, [r4, #8]
 801aeb4:	6922      	ldr	r2, [r4, #16]
 801aeb6:	bf0c      	ite	eq
 801aeb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801aebc:	2500      	movne	r5, #0
 801aebe:	4293      	cmp	r3, r2
 801aec0:	bfc4      	itt	gt
 801aec2:	1a9b      	subgt	r3, r3, r2
 801aec4:	18ed      	addgt	r5, r5, r3
 801aec6:	2600      	movs	r6, #0
 801aec8:	341a      	adds	r4, #26
 801aeca:	42b5      	cmp	r5, r6
 801aecc:	d11a      	bne.n	801af04 <_printf_common+0xc8>
 801aece:	2000      	movs	r0, #0
 801aed0:	e008      	b.n	801aee4 <_printf_common+0xa8>
 801aed2:	2301      	movs	r3, #1
 801aed4:	4652      	mov	r2, sl
 801aed6:	4649      	mov	r1, r9
 801aed8:	4638      	mov	r0, r7
 801aeda:	47c0      	blx	r8
 801aedc:	3001      	adds	r0, #1
 801aede:	d103      	bne.n	801aee8 <_printf_common+0xac>
 801aee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aee8:	3501      	adds	r5, #1
 801aeea:	e7c6      	b.n	801ae7a <_printf_common+0x3e>
 801aeec:	18e1      	adds	r1, r4, r3
 801aeee:	1c5a      	adds	r2, r3, #1
 801aef0:	2030      	movs	r0, #48	; 0x30
 801aef2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801aef6:	4422      	add	r2, r4
 801aef8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801aefc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801af00:	3302      	adds	r3, #2
 801af02:	e7c7      	b.n	801ae94 <_printf_common+0x58>
 801af04:	2301      	movs	r3, #1
 801af06:	4622      	mov	r2, r4
 801af08:	4649      	mov	r1, r9
 801af0a:	4638      	mov	r0, r7
 801af0c:	47c0      	blx	r8
 801af0e:	3001      	adds	r0, #1
 801af10:	d0e6      	beq.n	801aee0 <_printf_common+0xa4>
 801af12:	3601      	adds	r6, #1
 801af14:	e7d9      	b.n	801aeca <_printf_common+0x8e>
	...

0801af18 <_printf_i>:
 801af18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801af1c:	460c      	mov	r4, r1
 801af1e:	4691      	mov	r9, r2
 801af20:	7e27      	ldrb	r7, [r4, #24]
 801af22:	990c      	ldr	r1, [sp, #48]	; 0x30
 801af24:	2f78      	cmp	r7, #120	; 0x78
 801af26:	4680      	mov	r8, r0
 801af28:	469a      	mov	sl, r3
 801af2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801af2e:	d807      	bhi.n	801af40 <_printf_i+0x28>
 801af30:	2f62      	cmp	r7, #98	; 0x62
 801af32:	d80a      	bhi.n	801af4a <_printf_i+0x32>
 801af34:	2f00      	cmp	r7, #0
 801af36:	f000 80d8 	beq.w	801b0ea <_printf_i+0x1d2>
 801af3a:	2f58      	cmp	r7, #88	; 0x58
 801af3c:	f000 80a3 	beq.w	801b086 <_printf_i+0x16e>
 801af40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801af44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801af48:	e03a      	b.n	801afc0 <_printf_i+0xa8>
 801af4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801af4e:	2b15      	cmp	r3, #21
 801af50:	d8f6      	bhi.n	801af40 <_printf_i+0x28>
 801af52:	a001      	add	r0, pc, #4	; (adr r0, 801af58 <_printf_i+0x40>)
 801af54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801af58:	0801afb1 	.word	0x0801afb1
 801af5c:	0801afc5 	.word	0x0801afc5
 801af60:	0801af41 	.word	0x0801af41
 801af64:	0801af41 	.word	0x0801af41
 801af68:	0801af41 	.word	0x0801af41
 801af6c:	0801af41 	.word	0x0801af41
 801af70:	0801afc5 	.word	0x0801afc5
 801af74:	0801af41 	.word	0x0801af41
 801af78:	0801af41 	.word	0x0801af41
 801af7c:	0801af41 	.word	0x0801af41
 801af80:	0801af41 	.word	0x0801af41
 801af84:	0801b0d1 	.word	0x0801b0d1
 801af88:	0801aff5 	.word	0x0801aff5
 801af8c:	0801b0b3 	.word	0x0801b0b3
 801af90:	0801af41 	.word	0x0801af41
 801af94:	0801af41 	.word	0x0801af41
 801af98:	0801b0f3 	.word	0x0801b0f3
 801af9c:	0801af41 	.word	0x0801af41
 801afa0:	0801aff5 	.word	0x0801aff5
 801afa4:	0801af41 	.word	0x0801af41
 801afa8:	0801af41 	.word	0x0801af41
 801afac:	0801b0bb 	.word	0x0801b0bb
 801afb0:	680b      	ldr	r3, [r1, #0]
 801afb2:	1d1a      	adds	r2, r3, #4
 801afb4:	681b      	ldr	r3, [r3, #0]
 801afb6:	600a      	str	r2, [r1, #0]
 801afb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801afbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801afc0:	2301      	movs	r3, #1
 801afc2:	e0a3      	b.n	801b10c <_printf_i+0x1f4>
 801afc4:	6825      	ldr	r5, [r4, #0]
 801afc6:	6808      	ldr	r0, [r1, #0]
 801afc8:	062e      	lsls	r6, r5, #24
 801afca:	f100 0304 	add.w	r3, r0, #4
 801afce:	d50a      	bpl.n	801afe6 <_printf_i+0xce>
 801afd0:	6805      	ldr	r5, [r0, #0]
 801afd2:	600b      	str	r3, [r1, #0]
 801afd4:	2d00      	cmp	r5, #0
 801afd6:	da03      	bge.n	801afe0 <_printf_i+0xc8>
 801afd8:	232d      	movs	r3, #45	; 0x2d
 801afda:	426d      	negs	r5, r5
 801afdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801afe0:	485e      	ldr	r0, [pc, #376]	; (801b15c <_printf_i+0x244>)
 801afe2:	230a      	movs	r3, #10
 801afe4:	e019      	b.n	801b01a <_printf_i+0x102>
 801afe6:	f015 0f40 	tst.w	r5, #64	; 0x40
 801afea:	6805      	ldr	r5, [r0, #0]
 801afec:	600b      	str	r3, [r1, #0]
 801afee:	bf18      	it	ne
 801aff0:	b22d      	sxthne	r5, r5
 801aff2:	e7ef      	b.n	801afd4 <_printf_i+0xbc>
 801aff4:	680b      	ldr	r3, [r1, #0]
 801aff6:	6825      	ldr	r5, [r4, #0]
 801aff8:	1d18      	adds	r0, r3, #4
 801affa:	6008      	str	r0, [r1, #0]
 801affc:	0628      	lsls	r0, r5, #24
 801affe:	d501      	bpl.n	801b004 <_printf_i+0xec>
 801b000:	681d      	ldr	r5, [r3, #0]
 801b002:	e002      	b.n	801b00a <_printf_i+0xf2>
 801b004:	0669      	lsls	r1, r5, #25
 801b006:	d5fb      	bpl.n	801b000 <_printf_i+0xe8>
 801b008:	881d      	ldrh	r5, [r3, #0]
 801b00a:	4854      	ldr	r0, [pc, #336]	; (801b15c <_printf_i+0x244>)
 801b00c:	2f6f      	cmp	r7, #111	; 0x6f
 801b00e:	bf0c      	ite	eq
 801b010:	2308      	moveq	r3, #8
 801b012:	230a      	movne	r3, #10
 801b014:	2100      	movs	r1, #0
 801b016:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b01a:	6866      	ldr	r6, [r4, #4]
 801b01c:	60a6      	str	r6, [r4, #8]
 801b01e:	2e00      	cmp	r6, #0
 801b020:	bfa2      	ittt	ge
 801b022:	6821      	ldrge	r1, [r4, #0]
 801b024:	f021 0104 	bicge.w	r1, r1, #4
 801b028:	6021      	strge	r1, [r4, #0]
 801b02a:	b90d      	cbnz	r5, 801b030 <_printf_i+0x118>
 801b02c:	2e00      	cmp	r6, #0
 801b02e:	d04d      	beq.n	801b0cc <_printf_i+0x1b4>
 801b030:	4616      	mov	r6, r2
 801b032:	fbb5 f1f3 	udiv	r1, r5, r3
 801b036:	fb03 5711 	mls	r7, r3, r1, r5
 801b03a:	5dc7      	ldrb	r7, [r0, r7]
 801b03c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b040:	462f      	mov	r7, r5
 801b042:	42bb      	cmp	r3, r7
 801b044:	460d      	mov	r5, r1
 801b046:	d9f4      	bls.n	801b032 <_printf_i+0x11a>
 801b048:	2b08      	cmp	r3, #8
 801b04a:	d10b      	bne.n	801b064 <_printf_i+0x14c>
 801b04c:	6823      	ldr	r3, [r4, #0]
 801b04e:	07df      	lsls	r7, r3, #31
 801b050:	d508      	bpl.n	801b064 <_printf_i+0x14c>
 801b052:	6923      	ldr	r3, [r4, #16]
 801b054:	6861      	ldr	r1, [r4, #4]
 801b056:	4299      	cmp	r1, r3
 801b058:	bfde      	ittt	le
 801b05a:	2330      	movle	r3, #48	; 0x30
 801b05c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b060:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801b064:	1b92      	subs	r2, r2, r6
 801b066:	6122      	str	r2, [r4, #16]
 801b068:	f8cd a000 	str.w	sl, [sp]
 801b06c:	464b      	mov	r3, r9
 801b06e:	aa03      	add	r2, sp, #12
 801b070:	4621      	mov	r1, r4
 801b072:	4640      	mov	r0, r8
 801b074:	f7ff fee2 	bl	801ae3c <_printf_common>
 801b078:	3001      	adds	r0, #1
 801b07a:	d14c      	bne.n	801b116 <_printf_i+0x1fe>
 801b07c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b080:	b004      	add	sp, #16
 801b082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b086:	4835      	ldr	r0, [pc, #212]	; (801b15c <_printf_i+0x244>)
 801b088:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b08c:	6823      	ldr	r3, [r4, #0]
 801b08e:	680e      	ldr	r6, [r1, #0]
 801b090:	061f      	lsls	r7, r3, #24
 801b092:	f856 5b04 	ldr.w	r5, [r6], #4
 801b096:	600e      	str	r6, [r1, #0]
 801b098:	d514      	bpl.n	801b0c4 <_printf_i+0x1ac>
 801b09a:	07d9      	lsls	r1, r3, #31
 801b09c:	bf44      	itt	mi
 801b09e:	f043 0320 	orrmi.w	r3, r3, #32
 801b0a2:	6023      	strmi	r3, [r4, #0]
 801b0a4:	b91d      	cbnz	r5, 801b0ae <_printf_i+0x196>
 801b0a6:	6823      	ldr	r3, [r4, #0]
 801b0a8:	f023 0320 	bic.w	r3, r3, #32
 801b0ac:	6023      	str	r3, [r4, #0]
 801b0ae:	2310      	movs	r3, #16
 801b0b0:	e7b0      	b.n	801b014 <_printf_i+0xfc>
 801b0b2:	6823      	ldr	r3, [r4, #0]
 801b0b4:	f043 0320 	orr.w	r3, r3, #32
 801b0b8:	6023      	str	r3, [r4, #0]
 801b0ba:	2378      	movs	r3, #120	; 0x78
 801b0bc:	4828      	ldr	r0, [pc, #160]	; (801b160 <_printf_i+0x248>)
 801b0be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b0c2:	e7e3      	b.n	801b08c <_printf_i+0x174>
 801b0c4:	065e      	lsls	r6, r3, #25
 801b0c6:	bf48      	it	mi
 801b0c8:	b2ad      	uxthmi	r5, r5
 801b0ca:	e7e6      	b.n	801b09a <_printf_i+0x182>
 801b0cc:	4616      	mov	r6, r2
 801b0ce:	e7bb      	b.n	801b048 <_printf_i+0x130>
 801b0d0:	680b      	ldr	r3, [r1, #0]
 801b0d2:	6826      	ldr	r6, [r4, #0]
 801b0d4:	6960      	ldr	r0, [r4, #20]
 801b0d6:	1d1d      	adds	r5, r3, #4
 801b0d8:	600d      	str	r5, [r1, #0]
 801b0da:	0635      	lsls	r5, r6, #24
 801b0dc:	681b      	ldr	r3, [r3, #0]
 801b0de:	d501      	bpl.n	801b0e4 <_printf_i+0x1cc>
 801b0e0:	6018      	str	r0, [r3, #0]
 801b0e2:	e002      	b.n	801b0ea <_printf_i+0x1d2>
 801b0e4:	0671      	lsls	r1, r6, #25
 801b0e6:	d5fb      	bpl.n	801b0e0 <_printf_i+0x1c8>
 801b0e8:	8018      	strh	r0, [r3, #0]
 801b0ea:	2300      	movs	r3, #0
 801b0ec:	6123      	str	r3, [r4, #16]
 801b0ee:	4616      	mov	r6, r2
 801b0f0:	e7ba      	b.n	801b068 <_printf_i+0x150>
 801b0f2:	680b      	ldr	r3, [r1, #0]
 801b0f4:	1d1a      	adds	r2, r3, #4
 801b0f6:	600a      	str	r2, [r1, #0]
 801b0f8:	681e      	ldr	r6, [r3, #0]
 801b0fa:	6862      	ldr	r2, [r4, #4]
 801b0fc:	2100      	movs	r1, #0
 801b0fe:	4630      	mov	r0, r6
 801b100:	f7e5 f86e 	bl	80001e0 <memchr>
 801b104:	b108      	cbz	r0, 801b10a <_printf_i+0x1f2>
 801b106:	1b80      	subs	r0, r0, r6
 801b108:	6060      	str	r0, [r4, #4]
 801b10a:	6863      	ldr	r3, [r4, #4]
 801b10c:	6123      	str	r3, [r4, #16]
 801b10e:	2300      	movs	r3, #0
 801b110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b114:	e7a8      	b.n	801b068 <_printf_i+0x150>
 801b116:	6923      	ldr	r3, [r4, #16]
 801b118:	4632      	mov	r2, r6
 801b11a:	4649      	mov	r1, r9
 801b11c:	4640      	mov	r0, r8
 801b11e:	47d0      	blx	sl
 801b120:	3001      	adds	r0, #1
 801b122:	d0ab      	beq.n	801b07c <_printf_i+0x164>
 801b124:	6823      	ldr	r3, [r4, #0]
 801b126:	079b      	lsls	r3, r3, #30
 801b128:	d413      	bmi.n	801b152 <_printf_i+0x23a>
 801b12a:	68e0      	ldr	r0, [r4, #12]
 801b12c:	9b03      	ldr	r3, [sp, #12]
 801b12e:	4298      	cmp	r0, r3
 801b130:	bfb8      	it	lt
 801b132:	4618      	movlt	r0, r3
 801b134:	e7a4      	b.n	801b080 <_printf_i+0x168>
 801b136:	2301      	movs	r3, #1
 801b138:	4632      	mov	r2, r6
 801b13a:	4649      	mov	r1, r9
 801b13c:	4640      	mov	r0, r8
 801b13e:	47d0      	blx	sl
 801b140:	3001      	adds	r0, #1
 801b142:	d09b      	beq.n	801b07c <_printf_i+0x164>
 801b144:	3501      	adds	r5, #1
 801b146:	68e3      	ldr	r3, [r4, #12]
 801b148:	9903      	ldr	r1, [sp, #12]
 801b14a:	1a5b      	subs	r3, r3, r1
 801b14c:	42ab      	cmp	r3, r5
 801b14e:	dcf2      	bgt.n	801b136 <_printf_i+0x21e>
 801b150:	e7eb      	b.n	801b12a <_printf_i+0x212>
 801b152:	2500      	movs	r5, #0
 801b154:	f104 0619 	add.w	r6, r4, #25
 801b158:	e7f5      	b.n	801b146 <_printf_i+0x22e>
 801b15a:	bf00      	nop
 801b15c:	08020c22 	.word	0x08020c22
 801b160:	08020c33 	.word	0x08020c33

0801b164 <_scanf_float>:
 801b164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b168:	b087      	sub	sp, #28
 801b16a:	4617      	mov	r7, r2
 801b16c:	9303      	str	r3, [sp, #12]
 801b16e:	688b      	ldr	r3, [r1, #8]
 801b170:	1e5a      	subs	r2, r3, #1
 801b172:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b176:	bf83      	ittte	hi
 801b178:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b17c:	195b      	addhi	r3, r3, r5
 801b17e:	9302      	strhi	r3, [sp, #8]
 801b180:	2300      	movls	r3, #0
 801b182:	bf86      	itte	hi
 801b184:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b188:	608b      	strhi	r3, [r1, #8]
 801b18a:	9302      	strls	r3, [sp, #8]
 801b18c:	680b      	ldr	r3, [r1, #0]
 801b18e:	468b      	mov	fp, r1
 801b190:	2500      	movs	r5, #0
 801b192:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801b196:	f84b 3b1c 	str.w	r3, [fp], #28
 801b19a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b19e:	4680      	mov	r8, r0
 801b1a0:	460c      	mov	r4, r1
 801b1a2:	465e      	mov	r6, fp
 801b1a4:	46aa      	mov	sl, r5
 801b1a6:	46a9      	mov	r9, r5
 801b1a8:	9501      	str	r5, [sp, #4]
 801b1aa:	68a2      	ldr	r2, [r4, #8]
 801b1ac:	b152      	cbz	r2, 801b1c4 <_scanf_float+0x60>
 801b1ae:	683b      	ldr	r3, [r7, #0]
 801b1b0:	781b      	ldrb	r3, [r3, #0]
 801b1b2:	2b4e      	cmp	r3, #78	; 0x4e
 801b1b4:	d864      	bhi.n	801b280 <_scanf_float+0x11c>
 801b1b6:	2b40      	cmp	r3, #64	; 0x40
 801b1b8:	d83c      	bhi.n	801b234 <_scanf_float+0xd0>
 801b1ba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801b1be:	b2c8      	uxtb	r0, r1
 801b1c0:	280e      	cmp	r0, #14
 801b1c2:	d93a      	bls.n	801b23a <_scanf_float+0xd6>
 801b1c4:	f1b9 0f00 	cmp.w	r9, #0
 801b1c8:	d003      	beq.n	801b1d2 <_scanf_float+0x6e>
 801b1ca:	6823      	ldr	r3, [r4, #0]
 801b1cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b1d0:	6023      	str	r3, [r4, #0]
 801b1d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801b1d6:	f1ba 0f01 	cmp.w	sl, #1
 801b1da:	f200 8113 	bhi.w	801b404 <_scanf_float+0x2a0>
 801b1de:	455e      	cmp	r6, fp
 801b1e0:	f200 8105 	bhi.w	801b3ee <_scanf_float+0x28a>
 801b1e4:	2501      	movs	r5, #1
 801b1e6:	4628      	mov	r0, r5
 801b1e8:	b007      	add	sp, #28
 801b1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1ee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801b1f2:	2a0d      	cmp	r2, #13
 801b1f4:	d8e6      	bhi.n	801b1c4 <_scanf_float+0x60>
 801b1f6:	a101      	add	r1, pc, #4	; (adr r1, 801b1fc <_scanf_float+0x98>)
 801b1f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b1fc:	0801b33b 	.word	0x0801b33b
 801b200:	0801b1c5 	.word	0x0801b1c5
 801b204:	0801b1c5 	.word	0x0801b1c5
 801b208:	0801b1c5 	.word	0x0801b1c5
 801b20c:	0801b39b 	.word	0x0801b39b
 801b210:	0801b373 	.word	0x0801b373
 801b214:	0801b1c5 	.word	0x0801b1c5
 801b218:	0801b1c5 	.word	0x0801b1c5
 801b21c:	0801b349 	.word	0x0801b349
 801b220:	0801b1c5 	.word	0x0801b1c5
 801b224:	0801b1c5 	.word	0x0801b1c5
 801b228:	0801b1c5 	.word	0x0801b1c5
 801b22c:	0801b1c5 	.word	0x0801b1c5
 801b230:	0801b301 	.word	0x0801b301
 801b234:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801b238:	e7db      	b.n	801b1f2 <_scanf_float+0x8e>
 801b23a:	290e      	cmp	r1, #14
 801b23c:	d8c2      	bhi.n	801b1c4 <_scanf_float+0x60>
 801b23e:	a001      	add	r0, pc, #4	; (adr r0, 801b244 <_scanf_float+0xe0>)
 801b240:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b244:	0801b2f3 	.word	0x0801b2f3
 801b248:	0801b1c5 	.word	0x0801b1c5
 801b24c:	0801b2f3 	.word	0x0801b2f3
 801b250:	0801b387 	.word	0x0801b387
 801b254:	0801b1c5 	.word	0x0801b1c5
 801b258:	0801b2a1 	.word	0x0801b2a1
 801b25c:	0801b2dd 	.word	0x0801b2dd
 801b260:	0801b2dd 	.word	0x0801b2dd
 801b264:	0801b2dd 	.word	0x0801b2dd
 801b268:	0801b2dd 	.word	0x0801b2dd
 801b26c:	0801b2dd 	.word	0x0801b2dd
 801b270:	0801b2dd 	.word	0x0801b2dd
 801b274:	0801b2dd 	.word	0x0801b2dd
 801b278:	0801b2dd 	.word	0x0801b2dd
 801b27c:	0801b2dd 	.word	0x0801b2dd
 801b280:	2b6e      	cmp	r3, #110	; 0x6e
 801b282:	d809      	bhi.n	801b298 <_scanf_float+0x134>
 801b284:	2b60      	cmp	r3, #96	; 0x60
 801b286:	d8b2      	bhi.n	801b1ee <_scanf_float+0x8a>
 801b288:	2b54      	cmp	r3, #84	; 0x54
 801b28a:	d077      	beq.n	801b37c <_scanf_float+0x218>
 801b28c:	2b59      	cmp	r3, #89	; 0x59
 801b28e:	d199      	bne.n	801b1c4 <_scanf_float+0x60>
 801b290:	2d07      	cmp	r5, #7
 801b292:	d197      	bne.n	801b1c4 <_scanf_float+0x60>
 801b294:	2508      	movs	r5, #8
 801b296:	e029      	b.n	801b2ec <_scanf_float+0x188>
 801b298:	2b74      	cmp	r3, #116	; 0x74
 801b29a:	d06f      	beq.n	801b37c <_scanf_float+0x218>
 801b29c:	2b79      	cmp	r3, #121	; 0x79
 801b29e:	e7f6      	b.n	801b28e <_scanf_float+0x12a>
 801b2a0:	6821      	ldr	r1, [r4, #0]
 801b2a2:	05c8      	lsls	r0, r1, #23
 801b2a4:	d51a      	bpl.n	801b2dc <_scanf_float+0x178>
 801b2a6:	9b02      	ldr	r3, [sp, #8]
 801b2a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801b2ac:	6021      	str	r1, [r4, #0]
 801b2ae:	f109 0901 	add.w	r9, r9, #1
 801b2b2:	b11b      	cbz	r3, 801b2bc <_scanf_float+0x158>
 801b2b4:	3b01      	subs	r3, #1
 801b2b6:	3201      	adds	r2, #1
 801b2b8:	9302      	str	r3, [sp, #8]
 801b2ba:	60a2      	str	r2, [r4, #8]
 801b2bc:	68a3      	ldr	r3, [r4, #8]
 801b2be:	3b01      	subs	r3, #1
 801b2c0:	60a3      	str	r3, [r4, #8]
 801b2c2:	6923      	ldr	r3, [r4, #16]
 801b2c4:	3301      	adds	r3, #1
 801b2c6:	6123      	str	r3, [r4, #16]
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	3b01      	subs	r3, #1
 801b2cc:	2b00      	cmp	r3, #0
 801b2ce:	607b      	str	r3, [r7, #4]
 801b2d0:	f340 8084 	ble.w	801b3dc <_scanf_float+0x278>
 801b2d4:	683b      	ldr	r3, [r7, #0]
 801b2d6:	3301      	adds	r3, #1
 801b2d8:	603b      	str	r3, [r7, #0]
 801b2da:	e766      	b.n	801b1aa <_scanf_float+0x46>
 801b2dc:	eb1a 0f05 	cmn.w	sl, r5
 801b2e0:	f47f af70 	bne.w	801b1c4 <_scanf_float+0x60>
 801b2e4:	6822      	ldr	r2, [r4, #0]
 801b2e6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801b2ea:	6022      	str	r2, [r4, #0]
 801b2ec:	f806 3b01 	strb.w	r3, [r6], #1
 801b2f0:	e7e4      	b.n	801b2bc <_scanf_float+0x158>
 801b2f2:	6822      	ldr	r2, [r4, #0]
 801b2f4:	0610      	lsls	r0, r2, #24
 801b2f6:	f57f af65 	bpl.w	801b1c4 <_scanf_float+0x60>
 801b2fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b2fe:	e7f4      	b.n	801b2ea <_scanf_float+0x186>
 801b300:	f1ba 0f00 	cmp.w	sl, #0
 801b304:	d10e      	bne.n	801b324 <_scanf_float+0x1c0>
 801b306:	f1b9 0f00 	cmp.w	r9, #0
 801b30a:	d10e      	bne.n	801b32a <_scanf_float+0x1c6>
 801b30c:	6822      	ldr	r2, [r4, #0]
 801b30e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b312:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b316:	d108      	bne.n	801b32a <_scanf_float+0x1c6>
 801b318:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b31c:	6022      	str	r2, [r4, #0]
 801b31e:	f04f 0a01 	mov.w	sl, #1
 801b322:	e7e3      	b.n	801b2ec <_scanf_float+0x188>
 801b324:	f1ba 0f02 	cmp.w	sl, #2
 801b328:	d055      	beq.n	801b3d6 <_scanf_float+0x272>
 801b32a:	2d01      	cmp	r5, #1
 801b32c:	d002      	beq.n	801b334 <_scanf_float+0x1d0>
 801b32e:	2d04      	cmp	r5, #4
 801b330:	f47f af48 	bne.w	801b1c4 <_scanf_float+0x60>
 801b334:	3501      	adds	r5, #1
 801b336:	b2ed      	uxtb	r5, r5
 801b338:	e7d8      	b.n	801b2ec <_scanf_float+0x188>
 801b33a:	f1ba 0f01 	cmp.w	sl, #1
 801b33e:	f47f af41 	bne.w	801b1c4 <_scanf_float+0x60>
 801b342:	f04f 0a02 	mov.w	sl, #2
 801b346:	e7d1      	b.n	801b2ec <_scanf_float+0x188>
 801b348:	b97d      	cbnz	r5, 801b36a <_scanf_float+0x206>
 801b34a:	f1b9 0f00 	cmp.w	r9, #0
 801b34e:	f47f af3c 	bne.w	801b1ca <_scanf_float+0x66>
 801b352:	6822      	ldr	r2, [r4, #0]
 801b354:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b358:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b35c:	f47f af39 	bne.w	801b1d2 <_scanf_float+0x6e>
 801b360:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b364:	6022      	str	r2, [r4, #0]
 801b366:	2501      	movs	r5, #1
 801b368:	e7c0      	b.n	801b2ec <_scanf_float+0x188>
 801b36a:	2d03      	cmp	r5, #3
 801b36c:	d0e2      	beq.n	801b334 <_scanf_float+0x1d0>
 801b36e:	2d05      	cmp	r5, #5
 801b370:	e7de      	b.n	801b330 <_scanf_float+0x1cc>
 801b372:	2d02      	cmp	r5, #2
 801b374:	f47f af26 	bne.w	801b1c4 <_scanf_float+0x60>
 801b378:	2503      	movs	r5, #3
 801b37a:	e7b7      	b.n	801b2ec <_scanf_float+0x188>
 801b37c:	2d06      	cmp	r5, #6
 801b37e:	f47f af21 	bne.w	801b1c4 <_scanf_float+0x60>
 801b382:	2507      	movs	r5, #7
 801b384:	e7b2      	b.n	801b2ec <_scanf_float+0x188>
 801b386:	6822      	ldr	r2, [r4, #0]
 801b388:	0591      	lsls	r1, r2, #22
 801b38a:	f57f af1b 	bpl.w	801b1c4 <_scanf_float+0x60>
 801b38e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801b392:	6022      	str	r2, [r4, #0]
 801b394:	f8cd 9004 	str.w	r9, [sp, #4]
 801b398:	e7a8      	b.n	801b2ec <_scanf_float+0x188>
 801b39a:	6822      	ldr	r2, [r4, #0]
 801b39c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801b3a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801b3a4:	d006      	beq.n	801b3b4 <_scanf_float+0x250>
 801b3a6:	0550      	lsls	r0, r2, #21
 801b3a8:	f57f af0c 	bpl.w	801b1c4 <_scanf_float+0x60>
 801b3ac:	f1b9 0f00 	cmp.w	r9, #0
 801b3b0:	f43f af0f 	beq.w	801b1d2 <_scanf_float+0x6e>
 801b3b4:	0591      	lsls	r1, r2, #22
 801b3b6:	bf58      	it	pl
 801b3b8:	9901      	ldrpl	r1, [sp, #4]
 801b3ba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b3be:	bf58      	it	pl
 801b3c0:	eba9 0101 	subpl.w	r1, r9, r1
 801b3c4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801b3c8:	bf58      	it	pl
 801b3ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b3ce:	6022      	str	r2, [r4, #0]
 801b3d0:	f04f 0900 	mov.w	r9, #0
 801b3d4:	e78a      	b.n	801b2ec <_scanf_float+0x188>
 801b3d6:	f04f 0a03 	mov.w	sl, #3
 801b3da:	e787      	b.n	801b2ec <_scanf_float+0x188>
 801b3dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b3e0:	4639      	mov	r1, r7
 801b3e2:	4640      	mov	r0, r8
 801b3e4:	4798      	blx	r3
 801b3e6:	2800      	cmp	r0, #0
 801b3e8:	f43f aedf 	beq.w	801b1aa <_scanf_float+0x46>
 801b3ec:	e6ea      	b.n	801b1c4 <_scanf_float+0x60>
 801b3ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b3f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b3f6:	463a      	mov	r2, r7
 801b3f8:	4640      	mov	r0, r8
 801b3fa:	4798      	blx	r3
 801b3fc:	6923      	ldr	r3, [r4, #16]
 801b3fe:	3b01      	subs	r3, #1
 801b400:	6123      	str	r3, [r4, #16]
 801b402:	e6ec      	b.n	801b1de <_scanf_float+0x7a>
 801b404:	1e6b      	subs	r3, r5, #1
 801b406:	2b06      	cmp	r3, #6
 801b408:	d825      	bhi.n	801b456 <_scanf_float+0x2f2>
 801b40a:	2d02      	cmp	r5, #2
 801b40c:	d836      	bhi.n	801b47c <_scanf_float+0x318>
 801b40e:	455e      	cmp	r6, fp
 801b410:	f67f aee8 	bls.w	801b1e4 <_scanf_float+0x80>
 801b414:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b418:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b41c:	463a      	mov	r2, r7
 801b41e:	4640      	mov	r0, r8
 801b420:	4798      	blx	r3
 801b422:	6923      	ldr	r3, [r4, #16]
 801b424:	3b01      	subs	r3, #1
 801b426:	6123      	str	r3, [r4, #16]
 801b428:	e7f1      	b.n	801b40e <_scanf_float+0x2aa>
 801b42a:	9802      	ldr	r0, [sp, #8]
 801b42c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b430:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801b434:	9002      	str	r0, [sp, #8]
 801b436:	463a      	mov	r2, r7
 801b438:	4640      	mov	r0, r8
 801b43a:	4798      	blx	r3
 801b43c:	6923      	ldr	r3, [r4, #16]
 801b43e:	3b01      	subs	r3, #1
 801b440:	6123      	str	r3, [r4, #16]
 801b442:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801b446:	fa5f fa8a 	uxtb.w	sl, sl
 801b44a:	f1ba 0f02 	cmp.w	sl, #2
 801b44e:	d1ec      	bne.n	801b42a <_scanf_float+0x2c6>
 801b450:	3d03      	subs	r5, #3
 801b452:	b2ed      	uxtb	r5, r5
 801b454:	1b76      	subs	r6, r6, r5
 801b456:	6823      	ldr	r3, [r4, #0]
 801b458:	05da      	lsls	r2, r3, #23
 801b45a:	d52f      	bpl.n	801b4bc <_scanf_float+0x358>
 801b45c:	055b      	lsls	r3, r3, #21
 801b45e:	d510      	bpl.n	801b482 <_scanf_float+0x31e>
 801b460:	455e      	cmp	r6, fp
 801b462:	f67f aebf 	bls.w	801b1e4 <_scanf_float+0x80>
 801b466:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b46a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b46e:	463a      	mov	r2, r7
 801b470:	4640      	mov	r0, r8
 801b472:	4798      	blx	r3
 801b474:	6923      	ldr	r3, [r4, #16]
 801b476:	3b01      	subs	r3, #1
 801b478:	6123      	str	r3, [r4, #16]
 801b47a:	e7f1      	b.n	801b460 <_scanf_float+0x2fc>
 801b47c:	46aa      	mov	sl, r5
 801b47e:	9602      	str	r6, [sp, #8]
 801b480:	e7df      	b.n	801b442 <_scanf_float+0x2de>
 801b482:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b486:	6923      	ldr	r3, [r4, #16]
 801b488:	2965      	cmp	r1, #101	; 0x65
 801b48a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801b48e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801b492:	6123      	str	r3, [r4, #16]
 801b494:	d00c      	beq.n	801b4b0 <_scanf_float+0x34c>
 801b496:	2945      	cmp	r1, #69	; 0x45
 801b498:	d00a      	beq.n	801b4b0 <_scanf_float+0x34c>
 801b49a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b49e:	463a      	mov	r2, r7
 801b4a0:	4640      	mov	r0, r8
 801b4a2:	4798      	blx	r3
 801b4a4:	6923      	ldr	r3, [r4, #16]
 801b4a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b4aa:	3b01      	subs	r3, #1
 801b4ac:	1eb5      	subs	r5, r6, #2
 801b4ae:	6123      	str	r3, [r4, #16]
 801b4b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b4b4:	463a      	mov	r2, r7
 801b4b6:	4640      	mov	r0, r8
 801b4b8:	4798      	blx	r3
 801b4ba:	462e      	mov	r6, r5
 801b4bc:	6825      	ldr	r5, [r4, #0]
 801b4be:	f015 0510 	ands.w	r5, r5, #16
 801b4c2:	d158      	bne.n	801b576 <_scanf_float+0x412>
 801b4c4:	7035      	strb	r5, [r6, #0]
 801b4c6:	6823      	ldr	r3, [r4, #0]
 801b4c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801b4cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b4d0:	d11c      	bne.n	801b50c <_scanf_float+0x3a8>
 801b4d2:	9b01      	ldr	r3, [sp, #4]
 801b4d4:	454b      	cmp	r3, r9
 801b4d6:	eba3 0209 	sub.w	r2, r3, r9
 801b4da:	d124      	bne.n	801b526 <_scanf_float+0x3c2>
 801b4dc:	2200      	movs	r2, #0
 801b4de:	4659      	mov	r1, fp
 801b4e0:	4640      	mov	r0, r8
 801b4e2:	f000 ff9f 	bl	801c424 <_strtod_r>
 801b4e6:	9b03      	ldr	r3, [sp, #12]
 801b4e8:	6821      	ldr	r1, [r4, #0]
 801b4ea:	681b      	ldr	r3, [r3, #0]
 801b4ec:	f011 0f02 	tst.w	r1, #2
 801b4f0:	ec57 6b10 	vmov	r6, r7, d0
 801b4f4:	f103 0204 	add.w	r2, r3, #4
 801b4f8:	d020      	beq.n	801b53c <_scanf_float+0x3d8>
 801b4fa:	9903      	ldr	r1, [sp, #12]
 801b4fc:	600a      	str	r2, [r1, #0]
 801b4fe:	681b      	ldr	r3, [r3, #0]
 801b500:	e9c3 6700 	strd	r6, r7, [r3]
 801b504:	68e3      	ldr	r3, [r4, #12]
 801b506:	3301      	adds	r3, #1
 801b508:	60e3      	str	r3, [r4, #12]
 801b50a:	e66c      	b.n	801b1e6 <_scanf_float+0x82>
 801b50c:	9b04      	ldr	r3, [sp, #16]
 801b50e:	2b00      	cmp	r3, #0
 801b510:	d0e4      	beq.n	801b4dc <_scanf_float+0x378>
 801b512:	9905      	ldr	r1, [sp, #20]
 801b514:	230a      	movs	r3, #10
 801b516:	462a      	mov	r2, r5
 801b518:	3101      	adds	r1, #1
 801b51a:	4640      	mov	r0, r8
 801b51c:	f001 f80c 	bl	801c538 <_strtol_r>
 801b520:	9b04      	ldr	r3, [sp, #16]
 801b522:	9e05      	ldr	r6, [sp, #20]
 801b524:	1ac2      	subs	r2, r0, r3
 801b526:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801b52a:	429e      	cmp	r6, r3
 801b52c:	bf28      	it	cs
 801b52e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801b532:	4912      	ldr	r1, [pc, #72]	; (801b57c <_scanf_float+0x418>)
 801b534:	4630      	mov	r0, r6
 801b536:	f000 f8db 	bl	801b6f0 <siprintf>
 801b53a:	e7cf      	b.n	801b4dc <_scanf_float+0x378>
 801b53c:	f011 0f04 	tst.w	r1, #4
 801b540:	9903      	ldr	r1, [sp, #12]
 801b542:	600a      	str	r2, [r1, #0]
 801b544:	d1db      	bne.n	801b4fe <_scanf_float+0x39a>
 801b546:	f8d3 8000 	ldr.w	r8, [r3]
 801b54a:	ee10 2a10 	vmov	r2, s0
 801b54e:	ee10 0a10 	vmov	r0, s0
 801b552:	463b      	mov	r3, r7
 801b554:	4639      	mov	r1, r7
 801b556:	f7e5 fae9 	bl	8000b2c <__aeabi_dcmpun>
 801b55a:	b128      	cbz	r0, 801b568 <_scanf_float+0x404>
 801b55c:	4808      	ldr	r0, [pc, #32]	; (801b580 <_scanf_float+0x41c>)
 801b55e:	f000 f84f 	bl	801b600 <nanf>
 801b562:	ed88 0a00 	vstr	s0, [r8]
 801b566:	e7cd      	b.n	801b504 <_scanf_float+0x3a0>
 801b568:	4630      	mov	r0, r6
 801b56a:	4639      	mov	r1, r7
 801b56c:	f7e5 fb3c 	bl	8000be8 <__aeabi_d2f>
 801b570:	f8c8 0000 	str.w	r0, [r8]
 801b574:	e7c6      	b.n	801b504 <_scanf_float+0x3a0>
 801b576:	2500      	movs	r5, #0
 801b578:	e635      	b.n	801b1e6 <_scanf_float+0x82>
 801b57a:	bf00      	nop
 801b57c:	08020c44 	.word	0x08020c44
 801b580:	08021060 	.word	0x08021060

0801b584 <realloc>:
 801b584:	4b02      	ldr	r3, [pc, #8]	; (801b590 <realloc+0xc>)
 801b586:	460a      	mov	r2, r1
 801b588:	4601      	mov	r1, r0
 801b58a:	6818      	ldr	r0, [r3, #0]
 801b58c:	f002 bede 	b.w	801e34c <_realloc_r>
 801b590:	2000008c 	.word	0x2000008c

0801b594 <_sbrk_r>:
 801b594:	b538      	push	{r3, r4, r5, lr}
 801b596:	4d06      	ldr	r5, [pc, #24]	; (801b5b0 <_sbrk_r+0x1c>)
 801b598:	2300      	movs	r3, #0
 801b59a:	4604      	mov	r4, r0
 801b59c:	4608      	mov	r0, r1
 801b59e:	602b      	str	r3, [r5, #0]
 801b5a0:	f7f1 f83c 	bl	800c61c <_sbrk>
 801b5a4:	1c43      	adds	r3, r0, #1
 801b5a6:	d102      	bne.n	801b5ae <_sbrk_r+0x1a>
 801b5a8:	682b      	ldr	r3, [r5, #0]
 801b5aa:	b103      	cbz	r3, 801b5ae <_sbrk_r+0x1a>
 801b5ac:	6023      	str	r3, [r4, #0]
 801b5ae:	bd38      	pop	{r3, r4, r5, pc}
 801b5b0:	2000aab8 	.word	0x2000aab8

0801b5b4 <ldexpf>:
 801b5b4:	b510      	push	{r4, lr}
 801b5b6:	ed2d 8b02 	vpush	{d8}
 801b5ba:	4604      	mov	r4, r0
 801b5bc:	eeb0 8a40 	vmov.f32	s16, s0
 801b5c0:	f003 f862 	bl	801e688 <finitef>
 801b5c4:	b1b8      	cbz	r0, 801b5f6 <ldexpf+0x42>
 801b5c6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5ce:	d012      	beq.n	801b5f6 <ldexpf+0x42>
 801b5d0:	eeb0 0a48 	vmov.f32	s0, s16
 801b5d4:	4620      	mov	r0, r4
 801b5d6:	f000 f819 	bl	801b60c <scalbnf>
 801b5da:	eeb0 8a40 	vmov.f32	s16, s0
 801b5de:	f003 f853 	bl	801e688 <finitef>
 801b5e2:	b120      	cbz	r0, 801b5ee <ldexpf+0x3a>
 801b5e4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b5e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5ec:	d103      	bne.n	801b5f6 <ldexpf+0x42>
 801b5ee:	f7ff f85d 	bl	801a6ac <__errno>
 801b5f2:	2322      	movs	r3, #34	; 0x22
 801b5f4:	6003      	str	r3, [r0, #0]
 801b5f6:	eeb0 0a48 	vmov.f32	s0, s16
 801b5fa:	ecbd 8b02 	vpop	{d8}
 801b5fe:	bd10      	pop	{r4, pc}

0801b600 <nanf>:
 801b600:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b608 <nanf+0x8>
 801b604:	4770      	bx	lr
 801b606:	bf00      	nop
 801b608:	7fc00000 	.word	0x7fc00000

0801b60c <scalbnf>:
 801b60c:	ee10 3a10 	vmov	r3, s0
 801b610:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801b614:	d025      	beq.n	801b662 <scalbnf+0x56>
 801b616:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801b61a:	d302      	bcc.n	801b622 <scalbnf+0x16>
 801b61c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b620:	4770      	bx	lr
 801b622:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801b626:	d122      	bne.n	801b66e <scalbnf+0x62>
 801b628:	4b2a      	ldr	r3, [pc, #168]	; (801b6d4 <scalbnf+0xc8>)
 801b62a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801b6d8 <scalbnf+0xcc>
 801b62e:	4298      	cmp	r0, r3
 801b630:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b634:	db16      	blt.n	801b664 <scalbnf+0x58>
 801b636:	ee10 3a10 	vmov	r3, s0
 801b63a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b63e:	3a19      	subs	r2, #25
 801b640:	4402      	add	r2, r0
 801b642:	2afe      	cmp	r2, #254	; 0xfe
 801b644:	dd15      	ble.n	801b672 <scalbnf+0x66>
 801b646:	ee10 3a10 	vmov	r3, s0
 801b64a:	eddf 7a24 	vldr	s15, [pc, #144]	; 801b6dc <scalbnf+0xd0>
 801b64e:	eddf 6a24 	vldr	s13, [pc, #144]	; 801b6e0 <scalbnf+0xd4>
 801b652:	2b00      	cmp	r3, #0
 801b654:	eeb0 7a67 	vmov.f32	s14, s15
 801b658:	bfb8      	it	lt
 801b65a:	eef0 7a66 	vmovlt.f32	s15, s13
 801b65e:	ee27 0a27 	vmul.f32	s0, s14, s15
 801b662:	4770      	bx	lr
 801b664:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801b6e4 <scalbnf+0xd8>
 801b668:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b66c:	4770      	bx	lr
 801b66e:	0dd2      	lsrs	r2, r2, #23
 801b670:	e7e6      	b.n	801b640 <scalbnf+0x34>
 801b672:	2a00      	cmp	r2, #0
 801b674:	dd06      	ble.n	801b684 <scalbnf+0x78>
 801b676:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b67a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801b67e:	ee00 3a10 	vmov	s0, r3
 801b682:	4770      	bx	lr
 801b684:	f112 0f16 	cmn.w	r2, #22
 801b688:	da1a      	bge.n	801b6c0 <scalbnf+0xb4>
 801b68a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b68e:	4298      	cmp	r0, r3
 801b690:	ee10 3a10 	vmov	r3, s0
 801b694:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b698:	dd0a      	ble.n	801b6b0 <scalbnf+0xa4>
 801b69a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801b6dc <scalbnf+0xd0>
 801b69e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801b6e0 <scalbnf+0xd4>
 801b6a2:	eef0 7a40 	vmov.f32	s15, s0
 801b6a6:	2b00      	cmp	r3, #0
 801b6a8:	bf18      	it	ne
 801b6aa:	eeb0 0a47 	vmovne.f32	s0, s14
 801b6ae:	e7db      	b.n	801b668 <scalbnf+0x5c>
 801b6b0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801b6e4 <scalbnf+0xd8>
 801b6b4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801b6e8 <scalbnf+0xdc>
 801b6b8:	eef0 7a40 	vmov.f32	s15, s0
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	e7f3      	b.n	801b6a8 <scalbnf+0x9c>
 801b6c0:	3219      	adds	r2, #25
 801b6c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b6c6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801b6ca:	eddf 7a08 	vldr	s15, [pc, #32]	; 801b6ec <scalbnf+0xe0>
 801b6ce:	ee07 3a10 	vmov	s14, r3
 801b6d2:	e7c4      	b.n	801b65e <scalbnf+0x52>
 801b6d4:	ffff3cb0 	.word	0xffff3cb0
 801b6d8:	4c000000 	.word	0x4c000000
 801b6dc:	7149f2ca 	.word	0x7149f2ca
 801b6e0:	f149f2ca 	.word	0xf149f2ca
 801b6e4:	0da24260 	.word	0x0da24260
 801b6e8:	8da24260 	.word	0x8da24260
 801b6ec:	33000000 	.word	0x33000000

0801b6f0 <siprintf>:
 801b6f0:	b40e      	push	{r1, r2, r3}
 801b6f2:	b500      	push	{lr}
 801b6f4:	b09c      	sub	sp, #112	; 0x70
 801b6f6:	ab1d      	add	r3, sp, #116	; 0x74
 801b6f8:	9002      	str	r0, [sp, #8]
 801b6fa:	9006      	str	r0, [sp, #24]
 801b6fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b700:	4809      	ldr	r0, [pc, #36]	; (801b728 <siprintf+0x38>)
 801b702:	9107      	str	r1, [sp, #28]
 801b704:	9104      	str	r1, [sp, #16]
 801b706:	4909      	ldr	r1, [pc, #36]	; (801b72c <siprintf+0x3c>)
 801b708:	f853 2b04 	ldr.w	r2, [r3], #4
 801b70c:	9105      	str	r1, [sp, #20]
 801b70e:	6800      	ldr	r0, [r0, #0]
 801b710:	9301      	str	r3, [sp, #4]
 801b712:	a902      	add	r1, sp, #8
 801b714:	f002 fe9c 	bl	801e450 <_svfiprintf_r>
 801b718:	9b02      	ldr	r3, [sp, #8]
 801b71a:	2200      	movs	r2, #0
 801b71c:	701a      	strb	r2, [r3, #0]
 801b71e:	b01c      	add	sp, #112	; 0x70
 801b720:	f85d eb04 	ldr.w	lr, [sp], #4
 801b724:	b003      	add	sp, #12
 801b726:	4770      	bx	lr
 801b728:	2000008c 	.word	0x2000008c
 801b72c:	ffff0208 	.word	0xffff0208

0801b730 <__sread>:
 801b730:	b510      	push	{r4, lr}
 801b732:	460c      	mov	r4, r1
 801b734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b738:	f002 ff8a 	bl	801e650 <_read_r>
 801b73c:	2800      	cmp	r0, #0
 801b73e:	bfab      	itete	ge
 801b740:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b742:	89a3      	ldrhlt	r3, [r4, #12]
 801b744:	181b      	addge	r3, r3, r0
 801b746:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b74a:	bfac      	ite	ge
 801b74c:	6563      	strge	r3, [r4, #84]	; 0x54
 801b74e:	81a3      	strhlt	r3, [r4, #12]
 801b750:	bd10      	pop	{r4, pc}

0801b752 <__swrite>:
 801b752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b756:	461f      	mov	r7, r3
 801b758:	898b      	ldrh	r3, [r1, #12]
 801b75a:	05db      	lsls	r3, r3, #23
 801b75c:	4605      	mov	r5, r0
 801b75e:	460c      	mov	r4, r1
 801b760:	4616      	mov	r6, r2
 801b762:	d505      	bpl.n	801b770 <__swrite+0x1e>
 801b764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b768:	2302      	movs	r3, #2
 801b76a:	2200      	movs	r2, #0
 801b76c:	f002 f8f4 	bl	801d958 <_lseek_r>
 801b770:	89a3      	ldrh	r3, [r4, #12]
 801b772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b77a:	81a3      	strh	r3, [r4, #12]
 801b77c:	4632      	mov	r2, r6
 801b77e:	463b      	mov	r3, r7
 801b780:	4628      	mov	r0, r5
 801b782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b786:	f000 bed9 	b.w	801c53c <_write_r>

0801b78a <__sseek>:
 801b78a:	b510      	push	{r4, lr}
 801b78c:	460c      	mov	r4, r1
 801b78e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b792:	f002 f8e1 	bl	801d958 <_lseek_r>
 801b796:	1c43      	adds	r3, r0, #1
 801b798:	89a3      	ldrh	r3, [r4, #12]
 801b79a:	bf15      	itete	ne
 801b79c:	6560      	strne	r0, [r4, #84]	; 0x54
 801b79e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b7a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b7a6:	81a3      	strheq	r3, [r4, #12]
 801b7a8:	bf18      	it	ne
 801b7aa:	81a3      	strhne	r3, [r4, #12]
 801b7ac:	bd10      	pop	{r4, pc}

0801b7ae <__sclose>:
 801b7ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b7b2:	f000 bed5 	b.w	801c560 <_close_r>

0801b7b6 <strcat>:
 801b7b6:	b510      	push	{r4, lr}
 801b7b8:	4602      	mov	r2, r0
 801b7ba:	7814      	ldrb	r4, [r2, #0]
 801b7bc:	4613      	mov	r3, r2
 801b7be:	3201      	adds	r2, #1
 801b7c0:	2c00      	cmp	r4, #0
 801b7c2:	d1fa      	bne.n	801b7ba <strcat+0x4>
 801b7c4:	3b01      	subs	r3, #1
 801b7c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b7ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b7ce:	2a00      	cmp	r2, #0
 801b7d0:	d1f9      	bne.n	801b7c6 <strcat+0x10>
 801b7d2:	bd10      	pop	{r4, pc}

0801b7d4 <sulp>:
 801b7d4:	b570      	push	{r4, r5, r6, lr}
 801b7d6:	4604      	mov	r4, r0
 801b7d8:	460d      	mov	r5, r1
 801b7da:	ec45 4b10 	vmov	d0, r4, r5
 801b7de:	4616      	mov	r6, r2
 801b7e0:	f002 fc56 	bl	801e090 <__ulp>
 801b7e4:	ec51 0b10 	vmov	r0, r1, d0
 801b7e8:	b17e      	cbz	r6, 801b80a <sulp+0x36>
 801b7ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801b7ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b7f2:	2b00      	cmp	r3, #0
 801b7f4:	dd09      	ble.n	801b80a <sulp+0x36>
 801b7f6:	051b      	lsls	r3, r3, #20
 801b7f8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801b7fc:	2400      	movs	r4, #0
 801b7fe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801b802:	4622      	mov	r2, r4
 801b804:	462b      	mov	r3, r5
 801b806:	f7e4 fef7 	bl	80005f8 <__aeabi_dmul>
 801b80a:	bd70      	pop	{r4, r5, r6, pc}
 801b80c:	0000      	movs	r0, r0
	...

0801b810 <_strtod_l>:
 801b810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b814:	b0a3      	sub	sp, #140	; 0x8c
 801b816:	461f      	mov	r7, r3
 801b818:	2300      	movs	r3, #0
 801b81a:	931e      	str	r3, [sp, #120]	; 0x78
 801b81c:	4ba4      	ldr	r3, [pc, #656]	; (801bab0 <_strtod_l+0x2a0>)
 801b81e:	9219      	str	r2, [sp, #100]	; 0x64
 801b820:	681b      	ldr	r3, [r3, #0]
 801b822:	9307      	str	r3, [sp, #28]
 801b824:	4604      	mov	r4, r0
 801b826:	4618      	mov	r0, r3
 801b828:	4688      	mov	r8, r1
 801b82a:	f7e4 fcd1 	bl	80001d0 <strlen>
 801b82e:	f04f 0a00 	mov.w	sl, #0
 801b832:	4605      	mov	r5, r0
 801b834:	f04f 0b00 	mov.w	fp, #0
 801b838:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b83c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b83e:	781a      	ldrb	r2, [r3, #0]
 801b840:	2a2b      	cmp	r2, #43	; 0x2b
 801b842:	d04c      	beq.n	801b8de <_strtod_l+0xce>
 801b844:	d839      	bhi.n	801b8ba <_strtod_l+0xaa>
 801b846:	2a0d      	cmp	r2, #13
 801b848:	d832      	bhi.n	801b8b0 <_strtod_l+0xa0>
 801b84a:	2a08      	cmp	r2, #8
 801b84c:	d832      	bhi.n	801b8b4 <_strtod_l+0xa4>
 801b84e:	2a00      	cmp	r2, #0
 801b850:	d03c      	beq.n	801b8cc <_strtod_l+0xbc>
 801b852:	2300      	movs	r3, #0
 801b854:	930e      	str	r3, [sp, #56]	; 0x38
 801b856:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801b858:	7833      	ldrb	r3, [r6, #0]
 801b85a:	2b30      	cmp	r3, #48	; 0x30
 801b85c:	f040 80b4 	bne.w	801b9c8 <_strtod_l+0x1b8>
 801b860:	7873      	ldrb	r3, [r6, #1]
 801b862:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b866:	2b58      	cmp	r3, #88	; 0x58
 801b868:	d16c      	bne.n	801b944 <_strtod_l+0x134>
 801b86a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b86c:	9301      	str	r3, [sp, #4]
 801b86e:	ab1e      	add	r3, sp, #120	; 0x78
 801b870:	9702      	str	r7, [sp, #8]
 801b872:	9300      	str	r3, [sp, #0]
 801b874:	4a8f      	ldr	r2, [pc, #572]	; (801bab4 <_strtod_l+0x2a4>)
 801b876:	ab1f      	add	r3, sp, #124	; 0x7c
 801b878:	a91d      	add	r1, sp, #116	; 0x74
 801b87a:	4620      	mov	r0, r4
 801b87c:	f001 fd60 	bl	801d340 <__gethex>
 801b880:	f010 0707 	ands.w	r7, r0, #7
 801b884:	4605      	mov	r5, r0
 801b886:	d005      	beq.n	801b894 <_strtod_l+0x84>
 801b888:	2f06      	cmp	r7, #6
 801b88a:	d12a      	bne.n	801b8e2 <_strtod_l+0xd2>
 801b88c:	3601      	adds	r6, #1
 801b88e:	2300      	movs	r3, #0
 801b890:	961d      	str	r6, [sp, #116]	; 0x74
 801b892:	930e      	str	r3, [sp, #56]	; 0x38
 801b894:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b896:	2b00      	cmp	r3, #0
 801b898:	f040 8596 	bne.w	801c3c8 <_strtod_l+0xbb8>
 801b89c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b89e:	b1db      	cbz	r3, 801b8d8 <_strtod_l+0xc8>
 801b8a0:	4652      	mov	r2, sl
 801b8a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b8a6:	ec43 2b10 	vmov	d0, r2, r3
 801b8aa:	b023      	add	sp, #140	; 0x8c
 801b8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8b0:	2a20      	cmp	r2, #32
 801b8b2:	d1ce      	bne.n	801b852 <_strtod_l+0x42>
 801b8b4:	3301      	adds	r3, #1
 801b8b6:	931d      	str	r3, [sp, #116]	; 0x74
 801b8b8:	e7c0      	b.n	801b83c <_strtod_l+0x2c>
 801b8ba:	2a2d      	cmp	r2, #45	; 0x2d
 801b8bc:	d1c9      	bne.n	801b852 <_strtod_l+0x42>
 801b8be:	2201      	movs	r2, #1
 801b8c0:	920e      	str	r2, [sp, #56]	; 0x38
 801b8c2:	1c5a      	adds	r2, r3, #1
 801b8c4:	921d      	str	r2, [sp, #116]	; 0x74
 801b8c6:	785b      	ldrb	r3, [r3, #1]
 801b8c8:	2b00      	cmp	r3, #0
 801b8ca:	d1c4      	bne.n	801b856 <_strtod_l+0x46>
 801b8cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b8ce:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b8d2:	2b00      	cmp	r3, #0
 801b8d4:	f040 8576 	bne.w	801c3c4 <_strtod_l+0xbb4>
 801b8d8:	4652      	mov	r2, sl
 801b8da:	465b      	mov	r3, fp
 801b8dc:	e7e3      	b.n	801b8a6 <_strtod_l+0x96>
 801b8de:	2200      	movs	r2, #0
 801b8e0:	e7ee      	b.n	801b8c0 <_strtod_l+0xb0>
 801b8e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801b8e4:	b13a      	cbz	r2, 801b8f6 <_strtod_l+0xe6>
 801b8e6:	2135      	movs	r1, #53	; 0x35
 801b8e8:	a820      	add	r0, sp, #128	; 0x80
 801b8ea:	f002 fcdc 	bl	801e2a6 <__copybits>
 801b8ee:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b8f0:	4620      	mov	r0, r4
 801b8f2:	f002 f8a1 	bl	801da38 <_Bfree>
 801b8f6:	3f01      	subs	r7, #1
 801b8f8:	2f05      	cmp	r7, #5
 801b8fa:	d807      	bhi.n	801b90c <_strtod_l+0xfc>
 801b8fc:	e8df f007 	tbb	[pc, r7]
 801b900:	1d180b0e 	.word	0x1d180b0e
 801b904:	030e      	.short	0x030e
 801b906:	f04f 0b00 	mov.w	fp, #0
 801b90a:	46da      	mov	sl, fp
 801b90c:	0728      	lsls	r0, r5, #28
 801b90e:	d5c1      	bpl.n	801b894 <_strtod_l+0x84>
 801b910:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801b914:	e7be      	b.n	801b894 <_strtod_l+0x84>
 801b916:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801b91a:	e7f7      	b.n	801b90c <_strtod_l+0xfc>
 801b91c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801b920:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801b922:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801b926:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801b92a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801b92e:	e7ed      	b.n	801b90c <_strtod_l+0xfc>
 801b930:	f8df b184 	ldr.w	fp, [pc, #388]	; 801bab8 <_strtod_l+0x2a8>
 801b934:	f04f 0a00 	mov.w	sl, #0
 801b938:	e7e8      	b.n	801b90c <_strtod_l+0xfc>
 801b93a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801b93e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801b942:	e7e3      	b.n	801b90c <_strtod_l+0xfc>
 801b944:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b946:	1c5a      	adds	r2, r3, #1
 801b948:	921d      	str	r2, [sp, #116]	; 0x74
 801b94a:	785b      	ldrb	r3, [r3, #1]
 801b94c:	2b30      	cmp	r3, #48	; 0x30
 801b94e:	d0f9      	beq.n	801b944 <_strtod_l+0x134>
 801b950:	2b00      	cmp	r3, #0
 801b952:	d09f      	beq.n	801b894 <_strtod_l+0x84>
 801b954:	2301      	movs	r3, #1
 801b956:	f04f 0900 	mov.w	r9, #0
 801b95a:	9304      	str	r3, [sp, #16]
 801b95c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b95e:	930a      	str	r3, [sp, #40]	; 0x28
 801b960:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801b964:	464f      	mov	r7, r9
 801b966:	220a      	movs	r2, #10
 801b968:	981d      	ldr	r0, [sp, #116]	; 0x74
 801b96a:	7806      	ldrb	r6, [r0, #0]
 801b96c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801b970:	b2d9      	uxtb	r1, r3
 801b972:	2909      	cmp	r1, #9
 801b974:	d92a      	bls.n	801b9cc <_strtod_l+0x1bc>
 801b976:	9907      	ldr	r1, [sp, #28]
 801b978:	462a      	mov	r2, r5
 801b97a:	f002 fe92 	bl	801e6a2 <strncmp>
 801b97e:	b398      	cbz	r0, 801b9e8 <_strtod_l+0x1d8>
 801b980:	2000      	movs	r0, #0
 801b982:	4633      	mov	r3, r6
 801b984:	463d      	mov	r5, r7
 801b986:	9007      	str	r0, [sp, #28]
 801b988:	4602      	mov	r2, r0
 801b98a:	2b65      	cmp	r3, #101	; 0x65
 801b98c:	d001      	beq.n	801b992 <_strtod_l+0x182>
 801b98e:	2b45      	cmp	r3, #69	; 0x45
 801b990:	d118      	bne.n	801b9c4 <_strtod_l+0x1b4>
 801b992:	b91d      	cbnz	r5, 801b99c <_strtod_l+0x18c>
 801b994:	9b04      	ldr	r3, [sp, #16]
 801b996:	4303      	orrs	r3, r0
 801b998:	d098      	beq.n	801b8cc <_strtod_l+0xbc>
 801b99a:	2500      	movs	r5, #0
 801b99c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801b9a0:	f108 0301 	add.w	r3, r8, #1
 801b9a4:	931d      	str	r3, [sp, #116]	; 0x74
 801b9a6:	f898 3001 	ldrb.w	r3, [r8, #1]
 801b9aa:	2b2b      	cmp	r3, #43	; 0x2b
 801b9ac:	d075      	beq.n	801ba9a <_strtod_l+0x28a>
 801b9ae:	2b2d      	cmp	r3, #45	; 0x2d
 801b9b0:	d07b      	beq.n	801baaa <_strtod_l+0x29a>
 801b9b2:	f04f 0c00 	mov.w	ip, #0
 801b9b6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801b9ba:	2909      	cmp	r1, #9
 801b9bc:	f240 8082 	bls.w	801bac4 <_strtod_l+0x2b4>
 801b9c0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b9c4:	2600      	movs	r6, #0
 801b9c6:	e09d      	b.n	801bb04 <_strtod_l+0x2f4>
 801b9c8:	2300      	movs	r3, #0
 801b9ca:	e7c4      	b.n	801b956 <_strtod_l+0x146>
 801b9cc:	2f08      	cmp	r7, #8
 801b9ce:	bfd8      	it	le
 801b9d0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801b9d2:	f100 0001 	add.w	r0, r0, #1
 801b9d6:	bfda      	itte	le
 801b9d8:	fb02 3301 	mlale	r3, r2, r1, r3
 801b9dc:	9309      	strle	r3, [sp, #36]	; 0x24
 801b9de:	fb02 3909 	mlagt	r9, r2, r9, r3
 801b9e2:	3701      	adds	r7, #1
 801b9e4:	901d      	str	r0, [sp, #116]	; 0x74
 801b9e6:	e7bf      	b.n	801b968 <_strtod_l+0x158>
 801b9e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b9ea:	195a      	adds	r2, r3, r5
 801b9ec:	921d      	str	r2, [sp, #116]	; 0x74
 801b9ee:	5d5b      	ldrb	r3, [r3, r5]
 801b9f0:	2f00      	cmp	r7, #0
 801b9f2:	d037      	beq.n	801ba64 <_strtod_l+0x254>
 801b9f4:	9007      	str	r0, [sp, #28]
 801b9f6:	463d      	mov	r5, r7
 801b9f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801b9fc:	2a09      	cmp	r2, #9
 801b9fe:	d912      	bls.n	801ba26 <_strtod_l+0x216>
 801ba00:	2201      	movs	r2, #1
 801ba02:	e7c2      	b.n	801b98a <_strtod_l+0x17a>
 801ba04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ba06:	1c5a      	adds	r2, r3, #1
 801ba08:	921d      	str	r2, [sp, #116]	; 0x74
 801ba0a:	785b      	ldrb	r3, [r3, #1]
 801ba0c:	3001      	adds	r0, #1
 801ba0e:	2b30      	cmp	r3, #48	; 0x30
 801ba10:	d0f8      	beq.n	801ba04 <_strtod_l+0x1f4>
 801ba12:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801ba16:	2a08      	cmp	r2, #8
 801ba18:	f200 84db 	bhi.w	801c3d2 <_strtod_l+0xbc2>
 801ba1c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801ba1e:	9007      	str	r0, [sp, #28]
 801ba20:	2000      	movs	r0, #0
 801ba22:	920a      	str	r2, [sp, #40]	; 0x28
 801ba24:	4605      	mov	r5, r0
 801ba26:	3b30      	subs	r3, #48	; 0x30
 801ba28:	f100 0201 	add.w	r2, r0, #1
 801ba2c:	d014      	beq.n	801ba58 <_strtod_l+0x248>
 801ba2e:	9907      	ldr	r1, [sp, #28]
 801ba30:	4411      	add	r1, r2
 801ba32:	9107      	str	r1, [sp, #28]
 801ba34:	462a      	mov	r2, r5
 801ba36:	eb00 0e05 	add.w	lr, r0, r5
 801ba3a:	210a      	movs	r1, #10
 801ba3c:	4572      	cmp	r2, lr
 801ba3e:	d113      	bne.n	801ba68 <_strtod_l+0x258>
 801ba40:	182a      	adds	r2, r5, r0
 801ba42:	2a08      	cmp	r2, #8
 801ba44:	f105 0501 	add.w	r5, r5, #1
 801ba48:	4405      	add	r5, r0
 801ba4a:	dc1c      	bgt.n	801ba86 <_strtod_l+0x276>
 801ba4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ba4e:	220a      	movs	r2, #10
 801ba50:	fb02 3301 	mla	r3, r2, r1, r3
 801ba54:	9309      	str	r3, [sp, #36]	; 0x24
 801ba56:	2200      	movs	r2, #0
 801ba58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ba5a:	1c59      	adds	r1, r3, #1
 801ba5c:	911d      	str	r1, [sp, #116]	; 0x74
 801ba5e:	785b      	ldrb	r3, [r3, #1]
 801ba60:	4610      	mov	r0, r2
 801ba62:	e7c9      	b.n	801b9f8 <_strtod_l+0x1e8>
 801ba64:	4638      	mov	r0, r7
 801ba66:	e7d2      	b.n	801ba0e <_strtod_l+0x1fe>
 801ba68:	2a08      	cmp	r2, #8
 801ba6a:	dc04      	bgt.n	801ba76 <_strtod_l+0x266>
 801ba6c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801ba6e:	434e      	muls	r6, r1
 801ba70:	9609      	str	r6, [sp, #36]	; 0x24
 801ba72:	3201      	adds	r2, #1
 801ba74:	e7e2      	b.n	801ba3c <_strtod_l+0x22c>
 801ba76:	f102 0c01 	add.w	ip, r2, #1
 801ba7a:	f1bc 0f10 	cmp.w	ip, #16
 801ba7e:	bfd8      	it	le
 801ba80:	fb01 f909 	mulle.w	r9, r1, r9
 801ba84:	e7f5      	b.n	801ba72 <_strtod_l+0x262>
 801ba86:	2d10      	cmp	r5, #16
 801ba88:	bfdc      	itt	le
 801ba8a:	220a      	movle	r2, #10
 801ba8c:	fb02 3909 	mlale	r9, r2, r9, r3
 801ba90:	e7e1      	b.n	801ba56 <_strtod_l+0x246>
 801ba92:	2300      	movs	r3, #0
 801ba94:	9307      	str	r3, [sp, #28]
 801ba96:	2201      	movs	r2, #1
 801ba98:	e77c      	b.n	801b994 <_strtod_l+0x184>
 801ba9a:	f04f 0c00 	mov.w	ip, #0
 801ba9e:	f108 0302 	add.w	r3, r8, #2
 801baa2:	931d      	str	r3, [sp, #116]	; 0x74
 801baa4:	f898 3002 	ldrb.w	r3, [r8, #2]
 801baa8:	e785      	b.n	801b9b6 <_strtod_l+0x1a6>
 801baaa:	f04f 0c01 	mov.w	ip, #1
 801baae:	e7f6      	b.n	801ba9e <_strtod_l+0x28e>
 801bab0:	08020ea0 	.word	0x08020ea0
 801bab4:	08020c4c 	.word	0x08020c4c
 801bab8:	7ff00000 	.word	0x7ff00000
 801babc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801babe:	1c59      	adds	r1, r3, #1
 801bac0:	911d      	str	r1, [sp, #116]	; 0x74
 801bac2:	785b      	ldrb	r3, [r3, #1]
 801bac4:	2b30      	cmp	r3, #48	; 0x30
 801bac6:	d0f9      	beq.n	801babc <_strtod_l+0x2ac>
 801bac8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801bacc:	2908      	cmp	r1, #8
 801bace:	f63f af79 	bhi.w	801b9c4 <_strtod_l+0x1b4>
 801bad2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801bad6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bad8:	9308      	str	r3, [sp, #32]
 801bada:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801badc:	1c59      	adds	r1, r3, #1
 801bade:	911d      	str	r1, [sp, #116]	; 0x74
 801bae0:	785b      	ldrb	r3, [r3, #1]
 801bae2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801bae6:	2e09      	cmp	r6, #9
 801bae8:	d937      	bls.n	801bb5a <_strtod_l+0x34a>
 801baea:	9e08      	ldr	r6, [sp, #32]
 801baec:	1b89      	subs	r1, r1, r6
 801baee:	2908      	cmp	r1, #8
 801baf0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801baf4:	dc02      	bgt.n	801bafc <_strtod_l+0x2ec>
 801baf6:	4576      	cmp	r6, lr
 801baf8:	bfa8      	it	ge
 801bafa:	4676      	movge	r6, lr
 801bafc:	f1bc 0f00 	cmp.w	ip, #0
 801bb00:	d000      	beq.n	801bb04 <_strtod_l+0x2f4>
 801bb02:	4276      	negs	r6, r6
 801bb04:	2d00      	cmp	r5, #0
 801bb06:	d14f      	bne.n	801bba8 <_strtod_l+0x398>
 801bb08:	9904      	ldr	r1, [sp, #16]
 801bb0a:	4301      	orrs	r1, r0
 801bb0c:	f47f aec2 	bne.w	801b894 <_strtod_l+0x84>
 801bb10:	2a00      	cmp	r2, #0
 801bb12:	f47f aedb 	bne.w	801b8cc <_strtod_l+0xbc>
 801bb16:	2b69      	cmp	r3, #105	; 0x69
 801bb18:	d027      	beq.n	801bb6a <_strtod_l+0x35a>
 801bb1a:	dc24      	bgt.n	801bb66 <_strtod_l+0x356>
 801bb1c:	2b49      	cmp	r3, #73	; 0x49
 801bb1e:	d024      	beq.n	801bb6a <_strtod_l+0x35a>
 801bb20:	2b4e      	cmp	r3, #78	; 0x4e
 801bb22:	f47f aed3 	bne.w	801b8cc <_strtod_l+0xbc>
 801bb26:	499e      	ldr	r1, [pc, #632]	; (801bda0 <_strtod_l+0x590>)
 801bb28:	a81d      	add	r0, sp, #116	; 0x74
 801bb2a:	f001 fe61 	bl	801d7f0 <__match>
 801bb2e:	2800      	cmp	r0, #0
 801bb30:	f43f aecc 	beq.w	801b8cc <_strtod_l+0xbc>
 801bb34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bb36:	781b      	ldrb	r3, [r3, #0]
 801bb38:	2b28      	cmp	r3, #40	; 0x28
 801bb3a:	d12d      	bne.n	801bb98 <_strtod_l+0x388>
 801bb3c:	4999      	ldr	r1, [pc, #612]	; (801bda4 <_strtod_l+0x594>)
 801bb3e:	aa20      	add	r2, sp, #128	; 0x80
 801bb40:	a81d      	add	r0, sp, #116	; 0x74
 801bb42:	f001 fe69 	bl	801d818 <__hexnan>
 801bb46:	2805      	cmp	r0, #5
 801bb48:	d126      	bne.n	801bb98 <_strtod_l+0x388>
 801bb4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bb4c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801bb50:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801bb54:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801bb58:	e69c      	b.n	801b894 <_strtod_l+0x84>
 801bb5a:	210a      	movs	r1, #10
 801bb5c:	fb01 3e0e 	mla	lr, r1, lr, r3
 801bb60:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801bb64:	e7b9      	b.n	801bada <_strtod_l+0x2ca>
 801bb66:	2b6e      	cmp	r3, #110	; 0x6e
 801bb68:	e7db      	b.n	801bb22 <_strtod_l+0x312>
 801bb6a:	498f      	ldr	r1, [pc, #572]	; (801bda8 <_strtod_l+0x598>)
 801bb6c:	a81d      	add	r0, sp, #116	; 0x74
 801bb6e:	f001 fe3f 	bl	801d7f0 <__match>
 801bb72:	2800      	cmp	r0, #0
 801bb74:	f43f aeaa 	beq.w	801b8cc <_strtod_l+0xbc>
 801bb78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bb7a:	498c      	ldr	r1, [pc, #560]	; (801bdac <_strtod_l+0x59c>)
 801bb7c:	3b01      	subs	r3, #1
 801bb7e:	a81d      	add	r0, sp, #116	; 0x74
 801bb80:	931d      	str	r3, [sp, #116]	; 0x74
 801bb82:	f001 fe35 	bl	801d7f0 <__match>
 801bb86:	b910      	cbnz	r0, 801bb8e <_strtod_l+0x37e>
 801bb88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bb8a:	3301      	adds	r3, #1
 801bb8c:	931d      	str	r3, [sp, #116]	; 0x74
 801bb8e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801bdbc <_strtod_l+0x5ac>
 801bb92:	f04f 0a00 	mov.w	sl, #0
 801bb96:	e67d      	b.n	801b894 <_strtod_l+0x84>
 801bb98:	4885      	ldr	r0, [pc, #532]	; (801bdb0 <_strtod_l+0x5a0>)
 801bb9a:	f002 fd6d 	bl	801e678 <nan>
 801bb9e:	ed8d 0b04 	vstr	d0, [sp, #16]
 801bba2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801bba6:	e675      	b.n	801b894 <_strtod_l+0x84>
 801bba8:	9b07      	ldr	r3, [sp, #28]
 801bbaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bbac:	1af3      	subs	r3, r6, r3
 801bbae:	2f00      	cmp	r7, #0
 801bbb0:	bf08      	it	eq
 801bbb2:	462f      	moveq	r7, r5
 801bbb4:	2d10      	cmp	r5, #16
 801bbb6:	9308      	str	r3, [sp, #32]
 801bbb8:	46a8      	mov	r8, r5
 801bbba:	bfa8      	it	ge
 801bbbc:	f04f 0810 	movge.w	r8, #16
 801bbc0:	f7e4 fca0 	bl	8000504 <__aeabi_ui2d>
 801bbc4:	2d09      	cmp	r5, #9
 801bbc6:	4682      	mov	sl, r0
 801bbc8:	468b      	mov	fp, r1
 801bbca:	dd13      	ble.n	801bbf4 <_strtod_l+0x3e4>
 801bbcc:	4b79      	ldr	r3, [pc, #484]	; (801bdb4 <_strtod_l+0x5a4>)
 801bbce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801bbd2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801bbd6:	f7e4 fd0f 	bl	80005f8 <__aeabi_dmul>
 801bbda:	4682      	mov	sl, r0
 801bbdc:	4648      	mov	r0, r9
 801bbde:	468b      	mov	fp, r1
 801bbe0:	f7e4 fc90 	bl	8000504 <__aeabi_ui2d>
 801bbe4:	4602      	mov	r2, r0
 801bbe6:	460b      	mov	r3, r1
 801bbe8:	4650      	mov	r0, sl
 801bbea:	4659      	mov	r1, fp
 801bbec:	f7e4 fb4e 	bl	800028c <__adddf3>
 801bbf0:	4682      	mov	sl, r0
 801bbf2:	468b      	mov	fp, r1
 801bbf4:	2d0f      	cmp	r5, #15
 801bbf6:	dc38      	bgt.n	801bc6a <_strtod_l+0x45a>
 801bbf8:	9b08      	ldr	r3, [sp, #32]
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	f43f ae4a 	beq.w	801b894 <_strtod_l+0x84>
 801bc00:	dd24      	ble.n	801bc4c <_strtod_l+0x43c>
 801bc02:	2b16      	cmp	r3, #22
 801bc04:	dc0b      	bgt.n	801bc1e <_strtod_l+0x40e>
 801bc06:	4d6b      	ldr	r5, [pc, #428]	; (801bdb4 <_strtod_l+0x5a4>)
 801bc08:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801bc0c:	e9d5 0100 	ldrd	r0, r1, [r5]
 801bc10:	4652      	mov	r2, sl
 801bc12:	465b      	mov	r3, fp
 801bc14:	f7e4 fcf0 	bl	80005f8 <__aeabi_dmul>
 801bc18:	4682      	mov	sl, r0
 801bc1a:	468b      	mov	fp, r1
 801bc1c:	e63a      	b.n	801b894 <_strtod_l+0x84>
 801bc1e:	9a08      	ldr	r2, [sp, #32]
 801bc20:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801bc24:	4293      	cmp	r3, r2
 801bc26:	db20      	blt.n	801bc6a <_strtod_l+0x45a>
 801bc28:	4c62      	ldr	r4, [pc, #392]	; (801bdb4 <_strtod_l+0x5a4>)
 801bc2a:	f1c5 050f 	rsb	r5, r5, #15
 801bc2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801bc32:	4652      	mov	r2, sl
 801bc34:	465b      	mov	r3, fp
 801bc36:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bc3a:	f7e4 fcdd 	bl	80005f8 <__aeabi_dmul>
 801bc3e:	9b08      	ldr	r3, [sp, #32]
 801bc40:	1b5d      	subs	r5, r3, r5
 801bc42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801bc46:	e9d4 2300 	ldrd	r2, r3, [r4]
 801bc4a:	e7e3      	b.n	801bc14 <_strtod_l+0x404>
 801bc4c:	9b08      	ldr	r3, [sp, #32]
 801bc4e:	3316      	adds	r3, #22
 801bc50:	db0b      	blt.n	801bc6a <_strtod_l+0x45a>
 801bc52:	9b07      	ldr	r3, [sp, #28]
 801bc54:	4a57      	ldr	r2, [pc, #348]	; (801bdb4 <_strtod_l+0x5a4>)
 801bc56:	1b9e      	subs	r6, r3, r6
 801bc58:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801bc5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801bc60:	4650      	mov	r0, sl
 801bc62:	4659      	mov	r1, fp
 801bc64:	f7e4 fdf2 	bl	800084c <__aeabi_ddiv>
 801bc68:	e7d6      	b.n	801bc18 <_strtod_l+0x408>
 801bc6a:	9b08      	ldr	r3, [sp, #32]
 801bc6c:	eba5 0808 	sub.w	r8, r5, r8
 801bc70:	4498      	add	r8, r3
 801bc72:	f1b8 0f00 	cmp.w	r8, #0
 801bc76:	dd71      	ble.n	801bd5c <_strtod_l+0x54c>
 801bc78:	f018 030f 	ands.w	r3, r8, #15
 801bc7c:	d00a      	beq.n	801bc94 <_strtod_l+0x484>
 801bc7e:	494d      	ldr	r1, [pc, #308]	; (801bdb4 <_strtod_l+0x5a4>)
 801bc80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801bc84:	4652      	mov	r2, sl
 801bc86:	465b      	mov	r3, fp
 801bc88:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bc8c:	f7e4 fcb4 	bl	80005f8 <__aeabi_dmul>
 801bc90:	4682      	mov	sl, r0
 801bc92:	468b      	mov	fp, r1
 801bc94:	f038 080f 	bics.w	r8, r8, #15
 801bc98:	d04d      	beq.n	801bd36 <_strtod_l+0x526>
 801bc9a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801bc9e:	dd22      	ble.n	801bce6 <_strtod_l+0x4d6>
 801bca0:	2500      	movs	r5, #0
 801bca2:	462e      	mov	r6, r5
 801bca4:	9509      	str	r5, [sp, #36]	; 0x24
 801bca6:	9507      	str	r5, [sp, #28]
 801bca8:	2322      	movs	r3, #34	; 0x22
 801bcaa:	f8df b110 	ldr.w	fp, [pc, #272]	; 801bdbc <_strtod_l+0x5ac>
 801bcae:	6023      	str	r3, [r4, #0]
 801bcb0:	f04f 0a00 	mov.w	sl, #0
 801bcb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcb6:	2b00      	cmp	r3, #0
 801bcb8:	f43f adec 	beq.w	801b894 <_strtod_l+0x84>
 801bcbc:	991e      	ldr	r1, [sp, #120]	; 0x78
 801bcbe:	4620      	mov	r0, r4
 801bcc0:	f001 feba 	bl	801da38 <_Bfree>
 801bcc4:	9907      	ldr	r1, [sp, #28]
 801bcc6:	4620      	mov	r0, r4
 801bcc8:	f001 feb6 	bl	801da38 <_Bfree>
 801bccc:	4631      	mov	r1, r6
 801bcce:	4620      	mov	r0, r4
 801bcd0:	f001 feb2 	bl	801da38 <_Bfree>
 801bcd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bcd6:	4620      	mov	r0, r4
 801bcd8:	f001 feae 	bl	801da38 <_Bfree>
 801bcdc:	4629      	mov	r1, r5
 801bcde:	4620      	mov	r0, r4
 801bce0:	f001 feaa 	bl	801da38 <_Bfree>
 801bce4:	e5d6      	b.n	801b894 <_strtod_l+0x84>
 801bce6:	2300      	movs	r3, #0
 801bce8:	ea4f 1828 	mov.w	r8, r8, asr #4
 801bcec:	4650      	mov	r0, sl
 801bcee:	4659      	mov	r1, fp
 801bcf0:	4699      	mov	r9, r3
 801bcf2:	f1b8 0f01 	cmp.w	r8, #1
 801bcf6:	dc21      	bgt.n	801bd3c <_strtod_l+0x52c>
 801bcf8:	b10b      	cbz	r3, 801bcfe <_strtod_l+0x4ee>
 801bcfa:	4682      	mov	sl, r0
 801bcfc:	468b      	mov	fp, r1
 801bcfe:	4b2e      	ldr	r3, [pc, #184]	; (801bdb8 <_strtod_l+0x5a8>)
 801bd00:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801bd04:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801bd08:	4652      	mov	r2, sl
 801bd0a:	465b      	mov	r3, fp
 801bd0c:	e9d9 0100 	ldrd	r0, r1, [r9]
 801bd10:	f7e4 fc72 	bl	80005f8 <__aeabi_dmul>
 801bd14:	4b29      	ldr	r3, [pc, #164]	; (801bdbc <_strtod_l+0x5ac>)
 801bd16:	460a      	mov	r2, r1
 801bd18:	400b      	ands	r3, r1
 801bd1a:	4929      	ldr	r1, [pc, #164]	; (801bdc0 <_strtod_l+0x5b0>)
 801bd1c:	428b      	cmp	r3, r1
 801bd1e:	4682      	mov	sl, r0
 801bd20:	d8be      	bhi.n	801bca0 <_strtod_l+0x490>
 801bd22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801bd26:	428b      	cmp	r3, r1
 801bd28:	bf86      	itte	hi
 801bd2a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801bdc4 <_strtod_l+0x5b4>
 801bd2e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801bd32:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801bd36:	2300      	movs	r3, #0
 801bd38:	9304      	str	r3, [sp, #16]
 801bd3a:	e081      	b.n	801be40 <_strtod_l+0x630>
 801bd3c:	f018 0f01 	tst.w	r8, #1
 801bd40:	d007      	beq.n	801bd52 <_strtod_l+0x542>
 801bd42:	4b1d      	ldr	r3, [pc, #116]	; (801bdb8 <_strtod_l+0x5a8>)
 801bd44:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801bd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd4c:	f7e4 fc54 	bl	80005f8 <__aeabi_dmul>
 801bd50:	2301      	movs	r3, #1
 801bd52:	f109 0901 	add.w	r9, r9, #1
 801bd56:	ea4f 0868 	mov.w	r8, r8, asr #1
 801bd5a:	e7ca      	b.n	801bcf2 <_strtod_l+0x4e2>
 801bd5c:	d0eb      	beq.n	801bd36 <_strtod_l+0x526>
 801bd5e:	f1c8 0800 	rsb	r8, r8, #0
 801bd62:	f018 020f 	ands.w	r2, r8, #15
 801bd66:	d00a      	beq.n	801bd7e <_strtod_l+0x56e>
 801bd68:	4b12      	ldr	r3, [pc, #72]	; (801bdb4 <_strtod_l+0x5a4>)
 801bd6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bd6e:	4650      	mov	r0, sl
 801bd70:	4659      	mov	r1, fp
 801bd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd76:	f7e4 fd69 	bl	800084c <__aeabi_ddiv>
 801bd7a:	4682      	mov	sl, r0
 801bd7c:	468b      	mov	fp, r1
 801bd7e:	ea5f 1828 	movs.w	r8, r8, asr #4
 801bd82:	d0d8      	beq.n	801bd36 <_strtod_l+0x526>
 801bd84:	f1b8 0f1f 	cmp.w	r8, #31
 801bd88:	dd1e      	ble.n	801bdc8 <_strtod_l+0x5b8>
 801bd8a:	2500      	movs	r5, #0
 801bd8c:	462e      	mov	r6, r5
 801bd8e:	9509      	str	r5, [sp, #36]	; 0x24
 801bd90:	9507      	str	r5, [sp, #28]
 801bd92:	2322      	movs	r3, #34	; 0x22
 801bd94:	f04f 0a00 	mov.w	sl, #0
 801bd98:	f04f 0b00 	mov.w	fp, #0
 801bd9c:	6023      	str	r3, [r4, #0]
 801bd9e:	e789      	b.n	801bcb4 <_strtod_l+0x4a4>
 801bda0:	08020c1d 	.word	0x08020c1d
 801bda4:	08020c60 	.word	0x08020c60
 801bda8:	08020c15 	.word	0x08020c15
 801bdac:	08020da4 	.word	0x08020da4
 801bdb0:	08021060 	.word	0x08021060
 801bdb4:	08020f40 	.word	0x08020f40
 801bdb8:	08020f18 	.word	0x08020f18
 801bdbc:	7ff00000 	.word	0x7ff00000
 801bdc0:	7ca00000 	.word	0x7ca00000
 801bdc4:	7fefffff 	.word	0x7fefffff
 801bdc8:	f018 0310 	ands.w	r3, r8, #16
 801bdcc:	bf18      	it	ne
 801bdce:	236a      	movne	r3, #106	; 0x6a
 801bdd0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801c188 <_strtod_l+0x978>
 801bdd4:	9304      	str	r3, [sp, #16]
 801bdd6:	4650      	mov	r0, sl
 801bdd8:	4659      	mov	r1, fp
 801bdda:	2300      	movs	r3, #0
 801bddc:	f018 0f01 	tst.w	r8, #1
 801bde0:	d004      	beq.n	801bdec <_strtod_l+0x5dc>
 801bde2:	e9d9 2300 	ldrd	r2, r3, [r9]
 801bde6:	f7e4 fc07 	bl	80005f8 <__aeabi_dmul>
 801bdea:	2301      	movs	r3, #1
 801bdec:	ea5f 0868 	movs.w	r8, r8, asr #1
 801bdf0:	f109 0908 	add.w	r9, r9, #8
 801bdf4:	d1f2      	bne.n	801bddc <_strtod_l+0x5cc>
 801bdf6:	b10b      	cbz	r3, 801bdfc <_strtod_l+0x5ec>
 801bdf8:	4682      	mov	sl, r0
 801bdfa:	468b      	mov	fp, r1
 801bdfc:	9b04      	ldr	r3, [sp, #16]
 801bdfe:	b1bb      	cbz	r3, 801be30 <_strtod_l+0x620>
 801be00:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801be04:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801be08:	2b00      	cmp	r3, #0
 801be0a:	4659      	mov	r1, fp
 801be0c:	dd10      	ble.n	801be30 <_strtod_l+0x620>
 801be0e:	2b1f      	cmp	r3, #31
 801be10:	f340 8128 	ble.w	801c064 <_strtod_l+0x854>
 801be14:	2b34      	cmp	r3, #52	; 0x34
 801be16:	bfde      	ittt	le
 801be18:	3b20      	suble	r3, #32
 801be1a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 801be1e:	fa02 f303 	lslle.w	r3, r2, r3
 801be22:	f04f 0a00 	mov.w	sl, #0
 801be26:	bfcc      	ite	gt
 801be28:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801be2c:	ea03 0b01 	andle.w	fp, r3, r1
 801be30:	2200      	movs	r2, #0
 801be32:	2300      	movs	r3, #0
 801be34:	4650      	mov	r0, sl
 801be36:	4659      	mov	r1, fp
 801be38:	f7e4 fe46 	bl	8000ac8 <__aeabi_dcmpeq>
 801be3c:	2800      	cmp	r0, #0
 801be3e:	d1a4      	bne.n	801bd8a <_strtod_l+0x57a>
 801be40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be42:	9300      	str	r3, [sp, #0]
 801be44:	990a      	ldr	r1, [sp, #40]	; 0x28
 801be46:	462b      	mov	r3, r5
 801be48:	463a      	mov	r2, r7
 801be4a:	4620      	mov	r0, r4
 801be4c:	f001 fe60 	bl	801db10 <__s2b>
 801be50:	9009      	str	r0, [sp, #36]	; 0x24
 801be52:	2800      	cmp	r0, #0
 801be54:	f43f af24 	beq.w	801bca0 <_strtod_l+0x490>
 801be58:	9b07      	ldr	r3, [sp, #28]
 801be5a:	1b9e      	subs	r6, r3, r6
 801be5c:	9b08      	ldr	r3, [sp, #32]
 801be5e:	2b00      	cmp	r3, #0
 801be60:	bfb4      	ite	lt
 801be62:	4633      	movlt	r3, r6
 801be64:	2300      	movge	r3, #0
 801be66:	9310      	str	r3, [sp, #64]	; 0x40
 801be68:	9b08      	ldr	r3, [sp, #32]
 801be6a:	2500      	movs	r5, #0
 801be6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801be70:	9318      	str	r3, [sp, #96]	; 0x60
 801be72:	462e      	mov	r6, r5
 801be74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be76:	4620      	mov	r0, r4
 801be78:	6859      	ldr	r1, [r3, #4]
 801be7a:	f001 fd9d 	bl	801d9b8 <_Balloc>
 801be7e:	9007      	str	r0, [sp, #28]
 801be80:	2800      	cmp	r0, #0
 801be82:	f43f af11 	beq.w	801bca8 <_strtod_l+0x498>
 801be86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be88:	691a      	ldr	r2, [r3, #16]
 801be8a:	3202      	adds	r2, #2
 801be8c:	f103 010c 	add.w	r1, r3, #12
 801be90:	0092      	lsls	r2, r2, #2
 801be92:	300c      	adds	r0, #12
 801be94:	f7fe fc3c 	bl	801a710 <memcpy>
 801be98:	ec4b ab10 	vmov	d0, sl, fp
 801be9c:	aa20      	add	r2, sp, #128	; 0x80
 801be9e:	a91f      	add	r1, sp, #124	; 0x7c
 801bea0:	4620      	mov	r0, r4
 801bea2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801bea6:	f002 f96f 	bl	801e188 <__d2b>
 801beaa:	901e      	str	r0, [sp, #120]	; 0x78
 801beac:	2800      	cmp	r0, #0
 801beae:	f43f aefb 	beq.w	801bca8 <_strtod_l+0x498>
 801beb2:	2101      	movs	r1, #1
 801beb4:	4620      	mov	r0, r4
 801beb6:	f001 fec5 	bl	801dc44 <__i2b>
 801beba:	4606      	mov	r6, r0
 801bebc:	2800      	cmp	r0, #0
 801bebe:	f43f aef3 	beq.w	801bca8 <_strtod_l+0x498>
 801bec2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801bec4:	9904      	ldr	r1, [sp, #16]
 801bec6:	2b00      	cmp	r3, #0
 801bec8:	bfab      	itete	ge
 801beca:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801becc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801bece:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801bed0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801bed4:	bfac      	ite	ge
 801bed6:	eb03 0902 	addge.w	r9, r3, r2
 801beda:	1ad7      	sublt	r7, r2, r3
 801bedc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801bede:	eba3 0801 	sub.w	r8, r3, r1
 801bee2:	4490      	add	r8, r2
 801bee4:	4ba3      	ldr	r3, [pc, #652]	; (801c174 <_strtod_l+0x964>)
 801bee6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801beea:	4598      	cmp	r8, r3
 801beec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801bef0:	f280 80cc 	bge.w	801c08c <_strtod_l+0x87c>
 801bef4:	eba3 0308 	sub.w	r3, r3, r8
 801bef8:	2b1f      	cmp	r3, #31
 801befa:	eba2 0203 	sub.w	r2, r2, r3
 801befe:	f04f 0101 	mov.w	r1, #1
 801bf02:	f300 80b6 	bgt.w	801c072 <_strtod_l+0x862>
 801bf06:	fa01 f303 	lsl.w	r3, r1, r3
 801bf0a:	9311      	str	r3, [sp, #68]	; 0x44
 801bf0c:	2300      	movs	r3, #0
 801bf0e:	930c      	str	r3, [sp, #48]	; 0x30
 801bf10:	eb09 0802 	add.w	r8, r9, r2
 801bf14:	9b04      	ldr	r3, [sp, #16]
 801bf16:	45c1      	cmp	r9, r8
 801bf18:	4417      	add	r7, r2
 801bf1a:	441f      	add	r7, r3
 801bf1c:	464b      	mov	r3, r9
 801bf1e:	bfa8      	it	ge
 801bf20:	4643      	movge	r3, r8
 801bf22:	42bb      	cmp	r3, r7
 801bf24:	bfa8      	it	ge
 801bf26:	463b      	movge	r3, r7
 801bf28:	2b00      	cmp	r3, #0
 801bf2a:	bfc2      	ittt	gt
 801bf2c:	eba8 0803 	subgt.w	r8, r8, r3
 801bf30:	1aff      	subgt	r7, r7, r3
 801bf32:	eba9 0903 	subgt.w	r9, r9, r3
 801bf36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bf38:	2b00      	cmp	r3, #0
 801bf3a:	dd17      	ble.n	801bf6c <_strtod_l+0x75c>
 801bf3c:	4631      	mov	r1, r6
 801bf3e:	461a      	mov	r2, r3
 801bf40:	4620      	mov	r0, r4
 801bf42:	f001 ff3b 	bl	801ddbc <__pow5mult>
 801bf46:	4606      	mov	r6, r0
 801bf48:	2800      	cmp	r0, #0
 801bf4a:	f43f aead 	beq.w	801bca8 <_strtod_l+0x498>
 801bf4e:	4601      	mov	r1, r0
 801bf50:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801bf52:	4620      	mov	r0, r4
 801bf54:	f001 fe8c 	bl	801dc70 <__multiply>
 801bf58:	900f      	str	r0, [sp, #60]	; 0x3c
 801bf5a:	2800      	cmp	r0, #0
 801bf5c:	f43f aea4 	beq.w	801bca8 <_strtod_l+0x498>
 801bf60:	991e      	ldr	r1, [sp, #120]	; 0x78
 801bf62:	4620      	mov	r0, r4
 801bf64:	f001 fd68 	bl	801da38 <_Bfree>
 801bf68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bf6a:	931e      	str	r3, [sp, #120]	; 0x78
 801bf6c:	f1b8 0f00 	cmp.w	r8, #0
 801bf70:	f300 8091 	bgt.w	801c096 <_strtod_l+0x886>
 801bf74:	9b08      	ldr	r3, [sp, #32]
 801bf76:	2b00      	cmp	r3, #0
 801bf78:	dd08      	ble.n	801bf8c <_strtod_l+0x77c>
 801bf7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801bf7c:	9907      	ldr	r1, [sp, #28]
 801bf7e:	4620      	mov	r0, r4
 801bf80:	f001 ff1c 	bl	801ddbc <__pow5mult>
 801bf84:	9007      	str	r0, [sp, #28]
 801bf86:	2800      	cmp	r0, #0
 801bf88:	f43f ae8e 	beq.w	801bca8 <_strtod_l+0x498>
 801bf8c:	2f00      	cmp	r7, #0
 801bf8e:	dd08      	ble.n	801bfa2 <_strtod_l+0x792>
 801bf90:	9907      	ldr	r1, [sp, #28]
 801bf92:	463a      	mov	r2, r7
 801bf94:	4620      	mov	r0, r4
 801bf96:	f001 ff6b 	bl	801de70 <__lshift>
 801bf9a:	9007      	str	r0, [sp, #28]
 801bf9c:	2800      	cmp	r0, #0
 801bf9e:	f43f ae83 	beq.w	801bca8 <_strtod_l+0x498>
 801bfa2:	f1b9 0f00 	cmp.w	r9, #0
 801bfa6:	dd08      	ble.n	801bfba <_strtod_l+0x7aa>
 801bfa8:	4631      	mov	r1, r6
 801bfaa:	464a      	mov	r2, r9
 801bfac:	4620      	mov	r0, r4
 801bfae:	f001 ff5f 	bl	801de70 <__lshift>
 801bfb2:	4606      	mov	r6, r0
 801bfb4:	2800      	cmp	r0, #0
 801bfb6:	f43f ae77 	beq.w	801bca8 <_strtod_l+0x498>
 801bfba:	9a07      	ldr	r2, [sp, #28]
 801bfbc:	991e      	ldr	r1, [sp, #120]	; 0x78
 801bfbe:	4620      	mov	r0, r4
 801bfc0:	f001 ffde 	bl	801df80 <__mdiff>
 801bfc4:	4605      	mov	r5, r0
 801bfc6:	2800      	cmp	r0, #0
 801bfc8:	f43f ae6e 	beq.w	801bca8 <_strtod_l+0x498>
 801bfcc:	68c3      	ldr	r3, [r0, #12]
 801bfce:	930f      	str	r3, [sp, #60]	; 0x3c
 801bfd0:	2300      	movs	r3, #0
 801bfd2:	60c3      	str	r3, [r0, #12]
 801bfd4:	4631      	mov	r1, r6
 801bfd6:	f001 ffb7 	bl	801df48 <__mcmp>
 801bfda:	2800      	cmp	r0, #0
 801bfdc:	da65      	bge.n	801c0aa <_strtod_l+0x89a>
 801bfde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bfe0:	ea53 030a 	orrs.w	r3, r3, sl
 801bfe4:	f040 8087 	bne.w	801c0f6 <_strtod_l+0x8e6>
 801bfe8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bfec:	2b00      	cmp	r3, #0
 801bfee:	f040 8082 	bne.w	801c0f6 <_strtod_l+0x8e6>
 801bff2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bff6:	0d1b      	lsrs	r3, r3, #20
 801bff8:	051b      	lsls	r3, r3, #20
 801bffa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801bffe:	d97a      	bls.n	801c0f6 <_strtod_l+0x8e6>
 801c000:	696b      	ldr	r3, [r5, #20]
 801c002:	b913      	cbnz	r3, 801c00a <_strtod_l+0x7fa>
 801c004:	692b      	ldr	r3, [r5, #16]
 801c006:	2b01      	cmp	r3, #1
 801c008:	dd75      	ble.n	801c0f6 <_strtod_l+0x8e6>
 801c00a:	4629      	mov	r1, r5
 801c00c:	2201      	movs	r2, #1
 801c00e:	4620      	mov	r0, r4
 801c010:	f001 ff2e 	bl	801de70 <__lshift>
 801c014:	4631      	mov	r1, r6
 801c016:	4605      	mov	r5, r0
 801c018:	f001 ff96 	bl	801df48 <__mcmp>
 801c01c:	2800      	cmp	r0, #0
 801c01e:	dd6a      	ble.n	801c0f6 <_strtod_l+0x8e6>
 801c020:	9904      	ldr	r1, [sp, #16]
 801c022:	4a55      	ldr	r2, [pc, #340]	; (801c178 <_strtod_l+0x968>)
 801c024:	465b      	mov	r3, fp
 801c026:	2900      	cmp	r1, #0
 801c028:	f000 8085 	beq.w	801c136 <_strtod_l+0x926>
 801c02c:	ea02 010b 	and.w	r1, r2, fp
 801c030:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801c034:	dc7f      	bgt.n	801c136 <_strtod_l+0x926>
 801c036:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801c03a:	f77f aeaa 	ble.w	801bd92 <_strtod_l+0x582>
 801c03e:	4a4f      	ldr	r2, [pc, #316]	; (801c17c <_strtod_l+0x96c>)
 801c040:	2300      	movs	r3, #0
 801c042:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801c046:	4650      	mov	r0, sl
 801c048:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801c04c:	4659      	mov	r1, fp
 801c04e:	f7e4 fad3 	bl	80005f8 <__aeabi_dmul>
 801c052:	460b      	mov	r3, r1
 801c054:	4303      	orrs	r3, r0
 801c056:	bf08      	it	eq
 801c058:	2322      	moveq	r3, #34	; 0x22
 801c05a:	4682      	mov	sl, r0
 801c05c:	468b      	mov	fp, r1
 801c05e:	bf08      	it	eq
 801c060:	6023      	streq	r3, [r4, #0]
 801c062:	e62b      	b.n	801bcbc <_strtod_l+0x4ac>
 801c064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c068:	fa02 f303 	lsl.w	r3, r2, r3
 801c06c:	ea03 0a0a 	and.w	sl, r3, sl
 801c070:	e6de      	b.n	801be30 <_strtod_l+0x620>
 801c072:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801c076:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801c07a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801c07e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801c082:	fa01 f308 	lsl.w	r3, r1, r8
 801c086:	930c      	str	r3, [sp, #48]	; 0x30
 801c088:	9111      	str	r1, [sp, #68]	; 0x44
 801c08a:	e741      	b.n	801bf10 <_strtod_l+0x700>
 801c08c:	2300      	movs	r3, #0
 801c08e:	930c      	str	r3, [sp, #48]	; 0x30
 801c090:	2301      	movs	r3, #1
 801c092:	9311      	str	r3, [sp, #68]	; 0x44
 801c094:	e73c      	b.n	801bf10 <_strtod_l+0x700>
 801c096:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c098:	4642      	mov	r2, r8
 801c09a:	4620      	mov	r0, r4
 801c09c:	f001 fee8 	bl	801de70 <__lshift>
 801c0a0:	901e      	str	r0, [sp, #120]	; 0x78
 801c0a2:	2800      	cmp	r0, #0
 801c0a4:	f47f af66 	bne.w	801bf74 <_strtod_l+0x764>
 801c0a8:	e5fe      	b.n	801bca8 <_strtod_l+0x498>
 801c0aa:	465f      	mov	r7, fp
 801c0ac:	d16e      	bne.n	801c18c <_strtod_l+0x97c>
 801c0ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c0b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c0b4:	b342      	cbz	r2, 801c108 <_strtod_l+0x8f8>
 801c0b6:	4a32      	ldr	r2, [pc, #200]	; (801c180 <_strtod_l+0x970>)
 801c0b8:	4293      	cmp	r3, r2
 801c0ba:	d128      	bne.n	801c10e <_strtod_l+0x8fe>
 801c0bc:	9b04      	ldr	r3, [sp, #16]
 801c0be:	4650      	mov	r0, sl
 801c0c0:	b1eb      	cbz	r3, 801c0fe <_strtod_l+0x8ee>
 801c0c2:	4a2d      	ldr	r2, [pc, #180]	; (801c178 <_strtod_l+0x968>)
 801c0c4:	403a      	ands	r2, r7
 801c0c6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801c0ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801c0ce:	d819      	bhi.n	801c104 <_strtod_l+0x8f4>
 801c0d0:	0d12      	lsrs	r2, r2, #20
 801c0d2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801c0d6:	fa01 f303 	lsl.w	r3, r1, r3
 801c0da:	4298      	cmp	r0, r3
 801c0dc:	d117      	bne.n	801c10e <_strtod_l+0x8fe>
 801c0de:	4b29      	ldr	r3, [pc, #164]	; (801c184 <_strtod_l+0x974>)
 801c0e0:	429f      	cmp	r7, r3
 801c0e2:	d102      	bne.n	801c0ea <_strtod_l+0x8da>
 801c0e4:	3001      	adds	r0, #1
 801c0e6:	f43f addf 	beq.w	801bca8 <_strtod_l+0x498>
 801c0ea:	4b23      	ldr	r3, [pc, #140]	; (801c178 <_strtod_l+0x968>)
 801c0ec:	403b      	ands	r3, r7
 801c0ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801c0f2:	f04f 0a00 	mov.w	sl, #0
 801c0f6:	9b04      	ldr	r3, [sp, #16]
 801c0f8:	2b00      	cmp	r3, #0
 801c0fa:	d1a0      	bne.n	801c03e <_strtod_l+0x82e>
 801c0fc:	e5de      	b.n	801bcbc <_strtod_l+0x4ac>
 801c0fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c102:	e7ea      	b.n	801c0da <_strtod_l+0x8ca>
 801c104:	460b      	mov	r3, r1
 801c106:	e7e8      	b.n	801c0da <_strtod_l+0x8ca>
 801c108:	ea53 030a 	orrs.w	r3, r3, sl
 801c10c:	d088      	beq.n	801c020 <_strtod_l+0x810>
 801c10e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c110:	b1db      	cbz	r3, 801c14a <_strtod_l+0x93a>
 801c112:	423b      	tst	r3, r7
 801c114:	d0ef      	beq.n	801c0f6 <_strtod_l+0x8e6>
 801c116:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c118:	9a04      	ldr	r2, [sp, #16]
 801c11a:	4650      	mov	r0, sl
 801c11c:	4659      	mov	r1, fp
 801c11e:	b1c3      	cbz	r3, 801c152 <_strtod_l+0x942>
 801c120:	f7ff fb58 	bl	801b7d4 <sulp>
 801c124:	4602      	mov	r2, r0
 801c126:	460b      	mov	r3, r1
 801c128:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c12c:	f7e4 f8ae 	bl	800028c <__adddf3>
 801c130:	4682      	mov	sl, r0
 801c132:	468b      	mov	fp, r1
 801c134:	e7df      	b.n	801c0f6 <_strtod_l+0x8e6>
 801c136:	4013      	ands	r3, r2
 801c138:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801c13c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801c140:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801c144:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801c148:	e7d5      	b.n	801c0f6 <_strtod_l+0x8e6>
 801c14a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c14c:	ea13 0f0a 	tst.w	r3, sl
 801c150:	e7e0      	b.n	801c114 <_strtod_l+0x904>
 801c152:	f7ff fb3f 	bl	801b7d4 <sulp>
 801c156:	4602      	mov	r2, r0
 801c158:	460b      	mov	r3, r1
 801c15a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c15e:	f7e4 f893 	bl	8000288 <__aeabi_dsub>
 801c162:	2200      	movs	r2, #0
 801c164:	2300      	movs	r3, #0
 801c166:	4682      	mov	sl, r0
 801c168:	468b      	mov	fp, r1
 801c16a:	f7e4 fcad 	bl	8000ac8 <__aeabi_dcmpeq>
 801c16e:	2800      	cmp	r0, #0
 801c170:	d0c1      	beq.n	801c0f6 <_strtod_l+0x8e6>
 801c172:	e60e      	b.n	801bd92 <_strtod_l+0x582>
 801c174:	fffffc02 	.word	0xfffffc02
 801c178:	7ff00000 	.word	0x7ff00000
 801c17c:	39500000 	.word	0x39500000
 801c180:	000fffff 	.word	0x000fffff
 801c184:	7fefffff 	.word	0x7fefffff
 801c188:	08020c78 	.word	0x08020c78
 801c18c:	4631      	mov	r1, r6
 801c18e:	4628      	mov	r0, r5
 801c190:	f002 f856 	bl	801e240 <__ratio>
 801c194:	ec59 8b10 	vmov	r8, r9, d0
 801c198:	ee10 0a10 	vmov	r0, s0
 801c19c:	2200      	movs	r2, #0
 801c19e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c1a2:	4649      	mov	r1, r9
 801c1a4:	f7e4 fca4 	bl	8000af0 <__aeabi_dcmple>
 801c1a8:	2800      	cmp	r0, #0
 801c1aa:	d07c      	beq.n	801c2a6 <_strtod_l+0xa96>
 801c1ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	d04c      	beq.n	801c24c <_strtod_l+0xa3c>
 801c1b2:	4b95      	ldr	r3, [pc, #596]	; (801c408 <_strtod_l+0xbf8>)
 801c1b4:	2200      	movs	r2, #0
 801c1b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801c1ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801c408 <_strtod_l+0xbf8>
 801c1be:	f04f 0800 	mov.w	r8, #0
 801c1c2:	4b92      	ldr	r3, [pc, #584]	; (801c40c <_strtod_l+0xbfc>)
 801c1c4:	403b      	ands	r3, r7
 801c1c6:	9311      	str	r3, [sp, #68]	; 0x44
 801c1c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c1ca:	4b91      	ldr	r3, [pc, #580]	; (801c410 <_strtod_l+0xc00>)
 801c1cc:	429a      	cmp	r2, r3
 801c1ce:	f040 80b2 	bne.w	801c336 <_strtod_l+0xb26>
 801c1d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c1d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c1da:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801c1de:	ec4b ab10 	vmov	d0, sl, fp
 801c1e2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801c1e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c1ea:	f001 ff51 	bl	801e090 <__ulp>
 801c1ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c1f2:	ec53 2b10 	vmov	r2, r3, d0
 801c1f6:	f7e4 f9ff 	bl	80005f8 <__aeabi_dmul>
 801c1fa:	4652      	mov	r2, sl
 801c1fc:	465b      	mov	r3, fp
 801c1fe:	f7e4 f845 	bl	800028c <__adddf3>
 801c202:	460b      	mov	r3, r1
 801c204:	4981      	ldr	r1, [pc, #516]	; (801c40c <_strtod_l+0xbfc>)
 801c206:	4a83      	ldr	r2, [pc, #524]	; (801c414 <_strtod_l+0xc04>)
 801c208:	4019      	ands	r1, r3
 801c20a:	4291      	cmp	r1, r2
 801c20c:	4682      	mov	sl, r0
 801c20e:	d95e      	bls.n	801c2ce <_strtod_l+0xabe>
 801c210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c212:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801c216:	4293      	cmp	r3, r2
 801c218:	d103      	bne.n	801c222 <_strtod_l+0xa12>
 801c21a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c21c:	3301      	adds	r3, #1
 801c21e:	f43f ad43 	beq.w	801bca8 <_strtod_l+0x498>
 801c222:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801c420 <_strtod_l+0xc10>
 801c226:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801c22a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c22c:	4620      	mov	r0, r4
 801c22e:	f001 fc03 	bl	801da38 <_Bfree>
 801c232:	9907      	ldr	r1, [sp, #28]
 801c234:	4620      	mov	r0, r4
 801c236:	f001 fbff 	bl	801da38 <_Bfree>
 801c23a:	4631      	mov	r1, r6
 801c23c:	4620      	mov	r0, r4
 801c23e:	f001 fbfb 	bl	801da38 <_Bfree>
 801c242:	4629      	mov	r1, r5
 801c244:	4620      	mov	r0, r4
 801c246:	f001 fbf7 	bl	801da38 <_Bfree>
 801c24a:	e613      	b.n	801be74 <_strtod_l+0x664>
 801c24c:	f1ba 0f00 	cmp.w	sl, #0
 801c250:	d11b      	bne.n	801c28a <_strtod_l+0xa7a>
 801c252:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c256:	b9f3      	cbnz	r3, 801c296 <_strtod_l+0xa86>
 801c258:	4b6b      	ldr	r3, [pc, #428]	; (801c408 <_strtod_l+0xbf8>)
 801c25a:	2200      	movs	r2, #0
 801c25c:	4640      	mov	r0, r8
 801c25e:	4649      	mov	r1, r9
 801c260:	f7e4 fc3c 	bl	8000adc <__aeabi_dcmplt>
 801c264:	b9d0      	cbnz	r0, 801c29c <_strtod_l+0xa8c>
 801c266:	4640      	mov	r0, r8
 801c268:	4649      	mov	r1, r9
 801c26a:	4b6b      	ldr	r3, [pc, #428]	; (801c418 <_strtod_l+0xc08>)
 801c26c:	2200      	movs	r2, #0
 801c26e:	f7e4 f9c3 	bl	80005f8 <__aeabi_dmul>
 801c272:	4680      	mov	r8, r0
 801c274:	4689      	mov	r9, r1
 801c276:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801c27a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801c27e:	931b      	str	r3, [sp, #108]	; 0x6c
 801c280:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801c284:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801c288:	e79b      	b.n	801c1c2 <_strtod_l+0x9b2>
 801c28a:	f1ba 0f01 	cmp.w	sl, #1
 801c28e:	d102      	bne.n	801c296 <_strtod_l+0xa86>
 801c290:	2f00      	cmp	r7, #0
 801c292:	f43f ad7e 	beq.w	801bd92 <_strtod_l+0x582>
 801c296:	4b61      	ldr	r3, [pc, #388]	; (801c41c <_strtod_l+0xc0c>)
 801c298:	2200      	movs	r2, #0
 801c29a:	e78c      	b.n	801c1b6 <_strtod_l+0x9a6>
 801c29c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801c418 <_strtod_l+0xc08>
 801c2a0:	f04f 0800 	mov.w	r8, #0
 801c2a4:	e7e7      	b.n	801c276 <_strtod_l+0xa66>
 801c2a6:	4b5c      	ldr	r3, [pc, #368]	; (801c418 <_strtod_l+0xc08>)
 801c2a8:	4640      	mov	r0, r8
 801c2aa:	4649      	mov	r1, r9
 801c2ac:	2200      	movs	r2, #0
 801c2ae:	f7e4 f9a3 	bl	80005f8 <__aeabi_dmul>
 801c2b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c2b4:	4680      	mov	r8, r0
 801c2b6:	4689      	mov	r9, r1
 801c2b8:	b933      	cbnz	r3, 801c2c8 <_strtod_l+0xab8>
 801c2ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c2be:	9012      	str	r0, [sp, #72]	; 0x48
 801c2c0:	9313      	str	r3, [sp, #76]	; 0x4c
 801c2c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801c2c6:	e7dd      	b.n	801c284 <_strtod_l+0xa74>
 801c2c8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801c2cc:	e7f9      	b.n	801c2c2 <_strtod_l+0xab2>
 801c2ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801c2d2:	9b04      	ldr	r3, [sp, #16]
 801c2d4:	2b00      	cmp	r3, #0
 801c2d6:	d1a8      	bne.n	801c22a <_strtod_l+0xa1a>
 801c2d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c2dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c2de:	0d1b      	lsrs	r3, r3, #20
 801c2e0:	051b      	lsls	r3, r3, #20
 801c2e2:	429a      	cmp	r2, r3
 801c2e4:	d1a1      	bne.n	801c22a <_strtod_l+0xa1a>
 801c2e6:	4640      	mov	r0, r8
 801c2e8:	4649      	mov	r1, r9
 801c2ea:	f7e4 fce5 	bl	8000cb8 <__aeabi_d2lz>
 801c2ee:	f7e4 f955 	bl	800059c <__aeabi_l2d>
 801c2f2:	4602      	mov	r2, r0
 801c2f4:	460b      	mov	r3, r1
 801c2f6:	4640      	mov	r0, r8
 801c2f8:	4649      	mov	r1, r9
 801c2fa:	f7e3 ffc5 	bl	8000288 <__aeabi_dsub>
 801c2fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c300:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c304:	ea43 030a 	orr.w	r3, r3, sl
 801c308:	4313      	orrs	r3, r2
 801c30a:	4680      	mov	r8, r0
 801c30c:	4689      	mov	r9, r1
 801c30e:	d053      	beq.n	801c3b8 <_strtod_l+0xba8>
 801c310:	a335      	add	r3, pc, #212	; (adr r3, 801c3e8 <_strtod_l+0xbd8>)
 801c312:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c316:	f7e4 fbe1 	bl	8000adc <__aeabi_dcmplt>
 801c31a:	2800      	cmp	r0, #0
 801c31c:	f47f acce 	bne.w	801bcbc <_strtod_l+0x4ac>
 801c320:	a333      	add	r3, pc, #204	; (adr r3, 801c3f0 <_strtod_l+0xbe0>)
 801c322:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c326:	4640      	mov	r0, r8
 801c328:	4649      	mov	r1, r9
 801c32a:	f7e4 fbf5 	bl	8000b18 <__aeabi_dcmpgt>
 801c32e:	2800      	cmp	r0, #0
 801c330:	f43f af7b 	beq.w	801c22a <_strtod_l+0xa1a>
 801c334:	e4c2      	b.n	801bcbc <_strtod_l+0x4ac>
 801c336:	9b04      	ldr	r3, [sp, #16]
 801c338:	b333      	cbz	r3, 801c388 <_strtod_l+0xb78>
 801c33a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c33c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801c340:	d822      	bhi.n	801c388 <_strtod_l+0xb78>
 801c342:	a32d      	add	r3, pc, #180	; (adr r3, 801c3f8 <_strtod_l+0xbe8>)
 801c344:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c348:	4640      	mov	r0, r8
 801c34a:	4649      	mov	r1, r9
 801c34c:	f7e4 fbd0 	bl	8000af0 <__aeabi_dcmple>
 801c350:	b1a0      	cbz	r0, 801c37c <_strtod_l+0xb6c>
 801c352:	4649      	mov	r1, r9
 801c354:	4640      	mov	r0, r8
 801c356:	f7e4 fc27 	bl	8000ba8 <__aeabi_d2uiz>
 801c35a:	2801      	cmp	r0, #1
 801c35c:	bf38      	it	cc
 801c35e:	2001      	movcc	r0, #1
 801c360:	f7e4 f8d0 	bl	8000504 <__aeabi_ui2d>
 801c364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c366:	4680      	mov	r8, r0
 801c368:	4689      	mov	r9, r1
 801c36a:	bb13      	cbnz	r3, 801c3b2 <_strtod_l+0xba2>
 801c36c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c370:	9014      	str	r0, [sp, #80]	; 0x50
 801c372:	9315      	str	r3, [sp, #84]	; 0x54
 801c374:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801c378:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801c37c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c37e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c380:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801c384:	1a9b      	subs	r3, r3, r2
 801c386:	930d      	str	r3, [sp, #52]	; 0x34
 801c388:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c38c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801c390:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c394:	f001 fe7c 	bl	801e090 <__ulp>
 801c398:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c39c:	ec53 2b10 	vmov	r2, r3, d0
 801c3a0:	f7e4 f92a 	bl	80005f8 <__aeabi_dmul>
 801c3a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c3a8:	f7e3 ff70 	bl	800028c <__adddf3>
 801c3ac:	4682      	mov	sl, r0
 801c3ae:	468b      	mov	fp, r1
 801c3b0:	e78f      	b.n	801c2d2 <_strtod_l+0xac2>
 801c3b2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801c3b6:	e7dd      	b.n	801c374 <_strtod_l+0xb64>
 801c3b8:	a311      	add	r3, pc, #68	; (adr r3, 801c400 <_strtod_l+0xbf0>)
 801c3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3be:	f7e4 fb8d 	bl	8000adc <__aeabi_dcmplt>
 801c3c2:	e7b4      	b.n	801c32e <_strtod_l+0xb1e>
 801c3c4:	2300      	movs	r3, #0
 801c3c6:	930e      	str	r3, [sp, #56]	; 0x38
 801c3c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c3ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c3cc:	6013      	str	r3, [r2, #0]
 801c3ce:	f7ff ba65 	b.w	801b89c <_strtod_l+0x8c>
 801c3d2:	2b65      	cmp	r3, #101	; 0x65
 801c3d4:	f43f ab5d 	beq.w	801ba92 <_strtod_l+0x282>
 801c3d8:	2b45      	cmp	r3, #69	; 0x45
 801c3da:	f43f ab5a 	beq.w	801ba92 <_strtod_l+0x282>
 801c3de:	2201      	movs	r2, #1
 801c3e0:	f7ff bb92 	b.w	801bb08 <_strtod_l+0x2f8>
 801c3e4:	f3af 8000 	nop.w
 801c3e8:	94a03595 	.word	0x94a03595
 801c3ec:	3fdfffff 	.word	0x3fdfffff
 801c3f0:	35afe535 	.word	0x35afe535
 801c3f4:	3fe00000 	.word	0x3fe00000
 801c3f8:	ffc00000 	.word	0xffc00000
 801c3fc:	41dfffff 	.word	0x41dfffff
 801c400:	94a03595 	.word	0x94a03595
 801c404:	3fcfffff 	.word	0x3fcfffff
 801c408:	3ff00000 	.word	0x3ff00000
 801c40c:	7ff00000 	.word	0x7ff00000
 801c410:	7fe00000 	.word	0x7fe00000
 801c414:	7c9fffff 	.word	0x7c9fffff
 801c418:	3fe00000 	.word	0x3fe00000
 801c41c:	bff00000 	.word	0xbff00000
 801c420:	7fefffff 	.word	0x7fefffff

0801c424 <_strtod_r>:
 801c424:	4b01      	ldr	r3, [pc, #4]	; (801c42c <_strtod_r+0x8>)
 801c426:	f7ff b9f3 	b.w	801b810 <_strtod_l>
 801c42a:	bf00      	nop
 801c42c:	200000f4 	.word	0x200000f4

0801c430 <_strtol_l.isra.0>:
 801c430:	2b01      	cmp	r3, #1
 801c432:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c436:	d001      	beq.n	801c43c <_strtol_l.isra.0+0xc>
 801c438:	2b24      	cmp	r3, #36	; 0x24
 801c43a:	d906      	bls.n	801c44a <_strtol_l.isra.0+0x1a>
 801c43c:	f7fe f936 	bl	801a6ac <__errno>
 801c440:	2316      	movs	r3, #22
 801c442:	6003      	str	r3, [r0, #0]
 801c444:	2000      	movs	r0, #0
 801c446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c44a:	4f3a      	ldr	r7, [pc, #232]	; (801c534 <_strtol_l.isra.0+0x104>)
 801c44c:	468e      	mov	lr, r1
 801c44e:	4676      	mov	r6, lr
 801c450:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c454:	5de5      	ldrb	r5, [r4, r7]
 801c456:	f015 0508 	ands.w	r5, r5, #8
 801c45a:	d1f8      	bne.n	801c44e <_strtol_l.isra.0+0x1e>
 801c45c:	2c2d      	cmp	r4, #45	; 0x2d
 801c45e:	d134      	bne.n	801c4ca <_strtol_l.isra.0+0x9a>
 801c460:	f89e 4000 	ldrb.w	r4, [lr]
 801c464:	f04f 0801 	mov.w	r8, #1
 801c468:	f106 0e02 	add.w	lr, r6, #2
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	d05c      	beq.n	801c52a <_strtol_l.isra.0+0xfa>
 801c470:	2b10      	cmp	r3, #16
 801c472:	d10c      	bne.n	801c48e <_strtol_l.isra.0+0x5e>
 801c474:	2c30      	cmp	r4, #48	; 0x30
 801c476:	d10a      	bne.n	801c48e <_strtol_l.isra.0+0x5e>
 801c478:	f89e 4000 	ldrb.w	r4, [lr]
 801c47c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801c480:	2c58      	cmp	r4, #88	; 0x58
 801c482:	d14d      	bne.n	801c520 <_strtol_l.isra.0+0xf0>
 801c484:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801c488:	2310      	movs	r3, #16
 801c48a:	f10e 0e02 	add.w	lr, lr, #2
 801c48e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801c492:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801c496:	2600      	movs	r6, #0
 801c498:	fbbc f9f3 	udiv	r9, ip, r3
 801c49c:	4635      	mov	r5, r6
 801c49e:	fb03 ca19 	mls	sl, r3, r9, ip
 801c4a2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801c4a6:	2f09      	cmp	r7, #9
 801c4a8:	d818      	bhi.n	801c4dc <_strtol_l.isra.0+0xac>
 801c4aa:	463c      	mov	r4, r7
 801c4ac:	42a3      	cmp	r3, r4
 801c4ae:	dd24      	ble.n	801c4fa <_strtol_l.isra.0+0xca>
 801c4b0:	2e00      	cmp	r6, #0
 801c4b2:	db1f      	blt.n	801c4f4 <_strtol_l.isra.0+0xc4>
 801c4b4:	45a9      	cmp	r9, r5
 801c4b6:	d31d      	bcc.n	801c4f4 <_strtol_l.isra.0+0xc4>
 801c4b8:	d101      	bne.n	801c4be <_strtol_l.isra.0+0x8e>
 801c4ba:	45a2      	cmp	sl, r4
 801c4bc:	db1a      	blt.n	801c4f4 <_strtol_l.isra.0+0xc4>
 801c4be:	fb05 4503 	mla	r5, r5, r3, r4
 801c4c2:	2601      	movs	r6, #1
 801c4c4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c4c8:	e7eb      	b.n	801c4a2 <_strtol_l.isra.0+0x72>
 801c4ca:	2c2b      	cmp	r4, #43	; 0x2b
 801c4cc:	bf08      	it	eq
 801c4ce:	f89e 4000 	ldrbeq.w	r4, [lr]
 801c4d2:	46a8      	mov	r8, r5
 801c4d4:	bf08      	it	eq
 801c4d6:	f106 0e02 	addeq.w	lr, r6, #2
 801c4da:	e7c7      	b.n	801c46c <_strtol_l.isra.0+0x3c>
 801c4dc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801c4e0:	2f19      	cmp	r7, #25
 801c4e2:	d801      	bhi.n	801c4e8 <_strtol_l.isra.0+0xb8>
 801c4e4:	3c37      	subs	r4, #55	; 0x37
 801c4e6:	e7e1      	b.n	801c4ac <_strtol_l.isra.0+0x7c>
 801c4e8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801c4ec:	2f19      	cmp	r7, #25
 801c4ee:	d804      	bhi.n	801c4fa <_strtol_l.isra.0+0xca>
 801c4f0:	3c57      	subs	r4, #87	; 0x57
 801c4f2:	e7db      	b.n	801c4ac <_strtol_l.isra.0+0x7c>
 801c4f4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801c4f8:	e7e4      	b.n	801c4c4 <_strtol_l.isra.0+0x94>
 801c4fa:	2e00      	cmp	r6, #0
 801c4fc:	da05      	bge.n	801c50a <_strtol_l.isra.0+0xda>
 801c4fe:	2322      	movs	r3, #34	; 0x22
 801c500:	6003      	str	r3, [r0, #0]
 801c502:	4665      	mov	r5, ip
 801c504:	b942      	cbnz	r2, 801c518 <_strtol_l.isra.0+0xe8>
 801c506:	4628      	mov	r0, r5
 801c508:	e79d      	b.n	801c446 <_strtol_l.isra.0+0x16>
 801c50a:	f1b8 0f00 	cmp.w	r8, #0
 801c50e:	d000      	beq.n	801c512 <_strtol_l.isra.0+0xe2>
 801c510:	426d      	negs	r5, r5
 801c512:	2a00      	cmp	r2, #0
 801c514:	d0f7      	beq.n	801c506 <_strtol_l.isra.0+0xd6>
 801c516:	b10e      	cbz	r6, 801c51c <_strtol_l.isra.0+0xec>
 801c518:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 801c51c:	6011      	str	r1, [r2, #0]
 801c51e:	e7f2      	b.n	801c506 <_strtol_l.isra.0+0xd6>
 801c520:	2430      	movs	r4, #48	; 0x30
 801c522:	2b00      	cmp	r3, #0
 801c524:	d1b3      	bne.n	801c48e <_strtol_l.isra.0+0x5e>
 801c526:	2308      	movs	r3, #8
 801c528:	e7b1      	b.n	801c48e <_strtol_l.isra.0+0x5e>
 801c52a:	2c30      	cmp	r4, #48	; 0x30
 801c52c:	d0a4      	beq.n	801c478 <_strtol_l.isra.0+0x48>
 801c52e:	230a      	movs	r3, #10
 801c530:	e7ad      	b.n	801c48e <_strtol_l.isra.0+0x5e>
 801c532:	bf00      	nop
 801c534:	08020ca1 	.word	0x08020ca1

0801c538 <_strtol_r>:
 801c538:	f7ff bf7a 	b.w	801c430 <_strtol_l.isra.0>

0801c53c <_write_r>:
 801c53c:	b538      	push	{r3, r4, r5, lr}
 801c53e:	4d07      	ldr	r5, [pc, #28]	; (801c55c <_write_r+0x20>)
 801c540:	4604      	mov	r4, r0
 801c542:	4608      	mov	r0, r1
 801c544:	4611      	mov	r1, r2
 801c546:	2200      	movs	r2, #0
 801c548:	602a      	str	r2, [r5, #0]
 801c54a:	461a      	mov	r2, r3
 801c54c:	f7f0 f815 	bl	800c57a <_write>
 801c550:	1c43      	adds	r3, r0, #1
 801c552:	d102      	bne.n	801c55a <_write_r+0x1e>
 801c554:	682b      	ldr	r3, [r5, #0]
 801c556:	b103      	cbz	r3, 801c55a <_write_r+0x1e>
 801c558:	6023      	str	r3, [r4, #0]
 801c55a:	bd38      	pop	{r3, r4, r5, pc}
 801c55c:	2000aab8 	.word	0x2000aab8

0801c560 <_close_r>:
 801c560:	b538      	push	{r3, r4, r5, lr}
 801c562:	4d06      	ldr	r5, [pc, #24]	; (801c57c <_close_r+0x1c>)
 801c564:	2300      	movs	r3, #0
 801c566:	4604      	mov	r4, r0
 801c568:	4608      	mov	r0, r1
 801c56a:	602b      	str	r3, [r5, #0]
 801c56c:	f7f0 f821 	bl	800c5b2 <_close>
 801c570:	1c43      	adds	r3, r0, #1
 801c572:	d102      	bne.n	801c57a <_close_r+0x1a>
 801c574:	682b      	ldr	r3, [r5, #0]
 801c576:	b103      	cbz	r3, 801c57a <_close_r+0x1a>
 801c578:	6023      	str	r3, [r4, #0]
 801c57a:	bd38      	pop	{r3, r4, r5, pc}
 801c57c:	2000aab8 	.word	0x2000aab8

0801c580 <quorem>:
 801c580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c584:	6903      	ldr	r3, [r0, #16]
 801c586:	690c      	ldr	r4, [r1, #16]
 801c588:	42a3      	cmp	r3, r4
 801c58a:	4607      	mov	r7, r0
 801c58c:	f2c0 8081 	blt.w	801c692 <quorem+0x112>
 801c590:	3c01      	subs	r4, #1
 801c592:	f101 0814 	add.w	r8, r1, #20
 801c596:	f100 0514 	add.w	r5, r0, #20
 801c59a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c59e:	9301      	str	r3, [sp, #4]
 801c5a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c5a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c5a8:	3301      	adds	r3, #1
 801c5aa:	429a      	cmp	r2, r3
 801c5ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c5b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c5b4:	fbb2 f6f3 	udiv	r6, r2, r3
 801c5b8:	d331      	bcc.n	801c61e <quorem+0x9e>
 801c5ba:	f04f 0e00 	mov.w	lr, #0
 801c5be:	4640      	mov	r0, r8
 801c5c0:	46ac      	mov	ip, r5
 801c5c2:	46f2      	mov	sl, lr
 801c5c4:	f850 2b04 	ldr.w	r2, [r0], #4
 801c5c8:	b293      	uxth	r3, r2
 801c5ca:	fb06 e303 	mla	r3, r6, r3, lr
 801c5ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801c5d2:	b29b      	uxth	r3, r3
 801c5d4:	ebaa 0303 	sub.w	r3, sl, r3
 801c5d8:	0c12      	lsrs	r2, r2, #16
 801c5da:	f8dc a000 	ldr.w	sl, [ip]
 801c5de:	fb06 e202 	mla	r2, r6, r2, lr
 801c5e2:	fa13 f38a 	uxtah	r3, r3, sl
 801c5e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c5ea:	fa1f fa82 	uxth.w	sl, r2
 801c5ee:	f8dc 2000 	ldr.w	r2, [ip]
 801c5f2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801c5f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c5fa:	b29b      	uxth	r3, r3
 801c5fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c600:	4581      	cmp	r9, r0
 801c602:	f84c 3b04 	str.w	r3, [ip], #4
 801c606:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c60a:	d2db      	bcs.n	801c5c4 <quorem+0x44>
 801c60c:	f855 300b 	ldr.w	r3, [r5, fp]
 801c610:	b92b      	cbnz	r3, 801c61e <quorem+0x9e>
 801c612:	9b01      	ldr	r3, [sp, #4]
 801c614:	3b04      	subs	r3, #4
 801c616:	429d      	cmp	r5, r3
 801c618:	461a      	mov	r2, r3
 801c61a:	d32e      	bcc.n	801c67a <quorem+0xfa>
 801c61c:	613c      	str	r4, [r7, #16]
 801c61e:	4638      	mov	r0, r7
 801c620:	f001 fc92 	bl	801df48 <__mcmp>
 801c624:	2800      	cmp	r0, #0
 801c626:	db24      	blt.n	801c672 <quorem+0xf2>
 801c628:	3601      	adds	r6, #1
 801c62a:	4628      	mov	r0, r5
 801c62c:	f04f 0c00 	mov.w	ip, #0
 801c630:	f858 2b04 	ldr.w	r2, [r8], #4
 801c634:	f8d0 e000 	ldr.w	lr, [r0]
 801c638:	b293      	uxth	r3, r2
 801c63a:	ebac 0303 	sub.w	r3, ip, r3
 801c63e:	0c12      	lsrs	r2, r2, #16
 801c640:	fa13 f38e 	uxtah	r3, r3, lr
 801c644:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c648:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c64c:	b29b      	uxth	r3, r3
 801c64e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c652:	45c1      	cmp	r9, r8
 801c654:	f840 3b04 	str.w	r3, [r0], #4
 801c658:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c65c:	d2e8      	bcs.n	801c630 <quorem+0xb0>
 801c65e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c662:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c666:	b922      	cbnz	r2, 801c672 <quorem+0xf2>
 801c668:	3b04      	subs	r3, #4
 801c66a:	429d      	cmp	r5, r3
 801c66c:	461a      	mov	r2, r3
 801c66e:	d30a      	bcc.n	801c686 <quorem+0x106>
 801c670:	613c      	str	r4, [r7, #16]
 801c672:	4630      	mov	r0, r6
 801c674:	b003      	add	sp, #12
 801c676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c67a:	6812      	ldr	r2, [r2, #0]
 801c67c:	3b04      	subs	r3, #4
 801c67e:	2a00      	cmp	r2, #0
 801c680:	d1cc      	bne.n	801c61c <quorem+0x9c>
 801c682:	3c01      	subs	r4, #1
 801c684:	e7c7      	b.n	801c616 <quorem+0x96>
 801c686:	6812      	ldr	r2, [r2, #0]
 801c688:	3b04      	subs	r3, #4
 801c68a:	2a00      	cmp	r2, #0
 801c68c:	d1f0      	bne.n	801c670 <quorem+0xf0>
 801c68e:	3c01      	subs	r4, #1
 801c690:	e7eb      	b.n	801c66a <quorem+0xea>
 801c692:	2000      	movs	r0, #0
 801c694:	e7ee      	b.n	801c674 <quorem+0xf4>
	...

0801c698 <_dtoa_r>:
 801c698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c69c:	ed2d 8b02 	vpush	{d8}
 801c6a0:	ec57 6b10 	vmov	r6, r7, d0
 801c6a4:	b095      	sub	sp, #84	; 0x54
 801c6a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c6a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801c6ac:	9105      	str	r1, [sp, #20]
 801c6ae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801c6b2:	4604      	mov	r4, r0
 801c6b4:	9209      	str	r2, [sp, #36]	; 0x24
 801c6b6:	930f      	str	r3, [sp, #60]	; 0x3c
 801c6b8:	b975      	cbnz	r5, 801c6d8 <_dtoa_r+0x40>
 801c6ba:	2010      	movs	r0, #16
 801c6bc:	f7fe f820 	bl	801a700 <malloc>
 801c6c0:	4602      	mov	r2, r0
 801c6c2:	6260      	str	r0, [r4, #36]	; 0x24
 801c6c4:	b920      	cbnz	r0, 801c6d0 <_dtoa_r+0x38>
 801c6c6:	4bb2      	ldr	r3, [pc, #712]	; (801c990 <_dtoa_r+0x2f8>)
 801c6c8:	21ea      	movs	r1, #234	; 0xea
 801c6ca:	48b2      	ldr	r0, [pc, #712]	; (801c994 <_dtoa_r+0x2fc>)
 801c6cc:	f002 f808 	bl	801e6e0 <__assert_func>
 801c6d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c6d4:	6005      	str	r5, [r0, #0]
 801c6d6:	60c5      	str	r5, [r0, #12]
 801c6d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c6da:	6819      	ldr	r1, [r3, #0]
 801c6dc:	b151      	cbz	r1, 801c6f4 <_dtoa_r+0x5c>
 801c6de:	685a      	ldr	r2, [r3, #4]
 801c6e0:	604a      	str	r2, [r1, #4]
 801c6e2:	2301      	movs	r3, #1
 801c6e4:	4093      	lsls	r3, r2
 801c6e6:	608b      	str	r3, [r1, #8]
 801c6e8:	4620      	mov	r0, r4
 801c6ea:	f001 f9a5 	bl	801da38 <_Bfree>
 801c6ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c6f0:	2200      	movs	r2, #0
 801c6f2:	601a      	str	r2, [r3, #0]
 801c6f4:	1e3b      	subs	r3, r7, #0
 801c6f6:	bfb9      	ittee	lt
 801c6f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c6fc:	9303      	strlt	r3, [sp, #12]
 801c6fe:	2300      	movge	r3, #0
 801c700:	f8c8 3000 	strge.w	r3, [r8]
 801c704:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801c708:	4ba3      	ldr	r3, [pc, #652]	; (801c998 <_dtoa_r+0x300>)
 801c70a:	bfbc      	itt	lt
 801c70c:	2201      	movlt	r2, #1
 801c70e:	f8c8 2000 	strlt.w	r2, [r8]
 801c712:	ea33 0309 	bics.w	r3, r3, r9
 801c716:	d11b      	bne.n	801c750 <_dtoa_r+0xb8>
 801c718:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c71a:	f242 730f 	movw	r3, #9999	; 0x270f
 801c71e:	6013      	str	r3, [r2, #0]
 801c720:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c724:	4333      	orrs	r3, r6
 801c726:	f000 857a 	beq.w	801d21e <_dtoa_r+0xb86>
 801c72a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c72c:	b963      	cbnz	r3, 801c748 <_dtoa_r+0xb0>
 801c72e:	4b9b      	ldr	r3, [pc, #620]	; (801c99c <_dtoa_r+0x304>)
 801c730:	e024      	b.n	801c77c <_dtoa_r+0xe4>
 801c732:	4b9b      	ldr	r3, [pc, #620]	; (801c9a0 <_dtoa_r+0x308>)
 801c734:	9300      	str	r3, [sp, #0]
 801c736:	3308      	adds	r3, #8
 801c738:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c73a:	6013      	str	r3, [r2, #0]
 801c73c:	9800      	ldr	r0, [sp, #0]
 801c73e:	b015      	add	sp, #84	; 0x54
 801c740:	ecbd 8b02 	vpop	{d8}
 801c744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c748:	4b94      	ldr	r3, [pc, #592]	; (801c99c <_dtoa_r+0x304>)
 801c74a:	9300      	str	r3, [sp, #0]
 801c74c:	3303      	adds	r3, #3
 801c74e:	e7f3      	b.n	801c738 <_dtoa_r+0xa0>
 801c750:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c754:	2200      	movs	r2, #0
 801c756:	ec51 0b17 	vmov	r0, r1, d7
 801c75a:	2300      	movs	r3, #0
 801c75c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801c760:	f7e4 f9b2 	bl	8000ac8 <__aeabi_dcmpeq>
 801c764:	4680      	mov	r8, r0
 801c766:	b158      	cbz	r0, 801c780 <_dtoa_r+0xe8>
 801c768:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c76a:	2301      	movs	r3, #1
 801c76c:	6013      	str	r3, [r2, #0]
 801c76e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c770:	2b00      	cmp	r3, #0
 801c772:	f000 8551 	beq.w	801d218 <_dtoa_r+0xb80>
 801c776:	488b      	ldr	r0, [pc, #556]	; (801c9a4 <_dtoa_r+0x30c>)
 801c778:	6018      	str	r0, [r3, #0]
 801c77a:	1e43      	subs	r3, r0, #1
 801c77c:	9300      	str	r3, [sp, #0]
 801c77e:	e7dd      	b.n	801c73c <_dtoa_r+0xa4>
 801c780:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801c784:	aa12      	add	r2, sp, #72	; 0x48
 801c786:	a913      	add	r1, sp, #76	; 0x4c
 801c788:	4620      	mov	r0, r4
 801c78a:	f001 fcfd 	bl	801e188 <__d2b>
 801c78e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c792:	4683      	mov	fp, r0
 801c794:	2d00      	cmp	r5, #0
 801c796:	d07c      	beq.n	801c892 <_dtoa_r+0x1fa>
 801c798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c79a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801c79e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c7a2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801c7a6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801c7aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801c7ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801c7b2:	4b7d      	ldr	r3, [pc, #500]	; (801c9a8 <_dtoa_r+0x310>)
 801c7b4:	2200      	movs	r2, #0
 801c7b6:	4630      	mov	r0, r6
 801c7b8:	4639      	mov	r1, r7
 801c7ba:	f7e3 fd65 	bl	8000288 <__aeabi_dsub>
 801c7be:	a36e      	add	r3, pc, #440	; (adr r3, 801c978 <_dtoa_r+0x2e0>)
 801c7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7c4:	f7e3 ff18 	bl	80005f8 <__aeabi_dmul>
 801c7c8:	a36d      	add	r3, pc, #436	; (adr r3, 801c980 <_dtoa_r+0x2e8>)
 801c7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7ce:	f7e3 fd5d 	bl	800028c <__adddf3>
 801c7d2:	4606      	mov	r6, r0
 801c7d4:	4628      	mov	r0, r5
 801c7d6:	460f      	mov	r7, r1
 801c7d8:	f7e3 fea4 	bl	8000524 <__aeabi_i2d>
 801c7dc:	a36a      	add	r3, pc, #424	; (adr r3, 801c988 <_dtoa_r+0x2f0>)
 801c7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7e2:	f7e3 ff09 	bl	80005f8 <__aeabi_dmul>
 801c7e6:	4602      	mov	r2, r0
 801c7e8:	460b      	mov	r3, r1
 801c7ea:	4630      	mov	r0, r6
 801c7ec:	4639      	mov	r1, r7
 801c7ee:	f7e3 fd4d 	bl	800028c <__adddf3>
 801c7f2:	4606      	mov	r6, r0
 801c7f4:	460f      	mov	r7, r1
 801c7f6:	f7e4 f9af 	bl	8000b58 <__aeabi_d2iz>
 801c7fa:	2200      	movs	r2, #0
 801c7fc:	4682      	mov	sl, r0
 801c7fe:	2300      	movs	r3, #0
 801c800:	4630      	mov	r0, r6
 801c802:	4639      	mov	r1, r7
 801c804:	f7e4 f96a 	bl	8000adc <__aeabi_dcmplt>
 801c808:	b148      	cbz	r0, 801c81e <_dtoa_r+0x186>
 801c80a:	4650      	mov	r0, sl
 801c80c:	f7e3 fe8a 	bl	8000524 <__aeabi_i2d>
 801c810:	4632      	mov	r2, r6
 801c812:	463b      	mov	r3, r7
 801c814:	f7e4 f958 	bl	8000ac8 <__aeabi_dcmpeq>
 801c818:	b908      	cbnz	r0, 801c81e <_dtoa_r+0x186>
 801c81a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801c81e:	f1ba 0f16 	cmp.w	sl, #22
 801c822:	d854      	bhi.n	801c8ce <_dtoa_r+0x236>
 801c824:	4b61      	ldr	r3, [pc, #388]	; (801c9ac <_dtoa_r+0x314>)
 801c826:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801c82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c82e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c832:	f7e4 f953 	bl	8000adc <__aeabi_dcmplt>
 801c836:	2800      	cmp	r0, #0
 801c838:	d04b      	beq.n	801c8d2 <_dtoa_r+0x23a>
 801c83a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801c83e:	2300      	movs	r3, #0
 801c840:	930e      	str	r3, [sp, #56]	; 0x38
 801c842:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c844:	1b5d      	subs	r5, r3, r5
 801c846:	1e6b      	subs	r3, r5, #1
 801c848:	9304      	str	r3, [sp, #16]
 801c84a:	bf43      	ittte	mi
 801c84c:	2300      	movmi	r3, #0
 801c84e:	f1c5 0801 	rsbmi	r8, r5, #1
 801c852:	9304      	strmi	r3, [sp, #16]
 801c854:	f04f 0800 	movpl.w	r8, #0
 801c858:	f1ba 0f00 	cmp.w	sl, #0
 801c85c:	db3b      	blt.n	801c8d6 <_dtoa_r+0x23e>
 801c85e:	9b04      	ldr	r3, [sp, #16]
 801c860:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801c864:	4453      	add	r3, sl
 801c866:	9304      	str	r3, [sp, #16]
 801c868:	2300      	movs	r3, #0
 801c86a:	9306      	str	r3, [sp, #24]
 801c86c:	9b05      	ldr	r3, [sp, #20]
 801c86e:	2b09      	cmp	r3, #9
 801c870:	d869      	bhi.n	801c946 <_dtoa_r+0x2ae>
 801c872:	2b05      	cmp	r3, #5
 801c874:	bfc4      	itt	gt
 801c876:	3b04      	subgt	r3, #4
 801c878:	9305      	strgt	r3, [sp, #20]
 801c87a:	9b05      	ldr	r3, [sp, #20]
 801c87c:	f1a3 0302 	sub.w	r3, r3, #2
 801c880:	bfcc      	ite	gt
 801c882:	2500      	movgt	r5, #0
 801c884:	2501      	movle	r5, #1
 801c886:	2b03      	cmp	r3, #3
 801c888:	d869      	bhi.n	801c95e <_dtoa_r+0x2c6>
 801c88a:	e8df f003 	tbb	[pc, r3]
 801c88e:	4e2c      	.short	0x4e2c
 801c890:	5a4c      	.short	0x5a4c
 801c892:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801c896:	441d      	add	r5, r3
 801c898:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801c89c:	2b20      	cmp	r3, #32
 801c89e:	bfc1      	itttt	gt
 801c8a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801c8a4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801c8a8:	fa09 f303 	lslgt.w	r3, r9, r3
 801c8ac:	fa26 f000 	lsrgt.w	r0, r6, r0
 801c8b0:	bfda      	itte	le
 801c8b2:	f1c3 0320 	rsble	r3, r3, #32
 801c8b6:	fa06 f003 	lslle.w	r0, r6, r3
 801c8ba:	4318      	orrgt	r0, r3
 801c8bc:	f7e3 fe22 	bl	8000504 <__aeabi_ui2d>
 801c8c0:	2301      	movs	r3, #1
 801c8c2:	4606      	mov	r6, r0
 801c8c4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801c8c8:	3d01      	subs	r5, #1
 801c8ca:	9310      	str	r3, [sp, #64]	; 0x40
 801c8cc:	e771      	b.n	801c7b2 <_dtoa_r+0x11a>
 801c8ce:	2301      	movs	r3, #1
 801c8d0:	e7b6      	b.n	801c840 <_dtoa_r+0x1a8>
 801c8d2:	900e      	str	r0, [sp, #56]	; 0x38
 801c8d4:	e7b5      	b.n	801c842 <_dtoa_r+0x1aa>
 801c8d6:	f1ca 0300 	rsb	r3, sl, #0
 801c8da:	9306      	str	r3, [sp, #24]
 801c8dc:	2300      	movs	r3, #0
 801c8de:	eba8 080a 	sub.w	r8, r8, sl
 801c8e2:	930d      	str	r3, [sp, #52]	; 0x34
 801c8e4:	e7c2      	b.n	801c86c <_dtoa_r+0x1d4>
 801c8e6:	2300      	movs	r3, #0
 801c8e8:	9308      	str	r3, [sp, #32]
 801c8ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c8ec:	2b00      	cmp	r3, #0
 801c8ee:	dc39      	bgt.n	801c964 <_dtoa_r+0x2cc>
 801c8f0:	f04f 0901 	mov.w	r9, #1
 801c8f4:	f8cd 9004 	str.w	r9, [sp, #4]
 801c8f8:	464b      	mov	r3, r9
 801c8fa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801c8fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c900:	2200      	movs	r2, #0
 801c902:	6042      	str	r2, [r0, #4]
 801c904:	2204      	movs	r2, #4
 801c906:	f102 0614 	add.w	r6, r2, #20
 801c90a:	429e      	cmp	r6, r3
 801c90c:	6841      	ldr	r1, [r0, #4]
 801c90e:	d92f      	bls.n	801c970 <_dtoa_r+0x2d8>
 801c910:	4620      	mov	r0, r4
 801c912:	f001 f851 	bl	801d9b8 <_Balloc>
 801c916:	9000      	str	r0, [sp, #0]
 801c918:	2800      	cmp	r0, #0
 801c91a:	d14b      	bne.n	801c9b4 <_dtoa_r+0x31c>
 801c91c:	4b24      	ldr	r3, [pc, #144]	; (801c9b0 <_dtoa_r+0x318>)
 801c91e:	4602      	mov	r2, r0
 801c920:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801c924:	e6d1      	b.n	801c6ca <_dtoa_r+0x32>
 801c926:	2301      	movs	r3, #1
 801c928:	e7de      	b.n	801c8e8 <_dtoa_r+0x250>
 801c92a:	2300      	movs	r3, #0
 801c92c:	9308      	str	r3, [sp, #32]
 801c92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c930:	eb0a 0903 	add.w	r9, sl, r3
 801c934:	f109 0301 	add.w	r3, r9, #1
 801c938:	2b01      	cmp	r3, #1
 801c93a:	9301      	str	r3, [sp, #4]
 801c93c:	bfb8      	it	lt
 801c93e:	2301      	movlt	r3, #1
 801c940:	e7dd      	b.n	801c8fe <_dtoa_r+0x266>
 801c942:	2301      	movs	r3, #1
 801c944:	e7f2      	b.n	801c92c <_dtoa_r+0x294>
 801c946:	2501      	movs	r5, #1
 801c948:	2300      	movs	r3, #0
 801c94a:	9305      	str	r3, [sp, #20]
 801c94c:	9508      	str	r5, [sp, #32]
 801c94e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801c952:	2200      	movs	r2, #0
 801c954:	f8cd 9004 	str.w	r9, [sp, #4]
 801c958:	2312      	movs	r3, #18
 801c95a:	9209      	str	r2, [sp, #36]	; 0x24
 801c95c:	e7cf      	b.n	801c8fe <_dtoa_r+0x266>
 801c95e:	2301      	movs	r3, #1
 801c960:	9308      	str	r3, [sp, #32]
 801c962:	e7f4      	b.n	801c94e <_dtoa_r+0x2b6>
 801c964:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801c968:	f8cd 9004 	str.w	r9, [sp, #4]
 801c96c:	464b      	mov	r3, r9
 801c96e:	e7c6      	b.n	801c8fe <_dtoa_r+0x266>
 801c970:	3101      	adds	r1, #1
 801c972:	6041      	str	r1, [r0, #4]
 801c974:	0052      	lsls	r2, r2, #1
 801c976:	e7c6      	b.n	801c906 <_dtoa_r+0x26e>
 801c978:	636f4361 	.word	0x636f4361
 801c97c:	3fd287a7 	.word	0x3fd287a7
 801c980:	8b60c8b3 	.word	0x8b60c8b3
 801c984:	3fc68a28 	.word	0x3fc68a28
 801c988:	509f79fb 	.word	0x509f79fb
 801c98c:	3fd34413 	.word	0x3fd34413
 801c990:	08020dae 	.word	0x08020dae
 801c994:	08020dc5 	.word	0x08020dc5
 801c998:	7ff00000 	.word	0x7ff00000
 801c99c:	08020daa 	.word	0x08020daa
 801c9a0:	08020da1 	.word	0x08020da1
 801c9a4:	08020c21 	.word	0x08020c21
 801c9a8:	3ff80000 	.word	0x3ff80000
 801c9ac:	08020f40 	.word	0x08020f40
 801c9b0:	08020e24 	.word	0x08020e24
 801c9b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c9b6:	9a00      	ldr	r2, [sp, #0]
 801c9b8:	601a      	str	r2, [r3, #0]
 801c9ba:	9b01      	ldr	r3, [sp, #4]
 801c9bc:	2b0e      	cmp	r3, #14
 801c9be:	f200 80ad 	bhi.w	801cb1c <_dtoa_r+0x484>
 801c9c2:	2d00      	cmp	r5, #0
 801c9c4:	f000 80aa 	beq.w	801cb1c <_dtoa_r+0x484>
 801c9c8:	f1ba 0f00 	cmp.w	sl, #0
 801c9cc:	dd36      	ble.n	801ca3c <_dtoa_r+0x3a4>
 801c9ce:	4ac3      	ldr	r2, [pc, #780]	; (801ccdc <_dtoa_r+0x644>)
 801c9d0:	f00a 030f 	and.w	r3, sl, #15
 801c9d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801c9d8:	ed93 7b00 	vldr	d7, [r3]
 801c9dc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801c9e0:	ea4f 172a 	mov.w	r7, sl, asr #4
 801c9e4:	eeb0 8a47 	vmov.f32	s16, s14
 801c9e8:	eef0 8a67 	vmov.f32	s17, s15
 801c9ec:	d016      	beq.n	801ca1c <_dtoa_r+0x384>
 801c9ee:	4bbc      	ldr	r3, [pc, #752]	; (801cce0 <_dtoa_r+0x648>)
 801c9f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c9f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c9f8:	f7e3 ff28 	bl	800084c <__aeabi_ddiv>
 801c9fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ca00:	f007 070f 	and.w	r7, r7, #15
 801ca04:	2503      	movs	r5, #3
 801ca06:	4eb6      	ldr	r6, [pc, #728]	; (801cce0 <_dtoa_r+0x648>)
 801ca08:	b957      	cbnz	r7, 801ca20 <_dtoa_r+0x388>
 801ca0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ca0e:	ec53 2b18 	vmov	r2, r3, d8
 801ca12:	f7e3 ff1b 	bl	800084c <__aeabi_ddiv>
 801ca16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ca1a:	e029      	b.n	801ca70 <_dtoa_r+0x3d8>
 801ca1c:	2502      	movs	r5, #2
 801ca1e:	e7f2      	b.n	801ca06 <_dtoa_r+0x36e>
 801ca20:	07f9      	lsls	r1, r7, #31
 801ca22:	d508      	bpl.n	801ca36 <_dtoa_r+0x39e>
 801ca24:	ec51 0b18 	vmov	r0, r1, d8
 801ca28:	e9d6 2300 	ldrd	r2, r3, [r6]
 801ca2c:	f7e3 fde4 	bl	80005f8 <__aeabi_dmul>
 801ca30:	ec41 0b18 	vmov	d8, r0, r1
 801ca34:	3501      	adds	r5, #1
 801ca36:	107f      	asrs	r7, r7, #1
 801ca38:	3608      	adds	r6, #8
 801ca3a:	e7e5      	b.n	801ca08 <_dtoa_r+0x370>
 801ca3c:	f000 80a6 	beq.w	801cb8c <_dtoa_r+0x4f4>
 801ca40:	f1ca 0600 	rsb	r6, sl, #0
 801ca44:	4ba5      	ldr	r3, [pc, #660]	; (801ccdc <_dtoa_r+0x644>)
 801ca46:	4fa6      	ldr	r7, [pc, #664]	; (801cce0 <_dtoa_r+0x648>)
 801ca48:	f006 020f 	and.w	r2, r6, #15
 801ca4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ca50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ca58:	f7e3 fdce 	bl	80005f8 <__aeabi_dmul>
 801ca5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ca60:	1136      	asrs	r6, r6, #4
 801ca62:	2300      	movs	r3, #0
 801ca64:	2502      	movs	r5, #2
 801ca66:	2e00      	cmp	r6, #0
 801ca68:	f040 8085 	bne.w	801cb76 <_dtoa_r+0x4de>
 801ca6c:	2b00      	cmp	r3, #0
 801ca6e:	d1d2      	bne.n	801ca16 <_dtoa_r+0x37e>
 801ca70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ca72:	2b00      	cmp	r3, #0
 801ca74:	f000 808c 	beq.w	801cb90 <_dtoa_r+0x4f8>
 801ca78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ca7c:	4b99      	ldr	r3, [pc, #612]	; (801cce4 <_dtoa_r+0x64c>)
 801ca7e:	2200      	movs	r2, #0
 801ca80:	4630      	mov	r0, r6
 801ca82:	4639      	mov	r1, r7
 801ca84:	f7e4 f82a 	bl	8000adc <__aeabi_dcmplt>
 801ca88:	2800      	cmp	r0, #0
 801ca8a:	f000 8081 	beq.w	801cb90 <_dtoa_r+0x4f8>
 801ca8e:	9b01      	ldr	r3, [sp, #4]
 801ca90:	2b00      	cmp	r3, #0
 801ca92:	d07d      	beq.n	801cb90 <_dtoa_r+0x4f8>
 801ca94:	f1b9 0f00 	cmp.w	r9, #0
 801ca98:	dd3c      	ble.n	801cb14 <_dtoa_r+0x47c>
 801ca9a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801ca9e:	9307      	str	r3, [sp, #28]
 801caa0:	2200      	movs	r2, #0
 801caa2:	4b91      	ldr	r3, [pc, #580]	; (801cce8 <_dtoa_r+0x650>)
 801caa4:	4630      	mov	r0, r6
 801caa6:	4639      	mov	r1, r7
 801caa8:	f7e3 fda6 	bl	80005f8 <__aeabi_dmul>
 801caac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cab0:	3501      	adds	r5, #1
 801cab2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801cab6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801caba:	4628      	mov	r0, r5
 801cabc:	f7e3 fd32 	bl	8000524 <__aeabi_i2d>
 801cac0:	4632      	mov	r2, r6
 801cac2:	463b      	mov	r3, r7
 801cac4:	f7e3 fd98 	bl	80005f8 <__aeabi_dmul>
 801cac8:	4b88      	ldr	r3, [pc, #544]	; (801ccec <_dtoa_r+0x654>)
 801caca:	2200      	movs	r2, #0
 801cacc:	f7e3 fbde 	bl	800028c <__adddf3>
 801cad0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801cad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cad8:	9303      	str	r3, [sp, #12]
 801cada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cadc:	2b00      	cmp	r3, #0
 801cade:	d15c      	bne.n	801cb9a <_dtoa_r+0x502>
 801cae0:	4b83      	ldr	r3, [pc, #524]	; (801ccf0 <_dtoa_r+0x658>)
 801cae2:	2200      	movs	r2, #0
 801cae4:	4630      	mov	r0, r6
 801cae6:	4639      	mov	r1, r7
 801cae8:	f7e3 fbce 	bl	8000288 <__aeabi_dsub>
 801caec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801caf0:	4606      	mov	r6, r0
 801caf2:	460f      	mov	r7, r1
 801caf4:	f7e4 f810 	bl	8000b18 <__aeabi_dcmpgt>
 801caf8:	2800      	cmp	r0, #0
 801cafa:	f040 8296 	bne.w	801d02a <_dtoa_r+0x992>
 801cafe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801cb02:	4630      	mov	r0, r6
 801cb04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cb08:	4639      	mov	r1, r7
 801cb0a:	f7e3 ffe7 	bl	8000adc <__aeabi_dcmplt>
 801cb0e:	2800      	cmp	r0, #0
 801cb10:	f040 8288 	bne.w	801d024 <_dtoa_r+0x98c>
 801cb14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801cb18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801cb1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cb1e:	2b00      	cmp	r3, #0
 801cb20:	f2c0 8158 	blt.w	801cdd4 <_dtoa_r+0x73c>
 801cb24:	f1ba 0f0e 	cmp.w	sl, #14
 801cb28:	f300 8154 	bgt.w	801cdd4 <_dtoa_r+0x73c>
 801cb2c:	4b6b      	ldr	r3, [pc, #428]	; (801ccdc <_dtoa_r+0x644>)
 801cb2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801cb32:	e9d3 8900 	ldrd	r8, r9, [r3]
 801cb36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb38:	2b00      	cmp	r3, #0
 801cb3a:	f280 80e3 	bge.w	801cd04 <_dtoa_r+0x66c>
 801cb3e:	9b01      	ldr	r3, [sp, #4]
 801cb40:	2b00      	cmp	r3, #0
 801cb42:	f300 80df 	bgt.w	801cd04 <_dtoa_r+0x66c>
 801cb46:	f040 826d 	bne.w	801d024 <_dtoa_r+0x98c>
 801cb4a:	4b69      	ldr	r3, [pc, #420]	; (801ccf0 <_dtoa_r+0x658>)
 801cb4c:	2200      	movs	r2, #0
 801cb4e:	4640      	mov	r0, r8
 801cb50:	4649      	mov	r1, r9
 801cb52:	f7e3 fd51 	bl	80005f8 <__aeabi_dmul>
 801cb56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801cb5a:	f7e3 ffd3 	bl	8000b04 <__aeabi_dcmpge>
 801cb5e:	9e01      	ldr	r6, [sp, #4]
 801cb60:	4637      	mov	r7, r6
 801cb62:	2800      	cmp	r0, #0
 801cb64:	f040 8243 	bne.w	801cfee <_dtoa_r+0x956>
 801cb68:	9d00      	ldr	r5, [sp, #0]
 801cb6a:	2331      	movs	r3, #49	; 0x31
 801cb6c:	f805 3b01 	strb.w	r3, [r5], #1
 801cb70:	f10a 0a01 	add.w	sl, sl, #1
 801cb74:	e23f      	b.n	801cff6 <_dtoa_r+0x95e>
 801cb76:	07f2      	lsls	r2, r6, #31
 801cb78:	d505      	bpl.n	801cb86 <_dtoa_r+0x4ee>
 801cb7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cb7e:	f7e3 fd3b 	bl	80005f8 <__aeabi_dmul>
 801cb82:	3501      	adds	r5, #1
 801cb84:	2301      	movs	r3, #1
 801cb86:	1076      	asrs	r6, r6, #1
 801cb88:	3708      	adds	r7, #8
 801cb8a:	e76c      	b.n	801ca66 <_dtoa_r+0x3ce>
 801cb8c:	2502      	movs	r5, #2
 801cb8e:	e76f      	b.n	801ca70 <_dtoa_r+0x3d8>
 801cb90:	9b01      	ldr	r3, [sp, #4]
 801cb92:	f8cd a01c 	str.w	sl, [sp, #28]
 801cb96:	930c      	str	r3, [sp, #48]	; 0x30
 801cb98:	e78d      	b.n	801cab6 <_dtoa_r+0x41e>
 801cb9a:	9900      	ldr	r1, [sp, #0]
 801cb9c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801cb9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cba0:	4b4e      	ldr	r3, [pc, #312]	; (801ccdc <_dtoa_r+0x644>)
 801cba2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801cba6:	4401      	add	r1, r0
 801cba8:	9102      	str	r1, [sp, #8]
 801cbaa:	9908      	ldr	r1, [sp, #32]
 801cbac:	eeb0 8a47 	vmov.f32	s16, s14
 801cbb0:	eef0 8a67 	vmov.f32	s17, s15
 801cbb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cbb8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801cbbc:	2900      	cmp	r1, #0
 801cbbe:	d045      	beq.n	801cc4c <_dtoa_r+0x5b4>
 801cbc0:	494c      	ldr	r1, [pc, #304]	; (801ccf4 <_dtoa_r+0x65c>)
 801cbc2:	2000      	movs	r0, #0
 801cbc4:	f7e3 fe42 	bl	800084c <__aeabi_ddiv>
 801cbc8:	ec53 2b18 	vmov	r2, r3, d8
 801cbcc:	f7e3 fb5c 	bl	8000288 <__aeabi_dsub>
 801cbd0:	9d00      	ldr	r5, [sp, #0]
 801cbd2:	ec41 0b18 	vmov	d8, r0, r1
 801cbd6:	4639      	mov	r1, r7
 801cbd8:	4630      	mov	r0, r6
 801cbda:	f7e3 ffbd 	bl	8000b58 <__aeabi_d2iz>
 801cbde:	900c      	str	r0, [sp, #48]	; 0x30
 801cbe0:	f7e3 fca0 	bl	8000524 <__aeabi_i2d>
 801cbe4:	4602      	mov	r2, r0
 801cbe6:	460b      	mov	r3, r1
 801cbe8:	4630      	mov	r0, r6
 801cbea:	4639      	mov	r1, r7
 801cbec:	f7e3 fb4c 	bl	8000288 <__aeabi_dsub>
 801cbf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cbf2:	3330      	adds	r3, #48	; 0x30
 801cbf4:	f805 3b01 	strb.w	r3, [r5], #1
 801cbf8:	ec53 2b18 	vmov	r2, r3, d8
 801cbfc:	4606      	mov	r6, r0
 801cbfe:	460f      	mov	r7, r1
 801cc00:	f7e3 ff6c 	bl	8000adc <__aeabi_dcmplt>
 801cc04:	2800      	cmp	r0, #0
 801cc06:	d165      	bne.n	801ccd4 <_dtoa_r+0x63c>
 801cc08:	4632      	mov	r2, r6
 801cc0a:	463b      	mov	r3, r7
 801cc0c:	4935      	ldr	r1, [pc, #212]	; (801cce4 <_dtoa_r+0x64c>)
 801cc0e:	2000      	movs	r0, #0
 801cc10:	f7e3 fb3a 	bl	8000288 <__aeabi_dsub>
 801cc14:	ec53 2b18 	vmov	r2, r3, d8
 801cc18:	f7e3 ff60 	bl	8000adc <__aeabi_dcmplt>
 801cc1c:	2800      	cmp	r0, #0
 801cc1e:	f040 80b9 	bne.w	801cd94 <_dtoa_r+0x6fc>
 801cc22:	9b02      	ldr	r3, [sp, #8]
 801cc24:	429d      	cmp	r5, r3
 801cc26:	f43f af75 	beq.w	801cb14 <_dtoa_r+0x47c>
 801cc2a:	4b2f      	ldr	r3, [pc, #188]	; (801cce8 <_dtoa_r+0x650>)
 801cc2c:	ec51 0b18 	vmov	r0, r1, d8
 801cc30:	2200      	movs	r2, #0
 801cc32:	f7e3 fce1 	bl	80005f8 <__aeabi_dmul>
 801cc36:	4b2c      	ldr	r3, [pc, #176]	; (801cce8 <_dtoa_r+0x650>)
 801cc38:	ec41 0b18 	vmov	d8, r0, r1
 801cc3c:	2200      	movs	r2, #0
 801cc3e:	4630      	mov	r0, r6
 801cc40:	4639      	mov	r1, r7
 801cc42:	f7e3 fcd9 	bl	80005f8 <__aeabi_dmul>
 801cc46:	4606      	mov	r6, r0
 801cc48:	460f      	mov	r7, r1
 801cc4a:	e7c4      	b.n	801cbd6 <_dtoa_r+0x53e>
 801cc4c:	ec51 0b17 	vmov	r0, r1, d7
 801cc50:	f7e3 fcd2 	bl	80005f8 <__aeabi_dmul>
 801cc54:	9b02      	ldr	r3, [sp, #8]
 801cc56:	9d00      	ldr	r5, [sp, #0]
 801cc58:	930c      	str	r3, [sp, #48]	; 0x30
 801cc5a:	ec41 0b18 	vmov	d8, r0, r1
 801cc5e:	4639      	mov	r1, r7
 801cc60:	4630      	mov	r0, r6
 801cc62:	f7e3 ff79 	bl	8000b58 <__aeabi_d2iz>
 801cc66:	9011      	str	r0, [sp, #68]	; 0x44
 801cc68:	f7e3 fc5c 	bl	8000524 <__aeabi_i2d>
 801cc6c:	4602      	mov	r2, r0
 801cc6e:	460b      	mov	r3, r1
 801cc70:	4630      	mov	r0, r6
 801cc72:	4639      	mov	r1, r7
 801cc74:	f7e3 fb08 	bl	8000288 <__aeabi_dsub>
 801cc78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cc7a:	3330      	adds	r3, #48	; 0x30
 801cc7c:	f805 3b01 	strb.w	r3, [r5], #1
 801cc80:	9b02      	ldr	r3, [sp, #8]
 801cc82:	429d      	cmp	r5, r3
 801cc84:	4606      	mov	r6, r0
 801cc86:	460f      	mov	r7, r1
 801cc88:	f04f 0200 	mov.w	r2, #0
 801cc8c:	d134      	bne.n	801ccf8 <_dtoa_r+0x660>
 801cc8e:	4b19      	ldr	r3, [pc, #100]	; (801ccf4 <_dtoa_r+0x65c>)
 801cc90:	ec51 0b18 	vmov	r0, r1, d8
 801cc94:	f7e3 fafa 	bl	800028c <__adddf3>
 801cc98:	4602      	mov	r2, r0
 801cc9a:	460b      	mov	r3, r1
 801cc9c:	4630      	mov	r0, r6
 801cc9e:	4639      	mov	r1, r7
 801cca0:	f7e3 ff3a 	bl	8000b18 <__aeabi_dcmpgt>
 801cca4:	2800      	cmp	r0, #0
 801cca6:	d175      	bne.n	801cd94 <_dtoa_r+0x6fc>
 801cca8:	ec53 2b18 	vmov	r2, r3, d8
 801ccac:	4911      	ldr	r1, [pc, #68]	; (801ccf4 <_dtoa_r+0x65c>)
 801ccae:	2000      	movs	r0, #0
 801ccb0:	f7e3 faea 	bl	8000288 <__aeabi_dsub>
 801ccb4:	4602      	mov	r2, r0
 801ccb6:	460b      	mov	r3, r1
 801ccb8:	4630      	mov	r0, r6
 801ccba:	4639      	mov	r1, r7
 801ccbc:	f7e3 ff0e 	bl	8000adc <__aeabi_dcmplt>
 801ccc0:	2800      	cmp	r0, #0
 801ccc2:	f43f af27 	beq.w	801cb14 <_dtoa_r+0x47c>
 801ccc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ccc8:	1e6b      	subs	r3, r5, #1
 801ccca:	930c      	str	r3, [sp, #48]	; 0x30
 801cccc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ccd0:	2b30      	cmp	r3, #48	; 0x30
 801ccd2:	d0f8      	beq.n	801ccc6 <_dtoa_r+0x62e>
 801ccd4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801ccd8:	e04a      	b.n	801cd70 <_dtoa_r+0x6d8>
 801ccda:	bf00      	nop
 801ccdc:	08020f40 	.word	0x08020f40
 801cce0:	08020f18 	.word	0x08020f18
 801cce4:	3ff00000 	.word	0x3ff00000
 801cce8:	40240000 	.word	0x40240000
 801ccec:	401c0000 	.word	0x401c0000
 801ccf0:	40140000 	.word	0x40140000
 801ccf4:	3fe00000 	.word	0x3fe00000
 801ccf8:	4baf      	ldr	r3, [pc, #700]	; (801cfb8 <_dtoa_r+0x920>)
 801ccfa:	f7e3 fc7d 	bl	80005f8 <__aeabi_dmul>
 801ccfe:	4606      	mov	r6, r0
 801cd00:	460f      	mov	r7, r1
 801cd02:	e7ac      	b.n	801cc5e <_dtoa_r+0x5c6>
 801cd04:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801cd08:	9d00      	ldr	r5, [sp, #0]
 801cd0a:	4642      	mov	r2, r8
 801cd0c:	464b      	mov	r3, r9
 801cd0e:	4630      	mov	r0, r6
 801cd10:	4639      	mov	r1, r7
 801cd12:	f7e3 fd9b 	bl	800084c <__aeabi_ddiv>
 801cd16:	f7e3 ff1f 	bl	8000b58 <__aeabi_d2iz>
 801cd1a:	9002      	str	r0, [sp, #8]
 801cd1c:	f7e3 fc02 	bl	8000524 <__aeabi_i2d>
 801cd20:	4642      	mov	r2, r8
 801cd22:	464b      	mov	r3, r9
 801cd24:	f7e3 fc68 	bl	80005f8 <__aeabi_dmul>
 801cd28:	4602      	mov	r2, r0
 801cd2a:	460b      	mov	r3, r1
 801cd2c:	4630      	mov	r0, r6
 801cd2e:	4639      	mov	r1, r7
 801cd30:	f7e3 faaa 	bl	8000288 <__aeabi_dsub>
 801cd34:	9e02      	ldr	r6, [sp, #8]
 801cd36:	9f01      	ldr	r7, [sp, #4]
 801cd38:	3630      	adds	r6, #48	; 0x30
 801cd3a:	f805 6b01 	strb.w	r6, [r5], #1
 801cd3e:	9e00      	ldr	r6, [sp, #0]
 801cd40:	1bae      	subs	r6, r5, r6
 801cd42:	42b7      	cmp	r7, r6
 801cd44:	4602      	mov	r2, r0
 801cd46:	460b      	mov	r3, r1
 801cd48:	d137      	bne.n	801cdba <_dtoa_r+0x722>
 801cd4a:	f7e3 fa9f 	bl	800028c <__adddf3>
 801cd4e:	4642      	mov	r2, r8
 801cd50:	464b      	mov	r3, r9
 801cd52:	4606      	mov	r6, r0
 801cd54:	460f      	mov	r7, r1
 801cd56:	f7e3 fedf 	bl	8000b18 <__aeabi_dcmpgt>
 801cd5a:	b9c8      	cbnz	r0, 801cd90 <_dtoa_r+0x6f8>
 801cd5c:	4642      	mov	r2, r8
 801cd5e:	464b      	mov	r3, r9
 801cd60:	4630      	mov	r0, r6
 801cd62:	4639      	mov	r1, r7
 801cd64:	f7e3 feb0 	bl	8000ac8 <__aeabi_dcmpeq>
 801cd68:	b110      	cbz	r0, 801cd70 <_dtoa_r+0x6d8>
 801cd6a:	9b02      	ldr	r3, [sp, #8]
 801cd6c:	07d9      	lsls	r1, r3, #31
 801cd6e:	d40f      	bmi.n	801cd90 <_dtoa_r+0x6f8>
 801cd70:	4620      	mov	r0, r4
 801cd72:	4659      	mov	r1, fp
 801cd74:	f000 fe60 	bl	801da38 <_Bfree>
 801cd78:	2300      	movs	r3, #0
 801cd7a:	702b      	strb	r3, [r5, #0]
 801cd7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cd7e:	f10a 0001 	add.w	r0, sl, #1
 801cd82:	6018      	str	r0, [r3, #0]
 801cd84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cd86:	2b00      	cmp	r3, #0
 801cd88:	f43f acd8 	beq.w	801c73c <_dtoa_r+0xa4>
 801cd8c:	601d      	str	r5, [r3, #0]
 801cd8e:	e4d5      	b.n	801c73c <_dtoa_r+0xa4>
 801cd90:	f8cd a01c 	str.w	sl, [sp, #28]
 801cd94:	462b      	mov	r3, r5
 801cd96:	461d      	mov	r5, r3
 801cd98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cd9c:	2a39      	cmp	r2, #57	; 0x39
 801cd9e:	d108      	bne.n	801cdb2 <_dtoa_r+0x71a>
 801cda0:	9a00      	ldr	r2, [sp, #0]
 801cda2:	429a      	cmp	r2, r3
 801cda4:	d1f7      	bne.n	801cd96 <_dtoa_r+0x6fe>
 801cda6:	9a07      	ldr	r2, [sp, #28]
 801cda8:	9900      	ldr	r1, [sp, #0]
 801cdaa:	3201      	adds	r2, #1
 801cdac:	9207      	str	r2, [sp, #28]
 801cdae:	2230      	movs	r2, #48	; 0x30
 801cdb0:	700a      	strb	r2, [r1, #0]
 801cdb2:	781a      	ldrb	r2, [r3, #0]
 801cdb4:	3201      	adds	r2, #1
 801cdb6:	701a      	strb	r2, [r3, #0]
 801cdb8:	e78c      	b.n	801ccd4 <_dtoa_r+0x63c>
 801cdba:	4b7f      	ldr	r3, [pc, #508]	; (801cfb8 <_dtoa_r+0x920>)
 801cdbc:	2200      	movs	r2, #0
 801cdbe:	f7e3 fc1b 	bl	80005f8 <__aeabi_dmul>
 801cdc2:	2200      	movs	r2, #0
 801cdc4:	2300      	movs	r3, #0
 801cdc6:	4606      	mov	r6, r0
 801cdc8:	460f      	mov	r7, r1
 801cdca:	f7e3 fe7d 	bl	8000ac8 <__aeabi_dcmpeq>
 801cdce:	2800      	cmp	r0, #0
 801cdd0:	d09b      	beq.n	801cd0a <_dtoa_r+0x672>
 801cdd2:	e7cd      	b.n	801cd70 <_dtoa_r+0x6d8>
 801cdd4:	9a08      	ldr	r2, [sp, #32]
 801cdd6:	2a00      	cmp	r2, #0
 801cdd8:	f000 80c4 	beq.w	801cf64 <_dtoa_r+0x8cc>
 801cddc:	9a05      	ldr	r2, [sp, #20]
 801cdde:	2a01      	cmp	r2, #1
 801cde0:	f300 80a8 	bgt.w	801cf34 <_dtoa_r+0x89c>
 801cde4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cde6:	2a00      	cmp	r2, #0
 801cde8:	f000 80a0 	beq.w	801cf2c <_dtoa_r+0x894>
 801cdec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801cdf0:	9e06      	ldr	r6, [sp, #24]
 801cdf2:	4645      	mov	r5, r8
 801cdf4:	9a04      	ldr	r2, [sp, #16]
 801cdf6:	2101      	movs	r1, #1
 801cdf8:	441a      	add	r2, r3
 801cdfa:	4620      	mov	r0, r4
 801cdfc:	4498      	add	r8, r3
 801cdfe:	9204      	str	r2, [sp, #16]
 801ce00:	f000 ff20 	bl	801dc44 <__i2b>
 801ce04:	4607      	mov	r7, r0
 801ce06:	2d00      	cmp	r5, #0
 801ce08:	dd0b      	ble.n	801ce22 <_dtoa_r+0x78a>
 801ce0a:	9b04      	ldr	r3, [sp, #16]
 801ce0c:	2b00      	cmp	r3, #0
 801ce0e:	dd08      	ble.n	801ce22 <_dtoa_r+0x78a>
 801ce10:	42ab      	cmp	r3, r5
 801ce12:	9a04      	ldr	r2, [sp, #16]
 801ce14:	bfa8      	it	ge
 801ce16:	462b      	movge	r3, r5
 801ce18:	eba8 0803 	sub.w	r8, r8, r3
 801ce1c:	1aed      	subs	r5, r5, r3
 801ce1e:	1ad3      	subs	r3, r2, r3
 801ce20:	9304      	str	r3, [sp, #16]
 801ce22:	9b06      	ldr	r3, [sp, #24]
 801ce24:	b1fb      	cbz	r3, 801ce66 <_dtoa_r+0x7ce>
 801ce26:	9b08      	ldr	r3, [sp, #32]
 801ce28:	2b00      	cmp	r3, #0
 801ce2a:	f000 809f 	beq.w	801cf6c <_dtoa_r+0x8d4>
 801ce2e:	2e00      	cmp	r6, #0
 801ce30:	dd11      	ble.n	801ce56 <_dtoa_r+0x7be>
 801ce32:	4639      	mov	r1, r7
 801ce34:	4632      	mov	r2, r6
 801ce36:	4620      	mov	r0, r4
 801ce38:	f000 ffc0 	bl	801ddbc <__pow5mult>
 801ce3c:	465a      	mov	r2, fp
 801ce3e:	4601      	mov	r1, r0
 801ce40:	4607      	mov	r7, r0
 801ce42:	4620      	mov	r0, r4
 801ce44:	f000 ff14 	bl	801dc70 <__multiply>
 801ce48:	4659      	mov	r1, fp
 801ce4a:	9007      	str	r0, [sp, #28]
 801ce4c:	4620      	mov	r0, r4
 801ce4e:	f000 fdf3 	bl	801da38 <_Bfree>
 801ce52:	9b07      	ldr	r3, [sp, #28]
 801ce54:	469b      	mov	fp, r3
 801ce56:	9b06      	ldr	r3, [sp, #24]
 801ce58:	1b9a      	subs	r2, r3, r6
 801ce5a:	d004      	beq.n	801ce66 <_dtoa_r+0x7ce>
 801ce5c:	4659      	mov	r1, fp
 801ce5e:	4620      	mov	r0, r4
 801ce60:	f000 ffac 	bl	801ddbc <__pow5mult>
 801ce64:	4683      	mov	fp, r0
 801ce66:	2101      	movs	r1, #1
 801ce68:	4620      	mov	r0, r4
 801ce6a:	f000 feeb 	bl	801dc44 <__i2b>
 801ce6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ce70:	2b00      	cmp	r3, #0
 801ce72:	4606      	mov	r6, r0
 801ce74:	dd7c      	ble.n	801cf70 <_dtoa_r+0x8d8>
 801ce76:	461a      	mov	r2, r3
 801ce78:	4601      	mov	r1, r0
 801ce7a:	4620      	mov	r0, r4
 801ce7c:	f000 ff9e 	bl	801ddbc <__pow5mult>
 801ce80:	9b05      	ldr	r3, [sp, #20]
 801ce82:	2b01      	cmp	r3, #1
 801ce84:	4606      	mov	r6, r0
 801ce86:	dd76      	ble.n	801cf76 <_dtoa_r+0x8de>
 801ce88:	2300      	movs	r3, #0
 801ce8a:	9306      	str	r3, [sp, #24]
 801ce8c:	6933      	ldr	r3, [r6, #16]
 801ce8e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801ce92:	6918      	ldr	r0, [r3, #16]
 801ce94:	f000 fe86 	bl	801dba4 <__hi0bits>
 801ce98:	f1c0 0020 	rsb	r0, r0, #32
 801ce9c:	9b04      	ldr	r3, [sp, #16]
 801ce9e:	4418      	add	r0, r3
 801cea0:	f010 001f 	ands.w	r0, r0, #31
 801cea4:	f000 8086 	beq.w	801cfb4 <_dtoa_r+0x91c>
 801cea8:	f1c0 0320 	rsb	r3, r0, #32
 801ceac:	2b04      	cmp	r3, #4
 801ceae:	dd7f      	ble.n	801cfb0 <_dtoa_r+0x918>
 801ceb0:	f1c0 001c 	rsb	r0, r0, #28
 801ceb4:	9b04      	ldr	r3, [sp, #16]
 801ceb6:	4403      	add	r3, r0
 801ceb8:	4480      	add	r8, r0
 801ceba:	4405      	add	r5, r0
 801cebc:	9304      	str	r3, [sp, #16]
 801cebe:	f1b8 0f00 	cmp.w	r8, #0
 801cec2:	dd05      	ble.n	801ced0 <_dtoa_r+0x838>
 801cec4:	4659      	mov	r1, fp
 801cec6:	4642      	mov	r2, r8
 801cec8:	4620      	mov	r0, r4
 801ceca:	f000 ffd1 	bl	801de70 <__lshift>
 801cece:	4683      	mov	fp, r0
 801ced0:	9b04      	ldr	r3, [sp, #16]
 801ced2:	2b00      	cmp	r3, #0
 801ced4:	dd05      	ble.n	801cee2 <_dtoa_r+0x84a>
 801ced6:	4631      	mov	r1, r6
 801ced8:	461a      	mov	r2, r3
 801ceda:	4620      	mov	r0, r4
 801cedc:	f000 ffc8 	bl	801de70 <__lshift>
 801cee0:	4606      	mov	r6, r0
 801cee2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	d069      	beq.n	801cfbc <_dtoa_r+0x924>
 801cee8:	4631      	mov	r1, r6
 801ceea:	4658      	mov	r0, fp
 801ceec:	f001 f82c 	bl	801df48 <__mcmp>
 801cef0:	2800      	cmp	r0, #0
 801cef2:	da63      	bge.n	801cfbc <_dtoa_r+0x924>
 801cef4:	2300      	movs	r3, #0
 801cef6:	4659      	mov	r1, fp
 801cef8:	220a      	movs	r2, #10
 801cefa:	4620      	mov	r0, r4
 801cefc:	f000 fdbe 	bl	801da7c <__multadd>
 801cf00:	9b08      	ldr	r3, [sp, #32]
 801cf02:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801cf06:	4683      	mov	fp, r0
 801cf08:	2b00      	cmp	r3, #0
 801cf0a:	f000 818f 	beq.w	801d22c <_dtoa_r+0xb94>
 801cf0e:	4639      	mov	r1, r7
 801cf10:	2300      	movs	r3, #0
 801cf12:	220a      	movs	r2, #10
 801cf14:	4620      	mov	r0, r4
 801cf16:	f000 fdb1 	bl	801da7c <__multadd>
 801cf1a:	f1b9 0f00 	cmp.w	r9, #0
 801cf1e:	4607      	mov	r7, r0
 801cf20:	f300 808e 	bgt.w	801d040 <_dtoa_r+0x9a8>
 801cf24:	9b05      	ldr	r3, [sp, #20]
 801cf26:	2b02      	cmp	r3, #2
 801cf28:	dc50      	bgt.n	801cfcc <_dtoa_r+0x934>
 801cf2a:	e089      	b.n	801d040 <_dtoa_r+0x9a8>
 801cf2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cf2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801cf32:	e75d      	b.n	801cdf0 <_dtoa_r+0x758>
 801cf34:	9b01      	ldr	r3, [sp, #4]
 801cf36:	1e5e      	subs	r6, r3, #1
 801cf38:	9b06      	ldr	r3, [sp, #24]
 801cf3a:	42b3      	cmp	r3, r6
 801cf3c:	bfbf      	itttt	lt
 801cf3e:	9b06      	ldrlt	r3, [sp, #24]
 801cf40:	9606      	strlt	r6, [sp, #24]
 801cf42:	1af2      	sublt	r2, r6, r3
 801cf44:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801cf46:	bfb6      	itet	lt
 801cf48:	189b      	addlt	r3, r3, r2
 801cf4a:	1b9e      	subge	r6, r3, r6
 801cf4c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801cf4e:	9b01      	ldr	r3, [sp, #4]
 801cf50:	bfb8      	it	lt
 801cf52:	2600      	movlt	r6, #0
 801cf54:	2b00      	cmp	r3, #0
 801cf56:	bfb5      	itete	lt
 801cf58:	eba8 0503 	sublt.w	r5, r8, r3
 801cf5c:	9b01      	ldrge	r3, [sp, #4]
 801cf5e:	2300      	movlt	r3, #0
 801cf60:	4645      	movge	r5, r8
 801cf62:	e747      	b.n	801cdf4 <_dtoa_r+0x75c>
 801cf64:	9e06      	ldr	r6, [sp, #24]
 801cf66:	9f08      	ldr	r7, [sp, #32]
 801cf68:	4645      	mov	r5, r8
 801cf6a:	e74c      	b.n	801ce06 <_dtoa_r+0x76e>
 801cf6c:	9a06      	ldr	r2, [sp, #24]
 801cf6e:	e775      	b.n	801ce5c <_dtoa_r+0x7c4>
 801cf70:	9b05      	ldr	r3, [sp, #20]
 801cf72:	2b01      	cmp	r3, #1
 801cf74:	dc18      	bgt.n	801cfa8 <_dtoa_r+0x910>
 801cf76:	9b02      	ldr	r3, [sp, #8]
 801cf78:	b9b3      	cbnz	r3, 801cfa8 <_dtoa_r+0x910>
 801cf7a:	9b03      	ldr	r3, [sp, #12]
 801cf7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801cf80:	b9a3      	cbnz	r3, 801cfac <_dtoa_r+0x914>
 801cf82:	9b03      	ldr	r3, [sp, #12]
 801cf84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801cf88:	0d1b      	lsrs	r3, r3, #20
 801cf8a:	051b      	lsls	r3, r3, #20
 801cf8c:	b12b      	cbz	r3, 801cf9a <_dtoa_r+0x902>
 801cf8e:	9b04      	ldr	r3, [sp, #16]
 801cf90:	3301      	adds	r3, #1
 801cf92:	9304      	str	r3, [sp, #16]
 801cf94:	f108 0801 	add.w	r8, r8, #1
 801cf98:	2301      	movs	r3, #1
 801cf9a:	9306      	str	r3, [sp, #24]
 801cf9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cf9e:	2b00      	cmp	r3, #0
 801cfa0:	f47f af74 	bne.w	801ce8c <_dtoa_r+0x7f4>
 801cfa4:	2001      	movs	r0, #1
 801cfa6:	e779      	b.n	801ce9c <_dtoa_r+0x804>
 801cfa8:	2300      	movs	r3, #0
 801cfaa:	e7f6      	b.n	801cf9a <_dtoa_r+0x902>
 801cfac:	9b02      	ldr	r3, [sp, #8]
 801cfae:	e7f4      	b.n	801cf9a <_dtoa_r+0x902>
 801cfb0:	d085      	beq.n	801cebe <_dtoa_r+0x826>
 801cfb2:	4618      	mov	r0, r3
 801cfb4:	301c      	adds	r0, #28
 801cfb6:	e77d      	b.n	801ceb4 <_dtoa_r+0x81c>
 801cfb8:	40240000 	.word	0x40240000
 801cfbc:	9b01      	ldr	r3, [sp, #4]
 801cfbe:	2b00      	cmp	r3, #0
 801cfc0:	dc38      	bgt.n	801d034 <_dtoa_r+0x99c>
 801cfc2:	9b05      	ldr	r3, [sp, #20]
 801cfc4:	2b02      	cmp	r3, #2
 801cfc6:	dd35      	ble.n	801d034 <_dtoa_r+0x99c>
 801cfc8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801cfcc:	f1b9 0f00 	cmp.w	r9, #0
 801cfd0:	d10d      	bne.n	801cfee <_dtoa_r+0x956>
 801cfd2:	4631      	mov	r1, r6
 801cfd4:	464b      	mov	r3, r9
 801cfd6:	2205      	movs	r2, #5
 801cfd8:	4620      	mov	r0, r4
 801cfda:	f000 fd4f 	bl	801da7c <__multadd>
 801cfde:	4601      	mov	r1, r0
 801cfe0:	4606      	mov	r6, r0
 801cfe2:	4658      	mov	r0, fp
 801cfe4:	f000 ffb0 	bl	801df48 <__mcmp>
 801cfe8:	2800      	cmp	r0, #0
 801cfea:	f73f adbd 	bgt.w	801cb68 <_dtoa_r+0x4d0>
 801cfee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cff0:	9d00      	ldr	r5, [sp, #0]
 801cff2:	ea6f 0a03 	mvn.w	sl, r3
 801cff6:	f04f 0800 	mov.w	r8, #0
 801cffa:	4631      	mov	r1, r6
 801cffc:	4620      	mov	r0, r4
 801cffe:	f000 fd1b 	bl	801da38 <_Bfree>
 801d002:	2f00      	cmp	r7, #0
 801d004:	f43f aeb4 	beq.w	801cd70 <_dtoa_r+0x6d8>
 801d008:	f1b8 0f00 	cmp.w	r8, #0
 801d00c:	d005      	beq.n	801d01a <_dtoa_r+0x982>
 801d00e:	45b8      	cmp	r8, r7
 801d010:	d003      	beq.n	801d01a <_dtoa_r+0x982>
 801d012:	4641      	mov	r1, r8
 801d014:	4620      	mov	r0, r4
 801d016:	f000 fd0f 	bl	801da38 <_Bfree>
 801d01a:	4639      	mov	r1, r7
 801d01c:	4620      	mov	r0, r4
 801d01e:	f000 fd0b 	bl	801da38 <_Bfree>
 801d022:	e6a5      	b.n	801cd70 <_dtoa_r+0x6d8>
 801d024:	2600      	movs	r6, #0
 801d026:	4637      	mov	r7, r6
 801d028:	e7e1      	b.n	801cfee <_dtoa_r+0x956>
 801d02a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801d02c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801d030:	4637      	mov	r7, r6
 801d032:	e599      	b.n	801cb68 <_dtoa_r+0x4d0>
 801d034:	9b08      	ldr	r3, [sp, #32]
 801d036:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801d03a:	2b00      	cmp	r3, #0
 801d03c:	f000 80fd 	beq.w	801d23a <_dtoa_r+0xba2>
 801d040:	2d00      	cmp	r5, #0
 801d042:	dd05      	ble.n	801d050 <_dtoa_r+0x9b8>
 801d044:	4639      	mov	r1, r7
 801d046:	462a      	mov	r2, r5
 801d048:	4620      	mov	r0, r4
 801d04a:	f000 ff11 	bl	801de70 <__lshift>
 801d04e:	4607      	mov	r7, r0
 801d050:	9b06      	ldr	r3, [sp, #24]
 801d052:	2b00      	cmp	r3, #0
 801d054:	d05c      	beq.n	801d110 <_dtoa_r+0xa78>
 801d056:	6879      	ldr	r1, [r7, #4]
 801d058:	4620      	mov	r0, r4
 801d05a:	f000 fcad 	bl	801d9b8 <_Balloc>
 801d05e:	4605      	mov	r5, r0
 801d060:	b928      	cbnz	r0, 801d06e <_dtoa_r+0x9d6>
 801d062:	4b80      	ldr	r3, [pc, #512]	; (801d264 <_dtoa_r+0xbcc>)
 801d064:	4602      	mov	r2, r0
 801d066:	f240 21ea 	movw	r1, #746	; 0x2ea
 801d06a:	f7ff bb2e 	b.w	801c6ca <_dtoa_r+0x32>
 801d06e:	693a      	ldr	r2, [r7, #16]
 801d070:	3202      	adds	r2, #2
 801d072:	0092      	lsls	r2, r2, #2
 801d074:	f107 010c 	add.w	r1, r7, #12
 801d078:	300c      	adds	r0, #12
 801d07a:	f7fd fb49 	bl	801a710 <memcpy>
 801d07e:	2201      	movs	r2, #1
 801d080:	4629      	mov	r1, r5
 801d082:	4620      	mov	r0, r4
 801d084:	f000 fef4 	bl	801de70 <__lshift>
 801d088:	9b00      	ldr	r3, [sp, #0]
 801d08a:	3301      	adds	r3, #1
 801d08c:	9301      	str	r3, [sp, #4]
 801d08e:	9b00      	ldr	r3, [sp, #0]
 801d090:	444b      	add	r3, r9
 801d092:	9307      	str	r3, [sp, #28]
 801d094:	9b02      	ldr	r3, [sp, #8]
 801d096:	f003 0301 	and.w	r3, r3, #1
 801d09a:	46b8      	mov	r8, r7
 801d09c:	9306      	str	r3, [sp, #24]
 801d09e:	4607      	mov	r7, r0
 801d0a0:	9b01      	ldr	r3, [sp, #4]
 801d0a2:	4631      	mov	r1, r6
 801d0a4:	3b01      	subs	r3, #1
 801d0a6:	4658      	mov	r0, fp
 801d0a8:	9302      	str	r3, [sp, #8]
 801d0aa:	f7ff fa69 	bl	801c580 <quorem>
 801d0ae:	4603      	mov	r3, r0
 801d0b0:	3330      	adds	r3, #48	; 0x30
 801d0b2:	9004      	str	r0, [sp, #16]
 801d0b4:	4641      	mov	r1, r8
 801d0b6:	4658      	mov	r0, fp
 801d0b8:	9308      	str	r3, [sp, #32]
 801d0ba:	f000 ff45 	bl	801df48 <__mcmp>
 801d0be:	463a      	mov	r2, r7
 801d0c0:	4681      	mov	r9, r0
 801d0c2:	4631      	mov	r1, r6
 801d0c4:	4620      	mov	r0, r4
 801d0c6:	f000 ff5b 	bl	801df80 <__mdiff>
 801d0ca:	68c2      	ldr	r2, [r0, #12]
 801d0cc:	9b08      	ldr	r3, [sp, #32]
 801d0ce:	4605      	mov	r5, r0
 801d0d0:	bb02      	cbnz	r2, 801d114 <_dtoa_r+0xa7c>
 801d0d2:	4601      	mov	r1, r0
 801d0d4:	4658      	mov	r0, fp
 801d0d6:	f000 ff37 	bl	801df48 <__mcmp>
 801d0da:	9b08      	ldr	r3, [sp, #32]
 801d0dc:	4602      	mov	r2, r0
 801d0de:	4629      	mov	r1, r5
 801d0e0:	4620      	mov	r0, r4
 801d0e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801d0e6:	f000 fca7 	bl	801da38 <_Bfree>
 801d0ea:	9b05      	ldr	r3, [sp, #20]
 801d0ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d0ee:	9d01      	ldr	r5, [sp, #4]
 801d0f0:	ea43 0102 	orr.w	r1, r3, r2
 801d0f4:	9b06      	ldr	r3, [sp, #24]
 801d0f6:	430b      	orrs	r3, r1
 801d0f8:	9b08      	ldr	r3, [sp, #32]
 801d0fa:	d10d      	bne.n	801d118 <_dtoa_r+0xa80>
 801d0fc:	2b39      	cmp	r3, #57	; 0x39
 801d0fe:	d029      	beq.n	801d154 <_dtoa_r+0xabc>
 801d100:	f1b9 0f00 	cmp.w	r9, #0
 801d104:	dd01      	ble.n	801d10a <_dtoa_r+0xa72>
 801d106:	9b04      	ldr	r3, [sp, #16]
 801d108:	3331      	adds	r3, #49	; 0x31
 801d10a:	9a02      	ldr	r2, [sp, #8]
 801d10c:	7013      	strb	r3, [r2, #0]
 801d10e:	e774      	b.n	801cffa <_dtoa_r+0x962>
 801d110:	4638      	mov	r0, r7
 801d112:	e7b9      	b.n	801d088 <_dtoa_r+0x9f0>
 801d114:	2201      	movs	r2, #1
 801d116:	e7e2      	b.n	801d0de <_dtoa_r+0xa46>
 801d118:	f1b9 0f00 	cmp.w	r9, #0
 801d11c:	db06      	blt.n	801d12c <_dtoa_r+0xa94>
 801d11e:	9905      	ldr	r1, [sp, #20]
 801d120:	ea41 0909 	orr.w	r9, r1, r9
 801d124:	9906      	ldr	r1, [sp, #24]
 801d126:	ea59 0101 	orrs.w	r1, r9, r1
 801d12a:	d120      	bne.n	801d16e <_dtoa_r+0xad6>
 801d12c:	2a00      	cmp	r2, #0
 801d12e:	ddec      	ble.n	801d10a <_dtoa_r+0xa72>
 801d130:	4659      	mov	r1, fp
 801d132:	2201      	movs	r2, #1
 801d134:	4620      	mov	r0, r4
 801d136:	9301      	str	r3, [sp, #4]
 801d138:	f000 fe9a 	bl	801de70 <__lshift>
 801d13c:	4631      	mov	r1, r6
 801d13e:	4683      	mov	fp, r0
 801d140:	f000 ff02 	bl	801df48 <__mcmp>
 801d144:	2800      	cmp	r0, #0
 801d146:	9b01      	ldr	r3, [sp, #4]
 801d148:	dc02      	bgt.n	801d150 <_dtoa_r+0xab8>
 801d14a:	d1de      	bne.n	801d10a <_dtoa_r+0xa72>
 801d14c:	07da      	lsls	r2, r3, #31
 801d14e:	d5dc      	bpl.n	801d10a <_dtoa_r+0xa72>
 801d150:	2b39      	cmp	r3, #57	; 0x39
 801d152:	d1d8      	bne.n	801d106 <_dtoa_r+0xa6e>
 801d154:	9a02      	ldr	r2, [sp, #8]
 801d156:	2339      	movs	r3, #57	; 0x39
 801d158:	7013      	strb	r3, [r2, #0]
 801d15a:	462b      	mov	r3, r5
 801d15c:	461d      	mov	r5, r3
 801d15e:	3b01      	subs	r3, #1
 801d160:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801d164:	2a39      	cmp	r2, #57	; 0x39
 801d166:	d050      	beq.n	801d20a <_dtoa_r+0xb72>
 801d168:	3201      	adds	r2, #1
 801d16a:	701a      	strb	r2, [r3, #0]
 801d16c:	e745      	b.n	801cffa <_dtoa_r+0x962>
 801d16e:	2a00      	cmp	r2, #0
 801d170:	dd03      	ble.n	801d17a <_dtoa_r+0xae2>
 801d172:	2b39      	cmp	r3, #57	; 0x39
 801d174:	d0ee      	beq.n	801d154 <_dtoa_r+0xabc>
 801d176:	3301      	adds	r3, #1
 801d178:	e7c7      	b.n	801d10a <_dtoa_r+0xa72>
 801d17a:	9a01      	ldr	r2, [sp, #4]
 801d17c:	9907      	ldr	r1, [sp, #28]
 801d17e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d182:	428a      	cmp	r2, r1
 801d184:	d02a      	beq.n	801d1dc <_dtoa_r+0xb44>
 801d186:	4659      	mov	r1, fp
 801d188:	2300      	movs	r3, #0
 801d18a:	220a      	movs	r2, #10
 801d18c:	4620      	mov	r0, r4
 801d18e:	f000 fc75 	bl	801da7c <__multadd>
 801d192:	45b8      	cmp	r8, r7
 801d194:	4683      	mov	fp, r0
 801d196:	f04f 0300 	mov.w	r3, #0
 801d19a:	f04f 020a 	mov.w	r2, #10
 801d19e:	4641      	mov	r1, r8
 801d1a0:	4620      	mov	r0, r4
 801d1a2:	d107      	bne.n	801d1b4 <_dtoa_r+0xb1c>
 801d1a4:	f000 fc6a 	bl	801da7c <__multadd>
 801d1a8:	4680      	mov	r8, r0
 801d1aa:	4607      	mov	r7, r0
 801d1ac:	9b01      	ldr	r3, [sp, #4]
 801d1ae:	3301      	adds	r3, #1
 801d1b0:	9301      	str	r3, [sp, #4]
 801d1b2:	e775      	b.n	801d0a0 <_dtoa_r+0xa08>
 801d1b4:	f000 fc62 	bl	801da7c <__multadd>
 801d1b8:	4639      	mov	r1, r7
 801d1ba:	4680      	mov	r8, r0
 801d1bc:	2300      	movs	r3, #0
 801d1be:	220a      	movs	r2, #10
 801d1c0:	4620      	mov	r0, r4
 801d1c2:	f000 fc5b 	bl	801da7c <__multadd>
 801d1c6:	4607      	mov	r7, r0
 801d1c8:	e7f0      	b.n	801d1ac <_dtoa_r+0xb14>
 801d1ca:	f1b9 0f00 	cmp.w	r9, #0
 801d1ce:	9a00      	ldr	r2, [sp, #0]
 801d1d0:	bfcc      	ite	gt
 801d1d2:	464d      	movgt	r5, r9
 801d1d4:	2501      	movle	r5, #1
 801d1d6:	4415      	add	r5, r2
 801d1d8:	f04f 0800 	mov.w	r8, #0
 801d1dc:	4659      	mov	r1, fp
 801d1de:	2201      	movs	r2, #1
 801d1e0:	4620      	mov	r0, r4
 801d1e2:	9301      	str	r3, [sp, #4]
 801d1e4:	f000 fe44 	bl	801de70 <__lshift>
 801d1e8:	4631      	mov	r1, r6
 801d1ea:	4683      	mov	fp, r0
 801d1ec:	f000 feac 	bl	801df48 <__mcmp>
 801d1f0:	2800      	cmp	r0, #0
 801d1f2:	dcb2      	bgt.n	801d15a <_dtoa_r+0xac2>
 801d1f4:	d102      	bne.n	801d1fc <_dtoa_r+0xb64>
 801d1f6:	9b01      	ldr	r3, [sp, #4]
 801d1f8:	07db      	lsls	r3, r3, #31
 801d1fa:	d4ae      	bmi.n	801d15a <_dtoa_r+0xac2>
 801d1fc:	462b      	mov	r3, r5
 801d1fe:	461d      	mov	r5, r3
 801d200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d204:	2a30      	cmp	r2, #48	; 0x30
 801d206:	d0fa      	beq.n	801d1fe <_dtoa_r+0xb66>
 801d208:	e6f7      	b.n	801cffa <_dtoa_r+0x962>
 801d20a:	9a00      	ldr	r2, [sp, #0]
 801d20c:	429a      	cmp	r2, r3
 801d20e:	d1a5      	bne.n	801d15c <_dtoa_r+0xac4>
 801d210:	f10a 0a01 	add.w	sl, sl, #1
 801d214:	2331      	movs	r3, #49	; 0x31
 801d216:	e779      	b.n	801d10c <_dtoa_r+0xa74>
 801d218:	4b13      	ldr	r3, [pc, #76]	; (801d268 <_dtoa_r+0xbd0>)
 801d21a:	f7ff baaf 	b.w	801c77c <_dtoa_r+0xe4>
 801d21e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d220:	2b00      	cmp	r3, #0
 801d222:	f47f aa86 	bne.w	801c732 <_dtoa_r+0x9a>
 801d226:	4b11      	ldr	r3, [pc, #68]	; (801d26c <_dtoa_r+0xbd4>)
 801d228:	f7ff baa8 	b.w	801c77c <_dtoa_r+0xe4>
 801d22c:	f1b9 0f00 	cmp.w	r9, #0
 801d230:	dc03      	bgt.n	801d23a <_dtoa_r+0xba2>
 801d232:	9b05      	ldr	r3, [sp, #20]
 801d234:	2b02      	cmp	r3, #2
 801d236:	f73f aec9 	bgt.w	801cfcc <_dtoa_r+0x934>
 801d23a:	9d00      	ldr	r5, [sp, #0]
 801d23c:	4631      	mov	r1, r6
 801d23e:	4658      	mov	r0, fp
 801d240:	f7ff f99e 	bl	801c580 <quorem>
 801d244:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801d248:	f805 3b01 	strb.w	r3, [r5], #1
 801d24c:	9a00      	ldr	r2, [sp, #0]
 801d24e:	1aaa      	subs	r2, r5, r2
 801d250:	4591      	cmp	r9, r2
 801d252:	ddba      	ble.n	801d1ca <_dtoa_r+0xb32>
 801d254:	4659      	mov	r1, fp
 801d256:	2300      	movs	r3, #0
 801d258:	220a      	movs	r2, #10
 801d25a:	4620      	mov	r0, r4
 801d25c:	f000 fc0e 	bl	801da7c <__multadd>
 801d260:	4683      	mov	fp, r0
 801d262:	e7eb      	b.n	801d23c <_dtoa_r+0xba4>
 801d264:	08020e24 	.word	0x08020e24
 801d268:	08020c20 	.word	0x08020c20
 801d26c:	08020da1 	.word	0x08020da1

0801d270 <rshift>:
 801d270:	6903      	ldr	r3, [r0, #16]
 801d272:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801d276:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d27a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801d27e:	f100 0414 	add.w	r4, r0, #20
 801d282:	dd45      	ble.n	801d310 <rshift+0xa0>
 801d284:	f011 011f 	ands.w	r1, r1, #31
 801d288:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801d28c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801d290:	d10c      	bne.n	801d2ac <rshift+0x3c>
 801d292:	f100 0710 	add.w	r7, r0, #16
 801d296:	4629      	mov	r1, r5
 801d298:	42b1      	cmp	r1, r6
 801d29a:	d334      	bcc.n	801d306 <rshift+0x96>
 801d29c:	1a9b      	subs	r3, r3, r2
 801d29e:	009b      	lsls	r3, r3, #2
 801d2a0:	1eea      	subs	r2, r5, #3
 801d2a2:	4296      	cmp	r6, r2
 801d2a4:	bf38      	it	cc
 801d2a6:	2300      	movcc	r3, #0
 801d2a8:	4423      	add	r3, r4
 801d2aa:	e015      	b.n	801d2d8 <rshift+0x68>
 801d2ac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801d2b0:	f1c1 0820 	rsb	r8, r1, #32
 801d2b4:	40cf      	lsrs	r7, r1
 801d2b6:	f105 0e04 	add.w	lr, r5, #4
 801d2ba:	46a1      	mov	r9, r4
 801d2bc:	4576      	cmp	r6, lr
 801d2be:	46f4      	mov	ip, lr
 801d2c0:	d815      	bhi.n	801d2ee <rshift+0x7e>
 801d2c2:	1a9b      	subs	r3, r3, r2
 801d2c4:	009a      	lsls	r2, r3, #2
 801d2c6:	3a04      	subs	r2, #4
 801d2c8:	3501      	adds	r5, #1
 801d2ca:	42ae      	cmp	r6, r5
 801d2cc:	bf38      	it	cc
 801d2ce:	2200      	movcc	r2, #0
 801d2d0:	18a3      	adds	r3, r4, r2
 801d2d2:	50a7      	str	r7, [r4, r2]
 801d2d4:	b107      	cbz	r7, 801d2d8 <rshift+0x68>
 801d2d6:	3304      	adds	r3, #4
 801d2d8:	1b1a      	subs	r2, r3, r4
 801d2da:	42a3      	cmp	r3, r4
 801d2dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801d2e0:	bf08      	it	eq
 801d2e2:	2300      	moveq	r3, #0
 801d2e4:	6102      	str	r2, [r0, #16]
 801d2e6:	bf08      	it	eq
 801d2e8:	6143      	streq	r3, [r0, #20]
 801d2ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d2ee:	f8dc c000 	ldr.w	ip, [ip]
 801d2f2:	fa0c fc08 	lsl.w	ip, ip, r8
 801d2f6:	ea4c 0707 	orr.w	r7, ip, r7
 801d2fa:	f849 7b04 	str.w	r7, [r9], #4
 801d2fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d302:	40cf      	lsrs	r7, r1
 801d304:	e7da      	b.n	801d2bc <rshift+0x4c>
 801d306:	f851 cb04 	ldr.w	ip, [r1], #4
 801d30a:	f847 cf04 	str.w	ip, [r7, #4]!
 801d30e:	e7c3      	b.n	801d298 <rshift+0x28>
 801d310:	4623      	mov	r3, r4
 801d312:	e7e1      	b.n	801d2d8 <rshift+0x68>

0801d314 <__hexdig_fun>:
 801d314:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801d318:	2b09      	cmp	r3, #9
 801d31a:	d802      	bhi.n	801d322 <__hexdig_fun+0xe>
 801d31c:	3820      	subs	r0, #32
 801d31e:	b2c0      	uxtb	r0, r0
 801d320:	4770      	bx	lr
 801d322:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801d326:	2b05      	cmp	r3, #5
 801d328:	d801      	bhi.n	801d32e <__hexdig_fun+0x1a>
 801d32a:	3847      	subs	r0, #71	; 0x47
 801d32c:	e7f7      	b.n	801d31e <__hexdig_fun+0xa>
 801d32e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801d332:	2b05      	cmp	r3, #5
 801d334:	d801      	bhi.n	801d33a <__hexdig_fun+0x26>
 801d336:	3827      	subs	r0, #39	; 0x27
 801d338:	e7f1      	b.n	801d31e <__hexdig_fun+0xa>
 801d33a:	2000      	movs	r0, #0
 801d33c:	4770      	bx	lr
	...

0801d340 <__gethex>:
 801d340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d344:	ed2d 8b02 	vpush	{d8}
 801d348:	b089      	sub	sp, #36	; 0x24
 801d34a:	ee08 0a10 	vmov	s16, r0
 801d34e:	9304      	str	r3, [sp, #16]
 801d350:	4bbc      	ldr	r3, [pc, #752]	; (801d644 <__gethex+0x304>)
 801d352:	681b      	ldr	r3, [r3, #0]
 801d354:	9301      	str	r3, [sp, #4]
 801d356:	4618      	mov	r0, r3
 801d358:	468b      	mov	fp, r1
 801d35a:	4690      	mov	r8, r2
 801d35c:	f7e2 ff38 	bl	80001d0 <strlen>
 801d360:	9b01      	ldr	r3, [sp, #4]
 801d362:	f8db 2000 	ldr.w	r2, [fp]
 801d366:	4403      	add	r3, r0
 801d368:	4682      	mov	sl, r0
 801d36a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801d36e:	9305      	str	r3, [sp, #20]
 801d370:	1c93      	adds	r3, r2, #2
 801d372:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801d376:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801d37a:	32fe      	adds	r2, #254	; 0xfe
 801d37c:	18d1      	adds	r1, r2, r3
 801d37e:	461f      	mov	r7, r3
 801d380:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d384:	9100      	str	r1, [sp, #0]
 801d386:	2830      	cmp	r0, #48	; 0x30
 801d388:	d0f8      	beq.n	801d37c <__gethex+0x3c>
 801d38a:	f7ff ffc3 	bl	801d314 <__hexdig_fun>
 801d38e:	4604      	mov	r4, r0
 801d390:	2800      	cmp	r0, #0
 801d392:	d13a      	bne.n	801d40a <__gethex+0xca>
 801d394:	9901      	ldr	r1, [sp, #4]
 801d396:	4652      	mov	r2, sl
 801d398:	4638      	mov	r0, r7
 801d39a:	f001 f982 	bl	801e6a2 <strncmp>
 801d39e:	4605      	mov	r5, r0
 801d3a0:	2800      	cmp	r0, #0
 801d3a2:	d168      	bne.n	801d476 <__gethex+0x136>
 801d3a4:	f817 000a 	ldrb.w	r0, [r7, sl]
 801d3a8:	eb07 060a 	add.w	r6, r7, sl
 801d3ac:	f7ff ffb2 	bl	801d314 <__hexdig_fun>
 801d3b0:	2800      	cmp	r0, #0
 801d3b2:	d062      	beq.n	801d47a <__gethex+0x13a>
 801d3b4:	4633      	mov	r3, r6
 801d3b6:	7818      	ldrb	r0, [r3, #0]
 801d3b8:	2830      	cmp	r0, #48	; 0x30
 801d3ba:	461f      	mov	r7, r3
 801d3bc:	f103 0301 	add.w	r3, r3, #1
 801d3c0:	d0f9      	beq.n	801d3b6 <__gethex+0x76>
 801d3c2:	f7ff ffa7 	bl	801d314 <__hexdig_fun>
 801d3c6:	2301      	movs	r3, #1
 801d3c8:	fab0 f480 	clz	r4, r0
 801d3cc:	0964      	lsrs	r4, r4, #5
 801d3ce:	4635      	mov	r5, r6
 801d3d0:	9300      	str	r3, [sp, #0]
 801d3d2:	463a      	mov	r2, r7
 801d3d4:	4616      	mov	r6, r2
 801d3d6:	3201      	adds	r2, #1
 801d3d8:	7830      	ldrb	r0, [r6, #0]
 801d3da:	f7ff ff9b 	bl	801d314 <__hexdig_fun>
 801d3de:	2800      	cmp	r0, #0
 801d3e0:	d1f8      	bne.n	801d3d4 <__gethex+0x94>
 801d3e2:	9901      	ldr	r1, [sp, #4]
 801d3e4:	4652      	mov	r2, sl
 801d3e6:	4630      	mov	r0, r6
 801d3e8:	f001 f95b 	bl	801e6a2 <strncmp>
 801d3ec:	b980      	cbnz	r0, 801d410 <__gethex+0xd0>
 801d3ee:	b94d      	cbnz	r5, 801d404 <__gethex+0xc4>
 801d3f0:	eb06 050a 	add.w	r5, r6, sl
 801d3f4:	462a      	mov	r2, r5
 801d3f6:	4616      	mov	r6, r2
 801d3f8:	3201      	adds	r2, #1
 801d3fa:	7830      	ldrb	r0, [r6, #0]
 801d3fc:	f7ff ff8a 	bl	801d314 <__hexdig_fun>
 801d400:	2800      	cmp	r0, #0
 801d402:	d1f8      	bne.n	801d3f6 <__gethex+0xb6>
 801d404:	1bad      	subs	r5, r5, r6
 801d406:	00ad      	lsls	r5, r5, #2
 801d408:	e004      	b.n	801d414 <__gethex+0xd4>
 801d40a:	2400      	movs	r4, #0
 801d40c:	4625      	mov	r5, r4
 801d40e:	e7e0      	b.n	801d3d2 <__gethex+0x92>
 801d410:	2d00      	cmp	r5, #0
 801d412:	d1f7      	bne.n	801d404 <__gethex+0xc4>
 801d414:	7833      	ldrb	r3, [r6, #0]
 801d416:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801d41a:	2b50      	cmp	r3, #80	; 0x50
 801d41c:	d13b      	bne.n	801d496 <__gethex+0x156>
 801d41e:	7873      	ldrb	r3, [r6, #1]
 801d420:	2b2b      	cmp	r3, #43	; 0x2b
 801d422:	d02c      	beq.n	801d47e <__gethex+0x13e>
 801d424:	2b2d      	cmp	r3, #45	; 0x2d
 801d426:	d02e      	beq.n	801d486 <__gethex+0x146>
 801d428:	1c71      	adds	r1, r6, #1
 801d42a:	f04f 0900 	mov.w	r9, #0
 801d42e:	7808      	ldrb	r0, [r1, #0]
 801d430:	f7ff ff70 	bl	801d314 <__hexdig_fun>
 801d434:	1e43      	subs	r3, r0, #1
 801d436:	b2db      	uxtb	r3, r3
 801d438:	2b18      	cmp	r3, #24
 801d43a:	d82c      	bhi.n	801d496 <__gethex+0x156>
 801d43c:	f1a0 0210 	sub.w	r2, r0, #16
 801d440:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801d444:	f7ff ff66 	bl	801d314 <__hexdig_fun>
 801d448:	1e43      	subs	r3, r0, #1
 801d44a:	b2db      	uxtb	r3, r3
 801d44c:	2b18      	cmp	r3, #24
 801d44e:	d91d      	bls.n	801d48c <__gethex+0x14c>
 801d450:	f1b9 0f00 	cmp.w	r9, #0
 801d454:	d000      	beq.n	801d458 <__gethex+0x118>
 801d456:	4252      	negs	r2, r2
 801d458:	4415      	add	r5, r2
 801d45a:	f8cb 1000 	str.w	r1, [fp]
 801d45e:	b1e4      	cbz	r4, 801d49a <__gethex+0x15a>
 801d460:	9b00      	ldr	r3, [sp, #0]
 801d462:	2b00      	cmp	r3, #0
 801d464:	bf14      	ite	ne
 801d466:	2700      	movne	r7, #0
 801d468:	2706      	moveq	r7, #6
 801d46a:	4638      	mov	r0, r7
 801d46c:	b009      	add	sp, #36	; 0x24
 801d46e:	ecbd 8b02 	vpop	{d8}
 801d472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d476:	463e      	mov	r6, r7
 801d478:	4625      	mov	r5, r4
 801d47a:	2401      	movs	r4, #1
 801d47c:	e7ca      	b.n	801d414 <__gethex+0xd4>
 801d47e:	f04f 0900 	mov.w	r9, #0
 801d482:	1cb1      	adds	r1, r6, #2
 801d484:	e7d3      	b.n	801d42e <__gethex+0xee>
 801d486:	f04f 0901 	mov.w	r9, #1
 801d48a:	e7fa      	b.n	801d482 <__gethex+0x142>
 801d48c:	230a      	movs	r3, #10
 801d48e:	fb03 0202 	mla	r2, r3, r2, r0
 801d492:	3a10      	subs	r2, #16
 801d494:	e7d4      	b.n	801d440 <__gethex+0x100>
 801d496:	4631      	mov	r1, r6
 801d498:	e7df      	b.n	801d45a <__gethex+0x11a>
 801d49a:	1bf3      	subs	r3, r6, r7
 801d49c:	3b01      	subs	r3, #1
 801d49e:	4621      	mov	r1, r4
 801d4a0:	2b07      	cmp	r3, #7
 801d4a2:	dc0b      	bgt.n	801d4bc <__gethex+0x17c>
 801d4a4:	ee18 0a10 	vmov	r0, s16
 801d4a8:	f000 fa86 	bl	801d9b8 <_Balloc>
 801d4ac:	4604      	mov	r4, r0
 801d4ae:	b940      	cbnz	r0, 801d4c2 <__gethex+0x182>
 801d4b0:	4b65      	ldr	r3, [pc, #404]	; (801d648 <__gethex+0x308>)
 801d4b2:	4602      	mov	r2, r0
 801d4b4:	21de      	movs	r1, #222	; 0xde
 801d4b6:	4865      	ldr	r0, [pc, #404]	; (801d64c <__gethex+0x30c>)
 801d4b8:	f001 f912 	bl	801e6e0 <__assert_func>
 801d4bc:	3101      	adds	r1, #1
 801d4be:	105b      	asrs	r3, r3, #1
 801d4c0:	e7ee      	b.n	801d4a0 <__gethex+0x160>
 801d4c2:	f100 0914 	add.w	r9, r0, #20
 801d4c6:	f04f 0b00 	mov.w	fp, #0
 801d4ca:	f1ca 0301 	rsb	r3, sl, #1
 801d4ce:	f8cd 9008 	str.w	r9, [sp, #8]
 801d4d2:	f8cd b000 	str.w	fp, [sp]
 801d4d6:	9306      	str	r3, [sp, #24]
 801d4d8:	42b7      	cmp	r7, r6
 801d4da:	d340      	bcc.n	801d55e <__gethex+0x21e>
 801d4dc:	9802      	ldr	r0, [sp, #8]
 801d4de:	9b00      	ldr	r3, [sp, #0]
 801d4e0:	f840 3b04 	str.w	r3, [r0], #4
 801d4e4:	eba0 0009 	sub.w	r0, r0, r9
 801d4e8:	1080      	asrs	r0, r0, #2
 801d4ea:	0146      	lsls	r6, r0, #5
 801d4ec:	6120      	str	r0, [r4, #16]
 801d4ee:	4618      	mov	r0, r3
 801d4f0:	f000 fb58 	bl	801dba4 <__hi0bits>
 801d4f4:	1a30      	subs	r0, r6, r0
 801d4f6:	f8d8 6000 	ldr.w	r6, [r8]
 801d4fa:	42b0      	cmp	r0, r6
 801d4fc:	dd63      	ble.n	801d5c6 <__gethex+0x286>
 801d4fe:	1b87      	subs	r7, r0, r6
 801d500:	4639      	mov	r1, r7
 801d502:	4620      	mov	r0, r4
 801d504:	f000 fef2 	bl	801e2ec <__any_on>
 801d508:	4682      	mov	sl, r0
 801d50a:	b1a8      	cbz	r0, 801d538 <__gethex+0x1f8>
 801d50c:	1e7b      	subs	r3, r7, #1
 801d50e:	1159      	asrs	r1, r3, #5
 801d510:	f003 021f 	and.w	r2, r3, #31
 801d514:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801d518:	f04f 0a01 	mov.w	sl, #1
 801d51c:	fa0a f202 	lsl.w	r2, sl, r2
 801d520:	420a      	tst	r2, r1
 801d522:	d009      	beq.n	801d538 <__gethex+0x1f8>
 801d524:	4553      	cmp	r3, sl
 801d526:	dd05      	ble.n	801d534 <__gethex+0x1f4>
 801d528:	1eb9      	subs	r1, r7, #2
 801d52a:	4620      	mov	r0, r4
 801d52c:	f000 fede 	bl	801e2ec <__any_on>
 801d530:	2800      	cmp	r0, #0
 801d532:	d145      	bne.n	801d5c0 <__gethex+0x280>
 801d534:	f04f 0a02 	mov.w	sl, #2
 801d538:	4639      	mov	r1, r7
 801d53a:	4620      	mov	r0, r4
 801d53c:	f7ff fe98 	bl	801d270 <rshift>
 801d540:	443d      	add	r5, r7
 801d542:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d546:	42ab      	cmp	r3, r5
 801d548:	da4c      	bge.n	801d5e4 <__gethex+0x2a4>
 801d54a:	ee18 0a10 	vmov	r0, s16
 801d54e:	4621      	mov	r1, r4
 801d550:	f000 fa72 	bl	801da38 <_Bfree>
 801d554:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d556:	2300      	movs	r3, #0
 801d558:	6013      	str	r3, [r2, #0]
 801d55a:	27a3      	movs	r7, #163	; 0xa3
 801d55c:	e785      	b.n	801d46a <__gethex+0x12a>
 801d55e:	1e73      	subs	r3, r6, #1
 801d560:	9a05      	ldr	r2, [sp, #20]
 801d562:	9303      	str	r3, [sp, #12]
 801d564:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d568:	4293      	cmp	r3, r2
 801d56a:	d019      	beq.n	801d5a0 <__gethex+0x260>
 801d56c:	f1bb 0f20 	cmp.w	fp, #32
 801d570:	d107      	bne.n	801d582 <__gethex+0x242>
 801d572:	9b02      	ldr	r3, [sp, #8]
 801d574:	9a00      	ldr	r2, [sp, #0]
 801d576:	f843 2b04 	str.w	r2, [r3], #4
 801d57a:	9302      	str	r3, [sp, #8]
 801d57c:	2300      	movs	r3, #0
 801d57e:	9300      	str	r3, [sp, #0]
 801d580:	469b      	mov	fp, r3
 801d582:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801d586:	f7ff fec5 	bl	801d314 <__hexdig_fun>
 801d58a:	9b00      	ldr	r3, [sp, #0]
 801d58c:	f000 000f 	and.w	r0, r0, #15
 801d590:	fa00 f00b 	lsl.w	r0, r0, fp
 801d594:	4303      	orrs	r3, r0
 801d596:	9300      	str	r3, [sp, #0]
 801d598:	f10b 0b04 	add.w	fp, fp, #4
 801d59c:	9b03      	ldr	r3, [sp, #12]
 801d59e:	e00d      	b.n	801d5bc <__gethex+0x27c>
 801d5a0:	9b03      	ldr	r3, [sp, #12]
 801d5a2:	9a06      	ldr	r2, [sp, #24]
 801d5a4:	4413      	add	r3, r2
 801d5a6:	42bb      	cmp	r3, r7
 801d5a8:	d3e0      	bcc.n	801d56c <__gethex+0x22c>
 801d5aa:	4618      	mov	r0, r3
 801d5ac:	9901      	ldr	r1, [sp, #4]
 801d5ae:	9307      	str	r3, [sp, #28]
 801d5b0:	4652      	mov	r2, sl
 801d5b2:	f001 f876 	bl	801e6a2 <strncmp>
 801d5b6:	9b07      	ldr	r3, [sp, #28]
 801d5b8:	2800      	cmp	r0, #0
 801d5ba:	d1d7      	bne.n	801d56c <__gethex+0x22c>
 801d5bc:	461e      	mov	r6, r3
 801d5be:	e78b      	b.n	801d4d8 <__gethex+0x198>
 801d5c0:	f04f 0a03 	mov.w	sl, #3
 801d5c4:	e7b8      	b.n	801d538 <__gethex+0x1f8>
 801d5c6:	da0a      	bge.n	801d5de <__gethex+0x29e>
 801d5c8:	1a37      	subs	r7, r6, r0
 801d5ca:	4621      	mov	r1, r4
 801d5cc:	ee18 0a10 	vmov	r0, s16
 801d5d0:	463a      	mov	r2, r7
 801d5d2:	f000 fc4d 	bl	801de70 <__lshift>
 801d5d6:	1bed      	subs	r5, r5, r7
 801d5d8:	4604      	mov	r4, r0
 801d5da:	f100 0914 	add.w	r9, r0, #20
 801d5de:	f04f 0a00 	mov.w	sl, #0
 801d5e2:	e7ae      	b.n	801d542 <__gethex+0x202>
 801d5e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801d5e8:	42a8      	cmp	r0, r5
 801d5ea:	dd72      	ble.n	801d6d2 <__gethex+0x392>
 801d5ec:	1b45      	subs	r5, r0, r5
 801d5ee:	42ae      	cmp	r6, r5
 801d5f0:	dc36      	bgt.n	801d660 <__gethex+0x320>
 801d5f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d5f6:	2b02      	cmp	r3, #2
 801d5f8:	d02a      	beq.n	801d650 <__gethex+0x310>
 801d5fa:	2b03      	cmp	r3, #3
 801d5fc:	d02c      	beq.n	801d658 <__gethex+0x318>
 801d5fe:	2b01      	cmp	r3, #1
 801d600:	d115      	bne.n	801d62e <__gethex+0x2ee>
 801d602:	42ae      	cmp	r6, r5
 801d604:	d113      	bne.n	801d62e <__gethex+0x2ee>
 801d606:	2e01      	cmp	r6, #1
 801d608:	d10b      	bne.n	801d622 <__gethex+0x2e2>
 801d60a:	9a04      	ldr	r2, [sp, #16]
 801d60c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d610:	6013      	str	r3, [r2, #0]
 801d612:	2301      	movs	r3, #1
 801d614:	6123      	str	r3, [r4, #16]
 801d616:	f8c9 3000 	str.w	r3, [r9]
 801d61a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d61c:	2762      	movs	r7, #98	; 0x62
 801d61e:	601c      	str	r4, [r3, #0]
 801d620:	e723      	b.n	801d46a <__gethex+0x12a>
 801d622:	1e71      	subs	r1, r6, #1
 801d624:	4620      	mov	r0, r4
 801d626:	f000 fe61 	bl	801e2ec <__any_on>
 801d62a:	2800      	cmp	r0, #0
 801d62c:	d1ed      	bne.n	801d60a <__gethex+0x2ca>
 801d62e:	ee18 0a10 	vmov	r0, s16
 801d632:	4621      	mov	r1, r4
 801d634:	f000 fa00 	bl	801da38 <_Bfree>
 801d638:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d63a:	2300      	movs	r3, #0
 801d63c:	6013      	str	r3, [r2, #0]
 801d63e:	2750      	movs	r7, #80	; 0x50
 801d640:	e713      	b.n	801d46a <__gethex+0x12a>
 801d642:	bf00      	nop
 801d644:	08020ea0 	.word	0x08020ea0
 801d648:	08020e24 	.word	0x08020e24
 801d64c:	08020e35 	.word	0x08020e35
 801d650:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d652:	2b00      	cmp	r3, #0
 801d654:	d1eb      	bne.n	801d62e <__gethex+0x2ee>
 801d656:	e7d8      	b.n	801d60a <__gethex+0x2ca>
 801d658:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d65a:	2b00      	cmp	r3, #0
 801d65c:	d1d5      	bne.n	801d60a <__gethex+0x2ca>
 801d65e:	e7e6      	b.n	801d62e <__gethex+0x2ee>
 801d660:	1e6f      	subs	r7, r5, #1
 801d662:	f1ba 0f00 	cmp.w	sl, #0
 801d666:	d131      	bne.n	801d6cc <__gethex+0x38c>
 801d668:	b127      	cbz	r7, 801d674 <__gethex+0x334>
 801d66a:	4639      	mov	r1, r7
 801d66c:	4620      	mov	r0, r4
 801d66e:	f000 fe3d 	bl	801e2ec <__any_on>
 801d672:	4682      	mov	sl, r0
 801d674:	117b      	asrs	r3, r7, #5
 801d676:	2101      	movs	r1, #1
 801d678:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801d67c:	f007 071f 	and.w	r7, r7, #31
 801d680:	fa01 f707 	lsl.w	r7, r1, r7
 801d684:	421f      	tst	r7, r3
 801d686:	4629      	mov	r1, r5
 801d688:	4620      	mov	r0, r4
 801d68a:	bf18      	it	ne
 801d68c:	f04a 0a02 	orrne.w	sl, sl, #2
 801d690:	1b76      	subs	r6, r6, r5
 801d692:	f7ff fded 	bl	801d270 <rshift>
 801d696:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d69a:	2702      	movs	r7, #2
 801d69c:	f1ba 0f00 	cmp.w	sl, #0
 801d6a0:	d048      	beq.n	801d734 <__gethex+0x3f4>
 801d6a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d6a6:	2b02      	cmp	r3, #2
 801d6a8:	d015      	beq.n	801d6d6 <__gethex+0x396>
 801d6aa:	2b03      	cmp	r3, #3
 801d6ac:	d017      	beq.n	801d6de <__gethex+0x39e>
 801d6ae:	2b01      	cmp	r3, #1
 801d6b0:	d109      	bne.n	801d6c6 <__gethex+0x386>
 801d6b2:	f01a 0f02 	tst.w	sl, #2
 801d6b6:	d006      	beq.n	801d6c6 <__gethex+0x386>
 801d6b8:	f8d9 0000 	ldr.w	r0, [r9]
 801d6bc:	ea4a 0a00 	orr.w	sl, sl, r0
 801d6c0:	f01a 0f01 	tst.w	sl, #1
 801d6c4:	d10e      	bne.n	801d6e4 <__gethex+0x3a4>
 801d6c6:	f047 0710 	orr.w	r7, r7, #16
 801d6ca:	e033      	b.n	801d734 <__gethex+0x3f4>
 801d6cc:	f04f 0a01 	mov.w	sl, #1
 801d6d0:	e7d0      	b.n	801d674 <__gethex+0x334>
 801d6d2:	2701      	movs	r7, #1
 801d6d4:	e7e2      	b.n	801d69c <__gethex+0x35c>
 801d6d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d6d8:	f1c3 0301 	rsb	r3, r3, #1
 801d6dc:	9315      	str	r3, [sp, #84]	; 0x54
 801d6de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d6e0:	2b00      	cmp	r3, #0
 801d6e2:	d0f0      	beq.n	801d6c6 <__gethex+0x386>
 801d6e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801d6e8:	f104 0314 	add.w	r3, r4, #20
 801d6ec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801d6f0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801d6f4:	f04f 0c00 	mov.w	ip, #0
 801d6f8:	4618      	mov	r0, r3
 801d6fa:	f853 2b04 	ldr.w	r2, [r3], #4
 801d6fe:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801d702:	d01c      	beq.n	801d73e <__gethex+0x3fe>
 801d704:	3201      	adds	r2, #1
 801d706:	6002      	str	r2, [r0, #0]
 801d708:	2f02      	cmp	r7, #2
 801d70a:	f104 0314 	add.w	r3, r4, #20
 801d70e:	d13f      	bne.n	801d790 <__gethex+0x450>
 801d710:	f8d8 2000 	ldr.w	r2, [r8]
 801d714:	3a01      	subs	r2, #1
 801d716:	42b2      	cmp	r2, r6
 801d718:	d10a      	bne.n	801d730 <__gethex+0x3f0>
 801d71a:	1171      	asrs	r1, r6, #5
 801d71c:	2201      	movs	r2, #1
 801d71e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d722:	f006 061f 	and.w	r6, r6, #31
 801d726:	fa02 f606 	lsl.w	r6, r2, r6
 801d72a:	421e      	tst	r6, r3
 801d72c:	bf18      	it	ne
 801d72e:	4617      	movne	r7, r2
 801d730:	f047 0720 	orr.w	r7, r7, #32
 801d734:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d736:	601c      	str	r4, [r3, #0]
 801d738:	9b04      	ldr	r3, [sp, #16]
 801d73a:	601d      	str	r5, [r3, #0]
 801d73c:	e695      	b.n	801d46a <__gethex+0x12a>
 801d73e:	4299      	cmp	r1, r3
 801d740:	f843 cc04 	str.w	ip, [r3, #-4]
 801d744:	d8d8      	bhi.n	801d6f8 <__gethex+0x3b8>
 801d746:	68a3      	ldr	r3, [r4, #8]
 801d748:	459b      	cmp	fp, r3
 801d74a:	db19      	blt.n	801d780 <__gethex+0x440>
 801d74c:	6861      	ldr	r1, [r4, #4]
 801d74e:	ee18 0a10 	vmov	r0, s16
 801d752:	3101      	adds	r1, #1
 801d754:	f000 f930 	bl	801d9b8 <_Balloc>
 801d758:	4681      	mov	r9, r0
 801d75a:	b918      	cbnz	r0, 801d764 <__gethex+0x424>
 801d75c:	4b1a      	ldr	r3, [pc, #104]	; (801d7c8 <__gethex+0x488>)
 801d75e:	4602      	mov	r2, r0
 801d760:	2184      	movs	r1, #132	; 0x84
 801d762:	e6a8      	b.n	801d4b6 <__gethex+0x176>
 801d764:	6922      	ldr	r2, [r4, #16]
 801d766:	3202      	adds	r2, #2
 801d768:	f104 010c 	add.w	r1, r4, #12
 801d76c:	0092      	lsls	r2, r2, #2
 801d76e:	300c      	adds	r0, #12
 801d770:	f7fc ffce 	bl	801a710 <memcpy>
 801d774:	4621      	mov	r1, r4
 801d776:	ee18 0a10 	vmov	r0, s16
 801d77a:	f000 f95d 	bl	801da38 <_Bfree>
 801d77e:	464c      	mov	r4, r9
 801d780:	6923      	ldr	r3, [r4, #16]
 801d782:	1c5a      	adds	r2, r3, #1
 801d784:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d788:	6122      	str	r2, [r4, #16]
 801d78a:	2201      	movs	r2, #1
 801d78c:	615a      	str	r2, [r3, #20]
 801d78e:	e7bb      	b.n	801d708 <__gethex+0x3c8>
 801d790:	6922      	ldr	r2, [r4, #16]
 801d792:	455a      	cmp	r2, fp
 801d794:	dd0b      	ble.n	801d7ae <__gethex+0x46e>
 801d796:	2101      	movs	r1, #1
 801d798:	4620      	mov	r0, r4
 801d79a:	f7ff fd69 	bl	801d270 <rshift>
 801d79e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d7a2:	3501      	adds	r5, #1
 801d7a4:	42ab      	cmp	r3, r5
 801d7a6:	f6ff aed0 	blt.w	801d54a <__gethex+0x20a>
 801d7aa:	2701      	movs	r7, #1
 801d7ac:	e7c0      	b.n	801d730 <__gethex+0x3f0>
 801d7ae:	f016 061f 	ands.w	r6, r6, #31
 801d7b2:	d0fa      	beq.n	801d7aa <__gethex+0x46a>
 801d7b4:	449a      	add	sl, r3
 801d7b6:	f1c6 0620 	rsb	r6, r6, #32
 801d7ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801d7be:	f000 f9f1 	bl	801dba4 <__hi0bits>
 801d7c2:	42b0      	cmp	r0, r6
 801d7c4:	dbe7      	blt.n	801d796 <__gethex+0x456>
 801d7c6:	e7f0      	b.n	801d7aa <__gethex+0x46a>
 801d7c8:	08020e24 	.word	0x08020e24

0801d7cc <L_shift>:
 801d7cc:	f1c2 0208 	rsb	r2, r2, #8
 801d7d0:	0092      	lsls	r2, r2, #2
 801d7d2:	b570      	push	{r4, r5, r6, lr}
 801d7d4:	f1c2 0620 	rsb	r6, r2, #32
 801d7d8:	6843      	ldr	r3, [r0, #4]
 801d7da:	6804      	ldr	r4, [r0, #0]
 801d7dc:	fa03 f506 	lsl.w	r5, r3, r6
 801d7e0:	432c      	orrs	r4, r5
 801d7e2:	40d3      	lsrs	r3, r2
 801d7e4:	6004      	str	r4, [r0, #0]
 801d7e6:	f840 3f04 	str.w	r3, [r0, #4]!
 801d7ea:	4288      	cmp	r0, r1
 801d7ec:	d3f4      	bcc.n	801d7d8 <L_shift+0xc>
 801d7ee:	bd70      	pop	{r4, r5, r6, pc}

0801d7f0 <__match>:
 801d7f0:	b530      	push	{r4, r5, lr}
 801d7f2:	6803      	ldr	r3, [r0, #0]
 801d7f4:	3301      	adds	r3, #1
 801d7f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d7fa:	b914      	cbnz	r4, 801d802 <__match+0x12>
 801d7fc:	6003      	str	r3, [r0, #0]
 801d7fe:	2001      	movs	r0, #1
 801d800:	bd30      	pop	{r4, r5, pc}
 801d802:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d806:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801d80a:	2d19      	cmp	r5, #25
 801d80c:	bf98      	it	ls
 801d80e:	3220      	addls	r2, #32
 801d810:	42a2      	cmp	r2, r4
 801d812:	d0f0      	beq.n	801d7f6 <__match+0x6>
 801d814:	2000      	movs	r0, #0
 801d816:	e7f3      	b.n	801d800 <__match+0x10>

0801d818 <__hexnan>:
 801d818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d81c:	680b      	ldr	r3, [r1, #0]
 801d81e:	6801      	ldr	r1, [r0, #0]
 801d820:	115e      	asrs	r6, r3, #5
 801d822:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801d826:	f013 031f 	ands.w	r3, r3, #31
 801d82a:	b087      	sub	sp, #28
 801d82c:	bf18      	it	ne
 801d82e:	3604      	addne	r6, #4
 801d830:	2500      	movs	r5, #0
 801d832:	1f37      	subs	r7, r6, #4
 801d834:	4682      	mov	sl, r0
 801d836:	4690      	mov	r8, r2
 801d838:	9301      	str	r3, [sp, #4]
 801d83a:	f846 5c04 	str.w	r5, [r6, #-4]
 801d83e:	46b9      	mov	r9, r7
 801d840:	463c      	mov	r4, r7
 801d842:	9502      	str	r5, [sp, #8]
 801d844:	46ab      	mov	fp, r5
 801d846:	784a      	ldrb	r2, [r1, #1]
 801d848:	1c4b      	adds	r3, r1, #1
 801d84a:	9303      	str	r3, [sp, #12]
 801d84c:	b342      	cbz	r2, 801d8a0 <__hexnan+0x88>
 801d84e:	4610      	mov	r0, r2
 801d850:	9105      	str	r1, [sp, #20]
 801d852:	9204      	str	r2, [sp, #16]
 801d854:	f7ff fd5e 	bl	801d314 <__hexdig_fun>
 801d858:	2800      	cmp	r0, #0
 801d85a:	d14f      	bne.n	801d8fc <__hexnan+0xe4>
 801d85c:	9a04      	ldr	r2, [sp, #16]
 801d85e:	9905      	ldr	r1, [sp, #20]
 801d860:	2a20      	cmp	r2, #32
 801d862:	d818      	bhi.n	801d896 <__hexnan+0x7e>
 801d864:	9b02      	ldr	r3, [sp, #8]
 801d866:	459b      	cmp	fp, r3
 801d868:	dd13      	ble.n	801d892 <__hexnan+0x7a>
 801d86a:	454c      	cmp	r4, r9
 801d86c:	d206      	bcs.n	801d87c <__hexnan+0x64>
 801d86e:	2d07      	cmp	r5, #7
 801d870:	dc04      	bgt.n	801d87c <__hexnan+0x64>
 801d872:	462a      	mov	r2, r5
 801d874:	4649      	mov	r1, r9
 801d876:	4620      	mov	r0, r4
 801d878:	f7ff ffa8 	bl	801d7cc <L_shift>
 801d87c:	4544      	cmp	r4, r8
 801d87e:	d950      	bls.n	801d922 <__hexnan+0x10a>
 801d880:	2300      	movs	r3, #0
 801d882:	f1a4 0904 	sub.w	r9, r4, #4
 801d886:	f844 3c04 	str.w	r3, [r4, #-4]
 801d88a:	f8cd b008 	str.w	fp, [sp, #8]
 801d88e:	464c      	mov	r4, r9
 801d890:	461d      	mov	r5, r3
 801d892:	9903      	ldr	r1, [sp, #12]
 801d894:	e7d7      	b.n	801d846 <__hexnan+0x2e>
 801d896:	2a29      	cmp	r2, #41	; 0x29
 801d898:	d156      	bne.n	801d948 <__hexnan+0x130>
 801d89a:	3102      	adds	r1, #2
 801d89c:	f8ca 1000 	str.w	r1, [sl]
 801d8a0:	f1bb 0f00 	cmp.w	fp, #0
 801d8a4:	d050      	beq.n	801d948 <__hexnan+0x130>
 801d8a6:	454c      	cmp	r4, r9
 801d8a8:	d206      	bcs.n	801d8b8 <__hexnan+0xa0>
 801d8aa:	2d07      	cmp	r5, #7
 801d8ac:	dc04      	bgt.n	801d8b8 <__hexnan+0xa0>
 801d8ae:	462a      	mov	r2, r5
 801d8b0:	4649      	mov	r1, r9
 801d8b2:	4620      	mov	r0, r4
 801d8b4:	f7ff ff8a 	bl	801d7cc <L_shift>
 801d8b8:	4544      	cmp	r4, r8
 801d8ba:	d934      	bls.n	801d926 <__hexnan+0x10e>
 801d8bc:	f1a8 0204 	sub.w	r2, r8, #4
 801d8c0:	4623      	mov	r3, r4
 801d8c2:	f853 1b04 	ldr.w	r1, [r3], #4
 801d8c6:	f842 1f04 	str.w	r1, [r2, #4]!
 801d8ca:	429f      	cmp	r7, r3
 801d8cc:	d2f9      	bcs.n	801d8c2 <__hexnan+0xaa>
 801d8ce:	1b3b      	subs	r3, r7, r4
 801d8d0:	f023 0303 	bic.w	r3, r3, #3
 801d8d4:	3304      	adds	r3, #4
 801d8d6:	3401      	adds	r4, #1
 801d8d8:	3e03      	subs	r6, #3
 801d8da:	42b4      	cmp	r4, r6
 801d8dc:	bf88      	it	hi
 801d8de:	2304      	movhi	r3, #4
 801d8e0:	4443      	add	r3, r8
 801d8e2:	2200      	movs	r2, #0
 801d8e4:	f843 2b04 	str.w	r2, [r3], #4
 801d8e8:	429f      	cmp	r7, r3
 801d8ea:	d2fb      	bcs.n	801d8e4 <__hexnan+0xcc>
 801d8ec:	683b      	ldr	r3, [r7, #0]
 801d8ee:	b91b      	cbnz	r3, 801d8f8 <__hexnan+0xe0>
 801d8f0:	4547      	cmp	r7, r8
 801d8f2:	d127      	bne.n	801d944 <__hexnan+0x12c>
 801d8f4:	2301      	movs	r3, #1
 801d8f6:	603b      	str	r3, [r7, #0]
 801d8f8:	2005      	movs	r0, #5
 801d8fa:	e026      	b.n	801d94a <__hexnan+0x132>
 801d8fc:	3501      	adds	r5, #1
 801d8fe:	2d08      	cmp	r5, #8
 801d900:	f10b 0b01 	add.w	fp, fp, #1
 801d904:	dd06      	ble.n	801d914 <__hexnan+0xfc>
 801d906:	4544      	cmp	r4, r8
 801d908:	d9c3      	bls.n	801d892 <__hexnan+0x7a>
 801d90a:	2300      	movs	r3, #0
 801d90c:	f844 3c04 	str.w	r3, [r4, #-4]
 801d910:	2501      	movs	r5, #1
 801d912:	3c04      	subs	r4, #4
 801d914:	6822      	ldr	r2, [r4, #0]
 801d916:	f000 000f 	and.w	r0, r0, #15
 801d91a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801d91e:	6022      	str	r2, [r4, #0]
 801d920:	e7b7      	b.n	801d892 <__hexnan+0x7a>
 801d922:	2508      	movs	r5, #8
 801d924:	e7b5      	b.n	801d892 <__hexnan+0x7a>
 801d926:	9b01      	ldr	r3, [sp, #4]
 801d928:	2b00      	cmp	r3, #0
 801d92a:	d0df      	beq.n	801d8ec <__hexnan+0xd4>
 801d92c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d930:	f1c3 0320 	rsb	r3, r3, #32
 801d934:	fa22 f303 	lsr.w	r3, r2, r3
 801d938:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d93c:	401a      	ands	r2, r3
 801d93e:	f846 2c04 	str.w	r2, [r6, #-4]
 801d942:	e7d3      	b.n	801d8ec <__hexnan+0xd4>
 801d944:	3f04      	subs	r7, #4
 801d946:	e7d1      	b.n	801d8ec <__hexnan+0xd4>
 801d948:	2004      	movs	r0, #4
 801d94a:	b007      	add	sp, #28
 801d94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d950 <_localeconv_r>:
 801d950:	4800      	ldr	r0, [pc, #0]	; (801d954 <_localeconv_r+0x4>)
 801d952:	4770      	bx	lr
 801d954:	200001e4 	.word	0x200001e4

0801d958 <_lseek_r>:
 801d958:	b538      	push	{r3, r4, r5, lr}
 801d95a:	4d07      	ldr	r5, [pc, #28]	; (801d978 <_lseek_r+0x20>)
 801d95c:	4604      	mov	r4, r0
 801d95e:	4608      	mov	r0, r1
 801d960:	4611      	mov	r1, r2
 801d962:	2200      	movs	r2, #0
 801d964:	602a      	str	r2, [r5, #0]
 801d966:	461a      	mov	r2, r3
 801d968:	f7ee fe4a 	bl	800c600 <_lseek>
 801d96c:	1c43      	adds	r3, r0, #1
 801d96e:	d102      	bne.n	801d976 <_lseek_r+0x1e>
 801d970:	682b      	ldr	r3, [r5, #0]
 801d972:	b103      	cbz	r3, 801d976 <_lseek_r+0x1e>
 801d974:	6023      	str	r3, [r4, #0]
 801d976:	bd38      	pop	{r3, r4, r5, pc}
 801d978:	2000aab8 	.word	0x2000aab8

0801d97c <__ascii_mbtowc>:
 801d97c:	b082      	sub	sp, #8
 801d97e:	b901      	cbnz	r1, 801d982 <__ascii_mbtowc+0x6>
 801d980:	a901      	add	r1, sp, #4
 801d982:	b142      	cbz	r2, 801d996 <__ascii_mbtowc+0x1a>
 801d984:	b14b      	cbz	r3, 801d99a <__ascii_mbtowc+0x1e>
 801d986:	7813      	ldrb	r3, [r2, #0]
 801d988:	600b      	str	r3, [r1, #0]
 801d98a:	7812      	ldrb	r2, [r2, #0]
 801d98c:	1e10      	subs	r0, r2, #0
 801d98e:	bf18      	it	ne
 801d990:	2001      	movne	r0, #1
 801d992:	b002      	add	sp, #8
 801d994:	4770      	bx	lr
 801d996:	4610      	mov	r0, r2
 801d998:	e7fb      	b.n	801d992 <__ascii_mbtowc+0x16>
 801d99a:	f06f 0001 	mvn.w	r0, #1
 801d99e:	e7f8      	b.n	801d992 <__ascii_mbtowc+0x16>

0801d9a0 <__malloc_lock>:
 801d9a0:	4801      	ldr	r0, [pc, #4]	; (801d9a8 <__malloc_lock+0x8>)
 801d9a2:	f001 b885 	b.w	801eab0 <__retarget_lock_acquire_recursive>
 801d9a6:	bf00      	nop
 801d9a8:	2000aac0 	.word	0x2000aac0

0801d9ac <__malloc_unlock>:
 801d9ac:	4801      	ldr	r0, [pc, #4]	; (801d9b4 <__malloc_unlock+0x8>)
 801d9ae:	f001 b880 	b.w	801eab2 <__retarget_lock_release_recursive>
 801d9b2:	bf00      	nop
 801d9b4:	2000aac0 	.word	0x2000aac0

0801d9b8 <_Balloc>:
 801d9b8:	b570      	push	{r4, r5, r6, lr}
 801d9ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d9bc:	4604      	mov	r4, r0
 801d9be:	460d      	mov	r5, r1
 801d9c0:	b976      	cbnz	r6, 801d9e0 <_Balloc+0x28>
 801d9c2:	2010      	movs	r0, #16
 801d9c4:	f7fc fe9c 	bl	801a700 <malloc>
 801d9c8:	4602      	mov	r2, r0
 801d9ca:	6260      	str	r0, [r4, #36]	; 0x24
 801d9cc:	b920      	cbnz	r0, 801d9d8 <_Balloc+0x20>
 801d9ce:	4b18      	ldr	r3, [pc, #96]	; (801da30 <_Balloc+0x78>)
 801d9d0:	4818      	ldr	r0, [pc, #96]	; (801da34 <_Balloc+0x7c>)
 801d9d2:	2166      	movs	r1, #102	; 0x66
 801d9d4:	f000 fe84 	bl	801e6e0 <__assert_func>
 801d9d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d9dc:	6006      	str	r6, [r0, #0]
 801d9de:	60c6      	str	r6, [r0, #12]
 801d9e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801d9e2:	68f3      	ldr	r3, [r6, #12]
 801d9e4:	b183      	cbz	r3, 801da08 <_Balloc+0x50>
 801d9e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d9e8:	68db      	ldr	r3, [r3, #12]
 801d9ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d9ee:	b9b8      	cbnz	r0, 801da20 <_Balloc+0x68>
 801d9f0:	2101      	movs	r1, #1
 801d9f2:	fa01 f605 	lsl.w	r6, r1, r5
 801d9f6:	1d72      	adds	r2, r6, #5
 801d9f8:	0092      	lsls	r2, r2, #2
 801d9fa:	4620      	mov	r0, r4
 801d9fc:	f000 fc97 	bl	801e32e <_calloc_r>
 801da00:	b160      	cbz	r0, 801da1c <_Balloc+0x64>
 801da02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801da06:	e00e      	b.n	801da26 <_Balloc+0x6e>
 801da08:	2221      	movs	r2, #33	; 0x21
 801da0a:	2104      	movs	r1, #4
 801da0c:	4620      	mov	r0, r4
 801da0e:	f000 fc8e 	bl	801e32e <_calloc_r>
 801da12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801da14:	60f0      	str	r0, [r6, #12]
 801da16:	68db      	ldr	r3, [r3, #12]
 801da18:	2b00      	cmp	r3, #0
 801da1a:	d1e4      	bne.n	801d9e6 <_Balloc+0x2e>
 801da1c:	2000      	movs	r0, #0
 801da1e:	bd70      	pop	{r4, r5, r6, pc}
 801da20:	6802      	ldr	r2, [r0, #0]
 801da22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801da26:	2300      	movs	r3, #0
 801da28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801da2c:	e7f7      	b.n	801da1e <_Balloc+0x66>
 801da2e:	bf00      	nop
 801da30:	08020dae 	.word	0x08020dae
 801da34:	08020eb4 	.word	0x08020eb4

0801da38 <_Bfree>:
 801da38:	b570      	push	{r4, r5, r6, lr}
 801da3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801da3c:	4605      	mov	r5, r0
 801da3e:	460c      	mov	r4, r1
 801da40:	b976      	cbnz	r6, 801da60 <_Bfree+0x28>
 801da42:	2010      	movs	r0, #16
 801da44:	f7fc fe5c 	bl	801a700 <malloc>
 801da48:	4602      	mov	r2, r0
 801da4a:	6268      	str	r0, [r5, #36]	; 0x24
 801da4c:	b920      	cbnz	r0, 801da58 <_Bfree+0x20>
 801da4e:	4b09      	ldr	r3, [pc, #36]	; (801da74 <_Bfree+0x3c>)
 801da50:	4809      	ldr	r0, [pc, #36]	; (801da78 <_Bfree+0x40>)
 801da52:	218a      	movs	r1, #138	; 0x8a
 801da54:	f000 fe44 	bl	801e6e0 <__assert_func>
 801da58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801da5c:	6006      	str	r6, [r0, #0]
 801da5e:	60c6      	str	r6, [r0, #12]
 801da60:	b13c      	cbz	r4, 801da72 <_Bfree+0x3a>
 801da62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801da64:	6862      	ldr	r2, [r4, #4]
 801da66:	68db      	ldr	r3, [r3, #12]
 801da68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801da6c:	6021      	str	r1, [r4, #0]
 801da6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801da72:	bd70      	pop	{r4, r5, r6, pc}
 801da74:	08020dae 	.word	0x08020dae
 801da78:	08020eb4 	.word	0x08020eb4

0801da7c <__multadd>:
 801da7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da80:	690e      	ldr	r6, [r1, #16]
 801da82:	4607      	mov	r7, r0
 801da84:	4698      	mov	r8, r3
 801da86:	460c      	mov	r4, r1
 801da88:	f101 0014 	add.w	r0, r1, #20
 801da8c:	2300      	movs	r3, #0
 801da8e:	6805      	ldr	r5, [r0, #0]
 801da90:	b2a9      	uxth	r1, r5
 801da92:	fb02 8101 	mla	r1, r2, r1, r8
 801da96:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801da9a:	0c2d      	lsrs	r5, r5, #16
 801da9c:	fb02 c505 	mla	r5, r2, r5, ip
 801daa0:	b289      	uxth	r1, r1
 801daa2:	3301      	adds	r3, #1
 801daa4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801daa8:	429e      	cmp	r6, r3
 801daaa:	f840 1b04 	str.w	r1, [r0], #4
 801daae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801dab2:	dcec      	bgt.n	801da8e <__multadd+0x12>
 801dab4:	f1b8 0f00 	cmp.w	r8, #0
 801dab8:	d022      	beq.n	801db00 <__multadd+0x84>
 801daba:	68a3      	ldr	r3, [r4, #8]
 801dabc:	42b3      	cmp	r3, r6
 801dabe:	dc19      	bgt.n	801daf4 <__multadd+0x78>
 801dac0:	6861      	ldr	r1, [r4, #4]
 801dac2:	4638      	mov	r0, r7
 801dac4:	3101      	adds	r1, #1
 801dac6:	f7ff ff77 	bl	801d9b8 <_Balloc>
 801daca:	4605      	mov	r5, r0
 801dacc:	b928      	cbnz	r0, 801dada <__multadd+0x5e>
 801dace:	4602      	mov	r2, r0
 801dad0:	4b0d      	ldr	r3, [pc, #52]	; (801db08 <__multadd+0x8c>)
 801dad2:	480e      	ldr	r0, [pc, #56]	; (801db0c <__multadd+0x90>)
 801dad4:	21b5      	movs	r1, #181	; 0xb5
 801dad6:	f000 fe03 	bl	801e6e0 <__assert_func>
 801dada:	6922      	ldr	r2, [r4, #16]
 801dadc:	3202      	adds	r2, #2
 801dade:	f104 010c 	add.w	r1, r4, #12
 801dae2:	0092      	lsls	r2, r2, #2
 801dae4:	300c      	adds	r0, #12
 801dae6:	f7fc fe13 	bl	801a710 <memcpy>
 801daea:	4621      	mov	r1, r4
 801daec:	4638      	mov	r0, r7
 801daee:	f7ff ffa3 	bl	801da38 <_Bfree>
 801daf2:	462c      	mov	r4, r5
 801daf4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801daf8:	3601      	adds	r6, #1
 801dafa:	f8c3 8014 	str.w	r8, [r3, #20]
 801dafe:	6126      	str	r6, [r4, #16]
 801db00:	4620      	mov	r0, r4
 801db02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db06:	bf00      	nop
 801db08:	08020e24 	.word	0x08020e24
 801db0c:	08020eb4 	.word	0x08020eb4

0801db10 <__s2b>:
 801db10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801db14:	460c      	mov	r4, r1
 801db16:	4615      	mov	r5, r2
 801db18:	461f      	mov	r7, r3
 801db1a:	2209      	movs	r2, #9
 801db1c:	3308      	adds	r3, #8
 801db1e:	4606      	mov	r6, r0
 801db20:	fb93 f3f2 	sdiv	r3, r3, r2
 801db24:	2100      	movs	r1, #0
 801db26:	2201      	movs	r2, #1
 801db28:	429a      	cmp	r2, r3
 801db2a:	db09      	blt.n	801db40 <__s2b+0x30>
 801db2c:	4630      	mov	r0, r6
 801db2e:	f7ff ff43 	bl	801d9b8 <_Balloc>
 801db32:	b940      	cbnz	r0, 801db46 <__s2b+0x36>
 801db34:	4602      	mov	r2, r0
 801db36:	4b19      	ldr	r3, [pc, #100]	; (801db9c <__s2b+0x8c>)
 801db38:	4819      	ldr	r0, [pc, #100]	; (801dba0 <__s2b+0x90>)
 801db3a:	21ce      	movs	r1, #206	; 0xce
 801db3c:	f000 fdd0 	bl	801e6e0 <__assert_func>
 801db40:	0052      	lsls	r2, r2, #1
 801db42:	3101      	adds	r1, #1
 801db44:	e7f0      	b.n	801db28 <__s2b+0x18>
 801db46:	9b08      	ldr	r3, [sp, #32]
 801db48:	6143      	str	r3, [r0, #20]
 801db4a:	2d09      	cmp	r5, #9
 801db4c:	f04f 0301 	mov.w	r3, #1
 801db50:	6103      	str	r3, [r0, #16]
 801db52:	dd16      	ble.n	801db82 <__s2b+0x72>
 801db54:	f104 0909 	add.w	r9, r4, #9
 801db58:	46c8      	mov	r8, r9
 801db5a:	442c      	add	r4, r5
 801db5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801db60:	4601      	mov	r1, r0
 801db62:	3b30      	subs	r3, #48	; 0x30
 801db64:	220a      	movs	r2, #10
 801db66:	4630      	mov	r0, r6
 801db68:	f7ff ff88 	bl	801da7c <__multadd>
 801db6c:	45a0      	cmp	r8, r4
 801db6e:	d1f5      	bne.n	801db5c <__s2b+0x4c>
 801db70:	f1a5 0408 	sub.w	r4, r5, #8
 801db74:	444c      	add	r4, r9
 801db76:	1b2d      	subs	r5, r5, r4
 801db78:	1963      	adds	r3, r4, r5
 801db7a:	42bb      	cmp	r3, r7
 801db7c:	db04      	blt.n	801db88 <__s2b+0x78>
 801db7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801db82:	340a      	adds	r4, #10
 801db84:	2509      	movs	r5, #9
 801db86:	e7f6      	b.n	801db76 <__s2b+0x66>
 801db88:	f814 3b01 	ldrb.w	r3, [r4], #1
 801db8c:	4601      	mov	r1, r0
 801db8e:	3b30      	subs	r3, #48	; 0x30
 801db90:	220a      	movs	r2, #10
 801db92:	4630      	mov	r0, r6
 801db94:	f7ff ff72 	bl	801da7c <__multadd>
 801db98:	e7ee      	b.n	801db78 <__s2b+0x68>
 801db9a:	bf00      	nop
 801db9c:	08020e24 	.word	0x08020e24
 801dba0:	08020eb4 	.word	0x08020eb4

0801dba4 <__hi0bits>:
 801dba4:	0c03      	lsrs	r3, r0, #16
 801dba6:	041b      	lsls	r3, r3, #16
 801dba8:	b9d3      	cbnz	r3, 801dbe0 <__hi0bits+0x3c>
 801dbaa:	0400      	lsls	r0, r0, #16
 801dbac:	2310      	movs	r3, #16
 801dbae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801dbb2:	bf04      	itt	eq
 801dbb4:	0200      	lsleq	r0, r0, #8
 801dbb6:	3308      	addeq	r3, #8
 801dbb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801dbbc:	bf04      	itt	eq
 801dbbe:	0100      	lsleq	r0, r0, #4
 801dbc0:	3304      	addeq	r3, #4
 801dbc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801dbc6:	bf04      	itt	eq
 801dbc8:	0080      	lsleq	r0, r0, #2
 801dbca:	3302      	addeq	r3, #2
 801dbcc:	2800      	cmp	r0, #0
 801dbce:	db05      	blt.n	801dbdc <__hi0bits+0x38>
 801dbd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801dbd4:	f103 0301 	add.w	r3, r3, #1
 801dbd8:	bf08      	it	eq
 801dbda:	2320      	moveq	r3, #32
 801dbdc:	4618      	mov	r0, r3
 801dbde:	4770      	bx	lr
 801dbe0:	2300      	movs	r3, #0
 801dbe2:	e7e4      	b.n	801dbae <__hi0bits+0xa>

0801dbe4 <__lo0bits>:
 801dbe4:	6803      	ldr	r3, [r0, #0]
 801dbe6:	f013 0207 	ands.w	r2, r3, #7
 801dbea:	4601      	mov	r1, r0
 801dbec:	d00b      	beq.n	801dc06 <__lo0bits+0x22>
 801dbee:	07da      	lsls	r2, r3, #31
 801dbf0:	d424      	bmi.n	801dc3c <__lo0bits+0x58>
 801dbf2:	0798      	lsls	r0, r3, #30
 801dbf4:	bf49      	itett	mi
 801dbf6:	085b      	lsrmi	r3, r3, #1
 801dbf8:	089b      	lsrpl	r3, r3, #2
 801dbfa:	2001      	movmi	r0, #1
 801dbfc:	600b      	strmi	r3, [r1, #0]
 801dbfe:	bf5c      	itt	pl
 801dc00:	600b      	strpl	r3, [r1, #0]
 801dc02:	2002      	movpl	r0, #2
 801dc04:	4770      	bx	lr
 801dc06:	b298      	uxth	r0, r3
 801dc08:	b9b0      	cbnz	r0, 801dc38 <__lo0bits+0x54>
 801dc0a:	0c1b      	lsrs	r3, r3, #16
 801dc0c:	2010      	movs	r0, #16
 801dc0e:	f013 0fff 	tst.w	r3, #255	; 0xff
 801dc12:	bf04      	itt	eq
 801dc14:	0a1b      	lsreq	r3, r3, #8
 801dc16:	3008      	addeq	r0, #8
 801dc18:	071a      	lsls	r2, r3, #28
 801dc1a:	bf04      	itt	eq
 801dc1c:	091b      	lsreq	r3, r3, #4
 801dc1e:	3004      	addeq	r0, #4
 801dc20:	079a      	lsls	r2, r3, #30
 801dc22:	bf04      	itt	eq
 801dc24:	089b      	lsreq	r3, r3, #2
 801dc26:	3002      	addeq	r0, #2
 801dc28:	07da      	lsls	r2, r3, #31
 801dc2a:	d403      	bmi.n	801dc34 <__lo0bits+0x50>
 801dc2c:	085b      	lsrs	r3, r3, #1
 801dc2e:	f100 0001 	add.w	r0, r0, #1
 801dc32:	d005      	beq.n	801dc40 <__lo0bits+0x5c>
 801dc34:	600b      	str	r3, [r1, #0]
 801dc36:	4770      	bx	lr
 801dc38:	4610      	mov	r0, r2
 801dc3a:	e7e8      	b.n	801dc0e <__lo0bits+0x2a>
 801dc3c:	2000      	movs	r0, #0
 801dc3e:	4770      	bx	lr
 801dc40:	2020      	movs	r0, #32
 801dc42:	4770      	bx	lr

0801dc44 <__i2b>:
 801dc44:	b510      	push	{r4, lr}
 801dc46:	460c      	mov	r4, r1
 801dc48:	2101      	movs	r1, #1
 801dc4a:	f7ff feb5 	bl	801d9b8 <_Balloc>
 801dc4e:	4602      	mov	r2, r0
 801dc50:	b928      	cbnz	r0, 801dc5e <__i2b+0x1a>
 801dc52:	4b05      	ldr	r3, [pc, #20]	; (801dc68 <__i2b+0x24>)
 801dc54:	4805      	ldr	r0, [pc, #20]	; (801dc6c <__i2b+0x28>)
 801dc56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801dc5a:	f000 fd41 	bl	801e6e0 <__assert_func>
 801dc5e:	2301      	movs	r3, #1
 801dc60:	6144      	str	r4, [r0, #20]
 801dc62:	6103      	str	r3, [r0, #16]
 801dc64:	bd10      	pop	{r4, pc}
 801dc66:	bf00      	nop
 801dc68:	08020e24 	.word	0x08020e24
 801dc6c:	08020eb4 	.word	0x08020eb4

0801dc70 <__multiply>:
 801dc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc74:	4614      	mov	r4, r2
 801dc76:	690a      	ldr	r2, [r1, #16]
 801dc78:	6923      	ldr	r3, [r4, #16]
 801dc7a:	429a      	cmp	r2, r3
 801dc7c:	bfb8      	it	lt
 801dc7e:	460b      	movlt	r3, r1
 801dc80:	460d      	mov	r5, r1
 801dc82:	bfbc      	itt	lt
 801dc84:	4625      	movlt	r5, r4
 801dc86:	461c      	movlt	r4, r3
 801dc88:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801dc8c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801dc90:	68ab      	ldr	r3, [r5, #8]
 801dc92:	6869      	ldr	r1, [r5, #4]
 801dc94:	eb0a 0709 	add.w	r7, sl, r9
 801dc98:	42bb      	cmp	r3, r7
 801dc9a:	b085      	sub	sp, #20
 801dc9c:	bfb8      	it	lt
 801dc9e:	3101      	addlt	r1, #1
 801dca0:	f7ff fe8a 	bl	801d9b8 <_Balloc>
 801dca4:	b930      	cbnz	r0, 801dcb4 <__multiply+0x44>
 801dca6:	4602      	mov	r2, r0
 801dca8:	4b42      	ldr	r3, [pc, #264]	; (801ddb4 <__multiply+0x144>)
 801dcaa:	4843      	ldr	r0, [pc, #268]	; (801ddb8 <__multiply+0x148>)
 801dcac:	f240 115d 	movw	r1, #349	; 0x15d
 801dcb0:	f000 fd16 	bl	801e6e0 <__assert_func>
 801dcb4:	f100 0614 	add.w	r6, r0, #20
 801dcb8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801dcbc:	4633      	mov	r3, r6
 801dcbe:	2200      	movs	r2, #0
 801dcc0:	4543      	cmp	r3, r8
 801dcc2:	d31e      	bcc.n	801dd02 <__multiply+0x92>
 801dcc4:	f105 0c14 	add.w	ip, r5, #20
 801dcc8:	f104 0314 	add.w	r3, r4, #20
 801dccc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801dcd0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801dcd4:	9202      	str	r2, [sp, #8]
 801dcd6:	ebac 0205 	sub.w	r2, ip, r5
 801dcda:	3a15      	subs	r2, #21
 801dcdc:	f022 0203 	bic.w	r2, r2, #3
 801dce0:	3204      	adds	r2, #4
 801dce2:	f105 0115 	add.w	r1, r5, #21
 801dce6:	458c      	cmp	ip, r1
 801dce8:	bf38      	it	cc
 801dcea:	2204      	movcc	r2, #4
 801dcec:	9201      	str	r2, [sp, #4]
 801dcee:	9a02      	ldr	r2, [sp, #8]
 801dcf0:	9303      	str	r3, [sp, #12]
 801dcf2:	429a      	cmp	r2, r3
 801dcf4:	d808      	bhi.n	801dd08 <__multiply+0x98>
 801dcf6:	2f00      	cmp	r7, #0
 801dcf8:	dc55      	bgt.n	801dda6 <__multiply+0x136>
 801dcfa:	6107      	str	r7, [r0, #16]
 801dcfc:	b005      	add	sp, #20
 801dcfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd02:	f843 2b04 	str.w	r2, [r3], #4
 801dd06:	e7db      	b.n	801dcc0 <__multiply+0x50>
 801dd08:	f8b3 a000 	ldrh.w	sl, [r3]
 801dd0c:	f1ba 0f00 	cmp.w	sl, #0
 801dd10:	d020      	beq.n	801dd54 <__multiply+0xe4>
 801dd12:	f105 0e14 	add.w	lr, r5, #20
 801dd16:	46b1      	mov	r9, r6
 801dd18:	2200      	movs	r2, #0
 801dd1a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801dd1e:	f8d9 b000 	ldr.w	fp, [r9]
 801dd22:	b2a1      	uxth	r1, r4
 801dd24:	fa1f fb8b 	uxth.w	fp, fp
 801dd28:	fb0a b101 	mla	r1, sl, r1, fp
 801dd2c:	4411      	add	r1, r2
 801dd2e:	f8d9 2000 	ldr.w	r2, [r9]
 801dd32:	0c24      	lsrs	r4, r4, #16
 801dd34:	0c12      	lsrs	r2, r2, #16
 801dd36:	fb0a 2404 	mla	r4, sl, r4, r2
 801dd3a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801dd3e:	b289      	uxth	r1, r1
 801dd40:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801dd44:	45f4      	cmp	ip, lr
 801dd46:	f849 1b04 	str.w	r1, [r9], #4
 801dd4a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801dd4e:	d8e4      	bhi.n	801dd1a <__multiply+0xaa>
 801dd50:	9901      	ldr	r1, [sp, #4]
 801dd52:	5072      	str	r2, [r6, r1]
 801dd54:	9a03      	ldr	r2, [sp, #12]
 801dd56:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801dd5a:	3304      	adds	r3, #4
 801dd5c:	f1b9 0f00 	cmp.w	r9, #0
 801dd60:	d01f      	beq.n	801dda2 <__multiply+0x132>
 801dd62:	6834      	ldr	r4, [r6, #0]
 801dd64:	f105 0114 	add.w	r1, r5, #20
 801dd68:	46b6      	mov	lr, r6
 801dd6a:	f04f 0a00 	mov.w	sl, #0
 801dd6e:	880a      	ldrh	r2, [r1, #0]
 801dd70:	f8be b002 	ldrh.w	fp, [lr, #2]
 801dd74:	fb09 b202 	mla	r2, r9, r2, fp
 801dd78:	4492      	add	sl, r2
 801dd7a:	b2a4      	uxth	r4, r4
 801dd7c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801dd80:	f84e 4b04 	str.w	r4, [lr], #4
 801dd84:	f851 4b04 	ldr.w	r4, [r1], #4
 801dd88:	f8be 2000 	ldrh.w	r2, [lr]
 801dd8c:	0c24      	lsrs	r4, r4, #16
 801dd8e:	fb09 2404 	mla	r4, r9, r4, r2
 801dd92:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801dd96:	458c      	cmp	ip, r1
 801dd98:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801dd9c:	d8e7      	bhi.n	801dd6e <__multiply+0xfe>
 801dd9e:	9a01      	ldr	r2, [sp, #4]
 801dda0:	50b4      	str	r4, [r6, r2]
 801dda2:	3604      	adds	r6, #4
 801dda4:	e7a3      	b.n	801dcee <__multiply+0x7e>
 801dda6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ddaa:	2b00      	cmp	r3, #0
 801ddac:	d1a5      	bne.n	801dcfa <__multiply+0x8a>
 801ddae:	3f01      	subs	r7, #1
 801ddb0:	e7a1      	b.n	801dcf6 <__multiply+0x86>
 801ddb2:	bf00      	nop
 801ddb4:	08020e24 	.word	0x08020e24
 801ddb8:	08020eb4 	.word	0x08020eb4

0801ddbc <__pow5mult>:
 801ddbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ddc0:	4615      	mov	r5, r2
 801ddc2:	f012 0203 	ands.w	r2, r2, #3
 801ddc6:	4606      	mov	r6, r0
 801ddc8:	460f      	mov	r7, r1
 801ddca:	d007      	beq.n	801dddc <__pow5mult+0x20>
 801ddcc:	4c25      	ldr	r4, [pc, #148]	; (801de64 <__pow5mult+0xa8>)
 801ddce:	3a01      	subs	r2, #1
 801ddd0:	2300      	movs	r3, #0
 801ddd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ddd6:	f7ff fe51 	bl	801da7c <__multadd>
 801ddda:	4607      	mov	r7, r0
 801dddc:	10ad      	asrs	r5, r5, #2
 801ddde:	d03d      	beq.n	801de5c <__pow5mult+0xa0>
 801dde0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801dde2:	b97c      	cbnz	r4, 801de04 <__pow5mult+0x48>
 801dde4:	2010      	movs	r0, #16
 801dde6:	f7fc fc8b 	bl	801a700 <malloc>
 801ddea:	4602      	mov	r2, r0
 801ddec:	6270      	str	r0, [r6, #36]	; 0x24
 801ddee:	b928      	cbnz	r0, 801ddfc <__pow5mult+0x40>
 801ddf0:	4b1d      	ldr	r3, [pc, #116]	; (801de68 <__pow5mult+0xac>)
 801ddf2:	481e      	ldr	r0, [pc, #120]	; (801de6c <__pow5mult+0xb0>)
 801ddf4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801ddf8:	f000 fc72 	bl	801e6e0 <__assert_func>
 801ddfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801de00:	6004      	str	r4, [r0, #0]
 801de02:	60c4      	str	r4, [r0, #12]
 801de04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801de08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801de0c:	b94c      	cbnz	r4, 801de22 <__pow5mult+0x66>
 801de0e:	f240 2171 	movw	r1, #625	; 0x271
 801de12:	4630      	mov	r0, r6
 801de14:	f7ff ff16 	bl	801dc44 <__i2b>
 801de18:	2300      	movs	r3, #0
 801de1a:	f8c8 0008 	str.w	r0, [r8, #8]
 801de1e:	4604      	mov	r4, r0
 801de20:	6003      	str	r3, [r0, #0]
 801de22:	f04f 0900 	mov.w	r9, #0
 801de26:	07eb      	lsls	r3, r5, #31
 801de28:	d50a      	bpl.n	801de40 <__pow5mult+0x84>
 801de2a:	4639      	mov	r1, r7
 801de2c:	4622      	mov	r2, r4
 801de2e:	4630      	mov	r0, r6
 801de30:	f7ff ff1e 	bl	801dc70 <__multiply>
 801de34:	4639      	mov	r1, r7
 801de36:	4680      	mov	r8, r0
 801de38:	4630      	mov	r0, r6
 801de3a:	f7ff fdfd 	bl	801da38 <_Bfree>
 801de3e:	4647      	mov	r7, r8
 801de40:	106d      	asrs	r5, r5, #1
 801de42:	d00b      	beq.n	801de5c <__pow5mult+0xa0>
 801de44:	6820      	ldr	r0, [r4, #0]
 801de46:	b938      	cbnz	r0, 801de58 <__pow5mult+0x9c>
 801de48:	4622      	mov	r2, r4
 801de4a:	4621      	mov	r1, r4
 801de4c:	4630      	mov	r0, r6
 801de4e:	f7ff ff0f 	bl	801dc70 <__multiply>
 801de52:	6020      	str	r0, [r4, #0]
 801de54:	f8c0 9000 	str.w	r9, [r0]
 801de58:	4604      	mov	r4, r0
 801de5a:	e7e4      	b.n	801de26 <__pow5mult+0x6a>
 801de5c:	4638      	mov	r0, r7
 801de5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801de62:	bf00      	nop
 801de64:	08021008 	.word	0x08021008
 801de68:	08020dae 	.word	0x08020dae
 801de6c:	08020eb4 	.word	0x08020eb4

0801de70 <__lshift>:
 801de70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801de74:	460c      	mov	r4, r1
 801de76:	6849      	ldr	r1, [r1, #4]
 801de78:	6923      	ldr	r3, [r4, #16]
 801de7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801de7e:	68a3      	ldr	r3, [r4, #8]
 801de80:	4607      	mov	r7, r0
 801de82:	4691      	mov	r9, r2
 801de84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801de88:	f108 0601 	add.w	r6, r8, #1
 801de8c:	42b3      	cmp	r3, r6
 801de8e:	db0b      	blt.n	801dea8 <__lshift+0x38>
 801de90:	4638      	mov	r0, r7
 801de92:	f7ff fd91 	bl	801d9b8 <_Balloc>
 801de96:	4605      	mov	r5, r0
 801de98:	b948      	cbnz	r0, 801deae <__lshift+0x3e>
 801de9a:	4602      	mov	r2, r0
 801de9c:	4b28      	ldr	r3, [pc, #160]	; (801df40 <__lshift+0xd0>)
 801de9e:	4829      	ldr	r0, [pc, #164]	; (801df44 <__lshift+0xd4>)
 801dea0:	f240 11d9 	movw	r1, #473	; 0x1d9
 801dea4:	f000 fc1c 	bl	801e6e0 <__assert_func>
 801dea8:	3101      	adds	r1, #1
 801deaa:	005b      	lsls	r3, r3, #1
 801deac:	e7ee      	b.n	801de8c <__lshift+0x1c>
 801deae:	2300      	movs	r3, #0
 801deb0:	f100 0114 	add.w	r1, r0, #20
 801deb4:	f100 0210 	add.w	r2, r0, #16
 801deb8:	4618      	mov	r0, r3
 801deba:	4553      	cmp	r3, sl
 801debc:	db33      	blt.n	801df26 <__lshift+0xb6>
 801debe:	6920      	ldr	r0, [r4, #16]
 801dec0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801dec4:	f104 0314 	add.w	r3, r4, #20
 801dec8:	f019 091f 	ands.w	r9, r9, #31
 801decc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ded0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801ded4:	d02b      	beq.n	801df2e <__lshift+0xbe>
 801ded6:	f1c9 0e20 	rsb	lr, r9, #32
 801deda:	468a      	mov	sl, r1
 801dedc:	2200      	movs	r2, #0
 801dede:	6818      	ldr	r0, [r3, #0]
 801dee0:	fa00 f009 	lsl.w	r0, r0, r9
 801dee4:	4302      	orrs	r2, r0
 801dee6:	f84a 2b04 	str.w	r2, [sl], #4
 801deea:	f853 2b04 	ldr.w	r2, [r3], #4
 801deee:	459c      	cmp	ip, r3
 801def0:	fa22 f20e 	lsr.w	r2, r2, lr
 801def4:	d8f3      	bhi.n	801dede <__lshift+0x6e>
 801def6:	ebac 0304 	sub.w	r3, ip, r4
 801defa:	3b15      	subs	r3, #21
 801defc:	f023 0303 	bic.w	r3, r3, #3
 801df00:	3304      	adds	r3, #4
 801df02:	f104 0015 	add.w	r0, r4, #21
 801df06:	4584      	cmp	ip, r0
 801df08:	bf38      	it	cc
 801df0a:	2304      	movcc	r3, #4
 801df0c:	50ca      	str	r2, [r1, r3]
 801df0e:	b10a      	cbz	r2, 801df14 <__lshift+0xa4>
 801df10:	f108 0602 	add.w	r6, r8, #2
 801df14:	3e01      	subs	r6, #1
 801df16:	4638      	mov	r0, r7
 801df18:	612e      	str	r6, [r5, #16]
 801df1a:	4621      	mov	r1, r4
 801df1c:	f7ff fd8c 	bl	801da38 <_Bfree>
 801df20:	4628      	mov	r0, r5
 801df22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801df26:	f842 0f04 	str.w	r0, [r2, #4]!
 801df2a:	3301      	adds	r3, #1
 801df2c:	e7c5      	b.n	801deba <__lshift+0x4a>
 801df2e:	3904      	subs	r1, #4
 801df30:	f853 2b04 	ldr.w	r2, [r3], #4
 801df34:	f841 2f04 	str.w	r2, [r1, #4]!
 801df38:	459c      	cmp	ip, r3
 801df3a:	d8f9      	bhi.n	801df30 <__lshift+0xc0>
 801df3c:	e7ea      	b.n	801df14 <__lshift+0xa4>
 801df3e:	bf00      	nop
 801df40:	08020e24 	.word	0x08020e24
 801df44:	08020eb4 	.word	0x08020eb4

0801df48 <__mcmp>:
 801df48:	b530      	push	{r4, r5, lr}
 801df4a:	6902      	ldr	r2, [r0, #16]
 801df4c:	690c      	ldr	r4, [r1, #16]
 801df4e:	1b12      	subs	r2, r2, r4
 801df50:	d10e      	bne.n	801df70 <__mcmp+0x28>
 801df52:	f100 0314 	add.w	r3, r0, #20
 801df56:	3114      	adds	r1, #20
 801df58:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801df5c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801df60:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801df64:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801df68:	42a5      	cmp	r5, r4
 801df6a:	d003      	beq.n	801df74 <__mcmp+0x2c>
 801df6c:	d305      	bcc.n	801df7a <__mcmp+0x32>
 801df6e:	2201      	movs	r2, #1
 801df70:	4610      	mov	r0, r2
 801df72:	bd30      	pop	{r4, r5, pc}
 801df74:	4283      	cmp	r3, r0
 801df76:	d3f3      	bcc.n	801df60 <__mcmp+0x18>
 801df78:	e7fa      	b.n	801df70 <__mcmp+0x28>
 801df7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801df7e:	e7f7      	b.n	801df70 <__mcmp+0x28>

0801df80 <__mdiff>:
 801df80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df84:	460c      	mov	r4, r1
 801df86:	4606      	mov	r6, r0
 801df88:	4611      	mov	r1, r2
 801df8a:	4620      	mov	r0, r4
 801df8c:	4617      	mov	r7, r2
 801df8e:	f7ff ffdb 	bl	801df48 <__mcmp>
 801df92:	1e05      	subs	r5, r0, #0
 801df94:	d110      	bne.n	801dfb8 <__mdiff+0x38>
 801df96:	4629      	mov	r1, r5
 801df98:	4630      	mov	r0, r6
 801df9a:	f7ff fd0d 	bl	801d9b8 <_Balloc>
 801df9e:	b930      	cbnz	r0, 801dfae <__mdiff+0x2e>
 801dfa0:	4b39      	ldr	r3, [pc, #228]	; (801e088 <__mdiff+0x108>)
 801dfa2:	4602      	mov	r2, r0
 801dfa4:	f240 2132 	movw	r1, #562	; 0x232
 801dfa8:	4838      	ldr	r0, [pc, #224]	; (801e08c <__mdiff+0x10c>)
 801dfaa:	f000 fb99 	bl	801e6e0 <__assert_func>
 801dfae:	2301      	movs	r3, #1
 801dfb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801dfb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfb8:	bfa4      	itt	ge
 801dfba:	463b      	movge	r3, r7
 801dfbc:	4627      	movge	r7, r4
 801dfbe:	4630      	mov	r0, r6
 801dfc0:	6879      	ldr	r1, [r7, #4]
 801dfc2:	bfa6      	itte	ge
 801dfc4:	461c      	movge	r4, r3
 801dfc6:	2500      	movge	r5, #0
 801dfc8:	2501      	movlt	r5, #1
 801dfca:	f7ff fcf5 	bl	801d9b8 <_Balloc>
 801dfce:	b920      	cbnz	r0, 801dfda <__mdiff+0x5a>
 801dfd0:	4b2d      	ldr	r3, [pc, #180]	; (801e088 <__mdiff+0x108>)
 801dfd2:	4602      	mov	r2, r0
 801dfd4:	f44f 7110 	mov.w	r1, #576	; 0x240
 801dfd8:	e7e6      	b.n	801dfa8 <__mdiff+0x28>
 801dfda:	693e      	ldr	r6, [r7, #16]
 801dfdc:	60c5      	str	r5, [r0, #12]
 801dfde:	6925      	ldr	r5, [r4, #16]
 801dfe0:	f107 0114 	add.w	r1, r7, #20
 801dfe4:	f104 0914 	add.w	r9, r4, #20
 801dfe8:	f100 0e14 	add.w	lr, r0, #20
 801dfec:	f107 0210 	add.w	r2, r7, #16
 801dff0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801dff4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801dff8:	46f2      	mov	sl, lr
 801dffa:	2700      	movs	r7, #0
 801dffc:	f859 3b04 	ldr.w	r3, [r9], #4
 801e000:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801e004:	fa1f f883 	uxth.w	r8, r3
 801e008:	fa17 f78b 	uxtah	r7, r7, fp
 801e00c:	0c1b      	lsrs	r3, r3, #16
 801e00e:	eba7 0808 	sub.w	r8, r7, r8
 801e012:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801e016:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801e01a:	fa1f f888 	uxth.w	r8, r8
 801e01e:	141f      	asrs	r7, r3, #16
 801e020:	454d      	cmp	r5, r9
 801e022:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801e026:	f84a 3b04 	str.w	r3, [sl], #4
 801e02a:	d8e7      	bhi.n	801dffc <__mdiff+0x7c>
 801e02c:	1b2b      	subs	r3, r5, r4
 801e02e:	3b15      	subs	r3, #21
 801e030:	f023 0303 	bic.w	r3, r3, #3
 801e034:	3304      	adds	r3, #4
 801e036:	3415      	adds	r4, #21
 801e038:	42a5      	cmp	r5, r4
 801e03a:	bf38      	it	cc
 801e03c:	2304      	movcc	r3, #4
 801e03e:	4419      	add	r1, r3
 801e040:	4473      	add	r3, lr
 801e042:	469e      	mov	lr, r3
 801e044:	460d      	mov	r5, r1
 801e046:	4565      	cmp	r5, ip
 801e048:	d30e      	bcc.n	801e068 <__mdiff+0xe8>
 801e04a:	f10c 0203 	add.w	r2, ip, #3
 801e04e:	1a52      	subs	r2, r2, r1
 801e050:	f022 0203 	bic.w	r2, r2, #3
 801e054:	3903      	subs	r1, #3
 801e056:	458c      	cmp	ip, r1
 801e058:	bf38      	it	cc
 801e05a:	2200      	movcc	r2, #0
 801e05c:	441a      	add	r2, r3
 801e05e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801e062:	b17b      	cbz	r3, 801e084 <__mdiff+0x104>
 801e064:	6106      	str	r6, [r0, #16]
 801e066:	e7a5      	b.n	801dfb4 <__mdiff+0x34>
 801e068:	f855 8b04 	ldr.w	r8, [r5], #4
 801e06c:	fa17 f488 	uxtah	r4, r7, r8
 801e070:	1422      	asrs	r2, r4, #16
 801e072:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801e076:	b2a4      	uxth	r4, r4
 801e078:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801e07c:	f84e 4b04 	str.w	r4, [lr], #4
 801e080:	1417      	asrs	r7, r2, #16
 801e082:	e7e0      	b.n	801e046 <__mdiff+0xc6>
 801e084:	3e01      	subs	r6, #1
 801e086:	e7ea      	b.n	801e05e <__mdiff+0xde>
 801e088:	08020e24 	.word	0x08020e24
 801e08c:	08020eb4 	.word	0x08020eb4

0801e090 <__ulp>:
 801e090:	b082      	sub	sp, #8
 801e092:	ed8d 0b00 	vstr	d0, [sp]
 801e096:	9b01      	ldr	r3, [sp, #4]
 801e098:	4912      	ldr	r1, [pc, #72]	; (801e0e4 <__ulp+0x54>)
 801e09a:	4019      	ands	r1, r3
 801e09c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801e0a0:	2900      	cmp	r1, #0
 801e0a2:	dd05      	ble.n	801e0b0 <__ulp+0x20>
 801e0a4:	2200      	movs	r2, #0
 801e0a6:	460b      	mov	r3, r1
 801e0a8:	ec43 2b10 	vmov	d0, r2, r3
 801e0ac:	b002      	add	sp, #8
 801e0ae:	4770      	bx	lr
 801e0b0:	4249      	negs	r1, r1
 801e0b2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801e0b6:	ea4f 5021 	mov.w	r0, r1, asr #20
 801e0ba:	f04f 0200 	mov.w	r2, #0
 801e0be:	f04f 0300 	mov.w	r3, #0
 801e0c2:	da04      	bge.n	801e0ce <__ulp+0x3e>
 801e0c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801e0c8:	fa41 f300 	asr.w	r3, r1, r0
 801e0cc:	e7ec      	b.n	801e0a8 <__ulp+0x18>
 801e0ce:	f1a0 0114 	sub.w	r1, r0, #20
 801e0d2:	291e      	cmp	r1, #30
 801e0d4:	bfda      	itte	le
 801e0d6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801e0da:	fa20 f101 	lsrle.w	r1, r0, r1
 801e0de:	2101      	movgt	r1, #1
 801e0e0:	460a      	mov	r2, r1
 801e0e2:	e7e1      	b.n	801e0a8 <__ulp+0x18>
 801e0e4:	7ff00000 	.word	0x7ff00000

0801e0e8 <__b2d>:
 801e0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0ea:	6905      	ldr	r5, [r0, #16]
 801e0ec:	f100 0714 	add.w	r7, r0, #20
 801e0f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801e0f4:	1f2e      	subs	r6, r5, #4
 801e0f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801e0fa:	4620      	mov	r0, r4
 801e0fc:	f7ff fd52 	bl	801dba4 <__hi0bits>
 801e100:	f1c0 0320 	rsb	r3, r0, #32
 801e104:	280a      	cmp	r0, #10
 801e106:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801e184 <__b2d+0x9c>
 801e10a:	600b      	str	r3, [r1, #0]
 801e10c:	dc14      	bgt.n	801e138 <__b2d+0x50>
 801e10e:	f1c0 0e0b 	rsb	lr, r0, #11
 801e112:	fa24 f10e 	lsr.w	r1, r4, lr
 801e116:	42b7      	cmp	r7, r6
 801e118:	ea41 030c 	orr.w	r3, r1, ip
 801e11c:	bf34      	ite	cc
 801e11e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e122:	2100      	movcs	r1, #0
 801e124:	3015      	adds	r0, #21
 801e126:	fa04 f000 	lsl.w	r0, r4, r0
 801e12a:	fa21 f10e 	lsr.w	r1, r1, lr
 801e12e:	ea40 0201 	orr.w	r2, r0, r1
 801e132:	ec43 2b10 	vmov	d0, r2, r3
 801e136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e138:	42b7      	cmp	r7, r6
 801e13a:	bf3a      	itte	cc
 801e13c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e140:	f1a5 0608 	subcc.w	r6, r5, #8
 801e144:	2100      	movcs	r1, #0
 801e146:	380b      	subs	r0, #11
 801e148:	d017      	beq.n	801e17a <__b2d+0x92>
 801e14a:	f1c0 0c20 	rsb	ip, r0, #32
 801e14e:	fa04 f500 	lsl.w	r5, r4, r0
 801e152:	42be      	cmp	r6, r7
 801e154:	fa21 f40c 	lsr.w	r4, r1, ip
 801e158:	ea45 0504 	orr.w	r5, r5, r4
 801e15c:	bf8c      	ite	hi
 801e15e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801e162:	2400      	movls	r4, #0
 801e164:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801e168:	fa01 f000 	lsl.w	r0, r1, r0
 801e16c:	fa24 f40c 	lsr.w	r4, r4, ip
 801e170:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801e174:	ea40 0204 	orr.w	r2, r0, r4
 801e178:	e7db      	b.n	801e132 <__b2d+0x4a>
 801e17a:	ea44 030c 	orr.w	r3, r4, ip
 801e17e:	460a      	mov	r2, r1
 801e180:	e7d7      	b.n	801e132 <__b2d+0x4a>
 801e182:	bf00      	nop
 801e184:	3ff00000 	.word	0x3ff00000

0801e188 <__d2b>:
 801e188:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e18c:	4689      	mov	r9, r1
 801e18e:	2101      	movs	r1, #1
 801e190:	ec57 6b10 	vmov	r6, r7, d0
 801e194:	4690      	mov	r8, r2
 801e196:	f7ff fc0f 	bl	801d9b8 <_Balloc>
 801e19a:	4604      	mov	r4, r0
 801e19c:	b930      	cbnz	r0, 801e1ac <__d2b+0x24>
 801e19e:	4602      	mov	r2, r0
 801e1a0:	4b25      	ldr	r3, [pc, #148]	; (801e238 <__d2b+0xb0>)
 801e1a2:	4826      	ldr	r0, [pc, #152]	; (801e23c <__d2b+0xb4>)
 801e1a4:	f240 310a 	movw	r1, #778	; 0x30a
 801e1a8:	f000 fa9a 	bl	801e6e0 <__assert_func>
 801e1ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801e1b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e1b4:	bb35      	cbnz	r5, 801e204 <__d2b+0x7c>
 801e1b6:	2e00      	cmp	r6, #0
 801e1b8:	9301      	str	r3, [sp, #4]
 801e1ba:	d028      	beq.n	801e20e <__d2b+0x86>
 801e1bc:	4668      	mov	r0, sp
 801e1be:	9600      	str	r6, [sp, #0]
 801e1c0:	f7ff fd10 	bl	801dbe4 <__lo0bits>
 801e1c4:	9900      	ldr	r1, [sp, #0]
 801e1c6:	b300      	cbz	r0, 801e20a <__d2b+0x82>
 801e1c8:	9a01      	ldr	r2, [sp, #4]
 801e1ca:	f1c0 0320 	rsb	r3, r0, #32
 801e1ce:	fa02 f303 	lsl.w	r3, r2, r3
 801e1d2:	430b      	orrs	r3, r1
 801e1d4:	40c2      	lsrs	r2, r0
 801e1d6:	6163      	str	r3, [r4, #20]
 801e1d8:	9201      	str	r2, [sp, #4]
 801e1da:	9b01      	ldr	r3, [sp, #4]
 801e1dc:	61a3      	str	r3, [r4, #24]
 801e1de:	2b00      	cmp	r3, #0
 801e1e0:	bf14      	ite	ne
 801e1e2:	2202      	movne	r2, #2
 801e1e4:	2201      	moveq	r2, #1
 801e1e6:	6122      	str	r2, [r4, #16]
 801e1e8:	b1d5      	cbz	r5, 801e220 <__d2b+0x98>
 801e1ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801e1ee:	4405      	add	r5, r0
 801e1f0:	f8c9 5000 	str.w	r5, [r9]
 801e1f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801e1f8:	f8c8 0000 	str.w	r0, [r8]
 801e1fc:	4620      	mov	r0, r4
 801e1fe:	b003      	add	sp, #12
 801e200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e208:	e7d5      	b.n	801e1b6 <__d2b+0x2e>
 801e20a:	6161      	str	r1, [r4, #20]
 801e20c:	e7e5      	b.n	801e1da <__d2b+0x52>
 801e20e:	a801      	add	r0, sp, #4
 801e210:	f7ff fce8 	bl	801dbe4 <__lo0bits>
 801e214:	9b01      	ldr	r3, [sp, #4]
 801e216:	6163      	str	r3, [r4, #20]
 801e218:	2201      	movs	r2, #1
 801e21a:	6122      	str	r2, [r4, #16]
 801e21c:	3020      	adds	r0, #32
 801e21e:	e7e3      	b.n	801e1e8 <__d2b+0x60>
 801e220:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e224:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801e228:	f8c9 0000 	str.w	r0, [r9]
 801e22c:	6918      	ldr	r0, [r3, #16]
 801e22e:	f7ff fcb9 	bl	801dba4 <__hi0bits>
 801e232:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e236:	e7df      	b.n	801e1f8 <__d2b+0x70>
 801e238:	08020e24 	.word	0x08020e24
 801e23c:	08020eb4 	.word	0x08020eb4

0801e240 <__ratio>:
 801e240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e244:	4688      	mov	r8, r1
 801e246:	4669      	mov	r1, sp
 801e248:	4681      	mov	r9, r0
 801e24a:	f7ff ff4d 	bl	801e0e8 <__b2d>
 801e24e:	a901      	add	r1, sp, #4
 801e250:	4640      	mov	r0, r8
 801e252:	ec55 4b10 	vmov	r4, r5, d0
 801e256:	f7ff ff47 	bl	801e0e8 <__b2d>
 801e25a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e25e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801e262:	eba3 0c02 	sub.w	ip, r3, r2
 801e266:	e9dd 3200 	ldrd	r3, r2, [sp]
 801e26a:	1a9b      	subs	r3, r3, r2
 801e26c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801e270:	ec51 0b10 	vmov	r0, r1, d0
 801e274:	2b00      	cmp	r3, #0
 801e276:	bfd6      	itet	le
 801e278:	460a      	movle	r2, r1
 801e27a:	462a      	movgt	r2, r5
 801e27c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801e280:	468b      	mov	fp, r1
 801e282:	462f      	mov	r7, r5
 801e284:	bfd4      	ite	le
 801e286:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801e28a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801e28e:	4620      	mov	r0, r4
 801e290:	ee10 2a10 	vmov	r2, s0
 801e294:	465b      	mov	r3, fp
 801e296:	4639      	mov	r1, r7
 801e298:	f7e2 fad8 	bl	800084c <__aeabi_ddiv>
 801e29c:	ec41 0b10 	vmov	d0, r0, r1
 801e2a0:	b003      	add	sp, #12
 801e2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e2a6 <__copybits>:
 801e2a6:	3901      	subs	r1, #1
 801e2a8:	b570      	push	{r4, r5, r6, lr}
 801e2aa:	1149      	asrs	r1, r1, #5
 801e2ac:	6914      	ldr	r4, [r2, #16]
 801e2ae:	3101      	adds	r1, #1
 801e2b0:	f102 0314 	add.w	r3, r2, #20
 801e2b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801e2b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801e2bc:	1f05      	subs	r5, r0, #4
 801e2be:	42a3      	cmp	r3, r4
 801e2c0:	d30c      	bcc.n	801e2dc <__copybits+0x36>
 801e2c2:	1aa3      	subs	r3, r4, r2
 801e2c4:	3b11      	subs	r3, #17
 801e2c6:	f023 0303 	bic.w	r3, r3, #3
 801e2ca:	3211      	adds	r2, #17
 801e2cc:	42a2      	cmp	r2, r4
 801e2ce:	bf88      	it	hi
 801e2d0:	2300      	movhi	r3, #0
 801e2d2:	4418      	add	r0, r3
 801e2d4:	2300      	movs	r3, #0
 801e2d6:	4288      	cmp	r0, r1
 801e2d8:	d305      	bcc.n	801e2e6 <__copybits+0x40>
 801e2da:	bd70      	pop	{r4, r5, r6, pc}
 801e2dc:	f853 6b04 	ldr.w	r6, [r3], #4
 801e2e0:	f845 6f04 	str.w	r6, [r5, #4]!
 801e2e4:	e7eb      	b.n	801e2be <__copybits+0x18>
 801e2e6:	f840 3b04 	str.w	r3, [r0], #4
 801e2ea:	e7f4      	b.n	801e2d6 <__copybits+0x30>

0801e2ec <__any_on>:
 801e2ec:	f100 0214 	add.w	r2, r0, #20
 801e2f0:	6900      	ldr	r0, [r0, #16]
 801e2f2:	114b      	asrs	r3, r1, #5
 801e2f4:	4298      	cmp	r0, r3
 801e2f6:	b510      	push	{r4, lr}
 801e2f8:	db11      	blt.n	801e31e <__any_on+0x32>
 801e2fa:	dd0a      	ble.n	801e312 <__any_on+0x26>
 801e2fc:	f011 011f 	ands.w	r1, r1, #31
 801e300:	d007      	beq.n	801e312 <__any_on+0x26>
 801e302:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801e306:	fa24 f001 	lsr.w	r0, r4, r1
 801e30a:	fa00 f101 	lsl.w	r1, r0, r1
 801e30e:	428c      	cmp	r4, r1
 801e310:	d10b      	bne.n	801e32a <__any_on+0x3e>
 801e312:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e316:	4293      	cmp	r3, r2
 801e318:	d803      	bhi.n	801e322 <__any_on+0x36>
 801e31a:	2000      	movs	r0, #0
 801e31c:	bd10      	pop	{r4, pc}
 801e31e:	4603      	mov	r3, r0
 801e320:	e7f7      	b.n	801e312 <__any_on+0x26>
 801e322:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e326:	2900      	cmp	r1, #0
 801e328:	d0f5      	beq.n	801e316 <__any_on+0x2a>
 801e32a:	2001      	movs	r0, #1
 801e32c:	e7f6      	b.n	801e31c <__any_on+0x30>

0801e32e <_calloc_r>:
 801e32e:	b513      	push	{r0, r1, r4, lr}
 801e330:	434a      	muls	r2, r1
 801e332:	4611      	mov	r1, r2
 801e334:	9201      	str	r2, [sp, #4]
 801e336:	f7fc fa51 	bl	801a7dc <_malloc_r>
 801e33a:	4604      	mov	r4, r0
 801e33c:	b118      	cbz	r0, 801e346 <_calloc_r+0x18>
 801e33e:	9a01      	ldr	r2, [sp, #4]
 801e340:	2100      	movs	r1, #0
 801e342:	f7fc f9f3 	bl	801a72c <memset>
 801e346:	4620      	mov	r0, r4
 801e348:	b002      	add	sp, #8
 801e34a:	bd10      	pop	{r4, pc}

0801e34c <_realloc_r>:
 801e34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e34e:	4607      	mov	r7, r0
 801e350:	4614      	mov	r4, r2
 801e352:	460e      	mov	r6, r1
 801e354:	b921      	cbnz	r1, 801e360 <_realloc_r+0x14>
 801e356:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e35a:	4611      	mov	r1, r2
 801e35c:	f7fc ba3e 	b.w	801a7dc <_malloc_r>
 801e360:	b922      	cbnz	r2, 801e36c <_realloc_r+0x20>
 801e362:	f7fc f9eb 	bl	801a73c <_free_r>
 801e366:	4625      	mov	r5, r4
 801e368:	4628      	mov	r0, r5
 801e36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e36c:	f000 fbbc 	bl	801eae8 <_malloc_usable_size_r>
 801e370:	42a0      	cmp	r0, r4
 801e372:	d20f      	bcs.n	801e394 <_realloc_r+0x48>
 801e374:	4621      	mov	r1, r4
 801e376:	4638      	mov	r0, r7
 801e378:	f7fc fa30 	bl	801a7dc <_malloc_r>
 801e37c:	4605      	mov	r5, r0
 801e37e:	2800      	cmp	r0, #0
 801e380:	d0f2      	beq.n	801e368 <_realloc_r+0x1c>
 801e382:	4631      	mov	r1, r6
 801e384:	4622      	mov	r2, r4
 801e386:	f7fc f9c3 	bl	801a710 <memcpy>
 801e38a:	4631      	mov	r1, r6
 801e38c:	4638      	mov	r0, r7
 801e38e:	f7fc f9d5 	bl	801a73c <_free_r>
 801e392:	e7e9      	b.n	801e368 <_realloc_r+0x1c>
 801e394:	4635      	mov	r5, r6
 801e396:	e7e7      	b.n	801e368 <_realloc_r+0x1c>

0801e398 <__ssputs_r>:
 801e398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e39c:	688e      	ldr	r6, [r1, #8]
 801e39e:	429e      	cmp	r6, r3
 801e3a0:	4682      	mov	sl, r0
 801e3a2:	460c      	mov	r4, r1
 801e3a4:	4690      	mov	r8, r2
 801e3a6:	461f      	mov	r7, r3
 801e3a8:	d838      	bhi.n	801e41c <__ssputs_r+0x84>
 801e3aa:	898a      	ldrh	r2, [r1, #12]
 801e3ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e3b0:	d032      	beq.n	801e418 <__ssputs_r+0x80>
 801e3b2:	6825      	ldr	r5, [r4, #0]
 801e3b4:	6909      	ldr	r1, [r1, #16]
 801e3b6:	eba5 0901 	sub.w	r9, r5, r1
 801e3ba:	6965      	ldr	r5, [r4, #20]
 801e3bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e3c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e3c4:	3301      	adds	r3, #1
 801e3c6:	444b      	add	r3, r9
 801e3c8:	106d      	asrs	r5, r5, #1
 801e3ca:	429d      	cmp	r5, r3
 801e3cc:	bf38      	it	cc
 801e3ce:	461d      	movcc	r5, r3
 801e3d0:	0553      	lsls	r3, r2, #21
 801e3d2:	d531      	bpl.n	801e438 <__ssputs_r+0xa0>
 801e3d4:	4629      	mov	r1, r5
 801e3d6:	f7fc fa01 	bl	801a7dc <_malloc_r>
 801e3da:	4606      	mov	r6, r0
 801e3dc:	b950      	cbnz	r0, 801e3f4 <__ssputs_r+0x5c>
 801e3de:	230c      	movs	r3, #12
 801e3e0:	f8ca 3000 	str.w	r3, [sl]
 801e3e4:	89a3      	ldrh	r3, [r4, #12]
 801e3e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e3ea:	81a3      	strh	r3, [r4, #12]
 801e3ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e3f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e3f4:	6921      	ldr	r1, [r4, #16]
 801e3f6:	464a      	mov	r2, r9
 801e3f8:	f7fc f98a 	bl	801a710 <memcpy>
 801e3fc:	89a3      	ldrh	r3, [r4, #12]
 801e3fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e406:	81a3      	strh	r3, [r4, #12]
 801e408:	6126      	str	r6, [r4, #16]
 801e40a:	6165      	str	r5, [r4, #20]
 801e40c:	444e      	add	r6, r9
 801e40e:	eba5 0509 	sub.w	r5, r5, r9
 801e412:	6026      	str	r6, [r4, #0]
 801e414:	60a5      	str	r5, [r4, #8]
 801e416:	463e      	mov	r6, r7
 801e418:	42be      	cmp	r6, r7
 801e41a:	d900      	bls.n	801e41e <__ssputs_r+0x86>
 801e41c:	463e      	mov	r6, r7
 801e41e:	4632      	mov	r2, r6
 801e420:	6820      	ldr	r0, [r4, #0]
 801e422:	4641      	mov	r1, r8
 801e424:	f000 fb46 	bl	801eab4 <memmove>
 801e428:	68a3      	ldr	r3, [r4, #8]
 801e42a:	6822      	ldr	r2, [r4, #0]
 801e42c:	1b9b      	subs	r3, r3, r6
 801e42e:	4432      	add	r2, r6
 801e430:	60a3      	str	r3, [r4, #8]
 801e432:	6022      	str	r2, [r4, #0]
 801e434:	2000      	movs	r0, #0
 801e436:	e7db      	b.n	801e3f0 <__ssputs_r+0x58>
 801e438:	462a      	mov	r2, r5
 801e43a:	f7ff ff87 	bl	801e34c <_realloc_r>
 801e43e:	4606      	mov	r6, r0
 801e440:	2800      	cmp	r0, #0
 801e442:	d1e1      	bne.n	801e408 <__ssputs_r+0x70>
 801e444:	6921      	ldr	r1, [r4, #16]
 801e446:	4650      	mov	r0, sl
 801e448:	f7fc f978 	bl	801a73c <_free_r>
 801e44c:	e7c7      	b.n	801e3de <__ssputs_r+0x46>
	...

0801e450 <_svfiprintf_r>:
 801e450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e454:	4698      	mov	r8, r3
 801e456:	898b      	ldrh	r3, [r1, #12]
 801e458:	061b      	lsls	r3, r3, #24
 801e45a:	b09d      	sub	sp, #116	; 0x74
 801e45c:	4607      	mov	r7, r0
 801e45e:	460d      	mov	r5, r1
 801e460:	4614      	mov	r4, r2
 801e462:	d50e      	bpl.n	801e482 <_svfiprintf_r+0x32>
 801e464:	690b      	ldr	r3, [r1, #16]
 801e466:	b963      	cbnz	r3, 801e482 <_svfiprintf_r+0x32>
 801e468:	2140      	movs	r1, #64	; 0x40
 801e46a:	f7fc f9b7 	bl	801a7dc <_malloc_r>
 801e46e:	6028      	str	r0, [r5, #0]
 801e470:	6128      	str	r0, [r5, #16]
 801e472:	b920      	cbnz	r0, 801e47e <_svfiprintf_r+0x2e>
 801e474:	230c      	movs	r3, #12
 801e476:	603b      	str	r3, [r7, #0]
 801e478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e47c:	e0d1      	b.n	801e622 <_svfiprintf_r+0x1d2>
 801e47e:	2340      	movs	r3, #64	; 0x40
 801e480:	616b      	str	r3, [r5, #20]
 801e482:	2300      	movs	r3, #0
 801e484:	9309      	str	r3, [sp, #36]	; 0x24
 801e486:	2320      	movs	r3, #32
 801e488:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e48c:	f8cd 800c 	str.w	r8, [sp, #12]
 801e490:	2330      	movs	r3, #48	; 0x30
 801e492:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801e63c <_svfiprintf_r+0x1ec>
 801e496:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e49a:	f04f 0901 	mov.w	r9, #1
 801e49e:	4623      	mov	r3, r4
 801e4a0:	469a      	mov	sl, r3
 801e4a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e4a6:	b10a      	cbz	r2, 801e4ac <_svfiprintf_r+0x5c>
 801e4a8:	2a25      	cmp	r2, #37	; 0x25
 801e4aa:	d1f9      	bne.n	801e4a0 <_svfiprintf_r+0x50>
 801e4ac:	ebba 0b04 	subs.w	fp, sl, r4
 801e4b0:	d00b      	beq.n	801e4ca <_svfiprintf_r+0x7a>
 801e4b2:	465b      	mov	r3, fp
 801e4b4:	4622      	mov	r2, r4
 801e4b6:	4629      	mov	r1, r5
 801e4b8:	4638      	mov	r0, r7
 801e4ba:	f7ff ff6d 	bl	801e398 <__ssputs_r>
 801e4be:	3001      	adds	r0, #1
 801e4c0:	f000 80aa 	beq.w	801e618 <_svfiprintf_r+0x1c8>
 801e4c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e4c6:	445a      	add	r2, fp
 801e4c8:	9209      	str	r2, [sp, #36]	; 0x24
 801e4ca:	f89a 3000 	ldrb.w	r3, [sl]
 801e4ce:	2b00      	cmp	r3, #0
 801e4d0:	f000 80a2 	beq.w	801e618 <_svfiprintf_r+0x1c8>
 801e4d4:	2300      	movs	r3, #0
 801e4d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e4da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e4de:	f10a 0a01 	add.w	sl, sl, #1
 801e4e2:	9304      	str	r3, [sp, #16]
 801e4e4:	9307      	str	r3, [sp, #28]
 801e4e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e4ea:	931a      	str	r3, [sp, #104]	; 0x68
 801e4ec:	4654      	mov	r4, sl
 801e4ee:	2205      	movs	r2, #5
 801e4f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e4f4:	4851      	ldr	r0, [pc, #324]	; (801e63c <_svfiprintf_r+0x1ec>)
 801e4f6:	f7e1 fe73 	bl	80001e0 <memchr>
 801e4fa:	9a04      	ldr	r2, [sp, #16]
 801e4fc:	b9d8      	cbnz	r0, 801e536 <_svfiprintf_r+0xe6>
 801e4fe:	06d0      	lsls	r0, r2, #27
 801e500:	bf44      	itt	mi
 801e502:	2320      	movmi	r3, #32
 801e504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e508:	0711      	lsls	r1, r2, #28
 801e50a:	bf44      	itt	mi
 801e50c:	232b      	movmi	r3, #43	; 0x2b
 801e50e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e512:	f89a 3000 	ldrb.w	r3, [sl]
 801e516:	2b2a      	cmp	r3, #42	; 0x2a
 801e518:	d015      	beq.n	801e546 <_svfiprintf_r+0xf6>
 801e51a:	9a07      	ldr	r2, [sp, #28]
 801e51c:	4654      	mov	r4, sl
 801e51e:	2000      	movs	r0, #0
 801e520:	f04f 0c0a 	mov.w	ip, #10
 801e524:	4621      	mov	r1, r4
 801e526:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e52a:	3b30      	subs	r3, #48	; 0x30
 801e52c:	2b09      	cmp	r3, #9
 801e52e:	d94e      	bls.n	801e5ce <_svfiprintf_r+0x17e>
 801e530:	b1b0      	cbz	r0, 801e560 <_svfiprintf_r+0x110>
 801e532:	9207      	str	r2, [sp, #28]
 801e534:	e014      	b.n	801e560 <_svfiprintf_r+0x110>
 801e536:	eba0 0308 	sub.w	r3, r0, r8
 801e53a:	fa09 f303 	lsl.w	r3, r9, r3
 801e53e:	4313      	orrs	r3, r2
 801e540:	9304      	str	r3, [sp, #16]
 801e542:	46a2      	mov	sl, r4
 801e544:	e7d2      	b.n	801e4ec <_svfiprintf_r+0x9c>
 801e546:	9b03      	ldr	r3, [sp, #12]
 801e548:	1d19      	adds	r1, r3, #4
 801e54a:	681b      	ldr	r3, [r3, #0]
 801e54c:	9103      	str	r1, [sp, #12]
 801e54e:	2b00      	cmp	r3, #0
 801e550:	bfbb      	ittet	lt
 801e552:	425b      	neglt	r3, r3
 801e554:	f042 0202 	orrlt.w	r2, r2, #2
 801e558:	9307      	strge	r3, [sp, #28]
 801e55a:	9307      	strlt	r3, [sp, #28]
 801e55c:	bfb8      	it	lt
 801e55e:	9204      	strlt	r2, [sp, #16]
 801e560:	7823      	ldrb	r3, [r4, #0]
 801e562:	2b2e      	cmp	r3, #46	; 0x2e
 801e564:	d10c      	bne.n	801e580 <_svfiprintf_r+0x130>
 801e566:	7863      	ldrb	r3, [r4, #1]
 801e568:	2b2a      	cmp	r3, #42	; 0x2a
 801e56a:	d135      	bne.n	801e5d8 <_svfiprintf_r+0x188>
 801e56c:	9b03      	ldr	r3, [sp, #12]
 801e56e:	1d1a      	adds	r2, r3, #4
 801e570:	681b      	ldr	r3, [r3, #0]
 801e572:	9203      	str	r2, [sp, #12]
 801e574:	2b00      	cmp	r3, #0
 801e576:	bfb8      	it	lt
 801e578:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801e57c:	3402      	adds	r4, #2
 801e57e:	9305      	str	r3, [sp, #20]
 801e580:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801e64c <_svfiprintf_r+0x1fc>
 801e584:	7821      	ldrb	r1, [r4, #0]
 801e586:	2203      	movs	r2, #3
 801e588:	4650      	mov	r0, sl
 801e58a:	f7e1 fe29 	bl	80001e0 <memchr>
 801e58e:	b140      	cbz	r0, 801e5a2 <_svfiprintf_r+0x152>
 801e590:	2340      	movs	r3, #64	; 0x40
 801e592:	eba0 000a 	sub.w	r0, r0, sl
 801e596:	fa03 f000 	lsl.w	r0, r3, r0
 801e59a:	9b04      	ldr	r3, [sp, #16]
 801e59c:	4303      	orrs	r3, r0
 801e59e:	3401      	adds	r4, #1
 801e5a0:	9304      	str	r3, [sp, #16]
 801e5a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e5a6:	4826      	ldr	r0, [pc, #152]	; (801e640 <_svfiprintf_r+0x1f0>)
 801e5a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e5ac:	2206      	movs	r2, #6
 801e5ae:	f7e1 fe17 	bl	80001e0 <memchr>
 801e5b2:	2800      	cmp	r0, #0
 801e5b4:	d038      	beq.n	801e628 <_svfiprintf_r+0x1d8>
 801e5b6:	4b23      	ldr	r3, [pc, #140]	; (801e644 <_svfiprintf_r+0x1f4>)
 801e5b8:	bb1b      	cbnz	r3, 801e602 <_svfiprintf_r+0x1b2>
 801e5ba:	9b03      	ldr	r3, [sp, #12]
 801e5bc:	3307      	adds	r3, #7
 801e5be:	f023 0307 	bic.w	r3, r3, #7
 801e5c2:	3308      	adds	r3, #8
 801e5c4:	9303      	str	r3, [sp, #12]
 801e5c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e5c8:	4433      	add	r3, r6
 801e5ca:	9309      	str	r3, [sp, #36]	; 0x24
 801e5cc:	e767      	b.n	801e49e <_svfiprintf_r+0x4e>
 801e5ce:	fb0c 3202 	mla	r2, ip, r2, r3
 801e5d2:	460c      	mov	r4, r1
 801e5d4:	2001      	movs	r0, #1
 801e5d6:	e7a5      	b.n	801e524 <_svfiprintf_r+0xd4>
 801e5d8:	2300      	movs	r3, #0
 801e5da:	3401      	adds	r4, #1
 801e5dc:	9305      	str	r3, [sp, #20]
 801e5de:	4619      	mov	r1, r3
 801e5e0:	f04f 0c0a 	mov.w	ip, #10
 801e5e4:	4620      	mov	r0, r4
 801e5e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e5ea:	3a30      	subs	r2, #48	; 0x30
 801e5ec:	2a09      	cmp	r2, #9
 801e5ee:	d903      	bls.n	801e5f8 <_svfiprintf_r+0x1a8>
 801e5f0:	2b00      	cmp	r3, #0
 801e5f2:	d0c5      	beq.n	801e580 <_svfiprintf_r+0x130>
 801e5f4:	9105      	str	r1, [sp, #20]
 801e5f6:	e7c3      	b.n	801e580 <_svfiprintf_r+0x130>
 801e5f8:	fb0c 2101 	mla	r1, ip, r1, r2
 801e5fc:	4604      	mov	r4, r0
 801e5fe:	2301      	movs	r3, #1
 801e600:	e7f0      	b.n	801e5e4 <_svfiprintf_r+0x194>
 801e602:	ab03      	add	r3, sp, #12
 801e604:	9300      	str	r3, [sp, #0]
 801e606:	462a      	mov	r2, r5
 801e608:	4b0f      	ldr	r3, [pc, #60]	; (801e648 <_svfiprintf_r+0x1f8>)
 801e60a:	a904      	add	r1, sp, #16
 801e60c:	4638      	mov	r0, r7
 801e60e:	f7fc f9df 	bl	801a9d0 <_printf_float>
 801e612:	1c42      	adds	r2, r0, #1
 801e614:	4606      	mov	r6, r0
 801e616:	d1d6      	bne.n	801e5c6 <_svfiprintf_r+0x176>
 801e618:	89ab      	ldrh	r3, [r5, #12]
 801e61a:	065b      	lsls	r3, r3, #25
 801e61c:	f53f af2c 	bmi.w	801e478 <_svfiprintf_r+0x28>
 801e620:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e622:	b01d      	add	sp, #116	; 0x74
 801e624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e628:	ab03      	add	r3, sp, #12
 801e62a:	9300      	str	r3, [sp, #0]
 801e62c:	462a      	mov	r2, r5
 801e62e:	4b06      	ldr	r3, [pc, #24]	; (801e648 <_svfiprintf_r+0x1f8>)
 801e630:	a904      	add	r1, sp, #16
 801e632:	4638      	mov	r0, r7
 801e634:	f7fc fc70 	bl	801af18 <_printf_i>
 801e638:	e7eb      	b.n	801e612 <_svfiprintf_r+0x1c2>
 801e63a:	bf00      	nop
 801e63c:	08021014 	.word	0x08021014
 801e640:	0802101e 	.word	0x0802101e
 801e644:	0801a9d1 	.word	0x0801a9d1
 801e648:	0801e399 	.word	0x0801e399
 801e64c:	0802101a 	.word	0x0802101a

0801e650 <_read_r>:
 801e650:	b538      	push	{r3, r4, r5, lr}
 801e652:	4d07      	ldr	r5, [pc, #28]	; (801e670 <_read_r+0x20>)
 801e654:	4604      	mov	r4, r0
 801e656:	4608      	mov	r0, r1
 801e658:	4611      	mov	r1, r2
 801e65a:	2200      	movs	r2, #0
 801e65c:	602a      	str	r2, [r5, #0]
 801e65e:	461a      	mov	r2, r3
 801e660:	f7ed ff6e 	bl	800c540 <_read>
 801e664:	1c43      	adds	r3, r0, #1
 801e666:	d102      	bne.n	801e66e <_read_r+0x1e>
 801e668:	682b      	ldr	r3, [r5, #0]
 801e66a:	b103      	cbz	r3, 801e66e <_read_r+0x1e>
 801e66c:	6023      	str	r3, [r4, #0]
 801e66e:	bd38      	pop	{r3, r4, r5, pc}
 801e670:	2000aab8 	.word	0x2000aab8
 801e674:	00000000 	.word	0x00000000

0801e678 <nan>:
 801e678:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801e680 <nan+0x8>
 801e67c:	4770      	bx	lr
 801e67e:	bf00      	nop
 801e680:	00000000 	.word	0x00000000
 801e684:	7ff80000 	.word	0x7ff80000

0801e688 <finitef>:
 801e688:	b082      	sub	sp, #8
 801e68a:	ed8d 0a01 	vstr	s0, [sp, #4]
 801e68e:	9801      	ldr	r0, [sp, #4]
 801e690:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801e694:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801e698:	bfac      	ite	ge
 801e69a:	2000      	movge	r0, #0
 801e69c:	2001      	movlt	r0, #1
 801e69e:	b002      	add	sp, #8
 801e6a0:	4770      	bx	lr

0801e6a2 <strncmp>:
 801e6a2:	b510      	push	{r4, lr}
 801e6a4:	b16a      	cbz	r2, 801e6c2 <strncmp+0x20>
 801e6a6:	3901      	subs	r1, #1
 801e6a8:	1884      	adds	r4, r0, r2
 801e6aa:	f810 3b01 	ldrb.w	r3, [r0], #1
 801e6ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801e6b2:	4293      	cmp	r3, r2
 801e6b4:	d103      	bne.n	801e6be <strncmp+0x1c>
 801e6b6:	42a0      	cmp	r0, r4
 801e6b8:	d001      	beq.n	801e6be <strncmp+0x1c>
 801e6ba:	2b00      	cmp	r3, #0
 801e6bc:	d1f5      	bne.n	801e6aa <strncmp+0x8>
 801e6be:	1a98      	subs	r0, r3, r2
 801e6c0:	bd10      	pop	{r4, pc}
 801e6c2:	4610      	mov	r0, r2
 801e6c4:	e7fc      	b.n	801e6c0 <strncmp+0x1e>

0801e6c6 <__ascii_wctomb>:
 801e6c6:	b149      	cbz	r1, 801e6dc <__ascii_wctomb+0x16>
 801e6c8:	2aff      	cmp	r2, #255	; 0xff
 801e6ca:	bf85      	ittet	hi
 801e6cc:	238a      	movhi	r3, #138	; 0x8a
 801e6ce:	6003      	strhi	r3, [r0, #0]
 801e6d0:	700a      	strbls	r2, [r1, #0]
 801e6d2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801e6d6:	bf98      	it	ls
 801e6d8:	2001      	movls	r0, #1
 801e6da:	4770      	bx	lr
 801e6dc:	4608      	mov	r0, r1
 801e6de:	4770      	bx	lr

0801e6e0 <__assert_func>:
 801e6e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e6e2:	4614      	mov	r4, r2
 801e6e4:	461a      	mov	r2, r3
 801e6e6:	4b09      	ldr	r3, [pc, #36]	; (801e70c <__assert_func+0x2c>)
 801e6e8:	681b      	ldr	r3, [r3, #0]
 801e6ea:	4605      	mov	r5, r0
 801e6ec:	68d8      	ldr	r0, [r3, #12]
 801e6ee:	b14c      	cbz	r4, 801e704 <__assert_func+0x24>
 801e6f0:	4b07      	ldr	r3, [pc, #28]	; (801e710 <__assert_func+0x30>)
 801e6f2:	9100      	str	r1, [sp, #0]
 801e6f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e6f8:	4906      	ldr	r1, [pc, #24]	; (801e714 <__assert_func+0x34>)
 801e6fa:	462b      	mov	r3, r5
 801e6fc:	f000 f9a6 	bl	801ea4c <fiprintf>
 801e700:	f000 fc14 	bl	801ef2c <abort>
 801e704:	4b04      	ldr	r3, [pc, #16]	; (801e718 <__assert_func+0x38>)
 801e706:	461c      	mov	r4, r3
 801e708:	e7f3      	b.n	801e6f2 <__assert_func+0x12>
 801e70a:	bf00      	nop
 801e70c:	2000008c 	.word	0x2000008c
 801e710:	08021025 	.word	0x08021025
 801e714:	08021032 	.word	0x08021032
 801e718:	08021060 	.word	0x08021060

0801e71c <__sflush_r>:
 801e71c:	898a      	ldrh	r2, [r1, #12]
 801e71e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e722:	4605      	mov	r5, r0
 801e724:	0710      	lsls	r0, r2, #28
 801e726:	460c      	mov	r4, r1
 801e728:	d458      	bmi.n	801e7dc <__sflush_r+0xc0>
 801e72a:	684b      	ldr	r3, [r1, #4]
 801e72c:	2b00      	cmp	r3, #0
 801e72e:	dc05      	bgt.n	801e73c <__sflush_r+0x20>
 801e730:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e732:	2b00      	cmp	r3, #0
 801e734:	dc02      	bgt.n	801e73c <__sflush_r+0x20>
 801e736:	2000      	movs	r0, #0
 801e738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e73c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e73e:	2e00      	cmp	r6, #0
 801e740:	d0f9      	beq.n	801e736 <__sflush_r+0x1a>
 801e742:	2300      	movs	r3, #0
 801e744:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e748:	682f      	ldr	r7, [r5, #0]
 801e74a:	602b      	str	r3, [r5, #0]
 801e74c:	d032      	beq.n	801e7b4 <__sflush_r+0x98>
 801e74e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e750:	89a3      	ldrh	r3, [r4, #12]
 801e752:	075a      	lsls	r2, r3, #29
 801e754:	d505      	bpl.n	801e762 <__sflush_r+0x46>
 801e756:	6863      	ldr	r3, [r4, #4]
 801e758:	1ac0      	subs	r0, r0, r3
 801e75a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e75c:	b10b      	cbz	r3, 801e762 <__sflush_r+0x46>
 801e75e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e760:	1ac0      	subs	r0, r0, r3
 801e762:	2300      	movs	r3, #0
 801e764:	4602      	mov	r2, r0
 801e766:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e768:	6a21      	ldr	r1, [r4, #32]
 801e76a:	4628      	mov	r0, r5
 801e76c:	47b0      	blx	r6
 801e76e:	1c43      	adds	r3, r0, #1
 801e770:	89a3      	ldrh	r3, [r4, #12]
 801e772:	d106      	bne.n	801e782 <__sflush_r+0x66>
 801e774:	6829      	ldr	r1, [r5, #0]
 801e776:	291d      	cmp	r1, #29
 801e778:	d82c      	bhi.n	801e7d4 <__sflush_r+0xb8>
 801e77a:	4a2a      	ldr	r2, [pc, #168]	; (801e824 <__sflush_r+0x108>)
 801e77c:	40ca      	lsrs	r2, r1
 801e77e:	07d6      	lsls	r6, r2, #31
 801e780:	d528      	bpl.n	801e7d4 <__sflush_r+0xb8>
 801e782:	2200      	movs	r2, #0
 801e784:	6062      	str	r2, [r4, #4]
 801e786:	04d9      	lsls	r1, r3, #19
 801e788:	6922      	ldr	r2, [r4, #16]
 801e78a:	6022      	str	r2, [r4, #0]
 801e78c:	d504      	bpl.n	801e798 <__sflush_r+0x7c>
 801e78e:	1c42      	adds	r2, r0, #1
 801e790:	d101      	bne.n	801e796 <__sflush_r+0x7a>
 801e792:	682b      	ldr	r3, [r5, #0]
 801e794:	b903      	cbnz	r3, 801e798 <__sflush_r+0x7c>
 801e796:	6560      	str	r0, [r4, #84]	; 0x54
 801e798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e79a:	602f      	str	r7, [r5, #0]
 801e79c:	2900      	cmp	r1, #0
 801e79e:	d0ca      	beq.n	801e736 <__sflush_r+0x1a>
 801e7a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e7a4:	4299      	cmp	r1, r3
 801e7a6:	d002      	beq.n	801e7ae <__sflush_r+0x92>
 801e7a8:	4628      	mov	r0, r5
 801e7aa:	f7fb ffc7 	bl	801a73c <_free_r>
 801e7ae:	2000      	movs	r0, #0
 801e7b0:	6360      	str	r0, [r4, #52]	; 0x34
 801e7b2:	e7c1      	b.n	801e738 <__sflush_r+0x1c>
 801e7b4:	6a21      	ldr	r1, [r4, #32]
 801e7b6:	2301      	movs	r3, #1
 801e7b8:	4628      	mov	r0, r5
 801e7ba:	47b0      	blx	r6
 801e7bc:	1c41      	adds	r1, r0, #1
 801e7be:	d1c7      	bne.n	801e750 <__sflush_r+0x34>
 801e7c0:	682b      	ldr	r3, [r5, #0]
 801e7c2:	2b00      	cmp	r3, #0
 801e7c4:	d0c4      	beq.n	801e750 <__sflush_r+0x34>
 801e7c6:	2b1d      	cmp	r3, #29
 801e7c8:	d001      	beq.n	801e7ce <__sflush_r+0xb2>
 801e7ca:	2b16      	cmp	r3, #22
 801e7cc:	d101      	bne.n	801e7d2 <__sflush_r+0xb6>
 801e7ce:	602f      	str	r7, [r5, #0]
 801e7d0:	e7b1      	b.n	801e736 <__sflush_r+0x1a>
 801e7d2:	89a3      	ldrh	r3, [r4, #12]
 801e7d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e7d8:	81a3      	strh	r3, [r4, #12]
 801e7da:	e7ad      	b.n	801e738 <__sflush_r+0x1c>
 801e7dc:	690f      	ldr	r7, [r1, #16]
 801e7de:	2f00      	cmp	r7, #0
 801e7e0:	d0a9      	beq.n	801e736 <__sflush_r+0x1a>
 801e7e2:	0793      	lsls	r3, r2, #30
 801e7e4:	680e      	ldr	r6, [r1, #0]
 801e7e6:	bf08      	it	eq
 801e7e8:	694b      	ldreq	r3, [r1, #20]
 801e7ea:	600f      	str	r7, [r1, #0]
 801e7ec:	bf18      	it	ne
 801e7ee:	2300      	movne	r3, #0
 801e7f0:	eba6 0807 	sub.w	r8, r6, r7
 801e7f4:	608b      	str	r3, [r1, #8]
 801e7f6:	f1b8 0f00 	cmp.w	r8, #0
 801e7fa:	dd9c      	ble.n	801e736 <__sflush_r+0x1a>
 801e7fc:	6a21      	ldr	r1, [r4, #32]
 801e7fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e800:	4643      	mov	r3, r8
 801e802:	463a      	mov	r2, r7
 801e804:	4628      	mov	r0, r5
 801e806:	47b0      	blx	r6
 801e808:	2800      	cmp	r0, #0
 801e80a:	dc06      	bgt.n	801e81a <__sflush_r+0xfe>
 801e80c:	89a3      	ldrh	r3, [r4, #12]
 801e80e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e812:	81a3      	strh	r3, [r4, #12]
 801e814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e818:	e78e      	b.n	801e738 <__sflush_r+0x1c>
 801e81a:	4407      	add	r7, r0
 801e81c:	eba8 0800 	sub.w	r8, r8, r0
 801e820:	e7e9      	b.n	801e7f6 <__sflush_r+0xda>
 801e822:	bf00      	nop
 801e824:	20400001 	.word	0x20400001

0801e828 <_fflush_r>:
 801e828:	b538      	push	{r3, r4, r5, lr}
 801e82a:	690b      	ldr	r3, [r1, #16]
 801e82c:	4605      	mov	r5, r0
 801e82e:	460c      	mov	r4, r1
 801e830:	b913      	cbnz	r3, 801e838 <_fflush_r+0x10>
 801e832:	2500      	movs	r5, #0
 801e834:	4628      	mov	r0, r5
 801e836:	bd38      	pop	{r3, r4, r5, pc}
 801e838:	b118      	cbz	r0, 801e842 <_fflush_r+0x1a>
 801e83a:	6983      	ldr	r3, [r0, #24]
 801e83c:	b90b      	cbnz	r3, 801e842 <_fflush_r+0x1a>
 801e83e:	f000 f887 	bl	801e950 <__sinit>
 801e842:	4b14      	ldr	r3, [pc, #80]	; (801e894 <_fflush_r+0x6c>)
 801e844:	429c      	cmp	r4, r3
 801e846:	d11b      	bne.n	801e880 <_fflush_r+0x58>
 801e848:	686c      	ldr	r4, [r5, #4]
 801e84a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e84e:	2b00      	cmp	r3, #0
 801e850:	d0ef      	beq.n	801e832 <_fflush_r+0xa>
 801e852:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e854:	07d0      	lsls	r0, r2, #31
 801e856:	d404      	bmi.n	801e862 <_fflush_r+0x3a>
 801e858:	0599      	lsls	r1, r3, #22
 801e85a:	d402      	bmi.n	801e862 <_fflush_r+0x3a>
 801e85c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e85e:	f000 f927 	bl	801eab0 <__retarget_lock_acquire_recursive>
 801e862:	4628      	mov	r0, r5
 801e864:	4621      	mov	r1, r4
 801e866:	f7ff ff59 	bl	801e71c <__sflush_r>
 801e86a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e86c:	07da      	lsls	r2, r3, #31
 801e86e:	4605      	mov	r5, r0
 801e870:	d4e0      	bmi.n	801e834 <_fflush_r+0xc>
 801e872:	89a3      	ldrh	r3, [r4, #12]
 801e874:	059b      	lsls	r3, r3, #22
 801e876:	d4dd      	bmi.n	801e834 <_fflush_r+0xc>
 801e878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e87a:	f000 f91a 	bl	801eab2 <__retarget_lock_release_recursive>
 801e87e:	e7d9      	b.n	801e834 <_fflush_r+0xc>
 801e880:	4b05      	ldr	r3, [pc, #20]	; (801e898 <_fflush_r+0x70>)
 801e882:	429c      	cmp	r4, r3
 801e884:	d101      	bne.n	801e88a <_fflush_r+0x62>
 801e886:	68ac      	ldr	r4, [r5, #8]
 801e888:	e7df      	b.n	801e84a <_fflush_r+0x22>
 801e88a:	4b04      	ldr	r3, [pc, #16]	; (801e89c <_fflush_r+0x74>)
 801e88c:	429c      	cmp	r4, r3
 801e88e:	bf08      	it	eq
 801e890:	68ec      	ldreq	r4, [r5, #12]
 801e892:	e7da      	b.n	801e84a <_fflush_r+0x22>
 801e894:	08021084 	.word	0x08021084
 801e898:	080210a4 	.word	0x080210a4
 801e89c:	08021064 	.word	0x08021064

0801e8a0 <std>:
 801e8a0:	2300      	movs	r3, #0
 801e8a2:	b510      	push	{r4, lr}
 801e8a4:	4604      	mov	r4, r0
 801e8a6:	e9c0 3300 	strd	r3, r3, [r0]
 801e8aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e8ae:	6083      	str	r3, [r0, #8]
 801e8b0:	8181      	strh	r1, [r0, #12]
 801e8b2:	6643      	str	r3, [r0, #100]	; 0x64
 801e8b4:	81c2      	strh	r2, [r0, #14]
 801e8b6:	6183      	str	r3, [r0, #24]
 801e8b8:	4619      	mov	r1, r3
 801e8ba:	2208      	movs	r2, #8
 801e8bc:	305c      	adds	r0, #92	; 0x5c
 801e8be:	f7fb ff35 	bl	801a72c <memset>
 801e8c2:	4b05      	ldr	r3, [pc, #20]	; (801e8d8 <std+0x38>)
 801e8c4:	6263      	str	r3, [r4, #36]	; 0x24
 801e8c6:	4b05      	ldr	r3, [pc, #20]	; (801e8dc <std+0x3c>)
 801e8c8:	62a3      	str	r3, [r4, #40]	; 0x28
 801e8ca:	4b05      	ldr	r3, [pc, #20]	; (801e8e0 <std+0x40>)
 801e8cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e8ce:	4b05      	ldr	r3, [pc, #20]	; (801e8e4 <std+0x44>)
 801e8d0:	6224      	str	r4, [r4, #32]
 801e8d2:	6323      	str	r3, [r4, #48]	; 0x30
 801e8d4:	bd10      	pop	{r4, pc}
 801e8d6:	bf00      	nop
 801e8d8:	0801b731 	.word	0x0801b731
 801e8dc:	0801b753 	.word	0x0801b753
 801e8e0:	0801b78b 	.word	0x0801b78b
 801e8e4:	0801b7af 	.word	0x0801b7af

0801e8e8 <_cleanup_r>:
 801e8e8:	4901      	ldr	r1, [pc, #4]	; (801e8f0 <_cleanup_r+0x8>)
 801e8ea:	f000 b8c1 	b.w	801ea70 <_fwalk_reent>
 801e8ee:	bf00      	nop
 801e8f0:	0801e829 	.word	0x0801e829

0801e8f4 <__sfmoreglue>:
 801e8f4:	b570      	push	{r4, r5, r6, lr}
 801e8f6:	1e4a      	subs	r2, r1, #1
 801e8f8:	2568      	movs	r5, #104	; 0x68
 801e8fa:	4355      	muls	r5, r2
 801e8fc:	460e      	mov	r6, r1
 801e8fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e902:	f7fb ff6b 	bl	801a7dc <_malloc_r>
 801e906:	4604      	mov	r4, r0
 801e908:	b140      	cbz	r0, 801e91c <__sfmoreglue+0x28>
 801e90a:	2100      	movs	r1, #0
 801e90c:	e9c0 1600 	strd	r1, r6, [r0]
 801e910:	300c      	adds	r0, #12
 801e912:	60a0      	str	r0, [r4, #8]
 801e914:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e918:	f7fb ff08 	bl	801a72c <memset>
 801e91c:	4620      	mov	r0, r4
 801e91e:	bd70      	pop	{r4, r5, r6, pc}

0801e920 <__sfp_lock_acquire>:
 801e920:	4801      	ldr	r0, [pc, #4]	; (801e928 <__sfp_lock_acquire+0x8>)
 801e922:	f000 b8c5 	b.w	801eab0 <__retarget_lock_acquire_recursive>
 801e926:	bf00      	nop
 801e928:	2000aac4 	.word	0x2000aac4

0801e92c <__sfp_lock_release>:
 801e92c:	4801      	ldr	r0, [pc, #4]	; (801e934 <__sfp_lock_release+0x8>)
 801e92e:	f000 b8c0 	b.w	801eab2 <__retarget_lock_release_recursive>
 801e932:	bf00      	nop
 801e934:	2000aac4 	.word	0x2000aac4

0801e938 <__sinit_lock_acquire>:
 801e938:	4801      	ldr	r0, [pc, #4]	; (801e940 <__sinit_lock_acquire+0x8>)
 801e93a:	f000 b8b9 	b.w	801eab0 <__retarget_lock_acquire_recursive>
 801e93e:	bf00      	nop
 801e940:	2000aabf 	.word	0x2000aabf

0801e944 <__sinit_lock_release>:
 801e944:	4801      	ldr	r0, [pc, #4]	; (801e94c <__sinit_lock_release+0x8>)
 801e946:	f000 b8b4 	b.w	801eab2 <__retarget_lock_release_recursive>
 801e94a:	bf00      	nop
 801e94c:	2000aabf 	.word	0x2000aabf

0801e950 <__sinit>:
 801e950:	b510      	push	{r4, lr}
 801e952:	4604      	mov	r4, r0
 801e954:	f7ff fff0 	bl	801e938 <__sinit_lock_acquire>
 801e958:	69a3      	ldr	r3, [r4, #24]
 801e95a:	b11b      	cbz	r3, 801e964 <__sinit+0x14>
 801e95c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e960:	f7ff bff0 	b.w	801e944 <__sinit_lock_release>
 801e964:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e968:	6523      	str	r3, [r4, #80]	; 0x50
 801e96a:	4b13      	ldr	r3, [pc, #76]	; (801e9b8 <__sinit+0x68>)
 801e96c:	4a13      	ldr	r2, [pc, #76]	; (801e9bc <__sinit+0x6c>)
 801e96e:	681b      	ldr	r3, [r3, #0]
 801e970:	62a2      	str	r2, [r4, #40]	; 0x28
 801e972:	42a3      	cmp	r3, r4
 801e974:	bf04      	itt	eq
 801e976:	2301      	moveq	r3, #1
 801e978:	61a3      	streq	r3, [r4, #24]
 801e97a:	4620      	mov	r0, r4
 801e97c:	f000 f820 	bl	801e9c0 <__sfp>
 801e980:	6060      	str	r0, [r4, #4]
 801e982:	4620      	mov	r0, r4
 801e984:	f000 f81c 	bl	801e9c0 <__sfp>
 801e988:	60a0      	str	r0, [r4, #8]
 801e98a:	4620      	mov	r0, r4
 801e98c:	f000 f818 	bl	801e9c0 <__sfp>
 801e990:	2200      	movs	r2, #0
 801e992:	60e0      	str	r0, [r4, #12]
 801e994:	2104      	movs	r1, #4
 801e996:	6860      	ldr	r0, [r4, #4]
 801e998:	f7ff ff82 	bl	801e8a0 <std>
 801e99c:	68a0      	ldr	r0, [r4, #8]
 801e99e:	2201      	movs	r2, #1
 801e9a0:	2109      	movs	r1, #9
 801e9a2:	f7ff ff7d 	bl	801e8a0 <std>
 801e9a6:	68e0      	ldr	r0, [r4, #12]
 801e9a8:	2202      	movs	r2, #2
 801e9aa:	2112      	movs	r1, #18
 801e9ac:	f7ff ff78 	bl	801e8a0 <std>
 801e9b0:	2301      	movs	r3, #1
 801e9b2:	61a3      	str	r3, [r4, #24]
 801e9b4:	e7d2      	b.n	801e95c <__sinit+0xc>
 801e9b6:	bf00      	nop
 801e9b8:	08020c0c 	.word	0x08020c0c
 801e9bc:	0801e8e9 	.word	0x0801e8e9

0801e9c0 <__sfp>:
 801e9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e9c2:	4607      	mov	r7, r0
 801e9c4:	f7ff ffac 	bl	801e920 <__sfp_lock_acquire>
 801e9c8:	4b1e      	ldr	r3, [pc, #120]	; (801ea44 <__sfp+0x84>)
 801e9ca:	681e      	ldr	r6, [r3, #0]
 801e9cc:	69b3      	ldr	r3, [r6, #24]
 801e9ce:	b913      	cbnz	r3, 801e9d6 <__sfp+0x16>
 801e9d0:	4630      	mov	r0, r6
 801e9d2:	f7ff ffbd 	bl	801e950 <__sinit>
 801e9d6:	3648      	adds	r6, #72	; 0x48
 801e9d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e9dc:	3b01      	subs	r3, #1
 801e9de:	d503      	bpl.n	801e9e8 <__sfp+0x28>
 801e9e0:	6833      	ldr	r3, [r6, #0]
 801e9e2:	b30b      	cbz	r3, 801ea28 <__sfp+0x68>
 801e9e4:	6836      	ldr	r6, [r6, #0]
 801e9e6:	e7f7      	b.n	801e9d8 <__sfp+0x18>
 801e9e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e9ec:	b9d5      	cbnz	r5, 801ea24 <__sfp+0x64>
 801e9ee:	4b16      	ldr	r3, [pc, #88]	; (801ea48 <__sfp+0x88>)
 801e9f0:	60e3      	str	r3, [r4, #12]
 801e9f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e9f6:	6665      	str	r5, [r4, #100]	; 0x64
 801e9f8:	f000 f859 	bl	801eaae <__retarget_lock_init_recursive>
 801e9fc:	f7ff ff96 	bl	801e92c <__sfp_lock_release>
 801ea00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ea04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ea08:	6025      	str	r5, [r4, #0]
 801ea0a:	61a5      	str	r5, [r4, #24]
 801ea0c:	2208      	movs	r2, #8
 801ea0e:	4629      	mov	r1, r5
 801ea10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ea14:	f7fb fe8a 	bl	801a72c <memset>
 801ea18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ea1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ea20:	4620      	mov	r0, r4
 801ea22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ea24:	3468      	adds	r4, #104	; 0x68
 801ea26:	e7d9      	b.n	801e9dc <__sfp+0x1c>
 801ea28:	2104      	movs	r1, #4
 801ea2a:	4638      	mov	r0, r7
 801ea2c:	f7ff ff62 	bl	801e8f4 <__sfmoreglue>
 801ea30:	4604      	mov	r4, r0
 801ea32:	6030      	str	r0, [r6, #0]
 801ea34:	2800      	cmp	r0, #0
 801ea36:	d1d5      	bne.n	801e9e4 <__sfp+0x24>
 801ea38:	f7ff ff78 	bl	801e92c <__sfp_lock_release>
 801ea3c:	230c      	movs	r3, #12
 801ea3e:	603b      	str	r3, [r7, #0]
 801ea40:	e7ee      	b.n	801ea20 <__sfp+0x60>
 801ea42:	bf00      	nop
 801ea44:	08020c0c 	.word	0x08020c0c
 801ea48:	ffff0001 	.word	0xffff0001

0801ea4c <fiprintf>:
 801ea4c:	b40e      	push	{r1, r2, r3}
 801ea4e:	b503      	push	{r0, r1, lr}
 801ea50:	4601      	mov	r1, r0
 801ea52:	ab03      	add	r3, sp, #12
 801ea54:	4805      	ldr	r0, [pc, #20]	; (801ea6c <fiprintf+0x20>)
 801ea56:	f853 2b04 	ldr.w	r2, [r3], #4
 801ea5a:	6800      	ldr	r0, [r0, #0]
 801ea5c:	9301      	str	r3, [sp, #4]
 801ea5e:	f000 f875 	bl	801eb4c <_vfiprintf_r>
 801ea62:	b002      	add	sp, #8
 801ea64:	f85d eb04 	ldr.w	lr, [sp], #4
 801ea68:	b003      	add	sp, #12
 801ea6a:	4770      	bx	lr
 801ea6c:	2000008c 	.word	0x2000008c

0801ea70 <_fwalk_reent>:
 801ea70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ea74:	4606      	mov	r6, r0
 801ea76:	4688      	mov	r8, r1
 801ea78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ea7c:	2700      	movs	r7, #0
 801ea7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ea82:	f1b9 0901 	subs.w	r9, r9, #1
 801ea86:	d505      	bpl.n	801ea94 <_fwalk_reent+0x24>
 801ea88:	6824      	ldr	r4, [r4, #0]
 801ea8a:	2c00      	cmp	r4, #0
 801ea8c:	d1f7      	bne.n	801ea7e <_fwalk_reent+0xe>
 801ea8e:	4638      	mov	r0, r7
 801ea90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ea94:	89ab      	ldrh	r3, [r5, #12]
 801ea96:	2b01      	cmp	r3, #1
 801ea98:	d907      	bls.n	801eaaa <_fwalk_reent+0x3a>
 801ea9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ea9e:	3301      	adds	r3, #1
 801eaa0:	d003      	beq.n	801eaaa <_fwalk_reent+0x3a>
 801eaa2:	4629      	mov	r1, r5
 801eaa4:	4630      	mov	r0, r6
 801eaa6:	47c0      	blx	r8
 801eaa8:	4307      	orrs	r7, r0
 801eaaa:	3568      	adds	r5, #104	; 0x68
 801eaac:	e7e9      	b.n	801ea82 <_fwalk_reent+0x12>

0801eaae <__retarget_lock_init_recursive>:
 801eaae:	4770      	bx	lr

0801eab0 <__retarget_lock_acquire_recursive>:
 801eab0:	4770      	bx	lr

0801eab2 <__retarget_lock_release_recursive>:
 801eab2:	4770      	bx	lr

0801eab4 <memmove>:
 801eab4:	4288      	cmp	r0, r1
 801eab6:	b510      	push	{r4, lr}
 801eab8:	eb01 0402 	add.w	r4, r1, r2
 801eabc:	d902      	bls.n	801eac4 <memmove+0x10>
 801eabe:	4284      	cmp	r4, r0
 801eac0:	4623      	mov	r3, r4
 801eac2:	d807      	bhi.n	801ead4 <memmove+0x20>
 801eac4:	1e43      	subs	r3, r0, #1
 801eac6:	42a1      	cmp	r1, r4
 801eac8:	d008      	beq.n	801eadc <memmove+0x28>
 801eaca:	f811 2b01 	ldrb.w	r2, [r1], #1
 801eace:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ead2:	e7f8      	b.n	801eac6 <memmove+0x12>
 801ead4:	4402      	add	r2, r0
 801ead6:	4601      	mov	r1, r0
 801ead8:	428a      	cmp	r2, r1
 801eada:	d100      	bne.n	801eade <memmove+0x2a>
 801eadc:	bd10      	pop	{r4, pc}
 801eade:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801eae2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801eae6:	e7f7      	b.n	801ead8 <memmove+0x24>

0801eae8 <_malloc_usable_size_r>:
 801eae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801eaec:	1f18      	subs	r0, r3, #4
 801eaee:	2b00      	cmp	r3, #0
 801eaf0:	bfbc      	itt	lt
 801eaf2:	580b      	ldrlt	r3, [r1, r0]
 801eaf4:	18c0      	addlt	r0, r0, r3
 801eaf6:	4770      	bx	lr

0801eaf8 <__sfputc_r>:
 801eaf8:	6893      	ldr	r3, [r2, #8]
 801eafa:	3b01      	subs	r3, #1
 801eafc:	2b00      	cmp	r3, #0
 801eafe:	b410      	push	{r4}
 801eb00:	6093      	str	r3, [r2, #8]
 801eb02:	da08      	bge.n	801eb16 <__sfputc_r+0x1e>
 801eb04:	6994      	ldr	r4, [r2, #24]
 801eb06:	42a3      	cmp	r3, r4
 801eb08:	db01      	blt.n	801eb0e <__sfputc_r+0x16>
 801eb0a:	290a      	cmp	r1, #10
 801eb0c:	d103      	bne.n	801eb16 <__sfputc_r+0x1e>
 801eb0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eb12:	f000 b94b 	b.w	801edac <__swbuf_r>
 801eb16:	6813      	ldr	r3, [r2, #0]
 801eb18:	1c58      	adds	r0, r3, #1
 801eb1a:	6010      	str	r0, [r2, #0]
 801eb1c:	7019      	strb	r1, [r3, #0]
 801eb1e:	4608      	mov	r0, r1
 801eb20:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eb24:	4770      	bx	lr

0801eb26 <__sfputs_r>:
 801eb26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb28:	4606      	mov	r6, r0
 801eb2a:	460f      	mov	r7, r1
 801eb2c:	4614      	mov	r4, r2
 801eb2e:	18d5      	adds	r5, r2, r3
 801eb30:	42ac      	cmp	r4, r5
 801eb32:	d101      	bne.n	801eb38 <__sfputs_r+0x12>
 801eb34:	2000      	movs	r0, #0
 801eb36:	e007      	b.n	801eb48 <__sfputs_r+0x22>
 801eb38:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eb3c:	463a      	mov	r2, r7
 801eb3e:	4630      	mov	r0, r6
 801eb40:	f7ff ffda 	bl	801eaf8 <__sfputc_r>
 801eb44:	1c43      	adds	r3, r0, #1
 801eb46:	d1f3      	bne.n	801eb30 <__sfputs_r+0xa>
 801eb48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801eb4c <_vfiprintf_r>:
 801eb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb50:	460d      	mov	r5, r1
 801eb52:	b09d      	sub	sp, #116	; 0x74
 801eb54:	4614      	mov	r4, r2
 801eb56:	4698      	mov	r8, r3
 801eb58:	4606      	mov	r6, r0
 801eb5a:	b118      	cbz	r0, 801eb64 <_vfiprintf_r+0x18>
 801eb5c:	6983      	ldr	r3, [r0, #24]
 801eb5e:	b90b      	cbnz	r3, 801eb64 <_vfiprintf_r+0x18>
 801eb60:	f7ff fef6 	bl	801e950 <__sinit>
 801eb64:	4b89      	ldr	r3, [pc, #548]	; (801ed8c <_vfiprintf_r+0x240>)
 801eb66:	429d      	cmp	r5, r3
 801eb68:	d11b      	bne.n	801eba2 <_vfiprintf_r+0x56>
 801eb6a:	6875      	ldr	r5, [r6, #4]
 801eb6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801eb6e:	07d9      	lsls	r1, r3, #31
 801eb70:	d405      	bmi.n	801eb7e <_vfiprintf_r+0x32>
 801eb72:	89ab      	ldrh	r3, [r5, #12]
 801eb74:	059a      	lsls	r2, r3, #22
 801eb76:	d402      	bmi.n	801eb7e <_vfiprintf_r+0x32>
 801eb78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801eb7a:	f7ff ff99 	bl	801eab0 <__retarget_lock_acquire_recursive>
 801eb7e:	89ab      	ldrh	r3, [r5, #12]
 801eb80:	071b      	lsls	r3, r3, #28
 801eb82:	d501      	bpl.n	801eb88 <_vfiprintf_r+0x3c>
 801eb84:	692b      	ldr	r3, [r5, #16]
 801eb86:	b9eb      	cbnz	r3, 801ebc4 <_vfiprintf_r+0x78>
 801eb88:	4629      	mov	r1, r5
 801eb8a:	4630      	mov	r0, r6
 801eb8c:	f000 f960 	bl	801ee50 <__swsetup_r>
 801eb90:	b1c0      	cbz	r0, 801ebc4 <_vfiprintf_r+0x78>
 801eb92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801eb94:	07dc      	lsls	r4, r3, #31
 801eb96:	d50e      	bpl.n	801ebb6 <_vfiprintf_r+0x6a>
 801eb98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801eb9c:	b01d      	add	sp, #116	; 0x74
 801eb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eba2:	4b7b      	ldr	r3, [pc, #492]	; (801ed90 <_vfiprintf_r+0x244>)
 801eba4:	429d      	cmp	r5, r3
 801eba6:	d101      	bne.n	801ebac <_vfiprintf_r+0x60>
 801eba8:	68b5      	ldr	r5, [r6, #8]
 801ebaa:	e7df      	b.n	801eb6c <_vfiprintf_r+0x20>
 801ebac:	4b79      	ldr	r3, [pc, #484]	; (801ed94 <_vfiprintf_r+0x248>)
 801ebae:	429d      	cmp	r5, r3
 801ebb0:	bf08      	it	eq
 801ebb2:	68f5      	ldreq	r5, [r6, #12]
 801ebb4:	e7da      	b.n	801eb6c <_vfiprintf_r+0x20>
 801ebb6:	89ab      	ldrh	r3, [r5, #12]
 801ebb8:	0598      	lsls	r0, r3, #22
 801ebba:	d4ed      	bmi.n	801eb98 <_vfiprintf_r+0x4c>
 801ebbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ebbe:	f7ff ff78 	bl	801eab2 <__retarget_lock_release_recursive>
 801ebc2:	e7e9      	b.n	801eb98 <_vfiprintf_r+0x4c>
 801ebc4:	2300      	movs	r3, #0
 801ebc6:	9309      	str	r3, [sp, #36]	; 0x24
 801ebc8:	2320      	movs	r3, #32
 801ebca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ebce:	f8cd 800c 	str.w	r8, [sp, #12]
 801ebd2:	2330      	movs	r3, #48	; 0x30
 801ebd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801ed98 <_vfiprintf_r+0x24c>
 801ebd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ebdc:	f04f 0901 	mov.w	r9, #1
 801ebe0:	4623      	mov	r3, r4
 801ebe2:	469a      	mov	sl, r3
 801ebe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ebe8:	b10a      	cbz	r2, 801ebee <_vfiprintf_r+0xa2>
 801ebea:	2a25      	cmp	r2, #37	; 0x25
 801ebec:	d1f9      	bne.n	801ebe2 <_vfiprintf_r+0x96>
 801ebee:	ebba 0b04 	subs.w	fp, sl, r4
 801ebf2:	d00b      	beq.n	801ec0c <_vfiprintf_r+0xc0>
 801ebf4:	465b      	mov	r3, fp
 801ebf6:	4622      	mov	r2, r4
 801ebf8:	4629      	mov	r1, r5
 801ebfa:	4630      	mov	r0, r6
 801ebfc:	f7ff ff93 	bl	801eb26 <__sfputs_r>
 801ec00:	3001      	adds	r0, #1
 801ec02:	f000 80aa 	beq.w	801ed5a <_vfiprintf_r+0x20e>
 801ec06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ec08:	445a      	add	r2, fp
 801ec0a:	9209      	str	r2, [sp, #36]	; 0x24
 801ec0c:	f89a 3000 	ldrb.w	r3, [sl]
 801ec10:	2b00      	cmp	r3, #0
 801ec12:	f000 80a2 	beq.w	801ed5a <_vfiprintf_r+0x20e>
 801ec16:	2300      	movs	r3, #0
 801ec18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ec1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ec20:	f10a 0a01 	add.w	sl, sl, #1
 801ec24:	9304      	str	r3, [sp, #16]
 801ec26:	9307      	str	r3, [sp, #28]
 801ec28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ec2c:	931a      	str	r3, [sp, #104]	; 0x68
 801ec2e:	4654      	mov	r4, sl
 801ec30:	2205      	movs	r2, #5
 801ec32:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ec36:	4858      	ldr	r0, [pc, #352]	; (801ed98 <_vfiprintf_r+0x24c>)
 801ec38:	f7e1 fad2 	bl	80001e0 <memchr>
 801ec3c:	9a04      	ldr	r2, [sp, #16]
 801ec3e:	b9d8      	cbnz	r0, 801ec78 <_vfiprintf_r+0x12c>
 801ec40:	06d1      	lsls	r1, r2, #27
 801ec42:	bf44      	itt	mi
 801ec44:	2320      	movmi	r3, #32
 801ec46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ec4a:	0713      	lsls	r3, r2, #28
 801ec4c:	bf44      	itt	mi
 801ec4e:	232b      	movmi	r3, #43	; 0x2b
 801ec50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ec54:	f89a 3000 	ldrb.w	r3, [sl]
 801ec58:	2b2a      	cmp	r3, #42	; 0x2a
 801ec5a:	d015      	beq.n	801ec88 <_vfiprintf_r+0x13c>
 801ec5c:	9a07      	ldr	r2, [sp, #28]
 801ec5e:	4654      	mov	r4, sl
 801ec60:	2000      	movs	r0, #0
 801ec62:	f04f 0c0a 	mov.w	ip, #10
 801ec66:	4621      	mov	r1, r4
 801ec68:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ec6c:	3b30      	subs	r3, #48	; 0x30
 801ec6e:	2b09      	cmp	r3, #9
 801ec70:	d94e      	bls.n	801ed10 <_vfiprintf_r+0x1c4>
 801ec72:	b1b0      	cbz	r0, 801eca2 <_vfiprintf_r+0x156>
 801ec74:	9207      	str	r2, [sp, #28]
 801ec76:	e014      	b.n	801eca2 <_vfiprintf_r+0x156>
 801ec78:	eba0 0308 	sub.w	r3, r0, r8
 801ec7c:	fa09 f303 	lsl.w	r3, r9, r3
 801ec80:	4313      	orrs	r3, r2
 801ec82:	9304      	str	r3, [sp, #16]
 801ec84:	46a2      	mov	sl, r4
 801ec86:	e7d2      	b.n	801ec2e <_vfiprintf_r+0xe2>
 801ec88:	9b03      	ldr	r3, [sp, #12]
 801ec8a:	1d19      	adds	r1, r3, #4
 801ec8c:	681b      	ldr	r3, [r3, #0]
 801ec8e:	9103      	str	r1, [sp, #12]
 801ec90:	2b00      	cmp	r3, #0
 801ec92:	bfbb      	ittet	lt
 801ec94:	425b      	neglt	r3, r3
 801ec96:	f042 0202 	orrlt.w	r2, r2, #2
 801ec9a:	9307      	strge	r3, [sp, #28]
 801ec9c:	9307      	strlt	r3, [sp, #28]
 801ec9e:	bfb8      	it	lt
 801eca0:	9204      	strlt	r2, [sp, #16]
 801eca2:	7823      	ldrb	r3, [r4, #0]
 801eca4:	2b2e      	cmp	r3, #46	; 0x2e
 801eca6:	d10c      	bne.n	801ecc2 <_vfiprintf_r+0x176>
 801eca8:	7863      	ldrb	r3, [r4, #1]
 801ecaa:	2b2a      	cmp	r3, #42	; 0x2a
 801ecac:	d135      	bne.n	801ed1a <_vfiprintf_r+0x1ce>
 801ecae:	9b03      	ldr	r3, [sp, #12]
 801ecb0:	1d1a      	adds	r2, r3, #4
 801ecb2:	681b      	ldr	r3, [r3, #0]
 801ecb4:	9203      	str	r2, [sp, #12]
 801ecb6:	2b00      	cmp	r3, #0
 801ecb8:	bfb8      	it	lt
 801ecba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801ecbe:	3402      	adds	r4, #2
 801ecc0:	9305      	str	r3, [sp, #20]
 801ecc2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801eda8 <_vfiprintf_r+0x25c>
 801ecc6:	7821      	ldrb	r1, [r4, #0]
 801ecc8:	2203      	movs	r2, #3
 801ecca:	4650      	mov	r0, sl
 801eccc:	f7e1 fa88 	bl	80001e0 <memchr>
 801ecd0:	b140      	cbz	r0, 801ece4 <_vfiprintf_r+0x198>
 801ecd2:	2340      	movs	r3, #64	; 0x40
 801ecd4:	eba0 000a 	sub.w	r0, r0, sl
 801ecd8:	fa03 f000 	lsl.w	r0, r3, r0
 801ecdc:	9b04      	ldr	r3, [sp, #16]
 801ecde:	4303      	orrs	r3, r0
 801ece0:	3401      	adds	r4, #1
 801ece2:	9304      	str	r3, [sp, #16]
 801ece4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ece8:	482c      	ldr	r0, [pc, #176]	; (801ed9c <_vfiprintf_r+0x250>)
 801ecea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ecee:	2206      	movs	r2, #6
 801ecf0:	f7e1 fa76 	bl	80001e0 <memchr>
 801ecf4:	2800      	cmp	r0, #0
 801ecf6:	d03f      	beq.n	801ed78 <_vfiprintf_r+0x22c>
 801ecf8:	4b29      	ldr	r3, [pc, #164]	; (801eda0 <_vfiprintf_r+0x254>)
 801ecfa:	bb1b      	cbnz	r3, 801ed44 <_vfiprintf_r+0x1f8>
 801ecfc:	9b03      	ldr	r3, [sp, #12]
 801ecfe:	3307      	adds	r3, #7
 801ed00:	f023 0307 	bic.w	r3, r3, #7
 801ed04:	3308      	adds	r3, #8
 801ed06:	9303      	str	r3, [sp, #12]
 801ed08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed0a:	443b      	add	r3, r7
 801ed0c:	9309      	str	r3, [sp, #36]	; 0x24
 801ed0e:	e767      	b.n	801ebe0 <_vfiprintf_r+0x94>
 801ed10:	fb0c 3202 	mla	r2, ip, r2, r3
 801ed14:	460c      	mov	r4, r1
 801ed16:	2001      	movs	r0, #1
 801ed18:	e7a5      	b.n	801ec66 <_vfiprintf_r+0x11a>
 801ed1a:	2300      	movs	r3, #0
 801ed1c:	3401      	adds	r4, #1
 801ed1e:	9305      	str	r3, [sp, #20]
 801ed20:	4619      	mov	r1, r3
 801ed22:	f04f 0c0a 	mov.w	ip, #10
 801ed26:	4620      	mov	r0, r4
 801ed28:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ed2c:	3a30      	subs	r2, #48	; 0x30
 801ed2e:	2a09      	cmp	r2, #9
 801ed30:	d903      	bls.n	801ed3a <_vfiprintf_r+0x1ee>
 801ed32:	2b00      	cmp	r3, #0
 801ed34:	d0c5      	beq.n	801ecc2 <_vfiprintf_r+0x176>
 801ed36:	9105      	str	r1, [sp, #20]
 801ed38:	e7c3      	b.n	801ecc2 <_vfiprintf_r+0x176>
 801ed3a:	fb0c 2101 	mla	r1, ip, r1, r2
 801ed3e:	4604      	mov	r4, r0
 801ed40:	2301      	movs	r3, #1
 801ed42:	e7f0      	b.n	801ed26 <_vfiprintf_r+0x1da>
 801ed44:	ab03      	add	r3, sp, #12
 801ed46:	9300      	str	r3, [sp, #0]
 801ed48:	462a      	mov	r2, r5
 801ed4a:	4b16      	ldr	r3, [pc, #88]	; (801eda4 <_vfiprintf_r+0x258>)
 801ed4c:	a904      	add	r1, sp, #16
 801ed4e:	4630      	mov	r0, r6
 801ed50:	f7fb fe3e 	bl	801a9d0 <_printf_float>
 801ed54:	4607      	mov	r7, r0
 801ed56:	1c78      	adds	r0, r7, #1
 801ed58:	d1d6      	bne.n	801ed08 <_vfiprintf_r+0x1bc>
 801ed5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ed5c:	07d9      	lsls	r1, r3, #31
 801ed5e:	d405      	bmi.n	801ed6c <_vfiprintf_r+0x220>
 801ed60:	89ab      	ldrh	r3, [r5, #12]
 801ed62:	059a      	lsls	r2, r3, #22
 801ed64:	d402      	bmi.n	801ed6c <_vfiprintf_r+0x220>
 801ed66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ed68:	f7ff fea3 	bl	801eab2 <__retarget_lock_release_recursive>
 801ed6c:	89ab      	ldrh	r3, [r5, #12]
 801ed6e:	065b      	lsls	r3, r3, #25
 801ed70:	f53f af12 	bmi.w	801eb98 <_vfiprintf_r+0x4c>
 801ed74:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ed76:	e711      	b.n	801eb9c <_vfiprintf_r+0x50>
 801ed78:	ab03      	add	r3, sp, #12
 801ed7a:	9300      	str	r3, [sp, #0]
 801ed7c:	462a      	mov	r2, r5
 801ed7e:	4b09      	ldr	r3, [pc, #36]	; (801eda4 <_vfiprintf_r+0x258>)
 801ed80:	a904      	add	r1, sp, #16
 801ed82:	4630      	mov	r0, r6
 801ed84:	f7fc f8c8 	bl	801af18 <_printf_i>
 801ed88:	e7e4      	b.n	801ed54 <_vfiprintf_r+0x208>
 801ed8a:	bf00      	nop
 801ed8c:	08021084 	.word	0x08021084
 801ed90:	080210a4 	.word	0x080210a4
 801ed94:	08021064 	.word	0x08021064
 801ed98:	08021014 	.word	0x08021014
 801ed9c:	0802101e 	.word	0x0802101e
 801eda0:	0801a9d1 	.word	0x0801a9d1
 801eda4:	0801eb27 	.word	0x0801eb27
 801eda8:	0802101a 	.word	0x0802101a

0801edac <__swbuf_r>:
 801edac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801edae:	460e      	mov	r6, r1
 801edb0:	4614      	mov	r4, r2
 801edb2:	4605      	mov	r5, r0
 801edb4:	b118      	cbz	r0, 801edbe <__swbuf_r+0x12>
 801edb6:	6983      	ldr	r3, [r0, #24]
 801edb8:	b90b      	cbnz	r3, 801edbe <__swbuf_r+0x12>
 801edba:	f7ff fdc9 	bl	801e950 <__sinit>
 801edbe:	4b21      	ldr	r3, [pc, #132]	; (801ee44 <__swbuf_r+0x98>)
 801edc0:	429c      	cmp	r4, r3
 801edc2:	d12b      	bne.n	801ee1c <__swbuf_r+0x70>
 801edc4:	686c      	ldr	r4, [r5, #4]
 801edc6:	69a3      	ldr	r3, [r4, #24]
 801edc8:	60a3      	str	r3, [r4, #8]
 801edca:	89a3      	ldrh	r3, [r4, #12]
 801edcc:	071a      	lsls	r2, r3, #28
 801edce:	d52f      	bpl.n	801ee30 <__swbuf_r+0x84>
 801edd0:	6923      	ldr	r3, [r4, #16]
 801edd2:	b36b      	cbz	r3, 801ee30 <__swbuf_r+0x84>
 801edd4:	6923      	ldr	r3, [r4, #16]
 801edd6:	6820      	ldr	r0, [r4, #0]
 801edd8:	1ac0      	subs	r0, r0, r3
 801edda:	6963      	ldr	r3, [r4, #20]
 801eddc:	b2f6      	uxtb	r6, r6
 801edde:	4283      	cmp	r3, r0
 801ede0:	4637      	mov	r7, r6
 801ede2:	dc04      	bgt.n	801edee <__swbuf_r+0x42>
 801ede4:	4621      	mov	r1, r4
 801ede6:	4628      	mov	r0, r5
 801ede8:	f7ff fd1e 	bl	801e828 <_fflush_r>
 801edec:	bb30      	cbnz	r0, 801ee3c <__swbuf_r+0x90>
 801edee:	68a3      	ldr	r3, [r4, #8]
 801edf0:	3b01      	subs	r3, #1
 801edf2:	60a3      	str	r3, [r4, #8]
 801edf4:	6823      	ldr	r3, [r4, #0]
 801edf6:	1c5a      	adds	r2, r3, #1
 801edf8:	6022      	str	r2, [r4, #0]
 801edfa:	701e      	strb	r6, [r3, #0]
 801edfc:	6963      	ldr	r3, [r4, #20]
 801edfe:	3001      	adds	r0, #1
 801ee00:	4283      	cmp	r3, r0
 801ee02:	d004      	beq.n	801ee0e <__swbuf_r+0x62>
 801ee04:	89a3      	ldrh	r3, [r4, #12]
 801ee06:	07db      	lsls	r3, r3, #31
 801ee08:	d506      	bpl.n	801ee18 <__swbuf_r+0x6c>
 801ee0a:	2e0a      	cmp	r6, #10
 801ee0c:	d104      	bne.n	801ee18 <__swbuf_r+0x6c>
 801ee0e:	4621      	mov	r1, r4
 801ee10:	4628      	mov	r0, r5
 801ee12:	f7ff fd09 	bl	801e828 <_fflush_r>
 801ee16:	b988      	cbnz	r0, 801ee3c <__swbuf_r+0x90>
 801ee18:	4638      	mov	r0, r7
 801ee1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ee1c:	4b0a      	ldr	r3, [pc, #40]	; (801ee48 <__swbuf_r+0x9c>)
 801ee1e:	429c      	cmp	r4, r3
 801ee20:	d101      	bne.n	801ee26 <__swbuf_r+0x7a>
 801ee22:	68ac      	ldr	r4, [r5, #8]
 801ee24:	e7cf      	b.n	801edc6 <__swbuf_r+0x1a>
 801ee26:	4b09      	ldr	r3, [pc, #36]	; (801ee4c <__swbuf_r+0xa0>)
 801ee28:	429c      	cmp	r4, r3
 801ee2a:	bf08      	it	eq
 801ee2c:	68ec      	ldreq	r4, [r5, #12]
 801ee2e:	e7ca      	b.n	801edc6 <__swbuf_r+0x1a>
 801ee30:	4621      	mov	r1, r4
 801ee32:	4628      	mov	r0, r5
 801ee34:	f000 f80c 	bl	801ee50 <__swsetup_r>
 801ee38:	2800      	cmp	r0, #0
 801ee3a:	d0cb      	beq.n	801edd4 <__swbuf_r+0x28>
 801ee3c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801ee40:	e7ea      	b.n	801ee18 <__swbuf_r+0x6c>
 801ee42:	bf00      	nop
 801ee44:	08021084 	.word	0x08021084
 801ee48:	080210a4 	.word	0x080210a4
 801ee4c:	08021064 	.word	0x08021064

0801ee50 <__swsetup_r>:
 801ee50:	4b32      	ldr	r3, [pc, #200]	; (801ef1c <__swsetup_r+0xcc>)
 801ee52:	b570      	push	{r4, r5, r6, lr}
 801ee54:	681d      	ldr	r5, [r3, #0]
 801ee56:	4606      	mov	r6, r0
 801ee58:	460c      	mov	r4, r1
 801ee5a:	b125      	cbz	r5, 801ee66 <__swsetup_r+0x16>
 801ee5c:	69ab      	ldr	r3, [r5, #24]
 801ee5e:	b913      	cbnz	r3, 801ee66 <__swsetup_r+0x16>
 801ee60:	4628      	mov	r0, r5
 801ee62:	f7ff fd75 	bl	801e950 <__sinit>
 801ee66:	4b2e      	ldr	r3, [pc, #184]	; (801ef20 <__swsetup_r+0xd0>)
 801ee68:	429c      	cmp	r4, r3
 801ee6a:	d10f      	bne.n	801ee8c <__swsetup_r+0x3c>
 801ee6c:	686c      	ldr	r4, [r5, #4]
 801ee6e:	89a3      	ldrh	r3, [r4, #12]
 801ee70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ee74:	0719      	lsls	r1, r3, #28
 801ee76:	d42c      	bmi.n	801eed2 <__swsetup_r+0x82>
 801ee78:	06dd      	lsls	r5, r3, #27
 801ee7a:	d411      	bmi.n	801eea0 <__swsetup_r+0x50>
 801ee7c:	2309      	movs	r3, #9
 801ee7e:	6033      	str	r3, [r6, #0]
 801ee80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ee84:	81a3      	strh	r3, [r4, #12]
 801ee86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ee8a:	e03e      	b.n	801ef0a <__swsetup_r+0xba>
 801ee8c:	4b25      	ldr	r3, [pc, #148]	; (801ef24 <__swsetup_r+0xd4>)
 801ee8e:	429c      	cmp	r4, r3
 801ee90:	d101      	bne.n	801ee96 <__swsetup_r+0x46>
 801ee92:	68ac      	ldr	r4, [r5, #8]
 801ee94:	e7eb      	b.n	801ee6e <__swsetup_r+0x1e>
 801ee96:	4b24      	ldr	r3, [pc, #144]	; (801ef28 <__swsetup_r+0xd8>)
 801ee98:	429c      	cmp	r4, r3
 801ee9a:	bf08      	it	eq
 801ee9c:	68ec      	ldreq	r4, [r5, #12]
 801ee9e:	e7e6      	b.n	801ee6e <__swsetup_r+0x1e>
 801eea0:	0758      	lsls	r0, r3, #29
 801eea2:	d512      	bpl.n	801eeca <__swsetup_r+0x7a>
 801eea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801eea6:	b141      	cbz	r1, 801eeba <__swsetup_r+0x6a>
 801eea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801eeac:	4299      	cmp	r1, r3
 801eeae:	d002      	beq.n	801eeb6 <__swsetup_r+0x66>
 801eeb0:	4630      	mov	r0, r6
 801eeb2:	f7fb fc43 	bl	801a73c <_free_r>
 801eeb6:	2300      	movs	r3, #0
 801eeb8:	6363      	str	r3, [r4, #52]	; 0x34
 801eeba:	89a3      	ldrh	r3, [r4, #12]
 801eebc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801eec0:	81a3      	strh	r3, [r4, #12]
 801eec2:	2300      	movs	r3, #0
 801eec4:	6063      	str	r3, [r4, #4]
 801eec6:	6923      	ldr	r3, [r4, #16]
 801eec8:	6023      	str	r3, [r4, #0]
 801eeca:	89a3      	ldrh	r3, [r4, #12]
 801eecc:	f043 0308 	orr.w	r3, r3, #8
 801eed0:	81a3      	strh	r3, [r4, #12]
 801eed2:	6923      	ldr	r3, [r4, #16]
 801eed4:	b94b      	cbnz	r3, 801eeea <__swsetup_r+0x9a>
 801eed6:	89a3      	ldrh	r3, [r4, #12]
 801eed8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801eedc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801eee0:	d003      	beq.n	801eeea <__swsetup_r+0x9a>
 801eee2:	4621      	mov	r1, r4
 801eee4:	4630      	mov	r0, r6
 801eee6:	f000 f84d 	bl	801ef84 <__smakebuf_r>
 801eeea:	89a0      	ldrh	r0, [r4, #12]
 801eeec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801eef0:	f010 0301 	ands.w	r3, r0, #1
 801eef4:	d00a      	beq.n	801ef0c <__swsetup_r+0xbc>
 801eef6:	2300      	movs	r3, #0
 801eef8:	60a3      	str	r3, [r4, #8]
 801eefa:	6963      	ldr	r3, [r4, #20]
 801eefc:	425b      	negs	r3, r3
 801eefe:	61a3      	str	r3, [r4, #24]
 801ef00:	6923      	ldr	r3, [r4, #16]
 801ef02:	b943      	cbnz	r3, 801ef16 <__swsetup_r+0xc6>
 801ef04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ef08:	d1ba      	bne.n	801ee80 <__swsetup_r+0x30>
 801ef0a:	bd70      	pop	{r4, r5, r6, pc}
 801ef0c:	0781      	lsls	r1, r0, #30
 801ef0e:	bf58      	it	pl
 801ef10:	6963      	ldrpl	r3, [r4, #20]
 801ef12:	60a3      	str	r3, [r4, #8]
 801ef14:	e7f4      	b.n	801ef00 <__swsetup_r+0xb0>
 801ef16:	2000      	movs	r0, #0
 801ef18:	e7f7      	b.n	801ef0a <__swsetup_r+0xba>
 801ef1a:	bf00      	nop
 801ef1c:	2000008c 	.word	0x2000008c
 801ef20:	08021084 	.word	0x08021084
 801ef24:	080210a4 	.word	0x080210a4
 801ef28:	08021064 	.word	0x08021064

0801ef2c <abort>:
 801ef2c:	b508      	push	{r3, lr}
 801ef2e:	2006      	movs	r0, #6
 801ef30:	f000 f890 	bl	801f054 <raise>
 801ef34:	2001      	movs	r0, #1
 801ef36:	f7ed faf9 	bl	800c52c <_exit>

0801ef3a <__swhatbuf_r>:
 801ef3a:	b570      	push	{r4, r5, r6, lr}
 801ef3c:	460e      	mov	r6, r1
 801ef3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ef42:	2900      	cmp	r1, #0
 801ef44:	b096      	sub	sp, #88	; 0x58
 801ef46:	4614      	mov	r4, r2
 801ef48:	461d      	mov	r5, r3
 801ef4a:	da07      	bge.n	801ef5c <__swhatbuf_r+0x22>
 801ef4c:	2300      	movs	r3, #0
 801ef4e:	602b      	str	r3, [r5, #0]
 801ef50:	89b3      	ldrh	r3, [r6, #12]
 801ef52:	061a      	lsls	r2, r3, #24
 801ef54:	d410      	bmi.n	801ef78 <__swhatbuf_r+0x3e>
 801ef56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ef5a:	e00e      	b.n	801ef7a <__swhatbuf_r+0x40>
 801ef5c:	466a      	mov	r2, sp
 801ef5e:	f000 f895 	bl	801f08c <_fstat_r>
 801ef62:	2800      	cmp	r0, #0
 801ef64:	dbf2      	blt.n	801ef4c <__swhatbuf_r+0x12>
 801ef66:	9a01      	ldr	r2, [sp, #4]
 801ef68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ef6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ef70:	425a      	negs	r2, r3
 801ef72:	415a      	adcs	r2, r3
 801ef74:	602a      	str	r2, [r5, #0]
 801ef76:	e7ee      	b.n	801ef56 <__swhatbuf_r+0x1c>
 801ef78:	2340      	movs	r3, #64	; 0x40
 801ef7a:	2000      	movs	r0, #0
 801ef7c:	6023      	str	r3, [r4, #0]
 801ef7e:	b016      	add	sp, #88	; 0x58
 801ef80:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ef84 <__smakebuf_r>:
 801ef84:	898b      	ldrh	r3, [r1, #12]
 801ef86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ef88:	079d      	lsls	r5, r3, #30
 801ef8a:	4606      	mov	r6, r0
 801ef8c:	460c      	mov	r4, r1
 801ef8e:	d507      	bpl.n	801efa0 <__smakebuf_r+0x1c>
 801ef90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ef94:	6023      	str	r3, [r4, #0]
 801ef96:	6123      	str	r3, [r4, #16]
 801ef98:	2301      	movs	r3, #1
 801ef9a:	6163      	str	r3, [r4, #20]
 801ef9c:	b002      	add	sp, #8
 801ef9e:	bd70      	pop	{r4, r5, r6, pc}
 801efa0:	ab01      	add	r3, sp, #4
 801efa2:	466a      	mov	r2, sp
 801efa4:	f7ff ffc9 	bl	801ef3a <__swhatbuf_r>
 801efa8:	9900      	ldr	r1, [sp, #0]
 801efaa:	4605      	mov	r5, r0
 801efac:	4630      	mov	r0, r6
 801efae:	f7fb fc15 	bl	801a7dc <_malloc_r>
 801efb2:	b948      	cbnz	r0, 801efc8 <__smakebuf_r+0x44>
 801efb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801efb8:	059a      	lsls	r2, r3, #22
 801efba:	d4ef      	bmi.n	801ef9c <__smakebuf_r+0x18>
 801efbc:	f023 0303 	bic.w	r3, r3, #3
 801efc0:	f043 0302 	orr.w	r3, r3, #2
 801efc4:	81a3      	strh	r3, [r4, #12]
 801efc6:	e7e3      	b.n	801ef90 <__smakebuf_r+0xc>
 801efc8:	4b0d      	ldr	r3, [pc, #52]	; (801f000 <__smakebuf_r+0x7c>)
 801efca:	62b3      	str	r3, [r6, #40]	; 0x28
 801efcc:	89a3      	ldrh	r3, [r4, #12]
 801efce:	6020      	str	r0, [r4, #0]
 801efd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801efd4:	81a3      	strh	r3, [r4, #12]
 801efd6:	9b00      	ldr	r3, [sp, #0]
 801efd8:	6163      	str	r3, [r4, #20]
 801efda:	9b01      	ldr	r3, [sp, #4]
 801efdc:	6120      	str	r0, [r4, #16]
 801efde:	b15b      	cbz	r3, 801eff8 <__smakebuf_r+0x74>
 801efe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801efe4:	4630      	mov	r0, r6
 801efe6:	f000 f863 	bl	801f0b0 <_isatty_r>
 801efea:	b128      	cbz	r0, 801eff8 <__smakebuf_r+0x74>
 801efec:	89a3      	ldrh	r3, [r4, #12]
 801efee:	f023 0303 	bic.w	r3, r3, #3
 801eff2:	f043 0301 	orr.w	r3, r3, #1
 801eff6:	81a3      	strh	r3, [r4, #12]
 801eff8:	89a0      	ldrh	r0, [r4, #12]
 801effa:	4305      	orrs	r5, r0
 801effc:	81a5      	strh	r5, [r4, #12]
 801effe:	e7cd      	b.n	801ef9c <__smakebuf_r+0x18>
 801f000:	0801e8e9 	.word	0x0801e8e9

0801f004 <_raise_r>:
 801f004:	291f      	cmp	r1, #31
 801f006:	b538      	push	{r3, r4, r5, lr}
 801f008:	4604      	mov	r4, r0
 801f00a:	460d      	mov	r5, r1
 801f00c:	d904      	bls.n	801f018 <_raise_r+0x14>
 801f00e:	2316      	movs	r3, #22
 801f010:	6003      	str	r3, [r0, #0]
 801f012:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f016:	bd38      	pop	{r3, r4, r5, pc}
 801f018:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801f01a:	b112      	cbz	r2, 801f022 <_raise_r+0x1e>
 801f01c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f020:	b94b      	cbnz	r3, 801f036 <_raise_r+0x32>
 801f022:	4620      	mov	r0, r4
 801f024:	f000 f830 	bl	801f088 <_getpid_r>
 801f028:	462a      	mov	r2, r5
 801f02a:	4601      	mov	r1, r0
 801f02c:	4620      	mov	r0, r4
 801f02e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f032:	f000 b817 	b.w	801f064 <_kill_r>
 801f036:	2b01      	cmp	r3, #1
 801f038:	d00a      	beq.n	801f050 <_raise_r+0x4c>
 801f03a:	1c59      	adds	r1, r3, #1
 801f03c:	d103      	bne.n	801f046 <_raise_r+0x42>
 801f03e:	2316      	movs	r3, #22
 801f040:	6003      	str	r3, [r0, #0]
 801f042:	2001      	movs	r0, #1
 801f044:	e7e7      	b.n	801f016 <_raise_r+0x12>
 801f046:	2400      	movs	r4, #0
 801f048:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f04c:	4628      	mov	r0, r5
 801f04e:	4798      	blx	r3
 801f050:	2000      	movs	r0, #0
 801f052:	e7e0      	b.n	801f016 <_raise_r+0x12>

0801f054 <raise>:
 801f054:	4b02      	ldr	r3, [pc, #8]	; (801f060 <raise+0xc>)
 801f056:	4601      	mov	r1, r0
 801f058:	6818      	ldr	r0, [r3, #0]
 801f05a:	f7ff bfd3 	b.w	801f004 <_raise_r>
 801f05e:	bf00      	nop
 801f060:	2000008c 	.word	0x2000008c

0801f064 <_kill_r>:
 801f064:	b538      	push	{r3, r4, r5, lr}
 801f066:	4d07      	ldr	r5, [pc, #28]	; (801f084 <_kill_r+0x20>)
 801f068:	2300      	movs	r3, #0
 801f06a:	4604      	mov	r4, r0
 801f06c:	4608      	mov	r0, r1
 801f06e:	4611      	mov	r1, r2
 801f070:	602b      	str	r3, [r5, #0]
 801f072:	f7ed fa4b 	bl	800c50c <_kill>
 801f076:	1c43      	adds	r3, r0, #1
 801f078:	d102      	bne.n	801f080 <_kill_r+0x1c>
 801f07a:	682b      	ldr	r3, [r5, #0]
 801f07c:	b103      	cbz	r3, 801f080 <_kill_r+0x1c>
 801f07e:	6023      	str	r3, [r4, #0]
 801f080:	bd38      	pop	{r3, r4, r5, pc}
 801f082:	bf00      	nop
 801f084:	2000aab8 	.word	0x2000aab8

0801f088 <_getpid_r>:
 801f088:	f7ed ba38 	b.w	800c4fc <_getpid>

0801f08c <_fstat_r>:
 801f08c:	b538      	push	{r3, r4, r5, lr}
 801f08e:	4d07      	ldr	r5, [pc, #28]	; (801f0ac <_fstat_r+0x20>)
 801f090:	2300      	movs	r3, #0
 801f092:	4604      	mov	r4, r0
 801f094:	4608      	mov	r0, r1
 801f096:	4611      	mov	r1, r2
 801f098:	602b      	str	r3, [r5, #0]
 801f09a:	f7ed fa96 	bl	800c5ca <_fstat>
 801f09e:	1c43      	adds	r3, r0, #1
 801f0a0:	d102      	bne.n	801f0a8 <_fstat_r+0x1c>
 801f0a2:	682b      	ldr	r3, [r5, #0]
 801f0a4:	b103      	cbz	r3, 801f0a8 <_fstat_r+0x1c>
 801f0a6:	6023      	str	r3, [r4, #0]
 801f0a8:	bd38      	pop	{r3, r4, r5, pc}
 801f0aa:	bf00      	nop
 801f0ac:	2000aab8 	.word	0x2000aab8

0801f0b0 <_isatty_r>:
 801f0b0:	b538      	push	{r3, r4, r5, lr}
 801f0b2:	4d06      	ldr	r5, [pc, #24]	; (801f0cc <_isatty_r+0x1c>)
 801f0b4:	2300      	movs	r3, #0
 801f0b6:	4604      	mov	r4, r0
 801f0b8:	4608      	mov	r0, r1
 801f0ba:	602b      	str	r3, [r5, #0]
 801f0bc:	f7ed fa95 	bl	800c5ea <_isatty>
 801f0c0:	1c43      	adds	r3, r0, #1
 801f0c2:	d102      	bne.n	801f0ca <_isatty_r+0x1a>
 801f0c4:	682b      	ldr	r3, [r5, #0]
 801f0c6:	b103      	cbz	r3, 801f0ca <_isatty_r+0x1a>
 801f0c8:	6023      	str	r3, [r4, #0]
 801f0ca:	bd38      	pop	{r3, r4, r5, pc}
 801f0cc:	2000aab8 	.word	0x2000aab8

0801f0d0 <atanf>:
 801f0d0:	b538      	push	{r3, r4, r5, lr}
 801f0d2:	ee10 5a10 	vmov	r5, s0
 801f0d6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801f0da:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801f0de:	eef0 7a40 	vmov.f32	s15, s0
 801f0e2:	db10      	blt.n	801f106 <atanf+0x36>
 801f0e4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801f0e8:	dd04      	ble.n	801f0f4 <atanf+0x24>
 801f0ea:	ee70 7a00 	vadd.f32	s15, s0, s0
 801f0ee:	eeb0 0a67 	vmov.f32	s0, s15
 801f0f2:	bd38      	pop	{r3, r4, r5, pc}
 801f0f4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801f22c <atanf+0x15c>
 801f0f8:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801f230 <atanf+0x160>
 801f0fc:	2d00      	cmp	r5, #0
 801f0fe:	bfd8      	it	le
 801f100:	eef0 7a40 	vmovle.f32	s15, s0
 801f104:	e7f3      	b.n	801f0ee <atanf+0x1e>
 801f106:	4b4b      	ldr	r3, [pc, #300]	; (801f234 <atanf+0x164>)
 801f108:	429c      	cmp	r4, r3
 801f10a:	dc10      	bgt.n	801f12e <atanf+0x5e>
 801f10c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801f110:	da0a      	bge.n	801f128 <atanf+0x58>
 801f112:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801f238 <atanf+0x168>
 801f116:	ee30 7a07 	vadd.f32	s14, s0, s14
 801f11a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f11e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801f122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f126:	dce2      	bgt.n	801f0ee <atanf+0x1e>
 801f128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f12c:	e013      	b.n	801f156 <atanf+0x86>
 801f12e:	f000 f8e3 	bl	801f2f8 <fabsf>
 801f132:	4b42      	ldr	r3, [pc, #264]	; (801f23c <atanf+0x16c>)
 801f134:	429c      	cmp	r4, r3
 801f136:	dc4f      	bgt.n	801f1d8 <atanf+0x108>
 801f138:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801f13c:	429c      	cmp	r4, r3
 801f13e:	dc41      	bgt.n	801f1c4 <atanf+0xf4>
 801f140:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801f144:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801f148:	eea0 7a27 	vfma.f32	s14, s0, s15
 801f14c:	2300      	movs	r3, #0
 801f14e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801f152:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f156:	1c5a      	adds	r2, r3, #1
 801f158:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801f15c:	eddf 5a38 	vldr	s11, [pc, #224]	; 801f240 <atanf+0x170>
 801f160:	ed9f 6a38 	vldr	s12, [pc, #224]	; 801f244 <atanf+0x174>
 801f164:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801f248 <atanf+0x178>
 801f168:	ed9f 0a38 	vldr	s0, [pc, #224]	; 801f24c <atanf+0x17c>
 801f16c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801f170:	eea7 6a25 	vfma.f32	s12, s14, s11
 801f174:	eddf 5a36 	vldr	s11, [pc, #216]	; 801f250 <atanf+0x180>
 801f178:	eee6 5a07 	vfma.f32	s11, s12, s14
 801f17c:	ed9f 6a35 	vldr	s12, [pc, #212]	; 801f254 <atanf+0x184>
 801f180:	eea5 6a87 	vfma.f32	s12, s11, s14
 801f184:	eddf 5a34 	vldr	s11, [pc, #208]	; 801f258 <atanf+0x188>
 801f188:	eee6 5a07 	vfma.f32	s11, s12, s14
 801f18c:	ed9f 6a33 	vldr	s12, [pc, #204]	; 801f25c <atanf+0x18c>
 801f190:	eea5 6a87 	vfma.f32	s12, s11, s14
 801f194:	eddf 5a32 	vldr	s11, [pc, #200]	; 801f260 <atanf+0x190>
 801f198:	eee7 5a05 	vfma.f32	s11, s14, s10
 801f19c:	ed9f 5a31 	vldr	s10, [pc, #196]	; 801f264 <atanf+0x194>
 801f1a0:	eea5 5a87 	vfma.f32	s10, s11, s14
 801f1a4:	eddf 5a30 	vldr	s11, [pc, #192]	; 801f268 <atanf+0x198>
 801f1a8:	eee5 5a07 	vfma.f32	s11, s10, s14
 801f1ac:	eea5 0a87 	vfma.f32	s0, s11, s14
 801f1b0:	ee20 0a07 	vmul.f32	s0, s0, s14
 801f1b4:	eea6 0a26 	vfma.f32	s0, s12, s13
 801f1b8:	ee27 0a80 	vmul.f32	s0, s15, s0
 801f1bc:	d121      	bne.n	801f202 <atanf+0x132>
 801f1be:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f1c2:	e794      	b.n	801f0ee <atanf+0x1e>
 801f1c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f1c8:	ee30 7a67 	vsub.f32	s14, s0, s15
 801f1cc:	ee30 0a27 	vadd.f32	s0, s0, s15
 801f1d0:	2301      	movs	r3, #1
 801f1d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f1d6:	e7be      	b.n	801f156 <atanf+0x86>
 801f1d8:	4b24      	ldr	r3, [pc, #144]	; (801f26c <atanf+0x19c>)
 801f1da:	429c      	cmp	r4, r3
 801f1dc:	dc0b      	bgt.n	801f1f6 <atanf+0x126>
 801f1de:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801f1e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f1e6:	eea0 7a27 	vfma.f32	s14, s0, s15
 801f1ea:	2302      	movs	r3, #2
 801f1ec:	ee70 6a67 	vsub.f32	s13, s0, s15
 801f1f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f1f4:	e7af      	b.n	801f156 <atanf+0x86>
 801f1f6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801f1fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f1fe:	2303      	movs	r3, #3
 801f200:	e7a9      	b.n	801f156 <atanf+0x86>
 801f202:	4a1b      	ldr	r2, [pc, #108]	; (801f270 <atanf+0x1a0>)
 801f204:	491b      	ldr	r1, [pc, #108]	; (801f274 <atanf+0x1a4>)
 801f206:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801f20a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801f20e:	ed93 7a00 	vldr	s14, [r3]
 801f212:	ee30 0a47 	vsub.f32	s0, s0, s14
 801f216:	2d00      	cmp	r5, #0
 801f218:	ee70 7a67 	vsub.f32	s15, s0, s15
 801f21c:	ed92 0a00 	vldr	s0, [r2]
 801f220:	ee70 7a67 	vsub.f32	s15, s0, s15
 801f224:	bfb8      	it	lt
 801f226:	eef1 7a67 	vneglt.f32	s15, s15
 801f22a:	e760      	b.n	801f0ee <atanf+0x1e>
 801f22c:	3fc90fdb 	.word	0x3fc90fdb
 801f230:	bfc90fdb 	.word	0xbfc90fdb
 801f234:	3edfffff 	.word	0x3edfffff
 801f238:	7149f2ca 	.word	0x7149f2ca
 801f23c:	3f97ffff 	.word	0x3f97ffff
 801f240:	3c8569d7 	.word	0x3c8569d7
 801f244:	3d4bda59 	.word	0x3d4bda59
 801f248:	bd15a221 	.word	0xbd15a221
 801f24c:	be4ccccd 	.word	0xbe4ccccd
 801f250:	3d886b35 	.word	0x3d886b35
 801f254:	3dba2e6e 	.word	0x3dba2e6e
 801f258:	3e124925 	.word	0x3e124925
 801f25c:	3eaaaaab 	.word	0x3eaaaaab
 801f260:	bd6ef16b 	.word	0xbd6ef16b
 801f264:	bd9d8795 	.word	0xbd9d8795
 801f268:	bde38e38 	.word	0xbde38e38
 801f26c:	401bffff 	.word	0x401bffff
 801f270:	080210c4 	.word	0x080210c4
 801f274:	080210d4 	.word	0x080210d4

0801f278 <cosf>:
 801f278:	ee10 3a10 	vmov	r3, s0
 801f27c:	b507      	push	{r0, r1, r2, lr}
 801f27e:	4a1c      	ldr	r2, [pc, #112]	; (801f2f0 <cosf+0x78>)
 801f280:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f284:	4293      	cmp	r3, r2
 801f286:	dc04      	bgt.n	801f292 <cosf+0x1a>
 801f288:	eddf 0a1a 	vldr	s1, [pc, #104]	; 801f2f4 <cosf+0x7c>
 801f28c:	f000 fdb8 	bl	801fe00 <__kernel_cosf>
 801f290:	e004      	b.n	801f29c <cosf+0x24>
 801f292:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801f296:	db04      	blt.n	801f2a2 <cosf+0x2a>
 801f298:	ee30 0a40 	vsub.f32	s0, s0, s0
 801f29c:	b003      	add	sp, #12
 801f29e:	f85d fb04 	ldr.w	pc, [sp], #4
 801f2a2:	4668      	mov	r0, sp
 801f2a4:	f000 fc6c 	bl	801fb80 <__ieee754_rem_pio2f>
 801f2a8:	f000 0003 	and.w	r0, r0, #3
 801f2ac:	2801      	cmp	r0, #1
 801f2ae:	d007      	beq.n	801f2c0 <cosf+0x48>
 801f2b0:	2802      	cmp	r0, #2
 801f2b2:	d00e      	beq.n	801f2d2 <cosf+0x5a>
 801f2b4:	b9a0      	cbnz	r0, 801f2e0 <cosf+0x68>
 801f2b6:	eddd 0a01 	vldr	s1, [sp, #4]
 801f2ba:	ed9d 0a00 	vldr	s0, [sp]
 801f2be:	e7e5      	b.n	801f28c <cosf+0x14>
 801f2c0:	eddd 0a01 	vldr	s1, [sp, #4]
 801f2c4:	ed9d 0a00 	vldr	s0, [sp]
 801f2c8:	f001 f884 	bl	80203d4 <__kernel_sinf>
 801f2cc:	eeb1 0a40 	vneg.f32	s0, s0
 801f2d0:	e7e4      	b.n	801f29c <cosf+0x24>
 801f2d2:	eddd 0a01 	vldr	s1, [sp, #4]
 801f2d6:	ed9d 0a00 	vldr	s0, [sp]
 801f2da:	f000 fd91 	bl	801fe00 <__kernel_cosf>
 801f2de:	e7f5      	b.n	801f2cc <cosf+0x54>
 801f2e0:	eddd 0a01 	vldr	s1, [sp, #4]
 801f2e4:	ed9d 0a00 	vldr	s0, [sp]
 801f2e8:	2001      	movs	r0, #1
 801f2ea:	f001 f873 	bl	80203d4 <__kernel_sinf>
 801f2ee:	e7d5      	b.n	801f29c <cosf+0x24>
 801f2f0:	3f490fd8 	.word	0x3f490fd8
 801f2f4:	00000000 	.word	0x00000000

0801f2f8 <fabsf>:
 801f2f8:	ee10 3a10 	vmov	r3, s0
 801f2fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f300:	ee00 3a10 	vmov	s0, r3
 801f304:	4770      	bx	lr
	...

0801f308 <sinf>:
 801f308:	ee10 3a10 	vmov	r3, s0
 801f30c:	b507      	push	{r0, r1, r2, lr}
 801f30e:	4a1d      	ldr	r2, [pc, #116]	; (801f384 <sinf+0x7c>)
 801f310:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f314:	4293      	cmp	r3, r2
 801f316:	dc05      	bgt.n	801f324 <sinf+0x1c>
 801f318:	eddf 0a1b 	vldr	s1, [pc, #108]	; 801f388 <sinf+0x80>
 801f31c:	2000      	movs	r0, #0
 801f31e:	f001 f859 	bl	80203d4 <__kernel_sinf>
 801f322:	e004      	b.n	801f32e <sinf+0x26>
 801f324:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801f328:	db04      	blt.n	801f334 <sinf+0x2c>
 801f32a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801f32e:	b003      	add	sp, #12
 801f330:	f85d fb04 	ldr.w	pc, [sp], #4
 801f334:	4668      	mov	r0, sp
 801f336:	f000 fc23 	bl	801fb80 <__ieee754_rem_pio2f>
 801f33a:	f000 0003 	and.w	r0, r0, #3
 801f33e:	2801      	cmp	r0, #1
 801f340:	d008      	beq.n	801f354 <sinf+0x4c>
 801f342:	2802      	cmp	r0, #2
 801f344:	d00d      	beq.n	801f362 <sinf+0x5a>
 801f346:	b9b0      	cbnz	r0, 801f376 <sinf+0x6e>
 801f348:	eddd 0a01 	vldr	s1, [sp, #4]
 801f34c:	ed9d 0a00 	vldr	s0, [sp]
 801f350:	2001      	movs	r0, #1
 801f352:	e7e4      	b.n	801f31e <sinf+0x16>
 801f354:	eddd 0a01 	vldr	s1, [sp, #4]
 801f358:	ed9d 0a00 	vldr	s0, [sp]
 801f35c:	f000 fd50 	bl	801fe00 <__kernel_cosf>
 801f360:	e7e5      	b.n	801f32e <sinf+0x26>
 801f362:	eddd 0a01 	vldr	s1, [sp, #4]
 801f366:	ed9d 0a00 	vldr	s0, [sp]
 801f36a:	2001      	movs	r0, #1
 801f36c:	f001 f832 	bl	80203d4 <__kernel_sinf>
 801f370:	eeb1 0a40 	vneg.f32	s0, s0
 801f374:	e7db      	b.n	801f32e <sinf+0x26>
 801f376:	eddd 0a01 	vldr	s1, [sp, #4]
 801f37a:	ed9d 0a00 	vldr	s0, [sp]
 801f37e:	f000 fd3f 	bl	801fe00 <__kernel_cosf>
 801f382:	e7f5      	b.n	801f370 <sinf+0x68>
 801f384:	3f490fd8 	.word	0x3f490fd8
 801f388:	00000000 	.word	0x00000000

0801f38c <atan2f>:
 801f38c:	f000 b898 	b.w	801f4c0 <__ieee754_atan2f>

0801f390 <powf>:
 801f390:	b508      	push	{r3, lr}
 801f392:	ed2d 8b04 	vpush	{d8-d9}
 801f396:	eeb0 9a40 	vmov.f32	s18, s0
 801f39a:	eef0 8a60 	vmov.f32	s17, s1
 801f39e:	f000 f92f 	bl	801f600 <__ieee754_powf>
 801f3a2:	4b43      	ldr	r3, [pc, #268]	; (801f4b0 <powf+0x120>)
 801f3a4:	f993 3000 	ldrsb.w	r3, [r3]
 801f3a8:	3301      	adds	r3, #1
 801f3aa:	eeb0 8a40 	vmov.f32	s16, s0
 801f3ae:	d012      	beq.n	801f3d6 <powf+0x46>
 801f3b0:	eef4 8a68 	vcmp.f32	s17, s17
 801f3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3b8:	d60d      	bvs.n	801f3d6 <powf+0x46>
 801f3ba:	eeb4 9a49 	vcmp.f32	s18, s18
 801f3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3c2:	d70d      	bvc.n	801f3e0 <powf+0x50>
 801f3c4:	eef5 8a40 	vcmp.f32	s17, #0.0
 801f3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f3d0:	bf08      	it	eq
 801f3d2:	eeb0 8a67 	vmoveq.f32	s16, s15
 801f3d6:	eeb0 0a48 	vmov.f32	s0, s16
 801f3da:	ecbd 8b04 	vpop	{d8-d9}
 801f3de:	bd08      	pop	{r3, pc}
 801f3e0:	eddf 9a34 	vldr	s19, [pc, #208]	; 801f4b4 <powf+0x124>
 801f3e4:	eeb4 9a69 	vcmp.f32	s18, s19
 801f3e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3ec:	d116      	bne.n	801f41c <powf+0x8c>
 801f3ee:	eef4 8a69 	vcmp.f32	s17, s19
 801f3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3f6:	d057      	beq.n	801f4a8 <powf+0x118>
 801f3f8:	eeb0 0a68 	vmov.f32	s0, s17
 801f3fc:	f7ff f944 	bl	801e688 <finitef>
 801f400:	2800      	cmp	r0, #0
 801f402:	d0e8      	beq.n	801f3d6 <powf+0x46>
 801f404:	eef4 8ae9 	vcmpe.f32	s17, s19
 801f408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f40c:	d5e3      	bpl.n	801f3d6 <powf+0x46>
 801f40e:	f7fb f94d 	bl	801a6ac <__errno>
 801f412:	2321      	movs	r3, #33	; 0x21
 801f414:	6003      	str	r3, [r0, #0]
 801f416:	ed9f 8a28 	vldr	s16, [pc, #160]	; 801f4b8 <powf+0x128>
 801f41a:	e7dc      	b.n	801f3d6 <powf+0x46>
 801f41c:	f7ff f934 	bl	801e688 <finitef>
 801f420:	bb50      	cbnz	r0, 801f478 <powf+0xe8>
 801f422:	eeb0 0a49 	vmov.f32	s0, s18
 801f426:	f7ff f92f 	bl	801e688 <finitef>
 801f42a:	b328      	cbz	r0, 801f478 <powf+0xe8>
 801f42c:	eeb0 0a68 	vmov.f32	s0, s17
 801f430:	f7ff f92a 	bl	801e688 <finitef>
 801f434:	b300      	cbz	r0, 801f478 <powf+0xe8>
 801f436:	eeb4 8a48 	vcmp.f32	s16, s16
 801f43a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f43e:	d706      	bvc.n	801f44e <powf+0xbe>
 801f440:	f7fb f934 	bl	801a6ac <__errno>
 801f444:	2321      	movs	r3, #33	; 0x21
 801f446:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 801f44a:	6003      	str	r3, [r0, #0]
 801f44c:	e7c3      	b.n	801f3d6 <powf+0x46>
 801f44e:	f7fb f92d 	bl	801a6ac <__errno>
 801f452:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 801f456:	2322      	movs	r3, #34	; 0x22
 801f458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f45c:	6003      	str	r3, [r0, #0]
 801f45e:	d508      	bpl.n	801f472 <powf+0xe2>
 801f460:	eeb0 0a68 	vmov.f32	s0, s17
 801f464:	f001 f840 	bl	80204e8 <rintf>
 801f468:	eeb4 0a68 	vcmp.f32	s0, s17
 801f46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f470:	d1d1      	bne.n	801f416 <powf+0x86>
 801f472:	ed9f 8a12 	vldr	s16, [pc, #72]	; 801f4bc <powf+0x12c>
 801f476:	e7ae      	b.n	801f3d6 <powf+0x46>
 801f478:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801f47c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f480:	d1a9      	bne.n	801f3d6 <powf+0x46>
 801f482:	eeb0 0a49 	vmov.f32	s0, s18
 801f486:	f7ff f8ff 	bl	801e688 <finitef>
 801f48a:	2800      	cmp	r0, #0
 801f48c:	d0a3      	beq.n	801f3d6 <powf+0x46>
 801f48e:	eeb0 0a68 	vmov.f32	s0, s17
 801f492:	f7ff f8f9 	bl	801e688 <finitef>
 801f496:	2800      	cmp	r0, #0
 801f498:	d09d      	beq.n	801f3d6 <powf+0x46>
 801f49a:	f7fb f907 	bl	801a6ac <__errno>
 801f49e:	2322      	movs	r3, #34	; 0x22
 801f4a0:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801f4b4 <powf+0x124>
 801f4a4:	6003      	str	r3, [r0, #0]
 801f4a6:	e796      	b.n	801f3d6 <powf+0x46>
 801f4a8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801f4ac:	e793      	b.n	801f3d6 <powf+0x46>
 801f4ae:	bf00      	nop
 801f4b0:	20000260 	.word	0x20000260
 801f4b4:	00000000 	.word	0x00000000
 801f4b8:	ff800000 	.word	0xff800000
 801f4bc:	7f800000 	.word	0x7f800000

0801f4c0 <__ieee754_atan2f>:
 801f4c0:	ee10 2a90 	vmov	r2, s1
 801f4c4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801f4c8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801f4cc:	b510      	push	{r4, lr}
 801f4ce:	eef0 7a40 	vmov.f32	s15, s0
 801f4d2:	dc06      	bgt.n	801f4e2 <__ieee754_atan2f+0x22>
 801f4d4:	ee10 0a10 	vmov	r0, s0
 801f4d8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801f4dc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801f4e0:	dd04      	ble.n	801f4ec <__ieee754_atan2f+0x2c>
 801f4e2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801f4e6:	eeb0 0a67 	vmov.f32	s0, s15
 801f4ea:	bd10      	pop	{r4, pc}
 801f4ec:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801f4f0:	d103      	bne.n	801f4fa <__ieee754_atan2f+0x3a>
 801f4f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f4f6:	f7ff bdeb 	b.w	801f0d0 <atanf>
 801f4fa:	1794      	asrs	r4, r2, #30
 801f4fc:	f004 0402 	and.w	r4, r4, #2
 801f500:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801f504:	b943      	cbnz	r3, 801f518 <__ieee754_atan2f+0x58>
 801f506:	2c02      	cmp	r4, #2
 801f508:	d05e      	beq.n	801f5c8 <__ieee754_atan2f+0x108>
 801f50a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801f5dc <__ieee754_atan2f+0x11c>
 801f50e:	2c03      	cmp	r4, #3
 801f510:	bf08      	it	eq
 801f512:	eef0 7a47 	vmoveq.f32	s15, s14
 801f516:	e7e6      	b.n	801f4e6 <__ieee754_atan2f+0x26>
 801f518:	b941      	cbnz	r1, 801f52c <__ieee754_atan2f+0x6c>
 801f51a:	eddf 7a31 	vldr	s15, [pc, #196]	; 801f5e0 <__ieee754_atan2f+0x120>
 801f51e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 801f5e4 <__ieee754_atan2f+0x124>
 801f522:	2800      	cmp	r0, #0
 801f524:	bfb8      	it	lt
 801f526:	eef0 7a40 	vmovlt.f32	s15, s0
 801f52a:	e7dc      	b.n	801f4e6 <__ieee754_atan2f+0x26>
 801f52c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801f530:	d110      	bne.n	801f554 <__ieee754_atan2f+0x94>
 801f532:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801f536:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801f53a:	d107      	bne.n	801f54c <__ieee754_atan2f+0x8c>
 801f53c:	2c02      	cmp	r4, #2
 801f53e:	d846      	bhi.n	801f5ce <__ieee754_atan2f+0x10e>
 801f540:	4b29      	ldr	r3, [pc, #164]	; (801f5e8 <__ieee754_atan2f+0x128>)
 801f542:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f546:	edd4 7a00 	vldr	s15, [r4]
 801f54a:	e7cc      	b.n	801f4e6 <__ieee754_atan2f+0x26>
 801f54c:	2c02      	cmp	r4, #2
 801f54e:	d841      	bhi.n	801f5d4 <__ieee754_atan2f+0x114>
 801f550:	4b26      	ldr	r3, [pc, #152]	; (801f5ec <__ieee754_atan2f+0x12c>)
 801f552:	e7f6      	b.n	801f542 <__ieee754_atan2f+0x82>
 801f554:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801f558:	d0df      	beq.n	801f51a <__ieee754_atan2f+0x5a>
 801f55a:	1a5b      	subs	r3, r3, r1
 801f55c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801f560:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801f564:	da1a      	bge.n	801f59c <__ieee754_atan2f+0xdc>
 801f566:	2a00      	cmp	r2, #0
 801f568:	da01      	bge.n	801f56e <__ieee754_atan2f+0xae>
 801f56a:	313c      	adds	r1, #60	; 0x3c
 801f56c:	db19      	blt.n	801f5a2 <__ieee754_atan2f+0xe2>
 801f56e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801f572:	f7ff fec1 	bl	801f2f8 <fabsf>
 801f576:	f7ff fdab 	bl	801f0d0 <atanf>
 801f57a:	eef0 7a40 	vmov.f32	s15, s0
 801f57e:	2c01      	cmp	r4, #1
 801f580:	d012      	beq.n	801f5a8 <__ieee754_atan2f+0xe8>
 801f582:	2c02      	cmp	r4, #2
 801f584:	d017      	beq.n	801f5b6 <__ieee754_atan2f+0xf6>
 801f586:	2c00      	cmp	r4, #0
 801f588:	d0ad      	beq.n	801f4e6 <__ieee754_atan2f+0x26>
 801f58a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801f5f0 <__ieee754_atan2f+0x130>
 801f58e:	ee77 7a80 	vadd.f32	s15, s15, s0
 801f592:	ed9f 0a18 	vldr	s0, [pc, #96]	; 801f5f4 <__ieee754_atan2f+0x134>
 801f596:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f59a:	e7a4      	b.n	801f4e6 <__ieee754_atan2f+0x26>
 801f59c:	eddf 7a10 	vldr	s15, [pc, #64]	; 801f5e0 <__ieee754_atan2f+0x120>
 801f5a0:	e7ed      	b.n	801f57e <__ieee754_atan2f+0xbe>
 801f5a2:	eddf 7a15 	vldr	s15, [pc, #84]	; 801f5f8 <__ieee754_atan2f+0x138>
 801f5a6:	e7ea      	b.n	801f57e <__ieee754_atan2f+0xbe>
 801f5a8:	ee17 3a90 	vmov	r3, s15
 801f5ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801f5b0:	ee07 3a90 	vmov	s15, r3
 801f5b4:	e797      	b.n	801f4e6 <__ieee754_atan2f+0x26>
 801f5b6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801f5f0 <__ieee754_atan2f+0x130>
 801f5ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 801f5be:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 801f5f4 <__ieee754_atan2f+0x134>
 801f5c2:	ee70 7a67 	vsub.f32	s15, s0, s15
 801f5c6:	e78e      	b.n	801f4e6 <__ieee754_atan2f+0x26>
 801f5c8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801f5f4 <__ieee754_atan2f+0x134>
 801f5cc:	e78b      	b.n	801f4e6 <__ieee754_atan2f+0x26>
 801f5ce:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801f5fc <__ieee754_atan2f+0x13c>
 801f5d2:	e788      	b.n	801f4e6 <__ieee754_atan2f+0x26>
 801f5d4:	eddf 7a08 	vldr	s15, [pc, #32]	; 801f5f8 <__ieee754_atan2f+0x138>
 801f5d8:	e785      	b.n	801f4e6 <__ieee754_atan2f+0x26>
 801f5da:	bf00      	nop
 801f5dc:	c0490fdb 	.word	0xc0490fdb
 801f5e0:	3fc90fdb 	.word	0x3fc90fdb
 801f5e4:	bfc90fdb 	.word	0xbfc90fdb
 801f5e8:	080210e4 	.word	0x080210e4
 801f5ec:	080210f0 	.word	0x080210f0
 801f5f0:	33bbbd2e 	.word	0x33bbbd2e
 801f5f4:	40490fdb 	.word	0x40490fdb
 801f5f8:	00000000 	.word	0x00000000
 801f5fc:	3f490fdb 	.word	0x3f490fdb

0801f600 <__ieee754_powf>:
 801f600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f604:	ee10 5a90 	vmov	r5, s1
 801f608:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 801f60c:	ed2d 8b02 	vpush	{d8}
 801f610:	eeb0 8a40 	vmov.f32	s16, s0
 801f614:	eef0 8a60 	vmov.f32	s17, s1
 801f618:	f000 8291 	beq.w	801fb3e <__ieee754_powf+0x53e>
 801f61c:	ee10 8a10 	vmov	r8, s0
 801f620:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 801f624:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801f628:	dc06      	bgt.n	801f638 <__ieee754_powf+0x38>
 801f62a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801f62e:	dd0a      	ble.n	801f646 <__ieee754_powf+0x46>
 801f630:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801f634:	f000 8283 	beq.w	801fb3e <__ieee754_powf+0x53e>
 801f638:	ecbd 8b02 	vpop	{d8}
 801f63c:	48d8      	ldr	r0, [pc, #864]	; (801f9a0 <__ieee754_powf+0x3a0>)
 801f63e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f642:	f7fb bfdd 	b.w	801b600 <nanf>
 801f646:	f1b8 0f00 	cmp.w	r8, #0
 801f64a:	da1f      	bge.n	801f68c <__ieee754_powf+0x8c>
 801f64c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801f650:	da2e      	bge.n	801f6b0 <__ieee754_powf+0xb0>
 801f652:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801f656:	f2c0 827b 	blt.w	801fb50 <__ieee754_powf+0x550>
 801f65a:	15fb      	asrs	r3, r7, #23
 801f65c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801f660:	fa47 f603 	asr.w	r6, r7, r3
 801f664:	fa06 f303 	lsl.w	r3, r6, r3
 801f668:	42bb      	cmp	r3, r7
 801f66a:	f040 8271 	bne.w	801fb50 <__ieee754_powf+0x550>
 801f66e:	f006 0601 	and.w	r6, r6, #1
 801f672:	f1c6 0602 	rsb	r6, r6, #2
 801f676:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801f67a:	d120      	bne.n	801f6be <__ieee754_powf+0xbe>
 801f67c:	2d00      	cmp	r5, #0
 801f67e:	f280 8264 	bge.w	801fb4a <__ieee754_powf+0x54a>
 801f682:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f686:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801f68a:	e00d      	b.n	801f6a8 <__ieee754_powf+0xa8>
 801f68c:	2600      	movs	r6, #0
 801f68e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801f692:	d1f0      	bne.n	801f676 <__ieee754_powf+0x76>
 801f694:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801f698:	f000 8251 	beq.w	801fb3e <__ieee754_powf+0x53e>
 801f69c:	dd0a      	ble.n	801f6b4 <__ieee754_powf+0xb4>
 801f69e:	2d00      	cmp	r5, #0
 801f6a0:	f280 8250 	bge.w	801fb44 <__ieee754_powf+0x544>
 801f6a4:	ed9f 0abf 	vldr	s0, [pc, #764]	; 801f9a4 <__ieee754_powf+0x3a4>
 801f6a8:	ecbd 8b02 	vpop	{d8}
 801f6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f6b0:	2602      	movs	r6, #2
 801f6b2:	e7ec      	b.n	801f68e <__ieee754_powf+0x8e>
 801f6b4:	2d00      	cmp	r5, #0
 801f6b6:	daf5      	bge.n	801f6a4 <__ieee754_powf+0xa4>
 801f6b8:	eeb1 0a68 	vneg.f32	s0, s17
 801f6bc:	e7f4      	b.n	801f6a8 <__ieee754_powf+0xa8>
 801f6be:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801f6c2:	d102      	bne.n	801f6ca <__ieee754_powf+0xca>
 801f6c4:	ee28 0a08 	vmul.f32	s0, s16, s16
 801f6c8:	e7ee      	b.n	801f6a8 <__ieee754_powf+0xa8>
 801f6ca:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 801f6ce:	eeb0 0a48 	vmov.f32	s0, s16
 801f6d2:	d108      	bne.n	801f6e6 <__ieee754_powf+0xe6>
 801f6d4:	f1b8 0f00 	cmp.w	r8, #0
 801f6d8:	db05      	blt.n	801f6e6 <__ieee754_powf+0xe6>
 801f6da:	ecbd 8b02 	vpop	{d8}
 801f6de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f6e2:	f000 bb89 	b.w	801fdf8 <__ieee754_sqrtf>
 801f6e6:	f7ff fe07 	bl	801f2f8 <fabsf>
 801f6ea:	b124      	cbz	r4, 801f6f6 <__ieee754_powf+0xf6>
 801f6ec:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 801f6f0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801f6f4:	d117      	bne.n	801f726 <__ieee754_powf+0x126>
 801f6f6:	2d00      	cmp	r5, #0
 801f6f8:	bfbc      	itt	lt
 801f6fa:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801f6fe:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801f702:	f1b8 0f00 	cmp.w	r8, #0
 801f706:	dacf      	bge.n	801f6a8 <__ieee754_powf+0xa8>
 801f708:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 801f70c:	ea54 0306 	orrs.w	r3, r4, r6
 801f710:	d104      	bne.n	801f71c <__ieee754_powf+0x11c>
 801f712:	ee70 7a40 	vsub.f32	s15, s0, s0
 801f716:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801f71a:	e7c5      	b.n	801f6a8 <__ieee754_powf+0xa8>
 801f71c:	2e01      	cmp	r6, #1
 801f71e:	d1c3      	bne.n	801f6a8 <__ieee754_powf+0xa8>
 801f720:	eeb1 0a40 	vneg.f32	s0, s0
 801f724:	e7c0      	b.n	801f6a8 <__ieee754_powf+0xa8>
 801f726:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801f72a:	3801      	subs	r0, #1
 801f72c:	ea56 0300 	orrs.w	r3, r6, r0
 801f730:	d104      	bne.n	801f73c <__ieee754_powf+0x13c>
 801f732:	ee38 8a48 	vsub.f32	s16, s16, s16
 801f736:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801f73a:	e7b5      	b.n	801f6a8 <__ieee754_powf+0xa8>
 801f73c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 801f740:	dd6b      	ble.n	801f81a <__ieee754_powf+0x21a>
 801f742:	4b99      	ldr	r3, [pc, #612]	; (801f9a8 <__ieee754_powf+0x3a8>)
 801f744:	429c      	cmp	r4, r3
 801f746:	dc06      	bgt.n	801f756 <__ieee754_powf+0x156>
 801f748:	2d00      	cmp	r5, #0
 801f74a:	daab      	bge.n	801f6a4 <__ieee754_powf+0xa4>
 801f74c:	ed9f 0a97 	vldr	s0, [pc, #604]	; 801f9ac <__ieee754_powf+0x3ac>
 801f750:	ee20 0a00 	vmul.f32	s0, s0, s0
 801f754:	e7a8      	b.n	801f6a8 <__ieee754_powf+0xa8>
 801f756:	4b96      	ldr	r3, [pc, #600]	; (801f9b0 <__ieee754_powf+0x3b0>)
 801f758:	429c      	cmp	r4, r3
 801f75a:	dd02      	ble.n	801f762 <__ieee754_powf+0x162>
 801f75c:	2d00      	cmp	r5, #0
 801f75e:	dcf5      	bgt.n	801f74c <__ieee754_powf+0x14c>
 801f760:	e7a0      	b.n	801f6a4 <__ieee754_powf+0xa4>
 801f762:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f766:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f76a:	eddf 6a92 	vldr	s13, [pc, #584]	; 801f9b4 <__ieee754_powf+0x3b4>
 801f76e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801f772:	eee0 6a67 	vfms.f32	s13, s0, s15
 801f776:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f77a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801f77e:	ee20 7a00 	vmul.f32	s14, s0, s0
 801f782:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f786:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 801f9b8 <__ieee754_powf+0x3b8>
 801f78a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801f78e:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 801f9bc <__ieee754_powf+0x3bc>
 801f792:	eee0 7a07 	vfma.f32	s15, s0, s14
 801f796:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801f9c0 <__ieee754_powf+0x3c0>
 801f79a:	eef0 6a67 	vmov.f32	s13, s15
 801f79e:	eee0 6a07 	vfma.f32	s13, s0, s14
 801f7a2:	ee16 3a90 	vmov	r3, s13
 801f7a6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801f7aa:	f023 030f 	bic.w	r3, r3, #15
 801f7ae:	ee00 3a90 	vmov	s1, r3
 801f7b2:	eee0 0a47 	vfms.f32	s1, s0, s14
 801f7b6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801f7ba:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 801f7be:	f025 050f 	bic.w	r5, r5, #15
 801f7c2:	ee07 5a10 	vmov	s14, r5
 801f7c6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801f7ca:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801f7ce:	ee07 3a90 	vmov	s15, r3
 801f7d2:	eee7 0a27 	vfma.f32	s1, s14, s15
 801f7d6:	3e01      	subs	r6, #1
 801f7d8:	ea56 0200 	orrs.w	r2, r6, r0
 801f7dc:	ee07 5a10 	vmov	s14, r5
 801f7e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f7e4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801f7e8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801f7ec:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801f7f0:	ee17 4a10 	vmov	r4, s14
 801f7f4:	bf08      	it	eq
 801f7f6:	eeb0 8a40 	vmoveq.f32	s16, s0
 801f7fa:	2c00      	cmp	r4, #0
 801f7fc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801f800:	f340 8184 	ble.w	801fb0c <__ieee754_powf+0x50c>
 801f804:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801f808:	f340 80fc 	ble.w	801fa04 <__ieee754_powf+0x404>
 801f80c:	eddf 7a67 	vldr	s15, [pc, #412]	; 801f9ac <__ieee754_powf+0x3ac>
 801f810:	ee28 0a27 	vmul.f32	s0, s16, s15
 801f814:	ee20 0a27 	vmul.f32	s0, s0, s15
 801f818:	e746      	b.n	801f6a8 <__ieee754_powf+0xa8>
 801f81a:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 801f81e:	bf01      	itttt	eq
 801f820:	eddf 7a68 	vldreq	s15, [pc, #416]	; 801f9c4 <__ieee754_powf+0x3c4>
 801f824:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801f828:	f06f 0217 	mvneq.w	r2, #23
 801f82c:	ee17 4a90 	vmoveq	r4, s15
 801f830:	ea4f 53e4 	mov.w	r3, r4, asr #23
 801f834:	bf18      	it	ne
 801f836:	2200      	movne	r2, #0
 801f838:	3b7f      	subs	r3, #127	; 0x7f
 801f83a:	4413      	add	r3, r2
 801f83c:	4a62      	ldr	r2, [pc, #392]	; (801f9c8 <__ieee754_powf+0x3c8>)
 801f83e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801f842:	4294      	cmp	r4, r2
 801f844:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 801f848:	dd06      	ble.n	801f858 <__ieee754_powf+0x258>
 801f84a:	4a60      	ldr	r2, [pc, #384]	; (801f9cc <__ieee754_powf+0x3cc>)
 801f84c:	4294      	cmp	r4, r2
 801f84e:	f340 80a4 	ble.w	801f99a <__ieee754_powf+0x39a>
 801f852:	3301      	adds	r3, #1
 801f854:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801f858:	2400      	movs	r4, #0
 801f85a:	4a5d      	ldr	r2, [pc, #372]	; (801f9d0 <__ieee754_powf+0x3d0>)
 801f85c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801f860:	ee07 1a90 	vmov	s15, r1
 801f864:	ed92 7a00 	vldr	s14, [r2]
 801f868:	4a5a      	ldr	r2, [pc, #360]	; (801f9d4 <__ieee754_powf+0x3d4>)
 801f86a:	ee37 6a27 	vadd.f32	s12, s14, s15
 801f86e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801f872:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801f876:	1049      	asrs	r1, r1, #1
 801f878:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801f87c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801f880:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801f884:	ee37 5ac7 	vsub.f32	s10, s15, s14
 801f888:	ee06 1a10 	vmov	s12, r1
 801f88c:	ee65 4a26 	vmul.f32	s9, s10, s13
 801f890:	ee36 7a47 	vsub.f32	s14, s12, s14
 801f894:	ee14 7a90 	vmov	r7, s9
 801f898:	4017      	ands	r7, r2
 801f89a:	ee05 7a90 	vmov	s11, r7
 801f89e:	eea5 5ac6 	vfms.f32	s10, s11, s12
 801f8a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f8a6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 801f9d8 <__ieee754_powf+0x3d8>
 801f8aa:	eea5 5ae7 	vfms.f32	s10, s11, s15
 801f8ae:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801f8b2:	ee25 6a26 	vmul.f32	s12, s10, s13
 801f8b6:	eddf 6a49 	vldr	s13, [pc, #292]	; 801f9dc <__ieee754_powf+0x3dc>
 801f8ba:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801f8be:	eddf 6a48 	vldr	s13, [pc, #288]	; 801f9e0 <__ieee754_powf+0x3e0>
 801f8c2:	eee7 6a27 	vfma.f32	s13, s14, s15
 801f8c6:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 801f9b4 <__ieee754_powf+0x3b4>
 801f8ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801f8ce:	eddf 6a45 	vldr	s13, [pc, #276]	; 801f9e4 <__ieee754_powf+0x3e4>
 801f8d2:	eee7 6a27 	vfma.f32	s13, s14, s15
 801f8d6:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801f9e8 <__ieee754_powf+0x3e8>
 801f8da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801f8de:	ee74 6aa5 	vadd.f32	s13, s9, s11
 801f8e2:	ee27 5aa7 	vmul.f32	s10, s15, s15
 801f8e6:	ee66 6a86 	vmul.f32	s13, s13, s12
 801f8ea:	eee5 6a07 	vfma.f32	s13, s10, s14
 801f8ee:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 801f8f2:	eef0 7a45 	vmov.f32	s15, s10
 801f8f6:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801f8fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f8fe:	ee17 1a90 	vmov	r1, s15
 801f902:	4011      	ands	r1, r2
 801f904:	ee07 1a90 	vmov	s15, r1
 801f908:	ee37 7ac5 	vsub.f32	s14, s15, s10
 801f90c:	eea5 7ae5 	vfms.f32	s14, s11, s11
 801f910:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801f914:	ee27 7a24 	vmul.f32	s14, s14, s9
 801f918:	eea6 7a27 	vfma.f32	s14, s12, s15
 801f91c:	eeb0 6a47 	vmov.f32	s12, s14
 801f920:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801f924:	ee16 1a10 	vmov	r1, s12
 801f928:	4011      	ands	r1, r2
 801f92a:	ee06 1a90 	vmov	s13, r1
 801f92e:	eee5 6ae7 	vfms.f32	s13, s11, s15
 801f932:	eddf 7a2e 	vldr	s15, [pc, #184]	; 801f9ec <__ieee754_powf+0x3ec>
 801f936:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801f9f0 <__ieee754_powf+0x3f0>
 801f93a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801f93e:	ee06 1a10 	vmov	s12, r1
 801f942:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f946:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801f9f4 <__ieee754_powf+0x3f4>
 801f94a:	492b      	ldr	r1, [pc, #172]	; (801f9f8 <__ieee754_powf+0x3f8>)
 801f94c:	eea6 7a27 	vfma.f32	s14, s12, s15
 801f950:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801f954:	edd1 7a00 	vldr	s15, [r1]
 801f958:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f95c:	ee07 3a90 	vmov	s15, r3
 801f960:	4b26      	ldr	r3, [pc, #152]	; (801f9fc <__ieee754_powf+0x3fc>)
 801f962:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801f966:	eef0 7a47 	vmov.f32	s15, s14
 801f96a:	eee6 7a25 	vfma.f32	s15, s12, s11
 801f96e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f972:	edd4 0a00 	vldr	s1, [r4]
 801f976:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801f97a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f97e:	ee17 3a90 	vmov	r3, s15
 801f982:	4013      	ands	r3, r2
 801f984:	ee07 3a90 	vmov	s15, r3
 801f988:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801f98c:	ee76 6ae0 	vsub.f32	s13, s13, s1
 801f990:	eee6 6a65 	vfms.f32	s13, s12, s11
 801f994:	ee77 7a66 	vsub.f32	s15, s14, s13
 801f998:	e70f      	b.n	801f7ba <__ieee754_powf+0x1ba>
 801f99a:	2401      	movs	r4, #1
 801f99c:	e75d      	b.n	801f85a <__ieee754_powf+0x25a>
 801f99e:	bf00      	nop
 801f9a0:	08021060 	.word	0x08021060
 801f9a4:	00000000 	.word	0x00000000
 801f9a8:	3f7ffff7 	.word	0x3f7ffff7
 801f9ac:	7149f2ca 	.word	0x7149f2ca
 801f9b0:	3f800007 	.word	0x3f800007
 801f9b4:	3eaaaaab 	.word	0x3eaaaaab
 801f9b8:	3fb8aa3b 	.word	0x3fb8aa3b
 801f9bc:	36eca570 	.word	0x36eca570
 801f9c0:	3fb8aa00 	.word	0x3fb8aa00
 801f9c4:	4b800000 	.word	0x4b800000
 801f9c8:	001cc471 	.word	0x001cc471
 801f9cc:	005db3d6 	.word	0x005db3d6
 801f9d0:	080210fc 	.word	0x080210fc
 801f9d4:	fffff000 	.word	0xfffff000
 801f9d8:	3e6c3255 	.word	0x3e6c3255
 801f9dc:	3e53f142 	.word	0x3e53f142
 801f9e0:	3e8ba305 	.word	0x3e8ba305
 801f9e4:	3edb6db7 	.word	0x3edb6db7
 801f9e8:	3f19999a 	.word	0x3f19999a
 801f9ec:	3f76384f 	.word	0x3f76384f
 801f9f0:	3f763800 	.word	0x3f763800
 801f9f4:	369dc3a0 	.word	0x369dc3a0
 801f9f8:	0802110c 	.word	0x0802110c
 801f9fc:	08021104 	.word	0x08021104
 801fa00:	3338aa3c 	.word	0x3338aa3c
 801fa04:	f040 8092 	bne.w	801fb2c <__ieee754_powf+0x52c>
 801fa08:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801fa00 <__ieee754_powf+0x400>
 801fa0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801fa10:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801fa14:	eef4 6ac7 	vcmpe.f32	s13, s14
 801fa18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fa1c:	f73f aef6 	bgt.w	801f80c <__ieee754_powf+0x20c>
 801fa20:	15db      	asrs	r3, r3, #23
 801fa22:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801fa26:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801fa2a:	4103      	asrs	r3, r0
 801fa2c:	4423      	add	r3, r4
 801fa2e:	4949      	ldr	r1, [pc, #292]	; (801fb54 <__ieee754_powf+0x554>)
 801fa30:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801fa34:	3a7f      	subs	r2, #127	; 0x7f
 801fa36:	4111      	asrs	r1, r2
 801fa38:	ea23 0101 	bic.w	r1, r3, r1
 801fa3c:	ee07 1a10 	vmov	s14, r1
 801fa40:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801fa44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801fa48:	f1c2 0217 	rsb	r2, r2, #23
 801fa4c:	4110      	asrs	r0, r2
 801fa4e:	2c00      	cmp	r4, #0
 801fa50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801fa54:	bfb8      	it	lt
 801fa56:	4240      	neglt	r0, r0
 801fa58:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801fa5c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 801fb58 <__ieee754_powf+0x558>
 801fa60:	ee17 3a10 	vmov	r3, s14
 801fa64:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801fa68:	f023 030f 	bic.w	r3, r3, #15
 801fa6c:	ee07 3a10 	vmov	s14, r3
 801fa70:	ee77 7a67 	vsub.f32	s15, s14, s15
 801fa74:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801fa78:	eddf 7a38 	vldr	s15, [pc, #224]	; 801fb5c <__ieee754_powf+0x55c>
 801fa7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801fa80:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801fa84:	eddf 6a36 	vldr	s13, [pc, #216]	; 801fb60 <__ieee754_powf+0x560>
 801fa88:	eeb0 0a67 	vmov.f32	s0, s15
 801fa8c:	eea7 0a26 	vfma.f32	s0, s14, s13
 801fa90:	eeb0 6a40 	vmov.f32	s12, s0
 801fa94:	eea7 6a66 	vfms.f32	s12, s14, s13
 801fa98:	ee20 7a00 	vmul.f32	s14, s0, s0
 801fa9c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801faa0:	eddf 6a30 	vldr	s13, [pc, #192]	; 801fb64 <__ieee754_powf+0x564>
 801faa4:	ed9f 6a30 	vldr	s12, [pc, #192]	; 801fb68 <__ieee754_powf+0x568>
 801faa8:	eea7 6a26 	vfma.f32	s12, s14, s13
 801faac:	eddf 6a2f 	vldr	s13, [pc, #188]	; 801fb6c <__ieee754_powf+0x56c>
 801fab0:	eee6 6a07 	vfma.f32	s13, s12, s14
 801fab4:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 801fb70 <__ieee754_powf+0x570>
 801fab8:	eea6 6a87 	vfma.f32	s12, s13, s14
 801fabc:	eddf 6a2d 	vldr	s13, [pc, #180]	; 801fb74 <__ieee754_powf+0x574>
 801fac0:	eee6 6a07 	vfma.f32	s13, s12, s14
 801fac4:	eeb0 6a40 	vmov.f32	s12, s0
 801fac8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801facc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801fad0:	eeb0 7a46 	vmov.f32	s14, s12
 801fad4:	ee77 6a66 	vsub.f32	s13, s14, s13
 801fad8:	ee20 6a06 	vmul.f32	s12, s0, s12
 801fadc:	eee0 7a27 	vfma.f32	s15, s0, s15
 801fae0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801fae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801fae8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801faec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801faf0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801faf4:	ee10 3a10 	vmov	r3, s0
 801faf8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801fafc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801fb00:	da1a      	bge.n	801fb38 <__ieee754_powf+0x538>
 801fb02:	f7fb fd83 	bl	801b60c <scalbnf>
 801fb06:	ee20 0a08 	vmul.f32	s0, s0, s16
 801fb0a:	e5cd      	b.n	801f6a8 <__ieee754_powf+0xa8>
 801fb0c:	4a1a      	ldr	r2, [pc, #104]	; (801fb78 <__ieee754_powf+0x578>)
 801fb0e:	4293      	cmp	r3, r2
 801fb10:	dd02      	ble.n	801fb18 <__ieee754_powf+0x518>
 801fb12:	eddf 7a1a 	vldr	s15, [pc, #104]	; 801fb7c <__ieee754_powf+0x57c>
 801fb16:	e67b      	b.n	801f810 <__ieee754_powf+0x210>
 801fb18:	d108      	bne.n	801fb2c <__ieee754_powf+0x52c>
 801fb1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801fb1e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801fb22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb26:	f6ff af7b 	blt.w	801fa20 <__ieee754_powf+0x420>
 801fb2a:	e7f2      	b.n	801fb12 <__ieee754_powf+0x512>
 801fb2c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801fb30:	f73f af76 	bgt.w	801fa20 <__ieee754_powf+0x420>
 801fb34:	2000      	movs	r0, #0
 801fb36:	e78f      	b.n	801fa58 <__ieee754_powf+0x458>
 801fb38:	ee00 3a10 	vmov	s0, r3
 801fb3c:	e7e3      	b.n	801fb06 <__ieee754_powf+0x506>
 801fb3e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801fb42:	e5b1      	b.n	801f6a8 <__ieee754_powf+0xa8>
 801fb44:	eeb0 0a68 	vmov.f32	s0, s17
 801fb48:	e5ae      	b.n	801f6a8 <__ieee754_powf+0xa8>
 801fb4a:	eeb0 0a48 	vmov.f32	s0, s16
 801fb4e:	e5ab      	b.n	801f6a8 <__ieee754_powf+0xa8>
 801fb50:	2600      	movs	r6, #0
 801fb52:	e590      	b.n	801f676 <__ieee754_powf+0x76>
 801fb54:	007fffff 	.word	0x007fffff
 801fb58:	3f317218 	.word	0x3f317218
 801fb5c:	35bfbe8c 	.word	0x35bfbe8c
 801fb60:	3f317200 	.word	0x3f317200
 801fb64:	3331bb4c 	.word	0x3331bb4c
 801fb68:	b5ddea0e 	.word	0xb5ddea0e
 801fb6c:	388ab355 	.word	0x388ab355
 801fb70:	bb360b61 	.word	0xbb360b61
 801fb74:	3e2aaaab 	.word	0x3e2aaaab
 801fb78:	43160000 	.word	0x43160000
 801fb7c:	0da24260 	.word	0x0da24260

0801fb80 <__ieee754_rem_pio2f>:
 801fb80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fb82:	ee10 6a10 	vmov	r6, s0
 801fb86:	4b8e      	ldr	r3, [pc, #568]	; (801fdc0 <__ieee754_rem_pio2f+0x240>)
 801fb88:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801fb8c:	429d      	cmp	r5, r3
 801fb8e:	b087      	sub	sp, #28
 801fb90:	eef0 7a40 	vmov.f32	s15, s0
 801fb94:	4604      	mov	r4, r0
 801fb96:	dc05      	bgt.n	801fba4 <__ieee754_rem_pio2f+0x24>
 801fb98:	2300      	movs	r3, #0
 801fb9a:	ed80 0a00 	vstr	s0, [r0]
 801fb9e:	6043      	str	r3, [r0, #4]
 801fba0:	2000      	movs	r0, #0
 801fba2:	e01a      	b.n	801fbda <__ieee754_rem_pio2f+0x5a>
 801fba4:	4b87      	ldr	r3, [pc, #540]	; (801fdc4 <__ieee754_rem_pio2f+0x244>)
 801fba6:	429d      	cmp	r5, r3
 801fba8:	dc46      	bgt.n	801fc38 <__ieee754_rem_pio2f+0xb8>
 801fbaa:	2e00      	cmp	r6, #0
 801fbac:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801fdc8 <__ieee754_rem_pio2f+0x248>
 801fbb0:	4b86      	ldr	r3, [pc, #536]	; (801fdcc <__ieee754_rem_pio2f+0x24c>)
 801fbb2:	f025 050f 	bic.w	r5, r5, #15
 801fbb6:	dd1f      	ble.n	801fbf8 <__ieee754_rem_pio2f+0x78>
 801fbb8:	429d      	cmp	r5, r3
 801fbba:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801fbbe:	d00e      	beq.n	801fbde <__ieee754_rem_pio2f+0x5e>
 801fbc0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801fdd0 <__ieee754_rem_pio2f+0x250>
 801fbc4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801fbc8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801fbcc:	ed80 0a00 	vstr	s0, [r0]
 801fbd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801fbd4:	2001      	movs	r0, #1
 801fbd6:	edc4 7a01 	vstr	s15, [r4, #4]
 801fbda:	b007      	add	sp, #28
 801fbdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fbde:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801fdd4 <__ieee754_rem_pio2f+0x254>
 801fbe2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801fdd8 <__ieee754_rem_pio2f+0x258>
 801fbe6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801fbea:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801fbee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801fbf2:	edc0 6a00 	vstr	s13, [r0]
 801fbf6:	e7eb      	b.n	801fbd0 <__ieee754_rem_pio2f+0x50>
 801fbf8:	429d      	cmp	r5, r3
 801fbfa:	ee77 7a80 	vadd.f32	s15, s15, s0
 801fbfe:	d00e      	beq.n	801fc1e <__ieee754_rem_pio2f+0x9e>
 801fc00:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801fdd0 <__ieee754_rem_pio2f+0x250>
 801fc04:	ee37 0a87 	vadd.f32	s0, s15, s14
 801fc08:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801fc0c:	ed80 0a00 	vstr	s0, [r0]
 801fc10:	ee77 7a87 	vadd.f32	s15, s15, s14
 801fc14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fc18:	edc4 7a01 	vstr	s15, [r4, #4]
 801fc1c:	e7dd      	b.n	801fbda <__ieee754_rem_pio2f+0x5a>
 801fc1e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801fdd4 <__ieee754_rem_pio2f+0x254>
 801fc22:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801fdd8 <__ieee754_rem_pio2f+0x258>
 801fc26:	ee77 7a80 	vadd.f32	s15, s15, s0
 801fc2a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801fc2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801fc32:	edc0 6a00 	vstr	s13, [r0]
 801fc36:	e7eb      	b.n	801fc10 <__ieee754_rem_pio2f+0x90>
 801fc38:	4b68      	ldr	r3, [pc, #416]	; (801fddc <__ieee754_rem_pio2f+0x25c>)
 801fc3a:	429d      	cmp	r5, r3
 801fc3c:	dc72      	bgt.n	801fd24 <__ieee754_rem_pio2f+0x1a4>
 801fc3e:	f7ff fb5b 	bl	801f2f8 <fabsf>
 801fc42:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801fde0 <__ieee754_rem_pio2f+0x260>
 801fc46:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801fc4a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801fc4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fc52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801fc56:	ee17 0a90 	vmov	r0, s15
 801fc5a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801fdc8 <__ieee754_rem_pio2f+0x248>
 801fc5e:	eea7 0a67 	vfms.f32	s0, s14, s15
 801fc62:	281f      	cmp	r0, #31
 801fc64:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801fdd0 <__ieee754_rem_pio2f+0x250>
 801fc68:	ee67 7a27 	vmul.f32	s15, s14, s15
 801fc6c:	eeb1 6a47 	vneg.f32	s12, s14
 801fc70:	ee70 6a67 	vsub.f32	s13, s0, s15
 801fc74:	ee16 2a90 	vmov	r2, s13
 801fc78:	dc1c      	bgt.n	801fcb4 <__ieee754_rem_pio2f+0x134>
 801fc7a:	495a      	ldr	r1, [pc, #360]	; (801fde4 <__ieee754_rem_pio2f+0x264>)
 801fc7c:	1e47      	subs	r7, r0, #1
 801fc7e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801fc82:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801fc86:	428b      	cmp	r3, r1
 801fc88:	d014      	beq.n	801fcb4 <__ieee754_rem_pio2f+0x134>
 801fc8a:	6022      	str	r2, [r4, #0]
 801fc8c:	ed94 7a00 	vldr	s14, [r4]
 801fc90:	ee30 0a47 	vsub.f32	s0, s0, s14
 801fc94:	2e00      	cmp	r6, #0
 801fc96:	ee30 0a67 	vsub.f32	s0, s0, s15
 801fc9a:	ed84 0a01 	vstr	s0, [r4, #4]
 801fc9e:	da9c      	bge.n	801fbda <__ieee754_rem_pio2f+0x5a>
 801fca0:	eeb1 7a47 	vneg.f32	s14, s14
 801fca4:	eeb1 0a40 	vneg.f32	s0, s0
 801fca8:	ed84 7a00 	vstr	s14, [r4]
 801fcac:	ed84 0a01 	vstr	s0, [r4, #4]
 801fcb0:	4240      	negs	r0, r0
 801fcb2:	e792      	b.n	801fbda <__ieee754_rem_pio2f+0x5a>
 801fcb4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801fcb8:	15eb      	asrs	r3, r5, #23
 801fcba:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801fcbe:	2d08      	cmp	r5, #8
 801fcc0:	dde3      	ble.n	801fc8a <__ieee754_rem_pio2f+0x10a>
 801fcc2:	eddf 7a44 	vldr	s15, [pc, #272]	; 801fdd4 <__ieee754_rem_pio2f+0x254>
 801fcc6:	eef0 6a40 	vmov.f32	s13, s0
 801fcca:	eee6 6a27 	vfma.f32	s13, s12, s15
 801fcce:	ee30 0a66 	vsub.f32	s0, s0, s13
 801fcd2:	eea6 0a27 	vfma.f32	s0, s12, s15
 801fcd6:	eddf 7a40 	vldr	s15, [pc, #256]	; 801fdd8 <__ieee754_rem_pio2f+0x258>
 801fcda:	ee97 0a27 	vfnms.f32	s0, s14, s15
 801fcde:	ee76 5ac0 	vsub.f32	s11, s13, s0
 801fce2:	eef0 7a40 	vmov.f32	s15, s0
 801fce6:	ee15 2a90 	vmov	r2, s11
 801fcea:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801fcee:	1a5b      	subs	r3, r3, r1
 801fcf0:	2b19      	cmp	r3, #25
 801fcf2:	dc04      	bgt.n	801fcfe <__ieee754_rem_pio2f+0x17e>
 801fcf4:	edc4 5a00 	vstr	s11, [r4]
 801fcf8:	eeb0 0a66 	vmov.f32	s0, s13
 801fcfc:	e7c6      	b.n	801fc8c <__ieee754_rem_pio2f+0x10c>
 801fcfe:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801fde8 <__ieee754_rem_pio2f+0x268>
 801fd02:	eeb0 0a66 	vmov.f32	s0, s13
 801fd06:	eea6 0a25 	vfma.f32	s0, s12, s11
 801fd0a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801fd0e:	eddf 6a37 	vldr	s13, [pc, #220]	; 801fdec <__ieee754_rem_pio2f+0x26c>
 801fd12:	eee6 7a25 	vfma.f32	s15, s12, s11
 801fd16:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801fd1a:	ee30 7a67 	vsub.f32	s14, s0, s15
 801fd1e:	ed84 7a00 	vstr	s14, [r4]
 801fd22:	e7b3      	b.n	801fc8c <__ieee754_rem_pio2f+0x10c>
 801fd24:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801fd28:	db06      	blt.n	801fd38 <__ieee754_rem_pio2f+0x1b8>
 801fd2a:	ee70 7a40 	vsub.f32	s15, s0, s0
 801fd2e:	edc0 7a01 	vstr	s15, [r0, #4]
 801fd32:	edc0 7a00 	vstr	s15, [r0]
 801fd36:	e733      	b.n	801fba0 <__ieee754_rem_pio2f+0x20>
 801fd38:	15ea      	asrs	r2, r5, #23
 801fd3a:	3a86      	subs	r2, #134	; 0x86
 801fd3c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801fd40:	ee07 3a90 	vmov	s15, r3
 801fd44:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801fd48:	eddf 6a29 	vldr	s13, [pc, #164]	; 801fdf0 <__ieee754_rem_pio2f+0x270>
 801fd4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801fd50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801fd54:	ed8d 7a03 	vstr	s14, [sp, #12]
 801fd58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801fd5c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801fd60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801fd64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801fd68:	ed8d 7a04 	vstr	s14, [sp, #16]
 801fd6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801fd70:	eef5 7a40 	vcmp.f32	s15, #0.0
 801fd74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd78:	edcd 7a05 	vstr	s15, [sp, #20]
 801fd7c:	d11e      	bne.n	801fdbc <__ieee754_rem_pio2f+0x23c>
 801fd7e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801fd82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd86:	bf14      	ite	ne
 801fd88:	2302      	movne	r3, #2
 801fd8a:	2301      	moveq	r3, #1
 801fd8c:	4919      	ldr	r1, [pc, #100]	; (801fdf4 <__ieee754_rem_pio2f+0x274>)
 801fd8e:	9101      	str	r1, [sp, #4]
 801fd90:	2102      	movs	r1, #2
 801fd92:	9100      	str	r1, [sp, #0]
 801fd94:	a803      	add	r0, sp, #12
 801fd96:	4621      	mov	r1, r4
 801fd98:	f000 f892 	bl	801fec0 <__kernel_rem_pio2f>
 801fd9c:	2e00      	cmp	r6, #0
 801fd9e:	f6bf af1c 	bge.w	801fbda <__ieee754_rem_pio2f+0x5a>
 801fda2:	edd4 7a00 	vldr	s15, [r4]
 801fda6:	eef1 7a67 	vneg.f32	s15, s15
 801fdaa:	edc4 7a00 	vstr	s15, [r4]
 801fdae:	edd4 7a01 	vldr	s15, [r4, #4]
 801fdb2:	eef1 7a67 	vneg.f32	s15, s15
 801fdb6:	edc4 7a01 	vstr	s15, [r4, #4]
 801fdba:	e779      	b.n	801fcb0 <__ieee754_rem_pio2f+0x130>
 801fdbc:	2303      	movs	r3, #3
 801fdbe:	e7e5      	b.n	801fd8c <__ieee754_rem_pio2f+0x20c>
 801fdc0:	3f490fd8 	.word	0x3f490fd8
 801fdc4:	4016cbe3 	.word	0x4016cbe3
 801fdc8:	3fc90f80 	.word	0x3fc90f80
 801fdcc:	3fc90fd0 	.word	0x3fc90fd0
 801fdd0:	37354443 	.word	0x37354443
 801fdd4:	37354400 	.word	0x37354400
 801fdd8:	2e85a308 	.word	0x2e85a308
 801fddc:	43490f80 	.word	0x43490f80
 801fde0:	3f22f984 	.word	0x3f22f984
 801fde4:	08021114 	.word	0x08021114
 801fde8:	2e85a300 	.word	0x2e85a300
 801fdec:	248d3132 	.word	0x248d3132
 801fdf0:	43800000 	.word	0x43800000
 801fdf4:	08021194 	.word	0x08021194

0801fdf8 <__ieee754_sqrtf>:
 801fdf8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801fdfc:	4770      	bx	lr
	...

0801fe00 <__kernel_cosf>:
 801fe00:	ee10 3a10 	vmov	r3, s0
 801fe04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fe08:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801fe0c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801fe10:	da05      	bge.n	801fe1e <__kernel_cosf+0x1e>
 801fe12:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801fe16:	ee17 2a90 	vmov	r2, s15
 801fe1a:	2a00      	cmp	r2, #0
 801fe1c:	d03d      	beq.n	801fe9a <__kernel_cosf+0x9a>
 801fe1e:	ee60 5a00 	vmul.f32	s11, s0, s0
 801fe22:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801fea0 <__kernel_cosf+0xa0>
 801fe26:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801fea4 <__kernel_cosf+0xa4>
 801fe2a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801fea8 <__kernel_cosf+0xa8>
 801fe2e:	4a1f      	ldr	r2, [pc, #124]	; (801feac <__kernel_cosf+0xac>)
 801fe30:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801fe34:	4293      	cmp	r3, r2
 801fe36:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801feb0 <__kernel_cosf+0xb0>
 801fe3a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801fe3e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801feb4 <__kernel_cosf+0xb4>
 801fe42:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801fe46:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801feb8 <__kernel_cosf+0xb8>
 801fe4a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801fe4e:	eeb0 7a66 	vmov.f32	s14, s13
 801fe52:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801fe56:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801fe5a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801fe5e:	ee67 6a25 	vmul.f32	s13, s14, s11
 801fe62:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801fe66:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801fe6a:	dc04      	bgt.n	801fe76 <__kernel_cosf+0x76>
 801fe6c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801fe70:	ee36 0a47 	vsub.f32	s0, s12, s14
 801fe74:	4770      	bx	lr
 801fe76:	4a11      	ldr	r2, [pc, #68]	; (801febc <__kernel_cosf+0xbc>)
 801fe78:	4293      	cmp	r3, r2
 801fe7a:	bfda      	itte	le
 801fe7c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801fe80:	ee06 3a90 	vmovle	s13, r3
 801fe84:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801fe88:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801fe8c:	ee36 0a66 	vsub.f32	s0, s12, s13
 801fe90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801fe94:	ee30 0a67 	vsub.f32	s0, s0, s15
 801fe98:	4770      	bx	lr
 801fe9a:	eeb0 0a46 	vmov.f32	s0, s12
 801fe9e:	4770      	bx	lr
 801fea0:	ad47d74e 	.word	0xad47d74e
 801fea4:	310f74f6 	.word	0x310f74f6
 801fea8:	3d2aaaab 	.word	0x3d2aaaab
 801feac:	3e999999 	.word	0x3e999999
 801feb0:	b493f27c 	.word	0xb493f27c
 801feb4:	37d00d01 	.word	0x37d00d01
 801feb8:	bab60b61 	.word	0xbab60b61
 801febc:	3f480000 	.word	0x3f480000

0801fec0 <__kernel_rem_pio2f>:
 801fec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fec4:	ed2d 8b04 	vpush	{d8-d9}
 801fec8:	b0d7      	sub	sp, #348	; 0x15c
 801feca:	4616      	mov	r6, r2
 801fecc:	4698      	mov	r8, r3
 801fece:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801fed0:	4bbb      	ldr	r3, [pc, #748]	; (80201c0 <__kernel_rem_pio2f+0x300>)
 801fed2:	9001      	str	r0, [sp, #4]
 801fed4:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801fed8:	1d33      	adds	r3, r6, #4
 801feda:	460d      	mov	r5, r1
 801fedc:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 801fee0:	db29      	blt.n	801ff36 <__kernel_rem_pio2f+0x76>
 801fee2:	1ef1      	subs	r1, r6, #3
 801fee4:	bf48      	it	mi
 801fee6:	1d31      	addmi	r1, r6, #4
 801fee8:	10c9      	asrs	r1, r1, #3
 801feea:	1c4c      	adds	r4, r1, #1
 801feec:	00e3      	lsls	r3, r4, #3
 801feee:	9302      	str	r3, [sp, #8]
 801fef0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801fef2:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80201d0 <__kernel_rem_pio2f+0x310>
 801fef6:	eba1 0009 	sub.w	r0, r1, r9
 801fefa:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 801fefe:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 801ff02:	eb07 0c09 	add.w	ip, r7, r9
 801ff06:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 801ff0a:	2300      	movs	r3, #0
 801ff0c:	4563      	cmp	r3, ip
 801ff0e:	dd14      	ble.n	801ff3a <__kernel_rem_pio2f+0x7a>
 801ff10:	ab1a      	add	r3, sp, #104	; 0x68
 801ff12:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 801ff16:	46cc      	mov	ip, r9
 801ff18:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 801ff1c:	f1c8 0b01 	rsb	fp, r8, #1
 801ff20:	eb0b 020c 	add.w	r2, fp, ip
 801ff24:	4297      	cmp	r7, r2
 801ff26:	db27      	blt.n	801ff78 <__kernel_rem_pio2f+0xb8>
 801ff28:	f8dd e004 	ldr.w	lr, [sp, #4]
 801ff2c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80201d0 <__kernel_rem_pio2f+0x310>
 801ff30:	4618      	mov	r0, r3
 801ff32:	2200      	movs	r2, #0
 801ff34:	e016      	b.n	801ff64 <__kernel_rem_pio2f+0xa4>
 801ff36:	2100      	movs	r1, #0
 801ff38:	e7d7      	b.n	801feea <__kernel_rem_pio2f+0x2a>
 801ff3a:	42d8      	cmn	r0, r3
 801ff3c:	bf5d      	ittte	pl
 801ff3e:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 801ff42:	ee07 2a90 	vmovpl	s15, r2
 801ff46:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801ff4a:	eef0 7a47 	vmovmi.f32	s15, s14
 801ff4e:	ecea 7a01 	vstmia	sl!, {s15}
 801ff52:	3301      	adds	r3, #1
 801ff54:	e7da      	b.n	801ff0c <__kernel_rem_pio2f+0x4c>
 801ff56:	ecfe 6a01 	vldmia	lr!, {s13}
 801ff5a:	ed90 7a00 	vldr	s14, [r0]
 801ff5e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ff62:	3201      	adds	r2, #1
 801ff64:	454a      	cmp	r2, r9
 801ff66:	f1a0 0004 	sub.w	r0, r0, #4
 801ff6a:	ddf4      	ble.n	801ff56 <__kernel_rem_pio2f+0x96>
 801ff6c:	ecea 7a01 	vstmia	sl!, {s15}
 801ff70:	3304      	adds	r3, #4
 801ff72:	f10c 0c01 	add.w	ip, ip, #1
 801ff76:	e7d3      	b.n	801ff20 <__kernel_rem_pio2f+0x60>
 801ff78:	ab06      	add	r3, sp, #24
 801ff7a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801ff7e:	9304      	str	r3, [sp, #16]
 801ff80:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801ff82:	eddf 8a92 	vldr	s17, [pc, #584]	; 80201cc <__kernel_rem_pio2f+0x30c>
 801ff86:	ed9f 9a90 	vldr	s18, [pc, #576]	; 80201c8 <__kernel_rem_pio2f+0x308>
 801ff8a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801ff8e:	9303      	str	r3, [sp, #12]
 801ff90:	46ba      	mov	sl, r7
 801ff92:	ab56      	add	r3, sp, #344	; 0x158
 801ff94:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801ff98:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 801ff9c:	ab06      	add	r3, sp, #24
 801ff9e:	4618      	mov	r0, r3
 801ffa0:	4652      	mov	r2, sl
 801ffa2:	2a00      	cmp	r2, #0
 801ffa4:	dc51      	bgt.n	802004a <__kernel_rem_pio2f+0x18a>
 801ffa6:	4620      	mov	r0, r4
 801ffa8:	9305      	str	r3, [sp, #20]
 801ffaa:	f7fb fb2f 	bl	801b60c <scalbnf>
 801ffae:	eeb0 8a40 	vmov.f32	s16, s0
 801ffb2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801ffb6:	ee28 0a00 	vmul.f32	s0, s16, s0
 801ffba:	f000 fa53 	bl	8020464 <floorf>
 801ffbe:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801ffc2:	eea0 8a67 	vfms.f32	s16, s0, s15
 801ffc6:	2c00      	cmp	r4, #0
 801ffc8:	9b05      	ldr	r3, [sp, #20]
 801ffca:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801ffce:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801ffd2:	edcd 7a00 	vstr	s15, [sp]
 801ffd6:	ee38 8a40 	vsub.f32	s16, s16, s0
 801ffda:	dd4b      	ble.n	8020074 <__kernel_rem_pio2f+0x1b4>
 801ffdc:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801ffe0:	aa06      	add	r2, sp, #24
 801ffe2:	f1c4 0e08 	rsb	lr, r4, #8
 801ffe6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801ffea:	ee17 1a90 	vmov	r1, s15
 801ffee:	fa42 f00e 	asr.w	r0, r2, lr
 801fff2:	4401      	add	r1, r0
 801fff4:	9100      	str	r1, [sp, #0]
 801fff6:	fa00 f00e 	lsl.w	r0, r0, lr
 801fffa:	a906      	add	r1, sp, #24
 801fffc:	1a12      	subs	r2, r2, r0
 801fffe:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8020002:	f1c4 0007 	rsb	r0, r4, #7
 8020006:	fa42 fb00 	asr.w	fp, r2, r0
 802000a:	f1bb 0f00 	cmp.w	fp, #0
 802000e:	dd43      	ble.n	8020098 <__kernel_rem_pio2f+0x1d8>
 8020010:	9a00      	ldr	r2, [sp, #0]
 8020012:	f04f 0e00 	mov.w	lr, #0
 8020016:	3201      	adds	r2, #1
 8020018:	9200      	str	r2, [sp, #0]
 802001a:	4670      	mov	r0, lr
 802001c:	45f2      	cmp	sl, lr
 802001e:	dc6c      	bgt.n	80200fa <__kernel_rem_pio2f+0x23a>
 8020020:	2c00      	cmp	r4, #0
 8020022:	dd04      	ble.n	802002e <__kernel_rem_pio2f+0x16e>
 8020024:	2c01      	cmp	r4, #1
 8020026:	d079      	beq.n	802011c <__kernel_rem_pio2f+0x25c>
 8020028:	2c02      	cmp	r4, #2
 802002a:	f000 8082 	beq.w	8020132 <__kernel_rem_pio2f+0x272>
 802002e:	f1bb 0f02 	cmp.w	fp, #2
 8020032:	d131      	bne.n	8020098 <__kernel_rem_pio2f+0x1d8>
 8020034:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8020038:	ee30 8a48 	vsub.f32	s16, s0, s16
 802003c:	b360      	cbz	r0, 8020098 <__kernel_rem_pio2f+0x1d8>
 802003e:	4620      	mov	r0, r4
 8020040:	f7fb fae4 	bl	801b60c <scalbnf>
 8020044:	ee38 8a40 	vsub.f32	s16, s16, s0
 8020048:	e026      	b.n	8020098 <__kernel_rem_pio2f+0x1d8>
 802004a:	ee60 7a28 	vmul.f32	s15, s0, s17
 802004e:	3a01      	subs	r2, #1
 8020050:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020054:	a942      	add	r1, sp, #264	; 0x108
 8020056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802005a:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 802005e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8020062:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8020066:	eca0 0a01 	vstmia	r0!, {s0}
 802006a:	ed9c 0a00 	vldr	s0, [ip]
 802006e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8020072:	e796      	b.n	801ffa2 <__kernel_rem_pio2f+0xe2>
 8020074:	d107      	bne.n	8020086 <__kernel_rem_pio2f+0x1c6>
 8020076:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 802007a:	a906      	add	r1, sp, #24
 802007c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8020080:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8020084:	e7c1      	b.n	802000a <__kernel_rem_pio2f+0x14a>
 8020086:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802008a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802008e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020092:	da2f      	bge.n	80200f4 <__kernel_rem_pio2f+0x234>
 8020094:	f04f 0b00 	mov.w	fp, #0
 8020098:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802009c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80200a0:	f040 8098 	bne.w	80201d4 <__kernel_rem_pio2f+0x314>
 80200a4:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80200a8:	469c      	mov	ip, r3
 80200aa:	2200      	movs	r2, #0
 80200ac:	45bc      	cmp	ip, r7
 80200ae:	da48      	bge.n	8020142 <__kernel_rem_pio2f+0x282>
 80200b0:	2a00      	cmp	r2, #0
 80200b2:	d05f      	beq.n	8020174 <__kernel_rem_pio2f+0x2b4>
 80200b4:	aa06      	add	r2, sp, #24
 80200b6:	3c08      	subs	r4, #8
 80200b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80200bc:	2900      	cmp	r1, #0
 80200be:	d07d      	beq.n	80201bc <__kernel_rem_pio2f+0x2fc>
 80200c0:	4620      	mov	r0, r4
 80200c2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80200c6:	9301      	str	r3, [sp, #4]
 80200c8:	f7fb faa0 	bl	801b60c <scalbnf>
 80200cc:	9b01      	ldr	r3, [sp, #4]
 80200ce:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80201cc <__kernel_rem_pio2f+0x30c>
 80200d2:	4619      	mov	r1, r3
 80200d4:	2900      	cmp	r1, #0
 80200d6:	f280 80af 	bge.w	8020238 <__kernel_rem_pio2f+0x378>
 80200da:	4618      	mov	r0, r3
 80200dc:	2400      	movs	r4, #0
 80200de:	2800      	cmp	r0, #0
 80200e0:	f2c0 80d0 	blt.w	8020284 <__kernel_rem_pio2f+0x3c4>
 80200e4:	a942      	add	r1, sp, #264	; 0x108
 80200e6:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 80200ea:	4a36      	ldr	r2, [pc, #216]	; (80201c4 <__kernel_rem_pio2f+0x304>)
 80200ec:	eddf 7a38 	vldr	s15, [pc, #224]	; 80201d0 <__kernel_rem_pio2f+0x310>
 80200f0:	2100      	movs	r1, #0
 80200f2:	e0bb      	b.n	802026c <__kernel_rem_pio2f+0x3ac>
 80200f4:	f04f 0b02 	mov.w	fp, #2
 80200f8:	e78a      	b.n	8020010 <__kernel_rem_pio2f+0x150>
 80200fa:	681a      	ldr	r2, [r3, #0]
 80200fc:	b948      	cbnz	r0, 8020112 <__kernel_rem_pio2f+0x252>
 80200fe:	b11a      	cbz	r2, 8020108 <__kernel_rem_pio2f+0x248>
 8020100:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020104:	601a      	str	r2, [r3, #0]
 8020106:	2201      	movs	r2, #1
 8020108:	f10e 0e01 	add.w	lr, lr, #1
 802010c:	3304      	adds	r3, #4
 802010e:	4610      	mov	r0, r2
 8020110:	e784      	b.n	802001c <__kernel_rem_pio2f+0x15c>
 8020112:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8020116:	601a      	str	r2, [r3, #0]
 8020118:	4602      	mov	r2, r0
 802011a:	e7f5      	b.n	8020108 <__kernel_rem_pio2f+0x248>
 802011c:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 8020120:	ab06      	add	r3, sp, #24
 8020122:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8020126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802012a:	aa06      	add	r2, sp, #24
 802012c:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8020130:	e77d      	b.n	802002e <__kernel_rem_pio2f+0x16e>
 8020132:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 8020136:	ab06      	add	r3, sp, #24
 8020138:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802013c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8020140:	e7f3      	b.n	802012a <__kernel_rem_pio2f+0x26a>
 8020142:	a906      	add	r1, sp, #24
 8020144:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8020148:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 802014c:	4302      	orrs	r2, r0
 802014e:	e7ad      	b.n	80200ac <__kernel_rem_pio2f+0x1ec>
 8020150:	3001      	adds	r0, #1
 8020152:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8020156:	2a00      	cmp	r2, #0
 8020158:	d0fa      	beq.n	8020150 <__kernel_rem_pio2f+0x290>
 802015a:	a91a      	add	r1, sp, #104	; 0x68
 802015c:	eb0a 0208 	add.w	r2, sl, r8
 8020160:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8020164:	f10a 0301 	add.w	r3, sl, #1
 8020168:	eb0a 0100 	add.w	r1, sl, r0
 802016c:	4299      	cmp	r1, r3
 802016e:	da04      	bge.n	802017a <__kernel_rem_pio2f+0x2ba>
 8020170:	468a      	mov	sl, r1
 8020172:	e70e      	b.n	801ff92 <__kernel_rem_pio2f+0xd2>
 8020174:	9b04      	ldr	r3, [sp, #16]
 8020176:	2001      	movs	r0, #1
 8020178:	e7eb      	b.n	8020152 <__kernel_rem_pio2f+0x292>
 802017a:	9803      	ldr	r0, [sp, #12]
 802017c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8020180:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8020184:	9000      	str	r0, [sp, #0]
 8020186:	ee07 0a90 	vmov	s15, r0
 802018a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802018e:	2000      	movs	r0, #0
 8020190:	ece2 7a01 	vstmia	r2!, {s15}
 8020194:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80201d0 <__kernel_rem_pio2f+0x310>
 8020198:	4696      	mov	lr, r2
 802019a:	4548      	cmp	r0, r9
 802019c:	dd06      	ble.n	80201ac <__kernel_rem_pio2f+0x2ec>
 802019e:	a842      	add	r0, sp, #264	; 0x108
 80201a0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80201a4:	edc0 7a00 	vstr	s15, [r0]
 80201a8:	3301      	adds	r3, #1
 80201aa:	e7df      	b.n	802016c <__kernel_rem_pio2f+0x2ac>
 80201ac:	ecfc 6a01 	vldmia	ip!, {s13}
 80201b0:	ed3e 7a01 	vldmdb	lr!, {s14}
 80201b4:	3001      	adds	r0, #1
 80201b6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80201ba:	e7ee      	b.n	802019a <__kernel_rem_pio2f+0x2da>
 80201bc:	3b01      	subs	r3, #1
 80201be:	e779      	b.n	80200b4 <__kernel_rem_pio2f+0x1f4>
 80201c0:	080214d8 	.word	0x080214d8
 80201c4:	080214ac 	.word	0x080214ac
 80201c8:	43800000 	.word	0x43800000
 80201cc:	3b800000 	.word	0x3b800000
 80201d0:	00000000 	.word	0x00000000
 80201d4:	9b02      	ldr	r3, [sp, #8]
 80201d6:	eeb0 0a48 	vmov.f32	s0, s16
 80201da:	1b98      	subs	r0, r3, r6
 80201dc:	f7fb fa16 	bl	801b60c <scalbnf>
 80201e0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80201c8 <__kernel_rem_pio2f+0x308>
 80201e4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80201e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201ec:	db1b      	blt.n	8020226 <__kernel_rem_pio2f+0x366>
 80201ee:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80201cc <__kernel_rem_pio2f+0x30c>
 80201f2:	ee60 7a27 	vmul.f32	s15, s0, s15
 80201f6:	aa06      	add	r2, sp, #24
 80201f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80201fc:	a906      	add	r1, sp, #24
 80201fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020202:	3408      	adds	r4, #8
 8020204:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8020208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802020c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8020210:	ee10 3a10 	vmov	r3, s0
 8020214:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8020218:	ee17 2a90 	vmov	r2, s15
 802021c:	f10a 0301 	add.w	r3, sl, #1
 8020220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8020224:	e74c      	b.n	80200c0 <__kernel_rem_pio2f+0x200>
 8020226:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802022a:	aa06      	add	r2, sp, #24
 802022c:	ee10 3a10 	vmov	r3, s0
 8020230:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8020234:	4653      	mov	r3, sl
 8020236:	e743      	b.n	80200c0 <__kernel_rem_pio2f+0x200>
 8020238:	aa42      	add	r2, sp, #264	; 0x108
 802023a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 802023e:	aa06      	add	r2, sp, #24
 8020240:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8020244:	9201      	str	r2, [sp, #4]
 8020246:	ee07 2a90 	vmov	s15, r2
 802024a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802024e:	3901      	subs	r1, #1
 8020250:	ee67 7a80 	vmul.f32	s15, s15, s0
 8020254:	ee20 0a07 	vmul.f32	s0, s0, s14
 8020258:	edc0 7a00 	vstr	s15, [r0]
 802025c:	e73a      	b.n	80200d4 <__kernel_rem_pio2f+0x214>
 802025e:	ecf2 6a01 	vldmia	r2!, {s13}
 8020262:	ecb6 7a01 	vldmia	r6!, {s14}
 8020266:	eee6 7a87 	vfma.f32	s15, s13, s14
 802026a:	3101      	adds	r1, #1
 802026c:	42b9      	cmp	r1, r7
 802026e:	dc01      	bgt.n	8020274 <__kernel_rem_pio2f+0x3b4>
 8020270:	428c      	cmp	r4, r1
 8020272:	daf4      	bge.n	802025e <__kernel_rem_pio2f+0x39e>
 8020274:	aa56      	add	r2, sp, #344	; 0x158
 8020276:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 802027a:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 802027e:	3801      	subs	r0, #1
 8020280:	3401      	adds	r4, #1
 8020282:	e72c      	b.n	80200de <__kernel_rem_pio2f+0x21e>
 8020284:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8020286:	2a02      	cmp	r2, #2
 8020288:	dc0a      	bgt.n	80202a0 <__kernel_rem_pio2f+0x3e0>
 802028a:	2a00      	cmp	r2, #0
 802028c:	dc61      	bgt.n	8020352 <__kernel_rem_pio2f+0x492>
 802028e:	d03c      	beq.n	802030a <__kernel_rem_pio2f+0x44a>
 8020290:	9b00      	ldr	r3, [sp, #0]
 8020292:	f003 0007 	and.w	r0, r3, #7
 8020296:	b057      	add	sp, #348	; 0x15c
 8020298:	ecbd 8b04 	vpop	{d8-d9}
 802029c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202a0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80202a2:	2a03      	cmp	r2, #3
 80202a4:	d1f4      	bne.n	8020290 <__kernel_rem_pio2f+0x3d0>
 80202a6:	aa2e      	add	r2, sp, #184	; 0xb8
 80202a8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80202ac:	4608      	mov	r0, r1
 80202ae:	461c      	mov	r4, r3
 80202b0:	2c00      	cmp	r4, #0
 80202b2:	f1a0 0004 	sub.w	r0, r0, #4
 80202b6:	dc59      	bgt.n	802036c <__kernel_rem_pio2f+0x4ac>
 80202b8:	4618      	mov	r0, r3
 80202ba:	2801      	cmp	r0, #1
 80202bc:	f1a1 0104 	sub.w	r1, r1, #4
 80202c0:	dc64      	bgt.n	802038c <__kernel_rem_pio2f+0x4cc>
 80202c2:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 80201d0 <__kernel_rem_pio2f+0x310>
 80202c6:	2b01      	cmp	r3, #1
 80202c8:	dc70      	bgt.n	80203ac <__kernel_rem_pio2f+0x4ec>
 80202ca:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80202ce:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80202d2:	f1bb 0f00 	cmp.w	fp, #0
 80202d6:	d172      	bne.n	80203be <__kernel_rem_pio2f+0x4fe>
 80202d8:	edc5 6a00 	vstr	s13, [r5]
 80202dc:	ed85 7a01 	vstr	s14, [r5, #4]
 80202e0:	edc5 7a02 	vstr	s15, [r5, #8]
 80202e4:	e7d4      	b.n	8020290 <__kernel_rem_pio2f+0x3d0>
 80202e6:	aa2e      	add	r2, sp, #184	; 0xb8
 80202e8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80202ec:	ed91 7a00 	vldr	s14, [r1]
 80202f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80202f4:	3b01      	subs	r3, #1
 80202f6:	2b00      	cmp	r3, #0
 80202f8:	daf5      	bge.n	80202e6 <__kernel_rem_pio2f+0x426>
 80202fa:	f1bb 0f00 	cmp.w	fp, #0
 80202fe:	d001      	beq.n	8020304 <__kernel_rem_pio2f+0x444>
 8020300:	eef1 7a67 	vneg.f32	s15, s15
 8020304:	edc5 7a00 	vstr	s15, [r5]
 8020308:	e7c2      	b.n	8020290 <__kernel_rem_pio2f+0x3d0>
 802030a:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80201d0 <__kernel_rem_pio2f+0x310>
 802030e:	e7f2      	b.n	80202f6 <__kernel_rem_pio2f+0x436>
 8020310:	aa2e      	add	r2, sp, #184	; 0xb8
 8020312:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8020316:	edd0 7a00 	vldr	s15, [r0]
 802031a:	ee37 7a27 	vadd.f32	s14, s14, s15
 802031e:	3901      	subs	r1, #1
 8020320:	2900      	cmp	r1, #0
 8020322:	daf5      	bge.n	8020310 <__kernel_rem_pio2f+0x450>
 8020324:	f1bb 0f00 	cmp.w	fp, #0
 8020328:	d017      	beq.n	802035a <__kernel_rem_pio2f+0x49a>
 802032a:	eef1 7a47 	vneg.f32	s15, s14
 802032e:	edc5 7a00 	vstr	s15, [r5]
 8020332:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8020336:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802033a:	a82f      	add	r0, sp, #188	; 0xbc
 802033c:	2101      	movs	r1, #1
 802033e:	428b      	cmp	r3, r1
 8020340:	da0e      	bge.n	8020360 <__kernel_rem_pio2f+0x4a0>
 8020342:	f1bb 0f00 	cmp.w	fp, #0
 8020346:	d001      	beq.n	802034c <__kernel_rem_pio2f+0x48c>
 8020348:	eef1 7a67 	vneg.f32	s15, s15
 802034c:	edc5 7a01 	vstr	s15, [r5, #4]
 8020350:	e79e      	b.n	8020290 <__kernel_rem_pio2f+0x3d0>
 8020352:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 80201d0 <__kernel_rem_pio2f+0x310>
 8020356:	4619      	mov	r1, r3
 8020358:	e7e2      	b.n	8020320 <__kernel_rem_pio2f+0x460>
 802035a:	eef0 7a47 	vmov.f32	s15, s14
 802035e:	e7e6      	b.n	802032e <__kernel_rem_pio2f+0x46e>
 8020360:	ecb0 7a01 	vldmia	r0!, {s14}
 8020364:	3101      	adds	r1, #1
 8020366:	ee77 7a87 	vadd.f32	s15, s15, s14
 802036a:	e7e8      	b.n	802033e <__kernel_rem_pio2f+0x47e>
 802036c:	edd0 7a00 	vldr	s15, [r0]
 8020370:	edd0 6a01 	vldr	s13, [r0, #4]
 8020374:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8020378:	3c01      	subs	r4, #1
 802037a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802037e:	ed80 7a00 	vstr	s14, [r0]
 8020382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020386:	edc0 7a01 	vstr	s15, [r0, #4]
 802038a:	e791      	b.n	80202b0 <__kernel_rem_pio2f+0x3f0>
 802038c:	edd1 7a00 	vldr	s15, [r1]
 8020390:	edd1 6a01 	vldr	s13, [r1, #4]
 8020394:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8020398:	3801      	subs	r0, #1
 802039a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802039e:	ed81 7a00 	vstr	s14, [r1]
 80203a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80203a6:	edc1 7a01 	vstr	s15, [r1, #4]
 80203aa:	e786      	b.n	80202ba <__kernel_rem_pio2f+0x3fa>
 80203ac:	aa2e      	add	r2, sp, #184	; 0xb8
 80203ae:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80203b2:	ed91 7a00 	vldr	s14, [r1]
 80203b6:	3b01      	subs	r3, #1
 80203b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80203bc:	e783      	b.n	80202c6 <__kernel_rem_pio2f+0x406>
 80203be:	eef1 6a66 	vneg.f32	s13, s13
 80203c2:	eeb1 7a47 	vneg.f32	s14, s14
 80203c6:	edc5 6a00 	vstr	s13, [r5]
 80203ca:	ed85 7a01 	vstr	s14, [r5, #4]
 80203ce:	eef1 7a67 	vneg.f32	s15, s15
 80203d2:	e785      	b.n	80202e0 <__kernel_rem_pio2f+0x420>

080203d4 <__kernel_sinf>:
 80203d4:	ee10 3a10 	vmov	r3, s0
 80203d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80203dc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80203e0:	da04      	bge.n	80203ec <__kernel_sinf+0x18>
 80203e2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80203e6:	ee17 3a90 	vmov	r3, s15
 80203ea:	b35b      	cbz	r3, 8020444 <__kernel_sinf+0x70>
 80203ec:	ee20 7a00 	vmul.f32	s14, s0, s0
 80203f0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8020448 <__kernel_sinf+0x74>
 80203f4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 802044c <__kernel_sinf+0x78>
 80203f8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80203fc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8020450 <__kernel_sinf+0x7c>
 8020400:	eee6 7a07 	vfma.f32	s15, s12, s14
 8020404:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8020454 <__kernel_sinf+0x80>
 8020408:	eea7 6a87 	vfma.f32	s12, s15, s14
 802040c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8020458 <__kernel_sinf+0x84>
 8020410:	ee60 6a07 	vmul.f32	s13, s0, s14
 8020414:	eee6 7a07 	vfma.f32	s15, s12, s14
 8020418:	b930      	cbnz	r0, 8020428 <__kernel_sinf+0x54>
 802041a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 802045c <__kernel_sinf+0x88>
 802041e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8020422:	eea6 0a26 	vfma.f32	s0, s12, s13
 8020426:	4770      	bx	lr
 8020428:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802042c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8020430:	eee0 7a86 	vfma.f32	s15, s1, s12
 8020434:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8020438:	eddf 7a09 	vldr	s15, [pc, #36]	; 8020460 <__kernel_sinf+0x8c>
 802043c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8020440:	ee30 0a60 	vsub.f32	s0, s0, s1
 8020444:	4770      	bx	lr
 8020446:	bf00      	nop
 8020448:	2f2ec9d3 	.word	0x2f2ec9d3
 802044c:	b2d72f34 	.word	0xb2d72f34
 8020450:	3638ef1b 	.word	0x3638ef1b
 8020454:	b9500d01 	.word	0xb9500d01
 8020458:	3c088889 	.word	0x3c088889
 802045c:	be2aaaab 	.word	0xbe2aaaab
 8020460:	3e2aaaab 	.word	0x3e2aaaab

08020464 <floorf>:
 8020464:	ee10 3a10 	vmov	r3, s0
 8020468:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802046c:	3a7f      	subs	r2, #127	; 0x7f
 802046e:	2a16      	cmp	r2, #22
 8020470:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8020474:	dc2a      	bgt.n	80204cc <floorf+0x68>
 8020476:	2a00      	cmp	r2, #0
 8020478:	da11      	bge.n	802049e <floorf+0x3a>
 802047a:	eddf 7a18 	vldr	s15, [pc, #96]	; 80204dc <floorf+0x78>
 802047e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8020482:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8020486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802048a:	dd05      	ble.n	8020498 <floorf+0x34>
 802048c:	2b00      	cmp	r3, #0
 802048e:	da23      	bge.n	80204d8 <floorf+0x74>
 8020490:	4a13      	ldr	r2, [pc, #76]	; (80204e0 <floorf+0x7c>)
 8020492:	2900      	cmp	r1, #0
 8020494:	bf18      	it	ne
 8020496:	4613      	movne	r3, r2
 8020498:	ee00 3a10 	vmov	s0, r3
 802049c:	4770      	bx	lr
 802049e:	4911      	ldr	r1, [pc, #68]	; (80204e4 <floorf+0x80>)
 80204a0:	4111      	asrs	r1, r2
 80204a2:	420b      	tst	r3, r1
 80204a4:	d0fa      	beq.n	802049c <floorf+0x38>
 80204a6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80204dc <floorf+0x78>
 80204aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80204ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80204b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204b6:	ddef      	ble.n	8020498 <floorf+0x34>
 80204b8:	2b00      	cmp	r3, #0
 80204ba:	bfbe      	ittt	lt
 80204bc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80204c0:	fa40 f202 	asrlt.w	r2, r0, r2
 80204c4:	189b      	addlt	r3, r3, r2
 80204c6:	ea23 0301 	bic.w	r3, r3, r1
 80204ca:	e7e5      	b.n	8020498 <floorf+0x34>
 80204cc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80204d0:	d3e4      	bcc.n	802049c <floorf+0x38>
 80204d2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80204d6:	4770      	bx	lr
 80204d8:	2300      	movs	r3, #0
 80204da:	e7dd      	b.n	8020498 <floorf+0x34>
 80204dc:	7149f2ca 	.word	0x7149f2ca
 80204e0:	bf800000 	.word	0xbf800000
 80204e4:	007fffff 	.word	0x007fffff

080204e8 <rintf>:
 80204e8:	ee10 2a10 	vmov	r2, s0
 80204ec:	b513      	push	{r0, r1, r4, lr}
 80204ee:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80204f2:	397f      	subs	r1, #127	; 0x7f
 80204f4:	2916      	cmp	r1, #22
 80204f6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80204fa:	dc47      	bgt.n	802058c <rintf+0xa4>
 80204fc:	b32b      	cbz	r3, 802054a <rintf+0x62>
 80204fe:	2900      	cmp	r1, #0
 8020500:	ee10 3a10 	vmov	r3, s0
 8020504:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8020508:	da21      	bge.n	802054e <rintf+0x66>
 802050a:	f3c2 0316 	ubfx	r3, r2, #0, #23
 802050e:	425b      	negs	r3, r3
 8020510:	4921      	ldr	r1, [pc, #132]	; (8020598 <rintf+0xb0>)
 8020512:	0a5b      	lsrs	r3, r3, #9
 8020514:	0d12      	lsrs	r2, r2, #20
 8020516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802051a:	0512      	lsls	r2, r2, #20
 802051c:	4313      	orrs	r3, r2
 802051e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8020522:	ee07 3a90 	vmov	s15, r3
 8020526:	edd1 6a00 	vldr	s13, [r1]
 802052a:	ee36 7aa7 	vadd.f32	s14, s13, s15
 802052e:	ed8d 7a01 	vstr	s14, [sp, #4]
 8020532:	eddd 7a01 	vldr	s15, [sp, #4]
 8020536:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802053a:	ee17 3a90 	vmov	r3, s15
 802053e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020542:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8020546:	ee00 3a10 	vmov	s0, r3
 802054a:	b002      	add	sp, #8
 802054c:	bd10      	pop	{r4, pc}
 802054e:	4a13      	ldr	r2, [pc, #76]	; (802059c <rintf+0xb4>)
 8020550:	410a      	asrs	r2, r1
 8020552:	4213      	tst	r3, r2
 8020554:	d0f9      	beq.n	802054a <rintf+0x62>
 8020556:	0854      	lsrs	r4, r2, #1
 8020558:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 802055c:	d006      	beq.n	802056c <rintf+0x84>
 802055e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8020562:	ea23 0304 	bic.w	r3, r3, r4
 8020566:	fa42 f101 	asr.w	r1, r2, r1
 802056a:	430b      	orrs	r3, r1
 802056c:	4a0a      	ldr	r2, [pc, #40]	; (8020598 <rintf+0xb0>)
 802056e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8020572:	ed90 7a00 	vldr	s14, [r0]
 8020576:	ee07 3a90 	vmov	s15, r3
 802057a:	ee77 7a27 	vadd.f32	s15, s14, s15
 802057e:	edcd 7a01 	vstr	s15, [sp, #4]
 8020582:	ed9d 0a01 	vldr	s0, [sp, #4]
 8020586:	ee30 0a47 	vsub.f32	s0, s0, s14
 802058a:	e7de      	b.n	802054a <rintf+0x62>
 802058c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8020590:	d3db      	bcc.n	802054a <rintf+0x62>
 8020592:	ee30 0a00 	vadd.f32	s0, s0, s0
 8020596:	e7d8      	b.n	802054a <rintf+0x62>
 8020598:	080214e4 	.word	0x080214e4
 802059c:	007fffff 	.word	0x007fffff

080205a0 <_init>:
 80205a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80205a2:	bf00      	nop
 80205a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80205a6:	bc08      	pop	{r3}
 80205a8:	469e      	mov	lr, r3
 80205aa:	4770      	bx	lr

080205ac <_fini>:
 80205ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80205ae:	bf00      	nop
 80205b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80205b2:	bc08      	pop	{r3}
 80205b4:	469e      	mov	lr, r3
 80205b6:	4770      	bx	lr
